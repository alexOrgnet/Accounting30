#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",           Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",               Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
							
	Возврат Результат;
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Если ПараметрыОтчета.Периодичность = 0 Тогда
		Заголовок =  "Анализ движений денежных средств"
			+ БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	Иначе
		Заголовок = "Анализ движений денежных средств по периодам"
			+ БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоКД", ВидыСубконтоКД);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	КонецЕсли;
	
	ВедетсяУчетПоВалютам = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВедетсяУчетПоВалютам", ВедетсяУчетПоВалютам);

	Периодичность = ПараметрыОтчета.Периодичность;
	
	ПолеПериода = Новый Структура;
	ПолеПериода.Вставить("Поле", ИмяПоляПериода(Периодичность));
	ПолеПериода.Вставить("ТипГруппировки", 0);
	
	ПереопределитьПериодРасшифровки(Схема.Макеты, ПолеПериода.Поле);
	
	ВыводитьДиаграмму = Неопределено;
	
	Если Не ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Ложь;
		
	КонецЕсли;

	Таблица                      = Неопределено;
	ДиаграммаСводныеДанные       = Неопределено;
	ДиаграммаПоступлениеЗаПериод = Неопределено;
	ДиаграммаСписаниеЗаПериод    = Неопределено;
	ДиаграммаПоступление         = Неопределено;
	ДиаграммаСписание            = Неопределено;
	
	СтруктураДиаграмм = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "ДиаграммаСводныеДанные" Тогда
			ДиаграммаСводныеДанные = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаПоступление" Тогда
			ДиаграммаПоступление = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаСписание" Тогда
			ДиаграммаСписание = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаПоступлениеЗаПериод" Тогда
			ДиаграммаПоступлениеЗаПериод = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаСписаниеЗаПериод" Тогда
			ДиаграммаСписаниеЗаПериод = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Имя <> "Таблица" Тогда
			СтруктураДиаграмм.Вставить(ЭлементСтруктуры.Имя, ЭлементСтруктуры);
		КонецЕсли;
		
	КонецЦикла;
	
	// Диаграммы
	Если ВыводитьДиаграмму Тогда
		
		Если ДиаграммаПоступление <> Неопределено Тогда

			ДобавитьДиаграмму(ДиаграммаПоступление, ПараметрыОтчета, 2);
			
		КонецЕсли;
		
		Если ДиаграммаСписание <> Неопределено Тогда
			
			ДобавитьДиаграмму(ДиаграммаСписание, ПараметрыОтчета, 3);
			
		КонецЕсли;
		
		Если ДиаграммаСводныеДанные <> Неопределено Тогда
			
			МассивЗначенийОтбора = Новый Массив;
			МассивЗначенийОтбора.Добавить(2);
			МассивЗначенийОтбора.Добавить(3);

			ДобавитьДиаграммуЗаПериод(ДиаграммаСводныеДанные, ПараметрыОтчета, МассивЗначенийОтбора, "ВидОперации");
			
		КонецЕсли;
		
		Если ДиаграммаПоступлениеЗаПериод <> Неопределено Тогда
			
			ДобавитьДиаграммуЗаПериод(ДиаграммаПоступлениеЗаПериод, ПараметрыОтчета, 2);
			
		КонецЕсли;
		
		Если ДиаграммаСписаниеЗаПериод <> Неопределено Тогда
			
			ДобавитьДиаграммуЗаПериод(ДиаграммаСписаниеЗаПериод, ПараметрыОтчета, 3);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Диаграмма Из СтруктураДиаграмм Цикл
			Диаграмма.Значение.Использование = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		
		Если Периодичность > 0 Тогда
			Таблица.Колонки.Очистить();
			Колонки = Таблица.Колонки;
			КолонкаГруппировки = ДобавитьГруппировку(Колонки, ПолеПериода, "Период");
		КонецЕсли;
		
		ПодготовленныеГруппировки = ДобавитьОбязательныеГруппировки(Группировка, ПараметрыОтчета, ПолеПериода.Поле);
		
		РодительскаяГруппировкаПоступление = ПодготовленныеГруппировки.Поступление;
		РодительскаяГруппировкаСписание = ПодготовленныеГруппировки.Списание;
		
		МассивГруппировок = Новый Массив;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			
			Если Не ПолеВыбраннойГруппировки.Использование Или
				ПолеВыбраннойГруппировки.Поле = "ВидОперации" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивГруппировок.Добавить(ПолеВыбраннойГруппировки.Представление);
			
			СтрокаГруппировки = ДобавитьГруппировку(РодительскаяГруппировкаПоступление, ПолеВыбраннойГруппировки);
			РодительскаяГруппировкаПоступление = СтрокаГруппировки;
			
			СтрокаГруппировки = ДобавитьГруппировку(РодительскаяГруппировкаСписание, ПолеВыбраннойГруппировки);
			РодительскаяГруппировкаСписание = СтрокаГруппировки;
			
		КонецЦикла;
		
		// Заголовок сделаем минимум на 2 строки
		Если МассивГруппировок.Количество() = 1 Тогда
			МассивГруппировок.Добавить(Символы.ПС);
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Группировка", СтрСоединить(МассивГруппировок, Символы.ПС));
		
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	ВыводитьДиаграмму = Неопределено;
	
	Если Не ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Ложь;
		
	КонецЕсли;
	
	Если ВыводитьДиаграмму Тогда
		
		СтруктураОтчета = ПараметрыОтчета.НастройкиКомпоновкиДанных.Структура;
		
		ИндексДиаграммы = 0;
		
		ВерхДиаграммы = 0;
		ШиринаДиаграммы = 0;
		ПоложениеЛевойГраницы = 0;
		
		УдаляемаяОбластьВерх = 0;
		УдаляемаяОбластьНиз = 0;
		
		Для Каждого ДиаграммаИзСтруктуры Из СтруктураОтчета Цикл
			
			Если ТипЗнч(ДиаграммаИзСтруктуры) <> Тип("ДиаграммаКомпоновкиДанных") 
				Или Не ДиаграммаИзСтруктуры.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Рисунок = Результат.Рисунки[ИндексДиаграммы];
			
			Диаграмма = Рисунок.Объект;
			
			Если ДиаграммаИзСтруктуры.Имя = "ДиаграммаСводныеДанные" Тогда
				
				БухгалтерскиеОтчетыВызовСервера.ИзменитьРазмерДиаграммы(Результат, Рисунок, 0.9, 0.65);
				
			Иначе
				
				БухгалтерскиеОтчетыВызовСервера.ИзменитьРазмерДиаграммы(Результат, Рисунок, 0.45, 0.65);
				
				Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
				Диаграмма.МаксимумСерийКоличество = 5;
				Диаграмма.СводнаяСерия.Текст = "Прочее";
				
				Диаграмма.ОбластьПостроения.Расположение = РасположениеОбластиПостроенияДиаграммы.УказываетсяРасположение;
				Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.УказываетсяРасположение;
				
				Диаграмма.ОбластьПостроения.Право = 0.6;
				Диаграмма.ОбластьЛегенды.Лево = 0.6;
				
				Если ВерхДиаграммы = 0 Тогда
					ВерхДиаграммы = Рисунок.Верх;
				Иначе
					УдаляемаяОбластьВерх = Рисунок.Верх;
					УдаляемаяОбластьНиз = Рисунок.Верх + Рисунок.Высота;
					Рисунок.Верх = ВерхДиаграммы;
				КонецЕсли;

				Если ПоложениеЛевойГраницы = 0 Тогда
					ШиринаДиаграммы = Рисунок.Ширина;
					ПоложениеЛевойГраницы = Рисунок.Ширина + 1;
				Иначе
					Рисунок.Лево = ПоложениеЛевойГраницы;
					Рисунок.Ширина = ШиринаДиаграммы;
					ПоложениеЛевойГраницы = ПоложениеЛевойГраницы + ПоложениеЛевойГраницы + 1;
				КонецЕсли;
				
				// Удаление оставшейся пустоты
				Если УдаляемаяОбластьВерх <> 0 
					И УдаляемаяОбластьНиз <> 0 Тогда
					
					ИмяУдаляемойОбласти = БухгалтерскиеОтчетыВызовСервера.ИмяОбласти(Результат, УдаляемаяОбластьВерх, УдаляемаяОбластьНиз);
					
					УдаляемаяОбласть = Результат.Область(ИмяУдаляемойОбласти);
					Результат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					УдаляемаяОбластьВерх = 0;
					УдаляемаяОбластьНиз = 0;
				КонецЕсли;
			КонецЕсли;
			
			Заголовок = Диаграмма.ОбластьЗаголовка;
			Заголовок.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
			Заголовок.Текст = ЗаголовокДиаграммы(ДиаграммаИзСтруктуры.Имя);
			
			Диаграмма.ОбластьПостроения.Верх = Диаграмма.ОбластьЗаголовка.Низ;
			Диаграмма.ОбластьПостроения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
			Диаграмма.ОбластьЛегенды.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
			
			ИндексДиаграммы = ИндексДиаграммы + 1;
		КонецЦикла;
	КонецЕсли;
	
	БыстрыеНастройкиОтчетовСервер.ВывестиПримечанияОкругления(ПараметрыОтчета, Результат);

КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализДвиженийДенежныхСредств");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.ДенежныеСредства, "");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализДвиженийДенежныхСредствПоПериодам");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.ДенежныеСредства, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//	ПараметрыРасшифровки - Структура - Коллеккция параметров расшифроки, которую требуется заполнить. 
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
		
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОтчета.Объект;
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	
	ТекущиеРодителиРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей();
	
	ТекущаяГруппировка = Неопределено;
		
	// Нас интересует самый первый родитель
	Если ТекущиеРодителиРасшифровки.Количество() > 0 Тогда
		ПоляГруппировки = ТекущиеРодителиРасшифровки[0].ПолучитьПоля();
		Если ПоляГруппировки.Количество() > 0 Тогда
			ТекущаяГруппировка =  ПоляГруппировки[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяГруппировка = Неопределено 
		Или ТекущаяГруппировка.Поле = "ВидОперации" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		
		Если Не Элемент.Использование 
			Или СтрНайти(Элемент.Представление, "###ОтборПоОрганизации###") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОтбора = ПользовательскиеОтборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		
	КонецЦикла;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация"     , ОтчетОбъект.Организация);

	Период        = Неопределено;
	ПолеПериод   = ИмяПоляПериода(ОтчетОбъект.Периодичность);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	ЭтоОстаткиДенежныхСредств = Ложь;
	
 	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			
			Если Отбор.Значение = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Поле = "Период" Тогда
				Период = Отбор.Значение;
			ИначеЕсли Отбор.Поле = "НачальныйОстаток"
				Или Отбор.Поле = "КонечныйОстаток" Тогда
				Период = ПериодРасшифровки(Период, Отбор, ОтчетОбъект);
			КонецЕсли;
			
			Если Отбор.Поле = "ВидДвижения" 
				Или Отбор.Поле = "СтатьяДвиженияДенежныхСредств" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДвижения")
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("ВидДвижения", Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДвиженияДенежныхСредств") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательПлательщик") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("ПолучательПлательщик", Отбор.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяГруппировка.Поле = "НачальныйОстаток"
		Или ТекущаяГруппировка.Поле = "КонечныйОстаток" Тогда
		
		ДополнительныеСвойства.Вставить("Период", Период);
		ДополнительныеСвойства.Вставить("КлючВарианта", "ОстаткиДенежныхСредств");
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ОстаткиДенежныхСредств", "Остатки денежных средств");
		
		НастройкиРасшифровки = Новый Структура("ОстаткиДенежныхСредств", ПользовательскиеНастройки);

		ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь); 

	ИначеЕсли ТекущаяГруппировка.Поле = "ВидДвижения"
		Или ТекущаяГруппировка.Поле = "СтатьяДвиженияДенежныхСредств" Тогда
		
		ДополнительныеСвойства.Вставить("НачалоПериода",     ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода",      ОтчетОбъект.КонецПериода);
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ОтчетОбъект.ВыводитьЗаголовок);
		ДополнительныеСвойства.Вставить("ВыводитьПодвал",    ОтчетОбъект.ВыводитьПодвал);
		ДополнительныеСвойства.Вставить("МакетОформления",   ОтчетОбъект.МакетОформления);
		ДополнительныеСвойства.Вставить("Периодичность",     ОтчетОбъект.Периодичность);
		ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", Ложь);

		СписокПунктовМеню = Новый СписокЗначений;
		
		Если ОтчетОбъект.Периодичность = 0 Тогда
			СписокПунктовМеню.Добавить("АнализДвиженийДенежныхСредств", "Анализ движений денежных средств");
			ДополнительныеСвойства.Вставить("КлючВарианта", "АнализДвиженийДенежныхСредствПоПлательщикамПолучателям");
		Иначе
			СписокПунктовМеню.Добавить("АнализДвиженийДенежныхСредств", "Анализ движений денежных средств по периодам");
			ДополнительныеСвойства.Вставить("КлючВарианта", "АнализДвиженийДенежныхСредствПоПериодамПоПлательщикамПолучателям");
		КонецЕсли;
		
		Если ОтчетОбъект.КлючТекущегоВарианта <> ДополнительныеСвойства.КлючВарианта Тогда
			НастройкиРасшифровки = Новый Структура("АнализДвиженийДенежныхСредств", ПользовательскиеНастройки);
			
			ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
			
			Адрес = ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		КонецЕсли;
		
	ИначеЕсли ТекущаяГруппировка.Поле = "ДокументОплаты" Тогда
		Если ТекущаяГруппировка.Значение <> NULL Тогда
			ПараметрыРасшифровки.Вставить("Значение", ТекущаяГруппировка.Значение);
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу данных для монитора руководителя по организации за период
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаКон - Дата - дата конца периода
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьДвижениеДенежныхСредствДляМонитораРуководителя(Организация, ДатаКон) Экспорт 
	
	НачалоГода            = НачалоГода(ДатаКон);
	НачалоМесяца          = НачалоМесяца(ДатаКон);
	НачалоПрошлогоМесяца  = ДобавитьМесяц(НачалоМесяца, -1);
	КонецПрошлогоМесяца   = КонецМесяца(НачалоПрошлогоМесяца);
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	КонецПериода          = КонецДня(ДатаКон);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода);
	Запрос.УстановитьПараметр("НачалоМесяца",          НачалоМесяца);
	Запрос.УстановитьПараметр("НачалоПрошлогоМесяца",  НачалоПрошлогоМесяца);
	Запрос.УстановитьПараметр("НачалоПрошлогоПериода", НачалоПрошлогоПериода);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",   КонецПрошлогоМесяца);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница",   Новый Граница(КонецПериода));
		
	// Получим список счетов, по которым не хотим отбирать.
	СписокИсключаемыхСчетов = СчетаИсключаемыеИзРазделаМонитораРуководителя();
	
	// Получим счета подразделов.
	СписокСчетовКасса = СчетаПодразделаКассаМонитораРуководителя();
	Запрос.УстановитьПараметр("СписокСчетовКасса", СписокСчетовКасса);
	
	СписокСчетовБанк = СчетаПодразделаБанкМонитораРуководителя(СписокИсключаемыхСчетов);
	Запрос.УстановитьПараметр("СписокСчетовБанк", СписокСчетовБанк);
	
	СписокСчетовПлатежныеКарты = СчетаПодразделаПлатежныеКартыМонитораРуководителя();
	Запрос.УстановитьПараметр("СписокСчетовПлатежныеКарты", СписокСчетовПлатежныеКарты);
	
	// Получим список счетов для отбора оборотов.
	ПредопределенныйСписокСчетов = Новый Массив;
	ПредопределенныйСписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	СписокСчетовДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныйСписокСчетов);
	
	// Дополним счетами подразделов "Касса" и "Банк".
	// Счета подраздела "ПлатежныеКарты" не нужно включать в список счетов для отбора, т.к. данные подраздела определяются по Корсчету.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетовДляОтбора, СписокСчетовКасса);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетовДляОтбора, СписокСчетовБанк);
	
	// Исключим из списка счета, по которым не хотим отбирать.
	СписокСчетовДляОтбора = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетовДляОтбора, СписокИсключаемыхСчетов);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовДляОтбора);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовКасса)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийМесяцКасса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовБанк)
	|						И НЕ ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийМесяцБанк,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийМесяцПлатежныеКарты,
	|	0 КАК РасходТекущийМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийГод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовКасса)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийГодКасса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовБанк)
	|						И НЕ ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийГодБанк,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|						И ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеТекущийГодПлатежныеКарты,
	|	0 КАК РасходТекущийГод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовКасса)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйМесяцКасса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовБанк)
	|						И НЕ ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйМесяцБанк,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйМесяцПлатежныеКарты,
	|	0 КАК РасходПрошлыйМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйПериод,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовКасса)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйПериодКасса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетДт В (&СписокСчетовБанк)
	|						И НЕ ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйПериодБанк,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|						И ХозрасчетныйОборотыПоМесяцам.СчетКт В (&СписокСчетовПлатежныеКарты)
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ПоступлениеПрошлыйПериодПлатежныеКарты,
	|	0 КАК РасходПрошлыйПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПрошлогоПериода, &КонецПериодаГраница, Месяц, СчетДт В (&СписокСчетов), , НЕ СчетКт В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОборотыПоМесяцам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоГода И &КонецПериода
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период = &НачалоПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОборотыПоМесяцам.Период МЕЖДУ &НачалоПрошлогоПериода И &КонецПрошлогоМесяца
	|					ТОГДА ХозрасчетныйОборотыПоМесяцам.СуммаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0)
	|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПрошлогоПериода, &КонецПериодаГраница, Месяц, НЕ СчетДт В (&СписокСчетов), , СчетКт В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОборотыПоМесяцам
	|ИТОГИ
	|	СУММА(ПоступлениеТекущийМесяц),
	|	СУММА(ПоступлениеТекущийМесяцКасса),
	|	СУММА(ПоступлениеТекущийМесяцБанк),
	|	СУММА(ПоступлениеТекущийМесяцПлатежныеКарты),
	|	СУММА(РасходТекущийМесяц),
	|	СУММА(ПоступлениеТекущийГод),
	|	СУММА(ПоступлениеТекущийГодКасса),
	|	СУММА(ПоступлениеТекущийГодБанк),
	|	СУММА(ПоступлениеТекущийГодПлатежныеКарты),
	|	СУММА(РасходТекущийГод),
	|	СУММА(ПоступлениеПрошлыйМесяц),
	|	СУММА(ПоступлениеПрошлыйМесяцКасса),
	|	СУММА(ПоступлениеПрошлыйМесяцБанк),
	|	СУММА(ПоступлениеПрошлыйМесяцПлатежныеКарты),
	|	СУММА(РасходПрошлыйМесяц),
	|	СУММА(ПоступлениеПрошлыйПериод),
	|	СУММА(ПоступлениеПрошлыйПериодКасса),
	|	СУММА(ПоступлениеПрошлыйПериодБанк),
	|	СУММА(ПоступлениеПрошлыйПериодПлатежныеКарты),
	|	СУММА(РасходПрошлыйПериод)
	|ПО
	|	ОБЩИЕ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоступлениеТекущийМесяц  = НовыйСуммыПодразделовМонитораРуководителя();
	ПоступлениеПрошлыйМесяц  = НовыйСуммыПодразделовМонитораРуководителя();
	ПоступлениеТекущийГод    = НовыйСуммыПодразделовМонитораРуководителя();
	ПоступлениеПрошлыйПериод = НовыйСуммыПодразделовМонитораРуководителя();
	
	РасходТекущийМесяц = 0;
	РасходПрошлыйМесяц = 0;
	РасходТекущийГод  = 0;
	РасходПрошлыйГод  = 0;
	
	Если Результат.Следующий() Тогда
		
		ПоступлениеТекущийМесяц.Итого  = Результат.ПоступлениеТекущийМесяц;
		ПоступлениеПрошлыйМесяц.Итого  = Результат.ПоступлениеПрошлыйМесяц;
		ПоступлениеТекущийГод.Итого    = Результат.ПоступлениеТекущийГод;
		ПоступлениеПрошлыйПериод.Итого = Результат.ПоступлениеПрошлыйПериод;
		
		ПоступлениеТекущийМесяц.Касса  = Результат.ПоступлениеТекущийМесяцКасса;
		ПоступлениеПрошлыйМесяц.Касса  = Результат.ПоступлениеПрошлыйМесяцКасса;
		ПоступлениеТекущийГод.Касса    = Результат.ПоступлениеТекущийГодКасса;
		ПоступлениеПрошлыйПериод.Касса = Результат.ПоступлениеПрошлыйПериодКасса;
		
		ПоступлениеТекущийМесяц.Банк  = Результат.ПоступлениеТекущийМесяцБанк;
		ПоступлениеПрошлыйМесяц.Банк  = Результат.ПоступлениеПрошлыйМесяцБанк;
		ПоступлениеТекущийГод.Банк    = Результат.ПоступлениеТекущийГодБанк;
		ПоступлениеПрошлыйПериод.Банк = Результат.ПоступлениеПрошлыйПериодБанк;
		
		ПоступлениеТекущийМесяц.ПлатежныеКарты  = Результат.ПоступлениеТекущийМесяцПлатежныеКарты;
		ПоступлениеПрошлыйМесяц.ПлатежныеКарты  = Результат.ПоступлениеПрошлыйМесяцПлатежныеКарты;
		ПоступлениеТекущийГод.ПлатежныеКарты    = Результат.ПоступлениеТекущийГодПлатежныеКарты;
		ПоступлениеПрошлыйПериод.ПлатежныеКарты = Результат.ПоступлениеПрошлыйПериодПлатежныеКарты;
		
		РасходТекущийМесяц  = Результат.РасходТекущийМесяц;
		РасходПрошлыйМесяц  = Результат.РасходПрошлыйМесяц;
		РасходТекущийГод    = Результат.РасходТекущийГод;
		РасходПрошлыйПериод = Результат.РасходПрошлыйПериод;
		
	КонецЕсли;
	
	ПредставлениеТекущегоМесяца            = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоМесяца, КонецПериода);
	ПредставлениеТекущегоМесяцаСНачалаГода = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоГода, КонецПериода);
	ПредставлениеПрошлогоМесяца            = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоПрошлогоМесяца, КонецПрошлогоМесяца);
	ПредставлениеПрошлогоМесяцаСНачалаГода = МониторРуководителя.ПолучитьПредставлениеПериода(НачалоПрошлогоПериода, КонецПрошлогоМесяца);
	
	// Поступление денежных средств.
	ТаблицаПоступлениеДенежныхСредств = МониторРуководителя.ТаблицаДанных();
	
	// Текущий месяц.
	ДополнитьТаблицуДанныхМонитораРуководителя(ТаблицаПоступлениеДенежныхСредств, ПредставлениеТекущегоМесяца, ПоступлениеТекущийМесяц, 1);
	
	// С начала года по конец текущего месяца.
	ДополнитьТаблицуДанныхМонитораРуководителя(ТаблицаПоступлениеДенежныхСредств, ПредставлениеТекущегоМесяцаСНачалаГода, ПоступлениеТекущийГод, 2);
	
	// Предыдущий месяц.
	ДополнитьТаблицуДанныхМонитораРуководителя(ТаблицаПоступлениеДенежныхСредств, ПредставлениеПрошлогоМесяца, ПоступлениеПрошлыйМесяц, 3);
	
	// С начала года по конец предыдущего месяца.
	ДополнитьТаблицуДанныхМонитораРуководителя(ТаблицаПоступлениеДенежныхСредств, ПредставлениеПрошлогоМесяцаСНачалаГода, ПоступлениеПрошлыйПериод, 4);
	
	// Расход денежных средств.
	ТаблицаРасходДенежныхСредств = МониторРуководителя.ТаблицаДанных();
	
	СтрокаТаблицы = ТаблицаРасходДенежныхСредств.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеТекущегоМесяца;
	СтрокаТаблицы.Сумма 		= РасходТекущийМесяц;
	СтрокаТаблицы.Порядок		= 1;
	
	СтрокаТаблицы = ТаблицаРасходДенежныхСредств.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеТекущегоМесяцаСНачалаГода;
	СтрокаТаблицы.Сумма 	    = РасходТекущийГод;
	СтрокаТаблицы.Порядок		= 2;
	
	СтрокаТаблицы = ТаблицаРасходДенежныхСредств.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеПрошлогоМесяца;
	СтрокаТаблицы.Сумма 		= РасходПрошлыйМесяц;
	СтрокаТаблицы.Порядок		= 3;
	
	СтрокаТаблицы = ТаблицаРасходДенежныхСредств.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеПрошлогоМесяцаСНачалаГода;
	СтрокаТаблицы.Сумма 		= РасходПрошлыйПериод;
	СтрокаТаблицы.Порядок		= 4;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаПоступлениеДенежныхСредств", ТаблицаПоступлениеДенежныхСредств);
	СтруктураДанных.Вставить("ТаблицаРасходДенежныхСредств", ТаблицаРасходДенежныхСредств);
	
	Возврат СтруктураДанных;
	
КонецФункции

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;

	Возврат НаборПоказателей;
	
КонецФункции

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "АнализДвиженийДенежныхСредств", "Анализ движений денежных средств"));
	Массив.Добавить(Новый Структура("Имя, Представление", "АнализДвиженийДенежныхСредствПоПериодам", "Анализ движений денежных средств по периодам"));
	
	Возврат Массив;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("КлючТекущегоВарианта", "");
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьПримечанияОкругления"     , Ложь);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	ПараметрыОтчета.Вставить("Периодичность"        , 9);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйСуммыПодразделовМонитораРуководителя()
	
	СуммыПодразделов = Новый Структура;
	СуммыПодразделов.Вставить("Итого", 0);
	СуммыПодразделов.Вставить("Касса", 0);
	СуммыПодразделов.Вставить("Банк", 0);
	СуммыПодразделов.Вставить("ПлатежныеКарты", 0);
	
	Возврат СуммыПодразделов;
	
КонецФункции

Процедура ДополнитьТаблицуДанныхМонитораРуководителя(ТаблицаДанных, ПредставлениеПоказателя, СуммыПоказателей, Порядок)
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.Представление = ПредставлениеПоказателя;
	СтрокаТаблицы.Сумма 		= СуммыПоказателей.Итого;
	СтрокаТаблицы.Порядок		= Порядок;
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.ПодразделМонитора = Перечисления.ПодразделыМонитораРуководителя.Касса;
	СтрокаТаблицы.Представление = ПредставлениеПоказателя;
	СтрокаТаблицы.Сумма 		= СуммыПоказателей.Касса;
	СтрокаТаблицы.Порядок		= Порядок;
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.ПодразделМонитора = Перечисления.ПодразделыМонитораРуководителя.Банк;
	СтрокаТаблицы.Представление = ПредставлениеПоказателя;
	СтрокаТаблицы.Сумма 		= СуммыПоказателей.Банк;
	СтрокаТаблицы.Порядок		= Порядок;
	
	СтрокаТаблицы = ТаблицаДанных.Добавить();
	СтрокаТаблицы.ПодразделМонитора = Перечисления.ПодразделыМонитораРуководителя.ПлатежныеКарты;
	СтрокаТаблицы.Представление = ПредставлениеПоказателя;
	СтрокаТаблицы.Сумма 		= СуммыПоказателей.ПлатежныеКарты;
	СтрокаТаблицы.Порядок		= Порядок;
	
КонецПроцедуры

Функция СчетаИсключаемыеИзРазделаМонитораРуководителя()
	
	ГруппыИсключаемыхСчетов = Новый Массив;
	ГруппыИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);             // 50.03
	ГруппыИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);          // 50.23
	ГруппыИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты); // 57.02
	ГруппыИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);      // 57.03
	ГруппыИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);   // 57.22
	
	ИсключаемыеСчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(ГруппыИсключаемыхСчетов);
	
	Возврат ИсключаемыеСчета;
	
КонецФункции

Функция СчетаПодразделаКассаМонитораРуководителя()
	
	ГруппыСчетов = Новый Массив;
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.Касса); // 50
	
	СписокСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ГруппыСчетов);
	
	Возврат СписокСчетов;
	
КонецФункции

Функция СчетаПодразделаБанкМонитораРуководителя(ИсключаемыеСчета)
	
	ГруппыСчетов = Новый Массив;
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);    // 52
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль);    // 53
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);   // 57
	
	СписокСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ГруппыСчетов);
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключаемыеСчета);
	
	Возврат СписокСчетов;
	
КонецФункции

Функция СчетаПодразделаПлатежныеКартыМонитораРуководителя()
	
	ГруппыСчетов = Новый Массив;
	ГруппыСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам); // 57.03
	
	СписокСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ГруппыСчетов);
	
	Возврат СписокСчетов;
	
КонецФункции

// Добавляет в настройки СКД все поля группировки из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Группировка - ТабличнаяЧасть - Таблица Группировки отчета.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если (ЭлементСтруктуры.Имя <> "Группировка"
		 	 И ЭлементСтруктуры.Имя <> "Таблица")
			 Или (ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных")
			 И ТипЗнч(ЭлементСтруктуры) <> Тип("ТаблицаКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Строки.КОличество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПерваяГруппировка = Истина;

		// Заполнить все поля группировки.
		Группировка = ЭлементСтруктуры.Строки[0];
		Родитель = ЭлементСтруктуры;
		Индекс = Родитель.Строки.Индекс(Группировка);
		Родитель.Строки.Удалить(Группировка);
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			
			Если Не ПолеВыбраннойГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;

			Если ПерваяГруппировка Тогда
				Группировка = Родитель.Строки.Вставить(Индекс, Тип("ГруппировкаКомпоновкиДанных"));
				ПерваяГруппировка = Ложь;
			Иначе
				Группировка = Группировка.Строки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			
			ПараметрыВыводаГруппировки = Новый Структура;
			ПараметрыВыводаГруппировки.Вставить("Поле", ПолеВыбраннойГруппировки.Поле);
			ПараметрыВыводаГруппировки.Вставить("ТипГруппировки", 0);
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПараметрыВыводаГруппировки, Группировка);
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтборВГруппировке(СтрокаГруппировки, ПараметрыОтбора)
	
	Если ПараметрыОтбора.Свойство("Родитель") И ПараметрыОтбора.Родитель <> Неопределено Тогда
		НовыйЭлемент = ПараметрыОтбора.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		НовыйЭлемент = СтрокаГруппировки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	НовыйЭлемент.Использование  = Истина;
	НовыйЭлемент.ЛевоеЗначение  = ПараметрыОтбора.ПолеОтбора;
	НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = ПараметрыОтбора.ЗначениеОтбора;
	
КонецПроцедуры

Процедура ДобавитьОформлениеГруппировке(СтрокаГруппировки)
	
	ЭлементОформления = СтрокаГруппировки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
КонецПроцедуры

Функция ДобавитьОбязательныеГруппировки(Группировка, ПараметрыОтчета, ПолеПериода)
	
	СтрокаГруппировкиНачальныйОстаток = ДобавитьИтоговуюГруппировку(Группировка, 1, "НачальныйОстаток", "НачальныйОстаток");
	
	Если ПараметрыОтчета.Периодичность = 0 Тогда
		ПараметрыОтбора = Новый Структура();  
		ПолеЗначения = Новый ПолеКомпоновкиДанных("ДатаПоявленияОстатков");
		ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных(ПолеПериода));
		ПараметрыОтбора.Вставить("ЗначениеОтбора", ПолеЗначения);
		ДобавитьОтборВГруппировке(СтрокаГруппировкиНачальныйОстаток, ПараметрыОтбора);
	КонецЕсли;
	
	СтрокаГруппировкиПоступление = ДобавитьИтоговуюГруппировку(Группировка, 2, "ВидОперации");
	
	СтрокаГруппировкиСписание = ДобавитьИтоговуюГруппировку(Группировка, 3, "ВидОперации");
	
	СтрокаГруппировкиДенежныйПоток = ДобавитьИтоговуюГруппировку(Группировка, 4, "ВидОперации");
	
	СтрокаГруппировкиКонечныйОстаток = ДобавитьИтоговуюГруппировку(Группировка, 5, "КонечныйОстаток");
	
	Если ПараметрыОтчета.Периодичность = 0 Тогда
		
		ПараметрыОтбора = Новый Структура();
		
		ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных(
			СтрЗаменить("Период.ДатыКонца.КонецДня", "Период", ПолеПериода)));
		ПараметрыОтбора.Вставить("ЗначениеОтбора", КонецДня(ПараметрыОтчета.КонецПериода));
		
		ДобавитьОтборВГруппировке(СтрокаГруппировкиКонечныйОстаток, ПараметрыОтбора);
		
	КонецЕсли;

	ПодготовленныеГруппировки = Новый Структура;
	ПодготовленныеГруппировки.Вставить("Поступление", СтрокаГруппировкиПоступление);
	ПодготовленныеГруппировки.Вставить("Списание", СтрокаГруппировкиСписание);
	
	Возврат ПодготовленныеГруппировки;
	
КонецФункции

Функция ДобавитьГруппировку(Группировка, ПолеГруппировки, ИмяГруппировки = "")
	
	Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		СтрокаГруппировки = Группировка.Добавить();
	Иначе
		СтрокаГруппировки = Группировка.Структура.Добавить();
	КонецЕсли;
	ПараметрыВыводаГруппировки = Новый Структура;
	ПараметрыВыводаГруппировки.Вставить("Поле", ПолеГруппировки.Поле);
	ПараметрыВыводаГруппировки.Вставить("ТипГруппировки", ПолеГруппировки.ТипГруппировки);
	СтрокаГруппировки.Имя = ИмяГруппировки;
	БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПараметрыВыводаГруппировки, СтрокаГруппировки);
	
	Возврат СтрокаГруппировки;
	
КонецФункции

Функция ДобавитьИтоговуюГруппировку(Группировка, Порядок, ПолеГруппировки, ИмяГруппировки = "")
	
	ПараметрыПоляГруппировки = Новый Структура;
	ПараметрыПоляГруппировки.Вставить("Поле", ПолеГруппировки);
	ПараметрыПоляГруппировки.Вставить("ТипГруппировки", 0);
	
	СтрокаГруппировки = ДобавитьГруппировку(Группировка, ПараметрыПоляГруппировки, ИмяГруппировки);
	
	ДобавитьОформлениеГруппировке(СтрокаГруппировки);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных("Порядок"));
	ПараметрыОтбора.Вставить("ЗначениеОтбора", Порядок);
	ДобавитьОтборВГруппировке(СтрокаГруппировки, ПараметрыОтбора);
	
	ОтключитьВыводОтбора(СтрокаГруппировки);
	
	Возврат СтрокаГруппировки;
	
КонецФункции

Функция ИмяПоляПериода(Периодичность)
	
	Если Периодичность = 6 Тогда
		Поле = "ПериодДень";
	ИначеЕсли Периодичность = 7 Тогда
		Поле = "ПериодНеделя";
	ИначеЕсли Периодичность = 8 Тогда
		Поле = "ПериодДекада";
	ИначеЕсли Периодичность = 9 Тогда
		Поле = "ПериодМесяц";
	ИначеЕсли Периодичность = 10 Тогда
		Поле = "ПериодКвартал";
	ИначеЕсли Периодичность = 11 Тогда
		Поле = "ПериодПолугодие";
	ИначеЕсли Периодичность = 12 Тогда
		Поле = "ПериодГод";
	Иначе 
		Поле = "Период";
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

Процедура ДобавитьГруппуОтборовВГруппировке(СтрокаГруппировки, ПараметрыОтбора)
	
	ПолеОтбора = ПараметрыОтбора.ПолеОтбора;
	МассивЗначенийОтбора = ПараметрыОтбора.МассивЗначенийОтбора;
	
	Если ТипЗнч(МассивЗначенийОтбора) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = СтрокаГруппировки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Родитель.Использование = Истина;
	Родитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для Каждого ЗначениеОтбора Из МассивЗначенийОтбора Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолеОтбора", ПолеОтбора);
		ПараметрыОтбора.Вставить("ЗначениеОтбора", ЗначениеОтбора);
		ПараметрыОтбора.Вставить("Родитель", Родитель);

		ДобавитьОтборВГруппировке(СтрокаГруппировки, ПараметрыОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьВыводОтбора(СтрокаГруппировки)
	
	ПараметрВыводитьОтбор = СтрокаГруппировки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	ПараметрВыводитьОтбор.Использование = Истина;
	ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкуДиаграммы(ПолеВыбраннойГруппировки, Группировка)
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	
	Если ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
		
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		
	Иначе
		// Для типа группировки Иерархия, выводим только элементы,
		// чтобы группы не учавствовали в диаграмме наравне с элементами.
		
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	КонецЕсли;
	
	ЭлементВыбора = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ЭлементВыбора.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

Функция ЗаголовокДиаграммы(ИмяДиаграммы)
	
	Если ИмяДиаграммы = "ДиаграммаПоступление" 
		Или ИмяДиаграммы = "ДиаграммаПоступлениеЗаПериод" Тогда
		ЗаголовокДиаграммы = "Поступление";
	ИначеЕсли ИмяДиаграммы = "ДиаграммаСписание" 
		Или ИмяДиаграммы = "ДиаграммаСписаниеЗаПериод" Тогда
		ЗаголовокДиаграммы = "Списание";
	Иначе
		ЗаголовокДиаграммы = "Динамика движения денежных средств";
	КонецЕсли;
	
	Возврат ЗаголовокДиаграммы;
	
КонецФункции

Функция ПериодРасшифровки(Период, Отбор, ОтчетОбъект)
	
	Если Отбор.Поле = "НачальныйОстаток" Тогда
		Если ОтчетОбъект.Периодичность = 0 Тогда
			Период = ОтчетОбъект.НачалоПериода - 86400;
		Иначе
			Период = Период - 86400;
		КонецЕсли;
	Иначе
		Если ОтчетОбъект.Периодичность = 0 Тогда 
			Период = ОтчетОбъект.КонецПериода;
		ИначеЕсли ОтчетОбъект.Периодичность = 6 Тогда // день
			Период = КонецДня(Период);
		ИначеЕсли ОтчетОбъект.Периодичность = 7 Тогда // неделя
			Период = КонецНедели(Период);
		ИначеЕсли ОтчетОбъект.Периодичность = 8 Тогда // декада
			Если День(Период) <= 10 Тогда
				Период = Дата(Год(Период), Месяц(Период), 10);
			ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
				Период = Дата(Год(Период), Месяц(Период), 20);
			Иначе
				Период = КонецМесяца(Период);
			КонецЕсли;
		ИначеЕсли ОтчетОбъект.Периодичность = 9 Тогда // месяц
			Период = КонецМесяца(Период);
		ИначеЕсли ОтчетОбъект.Периодичность = 10 Тогда // квартал
			Период = КонецКвартала(Период);
		ИначеЕсли ОтчетОбъект.Периодичность = 11 Тогда// полугодие
			Период = ?(Период < Дата(Год(Период), 7, 1), Дата(Год(Период), 6, 30), КонецГода(Период));
		ИначеЕсли ОтчетОбъект.Периодичность = 12 Тогда // год
			Период = КонецГода(Период);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Период;
КонецФункции

Процедура ПереопределитьПериодРасшифровки(Макеты, ПолеПериода)
	
	Для Каждого Макет Из Макеты Цикл
		Для Каждого Параметр Из Макет.Параметры Цикл
			Если ТипЗнч(Параметр) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
				Если Параметр.Имя = "Период" Тогда
					Параметр.Выражение = ПолеПериода;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Для Каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
					Если ВыражениеПоля.Поле = "Период" Тогда
						ВыражениеПоля.Выражение = ПолеПериода;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДиаграмму(Диаграмма, ПараметрыОтчета, Порядок)
	
	ВыводимаяГруппировка = "ВидДвижения";
	
	Для Каждого ГруппировкаСерий Из ПараметрыОтчета.Группировка Цикл
		Если ГруппировкаСерий.Поле = "СтатьяДвиженияДенежныхСредств"
			И ГруппировкаСерий.Использование Тогда
			ВыводимаяГруппировка = ГруппировкаСерий.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Серии
	Диаграмма.Серии.Очистить();
	Группировка = Диаграмма.Серии.Добавить();
	ПараметрыДиаграммы = Новый Структура;
	ПараметрыДиаграммы.Вставить("Поле", ВыводимаяГруппировка);
	ПараметрыДиаграммы.Вставить("ТипГруппировки", 0);
	ЗаполнитьГруппировкуДиаграммы(ПараметрыДиаграммы, Группировка);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных("Порядок"));
	ПараметрыОтбора.Вставить("ЗначениеОтбора", Порядок);
	ДобавитьОтборВГруппировке(Группировка, ПараметрыОтбора);
	
КонецПроцедуры

Процедура ДобавитьДиаграммуЗаПериод(Диаграмма, ПараметрыОтчета, Порядок, ВыводимаяГруппировка = Неопределено)
	
	ЭтоСводнаяДиаграмма =  ТипЗнч(Порядок) = Тип("Массив");
	ПолеПериода = ИмяПоляПериода(ПараметрыОтчета.Периодичность);

	// Точки
	Диаграмма.Точки.Очистить();
	ГруппировкаПериод = Диаграмма.Точки.Добавить();
	ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных(ПолеПериода);
	ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(ПараметрыОтчета.Периодичность);
	ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
	ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
	
	ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПорядокПериод.Поле = ПолеГруппировки.Поле;
	
	Если ВыводимаяГруппировка = Неопределено Тогда
		ВыводимаяГруппировка = "ВидДвижения";
		
		Для Каждого ГруппировкаСерий Из ПараметрыОтчета.Группировка Цикл
			Если ГруппировкаСерий.Поле = "СтатьяДвиженияДенежныхСредств" 
				И ГруппировкаСерий.Использование Тогда
				ВыводимаяГруппировка = ГруппировкаСерий.Поле;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Серии
	Диаграмма.Серии.Очистить();
	Группировка = Диаграмма.Серии.Добавить();
	ПараметрыДиаграммы = Новый Структура;
	ПараметрыДиаграммы.Вставить("Поле", ВыводимаяГруппировка);
	ПараметрыДиаграммы.Вставить("ТипГруппировки", 0);
	ЗаполнитьГруппировкуДиаграммы(ПараметрыДиаграммы, Группировка);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных("Порядок"));

	Если ЭтоСводнаяДиаграмма Тогда
		ПараметрыОтбора.Вставить("МассивЗначенийОтбора", Порядок);
		ДобавитьГруппуОтборовВГруппировке(Группировка, ПараметрыОтбора);
	Иначе
		ПараметрыОтбора.Вставить("ЗначениеОтбора", Порядок);
		ДобавитьОтборВГруппировке(Группировка, ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли