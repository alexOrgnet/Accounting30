#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, 
		ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.Период);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки", Результат.ВысотаТаблицы);
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Справка-расчет налога на имущество" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(ПараметрыОтчета.Период), КонецДня(ПараметрыОтчета.Период));
	
КонецФункции

Процедура ДобавитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировкиШаблон, ПредопределеннаяГруппировка = Ложь, ВыбранныеПоляТаблицы = Неопределено)
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоляГруппировкиШаблон Цикл
		Если Не ВыбранноеПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Поле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Поле, ВыбранноеПоле);
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			КоллекцияПолей = ВыбранныеПоля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			КоллекцияПолей.Заголовок = ВыбранноеПоле.Заголовок;
			ДобавитьВыбранныеПоля(КоллекцияПолей.Элементы, ВыбранноеПоле.Элементы, ПредопределеннаяГруппировка, ВыбранныеПоляТаблицы);
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") И ПредопределеннаяГруппировка Тогда
			ДобавитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляТаблицы);
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			ВыбранныеПоля.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	КонецЕсли;
	
	ИспользоватьПрежнийРасчетНалога = Ложь;
	Если ПараметрыОтчета.Период < РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество()
	 Или РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
	 	 ПараметрыОтчета.Организация,
	 	 ПараметрыОтчета.Период) Тогда
	 	ИспользоватьПрежнийРасчетНалога = Истина;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИспользоватьПрежнийРасчетНалога",
		ИспользоватьПрежнийРасчетНалога);
	
	ПрименяетсяОсвобождениеОтУплатыНалога = Ложь;
	
	Если НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(ПараметрыОтчета.Организация) Тогда
		ПериодОсвобожденияОтНалогов = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
		ПрименяетсяОсвобождениеОтУплатыНалога = (Год(ПериодОсвобожденияОтНалогов.Начало) = Год(ПараметрыОтчета.Период));
	КонецЕсли;
	
	// В структуре настроек есть группировки для разных случаев и периодов.
	// Выберем только нужные, а остальные удалим.
	МассивГруппировок = Новый Массив;
	
	Если ПараметрыОтчета.Период < '20190101' Тогда
		// До 2019 года
		МассивГруппировок.Добавить("СреднегодоваяСтоимость2019");
		МассивГруппировок.Добавить("КадастроваяСтоимость2013");
	ИначеЕсли ПараметрыОтчета.Период < '20200101' Тогда
		// В 2019 году
		МассивГруппировок.Добавить("СреднегодоваяСтоимость2019");
		МассивГруппировок.Добавить("КадастроваяСтоимость2019");
	ИначеЕсли КонецКвартала(ПараметрыОтчета.Период) = КонецДня('20200630') И ПрименяетсяОсвобождениеОтУплатыНалога Тогда
		// За 2-й квартал 2020 года для организации действует освобождение от уплаты налога.
		// В этом случае справка-расчет авансового платежа имеет особый состав колонок.
		МассивГруппировок.Добавить("СреднегодоваяСтоимость2020_РасчетАванса_Освобождение");
		МассивГруппировок.Добавить("КадастроваяСтоимость2020_РасчетАванса_Освобождение");
	ИначеЕсли КонецКвартала(ПараметрыОтчета.Период) <> КонецГода(ПараметрыОтчета.Период) Тогда
		// С 2020 года справка-расчет авансового платежа за квартальные периоды  
		// имеет состав колонок отличный от справки-расчета налога за год.
		Если ПараметрыОтчета.Период < РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество() Тогда
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2020_РасчетАванса");
			МассивГруппировок.Добавить("КадастроваяСтоимость2020_РасчетАванса");
		ИначеЕсли Не РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.Период) Тогда
			// С 2022 в связи с изменением расчета налога справка-расчет для российских организаций приближена к форме расчета ФНС
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2022_РасчетАванса");
			МассивГруппировок.Добавить("КадастроваяСтоимость2022_РасчетАванса");
		Иначе
			// С 2022 в связи с изменением расчета налога справка-расчет для иностранных организаций также меняется,
			// но в целом остается приближенной к форме декларации
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2022_РасчетАванса");
			МассивГруппировок.Добавить("КадастроваяСтоимость2022_Декларация_РасчетАванса");
		КонецЕсли;
	ИначеЕсли ПрименяетсяОсвобождениеОтУплатыНалога Тогда
		// В 2020 году для организации действует освобождение от налога за 2-й квартал.
		// В справке-расчете за год сумма освобождения отражается в отдельной колонке.
		МассивГруппировок.Добавить("СреднегодоваяСтоимость2020_Освобождение");
		МассивГруппировок.Добавить("КадастроваяСтоимость2020_Освобождение");
	Иначе
		// С 2020 года используем обновленную форму справки-расчета, которая приближена к действующей форме декларации
		Если ПараметрыОтчета.Период < '20220101' Тогда
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2020");
			МассивГруппировок.Добавить("КадастроваяСтоимость2020");
		ИначеЕсли Не РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.Период) Тогда
			// С 2022 в связи с изменением расчета налога справка-расчет для российских организаций приближена к форме расчета ФНС
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2022");
			МассивГруппировок.Добавить("КадастроваяСтоимость2022");
		Иначе
			// С 2022 в связи с изменением расчета налога справка-расчет для иностранных организаций также меняется,
			// но в целом остается приближенной к форме декларации
			МассивГруппировок.Добавить("СреднегодоваяСтоимость2022");
			МассивГруппировок.Добавить("КадастроваяСтоимость2022_Декларация");
		КонецЕсли;
	КонецЕсли;
	
	// Перебираем группировки верхнего уровня. Идем с конца. Лишние удаляем, а оставшиеся (должно быть две) переименовываем, 
	// чтобы использовать одинаковый макет заголовка. 
	КоличествоГруппировок = КомпоновщикНастроек.Настройки.Структура.Количество();
	Для Счетчик = 1 По КоличествоГруппировок Цикл
		Индекс = КоличествоГруппировок - Счетчик;
		Группировка = КомпоновщикНастроек.Настройки.Структура[Индекс];
		Если МассивГруппировок.Найти(Группировка.Имя) = Неопределено Тогда
			КомпоновщикНастроек.Настройки.Структура.Удалить(Группировка);
		Иначе
			Группировка.Имя = "ВидНалоговойБазы";
		КонецЕсли;
	КонецЦикла;
	
	// Настройка двух оставшихся группировок
	Для инд = 0 По 1 Цикл 
		
		ТаблицаГруппировок = КомпоновщикНастроек.Настройки.Структура[инд].Структура[0];
		
		// Строки из предопределенных настроек используем как шаблон. При этом фактическая структура отчета задается
		// настройками группировок отчета. Ниже после заполнения структуры удалим предопределенную структуру.
		СтрокиКУдалению = Новый Массив; 
		Для каждого СтрокаТаблицы Из ТаблицаГруппировок.Строки Цикл
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЦикла; 

		// В каждую таблицу добавляем группировки строк в соответствии с настройками отчета.
		ГруппировкаТаблицы = ТаблицаГруппировок.Строки; // верхний уровень, далее подменяется на подчиненную группировку и т.д. до нижнего уровня
		
		// Предполагаем, что группировки строк заданы в первой корневой строке таблицы (из предопределнных настроек).
		// Группировку-шаблон ищем в этой строке, включая подчиненные строки.
		ГруппировкаШаблон = ТаблицаГруппировок.Строки[0];
		
		СправкиРасчеты.ДобавитьГруппировкиТаблицыКомпоновкиДанныхПоШаблону(
			ГруппировкаТаблицы,
			ГруппировкаШаблон,
			ПараметрыОтчета.Группировка,
			МассивГруппировок[инд],
			ТаблицаГруппировок.Выбор.Элементы);
		
		// Удаляем предопределенные группировки таблицы - они служили как шаблон
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаГруппировок.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	
	Для каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество() + ВысотаШапки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстШапкиГруппировок(Группировки)
	
	ТекстШапки = "";
	Для каждого Группа Из Группировки Цикл
		Если Группа.Использование И Группа.Поле <> "ДатаСведений" Тогда
			ТекстШапки = ТекстШапки + ?(ПустаяСтрока(ТекстШапки), "", ", ") + Группа.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстШапки;
	
КонецФункции

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	ТекстШапкиГруппировок = ПолучитьТекстШапкиГруппировок(ПараметрыОтчета.Группировка);
	Группировки1 = Результат.НайтиТекст("###Группировки1###");
	Если Группировки1 <> Неопределено Тогда
		Если ПараметрыОтчета.Период < РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество() Тогда
			НомерПервойКолонки = 5;
			НомерПоследнейКолонки = 17;
		Иначе
			НомерПервойКолонки = 6; // добавлена дата сведений
			НомерПоследнейКолонки = 18;
		КонецЕсли;
		Результат.Область(, НомерПервойКолонки, ?(ПараметрыОтчета.ВыводитьЕдиницуИзмерения, 7, 6), НомерПоследнейКолонки).Сгруппировать(
			"РасшифровкаСреднегодовойСтоимости", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
		Группировки1.Текст = ТекстШапкиГруппировок;
		Результат.ТекущаяОбласть = Группировки1;
	КонецЕсли;
	
	Группировки2 = Результат.НайтиТекст("###Группировки2###");
	Если Группировки2 <> Неопределено Тогда
		Группировки2.Текст = ТекстШапкиГруппировок;
		Если ПараметрыОтчета.Период >= РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество()
			 И Не РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.Период) Тогда
			// Российские организации сверяют расчет налога с сообщением ФНС, где вместо двух колонок с долями
			// ("Доля в праве общей собственности" и "Доля стоимости на территории субъекта РФ"),
			// есть одна - "Доля в праве". Это произведение двух вышеуказанных долей. Поэтому исходные колонки долей сворачиваем.
			ПерваяЯчейкаГруппировки = Результат.НайтиТекст("Доля в праве общей собственности", Группировки2);
			Результат.Область(, ПерваяЯчейкаГруппировки.Лево,
				ПерваяЯчейкаГруппировки.Верх + 1, ПерваяЯчейкаГруппировки.Лево + 1).Сгруппировать(
				"РасшифровкаДолиВПраве", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
		КонецЕсли;
	Иначе
		Результат.ФиксацияСверху = Результат.ФиксацияСверху + ?(Группировки1 = Неопределено, 0, 4);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСлева = 0;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "РасчетНалогаНаИмущество", "Расчет налога на имущество"));
	
	Возврат Массив;
	
КонецФункции

Функция НайтиСтрокуТаблицыРекурсивно(СтрокаГруппировки, Имя)

	// Поиск по имени группировки
	Если СтрокаГруппировки.Имя = Имя Тогда
		Возврат СтрокаГруппировки;
	КонецЕсли;
	
	// Поиск по полям группировки
	Для каждого Поле Из СтрокаГруппировки.ПоляГруппировки.Элементы Цикл
		Если ТипЗнч(Поле) <> Тип("АвтоПолеГруппировкиКомпоновкиДанных")
			 И Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
			Возврат СтрокаГруппировки;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по подчиненным строкам
	Для каждого ПодчиненнаяГруппировка Из СтрокаГруппировки.Структура Цикл
		НайденнаяГруппировка = НайтиСтрокуТаблицыРекурсивно(ПодчиненнаяГруппировка, Имя);
		Если НайденнаяГруппировка <> Неопределено Тогда
			Возврат НайденнаяГруппировка;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции
 
#КонецЕсли
