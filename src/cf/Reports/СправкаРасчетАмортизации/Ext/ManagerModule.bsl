#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
// 
// См. также ПолучитьНаборПоказателей
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	ВсеНаборы = Новый Массив;
	ВсеНаборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейПоУмолчанию());
	ВсеНаборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	ВсеНаборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейОтложенногоНалога());
	// Сверка НУ не поддерживается схемой компоновки
	
	Возврат ВсеНаборы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	// См. также ПоддерживаемыеНаборыСуммовыхПоказателей
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ?(ПараметрыОтчета.СначалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),НачалоДня(ПараметрыОтчета.НачалоПериода)));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	ПрименяетсяПБУ6 = ПрименяютсяУстаревшиеПравилаУчета(
		ПараметрыОтчета.КонецПериода,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВыполнениеОтчета);
	
	МассивСпособов = Новый Массив;
	
	Если ПараметрыОтчета.ПоказательНУ Тогда
		МассивСпособов.Добавить("ЛинейныйНУ");
		МассивСпособов.Добавить("НеЛинейныйНУ");
	Иначе
		МассивСпособов.Добавить("ЛинейныйБУ");
		МассивСпособов.Добавить("УменьшаемогоОстаткаБУ");
		МассивСпособов.Добавить("ПоСуммеЧиселЛетИспользованияБУ");
		МассивСпособов.Добавить("ПропорциональноОбъемуПродукцииБУ");
		МассивСпособов.Добавить("ПоЕНАОФБУ");
		МассивСпособов.Добавить("ПоЕНАОФНа1000кмПробегаБУ");
		МассивСпособов.Добавить("ИныеБУ");
	КонецЕсли;
	
	МассивСпособовПоддерживаемыхФСБУ6 = Новый Массив;
	Если ПараметрыОтчета.ПоказательБУ Тогда
		МассивСпособовПоддерживаемыхФСБУ6.Добавить("ЛинейныйБУ");
		МассивСпособовПоддерживаемыхФСБУ6.Добавить("УменьшаемогоОстаткаБУ");
		МассивСпособовПоддерживаемыхФСБУ6.Добавить("ПоСуммеЧиселЛетИспользованияБУ");
		МассивСпособовПоддерживаемыхФСБУ6.Добавить("ПропорциональноОбъемуПродукцииБУ");
	КонецЕсли;
	
	Для Каждого Способ Из МассивСпособов Цикл
	
		ТаблицаСпособа = БухгалтерскиеОтчеты.НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"СпособНачисленияАмортизации" + Способ);
		ТаблицаСпособа.Использование = Истина;
		
		Таблица = БухгалтерскиеОтчеты.НайтиПоИмени(ТаблицаСпособа.Структура,"Амортизация" + Способ);
		
		МассивПоказателей = Новый Массив;
		
		Если ПараметрыОтчета.ПоказательНУ Тогда 
			СтрокаГруппировки = "";
			МассивПоказателей.Добавить("НУ");
		ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда
			СтрокаГруппировки = "СРазницами";
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("ПР");
			МассивПоказателей.Добавить("ВР");
		Иначе
			СтрокаГруппировки = "";
			МассивПоказателей.Добавить("БУ");
		КонецЕсли;
		
		ЭтоФСБУ6    = Истина;
		СтрокаФСБУ6 = "ФСБУ6";
		Если ПрименяетсяПБУ6 Или МассивСпособовПоддерживаемыхФСБУ6.Найти(Способ) = Неопределено Тогда
			ЭтоФСБУ6    = Ложь;
			СтрокаФСБУ6 = "";
		КонецЕсли;
		
		Группировка          = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, "Группировка"          + Способ + СтрокаГруппировки + СтрокаФСБУ6);
		ГруппировкаАмГруппа  = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, "ГруппировкаАмГруппа"  + Способ + СтрокаГруппировки + СтрокаФСБУ6);
		ГруппировкаОбъект    = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, "ГруппировкаОбъект"    + Способ + СтрокаГруппировки + СтрокаФСБУ6);
		ГруппировкаПериод    = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, "ГруппировкаПериод"    + Способ + СтрокаГруппировки + СтрокаФСБУ6);
		ГруппировкаКомпонент = БухгалтерскиеОтчеты.НайтиПоИмени(Таблица.Строки, "ГруппировкаКомпонент" + Способ + СтрокаГруппировки + СтрокаФСБУ6);
		
		ПоддерживаетсяРасчетАмортизацииПоКомпонентамАмортизации = ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС");
		Группировка.Использование = Истина;
		ГруппировкаАмГруппа.Использование = Истина;
		ГруппировкаОбъект.Использование = Истина;
		ГруппировкаПериод.Использование = Истина;
		Если ПоддерживаетсяРасчетАмортизацииПоКомпонентамАмортизации
			И ГруппировкаКомпонент <> Неопределено
			И СпособПоддерживаетНачислениеАмортизацииПоКомпонентам(Способ) Тогда
			ГруппировкаКомпонент.Использование = Истина;
		КонецЕсли;
		
		МассивГруппировок = Новый Массив;
		МассивГруппировок.Добавить(Группировка);
		МассивГруппировок.Добавить(ГруппировкаАмГруппа);
		МассивГруппировок.Добавить(ГруппировкаОбъект);
		МассивГруппировок.Добавить(ГруппировкаПериод);
		Если ПоддерживаетсяРасчетАмортизацииПоКомпонентамАмортизации
			И ГруппировкаКомпонент <> Неопределено
			И СпособПоддерживаетНачислениеАмортизацииПоКомпонентам(Способ) Тогда
			МассивГруппировок.Добавить(ГруппировкаКомпонент);
		КонецЕсли;
		
		Для Каждого ИмяГруппировки Из МассивГруппировок Цикл
			
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если ИмяГруппировки = Группировка Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ВидИмущества");
			ИначеЕсли ИмяГруппировки = ГруппировкаОбъект Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Объект");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ИнвентарныйНомер");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ДатаВводаВЭксплуатацию");
				Если Не ЭтоФСБУ6 Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"НачислятьАмортизацию" + ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
				КонецЕсли;
				Если Способ = "НеЛинейныйНУ" Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"НормаАмортизации");
				КонецЕсли;
			ИначеЕсли ИмяГруппировки = ГруппировкаАмГруппа Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"АмортизационнаяГруппа");
			ИначеЕсли ИмяГруппировки = ГруппировкаКомпонент Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КомпонентАмортизации");
			Иначе	
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
			КонецЕсли;
			
			// Вывод названий суммовых покателей
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
				
				Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
				КонецЦикла;
				
			КонецЕсли;
			
			// Вывод стоимости ОС
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Стоимость" + ИмяПоказателя);
				КонецЕсли;
			КонецЦикла;
			
			// Вывод остаточной стоимости 
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ОстаточнаяСтоимость" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
			
			// Вывод стоимости для начисления амортизации
			Если ПараметрыОтчета.ПоказательБУ Тогда 	
				Если ЭтоФСБУ6 Тогда
					ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ЛиквидационнаяСтоимость");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииБУ");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Обесценение");
				ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда 
					Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
					ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииБУ");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииПР");
				Иначе
					ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииБУ");
				КонецЕсли;
			КонецЕсли;
			
			Если Способ = "ПропорциональноОбъемуПродукцииБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				Если ЭтоФСБУ6 Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОстатокОбъемаПродукции");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРабот");
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРабот");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОбъемПродукцииРаботДляАмортизации");
				КонецЕсли;
			ИначеЕсли Способ = "ПоСуммеЧиселЛетИспользованияБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				Если ЭтоФСБУ6 Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОстатокСрокаПолезногоИспользованияБУ");
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользованияБУ");
				КонецЕсли;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЧислоЛетОставшихсяДоКонцаСПИ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СуммаЧиселЛетСПИ");
			ИначеЕсли Способ = "ПоЕНАОФБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизации");
			ИначеЕсли Способ = "ПоЕНАОФНа1000кмПробегаБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРабот");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизации");
			ИначеЕсли Способ = "УменьшаемогоОстаткаБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользованияБУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОстатокСрокаПолезногоИспользованияБУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентУскорения");
			Иначе
				// Вывод срока использования
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользования"+ ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОстатокСрокаПолезногоИспользования"+ ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
			КонецЕсли;
			
			// Вывод коэффициентов
			Если ПараметрыОтчета.ПоказательНУ Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизацииНУ");
			КонецЕсли;
			
			//Вывод корректировки обесценения
			Если ЭтоФСБУ6 
				И (Способ = "ЛинейныйБУ" ИЛИ Способ = "ПропорциональноОбъемуПродукцииБУ") Тогда
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "КорректировкаОбесценения");
			КонецЕсли;
			
			// Вывод амортизации
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа = Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СуммаАмортизации" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
			
			// Вывод способа отражения расходов
			Если ИмяГруппировки = ГруппировкаПериод Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СпособыОтраженияРасходовПоАмортизации");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Удаление итоговых строк в группировке по виду имущества.
	ИменаГруппировок = Новый Массив;
	Если ПараметрыОтчета.ПоказательНУ Тогда

		ИменаГруппировок.Добавить("ЛинейныйНУ");
		ИменаГруппировок.Добавить("НеЛинейныйНУ");

	Иначе
		
		ПрименяютсяУстаревшиеПравила = ПрименяютсяУстаревшиеПравилаУчета(
			ПараметрыОтчета.КонецПериода,
			ПараметрыОтчета.Организация,
			ПараметрыОтчета.ВыполнениеОтчета);

		СтрокаФСБУ6 = "ФСБУ6";
		Если ПрименяютсяУстаревшиеПравила Тогда
			СтрокаФСБУ6 = "";
		КонецЕсли;
	
		УточнениеИмениГруппировки = ?(ПараметрыОтчета.ПоказательВР, "СРазницами", "");
		ИменаГруппировок.Добавить("ЛинейныйБУ" + УточнениеИмениГруппировки + СтрокаФСБУ6);
		ИменаГруппировок.Добавить("УменьшаемогоОстаткаБУ" + УточнениеИмениГруппировки + СтрокаФСБУ6);
		ИменаГруппировок.Добавить("ПоСуммеЧиселЛетИспользованияБУ" + УточнениеИмениГруппировки + СтрокаФСБУ6);
		ИменаГруппировок.Добавить("ПропорциональноОбъемуПродукцииБУ" + УточнениеИмениГруппировки + СтрокаФСБУ6);
		ИменаГруппировок.Добавить("ПоЕНАОФБУ" + УточнениеИмениГруппировки);
		ИменаГруппировок.Добавить("ПоЕНАОФНа1000кмПробегаБУ" + УточнениеИмениГруппировки);
		ИменаГруппировок.Добавить("ИныеБУ" + УточнениеИмениГруппировки);

	КонецЕсли;
	
	ПараметрыПоиска = БухгалтерскиеОтчеты.ПараметрыПоискаВТелеМакетаКомпоновки();
	ПараметрыПоиска.МножественныйПодбор = Истина;
	ЭлементыТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
					МакетКомпоновки, "Группировка", ПараметрыПоиска);
	Для каждого ЭлементТела Из ЭлементыТела Цикл
	
		ИмяГруппировки = Сред(ЭлементТела.Имя, 12); // вырежем слово "Группировка"
		Если ИменаГруппировок.Найти(ИмяГруппировки) <> Неопределено Тогда
			ЭлементТела.Тело.Удалить(ЭлементТела.Тело[2]);
		КонецЕсли;
	
	КонецЦикла; 

	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	ПараметрыПоиска.СвойствоДляИдентификации = "ТипЭлемента";
	ПараметрыПоиска.МножественныйПодбор = Ложь;
	ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
					МакетКомпоновки, "ТаблицаМакетаКомпоновкиДанных", ПараметрыПоиска);
	Если ЭлементТела <> Неопределено Тогда
		ПараметрыОтчета.Вставить("ВысотаШапки",
			МакетКомпоновки.Макеты[ЭлементТела.МакетШапки].Макет.Количество() + ВысотаШапки);

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Перем РасчетАмортизации;
	
	// При изменении текста запроса необходимо проверить корректность изменения нового текста 
	// в процедуре УчетРемонтовОС.ДополнитьТекстЗапросаСправкаРасчетАмортизации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетАмортизации.ПериодРасчета КАК ПериодРасчета,
	|	РасчетАмортизации.Организация КАК Организация,
	|	РасчетАмортизации.Объект КАК Объект,
	|	ПРЕДСТАВЛЕНИЕ(РасчетАмортизации.Объект) КАК ОбъектПредставление,
	|	ЕСТЬNULL(КомпонентыАмортизации.Ссылка, РасчетАмортизации.Объект) КАК КомпонентАмортизации,
	|	РасчетАмортизации.СпособНачисленияАмортизацииБУ КАК СпособНачисленияАмортизацииБУ,
	|	РасчетАмортизации.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.АмортизационнаяГруппа) КАК АмортизационнаяГруппа,
	|	МАКСИМУМ(РасчетАмортизации.ИнвентарныйНомер) КАК ИнвентарныйНомер,
	|	МАКСИМУМ(РасчетАмортизации.ДатаВводаВЭксплуатацию) КАК ДатаВводаВЭксплуатацию,
	|	МАКСИМУМ(РасчетАмортизации.НачислятьАмортизациюБУ) КАК НачислятьАмортизациюБУ,
	|	МАКСИМУМ(РасчетАмортизации.НачислятьАмортизациюНУ) КАК НачислятьАмортизациюНУ,
	|	МАКСИМУМ(РасчетАмортизации.НормаАмортизации) КАК НормаАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьБУ) КАК СтоимостьБУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьНУ) КАК СтоимостьНУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьПР) КАК СтоимостьПР,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьВР) КАК СтоимостьВР,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьБУ) КАК ОстаточнаяСтоимостьБУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьНУ) КАК ОстаточнаяСтоимостьНУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьПР) КАК ОстаточнаяСтоимостьПР,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьВР) КАК ОстаточнаяСтоимостьВР,
	|	МАКСИМУМ(РасчетАмортизации.Обесценение) КАК Обесценение,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииБУ) КАК СтоимостьДляАмортизацииБУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииНУ) КАК СтоимостьДляАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииПР) КАК СтоимостьДляАмортизацииПР,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииБУ) КАК СуммаАмортизацииБУ,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииНУ) КАК СуммаАмортизацииНУ,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииПР) КАК СуммаАмортизацииПР,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииВР) КАК СуммаАмортизацииВР,
	|	СУММА(РасчетАмортизации.КорректировкаОбесценения) КАК КорректировкаОбесценения,
	|	МАКСИМУМ(РасчетАмортизации.СрокПолезногоИспользованияБУ) КАК СрокПолезногоИспользованияБУ,
	|	МАКСИМУМ(РасчетАмортизации.СрокПолезногоИспользованияНУ) КАК СрокПолезногоИспользованияНУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстатокСрокаПолезногоИспользованияБУ) КАК ОстатокСрокаПолезногоИспользованияБУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстатокСрокаПолезногоИспользованияНУ) КАК ОстатокСрокаПолезногоИспользованияНУ,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентАмортизацииНУ) КАК КоэффициентАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.СпособыОтраженияРасходовПоАмортизации) КАК СпособыОтраженияРасходовПоАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.ЧислоЛетОставшихсяДоКонцаСПИ) КАК ЧислоЛетОставшихсяДоКонцаСПИ,
	|	МАКСИМУМ(РасчетАмортизации.СуммаЧиселЛетСПИ) КАК СуммаЧиселЛетСПИ,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентАмортизации) КАК КоэффициентАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентУскорения) КАК КоэффициентУскорения,
	|	СУММА(РасчетАмортизации.ОбъемПродукцииРабот) КАК ОбъемПродукцииРабот,
	|	МАКСИМУМ(РасчетАмортизации.ОбъемПродукцииРаботДляАмортизации) КАК ОбъемПродукцииРаботДляАмортизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетАмортизации.Объект ССЫЛКА Справочник.ОсновныеСредства
	|				ТОГДА ""ОС""
	|			ИНАЧЕ ""НМА""
	|		КОНЕЦ) КАК ВидИмущества,
	|	МАКСИМУМ(РасчетАмортизации.ЛиквидационнаяСтоимость) КАК ЛиквидационнаяСтоимость,
	|	МАКСИМУМ(РасчетАмортизации.ОстатокОбъемаПродукции) КАК ОстатокОбъемаПродукции,
	|	МАКСИМУМ(РасчетАмортизации.КонецПериодаЗатрат) КАК КонецПериодаЗатрат
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
	|		ПО РасчетАмортизации.КомпонентАмортизации = КомпонентыАмортизации.Ссылка
	|ГДЕ
	|	РасчетАмортизации.Активность
	|	И РасчетАмортизации.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетАмортизации.Организация = &Организация
	|	И &ОтборВидИмущества
	|	И &ДопУсловие
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетАмортизации.ПериодРасчета,
	|	РасчетАмортизации.Организация,
	|	РасчетАмортизации.Объект,
	|	ЕСТЬNULL(КомпонентыАмортизации.Ссылка, РасчетАмортизации.Объект),
	|	РасчетАмортизации.СпособНачисленияАмортизацииБУ,
	|	РасчетАмортизации.СпособНачисленияАмортизацииНУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Объект,
	|	КомпонентАмортизации,
	|	ПериодРасчета";
	// Порядок важен для вывода примечания ВыбытиеАктива - см. ЗаполнитьТекстПримечанияПредставлениеПериода, ЭтоПоследняяЗаписьПотокаЗатрат
	
	УчетРемонтовОС.ДополнитьТекстЗапросаСправкаРасчетАмортизации(Запрос.Текст);
	
	ВидОперации = Неопределено;
	Если ПараметрыОтчета.ВыполнениеОтчета.Свойство("ВидОперации") Тогда
		ВидОперации = ПараметрыОтчета.ВыполнениеОтчета.ВидОперации;
	КонецЕсли;
	
	ВыводитьОсновныеСредства     = Истина;
	ВыводитьНематериальныеАктивы = Истина;
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		ОтборВидИмущества = "РасчетАмортизации.Объект ССЫЛКА Справочник.НематериальныеАктивы";
		ВыводитьОсновныеСредства     = Ложь;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		ОтборВидИмущества = "РасчетАмортизации.Объект ССЫЛКА Справочник.ОсновныеСредства";
		ВыводитьНематериальныеАктивы = Ложь;
	Иначе
		ОтборВидИмущества = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВидИмущества", ОтборВидИмущества);
	
	ДопУсловие = "(РасчетАмортизации.СуммаАмортизацииБУ <> 0
		|			ИЛИ РасчетАмортизации.СтоимостьДляАмортизацииБУ <> 0
		|			ИЛИ РасчетАмортизации.ОстаточнаяСтоимостьБУ <> 0
		|			ИЛИ РасчетАмортизации.ОграничениеРаздела = ЗНАЧЕНИЕ(Перечисление.РазделыРасчетаАмортизации.ТолькоБухгалтерскийУчет))
		|	И РасчетАмортизации.ОграничениеРаздела <> ЗНАЧЕНИЕ(Перечисление.РазделыРасчетаАмортизации.ТолькоНалоговыйУчет)";
	Если ПараметрыОтчета.ПоказательНУ Тогда 
		ДопУсловие = "(РасчетАмортизации.СуммаАмортизацииНУ <> 0
		|			ИЛИ РасчетАмортизации.СтоимостьДляАмортизацииНУ <> 0
		|			ИЛИ РасчетАмортизации.ОстаточнаяСтоимостьНУ <> 0
		|			ИЛИ РасчетАмортизации.ОграничениеРаздела = ЗНАЧЕНИЕ(Перечисление.РазделыРасчетаАмортизации.ТолькоНалоговыйУчет))
		|	И РасчетАмортизации.ОграничениеРаздела <> ЗНАЧЕНИЕ(Перечисление.РазделыРасчетаАмортизации.ТолькоБухгалтерскийУчет)";
	ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда
		ДопУсловие = "РасчетАмортизации.СуммаАмортизацииБУ <> 0
			|ИЛИ РасчетАмортизации.СтоимостьДляАмортизацииБУ <> 0
			|ИЛИ РасчетАмортизации.СуммаАмортизацииПР <> 0
			|ИЛИ РасчетАмортизации.СуммаАмортизацииВР <> 0";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", СтрШаблон("(%1)", ДопУсловие));
	
	НачалоПериода = ?(ПараметрыОтчета.СНачалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.НачалоПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	РасчетАмортизации = Запрос.Выполнить().Выгрузить();
	РасчетАмортизации.Колонки.Добавить("ПредставлениеПериода", Новый ОписаниеТипов("Строка"));
	РасчетАмортизации.Колонки.Добавить("ТипПримечания", Новый ОписаниеТипов("Строка"));
	
	ТаблицаРеквизиты = УчетОС.НовыйРасчетАмортизацииОСТаблицаРеквизиты();
	
	// Когда-то давно регистр не использовался и расчет мог выполняться при составлении отчета "на лету"
	ВыполнятьРасчетБезРегламентнойОперации_ОС  =
		ВыводитьОсновныеСредства
		И УчетОС.ПрименяетсяПБУ6(ПараметрыОтчета.КонецПериода, ПараметрыОтчета.Организация);
	ВыполнятьРасчетБезРегламентнойОперации_НМА =
		ВыводитьНематериальныеАктивы
		И УчетНМА.ПрименяетсяПБУ14(ПараметрыОтчета.КонецПериода);
	
	Для Сч = Месяц(НачалоПериода) По Месяц(ПараметрыОтчета.КонецПериода) Цикл
		
		ПериодРасчета = КонецМесяца(Дата(Год(НачалоПериода), Сч, 1));
		
		ПараметрыОтбора = Новый Структура("ПериодРасчета, ВидИмущества");
		ПараметрыОтбора.ПериодРасчета = НачалоДня(ПериодРасчета);
		ПараметрыОтбора.ВидИмущества = "ОС";
		
		Если ВыполнятьРасчетБезРегламентнойОперации_ОС И РасчетАмортизации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			
			ТаблицаРеквизиты.Очистить();
			
			Реквизиты = ТаблицаРеквизиты.Добавить();
			Реквизиты.Период      = НачалоМесяца(ПериодРасчета);
			Реквизиты.ДатаРасчета = НачалоМесяца(ПериодРасчета);
			Реквизиты.Организация = ПараметрыОтчета.Организация;
			
			Отказ = Ложь;
			
			ТаблицыРасчетаАмортизацииОС = УчетОС.ПодготовитьРасчетАмортизацииОС(Неопределено, ТаблицаРеквизиты, Отказ, Истина);
			
			Для Каждого СтрокаСправки Из ТаблицыРасчетаАмортизацииОС.СправкаРасчет Цикл
				
				Если ПараметрыОтчета.ПоказательНУ И СтрокаСправки.СуммаАмортизацииНУ = 0 Тогда 
					Продолжить;
				ИначеЕсли ПараметрыОтчета.ПоказательВР И СтрокаСправки.СуммаАмортизацииБУ = 0
					И СтрокаСправки.СуммаАмортизацииПР = 0 И СтрокаСправки.СуммаАмортизацииВР = 0 Тогда
					Продолжить;
				ИначеЕсли СтрокаСправки.СуммаАмортизацииБУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРасчетАмортизации = РасчетАмортизации.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетАмортизации, СтрокаСправки);
				
				НоваяСтрокаРасчетАмортизации.ВидИмущества = "ОС";
				НоваяСтрокаРасчетАмортизации.Организация  = ПараметрыОтчета.Организация;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОтбора.ВидИмущества = "НМА";
		
		Если ВыполнятьРасчетБезРегламентнойОперации_НМА И РасчетАмортизации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			
			ТаблицаРеквизиты.Очистить();
			
			Реквизиты = ТаблицаРеквизиты.Добавить();
			Реквизиты.Период      = ПериодРасчета;
			Реквизиты.Организация = ПараметрыОтчета.Организация;
			
			ТаблицыРасчетаАмортизацииНМА = УчетНМА.ПодготовитьРасчетАмортизацииНМА(Неопределено, ТаблицаРеквизиты, Истина);
			
			Для Каждого СтрокаСправки Из ТаблицыРасчетаАмортизацииНМА.СправкаРасчет Цикл
				
				Если ПараметрыОтчета.ПоказательНУ И СтрокаСправки.СуммаАмортизацииНУ = 0 Тогда 
					Продолжить;
				ИначеЕсли ПараметрыОтчета.ПоказательВР И СтрокаСправки.СуммаАмортизацииБУ = 0
					И СтрокаСправки.СуммаАмортизацииПР = 0 И СтрокаСправки.СуммаАмортизацииВР = 0 Тогда
					Продолжить;
				ИначеЕсли СтрокаСправки.СуммаАмортизацииБУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРасчетАмортизации = РасчетАмортизации.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетАмортизации, СтрокаСправки);
				
				НоваяСтрокаРасчетАмортизации.ВидИмущества = "НМА";
				НоваяСтрокаРасчетАмортизации.Организация  = ПараметрыОтчета.Организация;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОтчета.ВыполнениеОтчета.Вставить("Примечания", Новый Массив);
	ЗаполнитьТекстПримечанияПредставлениеПериода(РасчетАмортизации, ПараметрыОтчета.ВыполнениеОтчета.Примечания);
	ЗаполнитьТекстПримечанияНеПодлежитАмортизации(
		РасчетАмортизации,
		ПараметрыОтчета.ВыполнениеОтчета.Примечания,
		ПараметрыОтчета.ПоказательБУ,
		ПараметрыОтчета.ПоказательНУ);
	
	ВнешниеНаборыДанных = Новый Структура("РасчетАмортизации", РасчетАмортизации);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, 
		ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.КонецПериода);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета) + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки",Результат.ВысотаТаблицы); 
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	ВывестиПримечания(Результат, ПараметрыОтчета);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	НачалоПериода = ?(ПараметрыОтчета.СНачалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.НачалоПериода);
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Возврат "Справка-расчет амортизации" + ПредставлениеПериода;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","Амортизация", "Амортизация"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СпособПоддерживаетНачислениеАмортизацииПоКомпонентам(Способ)
	
	Возврат Способ = "ЛинейныйБУ" Или Способ = "ПропорциональноОбъемуПродукцииБУ";
	
КонецФункции

Процедура ЗаполнитьТекстПримечанияПредставлениеПериода(РасчетАмортизации, Примечания)
	
	ТипДоляСтоимости = Метаданные.РегистрыСведений.РасчетАмортизации.Ресурсы.ОстатокСрокаПолезногоИспользованияБУ.Тип;
	СпособыАмортизацииНМА = Перечисления.СпособыНачисленияАмортизацииНМА.ОбщиеСпособы();
	
	Для Каждого Запись Из РасчетАмортизации Цикл
		
		Если Не ЗначениеЗаполнено(Запись.КонецПериодаЗатрат) Тогда
			Запись.ПредставлениеПериода = Формат(Запись.ПериодРасчета, "ДФ='MMMM'");
		Иначе
			
			ЧислоС  = День(Запись.ПериодРасчета);
			ЧислоПо = День(Запись.КонецПериодаЗатрат);
			
			СпособАмортизации = Запись.СпособНачисленияАмортизацииБУ;
			Если ТипЗнч(СпособАмортизации) = Тип("ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА") Тогда
				СпособАмортизации = СпособыАмортизацииНМА[СпособАмортизации];
			КонецЕсли;
			
			Если СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
				Или СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
				
				Запись.ПредставлениеПериода = СтрШаблон(
					НСтр("ru = '%1 - с %2 по %3'"),
					Формат(Запись.ПериодРасчета, "ДФ='MMMM'"),
					ЧислоС,
					ЧислоПо);
				
			Иначе
				
				ДлинаПериода = ЧислоПо - ЧислоС + 1;
				ДлинаМесяца  = День(КонецМесяца(Запись.КонецПериодаЗатрат));
				ДлинаПериодаПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"),
					ДлинаПериода);
				Если ДлинаМесяца = 0 Тогда
					ДоляСтоимости = 1;
				Иначе
					ДоляСтоимости = ТипДоляСтоимости.ПривестиЗначение(ДлинаПериода / ДлинаМесяца);
				КонецЕсли;
				
				Запись.ПредставлениеПериода = СтрШаблон(
					НСтр("ru = '%1 - с %2 по %3, %4.
                          |Доля амортизации = %5/%6 = %7'"),
					Формат(Запись.ПериодРасчета, "ДФ='MMMM'"),
					ЧислоС,
					ЧислоПо,
					ДлинаПериодаПрописью,
					ДлинаПериода,
					ДлинаМесяца,
					ДоляСтоимости);
				
				Если Запись.ПериодРасчета = Запись.ДатаВводаВЭксплуатацию Тогда
					Запись.ТипПримечания = "ПризнаниеАктива";
				ИначеЕсли ЧислоПо <> ДлинаМесяца И ЭтоПоследняяЗаписьПотокаЗатрат(Запись) Тогда
					Запись.ТипПримечания = "ВыбытиеАктива";
				Иначе
					Запись.ТипПримечания = "ИзменениеСтоимости";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыПримечаний = Новый Массив; // В логическом порядке вывода в подвале отчета
	ТипыПримечаний.Добавить("ПризнаниеАктива");
	ТипыПримечаний.Добавить("ИзменениеСтоимости");
	ТипыПримечаний.Добавить("ВыбытиеАктива");
	
	Для Каждого ТипПримечания Из ТипыПримечаний Цикл
		
		ОтборЗаписей = Новый Структура("ТипПримечания", ТипПримечания);
		ПоясняемыеЗаписи = РасчетАмортизации.НайтиСтроки(ОтборЗаписей);
		Если Не ЗначениеЗаполнено(ПоясняемыеЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		
		Примечания.Добавить(ТипПримечания);
		НомерПримечания = Примечания.Количество();
		
		Для Каждого Запись Из ПоясняемыеЗаписи Цикл
			СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(Запись.ПредставлениеПериода, НомерПримечания);
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод текста примечаний - в ВывестиПримечания

КонецПроцедуры

Процедура ЗаполнитьТекстПримечанияНеПодлежитАмортизации(РасчетАмортизации, Примечания, БухгалтерскийУчет, НалоговыйУчет)
	
	ТипыПримечаний = Новый Структура;
	Если БухгалтерскийУчет Тогда
		ТипыПримечаний.Вставить("НеПодлежитАмортизацииБУ", "НачислятьАмортизациюБУ");
	КонецЕсли;
	Если НалоговыйУчет Тогда
		ТипыПримечаний.Вставить("НеПодлежитАмортизацииНУ", "НачислятьАмортизациюНУ");
	КонецЕсли;
	
	Для Каждого ТипПримечания Из ТипыПримечаний Цикл
		
		ОтборЗаписей = Новый Структура(ТипПримечания.Значение, Ложь); // "Не начислять амортизацию"
		ПоясняемыеЗаписи = РасчетАмортизации.НайтиСтроки(ОтборЗаписей);
	
		Если Не ЗначениеЗаполнено(ПоясняемыеЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		
		Примечания.Добавить(ТипПримечания.Ключ);
		НомерПримечания = Примечания.Количество();
		
		// Подлежит ли объект амортизации, может меняться со временем.
		// Поэтому для объектов, не подлежащих амортизации, выводятся периоды.
		// Несмотря на это, примечание выводится в представление объекта, а не периода.
		// Потому что схемой отчета предусмотрено раздельное отображение объектов, не подлежащих амортизации.
		Для Каждого Запись Из ПоясняемыеЗаписи Цикл
			СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(Запись.ОбъектПредставление, НомерПримечания);
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод текста примечаний - в ВывестиПримечания
	
КонецПроцедуры

Процедура ВывестиПримечания(Результат, Контекст)
	
	Если Не Контекст.ВыполнениеОтчета.Свойство("Примечания") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыПримечаний = Новый Соответствие;
	ТекстыПримечаний.Вставить(
		"ПризнаниеАктива",
		НСтр("ru = 'В месяце признания актива начисляется часть суммы амортизации - только за дни с момента его признания'"));
	ТекстыПримечаний.Вставить(
		"ИзменениеСтоимости",
		НСтр("ru = 'В месяце изменения стоимости актива амортизация начисляется отдельно за каждый период между такими изменениями'"));
	ТекстыПримечаний.Вставить(
		"ВыбытиеАктива",
		НСтр("ru = 'В месяце выбытия актива начисляется часть суммы амортизации - только за дни до его списания'"));
	ТекстыПримечаний.Вставить(
		"НеПодлежитАмортизацииБУ",
		НСтр("ru = 'Не подлежит амортизации'")); // см. п. 28 ФСБУ 6
	ТекстыПримечаний.Вставить(
		"НеПодлежитАмортизацииНУ",
		НСтр("ru = 'Не подлежит амортизации'")); // см. п. 2 ст. 256 НК РФ
		
	Для ИндексПримечания = 0 По Контекст.ВыполнениеОтчета.Примечания.ВГраница() Цикл
		
		СчетчикПримечаний = ИндексПримечания; // Вывод примечания инкрементирует счетчик
		
		Текст = ТекстыПримечаний[Контекст.ВыполнениеОтчета.Примечания[ИндексПримечания]];
		
		Если Текст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СправкиРасчеты.ДобавитьПримечание(Результат, Текст, СчетчикПримечаний);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПоследняяЗаписьПотокаЗатрат(Запись)
	
	// Поток затрат - это поток формирования стоимости конкретного объекта основных средств.
	// Поэтому под последней записью понимается последняя для конкретного объекта.
	
	Таблица = Запись.Владелец();
	
	// Таблица должна быть упорядочена по Организация,Объект,КомпонентАмортизации,ПериодРасчета
	
	ИндексЗаписи          = Таблица.Индекс(Запись);
	ИндексСледующейЗаписи = ИндексЗаписи + 1;
	
	Если ИндексСледующейЗаписи >= Таблица.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СледующаяЗапись = Таблица[ИндексСледующейЗаписи];
	
	ПоляОбъекта = Новый Массив;
	ПоляОбъекта.Добавить("Организация");
	ПоляОбъекта.Добавить("Объект");
	ПоляОбъекта.Добавить("КомпонентАмортизации");
	
	Для Каждого ИмяПоля Из ПоляОбъекта Цикл
		Если СледующаяЗапись[ИмяПоля] <> Запись[ИмяПоля] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПрименяютсяУстаревшиеПравилаУчета(Период, Организация, ВыполнениеОтчета)
	
	Если Не УчетНМА.ПрименяетсяПБУ14(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если УчетОС.ПрименяетсяПБУ6(Период, Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ВыполнениеОтчета.Свойство("ВидОперации") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВыполнениеОтчета.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
