#Область ОписаниеПеременных

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	// Параметр АдресНастроек передается из параметров расшифровки справки-расчета "Нормирование расходов".
	// При открытии формы отчета не из расшифровки, это значение будет незаполненным.
	Если Не ЗначениеЗаполнено(Параметры.АдресНастроек) Тогда
		ВызватьИсключение НСтр("ru = 'Отчет открывается при расшифровке справки-расчета
		|""Нормирование расходов"" и не предназначен для непосредственного использования.'");
	КонецЕсли;
	
	НастройкиОтчета = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек).НастройкиРасшифровки;
	ДополнительныеСвойства = НастройкиОтчета.БазаНормируемыхРасходов.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("ИсключитьФилиалы") Тогда
		ИсключитьФилиалы = ДополнительныеСвойства.ИсключитьФилиалы;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ЭтоВариантОтчетаВыручка() Тогда
		ЗаголовокОтчета = НСтр("ru = 'База нормирования ""Выручка""'");
		Схема = Отчеты.БазаНормируемыхРасходов.ПолучитьМакет("Выручка");
	ИначеЕсли КлючТекущегоВарианта = "КоличествоЗастрахованных" Тогда
		ЗаголовокОтчета = НСтр("ru = 'Предельный размер расходов по договорам страхования на случай смерти и несчастных случаев'");
		Элементы.ПоказатьНастройки.Видимость = Ложь;
		Элементы.ГруппаДополнительнаяКоманднаяПанель.Видимость = Ложь;
		Схема = Отчеты.БазаНормируемыхРасходов.ПолучитьМакет("СтрахованиеЖизни");
	ИначеЕсли Отчеты.БазаНормируемыхРасходов.ЭтоВариантОтчетаОплатаТруда(КлючТекущегоВарианта) Тогда
		ЗаголовокОтчета = НСтр("ru = 'База нормирования ""Оплата труда""'");
		Схема = Отчеты.БазаНормируемыхРасходов.ПолучитьМакет("ОплатаТруда");
	Иначе 
		Элементы.ПоказатьНастройки.Видимость = Ложь;
		Элементы.ГруппаДополнительнаяКоманднаяПанель.Видимость = Ложь;
		ЗаголовокОтчета = НСтр("ru = 'База нормирования ""Оплата труда за период действия договора""'");
		Схема = Отчеты.БазаНормируемыхРасходов.ПолучитьМакет("СтрахованиеБазаОплатаТруда");
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Настройки = Схема.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	
	Если Не Настройки = Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.Настройки);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
	
	Если (ЭтоВариантОтчетаВыручка() Или Отчеты.БазаНормируемыхРасходов.ЭтоВариантОтчетаОплатаТруда(КлючТекущегоВарианта))
		И Параметры.Свойство("ПользовательскиеНастройки")
		И Справочники.Организации.ЕстьОбособленныеПодразделения(Отчет.Организация) Тогда
		
		Если Отчет.КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 Тогда

			ПеремещаемаяГруппировка = Отчет.КомпоновщикНастроек.Настройки.Структура[0];
			ГруппировкаОрганизация = Отчет.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаОрганизация.Имя            = "Группировка";
			
			СтруктураПоляОрганизация = Новый Структура("Поле, ТипГруппировки", "Организация");
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(СтруктураПоляОрганизация, ГруппировкаОрганизация);

			ПоискЭлементов = Новый Соответствие;
			ОтчетыКлиентСервер.СкопироватьРекурсивно(
			Отчет.КомпоновщикНастроек.Настройки, ПеремещаемаяГруппировка, ГруппировкаОрганизация.Структура, Неопределено, ПоискЭлементов);

			Отчет.КомпоновщикНастроек.Настройки.Структура.Удалить(ПеремещаемаяГруппировка);

		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПриОткрытии = Параметры.СформироватьПриОткрытии;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ИнформационнаяБазаФайловая Или СформироватьПриОткрытии Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	КонецЕсли;
		
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если Не ИспользуютсяСтандартныеНастройки Тогда
		БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации(ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		СоответствиеОрганизаций,
		Отчет.Организация,
		Отчет.ВключатьОбособленныеПодразделения);
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка, ПолеОрганизация, СоответствиеОрганизаций);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(
		ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода", Отчет.КонецПериода);
	ПараметрыВыбора.Вставить("ВидПериода", ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));

	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отчет.НачалоПериода = НачалоГода(ВыбранноеЗначение.НачалоПериода);
	Отчет.КонецПериода = КонецМесяца(ВыбранноеЗначение.КонецПериода);
	УправлениеФормой(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировка

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, ЭтоГруппа);  

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеПоля

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСортировка

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьТекстЗаголовка(Форма);
		
	Форма.ПредставлениеПериодаВыбор = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		НачалоМесяца(Форма.Отчет.КонецПериода),
		Форма.Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	ТекстПредставленияПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(Форма.Отчет.КонецПериода), КонецМесяца(Форма.Отчет.КонецПериода));
		
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(Форма.ЗаголовокОтчета);
	ЧастиЗаголовка.Добавить(ТекстПредставленияПериода);
	
	Форма.Заголовок = СтрСоединить(ЧастиЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
		
	Если Режим = "Группировка" Или Режим = "Выбор" Тогда
		СписокПолей.Добавить("Период");
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
	КонецЕсли;
		
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);

	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяФормы);
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	МенеджерОтчета.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(АдресХранилища)
	
	РезультатВыполнения  = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат            = РезультатВыполнения.Результат;
	ДанныеРасшифровки    = РезультатВыполнения.ДанныеРасшифровки;
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.СформироватьОтчет.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Отчет.Организация);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		ОткрытьНастройки();
		Возврат;
	Иначе
		СкрытьНастройки();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности.
	ИДОперации = "ФормированиеОтчетаРасшифровкаБазыНормируемыхРасходов";
	
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(ИДОперации, Ложь, Ложь);
	// СтандартныеПодсистемы.ОценкаПроизводительности.
	
	ДлительнаяОперация = СформироватьОтчетНаСервере();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
		
		СкрытьНастройки();
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(РезультатФормирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатФормирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФормирования.Статус <> "Ошибка" Тогда
		ЗафиксироватьДлительностьКлючевойОперации(Ложь);
		ЗагрузитьПодготовленныеДанныеНаСервере(РезультатФормирования.АдресРезультата);
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации(Истина);
		ПоказатьОшибкиФормирования(РезультатФормирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации(НаличиеОшибки)

	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера, НаличиеОшибки);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормирования(ДлительнаяОперация)
	
	ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	
	СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Текст = СообщениеОбОшибке;
	ОтображениеСостояния.Картинка = Новый Картинка;
	
КонецПроцедуры

 &НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчеты.Расшифровка базы нормируемых расходов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Отчеты.БазаНормируемыхРасходов,
		,
		ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отчет.НачалоПериода = НачалоГода(РезультатВыбора.НачалоПериода);
	Отчет.КонецПериода = КонецМесяца(РезультатВыбора.КонецПериода);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЭтоВариантОтчетаВыручка()
	
	Возврат КлючТекущегоВарианта = "Выручка";

КонецФункции

#КонецОбласти