// В запросе схемы компоновки СтрахованиеБазаОплатаТруда используется функция АВТОНОМЕРЗАПИСИ() для нумерации договоров.
// На момент написания запроса упорядочивание временной таблицы при использовании этой функции не поддерживается,
// но предполагается, что в дальнейшем эта возможность будет реализована и в запросе можно будет отказаться
// от использования выражения "ПЕРВЫЕ 10000000" (см. обращение на сайте конференции https://partners.v8.1c.ru/forum/topic/2076228).
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",           Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",              Истина);
	Результат.Вставить("ИспользоватьПередВыводомЭлементаРезультата",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета:
//   * Организация - СправочникСсылка.Организации
//   * ЗаголовокОтчета - Строка
//   * НачалоПериода - Дата
//   * КонецПериода - Дата
//   * ВключатьОбособленныеПодразделения - Булево
//   * РежимРасшифровки - Булево
//   * ВыводитьЗаголовок - Булево
//   * ВыводитьПодвал - Булево
//   * ДанныеРасшифровки - Неопределено
//   * МакетОформления - Строка
//   * СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//                           - Неопределено
//   * НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных
//                               - Неопределено
//   * ИдентификаторОтчета - Строка
//   * ДоляСпециальныхРежимов - Число
//   * КлючВарианта - Строка
//   * Периодичность - Число
//   * ДополнительныеПоля - ТаблицаЗначений
//   * РазмещениеДополнительныхПолей - Число
//   * Группировка - ТаблицаЗначений
//   * ВыводитьПримечаниеКоличествоПоПроводкам - Булево
//   * ВидРасходовНУ - ПеречислениеСсылка.ВидыРасходовНУ
//   * ИдентификаторЗаголовкаУчтеноВНУ - Строка
//   * ИдентификаторЗаголовкаМесяц - Строка
//   * ИдентификаторЗаголовкаНормаЗаПериод - Строка
//   * ПредставлениеРегламентнойОперации - Строка
//   * ОтсутствуютДанныеДляРасшифровки - Булево
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
		
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                            , Справочники.Организации.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ЗаголовокОтчета"                        , "");
	ПараметрыОтчета.Вставить("НачалоПериода"                          , '0001-01-01');
	ПараметрыОтчета.Вставить("КонецПериода"                           , '0001-01-01');
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения"      , Ложь);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                       , Ложь);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                      , Ложь);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                         , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                      , Неопределено);
	ПараметрыОтчета.Вставить("МакетОформления"                        , "");
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"                  , Неопределено);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"              , Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"                    , "");
	ПараметрыОтчета.Вставить("ДоляСпециальныхРежимов"                 , 0);
	ПараметрыОтчета.Вставить("КлючВарианта"                           , "");
	ПараметрыОтчета.Вставить("Периодичность"                          , 0);
	ПараметрыОтчета.Вставить("ДополнительныеПоля"                     , Новый ТаблицаЗначений());
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"          , 0);
	ПараметрыОтчета.Вставить("Группировка"                            , Новый ТаблицаЗначений());
	ПараметрыОтчета.Вставить("ВыводитьПримечаниеКоличествоПоПроводкам", Ложь);
	ПараметрыОтчета.Вставить("ВидРасходовНУ"                          , Перечисления.ВидыРасходовНУ.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ИдентификаторЗаголовкаУчтеноВНУ"        , "");
	ПараметрыОтчета.Вставить("ИдентификаторЗаголовкаМесяц"            , "");
	ПараметрыОтчета.Вставить("ИдентификаторЗаголовкаНормаЗаПериод"    , "");
	ПараметрыОтчета.Вставить("ПредставлениеРегламентнойОперации"      , "");
	ПараметрыОтчета.Вставить("ОтсутствуютДанныеДляРасшифровки"        , Ложь);
	ПараметрыОтчета.Вставить("ИсключитьФилиалы"                       , Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Заполняет структуру настроек отчета из реквизитов формы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета
//  Форма - Форма - форма отчета.
//
Процедура ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма) Экспорт
	
	Отчет = Форма.Отчет;
	
	Если ЭтоВариантОтчетаОплатаТруда(Форма.КлючТекущегоВарианта) Тогда
		Организации = Справочники.Организации.ВсяОрганизация(Отчет.Организация, Отчет.НачалоПериода);
		ДоляСпециальныхРежимов =
			НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(Организации, Отчет.КонецПериода); // За месяц
		ПараметрыОтчета.ДоляСпециальныхРежимов = ДоляСпециальныхРежимов;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Форма);
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Отчет);

	ПараметрыОтчета.СхемаКомпоновкиДанных                   = ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	ПараметрыОтчета.НастройкиКомпоновкиДанных               = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета.ИдентификаторОтчета                     = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	ПараметрыОтчета.КлючВарианта                            = Форма.КлючТекущегоВарианта;
	ПараметрыОтчета.ДополнительныеПоля                      = Отчет.ДополнительныеПоля.Выгрузить();
	ПараметрыОтчета.РазмещениеДополнительныхПолей           = Отчет.РазмещениеДополнительныхПолей;
	ПараметрыОтчета.Группировка                             = Отчет.Группировка.Выгрузить();
	ПараметрыОтчета.ВыводитьПримечаниеКоличествоПоПроводкам = Ложь;
	ПараметрыОтчета.ИдентификаторЗаголовкаУчтеноВНУ         = "###УчтеноВНУ###";
	ПараметрыОтчета.ИдентификаторЗаголовкаМесяц             = "###Месяц###";
	ПараметрыОтчета.ИдентификаторЗаголовкаНормаЗаПериод     = "###НормаЗаПериод###";
	ПараметрыОтчета.ПредставлениеРегламентнойОперации       = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов;
	ПараметрыОтчета.ОтсутствуютДанныеДляРасшифровки         = ОтсутствуютДанныеДляРасшифровки(ПараметрыОтчета);
	
КонецПроцедуры

// Возвращает коллекцию вариантов настроек отчета
// 
// Возвращаемое значение:
//  Массив из Структура - Варианты настроек:
//    *Имя - Строка
//    *Представление - Строка
//
Функция ВариантыНастроек() Экспорт
	
	ВариантыНастроек = Новый Массив;
	НастройкаВыручка = Новый Структура("Имя, Представление", "Выручка", НСтр("ru = 'Выручка от реализации'"));
	ВариантыНастроек.Добавить(НастройкаВыручка);
	
	Возврат ВариантыНастроек;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПредставлениеПериода = СтрЗаменить(
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода),
		"за",
		"");
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ПредставлениеПериода",
		СокрЛП(ПредставлениеПериода));
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(
		ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация",  ПараметрыОтчета.Организация);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		
	Если ЭтоВариантОтчетаОплатаТруда(ПараметрыОтчета.КлючВарианта) Тогда
			
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"СчетаРасходов",
			БухгалтерскийУчет.СформироватьМассивСубсчетов(НалоговыйУчет.ПолучитьМассивСчетовУчетаРасходов()));
		
		СчетаРезультата = Новый Массив;
		СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);           // 90.02.1
		СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);      // 90.07.1
		СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД); // 90.08.1
		СчетаРезультата = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРезультата);
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"СчетаРезультата",
			СчетаРезультата);
			
			ЧастьИмениПоля = ПараметрыОтчета.КлючВарианта;
			Если ПараметрыОтчета.ДоляСпециальныхРежимов = 0 Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(
					КомпоновщикНастроек.Настройки,
					ЧастьИмениПоля + "Принимаемые",
					НСтр("ru = 'Сумма'"));
			ИначеЕсли ПараметрыОтчета.ДоляСпециальныхРежимов = 1 Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(
					КомпоновщикНастроек.Настройки,
					ЧастьИмениПоля + "Распределяемые",
					НСтр("ru = 'Сумма'"));
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(
					КомпоновщикНастроек.Настройки,
					ЧастьИмениПоля + "Принимаемые",
					НСтр("ru = 'Сумма (принимаемые расходы)'"));
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(
					КомпоновщикНастроек.Настройки,
					ЧастьИмениПоля + "Распределяемые",
					НСтр("ru = 'Сумма (распределяемые расходы)'"));
			КонецЕсли;
				
	ИначеЕсли ПараметрыОтчета.КлючВарианта = "КоличествоЗастрахованных" Или ПараметрыОтчета.КлючВарианта = "СтрахованиеБазаОплатаТруда" Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"ВидРасходовНУ",
			ПараметрыОтчета.ВидРасходовНУ);
			
			Если ПараметрыОтчета.КлючВарианта = "СтрахованиеБазаОплатаТруда" Тогда
				ЗаполняемыеПараметрыСКД = Новый Массив;
				ЗаполняемыеПараметрыСКД.Добавить("ИдентификаторЗаголовкаУчтеноВНУ");
				ЗаполняемыеПараметрыСКД.Добавить("ИдентификаторЗаголовкаМесяц");
				ЗаполняемыеПараметрыСКД.Добавить("ИдентификаторЗаголовкаНормаЗаПериод");
	
				Для Каждого ИмяПараметра Из ЗаполняемыеПараметрыСКД Цикл
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, ПараметрыОтчета[ИмяПараметра], Истина);
				КонецЦикла;
			КонецЕсли;
			
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Периодичность
	ПериодичностьОтчета = Новый Соответствие;
	ПериодичностьОтчета.Вставить(6, "ДЕНЬ");
	ПериодичностьОтчета.Вставить(9, "МЕСЯЦ");
	ПериодичностьОтчета.Вставить(10, "КВАРТАЛ");
	ПериодичностьОтчета.Вставить(11, "ПОЛУГОДИЕ");
	ПериодичностьОтчета.Вставить(12, "ГОД");
	
	СхемаЭталон = Неопределено;
	
	Если ПараметрыОтчета.КлючВарианта = "Выручка" Тогда
		СхемаЭталон = ПолучитьМакет("Выручка");
	ИначеЕсли ПараметрыОтчета.КлючВарианта = "ОплатаТруда" Или ПараметрыОтчета.КлючВарианта = "Вознаграждение" Тогда
		СхемаЭталон = ПолучитьМакет("ОплатаТруда");
	КонецЕсли;
	
	Если СхемаЭталон <> Неопределено Тогда
		Для Каждого НаборДанных Из Схема.НаборыДанных Цикл
			ИмяНабора = НаборДанных.Имя;
			ТекстЗапросаЭталон = СхемаЭталон.НаборыДанных[ИмяНабора].Запрос;
			НаборДанных.Запрос = СтрЗаменить(ТекстЗапросаЭталон, ".ПериодДень", ".Период" + ПериодичностьОтчета.Получить(Периодичность));
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОтчета.КлючВарианта <> "КоличествоЗастрахованных" И ПараметрыОтчета.КлючВарианта <> "СтрахованиеБазаОплатаТруда" Тогда
		// Группировка
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Группировка = КомпоновщикНастроек.Настройки.Структура;
		
		Группировка = Группировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		СтруктураПоляПериод = Новый Структура("Поле, ТипГруппировки", "Период");
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(СтруктураПоляПериод, Группировка);
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  ПараметрыОтчета - Структура - содержит ключи:
//		* ИдентификаторОтчета - Строка - Имя отчета, как оно указано в метаданных.
//		* СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//		* НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт

	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ВключаяОбособленныеПодразделения =
			ПараметрыОтчета.ВключатьОбособленныеПодразделения
			Или ПараметрыОтчета.ИсключитьФилиалы И Справочники.Организации.ЕстьОбособленныеПодразделения(ПараметрыОтчета.Организация);
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			ПараметрыОтчета.Организация, ВключаяОбособленныеПодразделения, ПараметрыОтчета.КонецПериода);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета =
		НалоговыйУчет.ПредставлениеНормируемогоВидаРасходов(ПараметрыОтчета.ВидРасходовНУ);

	ОбластьНастроек = Результат.Вывести(ОбластьОписаниеНастроек);
	ОбъединеннаяОбластьНастроек = Результат.Область(ОбластьНастроек.Верх, 1, ОбластьНастроек.Верх, Результат.ШиринаТаблицы + 1);
	ОбъединеннаяОбластьНастроек.Объединить();
		
	Если ПараметрыОтчета.Свойство("ДоляСпециальныхРежимов") И ПараметрыОтчета.ДоляСпециальныхРежимов <> 0 Тогда
		ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Доля распределяемых расходов:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ПараметрыОтчета.ДоляСпециальныхРежимов;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
			
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода в отчет отдельного элемента в структуре данных.
//
// Параметры:
//  Контекст          - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки   - МакетКомпоновкиДанных - описание выводимых данных.
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - описание расшифровки для элемента в структуре данных.
//  ЭлементРезультата - ЭлементРезультатаКомпоновкиДанных - описание элемента в структуре данных.
//  ПропуститьЭлемент - Булево - если Истина, то не выводить эти данные в отчет.
//
Процедура ПередВыводомЭлементаРезультата(Контекст, МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, ПропуститьЭлемент) Экспорт
	
	// В варианте отчета "Количество застрахованных" примечание выводится только в том случае, когда в отчете выведены
	// расходы будущих периодов, в которых не указано количество застрахованных лиц. Наличие таких элементов определяем
	// по группировке СКД "Комментарий". Сама группировка в отчет не выводится.
	Если Контекст.ВыводитьПримечаниеКоличествоПоПроводкам Или Контекст.ОтсутствуютДанныеДляРасшифровки Тогда
		ПропуститьЭлемент = Истина;
		Возврат;
	КонецЕсли;
		
	// Параметризуемый макет задействуется только в случае, когда происходит подстановка параметра.
	Если Контекст.Свойство("МакетКомментарий") И ЭлементРезультата.Макет = Контекст.МакетКомментарий Тогда
		Контекст.ВыводитьПримечаниеКоличествоПоПроводкам = Истина;
		ПропуститьЭлемент = Истина;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  Контекст - Структура - см. ПустыеПараметрыКомпоновкиОтчета()
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
		
	Если Контекст.ОтсутствуютДанныеДляРасшифровки Тогда
		ВывестиРасшифровкаОтсутствует(Контекст, Результат);
		Возврат;
	КонецЕсли;
	
	Если Контекст.КлючВарианта = "СтрахованиеБазаОплатаТруда" Тогда
		
		МинимальныйШагДляОбъединения = 2;
		
		ОбработатьЗаголовокПредельныйРазмерСуммНУ(Контекст, Результат, МинимальныйШагДляОбъединения);
		
		ОбъединитьЯчейкиВРасшифровкеПоПериодам(Контекст, Результат, МинимальныйШагДляОбъединения);

		ОбъединитьЯчейкиВРасшифровкеПоДоговорамСтрахования(Контекст, Результат);
		
		ТекстПримечания =
		НСтр("ru = 'Предельный размер расходов здесь и далее определяется с учетом фактических расходов, чтобы учесть период действия договора.'");
		
		СправкиРасчеты.ДобавитьПримечание(Результат, ТекстПримечания, 0);
		
	ИначеЕсли Контекст.КлючВарианта = "КоличествоЗастрахованных" Тогда
		Если Контекст.ВыводитьПримечаниеКоличествоПоПроводкам Тогда
			ТекстПримечания = НСтр("ru = 'Количество застрахованных в справочнике ""Расходы будущих периодов"" не указано,
			|расчет по этому договору выполнен на основании значений субконто ""Работники организаций"" на счетах расчетов по страхованию.'");
			СправкиРасчеты.ДобавитьПримечание(Результат, ТекстПримечания, 0);
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(Контекст.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  Контекст        - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(Контекст, МакетКомпоновки) Экспорт
	
	НайтиНастраиваемыйМакетКомментарий(Контекст, МакетКомпоновки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ПараметрыОтчета.КонецПериода), КонецМесяца(ПараметрыОтчета.КонецПериода));
		
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(ПараметрыОтчета.ЗаголовокОтчета);
	ЧастиЗаголовка.Добавить(ПредставлениеПериода);
	
	Возврат СтрСоединить(ЧастиЗаголовка);
	
КонецФункции

// Определяет, расшифровывает ли вариант отчета базу "Оплата труда" (за исключением договоров страхования).
//
// Параметры:
//  КлючТекущегоВарианта - Строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоВариантОтчетаОплатаТруда(КлючТекущегоВарианта) Экспорт
	
	Возврат КлючТекущегоВарианта = "ОплатаТруда" Или КлючТекущегоВарианта = "Вознаграждение";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НайтиНастраиваемыйМакетКомментарий(Контекст, МакетКомпоновки)

	Если Контекст.Свойство("МакетКомментарий") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
		Для Каждого ПараметрМакета Из Макет.Параметры Цикл
			Если ТипЗнч(ПараметрМакета) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") 
				И СтрНайти(ПараметрМакета.Выражение, "&Комментарий") <> 0 Тогда
				Контекст.Вставить("МакетКомментарий", Макет.Имя);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ТекстИтогов()

	Возврат ВРег(НСтр("ru = 'Итого'"));

КонецФункции

Функция ОтсутствуютДанныеДляРасшифровки(ПараметрыОтчета)
	
	// Данные могли быть рассчитаны до того момента, когда в программе начала фиксироваться подробная расшифровка базы
	// в регистре сведений "РасчетБазыНормированияПоДоговорамСтрахования". Признак такой ситуации - присутствует
	// запись в регистре сведений "РасчетНормированияРасходов", но отсутствуют записи
	// в регистре сведений "РасчетБазыНормированияПоДоговорамСтрахования".
	// Для таких случаев расшифровку базы не показываем, так как расчет нормы, выполненных по новому и старому алгоритму,
	// может различаться.
	
	ВидРасходовНУ = ПараметрыОтчета.ВидРасходовНУ;
	Если Не (ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование
		Или ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности
		Или ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Признаком того, что расчет выполнен в старой версии программы является наличие с начала года и до конца периода отчета
	// записей в регистре РасчетНормированияРасходов и отсутствие записей в регистре РасчетБазыНормированияПоДоговорамСтрахования
	// по данному ВидРасходовНУ.
	// В запросе в общем случае отбираются записи за несколько месяцев.
	// Соединение по регистратору неявно обеспечивает соединение по месяцу.
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("ДатаНачала",    ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("ВидРасходовНУ", ВидРасходовНУ);
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетБазыНормированияПоДоговорамСтрахования.Регистратор ЕСТЬ NULL КАК ПодробныйРасчетБазыОтсутствует
	|ИЗ
	|	РегистрСведений.РасчетНормированияРасходов КАК РасчетНормированияРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|		ПО РасчетНормированияРасходов.Регистратор = РасчетБазыНормированияПоДоговорамСтрахования.Регистратор
	|			И РасчетНормированияРасходов.ВидОперации = РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ
	|ГДЕ
	|	РасчетНормированияРасходов.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасчетНормированияРасходов.ВидОперации = &ВидРасходовНУ
	|	И РасчетНормированияРасходов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодробныйРасчетБазыОтсутствует";
	
	ОтсутствуютДанныеДляРасшифровки = Ложь;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтсутствуютДанныеДляРасшифровки = Выборка.ПодробныйРасчетБазыОтсутствует;
	КонецЕсли;
	
	Возврат ОтсутствуютДанныеДляРасшифровки;
	
КонецФункции

Процедура ВывестиРасшифровкаОтсутствует(ПараметрыОтчета, Результат)
	
	МакетОтсутствуетРасчет = Отчеты.БазаНормируемыхРасходов.ПолучитьМакет("РасшифровкаОтсутствует");
	ОбластьТекстРасчетОтсутствует = МакетОтсутствуетРасчет.ПолучитьОбласть("ТекстРасшифровкаОтсутствует");
	ОбластьТекстРасчетОтсутствует.Параметры.Заполнить(ПараметрыОтчета);
	Результат.Вывести(ОбластьТекстРасчетОтсутствует);
	
КонецПроцедуры

Процедура ОбъединитьЯчейкиВРасшифровкеПоДоговорамСтрахования(Контекст, Результат)
	
	// В таблице "Расшифровка по договорам страхования" объединяются одинаковые ячейки в колонке "Норма за период".
	// При этом возможны пустые ячейки в итоговых строках периодов (максимум две ячейки:
	// итог за месяц и итог по интервалу внутри месяца).
	ОбластьРезультатПоиска = Результат.НайтиТекст(Контекст.ИдентификаторЗаголовкаНормаЗаПериод);
	
	Если ОбластьРезультатПоиска <> Неопределено Тогда
		
		// Заменим служебный заголовок
		Результат.Область(ОбластьРезультатПоиска.Низ, ОбластьРезультатПоиска.Лево).Текст = НСтр("ru = 'Норма за период'");
		
		// Объединим области "Норма за период".
		// В качестве признака перехода между периодами для определения ячеек, которые необходимо объединить, будем использовать
		// итоги по столбцам "Расходы по договору, за месяц" и "Расходы по договору, за отчетный период". В первом есть итоги
		// за период, а во втором - нет.
		КонецОтчета = Ложь;
		НомерКолонки = ОбластьРезультатПоиска.Лево;
		НомерСтрокиНачало = ОбластьРезультатПоиска.Низ + 1;
		НомерТекущейСтроки = НомерСтрокиНачало;
		НомерКолонкиРасходыЗаМесяц = 2; // В колонке есть итоги за период
		НомерКолонкиРасходыЗаОтчетныйПериод = 3; // Значение есть только в детальных записях

		Объединить = Ложь;
		
		Пока Не КонецОтчета Цикл
			
			КонецОтчета = ВРег(Результат.Область(НомерТекущейСтроки, 1).Текст) = ТекстИтогов();
			
			ТекстИтогРасходыЗаМесяц             = Результат.Область(НомерТекущейСтроки, НомерКолонкиРасходыЗаМесяц).Текст;
			ТекстИтогРасходыЗаОтчетныйПериод    = Результат.Область(НомерТекущейСтроки, НомерКолонкиРасходыЗаОтчетныйПериод).Текст;
			ЭтоСтрокаПереходаЧерезПериод = ЗначениеЗаполнено(ТекстИтогРасходыЗаМесяц) И Не ЗначениеЗаполнено(ТекстИтогРасходыЗаОтчетныйПериод);
			Объединить = ЭтоСтрокаПереходаЧерезПериод И НомерТекущейСтроки - НомерСтрокиНачало > 1;
			
			Если Объединить Или КонецОтчета Тогда
				
				ОбластьРезультатОбъединения =
					Результат.Область(НомерСтрокиНачало, НомерКолонки, НомерТекущейСтроки - 1);
				ОбластьРезультатОбъединения.Объединить();
				ОбластьРезультатОбъединения.Текст = Результат.Область(НомерТекущейСтроки - 1, НомерКолонки).Текст;
				ОбластьРезультатОбъединения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				
			Иначе
				
				Если Не КонецОтчета Тогда
					Результат.Область(НомерСтрокиНачало, НомерКолонки).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				КонецЕсли;
						
			КонецЕсли;
			
			Если Объединить Или ЭтоСтрокаПереходаЧерезПериод Тогда
				НомерСтрокиНачало = НомерТекущейСтроки + 1;
			КонецЕсли;

			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбъединитьЯчейкиВРасшифровкеПоПериодам(Контекст, Результат, МинимальныйШагДляОбъединения)
	
	// В таблице расшифровки по периодам в колонках "Месяц" и "База за месяц (оплата труда)"
	// объединим ячейки, соответствующие одному месяцу.
	ОбластьРезультатПоиска = Результат.НайтиТекст(Контекст.ИдентификаторЗаголовкаМесяц);
	Если ОбластьРезультатПоиска <> Неопределено Тогда
		// Область месяц
		ОбластьРезультатПоиска.Текст = НСтр("ru = 'Месяц'");
		НомерКолонкиМесяц = ОбластьРезультатПоиска.Лево;
		НомерКолонкиДоговор = 1;
		НомерСтрокиМесяцНачало = ОбластьРезультатПоиска.Низ + МинимальныйШагДляОбъединения;
		ТекущийНомерСтрокиМесяц = НомерСтрокиМесяцНачало + 1;
		ТекстМесяц = Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиМесяц).Текст;
		ТекстДоговор = Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиДоговор).Текст;
		
		// Область "База за месяц"
		СмещениеБазыОтносительноМесяца = 4;
		НомерКолонкиБазаЗаМесяц = НомерКолонкиМесяц + СмещениеБазыОтносительноМесяца;
		ТекстБаза = Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиБазаЗаМесяц).Текст;
		
		Пока ЗначениеЗаполнено(ТекстМесяц) Или ЗначениеЗаполнено(ТекстДоговор) Цикл
			
			ТекущийТекстМесяц = Результат.Область(ТекущийНомерСтрокиМесяц, НомерКолонкиМесяц).Текст;
			ТекстДоговор = Результат.Область(ТекущийНомерСтрокиМесяц, НомерКолонкиДоговор).Текст;
			Если ТекстМесяц <> ТекущийТекстМесяц Тогда
				Если НомерСтрокиМесяцНачало < ТекущийНомерСтрокиМесяц - 1 Тогда
					ОбластьРезультатОбъединенияМесяц =
					Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиМесяц, ТекущийНомерСтрокиМесяц - 1);
					ОбластьРезультатОбъединенияМесяц.Объединить();
					ОбластьРезультатОбъединенияМесяц.Текст = ТекстМесяц;
					ОбластьРезультатОбъединенияМесяц.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					ОбластьРезультатОбъединенияБаза =
					Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиБазаЗаМесяц, ТекущийНомерСтрокиМесяц - 1);
					ОбластьРезультатОбъединенияБаза.Объединить();
					ОбластьРезультатОбъединенияБаза.Текст = ТекстБаза;
				Иначе
					Результат.Область(НомерСтрокиМесяцНачало, НомерКолонкиМесяц).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				КонецЕсли;
				НомерСтрокиМесяцНачало = ТекущийНомерСтрокиМесяц;
				ТекстМесяц = ТекущийТекстМесяц;
				ТекстБаза = Результат.Область(ТекущийНомерСтрокиМесяц, НомерКолонкиБазаЗаМесяц).Текст;
			КонецЕсли;
			
			ТекущийНомерСтрокиМесяц = ТекущийНомерСтрокиМесяц + 1;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьЗаголовокПредельныйРазмерСуммНУ(Контекст, Результат, МинимальныйШагДляОбъединения)
	
	ОбластьРезультатПоиска = Результат.НайтиТекст(Контекст.ИдентификаторЗаголовкаУчтеноВНУ);
	
	Если ОбластьРезультатПоиска <> Неопределено Тогда
		
		// Заголовок таблицы "Предельный размер сумм" состоит из трех строк. Часть заголовка, которая находится
		// над подробными суммами по договорам требуется модифицировать: первую строку объединить и изменить текст,
		// вторую строку с номерами договоров - передвинуть на одну строку вниз, а вместо нее добавить объединенную
		// ячейку с текстом "Договор страхования". Третья строка заголовока не нужна. Идентификатор, который определяет
		// область для модификации находится в первой строке и повторяется по горизонтали столько раз, сколько договоров
		// есть в отчете.
		//
		// Запомним номер первой колонки, начиная с которой нужно выполнить объединение.
		// В цикле область поиска каждый раз сдвигается на одну ячейку вправо до тех пор, пока не кончится область,
		// состоящая из ячеек с идентификатором.
		НомерСтрокиЗаголовка = ОбластьРезультатПоиска.Верх;
		НомерПервойКолонки = ОбластьРезультатПоиска.Лево;
		
		Пока ОбластьРезультатПоиска <> Неопределено Цикл
			НомерПоследнейКолонки = ОбластьРезультатПоиска.Право;
			ОбластьРезультатПоиска = Результат.НайтиТекст(
				Контекст.ИдентификаторЗаголовкаУчтеноВНУ, ОбластьРезультатПоиска, Результат.Область("R" + XMLСтрока(НомерСтрокиЗаголовка)), Истина);
		КонецЦикла;
		
		ОбластьРезультатОбъединения = Результат.Область(
			НомерСтрокиЗаголовка, НомерПервойКолонки, НомерСтрокиЗаголовка, НомерПоследнейКолонки);
		
		ОбластьРезультатОбъединения.Объединить();
		ОбластьРезультатОбъединения.Текст = НСтр("ru = 'Предельный размер'");
		ОбластьРезультатОбъединения.Расшифровка = Неопределено;
		
		// Переместим область с номерами договоров в третью строку. 
		СтараяОбластьНомераДоговоров = Результат.Область(
		НомерСтрокиЗаголовка + 1, НомерПервойКолонки, НомерСтрокиЗаголовка + 1, НомерПоследнейКолонки);
		
		НоваяОбластьНомераДоговоров = Результат.Область(
			НомерСтрокиЗаголовка + МинимальныйШагДляОбъединения,
			НомерПервойКолонки,
			НомерСтрокиЗаголовка + МинимальныйШагДляОбъединения,
			НомерПоследнейКолонки);
		
		Результат.ВставитьОбласть(СтараяОбластьНомераДоговоров, НоваяОбластьНомераДоговоров, ТипСмещенияТабличногоДокумента.БезСмещения);
		
		// Старая область объединяется и изменяется заголовок.
		СтараяОбластьНомераДоговоров.Объединить();
		СтараяОбластьНомераДоговоров.Текст = НСтр("ru = 'Договор страхования'");
		СтараяОбластьНомераДоговоров.Расшифровка = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
