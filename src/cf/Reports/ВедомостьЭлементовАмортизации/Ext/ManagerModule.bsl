#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Ложь);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Ложь);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Ложь);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат НСтр("ru='Ведомость элементов амортизации'") + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода) + НСтр("ru=' (бухгалтерский учет)'");
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Периоды = Новый Массив;
	
	ПеременнаяДаты = НачалоМесяца(ПараметрыОтчета.НачалоПериода);
	ДатаОкончанияПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	Пока ПеременнаяДаты < ДатаОкончанияПериода Цикл
		Периоды.Добавить(КонецМесяца(ПеременнаяДаты));
		ПеременнаяДаты = КонецМесяца(ПеременнаяДаты) + 1;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	РегламентнаяОперация.Дата КАК Дата
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.Дата В(&Периоды)
	|	И РегламентнаяОперация.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Периоды", Периоды);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);

	ПропущенныеПериоды = Новый Массив;
	
	//Выясним пропущенные месяцы расчета амортизации для предупреждения и передвинем конец периода на последний непропущенный

	ПоследнийНепропущенныйПериод = Неопределено;
	ПропущенныеПериодыИдутПодряд = Ложь;
	НайденПервыйПропущенныйПериод = Ложь;
	ПервыйПропущенныйПериод = Неопределено;
	
	Для Каждого Период Из Периоды Цикл
		
		КоличествоВхождений = РезультатЗапроса.НайтиСтроки(Новый Структура("Дата", Период)).Количество();
		
		Если КоличествоВхождений = 0 Тогда
			
			ПропущенныеПериоды.Добавить(Формат(Период, "ДФ=MM.yyyy"));
			
			Если НЕ НайденПервыйПропущенныйПериод Тогда
				НайденПервыйПропущенныйПериод = Истина;
				ПропущенныеПериодыИдутПодряд = Истина;
				ПервыйПропущенныйПериод = Период;
			КонецЕсли;
		Иначе
			
			ПоследнийНепропущенныйПериод = Период;
			
			Если НайденПервыйПропущенныйПериод Тогда
				ПропущенныеПериодыИдутПодряд = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПропущенныеПериоды.Количество() > 0 Тогда
		
		Если ПропущенныеПериодыИдутПодряд Тогда
			СтрокаПериодов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПервыйПропущенныйПериод, Периоды[Периоды.Количество() - 1]);
		Иначе
			СтрокаПериодов = СтрСоединить(ПропущенныеПериоды, ", ");
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаПредупрежденияПериодов",
			СтрШаблон(Нстр("ru = 'Отсутствует расчет амортизации %1.'"), СтрокаПериодов));
			
		Для Каждого Группировка Из КомпоновщикНастроек.Настройки.Структура Цикл
			Если Группировка.Имя = "Шапка" Тогда
				Группировка.Использование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтчета.КонецПериода = КонецМесяца(?(ЗначениеЗаполнено(ПоследнийНепропущенныйПериод), ПоследнийНепропущенныйПериод, ПараметрыОтчета.КонецПериода)) + 1;
	ПараметрыОтчета.НачалоПериода = НачалоМесяца(ПараметрыОтчета.НачалоПериода);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"КонецПериода", ПараметрыОтчета.КонецПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"НачалоПериода", ПараметрыОтчета.НачалоПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"НачалоПериодаПлюсМесяц", ДобавитьМесяц(ПараметрыОтчета.НачалоПериода, 1));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"Организация", ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"ПоказыватьТолькоИзменения", ПараметрыОтчета.ПоказыватьТолькоИзменения);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СпособНачисленияАмортизацииПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	СчетаАмортизации = Новый Массив;
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетАмортизации", СчетаАмортизации);
	
	СчетаВыбытия = Новый Массив;
	СчетаВыбытия.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	СчетаВыбытия.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетВыбытия", СчетаВыбытия);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетМодернизации", ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетОбесценения", ПланыСчетов.Хозрасчетный.ОбесценениеОС_01);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетОСОрганизации", ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетМЦОрганизации", ПланыСчетов.Хозрасчетный.МЦвОрганизации);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетПриобретения", ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетНМАОрганизации",ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетПриобретенияНМА",ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СчетАмортизацииНМА",ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	
	//Определим вывод колонок
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппы Из Элемент.Элементы Цикл
				
				Если ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("ИзменениеСПИ") 
					Или ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("СрокПолезногоИспользованияКонецПериода") 
					Или ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("СрокПолезногоИспользованияНачалоПериода") 
					Или СтрНайти(Строка(ЭлементГруппы.Поле), "Ликвидационная") <> 0
					Или СтрНайти(Строка(ЭлементГруппы.Поле), "СпособНачисления") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(Строка(ЭлементГруппы.Поле), "Амортизация") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Амортизация;
				ИначеЕсли ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("СуммаМодернизации") Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Модернизация;
				ИначеЕсли ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("ОстатокСПИПроценты") Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.СПИПодробноПроценты;
				ИначеЕсли ЭлементГруппы.Поле = Новый ПолеКомпоновкиДанных("ПлановаяДатаЗавершенияСПИ") Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.СПИПодробноДата;
				ИначеЕсли СтрНайти(Строка(ЭлементГруппы.Поле), "Стоимость") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Стоимость;
				ИначеЕсли СтрНайти(Строка(ЭлементГруппы.Поле), "Обесценение") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Обесценение;
				ИначеЕсли СтрНайти(Строка(ЭлементГруппы.Поле), "Выбытия") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Выбытие;
				ИначеЕсли СтрНайти(Строка(ЭлементГруппы.Поле), "СпособыОтраженияРасходов") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.СпособОтраженияРасходов;
				ИначеЕсли СтрНайти(Строка(ЭлементГруппы.Поле), "Приобретение") <> 0 Тогда
					ЭлементГруппы.Использование = ПараметрыОтчета.Поступление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьЭлементовАмортизации").Размещение.Вставить(Метаданные.Подсистемы.ОСИНМА.Подсистемы.УчетОсновныхСредств, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//	ПараметрыРасшифровки - Структура - Коллеккция параметров расшифроки, которую требуется заполнить. 
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	
	ТекущиеРодителиРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей();
	
	ТекущаяГруппировка = Неопределено;
		
	// Нас интересует самый первый родитель
	Если ТекущиеРодителиРасшифровки.Количество() > 0 Тогда
		ПоляГруппировки = ТекущиеРодителиРасшифровки[0].ПолучитьПоля();
		Если ПоляГруппировки.Количество() > 0 Тогда
			ТекущаяГруппировка =  ПоляГруппировки[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяГруппировка.Поле = "КомпонентАмортизации"
		Или ТекущаяГруппировка.Поле = "Объект" Или ТекущаяГруппировка.Поле = "Организация" Тогда
		
		Если ТекущаяГруппировка.Значение <> NULL Тогда
			ПараметрыРасшифровки.Вставить("Значение", ТекущаяГруппировка.Значение);
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "ВедомостьЭлементовАмортизации", "Ведомость элементов амортизации (БУ)"));
	
	Возврат Массив;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("НачалоПериода"                    , Дата(1,1,1));
	КоллекцияНастроек.Вставить("КонецПериода"                     , Дата(1,1,1));
	КоллекцияНастроек.Вставить("ПоказыватьТолькоИзменения"        , 0);
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("НачалоПериода"            , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"             , Дата(1,1,1));
	ПараметрыОтчета.Вставить("ПоказыватьТолькоИзменения", 0);
	ПараметрыОтчета.Вставить("РежимРасшифровки"         , Ложь);
	ПараметрыОтчета.Вставить("Амортизация"              , Истина);
	ПараметрыОтчета.Вставить("Стоимость"                , Истина);
	ПараметрыОтчета.Вставить("Модернизация"             , Истина);
	ПараметрыОтчета.Вставить("Обесценение"              , Истина);
	ПараметрыОтчета.Вставить("СПИПодробноДата"          , Истина);
	ПараметрыОтчета.Вставить("СПИПодробноПроценты"      , Истина);
	ПараметрыОтчета.Вставить("Выбытие"                  , Истина);
	ПараметрыОтчета.Вставить("СпособОтраженияРасходов"  , Истина);
	ПараметрыОтчета.Вставить("Поступление"              , Истина);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"        , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"    , Неопределено);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"      , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#КонецЕсли

//Описание запроса
//1. ПериодРасчетаАмортизацииНачалоПериода и ПериодРасчетаАмортизацииКонецПериода 
//    Регистр сведений РасчетАмортизации хоть и значится периодическим,
//    по факту нам надо найти ближайший период расчета к границам периода (первый и последний месяц) по измерению ПериодРасчета
//....и к началу периода мы добавляем месяц, тк расчет происходит последним числом месяца,
//....полученные периоды используем далее для импровизированного "среза последних".
//2. ОСУчтенныеВПериоде
//....Определим ОС для отборов
//3. ДатаПринятияКУчетуКомпонента
//    Определим даты принятия к учету компонентов (в регистре записывается в поле
//    дата принятия к учету дата самого объекта) и есть ли у ОС компоненты.
//4. РасчетАмортизацииНачалоПериодаПередДобавлениемДатКомпонентовИПериода РасчетАмортизацииНачалоПериодаПередДобавлениемДатКомпонентов РасчетАмортизацииНачалоПериода
//    Соберем таблицу расчета амортизации на начало периода, согласно стандартам.
//5. РасчетАмортизацииКонецПериодаПередДобавлениемДатКомпонентовИПериода РасчетАмортизацииКонецПериодаПередДобавлениемДатКомпонентов РасчетАмортизацииКонецПериода
//    Соберем таблицу расчета амортизации на конец периода, согласно стандартам.
//6. СуммыМодернизации СуммыАмортизации СуммыВыбытий СуммыПриобретений ОборотыОбесцененияПоПринятымИВыбывшим
//    Соберем данные остатков и оборотов по объектам с соответствующих счетов.
//7. СнятыеСУчета
//    Определим снятые с учета объекты
//8. Соберем все данные вместе для вывода в отчет объектов. Fin.