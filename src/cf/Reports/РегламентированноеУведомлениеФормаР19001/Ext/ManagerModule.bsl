#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоздатьЗаполненноеУведомление(Параметры, СуществующийДокументСсылка = Неопределено) Экспорт
	
	ИмяФормы = Неопределено;
	Если Не Параметры.Свойство("ИмяФормы", ИмяФормы) Тогда
		ИмяФормы = "Форма2020_4";
	КонецЕсли;
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка);
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоздатьЗаполненноеУведомление():
			|для Р26001 не поддерживается'");
	КонецЕсли;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ИмяФормы) Экспорт
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат Ложь;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ДоступнаПечатьPDF417():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
КонецФункции

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2020_4" Тогда
		Попытка
			Данные = Объект.ДанныеУведомления.Получить();
			Проверить_Форма2020_4(Данные, УникальныйИдентификатор);
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"Проверка уведомления прошла успешно.", УникальныйИдентификатор);
		Исключение
			РегламентированнаяОтчетность.СообщитьПользователюОбОшибкеВУведомлении(
				"При проверке уведомления обнаружены ошибки.", УникальныйИдентификатор);
		КонецПопытки;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПроверитьДокумент():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Процедура СохранитьДанныеПомощника(Уведомление, ДанныеПомощникаЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Уведомление) Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = Уведомление.ПолучитьОбъект();
	ДанныеУведомления = УведомлениеОбъект.ДанныеУведомления.Получить();
	Если ТипЗнч(ДанныеУведомления) = Тип("Структура") Тогда
		ДанныеУведомления.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	УведомлениеОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеУведомления);
	Попытка
		УведомлениеОбъект.Записать();
	Исключение
		ТекстОшибки = РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция СведенияИзФормРегистрации(ИмяФормы, ДанныеУведомления) Экспорт
	Результат = Неопределено;
	
	Если ИмяФормы = "Форма2020_4" Тогда 
		
		Результат = Новый Структура;
		Результат.Вставить("КодЗаявления", "Р26001");
		Данные = ДанныеУведомления.Получить();
		
		Лист001 = Данные.ДанныеУведомления.Лист001;
		Результат.Вставить("ОГРНИП", Лист001.П01010100);
		Результат.Вставить("Фамилия", Лист001.П01010201);
		Результат.Вставить("Имя", Лист001.П01010202);
		Результат.Вставить("Отчество", Лист001.П01010203);
		
		Результат.Вставить("Заявители", Новый Массив);
		Для Каждого Стр Из Данные.ДанныеМногостраничныхРазделов["Лист002"] Цикл 
			ЛистА = Стр.Значение;
			Если Не УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(ЛистА) Тогда 
				Продолжить;
			КонецЕсли;
			
			СвЗаяв = Новый Структура;
			СвЗаяв.Вставить("Фамилия", ЛистА.П02030100);
			СвЗаяв.Вставить("Имя", ЛистА.П02030200);
			СвЗаяв.Вставить("Отчество", ЛистА.П02030300);
			СвЗаяв.Вставить("ЭлектроннаяПочта", ЛистА.П02050600);
			Результат.Заявители.Добавить(СвЗаяв);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОтчета

Функция СформироватьДеревоСтраниц(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьДеревоСтраниц_Форма2020_4();
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьДеревоСтраниц():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьДеревоСтраниц_Форма2020_4()
	ДеревоСтраниц = НовоеДеревоСтраниц();
	КорневойУровень = ДеревоСтраниц.Строки;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Заявление";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница1";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист001";
	
	СтраницаУровня1 = КорневойУровень.Добавить();
	СтраницаУровня1.Наименование = СтрШаблон("Заявители");
	СтраницаУровня1.ИндексКартинки = 1;
	СтраницаУровня1.Многостраничность = Истина;
	СтраницаУровня1.Многострочность = Ложь;
	
	СтраницаУровня2 = СтраницаУровня1.Строки.Добавить();
	СтраницаУровня2.Наименование = "Стр. 1";
	СтраницаУровня2.ИндексКартинки = 1;
	СтраницаУровня2.ИмяМакета = "Форма2020_4_Страница2";
	СтраницаУровня2.Многостраничность = Истина;
	СтраницаУровня2.Многострочность = Ложь;
	СтраницаУровня2.УИД = Новый УникальныйИдентификатор;
	СтраницаУровня2.ИДНаименования = "Лист002";
	Возврат ДеревоСтраниц;
КонецФункции

Функция НовоеДеревоСтраниц()
	
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСтраниц.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоСтраниц.Колонки.Добавить("МакетыПФ", Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоСтраниц;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция СформироватьСписокЛистов(Объект, ЕстьВыходЗаГраницы = Ложь) Экспорт
	Если Объект.ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы);
	КонецЕсли;
КонецФункции

Функция СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы) Экспорт
	СписокИспользуемыхМакетов = УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакетыИзАрхива(Объект, "_БланкиПечати_");
	Листы = Новый СписокЗначений;
	СтруктураПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	ИННКПП = Новый Структура;
	
	НомСтр = 0;
	УведомлениеОСпецрежимахНалогообложения.НапечататьСтруктуру(Объект.ИмяОтчета, СтруктураПараметров.ДанныеУведомления["Лист001"], НомСтр, 
		УведомлениеОСпецрежимахНалогообложения.ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, "Печать_Форма2020_4_Страница1"), ПечатнаяФорма, ИННКПП);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
	
	Для Каждого Стр Из СтруктураПараметров.ДанныеМногостраничныхРазделов["Лист002"] Цикл 
		ЛистА = Стр.Значение;
		Если Не УведомлениеОСпецрежимахНалогообложения.СтраницаЗаполнена(ЛистА) Тогда 
			Продолжить;
		КонецЕсли;
		УведомлениеОСпецрежимахНалогообложения.НапечататьСтруктуру(Объект.ИмяОтчета, ЛистА, НомСтр, 
			УведомлениеОСпецрежимахНалогообложения.ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, "Печать_Форма2020_4_Страница2"), ПечатнаяФорма, ИННКПП);
		УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, Ложь);
		УведомлениеОСпецрежимахНалогообложения.НапечататьСтруктуру(Объект.ИмяОтчета, ЛистА, НомСтр, 
			УведомлениеОСпецрежимахНалогообложения.ПустойМакетИзСписка(Объект, СписокИспользуемыхМакетов, "Печать_Форма2020_4_Страница3"), ПечатнаяФорма, ИННКПП);
		УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр, Ложь);
	КонецЦикла;
	
	Возврат Листы;
КонецФункции

#КонецОбласти

#Область ЭлектронноеПредставление

Процедура Проверить_Форма2020_4(Данные, УникальныйИдентификатор)
	
	ПроверкаПоказателейФормыНеТребуется = Истина;
	
КонецПроцедуры

Функция ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор)
	Возврат Неопределено;
КонецФункции

#КонецОбласти

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт
	Возврат Ложь;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт
	Возврат "";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	ПолноеОписаниеФормы = Результат.Добавить();
	ПолноеОписаниеФормы.ИмяФормы = "Форма2020_4";
	ПолноеОписаниеФормы.ОписаниеФормы = "В редакции приказа ФНС России от 24.07.2023 № N ЕД-7-14/493@";
	ПолноеОписаниеФормы.ДатаНачала = '2020-11-25';
	ПолноеОписаниеФормы.ДатаКонца  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат Результат;
КонецФункции

Функция НовыйКонтейнерДляАвтозаполнения(ДанныеУведомления)
	
	Контейнер = Новый Структура;
	Для Каждого КЗ Из ДанныеУведомления Цикл
		Контейнер.Вставить(КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КЗ.Значение));
	КонецЦикла;
	
	УведомлениеОСпецрежимахНалогообложения.ДополнитьСлужебнымиСтруктурамиАдреса(ДанныеУведомления);
	
	Возврат Контейнер;
	
КонецФункции

Процедура ЗагрузитьПодготовленныеДанные(Контейнер, РезультатКонтейнер, Дерево)
	
	Для Каждого КЗ Из Контейнер Цикл
		Если РезультатКонтейнер.ДанныеУведомления.Свойство(КЗ.Ключ) Тогда
			ЗаполнитьЗначенияСвойств(РезультатКонтейнер.ДанныеУведомления[КЗ.Ключ], КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка = Неопределено)
	
	ИмяФормы = "Форма2020_4";
	Дерево = СформироватьДеревоСтраниц(ИмяФормы);
	ИмяОтчета = "РегламентированноеУведомлениеФормаР26001";
	
	ВходящийКонтейнер = Новый Структура("ИмяФормы, ДеревоСтраниц", СтрШаблон("1.%1.1.%2", ИмяОтчета, ИмяФормы), Дерево);
	
	РезультатКонтейнер = Новый Структура;
	УведомлениеОСпецрежимахНалогообложения.СформироватьКонтейнерДанныхУведомления(ВходящийКонтейнер, РезультатКонтейнер, Истина);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Параметры.Организация);
	ПараметрыОтчета.Вставить("ПараметрыЗаполнения", Параметры.ДополнительныеПараметры);
	ПараметрыОтчета.Вставить("ИмяФормы", ИмяФормы);
	
	Контейнер = НовыйКонтейнерДляАвтозаполнения(РезультатКонтейнер.ДанныеУведомления);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета, ИмяФормы, ПараметрыОтчета, Контейнер);
	
	ЗагрузитьПодготовленныеДанные(Контейнер, РезультатКонтейнер, Дерево);
	
	Если ТипЗнч(СуществующийДокументСсылка) = Тип("Структура")
		И СуществующийДокументСсылка.Свойство("Ссылка")
		И ЗначениеЗаполнено(СуществующийДокументСсылка.Ссылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.Ссылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(СуществующийДокументСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И ЗначениеЗаполнено(СуществующийДокументСсылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.ПолучитьОбъект();
	Иначе
		НовыйДок = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		НовыйДок.Организация = Параметры.Организация;
		НовыйДок.ИмяОтчета = ИмяОтчета;
		НовыйДок.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР26001;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДанныеУведомления, ДеревоСтраниц",
		РезультатКонтейнер.ДанныеУведомления,
		Дерево);
	
	НовыйДок.ИмяФормы = ИмяФормы;
	НовыйДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	НовыйДок.ДатаПодписи = НовыйДок.Дата;
	НовыйДок.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	НовыйДок.Записать();
	
	Возврат НовыйДок.Ссылка;
КонецФункции

#КонецОбласти

#КонецЕсли
