&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьНачальныеНастройки();
	
	РежимРасшифровки = Параметры.РежимРасшифровки;
	
	Если РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузкиБП(ЭтотОбъект);
	БухгалтерскиеОтчеты.УстановитьАктивностьКнопокКоманднойПанели(ЭтотОбъект);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб        = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Или РежимРасшифровки Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	
	Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Отчет.Организация = ?(
			ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			ОрганизацияПоУмолчанию,
			Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПатентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если РежимРасшифровки Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы,
		ТекстПредупреждения, СтандартнаяОбработка, РежимРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(
		ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПечатныхФорм

&НаКлиенте
Процедура НастройкиПечатныхФормПриАктивизацииСтроки(Элемент)
	
	НастройкаПечатнойФормы = ТекущаяНастройкаПечатнойФормы();
	
	Если НастройкаПечатнойФормы <> Неопределено Тогда
		ПоказатьВыбранныйЛист(НастройкаПечатнойФормы.ИндексЛиста);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПечатныхФормПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	ПатентПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	
	РучнаяКорректировка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.КонецПериода);

	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	УстановитьПериодОтчета();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Элементы.Результат.ОтображениеСостояния.Видимость Тогда
		
		ТекущийЭлемент = Элементы.СформироватьОтчет;
		ПоказатьПредупреждение( , НСтр("ru = 'Нажмите ""Сформировать"" для получения отчета'"),
								, НСтр("ru = 'Отчет не сформирован'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнитьПараметрыОтчетаНаСервере();
	
	ПараметрыОтчета.Вставить("РучнаяКорректировка", РучнаяКорректировка);
	ПараметрыОтчета.Вставить("РучнаяНастройка", Ложь); // нет параметров для тонкой настройки
	
	Закрыть(ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ТабличныеДокументы = ТабличныеДокументыДляПечати();
	
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(
		ТабличныеДокументы, Новый СписокЗначений, ТабличныеДокументы.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьНачальныеНастройки()
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		// Настройки по-умолчанию
		ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Отчет.Организация = ?(
			ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			ОрганизацияПоУмолчанию,
			Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		УстановитьПериодНаСервере();
	ИначеЕсли ЗначениеЗаполнено(Параметры.НачалоПериода) И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		ПредставлениеПериода.ДатаНачала    = НачалоДня(Параметры.НачалоПериода);
		ПредставлениеПериода.ДатаОкончания = КонецДня(Параметры.КонецПериода);
		УстановитьПериодОтчета();
	Иначе
		ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		ПредставлениеПериода.ДатаНачала    = НачалоГода(ТекущаяДата);
		ПредставлениеПериода.ДатаОкончания = КонецГода(ТекущаяДата);
		УстановитьПериодОтчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Патент) Тогда
		Отчет.Патент = Параметры.Патент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Расширение) И ЗначениеЗаполнено(Параметры.ТипФайла) Тогда
		Расширение = Параметры.Расширение;
		ТипФайла   = Параметры.ТипФайла;
	КонецЕсли;
	
	Элементы.НастройкиПечатныхФорм.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.Патент.Видимость = Не (ЗначениеЗаполнено(Отчет.Патент) И Элементы.Патент.СписокВыбора.Количество() = 1);
	
	Элементы.НастройкиПечатныхФорм.Видимость = Форма.НастройкиПечатныхФорм.Количество() > 0;
	
	ОбновитьТекстЗаголовка(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Книга доходов по патенту'");
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + Отчет.Патент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " "
			+ БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПатентПриИзмененииНаСервере()
	
	УстановитьПериодНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()
	
	ВсеПатенты = УчетПСН.ВидыДеятельностиПоПатентуОрганизации(Отчет.Организация);
	Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(ВсеПатенты);
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеПатенты.Количество() = 1 Тогда
		Отчет.Патент = ВсеПатенты[0];
	Иначе
		Если ВсеПатенты.Найти(Отчет.Патент) = Неопределено Тогда
			Отчет.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПериодНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодНаСервере()
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		СведенияПатента = УчетПСН.СведенияДействующегоПатента(Отчет.Патент);
		ПредставлениеПериода.ДатаНачала    = НачалоДня(СведенияПатента.ДатаНачала);
		ПредставлениеПериода.ДатаОкончания = КонецДня(СведенияПатента.ДатаОкончания);
	Иначе
		ПредставлениеПериода.ДатаНачала    = '00010101';
		ПредставлениеПериода.ДатаОкончания = '00010101';
	КонецЕсли;
	
	УстановитьПериодОтчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтчета()
	
	Отчет.НачалоПериода = ПредставлениеПериода.ДатаНачала;
	Отчет.КонецПериода  = ПредставлениеПериода.ДатаОкончания;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	Перем ОтказПроверкиЗаполнения;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения", ОтказПроверкиЗаполнения);
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли ОтказПроверкиЗаполнения <> Истина Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	КонецЕсли;
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Ложь);
	
	Если Не ПроверитьЗаполнение()
		Или Не ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент") Тогда
		
		РезультатВыполнения.ОтказПроверкиЗаполнения = Истина;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ПустыеПараметрыКомпоновкиОтчета();
	Отчеты.КнигаУчетаДоходовПатент.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Отчеты.КнигаУчетаДоходовПатент.СформироватьОтчет",
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	НачальноеЗаполнение = НастройкиПечатныхФорм.Количество() = 0;
	Если Не НачальноеЗаполнение Тогда
		СтрокаКоллекции = НастройкиПечатныхФорм.НайтиПоИдентификатору(Элементы.НастройкиПечатныхФорм.ТекущаяСтрока);
		ИндексСтрокиКоллекции = НастройкиПечатныхФорм.Индекс(СтрокаКоллекции);
	КонецЕсли;
	
	НастройкиПечатныхФорм.Очистить();
	
	Отчет.СписокСформированныхЛистов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	КоличествоЛистов = Отчет.СписокСформированныхЛистов.Количество();
	Для ИндексПечатнойФормы = 0 По КоличествоЛистов - 1 Цикл
		
		ОписаниеПечатнойФормы = Отчет.СписокСформированныхЛистов[ИндексПечатнойФормы];
		
		НоваяНастройкаПечатнойФормы = НастройкиПечатныхФорм.Добавить();
		НоваяНастройкаПечатнойФормы.Представление = ОписаниеПечатнойФормы.Представление;
		НоваяНастройкаПечатнойФормы.ИндексЛиста   = ИндексПечатнойФормы;
		
	КонецЦикла;
	
	Если Не НачальноеЗаполнение Тогда
		СтрокаКоллекции = НастройкиПечатныхФорм.Получить(ИндексСтрокиКоллекции);
		Элементы.НастройкиПечатныхФорм.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВыбранныйЛист(ИндексЛиста)
	
	Результат.Очистить();
	
	СформированныйЛист = Отчет.СписокСформированныхЛистов.Получить(ИндексЛиста).Значение;
	Результат.Вывести(СформированныйЛист);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяНастройкаПечатнойФормы()
	
	ТекущиеДанные = Элементы.НастройкиПечатныхФорм.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено И НастройкиПечатныхФорм.Количество() > 0 Тогда
		ТекущиеДанные = НастройкиПечатныхФорм[0];
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Функция ТабличныеДокументыДляПечати()
	
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		ПечатнаяФорма = Отчет.СписокСформированныхЛистов.Получить(НастройкаПечатнойФормы.ИндексЛиста).Значение;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ПечатнаяФорма);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, СвойстваЗаполненияТабличногоДокумента());
		ТабличныйДокумент.КоличествоЭкземпляров = 1;
		ТабличныеДокументы.Добавить(ТабличныйДокумент, НастройкаПечатнойФормы.Представление);
	КонецЦикла;
	
	Возврат ТабличныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЗаполненияТабличногоДокумента()
	
	МассивСвойств = Новый Массив;
	
	МассивСвойств.Добавить("АвтоМасштаб");
	МассивСвойств.Добавить("Вывод");
	МассивСвойств.Добавить("ВысотаСтраницы");
	МассивСвойств.Добавить("ДвусторонняяПечать");
	МассивСвойств.Добавить("Защита");
	МассивСвойств.Добавить("ИмяПринтера");
	МассивСвойств.Добавить("КодЯзыкаМакета");
	МассивСвойств.Добавить("КоличествоЭкземпляров");
	МассивСвойств.Добавить("МасштабПечати");
	МассивСвойств.Добавить("ОриентацияСтраницы");
	МассивСвойств.Добавить("ПолеСверху");
	МассивСвойств.Добавить("ПолеСлева");
	МассивСвойств.Добавить("ПолеСнизу");
	МассивСвойств.Добавить("ПолеСправа");
	МассивСвойств.Добавить("РазборПоКопиям");
	МассивСвойств.Добавить("РазмерКолонтитулаСверху");
	МассивСвойств.Добавить("РазмерКолонтитулаСнизу");
	МассивСвойств.Добавить("РазмерСтраницы");
	МассивСвойств.Добавить("ТочностьПечати");
	МассивСвойств.Добавить("ЧерноБелаяПечать");
	МассивСвойств.Добавить("ШиринаСтраницы");
	МассивСвойств.Добавить("ЭкземпляровНаСтранице");
	
	Возврат СтрСоединить(МассивСвойств, ",");
	
КонецФункции

&НаСервере
Функция ЗаполнитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ПустыеПараметрыКомпоновкиОтчета();
	Отчеты.КнигаУчетаДоходовПатент.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	ВозвращаемыеПараметры = ЗаполнениеФинОтчетностиВБанки.ПодготовитьДвоичныеДанныеПакетаОтображаемыхДокументов(
		ПараметрыОтчета);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемыеПараметры, ПараметрыОтчета, Истина);
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчетНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(
		ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(
		ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

#КонецОбласти
