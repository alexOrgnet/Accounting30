
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// Заголовок формы

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	//
	// Исключение неактуальных настроек оформления

	МакетОформленияИсключения = Новый Массив;
	МакетОформленияИсключения.Добавить("МакетОформленияКомпоновкиДанныхРеестра");

	ИспользуетсяНесколькоСкладов = Справочники.Склады.ИспользуетсяНесколькоСкладов();
	
	ЕстьСкладскойУчет = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	
	Для каждого МакетОформленияИсключение Из МакетОформленияИсключения Цикл

		ДоступныйЭлементОформленияУдалить = Элементы.МакетОформления.СписокВыбора.НайтиПоЗначению(МакетОформленияИсключение);

		Если ДоступныйЭлементОформленияУдалить <> Неопределено Тогда

			Элементы.МакетОформления.СписокВыбора.Удалить(ДоступныйЭлементОформленияУдалить);

		КонецЕсли;

	КонецЦикла;
	
	БыстрыеНастройкиОтчетовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.РассылкиОтчетов.Форма.НастройкаРассылкиБП" Тогда
		ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;

	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)

	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КомпоновщикИнициализирован Тогда
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;

	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервереВОтчетеРуководителю(ЭтотОбъект, Настройки);

	Если Не КомпоновщикИнициализирован И ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)

	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);

	ОбновитьТекстЗаголовка(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)

	ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации(ПолеОрганизация,
		Отчет.Организация, Ложь);

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		СоответствиеОрганизаций, Отчет.Организация, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ВНаличииПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

	УправлениеФормой();
	
	Если Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПоделитьсяМнениемОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтзывПоЭлектроннойПочте", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);

КонецПроцедуры

#Область ОбработчикиСобытийСтраницыОтбор

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыПоказатели

&НаКлиенте
Процедура ПоказательКодПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказательАртикулПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказательЕдиницаИзмеренияПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказательОстатокПриИзменении(Элемент)
	
	УстановитьСостояниеРезультатаОтчетаНеАктуальность();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПредставлениеОстатка1ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Отчет.ПредставлениеОстатка1)
		И Отчет.ИспользоватьПредставлениеОстатка1 Тогда
		Отчет.ПредставлениеОстатка1 = НСтр("ru='Под заказ'");
	КонецЕсли;
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПредставлениеОстатка2ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Отчет.ПредставлениеОстатка2) 
		И Отчет.ИспользоватьПредставлениеОстатка2 Тогда
		Отчет.ПредставлениеОстатка2 = НСтр("ru='Скоро закончится'");
	КонецЕсли;
	
	Если Отчет.ЗначениеОстаткаОт1 = 0 
		И Отчет.ИспользоватьПредставлениеОстатка2 Тогда
		Отчет.ЗначениеОстаткаОт1 = 1;
	КонецЕсли;

	Если Отчет.ЗначениеОстаткаДо = 0 
		И Отчет.ИспользоватьПредставлениеОстатка2 Тогда
		Отчет.ЗначениеОстаткаДо = 10;
	КонецЕсли;
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПредставлениеОстатка3ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Отчет.ПредставлениеОстатка3) 
		И Отчет.ИспользоватьПредставлениеОстатка3 Тогда
		Отчет.ПредставлениеОстатка3 = НСтр("ru='В наличии'");
	КонецЕсли;
	
	Если Отчет.ЗначениеОстаткаОт2 = 0
		И Отчет.ИспользоватьПредставлениеОстатка3 Тогда
		Отчет.ЗначениеОстаткаОт2 = 11;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовБыстрогоОформления

&НаКлиенте
Процедура МакетОформленияБыстрыеНастройкиПриИзменении(Элемент)
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки,
		"МакетОформления", МакетОформления);
	
	ПриИзмененииНастройки();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокументаРезультат

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Расшифровка = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)

	ЗапуститьФормированиеОтчета();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)

	СкрытьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;

	ОткрытьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)

	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРассылкуОтчета(Команда)

	ЗаполнитьНастройкиОтчетаДляРассылки();

	РассылкаОтчетовБПКлиент.НастроитьРассылкуИзОтчета(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБыстрыеНастройки(Команда)
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;
	
	БыстрыеНастройкиОтчетовКлиент.ПереключитьВидимостьБыстрыхНастроек(ЭтотОбъект);

	Если ПоказыватьБыстрыеНастройки Тогда 
		ПоказатьБыстрыеНастройкиНаСервере();
		УправлениеФормой();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ГруппаОтображениеОстатков.Видимость = Отчет.ПоказательОстаток;
	
	Элементы.ПредставлениеОстатка1.Доступность = Отчет.ИспользоватьПредставлениеОстатка1;
	Элементы.ПредставлениеОстатка2.Доступность = Отчет.ИспользоватьПредставлениеОстатка2;
	Элементы.ЗначениеОстаткаОт1.Доступность = Отчет.ИспользоватьПредставлениеОстатка2;
	Элементы.ЗначениеОстаткаДо.Доступность = Отчет.ИспользоватьПредставлениеОстатка2;
	Элементы.ПредставлениеОстатка3.Доступность = Отчет.ИспользоватьПредставлениеОстатка3;
	Элементы.ЗначениеОстаткаОт2.Доступность = Отчет.ИспользоватьПредставлениеОстатка3;
	
	УправлениеВидимостьюОтбораПоСкладу();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()

	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЭтотОбъект.ИмяФормы);

	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();

	ПараметрыОтчета.Период                            = Отчет.Период;
	ПараметрыОтчета.Организация                       = Отчет.Организация;
	ПараметрыОтчета.ВНаличии                          = Отчет.ВНаличии;
	ПараметрыОтчета.ТипЦен                            = Отчет.ТипЦен;
	ПараметрыОтчета.ПоказательКод                     = Отчет.ПоказательКод;
	ПараметрыОтчета.ПоказательАртикул                 = Отчет.ПоказательАртикул;
	ПараметрыОтчета.ПоказательОстаток                 = Отчет.ПоказательОстаток;
	ПараметрыОтчета.ПоказательЕдиницаИзмерения        = Отчет.ПоказательЕдиницаИзмерения;
	ПараметрыОтчета.ПредставлениеОстатка1             = Отчет.ПредставлениеОстатка1;
	ПараметрыОтчета.ПредставлениеОстатка2             = Отчет.ПредставлениеОстатка2;
	ПараметрыОтчета.ПредставлениеОстатка3             = Отчет.ПредставлениеОстатка3;
	ПараметрыОтчета.ИспользоватьПредставлениеОстатка1 = Отчет.ИспользоватьПредставлениеОстатка1;
	ПараметрыОтчета.ИспользоватьПредставлениеОстатка2 = Отчет.ИспользоватьПредставлениеОстатка2;
	ПараметрыОтчета.ИспользоватьПредставлениеОстатка3 = Отчет.ИспользоватьПредставлениеОстатка3;
	ПараметрыОтчета.ЗначениеОстаткаОт1                = Отчет.ЗначениеОстаткаОт1;
	ПараметрыОтчета.ЗначениеОстаткаОт2                = Отчет.ЗначениеОстаткаОт2;
	ПараметрыОтчета.ЗначениеОстаткаДо                 = Отчет.ЗначениеОстаткаДо;
	ПараметрыОтчета.МакетОформления                   = МакетОформления;
	ПараметрыОтчета.РежимРасшифровки                  = Ложь;
	ПараметрыОтчета.ДанныеРасшифровки                 = ДанныеРасшифровки;
	ПараметрыОтчета.СхемаКомпоновкиДанных             = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ПараметрыОтчета.ИдентификаторОтчета               = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	ПараметрыОтчета.НастройкиКомпоновкиДанных         = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета.СхемаКомпоновкиДанных             = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);

	Возврат ПараметрыОтчета;

КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт

	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Неопределено;
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

	ИдентификаторЗадания = Неопределено;

	БухгалтерскиеОтчеты.ЗаписатьОперациюБизнесСтатистики(ЭтотОбъект, "СформироватьОтчет", НастройкиОтчетаДляСтатистики());
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";

	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);

	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);

	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;

	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(АдресХранилища)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Результат = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;

	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;

КонецПроцедуры

&НаСервере
Процедура ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение)
	
	РассылкаОтчетовБП.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтчетаДляРассылки()
	
	// Для получения корректных настроек, необходимо предварительно инициализировать компоновщик настроек.
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикНастроек();
	КонецЕсли;

	РассылкаОтчетовБП.ЗаполнитьНастройкиОтчетаДляРассылки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция НастройкиОтчетаДляСтатистики()
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	НастройкиДляСтатистики = БухгалтерскиеОтчеты.ПоказателиОтчетаРуководителяДляСтатистики(ПараметрыОтчета);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	Возврат ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(НастройкиДляСтатистики, ПараметрыЗаписиJSON);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчеты руководителя.Прайс лист'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Отчеты.ПрайсЛист,
		,
		ТекстОшибки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	Отчет = Форма.Отчет;

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Отчет.Организация, Ложь);
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Прайс-лист %1'"), ПредставлениеОрганизации);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Прайс-лист'");
	КонецЕсли;

	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()

	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()

	Элементы.СформироватьОтчет.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
	// Обновим панель быстрых настроек, если она видна
	Если ПоказыватьБыстрыеНастройки Тогда
		ПоказатьБыстрыеНастройкиНаСервере();
		УправлениеФормой();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Отчет.Организация);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()

	ОчиститьСообщения();

	ДлительнаяОперация = СформироватьОтчетНаСервере();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);

		СкрытьНастройки();
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормирования(ДлительнаяОперация)

	ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);

	СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);

	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = СообщениеОбОшибке;
	ОтображениеСостояния.Картинка = Новый Картинка;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменена
	КонецЕсли;

	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеРезультатаОтчетаНеАктуальность()

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация"  , Отчет.Организация);
	СписокПараметров.Вставить("Номенклатура" , Неопределено);
	СписокПараметров.Вставить("Склад"        , Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Остаток");

	Если Не ИспользуетсяНесколькоСкладов Тогда
		СписокПолей.Добавить("Склад");
	КонецЕсли;
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Режим = "Группировка" Или Режим = "Выбор" Или Режим = "Отбор" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, Истина, КлючТекущегоВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюОтбораПоСкладу()
	
	ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
	
	ОтборПоСкладуДоступен = ЕстьСкладскойУчет И ИспользуетсяНесколькоСкладов
		И (Отчет.ВНаличии Или Отчет.ПоказательОстаток);
		
	ДобавитьОтборПоСкладу = ОтборПоСкладуДоступен;
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеСклад Тогда
			Если ОтборПоСкладуДоступен Тогда
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				ДобавитьОтборПоСкладу = Ложь;
			Иначе
				// При изменении режима отображения элемента отбора, сбрасывается сосояние табличного
				// поля "Результат" в значение "Неактуальность".
				// Запомним значение сосояния и восстановим его после установки режима отображения.
				ДополнительныйРежимОтображенияЗначение = Строка(Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения);
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.Использование = Ложь;
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, 
					СтрЗаменить(ДополнительныйРежимОтображенияЗначение, " ", ""));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавитьОтборПоСкладу Тогда
		
		ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеСклад;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементОтбора.Использование = Ложь;

	КонецЕсли;
	
	ОтборПоСкладу = Элементы.Найти("Склад");
	Если ОтборПоСкладу <> Неопределено Тогда
		ОтборПоСкладу.Видимость = ОтборПоСкладуДоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБыстрыеНастройкиНаСервере()
	
	ГруппыНастроек = Новый Структура;
	ГруппыНастроек.Вставить("Отбор", Элементы.БыстрыеОтборы);
	ГруппыНастроек.Вставить("Оформление", Элементы.БыстроеОформление);

	БыстрыеНастройкиОтчетовСервер.ПоказатьБыстрыеНастройкиНаСервере(ЭтотОбъект, ГруппыНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаОтбора(Элемент)
	
	Если Не СоответствиеПолейОтчетаИРеквизитов.Свойство(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;

	ИмяРеквизита = Элемент.Имя;
	ОчиститьОтборНаСервере(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьОтборПриИзменении(Элемент)
	
	Если Не СоответствиеПолейОтчетаИРеквизитов.Свойство(Элемент.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	УстановитьОтборПриИзмененииНаСервере(ИмяРеквизита);

	ПриИзмененииНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БыстрыеНастройкиОтчетовКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаСервере
Процедура ОчиститьОтборНаСервере(ИмяРеквизита)
	
	БыстрыеНастройкиОтчетовСервер.ОчиститьОтборНаСервере(ЭтотОбъект, ИмяРеквизита);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПриИзмененииНаСервере(ИмяРеквизита)
	
	ГруппыНастроек = Новый Структура;
	ГруппыНастроек.Вставить("Отбор", Элементы.БыстрыеОтборы);

	БыстрыеНастройкиОтчетовСервер.УстановитьОтборПриИзмененииНаСервере(ЭтотОбъект, ГруппыНастроек, ИмяРеквизита);
	
КонецПроцедуры

#Область ОбратнаяСвязь

&НаКлиенте
Процедура ОтправитьОтзывПоЭлектроннойПочте(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыеНастройкиОтчетовКлиент.ОтправитьОтзывПоЭлектроннойПочте();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииНастройки()

	Если Отчет.ФормироватьОтчетПриИзмененииНастроек Тогда
		ЗапуститьФормированиеОтчета();
	Иначе
		УстановитьСостояниеРезультатаОтчетаНеАктуальность();
		УправлениеВидимостьюОтбораПоСкладу();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти