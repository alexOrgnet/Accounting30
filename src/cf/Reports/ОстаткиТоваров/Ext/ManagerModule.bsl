#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ДоступКПлануСчетов = УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии();
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИспользоватьПередКомпоновкойМакета" , Истина);
	Параметры.Вставить("ИспользоватьПослеКомпоновкиМакета" , Ложь);
	Параметры.Вставить("ИспользоватьПослеВыводаРезультата" , Истина);
	Параметры.Вставить("ИспользоватьДанныеРасшифровки" , Истина);
	Параметры.Вставить("ИспользоватьПривилегированныйРежим", ДоступКПлануСчетов);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Остатки товаров на %1'"), Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=DD"));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Количество");
	Если УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии() Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Сумма");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
			КомпоновщикНастроек, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Конец);
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
			КомпоновщикНастроек, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода), ВидГраницы.Включая));
	КонецЕсли;
	
	СтруктураСчетов = СтруктураСчетов(БухгалтерскиеОтчеты.СчетаУчетаТоваров());
	
	Для Каждого Счета Из СтруктураСчетов Цикл
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Счета.Ключ, Счета.Значение);
		
	КонецЦикла;
	
	// Группировка
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	Группировка = КомпоновщикНастроек.Настройки.Структура;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
				Группировка = Группировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Иначе
				Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	БыстрыеНастройкиОтчетовСервер.ВывестиПримечанияОкругления(ПараметрыОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиПоСкладу").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Склад, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ОстаткиПоСкладу", "Остатки товаров"));
	
	Возврат Массив;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьПримечанияОкругления"     , Ложь);

	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации на дату с остатками срок хранения которых
// равен или больше переданного срока хранения товаров
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация по которой нужны данные
//   Дата - Дата - дата на которую нужны остатки
//   СрокХраненияТоваров - Число - количество месяцев хранения товаров
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ОстаткиТовараСоСрокомХраненияДляМонитораРуководителя(Организация, Дата, СрокХраненияТоваров) Экспорт 
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КонецДня(ТекущаяДатаСеанса()) = КонецДня(Дата) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("Период", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	КонецЕсли;
	
	НачалоИнтервала = ДобавитьМесяц(НачалоДня(Дата), -СрокХраненияТоваров);
	КонецИнтервала = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);

	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	Запрос.УстановитьПараметр("СубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	СчетаУчетаНоменклатура = БухгалтерскиеОтчеты.СчетаУчетаТоваров();
	
	Запрос.УстановитьПараметр("СчетаУчетаНоменклатура", СчетаУчетаНоменклатура);
	СтруктураСчетов = СтруктураСчетов(СчетаУчетаНоменклатура);
	
	Запрос.УстановитьПараметр("СчетаУчетаСкладИНоменклатура", СтруктураСчетов.СчетаУчетаСкладИНоменклатура);

	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаНоменклатура), &СубконтоНоменклатура, Организация = &Организация {(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Подразделение,
		|	Номенклатура,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.Подразделение КАК Подразделение,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Счет КАК Счет,
		|	СУММА(ВложенныйЗапрос.КоличествоПриход) КАК КоличествоПриход
		|ПОМЕСТИТЬ ВТ_ОборотыИнтервал
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация,
		|		ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|		ХозрасчетныйОбороты.Счет КАК Счет,
		|		ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоПриход
		|	{ВЫБРАТЬ
		|		Организация.*,
		|		Подразделение.*,
		|		Номенклатура.*,
		|		Счет.* КАК Счет}
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоИнтервала, &КонецИнтервала, , Счет В (&СчетаУчетаНоменклатура) {(Счет).*}, &СубконтоНоменклатура, {(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}, , ) КАК ХозрасчетныйОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура),
		|		ХозрасчетныйОбороты.Счет,
		|		-ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотДт, 0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоИнтервала, &КонецИнтервала, , Счет В (&СчетаУчетаСкладИНоменклатура) {(Счет).*}, &СубконтоНоменклатура, Подразделение = ПодразделениеКор {(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}, КорСчет В (&СчетаУчетаСкладИНоменклатура) {(КорСчет).*}, &СубконтоНоменклатура) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|		И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Подразделение,
		|	Номенклатура,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.СуммаОстаток КАК СуммаОстаток0,
		|	ВТ_Остатки.КоличествоОстаток КАК ОстатокТоваров0,
		|	ЕСТЬNULL(ВТ_ОборотыИнтервал.КоличествоПриход, 0) КАК КоличествоПриход1
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыИнтервал КАК ВТ_ОборотыИнтервал
		|		ПО ВТ_Остатки.Организация = ВТ_ОборотыИнтервал.Организация
		|			И ВТ_Остатки.Подразделение = ВТ_ОборотыИнтервал.Подразделение
		|			И ВТ_Остатки.Номенклатура = ВТ_ОборотыИнтервал.Номенклатура
		|			И ВТ_Остатки.Счет = ВТ_ОборотыИнтервал.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиИОбороты.СуммаОстаток0 КАК СуммаОстаток0,
		|	ВТ_ОстаткиИОбороты.ОстатокТоваров0 КАК ОстатокТоваров0,
		|	ВЫБОР
		|		КОГДА ВТ_ОстаткиИОбороты.ОстатокТоваров0 - ВТ_ОстаткиИОбороты.КоличествоПриход1 > 0
		|			ТОГДА ВТ_ОстаткиИОбороты.ОстатокТоваров0 - ВТ_ОстаткиИОбороты.КоличествоПриход1
		|		КОГДА ВТ_ОстаткиИОбороты.ОстатокТоваров0 < 0
		|			ТОГДА ВТ_ОстаткиИОбороты.ОстатокТоваров0 + ВТ_ОстаткиИОбороты.КоличествоПриход1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокТоваров1
		|ПОМЕСТИТЬ ВТ_ОстаткиПоПериодам
		|ИЗ
		|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.СуммаОстатокПериода) КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаОстаток0) КАК ОбщийСуммаОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ВЫБОР
		|				КОГДА ВТ_ОстаткиПоПериодам.ОстатокТоваров0 = ВТ_ОстаткиПоПериодам.ОстатокТоваров1
		|					ТОГДА ВТ_ОстаткиПоПериодам.СуммаОстаток0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ВТ_ОстаткиПоПериодам.ОстатокТоваров0 = 0
		|							ТОГДА 0
		|						ИНАЧЕ ВТ_ОстаткиПоПериодам.ОстатокТоваров1 * ВТ_ОстаткиПоПериодам.СуммаОстаток0 / ВТ_ОстаткиПоПериодам.ОстатокТоваров0
		|					КОНЕЦ
		|			КОНЕЦ) КАК СуммаОстатокПериода,
		|		СУММА(ВТ_ОстаткиПоПериодам.СуммаОстаток0) КАК СуммаОстаток0
		|	ИЗ
		|		ВТ_ОстаткиПоПериодам КАК ВТ_ОстаткиПоПериодам
		|	ГДЕ
		|		(ВТ_ОстаткиПоПериодам.ОстатокТоваров0 <> 0
		|				ИЛИ ВТ_ОстаткиПоПериодам.СуммаОстаток0 <> 0)) КАК ВложенныйЗапрос";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Стоимость остатков'");
	СтрокаДанных.Порядок       = 5;
	СтрокаДанных.Сумма         = Выборка.ОбщийСуммаОстаток;
	
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = СтрШаблон(НСтр("ru = 'Товар хранится более %1 мес'"), СрокХраненияТоваров);
	СтрокаДанных.Порядок       = 6;
	СтрокаДанных.Сумма         = Выборка.Сумма;
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураСчетов(СчетаУчетаТоваров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	               |	ХозрасчетныйВидыСубконто.ВидСубконто,
	               |	ХозрасчетныйВидыСубконто.Суммовой
	               |ПОМЕСТИТЬ ВидыСубконто
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
	               |	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет КАК Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	НЕ Хозрасчетный.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВидыСубконто.Счет КАК Счет
	               |				ИЗ
	               |					ВидыСубконто КАК ВидыСубконто)
	               |	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
				   
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураСчетов = Новый Структура;
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Результат[1].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладТолькоКоличествоИНоменклатура", Результат[2].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Возврат СтруктураСчетов;
	
КонецФункции

#КонецОбласти

#КонецЕсли