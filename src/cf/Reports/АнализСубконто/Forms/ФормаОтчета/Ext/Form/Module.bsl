
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Отчет.СписокВидовСубконто.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере.
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Отчет.АнализСубконто",
		"ФормаОтчета",
		НСтр("ru='Новости: Анализ субконто'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере.

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
		
	Если ОписаниеЗаданияФормированияОтчета <> Неопределено Тогда		
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьПодготовленныеДанные", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОписаниеЗаданияФормированияОтчета, ОповещениеОЗавершении, ПараметрыОжидания);		
			
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	ОбновитьИсходныеЗначения(ЭтотОбъект);
	// Если после загрузки настроек список субконто пуст
	// добавим в него пустую строку.
	Если Отчет.СписокВидовСубконто.Количество() = 0 Тогда
		
		  Отчет.СписокВидовСубконто.Добавить();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии.
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Отчет.РежимРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КомпоновщикИнициализирован Тогда
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	Если Не КомпоновщикИнициализирован И ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ИнициализацияКомпоновщикаНастроек();
		РазделыНастроек = Элементы.РазделыНастроек.ПодчиненныеЭлементы;
		Элементы.РазделыНастроек.ТекущаяСтраница = РазделыНастроек.ГруппаГруппировка;
	ИначеЕсли КомпоновщикИнициализирован Тогда
		ИзменениеСхемыКомпоновкиДанныхНаСервере();
	КонецЕсли;
	
	БухгалтерскиеОтчеты.ЗаполнитьПризнакиУчета(ЭтотОбъект);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	ОбновитьИсходныеЗначения(ЭтотОбъект);
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения.
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения.
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Период

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтотОбъект); 
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
	БухгалтерскиеОтчетыКлиент.СброситьВидПериода(Отчет);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
	БухгалтерскиеОтчетыКлиент.СброситьВидПериода(Отчет);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
	БухгалтерскиеОтчетыКлиент.СброситьВидПериода(Отчет);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Результат

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	Если ОрганизацияИсходноеЗначение = ПолеОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменилась = Истина;

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Если КомпоновщикИнициализирован Тогда
		БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
	
	ОбновитьИсходныеЗначения(ЭтотОбъект);
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
		СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыСубконто

&НаКлиенте
Процедура СписокВидовСубконтоПриИзменении(Элемент)
	
	ЭтоНастройкаЭпицентра = (Элемент.Имя = "ВидСубконто");
	СписокВидовСубконтоПриИзмененииСервер(ЭтоНастройкаЭпицентра);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект); 
	
	Если Не ЗначениеЗаполнено(ОписаниеЗаданияФормированияОтчета) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВидовСубконтоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСпискаВидовСубконто(Отчет.СписокВидовСубконто, Отказ);
	
КонецПроцедуры

// Вызов стандартной проверки заполнения только в части проверки списка видов субконто.
//
&НаСервереБезКонтекста
Процедура ПроверкаСпискаВидовСубконто(Знач СписокВидовСубконто, Отказ)
	
	// Проверка только списка видов субконто.
	Проверки = БухгалтерскиеОтчетыВызовСервера.СтандартныеПроверкиЗаполнения();
	Для каждого Проверка Из Проверки Цикл
		Проверки.Вставить(Проверка.Ключ, Проверка.Ключ = "СписокВидовСубконто");
	КонецЦикла;
	
	// Анализируем, что будет, если добавить ещё одно.
	СписокВидовСубконтоПроверка = СписокВидовСубконто.Скопировать();
	СписокВидовСубконтоПроверка.Добавить(Неопределено);
	ПроверяемыеЗначения = Новый Структура("СписокВидовСубконто", СписокВидовСубконтоПроверка);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения(ПроверяемыеЗначения, Отказ, Проверки);
	
КонецПроцедуры

#КонецОбласти

#Область Показатели

&НаКлиенте
Процедура ПоказательБУПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНУПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательСверкаНУПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПРПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательВРПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательКонтрольПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательВалютнаяСуммаПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательКоличествоПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Группировка

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)

	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоСубсчетамПриИзменении(Элемент)

	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоля

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сортировка

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Актуализация

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.КонецПериода);

	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчет("");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Перем ОтказПроверкиЗаполнения;
	
	ОчиститьСообщения();
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения", ОтказПроверкиЗаполнения);
	
	Если ОтказПроверкиЗаполнения = Истина Тогда
		
		ПоказатьНастройки("");
		
	Иначе
		
		Если РезультатВыполнения.Статус = "Выполняется" Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьПодготовленныеДанные", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		
		СкрытьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	ОткрытьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги(Команда)
	
	БухгалтерскиеОтчетыКлиент.ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПересчетИтоговНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.УстановитьВидимостьПанелиПересчетаИтогов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПослеПересчетаНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.УстановитьВидимостьПанелиПересчетаИтогов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПериода(Команда)
	
	БухгалтерскиеОтчетыКлиент.УстановитьВидПериодаПоИмениКоманды(Команда.Имя, ЭтотОбъект);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ОписаниеЗаданияФормированияОтчета) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область Новости

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область РегистрыУчета

&НаКлиенте
Процедура СохранитьРегистрУчета(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРегистрУчетаИПодписатьЭП(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивРегистровУчета(Команда)
	
	РегистрыУчетаКлиент.ОткрытьАрхивРегистровУчета(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ВидПериода"                       , Отчет.ВидПериода);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("ПоказательБУ"                     , Отчет.ПоказательБУ);
	ПараметрыОтчета.Вставить("ПоказательНУ"                     , Отчет.ПоказательНУ);
	ПараметрыОтчета.Вставить("ПоказательСверкаНУ"               , Отчет.ПоказательСверкаНУ);
	ПараметрыОтчета.Вставить("ПоказательПР"                     , Отчет.ПоказательПР);
	ПараметрыОтчета.Вставить("ПоказательВР"                     , Отчет.ПоказательВР);
	ПараметрыОтчета.Вставить("ПоказательВалютнаяСумма"          , Мин(Отчет.ПоказательВалютнаяСумма, БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет()));
	ПараметрыОтчета.Вставить("ПоказательКоличество"             , Отчет.ПоказательКоличество);
	ПараметрыОтчета.Вставить("ПоказательКонтроль"               , Отчет.ПоказательКонтроль);
	ПараметрыОтчета.Вставить("РазвернутоеСальдо"                , Отчет.РазвернутоеСальдо);
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"    , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("Периодичность"                    , Отчет.Периодичность);
	ПараметрыОтчета.Вставить("СписокВидовСубконто"              , Отчет.СписокВидовСубконто);
	ПараметрыОтчета.Вставить("ПоСубсчетам"                      , Отчет.ПоСубсчетам);
	ПараметрыОтчета.Вставить("Группировка"                      , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , ВыводитьПодвал);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ОтветственноеЛицо"                , Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ПараметрыОтчета.Вставить("ВыводитьЕдиницуИзмерения"         , ВыводитьЕдиницуИзмерения);
	
	БухгалтерскиеОтчетыКлиентСервер.ИсправитьПоказателиНалогНаПрибыль(ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;

	ТекстСубконто = "";
	Для Каждого ВидСубконто Из Отчет.СписокВидовСубконто Цикл
		ТекстСубконто = ТекстСубконто + ВидСубконто + ", ";	
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстСубконто) Тогда
		ТекстСубконто = Лев(ТекстСубконто, СтрДлина(ТекстСубконто) - 2);
	КонецЕсли;
	
	ЗаголовокОтчета = СтрШаблон(
		НСтр("ru = 'Анализ субконто %1%2'"),
		ТекстСубконто, 
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода, Ложь, Отчет.ВидПериода));
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоСубконто = 0;
	Для Каждого ЭлементСписка Из Отчет.СписокВидовСубконто Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			КоличествоСубконто = КоличествоСубконто + 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = КоличествоСубконто + 1 По 3 Цикл
		СписокПолей.Добавить("Субконто" + Индекс);
	КонецЦикла;
	
	Если Не ЕстьУчетПоПодразделениям Тогда
		СписокПолей.Добавить("Подразделение");
	КонецЕсли;
	
	Если Не Отчет.ПоказательВалютнаяСумма Тогда
		СписокПолей.Добавить("Валюта");
	КонецЕсли;
	
	Если Режим = "Группировка" Тогда
		СписокПолей.Добавить("Счет");
		СписокПолей.Добавить("СальдоНаНачалоПериода");
		СписокПолей.Добавить("ОборотыЗаПериод");
		СписокПолей.Добавить("СальдоНаКонецПериода");
	ИначеЕсли Режим = "Выбор" Тогда
		СписокПолей.Добавить("СальдоНаНачалоПериода");
		СписокПолей.Добавить("ОборотыЗаПериод");
		СписокПолей.Добавить("СальдоНаКонецПериода");
	ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Порядок" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Ложь);
	
	Если Не ПроверитьЗаполнение() Тогда
		
		РезультатВыполнения.ОтказПроверкиЗаполнения = Истина;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	БухгалтерскиеОтчеты.ОтменитьВыполнениеЗадания(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	ОписаниеЗаданияФормированияОтчета = БухгалтерскиеОтчеты.ЗапуститьПодготовкуОтчета(ЭтотОбъект, ПараметрыОтчета);
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат ОписаниеЗаданияФормированияОтчета;
	
КонецФункции

&НаСервере
Процедура СписокВидовСубконтоПриИзмененииСервер(ЭтоНастройкаЭпицентра)
	
	ИзмененПорядокСубконто = Ложь;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	Иначе
		
		Если Не Отчет.РежимРасшифровки Тогда
			
			// Сменился основной вид субконто из-за изменения порядка субконто, а не выбора другого.
			ИзмененПорядокСубконто = (Отчет.СписокВидовСубконто.Количество() > 1
			   И Отчет.СписокВидовСубконто[0].Значение <> ВидСубконтоИсходноеЗначение
			   И Отчет.СписокВидовСубконто[1].Значение = ВидСубконтоИсходноеЗначение);
			   
			Если ИзмененПорядокСубконто Тогда
				
				Отчет.СписокВидовСубконто.Сдвинуть(Отчет.СписокВидовСубконто[1], -1);
				БухгалтерскиеОтчеты.СохранитьОписаниеНастроек(ЭтотОбъект, ВидСубконтоИсходноеЗначение);
				Отчет.СписокВидовСубконто.Сдвинуть(Отчет.СписокВидовСубконто[0], 1);
				
			Иначе // сохраняем текущее состояние настроек
				
				БухгалтерскиеОтчеты.СохранитьОписаниеНастроек(ЭтотОбъект, ВидСубконтоИсходноеЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНастройкаЭпицентра Тогда
		// Оставим только вид субконто выбранный в эпицентре.
		Индекс = Отчет.СписокВидовСубконто.Количество() - 1;
		Пока Индекс > 0 Цикл
			Отчет.СписокВидовСубконто.Удалить(Индекс);
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	ВидСубконто = ?(Отчет.СписокВидовСубконто.Количество() = 0,
		Неопределено,
		Отчет.СписокВидовСубконто[0].Значение);
	Если ВидСубконто <> ВидСубконтоИсходноеЗначение И Не ИзмененПорядокСубконто Тогда // прочитать ранее сохраненные настройки
		БухгалтерскиеОтчеты.ПрочитатьОписаниеНастроек(ЭтотОбъект, ВидСубконто);
	Иначе // обновить текущие настройки
		БухгалтерскиеОтчеты.ПрочитатьОписаниеНастроек(ЭтотОбъект, ВидСубконто, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьИсходныеЗначения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСхемыКомпоновкиДанныхНаСервере() Экспорт
	
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	
	ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	
	// Изменение представления и наложения ограничения типа значения.
	Индекс = 1;
	Для Каждого ВидСубконто Из Отчет.СписокВидовСубконто Цикл
		Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
			Поле = Схема.НаборыДанных.ОсновнойНаборДанных.Поля.Найти("Субконто" + Индекс);
			Если Поле <> Неопределено Тогда
				Поле.ТипЗначения = ВидСубконто.Значение.ТипЗначения;
				Поле.Заголовок   = Строка(ВидСубконто.Значение);
				
				Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") И Поле.ТипЗначения.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
					ПараметрыОС.ИндексСубконто    = Индекс;
					ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") И Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ПараметрыНМА.ИндексСубконто    = Индекс;
					ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПараметрыФизЛица.ИндексСубконто    = Индекс;
					ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеОС"     , ПараметрыОС);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеНМА"    , ПараметрыНМА);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеФизЛица", ПараметрыФизЛица);
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	Перем ЗаполнятьКоллекцию;
	
	МассивСубконто = Новый Массив;
	Для Каждого ЭлементСписка Из Отчет.СписокВидовСубконто Цикл 
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			МассивСубконто.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполняемыеНастройки.Свойство("Показатели", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		// Управление показателями.
		Отчет.ПоказательБУ            = Истина;
		Отчет.ПоказательНУ            = Ложь;
		Отчет.ПоказательСверкаНУ      = Ложь;
		Отчет.ПоказательПР            = Ложь;
		Отчет.ПоказательВР            = Ложь;
		Отчет.ПоказательКонтроль      = Ложь;
		Отчет.РазвернутоеСальдо       = Ложь;
		Отчет.ПоказательВалютнаяСумма = ЕстьВалюта;
		Отчет.ПоказательКоличество    = ЕстьКоличество;

	КонецЕсли;

	Если ЗаполняемыеНастройки.Свойство("Группировка", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		// Добавление группировок с соответствии с выбранным счетом.
		Отчет.Группировка.Очистить();
		
		Если ЕстьУчетПоПодразделениям Тогда
			НоваяСтрока = Отчет.Группировка.Добавить();
			НоваяСтрока.Поле           = "Подразделение";
			НоваяСтрока.Использование  = Ложь;
			НоваяСтрока.Представление  = НСтр("ru = 'Подразделение'");
			НоваяСтрока.ТипГруппировки = 0;
		КонецЕсли;
		
		Для Индекс = 1 По Мин(МассивСубконто.Количество(), БухгалтерскийУчет.МаксимальноеКоличествоСубконто()) Цикл
			НоваяСтрока = Отчет.Группировка.Добавить();
			Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Субконто" + Индекс));
			НоваяСтрока.Поле           = Поле.Поле;
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = Поле.Заголовок;
			НоваяСтрока.ТипГруппировки = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		// Добавление неактивных отборов по субконто в соответствии с выбранным счетом.
		ОтборыДляУдаления = Новый Массив;
		Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
				Если СтрНайти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта"
					ИЛИ СтрНайти(ЭлементОтбора.ЛевоеЗначение, "Подразделение") = 1 Тогда
					ОтборыДляУдаления.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
			Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЦикла;
		
		Если ЕстьУчетПоПодразделениям Тогда
			
			Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Подразделение"));
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Подразделение", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь);
			
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
		
		Для Индекс = 1 По МассивСубконто.Количество() Цикл
			ПолеДляПоиска = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
			Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеДляПоиска);
			НовыйЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто" + Индекс, 
									МассивСубконто[Индекс - 1].ТипЗначения.ПривестиЗначение(Неопределено),, Ложь);
			Для Каждого Отбор из ОтборыДляУдаления Цикл
				Если МассивСубконто[Индекс - 1].ТипЗначения.СодержитТип(ТипЗнч(Отбор.ПравоеЗначение)) Тогда
					ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,Отбор,"ПравоеЗначение, ВидСравнения, Использование");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Порядок", ЗаполнятьКоллекцию) И ЗаполнятьКоллекцию Тогда
		Порядок = Отчет.КомпоновщикНастроек.Настройки.Порядок;
		БухгалтерскиеОтчеты.УдалитьНедоступныеПоля(Порядок.Элементы, Порядок.ДоступныеПоляПорядка, МассивСубконто.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходныеЗначения(Форма)
	
	Отчет = Форма.Отчет;
	
	Форма.ВидСубконтоИсходноеЗначение = ?(Отчет.СписокВидовСубконто.Количество() = 0,
		Неопределено,
		Отчет.СписокВидовСубконто[0].Значение);
	Форма.ОрганизацияИсходноеЗначение = Форма.ПолеОрганизация;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;

	ЭлементыПоказателей = ЭлементыПоказателейНалогНаПрибыль(Форма);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьВидимостьФлаговПоказателей(Форма, ЭлементыПоказателей,
		Форма.ЕстьНалоговыйУчет, Форма.ЕстьВалюта, Форма.ЕстьКоличество);
	Элементы.РазвернутоеСальдо.Доступность       = Форма.ЕстьСчета;
	Элементы.ПоказательБУ.Доступность            = Форма.ЕстьСчета;
	
	БухгалтерскиеОтчетыКлиентСервер.УправлениеВидимостьюВидПериода(Элементы.ГруппаВидПериода, Отчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанные(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	ЗагрузитьПодготовленныеДанныеНаСервере(РезультатВыполнения);
	
	БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(РезультатВыполнения)
	
	БухгалтерскиеОтчеты.ЗагрузитьПодготовленныеДанные(РезультатВыполнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , Отчет.КонецПериода);
	СписокПараметров.Вставить("СчетУчета"         , Неопределено);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Организация"       , Отчет.Организация);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщикаНастроек() 
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, ОрганизацияИзменилась);
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область Актуализация

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементыПоказателейНалогНаПрибыль(Форма)
	
	// Свойства элементов могут зависеть от нескольких факторов,
	// поэтому не меняем доступность полей непосредственно, а меняем доступность группы.
	Элементы = Новый Структура;
	Элементы.Вставить("ПоказательНУ",       Форма.Элементы.ПоказателиНУ);
	Элементы.Вставить("ПоказательСверкаНУ", Форма.Элементы.ПоказателиНУ);
	Элементы.Вставить("ПоказательВР",       Форма.Элементы.ПоказателиРазниц);
	Элементы.Вставить("ПоказательПР",       Форма.Элементы.ПоказателиРазниц);
	Элементы.Вставить("ПоказательКонтроль", Форма.Элементы.ПоказателиРазниц);
	
	Возврат Элементы;
	
КонецФункции

#КонецОбласти
