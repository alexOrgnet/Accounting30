#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("МакетОформления",                              "БезОформления");
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок",                            Ложь);
	ПараметрыОтчета.Вставить("ВыводитьПодвал",                               Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",                            Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",                        "");
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных",                    Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",                          "");
	ПараметрыОтчета.Вставить("КодРаспределяемогоСчета",                      "");
	ПараметрыОтчета.Вставить("ЗаголовокСчета",                               "");
	ПараметрыОтчета.Вставить("НаименованиеБазы",                             "");
	ПараметрыОтчета.Вставить("ЕдиницаИзмеренияПоказателя",                   "");
	ПараметрыОтчета.Вставить("ВидыАналитики",                                Новый Структура);
	ПараметрыОтчета.Вставить("ИдентификаторЗаголовкаРезультатРаспределения", "");
	ПараметрыОтчета.Вставить("ИдентификаторЗаголовкаБазаРаспределения",      "");
	ПараметрыОтчета.Вставить("СуммаВЯчейке",                                 0);
	ПараметрыОтчета.Вставить("ИспользуетсяОдинСчетУчета",                    Ложь);
	ПараметрыОтчета.Вставить("НастройкаАналитикиБазы",                       Новый ТаблицаЗначений);
	ПараметрыОтчета.Вставить("ТаблицаБазы",                                  Новый ТаблицаЗначений);

	Возврат ПараметрыОтчета;

КонецФункции

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьПриВыводеЗаголовка",             Ложь);
	Параметры.Вставить("ИспользоватьПередКомпоновкойМакета",         Истина);
	Параметры.Вставить("ИспользоватьДанныеРасшифровки",              Истина);
	Параметры.Вставить("ИспользоватьПослеКомпоновкиМакета",          Ложь);
	Параметры.Вставить("ИспользоватьВнешниеНаборыДанных",            Истина);
	Параметры.Вставить("ИспользоватьПриВыводеПодвала",               Ложь);
	Параметры.Вставить("ИспользоватьПередВыводомЭлементаРезультата", Ложь);
	Параметры.Вставить("ИспользоватьПослеВыводаРезультата",          Истина);
	Параметры.Вставить("ИспользоватьПривилегированныйРежим",         Истина);

	Возврат Параметры;

КонецФункции

// Возвращает внешние наборы данных, которые используются при компоновке макета.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры исполнения отчета (См. ПустыеПараметрыКомпоновкиОтчета()).
//  МакетКомпоновки - МакетКомпоновкиДанных - сформированный макет компоновки данных.
// 
// Возвращаемое значение:
//  Структура - внешние наборы данных:
// * ДанныеРаспределения - ТаблицаЗначений - преобразованная таблица коэффициентов распределения.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт

	ВнешниеИсточники = Новый Структура;
	ВнешниеИсточники.Вставить("ДанныеРаспределения", ДанныеРаспределения(ПараметрыОтчета));

	Возврат ВнешниеИсточники;

КонецФункции

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПередКомпоновкойМакета.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема				 - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	ЗаполняемыеПараметрыСКД = Новый Массив;
	ЗаполняемыеПараметрыСКД.Добавить("СуммаВЯчейке");
	ЗаполняемыеПараметрыСКД.Добавить("ЗаголовокСчета");
	ЗаполняемыеПараметрыСКД.Добавить("ИдентификаторЗаголовкаРезультатРаспределения");
	ЗаполняемыеПараметрыСКД.Добавить("ИдентификаторЗаголовкаБазаРаспределения");
	
	Для Каждого ИмяПараметра Из ЗаполняемыеПараметрыСКД Цикл
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, ПараметрыОтчета[ИмяПараметра], Истина);
	КонецЦикла;
	
	// В зависимости от количества счетов учета, указанных в настройке базы, колонка "Счет учета" оформляется по-разному:
	// для вывода колонки используются разные группировки. Использование группировки, которая в текущей настройке не нужна,
	// отключается.
	ИмяОтключаемойГруппировки = "ЕдинственныйСчет";
	Если ПараметрыОтчета.ИспользуетсяОдинСчетУчета = Истина Тогда
		ИмяОтключаемойГруппировки = "Счет";
	КонецЕсли;
	
	ОтборГруппировок = Новый Структура;
	ОтборГруппировок.Вставить("Лимит",       1);
	ОтборГруппировок.Вставить("Имя",         ИмяОтключаемойГруппировки);
	ОтборГруппировок.Вставить("Направление", "Колонки");
	
	ОтключаемыеГруппировки = Новый Массив;
	БухгалтерскиеОтчеты.НайтиГруппировкиТаблицы(ОтключаемыеГруппировки, КомпоновщикНастроек.Настройки.Структура, ОтборГруппировок);
	Если ОтключаемыеГруппировки.Количество() > 0 Тогда
		ОтключаемыеГруппировки[0].Использование = Ложь;
	КонецЕсли;
	
	ПредставлениеКоэффициента = Справочники.НастройкиУчетаЗатрат.ПредставлениеСобственнойБазыРаспределения(
		ПараметрыОтчета.НаименованиеБазы, ПараметрыОтчета.ЕдиницаИзмеренияПоказателя);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ПредставлениеКоэффициента", ПредставлениеКоэффициента, Истина);
		
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт

	// Обработка заголовоков таблицы: "Результат распределения" и "База распределения"
	// Находим ячейки со служебным текстом, который был указан в макете СКД, объединяем их и выводим текст заголовка.
	ОбластьЗаголовкаРезультатРаспределения = ОбъединенныйЗаголовокТаблицы(
		Результат, ПараметрыОтчета.ИдентификаторЗаголовкаРезультатРаспределения, НСтр("ru = 'Результат распределения'"));

	ОбластьЗаголовкаБазаРаспределения = ОбъединенныйЗаголовокТаблицы(
		Результат, ПараметрыОтчета.ИдентификаторЗаголовкаБазаРаспределения, НСтр("ru = 'База распределения'"));
		
	// Область базы распределения выделяем толстой линией.
	ВыделитьОбластьБазыРаспределения(Результат, ОбластьЗаголовкаБазаРаспределения);
	
	// Обработка области с распределяемой суммой.
	// Распределяемая сумма выводится в прямоугольной области в нескольких яйчеках.
	// Объединим эту область в одну ячейку. Для определения области, в которой содержится распределяемая сумма,
	// используется общий заголовок таблицы ОбластьЗаголовкаРезультатРаспределения.
	// Верх области распределямой суммы относительно общего заголовка смещен влево на 2 ячейки (между распределяемой суммой
	// и таблицей находится ячейка со декорацией-стрелкой) и вниз на 3 ячейки (по вертикали между заголовоком "Результат распределения"
	// и распределяемой суммой находится заголовок "База распределения" и заголовок названий видов аналитик).
	// Последняя строка табличного документа "Результат" - это область итогов, поэтому последнюю строку из объединения исключаем.
	ОбъединитьИРазрешитьРедактироватьОбластьРаспределяемаяСумма(Результат, ОбластьЗаголовкаРезультатРаспределения);
	
	ОбъединитьОбластьДекорацииСтрелки(Результат, ОбластьЗаголовкаРезультатРаспределения);
	
	// Обработка области итогов.
	// Добавим надпись "Итого:" она сдвинута на 3 ячейки относительно правого края таблицы 
	// (это ячейки с итогами по коэффициентам, процентам и суммам).
	УстановитьНадписьИтогов(Результат, ОбластьЗаголовкаРезультатРаспределения);
	
	// Установка фона, шрифта, линий области итогов
	УстановитьОформлениеИтогов(Результат, ОбластьЗаголовкаРезультатРаспределения);

	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	ВывестиПримечания(ПараметрыОтчета, Результат);
	
КонецПроцедуры

// Заполняет структуру настроек отчета из реквизитов формы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета()
//  Форма - УправляемаяФорма - форма отчета.
//
Процедура ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма) Экспорт

	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Форма);
	НастройкаАналитики = ПолучитьИзВременногоХранилища(Форма.АдресНастройкаАналитики);
	СтрокиИспользуемыхСчетов = НастройкаАналитики.НайтиСтроки(Новый Структура("СчетСтатус", 1));

	МассивИспользуемыхСчетов = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиИспользуемыхСчетов, "Счет", Истина);
	// Символ * - ссылка на примечание, которое выводится в методе ВывестиПримечания()
	ЗаголовокСчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счет %1*'"), Форма.КодРаспределяемогоСчета);

	ПараметрыОтчета.ЗаголовокСчета             = ЗаголовокСчета;
	ПараметрыОтчета.ИдентификаторОтчета        = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	ПараметрыОтчета.СхемаКомпоновкиДанных      = ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	ПараметрыОтчета.НастройкиКомпоновкиДанных  = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета.СуммаВЯчейке               = Форма.РаспределяемаяСумма;
	ПараметрыОтчета.ИспользуетсяОдинСчетУчета  = МассивИспользуемыхСчетов.Количество() <= 1;
	ПараметрыОтчета.НастройкаАналитикиБазы     = НастройкаАналитики;
	ПараметрыОтчета.ТаблицаБазы                = ПолучитьИзВременногоХранилища(ФОрма.АдресТаблицыКоэффициентов);
	// Служебный текст для определения ячеек, из которых формируется заголовки таблицы "Результат распределения"
	// и "База распределения". После вывода результата такие ячейки будут объединены, а служебный текст
	// заменится текстом заголовков.
	ПараметрыОтчета.ИдентификаторЗаголовкаРезультатРаспределения = "###ЗаголовокРезультатРаспределения###";
	ПараметрыОтчета.ИдентификаторЗаголовкаБазаРаспределения = "###ЗаголовокБазаРаспределения###";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбластьОтносительноЗаголовка(Результат, ОбластьЗаголовкаРезультатРаспределения, СмещениеНиз, СмещениеЛево)
	Возврат Результат.Область(
				ОбластьЗаголовкаРезультатРаспределения.Верх + СмещениеНиз,
				ОбластьЗаголовкаРезультатРаспределения.Лево - СмещениеЛево,
				Результат.ВысотаТаблицы - 1,
				ОбластьЗаголовкаРезультатРаспределения.Лево - СмещениеЛево);
КонецФункции

Функция ДанныеРаспределения(ПараметрыОтчета)
	
	// Настройка база и таблица базы получены на форме из временного хранилища.
	НастройкаАналитикиБазы = ПараметрыОтчета.НастройкаАналитикиБазы;
	ТаблицаБазы = ТаблицаБазыСРаспределеннойСуммой(ПараметрыОтчета);

	ВидыАналитики = ПараметрыОтчета.ВидыАналитики;
	
	// Помещаем во временную таблицу "НастройкаАналитикиБазы"
	ТочкаЗапроса = СхемыЗапросов.ПоместитьТаблицуЗначений(НастройкаАналитикиБазы, "НастройкаАналитикиБазы");
	// Добавим индекс по полю "Счет"
	Если Не ЗначениеЗаполнено(ТочкаЗапроса.Запрос.Индекс) Тогда
		ТочкаЗапроса.Запрос.Индекс.Добавить("Счет");
	КонецЕсли;
	
	СхемаЗапроса = ТочкаЗапроса.Схема;
	
	// Помещаем во временную таблицу "ТаблицаБазы"
	ТочкаЗапроса = СхемыЗапросов.ПоместитьТаблицуЗначений(ТаблицаБазы, "ТаблицаБазы", СхемаЗапроса); 
	
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "НомерСтроки", "АВТОНОМЕРЗАПИСИ()");
	
	// Добавим индекс по полю "Счет"
	Если Не ЗначениеЗаполнено(ТочкаЗапроса.Запрос.Индекс) Тогда
		ТочкаЗапроса.Запрос.Индекс.Добавить("Счет");
	КонецЕсли;
	
	// В исходной таблице базы значение каждого вида аналитики находится в отдельном столбце. 
	// Преобразуем эту таблицу: по каждой строке для каждого вида аналитики создадим отдельную строку во временной таблице.
	// Также во временной таблице будут строки с пустым видом аналитики, содержащие
	// значения коэффициента, процента, суммы распределения для вывода итога по строке. 
	// В СКД отображение пустого вида аналитики отключено с помощью отбора.
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить();

	Оператор = ОписаниеЗапроса.Операторы[0];
	Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "ТаблицаБазы", "ТаблицаБазы");

	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросРезультата(СхемаЗапроса);
	
	// Если источником схемы запроса является временная таблица, то ее поля будут входить в перечень доступных
	// в случае, когда временная таблица создана на основании таблиц метаданных
	// и/или когда схема запроса инициализована текстом запроса, содержащим помещение данных в эту временную таблицу.
	// Поскольку здесь источником временной таблицы является параметр, то доступные поля необходимо устанавливать каждый раз,
	// когда источником схемы запроса является эта временная таблица.
	УстановитьДоступныеПоля(Оператор, СхемаЗапроса, "ТаблицаБазы");
	
	// Колонки Счет и ВидАналитики в схеме компоновки данных соединяютя по полю НомерСтроки.
	// Значения числовых показателей - коэффициент, сумма, процент - являются ресурсами и выводятся как в горизонтальных,
	// так и в вертикальных итогах.
	// Для того, чтобы в описании ресурса можно было применить функцию СУММА() и не получить при этом кратное увеличение
	// пропорционально видам аналитики в горизонтальных итогах и пропорционально количеству строк в вертикальных итогах,
	// числовые показатели в запросе в каждой строке выбираем только в одном столбце,
	// в остальных столбцах в качестве значений эти полей устанавливаем 0.
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "НомерСтроки",           "ТаблицаБазы.НомерСтроки");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Счет",                  "ТаблицаБазы.Счет");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "ВидАналитики",          """""");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "ЗначениеАналитики",     """""");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Коэффициент",           "ТаблицаБазы.Коэффициент");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "СуммаРаспределения",    "ТаблицаБазы.СуммаРаспределения");
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Процент",               "ТаблицаБазы.Процент");
	// Признак, что этот вид аналитики (пустой) нужно скрыть. Используется при установке отбора в СКД.
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "АналитикаОтображается", "ЛОЖЬ");

	// Добавляем аналитики
	Для Каждого ВидАналитики Из ВидыАналитики Цикл

		Оператор = ОписаниеЗапроса.Операторы.Добавить();

		ИсточникТаблицаБазы = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "ТаблицаБазы", "ТаблицаБазы");

		УстановитьДоступныеПоля(Оператор, СхемаЗапроса, "ТаблицаБазы");
		ТочкаЗапроса.Вставить("Оператор", Оператор);
		
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "НомерСтроки",           "ТаблицаБазы.НомерСтроки");
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Счет",                  "ТаблицаБазы.Счет");
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "ВидАналитики",          "&" + ВидАналитики.Ключ);
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "ЗначениеАналитики",     "ТаблицаБазы." + ВидАналитики.Ключ);
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Коэффициент",           "0");
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "СуммаРаспределения",    "0");
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Процент",               "0");
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "АналитикаОтображается", "ИСТИНА");
		
		// Внутренним соединением с таблицей настройки исключаем неиспользуемую аналитику.
		Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "НастройкаАналитикиБазы", "ФильтрНеиспользуемойАналитики");

		УстановитьДоступныеПоля(Оператор, СхемаЗапроса, "НастройкаАналитикиБазы");

		МассивУсловийСоединения = Новый Массив;
		МассивУсловийСоединения.Добавить("ТаблицаБазы.Счет = ФильтрНеиспользуемойАналитики.Счет");
		МассивУсловийСоединения.Добавить("ФильтрНеиспользуемойАналитики.ВидАналитики = &" + ВидАналитики.Ключ);
		МассивУсловийСоединения.Добавить("ФильтрНеиспользуемойАналитики.ВидАналитикиСтатус = 1");
		
		ИсточникТаблицаБазы.Соединения.Добавить("ФильтрНеиспользуемойАналитики", СтрСоединить(МассивУсловийСоединения, " И "));
		ИсточникТаблицаБазы.Соединения[ИсточникТаблицаБазы.Соединения.Количество() - 1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого ВидАналитики Из ВидыАналитики Цикл
		Запрос.УстановитьПараметр(ВидАналитики.Ключ, ВидАналитики.Значение);
	КонецЦикла;

	Запрос.УстановитьПараметр("ТаблицаБазы", ТаблицаБазы);
	Запрос.УстановитьПараметр("НастройкаАналитикиБазы", НастройкаАналитикиБазы);
	
	ДанныеРаспределения = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеРаспределения;
	
КонецФункции

Процедура ВыделитьОбластьБазыРаспределения(Результат, ОбластьЗаголовкаБазаРаспределения)
	// Область базы по вертикали начинается с заголовка "База распределения" и включает в себя все последующие строки, за
	// исключением области итогов, которые расположены в последней строке.
	ОбластьБазыРаспределения = Результат.Область(
		ОбластьЗаголовкаБазаРаспределения.Верх, ОбластьЗаголовкаБазаРаспределения.Лево, Результат.ВысотаТаблицы - 1,
		ОбластьЗаголовкаБазаРаспределения.Право);

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ОбластьБазыРаспределения.Обвести(Линия, Линия, Линия, Линия);
	
КонецПроцедуры

Процедура УстановитьДоступныеПоля(Оператор, СхемаЗапроса, ИмяТаблицы)

	ЗапросСозданиеТаблицы = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, ИмяТаблицы);
	
	Если ЗапросСозданиеТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДоступныеПоляПоследнегоИсточника = Оператор.Источники[Оператор.Источники.Количество() - 1].Источник.ДоступныеПоля;

	Для Каждого ОписаниеПоляИсточника Из ЗапросСозданиеТаблицы.Запрос.Колонки Цикл

		ДоступноеПоле = ДоступныеПоляПоследнегоИсточника.Найти(ОписаниеПоляИсточника.Псевдоним);

		Если ДоступноеПоле <> Неопределено Тогда
				// Вероятно, доступные поля были корректно инициализированы
			Продолжить;
		КонецЕсли;

		ДоступныеПоляПоследнегоИсточника.Добавить(ОписаниеПоляИсточника.Псевдоним, ОписаниеПоляИсточника.ТипЗначения);

	КонецЦикла;

КонецПроцедуры

// Находит область заголовка таблицы по техническому имени, указанному в параметре отчета, устанавливает заголовок
// и возвращает результат объединения.
// 
// Параметры:
//  Результат - ТабличныйДокумент - сформированный отчет.
//  ИдентификаторЗаголовка - Строка - Идентификатор, по которому производится поиск области заголовка.
//  ТекстЗаголовка - Строка - Текст, устанавливаемый в объединенной области.
// 
// Возвращаемое значение:
//  ОбластьЯчеекТабличногоДокумента - объединенная область заголовка.
//  Неопределено - текст отсутствует.
//
Функция ОбъединенныйЗаголовокТаблицы(Результат, ИдентификаторЗаголовка, ТекстЗаголовка)

	ОбластьРезультатПоиска = Результат.НайтиТекст(ИдентификаторЗаголовка);
	
	Если ОбластьРезультатПоиска = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запомним номер первой колонки, начиная с которой нужно выполнить объединение.
	// В цикле область поиска каждый раз сдвигается на одну ячейку вправо до тех пор, пока не кончится область,
	// состоящая из ячеек с идентификатором.
	НомерСтрокиЗаголовка = ОбластьРезультатПоиска.Верх;
	НомерПервойКолонки = ОбластьРезультатПоиска.Лево;

	Пока ОбластьРезультатПоиска <> Неопределено Цикл
		НомерПоследнейКолонки = ОбластьРезультатПоиска.Право;
		ОбластьРезультатПоиска = Результат.НайтиТекст(
			ИдентификаторЗаголовка,
			ОбластьРезультатПоиска,
			Результат.Область("R" + XMLСтрока(НомерСтрокиЗаголовка)),
			Истина);
	КонецЦикла;
	
	ОбластьРезультатОбъединения = Результат.Область(
		НомерСтрокиЗаголовка,
		НомерПервойКолонки,
		НомерСтрокиЗаголовка,
		НомерПоследнейКолонки);
		
	ОбластьРезультатОбъединения.Объединить();
	ОбластьРезультатОбъединения.Текст = ТекстЗаголовка;

	Возврат ОбластьРезультатОбъединения;

КонецФункции

Функция ТаблицаБазыСРаспределеннойСуммой(ПараметрыОтчета)

	ТаблицаБазы = ПараметрыОтчета.ТаблицаБазы.Скопировать();
	ТаблицаБазы.Колонки.Добавить("СуммаРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаБазы.Колонки.Добавить("Процент", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ОбщаяСуммаРаспределения = ПараметрыОтчета.СуммаВЯчейке;
	МассивКоэффициентов = ТаблицаБазы.ВыгрузитьКолонку("Коэффициент");
	
	Если МассивКоэффициентов.Количество() > 0 Тогда
		
		МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОбщаяСуммаРаспределения, МассивКоэффициентов, 2);
		МассивПроцентов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивСумм, 2);

		ТаблицаБазы.ЗагрузитьКолонку(МассивСумм, "СуммаРаспределения");
		ТаблицаБазы.ЗагрузитьКолонку(МассивПроцентов, "Процент");
		
	КонецЕсли;
	
	Возврат ТаблицаБазы;
	
КонецФункции

Процедура ВывестиПримечания(ПараметрыОтчета, Результат)
	
	Примечания = ПолучитьМакет("Примечания");
	Примечания.Параметры.КодРаспределяемогоСчета = ПараметрыОтчета.КодРаспределяемогоСчета;
	
	Примечание = Примечания.Область("Примечание");
	
	ЗавершениеТаблицыПоВысоте = Результат.ВысотаТаблицы;
		
	Результат.ВставитьОбласть(Примечание, Результат.Область(СтрШаблон("R%1", XMLСтрока(ЗавершениеТаблицыПоВысоте + 1))));
		
	КонецПроцедуры

Процедура УстановитьОформлениеИтогов(Результат, ОбластьЗаголовкаРезультатРаспределения)

	ОбластьИтогов = Результат.Область(
		Результат.ВысотаТаблицы,
		ОбластьЗаголовкаРезультатРаспределения.Лево,
		Результат.ВысотаТаблицы,
		ОбластьЗаголовкаРезультатРаспределения.Право);

	ОбластьИтогов.ЦветФона = ОбластьЗаголовкаРезультатРаспределения.ЦветФона;
	ОбластьИтогов.Обвести();
	ОбластьИтогов.Очистить(Ложь, Ложь, Истина);
	
	// Шрифт меняем на полужирный.
	ОбластьИтогов.Шрифт = Новый Шрифт(ОбластьИтогов.Шрифт, , , Истина);
	
КонецПроцедуры

Процедура УстановитьНадписьИтогов(Результат, ОбластьЗаголовкаРезультатРаспределения)

	ГоризонтальноеСмещениеОбластиИтого = 3;
	ОбластьНадписиИтого = Результат.Область(
		Результат.ВысотаТаблицы,
		ОбластьЗаголовкаРезультатРаспределения.Право - ГоризонтальноеСмещениеОбластиИтого,
		Результат.ВысотаТаблицы,
		ОбластьЗаголовкаРезультатРаспределения.Право - ГоризонтальноеСмещениеОбластиИтого);
	ОбластьНадписиИтого.Текст = НСтр("ru = 'Итого:'");
	ОбластьНадписиИтого.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	
КонецПроцедуры

Процедура ОбъединитьОбластьДекорацииСтрелки(Результат, ОбластьЗаголовкаРезультатРаспределения)
	
	СмещениеЛево = 1;
	СмещениеНиз = 3;
	ОбластьКартинка = ОбластьОтносительноЗаголовка(Результат, ОбластьЗаголовкаРезультатРаспределения, СмещениеНиз, СмещениеЛево);
	ОбластьКартинка.Объединить();

	ОбластьКартинка.ВертикальноеПоложениеКартинки   = ВертикальноеПоложение.Центр;
	ОбластьКартинка.ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

Процедура ОбъединитьИРазрешитьРедактироватьОбластьРаспределяемаяСумма(Результат, ОбластьЗаголовкаРезультатРаспределения)

	СмещениеЛево = 2;
	СмещениеНиз = 3;
	ОбластьРаспределяемаяСумма =
		ОбластьОтносительноЗаголовка(Результат, ОбластьЗаголовкаРезультатРаспределения, СмещениеНиз, СмещениеЛево);
	ОбластьРаспределяемаяСумма.Объединить();
	ОбластьРаспределяемаяСумма.Защита = Ложь;
	
КонецПроцедуры
	
#КонецОбласти

#КонецЕсли