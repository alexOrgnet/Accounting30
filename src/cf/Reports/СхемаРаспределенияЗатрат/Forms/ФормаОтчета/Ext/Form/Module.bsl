#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.АдресТаблицыКоэффициентов) Тогда
		ВызватьИсключение НСтр("ru = 'Отчет открывается из формы настройки собственной базы распределения в учетной политике
		|и не предназначен для непосредственного использования.'");
	КонецЕсли;
	
	СтруктураПараметровОтчета = СтруктураПараметровФормы(Параметры, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметровОтчета);
	РаспределяемаяСумма = 1000;
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");

	ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
		БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмениласьНастройкаРаспределения" Тогда
		СтруктураПараметровОтчета = СтруктураПараметровФормы(Параметр, УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметровОтчета);
		ЗапуститьФормированиеОтчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Результат

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат, ЭтотОбъект, "Подключаемый_РезультатПриАктивизацииПодключаемый");
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИзменениеРаспределяемойСуммы(Область, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()

	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат, КэшВыделеннойОбласти);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()

	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);

	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;

	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()

	ЗапуститьФормированиеОтчета();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()

	ОчиститьСообщения();

	ДлительнаяОперация = СформироватьОтчетНаСервере();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(РезультатФормирования, ДополнительныеПараметры) Экспорт

	Если РезультатФормирования = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатФормирования.Статус <> "Ошибка" Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере(РезультатФормирования.АдресРезультата);
	Иначе
		ПоказатьОшибкиФормирования(РезультатФормирования);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеРаспределяемойСуммы(Область, СтандартнаяОбработка)

	// Защищенными являются все ячейки, кроме ячейки с распределяемой суммой.
	Если Область.Защита Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВводРаспределяемойСуммы(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводРаспределяемойСуммы(Знач Область)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбластьРаспределяемойСуммы", Область);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводРаспределяемойСуммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	ТипСуммы = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	Разрядность             = ТипСуммы.КвалификаторыЧисла.Разрядность;
	РазрядностьДробнойЧасти = ТипСуммы.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	
	ПоказатьВводЧисла(
		ОписаниеОповещения,
		ОписаниеЧисла.ПривестиЗначение(Область.Текст),
		НСтр("ru = 'Распределяемая сумма'"),
		Разрядность,
		РазрядностьДробнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводРаспределяемойСуммыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбластьРаспределяемойСуммы = ДополнительныеПараметры.ОбластьРаспределяемойСуммы;
	
	Если Результат <> Неопределено Тогда
		Если Результат <= 0 Тогда
			ПоказатьВводРаспределяемойСуммы(ОбластьРаспределяемойСуммы);
		Иначе
			РаспределяемаяСумма = Результат;
			ОбластьРаспределяемойСуммы.Текст = Результат;
			ЗапуститьФормированиеОтчета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПараметровФормы(ПараметрыОтчета, ИдентификаторФормы)
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ВидыАналитики", ПараметрыОтчета.ВидыАналитики);
	
	ТаблицаНастройки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.АдресНастройкаАналитики);
	СтруктураОтчета.Вставить("АдресНастройкаАналитики", ПоместитьВоВременноеХранилище(ТаблицаНастройки, ИдентификаторФормы));
	
	ТаблицаКоэффициентов = ПолучитьИзВременногоХранилища(ПараметрыОтчета.АдресТаблицыКоэффициентов);
	СтруктураОтчета.Вставить("АдресТаблицыКоэффициентов", ПоместитьВоВременноеХранилище(ТаблицаКоэффициентов, ИдентификаторФормы));
	
	СтруктураОтчета.Вставить("КодРаспределяемогоСчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Счет, "Код"));
	СтруктураОтчета.Вставить("НаименованиеБазы", ПараметрыОтчета.НаименованиеБазы);
	СтруктураОтчета.Вставить("ЕдиницаИзмеренияПоказателя", ПараметрыОтчета.ЕдиницаИзмеренияПоказателя);
	
	Возврат СтруктураОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(АдресХранилища)

	РезультатВыполнения  = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат            = РезультатВыполнения.Результат;
	ДанныеРасшифровки    = РезультатВыполнения.ДанныеРасшифровки;
	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормирования(ДлительнаяОперация)
	ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);

	СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);

	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Текст = СообщениеОбОшибке;
	ОтображениеСостояния.Картинка = Новый Картинка;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчеты.Схема распределения затрат'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Отчеты.СхемаРаспределенияЗатрат, , ТекстОшибки);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

	ИдентификаторЗадания = Неопределено;

	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяФормы);
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	Отчеты.СхемаРаспределенияЗатрат.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(
		ЭтотОбъект);

	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);

	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;

	Возврат РезультатВыполнения;

КонецФункции

#КонецОбласти