#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Наборы = Новый Массив;
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейПоУмолчанию());
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	Наборы.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейОтложенногоНалога());
	
	// Справка формируется по разным принципам в бухгалтерском и налоговом учете,
	// поэтому механического вычитания сумм бухгалтерского и налогового учета недостаточно
	
	Возврат Наборы;
	
КонецФункции

#КонецОбласти

#Область ТонкаяНастройка

Процедура УстановитьВариантОтчета(КомпоновщикНастроек, ПараметрыОтчета)
	
	// Отчет формируется в двух вариантах:
	// - "Первичный", где остаток расходов определяется изменениями в движении товаров
	// - "Вторичный", где остаток расходов в бухгалтерском учете определяется процентом, рассчитанном в "Первичном" варианте.
	//
	// Второй вариант применяется для отображения данных бухгалтерского учета,
	// если предприятие ведет налоговый учет по налогу на прибыль.
	//
	// У него есть два подварианта:
	// - краткий - только бухгалтерский учет
	// - полный  - бухгалтерский учет и разницы.
	
	Вариант = "Первичный";
	
	Если ПараметрыОтчета.ПоказательБУ 
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода) Тогда
		
		Если ПараметрыОтчета.ПоказательВР Тогда
		    Вариант = "ВторичныйПолный";
		Иначе
			Вариант = "ВторичныйКраткий";
		КонецЕсли;
		
	КонецЕсли;
	
	ВключитьГруппировкуТаблицы(КомпоновщикНастроек.Настройки.Структура, Вариант);
	
КонецПроцедуры

Процедура ВключитьГруппировкуТаблицы(Группировки, ИмяГруппировки, Включена = Ложь)
	
	Для Каждого Группировка Из Группировки Цикл
		
		ТипЭлемента = ТипЗнч(Группировка);
		
		Если ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			Если Группировка.Имя = ИмяГруппировки Тогда
				
				Группировка.Использование = Истина;
				Включена = Истина;
				Возврат;
				
			КонецЕсли;
			
			ВложенныеГруппировки = Группировка.Структура;
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ВложенныеГруппировки = Группировка.Строки;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ВложенныеГруппировки = Группировка.Структура;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не Группировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ВключитьГруппировкуТаблицы(ВложенныеГруппировки, ИмяГруппировки, Включена);
		
		Если Включена Тогда
			Возврат;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(Контекст, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, ПропуститьЭлемент) Экспорт
	
	НайтиНастраиваемыеМакетыЗаголовков(Контекст, МакетКомпоновки);
	
	// Добавляем ссылку на счет в служебный массив, чтобы в процедуре "ПослеВыводаРезультата" вывести примечание для счета в нижней части документа.
	// Положение в массиве важно: по порядку в массиве будет определяться количество символов "*" около примечания для каждого счета.
	// Группировка по счету - служебная, пропускаем ее при выводе.
	ДобавитьСчетПримечаний(Контекст, ЭлементРезультата, ПропуститьЭлемент);
	
	// Для вариантов, содержащих данные бухгалтерского учета, в шапку отчета выводим символ примечания для каждого счета,
	// для вариантов, содержащих данные только налогового учета, выводим формулу, т. к. списание транспортных расходов в налоговом учете
	// всегда выполняется по единственно возможному алгоритму.
	ИмяПараметраПримечания = Контекст.ВыполнениеОтчета.МакетыЗаголовков[ЭлементРезультата.Макет];
	
	Если ИмяПараметраПримечания <> Неопределено Тогда
		
		Если Контекст.ПоказательБУ Тогда
			ЭлементРезультата.ЗначенияПараметров[ИмяПараметраПримечания].Значение =
				СправкиРасчеты.СимволыПримечания(Контекст.ВыполнениеОтчета.СчетаПримечаний.Количество());
		Иначе
			ЭлементРезультата.ЗначенияПараметров[ИмяПараметраПримечания].Значение =
				Символы.ПС + НСтр("ru = 'гр.3 * гр.7'");
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СчетчикПримечаний = СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	Если Контекст.ПоказательБУ Тогда
		// Вывод подробностей расчета на основании данных учетной политики.
		ДобавитьПримечания(Контекст, Результат, СчетчикПримечаний);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	УстановитьВариантОтчета(КомпоновщикНастроек, ПараметрыОтчета);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПараметрыПоиска = БухгалтерскиеОтчеты.ПараметрыПоискаВТелеМакетаКомпоновки();
	
	ПараметрыОтчета.ВыполнениеОтчета.Вставить("ВариантОтчета", "Вторичный");

	ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(МакетКомпоновки, "Вторичный", ПараметрыПоиска);
	Если ЭлементТела = Неопределено Тогда
		// Есть три варианта настроек: имена двух начинаются с "Вторичный", а одного - с "Первичный".
		ЭлементТела = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(МакетКомпоновки, "Первичный", ПараметрыПоиска);
		ПараметрыОтчета.ВыполнениеОтчета.ВариантОтчета = "Первичный";
	КонецЕсли;
	
	Если ЭлементТела.Тело.Количество() > 1 Тогда // итоги группировки таблицы
		ЭлементТела.Тело.Удалить(ЭлементТела.Тело[1]);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПередВыводомЭлементаРезультата", Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	ПоляПоВидамУчета = Новый Массив;
	
	ПоляПоВидамУчета.Добавить(Новый Структура("Имя, Представление","ТранспортныеРасходы", "Транспортные расходы"));
	
	Возврат ПоляПоВидамУчета;
	
КонецФункции

Процедура ДобавитьПримечания(Контекст, Результат, СчетчикПримечаний)

	ТекстыПримечаний = ТекстыПримечаний(Контекст.Организация, Контекст.ВыполнениеОтчета.СчетаПримечаний,
		Контекст.НачалоПериода, Контекст.КонецПериода, Контекст.ВыполнениеОтчета.ВариантОтчета);
	
	Для Каждого СчетУчета Из Контекст.ВыполнениеОтчета.СчетаПримечаний Цикл
		
		МассивСтрокПримечаний = ТекстыПримечаний[СчетУчета];
		
		Если МассивСтрокПримечаний <> Неопределено Тогда
			
			ТекстПримечания = СтрСоединить(МассивСтрокПримечаний, Символы.ПС);
			
			СправкиРасчеты.ДобавитьПримечание(Результат, ТекстПримечания, СчетчикПримечаний);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстыПримечаний(Организация, СчетаУчета, НачалоПериода, КонецПериода, ВариантОтчета)
	
	ТаблицаНастроекЭталон = Новый ТаблицаЗначений;
	ТаблицаНастроекЭталон.Колонки.Добавить("МесяцНачала",                     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНастроекЭталон.Колонки.Добавить("МесяцОкончания",                  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНастроекЭталон.Колонки.Добавить("НеРаспределятьЗатратыНаДоставку", Новый ОписаниеТипов("Булево"));
	
	СоответствиеНастроек = Новый Соответствие;
	
	Для Каждого СчетУчета Из СчетаУчета Цикл
		СоответствиеНастроек.Вставить(СчетУчета, ТаблицаНастроекЭталон.Скопировать());
	КонецЦикла;
	
	ПериодНастроек = НачалоПериода;
	
	Пока ПериодНастроек < КонецПериода Цикл
		
		НастройкиПериода = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(ПериодНастроек, Организация);
		Закрытие = НастройкиПериода.Закрытие;
		
		Для каждого Счет Из СчетаУчета Цикл
			ТаблицаНастроек = СоответствиеНастроек[Счет];
			КоличествоСтрок = ТаблицаНастроек.Количество();
			НеРаспределятьЗатратыНаДоставку = Закрытие[Счет].НеРаспределятьЗатратыНаДоставку;
			
			Если КоличествоСтрок = 0
				Или ТаблицаНастроек[КоличествоСтрок - 1].НеРаспределятьЗатратыНаДоставку <> НеРаспределятьЗатратыНаДоставку Тогда
				
				СтрокаНастроек = ТаблицаНастроек.Добавить();
				СтрокаНастроек.МесяцНачала = ПериодНастроек;
				СтрокаНастроек.НеРаспределятьЗатратыНаДоставку = НеРаспределятьЗатратыНаДоставку;
				
			Иначе
				СтрокаНастроек = ТаблицаНастроек[КоличествоСтрок - 1];
			КонецЕсли;
			
			СтрокаНастроек.МесяцОкончания = ПериодНастроек;
		КонецЦикла;
		
		ПериодНастроек = ДобавитьМесяц(ПериодНастроек, 1);
		
	КонецЦикла;
	
	Для каждого ЭлементНастройки Из СоответствиеНастроек Цикл
		
		Счет = ЭлементНастройки.Ключ;
		ТаблицаНастроек = ЭлементНастройки.Значение;
		
		МассивСтрок = Новый Массив;
		
		ШаблонТекста = НСтр("ru = 'В учетной политике организации для счета %1 установлено списание затрат на доставку:'");
		МассивСтрок.Добавить(СтрШаблон(ШаблонТекста, ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(Счет)));
		
		Если ТаблицаНастроек.Количество() = 0 Тогда
			МассивСтрок.Добавить(ТекстНастройкиФормулаРасчета(Ложь, ВариантОтчета));
		ИначеЕсли ТаблицаНастроек.Количество() = 1 Тогда
			МассивСтрок.Добавить(ТекстНастройкиФормулаРасчета(ТаблицаНастроек[0].НеРаспределятьЗатратыНаДоставку, ВариантОтчета));
		Иначе
			МассивСтрок.Добавить(Новый Массив);
			МассивСтрок.Добавить(Новый Массив);
			ЗначениеПервойНастройки = ТаблицаНастроек[0].НеРаспределятьЗатратыНаДоставку;
			
			Для каждого СтрокаНайстройки Из ТаблицаНастроек Цикл
				
				Если СтрокаНайстройки.МесяцНачала = СтрокаНайстройки.МесяцОкончания Тогда
					ТекстМесяцы = Формат(СтрокаНайстройки.МесяцНачала, "ДФ=ММММ");
				ИначеЕсли ДобавитьМесяц(СтрокаНайстройки.МесяцНачала, 1) = СтрокаНайстройки.МесяцОкончания Тогда
					ШаблонТекста = "%1, %2";
					ТекстМесяцы = СтрШаблон(ШаблонТекста, Формат(СтрокаНайстройки.МесяцНачала, "ДФ=ММММ"), Формат(СтрокаНайстройки.МесяцОкончания, "ДФ=ММММ"));
				Иначе
					ШаблонТекста = "%1-%2";
					ТекстМесяцы = СтрШаблон(ШаблонТекста, Формат(СтрокаНайстройки.МесяцНачала, "ДФ=ММММ"), Формат(СтрокаНайстройки.МесяцОкончания, "ДФ=ММММ"));
				КонецЕсли;
				
				Если СтрокаНайстройки.НеРаспределятьЗатратыНаДоставку = ЗначениеПервойНастройки Тогда
					МассивСтрок[1].Добавить(ТекстМесяцы);
				Иначе
					МассивСтрок[2].Добавить(ТекстМесяцы);
				КонецЕсли;

			КонецЦикла;
			
			ШаблонТекста = "%1 - %2";
			
			МассивСтрок[1] = СтрШаблон(ШаблонТекста, СтрСоединить(МассивСтрок[1], ", "),
				ТекстНастройкиФормулаРасчета(ЗначениеПервойНастройки, ВариантОтчета));
			МассивСтрок[2] = СтрШаблон(ШаблонТекста, СтрСоединить(МассивСтрок[2], ", "),
				ТекстНастройкиФормулаРасчета(Не ЗначениеПервойНастройки, ВариантОтчета));
			
		КонецЕсли;
						
		СоответствиеНастроек[Счет] = МассивСтрок;
		
	КонецЦикла;
	
	Возврат СоответствиеНастроек;
	
КонецФункции

Функция ТекстНастройкиФормулаРасчета(НеРаспределятьЗатратыНаДоставку, ВариантОтчета)

	// Для "Первичного" и "Вторичного" вариантов отчета отличаются макеты и данные для расчета суммы списания,
	// поэтому для них отличаются номера колонок и формулы расчета.
	Если ВариантОтчета = "Первичный" Тогда
		ФормулаНеРаспределять = НСтр("ru = 'гр.8 = гр.6'");
		ФормулаРаспределять = НСтр("ru = 'гр.8 = гр.3 * гр.7'");
	Иначе
		ФормулаНеРаспределять = НСтр("ru = 'гр.7 = гр.5 + гр.6.'");
		ФормулаРаспределять = НСтр("ru = 'гр.7 = (гр.5 + гр.6) * гр.4.'");
	КонецЕсли;
	
	Если НеРаспределятьЗатратыНаДоставку Тогда
		ТекстФормулы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'сразу, в периоде возникновения: %1'"), ФормулаНеРаспределять);
	Иначе
		ТекстФормулы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ежемесячно, по мере реализации товаров: %1'"), ФормулаРаспределять);
	КонецЕсли;

	Возврат ТекстФормулы;
	
КонецФункции

Процедура НайтиНастраиваемыеМакетыЗаголовков(Контекст, МакетКомпоновки)
	
	Если Не Контекст.ВыполнениеОтчета.Свойство("МакетыЗаголовков") Тогда
		
		СоответствиеМакетов = Новый Соответствие;
		МакетГруппировкиСчета = "";
		
		// Обходим макеты и параметры макетов для того, чтобы найти имена макетов, в которых содержится группировка по счету (из нее далее будем получать
		// ссылку на счет, для которого выводятся данные), а также группировка по счету и статье затрат (в нее будем выводить параметр "Примечание"
		// в виде символов "*"). Группировки идентифицируем по выражениям параметров.
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			
			Для Каждого ПараметрМакета Из Макет.Параметры Цикл
				Если ПараметрМакета.Выражение = "&Примечание" Тогда
					СоответствиеМакетов.Вставить(Макет.Имя, ПараметрМакета.Имя);
					Прервать;
				ИначеЕсли ВРег(ПараметрМакета.Выражение) = ВРег("БухгалтерскиеОтчеты.ПолучитьУИДСсылкиСтрокой(НаборДанных.Счет)") Тогда
					МакетГруппировкиСчета = Макет.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Контекст.ВыполнениеОтчета.Вставить("МакетыЗаголовков", СоответствиеМакетов);
		Контекст.ВыполнениеОтчета.Вставить("СчетаПримечаний", Новый Массив);
		Контекст.ВыполнениеОтчета.Вставить("МакетГруппировкиСчета", МакетГруппировкиСчета);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСчетПримечаний(Контекст, ЭлементРезультата, ПропуститьЭлемент)
	
	Если ЭлементРезультата.Макет = Контекст.ВыполнениеОтчета.МакетГруппировкиСчета 
		И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда
		
		УИДСчета = Новый УникальныйИдентификатор(ЭлементРезультата.ЗначенияПараметров[0].Значение);
		Контекст.ВыполнениеОтчета.СчетаПримечаний.Добавить(ПланыСчетов.Хозрасчетный.ПолучитьСсылку(УИДСчета));
		ПропуститьЭлемент = Истина;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли