#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
// 
// См. также ПолучитьНаборПоказателей
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Показатели = Новый Массив;
	Показатели.Добавить(1); // БУ
	Показатели.Добавить(2); // НУ
	Показатели.Добавить(4); // БУ-НУ
	
	Возврат Показатели;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	Показатели = Новый Массив;
	Показатели.Добавить("БУ");
	Показатели.Добавить("НУ");
	Показатели.Добавить("СверкаНУ");
	
	Возврат Показатели;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Варианты = ВариантыНастроек();
	Для Каждого Вариант из Варианты Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление",
		"ПереоценкаВалютныхСредств", "Переоценка валютных средств"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	ПоказыватьБУ = ПараметрыОтчета.СоставНабораПоказателей.Найти("БУ") <> Неопределено;
	ПоказыватьНУ = ПараметрыОтчета.СоставНабораПоказателей.Найти("НУ") <> Неопределено;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоказыватьБУ", ПоказыватьБУ);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоказыватьНУ", ПоказыватьНУ);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПереводСтроки", Символы.ПС);
	
	// До 2022 года порядок признания курсовых разниц в БУ и НУ совпадал для всех видов активов и обязательств, 
	// поэтому используется одна общая группировка.
	// С 2022 года в НУ действует специальный порядок признания курсовых разниц по требованиям и обязательствам.
	// При погашении задолженности в НУ признаются как положительные, так и отрицательные разницы.
	// При закрытии месяца в 2022 году в НУ по требованиям и обязательствам признаются только отрицательные разницы, 
	// с 2023 года по требованиям и обязательствам доходы и расходы от регламентной переоценки не признаются,
	// а могут признаваться отложенные доходы и расходы (определяется настройками налога на прибыль организации).
	// Порядок переоценки имущества в НУ (например, счета 52) остался таким же как в БУ.
	// Чтобы показать различные алгоритмы переоценки, с 2022 года используется несколько группировок.
	ГодОтчета = Год(ПараметрыОтчета.НачалоПериода);
	СпециальныйПорядокПереоценкиНУ = ПоказыватьНУ И ГодОтчета >= 2022 И ГодОтчета <= 2024;
	ПризнаватьПоложительныеРазницыКонецМесяцаНУ = СпециальныйПорядокПереоценкиНУ И ГодОтчета < 2023;
	УчитыватьОтложенныеРазницы = СпециальныйПорядокПереоценкиНУ
		И УчетДоходовРасходов.УчитыватьОтложенныеКурсовыеРазницы(ПараметрыОтчета.Организация);
	ОткладыватьОтрицательныеРазницы2022 = УчитыватьОтложенныеРазницы
		И ГодОтчета = 2022 И Месяц(ПараметрыОтчета.КонецПериода) = 12
		И УчетДоходовРасходов.ОтложитьОтрицательныеКурсовыеРазницы2022(ПараметрыОтчета.Организация);
	СворачиватьРазницы2022 = УчитыватьОтложенныеРазницы
		И ГодОтчета = 2022 И Месяц(ПараметрыОтчета.КонецПериода) = 12
		И Не ОткладыватьОтрицательныеРазницы2022;
	
	ОткладыватьПоложительныеРазницы = УчитыватьОтложенныеРазницы; 
	ОткладыватьОтрицательныеРазницы = УчитыватьОтложенныеРазницы И ГодОтчета >= 2023;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "УчитыватьОтложенныеРазницы", УчитыватьОтложенныеРазницы);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ОткладыватьПоложительныеРазницы", ОткладыватьПоложительныеРазницы);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ОткладыватьОтрицательныеРазницы", ОткладыватьОтрицательныеРазницы);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ОткладыватьОтрицательныеРазницы2022", ОткладыватьОтрицательныеРазницы2022);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "СворачиватьРазницы2022", СворачиватьРазницы2022);
	
	ИспользуемыеГруппировки = Новый Массив;
	
	Если ПоказыватьБУ И Не ПоказыватьНУ 
		Или Не СпециальныйПорядокПереоценкиНУ Тогда
		
		ИспользуемыеГруппировки.Добавить("Переоценка");
		
	Иначе
		
		ИспользуемыеГруппировки.Добавить("Имущество");
		Суффикс = ?(ПоказыватьБУ, "", "НУ");
		ИспользуемыеГруппировки.Добавить("ТребованияОбязательства" + Суффикс);
		Если УчитыватьОтложенныеРазницы Тогда
			ИспользуемыеГруппировки.Добавить("ТребованияОбязательстваКонецМесяцаОКР");
			ИспользуемыеГруппировки.Добавить("ПризнаниеОтложенныхРазниц");
			Если СворачиватьРазницы2022 Тогда
				ИспользуемыеГруппировки.Добавить("РасчетРасходовДляСвертки2022");
				ИспользуемыеГруппировки.Добавить("СверткаРасходовИОтложенныхДоходов2022");
			ИначеЕсли ОткладыватьОтрицательныеРазницы2022 Тогда
				ИспользуемыеГруппировки.Добавить("ОтложенныеРасходы2022");
				ИспользуемыеГруппировки.Добавить("ИтогиОтложенныеРасходы2022");
			КонецЕсли;
			Если СворачиватьРазницы2022 Или ОткладыватьОтрицательныеРазницы2022 Тогда
				ИспользуемыеГруппировки.Добавить("ИтогиОтложенныеРазницы2022");
				ИспользуемыеГруппировки.Добавить("ИтогиПризнанныеРазницы2022");
			Иначе
				ИспользуемыеГруппировки.Добавить("ИтогиОтложенныеРазницы");
				ИспользуемыеГруппировки.Добавить("ИтогиПризнанныеРазницы");
			КонецЕсли;
		Иначе
			Если ПризнаватьПоложительныеРазницыКонецМесяцаНУ Тогда
				ИспользуемыеГруппировки.Добавить("ТребованияОбязательстваКонецМесяца" + Суффикс);
			ИначеЕсли ПоказыватьБУ Тогда
				ИспользуемыеГруппировки.Добавить("ТребованияОбязательстваКонецМесяца2023");
			КонецЕсли;
		КонецЕсли;
		ИспользуемыеГруппировки.Добавить("Итоги");
		
	КонецЕсли;
	
	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;
	Для каждого ИмяГруппировки Из ИспользуемыеГруппировки Цикл
		Группировка = БухгалтерскиеОтчеты.НайтиПоИмени(СтруктураОтчета, ИмяГруппировки);
		Если Группировка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтключитьИспользованиеПолей(Группировка, ПоказыватьБУ, ПоказыватьНУ);
		Группировка.Использование = Истина;
		Если ПоказыватьБУ 
			И (ИмяГруппировки = "ПризнаниеОтложенныхРазниц" 
			Или ИмяГруппировки = "ИтогиОтложенныеРазницы" 
			Или ИмяГруппировки = "ИтогиПризнанныеРазницы"
			Или ИмяГруппировки = "ИтогиОтложенныеРазницы2022" 
			Или ИмяГруппировки = "ИтогиПризнанныеРазницы2022"
			Или ИмяГруппировки = "ОтложенныеРасходы2022"
			Или ИмяГруппировки = "ИтогиОтложенныеРасходы2022"
			Или ИмяГруппировки = "РасчетРасходовДляСвертки2022"
			Или ИмяГруппировки = "СверткаРасходовИОтложенныхДоходов2022") Тогда
			Заголовок = Группировка.ПараметрыВывода.Элементы.Найти("Заголовок");
			Заголовок.Значение = СтрШаблон("%1 (%2)", Заголовок.Значение, НСтр("ru='налоговый учет'"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеПолей(Группировка, ПоказыватьБУ, ПоказыватьНУ)
	
	Если ПоказыватьБУ И ПоказыватьНУ Тогда
		Возврат;
	КонецЕсли;
	
	ОтключаемыеНаборы = Новый Массив;
	Если ПоказыватьБУ Тогда
		ОтключаемыеНаборы.Добавить("НУ");
	Иначе
		ОтключаемыеНаборы.Добавить("БУ");
	КонецЕсли;
	ОтключаемыеНаборы.Добавить("СверкаНУ");
	
	ОтключаемыеПоля = Новый Массив;
	Для каждого ИмяНабора Из ОтключаемыеНаборы Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтключаемыеПоля, ПоляНабора(ИмяНабора));
	КонецЦикла;
	
	ОтключитьПоля(Группировка.Выбор, ОтключаемыеПоля);
	
КонецПроцедуры

Процедура ОтключитьПоля(Родитель, ОтключаемыеПоля)
	
	Если Не ЗначениеЗаполнено(ОтключаемыеПоля) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из Родитель.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И ОтключаемыеПоля.Найти(Элемент.Поле) <> Неопределено Тогда
			Элемент.Использование = Ложь;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ОтключитьПоля(Элемент, ОтключаемыеПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляНабора(Набор)
	
	ИменаПолей = Новый Массив;
	
	Если Набор = "БУ" Тогда
		ИменаПолей.Добавить("Показатели.БУ");
		ИменаПолей.Добавить("ОстатокВРублях");
		ИменаПолей.Добавить("ОстатокВРублях");
		ИменаПолей.Добавить("ОстатокПоКурсуПереоценки");
		ИменаПолей.Добавить("СуммаПереоценки");
		ИменаПолей.Добавить("ПоложительнаяРазница");
		ИменаПолей.Добавить("ОтрицательнаяРазница");
		ИменаПолей.Добавить("ОтложенныйДоходБУ");
		ИменаПолей.Добавить("ОтложенныйРасходБУ");
		ИменаПолей.Добавить("ПустаяСтрока.БУ");
	ИначеЕсли Набор = "НУ" Тогда
		ИменаПолей.Добавить("Показатели.НУ");
		ИменаПолей.Добавить("ОстатокВРубляхНУ");
		ИменаПолей.Добавить("ОстатокПоКурсуПереоценкиНУ");
		ИменаПолей.Добавить("СуммаПереоценкиНУ");
		ИменаПолей.Добавить("ПоложительнаяРазницаНУ");
		ИменаПолей.Добавить("ОтрицательнаяРазницаНУ");
		ИменаПолей.Добавить("ЗадолженностьНУ");
		ИменаПолей.Добавить("ПогашениеЗадолженностиНУ");
		ИменаПолей.Добавить("ПогашениеПоКурсуОстаткаНУ");
		ИменаПолей.Добавить("ОтложенныйДоходНУ");
		ИменаПолей.Добавить("ОтложенныйРасходНУ");
		ИменаПолей.Добавить("ПустаяСтрока.НУ");
	ИначеЕсли Набор = "СверкаНУ" Тогда
		ИменаПолей.Добавить("Показатели.СверкаНУ");
		ИменаПолей.Добавить("ОстатокВРубляхСверкаНУ");
		ИменаПолей.Добавить("ОстатокПоКурсуПереоценкиСверкаНУ");
		ИменаПолей.Добавить("СуммаПереоценкиСверкаНУ");
		ИменаПолей.Добавить("ПоложительнаяРазницаСверкаНУ");
		ИменаПолей.Добавить("ОтрицательнаяРазницаСверкаНУ");
		ИменаПолей.Добавить("ОтложенныйДоходСверкаНУ");
		ИменаПолей.Добавить("ОтложенныйРасходСверкаНУ");
		ИменаПолей.Добавить("ПустаяСтрока.СверкаНУ");
	КонецЕсли;
	
	Поля = Новый Массив;
	
	Для каждого ИмяПоля Из ИменаПолей Цикл
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Поля.Добавить(Поле);
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Манифест.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Манифест.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Манифест.Вставить("ИспользоватьВнешниеНаборыДанных",    Ложь);
	Манифест.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Манифест.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Манифест.Вставить("ИспользоватьНалоговыйПериод",        Ложь);
	Манифест.Вставить("ИспользоватьНастройкуПоказателей",   Истина);
	
	СправкиРасчеты.УстановитьОтчетИспользуетНаборыСуммовыхПоказателей(Манифест);
	
	Возврат Манифест;
	
КонецФункции

#КонецОбласти

#КонецЕсли
