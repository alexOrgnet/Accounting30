#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",           Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",               Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
						
	Возврат Результат;
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ТекстЗаголовка =  НСтр("ru = 'Отчет по банковским операциям 
							|%1'");
	Заголовок = СтрШаблон(ТекстЗаголовка, 
				БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));

	Возврат Заголовок;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
		
	ВедетсяУчетПоВалютам = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВедетсяУчетПоВалютам", ВедетсяУчетПоВалютам);
		
	Таблица                      = Неопределено;
		
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
		
	Если Таблица <> Неопределено Тогда
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
				
		ПодготовленныеГруппировки = ДобавитьОбязательныеГруппировки(Группировка, ПараметрыОтчета);
		
		РодительскаяГруппировкаПоступление = ПодготовленныеГруппировки.Поступление;
		РодительскаяГруппировкаСписание = ПодготовленныеГруппировки.Списание;
		
		МассивГруппировок = Новый Массив;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			
			Если Не ПолеВыбраннойГруппировки.Использование Или
				ПолеВыбраннойГруппировки.Поле = "ВидОперации" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивГруппировок.Добавить(ПолеВыбраннойГруппировки.Представление);
			
			СтрокаГруппировки = ДобавитьГруппировку(РодительскаяГруппировкаПоступление, ПолеВыбраннойГруппировки);
			РодительскаяГруппировкаПоступление = СтрокаГруппировки;
			
			СтрокаГруппировки = ДобавитьГруппировку(РодительскаяГруппировкаСписание, ПолеВыбраннойГруппировки);
			РодительскаяГруппировкаСписание = СтрокаГруппировки;
			
		КонецЦикла;
		
		// Заголовок сделаем минимум на 2 строки
		Если МассивГруппировок.Количество() = 1 Тогда
			МассивГруппировок.Добавить(Символы.ПС);
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Группировка", СтрСоединить(МассивГруппировок, Символы.ПС));
		
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		
КонецПроцедуры

// Заполняет параметры расшифровки отчета
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//	ПараметрыРасшифровки - Структура - Коллеккция параметров расшифроки, которую требуется заполнить. 
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
		
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОтчета.Объект;
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	
	ТекущиеРодителиРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей();
	
	ТекущаяГруппировка = Неопределено;
		
	// Нас интересует самый первый родитель
	Если ТекущиеРодителиРасшифровки.Количество() > 0 Тогда
		ПоляГруппировки = ТекущиеРодителиРасшифровки[0].ПолучитьПоля();
		Если ПоляГруппировки.Количество() > 0 Тогда
			ТекущаяГруппировка =  ПоляГруппировки[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяГруппировка = Неопределено 
		Или ТекущаяГруппировка.Поле = "ВидОперации" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		
		Если Не Элемент.Использование 
			Или СтрНайти(Элемент.Представление, "###ОтборПоОрганизации###") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОтбора = ПользовательскиеОтборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		
	КонецЦикла;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация"     , ОтчетОбъект.Организация);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	ЭтоОстаткиДенежныхСредств = Ложь;
	
 	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			
			Если Отбор.Значение = NULL Тогда
				Продолжить;
			КонецЕсли;
						
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
					
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДвижения")
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("ВидДвижения", Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДвиженияДенежныхСредств") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательПлательщик") 
				И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ДополнительныеСвойства.Вставить("ПолучательПлательщик", Отбор.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;  
	
	Если ТекущаяГруппировка.Поле = "ДокументОплаты" Тогда
		Если ТекущаяГруппировка.Значение <> NULL Тогда
			ПараметрыРасшифровки.Вставить("Значение", ТекущаяГруппировка.Значение);
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		КонецЕсли;  
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода",     ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода",      ОтчетОбъект.КонецПериода);
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ОтчетОбъект.ВыводитьЗаголовок);
		ДополнительныеСвойства.Вставить("ВыводитьПодвал",    ОтчетОбъект.ВыводитьПодвал);
		ДополнительныеСвойства.Вставить("МакетОформления",   ОтчетОбъект.МакетОформления);
		
		СписокПунктовМеню = Новый СписокЗначений;
		
		НазваниеПункта = НСтр("ru = 'Отчет по банковским операциям'");
		СписокПунктовМеню.Добавить("ОтчетПоБанковскимОперациям", НазваниеПункта);
						
		НастройкиРасшифровки = Новый Структура("ОтчетПоБанковскимОперациям", ПользовательскиеНастройки);
			
		ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;

	Возврат НаборПоказателей;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять.
// Значения параметров используются при формировании отчета.
//
// Возвращаемое значение:
//   Структура - структура настроек с неинициализированными значениями.
//
Функция НастройкиОтчета() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("КлючТекущегоВарианта", "");
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = НастройкиОтчета();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
		
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в настройки СКД все поля группировки из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Группировка - ТабличнаяЧасть - Таблица Группировки отчета.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если (ЭлементСтруктуры.Имя <> "Группировка"
		 	 И ЭлементСтруктуры.Имя <> "Таблица")
			 Или (ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных")
			 И ТипЗнч(ЭлементСтруктуры) <> Тип("ТаблицаКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Строки.КОличество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПерваяГруппировка = Истина;

		// Заполнить все поля группировки.
		Группировка = ЭлементСтруктуры.Строки[0];
		Родитель = ЭлементСтруктуры;
		Индекс = Родитель.Строки.Индекс(Группировка);
		Родитель.Строки.Удалить(Группировка);
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			
			Если Не ПолеВыбраннойГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;

			Если ПерваяГруппировка Тогда
				Группировка = Родитель.Строки.Вставить(Индекс, Тип("ГруппировкаКомпоновкиДанных"));
				ПерваяГруппировка = Ложь;
			Иначе
				Группировка = Группировка.Строки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			
			ПараметрыВыводаГруппировки = Новый Структура;
			ПараметрыВыводаГруппировки.Вставить("Поле", ПолеВыбраннойГруппировки.Поле);
			ПараметрыВыводаГруппировки.Вставить("ТипГруппировки", 0);
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПараметрыВыводаГруппировки, Группировка);
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтборВГруппировке(СтрокаГруппировки, ПараметрыОтбора)
	
	Если ПараметрыОтбора.Свойство("Родитель") И ПараметрыОтбора.Родитель <> Неопределено Тогда
		НовыйЭлемент = ПараметрыОтбора.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		НовыйЭлемент = СтрокаГруппировки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	НовыйЭлемент.Использование  = Истина;
	НовыйЭлемент.ЛевоеЗначение  = ПараметрыОтбора.ПолеОтбора;
	НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = ПараметрыОтбора.ЗначениеОтбора;
	
КонецПроцедуры

Процедура ДобавитьОформлениеГруппировке(СтрокаГруппировки)
	
	ЭлементОформления = СтрокаГруппировки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
КонецПроцедуры

Функция ДобавитьОбязательныеГруппировки(Группировка, ПараметрыОтчета)
	
	СтрокаГруппировкиСреднийОстаток = ДобавитьИтоговуюГруппировку(Группировка, 1, "СреднийОстаток", "СреднийОстаток");
		
	СтрокаГруппировкиПоступление = ДобавитьИтоговуюГруппировку(Группировка, 2, "ВидОперации");
	
	СтрокаГруппировкиСписание = ДобавитьИтоговуюГруппировку(Группировка, 3, "ВидОперации");
			
	ПодготовленныеГруппировки = Новый Структура;
	ПодготовленныеГруппировки.Вставить("Поступление", СтрокаГруппировкиПоступление);
	ПодготовленныеГруппировки.Вставить("Списание", СтрокаГруппировкиСписание);
	
	Возврат ПодготовленныеГруппировки;
	
КонецФункции

Функция ДобавитьГруппировку(Группировка, ПолеГруппировки, ИмяГруппировки = "")
	
	Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		СтрокаГруппировки = Группировка.Добавить();
	Иначе
		СтрокаГруппировки = Группировка.Структура.Добавить();
	КонецЕсли;
	ПараметрыВыводаГруппировки = Новый Структура;
	ПараметрыВыводаГруппировки.Вставить("Поле", ПолеГруппировки.Поле);
	ПараметрыВыводаГруппировки.Вставить("ТипГруппировки", ПолеГруппировки.ТипГруппировки);
	СтрокаГруппировки.Имя = ИмяГруппировки;
	БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПараметрыВыводаГруппировки, СтрокаГруппировки);
	
	Возврат СтрокаГруппировки;
	
КонецФункции

Функция ДобавитьИтоговуюГруппировку(Группировка, Порядок, ПолеГруппировки, ИмяГруппировки = "")
	
	ПараметрыПоляГруппировки = Новый Структура;
	ПараметрыПоляГруппировки.Вставить("Поле", ПолеГруппировки);
	ПараметрыПоляГруппировки.Вставить("ТипГруппировки", 0);
	
	СтрокаГруппировки = ДобавитьГруппировку(Группировка, ПараметрыПоляГруппировки, ИмяГруппировки);
	
	ДобавитьОформлениеГруппировке(СтрокаГруппировки);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеОтбора", Новый ПолеКомпоновкиДанных("Порядок"));
	ПараметрыОтбора.Вставить("ЗначениеОтбора", Порядок);
	ДобавитьОтборВГруппировке(СтрокаГруппировки, ПараметрыОтбора);
	
	ОтключитьВыводОтбора(СтрокаГруппировки);
	
	Возврат СтрокаГруппировки;
	
КонецФункции

Процедура ОтключитьВыводОтбора(СтрокаГруппировки)
	
	ПараметрВыводитьОтбор = СтрокаГруппировки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	ПараметрВыводитьОтбор.Использование = Истина;
	ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли