#Область ОписаниеПеременных

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьТекущийВариант("РасходыПоСтатьямЗатрат");
	
	Счета                       = Параметры.Счета;
	// Для совместимости с ранее сохраненными версиями декларации по налогу на прибыль.
	Если Параметры.Свойство("Счет") И ЗначениеЗаполнено(Параметры.Счет) Тогда
		Счета = Параметры.Счет;
	КонецЕсли;
	
	НаименованиеПоказателя            = Параметры.НаименованиеПоказателя;
	НаименованиеСтроки                = Параметры.НаименованиеСтроки;
	ЗначениеОтбора1                   = Параметры.ЗначениеОтбора1;
	ЗначениеОтбора2                   = Параметры.ЗначениеОтбора2;
	ПоКорСчетам                       = Параметры.ПоКорСчетам;
	
	ИдРасшифровки = "";
	Параметры.Свойство("ИдРасшифровки", ИдРасшифровки);
	
	УстановитьЗаголовкиПолейГруппировок(ИдРасшифровки, Счета);
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ЗначениеЗаполнено(Счета) Тогда
		Отчет.Счета = Счета;
	КонецЕсли;
	
	СформироватьПриОткрытии = Параметры.СформироватьПриОткрытии;
	Если СформироватьПриОткрытии И Не Отчет.РежимРасшифровки Тогда
		// Отключаем стандартное формирование отчета.
		// Формирование отчета запустится в событии ПриОткрытии.
		Параметры.СформироватьПриОткрытии = Ложь;
	КонецЕсли;
	
	ЗаголовокОтчета = "";
	Если ЗначениеЗаполнено(Параметры.ЗаголовокОтчета) Тогда
		ЗаголовокОтчета = Параметры.ЗаголовокОтчета;
	ИначеЕсли Параметры.РежимРасшифровки Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
		ЭлементПорядка = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СуммаРасшифровки");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		
		Если ЗначениеЗаполнено(ЗначениеОтбора2) Тогда
			ЗаголовокОтчета = РасходыПоСтатьямЗатрат.ПредставлениеГруппировки(ЗначениеОтбора2);
		Иначе
			ЗаголовокОтчета = РасходыПоСтатьямЗатрат.ПредставлениеГруппировки(ЗначениеОтбора1);
		КонецЕсли;
	Иначе
		ЗаголовокОтчета = НСтр("ru='Расходы по статьям затрат'");
	КонецЕсли;
	
	Если ЭтоРасшифровкаНормируемыхРасходов Тогда
		Элементы.ГруппаОтборы.Видимость = Ложь;
		Элементы.ГруппаСортировка.Видимость = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ИнформационнаяБазаФайловая Или СформироватьПриОткрытии Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	КонецЕсли;
		
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если Не ИспользуютсяСтандартныеНастройки Тогда
		БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	КонецЕсли;
	
	ДопСвойства = Настройки.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("НачалоПериода") И ДопСвойства.Свойство("КонецПериода") Тогда
		Отчет.НачалоПериода = НачалоДня(ДопСвойства.НачалоПериода);
		Отчет.КонецПериода  = КонецДня(ДопСвойства.КонецПериода);
	КонецЕсли;
	
	Если ДопСвойства.Свойство("Счета") Тогда
		Отчет.Счета = ДопСвойства.Счета;
	КонецЕсли;
	
	Если ДопСвойства.Свойство("Организация") Тогда
		Отчет.Организация = ДопСвойства.Организация;
	КонецЕсли;
	
	Если ДопСвойства.Свойство("ВключатьОбособленныеПодразделения") Тогда
		Отчет.ВключатьОбособленныеПодразделения = ДопСвойства.ВключатьОбособленныеПодразделения;
	Иначе
		// Если явно не передано, что включены обособленные подразделения, то принудительно устанавливаем
		// значение Ложь, в противном случае значение используется из ранее сохраненных настроек.
		Отчет.ВключатьОбособленныеПодразделения = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРезультата

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(
		ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийГруппыОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийГруппыСортировка

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовкиПолейГруппировок(ИдРасшифровки, Счета)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	Если ЗначениеЗаполнено(СхемаКомпоновкиДанных) Тогда
		Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
		
	Иначе
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
		
	КонецЕсли;
		
	Если Не Отчет.РежимРасшифровки Или ИдРасшифровки = "РасходыПоСтатьямЗатрат" Тогда
		
		ПолеГруппировки1 = Схема.НаборыДанных.РасходыПоСтатьямЗатрат.Поля.Найти("ПолеГруппировки1");
		ПолеГруппировки2 = Схема.НаборыДанных.РасходыПоСтатьямЗатрат.Поля.Найти("ПолеГруппировки2");
		
		Если ПолеГруппировки1 <> Неопределено И ПолеГруппировки2 <> Неопределено Тогда
			
			Если Счета = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу
				Или Счета = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы
				Или ИдРасшифровки = "РасходыПоСтатьямЗатрат" Тогда
			
				ПолеГруппировки1.Заголовок = НСтр("ru='Вид расходов для налогового учета затрат'");
				ПолеГруппировки2.Заголовок = НСтр("ru='Статья затрат'");
				
			ИначеЕсли Счета = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
			
				ПолеГруппировки1.Заголовок = НСтр("ru='Вид прочих доходов и расходов'");
				ПолеГруппировки2.Заголовок = НСтр("ru='Кор. аналитика'");
				
			ИначеЕсли Счета = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж Тогда
			
				ПолеГруппировки1.Заголовок = НСтр("ru='Номенклатурная группа'");
				ПолеГруппировки2.Заголовок = НСтр("ru='Кор. аналитика'");

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	ОтчетОбъект.СхемаКомпоновкиДанных = Схема;
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьТекстЗаголовка(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(Форма.ЗаголовокОтчета);
	ЧастиЗаголовка.Добавить(БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		Форма.Отчет.НачалоПериода, Форма.Отчет.КонецПериода));
	
	Форма.Заголовок = СтрСоединить(ЧастиЗаголовка);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	Если Не ЗначениеЗаполнено(НаименованиеПоказателя) Тогда
		ТекстВыводимыеДанные = РасходыПоСтатьямЗатрат.ПредставлениеГруппировки(ЗначениеОтбора1);
	Иначе
		ТекстВыводимыеДанные = СтрШаблон("%1 / %2", НаименованиеПоказателя, НаименованиеСтроки);
		ТекстВыводимыеДанные = СтрШаблон("%1 / %2", 
			ТекстВыводимыеДанные, 
			РасходыПоСтатьямЗатрат.ПредставлениеГруппировки(ЗначениеОтбора1));
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , Отчет.Организация);
	ПараметрыОтчета.Вставить("Счета"                             , Отчет.Счета);
	ПараметрыОтчета.Вставить("ЗаголовокОтчета"                   , ЗаголовокОтчета);
	ПараметрыОтчета.Вставить("ТекстВыводимыеДанные"              , ТекстВыводимыеДанные);
	ПараметрыОтчета.Вставить("НаименованиеПоказателя"            , НаименованиеПоказателя);
	ПараметрыОтчета.Вставить("НаименованиеСтроки"                , НаименованиеСтроки);
	ПараметрыОтчета.Вставить("НачалоПериода"                     , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                      , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения" , Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                  , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ПоКорСчетам"                       , ПоКорСчетам);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                 , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                    , ВыводитьПодвал);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                 , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                   , МакетОформления);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"             , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"         , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"               , БухгалтерскиеОтчеты.ИмяОтчета(ЭтотОбъект));
	ПараметрыОтчета.Вставить("ЭтоРасшифровкаНормируемыхРасходов" , ЭтоРасшифровкаНормируемыхРасходов);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение");
	СписокПолей.Добавить("ПолеГруппировки1");
	СписокПолей.Добавить("ПолеГруппировки2");
	СписокПолей.Добавить("ПолеГруппировкиРасшифровки");
	СписокПолей.Добавить("ДокументТип");
	СписокПолей.Добавить("КорСчетСсылка");
	СписокПолей.Добавить("КорСчетНаименование");
	СписокПолей.Добавить("КорСчетРасшифровки");
	СписокПолей.Добавить("ВидПрочихДоходовИРасходов");
	СписокПолей.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
	СписокПолей.Добавить("СтатьяЗатрат");
	СписокПолей.Добавить("ВидРасходовНУ");
	СписокПолей.Добавить("Содержание");
	
	Если Не Отчет.РежимРасшифровки Тогда
		СписокПолей.Добавить("ДатаДокумента");
		СписокПолей.Добавить("НомерДокумента");
		СписокПолей.Добавить("ДокументРасхода");
		СписокПолей.Добавить("ДоговорКонтрагента");
		СписокПолей.Добавить("СуммаРасшифровки");
		СписокПолей.Добавить("НоменклатурнаяГруппаРасшифровки");
		СписокПолей.Добавить("ВидПрочихДоходовИРасходовРасшифровки");
		СписокПолей.Добавить("ВидРасходовНУРасшифровки");
		СписокПолей.Добавить("Контрагент");
		СписокПолей.Добавить("РегистрацияВНалоговомОрганеРасшифровки");
		СписокПолей.Добавить("СтатьяЗатратРасшифровки");
		СписокПолей.Добавить("ПрочиеДоходыИРасходыРасшифровки");
		СписокПолей.Добавить("НоменклатураРасшифровки");
		
	Иначе
		СписокПолей.Добавить("Сумма");
		
	КонецЕсли;
		
	Если Режим = "Группировка" Или Режим = "Выбор" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
	КонецЕсли;
		
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;  
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(АдресХранилища)
	
	РезультатВыполнения  = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат            = РезультатВыполнения.Результат;
	ДанныеРасшифровки    = РезультатВыполнения.ДанныеРасшифровки;
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.СформироватьОтчет.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Отчет.Организация);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		ОткрытьНастройки();
		Возврат;
	Иначе
		СкрытьНастройки();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности.
	Если Отчет.РежимРасшифровки Тогда
		ИДОперации = "РасшифровкаОтчетаРасходыПоСтатьямЗатрат";
	Иначе
		ИДОперации = "ФормированиеОтчетаРасходыПоСтатьямЗатрат";
	КонецЕсли;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(ИДОперации, Ложь, Ложь);
	// СтандартныеПодсистемы.ОценкаПроизводительности.
	
	ДлительнаяОперация = СформироватьОтчетНаСервере();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
		
		СкрытьНастройки();
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(РезультатФормирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатФормирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФормирования.Статус <> "Ошибка" Тогда
		ЗафиксироватьДлительностьКлючевойОперации(Ложь);
		ЗагрузитьПодготовленныеДанныеНаСервере(РезультатФормирования.АдресРезультата);
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации(Истина);
		ПоказатьОшибкиФормирования(РезультатФормирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации(НаличиеОшибки)

	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера, НаличиеОшибки);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормирования(ДлительнаяОперация)
	
	ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	
	СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Текст = СообщениеОбОшибке;
	ОтображениеСостояния.Картинка = Новый Картинка;
	
КонецПроцедуры

 &НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчеты.Расходы по статьям затрат'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Отчеты.РасходыПоСтатьямЗатрат,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти