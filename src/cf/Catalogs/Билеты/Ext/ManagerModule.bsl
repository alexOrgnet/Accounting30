#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает суммы билетов как итог операций с данными билетами
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - отбор билетов по организации
//  ПериодНачало	 - Дата - отбор билетов по периоду отправления
//  ПериодОкончание	 - Дата - отбор билетов по периоду отправления и дате покупки (если ВыбиратьДанныеОплаты = Истина, 
//  					то на указанную дату определяются последние документы оплаты по билетам)
//  Билет			 - СправочникСсылка.Организации - указывается билет, сумму которого необходимо получить. Если параметр указан, то период игнорируется 
//  Сотрудник		 - СправочникСсылка.ФизическиеЛица - сотрудник, по которому необходимо получить суммы билетов, по которым тот не отчитался
//  ТекущийДокумент	 - ДокументСсылка - документ, из которого вызвана функция, он не будет учтен в общем итоге операций
//  ВыбиратьДанныеОплаты - Булево - если Истина, то в итоговую таблицу добавляются колонки НомерДокументаОплаты и ДатаДокументаОплаты
// 
// Возвращаемое значение:
//   - ТаблицаЗначений с колонками
//		- Билет
//		- Сумма
//		- СуммаНДС
//		- СтавкаНДС
//		- НомерДокументаОплаты (опционально, если ВыбиратьДанныеОплаты = Истина)
//		- ДатаДокументаОплаты (опционально, если ВыбиратьДанныеОплаты = Истина)
//
Функция СуммыБилетов(Организация, ПериодНачало = Неопределено, ПериодОкончание = Неопределено, Билет = Неопределено, 
	 Сотрудник = Неопределено, ТекущийДокумент = Неопределено, ВыбиратьДанныеОплаты = Ложь) Экспорт 
	
	// Запрос ниже модифицируется с помощью СхемаЗапроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Билеты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Билеты
	|ИЗ
	|	Справочник.Билеты КАК Билеты
	|ГДЕ
	|	Билеты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииСБилетами.Билет КАК Билет,
	|	СУММА(ОперацииСБилетами.Сумма) КАК Сумма,
	|	СУММА(ОперацииСБилетами.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(ОперацииСБилетами.СтавкаНДС) КАК СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацияСБилетом.Билет КАК Билет,
	|		ВЫБОР
	|			КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -ОперацияСБилетом.Сумма
	|			ИНАЧЕ ОперацияСБилетом.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -ОперацияСБилетом.СуммаНДС
	|			ИНАЧЕ ОперацияСБилетом.СуммаНДС
	|		КОНЕЦ КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Покупка)
	|					ИЛИ ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка)
	|				ТОГДА ОперацияСБилетом.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|		КОНЕЦ КАК СтавкаНДС,
	|		ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат)
	|			ИЛИ ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен) КАК Заменен
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК ВТ_Билеты
	|			ПО ОперацияСБилетом.Билет = ВТ_Билеты.Ссылка
	|	ГДЕ
	|		ОперацияСБилетом.Организация = &Организация
	|		И ОперацияСБилетом.Проведен
	|		И ОперацияСБилетом.Ссылка <> &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперацияСБилетом.БилетЗамена,
	|		ОперацияСБилетом.Сумма,
	|		ОперацияСБилетом.СуммаНДС,
	|		ОперацияСБилетом.СтавкаНДС,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК ВТ_Билеты
	|			ПО ОперацияСБилетом.БилетЗамена = ВТ_Билеты.Ссылка
	|	ГДЕ
	|		ОперацияСБилетом.Организация = &Организация
	|		И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|		И ОперацияСБилетом.Проведен
	|		И ОперацияСБилетом.Ссылка <> &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетБилеты.Билет,
	|		-АвансовыйОтчетБилеты.Сумма,
	|		-АвансовыйОтчетБилеты.СуммаНДС,
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.Билеты КАК АвансовыйОтчетБилеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК ВТ_Билеты
	|			ПО АвансовыйОтчетБилеты.Билет = ВТ_Билеты.Ссылка
	|	ГДЕ
	|		АвансовыйОтчетБилеты.Ссылка.Организация = &Организация
	|		И АвансовыйОтчетБилеты.Ссылка.Проведен
	|		И АвансовыйОтчетБилеты.Ссылка <> &ТекущийДокумент) КАК ОперацииСБилетами
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииСБилетами.Билет
	|
	|ИМЕЮЩИЕ
	|	НЕ ЕСТЬNULL(МАКСИМУМ(ОперацииСБилетами.Заменен), ЛОЖЬ) И
	|	СУММА(ОперацииСБилетами.Сумма) > 0";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	УсловиеГДЕТаблицыБилетов = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	// При отборе по конкретному билету, не используем отбор по периоду
	Если ЗначениеЗаполнено(Билет) Тогда
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.Ссылка = &Билет"));
		Запрос.УстановитьПараметр("Билет", Билет);	
	ИначеЕсли ПериодНачало <> Неопределено И ПериодОкончание <> Неопределено Тогда
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.ДатаОтправления МЕЖДУ &ПериодНачало И &ПериодОкончание"));
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.ДатаПокупки <= &ПериодОкончание"));
		Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
		Запрос.УстановитьПараметр("ПериодОкончание", ПериодОкончание);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.Сотрудник = &Сотрудник"));
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;	
	
	// Если данные по оплате билетов не требуются, то возвращаем таблицу с результатом...
	Если Не ВыбиратьДанныеОплаты Тогда
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Возврат Запрос.Выполнить().Выгрузить();	
	КонецЕсли;	
	
	// ... В ином случае результат помещается во временную таблицу СуммыБилетов - ниже она используется 
	// для получения итогового результата
	СхемаЗапроса.ПакетЗапросов[1].ТаблицаДляПомещения = "СуммыБилетов";
	
	// Далее пытаемся найти последний документ оплаты по каждому билету. Для этого требуется несколько шагов:
	// 1. Находим все операции по каждому билету - это документы расчетов на счетах расчетов с поставщиками.
	// 2. Находим документы оплаты из проводок вида:
	//    2.1. ДТ [счет расчетов] / [операция по билету из п.1] - КТ [счет банк/касса]
	//	       Оплата по билету. Регистратор для такой проводки (списание ДС или РКО) - искомый документ оплаты.
	//    2.2. ДТ [счет расчетов] / [операция по билету из п.1] - КТ [счет авансов]
	//	       Зачет аванса в счет покупки билета. Документ расчетов по Кт (списание ДС или РКО) - искомый документ оплаты.
	//    Прочие варианты проводок (зачет аванса по предшествующему возврату, оплата в виде корректировки долга, бух операции и т.п.)
	//    считаем ненадежными.
	// 3. Определяем последний по времени документ оплаты по каждому билету, а также выбираем реквизиты документа оплаты.
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса() + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
	"ВЫБРАТЬ
	|	Билеты.Ссылка КАК Билет,
	|	ОперацияСБилетом.Ссылка КАК ДокументРасчетов
	|ПОМЕСТИТЬ ДокументыРасчетовПоБилетам
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК Билеты
	|		ПО ОперацияСБилетом.Билет = Билеты.Ссылка
	|ГДЕ
	|	ОперацияСБилетом.Проведен
	|	И ОперацияСБилетом.Организация = &Организация
	|	И ОперацияСБилетом.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Билеты.Ссылка,
	|	ОперацияСБилетом.Ссылка
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК Билеты
	|		ПО ОперацияСБилетом.БилетЗамена = Билеты.Ссылка
	|ГДЕ
	|	ОперацияСБилетом.Проведен
	|	И ОперацияСБилетом.Организация = &Организация
	|	И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Обмен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыРасчетовПоБилетам.ДокументРасчетов КАК ДокументРасчетов
	|ИЗ
	|	ДокументыРасчетовПоБилетам КАК ДокументыРасчетовПоБилетам";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// При отложенном проведении требуется актуализировать расчеты для корректного поиска документа оплаты.
	// В процедуру актуализации передаем массив документов расчетов (операции с выбранными билетами).	
	ДокументыРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРасчетов");
	
	ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.Документ = ДокументыРасчетов;
	
	ДатаОкончания = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если ЗначениеЗаполнено(ПериодОкончание) Тогда
		ДатаОкончания = ПериодОкончание;
	ИначеЕсли ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ДатаОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокумент, "Дата");
	КонецЕсли;	
	ДатаОкончания = Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая);
	
	ПараметрыРасчета.ДатаОкончания = ДатаОкончания.Значение;
	
	// Ошибку актуализации специально не обрабатываем - в этом случае в таблице билетов 
	// не будут заполнены реквизиты документов оплаты.
	УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ДокументРасчетов,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВсеДокументыОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			Регистратор,
	|			СчетДт В (&СчетаРасчетов),
	|			&СубконтоДокументРасчетов,
	|			СчетКт В (&СчетаБанкКасса),
	|			,
	|			СубконтоДт1 В
	|				(ВЫБРАТЬ
	|					ДокументыРасчетовПоБилетам.ДокументРасчетов
	|				ИЗ
	|					ДокументыРасчетовПоБилетам)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ИЛИ ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			,
	|			СчетДт В (&СчетаРасчетов),
	|			&СубконтоДокументРасчетов,
	|			СчетКт В (&СчетаАвансов),
	|			&СубконтоДокументРасчетов,
	|			СубконтоДт1 В
	|				(ВЫБРАТЬ
	|					ДокументыРасчетовПоБилетам.ДокументРасчетов
	|				ИЗ
	|					ДокументыРасчетовПоБилетам)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт1 ССЫЛКА Документ.РасходныйКассовыйОрдер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыРасчетовПоБилетам.Билет КАК Билет,
	|	ВсеДокументыОплаты.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ОплатаБилетов
	|ИЗ
	|	ДокументыРасчетовПоБилетам КАК ДокументыРасчетовПоБилетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДокументыОплаты КАК ВсеДокументыОплаты
	|		ПО ДокументыРасчетовПоБилетам.ДокументРасчетов = ВсеДокументыОплаты.ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаБилетов.Билет КАК Билет,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Номер = """"
	|			ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|	КОНЕЦ КАК ДатаДокументаОплаты
	|ПОМЕСТИТЬ РеквизитыОплатБилетов
	|ИЗ
	|	ОплатаБилетов КАК ОплатаБилетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеПервичныхДокументов.Организация = &Организация
	|			И ОплатаБилетов.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыОплатБилетов.Билет КАК Билет,
	|	МАКСИМУМ(РеквизитыОплатБилетов.ДатаДокументаОплаты) КАК ДатаДокументаОплаты
	|ПОМЕСТИТЬ ПоследниеОплатыПоБилетам
	|ИЗ
	|	РеквизитыОплатБилетов КАК РеквизитыОплатБилетов
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыОплатБилетов.Билет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыОплатБилетов.Билет КАК Билет,
	|	МАКСИМУМ(РеквизитыОплатБилетов.НомерДокументаОплаты) КАК НомерДокументаОплаты,
	|	МАКСИМУМ(РеквизитыОплатБилетов.ДатаДокументаОплаты) КАК ДатаДокументаОплаты
	|ПОМЕСТИТЬ ДанныеОплаты
	|ИЗ
	|	РеквизитыОплатБилетов КАК РеквизитыОплатБилетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеОплатыПоБилетам КАК ПоследниеОплатыПоБилетам
	|		ПО РеквизитыОплатБилетов.Билет = ПоследниеОплатыПоБилетам.Билет
	|			И РеквизитыОплатБилетов.ДатаДокументаОплаты = ПоследниеОплатыПоБилетам.ДатаДокументаОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыОплатБилетов.Билет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыБилетов.Билет КАК Билет,
	|	СуммыБилетов.Сумма КАК Сумма,
	|	СуммыБилетов.СуммаНДС КАК СуммаНДС,
	|	СуммыБилетов.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ДанныеОплаты.НомерДокументаОплаты, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(ДанныеОплаты.ДатаДокументаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты
	|ИЗ
	|	СуммыБилетов КАК СуммыБилетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОплаты КАК ДанныеОплаты
	|		ПО СуммыБилетов.Билет = ДанныеОплаты.Билет";
	
	Запрос.УстановитьПараметр("Период", КонецДня(ПериодОкончание));
	Запрос.УстановитьПараметр("СубконтоДокументРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	СчетаРасчетов = Новый Массив;
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);                           // 60.01
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);       // 76.05
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);    // 76.09
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);                        // 60.21
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);    // 76.25
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); // 76.29
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);                         // 60.31
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);     // 76.35
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);  // 76.39
	
	СчетаБанкКасса = Новый Массив;
	СчетаБанкКасса.Добавить(ПланыСчетов.Хозрасчетный.Касса);                          	 	 	 	 // 50
	СчетаБанкКасса.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);                          	 	 // 51
	СчетаБанкКасса.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);                          	 	 // 52
	
	СчетаАвансов = Новый Массив;
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);                        // 60.02
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);                     // 60.22
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);                      // 60.32
	
	Запрос.УстановитьПараметр("СчетаРасчетов", БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетов));
	Запрос.УстановитьПараметр("СчетаБанкКасса", БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаБанкКасса));
	Запрос.УстановитьПараметр("СчетаАвансов", БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаАвансов));
		
	ТаблицаСуммыБилетов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаБилета Из ТаблицаСуммыБилетов Цикл
		СтрокаБилета.НомерДокументаОплаты = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			СтрокаБилета.НомерДокументаОплаты, 
			Истина, 
			Истина)
	КонецЦикла;	
	
	Возврат ТаблицаСуммыБилетов;
	
КонецФункции

Функция ВидыДоговоровАгента() Экспорт 

 	ВидыДоговоров = Новый Массив;

    ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
    ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

    Возврат ВидыДоговоров;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли