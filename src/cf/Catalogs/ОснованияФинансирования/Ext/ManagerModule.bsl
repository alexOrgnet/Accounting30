#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия валютных оснований финансирования
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьВалютныеОснованияФинансирования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияФинансирования.Ссылка
	|ИЗ
	|	Справочник.ОснованияФинансирования КАК ОснованияФинансирования
	|ГДЕ
	|	ОснованияФинансирования.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И ОснованияФинансирования.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета";
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ОбработчикиОбновления

// Заполняет валюту взаиморасчетов в основаниях финансирования валютой регламентированного учета.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьВалютуВзаиморасчетовПоУмолчанию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОснованияФинансирования.Ссылка КАК Ссылка,
	|	ОснованияФинансирования.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ОснованияФинансирования КАК ОснованияФинансирования
	|ГДЕ
	|	ОснованияФинансирования.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ИмяПроцедуры = "Справочники.ОснованияФинансирования.ЗаполнитьВалютуВзаиморасчетовПоУмолчанию()";
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		Попытка
			
			ОснованиеФинансированияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОснованиеФинансированияОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
			
			// Запись обработанного объекта
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОснованиеФинансированияОбъект);
			
		Исключение
			
			// Если не удалось обработать какой-либо объект, повторяем попытку снова
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре %1 не удалось обработать основание финансирования по причине:
				|%2'"), ИмяПроцедуры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ОснованияФинансирования,
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре %1 не удалось обработать основания финансирования: в %2 из %3 возникли ошибки'"),
			ИмяПроцедуры, ПроблемныхОбъектов, ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ОснованияФинансирования, ,
			СтрШаблон(НСтр("ru = 'Процедура %1 обработала очередную порцию оснований финансирования: %2 элементов'"),
				ИмяПроцедуры, ОбъектовОбработано));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, все ли основания финансирования были обработаны процедурой ЗаполнитьВалютуВзаиморасчетовПоУмолчанию()
//
// Параметры:
//   Параметры - Структура - см. документацию к БСП.
//
// Возвращаемое значение:
//   Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления.
//
Функция ВалютаВзаиморасчетовЗаполнена(Параметры) Экспорт

	Если ТипЗнч(Параметры.Данные) = Тип("СправочникСсылка.ОснованияФинансирования") Тогда
		ВалютаОснованияФинансирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Данные, "ВалютаВзаиморасчетов");
	Иначе
		ВалютаОснованияФинансирования = Параметры.Данные.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Возврат ВалютаОснованияФинансирования <> Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция КодыВидовПоступлений() Экспорт

	КодыВидовПоступлений = Новый Соответствие;
	
	Макет = ПолучитьМакет("КодыВидовПоступлений");
	
	ТекущаяОбласть = Макет.Области.Найти("КодыВидовПоступлений");

	Если ТекущаяОбласть <> Неопределено Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				КодыВидовПоступлений.Вставить(КодПоказателя, Название);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(КодыВидовПоступлений);
	
КонецФункции

Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	
	Макет = ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("КодыВидовПоступлений");
	
	Если ТекущаяОбласть <> Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов", Классификатор);
	
	Возврат Параметры;
	
КонецФункции

Функция ОснованиеФинансированияПоОтбору(СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ОснованияФинансирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОснованияФинансирования КАК ОснованияФинансирования
		|ГДЕ
		|	НЕ ОснованияФинансирования.ПометкаУдаления
		|	И НЕ ОснованияФинансирования.НеПоказыватьВСписках";
	
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ОснованияФинансирования.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("НачислятьЗадолженностьПоФинансированию") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ОснованияФинансирования.НачислятьЗадолженностьПоФинансированию = &НачислятьЗадолженностьПоФинансированию";
		Запрос.УстановитьПараметр("НачислятьЗадолженностьПоФинансированию", СтруктураОтбора.НачислятьЗадолженностьПоФинансированию);
	КонецЕсли;
	Если СтруктураОтбора.Свойство("ВалютаВзаиморасчетов") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ОснованияФинансирования.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов";
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", СтруктураОтбора.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли