
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте 
Перем ТекущийТекстНомераСчета; // Текст, набранный в поле ввода номера счета

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
		БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами")
		И Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхБухгалтерии, ЧтениеДанныхБухгалтерии, ПросмотрРасчетовСКонтрагентами");
		// Данные о расчетах доступны администратору, полным правам или указанным ролям
	
	РазместитьКонтактнуюИнформацию();
	
	РазместитьОсновноеКонтактноеЛицо(Истина);
	
	УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица();
	
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		СтруктураЗаполнения = Параметры.СтруктураЗаполнения;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
		Если СтруктураЗаполнения.Свойство("БанковскийСчет") Тогда
			ДанныеБанковскогоСчета = СтруктураЗаполнения.БанковскийСчет;
			Если Не ПустаяСтрока(ДанныеБанковскогоСчета.НомерСчета) Тогда
				ЗаполнитьЗначенияСвойств(БанковскийСчет, ДанныеБанковскогоСчета);
				ИзмененБанковскийСчет = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураЗаполнения.Свойство("ДанныеМодифицированы") Тогда
			ДанныеМодифицированы = СтруктураЗаполнения.ДанныеМодифицированы;
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	ОграничитьВыборРеквизитов(Параметры.ЗначенияЗаполнения);
	
	// Если проверка контрагентов не возможна, то не будем ее и запускать.
	// Это нужно, например, для самозанятых.
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами  
	Иначе
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами  
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Контрагенты",
		"ФормаЭлемента",
		НСтр("ru='Новости: Контрагент'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

	НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБП.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		СтруктураЗаполнения = Параметры.СтруктураЗаполнения;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Элементы.Подменю1СПАРКРиски.Видимость = СПАРКРиски.ИспользованиеРазрешено();
	Элементы.ФормаСправочникКонтрагентыВебВерсияСПАРК.Видимость = СПАРКРиски.ИспользованиеРазрешено("ПереходВВебВерсиюСПАРК;");
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСведенияОВзаиморасчетахСКонтрагентом", 0.1, Истина);

	Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		ОбновитьНаименованияАвтозаполнения();
	КонецЕсли;
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	НадежностьБанковКлиент.ПодключитьОбработчикПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КонтрагентыФормы.УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ОсновнойБанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ОбъектРегистрации.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
	УстановитьОсновноеКонтактноеЛицо(ТекущийОбъект);
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаписатьОсновноеКонтактноеЛицо(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И НЕ ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица        = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		
	КонецЕсли;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПрочитатьОсновноеКонтактноеЛицо();
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыЗаписи.Вставить("ВключитьМониторингСобытий1СПАРКРиски", Истина);
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
		
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			
			ГоловнойКонтрагентПриИзмененииНаСервере();
			Модифицированность = Истина;
			
			ЗапуститьПроверкуКонтрагента();
			
		КонецЕсли;
		
	
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Ссылка = Объект.ОсновнойБанковскийСчет Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет") Тогда
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ПрочитатьОсновнойБанковскийСчет();
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета" 
			ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
			
		Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
			
			УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);

			Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоКонтактногоЛица" Тогда

		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Объект.ОсновноеКонтактноеЛицо = Параметр.ОсновноеКонтактноеЛицо;
			
			ПрочитатьОсновноеКонтактноеЛицо();
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			РазместитьОсновноеКонтактноеЛицо();
			
			УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица();
			
			Оповестить("УстановкаОсновногоКонтактногоЛицаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактныеЛица" Тогда
		
		Если Параметр.Свойство("Контрагент") 
			И Объект.Ссылка = Параметр.Контрагент Тогда
			
			ПрочитатьОсновноеКонтактноеЛицо();
			
			РазместитьОсновноеКонтактноеЛицо();
			
			УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Изменение_Вида_Контрагента" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСведенияОВзаиморасчетахСКонтрагентом", 0.1, Истина);

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПрочитатьОсновноеКонтактноеЛицо();

	ПодготовитьФормуНаСервере();
	
	Если Не ТекущийОбъект.ОсновнойБанковскийСчет.Пустая() Тогда
		ЭтотОбъект.Элементы.ГруппаОсновнойБанковскийСчет.Скрыть();
	КонецЕсли;

	Если Не ТекущийОбъект.ОсновноеКонтактноеЛицо.Пустая()
		Или ЭтотОбъект.ТолькоПросмотр Тогда
		ЭтотОбъект.Элементы.ГруппаОсновноеКонтактноеЛицо.Скрыть();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КонтрагентыФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтотОбъект, РезультатПроверкиНаДубли);
	
	БанковскиеСчетаФормыКлиент.ПередЗаписью(БанковскийСчет.НомерСчета, БИКБанка, Объект.Ссылка, Отказ);
	
	Если Не Отказ
		И Не ПараметрыЗаписи.Свойство("ИзменитьВидКонтрагентаНаИП") Тогда
		
		Если ФизическомуЛицуЗаписываетсяСчетИП(БанковскийСчет.НомерСчета) Тогда
		
			Отказ = Истина;
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьФизическомуЛицуСчетИПЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			
			ТекстВопроса = НСтр("ru='Номер основного счета контрагента был определен как счет индивидуального предпринимателя.
							|
							|Изменить вид контрагента на ""Индивидуальный предприниматель""?'");
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СостояниеКонтрагентаИзменилось = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
	ОповещениеОСозданииКонтрагента = КонтрагентыФормыКлиент.ОповещениеОСозданииКонтрагента(ЭтотОбъект);
	Если Не ОповещениеОСозданииКонтрагента = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииКонтрагента, Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, БИКБанка, ЯвляетсяБанкомРФ, Отказ);
	
	Если ДанныеКонтактногоЛицаЗаполнены
		И ПустаяСтрока(ОсновноеКонтактноеЛицоФИО) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Укажите ФИО контактного лица'"),, "ОсновноеКонтактноеЛицоФИО",, Отказ);
		
	КонецЕсли;

	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП") Тогда
		
		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
		
		ЗапуститьПроверкуКонтрагента();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований") Тогда
		
		УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПолеПоискаИНННаименование)
		И НЕ ЗначениеЗаполнено(Объект.ИНН) 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
		ИЛИ КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
		ОтключитьЗаполнениеПоИНН = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное)
		И Список.НайтиПоЗначению(Объект.НаименованиеПолное) = Неопределено Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	ВидПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеАвтоматически Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;

	ОбновитьНаименованияАвтозаполнения();
	
	НаименованиеПолноеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СтранаРегистрацииПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФаксКонтрагентыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеДругаяИнформацияКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		УправлениеКонтактнойИнформациейБПКлиентСервер.СкопироватьПолеКонтактнойИнформации(
			ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		
		УправлениеКонтактнойИнформациейБПКлиентСервер.СкопироватьПолеКонтактнойИнформации(
			ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеЮрАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеФактАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрП(Объект.ИНН);
	
	ИННПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПояснениеПроверкиДублейФНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	БанковскийСчет.НомерСчета = СтрЗаменить(БанковскийСчет.НомерСчета," ","");
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
	
	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПокупателей();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансПокупателейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПокупателей();

КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПокупателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоНеоплаченнымСчетамПокупателем();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПоставщикам();

КонецПроцедуры

&НаКлиенте
Процедура АвансПоставщикуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоЗадолженностиПоставщикам();
	
КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПоставщиковНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьОтчетПоНеоплаченнымСчетамПоставщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИООсновноеКонтактноеЛицоПриИзменении(Элемент)
	
	ОсновноеКонтактноеЛицоИзменено = Истина;
	
	ФИОКонтактногоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОсновноеКонтактноеЛицоПриИзменении(Элемент)
	
	ОсновноеКонтактноеЛицоИзменено = Истина;
	ДанныеКонтактногоЛицаЗаполнены = ДанныеКонтактногоЛицаЗаполнены();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
	
	КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованию(ЭтотОбъект, КонтактнаяИнформацияПолеЮрАдресКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	ИначеЕсли НЕ ПустаяСтрока(РезультатПроверкиИНН) Тогда
		ПоказатьПредупреждение(, Строка(РезультатПроверкиИНН));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.Карточка"));
	ДополнительныеПараметры.Вставить("Контрагент"       , Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтаФорма, , , ,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзФайла(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗагрузкаКарточкиКонтрагентаИзФайла");
	
	РасширениеФайла = "*.xml";
	ЗаголовокФормыВыбораФайла = НСтр("ru='Выберите карточку организации'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузитьКарточкуКонтрагентаXMLИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеНеоплаченныеСчета(Команда)
	
	ОткрытьФорму("Обработка.ОжидаемаяОплатаОтПокупателей.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
	
	ОграничениеВидаКонтрагента = Неопределено;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И Параметры.ЗначенияЗаполнения.Свойство("ЮридическоеФизическоеЛицо", ОграничениеВидаКонтрагента) Тогда
	
		Если ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если Параметры.ЗначенияЗаполнения.Свойство("Самозанятый") И Параметры.ЗначенияЗаполнения.Самозанятый Тогда
					СписокВыбораВида.Добавить("Самозанятый", "Самозанятый");
				ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ИндивидуальныйПредприниматель") И Параметры.ЗначенияЗаполнения.ИндивидуальныйПредприниматель Тогда
					СписокВыбораВида.Добавить("ИндивидуальныйПредприниматель", "Индивидуальный предприниматель");
				Иначе
					СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				КонецЕсли;
				ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
			ИначеЕсли ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ФиксированныйМассив") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				Если ОграничениеВидаКонтрагента.Количество() = 1 Тогда
					ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда 
		Если Объект.Самозанятый Тогда 
			Вид = "Самозанятый";
		ИначеЕсли Объект.ИндивидуальныйПредприниматель Тогда 
			Вид = "ИндивидуальныйПредприниматель";
		Иначе
			Вид = "ФизическоеЛицо";
		КонецЕсли;
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ГосударственныйОрган Тогда
		Вид = "ГосударственныйОрган";
	Иначе
		Вид = "ЮридическоеЛицо";
	КонецЕсли;
		
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или (Объект.НаименованиеПолное = Объект.Наименование);

	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	Элементы.ФормаЗаполнитьИзЭлектроннойПочты.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.ПрямойОбменЭД);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
		БанковскийСчет.НомерСчета, БИКБанка, ЯвляетсяБанкомРФ, ЦветВыделенияНекорректногоЗначение);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		БИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	УстановитьВидимостьЭлементов();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Объект,
			?(Параметры.Ключ.Пустая(), Объект.ИНН, Объект.Ссылка),
			СПАРКРискиКлиентСерверБП.ВидКонтрагентаСПАРКРиски(Объект.ЮридическоеФизическоеЛицо),
			ПараметрыПроцедуры);
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Группа Адреса, телефоны
	Элементы.КонтактнаяИнформацияПолеФактАдресКонтрагента.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрФактАдресаСовпадают;
	
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	
	ОтчетЗадолженностьПокупателейДоступен = ОтчетДоступен("ЗадолженностьПокупателей");
	ОтчетЗадолженностьПоставщикамДоступен = ОтчетДоступен("ЗадолженностьПоставщикам");
	
	Элементы.ЗадолженностьПокупателя.Гиперссылка = ОтчетЗадолженностьПокупателейДоступен;
	Элементы.АвансПокупателя.Гиперссылка         = ОтчетЗадолженностьПокупателейДоступен;
	Элементы.НеоплаченныеСчетаПокупателя.Гиперссылка = ОтчетДоступен("АнализНеоплаченныхСчетовПокупателям");
	
	Элементы.ЗадолженностьПоставщику.Гиперссылка = ОтчетЗадолженностьПоставщикамДоступен;
	Элементы.АвансПоставщику.Гиперссылка = ОтчетЗадолженностьПоставщикамДоступен;
	Элементы.НеоплаченныеСчетаПоставщиков.Гиперссылка = ОтчетДоступен("АнализНеоплаченныхСчетовПоставщиков");
	
	ВидимостьНадписейПояснения(Форма);
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
			Элементы.ФактАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента;
		Элементы.ФактАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
			Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента;
		Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		Элементы.ЮрАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Элементы.ЮрАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
		
		Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		Иначе
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		КонецЕсли;
		
	КонецЕсли;
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) И НЕ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента;
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=': тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = АдресЗаголовок;

	КонтактноеЛицоЗаголовок = НСтр("ru='Контактное лицо'");
	Если Не Объект.ОсновноеКонтактноеЛицо.Пустая() Тогда
		КонтактноеЛицоЗаголовок = ЗаголовокГруппыОсновноеКонтактноеЛицо(Форма.ОсновноеКонтактноеЛицо.Ссылка,
			Форма.ОсновноеКонтактноеЛицоФИО, Форма.ОсновноеКонтактноеЛицоДолжность);
	КонецЕсли;
	
	Элементы.ГруппаОсновноеКонтактноеЛицо.ЗаголовокСвернутогоОтображения = КонтактноеЛицоЗаголовок;
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(Форма, Форма.БанковскийСчет);
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(Форма, Форма.ЯвляетсяБанкомРФ);
	
	ВидимостьРеквизитовБанковскогоСчета(Форма);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		ЭлементУО.Поля, Элементы.КодГосударственногоОргана.Имя);
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементУО.Отбор, "ОтборКодГосударственногоОргана", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаИли,
		"Объект.ВидГосударственногоОргана",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыГосударственныхОрганов.Прочий);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаИли,
		"Объект.КодГосударственногоОргана",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		ЭлементУО.Поля, Элементы.КодГосударственногоОргана.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КодГосударственногоОргана",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидГосударственногоОргана",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыГосударственныхОрганов.Прочий);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ФИООсновноеКонтактноеЛицо.Имя);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ОсновноеКонтактноеЛицоФИО",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДанныеКонтактногоЛицаЗаполнены",
		ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ФИООсновноеКонтактноеЛицо.Имя);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ОсновноеКонтактноеЛицоФИО",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДанныеКонтактногоЛицаЗаполнены",
		ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	КонтрагентыФормы.УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	ИсторияЮрАдреса = НСтр("ru = 'История'");
	
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, Истина);
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты, Истина);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме = РазмещеныНаФорме;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЮрФактАдресаСовпадают		= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки(),
		"", КонтактнаяИнформацияПолеЮрАдресКонтрагента)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЮрАдресаКонтрагента(Форма)

	Если Форма.ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента) Тогда
		УправлениеКонтактнойИнформациейБПКлиентСервер.СкопироватьПолеКонтактнойИнформации(
			Форма, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента) Тогда
		УправлениеКонтактнойИнформациейБПКлиентСервер.СкопироватьПолеКонтактнойИнформации(
			Форма, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииФактАдресаКонтрагента(Форма)
	
	Форма.ЮрФактАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТолькоПросмотр Тогда
		РезультатПроверкиНаДубли = КонтрагентыФормыВызовСервера.ПроверитьДубли(Объект);
	КонецЕсли;
	
	ОтобразитьРезультатПроверкиКонтрагентовВФорме();
	
	// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
	
	КонтрагентыФормыКлиент.ОбработатьСитуациюВыбораДубля(ЭтотОбъект, Элемент, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП)
	
	КонтрагентОбъект = РеквизитФормыВЗначение("Объект");

	ЭтотОбъект.НадписьПоясненияНекорректногоИНН = "";
	ЭтотОбъект.НадписьПоясненияНекорректногоКПП = "";
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	СохранитьРезультатПроверки = Не ТолькоПросмотр;
	
	ТекстПредставленияИННКПП = НСтр("ru = '%1
									|%2'");
	Если ПроверитьИНН Тогда
		
		РезультатПроверки  = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Объект.ИНН, ЭтоЮрЛицо);
		ОшибокПоИННнет = РезультатПроверки.СоответствуетТребованиям;
		ТекстОшибкиИНН     = РезультатПроверки.ОписаниеОшибки;
		
		Если Не ТолькоПросмотр Тогда
			Объект.ИННВведенКорректно          = ПустаяСтрока(ТекстОшибкиИНН) И ОшибокПоИННнет;
			Объект.РасширенноеПредставлениеИНН = СтрШаблон(ТекстПредставленияИННКПП, Объект.ИНН, ТекстОшибкиИНН);
		КонецЕсли;
		
		РезультатПроверкиИНН = Справочники.Контрагенты.ПроверитьИНН(КонтрагентОбъект, СохранитьРезультатПроверки);
	КонецЕсли;
	
	Если ПроверитьКПП Тогда
		
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(Объект.КПП, ЭтоЮрЛицо, Объект.ОбособленноеПодразделение);
		
		Если Не ТолькоПросмотр Тогда
			Объект.КППВведенКорректно = РезультатПроверки.СоответствуетТребованиям;
			Объект.РасширенноеПредставлениеКПП = СтрШаблон(ТекстПредставленияИННКПП, Объект.КПП, РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
		
		РезультатПроверкиКПП = Справочники.Контрагенты.ПроверитьКПП(КонтрагентОбъект, СохранитьРезультатПроверки);
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		РезультатПроверкиНаДубли = Справочники.Контрагенты.ПроверитьДубли(КонтрагентОбъект);
	КонецЕсли;
	
	ОтобразитьРезультатПроверкиКонтрагентовВФорме();
	
	ПроверкаКонтрагентовПоИННКППВозможна = (Объект.СтранаРегистрации = Справочники.СтраныМира.Россия) 
		И Объект.ИННВведенКорректно 
		И (Объект.КППВведенКорректно 
			ИЛИ Объект.ИндивидуальныйПредприниматель
			ИЛИ Вид ="ИндивидуальныйПредприниматель");
		
	ЗначениеВРеквизитФормы(КонтрагентОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.Наименование = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
			Или (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьЭлементСНеуникальнымИННЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
		// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(ИмяРеквизита)
	
	Если ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресКонтрагента" Тогда
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
		УправлениеКонтактнойИнформациейБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
			ЭтотОбъект,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат КонтрагентыФормыКлиентСервер.ЭтоИНН(СтрокаИНН);
КонецФункции

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагента()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
		ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПоказатьДубли" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьСитуациюВыбораДубля(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	КонтрагентЗарегистрированВРФ = (Объект.СтранаРегистрации = Справочники.СтраныМира.Россия);
	КонтрагентФизическоеЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);

	Элементы.ГоловнойКонтрагент.Видимость             = Объект.ОбособленноеПодразделение;
	Элементы.ИНН.ТолькоПросмотр                       = Объект.ОбособленноеПодразделение;
	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = ОтобразитьЗаполнениеПоДаннымЕГР
		И НЕ Объект.Самозанятый
		И НЕ Вид = "ФизическоеЛицо";
	Элементы.ГруппаОсновноеКонтактноеЛицо.Видимость = НЕ КонтрагентФизическоеЛицо;
	Элементы.КнопкаЗаполнитьРеквизитыПоИНН.Видимость = КонтрагентЗарегистрированВРФ
		И Не Объект.ОбособленноеПодразделение 
		И Не ОтобразитьЗаполнениеПоДаннымЕГР
		И (НЕ КонтрагентФизическоеЛицо ИЛИ Объект.ИндивидуальныйПредприниматель ИЛИ Вид = "ИндивидуальныйПредприниматель");
	Элементы.КнопкаЗаполнитьРеквизитыПоИННКоманднаяПанель.Видимость = КонтрагентЗарегистрированВРФ
		И НЕ Объект.ОбособленноеПодразделение
		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР
		И (НЕ КонтрагентФизическоеЛицо ИЛИ Объект.ИндивидуальныйПредприниматель ИЛИ Вид = "ИндивидуальныйПредприниматель");
		
		Если Объект.ГосударственныйОрган Тогда
			
		Элементы.Наименование.ПодсказкаВвода = "";
		Элементы.НаименованиеПолное.ПодсказкаВвода = "";
		Элементы.НаименованиеПолное.Подсказка = НСтр("ru = 'Наименование для печати в документах.'");
		Элементы.Наименование.Подсказка = "";
		
	ИначеЕсли КонтрагентФизическоеЛицо И НЕ Объект.ИндивидуальныйПредприниматель Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Иванов И. И.'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'Иванов Иван Иванович'");
		
		Если Объект.Самозанятый Тогда
			
			Элементы.НаименованиеПолное.Подсказка =
				НСтр("ru = 'Наименование для печати в документах.
					|Для самозанятых указывается фамилия, имя, отчество.
					|Пример: Иванов Иван Иванович.'");
			
			Элементы.Наименование.Подсказка =
				НСтр("ru = 'Начните с фамилии самозанятого, тогда контрагента можно будет легко найти в списке.
					|Пример: Иванов И. И.'");
					
		Иначе
			Элементы.НаименованиеПолное.Подсказка =
				НСтр("ru = 'Наименование для печати в документах.
					|Для физических лиц указывается фамилия, имя, отчество.
					|Пример: Иванов Иван Иванович.'");
			
			Элементы.Наименование.Подсказка =
				НСтр("ru = 'Начните с фамилии физического лица, тогда контрагента можно будет легко найти в списке.
					|Пример: Иванов И. И.'");
					
		КонецЕсли;
				
	ИначеЕсли КонтрагентФизическоеЛицо И Объект.ИндивидуальныйПредприниматель Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Иванов И. И. ИП'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'ИП Иванов Иван Иванович'");
		
		Элементы.НаименованиеПолное.Подсказка =
			НСтр("ru = 'Наименование для печати в документах. 
				|Для предпринимателей указывается наименование как в регистрационных документах.
				|Пример: ИП ""Иванов Иван Иванович"" или Индивидуальный предприниматель ""Иванов Иван Иванович"".
				|
				|Для физических лиц указывается фамилия, имя, отчество.
				|Пример: Иванов Иван Иванович.'");
		
		Элементы.Наименование.Подсказка =
			НСтр("ru = 'Начните с наименования организации, тогда контрагента можно будет легко найти в списке.
				|Пример: Иванов И. И. ИП.'");
				
	Иначе
				
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Ромашка ООО'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'ООО ""Ромашка""'");
		Элементы.НаименованиеПолное.Подсказка =
		
			НСтр("ru = 'Наименование для печати в документах. 
				|Полное или сокращенное наименование как в учредительных документах, в частности, Уставе и в ""Свидетельстве о государственной регистрации"".
				|Пример: Общество с ограниченной ответственностью ""Ромашка"" или ООО ""Ромашка"".'");
		
		Элементы.Наименование.Подсказка =
			НСтр("ru = 'Начните с наименования организации, тогда контрагента можно будет легко найти в списке.
				|Пример: Ромашка ООО.'");
				
	КонецЕсли;
	
	Элементы.ГруппаКПП.Видимость                      = ДоступенКПП(ЭтотОбъект);
	Элементы.НалоговыйНомер.Видимость                 = НЕ КонтрагентЗарегистрированВРФ;
	Элементы.ИНН.ОграничениеТипа                      = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Элементы.КодПоОКПО.Видимость                      = КонтрагентЗарегистрированВРФ И Не Объект.Самозанятый;
	Элементы.СтранаРегистрации.Видимость              = НЕ Объект.ГосударственныйОрган И Не Объект.Самозанятый;
	Элементы.ГруппаРегистрацияКакИП.Видимость         = Вид = "ИндивидуальныйПредприниматель" ИЛИ Объект.ИндивидуальныйПредприниматель; //КонтрагентФизическоеЛицо И Объект.ИндивидуальныйПредприниматель;
	Элементы.РегистрационныйНомер.Видимость           = НЕ КонтрагентФизическоеЛицо
		ИЛИ Объект.ИндивидуальныйПредприниматель
		ИЛИ Вид = "ИндивидуальныйПредприниматель";
	Элементы.ГруппаГосударственныйОрган.Видимость     = Объект.ГосударственныйОрган;
	Элементы.НаименованиеНерезидентаРус.Видимость     = НЕ КонтрагентЗарегистрированВРФ; 
	
	Элементы.КнопкаЗаполнитьРеквизитыПоНаименованию.Видимость = КонтрагентЗарегистрированВРФ
		И НЕ КонтрагентФизическоеЛицо 
		И НЕ Объект.ОбособленноеПодразделение
		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
	Если НЕ КонтрагентЗарегистрированВРФ Тогда
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'Рег. номер'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.РегистрационныйНомер.ПодсказкаВвода       = НСтр("ru = 'Регистрационный номер в стране регистрации'");
		Элементы.РегистрационныйНомер.Ширина               = 0;
		Элементы.РегистрационныйНомер.Маска                = "";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
			|при первой постановке на учет в налоговом органе Российской Федерации'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ИНН.ПодсказкаВвода       = НСтр("ru = 'Введите ИНН'");
		Элементы.Банк.ПодсказкаВвода      = НСтр("ru = 'Введите БИК, SWIFT или наименование банка'");
	ИначеЕсли КонтрагентФизическоеЛицо Тогда
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'ОГРНИП'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Основной государственный регистрационный номер индивидуального 
						|предпринимателя, указан в Свидетельстве о государственной 
						|регистрации физического лица в качестве ИП'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода       = "";
		Элементы.РегистрационныйНомер.Ширина               = 17;
		Элементы.РегистрационныйНомер.Маска                = "999999999999999";
		Элементы.ИНН.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИНН.ПодсказкаВвода       = НСтр("ru = 'Введите ИНН'");
		Элементы.Банк.ПодсказкаВвода      = НСтр("ru = 'Введите БИК или наименование банка'");
	Иначе
		// Юридическое лицо
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'ОГРН'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода = "";
		Элементы.РегистрационныйНомер.Маска          = "9999999999999";
		Элементы.РегистрационныйНомер.Ширина         = 17;
		Элементы.ИНН.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Если Объект.ОбособленноеПодразделение Тогда
			Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'ИНН головного контрагента'");
		Иначе
			Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'Введите ИНН'");
		КонецЕсли;
		
		Элементы.Банк.ПодсказкаВвода    = НСтр("ru = 'Введите БИК или наименование банка'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьНадписейПояснения(Форма)
	
	Форма.Элементы.НадписьПоясненияНекорректногоИНН.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиИНН);
	Форма.Элементы.НадписьПоясненияНекорректногоКПП.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиКПП);
	Форма.Элементы.НадписьПояснениеПроверкиДублейФНС.Видимость = Не ПустаяСтрока(Форма.НадписьПояснениеПроверкиДублейФНС);

КонецПроцедуры

&НаСервере
Процедура ИННПриИзмененииНаСервере()
	ПроверитьИННКППДубли(Истина, Ложь);
	
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
	
	ПроверитьИНН = Ложь;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
КонецПроцедуры

&НаСервере
Процедура СтранаРегистрацииПриИзмененииНаСервере()
	
	Если Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Объект.КПП = "";
	Иначе
		Объект.РегистрационныйНомер = "";
	КонецЕсли;
	
	КонтрагентыФормы.УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	ПриИзмененииВидаКонтрагента();
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыНаСервере(ДополнительныеПараметры.АдресРеквизитовКонтрагента, ДополнительныеПараметры.ПроверитьИНН);
		
		Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
			// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
			ЗапуститьПроверкуКонтрагента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
		// Если нужно проверить ИНН, то берем из объекта (используется для заполнению по наименованию)
		Если ПроверитьИНН Тогда
			ИННОбъекта = СокрП(Объект.ИНН);
		Иначе
			ИННОбъекта = СокрП(ПолеПоискаИНННаименование);
			// Запустим проверку после заполнения
			ПроверитьИНН = Истина;
		КонецЕсли;
		
		Объект.ОбособленноеПодразделение = Ложь;
		
	Иначе
		ИННОбъекта = СокрП(Объект.ИНН);
	КонецЕсли;
	
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ДанныеДляЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ВыполнитьЗаполнениеРеквизитовПоИННЗавершение",
			ЭтотОбъект,
			ИННОбъекта);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "kontragent";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ДанныеДляЗаполнения.ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	ИначеЕсли ДанныеДляЗаполнения.Свойство("ЮридическоеФизическоеЛицо") 
		И ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо 
		И НЕ Параметры.Ключ.Пустая() Тогда
		
		ЭтоЮрЛицо = (ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru='Заполнить по ИНН %1 %2?'"), 
			?(ЭтоЮрЛицо, НСтр("ru = 'юридического лица'"), НСтр("ru = 'предпринимателя'")),
			ДанныеДляЗаполнения.НаименованиеКонтрагента);
			
		ДополнительныеПараметры = Новый Структура("АдресРеквизитовКонтрагента, ПроверитьИНН", ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ДанныеДляЗаполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
		ЗаполнитьРеквизитыНаСервере(ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН)
	КонецЕсли;
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ЗапуститьПроверкуКонтрагента();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		Объект.ИНН = СтрокаИНН;
		ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
	
	ОтключитьЗаполнениеПоИНН = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	ОтобразитьЗаполнениеПоДаннымЕГР = ПустаяСтрока(ТекстЗаполнения) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если ПустаяСтрока(ТекстЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		
		ЭтоЮрЛицо = (СтрДлина(ТекстЗаполнения) = 10);
	
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Объект.ОбособленноеПодразделение = Ложь;
		
		РезультатВыполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, ЭтоЮрЛицо);
		
		Если РезультатВыполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
			ЗаполнитьРеквизитыНаСервере(РезультатВыполнения.АдресРеквизитовКонтрагента, Истина);
		КонецЕсли; 
		
	Иначе
		Объект.НаименованиеПолное = ТекстЗаполнения;
	КонецЕсли;
	
	ТекстЗаполнения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()
	
	ПолеПоискаИНННаименование = СокрЛП(ПолеПоискаИНННаименование);
	
	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоИНН = ЭтоИНН(ПолеПоискаИНННаименование);
	Если ЗаполнениеПоИНН Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	ИначеЕсли ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтрокаПоиска", ПолеПоискаИНННаименование);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ЭтотОбъект, ПолеПоискаИНННаименование);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ЭтотОбъект, ДопПараметры.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма) Экспорт
	
	Если Форма.ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент =
			ЗначениеЗаполнено(Форма.Объект.СтранаРегистрации)
			И Форма.Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
			Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьКарточкуКонтрагентаXMLИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.ПользовательОтказалсяОтЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ФайлЗагружен Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(Результат.АдресФайла);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML)
	
	АдресаФайловXML = Новый Массив;
	АдресаФайловXML.Добавить(АдресФайлаXML);
	
	СтруктураРеквизитов = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов[0].ДанныеКарточки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение(СтруктураРеквизитов,
	ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов)
	
	ЭтоЮрЛицо = СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ЮридическийАдрес) И
			ЗначениеЗаполнено(СтруктураРеквизитов.ФактическийАдрес) Тогда
		АдресаСовпадают = ОбщегоНазначения.ДанныеСовпадают(СтруктураРеквизитов.ЮридическийАдрес.Представление,
			СтруктураРеквизитов.ФактическийАдрес.Представление);
	Иначе
		АдресаСовпадают = Ложь;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Вид = "ЮридическоеЛицо";
		КПППриИзмененииНаСервере();
	Иначе
		Вид = "ФизическоеЛицо";
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	
	Если АдресаСовпадают Тогда
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ФактическийАдрес);
		ЮрФактАдресаСовпадают = Ложь;
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	ЮрПочтовыйАдресаСовпадают = Истина;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.Телефон));
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеEmailКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.АдресЭлектроннойПочты));
		
	Если ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета) Тогда
		Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.БИК);
		Если Банки.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='БИК %1 банка контрагента не найден в классификаторе банков РФ'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураРеквизитов.БИК);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			БанковскийСчет.Банк = Банки[0].Ссылка;
			НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет.Банк, "Наименование");
			БанковскийСчет.НомерСчета = СтруктураРеквизитов.НомерСчета;
			ЯвляетсяБанкомРФ = Истина;
			ИзмененБанковскийСчет = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Руководитель) Тогда
		
		ФИОРуководителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураРеквизитов.Руководитель, " ");
		ДанныеКонтактногоЛица = Новый Структура("Фамилия, Имя, Отчество, Должность",
			?(ФИОРуководителя.Количество() >= 1, ФИОРуководителя[0], Неопределено),
			?(ФИОРуководителя.Количество() >= 2, ФИОРуководителя[1], Неопределено),
			?(ФИОРуководителя.Количество() >= 3, ФИОРуководителя[2], Неопределено),
			СтруктураРеквизитов.ДолжностьРуководителя);
		
	КонецЕсли;
	
	ИННПриИзмененииНаСервере();
	
	ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

#Область СПАРК

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
			ЭтотОбъект.ИндексыСПАРКРиски,
			Объект,
			Объект.ИНН, // Искать по ИНН
			СПАРКРискиКлиентСерверБП.ВидКонтрагентаСПАРКРиски(Объект.ЮридическоеФизическоеЛицо),
			ЭтотОбъект,
			ПараметрыОтображения,
			Истина);
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)

	Объект = Форма.Объект;
	ПоказатьИнформацию = Не Объект.ГосударственныйОрган
		И (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
			ИЛИ Объект.ИндивидуальныйПредприниматель)
		И Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
	Возврат ПоказатьИнформацию

КонецФункции

&НаСервере
Процедура ОграничитьВыборРеквизитов(ЗначенияЗаполнения)
	
	Если ЗначенияЗаполнения.Свойство("ГосударственныйОрган") Тогда
		Элементы.Вид.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ЗаголовокГруппыОсновноеКонтактноеЛицо(ОсновноеКонтактноеЛицо, ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность)
	
	// Телефоны
	ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ТелефоныМобильные = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОсновноеКонтактноеЛицо, ВидыКонтактнойИнформации, ТекущаяДатаСеанса(), Ложь);
	
	ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ТелефоныРабочие = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОсновноеКонтактноеЛицо, ВидыКонтактнойИнформации, ТекущаяДатаСеанса(), Ложь);
	
	// Электронная почта
	ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	АдресаЭлектроннойПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОсновноеКонтактноеЛицо, ВидыКонтактнойИнформации, ТекущаяДатаСеанса(), Ложь);

	КоличествоНомеров = ТелефоныМобильные.Количество() + ТелефоныРабочие.Количество();
	КоличествоАдресов = АдресаЭлектроннойПочты.Количество();

	Если ТелефоныМобильные.Количество() > 0 Тогда
		Телефон = ТелефоныМобильные[0].Представление;
	ИначеЕсли ТелефоныРабочие.Количество() > 0 Тогда
		Телефон = ТелефоныРабочие[0].Представление;
	Иначе
		Телефон = "";
	КонецЕсли;
	
	Если АдресаЭлектроннойПочты.Количество() > 0 Тогда
		Почта = АдресаЭлектроннойПочты[0].Представление;
	Иначе
		Почта = "";
	КонецЕсли;
	
	Заголовок = "";
	
	Если Не ПустаяСтрока(ОсновноеКонтактноеЛицоДолжность) Тогда
		
		Если КоличествоНомеров > 1 И КоличествоАдресов = 0 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3 (Еще %4)'"), 
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон, КоличествоНомеров - 1);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов = 0 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон);
			
		ИначеЕсли КоличествоНомеров = 0 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3 (Еще %4)'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров = 0 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Почта);
			
		ИначеЕсли КоличествоНомеров > 1 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3 (Еще %4); %5 (Еще %6)'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон, КоличествоНомеров - 1, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров > 1 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3 (Еще %4); %5'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон, КоличествоНомеров - 1, Почта);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3; %4 (Еще %5)'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2); %3; %4'"),
				ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность, Телефон, Почта);
		Иначе
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1 (%2)'"), ОсновноеКонтактноеЛицоФИО, ОсновноеКонтактноеЛицоДолжность);
			
		КонецЕсли;
		
	Иначе
		
		Если КоличествоНомеров > 1 И КоличествоАдресов = 0 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2 (Еще %3)'"), 
				ОсновноеКонтактноеЛицоФИО, Телефон, КоличествоНомеров - 1);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов = 0 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2'"),
				ОсновноеКонтактноеЛицоФИО, Телефон);
			
		ИначеЕсли КоличествоНомеров = 0 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2 (Еще %3)'"),
				ОсновноеКонтактноеЛицоФИО, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров = 0 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2'"),
				ОсновноеКонтактноеЛицоФИО, Почта);
			
		ИначеЕсли КоличествоНомеров > 1 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2 (Еще %3); %4 (Еще %5)'"),
				ОсновноеКонтактноеЛицоФИО, Телефон, КоличествоНомеров - 1, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров > 1 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2 (Еще %3); %4'"),
				ОсновноеКонтактноеЛицоФИО, Телефон, КоличествоНомеров - 1, Почта);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов > 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2; %3 (Еще %4)'"),
				ОсновноеКонтактноеЛицоФИО, Телефон, Почта, КоличествоАдресов - 1);
			
		ИначеЕсли КоличествоНомеров = 1 И КоличествоАдресов = 1 Тогда
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1; %2; %3'"),
				ОсновноеКонтактноеЛицоФИО, Телефон, Почта);
		Иначе
			
			Заголовок = СтрШаблон(НСтр("ru='Контактное лицо: %1'"), ОсновноеКонтактноеЛицоФИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОВзаиморасчетах(Знач Контрагент)
	
	Результат = Справочники.Контрагенты.ЗадолженностьПоКонтрагенту(Контрагент);
		
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСведенияОВзаиморасчетахСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ГосударственныйОрган
		Или Не Форма.ВестиУчетРасчетовСКонтрагентами
		Или Объект.Ссылка.Пустая() Тогда
		Элементы.ГруппаОстатокПоВзаиморасчетам.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаОстатокПоВзаиморасчетам.Видимость = Истина;
	КонецЕсли;
	
	СведенияОЗадолженностиКонтрагента = СведенияОВзаиморасчетах(Объект.Ссылка);
	
	НетЗадолженностиПоставщику = СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику = 0 И СведенияОЗадолженностиКонтрагента.АвансПоставщику = 0
		И СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество = 0;
	НетЗадолженностиПокупателя = СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя = 0 И СведенияОЗадолженностиКонтрагента.АвансПокупателя = 0
		И СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемКоличество = 0;
	
	Элементы.ДекорацияДолговНет.Видимость = НетЗадолженностиПокупателя И НетЗадолженностиПоставщику;
	Элементы.ГруппаЗадолженностьПокупателей.Видимость = Не НетЗадолженностиПокупателя;
	Элементы.ГруппаЗадолженностьПоставщикам.Видимость = Не НетЗадолженностиПоставщику;
	
	КонтрагентЗадолженностьПоставщику    = Формат(СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику, "ЧДЦ=0");
	
	КонтрагентАвансПоставщику  = Формат(СведенияОЗадолженностиКонтрагента.АвансПоставщику, "ЧДЦ=0");
	
	КонтрагентЗадолженностьПокупателя   = Формат(СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя, "ЧДЦ=0");

	КонтрагентАвансПокупателя = Формат(СведенияОЗадолженностиКонтрагента.АвансПокупателя, "ЧДЦ=0");
	
	Если СведенияОЗадолженностиКонтрагента.НеОплаченныеСчетаПокупателемКоличество = 0 Тогда
		КонтрагентНеоплаченныеСчетаПокупателей = "0 ";
	Иначе
		КонтрагентНеоплаченныеСчетаПокупателей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 на %2'"),
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемКоличество,
			Формат(СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПокупателемСумма, "ЧДЦ=0"));
	КонецЕсли;
	
	Если СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество = 0 Тогда
		КонтрагентНеоплаченныеСчетаПоставщиков = "0 ";
	Иначе
		КонтрагентНеоплаченныеСчетаПоставщиков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 на %2'"),
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество,
			Формат(СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковСумма, "ЧДЦ=0"));
	КонецЕсли;

	Если Элементы.ГруппаЗадолженностьПоставщикам.Видимость Тогда
		
		Форма.ЗадолженностьПоставщику = КонтрагентЗадолженностьПоставщику;
		Форма.АвансПоставщику = КонтрагентАвансПоставщику;
		Форма.НеоплаченныеСчетаПоставщиков = КонтрагентНеоплаченныеСчетаПоставщиков;

		Элементы.ЗадолженностьПоставщику.Видимость = СведенияОЗадолженностиКонтрагента.ЗадолженностьПоставщику <> 0;
		Элементы.АвансПоставщику.Видимость = СведенияОЗадолженностиКонтрагента.АвансПоставщику <> 0;
		Элементы.НеоплаченныеСчетаПоставщиков.Видимость =
			СведенияОЗадолженностиКонтрагента.НеоплаченныеСчетаПоставщиковКоличество <> 0;
		
	КонецЕсли;
	
	Если Элементы.ГруппаЗадолженностьПокупателей.Видимость Тогда
		
		Форма.ЗадолженностьПокупателя = КонтрагентЗадолженностьПокупателя;
		Форма.АвансПокупателя = КонтрагентАвансПокупателя;
		Форма.НеоплаченныеСчетаПокупателя = КонтрагентНеоплаченныеСчетаПокупателей;

		Элементы.ЗадолженностьПокупателя.Видимость = СведенияОЗадолженностиКонтрагента.ЗадолженностьПокупателя <> 0;
		Элементы.АвансПокупателя.Видимость = СведенияОЗадолженностиКонтрагента.АвансПокупателя <> 0;
		Элементы.ГруппаНеоплаченныеСчетаПокупателя.Видимость =
			СведенияОЗадолженностиКонтрагента.НеОплаченныеСчетаПокупателемКоличество <> 0;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСведенияОВзаиморасчетахСКонтрагентом()
	ОбновитьСведенияОВзаиморасчетахСКонтрагентом(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованияАвтозаполнения()
	
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ФИОПредпринимателя = Неопределено;
	
	Если Не ЭтоЮрЛицо Тогда
		ФИОПредпринимателя = ОбщегоНазначенияБПКлиентСервер.ФамилияИмяОтчествоПоНаименованиюИП(Объект.НаименованиеПолное);
	КонецЕсли;

	НаименованияАвтозаполнения.Очистить();
	
	Если ЭтоЮрЛицо Или ФИОПредпринимателя = Неопределено Тогда
		Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(Объект.НаименованиеПолное);
		ПолноеНаименование = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(Объект.НаименованиеПолное);
		НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеПоПолномуНаименованию(Объект.НаименованиеПолное);
		НаименованияАвтозаполнения.Добавить(НаименованиеСокращенное);
	Иначе
		Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеИндивидуальногоПредпринимателя(
			ФИОПредпринимателя.Фамилия, ФИОПредпринимателя.Имя, ФИОПредпринимателя.Отчество);
		ПолноеНаименование = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеИндивидуальногоПредпринимателя(
			ФИОПредпринимателя.Фамилия, ФИОПредпринимателя.Имя, ФИОПредпринимателя.Отчество);
	КонецЕсли;
	
	НаименованияАвтозаполнения.Добавить(ПолноеНаименование);
	НаименованияАвтозаполнения.Добавить(Наименование);
	
КонецПроцедуры

&НаСервере
Функция ДанныеКонтактногоЛицаЗаполнены()
	
	ДанныеЗаполнены = Ложь;
	
	СтрокиКИ = СписокРеквизитовКонтактнойИнформации();
	
	Для Каждого СтрокаКИ Из СтрокиКИ Цикл
		Если Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
			ДанныеЗаполнены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаполнены Или Не ПустаяСтрока(ОсновноеКонтактноеЛицоДолжность);
	
КонецФункции

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагентовВФорме()
	
	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект);
	
	ВидимостьНадписейПояснения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(Результат.ИмяРеквизита);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
	ДанныеКонтактногоЛицаЗаполнены = ДанныеКонтактногоЛицаЗаполнены();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента) Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОсновноеКонтактноеЛицоПриИзменении(Элемент)
	
	ОсновноеКонтактноеЛицоИзменено = Истина;
	ФИОКонтактногоЛица();
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	ДанныеКонтактногоЛицаЗаполнены = ДанныеКонтактногоЛицаЗаполнены();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОсновноеКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОсновноеКонтактноеЛицоИзменено = Истина;
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ИсторияКПП

&НаСервере
Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКПП.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
	КПППриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенКПП(Форма)
	
	Возврат КонтрагентыФормыКлиентСервер.ДоступенКПП(Форма);
	
КонецФункции

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОсновнойБанковскийСчет

&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если НЕ БанковскийСчет.Ссылка.Пустая() И НЕ БанковскийСчетЗаблокирован Тогда
		Если НЕ КонтрагентыФормыВызовСервера.ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	ОсновнойБанковскийСчетОбъект = КонтрагентыФормы.ПрочитатьОсновнойБанковскийСчет(Объект);
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(БанковскийСчет.Банк);
		ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
			
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если НЕ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если ПараметрыЗаписи.Свойство("ИзменитьВидКонтрагентаНаИП") Тогда
			ОбъектРегистрации.ДополнительныеСвойства.Вставить("ИзменитьВидКонтрагентаНаИП",ПараметрыЗаписи.ИзменитьВидКонтрагентаНаИП);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектРегистрации.Ссылка) Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(Новый Структура("Владелец", ТекущийОбъект.Ссылка));
		КонецЕсли;
		
		ОбъектРегистрации.Валютный = (ОбъектРегистрации.ВалютаденежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ОбъектРегистрации.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(ОбъектРегистрации, НаименованиеБанка);
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПолноеПриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеПолное , Объект.ИсторияНаименований);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст," ","");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПодсказкуНомераСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БИКБанка = "";
		НаименованиеБанка = "";
		ДеятельностьБанкаПрекращена = Ложь;
		ЯвляетсяБанкомРФ = Ложь;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, ЯвляетсяБанкомРФ);
	БанковскийСчет.НомерСчета = Элементы.НомерСчета.ОграничениеТипа.ПривестиЗначение(БанковскийСчет.НомерСчета);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект,
		БИКБанка,
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
			БанковскийСчет, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
		
	КонецЕсли;
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
	Если РеквизитыБанка = Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗначенияЗаполнения") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("БанкОбработкаСоздания", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.Банки.ФормаОбъекта", ВыбранноеЗначение.ЗначенияЗаполнения, ЭтотОбъект, , , , ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = РеквизитыБанка.Ссылка;
	ИзмененБанковскийСчет = Истина;
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
			ПараметрыЗаполнения = Новый Структура("Страна", Объект.СтранаРегистрации);
		Иначе
			ПараметрыЗаполнения = Новый Структура("Страна, СВИФТБИК", Объект.СтранаРегистрации, Элемент.ТекстРедактирования);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("БанкНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыЗаполнения, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БанковскийСчет.Банк = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПодсказкуНомераСчета()
	
	Если ЯвляетсяБанкомРФ Тогда
		
		Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(ТекущийТекстНомераСчета) Тогда
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиент.ПодсказкаВводаПоляНомерСчета(ТекущийТекстНомераСчета, БИКБанка);
		Иначе
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
				ТекущийТекстНомераСчета, БИКБанка, ЯвляетсяБанкомРФ, ЦветВыделенияНекорректногоЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаСоздания(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	БанковскийСчет.Банк = РезультатЗакрытия;
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(БанковскийСчет.Банк);
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		
		Если РеквизитыБанка.ЯвляетсяБанкомРФ Тогда 
			Форма.БИКБанка = РеквизитыБанка.Код;
		Иначе
			Форма.БИКБанка = РеквизитыБанка.СВИФТБИК;
		КонецЕсли;
		
		Форма.НаименованиеБанка = РеквизитыБанка.Наименование;
		Форма.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
		Форма.ЯвляетсяБанкомРФ = РеквизитыБанка.ЯвляетсяБанкомРФ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьРеквизитовБанковскогоСчета(Форма)
	
	Форма.Элементы.ВалютаДенежныхСредствСчета.Видимость = Не Форма.ЯвляетсяБанкомРФ И ЗначениеЗаполнено(Форма.БанковскийСчет.Банк);
	Форма.Элементы.ПодсказкаБанк.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаБанк);
	Форма.Элементы.ПодсказкаНомерСчета.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаНомерСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьИнформациюНадежностьБанков(Форма)
	
	Если Форма.ДеятельностьБанкаПрекращена 
		ИЛИ НЕ ЗначениеЗаполнено(Форма.БИКБанка) 
		ИЛИ НЕ Форма.ЯвляетсяБанкомРФ Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюНадежностьБанков()
	
	НадежностьБанковКлиент.ПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ФизическомуЛицуЗаписываетсяСчетИП(НомерСчета)

	// Банковские счета индивидуальных предпринимателей начинаются с "40802"
	// значение взято из функции БанковскиеПравила.ЭтоСчетИндивидуальногоПредпринимателя(БалансовыйСчет),
	// т.к. получать данное значение требуется на клиенте без серверного вызова
	
	ЭтоСчетИндивидуальногоПредпринимателя = СтрНачинаетсяС(НомерСчета,"40802");
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
		И НЕ Объект.Самозанятый
		И НЕ Объект.ИндивидуальныйПредприниматель 
		И ЭтоСчетИндивидуальногоПредпринимателя Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВопросЗаписатьФизическомуЛицуСчетИПЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Вид = "ИндивидуальныйПредприниматель";
		ВидПриИзмененииНаСервере();
		
		ПараметрыЗаписи.Вставить("ИзменитьВидКонтрагентаНаИП", Истина);
		
	Иначе
		
		ПараметрыЗаписи.Вставить("ИзменитьВидКонтрагентаНаИП", Ложь);
		
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи)
		И ПараметрыЗаписи.Свойство("Закрыть", Истина) Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияНаименований

&НаКлиенте
Процедура ИсторияНаименованиеПолноеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущееНаименованиеПолное, ИсторияНаименований, ТолькоПросмотр", 
					Объект.НаименованиеПолное, Объект.ИсторияНаименований, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеПослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияНаименований.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияНаименований.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.НаименованиеПолное = НаборЗаписей[НаборЗаписей.Количество()-1].НаименованиеПолное;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаКонтрагента()
	
	КонтрагентыФормы.ПриИзмененииВидаКонтрагента(Объект, Вид);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН)
	
	Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо Тогда
		
		Вид = ?(РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо", "ЮридическоеЛицо");
		ПриИзмененииВидаКонтрагента();
	
	КонецЕсли; 
	
	ЭтоЮрЛицо = (РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или (Объект.Наименование = Объект.НаименованиеПолное);
		
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
		
	ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюНаименований(Объект, РеквизитыКонтрагента); // заполнение истории наименований по данным ЕГРН
	
	Если ЭтоЮрЛицо Тогда
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрПочтовыйАдресаСовпадают = Истина;
		
		// Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
		
		// Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
				
			ИмяКонтактногоЛица = ДанныеКонтактногоЛица.Имя;
			ФамилияКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия;
			ОтчествоКонтактногоЛица = ДанныеКонтактногоЛица.Отчество;
			ОсновноеКонтактноеЛицоФИО = ПредставлениеКонтактногоЛица;
			ОсновноеКонтактноеЛицоДолжность = ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
		
		Если ДоступенКПП(ЭтотОбъект) Тогда
			ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюКПП(Объект, РеквизитыКонтрагента); // заполнение истории КПП по данным ЕГРН
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюАдресов(Объект, РеквизитыКонтрагента); // заполнение истории юр. адресов по данным ЕГРН
		
	Иначе
		
		Объект.КПП = "";
		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		Если СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = СтрШаблон(НСтр("ru = '%1 №%2'"),
				СвидетельствоОРегистрации.Серия, СвидетельствоОРегистрации.Номер);
			Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Проверим дубли
	ПроверитьИННКППДубли(ПроверитьИНН, Истина);
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНаСервере(АдресРеквизитовКонтрагента, ПроверитьИНН)
	
	РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	
	Если Объект.ЮридическоеФизическоеЛицо <> РеквизитыКонтрагента.ЮридическоеФизическоеЛицо Тогда
		
		Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			Вид = "ЮридическоеЛицо";
			
		ИначеЕсли РеквизитыКонтрагента.Свойство("ВидИП") Тогда
			
			Вид = "ИндивидуальныйПредприниматель";
			
		Иначе
			
			Вид = "ФизическоеЛицо";
			
		КонецЕсли;
		
		ВидПриИзмененииНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
	ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УдалитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
 	РеквизитыКонтрагента = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо)
	
	Возврат КонтрагентыФормы.ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);

КонецФункции

&НаСервереБезКонтекста
Функция ВедетсяУчетПоНесколькимОрганизациям()
	
	Возврат Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВедетсяУчетПоДоговорам()
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");

КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПокупателей()
	
	ИмяОтчета = "ЗадолженностьПокупателей";
	
	Если ВедетсяУчетПоНесколькимОрганизациям() Тогда
		Если ВедетсяУчетПоДоговорам() Тогда
			КлючВарианта = "ЗадолженностьПокупателейПоОрганизациямИДоговорам";
		Иначе
			КлючВарианта = "ЗадолженностьПокупателейПоОрганизациям";
		КонецЕсли;
	Иначе
		Если ВедетсяУчетПоДоговорам() Тогда
			КлючВарианта = "ЗадолженностьПокупателейПоДоговорам";
		Иначе
			КлючВарианта = "ЗадолженностьПокупателей";
		КонецЕсли;
	КонецЕсли;

	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПоставщикам()
	
	ИмяОтчета = "ЗадолженностьПоставщикам";
	
	Если ВедетсяУчетПоНесколькимОрганизациям() Тогда
		Если ВедетсяУчетПоДоговорам() Тогда
			КлючВарианта = "ЗадолженностьПоставщикамПоОрганизациямИДоговорам";
		Иначе
			КлючВарианта = "ЗадолженностьПоставщикамПоОрганизациям";
		КонецЕсли;
	Иначе
		Если ВедетсяУчетПоДоговорам() Тогда
			КлючВарианта = "ЗадолженностьПоставщикамПоДоговорам";
		Иначе
			КлючВарианта = "ЗадолженностьПоставщикам";
		КонецЕсли;
	КонецЕсли;
	
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоНеоплаченнымСчетамПокупателем()

	ИмяОтчета = "АнализНеоплаченныхСчетовПокупателям";
	КлючВарианта = "НеоплаченныеСчетаПокупателям";
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоНеоплаченнымСчетамПоставщиков()
	
	ИмяОтчета = "АнализНеоплаченныхСчетовПоставщиков";
	КлючВарианта = "НеоплаченныеСчетаПоставщиков";
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетДоступен(ИмяОтчета)
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты[ИмяОтчета]);

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Контрагент)
	
	Возврат Справочники.Контрагенты.ПараметрыДляОтчета(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта)

	ПараметрыОтчета = ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Объект.Ссылка);
	
	ИмяФормыОтчета = "Отчет." + ИмяОтчета + ".Форма.ФормаОтчета";
	
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыОтчета, ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ОсновноеКонтактноеЛицо

&НаСервере
Процедура РазместитьОсновноеКонтактноеЛицо(ПриСозданииНаСервере = Ложь)
	
	Если Объект.ОсновноеКонтактноеЛицо.Пустая() Тогда
		ОсновноеКонтактноеЛицоФИО = "";
		ОсновноеКонтактноеЛицоДолжность = "";
		ДанныеКонтактногоЛицаЗаполнены = Ложь;
	Иначе
		ОсновноеКонтактноеЛицоФИО = Объект.ОсновноеКонтактноеЛицо.Наименование;
		ОсновноеКонтактноеЛицоДолжность = Объект.ОсновноеКонтактноеЛицо.Должность;
	КонецЕсли;
	
	Если ПриСозданииНаСервере Тогда
		
		// Обработчик подсистемы "Контактная информация"
		ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
		ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактныеДанные";
		
		КонтактнаяИнформацияОсновногоКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.ОсновноеКонтактноеЛицо,, ТекущаяДатаСеанса(), Ложь);
		
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ОсновноеКонтактноеЛицо, ПараметрыРазмещенияКонтактнойИнформации);  
		
	Иначе
		
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ОсновноеКонтактноеЛицо, "ГруппаКонтактныеДанные");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокРеквизитовКонтактнойИнформации()
	
	Если КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактныеДанные");
	
	Возврат КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

КонецФункции

&НаСервере
Процедура УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица(НаВсеПоля = Истина)
	
	СписокРеквизитов = СписокРеквизитовКонтактнойИнформации();
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
		
		Элементы[Реквизит.ИмяРеквизита].УстановитьДействие("ПриИзменении", "Подключаемый_ОсновноеКонтактноеЛицоПриИзменении");
		Если Элементы[Реквизит.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
			Элементы[Реквизит.ИмяРеквизита].УстановитьДействие("НачалоВыбора", "Подключаемый_ОсновноеКонтактноеЛицоНачалоВыбора");
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКонтактногоЛицаЗаполнены = ДанныеКонтактногоЛицаЗаполнены();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновноеКонтактноеЛицо(ТекущийОбъект)
	
	Если ПустаяСтрока(ОсновноеКонтактноеЛицоФИО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОсновноеКонтактноеЛицо = РеквизитФормыВЗначение("ОсновноеКонтактноеЛицо");
	
	Если Не ОсновноеКонтактноеЛицоИзменено Тогда
		
		Если Не ОбъектОсновноеКонтактноеЛицо.Ссылка.Пустая()
			И Не ЗначениеЗаполнено(ОбъектОсновноеКонтактноеЛицо.ОбъектВладелец) Тогда
			ОбъектОсновноеКонтактноеЛицо.ОбъектВладелец = ТекущийОбъект.Ссылка;
			ОбъектОсновноеКонтактноеЛицо.Записать();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	ОтобранныеСтроки = СписокРеквизитовКонтактнойИнформации();
	
	Если Не ЗначениеЗаполнено(ОбъектОсновноеКонтактноеЛицо.ОбъектВладелец) Тогда
		ОбъектОсновноеКонтактноеЛицо.ОбъектВладелец = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	ОбъектОсновноеКонтактноеЛицо.Наименование = ОсновноеКонтактноеЛицоФИО;
	Если Не ПустаяСтрока(ИмяКонтактногоЛица) Тогда
		ОбъектОсновноеКонтактноеЛицо.Имя = ИмяКонтактногоЛица;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ФамилияКонтактногоЛица) Тогда
		ОбъектОсновноеКонтактноеЛицо.Фамилия = ФамилияКонтактногоЛица;
	КонецЕсли;
	
	ОбъектОсновноеКонтактноеЛицо.Отчество = ОтчествоКонтактногоЛица;
	
	ОбъектОсновноеКонтактноеЛицо.Должность = ОсновноеКонтактноеЛицоДолжность;
	
	ОбъектОсновноеКонтактноеЛицо.КонтактнаяИнформация.Очистить();

	Для Каждого ДанныеКИ Из ОтобранныеСтроки Цикл
		
		Если ПустаяСтрока(ДанныеКИ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектОсновноеКонтактноеЛицо, ДанныеКИ.Значение, ДанныеКИ.Вид, ДанныеКИ.Тип);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	ОбъектОсновноеКонтактноеЛицо.Записать();
	ОсновноеКонтактноеЛицоИзменено = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновноеКонтактноеЛицо()
	
	Если ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
		ОсновноеКонтактноеЛицоОбъект = Объект.ОсновноеКонтактноеЛицо.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.КонтактныеЛица) Тогда
		ОсновноеКонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		ОсновноеКонтактноеЛицоОбъект.УстановитьСсылкуНового(Справочники.КонтактныеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор));
	Иначе
		ОсновноеКонтактноеЛицоОбъект = Неопределено;
	КонецЕсли;
	
	Если ОсновноеКонтактноеЛицоОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновноеКонтактноеЛицоОбъект, "ОсновноеКонтактноеЛицо");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеКонтактноеЛицо(ТекущийОбъект)
	
	Если ОсновноеКонтактноеЛицоИзменено
		И Не ПустаяСтрока(ОсновноеКонтактноеЛицоФИО)
		И ТекущийОбъект.ОсновноеКонтактноеЛицо.Пустая() Тогда
		
			ОсновноеКонтактноеЛицоСсылка = Справочники.КонтактныеЛица.НайтиКонтактноеЛицо(
				ТекущийОбъект.Ссылка, ОсновноеКонтактноеЛицоФИО);
				
			Если ОсновноеКонтактноеЛицоСсылка = Неопределено Тогда
				ОсновноеКонтактноеЛицоСсылка = НовоеОсновноеКонтактноеЛицо(ТекущийОбъект);
			КонецЕсли;
			
			ТекущийОбъект.ОсновноеКонтактноеЛицо = ОсновноеКонтактноеЛицоСсылка;
			ЗначениеВРеквизитФормы(ОсновноеКонтактноеЛицоСсылка.ПолучитьОбъект(), "ОсновноеКонтактноеЛицо");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НовоеОсновноеКонтактноеЛицо(ТекущийОбъект)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Наименование", ОсновноеКонтактноеЛицоФИО);
	ЗначенияЗаполнения.Вставить("Должность", ОсновноеКонтактноеЛицоДолжность);
	ЗначенияЗаполнения.Вставить("ОбъектВладелец", ТекущийОбъект.Ссылка);
	ЗначенияЗаполнения.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат Справочники.КонтактныеЛица.СоздатьКонтактноеЛицо(ПараметрыСоздания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДобавитьПолеВводаТелефонаОсновногоКонтактногоЛица()
	
	ВидКИ = "Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица";
	ДобавляемыйВид = ПолучитьСтруктуруДобавляемогоЭлемента(ВидКИ);
	
	Если ДобавляемыйВид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ДобавляемыйВид", ДобавляемыйВид);
	Результат.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактныеДанные");
	Результат.Вставить("ИмяКоманды", "Подключаемый_ДобавитьПолеВводаТелефонаОсновногоКонтактногоЛица");

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(Оповещение, Результат);
	
	УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьПолеВводаЭлектроннойПочтыОсновногоКонтактногоЛица()
	
	ВидКИ = "Справочник.ВидыКонтактнойИнформации.EmailКонтактныеЛица";
	ДобавляемыйВид = ПолучитьСтруктуруДобавляемогоЭлемента(ВидКИ);
	
	Если ДобавляемыйВид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ДобавляемыйВид", ДобавляемыйВид);
	Результат.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактныеДанные");
	Результат.Вставить("ИмяКоманды", "Подключаемый_ДобавитьПолеВводаЭлектроннойПочтыОсновногоКонтактногоЛица");

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(Оповещение, Результат);  
	
	УстановитьДействиеНаПоляКИОсновногоКонтактногоЛица();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДобавляемогоЭлемента(Вид)
	
	НайденныйЭлемент = Неопределено;
	СписокДобавляемыхЭлементов = ЭтотОбъект.ПараметрыКонтактнойИнформации.ГруппаКонтактныеДанные.СписокДобавляемыхЭлементов;
	
	Для Каждого ДобавляемыйЭлемент Из СписокДобавляемыхЭлементов Цикл
		Если ДобавляемыйЭлемент.Значение.Вид = ПредопределенноеЗначение(Вид) Тогда
			НайденныйЭлемент =  ДобавляемыйЭлемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ФИОКонтактногоЛица()
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ОсновноеКонтактноеЛицоФИО);
	ИмяКонтактногоЛица = "";
	ОтчествоКонтактногоЛица = "";
	
	// Если в ФИО указана фамилия, имя и должность через запятую (Например: Иванов, Генеральный директор),
	// то для того, чтобы название должности не попало в имя и отчество контактного лица проверяем
	// наличие запятой в предыдущей части имени, текст идущий после нее не сохраняем в части имени
	
	ФамилияКонтактногоЛица = СтрЗаменить(ФИО.Фамилия, ",", "");
	
	Если Найти(ФИО.Фамилия, ",") = 0 Тогда
		ИмяКонтактногоЛица = СтрЗаменить(ФИО.Имя, ",", "");
	КонецЕсли;

	Если Найти(ФИО.Имя, ",") = 0
		И Найти(ФИО.Фамилия, ",") = 0 Тогда
		ОтчествоКонтактногоЛица = СтрЗаменить(ФИО.Отчество, ",", "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
