
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеОбособленногоПодразделения", НСтр("ru='Обособленное подразделение'"));
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	НастроитьОперацииПодменюОтчеты();

	НастроитьОперацииПодменюДокументы();

	ПоказыватьКолонкиСВзаиморасчетами = Константы.ОтображатьОстаткиПоВзаиморасчетамВСпискеКонтрагентов.Получить();
	
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьКолонкиСВзаиморасчетами", ПоказыватьКолонкиСВзаиморасчетами);
	
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВестиУчетРасчетовСКонтрагентами", ВестиУчетРасчетовСКонтрагентами);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Контрагенты",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru='Новости: Контрагенты'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Элементы.Подменю1СПАРКРиски.Видимость = СПАРКРиски.ИспользованиеРазрешено();
	Элементы.СправочникКонтрагентыПерейтиВСПАРК.Видимость = СПАРКРиски.ИспользованиеРазрешено("ПереходВВебВерсиюСПАРК;");
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБП.КомандыЭДО_ФормаСпискаПриСоздании(ЭтотОбъект);
	Элементы.ЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	УправлениеПанельюПодсказки.ПриСозданииНаСервере(ЭтотОбъект);
	
	Поля = Новый Массив;
	Поля.Добавить("Телефон");
	Поля.Добавить("НеоплаченныеСчета");
	Поля.Добавить("ЗадолженностьПокупателя");
	Поля.Добавить("ЗадолженностьПоставщику");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
	Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	Список.УстановитьОграниченияИспользованияВПорядке(Поля);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияТребующиеОбновленияСписка = Новый Массив;
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РеализацияТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_СчетПокупателю");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПриходныйКассовыйОрдер");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РасходныйКассовыйОрдер");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеНаРасчетныйСчет");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_СписаниеСРасчетногоСчета");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_НачислениеПеней");
	
	Если Не ПоказыватьКолонкиСВзаиморасчетами 
		И СобытияТребующиеОбновленияСписка.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьСвойстваТекущегоКонтрагента();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	УправлениеПанельюПодсказкиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ФормаСпискаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка")
			Или ПустаяСтрока(ВыбранноеЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = ПараметрыФормыДокумента(Тип("ДокументСсылка." + ВыбранноеЗначение));
		ОткрытьФорму("Документ." + ВыбранноеЗначение + ".ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОтчетОбщаяКоманда(Команда)

	ПараметрыОтчета = Новый Структура;
	
	Если Команда.Имя = "ОтчетАнализНеоплаченныхСчетовПокупателями" Тогда
		ИмяФормыОтчета = "Отчет.АнализНеоплаченныхСчетовПокупателям.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетАнализНеоплаченныхСчетовПоставщиков" Тогда
		ИмяФормыОтчета = "Отчет.АнализНеоплаченныхСчетовПоставщиков.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетДинамикаЗадолженностиПокупателей" Тогда
		ИмяФормыОтчета = "Отчет.ДинамикаЗадолженностиПокупателей.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетДинамикаЗадолженностиПоставщикам" Тогда
		ИмяФормыОтчета = "Отчет.ДинамикаЗадолженностиПоставщикам.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПокупателей" Тогда
		
		ИмяФормыОтчета = "Отчет.ЗадолженностьПокупателей.ФормаОбъекта";
		ПараметрыОтчета.Вставить("КлючВарианта", "ЗадолженностьПокупателей");
		Уникальность = "Отчет.ЗадолженностьПокупателей/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПокупателейПоСрокамДолга" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПокупателейПоСрокамДолга.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПоставщикамПоСрокамДолга" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПоставщикамПоСрокамДолга.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПоставщикам" Тогда
		
		ИмяФормыОтчета = "Отчет.ЗадолженностьПоставщикам.ФормаОбъекта";
		ПараметрыОтчета.Вставить("КлючВарианта", "ЗадолженностьПоставщикам");
		Уникальность = "Отчет.ЗадолженностьПоставщикам/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);

	ИначеЕсли Команда.Имя = "ОтчетОборотныеСредства" Тогда
		ИмяФормыОтчета = "Отчет.ОборотныеСредства.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетРасчетыСПокупателямиИПоставщиками" Тогда
		ИмяФормыОтчета = "Отчет.РасчетыСПокупателямиИПоставщиками.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетПродажиПоКонтрагентамПоОплате" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоКонтрагентамПоОплате");
		Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
		ИмяФормыОтчета = "Отчет.Продажи.Форма";
		
	ИначеЕсли Команда.Имя = "ОтчетыПродажиПоКонтрагентам" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоКонтрагентам");
		Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	
		ИмяФормыОтчета = "Отчет.Продажи.Форма";
	
	ИначеЕсли Команда.Имя = "ОтчетыСравнениеПродажПоКонтрагентам" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "СравнениеПродажПоКонтрагентам");
		Уникальность = СтрШаблон("Отчет.СравнениеПродаж/КлючВарианта.%1", ПараметрыОтчета.КлючВарианта);
		
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
		ИмяФормыОтчета = "Отчет.СравнениеПродаж.Форма";
		
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыОтчета, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", 
		БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), 
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументСчетПокупателю(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументАкт(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНакладная(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументСчетПоставщика(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументАктПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНакладнаяПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументАктСверкиВзаиморасчетов(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ОткрытьФорму("Документ.АктСверкиВзаиморасчетов.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНачислениеПеней(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.НачислениеПеней"));
	ОткрытьФорму("Документ.НачислениеПеней.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДругойДокумент(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыПоКонтрагенту");
	
	ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ИндексыСПАРК(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ИндексыСПАРКРиски.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияМониторингаСПАРК(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.СобытияМониторингаСПАРКРиски.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументКоммерческоеПредложение(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.КоммерческоеПредложение"));
	ОткрытьФорму("Документ.КоммерческоеПредложение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Панель_Подсказки

&НаКлиенте
Процедура НавигацияВПрограммеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.НавигацияВПрограммеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяФункциональностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.ДополнительнаяФункциональностьОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.ГиперссылкаЯчейки Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если Поле.Имя = "НеоплаченныеСчета"
			И Не ПустаяСтрока(ТекущиеДанные.НеоплаченныеСчета) Тогда
			
			СтандартнаяОбработка = Ложь;
			СформироватьОтчетПоНеоплаченнымСчетамПокупателем(ВыбраннаяСтрока);
			
		ИначеЕсли Поле.Имя = "ЗадолженностьПоставщику"
			И ТекущиеДанные.ЗадолженностьПоставщику <> 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			СформироватьОтчетПоЗадолженностиПоставщикам(ВыбраннаяСтрока);

		ИначеЕсли Поле.Имя = "ЗадолженностьПокупателя"
			И ТекущиеДанные.ЗадолженностьПокупателя <> 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			СформироватьОтчетПоЗадолженностиПокупателей(ВыбраннаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("ПоказыватьКолонкиСВзаиморасчетами") Тогда
		ПоказыватьКолонкиСВзаиморасчетами = Настройки.ДополнительныеСвойства.ПоказыватьКолонкиСВзаиморасчетами;
	Иначе
		ПоказыватьКолонкиСВзаиморасчетами = Ложь;
	КонецЕсли;
	
	Если Не ПоказыватьКолонкиСВзаиморасчетами
		Или Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВзаиморасчетов = Справочники.Контрагенты.ЗадолженностьПоМассивуКонтрагентов(
		Строки.ПолучитьКлючи(), Настройки.ДополнительныеСвойства.ВестиУчетРасчетовСКонтрагентами);
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		Строка = Строки.Получить(СтрокаВзаиморасчетов.Контрагент);
		ЗаполнитьЗначенияСвойств(Строка.Данные, СтрокаВзаиморасчетов);
		Если Строка.Данные.Свойство("НеоплаченныеСчета")
			И СтрокаВзаиморасчетов.НеоплаченныеСчетаПокупателемКоличество <> 0 Тогда
			Строка.Данные.НеоплаченныеСчета = ПредставлениеНеоплаченногоСчета(СтрокаВзаиморасчетов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Не ПоказыватьКолонкиСВзаиморасчетами Тогда
		ПодключитьОбработчикОжидания("ОбновитьСвойстваТекущегоКонтрагента", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		КлючеваяОперация = "СозданиеФормыКонтрагенты";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КлючеваяОперация = "ОткрытиеФормыКонтрагенты";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ЗадолженностьПоставщику.Видимость = Форма.ПоказыватьКолонкиСВзаиморасчетами И Форма.ВестиУчетРасчетовСКонтрагентами;
	Элементы.ЗадолженностьПокупателя.Видимость = Форма.ПоказыватьКолонкиСВзаиморасчетами И Форма.ВестиУчетРасчетовСКонтрагентами;
	Элементы.НеоплаченныеСчета.Видимость       = Форма.ПоказыватьКолонкиСВзаиморасчетами;
	Элементы.Телефон.Видимость                 = Форма.ПоказыватьКолонкиСВзаиморасчетами;

	Элементы.ГруппаСвойстваКонтрагента.Видимость = Не Форма.ПоказыватьКолонкиСВзаиморасчетами;
	
	ОтчетЗадолженностьПокупателейДоступен = ОтчетДоступен("ЗадолженностьПокупателей");
	ОтчетАнализНеоплаченныхСчетовПокупателямДоступен = ОтчетДоступен("АнализНеоплаченныхСчетовПокупателям");
	ОтчетЗадолженностьПоставщикамДоступен = ОтчетДоступен("ЗадолженностьПоставщикам");
	
	КолонкиСписка = Элементы.Список.ПодчиненныеЭлементы;
	КолонкиСписка.ЗадолженностьПокупателя.ГиперссылкаЯчейки = ОтчетЗадолженностьПокупателейДоступен;
	КолонкиСписка.ЗадолженностьПоставщику.ГиперссылкаЯчейки = ОтчетЗадолженностьПоставщикамДоступен;
	КолонкиСписка.НеоплаченныеСчета.ГиперссылкаЯчейки       = ОтчетАнализНеоплаченныхСчетовПокупателямДоступен;
	
	ЦветТекстаПоля = ЦветТекстаПоля();
	ЦветГиперссылки = ЦветГиперссылки();
	
	КолонкиСписка.ЗадолженностьПокупателя.ЦветТекста = ?(ОтчетЗадолженностьПокупателейДоступен,
		ЦветГиперссылки, ЦветТекстаПоля);
	КолонкиСписка.ЗадолженностьПоставщику.ЦветТекста = ?(ОтчетЗадолженностьПоставщикамДоступен,
		ЦветГиперссылки, ЦветТекстаПоля);
	КолонкиСписка.НеоплаченныеСчета.ЦветТекста = ?(ОтчетАнализНеоплаченныхСчетовПокупателямДоступен,
		ЦветГиперссылки, ЦветТекстаПоля);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваКонтрагента(Знач Контрагент)
	
	Результат = Справочники.Контрагенты.ЗадолженностьПоКонтрагенту(Контрагент);
	Результат.Вставить("Телефон", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ИНН некорректный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ИННВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// ИНН дублируется

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ИННВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьДубли", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// КПП некорректный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КППВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// КПП дублируется

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КППВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьДубли", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// Контрагента нет в реестре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветКонтрагентаОтсутствущегоВРеестре);


	// Контрагент прекратил деятельность

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветКонтрагентаПрекратившегоДеятельность);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваТекущегоКонтрагента()
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоГруппа Тогда
		
		КонтрагентТелефон           = "";
		КонтрагентЗадолженностьПоставщику = "";
		КонтрагентЗадолженностьПокупателя = "";
		КонтрагентНеоплаченныеСчета = "";
		
	Иначе
		
		СвойстваКонтрагента = СвойстваКонтрагента(ТекущиеДанные.Ссылка);
		
		КонтрагентТелефон = СвойстваКонтрагента.Телефон;
		
		КонтрагентЗадолженностьПоставщику = Формат(СвойстваКонтрагента.ЗадолженностьПоставщику, "ЧН=0");
		
		КонтрагентЗадолженностьПокупателя = Формат(СвойстваКонтрагента.ЗадолженностьПокупателя, "ЧН=0");
		
		КонтрагентНеоплаченныеСчета = ПредставлениеНеоплаченногоСчета(СвойстваКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНеоплаченногоСчета(СвойстваКонтрагента)
	
	КоличествоНеоплаченныхСчетов = СвойстваКонтрагента.НеоплаченныеСчетаПокупателемКоличество;
	СуммаНеоплаченныхСчетов = Формат(СвойстваКонтрагента.НеоплаченныеСчетаПокупателемСумма, "ЧДЦ=0");

	Если КоличествоНеоплаченныхСчетов = 0 Тогда
		Представление = "";
	Иначе
		Представление = СтрШаблон(НСтр("ru='%1 на %2'"), КоличествоНеоплаченныхСчетов, СуммаНеоплаченныхСчетов);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьПодсказокНаСервере()
	
	УправлениеПанельюПодсказки.ИзменитьВидимостьПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВедетсяУчетПоДоговорам()
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПокупателей(Контрагент)
	
	ИмяОтчета = "ЗадолженностьПокупателей";

	Если ВедетсяУчетПоДоговорам() Тогда
		КлючВарианта = "ЗадолженностьПокупателейПоДоговорам";
	Иначе
		КлючВарианта = "ЗадолженностьПокупателей";
	КонецЕсли;

	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоЗадолженностиПоставщикам(Контрагент)
	
	ИмяОтчета = "ЗадолженностьПоставщикам";
	
	Если ВедетсяУчетПоДоговорам() Тогда
		КлючВарианта = "ЗадолженностьПоставщикамПоДоговорам";
	Иначе
		КлючВарианта = "ЗадолженностьПоставщикам";
	КонецЕсли;

	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоНеоплаченнымСчетамПокупателем(Контрагент)

	ИмяОтчета = "АнализНеоплаченныхСчетовПокупателям";

	КлючВарианта = "НеоплаченныеСчетаПокупателям";
	СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетДоступен(ИмяОтчета)
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты[ИмяОтчета]);

КонецФункции

&НаСервереБезКонтекста
Функция ЦветГиперссылки()
	
	Возврат ЦветаСтиля.ЦветГиперссылки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЦветТекстаПоля()
	
	Возврат ЦветаСтиля.ЦветТекстаПоля;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Контрагент)
	
	Возврат Справочники.Контрагенты.ПараметрыДляОтчета(ИмяОтчета, КлючВарианта, Контрагент);
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоВзаиморасчетам(ИмяОтчета, КлючВарианта, Контрагент)
	
	ПараметрыОтчета = ПараметрыДляОтчетаНаСервере(ИмяОтчета, КлючВарианта, Контрагент);
	
	ИмяФормыОтчета = СтрШаблон("Отчет.%1.Форма.ФормаОтчета", ИмяОтчета);
	
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыОтчета, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыДокумента(ТипДокумента, ВидОперации = Неопределено)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда
		Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ЗначенияЗаполнения.Вставить("КонтрагентДебитор", ТекущиеДанные.Ссылка);
			ЗначенияЗаполнения.Вставить("КонтрагентКредитор", ТекущиеДанные.Ссылка);
		Иначе
			ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура НастроитьОперацииПодменюДокументы()
	
	ТипыДокументов = Новый Массив;
	ДокументыЖурнала = ЖурналыДокументов.ЖурналОпераций.СоставДокументов("ДокументыПоКонтрагенту");
	Для Каждого ОбъектМетаданных Из ДокументыЖурнала Цикл
		Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
			ТипыДокументов.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьПравоИзменениеПоступлениеТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.ПоступлениеТоваровУслуг) <> Неопределено;
	ЕстьПравоИзменениеРеализацияТоваровУслуг  = ТипыДокументов.Найти(Метаданные.Документы.РеализацияТоваровУслуг) <> Неопределено;
	ЕстьПравоИзменениеСчетНаОплату            = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПокупателю) <> Неопределено;
	ЕстьПравоИзменениеСчетПоставщика          = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПоставщика) <> Неопределено;
	ЕстьПравоИзменениеАктСверкиВзаиморасчетов = ТипыДокументов.Найти(Метаданные.Документы.АктСверкиВзаиморасчетов) <> Неопределено;
	ЕстьПравоИзменениеНачислениеПеней         = ТипыДокументов.Найти(Метаданные.Документы.НачислениеПеней) <> Неопределено;
	ЕстьПравоИзменениеКоммерческоеПредложение = ТипыДокументов.Найти(Метаданные.Документы.КоммерческоеПредложение) <> Неопределено;
	
	Элементы.СоздатьДокументКоммерческоеПредложение.Видимость = ЕстьПравоИзменениеКоммерческоеПредложение;
	Элементы.СоздатьДокументСчетПокупателю.Видимость          = ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьДокументАкт.Видимость                     = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьДокументНакладная.Видимость               = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьДокументСчетПоставщика.Видимость          = ЕстьПравоИзменениеСчетПоставщика;  
	
	ДоступныеЗначенияОперацийПоступления = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.СписокДоступныхЗначений();

	ОперацияПоступлениеУслуг = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	ОперацияПоступлениеУслугДоступна = 
		ДоступныеЗначенияОперацийПоступления.НайтиПоЗначению(ОперацияПоступлениеУслуг) <> Неопределено;
		
	Элементы.СоздатьДокументАктПоступление.Видимость          =
		ЕстьПравоИзменениеПоступлениеТоваровУслуг И ОперацияПоступлениеУслугДоступна;
		
	ОперацияПоступлениеТоваров = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	ОперацияПоступлениеТоваровДоступна = 
		ДоступныеЗначенияОперацийПоступления.НайтиПоЗначению(ОперацияПоступлениеТоваров) <> Неопределено;

	Элементы.СоздатьДокументНакладнаяПоступление.Видимость    =
		ЕстьПравоИзменениеПоступлениеТоваровУслуг И ОперацияПоступлениеТоваровДоступна;
		
	Элементы.СоздатьДокументАктСверкиВзаиморасчетов.Видимость = ЕстьПравоИзменениеАктСверкиВзаиморасчетов;
	Элементы.СоздатьДокументНачислениеПеней.Видимость         = ЕстьПравоИзменениеНачислениеПеней;
	Элементы.СоздатьДругойДокумент.Видимость                  = ТипыДокументов.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОперацииПодменюОтчеты()
	
	ЕстьПравоОтчетПродажи = ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
	Элементы.ОтчетыПродажиПоКонтрагентам.Видимость = ЕстьПравоОтчетПродажи;
	Элементы.ОтчетПродажиПоКонтрагентамПоОплате.Видимость = ЕстьПравоОтчетПродажи;

	ЕстьПравоОтчетСравнениеПродаж = ПравоДоступа("Использование", Метаданные.Отчеты.СравнениеПродаж);
	Элементы.ОтчетыСравнениеПродажПоКонтрагентам.Видимость = ЕстьПравоОтчетСравнениеПродаж;
	
	ЕстьПравоОтчетРасчетыСПокупателямиИПоставщиками = ПравоДоступа("Использование",
		Метаданные.Отчеты.РасчетыСПокупателямиИПоставщиками);
	Элементы.ОтчетРасчетыСПокупателямиИПоставщиками.Видимость = ЕстьПравоОтчетРасчетыСПокупателямиИПоставщиками;
	
	ЕстьПравоОтчетДинамикаЗадолженностиПокупателей = ПравоДоступа("Использование",
		Метаданные.Отчеты.ДинамикаЗадолженностиПокупателей);
	Элементы.ОтчетДинамикаЗадолженностиПокупателей.Видимость = ЕстьПравоОтчетДинамикаЗадолженностиПокупателей;
	
	ЕстьПравоОтчетЗадолженностьПокупателей = ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателей);
	Элементы.ОтчетЗадолженностьПокупателей.Видимость = ЕстьПравоОтчетЗадолженностьПокупателей;
	
	ЕстьПравоОтчетЗадолженностьПокупателейПоСрокамДолга = ПравоДоступа("Использование",
		Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга);
	Элементы.ОтчетЗадолженностьПокупателейПоСрокамДолга.Видимость = ЕстьПравоОтчетЗадолженностьПокупателейПоСрокамДолга;

	ЕстьПравоОтчетАнализНеоплаченныхСчетовПокупателям = ПравоДоступа("Использование",
		Метаданные.Отчеты.АнализНеоплаченныхСчетовПокупателям);
	Элементы.ОтчетАнализНеоплаченныхСчетовПокупателям.Видимость = ЕстьПравоОтчетАнализНеоплаченныхСчетовПокупателям;
	
	ЕстьПравоОтчетДинамикаЗадолженностиПоставщикам = ПравоДоступа("Использование",
		Метаданные.Отчеты.ДинамикаЗадолженностиПоставщикам);
	Элементы.ОтчетДинамикаЗадолженностиПоставщикам.Видимость = ЕстьПравоОтчетДинамикаЗадолженностиПоставщикам;
	
	ЕстьПравоОтчетЗадолженностьПоставщикам = ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикам);
	Элементы.ОтчетЗадолженностьПоставщикам.Видимость = ЕстьПравоОтчетЗадолженностьПоставщикам;
	
	ЕстьПравоОтчетЗадолженностьПоставщикамПоСрокамДолга = ПравоДоступа("Использование", 
		Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга);
	Элементы.ОтчетЗадолженностьПоставщикамПоСрокамДолга.Видимость = ЕстьПравоОтчетЗадолженностьПоставщикамПоСрокамДолга;

	ЕстьПравоОтчетАнализНеоплаченныхСчетовПоставщиков = ПравоДоступа("Использование", 
		Метаданные.Отчеты.АнализНеоплаченныхСчетовПоставщиков);
	Элементы.ОтчетАнализНеоплаченныхСчетовПоставщиков.Видимость = ЕстьПравоОтчетАнализНеоплаченныхСчетовПоставщиков;
		
	ЕстьПравоОтчетОборотныеСредства = ПравоДоступа("Использование", Метаданные.Отчеты.ОборотныеСредства);
	Элементы.ОтчетОборотныеСредства.Видимость = ЕстьПравоОтчетОборотныеСредства;

КонецПроцедуры

#Область КомандыЭДО

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
