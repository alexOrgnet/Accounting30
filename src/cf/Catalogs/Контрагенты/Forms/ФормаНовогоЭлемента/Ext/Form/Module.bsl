
#Область ОписаниеПеременных

&НаКлиенте 
Перем ТекущийТекстНомераСчета; // Текст, набранный в поле ввода номера счета

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СброситьРазмерыИПоложениеОкна();
	
	ПоказыватьБанковскийСчет = Параметры.ПоказыватьБанковскийСчет;
	
	РазместитьКонтактнуюИнформацию();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	// Если проверка контрагентов не возможна, то не будем ее и запускать.
	// Это нужно, например, для самозанятых.
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами  
	Иначе
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами  
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		СтруктураЗаполнения = Параметры.СтруктураЗаполнения;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
	Если Объект.ГосударственныйОрган Тогда
		Если Не ПустаяСтрока(Объект.ИНН) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ИННПрочие;
		ИначеЕсли Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.НаименованиеПолноеПрочие;
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ИННПрочие;
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(Объект.ИНН) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ИННЮрФизЛица;
		ИначеЕсли Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.НаименованиеПолноеЮрФизЛица;
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ИННЮрФизЛица;
		КонецЕсли;
	КонецЕсли;

	НадежностьБанковКлиент.ПодключитьОбработчикПоказатьИнформациюНадежностьБанков(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
		
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			
			ГоловнойКонтрагентПриИзмененииНаСервере();
			Модифицированность = Истина;
			
			ЗапуститьПроверкуКонтрагента();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = Не ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Ссылка = Объект.ОсновнойБанковскийСчет Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет") Тогда
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ПрочитатьОсновнойБанковскийСчет();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КонтрагентыФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтотОбъект, РезультатПроверкиНаДубли);
	
	БанковскиеСчетаФормыКлиент.ПередЗаписью(БанковскийСчет.НомерСчета, БИКБанка, Объект.Ссылка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СостояниеКонтрагентаИзменилось = Ложь;
	
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
	ОповещениеОСозданииКонтрагента = КонтрагентыФормыКлиент.ОповещениеОСозданииКонтрагента(ЭтотОбъект);
	Если Не ОповещениеОСозданииКонтрагента = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииКонтрагента, Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КонтрагентыФормы.УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ОсновнойБанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ОбъектРегистрации.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И Не ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица        = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		
	КонецЕсли;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, БИКБанка, ЯвляетсяБанкомРФ, Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыКонтрагентовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Предотвращает смену страницы при нажатии на гиперссылку юридического адреса
	УстанивитьТекущуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	ВидПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	НаименованиеПолноеПриИзмененииНаСервере();
	Объект.Наименование = КонтрагентыФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(Объект.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрП(Объект.ИНН);
	
	ИННПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПояснениеПроверкиДублейФНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БИКБанка = "";
		НаименованиеБанка = "";
		ДеятельностьБанкаПрекращена = Ложь;
		ЯвляетсяБанкомРФ = Ложь;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, ЯвляетсяБанкомРФ);
	БанковскийСчет.НомерСчета = Элементы.НомерСчета.ОграничениеТипа.ПривестиЗначение(БанковскийСчет.НомерСчета);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект,
		БИКБанка,
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
			БанковскийСчет, ЭтотОбъект, БИКБанка, ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой"),
			ЯвляетсяБанкомРФ);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
	Если РеквизитыБанка = Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗначенияЗаполнения") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("БанкОбработкаСоздания", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.Банки.ФормаОбъекта", ВыбранноеЗначение.ЗначенияЗаполнения, ЭтотОбъект, , , , ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = РеквизитыБанка.Ссылка;
	ИзмененБанковскийСчет = Истина;
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
			ПараметрыЗаполнения = Новый Структура("Страна", Объект.СтранаРегистрации);
		Иначе
			ПараметрыЗаполнения = Новый Структура("Страна, СВИФТБИК", Объект.СтранаРегистрации, Элемент.ТекстРедактирования);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("БанкНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыЗаполнения, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если Не ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	БанковскийСчет.НомерСчета = СтрЗаменить(БанковскийСчет.НомерСчета," ","");
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтотОбъект, БИКБанка, ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой"),
		ЯвляетсяБанкомРФ);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст," ","");
	
	Если ЯвляетсяБанкомРФ Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьПодсказкуНомераСчета", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
	
	КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованию(ЭтотОбъект, КонтактнаяИнформацияПолеЮрАдресКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли Объект.ГосударственныйОрган Тогда
		Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
			ТекущийЭлемент = Элементы.ИННПрочие;
			Возврат;
		ИначеЕсли Не ПустаяСтрока(РезультатПроверкиИНН) Тогда
			ПоказатьПредупреждение(, Строка(РезультатПроверкиИНН));
			ТекущийЭлемент = Элементы.ИННПрочие;
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
			ТекущийЭлемент = Элементы.ИННЮрФизЛица;
			Возврат;
		ИначеЕсли Не ПустаяСтрока(РезультатПроверкиИНН) Тогда
			ПоказатьПредупреждение(, Строка(РезультатПроверкиИНН));
			ТекущийЭлемент = Элементы.ИННЮрФизЛица;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовПоИНН();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРеквизиты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		ВыбранноеЗначение = СокрЛП(Объект.ИНН);
	Иначе 
		ВыбранноеЗначение = СокрЛП(Объект.НаименованиеПолное);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",     Истина);
	ПараметрыФормы.Вставить("ТекстЗаполнения", ВыбранноеЗначение);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("НаименованиеПолное", Объект.НаименованиеПолное);
	СтруктураЗаполнения.Вставить("Наименование", Объект.Наименование);
	СтруктураЗаполнения.Вставить("ИНН", Объект.ИНН);
	СтруктураЗаполнения.Вставить("КПП", Объект.КПП);
	СтруктураЗаполнения.Вставить("ВидГосударственногоОргана", Объект.ВидГосударственногоОргана);
	СтруктураЗаполнения.Вставить("КодГосударственногоОргана", Объект.КодГосударственногоОргана);
	СтруктураЗаполнения.Вставить("ОбособленноеПодразделение", Объект.ОбособленноеПодразделение);
	СтруктураЗаполнения.Вставить("ГосударственныйОрган", Объект.ГосударственныйОрган);
	СтруктураЗаполнения.Вставить("Самозанятый", Объект.Самозанятый);
	СтруктураЗаполнения.Вставить("ИндивидуальныйПредприниматель", Объект.ИндивидуальныйПредприниматель);
	СтруктураЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	СтруктураЗаполнения.Вставить("ДанныеМодифицированы", Модифицированность);

	
	ДанныеБанковскогоСчета = Новый Структура;
	ДанныеБанковскогоСчета.Вставить("Банк", БанковскийСчет.Банк);
	ДанныеБанковскогоСчета.Вставить("НомерСчета", БанковскийСчет.НомерСчета);
	
	СтруктураЗаполнения.Вставить("БанковскийСчет", ДанныеБанковскогоСчета);
	
	ПараметрыФормы.Вставить("СтруктураЗаполнения", СтруктураЗаполнения);

	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ВладелецФормы);
	
	Модифицированность = Ложь;
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОграничениеВидаКонтрагента = Неопределено;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И Параметры.ЗначенияЗаполнения.Свойство("ЮридическоеФизическоеЛицо", ОграничениеВидаКонтрагента) Тогда
	
		Если ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
			
			СписокВыбораВида = Элементы.ВидЮридическоеЛицо.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если Параметры.ЗначенияЗаполнения.Свойство("Самозанятый") И Параметры.ЗначенияЗаполнения.Самозанятый Тогда
					СписокВыбораВида.Добавить("Самозанятый", "Самозанятый");
				Иначе
					СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				КонецЕсли;
			ИначеЕсли ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ФиксированныйМассив") Тогда
			
			СписокВыбораВида = Элементы.ВидЮридическоеЛицо.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
			КонецЕсли;
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда 
		Если Объект.Самозанятый Тогда 
			Вид = "Самозанятый";
		ИначеЕсли Объект.ИндивидуальныйПредприниматель Тогда 
			Вид = "ИндивидуальныйПредприниматель";
		Иначе
			Вид = "ФизическоеЛицо";
		КонецЕсли;
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ГосударственныйОрган Тогда
		Вид = "ГосударственныйОрган";
	Иначе
		Вид = "ЮридическоеЛицо";
	КонецЕсли;
	
	АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	Если ПоказыватьБанковскийСчет Тогда
		ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
			БанковскийСчет.НомерСчета, БИКБанка, ЯвляетсяБанкомРФ, ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой"));
		
		НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект,
			БИКБанка,
			ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
		
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
		
		Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		Иначе
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентЗарегистрированВРФ = (Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	КонтрагентФизическоеЛицо = (Объект.ЮридическоеФизическоеЛицо = 
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
		
	Если Объект.ОбособленноеПодразделение 
		Или Объект.ГосударственныйОрган Тогда
		Элементы.ИННПрочие.ТолькоПросмотр                = Объект.ОбособленноеПодразделение;
		Элементы.ИННПрочие.ОграничениеТипа               = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
		Элементы.ЗаполнитьРеквизитыПоИННПрочие.Видимость = Не Объект.ОбособленноеПодразделение;
		Элементы.КПППрочие.Видимость                     = ДоступенКПП(Форма);
		Элементы.ЗаполнитьРеквизитыПоНаименованиюПрочие.Видимость = Не Объект.ОбособленноеПодразделение;
		Элементы.ВидГосударственногоОргана.Видимость     = Объект.ГосударственныйОрган;
		Элементы.КодГосударственногоОргана.Видимость     = Объект.ГосударственныйОрган;
		Элементы.ГоловнойКонтрагент.Видимость            = Объект.ОбособленноеПодразделение;
		
		Элементы.НадписьПоясненияНекорректногоИННПрочие.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиИНН);
		Элементы.НадписьПоясненияНекорректногоКПППрочие.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиКПП);
		Элементы.НадписьПояснениеПроверкиДублейФНСПрочие.Видимость = Не ПустаяСтрока(Форма.НадписьПояснениеПроверкиДублейФНС);
		Элементы.ГруппаСкрываемыеДанные.Видимость = Истина;
	Иначе
		Элементы.ИННЮрФизЛица.ОграничениеТипа               = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
		Элементы.ЗаполнитьРеквизитыПоИННЮрФизЛица.Видимость = НЕ КонтрагентФизическоеЛицо ИЛИ Объект.ИндивидуальныйПредприниматель
																ИЛИ Форма.Вид = "ИндивидуальныйПредприниматель";
		Элементы.КППЮрФизЛица.Видимость                     = ДоступенКПП(Форма);
		Элементы.ЗаполнитьРеквизитыПоНаименованиюЮрФизЛица.Видимость = КонтрагентЗарегистрированВРФ
			И Не КонтрагентФизическоеЛицо
			И Не Объект.ОбособленноеПодразделение;
		Элементы.НадписьПоясненияНекорректногоИНН.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиИНН);
		Элементы.НадписьПоясненияНекорректногоКПП.Видимость  = Не ПустаяСтрока(Форма.РезультатПроверкиКПП);
		Элементы.НадписьПояснениеПроверкиДублейФНС.Видимость = Не ПустаяСтрока(Форма.НадписьПояснениеПроверкиДублейФНС);  
		Элементы.ГруппаСкрываемыеДанные.Видимость = Ложь;
	КонецЕсли;
	
	УстанивитьТекущуюСтраницу(Форма);
	
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = Не Форма.ИспользоватьРазделениеПоОбластямДанных 
		И Форма.АдресныйКлассификаторПуст;
	
	Если КонтрагентФизическоеЛицо Тогда
		Элементы.ИННЮрФизЛица.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИННЮрФизЛица.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИННЮрФизЛица.ПодсказкаВвода       = НСтр("ru = 'Введите ИНН'");
		Элементы.Банк.ПодсказкаВвода               = НСтр("ru = 'Введите БИК или наименование банка'");
	Иначе 
		// Юридическое лицо
		Элементы.ИННЮрФизЛица.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИННЮрФизЛица.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИННПрочие.ОтображениеПодсказки    = ОтображениеПодсказки.Авто;

		Если Объект.ОбособленноеПодразделение Тогда
			Элементы.ИННПрочие.ПодсказкаВвода    = НСтр("ru = 'ИНН головного контрагента'");
		Иначе
			Элементы.ИННЮрФизЛица.ПодсказкаВвода = НСтр("ru = 'Введите ИНН'");
			Элементы.ИННПрочие.ПодсказкаВвода    = НСтр("ru = 'Введите ИНН'");
		КонецЕсли;
		
		Элементы.Банк.ПодсказкаВвода = НСтр("ru = 'Введите БИК или наименование банка'");

	КонецЕсли;
	
	Элементы.ГруппаОсновнойБанковскийСчет.Видимость = Форма.ПоказыватьБанковскийСчет;
	
	Если Форма.ПоказыватьБанковскийСчет Тогда
		БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(Форма, Форма.ЯвляетсяБанкомРФ);
		
		//Видимость банковских реквизитов
		Элементы.ВалютаДенежныхСредств.Видимость = Не Форма.ЯвляетсяБанкомРФ И ЗначениеЗаполнено(Форма.БанковскийСчет.Банк);
		Элементы.ПодсказкаБанк.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаБанк);
		Элементы.ПодсказкаНомерСчета.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаНомерСчета);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КодГосударственногоОргана.Имя);
	
	ГруппаОтбораКодГосударственногоОргана = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКодГосударственногоОргана.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГосударственныйОрган");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыГосударственныхОрганов.Прочий;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КодГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Если ПоказыватьБанковскийСчет Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьЭлементСНеуникальнымИННЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
		// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	
	Возврат КонтрагентыФормыКлиентСервер.ЭтоИНН(СтрокаИНН);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенКПП(Форма)
	
	Возврат КонтрагентыФормыКлиентСервер.ДоступенКПП(Форма);
	
КонецФункции

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	КонтрагентыФормы.УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагентовВФорме()
	
	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП)
	
	КонтрагентОбъект = РеквизитФормыВЗначение("Объект");

	ЭтотОбъект.НадписьПоясненияНекорректногоИНН = "";
	ЭтотОбъект.НадписьПоясненияНекорректногоКПП = "";
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	СохранитьРезультатПроверки = Не ТолькоПросмотр;
	
	ТекстПредставленияИННКПП = НСтр("ru = '%1
									|%2'");
	Если ПроверитьИНН Тогда
		
		РезультатПроверки  = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Объект.ИНН, ЭтоЮрЛицо);
		ОшибокПоИННнет = РезультатПроверки.СоответствуетТребованиям;
		ТекстОшибкиИНН     = РезультатПроверки.ОписаниеОшибки;
		
		Если Не ТолькоПросмотр Тогда
			Объект.ИННВведенКорректно          = ПустаяСтрока(ТекстОшибкиИНН) И ОшибокПоИННнет;
			Объект.РасширенноеПредставлениеИНН = СтрШаблон(ТекстПредставленияИННКПП, Объект.ИНН, ТекстОшибкиИНН);
		КонецЕсли;
		
		РезультатПроверкиИНН = Справочники.Контрагенты.ПроверитьИНН(КонтрагентОбъект, СохранитьРезультатПроверки);
	КонецЕсли;
	
	Если ПроверитьКПП Тогда
		
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(Объект.КПП, ЭтоЮрЛицо, Объект.ОбособленноеПодразделение);
		
		Если Не ТолькоПросмотр Тогда
			Объект.КППВведенКорректно = РезультатПроверки.СоответствуетТребованиям;
			Объект.РасширенноеПредставлениеКПП = СтрШаблон(ТекстПредставленияИННКПП, Объект.КПП, РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
		
		РезультатПроверкиКПП = Справочники.Контрагенты.ПроверитьКПП(КонтрагентОбъект, СохранитьРезультатПроверки);
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		РезультатПроверкиНаДубли = Справочники.Контрагенты.ПроверитьДубли(КонтрагентОбъект);
	КонецЕсли;
	
	ОтобразитьРезультатПроверкиКонтрагентовВФорме();
	
	ПроверкаКонтрагентовПоИННКППВозможна = (Объект.СтранаРегистрации = Справочники.СтраныМира.Россия) 
		И Объект.ИННВведенКорректно 
		И (Объект.КППВведенКорректно Или Не ЭтоЮрЛицо)
		И Не Объект.Самозанятый;
		
	ЗначениеВРеквизитФормы(КонтрагентОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ТолькоПросмотр Тогда
		РезультатПроверкиНаДубли = КонтрагентыФормыВызовСервера.ПроверитьДубли(Объект);
	КонецЕсли;
	
	ОтобразитьРезультатПроверкиКонтрагентовВФорме();
	
	// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
	
	КонтрагентыФормыКлиент.ОбработатьСитуациюВыбораДубля(ЭтотОбъект, Элемент, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагента()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
		ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПоказатьДубли" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьСитуациюВыбораДубля(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИННПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		
		ЭтоЮрЛицо = СтрДлина(Объект.ИНН) = 10;
	
		Если ЭтоЮрЛицо Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
		
		Если ЭтоЮрЛицо 
			И (Вид = "ИндивидуальныйПредприниматель"
				ИЛИ Вид = "ФизическоеЛицо"
				ИЛИ Вид = "Самозанятый"
				ИЛИ НЕ ЗначениеЗаполнено(Вид)) Тогда
				
				Вид = "ЮридическоеЛицо";
				ПриИзмененииВидаКонтрагента(Объект.ИНН);
				
		ИначеЕсли Не ЭтоЮрЛицо
				И (Вид = "ЮридическоеЛицо"
				ИЛИ Вид = "Государственный орган"
				ИЛИ НЕ ЗначениеЗаполнено(Вид)) Тогда
				
				Вид = "ИндивидуальныйПредприниматель";
				ПриИзмененииВидаКонтрагента(Объект.ИНН);
				
		КонецЕсли;
			
	ИначеЕсли Вид = "ЮридическоеЛицо"
			ИЛИ Вид = "Государственный орган"
			ИЛИ НЕ ЗначениеЗаполнено(Вид) Тогда
				
				Вид = "ФизическоеЛицо";
				ПриИзмененииВидаКонтрагента(Объект.ИНН);
				
	КонецЕсли;
	
	ПроверитьИННКППДубли(Истина, Ложь);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
	
	ПроверитьИНН = Ложь;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	ПриИзмененииВидаКонтрагента();
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УправлениеФормой(ЭтотОбъект);
	
	СброситьРазмерыИПоложениеОкна();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаКонтрагента(Знач ИНН = Неопределено)
	
	КонтрагентыФормы.ПриИзмененииВидаКонтрагента(Объект, Вид);
	Если ЗначениеЗаполнено(ИНН) Тогда
		Объект.ИНН = ИНН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыНаСервере(ДополнительныеПараметры.АдресРеквизитовКонтрагента, ДополнительныеПараметры.ПроверитьИНН);
		
		Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
			// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
			ЗапуститьПроверкуКонтрагента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ИННОбъекта = СокрП(Объект.ИНН);

	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ДанныеДляЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ВыполнитьЗаполнениеРеквизитовПоИННЗавершение",
			ЭтотОбъект,
			ИННОбъекта);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "kontragent";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ДанныеДляЗаполнения.ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	ИначеЕсли ДанныеДляЗаполнения.Свойство("ЮридическоеФизическоеЛицо") 
		И ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо 
		И Не Параметры.Ключ.Пустая() Тогда
		
		ЭтоЮрЛицо = (ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru='Заполнить по ИНН %1 %2?'"),
			?(ЭтоЮрЛицо, НСтр("ru = 'юридического лица'"), НСтр("ru = 'предпринимателя'")),
			ДанныеДляЗаполнения.НаименованиеКонтрагента);
			
		ДополнительныеПараметры = Новый Структура("АдресРеквизитовКонтрагента, ПроверитьИНН", ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, Истина);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ДанныеДляЗаполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
		ЗаполнитьРеквизитыНаСервере(ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, Истина)
	КонецЕсли;
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ЗапуститьПроверкуКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		Объект.ИНН = СтрокаИНН;
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения) 
	
	Если ПустаяСтрока(ТекстЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		
		ЭтоЮрЛицо = (СтрДлина(ТекстЗаполнения) = 10);
	
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Объект.ОбособленноеПодразделение = Ложь;
		
		РезультатВыполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, ЭтоЮрЛицо);
		
		Если РезультатВыполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
			ЗаполнитьРеквизитыНаСервере(РезультатВыполнения.АдресРеквизитовКонтрагента, Истина);
		КонецЕсли;
		
	Иначе
		Объект.НаименованиеПолное = ТекстЗаполнения;
		Объект.Наименование = КонтрагентыФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(Объект.НаименованиеПолное);
	КонецЕсли;
	
	ТекстЗаполнения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ЭтотОбъект, ДопПараметры.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) 
		Или ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН();
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма) Экспорт
	
	Если Форма.ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент = Ложь;
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
			Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(ИмяРеквизита)
	
	Если ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресКонтрагента" Тогда
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
		УправлениеКонтактнойИнформациейБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
			ЭтотОбъект,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЮрАдресаКонтрагента(Форма)
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат Не АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Истина);
	
	СкрываемыеВиды = Новый Массив;
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);

	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаЮридическийАдресКонтрагента";
	ПараметрыРазмещенияКонтактнойИнформации.РазмещеныНаФорме = РазмещеныНаФорме;
	ПараметрыРазмещенияКонтактнойИнформации.СкрываемыеВиды = СкрываемыеВиды;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;

	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("Пользователь", ИмяПользователя));
		Пока Выборка.Следующий()Цикл
			Если Найти(Выборка.КлючОбъекта, "Справочник.Контрагенты.Форма.ФормаНовогоЭлемента") = 0 Тогда
				Продолжить;
			КонецЕсли;
			ХранилищеСистемныхНастроек.Удалить(
				Выборка.КлючОбъекта, Строка(Выборка.Настройки), ИмяПользователя);
		КонецЦикла;
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНаСервере(АдресРеквизитовКонтрагента, ПроверитьИНН)
	
	РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	
	Если РеквизитыКонтрагента.Свойство("ВидИП")
		И НЕ Объект.ИндивидуальныйПредприниматель Тогда
		
		Вид = "ИндивидульныйПредприниматель";
		Объект.ИндивидуальныйПредприниматель = Истина;
		ВидПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> РеквизитыКонтрагента.ЮридическоеФизическоеЛицо Тогда
		
		Если РеквизитыКонтрагента.Свойство("ВидИП") Тогда
			Вид = "ИндивидульныйПредприниматель";
			Объект.ИндивидуальныйПредприниматель = Истина;
		ИначеЕсли РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Вид = "ЮридическоеЛицо";
			Объект.ИндивидуальныйПредприниматель = Ложь;
		Иначе
			Вид = "ФизическоеЛицо"; 
			Объект.ИндивидуальныйПредприниматель = Ложь;
		КонецЕсли;
		
		ВидПриИзмененииНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
	ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УдалитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	РеквизитыКонтрагента = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН)
	
	Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо Тогда
		
		Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Вид = "ЮридическоеЛицо";
		Иначе
			Вид = "ИндивидуальныйПредприниматель";
		КонецЕсли;

		ПриИзмененииВидаКонтрагента();
	
	КонецЕсли;
	
	ЭтоЮрЛицо = (РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	
	// Заполнение истории наименований по данным ЕГРН
	ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюНаименований(Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮрЛицо Тогда
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		// Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И Не ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;

			ФИОДолжность = Новый Массив;
			ФИОДолжность.Добавить(ДанныеКонтактногоЛица.Фамилия);
			ФИОДолжность.Добавить(ДанныеКонтактногоЛица.Имя);
			
			Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Отчество) Тогда
				ФИОДолжность.Добавить(ДанныеКонтактногоЛица.Отчество);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Должность) Тогда
				ФИОДолжность.Добавить(",");
				ФИОДолжность.Добавить(ДанныеКонтактногоЛица.Должность);
			КонецЕсли;

			ПредставлениеКонтактногоЛица = СтрСоединить(ФИОДолжность, " ");
			
		КонецЕсли;
		
		Если ДоступенКПП(ЭтотОбъект) Тогда
			// Заполнение истории КПП по данным ЕГРН
			ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюКПП(Объект, РеквизитыКонтрагента);
		КонецЕсли;
		
		// Заполнение истории юр. адресов по данным ЕГРН
		ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюАдресов(Объект, РеквизитыКонтрагента);
		
	Иначе
		
		Объект.КПП = "";
		
	КонецЕсли;
	
	// Проверим дубли
	ПроверитьИННКППДубли(ПроверитьИНН, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо)
	
	Возврат КонтрагентыФормы.ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
КонецФункции

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(Результат.ИмяРеквизита);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		
	Если РеквизитыПроверкиКонтрагентов.ФоновоеЗаданиеЗапущено Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ОсновнойБанковскийСчет
&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если Не БанковскийСчет.Ссылка.Пустая() И Не БанковскийСчетЗаблокирован Тогда
		Если Не КонтрагентыФормыВызовСервера.ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(
					БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, 
				НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	ОсновнойБанковскийСчетОбъект = КонтрагентыФормы.ПрочитатьОсновнойБанковскийСчет(Объект);
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(БанковскийСчет.Банк);
		ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если Не ЗначениеЗаполнено(ОбъектРегистрации.Ссылка) Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(Новый Структура("Владелец", ТекущийОбъект.Ссылка));
		КонецЕсли;
		
		ОбъектРегистрации.Валютный = (ОбъектРегистрации.ВалютаденежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ОбъектРегистрации.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(ОбъектРегистрации, НаименованиеБанка);
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПолноеПриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеПолное , Объект.ИсторияНаименований);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БанковскийСчет.Банк = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПодсказкуНомераСчета()
	
	Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(ТекущийТекстНомераСчета) Тогда
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиент.ПодсказкаВводаПоляНомерСчета(ТекущийТекстНомераСчета, БИКБанка);
	Иначе
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
		ТекущийТекстНомераСчета, БИКБанка, ЯвляетсяБанкомРФ, ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой"));
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаСоздания(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	БанковскийСчет.Банк = РезультатЗакрытия;
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(БанковскийСчет.Банк);
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		
		Если РеквизитыБанка.ЯвляетсяБанкомРФ Тогда 
			Форма.БИКБанка = РеквизитыБанка.Код;
		Иначе
			Форма.БИКБанка = РеквизитыБанка.СВИФТБИК;
		КонецЕсли;
		
		Форма.НаименованиеБанка = РеквизитыБанка.Наименование;
		Форма.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
		Форма.ЯвляетсяБанкомРФ = РеквизитыБанка.ЯвляетсяБанкомРФ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьИнформациюНадежностьБанков(Форма)
	
	Если Форма.ДеятельностьБанкаПрекращена
		Или Не ЗначениеЗаполнено(Форма.БИКБанка)
		Или Не Форма.ЯвляетсяБанкомРФ Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстанивитьТекущуюСтраницу(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ОбособленноеПодразделение
		Или Объект.ГосударственныйОрган Тогда
		Элементы.ГруппаВидыКонтрагентов.ТекущаяСтраница = Элементы.СтраницаПрочие;
	Иначе
		Элементы.ГруппаВидыКонтрагентов.ТекущаяСтраница = Элементы.СтраницаЮрФизЛица;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюНадежностьБанков()
	
	НадежностьБанковКлиент.ПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
