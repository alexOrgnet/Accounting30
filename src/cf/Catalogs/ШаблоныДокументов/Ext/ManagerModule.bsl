#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Формирует данные для публикации шаблонов в сервисе 1С:Кабинет сотрудника.
// Параметры:
// 		Ссылки - Масссив
// Возвращаемое значение:
// 		ТаблицаЗначений
//
Функция ДанныеШаблоновДокументовДляПубликации(Ссылки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоыДокументов.Ссылка КАК Шаблон,
	|	ШаблоыДокументов.Наименование КАК НаименованиеДокумента,
	|	ШаблоыДокументов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ШаблоыДокументов.МакетДокумента КАК МакетДокумента,
	|	ШаблоыДокументов.ТребуетсяСогласование КАК ТребуетсяСогласование,
	|	ШаблоыДокументов.ВАрхиве КАК ВАрхиве,
	|	ЕСТЬNULL(КодыДокументов.Код, """") КАК КодДокументаКадровогоМероприятия
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыДокументовКадровыхМероприятий КАК КодыДокументов
	|		ПО ШаблоыДокументов.КодДокументаКадровогоМероприятия = КодыДокументов.Ссылка
	|ГДЕ
	|	ШаблоыДокументов.Ссылка В(&СписокОтбора)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяПредопределенныхДанных";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("ДанныеМакета", 		Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("РазмерМакета", 		Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("УсловияОбластей", 	Новый ОписаниеТипов("Массив"));
	ТаблицаДанных.Колонки.Добавить("РеквизитыОбъектов", Новый ОписаниеТипов("Массив"));
	ТаблицаДанных.Колонки.Добавить("НеВыгружать", 		Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		// Макет табличного документа
		ДанныеМакетаДокумента = СтрокаДанных.МакетДокумента.Получить();
		Если ДанныеМакетаДокумента = Неопределено Тогда
			СтрокаДанных.НеВыгружать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ДанныеМакетаДокумента.Области.Найти("Бланк") = Неопределено Тогда
			ДанныеМакетаДокумента.Область(1, , ДанныеМакетаДокумента.ВысотаТаблицы, ).Имя = "Бланк";
		КонецЕсли;
		
		Для НомерСтроки = 1 По ДанныеМакетаДокумента.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ДанныеМакетаДокумента.ШиринаТаблицы Цикл
				ОбластьЯчейки = ДанныеМакетаДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ОбластьЯчейки.Заполнение <> ТипЗаполненияОбластиТабличногоДокумента.Текст Тогда
					ПреобразоватьВШаблон = ОбластьЯчейки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьЯчейки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					Если ПреобразоватьВШаблон Тогда
						ОбластьЯчейки.Текст = СтрШаблон("[%1]", ОбластьЯчейки.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПотокЗаписи = Новый ПотокВПамяти;
		ДанныеМакетаДокумента.Записать(ПотокЗаписи);
		ДвоичныеДанныеМакета = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
		
		СтрокаДанных.ДанныеМакета = Base64Строка(ДвоичныеДанныеМакета);
		СтрокаДанных.РазмерМакета = ДвоичныеДанныеМакета.Размер();
		
		// Условия областей
		НастройкиШаблона = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		Справочники.ШаблоныДокументов.КлючВариантаОтчета(СтрокаДанных.Шаблон.УникальныйИдентификатор()));
		
		УсловияОбластей = Новый Массив;
		Настройки = НастройкиШаблона.Настройки;
		Если Настройки <> Неопределено Тогда
			Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					ОписаниеУсловий = ОписаниеУсловийВыводаОбластей();
					ОписаниеУсловий.Имя 	= ?(СтрНачинаетсяС(ЭлементОтбора.Представление, "<") , "", ЭлементОтбора.Представление);
					ОписаниеУсловий.Условия = КоллекцияОтборовОбласти(ЭлементОтбора.Элементы);
					УсловияОбластей.Добавить(ОписаниеУсловий);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияОбластей) Тогда
			СтрокаДанных.УсловияОбластей = УсловияОбластей;
		КонецЕсли;
		
		// Реквизиты объектов
		РеквизитыОбъектов = Новый Массив;
		Для Каждого ДанныеПараметра Из НастройкиШаблона.СхемаКомпоновкиДанных.Параметры Цикл
			РеквизитыОбъектов.Добавить(ОписаниеРеквизитаШаблонаДокументов(ДанныеПараметра));
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РеквизитыОбъектов) Тогда
			СтрокаДанных.РеквизитыОбъектов = РеквизитыОбъектов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляСервиса

Функция КоллекцияОтборовОбласти(УсловияВыводаОбласти)
	
	КоллекцияОтборов = Новый Массив;
	Для Каждого ЭлементОтбора Из УсловияВыводаОбласти Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОписаниеЭлемента = ОписаниеОбъектаЭлементаОтбора();
			ОписаниеЭлемента.ЭтоГруппа 	= Истина;
			ОписаниеЭлемента.ТипГруппы 	= ЭлементОтбора.ТипГруппы;
			ОписаниеЭлемента.Элементы 	= КоллекцияОтборовОбласти(ЭлементОтбора.Элементы);
		Иначе
			ОписаниеЭлемента = ОписаниеУсловияВыводаОбласти();
			ОписаниеЭлемента.ЭтоГруппа 			= Ложь;
			ОписаниеЭлемента.ЛевоеЗначение 		= Строка(ЭлементОтбора.ЛевоеЗначение);
			ОписаниеЭлемента.ВидСравнения 		= ЭлементОтбора.ВидСравнения;
			ОписаниеЭлемента.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение;
			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				ТипЗначения = ТипЗнч(ЭлементОтбора.ПравоеЗначение);
				Если ТипЗначения = Тип("Строка") Тогда
					СловаСтроки = СтрРазделить(ЭлементОтбора.ПравоеЗначение, ".");
					Если СловаСтроки.Количество() = 2 Тогда
						Если СловаСтроки[0] = "reasons" Тогда
							ОписаниеЭлемента.ПравоеЗначение = СловаСтроки[1];
							ОписаниеЭлемента.ТипСсылочногоЗначения = "reasons";
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					ОписаниеЭлемента.ТипСсылочногоЗначения = ТипЗначения;
				ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
					МассивЭлементов = Новый Массив;
					Для каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
						Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
							МассивЭлементов.Добавить(ЭлементСписка.Значение);
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(МассивЭлементов) Тогда
						ОписаниеЭлемента.ПравоеЗначение = МассивЭлементов;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КоллекцияОтборов.Добавить(ОписаниеЭлемента);
	КонецЦикла; 
	
	Возврат КоллекцияОтборов;
	
КонецФункции

Функция ОписаниеУсловийВыводаОбластей()
	
	Возврат Новый Структура("Имя,Условия");

КонецФункции

Функция ОписаниеОбъектаЭлементаОтбора()

	Возврат Новый Структура("ЭтоГруппа,ТипГруппы,Элементы");

КонецФункции

Функция ОписаниеУсловияВыводаОбласти()
	
	Возврат Новый Структура("ЭтоГруппа,ЛевоеЗначение,ВидСравнения,ПравоеЗначение,ТипСсылочногоЗначения");
	
КонецФункции

Функция ОписаниеРеквизитаШаблонаДокументов(ДанныеРеквизита)
	
	ОписаниеРеквизита = Новый Структура("Имя,Представление,Тип");
	ОписаниеРеквизита.Имя 			= "ПараметрыДанных" + ДанныеРеквизита.Имя;
	ОписаниеРеквизита.Представление = ДанныеРеквизита.Заголовок;
	ОписаниеРеквизита.Тип 			= КадровыйЭДО.ТипЗначенияШаблонаДокументов(ДанныеРеквизита.ТипЗначения);
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

#КонецОбласти

Функция ДополнительныеПоляДокументов(СсылкаНаОбъект) Экспорт
	
	Возврат ДополнительныеПоляПредопределенных(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИмяПредопределенныхДанных"));
	
КонецФункции

Процедура ДобавитьПоляЗаместителей(ПоляДокумента)
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"Заместители",
		"ДанныеДокумента",
		Тип("Строка"),
		"",
		Истина);
	
КонецПроцедуры

Процедура ДобавитьПоляВложений(ПоляДокумента)
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"Вложения",
		"ДанныеДокумента",
		Тип("Строка"),
		"",
		Истина);
	
КонецПроцедуры

Процедура ДобавитьПолеДокумента(ПоляДокумента, ИмяПоля, ПутьКПолю, ТипЗначения, ЗначениеПоУмолчанию, ДоступноВУсловиях, ДоступныРеквизиты = Ложь, ДоступныеЗначения = Неопределено)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("ИмяПоля",				ИмяПоля);
	ОписаниеПоля.Вставить("ПутьКПолю",				ПутьКПолю + "." + ИмяПоля);
	ОписаниеПоля.Вставить("Тип",					Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения)));
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("ДоступноВУсловиях",		ДоступноВУсловиях);
	ОписаниеПоля.Вставить("ДоступныРеквизиты",		ДоступныРеквизиты);
	ОписаниеПоля.Вставить("ДоступныеЗначения", 		ДоступныеЗначения);
	
	ПоляДокумента.Добавить(ОписаниеПоля);
	
КонецПроцедуры

Функция ДанныеСсылкиШаблона(СсылкаНаШаблон) Экспорт
	
	ОбъектШаблона = СсылкаНаШаблон.ПолучитьОбъект();
	Возврат ДанныеОбъектаШаблона(ОбъектШаблона, СсылкаНаШаблон.УникальныйИдентификатор());
	
КонецФункции

Функция ДанныеОбъектаШаблона(ОбъектШаблона, ИдентификаторСсылки) Экспорт
	
	Возврат ДанныеШаблона(ОбъектШаблона.ВАрхиве, ОбъектШаблона.МакетДокумента.Получить(), ИдентификаторСсылки);
	
КонецФункции

Функция ДанныеШаблона(ВАрхиве, МакетДокумента, ИдентификаторСсылки)
	
	Настройки = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		КлючВариантаОтчета(ИдентификаторСсылки));
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Настройки", Настройки);
	ОписаниеДанных.Вставить("Макет", МакетДокумента);
	ОписаниеДанных.Вставить("ВАрхиве", ВАрхиве);
	
	Возврат ОписаниеДанных;
	
КонецФункции

Функция КлючВариантаОтчета(ИдентификаторСсылки) Экспорт
	
	Возврат "ШаблоныДокументов" + ИдентификаторСсылки;
	
КонецФункции

Функция ВариантОтчета(ИдентификаторСсылки, СоздатьЕслиНеНайден = Ложь) Экспорт
	
	КлючВариантаОтчета = КлючВариантаОтчета(ИдентификаторСсылки);
	ИдентификаторОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника);
	
	ВариантОтчета = ВариантыОтчетов.ВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета);
	Если ВариантОтчета = Неопределено И СоздатьЕслиНеНайден Тогда
		УстановитьПривилегированныйРежим(Истина);
		ВариантОтчета = НовыйВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ВариантОтчета;
	
КонецФункции

Функция НовыйВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета)
	
	СхемаКомпоновки = Отчеты.ШаблоныДокументовКабинетСотрудника.ПолучитьМакет("МакетКомпоновки");
	Настройки = СхемаКомпоновки.ВариантыНастроек["ПоУмолчанию"].Настройки;
	
	НастройкиВариантаОтчета = ЗарплатаКадрыОтчеты.НоваяСтруктураНастроекПечатнойФормы();
	НастройкиВариантаОтчета.Настройки = Настройки;
	
	ПредопределенныйВариант = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ИдентификаторОтчета);
	Запрос.УстановитьПараметр("КлючВарианта", "ПоУмолчанию");
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредопределенныеВариантыОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
		|ГДЕ
		|	ПредопределенныеВариантыОтчетов.Отчет = &Отчет
		|	И ПредопределенныеВариантыОтчетов.КлючВарианта = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредопределенныеВариантыОтчетов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредопределенныйВариант = Выборка.Ссылка;
	КонецЕсли;
	
	НовыйВариантОтчета = Справочники.ВариантыОтчетов.СоздатьЭлемент();
	НовыйВариантОтчета.Отчет = ИдентификаторОтчета;
	НовыйВариантОтчета.Настройки = Новый ХранилищеЗначения(НастройкиВариантаОтчета);
	НовыйВариантОтчета.КлючВарианта = КлючВариантаОтчета;
	НовыйВариантОтчета.Наименование = КлючВариантаОтчета;
	НовыйВариантОтчета.Описание = НСтр("ru = 'Содержит настройки для подготовки шаблона документа в 1С:Кабинет сотрудника (для служебного использования)'");
	НовыйВариантОтчета.ТолькоДляАвтора = Истина;
	НовыйВариантОтчета.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
	НовыйВариантОтчета.ПредопределенныйВариант = ПредопределенныйВариант;
	НовыйВариантОтчета.Записать();
	
	Возврат НовыйВариантОтчета.Ссылка;
	
КонецФункции

Функция ХешНастроек(ВАрхиве, МакетДокумента, ИдентификаторСсылки) Экспорт
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(
		ОбщегоНазначения.ЗначениеВСтрокуXML(
			ДанныеШаблона(ВАрхиве, МакетДокумента, ИдентификаторСсылки)));
КонецФункции

Процедура НачальноеЗаполнение(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		ВосстановитьВсе = Ложь;
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
		Если ПараметрыОбновления.Свойство("ВосстановитьВсе") Тогда
			ВосстановитьВсе = ПараметрыОбновления.ВосстановитьВсе;
		Иначе
			ВосстановитьВсе = Ложь;
			ПараметрыОбновления.Вставить("ВосстановитьВсе", ВосстановитьВсе);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Для Каждого ИмяПредопределенного Из Метаданные.Справочники.ШаблоныДокументов.ПолучитьИменаПредопределенных() Цикл
		Если МассивОбновленных.Найти(ИмяПредопределенного) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработкаЗавершена = Ложь;
		ВосстановитьПредопределенныйШаблонДокумента(ИмяПредопределенного, ПараметрыОбновления);
	КонецЦикла;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ВосстановитьПредопределенныйШаблонДокумента(ИмяПредопределенного, ПараметрыОбновления)
	
	Если ПараметрыОбновления = Неопределено Тогда
		ВосстановитьВсе = Ложь;
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
		Если ПараметрыОбновления.Свойство("ВосстановитьВсе") Тогда
			ВосстановитьВсе = ПараметрыОбновления.ВосстановитьВсе;
		Иначе
			ВосстановитьВсе = Ложь;
			ПараметрыОбновления.Вставить("ВосстановитьВсе", ВосстановитьВсе);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйОбъект = Истина;
	СсылкаСправочника = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ШаблоныДокументов." + ИмяПредопределенного);
	Если СсылкаСправочника = Неопределено Тогда
		ОбъектСправочника = Справочники.ШаблоныДокументов.СоздатьЭлемент();
		ОбъектСправочника.ИмяПредопределенныхДанных = ИмяПредопределенного;
		ИдентификаторСсылки = Новый УникальныйИдентификатор;
		СсылкаСправочника = Справочники.ШаблоныДокументов.ПолучитьСсылку(ИдентификаторСсылки);
		ОбъектСправочника.УстановитьСсылкуНового(СсылкаСправочника);
	Иначе
		НовыйОбъект = Ложь;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ШаблоныДокументов", "Ссылка", СсылкаСправочника) Тогда
			Возврат;
		КонецЕсли;
		ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
		ИдентификаторСсылки = СсылкаСправочника.УникальныйИдентификатор();
	КонецЕсли;
	
	ВариантОтчетаДокумента = ВариантОтчета(ИдентификаторСсылки);
	Если ВариантОтчетаДокумента <> Неопределено
		И Не ВосстановитьВсе Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		МассивОбновленных.Добавить(ИмяПредопределенного);
		Возврат;
	КонецЕсли;
	
	Если ИмяПредопределенного = "ЗапросСправки2НДФЛ" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Запрос справки 2-НДФЛ'");
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиПоОстаткамОтпуска" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Запрос справки по остаткам отпуска'");
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиСМестаРаботы" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Запрос справки с места работы'");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаКомпенсациюОтпуска" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Заявление на компенсацию отпуска'");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаНалоговыеВычеты" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Заявление на налоговые вычеты'");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаОтпуск" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Заявление на отпуск'");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаУдержаниеДСВ" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Заявление на удержание ДСВ'");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеОбИзмененииЛичныхДанных" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Заявление об изменении личных данных'");
	ИначеЕсли ИмяПредопределенного = "Отсутствие" Тогда
		ОбъектСправочника.Наименование = НСтр("ru = 'Отсутствие'");
	КонецЕсли;
	
	МакетДокумента = МакетПечатнойФормыПоУмолчанию(ИмяПредопределенного);
	ОбъектСправочника.МакетДокумента = Новый ХранилищеЗначения(МакетДокумента, Новый СжатиеДанных(9));
	
	Если ВариантОтчетаДокумента = Неопределено Тогда
		ИдентификаторОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника);
		ВариантОтчетаДокумента = НовыйВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета(ИдентификаторСсылки));
	КонецЕсли;
	ВариантОтчетаДокументаОбъект = ВариантОтчетаДокумента.ПолучитьОбъект();
	ВариантОтчетаДокументаОбъект.Настройки = Неопределено;
	ВариантОтчетаДокументаОбъект.ОбменДанными.Загрузка = Истина;
	ВариантОтчетаДокументаОбъект.Записать();
	
	Настройки = НастройкиВариантаОтчетаПоУмолчанию(КлючВариантаОтчета(ИдентификаторСсылки), ИмяПредопределенного);
	ЗарплатаКадрыОтчеты.ЗапомнитьНастройкиВариантаОтчета(ВариантОтчетаДокумента, Настройки);
	
	ОбъектСправочника.ХешНастроек = ХешНастроек(ОбъектСправочника.ВАрхиве, МакетДокумента, ИдентификаторСсылки);
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
	
	МассивОбновленных.Добавить(ИмяПредопределенного);
	Если Не НовыйОбъект Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Функция МакетПечатнойФормыПоУмолчанию(ИмяПредопределенного) Экспорт
	
	МакетыШаблонов = ПолучитьМакет("МакетыПредопределенныхВариантов");
	МакетДокумента = МакетыШаблонов.ПолучитьОбласть(ИмяПредопределенного);
	ИменаОбластей = Новый Массив;
	Для Каждого Область Из МакетДокумента.Области Цикл
		ИменаОбластей.Добавить(Область.Имя);
	КонецЦикла;
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		Область = МакетДокумента.Области.Найти(ИмяОбласти);
		Область.Имя = СтрЗаменить(ИмяОбласти, ИмяПредопределенного, "");
	КонецЦикла;
	
	Возврат МакетДокумента;
	
КонецФункции

Функция НастройкиВариантаОтчетаПоУмолчанию(КлючВарианта, ИмяПредопределенного) Экспорт
	
	Настройки = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		КлючВарианта, Истина);
	
	ДополнитьНастрокиВариантаОтчета(
		Настройки,
		ДополнительныеПоляПредопределенных(ИмяПредопределенного),
		ВыбранныеПоляПредопределенных(ИмяПредопределенного),
		УсловияВыводаОбластей(ИмяПредопределенного));
	
	Возврат Настройки
	
КонецФункции

Функция ДополнительныеПоляПредопределенных(ИмяПредопределенного)
	
	ПоляДокумента = Новый Массив();
	Если ИмяПредопределенного = "ЗаявлениеНаОтпуск" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодОтпуска",
			"ДанныеДокумента",
			Тип("СтандартныйПериод"),
			,
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ЗаСвойСчет",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"КомпенсацияОтпуска",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДнейКомпенсацииОтпуска",
			"ДанныеДокумента",
			Тип("Число"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДнейКомпенсацииОтпускаСтрокой",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПредоставитьЕдиновременнуюВыплатуКОтпуску",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПредоставитьМатериальнуюПомощьПриОтпуске",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаНачала",
			"ДанныеДокумента.ПериодОтпуска",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаОкончания",
			"ДанныеДокумента.ПериодОтпуска",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПоляЗаместителей(ПоляДокумента);
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "Отсутствие" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодОтсутствия",
			"ДанныеДокумента",
			Тип("СтандартныйПериод"),
			,
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаНачала",
			"ДанныеДокумента.ПериодОтсутствия",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаОкончания",
			"ДанныеДокумента.ПериодОтсутствия",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВремяОтсутствия",
			"ДанныеДокумента",
			Тип("СтандартныйПериод"),
			,
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВремяНачала",
			"ДанныеДокумента.ВремяОтсутствия",
			Тип("Дата"),
			,
			Ложь);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВремяОкончания",
			"ДанныеДокумента.ВремяОтсутствия",
			Тип("Дата"),
			,
			Ложь);
		
		СписокПричин = Новый СписокЗначений;
		СписокПричин.Добавить("reasons.personalReason", НСтр("ru = 'Личные обстоятельства'"));
		СписокПричин.Добавить("reasons.late", НСтр("ru = 'Опоздание'"));
		СписокПричин.Добавить("reasons.illness", НСтр("ru = 'Болезнь'"));
		СписокПричин.Добавить("reasons.businessTrip", НСтр("ru = 'Командировка'"));
		СписокПричин.Добавить("reasons.studyLeave", НСтр("ru = 'Учебный отпуск'"));
		СписокПричин.Добавить("reasons.timeOff", НСтр("ru = 'Отгул'"));
		СписокПричин.Добавить("reasons.maternityLeave", НСтр("ru = 'Отпуск по беременности и родам'"));
		СписокПричин.Добавить("reasons.parentalLeave", НСтр("ru = 'Отпуск по уходу за ребенком'"));
		СписокПричин.Добавить("reasons.invalidChildCare", НСтр("ru = 'Уход за ребенком инвалидом'"));
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Причина",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина,
			Ложь,
			СписокПричин);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"СправкаВторогоРодителяПриложена",
			"ДанныеДокумента",
			Тип("Булево"),
			,
			Ложь,
			Ложь);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"СведенияОбОтсутствииСправкиВторогоРодителя",
			"ДанныеДокумента",
			Тип("Строка"),
			,
			Ложь,
			Ложь);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"КоличествоЛистовПриложений",
			"ДанныеДокумента",
			Тип("Число"),
			,
			Ложь,
			Ложь);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДнейОтсутствия",
			"ДанныеДокумента",
			Тип("Число"),
			,
			Ложь,
			Ложь);
		
		ДобавитьПоляЗаместителей(ПоляДокумента);
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗапросСправки2НДФЛ" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодСправки",
			"ДанныеДокумента",
			Тип("СтандартныйПериод"),
			,
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаНачала",
			"ДанныеДокумента.ПериодСправки",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаОкончания",
			"ДанныеДокумента.ПериодСправки",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Назначение",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
			
		ДобавитьПоляВариантовПолучения(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиПоОстаткамОтпуска" Тогда
		ДобавитьПоляВариантовПолучения(ПоляДокумента);
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиСМестаРаботы" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВидСправки",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
			
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Назначение",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
			
		ДобавитьПоляВариантовПолучения(ПоляДокумента);
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаКомпенсациюОтпуска" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДнейКомпенсацииОтпуска",
			"ДанныеДокумента",
			Тип("Число"),
			0,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДнейКомпенсацииОтпускаСтрокой",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаНалоговыеВычеты" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"МесяцСоздания",
			"ДанныеДокумента",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"МесяцПрименения",
			"ДанныеДокумента",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Организация",
			"ДанныеДокумента",
			Тип("СправочникСсылка.Организации"),
			Неопределено,
			Ложь);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ЛичныйВычет",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВычетыПоУведомлениям",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВычетыНаНедвижимость",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВычетыНаЛечение",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВычетыНаОбучение",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВычетыНаДетей",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"РодствоВШапке",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ЕдинственныйРодитель",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Опекун",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодПредоставленияВычетовВШапке",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодПредоставленияВычетов",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"КоличествоДетей",
			"ДанныеДокумента",
			Тип("Число"),
			0,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"НомерСтроки",
			"ДанныеДокумента.Дети",
			Тип("Число"),
			0,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ФИОПолные",
			"ДанныеДокумента.Дети",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаРождения",
			"ДанныеДокумента.Дети",
			Тип("Дата"),
			'00010101',
			Истина);
		
		СписокЗначенийПеречисления = Новый СписокЗначений;
		СписокЗначенийПеречисления.Добавить("childSeniority.1", НСтр("ru = 'Первый'"));
		СписокЗначенийПеречисления.Добавить("childSeniority.2", НСтр("ru = 'Второй'"));
		СписокЗначенийПеречисления.Добавить("childSeniority.3", НСтр("ru = 'Третий и последующие'"));
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"СтаршинствоРебенка",
			"ДанныеДокумента.Дети",
			Тип("Строка"),
			"",
			Истина,
			Ложь,
			СписокЗначенийПеречисления);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"РебенокИнвалид",
			"ДанныеДокумента.Дети",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ЕдинственныйРодитель",
			"ДанныеДокумента.Дети",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Опекун",
			"ДанныеДокумента.Дети",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Размер",
			"ДанныеДокумента.Дети",
			Тип("Число"),
			0,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаОкончанияПрименения",
			"ДанныеДокумента.Дети",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ПериодПредоставленияВычетов",
			"ДанныеДокумента.Дети",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Комментарий",
			"ДанныеДокумента.Дети",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаУдержаниеДСВ" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"РазмерУдержанияПроцент",
			"ДанныеДокумента",
			Тип("Число"),
			0,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"РазмерУдержанияСумма",
			"ДанныеДокумента",
			Тип("Число"),
			0,
			Истина);
		
		СписокЗначенийПеречисления = Новый СписокЗначений;
		СписокЗначенийПеречисления.Добавить("calculationMethod.percentage", НСтр("ru = 'Процент от заработка'"));
		СписокЗначенийПеречисления.Добавить("calculationMethod.fixedAmount", НСтр("ru = 'Постоянная сумма'"));
		СписокЗначенийПеречисления.Добавить("calculationMethod.percentageUpToAmount", НСтр("ru = 'Процент от заработка, но не более максимальной суммы'"));
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"СпособРасчета",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина,
			Ложь,
			СписокЗначенийПеречисления);
		
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеОбИзмененииЛичныхДанных" Тогда
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеФИО",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Фамилия",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Имя",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Отчество",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ФИОПолные",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеДокумента",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Представление",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина);
		
		СписокЗначенийПеречисления = Новый СписокЗначений;
		СписокЗначенийПеречисления.Добавить("identityDocumentType.passport", НСтр("ru = 'Паспорт'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.foreignPassport", НСтр("ru = 'Иностранный паспорт'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.residenceCard", НСтр("ru = 'Вид на жительство'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.identityCard", НСтр("ru = 'Удостоверение личности'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.residencePermission", НСтр("ru = 'Разрешение на проживание'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.militaryIdentityCard", НСтр("ru = 'Удостоверение личности военнослужащего'"));
		СписокЗначенийПеречисления.Добавить("identityDocumentType.other", НСтр("ru = 'Иной документ'"));
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Вид",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина,
			Ложь,
			СписокЗначенийПеречисления);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Серия",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"Номер",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ДатаВыдачи",
			"ДанныеДокумента.Документ",
			Тип("Дата"),
			'00010101',
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ВыдавшийОрган",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"КодВыдавшегоОргана",
			"ДанныеДокумента.Документ",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеСНИЛС",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"СНИЛС",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеИНН",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИНН",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеМобильногоТелефона",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"МобильныйТелефон",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеАдресаЭлектроннойПочты",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ЭлектроннаяПочта",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"ИзменениеАдреса",
			"ДанныеДокумента",
			Тип("Булево"),
			Ложь,
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"АдресРегистрации",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПолеДокумента(
			ПоляДокумента,
			"АдресМестаПроживания",
			"ДанныеДокумента",
			Тип("Строка"),
			"",
			Истина);
		
		ДобавитьПоляВложений(ПоляДокумента);
		
	ИначеЕсли ИмяПредопределенного = "" Тогда
		
		ДобавитьПоляВложений(ПоляДокумента);
		
	КонецЕсли;
	
	Возврат ПоляДокумента;
	
КонецФункции

Функция ДобавитьПоляВариантовПолучения(ПоляДокумента)
	
	СписокЗначенийПеречисления = Новый СписокЗначений;
	СписокЗначенийПеречисления.Добавить("obtainingMode.fileForPrinterOutput", НСтр("ru = 'Файл для вывода на принтер'"));
	СписокЗначенийПеречисления.Добавить("obtainingMode.scanWithSignatureAndStamp", НСтр("ru = 'Скан с подписью и печатью'"));
	СписокЗначенийПеречисления.Добавить("obtainingMode.fileWithElectronicSignature", НСтр("ru = 'Файл с электронной подписью'"));
	СписокЗначенийПеречисления.Добавить("obtainingMode.paperForm", НСтр("ru = 'В бумажном виде'"));
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"ВариантПолученияДокумента",
		"ДанныеДокумента",
		Тип("Строка"),
		"",
		Истина,
		Ложь,
		СписокЗначенийПеречисления);
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"ОтправитьНаЭлектроннуюПочту",
		"ДанныеДокумента",
		Тип("Булево"),
		Ложь,
		Истина);
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"ЭлектроннаяПочта",
		"ДанныеДокумента",
		Тип("Строка"),
		"",
		Истина);
	
	ДобавитьПолеДокумента(
		ПоляДокумента,
		"КоличествоЭкземпляров",
		"ДанныеДокумента",
		Тип("Число"),
		0,
		Истина);
	
КонецФункции

Функция ВыбранныеПоляПредопределенных(ИмяПредопределенного)
	
	ВыбранныеПоля = Новый Массив;
	Если ИмяПредопределенного = "ЗаявлениеНаОтпуск" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.Наименование");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ПериодОтпуска");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ДнейКомпенсацииОтпускаСтрокой");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Заместители");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
	ИначеЕсли ИмяПредопределенного = "Отсутствие" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.ВремяОтсутствия.ВремяОкончания");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ВремяОтсутствия");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ПериодОтсутствия.ДатаНачала");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ПериодОтсутствия");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Заместители");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ДнейОтсутствия");
		ВыбранныеПоля.Добавить("ДанныеСотрудника.Должность.РодительныйПадеж");
		ВыбранныеПоля.Добавить("ДанныеДокумента.СведенияОбОтсутствииСправкиВторогоРодителя");
		ВыбранныеПоля.Добавить("ДанныеДокумента.КоличествоЛистовПриложений");
	ИначеЕсли ИмяПредопределенного = "ЗапросСправки2НДФЛ" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.Назначение");
		ДобавитьВыбранныеПоляВариантовПолучения(ВыбранныеПоля);
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиПоОстаткамОтпуска" Тогда
		ДобавитьВыбранныеПоляВариантовПолучения(ВыбранныеПоля);
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиСМестаРаботы" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.ВидСправки");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Назначение");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
		ДобавитьВыбранныеПоляВариантовПолучения(ВыбранныеПоля);
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаКомпенсациюОтпуска" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.ДнейКомпенсацииОтпускаСтрокой");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаНалоговыеВычеты" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.Дети.НомерСтроки");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Дети.ФИОПолные");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Дети.СтаршинствоРебенка");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Дети.ПериодПредоставленияВычетов");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ПериодПредоставленияВычетов");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаУдержаниеДСВ" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.РазмерУдержанияПроцент");
		ВыбранныеПоля.Добавить("ДанныеДокумента.РазмерУдержанияСумма");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеОбИзмененииЛичныхДанных" Тогда
		ВыбранныеПоля.Добавить("ДанныеДокумента.Наименование");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ФИОПолные");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Документ.Представление");
		ВыбранныеПоля.Добавить("ДанныеДокумента.СНИЛС");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ИНН");
		ВыбранныеПоля.Добавить("ДанныеДокумента.МобильныйТелефон");
		ВыбранныеПоля.Добавить("ДанныеДокумента.ЭлектроннаяПочта");
		ВыбранныеПоля.Добавить("ДанныеДокумента.АдресРегистрации");
		ВыбранныеПоля.Добавить("ДанныеДокумента.АдресМестаПроживания");
		ВыбранныеПоля.Добавить("ДанныеДокумента.Вложения");
	КонецЕсли;
	
	Возврат ВыбранныеПоля;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВариантовПолучения(ВыбранныеПоля)
	ВыбранныеПоля.Добавить("ДанныеДокумента.ВариантПолученияДокумента");
	ВыбранныеПоля.Добавить("ДанныеДокумента.КоличествоЭкземпляров");
	ВыбранныеПоля.Добавить("ДанныеДокумента.ПериодСправки");
	ВыбранныеПоля.Добавить("ДанныеДокумента.ЭлектроннаяПочта");
КонецПроцедуры

Функция УсловияВыводаОбластей(ИмяПредопределенного)
	
	УсловияВывода = Новый Соответствие;
	Если ИмяПредопределенного = "ЗаявлениеНаОтпуск" Тогда
		ИмяОбласти = "ОтпускБезОплаты";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускБезОплатыЕдиновременнаяВыплата";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускБезОплатыМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускБезОплатыЕдиновременнаяВыплатаМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускСКомпенсацией";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускСКомпенсациейЕдиновременнаяВыплата";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускСКомпенсациейМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускСКомпенсациейЕдиновременнаяВыплатаМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Отпуск";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускЕдиновременнаяВыплата";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускЕдиновременнаяВыплатаМатериальнаяПомощь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЗаСвойСчет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КомпенсацияОтпуска"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаЗаместителей(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
		
	ИначеЕсли ИмяПредопределенного = "Отсутствие" Тогда
		ИмяОбласти = "Шапка";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				"reasons.invalidChildCare"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Опоздание";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.late"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ЛичныеОбстоятельства";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.personalReason"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Болезнь";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.illness"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Командировка";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.businessTrip"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "УчебныйОтпуск";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.studyLeave"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Отгул";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.timeOff"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускПоБеременностиИРодам";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.maternityLeave"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ОтпускПоУходуЗаРебенком";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.parentalLeave"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "УходЗаРебенкомИнвалидом";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.Равно,
				"reasons.invalidChildCare"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Подвал";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				"reasons.invalidChildCare"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаЗаместителей(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
		
		Условия = УсловияВывода.Получить("Комментарий");
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				"reasons.invalidChildCare"));
		
		Условия = УсловияВывода.Получить("Заместители");
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				"reasons.invalidChildCare"));
		
		Условия = УсловияВывода.Получить("Вложения");
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Причина"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				"reasons.invalidChildCare"));
		
	ИначеЕсли ИмяПредопределенного = "ЗапросСправки2НДФЛ" Тогда
		ДобавитьУсловияВыводаВариантаПолучения(УсловияВывода);
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиПоОстаткамОтпуска" Тогда
		ДобавитьУсловияВыводаВариантаПолучения(УсловияВывода);
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
	ИначеЕсли ИмяПредопределенного = "ЗапросСправкиСМестаРаботы" Тогда
		
		ИмяОбласти = "Текст";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВидСправки"),
				ВидСравненияКомпоновкиДанных.НеЗаполнено));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Назначение"),
				ВидСравненияКомпоновкиДанных.НеЗаполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстСНазначением";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВидСправки"),
				ВидСравненияКомпоновкиДанных.НеЗаполнено));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Назначение"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстВидСправки";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВидСправки"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Назначение"),
				ВидСравненияКомпоновкиДанных.НеЗаполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстВидСправкиСНазначением";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВидСправки"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Назначение"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаВариантаПолучения(УсловияВывода);
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаКомпенсациюОтпуска" Тогда
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаУдержаниеДСВ" Тогда
		
		ИмяОбласти = "ТекстСуммой";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.СпособРасчета"),
				ВидСравненияКомпоновкиДанных.Равно,
				"calculationMethod.fixedAmount"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстПроцентом";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.СпособРасчета"),
				ВидСравненияКомпоновкиДанных.Равно,
				"calculationMethod.percentage"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстПроцентомНоНеБольшеСуммы";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.СпособРасчета"),
				ВидСравненияКомпоновкиДанных.Равно,
				"calculationMethod.percentageUpToAmount"));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеОбИзмененииЛичныхДанных" Тогда
		
		ИмяОбласти = "ТекстФИО";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеФИО"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстДокумент";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Документ.Представление"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстСНИЛС";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеСНИЛС"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстИНН";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеИНН"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстТелефон";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеМобильногоТелефона"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстПочта";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеАдресаЭлектроннойПочты"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстАдресРегистрации";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеАдреса"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));         
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.АдресРегистрации"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстАдресПроживания";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ИзменениеАдреса"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.АдресМестаПроживания"),
				ВидСравненияКомпоновкиДанных.Заполнено));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
		
	ИначеЕсли ИмяПредопределенного = "ЗаявлениеНаНалоговыеВычеты" Тогда
		
		ИмяОбласти = "ТекстСтандартный";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЛичныйВычет"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстИмущественный";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыПоУведомлениям"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаНедвижимость"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстНаЛечение";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыПоУведомлениям"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаЛечение"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстНаОбразование";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыПоУведомлениям"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаОбучение"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаОдногоРебенка";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				1));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаОдногоРебенкаФИО";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаОдногоРебенкаФИОИнвалид";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетей";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИО";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалид";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОЕдинственныйРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидЕдинственныйРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИООпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидОпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОЕдинственныйОпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидЕдинственныйОпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОРодительПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидРодительПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОЕдинственныйРодительПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидЕдинственныйРодительПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИООпекунПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидОпекунПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОЕдинственныйОпекунПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "Строка_Дети_ТекстНаДетейФИОИнвалидЕдинственныйОпекунПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.РебенокИнвалид"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Дети.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстОпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстЕдинственныйРодитель";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Ложь));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстЕдинственныйОпекун";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.РодствоВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.Опекун"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ЕдинственныйРодитель"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстВычетПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ИмяОбласти = "ТекстВычетыПериод";
		Условия = Новый Массив;
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ВычетыНаДетей"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоДетей"),
				ВидСравненияКомпоновкиДанных.НеРавно,
				1));
		Условия.Добавить(
			Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				Новый ПолеКомпоновкиДанных("ДанныеДокумента.ПериодПредоставленияВычетовВШапке"),
				ВидСравненияКомпоновкиДанных.Равно,
				Истина));
		УсловияВывода.Вставить(ИмяОбласти, Условия);
		
		ДобавитьУсловияВыводаКомментария(УсловияВывода);
		ДобавитьУсловияВыводаВложений(УсловияВывода);
		
	КонецЕсли;
	Возврат УсловияВывода;
	
КонецФункции

Процедура ДобавитьУсловияВыводаВариантаПолучения(УсловияВывода)
	
	ИмяОбласти = "ФормаПредоставления";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоЭкземпляров"),
			ВидСравненияКомпоновкиДанных.Равно,
			0));
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.ОтправитьНаЭлектроннуюПочту"),
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
	
	ИмяОбласти = "ФормаПредоставленияКоличество";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоЭкземпляров"),
			ВидСравненияКомпоновкиДанных.Больше,
			0));
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.ОтправитьНаЭлектроннуюПочту"),
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
	
	ИмяОбласти = "ФормаПредоставленияКоличествоПочта";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоЭкземпляров"),
			ВидСравненияКомпоновкиДанных.Больше,
			0));
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.ОтправитьНаЭлектроннуюПочту"),
			ВидСравненияКомпоновкиДанных.Равно,
			Истина));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
	
	ИмяОбласти = "ФормаПредоставленияПочта";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.КоличествоЭкземпляров"),
			ВидСравненияКомпоновкиДанных.Равно,
			0));
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.ОтправитьНаЭлектроннуюПочту"),
			ВидСравненияКомпоновкиДанных.Равно,
			Истина));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
	
КонецПроцедуры

Процедура ДобавитьУсловияВыводаКомментария(УсловияВывода)
	ИмяОбласти = "Комментарий";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.Комментарий"),
			ВидСравненияКомпоновкиДанных.Заполнено));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
КонецПроцедуры

Процедура ДобавитьУсловияВыводаЗаместителей(УсловияВывода)
	ИмяОбласти = "Заместители";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.Заместители"),
			ВидСравненияКомпоновкиДанных.Заполнено));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
КонецПроцедуры

Процедура ДобавитьУсловияВыводаВложений(УсловияВывода)
	ИмяОбласти = "Вложения";
	Условия = Новый Массив;
	Условия.Добавить(
		Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("ДанныеДокумента.Вложения"),
			ВидСравненияКомпоновкиДанных.Заполнено));
	УсловияВывода.Вставить(ИмяОбласти, Условия);
КонецПроцедуры

Процедура ДополнитьНастрокиВариантаОтчета(НастройкиПечатнойФормы, ДополнительныеПоля, ВыбранныеПоля, УсловияВыводаОбластей)
	
	НаборДанных = НастройкиПечатнойФормы.СхемаКомпоновкиДанных.НаборыДанных[0];
	Для Каждого ДополнительноеПоле Из ДополнительныеПоля Цикл
		
		ПолеНабораДанных = НаборДанных.Поля.Найти(ДополнительноеПоле.ПутьКПолю);
		Если ПолеНабораДанных = Неопределено Тогда
			ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле			= ДополнительноеПоле.ИмяПоля;
			ПолеНабораДанных.ПутьКДанным	= ДополнительноеПоле.ПутьКПолю;
		КонецЕсли;
		ПолеНабораДанных.ТипЗначения	= ДополнительноеПоле.Тип;
		ПолеНабораДанных.ОграничениеИспользования.Условие = Не ДополнительноеПоле.ДоступноВУсловиях;
		ПолеНабораДанных.ОграничениеИспользования.Группировка = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Группировка = Истина;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Поле = Не ДополнительноеПоле.ДоступныРеквизиты;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Порядок = Истина;
		Если ЗначениеЗаполнено(ДополнительноеПоле.ДоступныеЗначения) Тогда
			ПолеНабораДанных.УстановитьДоступныеЗначения(ДополнительноеПоле.ДоступныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗарплатаКадрыОтчеты.ИнициализироватьИЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, НастройкиПечатнойФормы);
	
	Для Каждого ПутьКВыбранномуПолю Из ВыбранныеПоля Цикл
		НовоеПоле = КомпоновщикНастроекКД.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПутьКВыбранномуПолю);
	КонецЦикла;
	
	Для Каждого УсловияВывода Из УсловияВыводаОбластей Цикл
		
		ГруппаОбласти = КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОбласти.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОбласти.Представление = УсловияВывода.Ключ;
		
		Для Каждого ОписаниеУсловия Из УсловияВывода.Значение Цикл
			ЭлементОтбора = ГруппаОбласти.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеУсловия.ЛевоеЗначение);
			ЭлементОтбора.ВидСравнения = ОписаниеУсловия.ВидСравнения;
			ЭлементОтбора.ПравоеЗначение = ОписаниеУсловия.ПравоеЗначение;
		КонецЦикла;
		
	КонецЦикла;
	
	НастройкиПечатнойФормы.Настройки = КомпоновщикНастроекКД.Настройки;
	НастройкиПечатнойФормы.ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли