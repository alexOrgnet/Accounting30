#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Владелец) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции

Функция КонтактноеЛицоПоУмолчанию(Владелец) Экспорт

	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОсновноеКонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ОсновноеКонтактноеЛицо");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицо", ОсновноеКонтактноеЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КонтактныеЛица.Ссылка,
	|	ВЫБОР
	|		КОГДА КонтактныеЛица.Ссылка = &ОсновноеКонтактноеЛицо
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокСортировки
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();

КонецФункции

Функция СписокКонтактныхЛиц(Контрагент, ФИОКратко = Истина) Экспорт
	
	Список = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
		|	КонтактныеЛица.*
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.ОбъектВладелец = &Контрагент";
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		Представление = "";
		Если ЗначениеЗаполнено(РезультатЗапроса.Фамилия) Тогда

			Представление = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
				РезультатЗапроса.Фамилия, 
				РезультатЗапроса.Имя,
				РезультатЗапроса.Отчество,
				ФИОКратко);
				
			Если ЗначениеЗаполнено(РезультатЗапроса.Должность) Тогда
				Представление = Представление + ", " + РезультатЗапроса.Должность;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.Наименование) Тогда
			Представление = РезультатЗапроса.Наименование;
			Если ЗначениеЗаполнено(РезультатЗапроса.Должность) Тогда
				Представление = Представление + ", " + РезультатЗапроса.Должность;
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Представление) Тогда 
			Список.Добавить(РезультатЗапроса.Ссылка, Представление);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Список;

КонецФункции

// Ищет элемент справочника "КонтактныеЛица" по реквизитам ОбъектВладелец и Наименование.
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты - ссылка на ОбъектВладелец контактного лица
//   Наименование - Строка - наименование контактного лица.
//
// Возвращаемое значение:
//   СправочникСсылка.КонтактныеЛица - ссылка на найденный элемент справочника или Неопределено, если элемент не найден.
//
Функция НайтиКонтактноеЛицо(Контрагент, Наименование) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Наименование = &Наименование
	|	И КонтактныеЛица.ОбъектВладелец = &ОбъектВладелец";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ОбъектВладелец", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

// Создает элемент справочника "КонтактныеЛица".
//
// Параметры:
//   ПараметрыСоздания - Структура - Параметры создания контактного лица:
//       * ЗначенияЗаполнения - Структура - Параметры заполнения нового объекта.
//       * КонтактнаяИнформация - Массив - Массив структур для заполнения контактной информации объекта.
//
// Возвращаемое значение:
//   СправочникСсылка.КонтактныеЛица - ссылка на созданный элемент справочника.
//
Функция СоздатьКонтактноеЛицо(ПараметрыСоздания) Экспорт
	
	НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		НовыйОбъект.Заполнить(ПараметрыСоздания.ЗначенияЗаполнения);
	КонецЕсли;
	
	Если ПараметрыСоздания.Свойство("КонтактнаяИнформация") Тогда
		Для Каждого СтрокаКИ Из ПараметрыСоздания.КонтактнаяИнформация Цикл
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйОбъект, СтрокаКИ.Представление, СтрокаКИ.Вид);
		КонецЦикла;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

// Записывает контрагента в качестве владельца контактного лица.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка.КонтактныеЛица - контактное лицо для установки владельца
//   Контрагент - СправочникСсылка.Контрагенты - контрагент, который будет установлен в качестве владельца
//
Процедура УстановитьВладельцаКонтактногоЛица(КонтактноеЛицо, Контрагент) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо)
		Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентКонтакта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "ОбъектВладелец");
	Если КонтрагентКонтакта <> Контрагент Тогда
		КонтактноеЛицоОбъект = КонтактноеЛицо.ПолучитьОбъект();
		
		Попытка
			КонтактноеЛицоОбъект.Заблокировать();
			КонтактноеЛицоОбъект.ОбъектВладелец = Контрагент;
			КонтактноеЛицоОбъект.Записать();
			КонтактноеЛицоОбъект.Разблокировать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При записи владельца контактного лица произошла ошибка: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись владельца контактного лица'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.КонтактныеЛица,
				КонтактноеЛицо,
				ТекстСообщения);
				
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать владельца контактного лица. Возможно, уже открыта форма контактного лица.'"),
				КонтактноеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, КонтактноеЛицо);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЭтоАвторизованныйПользователь(ОбъектВладелец)
	|ИЛИ ЧтениеСпискаРазрешено(ОбъектВладелец ТОЛЬКО Справочник.Контрагенты)
	|	
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЭтоАвторизованныйПользователь(ОбъектВладелец)
	|ИЛИ ИзменениеСпискаРазрешено(ОбъектВладелец ТОЛЬКО Справочник.Контрагенты)
	|";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

Функция ЗаполнитьВидыКонтактнойИнформации() Экспорт
	
	ПредопределенныеВиды = Новый Массив;
	ПредопределенныеВиды.Добавить("АдресДляИнформированияКонтактныеЛица");
	ПредопределенныеВиды.Добавить("ТелефонМобильныйКонтактныеЛица");
	ПредопределенныеВиды.Добавить("ТелефонРабочийКонтактныеЛица");
	ПредопределенныеВиды.Добавить("EmailКонтактныеЛица");
	ПредопределенныеВиды.Добавить("ДругаяИнформацияКонтактныеЛица");
	
	Для Каждого ПредопределенныйВидКИ Из ПредопределенныеВиды Цикл
		
		ПараметрыВида = ОписаниеПредопределенногоВида(ПредопределенныйВидКИ);
		Если ЗначениеЗаполнено(ПараметрыВида) Тогда
			УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура УстановитьПризнакОтображатьВсегдаВидовКонтактнойИнформации() Экспорт
	
	НеобязательныеПредопределенныеВиды = Новый Массив;
	НеобязательныеПредопределенныеВиды.Добавить("АдресДляИнформированияКонтактныеЛица");
	НеобязательныеПредопределенныеВиды.Добавить("ТелефонРабочийКонтактныеЛица");
	НеобязательныеПредопределенныеВиды.Добавить("ДругаяИнформацияКонтактныеЛица");
	Для Каждого НеобязательныйВид Из НеобязательныеПредопределенныеВиды Цикл
		
		ПараметрыВида = ОписаниеПредопределенногоВида(НеобязательныйВид);
		Если ЗначениеЗаполнено(ПараметрыВида) Тогда
			УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

Функция ОписаниеПредопределенногоВида(ИмяВида)
	
	СсылкаНаВид = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации." + ИмяВида);
	Если Не ЗначениеЗаполнено(СсылкаНаВид) Тогда
		// Предопределенного элемента по какой-то причине нет, поэтому ничего не делаем, чтобы обработчик не упал.
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяВида = "АдресДляИнформированияКонтактныеЛица" Тогда
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		ПараметрыВида.Вид                               = СсылкаНаВид;
		ПараметрыВида.Наименование = НСтр("ru = 'Адрес для информирования'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 1;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
		ПараметрыВида.ОтображатьВсегда                  = Ложь;
		Возврат ПараметрыВида;
	КонецЕсли;
	
	Если ИмяВида = "ТелефонМобильныйКонтактныеЛица" Тогда
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		ПараметрыВида.Вид                               = СсылкаНаВид;
		ПараметрыВида.Наименование = НСтр("ru = 'Телефон мобильный'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 2;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
		Возврат ПараметрыВида;
	КонецЕсли;
	
	Если ИмяВида = "ТелефонРабочийКонтактныеЛица" Тогда
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		ПараметрыВида.Вид                               = СсылкаНаВид;
		ПараметрыВида.Наименование = НСтр("ru = 'Телефон рабочий'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 3;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
		ПараметрыВида.ОтображатьВсегда                  = Ложь;
		Возврат ПараметрыВида;
	КонецЕсли;
	
	Если ИмяВида = "EmailКонтактныеЛица" Тогда
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ПараметрыВида.Вид                               = СсылкаНаВид;
		ПараметрыВида.Наименование = НСтр("ru = 'Email'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.ВидРедактирования                 = "ПолеВвода";
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 4;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
		Возврат ПараметрыВида;
	КонецЕсли;
	
	Если ИмяВида = "ДругаяИнформацияКонтактныеЛица" Тогда
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления.ТипыКонтактнойИнформации.Другое);
		ПараметрыВида.Вид                               = СсылкаНаВид;
		ПараметрыВида.Наименование = НСтр("ru = 'Другое (любая другая контактная информация)'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.ВидРедактирования                 = "ПолеВвода";
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 5;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
		ПараметрыВида.ОтображатьВсегда                  = Ложь;
		Возврат ПараметрыВида;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Получает ссылку на элемент справочника с переданными свойствами.
// Если элемент с таким набором свойств отсутствует в справочнике,
// он автоматически создается.
//
// Параметры:
//  - Владелец - Ссылка - ссылка на элемент-владелец
//  - ДанныеЗаполнения  - структура свойств, которыми должен обладать
//                        элемент справочника. Элементы структуры:
//    - Должность - Строка - должность контактного лица
//    - Фамилия   - Строка - фамилия контактного лица
//    - Имя       - Строка - имя контактного лица
//    - Отчество  - Строка - отчество контактного лица
//
// Возвращаемое значение:
//  - Ссылка - ссылка на элемент справочника
//
Функция ПолучитьЭлемент(Владелец, ДанныеЗаполнения) Экспорт
	
	Должность = ДанныеЗаполнения.Должность;
	Фамилия   = ДанныеЗаполнения.Фамилия;
	Имя       = ДанныеЗаполнения.Имя;
	Отчество  = ДанныеЗаполнения.Отчество;
	
	Результат = ПустаяСсылка();
	
	// Поиск существующего контактного лица
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",  Владелец);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Фамилия",   Фамилия);
	Запрос.УстановитьПараметр("Имя",       Имя);
	Запрос.УстановитьПараметр("Отчество",  Отчество);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Владелец
	|	И КонтактныеЛица.Фамилия = &Фамилия
	|	И КонтактныеЛица.Имя = &Имя
	|	И КонтактныеЛица.Отчество = &Отчество
	|	И КонтактныеЛица.Должность = &Должность";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Если Результат.Пустая() Тогда
		НовоеКонтактноеЛицо = СоздатьЭлемент();
		НовоеКонтактноеЛицо.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		НовоеКонтактноеЛицо.ОбъектВладелец     = Владелец;
		НовоеКонтактноеЛицо.Должность          = Должность;
		НовоеКонтактноеЛицо.Фамилия            = Фамилия;
		НовоеКонтактноеЛицо.Имя                = Имя;
		НовоеКонтактноеЛицо.Отчество           = Отчество;
		НовоеКонтактноеЛицо.Наименование       = НовоеКонтактноеЛицо.Фамилия +
			" " + НовоеКонтактноеЛицо.Имя +
			" " + НовоеКонтактноеЛицо.Отчество +
			", " + НовоеКонтактноеЛицо.Должность;
		НовоеКонтактноеЛицо.Записать();
		
		Результат = НовоеКонтактноеЛицо.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли