#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значение функциональной опции 
// "ИспользоватьНесколькоОрганизацийБухгалтерскийУчет".
//
// Возвращаемое значение:
//     Булево - признак использования нескольких организаций.
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
КонецФункции

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(ИмяПользователяИБ = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		// По умолчанию берем основную организация пользователя.
		
		ОсновнаяОрганизация = ХранилищеОбщихНастроек.Загрузить("ОсновнаяОрганизация",,, ИмяПользователяИБ);
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			// Проверка наличия ссылки и прав доступа
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &ОсновнаяОрганизация";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// При включенном ограничении доступа на уровне записей, если у пользователя назначены права
		// доступа только к одной организации, то эта организация устанавливается в качестве основной
		Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяОрганизация"),, ЗначениеПоУмолчанию,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Ведется учет по единственной организации
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ НЕ Организации.ПометкаУдаления";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьНесколькоОрганизаций,,
					НСтр("ru = 'Исправлено некорректное значение константы ""Использовать несколько организаций""'"));
					
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru = 'Доступ к данным по организации ограничен. Обратитесь к администратору.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает перечень (фиксированный массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// Необходимо использовать этот метод и не допускать прямых вызовов ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация()
//
// Параметры:
// Организация - СправочникСсылка.Организации - головная организация.
// Период - Дата - дата, до которой необходимо исключить из выборки закрытые подразделения. Если указан Период,
//                 то в перечень не попадают обособленные подразделения закрытые до начала года.
//
// Возвращаемое значение:
//  ФиксированныйМассив Из СправочникСсылка.Организации - перечень структурных частей переданной головной организации
//
Функция ВсяОрганизация(Организация, Период = '00010101') Экспорт
	
	НачалоГода = НачалоГода(Период);
	Возврат ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация, НачалоГода);
	
КонецФункции

// Проверяет наличие хотя бы одной организации при ведении однофирменного учета.
//
Процедура ПроверитьНаличиеОрганизацииПриОднофирменномУчете(Организация) Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните реквизиты организации'") + Символы.ПС;
		
		Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
			
			ПутьКРазделу = НСтр("ru = '(раздел Главное - Реквизиты организации)'");
			
		Иначе
			
			ПутьКРазделу = НСтр("ru = '(раздел Главное - Организации)'");
			
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ПутьКРазделу;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает КПП организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//     ТолькоОсновнаяРегистрация - Булево - указание на то, что нужно выбрать КПП только основной регистрации
//
// Возвращаемое значение:
//     Строка - КПП.
//
Функция КППНаДату(Организация, ДатаСведений, ТолькоОсновнаяРегистрация = Ложь) Экспорт
	
	КППНаДату = "";
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат КППНаДату;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КПП, КрупнейшийНалогоплательщик, КрупнейшийНалогоплательщикКПП");
		КППНаДату = РеквизитыОбъекта.КПП;
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
		|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ДатаРегистрации
		|ИЗ
		|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
		|ГДЕ
		|	ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
		|	И ИсторияРегистраций.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияРегистраций.СтруктурнаяЕдиница
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП, """") КАК КПП
		|ИЗ
		|	ДатаРегистрации КАК ДатаРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
		|		ПО ДатаРегистрации.СтруктурнаяЕдиница = ИсторияРегистраций.СтруктурнаяЕдиница
		|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КППНаДату = Выборка.КПП;
		КонецЕсли;
		
		Если Не ТолькоОсновнаяРегистрация Тогда
			УчетОбособленныхПодразделений.УточнитьКППНаДату(КППНаДату, Организация, ДатаСведений);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат КППНаДату;
	
КонецФункции

// Функция возвращает массив для отбора по организации в запросах.
//
// Параметры:
//   Организация      – СправочникСсылка.Организации - Организация, выбранная в настройках
//   ПравоНаИзменение - Булево
//     - Истина - если после выполнения запроса данные бухгалтерии предполагается менять
//                и нужно проверить, что у пользователя есть право на изменение;
//     - Ложь   - если данные бухгалтерии только отображаются пользователю на чтение,
//                и нужно проверить что у него есть соответствующее право.
//   
// Возвращаемое значение:
//   Массив
//
Функция ДоступныеОрганизацииДляОтбора(Организация, ПравоНаИзменение = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Результат = ДоступныеОрганизации;
		
	ИначеЕсли ДоступныеОрганизации.Найти(Организация) <> Неопределено Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Возвращает табличный документ - карточку реквизитов организации.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на элементы справочника Организации
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  ИмяМакета - Строка - имя макета печатной формы
// 
// Возвращаемое значение:
//  ТабличныйДокумент - карточка реквизитов организации
//
Функция СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	ПервыйДокумент = Истина;
	
	Для каждого Организация Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЮЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ФЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
		БанковскийСчет = Неопределено;
		Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
			БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
				ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
				БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			Организация, ОбщегоНазначения.ТекущаяДатаПользователя(), БанковскийСчет);
		
		Разделитель = Макет.ПолучитьОбласть("Разделитель");
		
		Область = Макет.ПолучитьОбласть("Наименование");
		Область.Параметры.НаименованиеДляПечатныхФорм = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ТабличныйДокумент.Вывести(Область);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			Область = Макет.ПолучитьОбласть("ИНН");
			Область.Параметры.ИНН = СведенияОбОрганизации.ИНН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
			Область = Макет.ПолучитьОбласть("КПП");
			Область.Параметры.КПП = СведенияОбОрганизации.КПП;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРН");
			Область.Параметры.ОГРН = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРНИП");
			Область.Параметры.ОГРНИП = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КодПоОКПО) Тогда
			Область = Макет.ПолучитьОбласть("ОКПО");
			Область.Параметры.КодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.БИК) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчет) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Область = Макет.ПолучитьОбласть("РасчетныйСчет");
			Область.Параметры.НомерСчета = СведенияОбОрганизации.НомерСчета;
			Область.Параметры.БИК = СведенияОбОрганизации.БИК;
			Область.Параметры.КоррСчет = СведенияОбОрганизации.КоррСчет;
			Область.Параметры.Банк = СведенияОбОрганизации.Банк;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) 
			ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			ТабличныйДокумент.Вывести(Разделитель);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("ЮридическийАдрес");
			Область.Параметры.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("АдресИП");
			Область.Параметры.АдресИП = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			Область = Макет.ПолучитьОбласть("Телефон");
			Область.Параметры.Телефон = СведенияОбОрганизации.Телефоны;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоСерияНомер) И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоДатаВыдачи) Тогда
			Область = Макет.ПолучитьОбласть("Свидетельство");
			Область.Параметры.СвидетельствоСерияНомер = СведенияОбОрганизации.СвидетельствоСерияНомер;
			Область.Параметры.СвидетельствоДатаВыдачи = Формат(СведенияОбОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=D");
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ Тогда
			
			ДолжностьРуководителя = СведенияОбОрганизации.ДолжностьРуководителяПредставление;
			ФИОРуководителя = СокрЛП(СведенияОбОрганизации.РуководительФИО.Фамилия) + " " + 
				СокрЛП(СведенияОбОрганизации.РуководительФИО.Имя) + " " + 
				СокрЛП(СведенияОбОрганизации.РуководительФИО.Отчество);
			
			Если ЗначениеЗаполнено(ДолжностьРуководителя) И ЗначениеЗаполнено(ФИОРуководителя) Тогда
				Область = Макет.ПолучитьОбласть("Руководитель");
				Область.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
				Область.Параметры.ФИОРуководителя = ФИОРуководителя;
				ТабличныйДокумент.Вывести(Область);
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Организация);
		
	КонецЦикла;
	
	ТабличныйДокумент.ПолеСверху = 20;
	ТабличныйДокумент.ПолеСнизу = 20;
	ТабличныйДокумент.ПолеСлева = 20;
	ТабличныйДокумент.ПолеСправа = 20;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Организация_КарточкаОрганизации";
	
	Возврат ТабличныйДокумент;

КонецФункции

// Возвращает дату регистрации организации.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//
// Возвращаемое значение:
//     Дата - дата регистрации; если передана пустая организация, возвращается пустое значение типа "Дата".
//
Функция ДатаРегистрацииОрганизации(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
КонецФункции

// Возвращает регистрацию в налоговом органе на определенную дату
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - дата на кторую требуется полуить регистрацию.
// Возвращаемое значение:
//     РегистрацияВНалоговомОргане - ссылка на текущую регистрацию или пустая ссылка.
//
Функция РегистрацияВНалоговомОрганеНаДату(Организация, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
	|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистраций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистраций.СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане, Значение(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ДатаРегистрации КАК ДатаРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|		ПО ДатаРегистрации.СтруктурнаяЕдиница = ИсторияРегистраций.СтруктурнаяЕдиница
	|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РегистрацияВНалоговомОргане;
	Иначе
		Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Выполняет поиск организации по ИНН и КПП (если указан).
//
// Параметры:
//   ИНН - Строка - ИНН организации или индивидуального предпринимателя.
//   КПП - Строка - КПП организации.
//   БезОбособленныхПодразделений - Булево - исключает из поиска обособленные подразделения.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - ссылка на найденную организацию или ПустаяСсылка.
//
Функция НайтиОрганизацию(ИНН, КПП = Неопределено, БезОбособленныхПодразделений = Истина) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорыЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорыЗапроса.Отбор.Добавить("Организации.ИНН = &ИНН");
	
	Если КПП <> Неопределено И Не ПустаяСтрока(КПП) Тогда
		ОператорыЗапроса.Отбор.Добавить("Организации.КПП = &КПП");
	КонецЕсли;
	
	Если БезОбособленныхПодразделений Тогда
		ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ОбособленноеПодразделение");
	КонецЕсли;
	
	ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ПометкаУдаления");
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЭтоЮрЛицо(Организация) Экспорт
	
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	
	Возврат (ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);

КонецФункции

// Функция возвращает признак - является ли организация НКО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//   Истина - организация является некоммерческой
//   Ложь   - организация не является некоммерческой
//
Функция ЭтоНекоммерческаяОрганизация(Организация) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает описание организации для вывода в помощники.
// Включает в себя название организации и описание системы налогообложения.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Ссылка на организацию, для которой нужно получить описание.
//  Период		 - Дата - Дата, на которую нужно получить описание организации.
// 
// Возвращаемое значение:
//   - Строка - описание организации.
//
Функция ОписаниеОрганизацииДляПомощников(Организация, Период) Экспорт
	
	// Описание организации
	НастройкиНалогообложения = ПараметрыНалогообложенияДляОписанияОрганизации(Организация, Период);
	
	ЭтоЮрлицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	ЭтоИПБезСотрудников = НЕ ЭтоЮрлицо И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
	
	СтрокаОписание = "";
	
	// Система налогообложения
	НазваниеСистемы    = НСтр("ru = '<не указана>'");
	ОписаниеСовмещения = "";
	
	Если НастройкиНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		НазваниеСистемы = НСтр("ru = 'общая'");
	ИначеЕсли НастройкиНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Если НастройкиНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
			НазваниеСистемы = НСтр("ru = 'УСН (доходы минус расходы)'");
		Иначе
			НазваниеСистемы = НСтр("ru = 'УСН (доходы)'");
		КонецЕсли;
	ИначеЕсли НастройкиНалогообложения.ПрименяетсяОсобыйПорядокНалогообложения
		И НастройкиНалогообложения.ПлательщикЕНВД Тогда
		НазваниеСистемы = НСтр("ru = 'только деятельность на ЕНВД'");
	ИначеЕсли НастройкиНалогообложения.ПрименяетсяОсобыйПорядокНалогообложения
		И НастройкиНалогообложения.ПрименяетсяУСНПатент Тогда
		НазваниеСистемы = НСтр("ru = 'патентная'");
	ИначеЕсли НастройкиНалогообложения.ПрименяетсяАУСН Тогда
		НазваниеСистемы = НСтр("ru = 'Автоматизированная УСН'");
	КонецЕсли;
	
	// Совмещение
	Если НЕ НастройкиНалогообложения.ПрименяетсяОсобыйПорядокНалогообложения
		И НЕ НастройкиНалогообложения.ТолькоОсновнаяСистемаНалогообложения Тогда
		
		Если НастройкиНалогообложения.ПлательщикЕНВД И НастройкиНалогообложения.ПрименяетсяУСНПатент Тогда
			ОписаниеСовмещения = НСтр("ru = 'совместно с ЕНВД и патентной системой'");
		ИначеЕсли НастройкиНалогообложения.ПлательщикЕНВД Тогда
			ОписаниеСовмещения = НСтр("ru = 'совместно с ЕНВД'");
		ИначеЕсли НастройкиНалогообложения.ПрименяетсяУСНПатент Тогда
			ОписаниеСовмещения = НСтр("ru = 'совместно с патентной системой'");
		КонецЕсли;
		
		НазваниеСистемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), НазваниеСистемы, ОписаниеСовмещения);
		
	КонецЕсли;
	
	Если ЭтоЮрлицо = Истина Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Система налогообложения: %1.'"),
			НазваниеСистемы);
	КонецЕсли;
	
	// Для ИП необходимо указать наличие сотрудников.
	ОписаниеРаботодателя = ?(ЭтоИПБезСотрудников = Истина,
			НСтр("ru = 'Наемных работников нет'"),
			НСтр("ru = 'Есть наемные работники'"));
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Система налогообложения: %1. %2.'"),
		НазваниеСистемы,
		ОписаниеРаботодателя);
	
КонецФункции

// Заполняет юридический адрес организации, если он еще не заполнен.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   АдресПредставление - Строка - представление адреса.
//
Процедура ЗаполнитьПустойЮридическийАдресОрганизации(Организация, АдресПредставление) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	СохраненныйАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Организация, ВидКонтактнойИнформации);
	
	Если ПустаяСтрока(СохраненныйАдрес.Представление) Тогда
		АдресЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			АдресПредставление, ВидКонтактнойИнформации);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Организация, АдресЗначениеJSON, ВидКонтактнойИнформации, , Истина);
	КонецЕсли;
	
КонецПроцедуры

// Определяет наличие у организации обособленных подразделений (выделенных на отдельный баланс).
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево - Истина, если в информационной базе ведется учет
//           обособленных подразделений организации, выделенных на отдельный баланс
//
Функция ЕстьОбособленныеПодразделения(Организация) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Возврат ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация).Количество() > 1;
	
КонецФункции

// Возвращает дату начала ведения учета в ИБ по дате ввода остатков или дате первого проведенного документа
//
// Параметры:
// Организация - СправочникСсылка.Организация
//
// Возвращаемое значение:
// Дата или Неопределено, если учет по организации не велся
//
Функция ДатаНачалаВеденияУчета(Организация) Экспорт
	
	ОдинДень = 86400;
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат НачалоДня(ДатаВводаНачальныхОстатков + ОдинДень);
	КонецЕсли;
	
	ДатаПервогоПроведенногоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(Организация);
	Если ДатаПервогоПроведенногоДокумента <> Неопределено Тогда
		Возврат НачалоДня(ДатаПервогоПроведенногоДокумента);
	КонецЕсли;
	
КонецФункции

// Используется для получения ссылки на регистрацию в налоговом органе организации.
//
// Параметры:
//  Организация             - СправочникСсылка.Организации  - организация, для которой нужно получить регистрацию.
//  ДатаАктуальности        - Дата                          - дата, на которую необходимо получить регистрацию в НО.
// 
// Возвращаемое значение:
//  СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на существующую регистрацию, либо ПустаяСсылка().
//
Функция РегистрацияВНалоговомОргане(Организация, Знач ДатаАктуальности = Неопределено) Экспорт
	
	Возврат УчетЗарплаты.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности);
	
КонецФункции

// Возвращает код региона постановки организации на учет в налоговом органе.
//
// Параметры:
//  Организация  - СправочникСсылка.Организация - организация.
//  ДатаСведений - Дата - дата сведений о постановке на учет.
//
// Возвращаемое значение:
//  Строка - код региона.
//
Функция КодРегионаПоМестуРегистрации(Организация, Знач ДатаСведений = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	НалоговаяИнспекция = РегистрацияВНалоговомОрганеНаДату(Организация, ДатаСведений);
	КодНалоговойИнспекции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НалоговаяИнспекция, "Код");
	
	Возврат ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(КодНалоговойИнспекции);
	
КонецФункции

// Возвращает учредителей организации по данным учета
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, учредителей которой необходимо получить.
//  Период - Дата - дата, на которую требуется получить учредителей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - состав учредителей
//    * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - учредитель
//    * Наименование - Строка - имя учредителя
//    * ЭтоФизЛицо - Булево - является ли учредитель физическим или юридическим лицом
//
Функция УчредителиОрганизации(Организация, Знач Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Учредитель
	|ПОМЕСТИТЬ Учредители
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУставныйКапитал), &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.ФИО КАК Наименование,
	|	ИСТИНА КАК ЭтоФизЛицо
	|ИЗ
	|	Учредители КАК Учредители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Учредители.Учредитель = ФизическиеЛица.Ссылка
	|			И (Учредители.Учредитель ССЫЛКА Справочник.ФизическиеЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование,
	|	ЛОЖЬ
	|ИЗ
	|	Учредители КАК Учредители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Учредители.Учредитель = Контрагенты.Ссылка
	|			И (Учредители.Учредитель ССЫЛКА Справочник.Контрагенты)";
	
	ПериодНаКонецДня = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Период", ПериодНаКонецДня);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУставныйКапитал", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УставныйКапитал));
	Запрос.УстановитьПараметр("СубконтоУчредители", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает задолженность учредителей по оплате уставного капитала организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, задолженность перед которой необходимо получить.
//  Период - Дата - дата, на которую требуется получить задолженность.
//
// Возвращаемое значение:
//  ТаблицаЗначений - задолженность в разрезе учредителей
//    * Учредитель - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - учредитель
//    * СуммаДолиВРублях - Число - размер доли учредителя в рублях
//    * Задолженность - Число - долг учредителя
//
Функция ЗадолженностьУчредителей(Организация, Знач Период = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Учредитель,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаДолиВРублях
	|ПОМЕСТИТЬ СуммыДолейУчредителей
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУставныйКапитал), &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Учредитель,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Задолженность
	|ПОМЕСТИТЬ ЗадолженностьУчредителей
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетРасчетыПоВкладамВУставныйКапитал, &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыДолейУчредителей.Учредитель КАК Учредитель,
	|	СуммыДолейУчредителей.СуммаДолиВРублях КАК СуммаДолиВРублях,
	|	ЕСТЬNULL(ЗадолженностьУчредителей.Задолженность, 0) КАК Задолженность
	|ИЗ
	|	СуммыДолейУчредителей КАК СуммыДолейУчредителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьУчредителей КАК ЗадолженностьУчредителей
	|		ПО СуммыДолейУчредителей.Учредитель = ЗадолженностьУчредителей.Учредитель";
	
	ПериодНаКонецДня = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Период", ПериодНаКонецДня);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУставныйКапитал", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УставныйКапитал));
	Запрос.УстановитьПараметр("СчетРасчетыПоВкладамВУставныйКапитал", 
		ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	Запрос.УстановитьПараметр("СубконтоУчредители", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает коды и наименования согласно общероссийскому классификатору организационно-правовых форм
// и общероссийскому классификатору форм собственности
//
// Параметры:
//  ОрганизационноПравоваяФорма - Строка - наименование организационно-правовой формы
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * КодОКОПФ - код организационно-правовой формы
//   * НаименованиеОКОПФ - наименование организационно-правовой формы
//   * КодОКФС - код формы собственности
//   * НаименованиеОКФС - наименование формы собственности
Функция КодыСтатистикиПоОрганизационноПравовойФорме(ОрганизационноПравоваяФорма) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОКОПФ", "");
	Результат.Вставить("НаименованиеОКОПФ", "");
	Результат.Вставить("КодОКФС", "");
	Результат.Вставить("НаименованиеОКФС", "");
	
	Если НЕ ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Макет = Справочники.Организации.ПолучитьМакет("РеквизитыДляПодстановки");
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	ТаблицаПодстановки = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	СтрокаПодстановки = ТаблицаПодстановки.Найти(ВРег(ОрганизационноПравоваяФорма), "ПравоваяФорма");
	
	Если СтрокаПодстановки <> Неопределено Тогда
		Результат.КодОКОПФ          = СтрокаПодстановки.КодОКОПФ;
		Результат.НаименованиеОКОПФ = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКОПФ", СтрокаПодстановки.КодОКОПФ);
		Результат.КодОКФС           = СтрокаПодстановки.КодОКФС;
		Результат.НаименованиеОКФС  = ОрганизацииФормыДляОтчетностиВызовСервера.НаименованиеПоКлассификатору("ОКФС", СтрокаПодстановки.КодОКФС);
	Иначе
		// Ищем по наименованию в классификаторе ОКОПФ
		ПараметрыОКОПФ = Справочники.Организации.ПолучитьПараметрыФормыВыбораДляКода("ОКОПФ", ТекущаяДатаСеанса());
		ЗначениеОКОПФ  = ПараметрыОКОПФ.СписокКодов.Найти(ОрганизационноПравоваяФорма, "Наименование");
		Если ЗначениеОКОПФ <> Неопределено Тогда
			Результат.КодОКОПФ          = ЗначениеОКОПФ.Код;
			Результат.НаименованиеОКОПФ = ЗначениеОКОПФ.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик обновления информационной базы. Заполняет реквизит "СтатусФизическогоЛица" для элементов справочника
// "Организации", в случае если он не заполнен
//
Процедура ЗаполнитьСтатусыФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И Организации.СтатусФизическогоЛица = ЗНАЧЕНИЕ(Перечисление.СтатусыФизическихЛиц.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		ОрганизацияОбъект.СтатусФизическогоЛица = СтатусФизическогоЛица;
		
		НачальнаяИсторияСтатусов = ОрганизацияОбъект.ИсторияСтатусовФизическогоЛица.Добавить();
		НачальнаяИсторияСтатусов.Период = '00010101';
		НачальнаяИсторияСтатусов.СтатусФизическогоЛица = СтатусФизическогоЛица;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления информационной базы. Устанавливает значение функциональных опций "ИнтерфейсТаксиПростойИПиЮрЛица"
// и "ВозможенПереходНаУСН" для настройки видимости команд
//
Процедура СкрытьФункционалНедоступныйСамозанятым() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.СтатусФизическогоЛица <> ЗНАЧЕНИЕ(Перечисление.СтатусыФизическихЛиц.Самозанятый)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Константы.ИнтерфейсТаксиПростойИПиЮрЛица.Установить(Истина);
		ВозможенПереходНаУСН = Обработки.ПомощникПоПереходуНаУСН.ВозможенПереходНаУСН(Выборка.Ссылка);
		Константы.ВозможенПереходНаУСН.Установить(ВозможенПереходНаУСН);
		
	Иначе
		
		Константы.ИнтерфейсТаксиПростойИПиЮрЛица.Установить(Ложь);
		Константы.ВозможенПереходНаУСН.Установить(Ложь);
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает дату снятия организации с учета в налоговом органе
//
// Параметры:
//   Организация - СправочникСсылка.Организация - Организация.
//
// Возвращаемое значение:
//   Дата - дата закрытия; если передана пустая организация, возвращается пустое значение типа "Дата".
//
Функция ДатаЗакрытияОрганизации(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаЗакрытия");
	
КонецФункции

// Проверяет использование видов организаций, отсутствующих в тарифе абонента.
// 
// Возвращаемое значение:
//   Булево - Истина, если используются недоступные виды организаций
//
Функция ЕстьИспользуемыеВидыОрганизацийБезТарифа() Экспорт
	
	Для Каждого Описание Из ОписаниеВидовОрганизаций() Цикл
		
		Если Описание.Используется И Не Описание.ВходитВТариф Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает представления используемых видов организаций, отсутствующих в тарифе абонента.
//
// Возвращаемое значение:
//   Строка - перечисление через запятую используемых видов организаций
//
Функция ПредставленияИспользуемыхВидовОрганизацийБезТарифа() Экспорт
	
	ИспользуемыеВидыОрганизаций = Новый Массив;
	
	Для Каждого Описание Из ОписаниеВидовОрганизаций() Цикл
		
		Если Описание.Используется И Не Описание.ВходитВТариф Тогда
			ИспользуемыеВидыОрганизаций.Добавить(Описание.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	ИспользуемыеВидыОрганизаций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемыеВидыОрганизаций);
	
	ПредставлениеВидовОрганизаций = "";
	Для Индекс = 0 По ИспользуемыеВидыОрганизаций.ВГраница() Цикл
		Если Индекс = 0 Тогда
			ПредставлениеВидовОрганизаций = ИспользуемыеВидыОрганизаций[Индекс];
		ИначеЕсли Индекс = ИспользуемыеВидыОрганизаций.ВГраница() Тогда
			ПредставлениеВидовОрганизаций = СтрШаблон(НСтр("ru = '%1 и %2'"),
				ПредставлениеВидовОрганизаций, ИспользуемыеВидыОрганизаций[Индекс]);
		Иначе
			ПредставлениеВидовОрганизаций = СтрШаблон(НСтр("ru = '%1, %2'"),
				ПредставлениеВидовОрганизаций, ИспользуемыеВидыОрганизаций[Индекс]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредставлениеВидовОрганизаций;
	
КонецФункции

// Возвращает представления доступных изменений для видов организаций, отсутствующих в тарифе абонента.
//
// Параметры:
//   ВФормеОрганизации - Булево - Истина, если нужны представления для формы элемента справочника Организации.
//   ВФормеНедоступнаяФункциональность - Булево - Истина, если нужны представления для формы "Недоступная функциональность".
//
// Возвращаемое значение:
//   Строка - представления доступных изменений
//
Функция ПредставленияДоступныхИзмененийИспользуемыхВидовОрганизацийБезТарифа(ВФормеОрганизации = Ложь, ВФормеНедоступнаяФункциональность = Ложь) Экспорт

	ВидыИспользуемыхОрганизацийБезТарифа = Новый Массив;
	ВидыОрганизацийНаТарифе = Новый Массив;
	
	Для Каждого Описание Из ОписаниеВидовОрганизаций() Цикл
		
		Если Описание.Используется И Не Описание.ВходитВТариф Тогда
			ВидыИспользуемыхОрганизацийБезТарифа.Добавить(Описание.Имя);
		КонецЕсли;
		
		Если Описание.ВходитВТариф Тогда
			ВидыОрганизацийНаТарифе.Добавить(Описание.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеДоступныхИзменений = "";
	
	Для Каждого ВидОрганизации Из ВидыИспользуемыхОрганизацийБезТарифа Цикл
		
		Если (ВидОрганизации = "ИндивидуальныйПредприниматель" И ВидыОрганизацийНаТарифе.Найти("Самозанятый") <> Неопределено)
			Или (ВидОрганизации = "Самозанятый" И ВидыОрганизацийНаТарифе.Найти("ИндивидуальныйПредприниматель") <> Неопределено)
			Тогда
			Если ВФормеНедоступнаяФункциональность Тогда
				ПредставлениеДоступныхИзменений = НСтр("ru = '<a href=""%1"">измените Статус физического лица</a>'");
			ИначеЕсли ВФормеОрганизации Тогда
				ПредставлениеДоступныхИзменений = НСтр("ru = 'измените Статус физического лица'");
			Иначе
				ПредставлениеДоступныхИзменений = НСтр("ru = 'измените Статус физического лица в настройках организации'");
			КонецЕсли;
			Прервать;
		ИначеЕсли ВидыОрганизацийНаТарифе.Количество() > 0 Тогда
			Если ВидОрганизации = "ЮридическоеЛицо" Тогда
				Если ВФормеНедоступнаяФункциональность Тогда
					ПредставлениеДоступныхИзменений = НСтр("ru = '<a href=""%1"">введите ИНН физического лица и заполните реквизиты по ИНН</a>'");
				ИначеЕсли ВФормеОрганизации Тогда
					ПредставлениеДоступныхИзменений = НСтр("ru = 'введите ИНН физического лица и заполните реквизиты по ИНН'");
				Иначе
					ПредставлениеДоступныхИзменений = НСтр("ru = 'введите ИНН физического лица и заполните реквизиты по ИНН в настройках организации'");
				КонецЕсли;
			Иначе
				Если ВФормеНедоступнаяФункциональность Тогда
					ПредставлениеДоступныхИзменений = НСтр("ru = '<a href=""%1"">введите ИНН юридического лица и заполните реквизиты по ИНН</a>'");
				ИначеЕсли ВФормеОрганизации Тогда
					ПредставлениеДоступныхИзменений = НСтр("ru = 'введите ИНН юридического лица и заполните реквизиты по ИНН'");
				Иначе
					ПредставлениеДоступныхИзменений = НСтр("ru = 'введите ИНН юридического лица и заполните реквизиты по ИНН в настройках организации'");
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПредставлениеДоступныхИзменений) И ВФормеНедоступнаяФункциональность Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеДоступныхИзменений,
			ТарификацияБПКлиентСервер.ИмяДействияНастройкиОрганизации());
	Иначе
		Возврат ПредставлениеДоступныхИзменений;
	КонецЕсли;

КонецФункции

// Проверяет, если ли документы по организации по данным регистра Хозрасчетный.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьДокументыПоОрганизации(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапросаДокументыПоОрганизации = РезультатЗапросаДокументыПоОрганизации(Организация, Истина);
	
	Возврат Не РезультатЗапросаДокументыПоОрганизации.Пустой();

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ВыбраннаяФорма = "ФормаОрганизации";
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если Параметры.Свойство("Назначение") И Параметры.Назначение = "ДляОтчетности" Тогда
			// Эти формы предназначены только для записанного элемента справочника.
			// Формы не предназначены для обособленных подразделений.
			
			Если Параметры.Свойство("ПоискИННОтвет") Тогда
				// Если передаются данные ЕГР, то опредяеляем форму по этим данным.
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("ЮридическоеФизическоеЛицо", Параметры.ПоискИННОтвет.КраткиеДанные.ЮридическоеФизическоеЛицо);
				Реквизиты.Вставить("ОбособленноеПодразделение", Ложь);
			Иначе
				// Иначе определяем форму по данным ключа.
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Ключ,
					"ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
					
			КонецЕсли;
			
			Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ВыбраннаяФорма = "РеквизитыПредпринимателяДляОтчетности";
			ИначеЕсли Реквизиты.ОбособленноеПодразделение = Ложь Тогда
				ВыбраннаяФорма = "РеквизитыОрганизацииДляОтчетности";
			Иначе // в т.ч. свойства коллекции Реквизиты == Неопределено
				ВыбраннаяФорма = "ФормаОрганизации";
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			
			// Для интеграции с банком показываем форму организации для отчетности.
			ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ЮридическоеФизическоеЛицо");
			
			Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ВыбраннаяФорма = "РеквизитыПредпринимателяДляОтчетности";
			Иначе
				ВыбраннаяФорма = "РеквизитыОрганизацииДляОтчетности";
			КонецЕсли;
			
		Иначе
			
			ВыбраннаяФорма = "ФормаОрганизации";
			
		КонецЕсли;
		
	Иначе
		
		// Новая организация
		ВыбраннаяФорма = "ФормаВыбораСистемыНалогообложения";
		
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
			Параметры.Вставить("РежимПростогоИнтерфейса");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные картинки присоединенного файла к организации
//
// Параметры:
//  Организация - Ссылка на организацию, к которой присоединена картинка
//  ИмяРеквизита - Имя реквизита, который ссылается на нужную картинку
Функция ДвоичныеДанныеКартинкиОрганизации(Организация, ИмяРеквизита) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизита);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ФамилияИмяОтчествоПредпринимателя(Организация, Период) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат "";
	КонецЕсли;
	
	НаименованияОрганизции = Справочники.Организации.НаименованияНаДату(Организация, Период);
	
	Возврат НаименованияОрганизции.ФИО.Представление;
	
КонецФункции

Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

Функция ИспользуемыеВидыОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = Новый Структура();
	ВидыОрганизаций.Вставить("ЮридическоеЛицо", Ложь);
	ВидыОрганизаций.Вставить("ФизическоеЛицо",  Ложь);
	ВидыОрганизаций.Вставить("ИндивидуальныйПредприниматель", Ложь);
	ВидыОрганизаций.Вставить("Самозанятый", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ЮридическоеЛицо), ЛОЖЬ) КАК ЮридическоеЛицо,
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ФизическоеЛицо), ЛОЖЬ) КАК ФизическоеЛицо,
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ИндивидуальныйПредприниматель), ЛОЖЬ) КАК ИндивидуальныйПредприниматель,
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.Самозанятый), ЛОЖЬ) КАК Самозанятый
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЮридическоеЛицо,
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|					И Организации.СтатусФизическогоЛица = ЗНАЧЕНИЕ(Перечисление.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИндивидуальныйПредприниматель,
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|					И Организации.СтатусФизическогоЛица = ЗНАЧЕНИЕ(Перечисление.СтатусыФизическихЛиц.Самозанятый)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Самозанятый
	|	ИЗ
	|		Справочник.Организации КАК Организации) КАК ВидыОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВидыОрганизаций, Выборка);
	КонецЕсли;
	
	Возврат ВидыОрганизаций;
	
КонецФункции

Процедура ОбновитьИспользуемыеВидыОрганизаций(ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	ЕстьИзменения = Ложь;

	Если Константы.ВестиУчетИндивидуальногоПредпринимателя.Получить() <> ВидыОрганизаций.ФизическоеЛицо Тогда
		Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ВестиУчетЮридическогоЛица.Получить() <> ВидыОрганизаций.ЮридическоеЛицо Тогда
		Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ТребуетсяСоздатьПоставляемыеВидыНалогов И ЕстьИзменения Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

Функция КодыСтатистики(Объект) Экспорт
	
	ПравоваяФорма = ОрганизационноПравоваяФорма(Объект);
	Возврат КодыСтатистикиПоОрганизационноПравовойФорме(ПравоваяФорма);
	
КонецФункции

Функция ОрганизационноПравоваяФорма(Объект)
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат "ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ";
	ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ООО") Тогда
		Возврат "ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";
	ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ОАО") ИЛИ СтрНайти(Объект.НаименованиеСокращенное, "ПАО") Тогда
		Возврат "ОТКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
	ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ЗАО") ИЛИ СтрНайти(Объект.НаименованиеСокращенное, "АО") Тогда
		Возврат "НЕПУБЛИЧНОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство(ИмяРеквизитаОрганизация) Тогда
		ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию();
		ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОрганизацияПоУмолчанию);
		ДанныеЗаполнения.Вставить(ИмяРеквизитаОрганизация, ОрганизацияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьАдрес(ОбъектXDTO, АдресСтруктурой, ТекстОшибки)
	
	ПоляАдреса = Новый Структура;
	ПоляАдреса.Вставить("Индекс", "Почтовый индекс");
	ПоляАдреса.Вставить("Страна", "Страна");
	ПоляАдреса.Вставить("Регион", "Регион");
	ПоляАдреса.Вставить("Район", "Район");
	ПоляАдреса.Вставить("НаселенныйПункт", "Населенный пункт");
	ПоляАдреса.Вставить("Город", "Город");
	ПоляАдреса.Вставить("Улица", "Улица");
	ПоляАдреса.Вставить("Дом", "Дом");
	ПоляАдреса.Вставить("Корпус", "Корпус");
	ПоляАдреса.Вставить("Квартира", "Квартира");
	
	Для Каждого ПолеАдреса Из ПоляАдреса Цикл
		ЗначениеПоляАдреса = Неопределено;
		АдресСтруктурой.Свойство(ПолеАдреса.Ключ, ЗначениеПоляАдреса);
		
		Если ЗначениеЗаполнено(ЗначениеПоляАдреса) Тогда
			АдресноеПоле = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", "4.02");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Тип", ПолеАдреса.Значение, Истина, ТекстОшибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Значение", ЗначениеПоляАдреса, Истина, ТекстОшибки);
			ОбъектXDTO.АдресноеПоле.Добавить(АдресноеПоле);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация)
	
	БанковскийСчет = Неопределено;
	Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
		БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
			БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ,БанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	ВерсияСхемыCML = "4.02";
	Результат = Неопределено;
	
	Попытка
		
		КонтрагентXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "ИД", РеквизитыОрганизации.ИНН + "_"
			+ РеквизитыОрганизации.КПП, Истина, ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Наименование",
			РеквизитыОрганизации.СокращенноеНаименование, Истина, ТекстОшибки);
		
		ЭтоЮрЛицо = СтрДлина(РеквизитыОрганизации.ИНН) = 10;
		
		Если ЭтоЮрЛицо Тогда
			ЮрФизЛицоXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("РеквизитыЮрЛица", ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
				ЮрФизЛицоXDTO, "ОфициальноеНаименование", РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			Если СтрДлина(РеквизитыОрганизации.КПП) = 9 Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "КПП", РеквизитыОрганизации.КПП, , ТекстОшибки);
			Иначе
				ТекстОшибки = НСтр("ru='Ошибка при формировании карточки реквизитов: длина КПП не равна девяти знакам.'");
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("РуководительФИО") Тогда
				РуководительXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РуководительXDTO, "ИД",
					РеквизитыОрганизации.РуководительФИО.Представление, Истина, ТекстОшибки);
				ФизЛицоРуководительXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Контрагент.ФизЛицо", ВерсияСхемыCML);
				
				ФИОРуководителя = "";
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Фамилия) Тогда
					ФИОРуководителя = РеквизитыОрганизации.РуководительФИО.Фамилия + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Имя) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Имя + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Отчество) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Отчество;
				КонецЕсли;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "ПолноеНаименование", ФИОРуководителя, Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "Должность", РеквизитыОрганизации.ДолжностьРуководителяПредставление, Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					РуководительXDTO, "ФизЛицо", ФизЛицоРуководительXDTO, Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Руководитель", РуководительXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначениеJSONЮридическийАдрес") Тогда
					АдресСтруктурой = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(РеквизитыОрганизации.ЗначениеJSONЮридическийАдрес);
					РазобратьАдрес(АдресXDTO, АдресСтруктурой, ТекстОшибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ЮридическийАдрес", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИмяСвойства = "ЮрЛицо";
			
		Иначе
			ЮрФизЛицоXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("РеквизитыФизЛица", ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ПолноеНаименование",
				РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначениеJSONЮридическийАдрес") Тогда
					АдресСтруктурой = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(РеквизитыОрганизации.ЗначениеJSONЮридическийАдрес);
					РазобратьАдрес(АдресXDTO, АдресСтруктурой, ТекстОшибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "АдресРегистрации", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("СвидетельствоДатаВыдачи")
				И РеквизитыОрганизации.Свойство("СвидетельствоСерияНомер") Тогда
				СвидетельствоXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("РеквизитыФизЛица.Свидетельство",
					ВерсияСхемыCML);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "Номер", РеквизитыОрганизации.СвидетельствоСерияНомер, Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "ДатаВыдачи", РеквизитыОрганизации.СвидетельствоДатаВыдачи, Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Свидетельство", СвидетельствоXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			ИмяСвойства = "ФизЛицо";
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ИНН" , РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		Если СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 8 ИЛИ СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 10 Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ОКПО", РеквизитыОрганизации.КодПоОКПО, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ФактическийАдрес)Тогда
			АдресXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ФактическийАдрес,
				Истина, ТекстОшибки);
			Если РеквизитыОрганизации.Свойство("ЗначениеJSONФактическийАдрес") Тогда
				АдресСтруктурой = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(РеквизитыОрганизации.ЗначениеJSONФактическийАдрес);
				РазобратьАдрес(АдресXDTO, АдресСтруктурой, ТекстОшибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Адрес", АдресXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, ИмяСвойства, ЮрФизЛицоXDTO, Истина, ТекстОшибки);
		
		Если РеквизитыОрганизации.Свойство("Банк") И ЗначениеЗаполнено(РеквизитыОрганизации.Банк) Тогда
			РасчетныеСчетаXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемыCML);
			РасчетныйСчетXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
				РасчетныйСчетXDTO, "НомерСчета", РеквизитыОрганизации.НомерСчета, Истина, ТекстОшибки);
			БанкXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Банк", ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкXDTO, "БИК", РеквизитыОрганизации.БИК, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.КоррСчет) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
					БанкXDTO, "СчетКорреспондентский", РеквизитыОрганизации.КоррСчет, Истина, ТекстОшибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкXDTO, "Наименование", Строка(РеквизитыОрганизации.Банк),
				Истина, ТекстОшибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РасчетныйСчетXDTO, "Банк",БанкXDTO, Истина, ТекстОшибки);
			РасчетныеСчетаXDTO.РасчетныйСчет.Добавить(РасчетныйСчетXDTO);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(
				КонтрагентXDTO, "РасчетныеСчета", РасчетныеСчетаXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) ИЛИ ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
			КонтактнаяИнформацияXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			КонтактыXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Телефоны, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			КонтактнаяИнформацияXDTO = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Почта", Истина, ТекстОшибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Email, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Контакты", КонтактыXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		КонтрагентXDTO.Проверить();
		
		Если ТекстОшибки = "" Тогда
			ИмяФайла = РаботаСФайламиБЭД.ТекущееИмяВременногоФайла("xml");
			НоваяЗаписьXML = Новый ЗаписьXML;
			НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
			НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
			ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, КонтрагентXDTO, , , , НазначениеТипаXML.Явное);
			НоваяЗаписьXML.Закрыть();
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			УдалитьФайлы(ИмяФайла);
			
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ШаблонИмениФайла = Нстр("ru='Реквизиты %1.xml'");
			НаименованиеОрганизации = СтрЗаменить(РеквизитыОрганизации.Представление, """", "");
			ОписаниеФайла.Вставить("Представление", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
				НаименованиеОрганизации));
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресХранилища);
			Результат = ОписаниеФайла;
			
		Иначе
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
			ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование карточки организации'"),
				ТекстОшибки,
				ТекстОшибки);
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Формирование карточки организации'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует пакеты электронных документов стандарта CML 4.02
// 
// Параметры:
//  СведенияОбОрганизациях - Массив - массив сведений об организациях, см БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование карточки организации
//    * АдресВоВременномХранилище - Строка - адрес карточки организации XML во временном хранилище
//
Функция СформироватьКарточкиОрганизацииВXML(МассивОбъектов) Экспорт
	
	ФайлыКОтправке = Новый Массив;
	
	Для Каждого Организация Из МассивОбъектов Цикл
		СериализованнаяКарточка = ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация);
		Если СериализованнаяКарточка <> Неопределено Тогда
			ФайлыКОтправке.Добавить(СериализованнаяКарточка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФайлыКОтправке;
	
КонецФункции

#Область Печать

// Процедура формирования макета печати
//
Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюЮр"));
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюИП"));
	КонецЕсли;
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПомощникРаботыФаксимильнойПечати()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как быстро и просто создать факсимильную подпись и печать?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати, "ПомощникРаботыФаксимильнойПечати")
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реквизиты") Тогда
		
		СведенияОбОрганизациях = Новый Массив;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Реквизиты", 
			НСтр("ru='Реквизиты'"),
			СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, "Реквизиты"));
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказВступленииВДолжностьРуководителя") Тогда
		
		СведенияОбОрганизациях = Новый Массив;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПриказВступленииВДолжностьРуководителя", 
			НСтр("ru='Приказ о вступлении в должность руководителя'"),
			Обработки.РегистрацияОрганизации.СформироватьПриказОВступленииВДолжностьРуководителя(МассивОбъектов, ОбъектыПечати, "ПриказОВступленииВДолжностьРуководителя"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реквизиты организации
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реквизиты";
	КомандаПечати.Представление = НСтр("ru = 'Реквизиты'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеквизитовОрганизаций";
	КомандаПечати.СписокФорм    = "ФормаОрганизации,ФормаСписка";
	КомандаПечати.Порядок       = 1;
	
	Если Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации() Тогда
		
		// Приказ о вступлении в должность руководителя
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПриказВступленииВДолжностьРуководителя";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о вступлении в должность руководителя'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.СписокФорм    = "ФормаОрганизации,ФормаСписка";
		КомандаПечати.Порядок       = 10;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ЮридическоеФизическоеЛицо",
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Реквизиты";
	КомандаОтправки.Представление = НСтр("ru='Реквизиты'");
	КомандаОтправки.Порядок       = 10;
	
КонецПроцедуры

Функция ПодписиИПечатиОрганизации(Организация, ДатаСреза = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЧтениеОрганизацииРазрешено = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Ссылка", Истина));
	Если Не ЧтениеОрганизацииРазрешено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоЮридическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") 
		= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ДатаСреза);
	
	ДвоичныеДанныеФаксимиле = Неопределено;
	ДвоичныеДанныеПечать = Неопределено;
	ДвоичныеДанныеПодписьРуководителя = Неопределено;
	ДвоичныеДанныеПодписьГлавногоБухгалтера = Неопределено;
	ДвоичныеДанныеФаксимиле = Неопределено;
	
	Попытка
		ДвоичныеДанныеПечать = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлПечать");
		ДвоичныеДанныеПодписьРуководителя = УправлениеПечатьюБП.ДвоичныеДанныеФаксимилеФизическогоЛица(ОтветственныеЛицаОрганизации.Руководитель);
		
		Если ЭтоЮридическоеЛицо Тогда
			ДвоичныеДанныеПодписьГлавногоБухгалтера = УправлениеПечатьюБП.ДвоичныеДанныеФаксимилеФизическогоЛица(ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
		КонецЕсли;
		
		ДвоичныеДанныеФаксимиле = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлФаксимильнаяПечать");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	// Если установлены печать и подписи по отдельности, то используем именно их.    
	
	Если ЗначениеЗаполнено(ДвоичныеДанныеПечать)
		ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя)
		ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеПечать) Тогда
			Результат.Вставить("ФаксимилеПечать", Новый Картинка(ДвоичныеДанныеПечать));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
			
			Результат.Вставить("ФаксимилеРуководитель", Новый Картинка(ДвоичныеДанныеПодписьРуководителя));
			Результат.Вставить("ФаксимилеИсполнитель", Новый Картинка(ДвоичныеДанныеПодписьРуководителя));
			Результат.Вставить("ФаксимилеОтветственныйЗаОформление", Новый Картинка(ДвоичныеДанныеПодписьРуководителя));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
			Результат.Вставить("ФаксимилеГлавныйБухгалтер", Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДвоичныеДанныеФаксимиле) Тогда
		
		Результат.Вставить("ФаксимилеФаксимильнаяПечать", Новый Картинка(ДвоичныеДанныеФаксимиле));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БСП

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьЮрФизЛицо");
	МассивРеквизитов.Добавить("УдалитьКодИФНС");
	МассивРеквизитов.Добавить("УдалитьТерриториальныеУсловияПФР");
	МассивРеквизитов.Добавить("УдалитьРайонныйКоэффициентРФ");
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("ТолькоНациональныйАдрес", Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Юридический адрес'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.ВидРедактирования                 = "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Фактический адрес'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.ВидРедактирования                 = "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Почтовый адрес'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Учредительный адрес иностранной организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Телефон'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Факс'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Email'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Телефон по юридическому адресу'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 8;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Используется                      = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.Наименование = НСтр("ru = 'Другое'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 9;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ОчиститьКодНалоговогоОрганаПолучателя() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Организации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Организация Из Организации Цикл
		
		ОбъектОрганизаци = Организация.Ссылка.ПолучитьОбъект();
		
		Если ОбъектОрганизаци.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) Тогда
			
			ОбъектОрганизаци.КодНалоговогоОрганаПолучателя = "";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		ИначеЕсли ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) И  НЕ ОбъектОрганизаци.КрупнейшийНалогоплательщик Тогда
			
			ОбъектОрганизаци.КрупнейшийНалогоплательщик = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНаименованиеПлательщикаПриПеречисленииВБюджет() Экспорт
	
	// В версии 3.0.28.7 и ранее при редактировании организации в форме элемента поле НаименованиеПлательщикаПриПеречисленииВБюджет
	// могло быть ошибочно заполнено:
	// Объект.НаименованиеПлательщикаПриПеречисленииВБюджет	= Объект.НаименованиеСокращенное;
	
	// Это поле следует оставить по умолчанию пустым, для того, чтобы в случае изменения правил уплаты в бюджет 
	// достаточно было изменить алгоритм составления наименования, но не данные.
	// См. ПлатежиВБюджетКлиентСервер.НаименованиеПлательщикаИндивидуальногоПредпринимателя
	
	// В то же время, когда поле пустое, то в платежку может выводиться не сокращенное,
	// а полное наименование.
	// Чтобы в таких случаях поведение не изменилось (сохранилось сокращенное наименование),
	// следует учесть ВариантНаименованияДляПечатныхФорм.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ВариантНаименованияДляПечатныхФорм КАК ВариантНаименования,
	|	ВЫРАЗИТЬ(Организации.НаименованиеСокращенное КАК СТРОКА(160)) КАК НаименованиеСокращенное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(160)) КАК НаименованиеПолное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПлательщикаПриПеречисленииВБюджет КАК СТРОКА(160)) КАК НаименованиеВБюджет
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.НаименованиеПлательщикаПриПеречисленииВБюджет <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования <> ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеСокращенное = Организации.НаименованиеВБюджет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеПолное = Организации.НаименованиеВБюджет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.НаименованиеПлательщикаПриПеречисленииВБюджет = "";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемыеВидыОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
	Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьДатуРегистрацииИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.СвидетельствоДатаВыдачи
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|	И Организации.СвидетельствоДатаВыдачи <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДатаРегистрации = Выборка.СвидетельствоДатаВыдачи;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиФайлыОрганизацииВПрисоединенныеФайлы() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла ССЫЛКА Справочник.Организации
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		НачатьТранзакцию();
		
		СконвертированныеФайлы = РаботаСФайлами.СконвертироватьФайлыВПрисоединенные(ВыборкаОрганизации.ВладелецФайла);
		
		НеобходимоЗаписыватьОрганизацию = Ложь;
		
		ОрганизацияОбъект = ВыборкаОрганизации.ВладелецФайла.ПолучитьОбъект();
		
		Если СконвертированныеФайлы <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлЛоготип)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлЛоготип = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип);
				ОрганизацияОбъект.УдалитьФайлЛоготип = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлФаксимильнаяПечать = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать);
				ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлПечать)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПечать) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлПечать = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПечать);
				ОрганизацияОбъект.УдалитьФайлПечать = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьРуководителя)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьРуководителя) <> Неопределено Тогда
				ОрганизацияОбъект.УдалитьФайлПодписьРуководителя = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьРуководителя);
				ОрганизацияОбъект.УдалитьУдалитьФайлПодписьРуководителя = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьГлавногоБухгалтера)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьГлавногоБухгалтера) <> Неопределено Тогда
				ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьУдалитьФайлПодписьГлавногоБухгалтера);
				ОрганизацияОбъект.УдалитьУдалитьФайлПодписьГлавногоБухгалтера = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимоЗаписыватьОрганизацию Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиФайлыПодписантовВПрисоединенныеФайлы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.УдалитьФайлПодписьРуководителя КАК ПодписьРуководителя,
	|	Организации.УдалитьФайлПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	Организации.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Организации.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.УдалитьФайлПодписьРуководителя <> ЗНАЧЕНИЕ(Справочник.организацииПрисоединенныефайлы.ПустаяСсылка)
	|			ИЛИ Организации.УдалитьФайлПодписьГлавногоБухгалтера <> ЗНАЧЕНИЕ(Справочник.организацииПрисоединенныефайлы.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Организации.Организация КАК Организация,
	|	ЕСТЬNULL(ОрганизацииПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка)) КАК ПодписьРуководителя,
	|	ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка) КАК ПодписьГлавногоБухгалтера
	|ПОМЕСТИТЬ ВТ_Подписи
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|		ПО ВТ_Организации.Организация = ОрганизацииПрисоединенныеФайлы.ВладелецФайла
	|			И ВТ_Организации.ПодписьРуководителя = ОрганизацииПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Организации.Организация,
	|	ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка),
	|	ЕСТЬNULL(ОрганизацииПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка))
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|		ПО ВТ_Организации.Организация = ОрганизацииПрисоединенныеФайлы.ВладелецФайла
	|			И ВТ_Организации.ПодписьГлавногоБухгалтера = ОрганизацииПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК Организация,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			,
	|			СтруктурнаяЕдиница В
	|					(ВЫБРАТЬ
	|						ВТ_Организации.Организация
	|					ИЗ
	|						ВТ_Организации)
	|				И ВЫРАЗИТЬ(СтруктурнаяЕдиница КАК Справочник.Организации).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				И ОтветственноеЛицо В (ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Организации.ИндивидуальныйПредприниматель,
	|	ВТ_Организации.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации
	|ГДЕ
	|	ВТ_Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтветственныеЛица.Организация КАК Организация,
	|	ВТ_ОтветственныеЛица.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ФизическиеЛица.Ссылка КАК ФизческоеЛицо,
	|	ВЫБОР
	|		КОГДА ВТ_ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ВТ_Подписи.ПодписьРуководителя
	|		ИНАЧЕ ВТ_Подписи.ПодписьГлавногоБухгалтера
	|	КОНЕЦ КАК ФайлПодписи
	|ИЗ
	|	ВТ_ОтветственныеЛица КАК ВТ_ОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ВТ_ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подписи КАК ВТ_Подписи
	|		ПО ВТ_ОтветственныеЛица.Организация = ВТ_Подписи.Организация
	|			И (ВЫБОР
	|				КОГДА ВТ_ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|					ТОГДА ВТ_Подписи.ПодписьРуководителя <> ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка)
	|				ИНАЧЕ ВТ_Подписи.ПодписьГлавногоБухгалтера <> ЗНАЧЕНИЕ(Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка)
	|			КОНЕЦ)
	|ГДЕ
	|	ФизическиеЛица.ФаксимилеПодписи = ЗНАЧЕНИЕ(Справочник.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизческоеЛицо,
	|	ОтветственноеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ФайлПодписи) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			НачатьТранзакцию();
			
			ФизическоеЛицоОбъект = Выборка.ФизческоеЛицо.ПолучитьОбъект();
			ФизическоеЛицоОбъект.ФаксимилеПодписи = СкопироватьПрисоединенныйФайл(Выборка.ФайлПодписи, Выборка.ФизческоеЛицо);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФизическоеЛицоОбъект, Истина);
			
			ОрганизацияОбъект = Выборка.Организация.ПолучитьОбъект();
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				ОрганизацияОбъект.УдалитьФайлПодписьРуководителя       = Неопределено;
			Иначе
				ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера = Неопределено;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Истина);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СкопироватьПрисоединенныйФайл(ФайлИсточник, Знач ВладелецФайлов) Экспорт
	
	ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
	// Установить исключительную блокировку на файл-источник, 
	// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы.ПолноеИмя());
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлИсточникОбъект.Ссылка);
	БлокировкаДанных.Заблокировать();
	
	СсылкаНового = Справочники.ФизическиеЛицаПрисоединенныеФайлы.ПолучитьСсылку();
	ПрисоединенныйФайл = Справочники.ФизическиеЛицаПрисоединенныеФайлы.СоздатьЭлемент(); //ОпределяемыйТип.ПрисоединенныйФайлОбъект
	ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
	ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ФайлИсточникОбъект.ДатаМодификацииУниверсальная;
	ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
	
	ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
	ПрисоединенныйФайл.Изменил                      = ФайлИсточникОбъект.Автор;
	ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
	ПрисоединенныйФайл.ПодписанЭП                   = ФайлИсточникОбъект.ПодписанЭП;
	ПрисоединенныйФайл.Размер                       = ФайлИсточникОбъект.Размер;
	
	ПрисоединенныйФайл.Расширение                   = ФайлИсточникОбъект.Расширение;
	ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
	ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайлИсточникОбъект.ТипХраненияФайла;
	ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
	
	// Если файл хранится на томе - делается ссылка на существующий файл.
	ПрисоединенныйФайл.Том                          = ФайлИсточникОбъект.Том;
	ПрисоединенныйФайл.ПутьКФайлу                   = ФайлИсточникОбъект.ПутьКФайлу;
	
	Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.УдалитьСертификатыШифрования Цикл
		НоваяСтрока = ПрисоединенныйФайл.УдалитьСертификатыШифрования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
	КонецЦикла;
	
	ПрисоединенныйФайл.Заполнить(Неопределено);
	
	ПрисоединенныйФайл.Записать();
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвоичныеДанныеФайлов.Файл,
		|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл = &ФайлСсылка";
		
		Запрос.УстановитьПараметр("ФайлСсылка", ФайлИсточник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ХранилищеФайла = ?(Выборка.Следующий(), Выборка.ДвоичныеДанныеФайла, Неопределено);
		
		// Если двоичные данных файла отсутствуют в информационной базе, то пропускаем их перенос, но карточку файла оставляем.
		// Это возможно после выполнения очистки ненужных файлов или вследствие ошибок некорректного обмена или импорта.
		Если ХранилищеФайла <> Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Файл = СсылкаНового;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Файл = СсылкаНового;
			МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ХранилищеФайла.Получить(), Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ФайлИсточникОбъект.ПометкаУдаления = Истина;
	
	// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
	Если ФайлИсточникОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		ФайлИсточникОбъект.ПутьКФайлу = "";
		ФайлИсточникОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ФайлИсточникОбъект.ПутьКФайлу = "";
		ФайлИсточникОбъект.Том = "";
	КонецЕсли;
	
	ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
	ФайлИсточникОбъект.Записать();
	
	Возврат СсылкаНового;
	
КонецФункции

// Возвращает наименование организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//
// Возвращаемое значение:
//     Структура - СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм, ФИО.
//
Функция НаименованияНаДату(Организация, ДатаСведений) Экспорт
	
	НаименованияОрганизации = Новый Структура();
	НаименованияОрганизации.Вставить("СокращенноеНаименование", "");
	НаименованияОрганизации.Вставить("ПолноеНаименование", "");
	НаименованияОрганизации.Вставить("НаименованиеДляПечатныхФорм", "");
	НаименованияОрганизации.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", ""));
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат НаименованияОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияНаименованийОрганизаций.Период) КАК Период,
		|	ИсторияНаименованийОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|ГДЕ
		|	ИсторияНаименованийОрганизаций.Ссылка = &Организация
		|	И ИсторияНаименованийОрганизаций.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийОрганизаций.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияНаименованийОрганизаций.Ссылка.ВариантНаименованияДляПечатныхФорм КАК ВариантНаименованияДляПечатныхФорм,
		|	ИсторияНаименованийОрганизаций.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ИсторияНаименованийОрганизаций.НаименованиеПолное КАК НаименованиеПолное,
		|	ИсторияНаименованийОрганизаций.ФамилияИП,
		|	ИсторияНаименованийОрганизаций.ИмяИП,
		|	ИсторияНаименованийОрганизаций.ОтчествоИП
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийОрганизаций.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийОрганизаций.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияОрганизации.СокращенноеНаименование     = Выборка.НаименованиеСокращенное;
			НаименованияОрганизации.ПолноеНаименование          = Выборка.НаименованиеПолное;
			НаименованияОрганизации.НаименованиеДляПечатныхФорм = ?(Выборка.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование,
																		Выборка.НаименованиеПолное, Выборка.НаименованиеСокращенное);
			НаименованияОрганизации.ФИО.Фамилия  = Выборка.ФамилияИП;
			НаименованияОрганизации.ФИО.Имя      = Выборка.ИмяИП;
			НаименованияОрганизации.ФИО.Отчество = Выборка.ОтчествоИП;
			НаименованияОрганизации.ФИО.Представление = СокрЛП(СокрЛП(Выборка.ФамилияИП) + " " + СокрЛП(Выборка.ИмяИП) + " " + СокрЛП(Выборка.ОтчествоИП));
			Возврат НаименованияОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ВариантНаименованияДляПечатныхФорм, НаименованиеСокращенное, НаименованиеПолное, 
																				|ФамилияИП, ИмяИП, ОтчествоИП");
	НаименованияОрганизации.СокращенноеНаименование     = ЗначенияРеквизитов.НаименованиеСокращенное;
	НаименованияОрганизации.ПолноеНаименование          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияОрганизации.НаименованиеДляПечатныхФорм = ?(ЗначенияРеквизитов.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование, 
																ЗначенияРеквизитов.НаименованиеПолное, ЗначенияРеквизитов.НаименованиеСокращенное);
	НаименованияОрганизации.ФИО.Фамилия       = ЗначенияРеквизитов.ФамилияИП;
	НаименованияОрганизации.ФИО.Имя           = ЗначенияРеквизитов.ИмяИП;
	НаименованияОрганизации.ФИО.Отчество      = ЗначенияРеквизитов.ОтчествоИП;
	НаименованияОрганизации.ФИО.Представление = СокрЛП(СокрЛП(ЗначенияРеквизитов.ФамилияИП) + " " + СокрЛП(ЗначенияРеквизитов.ИмяИП) + " " + СокрЛП(ЗначенияРеквизитов.ОтчествоИП));
	
	Возврат НаименованияОрганизации;
	
КонецФункции

// Возвращает статус физического лица на указанную дату
//
// Параметры:
//   Организация - СправочникСсылка.Организация
//   ДатаСведений - Дата - дата, на которую нужно получить статус физического лица
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СтатусыФизическихЛиц
//
Функция СтатусФизическогоЛицаНаДату(Организация, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОрганизацииИсторияСтатусовФизическогоЛица.Период) КАК Период
		|ПОМЕСТИТЬ ПериодыСтатусов
		|ИЗ
		|	Справочник.Организации.ИсторияСтатусовФизическогоЛица КАК ОрганизацииИсторияСтатусовФизическогоЛица
		|ГДЕ
		|	ОрганизацииИсторияСтатусовФизическогоЛица.Ссылка = &Организация
		|	И ОрганизацииИсторияСтатусовФизическогоЛица.Период <= &ДатаСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
		|	ОрганизацииИсторияСтатусовФизическогоЛица.СтатусФизическогоЛица Как Статус
		|ИЗ
		|	ПериодыСтатусов КАК ПериодыСтатусов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияСтатусовФизическогоЛица КАК
		|			ОрганизацииИсторияСтатусовФизическогоЛица
		|		ПО ПериодыСтатусов.Период = ОрганизацииИсторияСтатусовФизическогоЛица.Период
		|ГДЕ
		|	ОрганизацииИсторияСтатусовФизическогоЛица.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "СтатусФизическогоЛица");
	КонецЕсли;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеСокращенное, НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеСокращенное = НаименованиеСокращенное;
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет код территории по классификатору ОКТМО или ОКАТО, на которой зарегистрирована организация.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации
//  ТипКода		 - Строка - "ОКТМО" или "ОКАТО"
//               - Дата - с даты применения ОКТМО будет возвращен код по ОКТМО, в остальных случаях - код по ОКАТО
// 
// Возвращаемое значение:
//  Строка - код территории
//
Функция КодТерриторииМестаРегистрации(Организация, ТипКода = "ОКТМО") Экспорт
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Возврат Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНалоговомОргане, ТипКода);
	
КонецФункции

// Возвращает наименование по умолчанию, присваиваемое при программногом 
// создании организации без заполнения реквизитов.
//
// Возвращаемое значение:
//     Строка - Наименование по умолчанию.
Функция НаименованиеПоУмолчанию() Экспорт
	
	Возврат НСтр("ru='Наша организация'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Создает элемент справочника "Организации" и связанные с ним данные.
//
// Параметры:
//     Параметры - Структура - Параметры создания организации.
//     АдресХранилища - Строка - Адрес временного хранилища, в которое
//                               будет помещена ссылка на созданную
//                               организацию.
//
Процедура СоздатьОрганизацию(Параметры, АдресХранилища) Экспорт
	
	ВидОрганизации                    = Параметры.ВидОрганизации;
	ИНН                               = Параметры.ИНН;
	Реквизиты                         = Параметры.Реквизиты;
	СистемаНалогообложения            = Параметры.СистемаНалогообложения;
	Если Параметры.Свойство("СведенияОСтавкеНалога") Тогда
		СведенияОСтавкеНалога             = Параметры.СведенияОСтавкеНалога;
	Иначе
		СведенияОСтавкеНалога             = Неопределено;
	КонецЕсли;
	ПлательщикЕНВД                    = Параметры.ПлательщикЕНВД;
	ПрименяетсяУСНПатент              = Параметры.ПрименяетсяУСНПатент;
	ПлательщикТорговогоСбора          = Параметры.ПлательщикТорговогоСбора;
	ИспользуетсяТрудНаемныхРаботников = Параметры.ИспользуетсяТрудНаемныхРаботников;
	
	Если Параметры.Свойство("ТарифСтраховыхВзносов") Тогда
		ТарифСтраховыхВзносов = Параметры.ТарифСтраховыхВзносов;
	Иначе
		ТарифСтраховыхВзносов = Неопределено;
	КонецЕсли;
	
	ПрименяетсяЕНВДдо2021 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПрименяетсяЕНВДдо2021", Ложь);
	
	ЗаполнитьРеквизиты = ЗначениеЗаполнено(Реквизиты) И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки);
	
	НачатьТранзакцию();
	
	Организация = Справочники.Организации.СоздатьЭлемент();
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Организация.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
	ИначеЕсли ВидОрганизации = "Самозанятый" Тогда
		Организация.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый;
	КонецЕсли;
	
	Организация.Заполнить(Новый Структура);
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель"
		И ИспользуетсяТрудНаемныхРаботников Тогда
		Организация.ДополнительныеСвойства.Вставить("ИспользуетсяТрудНаемныхРаботников", Истина);
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеквизиты Тогда // Создание по виду организации
		
		Если ВидОрганизации = "ИндивидуальныйПредприниматель" 
			Или ВидОрганизации = "Самозанятый" Тогда
			Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		
		Организация.Наименование = Справочники.Организации.НаименованиеПоУмолчанию();
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			Организация.ИНН = ИНН;
		КонецЕсли;
		
		Организация.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности = Истина;
		
		Организация.Записать();
		
	Иначе // Создание по реквизитам
		
		ЗаполнитьЗначенияСвойств(Организация, Реквизиты);
		
		Организация.Записать();
		
		ЭтоИндивидуальныйПредприниматель = 
			Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;		
		
		Если ЭтоИндивидуальныйПредприниматель Тогда
			
			// Физическое лицо.
			ИндивидуальныйПредприниматель = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(Реквизиты);
			Организация.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
			
			Если ЗначениеЗаполнено(Реквизиты.Фамилия)
				ИЛИ ЗначениеЗаполнено(Реквизиты.Фамилия) Тогда
				Организация.ФамилияИП  = Реквизиты.Фамилия;
				Организация.ИмяИП      = Реквизиты.Имя;
				Организация.ОтчествоИП = Реквизиты.Отчество;
				
				ЗарегистрированИП =
					Организация.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
				
				Организация.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеФизическогоЛица(
					Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество, ЗарегистрированИП);
				Организация.НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеФизическогоЛица(
					Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество, ЗарегистрированИП);
				Организация.НаименованиеПолное = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеФизическогоЛица(
					Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество, ЗарегистрированИП);
			КонецЕсли;
			
			Если Реквизиты.Свойство("СвидетельствоОРегистрации") И ЗначениеЗаполнено(Реквизиты.СвидетельствоОРегистрации) Тогда
				
				Организация.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"), 
					Реквизиты.СвидетельствоОРегистрации.Серия, Реквизиты.СвидетельствоОРегистрации.Номер);
				Организация.СвидетельствоДатаВыдачи = Реквизиты.СвидетельствоОРегистрации.Дата;
				
			КонецЕсли;
			
			Если Реквизиты.Свойство("КодСтраныГражданства")	И ЗначениеЗаполнено(Реквизиты.КодСтраныГражданства) Тогда
				
				ДанныеСтраныМира = Справочники.СтраныМира.ДанныеСтраныМира(Реквизиты.КодСтраныГражданства);
				Если ЗначениеЗаполнено(ДанныеСтраныМира.Ссылка) Тогда
					Страна = ДанныеСтраныМира.Ссылка;
				ИначеЕсли ЗначениеЗаполнено(ДанныеСтраныМира.Наименование) И ПравоДоступа("Добавление", Метаданные.Справочники.СтраныМира) Тогда
					СтранаМира = Справочники.СтраныМира.СоздатьЭлемент();
					СтранаМира.Заполнить(ДанныеСтраныМира);
					СтранаМира.Записать();
					Страна = СтранаМира.Ссылка;
				КонецЕсли;
				
				// Гражданство физического лица.
				НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ИндивидуальныйПредприниматель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					СтрокаНабораЗаписей = НаборЗаписей.Добавить();
					СтрокаНабораЗаписей.Период         = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
					СтрокаНабораЗаписей.ФизическоеЛицо = ИндивидуальныйПредприниматель;
					СтрокаНабораЗаписей.Страна         = Страна;
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Это юридическое лицо.
			
			Если Реквизиты.Свойство("РегистрирующийОрган")
				И ТипЗнч(Реквизиты.РегистрирующийОрган) = Тип("Структура")
				И Реквизиты.РегистрирующийОрган.Свойство("Наименование") Тогда
				Организация.НаименованиеРегистрирующегоОргана = Реквизиты.РегистрирующийОрган.Наименование;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("РегистрационныйНомер") Тогда
			Организация.ОГРН = Реквизиты.РегистрационныйНомер;
		КонецЕсли;
		
		Если Реквизиты.Свойство("ДатаРегистрации") Тогда
			Организация.ДатаРегистрации = Реквизиты.ДатаРегистрации;
		КонецЕсли;
		
		Если Реквизиты.Свойство("ЮридическийАдрес")	И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
			
			ЗначениеАдресаJSON = Реквизиты.ЮридическийАдрес.КонтактнаяИнформация;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				Организация, ЗначениеАдресаJSON, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				Организация, ЗначениеАдресаJSON, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				Организация, ЗначениеАдресаJSON, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			
			// Код территориального органа Росстата (заполняется по адресу организации).
			КодРегиона = УправлениеКонтактнойИнформациейБП.КодРегионаПоАдресу(ЗначениеАдресаJSON);
			
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				СписокОтделений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтделенияРосстатаРегиона(Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
				Если СписокОтделений.Количество() = 1 Тогда
					Организация.КодОрганаФСГС = СписокОтделений[0].КодТОГС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("Телефон") И ЗначениеЗаполнено(Реквизиты.Телефон) Тогда
			
			ЗначениеТелефонаJSON = Реквизиты.Телефон.КонтактнаяИнформация;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				Организация, ЗначениеТелефонаJSON, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("КодОКВЭД") И ЗначениеЗаполнено(Реквизиты.КодОКВЭД) Тогда
			
			Если Реквизиты.ЭтоОКВЭД2 Тогда
				Организация.КодОКВЭД2          = Реквизиты.КодОКВЭД;
				Организация.НаименованиеОКВЭД2 = ОрганизацииФормыКлиентСервер.ПрочитатьОКВЭД2(Реквизиты.КодОКВЭД);
				Организация.КодОКВЭД           = "";
				Организация.НаименованиеОКВЭД  = ""
			Иначе
				Организация.КодОКВЭД           = Реквизиты.КодОКВЭД;
				Организация.НаименованиеОКВЭД  = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД").Получить(Реквизиты.КодОКВЭД);
				Организация.КодОКВЭД2          = "";
				Организация.НаименованиеОКВЭД2 = ""
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("ПравоваяФорма") И ЗначениеЗаполнено(Реквизиты.ПравоваяФорма) Тогда
			
			КодыСтатистики = КодыСтатистикиПоОрганизационноПравовойФорме(Реквизиты.ПравоваяФорма);
			ЗаполнитьЗначенияСвойств(Организация, КодыСтатистики);
			
		КонецЕсли;
				
		// Руководитель.
		Если Реквизиты.Свойство("Руководитель") И ЗначениеЗаполнено(Реквизиты.Руководитель) Тогда
		
			РуководительФизЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(Реквизиты.Руководитель);
			
			Если ЗначениеЗаполнено(РуководительФизЛицо) Тогда
				
				РуководительДолжность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(Реквизиты.Руководитель.Должность);
				
				НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация.Ссылка);
				НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				НаборЗаписей.Прочитать();
				Запись = НаборЗаписей.Добавить();
				Запись.Период             = Дата("19800101");
				Запись.СтруктурнаяЕдиница = Организация.Ссылка;
				Запись.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
				Запись.ФизическоеЛицо     = РуководительФизЛицо;
				Запись.Должность          = РуководительДолжность;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Регистрация в налоговом органе.
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		
		Если Реквизиты.Свойство("РегистрацияВНалоговомОргане") И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане) Тогда
			ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, Реквизиты.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		РегистрацияВНалоговомОргане.Владелец = Организация.Ссылка;
		
		Если НЕ ЭтоИндивидуальныйПредприниматель Тогда
			РегистрацияВНалоговомОргане.КПП = Реквизиты.КПП;
		КонецЕсли;
		
		// Подбор кода ИФНС, ОКТМО и ОКАТО по адресу организации.
		Если Реквизиты.Свойство("ЮридическийАдрес")
			И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес)
			И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес.КонтактнаяИнформация) Тогда
			
			ЗначениеАдресаJSON = Реквизиты.ЮридическийАдрес.КонтактнаяИнформация;
			СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(ЗначениеАдресаJSON, "Сервис1С");
			
			КодНалоговогоОрганаПоАдресу = ?(ЭтоИндивидуальныйПредприниматель, Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"),
																			Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"));
			
			Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
				
				КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу;
				
				РегистрацияВНалоговомОргане.Код        = КодНалоговогоОргана;
				РегистрацияВНалоговомОргане.КодПоОКТМО = Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0");
				РегистрацияВНалоговомОргане.КодПоОКАТО = Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Код) Тогда
			
			РегистрацияВНалоговомОргане.КодРегиона = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(РегистрацияВНалоговомОргане.Код);
			
			РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(РегистрацияВНалоговомОргане.Код);
			Если Не ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
				РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
				РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
				// Платежные реквизиты налогового органа.
				ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Владелец)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Код)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Наименование)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.НаименованиеИФНС)
		   И (ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КПП) ИЛИ ЭтоИндивидуальныйПредприниматель) Тогда
		
			РегистрацияВНалоговомОргане.Записать();
			
			Организация.РегистрацияВНалоговомОргане  = РегистрацияВНалоговомОргане.Ссылка;
			Организация.КодНалоговогоОргана          = РегистрацияВНалоговомОргане.Код;
			Организация.НаименованиеНалоговогоОргана = РегистрацияВНалоговомОргане.Наименование;
			
			// История регистраций в налоговом органе.
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация.Ссылка);
			НаборЗаписей.Прочитать();
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			СтрокаНабораЗаписей.Период                      = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
			СтрокаНабораЗаписей.СтруктурнаяЕдиница          = Организация.Ссылка;
			СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
			НаборЗаписей.Записать();

		КонецЕсли;
		
		Если Реквизиты.Свойство("РегистрацияВПенсионномФонде") И ЗначениеЗаполнено(Реквизиты.РегистрацияВПенсионномФонде) Тогда
			
			Организация.КодОрганаПФР                          = Реквизиты.РегистрацияВПенсионномФонде.КодОрганаПФР;
			Организация.НаименованиеТерриториальногоОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
			
			Если ЭтоИндивидуальныйПредприниматель Тогда
				Организация.ИПРегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;	
			Иначе
				Организация.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			КонецЕсли;
			
			РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Организация.КодОрганаПФР, 3));
			
			Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
				ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
			КонецЕсли;
			
			// История регистраций в органе ПФР.
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация.Ссылка);
			НаборЗаписей.Прочитать();
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			СтрокаНабораЗаписей.Период                  = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			СтрокаНабораЗаписей.Организация             = Организация.Ссылка;
			СтрокаНабораЗаписей.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("РегистрацияВФСС") И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС) Тогда
			
			Если НЕ ЭтоИндивидуальныйПредприниматель ИЛИ
				(ЭтоИндивидуальныйПредприниматель И ИспользуетсяТрудНаемныхРаботников) Тогда
				
				Если НЕ ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС.КодПодчиненности) Тогда
					СимволПричиныРегистрации = ?(ЭтоИндивидуальныйПредприниматель, "3", "1");
					Организация.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодОрганаФСС + СимволПричиныРегистрации;
				Иначе
					Организация.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодПодчиненности;
				КонецЕсли;
				
				Организация.НаименованиеТерриториальногоОрганаФСС = Реквизиты.РегистрацияВФСС.НаименованиеОрганаФСС;
				Организация.РегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
				
				РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Организация.КодПодчиненностиФСС);
				
				Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
					ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Организация.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности = Истина;
		
		Организация.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		Если НастроитьУчетнуюПолитикуОтменаЕНВД(Организация, ПрименяетсяЕНВДдо2021, ПлательщикТорговогоСбора) Тогда
			ПериодУчетнойПолитики = УчетЕНВДКлиентСервер.ДатаОтменыЕНВД();
		Иначе
			ПериодУчетнойПолитики = Неопределено;
		КонецЕсли;
		
		// Учетная политика.
		ДанныеЗаполнения = РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
			ВидОрганизации, СистемаНалогообложения, ПлательщикЕНВД, ПрименяетсяУСНПатент);
		ДанныеЗаполнения.Вставить("Организация",              Организация.Ссылка);
		ДанныеЗаполнения.Вставить("ПлательщикТорговогоСбора", ПлательщикТорговогоСбора);
		Если ПериодУчетнойПолитики <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Период", ПериодУчетнойПолитики);
		КонецЕсли;
		
		Если СведенияОСтавкеНалога <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("СтавкаНалога", СведенияОСтавкеНалога.СтавкаНалога);
			ДанныеЗаполнения.Вставить("НалоговыеКаникулы", СведенияОСтавкеНалога.НалоговыеКаникулы);
			ОснованиеЛьготнойСтавки = УчетУСНКлиентСервер.ПолныйКодОснованияЛьготы(
				СведенияОСтавкеНалога.НомерСтатьи, СведенияОСтавкеНалога.Пункт, СведенияОСтавкеНалога.Подпункт);
			ДанныеЗаполнения.Вставить("ОснованиеЛьготнойСтавки", ОснованиеЛьготнойСтавки);
		КонецЕсли;
		
		Если ТарифСтраховыхВзносов <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Тариф", ТарифСтраховыхВзносов);
			ДанныеЗаполнения.Вставить("ПлательщикСтраховыхВзносовПФР_ФФОМС", Истина);
		КонецЕсли;
		
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
		УчетЗарплаты.НастроитьПорядокОтраженияЗарплатыПоУмолчанию();
		
	КонецЕсли;
	
	УстановитьВидБизнеса(Параметры);
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Организация.Ссылка, АдресХранилища);
	
КонецПроцедуры

Функция ОбновитьОрганизацию(ОрганизацияСсылка, ПараметрыОрганизации) Экспорт
	
	НачатьТранзакцию();
	
	ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
	
	// Руководитель
	Руководитель = Новый Структура("Фамилия, Имя, Отчество, ИНН", "", "", "", "");
	ПараметрыОрганизации.Свойство("ФамилияДиректора", Руководитель.Фамилия);
	ПараметрыОрганизации.Свойство("ИмяДиректора", Руководитель.Имя);
	ПараметрыОрганизации.Свойство("ОтчествоДиректора", Руководитель.Отчество);
	
	ЭтоЮрЛицо = (ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Если ЭтоЮрЛицо Тогда
		ОрганизацияОбъект.НаименованиеСокращенное = ПараметрыОрганизации.Наименование;
		ОрганизацияОбъект.НаименованиеПолное =
			ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(ПараметрыОрганизации.Наименование);
		ОрганизацияОбъект.Наименование =
			ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(ПараметрыОрганизации.Наименование);
	Иначе
		ФИО = ОбщегоНазначенияБПКлиентСервер.ФамилияИмяОтчествоПоНаименованиюИП(ПараметрыОрганизации.Наименование);
		Если ФИО = Неопределено И ЗначениеЗаполнено(Руководитель.Фамилия) Тогда
			// Определим ФИО предпринимателя по руководителю
			ФИО = Руководитель;
		КонецЕсли;
		Если ФИО <> Неопределено Тогда
			ОрганизацияОбъект.ФамилияИП = ФИО.Фамилия;
			ОрганизацияОбъект.ИмяИП = ФИО.Имя;
			ОрганизацияОбъект.ОтчествоИП = ФИО.Отчество;
			
			ОрганизацияОбъект.НаименованиеСокращенное = ОбщегоНазначенияБПКлиентСервер.СокращенноеНаименованиеФизическогоЛица(
				ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП, ОрганизацияОбъект.ЗарегистрированВКачествеИП);
			ОрганизацияОбъект.НаименованиеПолное      = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеФизическогоЛица(
				ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП, ОрганизацияОбъект.ЗарегистрированВКачествеИП);
			ОрганизацияОбъект.Наименование            = ОбщегоНазначенияБПКлиентСервер.НаименованиеФизическогоЛица(
				ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП, ОрганизацияОбъект.ЗарегистрированВКачествеИП);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮрЛицо
		И ЗначениеЗаполнено(Руководитель.Фамилия)
		И ЗначениеЗаполнено(Руководитель.Имя) Тогда
		
		РуководительФизЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(Руководитель);
		Если ЗначениеЗаполнено(РуководительФизЛицо) Тогда
			
			НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ОрганизацияСсылка);
			НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			НаборЗаписей.Прочитать();
			Запись = НаборЗаписей.Добавить();
			Запись.Период             = Дата("19800101");
			Запись.СтруктурнаяЕдиница = ОрганизацияСсылка;
			Запись.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
			Запись.ФизическоеЛицо     = РуководительФизЛицо;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вид бизнеса
	УстановитьВидБизнеса(ПараметрыОрганизации);
	
	// Налогообложение
	Налогообложение = Неопределено;
	Если ПараметрыОрганизации.Свойство("Налогообложение", Налогообложение) И ЗначениеЗаполнено(Налогообложение) Тогда
		
		// Учетная политика
		ЭтоГоловнаяОрганизация = (ОрганизацияОбъект.ГоловнаяОрганизация = ОрганизацияСсылка);
		ДанныеЗаполнения = РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
			ВидОрганизации(ЭтоЮрЛицо, ЭтоГоловнаяОрганизация),
			Налогообложение.СистемаНалогообложения,
			Налогообложение.ПлательщикЕНВД,
			Налогообложение.ПрименяетсяУСНПатент);
		
		ДанныеЗаполнения.Вставить("Организация",              ОрганизацияСсылка);
		ДанныеЗаполнения.Вставить("ПлательщикТорговогоСбора", Налогообложение.ПлательщикТорговогоСбора);
		
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
	КонецЕсли;
	
	ОрганизацияОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат ОрганизацияОбъект.Ссылка;
	
КонецФункции

Функция ВидОрганизации(ЭтоЮрЛицо, ЭтоГоловнаяОрганизация)
	
	Если Не ЭтоЮрЛицо Тогда
		Результат = "ИндивидуальныйПредприниматель";
	ИначеЕсли ЭтоГоловнаяОрганизация Тогда
		Результат = "ЮридическоеЛицо";
	Иначе
		Результат = "ОбособленноеПодразделение";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюИФИОПредпринимателя() Экспорт
	
	// Заполняем сведения о контактной информации и ФИО организации - индивидуального предпринимателя
	// по данным физического лица
	
	ВидыКонтактнойИнформацииФизлиц = Новый Массив;
	ВидыКонтактнойИнформацииФизлиц.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ВидыКонтактнойИнформацииФизлиц.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	СоответствиеКонтактнойИнформации = Новый Соответствие;
	
	МассивСоответствий = Новый Массив();
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	СоответствиеКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, МассивСоответствий);
	
	МассивСоответствий = Новый Массив();
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, МассивСоответствий);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = Организации.Ссылка)
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОрганизацииКонтактнаяИнформация.Ссылка) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.ФамилияИП = """"
	|	И Организации.ИмяИП = """"
	|	И Организации.ОтчествоИП = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ИЗ
	|	Организации КАК Организации";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформацияФизлиц = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
									ТаблицаОрганизаций.ВыгрузитьКолонку("ИндивидуальныйПредприниматель"), , ВидыКонтактнойИнформацииФизлиц);
	
	Для Каждого СтрокаТаблицыОрганизаций ИЗ ТаблицаОрганизаций Цикл
		
		ОрганизацияОбъект = СтрокаТаблицыОрганизаций.Ссылка.ПолучитьОбъект();
		Если ОрганизацияОбъект.КонтактнаяИнформация.Количество() = 0 Тогда
			
			КонтактнаяИнформацияФизлица = КонтактнаяИнформацияФизлиц.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицыОрганизаций.ИндивидуальныйПредприниматель));
			Если КонтактнаяИнформацияФизлица.Количество() > 0 Тогда
				Для Каждого СтрокаКонтактнойИнформацииФизлица Из КонтактнаяИнформацияФизлица Цикл
					
					ВидыДляОрганизации = СоответствиеКонтактнойИнформации.Получить(СтрокаКонтактнойИнформацииФизлица.Вид);
					Если ВидыДляОрганизации <> Неопределено Тогда
						
						Для Каждого ВидДляОрганизации ИЗ ВидыДляОрганизации Цикл
							
							ЗначениеАдресаJSON = СтрокаКонтактнойИнформацииФизлица.Значение;
							УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
								ОрганизацияОбъект, ЗначениеАдресаJSON, ВидДляОрганизации);
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОрганизацияОбъект.ФамилияИП = "" И ОрганизацияОбъект.ИмяИП = "" И ОрганизацияОбъект.ОтчествоИП = "" Тогда
			// Не заполнено ФИО индивидуального предпринимателя
			ОтборИсторииФИОИП = Новый Структура("ФизическоеЛицо", СтрокаТаблицыОрганизаций.ИндивидуальныйПредприниматель);
			ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, ОтборИсторииФИОИП);
			Если ФИОФизлица.Количество() > 0 Тогда
				ОрганизацияОбъект.ФамилияИП = ФИОФизлица[0].Фамилия;
				ОрганизацияОбъект.ИмяИП = ФИОФизлица[0].Имя;
				ОрганизацияОбъект.ОтчествоИП = ФИОФизлица[0].Отчество;
			КонецЕсли;
			
			// Заполняем ФИО в истории наименований
			Для Каждого ЗаписьИстории Из ОрганизацияОбъект.ИсторияНаименований Цикл
				Если ЗаписьИстории.ФамилияИП = "" И ЗаписьИстории.ИмяИП = "" И ЗаписьИстории.ОтчествоИП = "" Тогда
					ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ЗаписьИстории.Период, ОтборИсторииФИОИП);
					Если ФИОФизлица.Количество() > 0 Тогда
						ЗаписьИсторииФизлица = ФИОФизлица[0];
						Если ЗаписьИсторииФизлица.Период > ЗаписьИстории.Период Тогда
							// История в ФИО физ.лиц начинается позже, чем история в "Истории наименований"
							// Поэтому берем срез первых на дату истории физ.лица
							ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПервых(ЗаписьИстории.Период, ОтборИсторииФИОИП);
							Если ФИОФизлица.Количество() > 0 Тогда
								ЗаписьИсторииФизлица = ФИОФизлица[0];
							КонецЕсли;
						КонецЕсли;
						Если ФИОФизлица.Количество() > 0 Тогда
							ЗаписьИстории.ФамилияИП  = ЗаписьИсторииФизлица.Фамилия;
							ЗаписьИстории.ИмяИП      = ЗаписьИсторииФизлица.Имя;
							ЗаписьИстории.ОтчествоИП = ЗаписьИсторииФизлица.Отчество;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает признак наличия обособленных подразделений
//
Процедура УстановитьПризнакЕстьОбособленныеПодразделения() Экспорт
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ЕстьОбособленныеПодразделения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОрганизацияОбъект = Выборка.Организация.ПолучитьОбъект();
			ОрганизацияОбъект.ЕстьОбособленныеПодразделения = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает код по ОКТМО организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить код по ОКТМО организации.
//
// Возвращаемое значение:
//     Строка - код по ОКТМО.
//
Функция КодПоОКТМОНаДату(Организация, ДатаСведений = '20991231') Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация",  Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ДатаСведений, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистраций";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КодПоОКТМО;
	КонецЕсли;
	
КонецФункции

Функция ФизическоеЛицо(Фамилия, Имя, Отчество = "", ИНН = "") Экспорт
	
	Если ПустаяСтрока(Фамилия) Или ПустаяСтрока(Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФИО = СокрЛП(СокрЛП(Фамилия)+" "+СокрЛП(Имя)+" "+СокрЛП(Отчество));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Запрос.Параметры.Вставить("ФИО", ФИО);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|	И ФизическиеЛица.ИНН <> """"
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ФИО = &ФИО
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВидБизнесаВФоне(Параметры, АдресХранилища) Экспорт
	
	УстановитьВидБизнеса(Параметры);
	
КонецПроцедуры

Процедура СократитьПробелыВПолномНаименовании() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ОрганизацияОбъект.НаименованиеПолное = СократитьПробелы(ОрганизацияОбъект.НаименованиеПолное);
		
		Для каждого СтрокаИстории Из ОрганизацияОбъект.ИсторияНаименований Цикл
			СтрокаИстории.НаименованиеПолное = СократитьПробелы(СтрокаИстории.НаименованиеПолное);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция СократитьПробелы(ИсходнаяСтрока)
	
	СоставляющиеСтроки = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	Возврат СтрСоединить(СоставляющиеСтроки, " ");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрикрепленныйФайлПоИмени(Ссылка, ИмяФайла) Экспорт
	
	ПрикрепленныеФайлы = ПрикрепленныеФайлыПоИмени(Ссылка, Новый Структура("ИмяФайла", ИмяФайла));
	Если ЗначениеЗаполнено(ПрикрепленныеФайлы) Тогда
		Возврат ПрикрепленныеФайлы.ИмяФайла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПрикрепленныеФайлыПоИмени(Ссылка, ИменаФайлов) Экспорт
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Ссылка, Файлы);
	
	МассивИмен = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаФайлов Цикл
		МассивИмен.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПрисоединенныеФайлы", Файлы);
	Запрос.Параметры.Вставить("МассивИмен", МассивИмен);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииПрисоединенныеФайлы.Ссылка,
	|	ОрганизацииПрисоединенныеФайлы.Наименование
	|ИЗ
	|	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|ГДЕ
	|	ОрганизацииПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)
	|	И ОрганизацииПрисоединенныеФайлы.Наименование В(&МассивИмен)
	|	И НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления";
	
	ТаблицаПоименованныхСсылок = Запрос.Выполнить().Выгрузить();
	ТаблицаПоименованныхСсылок.Индексы.Добавить("Наименование");
	
	ПрикрепленныеФайлы = Новый Структура;
	Для Каждого КлючИЗначение Из ИменаФайлов Цикл
		НайденнаяСтрока = ТаблицаПоименованныхСсылок.Найти(КлючИЗначение.Значение, "Наименование");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПрикрепленныеФайлы.Вставить(КлючИЗначение.Ключ, НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрикрепленныеФайлы;
	
КонецФункции

Процедура УстановитьВидБизнеса(Параметры)
	
	ВидБизнеса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидБизнеса");
	НеобходимаяФункциональность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НеобходимаяФункциональность");
	
	Если ЗначениеЗаполнено(ВидБизнеса) Тогда
		Константы.ВидБизнесаОсновной.Установить(ВидБизнеса);
		
		Если НеобходимаяФункциональность = Неопределено Тогда
			НеобходимаяФункциональность = Перечисления.ВидыБизнеса.НеобходимаяФункциональность(ВидБизнеса);
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимаяФункциональность <> Неопределено Тогда
		
		// Нужно дополнить список необходимой функциональности родительской, т.к. если она не включена,
		// то дочерняя тоже не включится.
		ФункциональностьДляВключения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(НеобходимаяФункциональность);
		Обработки.ФункциональностьПрограммы.ДополнитьРодительскойФункциональностью(ФункциональностьДляВключения);
		
		Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональности(ФункциональностьДляВключения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыНалогообложенияДляОписанияОрганизации(Организация, Период)
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("СистемаНалогообложения", УчетнаяПолитика.СистемаНалогообложения(Организация, Период));
	Показатели.Вставить("ПрименяетсяУСН", УчетнаяПолитика.ПрименяетсяУСН(Организация, Период));
	Показатели.Вставить("ПрименяетсяАУСН", УчетнаяПолитика.ПрименяетсяАУСН(Организация, Период));
	Показатели.Вставить("ОбъектНалогообложенияУСН", УчетнаяПолитика.ОбъектНалогообложенияУСН(Организация, Период));
	Показатели.Вставить("ТолькоОсновнаяСистемаНалогообложения", УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период));
	Показатели.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Период));
	Показатели.Вставить("ПрименяетсяУСНПатент", УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период));
	Показатели.Вставить("ПлательщикЕНВД", УчетнаяПолитика.ПлательщикЕНВД(Организация, Период));
	
	Возврат Показатели;
	
КонецФункции

Функция НастроитьУчетнуюПолитикуОтменаЕНВД(Организация, ПрименяетсяЕНВДдо2021, ПлательщикТорговогоСбора)
	
	// Если налогоплательщик применял ЕНВД в 2020 году, то добавим в учетную политику соответствующую запись,
	// чтобы напомнить пользователю о подготовке декларации по ЕНВД.
	
	// Настройку добавляем только в тех случаях, когда организация зарегистрирована до отмены ЕНВД.
	ОрганизацияМоглаПрименятьЕНВД = (Не ЗначениеЗаполнено(Организация.ДатаРегистрации)
		Или Организация.ДатаРегистрации < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД());
	
	Если ПрименяетсяЕНВДдо2021 И ОрганизацияМоглаПрименятьЕНВД Тогда
		
		Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ЭтоЮрЛицо = Ложь;
			СистемаНалогообложения = "ЕНВД";
		Иначе
			ЭтоЮрЛицо = Истина;
			СистемаНалогообложения = "Общая";
		КонецЕсли;
		
		ДанныеЗаполнения = РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
			ВидОрганизации(ЭтоЮрЛицо, Истина), СистемаНалогообложения, Истина, Ложь);
		
		ДанныеЗаполнения.Вставить("Организация",              Организация.Ссылка);
		ДанныеЗаполнения.Вставить("ПлательщикТорговогоСбора", ПлательщикТорговогоСбора);
		
		ПериодУчетнойПолитики = НачалоГода(НачалоГода(УчетЕНВДКлиентСервер.ДатаОтменыЕНВД()) - 1);
		Если ЗначениеЗаполнено(Организация.ДатаРегистрации) Тогда
			ДанныеЗаполнения.Вставить("Период", Макс(Организация.ДатаРегистрации, ПериодУчетнойПолитики));
		Иначе
			ДанныеЗаполнения.Вставить("Период", ПериодУчетнойПолитики);
		КонецЕсли;
		
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОписаниеВидовОрганизаций()
	
	ИспользуемыеВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	Описание = НовыйОписаниеВидовОрганизаций();
	
	НоваяСтрока = Описание.Добавить();
	НоваяСтрока.Имя = "Самозанятый";
	НоваяСтрока.Представление = НСтр("ru = 'самозанятого'");
	НоваяСтрока.Используется = ИспользуемыеВидыОрганизаций.Самозанятый;
	НоваяСтрока.ВходитВТариф = ТарификацияБП.РазрешенСамозанятый();
	
	НоваяСтрока = Описание.Добавить();
	НоваяСтрока.Имя = "ИндивидуальныйПредприниматель";
	НоваяСтрока.Представление = НСтр("ru = 'индивидуального предпринимателя'");
	НоваяСтрока.Используется = ИспользуемыеВидыОрганизаций.ИндивидуальныйПредприниматель;
	НоваяСтрока.ВходитВТариф = ТарификацияБП.РазрешенИндивидуальныйПредприниматель();
	
	НоваяСтрока = Описание.Добавить();
	НоваяСтрока.Имя = "ЮридическоеЛицо";
	НоваяСтрока.Представление = НСтр("ru = 'юридического лица'");
	НоваяСтрока.Используется = ИспользуемыеВидыОрганизаций.ЮридическоеЛицо;
	НоваяСтрока.ВходитВТариф = ТарификацияБП.РазрешеноЮридическоеЛицо();
	
	Возврат Описание;
	
КонецФункции

Функция НовыйОписаниеВидовОрганизаций()
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Описание.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Описание.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	Описание.Колонки.Добавить("ВходитВТариф", Новый ОписаниеТипов("Булево"));
	
	Возврат Описание;
	
КонецФункции

Процедура ПроверитьИспользуемыеВидыОрганизаций(Отказ) Экспорт
	
	ПредставлениеВидовОрганизаций = ПредставленияИспользуемыхВидовОрганизацийБезТарифа();
	
	Если Не ПустаяСтрока(ПредставлениеВидовОрганизаций) Тогда
		Отказ = Истина;
		ТекстИсключения = СтрШаблон(НСтр(
				"ru = 'Учет %1 запрещен условиями текущего тарифа'"), ПредставлениеВидовОрганизаций);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокДокументовПрепятствующиеИзменениюВидаОрганизации(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	РезультатЗапросаДокументыПоОрганизации = РезультатЗапросаДокументыПоОрганизации(Параметры.Организация);
	
	Выборка = РезультатЗапросаДокументыПоОрганизации.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		ПарамерыШапки = Новый Структура;
		ПарамерыШапки.Вставить("Заголовок", НСтр("ru = 'Документы по организации'"));
		
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"Шапка",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

КонецПроцедуры

Функция РезультатЗапросаДокументыПоОрганизации(Организация, ТолькоПроверка = Ложь)
	
	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	
	ЗапросПоДокументам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Регистратор) КАК Представление,
	|	Хозрасчетный.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТолькоПроверка Тогда
		Возврат ЗапросПоДокументам.Выполнить();
	КонецЕсли; 
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросПоДокументам.Текст);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	// Оптимизируем запрос
	ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	ОператорЗапроса.ВыбираемыеПоля.Удалить(2);
	ОператорЗапроса.ВыбираемыеПоля.Удалить(1);
	
	СхемаЗапроса.ПакетЗапросов[0].Порядок.Очистить();
	
	ЗапросПоДокументам.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ЗапросПоДокументам.Выполнить();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПравилРегистрации

Процедура ЗарегистрироватьИзмененияПриОбработке(ИмяПланаОбмена, ПРО, Объект, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка) Экспорт
	
	Если Объект.ЕстьОбособленныеПодразделения Тогда
		СинхронизацияДанныхЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоГоловнымОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Объект.Ссылка);
	Иначе
		СинхронизацияДанныхЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриОбработкеДоп(ИмяПланаОбмена, ПРО, Объект, Ссылка, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш) Экспорт
	
	ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЕстьОбособленныеПодразделения");
	Если ЕстьОбособленныеПодразделения Тогда
		СинхронизацияДанныхЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоГоловнымОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Ссылка);
	Иначе
		СинхронизацияДанныхЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, Отказ, Получатели, Выгрузка) Экспорт
	
	Если Выгрузка Или (Объект.ДополнительныеСвойства.Свойство("Выгрузка") И Объект.ДополнительныеСвойства.Выгрузка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Получатели.Количество() = 0 Или Не ОбменДаннымиПовтИсп.ОбменДаннымиВключен(ИмяПланаОбмена, ПланыОбмена[ИмяПланаОбмена].ЭтотУзел()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) И ОбщегоНазначения.СсылкаСуществует(Объект.ГоловнаяОрганизация) И Объект.Ссылка <> Объект.ГоловнаяОрганизация Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект.ГоловнаяОрганизация);
		СинхронизацияДанныхЗарплатаКадры.ЗарегистрироватьСвязанныеРегистрыСведенийОбъекта(ИмяПланаОбмена, Отказ, Объект.ГоловнаяОрганизация, Выгрузка, Получатели);
	КонецЕсли;
	
КонецПроцедуры

Функция ПринадлежностиОбъекта() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Ссылка");
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ЭтотСписок.Ссылка)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
