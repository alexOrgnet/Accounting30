#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает федеральную льготу по коду
// 
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов
//  КодЛьготы - Строка - Код льготы
// 
// Возвращаемое значение:
//  СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам -- найденная федеральная льгота по коду
Функция ФедеральнаяЛьготаПоКоду(Налог, КодЛьготы) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияЛьготПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЛьготПоИмущественнымНалогам КАК ОснованияЛьготПоИмущественнымНалогам
	|ГДЕ
	|	НЕ ОснованияЛьготПоИмущественнымНалогам.УстановленаМестнымНормативнымАктом
	|	И ОснованияЛьготПоИмущественнымНалогам.Налог = &Налог
	|	И ОснованияЛьготПоИмущественнымНалогам.КодЛьготы = &КодЛьготы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОснованияЛьготПоИмущественнымНалогам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Налог", Налог);
	Запрос.УстановитьПараметр("КодЛьготы", КодЛьготы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции
 
// Ищет местную (региональную) льготу по набору значениий реквизитов справочника
// 
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов
//  ПараметрыЛьготы - Структура
//   * Ключ - имя реквизита справочника ОснованияЛьготПоИмущественнымНалогам
//   * Значение - значение реквизита
// Возвращаемое значение:
//  СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам - найденная местная льгота или пустая ссылка
Функция МестнаяЛьготаПоПараметрам(Налог, ПараметрыЛьготы) Экспорт
	
	// Ниже в запрос добавляются условия
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияЛьготПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЛьготПоИмущественнымНалогам КАК ОснованияЛьготПоИмущественнымНалогам
	|ГДЕ
	|	ОснованияЛьготПоИмущественнымНалогам.УстановленаМестнымНормативнымАктом
	|	И ОснованияЛьготПоИмущественнымНалогам.Налог = &Налог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОснованияЛьготПоИмущественнымНалогам.ПометкаУдаления";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Для каждого Параметр Из ПараметрыЛьготы Цикл
		Если Параметр.Ключ = "УстановленаМестнымНормативнымАктом" Тогда
			Продолжить;
		КонецЕсли;	
		УсловияЗапроса.Добавить(СтрШаблон("ОснованияЛьготПоИмущественнымНалогам.%1 = &%1", Параметр.Ключ));
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла; 
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Налог", Налог);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции	

#Область ОбработчикиОбновления
	
// Заполняет поля "Налог" и "ГдеУстановлена" в справочнике.
// Справочник на момент запуска обработчика применялся только для налога на имущество,
// поэтому поле "Налог" во всех существующих элементах безусловно одинаковое (НалогНаИмущество).
Процедура ЗаполнитьДобавленныеРеквизиты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЛьготПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЛьготПоИмущественнымНалогам КАК ОснованияЛьготПоИмущественнымНалогам
	|ГДЕ
	|	(ОснованияЛьготПоИмущественнымНалогам.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.ПустаяСсылка)
	|	ИЛИ ОснованияЛьготПоИмущественнымНалогам.ГдеУстановлена = """")
	|	И НЕ ОснованияЛьготПоИмущественнымНалогам.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЛьгот = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЛьгот.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОснованияЛьготПоИмущественнымНалогам");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЛьгот.Ссылка);
			Блокировка.Заблокировать();
			
			Льгота = ВыборкаЛьгот.Ссылка.ПолучитьОбъект();
			
			Если Льгота = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Льгота.Налог) Тогда
				Льгота.Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Льгота.ГдеУстановлена) Тогда
				Льгота.ЗаполнитьГдеУстановлена();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Льгота);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении обработчика ОснованияЛьготПоИмущественнымНалогам.ЗаполнитьНалог для льготы ""%1"" по причине:
					|%2'"),
				ВыборкаЛьгот.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ОснованияЛьготПоИмущественнымНалогам,
				ВыборкаЛьгот.Ссылка, ТекстСообщения);
			
		КонецПопытки
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ОснованияЛьготПоИмущественнымНалогам";
	Набор.Идентификатор = Новый УникальныйИдентификатор("70a69a76-6061-4d90-a20e-00a96aaf76b4");
	Набор.Используется  = УчетОСПереопределяемый.ВедетсяУчетОсновныхСредств();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий
	
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// При создании нового элемента открываем подбор из классификатора.
	// В то же время если в ЗначенияЗаполнения свойство КодЛьготы заполнено, то это признак того,
	// что выбор из классификатора выполнен, и тогда открываем стандартную форму нового объекта.
	Если ВидФормы = "ФормаОбъекта" 
		 И (Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Параметры.Ключ)) 
		 И (Не Параметры.Свойство("ЗначенияЗаполнения") Или НЕ Параметры.ЗначенияЗаполнения.Свойство("КодЛьготы")
		  Или Не ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.КодЛьготы)) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ПодборИзКлассификатора";
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли