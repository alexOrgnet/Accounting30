#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПодключениеПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Команда = КомандыПечати.Добавить();
	Команда.Идентификатор = "ИнвентарнаяКарточка";
	Команда.Представление = НСтр("ru = 'Инвентарная карточка'");
	Команда.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив Из СправочникСсылка.НематериальныеАктивы - ссылки на объекты нематериальных активов;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//
// Выходные параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы,
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати        - СписокЗначений  - значение - СправочникСсылка.НематериальныеАктивы, ссылка на объект;
//                                            представление - имя области в которой был выведен объект;
//  ПараметрыВывода      - Структура      - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ИмяПечатнойФормы = "ИнвентарнаяКарточка";
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяПечатнойФормы) Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяПечатнойФормы,
			НСтр("ru = 'Инвентарная карточка'"),
			ПечатьИнвентарнаяКарточка(МассивОбъектов, ОбъектыПечати),
			, // Картинка
			ИмяМакетаИнвентарнаяКарточка(),
			НСтр("ru = 'Инвентарная карточка прав на результат интеллектуальной деятельности'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

#Область ИнвентарнаяКарточка

Функция ИмяМакетаИнвентарнаяКарточка()
	
	Возврат "Справочник.НематериальныеАктивы.ПФ_MXL_ИнвентарнаяКарточка";
	
КонецФункции

Функция ПечатьИнвентарнаяКарточка(ДляПечати, Напечатано)
	
	Результат = Новый ТабличныйДокумент;
	
	Результат.АвтоМасштаб          = Истина;
	Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	Результат.КлючПараметровПечати = СтрШаблон("ПАРАМЕТРЫ_ПЕЧАТИ_%1", ИмяМакетаИнвентарнаяКарточка());
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакетаИнвентарнаяКарточка());
	Период = ДатаСведенийИнвентарнойКарточки();
	
	Данные = ВыбратьДанныеИнвентарныхКарточек(ДляПечати, Период);
	
	Пока ДанныеПечатнойФормыСледующий(Данные) Цикл
		
		НачалоДокумента = Результат.ВысотаТаблицы + 1;
		
		ВывестиИнвентарнаяКарточкаШапка(Результат, Данные, Макет);
		ВывестиИнвентарнаяКарточкаБухгалтерскийУчет(Результат, Данные, Макет);
		ВывестиИнвентарнаяКарточкаНалоговыйУчет(Результат, Данные, Макет);
		ВывестиИнвентарнаяКарточкаВыбытие(Результат, Данные, Макет);
		
		Если ШапкаИнвентарнойКарточкиСодержитДокументПриобретения(Данные) Тогда
			ВывестиИнвентарнаяКарточкаПодпись(Результат, Данные, Макет);
		Иначе
			
			// Карточка состоит из двух разделов: основных сведений (выведен выше) и списка затрат.
			// Оба раздела могут поместиться на одной странице - и тогда подписываются вместе.
			// Если не поместятся, подписываются отдельно.
			
			РазделЗатраты = РазделИнвентарнаяКарточкаЗатраты(Данные, Макет);
			
			Если РазделЗатраты = Неопределено Или Не Результат.ПроверитьВывод(РазделЗатраты) Тогда
				ВывестиИнвентарнаяКарточкаПодпись(Результат, Данные, Макет);
			КонецЕсли;
			
			Если РазделЗатраты <> Неопределено Тогда
				Результат.Вывести(РазделЗатраты);
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоДокумента,
			Напечатано,
			Данные.Объект);
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеДляПечати()
	
	// Данные для печати представляют собой иерархию:
	// - на первом уровне отдельные печатные формы,
	//   каждая печатная форма содержит данные по одному объекту НМА и одной организации
	// - на втором - списки разного размера, выбираемые разными запросами.
	//   Например, справочные сведения - это всегда одна строка на каждую печатную форму,
	//   а список затрат может содержать много строк.
	//
	// Для работы с такими данными применяется следующий подход: данные выбираются пакетом, содержащим несколько однотипных запросов,
	// которым присвоены имена.
	// Запрос может содержать один или два уровня итогов (т.е. или только детальные записи, или еще и итоги).
	// На первом уровне - печатные формы, на втором, если применимо, записи списка в рамках одной печатной формы.
	// Результат каждого запроса содержит данные одинакового набора печатных форм в одинаковом порядке - 
	// см. комментарий ВыбратьДанныеИнвентарныхКарточек
	// Далее выборки этого пакета обходятся синхронно, так, что при работе с конкретной печатной формой
	// доступны данные только этой печатной формы - см. ДанныеПечатнойФормыСледующий
	
	Данные = Новый Структура;
	// Устанавливаются перед использованием
	Данные.Вставить("Константы", Новый Структура);
	Данные.Константы.Вставить("Период", '0001-01-01');
	Данные.Константы.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Данные.Вставить("ИменаЗапросовПакета", Новый Массив);
	// Устанавливается в начале использования
	Данные.Вставить("Пакет", Новый Структура); // Выборок с именами из ИменаЗапросовПакета
	// Может дополняться в ходе использования
	Данные.Вставить("Кеш", Новый Структура);
	Данные.Кеш.Вставить("ОписаниеОрганизации",        Новый Соответствие); // См. ОписаниеОрганизации()
	Данные.Кеш.Вставить("АлгоритмПериодаАмортизации", Новый Соответствие); // См. АлгоритмПериодаАмортизации()
	Данные.Кеш.Вставить("ПлательщикНалогаНаПрибыль",  Новый Соответствие); // См. ПлательщикНалогаНаПрибыль()
	Данные.Кеш.Вставить("МетодАмортизации",           Новый Соответствие); // См. МетодАмортизации()
	// Изменяются при итерации
	Данные.Вставить("Объект");
	Данные.Вставить("Номер"); // В таблице Печать
	
	Возврат Данные;
	
КонецФункции

Функция ДатаСведенийИнвентарнойКарточки()
	Возврат КонецДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
КонецФункции

Функция ВыбратьДанныеИнвентарныхКарточек(Объекты, Период)
	
	Данные = НовыйДанныеДляПечати();
	Данные.Константы.Период = Период;
	
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат Данные;
	КонецЕсли;
	
	ОбъектыТаблица = Новый ТаблицаЗначений; // используем для сохранения порядка
	ОбъектыТаблица.Колонки.Добавить("Объект",  Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ОбъектыТаблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для Каждого Объект Из Объекты Цикл
		Запись = ОбъектыТаблица.Добавить();
		Запись.Объект  = Объект;
		Запись.Порядок = ОбъектыТаблица.Индекс(Запись);
	КонецЦикла;
	
	СчетаКапитальныхВложений = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СчетаОбесценения = Новый Массив;// К реализации в следующих версиях
	СчетаУчета = АмортизацияАктивов.СчетаБалансовойСтоимости(Тип("СправочникСсылка.НематериальныеАктивы"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета,  СчетаКапитальныхВложений);
	СчетаЗатрат = АмортизацияАктивов.СчетаАктивов(Тип("СправочникСсылка.НематериальныеАктивы"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаЗатрат, СчетаКапитальныхВложений);
	
	ВидыСубконтоНМА = Новый Массив;
	ВидыСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ВидыСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Для переиспользования объекта Запрос
	Запрос.УстановитьПараметр("Объекты", ОбъектыТаблица);
	Запрос.УстановитьПараметр("Период",  Данные.Константы.Период);
	Запрос.УстановитьПараметр("СчетаКапитальныхВложений", СчетаКапитальныхВложений);
	Запрос.УстановитьПараметр("СчетаУчета",               СчетаУчета);
	Запрос.УстановитьПараметр("СчетаЗатрат",              СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаОбесценения",         СчетаОбесценения);
	Запрос.УстановитьПараметр("СубконтоНМА",              ВидыСубконтоНМА);
	Запрос.УстановитьПараметр("СубконтоКонтрагенты",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ПереходФСБУ14",            УчетНМА.НачалоОбязательногоПримененияФСБУ14() - 1);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Объект КАК Объект,
	|	Объекты.Порядок КАК Порядок
	|ПОМЕСТИТЬ ОбъектыДляПечати
	|ИЗ
	|	&Объекты КАК Объекты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НематериальныеАктивы.Ссылка КАК Объект
	|ПОМЕСТИТЬ Отбор
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДляПечати КАК ОбъектыДляПечати
	|		ПО НематериальныеАктивы.Ссылка = ОбъектыДляПечати.Объект
	|ГДЕ
	|	НЕ НематериальныеАктивы.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Состояния.Период КАК Период,
	|	Состояния.НематериальныйАктив КАК Объект,
	|	Состояния.Организация КАК Организация,
	|	Состояния.Состояние КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&Период,
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					Отбор.Объект
	|				ИЗ
	|					Отбор)) КАК Состояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	История.НематериальныйАктив КАК Объект,
	|	История.Организация КАК Организация,
	|	История.Состояние КАК Состояние,
	|	МАКСИМУМ(История.Период) КАК Период
	|ПОМЕСТИТЬ ИсторияСостояний
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК История
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Отбор КАК Отбор
	|		ПО История.НематериальныйАктив = Отбор.Объект
	|ГДЕ
	|	История.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	История.НематериальныйАктив,
	|	История.Организация,
	|	История.Состояние
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сальдо.Объект КАК Объект,
	|	Сальдо.Организация КАК Организация,
	|	Сальдо.Счет КАК Счет,
	|	Сальдо.Подразделение КАК Подразделение,
	|	СУММА(Сальдо.Сумма) КАК Сумма,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаНУ
	|ПОМЕСТИТЬ СальдоПоСчетам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сальдо.Счет КАК Счет,
	|		Сальдо.Субконто1 КАК Объект,
	|		Сальдо.Организация КАК Организация,
	|		Сальдо.Подразделение КАК Подразделение,
	|		Сальдо.СуммаОстаток КАК Сумма,
	|		Сальдо.СуммаНУОстаток КАК СуммаНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В (&СчетаУчета),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						Отбор.Объект
	|					ИЗ
	|						Отбор)) КАК Сальдо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Сальдо.Счет,
	|		Сальдо.Субконто1,
	|		Сальдо.Организация,
	|		Сальдо.Подразделение,
	|		Сальдо.СуммаОстаток,
	|		Сальдо.СуммаНУОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В (&СчетаУчета),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР),
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						Отбор.Объект
	|					ИЗ
	|						Отбор)) КАК Сальдо) КАК Сальдо
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Объект,
	|	Сальдо.Организация,
	|	Сальдо.Счет,
	|	Сальдо.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СальдоПоСчетам.Объект КАК Объект,
	|	СальдоПоСчетам.Организация КАК Организация,
	|	МАКСИМУМ(СальдоПоСчетам.Подразделение) КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОбъектов
	|ИЗ
	|	СальдоПоСчетам КАК СальдоПоСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	СальдоПоСчетам.Объект,
	|	СальдоПоСчетам.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведения.НематериальныйАктив КАК Объект,
	|	ПервоначальныеСведения.Организация КАК Организация,
	|	ПервоначальныеСведения.Период КАК Период,
	|	ПервоначальныеСведения.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведения.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации КАК СпособАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРабот,
	|	ПервоначальныеСведения.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					Отбор.Объект
	|				ИЗ
	|					Отбор)) КАК ПервоначальныеСведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлементыАмортизации.НематериальныйАктив КАК Объект,
	|	ЭлементыАмортизации.Организация КАК Организация,
	|	ЭлементыАмортизации.Период КАК Период,
	|	ЭлементыАмортизации.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ЭлементыАмортизации.СпособНачисленияАмортизации КАК СпособАмортизации,
	|	ЭлементыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ЭлементыАмортизации.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ЭлементыАмортизации.Коэффициент КАК Коэффициент,
	|	ЭлементыАмортизации.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ ЭлементыАмортизации
	|ИЗ
	|	РегистрСведений.ЭлементыАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					Отбор.Объект
	|				ИЗ
	|					Отбор)) КАК ЭлементыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Объект КАК Объект,
	|	ПервоначальныеСведения.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЭлементыАмортизации.Период < ПервоначальныеСведения.Период
	|			ТОГДА ""ЭлементыАмортизации""
	|		ИНАЧЕ ""ПервоначальныеСведения""
	|	КОНЕЦ КАК ИзмененнаяЗапись
	|ПОМЕСТИТЬ ИзмененныеЭлементыАмортизации
	|ИЗ
	|	ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО ПервоначальныеСведения.Объект = ЭлементыАмортизации.Объект
	|			И ПервоначальныеСведения.Организация = ЭлементыАмортизации.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Объект КАК Объект,
	|	ПервоначальныеСведения.Организация КАК Организация,
	|	ПервоначальныеСведения.Период КАК Период,
	|	ПервоначальныеСведения.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособАмортизации КАК СпособАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведения.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ПервоначальныеСведения.Коэффициент КАК Коэффициент,
	|	0 КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ АктуальныеЭлементыАмортизации
	|ИЗ
	|	ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеЭлементыАмортизации КАК ИзмененныеЭлементыАмортизации
	|		ПО ПервоначальныеСведения.Объект = ИзмененныеЭлементыАмортизации.Объект
	|			И ПервоначальныеСведения.Организация = ИзмененныеЭлементыАмортизации.Организация
	|			И (ИзмененныеЭлементыАмортизации.ИзмененнаяЗапись = ""ПервоначальныеСведения"")
	|ГДЕ
	|	ИзмененныеЭлементыАмортизации.ИзмененнаяЗапись ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлементыАмортизации.Объект,
	|	ЭлементыАмортизации.Организация,
	|	ЭлементыАмортизации.Период,
	|	ЭлементыАмортизации.НачислятьАмортизацию,
	|	ЭлементыАмортизации.СпособАмортизации,
	|	ЭлементыАмортизации.СрокПолезногоИспользования,
	|	ЭлементыАмортизации.ОбъемПродукцииРабот,
	|	ЭлементыАмортизации.Коэффициент,
	|	ЭлементыАмортизации.ЛиквидационнаяСтоимость
	|ИЗ
	|	ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеЭлементыАмортизации КАК ИзмененныеЭлементыАмортизации
	|		ПО ЭлементыАмортизации.Объект = ИзмененныеЭлементыАмортизации.Объект
	|			И ЭлементыАмортизации.Организация = ИзмененныеЭлементыАмортизации.Организация
	|			И (ИзмененныеЭлементыАмортизации.ИзмененнаяЗапись = ""ЭлементыАмортизации"")
	|ГДЕ
	|	ИзмененныеЭлементыАмортизации.ИзмененнаяЗапись ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Проводки.ВидСубконтоДт1 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоДт1
	|				КОГДА Проводки.ВидСубконтоДт2 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоДт2
	|				КОГДА Проводки.ВидСубконтоДт3 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоДт3
	|			КОНЕЦ КАК Справочник.НематериальныеАктивы), ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)) КАК ОбъектДт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Проводки.ВидСубконтоКт1 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоКт1
	|				КОГДА Проводки.ВидСубконтоКт2 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоКт2
	|				КОГДА Проводки.ВидСубконтоКт3 В (&СубконтоНМА)
	|					ТОГДА Проводки.СубконтоКт3
	|			КОНЕЦ КАК Справочник.НематериальныеАктивы), ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)) КАК ОбъектКт,
	|	Проводки.Период КАК Период,
	|	Проводки.УточнениеПериода > 0 КАК МежотчетныйПериод,
	|	Проводки.Регистратор КАК Регистратор,
	|	Проводки.НомерСтроки КАК НомерСтроки,
	|	Проводки.Организация КАК Организация,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.СуммаНУДт КАК СуммаНУДт,
	|	Проводки.Содержание КАК Содержание,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Проводки.ВидСубконтоКт1 В (&СубконтоКонтрагенты)
	|					ТОГДА Проводки.СубконтоКт1
	|				КОГДА Проводки.ВидСубконтоКт2 В (&СубконтоКонтрагенты)
	|					ТОГДА Проводки.СубконтоКт2
	|				КОГДА Проводки.ВидСубконтоКт3 В (&СубконтоКонтрагенты)
	|					ТОГДА Проводки.СубконтоКт3
	|			КОНЕЦ КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&Период,
	|			Активность
	|				И ВидСубконто1 В (&СубконтоНМА)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						Отбор.Объект
	|					ИЗ
	|						Отбор)
	|				И Счет В (&СчетаЗатрат, &СчетаОбесценения),
	|			,
	|			) КАК Проводки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектДт,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.ОбъектКт КАК ОбъектКт,
	|	Проводки.Организация КАК Организация,
	|	Проводки.Период КАК Период,
	|	ПередачаНМА.Ссылка КАК ДокументПродажи,
	|	Проводки.НомерСтроки КАК НомерСтроки,
	|	ПередачаНМА.Номер КАК НомерДокументаПродажи,
	|	ПередачаНМА.Дата КАК ДатаДокументаПродажи,
	|	ПередачаНМА.Контрагент.НаименованиеПолное КАК Покупатель,
	|	ПередачаНМА.СуммаДокумента КАК Выручка,
	|	ПередачаНМА.ВалютаДокумента КАК ВалютаВыручки
	|ПОМЕСТИТЬ Выбытие
	|ИЗ
	|	Проводки КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаНМА КАК ПередачаНМА
	|		ПО Проводки.Регистратор = ПередачаНМА.Ссылка
	|ГДЕ
	|	Проводки.СчетКт В(&СчетаЗатрат)
	|	И НЕ(Проводки.СчетДт В (&СчетаЗатрат)
	|				И Проводки.ОбъектКт = Проводки.ОбъектДт)
	|	И Проводки.Сумма > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектКт,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переход.Объект КАК Объект,
	|	Переход.Организация КАК Организация,
	|	СУММА(Переход.ПервоначальнаяСтоимость) КАК ИзменениеПервоначальнойСтоимости
	|ПОМЕСТИТЬ ПереходФСБУ14
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПроводкиДт.ОбъектДт КАК Объект,
	|		ПроводкиДт.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА ПроводкиДт.СчетДт.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ПроводкиДт.Сумма
	|		КОНЕЦ КАК ПервоначальнаяСтоимость
	|	ИЗ
	|		Проводки КАК ПроводкиДт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДляПечати КАК ОбъектыДляПечати
	|			ПО ПроводкиДт.ОбъектДт = ОбъектыДляПечати.Объект
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|			ПО ПроводкиДт.Регистратор = РегламентнаяОперация.Ссылка
	|				И (РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереходНаФСБУ14))
	|	ГДЕ
	|		ПроводкиДт.Период = &ПереходФСБУ14
	|		И ПроводкиДт.МежотчетныйПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПроводкиКт.ОбъектКт,
	|		ПроводкиКт.Организация,
	|		ВЫБОР
	|			КОГДА ПроводкиКт.СчетКт.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА -ПроводкиКт.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		Проводки КАК ПроводкиКт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДляПечати КАК ОбъектыДляПечати
	|			ПО ПроводкиКт.ОбъектКт = ОбъектыДляПечати.Объект
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|			ПО ПроводкиКт.Регистратор = РегламентнаяОперация.Ссылка
	|				И (РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереходНаФСБУ14))
	|	ГДЕ
	|		ПроводкиКт.Период = &ПереходФСБУ14
	|		И ПроводкиКт.МежотчетныйПериод) КАК Переход
	|
	|СГРУППИРОВАТЬ ПО
	|	Переход.Объект,
	|	Переход.Организация
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(СУММА(Переход.ПервоначальнаяСтоимость), 0) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияСостояний.Объект КАК Объект,
	|	ИсторияСостояний.Организация КАК Организация
	|ПОМЕСТИТЬ ПечатьНеупорядоченная
	|ИЗ
	|	ИсторияСостояний КАК ИсторияСостояний
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПоСчетам.Объект,
	|	СальдоПоСчетам.Организация
	|ИЗ
	|	СальдоПоСчетам КАК СальдоПоСчетам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.ОбъектДт,
	|	Проводки.Организация
	|ИЗ
	|	Проводки КАК Проводки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.ОбъектКт,
	|	Проводки.Организация
	|ИЗ
	|	Проводки КАК Проводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10000000
	|	АВТОНОМЕРЗАПИСИ() КАК Номер,
	|	Печать.Объект КАК Объект,
	|	Печать.Организация КАК Организация,
	|	ОбъектыДляПечати.Порядок КАК ПорядокОбъектов
	|ПОМЕСТИТЬ Печать
	|ИЗ
	|	ПечатьНеупорядоченная КАК Печать
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДляПечати КАК ОбъектыДляПечати
	|		ПО Печать.Объект = ОбъектыДляПечати.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбъектов,
	|	Организация";
	
	Запрос.Выполнить();
	
	// Результирующие данные для вывода в таблицу размещаются в пакете запросов.
	// Запросы соответствуют требованиям:
	// - все запросы - выборки данных
	// - количество, состав и порядок записей итогов верхнего уровня должны быть одинаковыми во всех запросах - соответствуют таблице Печать:
	//   каждая такая запись соответствует отдельной печатной форме (по сочетанию объекта НМА и организации)
	// Чтобы это обеспечить, используется соединение с таблицей Печать и сортировка по Номер.
	// Все запросы должны содержать поле Номер из таблицы.
	// Если запрос возвращает несколько записей для одной печатной формы, то должны быть итоги по Номер.
	// Условия в секции ГДЕ не допускаются.
	// Запросы в пакете следуют в порядке заданном в ИменаЗапросовПакета.
	// Первый запрос должен содержать поле Объект со ссылкой на объект печати.
	
	Данные.ИменаЗапросовПакета = СтрРазделить("СправочныеСведения,Сальдо,Состояние,Настройки,ЭлементыАмортизации,НалоговыйУчет,Затраты,Выбытие,ПереходФСБУ14", ",");
	// Поле ИмяЗапроса в тексте запроса - исключительно для удобства разработки (например, поиска нужного именованного запроса в тексте)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СправочныеСведения"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	Печать.Объект КАК Объект,
	|	Печать.Организация КАК Организация,
	|	СправочныеСведения.Код КАК Код,
	|	СправочныеСведения.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочныеСведения.Наименование КАК Наименование,
	|	СправочныеСведения.ВидНематериальногоАктива КАК ВидНематериальногоАктива,
	|	СправочныеСведения.ВидНМАПоПБУ14 КАК ВидНМАПоПБУ14,
	|	СправочныеСведения.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СправочныеСведения.ВидОбъектаУчета КАК ВидОбъектаУчета,
	|	СправочныеСведения.КодОКОФ КАК КодОКОФ,
	|	СправочныеСведения.КодОКОФ.Наименование КАК КодОКОФНаименование,
	|	СправочныеСведения.ПрочиеСведения КАК ПрочиеСведения,
	|	ПервоначальныеСведения.Период КАК ДатаПервоначальныхСведений,
	|	ПервоначальныеСведения.СпособПоступления КАК СпособПоступления
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК СправочныеСведения
	|		ПО Печать.Объект = СправочныеСведения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ПО Печать.Объект = ПервоначальныеСведения.Объект
	|			И Печать.Организация = ПервоначальныеСведения.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Сальдо"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ТОГДА СальдоПоСчетам.Сумма
	|			КОНЕЦ), 0) КАК Затраты,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|						И СальдоПоСчетам.Счет В (&СчетаКапитальныхВложений)
	|					ТОГДА СальдоПоСчетам.Сумма
	|			КОНЕЦ), 0) КАК КапитальныеВложения,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид <> ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ТОГДА -СальдоПоСчетам.Сумма
	|			КОНЕЦ), 0) КАК Амортизация,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид <> ЗНАЧЕНИЕ(ВидСчета.Активный)
	|						И СальдоПоСчетам.Счет В (&СчетаОбесценения)
	|					ТОГДА -СальдоПоСчетам.Сумма
	|			КОНЕЦ), 0) КАК Обесценение,
	|	ЕСТЬNULL(СУММА(СальдоПоСчетам.Сумма), 0) КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ТОГДА СальдоПоСчетам.СуммаНУ
	|			КОНЕЦ), 0) КАК ЗатратыНУ,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|						И НЕ СальдоПоСчетам.Счет В (&СчетаКапитальныхВложений)
	|					ТОГДА СальдоПоСчетам.СуммаНУ
	|			КОНЕЦ), 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НЕ СальдоПоСчетам.Счет В (&СчетаКапитальныхВложений)
	|					ТОГДА СальдоПоСчетам.СуммаНУ
	|			КОНЕЦ), 0) КАК ОстаточнаяСтоимость,
	|	ЕСТЬNULL(СУММА(СальдоПоСчетам.СуммаНУ), 0) КАК БудущиеРасходыНУ
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ СальдоПоСчетам КАК СальдоПоСчетам
	|		ПО Печать.Объект = СальдоПоСчетам.Объект
	|			И Печать.Организация = СальдоПоСчетам.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Печать.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Состояние"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	Состояния.Состояние КАК Состояние,
	|	Состояния.Период КАК Период,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|				ТОГДА Состояния.Период
	|			КОГДА Состояния.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
	|				ТОГДА МАКСИМУМ(ВЫБОР
	|							КОГДА ИсторияСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|								ТОГДА ИсторияСостояний.Период
	|						КОНЕЦ)
	|		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаГотовности
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК Состояния
	|		ПО Печать.Объект = Состояния.Объект
	|			И Печать.Организация = Состояния.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияСостояний КАК ИсторияСостояний
	|		ПО Печать.Объект = ИсторияСостояний.Объект
	|			И Печать.Организация = ИсторияСостояний.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Печать.Номер,
	|	Состояния.Состояние,
	|	Состояния.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Настройки"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	МАКСИМУМ(ЕСТЬNULL(ОсновныеСчетаУчета.СчетУчета.Ссылка, ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет В (&СчетаЗатрат)
	|					ТОГДА СальдоПоСчетам.Счет
	|			КОНЕЦ)) КАК СчетУчета,
	|	МАКСИМУМ(ЕСТЬNULL(ОсновныеСчетаУчета.СчетУчета.Ссылка, ВЫБОР
	|				КОГДА СальдоПоСчетам.Счет В (&СчетаКапитальныхВложений)
	|					ТОГДА СальдоПоСчетам.Счет
	|			КОНЕЦ)) КАК СчетКапитальныхВложений,
	|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ОсновныеСчетаУчета.СчетНачисленияАмортизации.Ссылка, ВЫБОР
	|					КОГДА СальдоПоСчетам.Счет.Вид <> ЗНАЧЕНИЕ(ВидСчета.Активный)
	|							И НЕ СальдоПоСчетам.Счет В (&СчетаОбесценения)
	|						ТОГДА СальдоПоСчетам.Счет
	|				КОНЕЦ), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))) КАК СчетАмортизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Подразделения.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА Подразделения.Наименование
	|			ИНАЧЕ Подразделения.НаименованиеПолное
	|		КОНЕЦ) КАК Подразделение
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|				&Период,
	|				НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Отбор.Объект
	|					ИЗ
	|						Отбор)) КАК ОсновныеСчетаУчета
	|		ПО Печать.Объект = ОсновныеСчетаУчета.НематериальныйАктив
	|			И Печать.Организация = ОсновныеСчетаУчета.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ СальдоПоСчетам КАК СальдоПоСчетам
	|		ПО Печать.Объект = СальдоПоСчетам.Объект
	|			И Печать.Организация = СальдоПоСчетам.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОбъектов КАК ПодразделенияОбъектов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|			ПО ПодразделенияОбъектов.Подразделение = Подразделения.Ссылка
	|		ПО Печать.Объект = ПодразделенияОбъектов.Объект
	|			И Печать.Организация = ПодразделенияОбъектов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Печать.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ЭлементыАмортизации"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	ЭлементыАмортизации.Период КАК Период,
	|	ЭлементыАмортизации.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ЭлементыАмортизации.СпособАмортизации КАК СпособАмортизации,
	|	ЭлементыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ЭлементыАмортизации.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ЭлементыАмортизации.Коэффициент КАК Коэффициент,
	|	ЭлементыАмортизации.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО Печать.Объект = ЭлементыАмортизации.Объект
	|			И Печать.Организация = ЭлементыАмортизации.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НалоговыйУчет"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	ЕСТЬNULL(НалоговыйУчет.НачислятьАмортизацию, ИСТИНА) КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(НалоговыйУчет.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(НалоговыйУчет.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимость,
	|	НалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов КАК УчетРасходов
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Отбор.Объект
	|					ИЗ
	|						Отбор)) КАК НалоговыйУчет
	|		ПО Печать.Объект = НалоговыйУчет.НематериальныйАктив
	|			И Печать.Организация = НалоговыйУчет.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Затраты"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	ПроводкиПоступление.Период КАК Период,
	|	ПроводкиПоступление.Сумма КАК Затраты,
	|	ПроводкиПоступление.СуммаНУДт КАК ЗатратыНУ,
	|	ПроводкиПоступление.Регистратор КАК Регистратор,
	|	ПроводкиПоступление.Содержание КАК Содержание,
	|	ПроводкиПоступление.Контрагент.НаименованиеПолное КАК Поставщик,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаПоставщика,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаПоставщика
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ Проводки КАК ПроводкиПоступление
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|			ПО ПроводкиПоступление.Регистратор = ДанныеПервичныхДокументов.Документ
	|				И ПроводкиПоступление.Организация = ДанныеПервичныхДокументов.Организация
	|		ПО Печать.Объект = ПроводкиПоступление.ОбъектДт
	|			И Печать.Организация = ПроводкиПоступление.Организация
	|			И (ПроводкиПоступление.СчетДт В (&СчетаЗатрат))
	|			И (НЕ(ПроводкиПоступление.СчетКт В (&СчетаЗатрат)
	|					И Печать.Объект = ПроводкиПоступление.ОбъектКт))
	|			И (НЕ ПроводкиПоступление.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	|			И (НЕ ПроводкиПоступление.МежотчетныйПериод)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер,
	|	Период,
	|	Регистратор,
	|	ПроводкиПоступление.НомерСтроки
	|ИТОГИ
	|	СУММА(Затраты),
	|	СУММА(ЗатратыНУ),
	|	КОЛИЧЕСТВО(Регистратор)
	|ПО
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Выбытие"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	Выбытие.Период КАК Период,
	|	Выбытие.ДокументПродажи КАК ДокументПродажи,
	|	Выбытие.НомерДокументаПродажи КАК НомерДокументаПродажи,
	|	Выбытие.ДатаДокументаПродажи КАК ДатаДокументаПродажи,
	|	Выбытие.Покупатель КАК Покупатель,
	|	Выбытие.Выручка КАК Выручка,
	|	Выбытие.ВалютаВыручки КАК ВалютаВыручки
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ Выбытие КАК Выбытие
	|		ПО Печать.Объект = Выбытие.ОбъектКт
	|			И Печать.Организация = Выбытие.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер,
	|	Период УБЫВ,
	|	Выбытие.ДокументПродажи,
	|	Выбытие.НомерСтроки
	|ИТОГИ ПО
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПереходФСБУ14"" КАК ИмяЗапроса,
	|	Печать.Номер КАК Номер,
	|	ЕСТЬNULL(Переход.ИзменениеПервоначальнойСтоимости, 0) КАК ИзменениеПервоначальнойСтоимости
	|ИЗ
	|	Печать КАК Печать
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПереходФСБУ14 КАК Переход
	|		ПО Печать.Объект = Переход.Объект
	|			И Печать.Организация = Переход.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Печать.Номер";

	Возврат ПоместитьПакетПечатныхФорм(Данные, Запрос);
	
КонецФункции

Функция ПоместитьПакетПечатныхФорм(Данные, Запрос)
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница = РезультатыЗапросов.ВГраница();
	
	ОбщегоНазначенияКлиентСервер.Проверить(ВГраница = Данные.ИменаЗапросовПакета.ВГраница());
	
	Для Индекс = 0 По ВГраница Цикл
		ИмяЗапроса = Данные.ИменаЗапросовПакета[Индекс];
		Данные.Пакет.Вставить(ИмяЗапроса, РезультатыЗапросов[Индекс].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеПечатнойФормыСледующий(Данные)
	
	ПервыйПакет = Данные.ИменаЗапросовПакета[0];
	Выборка = Данные.Пакет[ПервыйПакет];
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(Выборка.Номер <> Данные.Номер);
	
	Данные.Номер  = Выборка.Номер;
	Данные.Объект = Выборка.Объект;
	
	Для Индекс = 1 По Данные.ИменаЗапросовПакета.ВГраница() Цикл
		ИмяЗапроса = Данные.ИменаЗапросовПакета[Индекс];
		Выборка = Данные.Пакет[ИмяЗапроса];
		ОбщегоНазначенияКлиентСервер.Проверить(Выборка.Следующий() И Выборка.Номер = Данные.Номер);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиИнвентарнаяКарточкаШапка(Результат, Данные, Макет)
	
	Значения = Новый Структура;
	ЗаполнитьИдентификаторыОбъекта(Значения, Данные);
	Значения.Вставить("Период",                   Данные.Константы.Период);
	Значения.Вставить("ОрганизацияПредставление", "");
	Значения.Вставить("ОрганизацияКод",           "");
	Значения.Вставить("ОрганизацияКодЗаголовок",  "");
	Значения.Вставить("СпособПоступления", НСтр("ru = 'Приобретение прав'"));
	Значения.Вставить("ЗатратыЗаголовок", "");
	Значения.Вставить("ЗатратыЗначение", "");
	Значения.Вставить("ДатаПриобретения", '0001-01-01');
	Значения.Вставить("Поставщик", "");
	Значения.Вставить("РеквизитыДокументаПоставщика", "");
	Значения.Вставить("Подразделение",  Данные.Пакет.Настройки.Подразделение);
	Значения.Вставить("ДатаГотовности", Данные.Пакет.Состояние.ДатаГотовности);
	
	ЗаполнитьЗначенияСвойств(Значения, ОписаниеОрганизации(Данные));
	
	ВидЗатрат = НСтр("ru = 'приобретение'");
	Если ЭтоРазработка(Данные) Тогда
		Значения.СпособПоступления = НСтр("ru = 'Создание, разработка'");
		ВидЗатрат = НСтр("ru = 'разработку'");
	ИначеЕсли Данные.Пакет.СправочныеСведения.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал Тогда
		Значения.СпособПоступления = НСтр("ru = 'Получение прав от собственника'");
	КонецЕсли;
	
	Значения.ЗатратыЗаголовок = СтрШаблон(НСтр("ru = 'Затраты на %1'"), ВидЗатрат);
	
	СальдоЗатрат = Данные.Пакет.Сальдо.Затраты;
	ЗатратыСуммарно = Данные.Пакет.Затраты.Затраты;
	Значения.ЗатратыЗначение = ФорматСуммы(ЗатратыСуммарно, Данные.Константы.Валюта);
	
	// Для наиболее частого и простого варианта учета выводим документ приобретения сразу в шапке,
	// чтобы избежать вывода приложения
	ШапкаИнвентарнойКарточкиСодержитДокументПриобретения = ШапкаИнвентарнойКарточкиСодержитДокументПриобретения(Данные);
	
	Если ШапкаИнвентарнойКарточкиСодержитДокументПриобретения Тогда
		
		Затраты = Данные.Пакет.Затраты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Затраты.Следующий() Тогда
			
			Значения.ДатаПриобретения = Затраты.Период;
			Значения.Поставщик        = Затраты.Поставщик;
			Значения.РеквизитыДокументаПоставщика = РеквизитыДокументаНаПечать(
				Затраты.НомерДокументаПоставщика,
				Затраты.ДатаДокументаПоставщика);
			
		КонецЕсли;
	КонецЕсли;
	
	Лишнее = Новый Массив;
	Если Не ШапкаИнвентарнойКарточкиСодержитДокументПриобретения Тогда
		Лишнее.Добавить("ДокументПриобретения");
	КонецЕсли;
	Если ЗатратыСуммарно = 0 И СальдоЗатрат <> 0 Тогда
		Лишнее.Добавить("ЗатратыСуммарно");
	КонецЕсли;
	
	ВсеЗначения = Новый Массив;
	ВсеЗначения.Добавить(Данные.Пакет.СправочныеСведения);
	ВсеЗначения.Добавить(Значения);
	ВывестиОбласть(Результат, "Шапка", Макет, ВсеЗначения, Лишнее);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыОбъекта(Значения, Данные)
	
	Значения.Вставить("НаименованиеОбъекта",      Данные.Пакет.СправочныеСведения.НаименованиеПолное);
	Значения.Вставить("Код",                      Данные.Пакет.СправочныеСведения.Код);
	
	Если ПустаяСтрока(Значения.НаименованиеОбъекта) Тогда
		Значения.НаименованиеОбъекта = Данные.Пакет.СправочныеСведения.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОрганизации(Данные)
	
	Кеш = Данные.Кеш.ОписаниеОрганизации;
	Организация = Данные.Пакет.СправочныеСведения.Организация;
	
	ОписаниеОрганизации = Кеш[Организация];
	Если ОписаниеОрганизации <> Неопределено Тогда
		Возврат ОписаниеОрганизации;
	КонецЕсли;
	
	ДанныеОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Данные.Константы.Период);
	
	ОписаниеОрганизации = Новый Структура;
	ОписаниеОрганизации.Вставить(
		"ОрганизацияПредставление",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(ДанныеОрганизации, "НаименованиеДляПечатныхФорм"));
	Если ЗначениеЗаполнено(ДанныеОрганизации.КодПоОКПО) Тогда
		ОписаниеОрганизации.Вставить("ОрганизацияКод",          ДанныеОрганизации.КодПоОКПО);
		ОписаниеОрганизации.Вставить("ОрганизацияКодЗаголовок", НСтр("ru = 'Код по ОКПО'"));
	КонецЕсли;
	
	Кеш.Вставить(Организация, ОписаниеОрганизации);
	
	Возврат ОписаниеОрганизации;
	
КонецФункции

Функция ЭтоРазработка(Данные)
	Возврат Данные.Пакет.СправочныеСведения.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР
		Или Данные.Пакет.СправочныеСведения.СпособПоступления = Перечисления.СпособыПоступленияАктивов.Строительство;
КонецФункции

Функция РеквизитыДокументаНаПечать(НомерДокумента, ДатаДокумента)
	
	Реквизиты = Новый Массив;
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Реквизиты.Добавить(СтрШаблон(
			НСтр("ru = '№ %1'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Ложь)));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		Реквизиты.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(ДатаДокумента, "ДЛФ=D")));
	КонецЕсли;
	Возврат СтрСоединить(Реквизиты, " ");

КонецФункции

Функция ШапкаИнвентарнойКарточкиСодержитДокументПриобретения(Данные)
	
	Если ЭтоРазработка(Данные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДругиеСпособыПоступления = Новый Массив;
	ДругиеСпособыПоступления.Добавить(Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал);
	Приобретение = (ДругиеСпособыПоступления.Найти(Данные.Пакет.СправочныеСведения.СпособПоступления) = Неопределено);
	
	Если Не Приобретение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Данные.Пакет.Сальдо.Затраты = Данные.Пакет.Затраты.Затраты Или Данные.Пакет.Сальдо.Затраты = 0)
		И Данные.Пакет.Затраты.Регистратор = 1;
	
КонецФункции

Процедура ВывестиИнвентарнаяКарточкаБухгалтерскийУчет(Результат, Данные, Макет)
	
	Если Данные.Пакет.Состояние.Состояние = Перечисления.ВидыСостоянийНМА.Списан Тогда
		Возврат;
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("ПорядокБухгалтерскогоУчета", НСтр("ru = 'Расходы'"));
	Значения.Вставить("ГруппаУчета", "");
	Значения.Вставить("СчетУчета", "-");
	Значения.Вставить("РазъяснениеПервоначальнаяСтоимость", "");
	
	ВозможнаАмортизация = Ложь;
	
	Если Данные.Пакет.Сальдо.КапитальныеВложения > 0 Тогда
		Значения.ПорядокБухгалтерскогоУчета = НСтр("ru = 'Капитальные вложения'");
		Значения.СчетУчета = Данные.Пакет.Настройки.СчетКапитальныхВложений;
	ИначеЕсли Данные.Пакет.Сальдо.БалансоваяСтоимость > 0 Или Данные.Пакет.Сальдо.Амортизация > 0 Тогда
		Значения.ПорядокБухгалтерскогоУчета = НСтр("ru = 'Нематериальные активы'");
		Значения.СчетУчета = Данные.Пакет.Настройки.СчетУчета;
		ВозможнаАмортизация = Истина;
	КонецЕсли;
	
	Значения.ГруппаУчета = УчетНМА.ПредставлениеГруппыУчета(
		Данные.Пакет.СправочныеСведения.ВидНематериальногоАктива,
		Данные.Пакет.СправочныеСведения.ВидНМАПоПБУ14);
		
	ВывестиОбласть(Результат, "ПорядокБухгалтерскогоУчета", Макет, Значения);
	
	Если Данные.Пакет.Сальдо.Затраты <> 0 И Данные.Пакет.Затраты.Затраты <> Данные.Пакет.Сальдо.Затраты Тогда
		// Первоначальной стоимостью нематериального актива является сумма затрат на его приобретение или создание (п. 13, 28 ФСБУ 14)
		// Но в некоторых случаях в программе может не быть достаточно надежных данных о стоимости затрат -
		// например, при вводе остатков или при первом применении ФСБУ 14.
		// В этом случае может потребоваться разъяснение.
		Разъяснение = Новый Массив;
		Разъяснение.Добавить(ФорматСуммы(Данные.Пакет.Сальдо.Затраты, Данные.Константы.Валюта));
		ПервоеПрименениеФСБУ14 = КорректировкаСтоимостиПервоеПрименениеФСБУ14(Данные);
		Если Не ПустаяСтрока(ПервоеПрименениеФСБУ14) Тогда
			Разъяснение.Добавить(ПервоеПрименениеФСБУ14);
		КонецЕсли;
		Значения.РазъяснениеПервоначальнаяСтоимость = СтрСоединить(Разъяснение, Символы.ПС);
		ВывестиОбласть(Результат, "РазъяснениеПервоначальнаяСтоимость", Макет, Значения);
	КонецЕсли;
	
	Если Не ВозможнаАмортизация Тогда
		Возврат;
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("ПорядокАмортизации", "");
	Значения.Вставить("СчетАмортизации",        Данные.Пакет.Настройки.СчетАмортизации);
	Значения.Вставить("БалансоваяСтоимость",    "");
	Значения.Вставить("НакопленнаяАмортизация", "");
	
	ПорядокАмортизации = Новый Массив;
	ЭлементыАмортизации = Данные.Пакет.ЭлементыАмортизации;
	Если Не ЗначениеЗаполнено(ЭлементыАмортизации.НачислятьАмортизацию) Тогда
		// Ничего не выводим
	ИначеЕсли Не ЭлементыАмортизации.НачислятьАмортизацию Тогда
		ПорядокАмортизации.Добавить(НСтр("ru = 'Не амортизируется, срок полезного использования не определен'"));
	Иначе
		// Примерный текст:
		// Линейный, до 13.01.2024 (2 мес.)
		// Уменьшаемого остатка, до 13.01.2024 (2 мес.), ускорение 1.50
		ПорядокАмортизации.Добавить(ЭлементыАмортизации.СпособАмортизации);
		Если ЭлементыАмортизации.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
			// Срок выражен объемом продукции
			ПорядокАмортизации.Добавить(СтрШаблон(
				НСтр("ru = '%1 ед. с %2'"),
				ЭлементыАмортизации.ОбъемПродукцииРабот,
				ЭлементыАмортизации.Период));
		ИначеЕсли ЗначениеЗаполнено(Данные.Пакет.Состояние.ДатаГотовности) Тогда
			АлгоритмПериодаАмортизации = АлгоритмПериодаАмортизации(Данные);
				
			ТочкаОтсчета = Данные.Пакет.Состояние.ДатаГотовности;
			Срок = ДобавитьМесяц(ТочкаОтсчета, ЭлементыАмортизации.СрокПолезногоИспользования);
			Если АлгоритмПериодаАмортизации <> Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания Тогда
				Срок = КонецМесяца(Срок);
			КонецЕсли;
			ПорядокАмортизации.Добавить(СтрШаблон(
				НСтр("ru = 'до %1 (%2 мес. с %3)'"),
				ФорматДаты(Срок),
				ЭлементыАмортизации.СрокПолезногоИспользования,
				ФорматДаты(ТочкаОтсчета)));
				
			Если НачалоМесяца(Данные.Константы.Период) <> НачалоМесяца(ТочкаОтсчета) Тогда
				ОстатокСрокаМесяцев = Макс(0, АмортизацияАктивов.СрокЦелыхМесяцев(Данные.Константы.Период, Срок, АлгоритмПериодаАмортизации));
				Если ОстатокСрокаМесяцев > 0 Тогда
					ПорядокАмортизации.Добавить(СтрШаблон(НСтр("ru = 'осталось %1 мес.'"), ОстатокСрокаМесяцев));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыАмортизации.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка
			И ЗначениеЗаполнено(ЭлементыАмортизации.Коэффициент) И ЭлементыАмортизации.Коэффициент > 1 Тогда
			ПорядокАмортизации.Добавить(СтрШаблон(НСтр("ru = 'коэф. ускорения %1'"), ЭлементыАмортизации.Коэффициент));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементыАмортизации.ЛиквидационнаяСтоимость) Тогда
			ПорядокАмортизации.Добавить(СтрШаблон(
				НСтр("ru = 'ликвидационная стоимость %1'"),
				ФорматСуммы(ЭлементыАмортизации.ЛиквидационнаяСтоимость, Данные.Константы.Валюта)));
		КонецЕсли;
	КонецЕсли;
	Значения.ПорядокАмортизации = СтрСоединить(ПорядокАмортизации, ", ");
	
	Если ЗначениеЗаполнено(Данные.Пакет.Настройки.СчетАмортизации) Тогда
		Значения.СчетАмортизации = Данные.Пакет.Настройки.СчетАмортизации;
	КонецЕсли;
	
	Значения.БалансоваяСтоимость = ФорматСуммы(
		Данные.Пакет.Сальдо.БалансоваяСтоимость,
		Данные.Константы.Валюта);
	Значения.НакопленнаяАмортизация = ФорматСуммы(Данные.Пакет.Сальдо.Амортизация, Данные.Константы.Валюта);
	
	ВывестиОбласть(Результат, "Амортизация", Макет, Значения);
	
КонецПроцедуры

Функция КорректировкаСтоимостиПервоеПрименениеФСБУ14(Данные)
	
	Если Данные.Пакет.ПереходФСБУ14.ИзменениеПервоначальнойСтоимости = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстИзменение = НСтр("ru = 'установлена'");
	Если Данные.Пакет.ПереходФСБУ14.ИзменениеПервоначальнойСтоимости <> Данные.Пакет.Сальдо.Затраты Тогда
		НаправлениеИзменения = НСтр("ru = 'увеличена'");
		Изменение = Данные.Пакет.ПереходФСБУ14.ИзменениеПервоначальнойСтоимости;
		Если Изменение < 0 Тогда
			НаправлениеИзменения = НСтр("ru = 'уменьшена'");
			Изменение = - Изменение;
		КонецЕсли;
		ТекстИзменение = СтрШаблон(НСтр("ru = '%1 на %2'"), НаправлениеИзменения, ФорматСуммы(Изменение, Данные.Константы.Валюта));
	КонецЕсли;
	
	Год = Формат(УчетНМА.НачалоОбязательногоПримененияФСБУ14(), "ДФ=yyyy");
	Шаблон = НСтр("ru = '%1 при переходе на ФСБУ 14 с %2 года'");
	Возврат ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(СтрШаблон(Шаблон, ТекстИзменение, Год));
	
КонецФункции

Функция АлгоритмПериодаАмортизации(Данные)
	
	Кеш = Данные.Кеш.АлгоритмПериодаАмортизации;
	Организация = Данные.Пакет.СправочныеСведения.Организация;
	
	АлгоритмПериодаАмортизации = Кеш[Организация];
	Если АлгоритмПериодаАмортизации <> Неопределено Тогда
		Возврат АлгоритмПериодаАмортизации;
	КонецЕсли;
	
	АлгоритмПериодаАмортизации = УчетнаяПолитика.АлгоритмПериодаАмортизации(Данные.Константы.Период, Организация);
	
	Кеш.Вставить(Организация, АлгоритмПериодаАмортизации);
	
	Возврат АлгоритмПериодаАмортизации;
	
КонецФункции

Процедура ВывестиИнвентарнаяКарточкаНалоговыйУчет(Результат, Данные, Макет)
	
	Если Данные.Пакет.Состояние.Состояние = Перечисления.ВидыСостоянийНМА.Списан Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПлательщикНалогаНаПрибыль(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("ПорядокНалоговогоУчета", НСтр("ru = 'Прочие расходы'")); // подп. 26 п. 1 ст. 264
	
	СоставОбластей = Новый Структура("ПорядокНалоговогоУчета");
	Если Данные.Пакет.Сальдо.ЗатратыНУ = 0
		Или Данные.Пакет.НалоговыйУчет.УчетРасходов = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		// Считаем расходами
	ИначеЕсли (Данные.Пакет.Сальдо.ПервоначальнаяСтоимость > 0 И Не Данные.Пакет.НалоговыйУчет.НачислятьАмортизацию)
		Или Данные.Пакет.НалоговыйУчет.УчетРасходов = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
		Значения.ПорядокНалоговогоУчета = НСтр("ru = 'Не учитывается в целях налогообложения'");
	ИначеЕсли Данные.Пакет.СправочныеСведения.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Значения.ПорядокНалоговогоУчета = НСтр("ru = 'Расходы на научные исследования (опытно-конструкторские разработки)'"); // Ст. 332.1 НК РФ
		Если ЗначениеЗаполнено(Данные.Пакет.Состояние.ДатаГотовности) Тогда
			НачалоПризнанияРасходов = КонецМесяца(Данные.Пакет.Состояние.ДатаГотовности) + 1;
			КонецПризнанияРасходов  = КонецМесяца(ДобавитьМесяц(НачалоПризнанияРасходов, Данные.Пакет.НалоговыйУчет.СрокПолезногоИспользования));
			Значения.Вставить("ПериодПризнанияНИОКР", СтрШаблон(
				НСтр("ru = 'с %1 по %2 (%3 мес.)'"),
				ФорматДаты(НачалоПризнанияРасходов),
				ФорматДаты(КонецПризнанияРасходов),
				Данные.Пакет.НалоговыйУчет.СрокПолезногоИспользования));
			СоставОбластей.Вставить("НИОКР");
		КонецЕсли;
		Признано = Макс(0, Данные.Пакет.НалоговыйУчет.ПервоначальнаяСтоимость - Данные.Пакет.Сальдо.БудущиеРасходыНУ);
		Если Признано = 0 Тогда
			// Это могут быть незавершенные НИОКР, первоначальная стоимость которых еще не сформирована
			Признано = Макс(0, Данные.Пакет.Сальдо.ЗатратыНУ - Данные.Пакет.Сальдо.БудущиеРасходыНУ);
		КонецЕсли;
		Значения.Вставить("ПризнаноРасходовНУ", ФорматСуммы(Признано, Данные.Константы.Валюта));
		Значения.Вставить("ОстатокРасходовНУ",  ФорматСуммы(Данные.Пакет.Сальдо.БудущиеРасходыНУ, Данные.Константы.Валюта));
		СоставОбластей.Вставить("БудущиеРасходы");
	ИначеЕсли Данные.Пакет.Сальдо.ЗатратыНУ > 0 И Данные.Пакет.Сальдо.ПервоначальнаяСтоимость = 0 Тогда
		Значения.ПорядокНалоговогоУчета = НСтр("ru = 'Имущество, не введенное в эксплуатацию'");
		Признано = Макс(0, Данные.Пакет.Сальдо.ЗатратыНУ - Данные.Пакет.Сальдо.БудущиеРасходыНУ);
		Значения.Вставить("ПризнаноРасходовНУ", ФорматСуммы(Признано, Данные.Константы.Валюта));
		Значения.Вставить("ОстатокРасходовНУ",  ФорматСуммы(Данные.Пакет.Сальдо.БудущиеРасходыНУ, Данные.Константы.Валюта));
		СоставОбластей.Вставить("БудущиеРасходы");
	Иначе
		Значения.ПорядокНалоговогоУчета = НСтр("ru = 'Включено в состав амортизируемого имущества'");
		Значения.Вставить("АмортизационнаяГруппа", Данные.Пакет.СправочныеСведения.АмортизационнаяГруппа);
		МетодАмортизации = МетодАмортизации(Данные);
		Значения.Вставить("МетодАмортизации", МетодАмортизации);
		УдаляемаяОбласть = "";
		Если МетодАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			УдаляемаяОбласть = "ЛинейныйМетодАмортизацииНУ";
		Иначе
			Если ЗначениеЗаполнено(Данные.Пакет.НалоговыйУчет.СрокПолезногоИспользования) Тогда
				СрокПолезногоИспользования = СтрШаблон(НСтр("ru = '%1 мес.'"), Данные.Пакет.НалоговыйУчет.СрокПолезногоИспользования);
				Значения.Вставить("СрокПолезногоИспользованияНалоговыйУчет", СрокПолезногоИспользования);
			КонецЕсли;
			Значения.Вставить(
				"ПервоначальнаяСтоимость",
				ФорматСуммы(Данные.Пакет.НалоговыйУчет.ПервоначальнаяСтоимость, Данные.Константы.Валюта));
			Значения.Вставить(
				"ОстаточнаяСтоимость",
				ФорматСуммы(Данные.Пакет.Сальдо.ОстаточнаяСтоимость, Данные.Константы.Валюта));
		КонецЕсли;
		СоставОбластей.Вставить("АмортизируемоеИмущество", УдаляемаяОбласть);
	КонецЕсли;
	
	ИменаОбластей = СтрРазделить("ПорядокНалоговогоУчета,АмортизируемоеИмущество,НИОКР,БудущиеРасходы", ","); // по порядку вывода
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		
		Если Не СоставОбластей.Свойство(ИмяОбласти) Тогда
			Продолжить;
		КонецЕсли;
		
		ВывестиОбласть(Результат, ИмяОбласти, Макет, Значения, СоставОбластей[ИмяОбласти]);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПлательщикНалогаНаПрибыль(Данные)
	
	Кеш = Данные.Кеш.ПлательщикНалогаНаПрибыль;
	Организация = Данные.Пакет.СправочныеСведения.Организация;
	
	ПлательщикНалогаНаПрибыль = Кеш[Организация];
	Если ПлательщикНалогаНаПрибыль <> Неопределено Тогда
		Возврат ПлательщикНалогаНаПрибыль;
	КонецЕсли;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Данные.Константы.Период);
	
	Кеш.Вставить(Организация, ПлательщикНалогаНаПрибыль);
	
	Возврат ПлательщикНалогаНаПрибыль;
	
КонецФункции

Функция МетодАмортизации(Данные)
	
	Кеш = Данные.Кеш.МетодАмортизации;
	Организация = Данные.Пакет.СправочныеСведения.Организация;
	
	МетодАмортизации = Кеш[Организация];
	Если МетодАмортизации <> Неопределено Тогда
		Возврат МетодАмортизации;
	КонецЕсли;
	
	МетодАмортизации = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Организация, Данные.Константы.Период);
	
	Кеш.Вставить(Организация, МетодАмортизации);
	
	Возврат МетодАмортизации;
	
КонецФункции

Процедура ВывестиИнвентарнаяКарточкаВыбытие(Результат, Данные, Макет)
	
	Значения = Новый Структура;
	Значения.Вставить("ДатаСписания", '0001-01-01');
	
	Выбытие = Данные.Пакет.Выбытие.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьДокументВыбытия = Выбытие.Следующий() И ЗначениеЗаполнено(Выбытие.Период);
	Если Данные.Пакет.Состояние.Состояние = Перечисления.ВидыСостоянийНМА.Списан Тогда
		Значения.ДатаСписания = Данные.Пакет.Состояние.Период;
	ИначеЕсли ЕстьДокументВыбытия И Данные.Пакет.Сальдо.Затраты = 0 Тогда
		Значения.ДатаСписания = Выбытие.Период;
	Иначе
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = "Списание";
	Если ЗначениеЗаполнено(Выбытие.ДокументПродажи) Тогда
		ИмяОбласти = "Продажа";
		Значения.Вставить(
			"РеквизитыДокументаРеализации",
			РеквизитыДокументаНаПечать(Выбытие.НомерДокументаПродажи, Выбытие.ДатаДокументаПродажи));
		Значения.Вставить("Покупатель", Выбытие.Покупатель);
		Значения.Вставить("Выручка",    ФорматСуммы(Выбытие.Выручка, Выбытие.ВалютаВыручки));
	КонецЕсли;
	
	ВывестиОбласть(Результат, ИмяОбласти, Макет, Значения);
	
КонецПроцедуры

// Готовит раздел Затраты инвентарной карточки
//
// Параметры:
//  Данные - НовыйДанныеДляПечати 
//  Макет - ТабличныйДокумент
// 
// Возвращаемое значение:
//  ТабличныйДокумент - подлежащий выводу раздел, включая раздел с подписями
//  Неопределено - нет данных для вывода
//
Функция РазделИнвентарнаяКарточкаЗатраты(Данные, Макет)
	
	Результат = Новый ТабличныйДокумент;
	
	ВыводСтроки = Макет.Области.Найти("ЗатратыСтрока");
	Если ВыводСтроки = Неопределено Тогда
		// Пользователь может при редактировании макета удалить ненужную ему область
		Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.Пакет.Затраты.Затраты = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("НаименованиеОбъекта", Данные.Пакет.СправочныеСведения.НаименованиеПолное);
	Значения.Вставить("Код",                 Данные.Пакет.СправочныеСведения.Код);
	Значения.Вставить("НазначениеЗатрат",    НСтр("ru = 'приобретение прав на результат интеллектуальной деятельности'"));
	Значения.Вставить("Валюта",              Данные.Константы.Валюта);
	
	Если ПустаяСтрока(Значения.НаименованиеОбъекта) Тогда
		Значения.НаименованиеОбъекта = Данные.Пакет.СправочныеСведения.Наименование;
	КонецЕсли;
	
	Если ЭтоРазработка(Данные) Тогда
		Значения.НазначениеЗатрат = НСтр("ru = 'получение результата интеллектуальной деятельности'");
	КонецЕсли;
	
	ВывестиОбласть(Результат, "ЗатратыШапка", Макет, Значения);
	ВывестиОбласть(Результат, "ЗатратыШапкаТаблицы", Макет, Значения);

	Значения = Новый Структура;
	Значения.Вставить("СодержаниеЗатрат", "");
	Значения.Вставить("НомерСтроки",       0);
	
	ВыводСтроки = Макет.ПолучитьОбласть("ЗатратыСтрока");
	
	ВыборкаЗатраты = Данные.Пакет.Затраты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗатраты.Следующий() Цикл
		
		Значения.НомерСтроки = Значения.НомерСтроки + 1;
		
		СодержаниеЗатрат = Новый Массив;
		Если Не ПустаяСтрока(ВыборкаЗатраты.Содержание) Тогда
			СодержаниеЗатрат.Добавить(ВыборкаЗатраты.Содержание);
		КонецЕсли;
		Если Не ПустаяСтрока(ВыборкаЗатраты.Поставщик) Тогда
			СодержаниеЗатрат.Добавить(ВыборкаЗатраты.Поставщик);
		КонецЕсли;
		Значения.СодержаниеЗатрат = СтрСоединить(СодержаниеЗатрат, "; ");
		
		ВыводСтроки.Параметры.Заполнить(ВыборкаЗатраты);
		ВыводСтроки.Параметры.Заполнить(Значения);
		
		Результат.Вывести(ВыводСтроки);
		
	КонецЦикла;
	
	ВывестиОбласть(Результат, "ЗатратыИтог", Макет, Данные.Пакет.Затраты);
	
	ВывестиИнвентарнаяКарточкаПодпись(Результат, Данные, Макет);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиИнвентарнаяКарточкаПодпись(Результат, Данные, Макет)
	
	ЗапросПодписи = Новый Структура;
	ЗапросПодписи.Вставить("Организация",       Данные.Пакет.СправочныеСведения.Организация);
	ЗапросПодписи.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ЗапросПодписи.Вставить("КонецПериода",      Данные.Константы.Период);
	
	Подпись = БухгалтерскиеОтчетыВызовСервера.ПолучитьДанныеОтветственногоЛица(ЗапросПодписи);
	
	ВывестиОбласть(Результат, "Подпись", Макет, Подпись);
	
КонецПроцедуры

#КонецОбласти

Процедура ВывестиОбласть(Результат, ИмяОбласти, Макет, Значения = Неопределено, Лишнее = Неопределено)
	
	Фрагмент = Макет.Области.Найти(ИмяОбласти);
	Если Фрагмент = Неопределено Тогда
		// Пользователь может при редактировании макета удалить ненужную ему область
		Возврат;
	КонецЕсли;
	
	Фрагмент = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если ТипЗнч(Лишнее) = Тип("Строка") И Не ПустаяСтрока(Лишнее) Тогда
		УдалитьВложеннуюОбласть(Фрагмент, Лишнее);
	ИначеЕсли ТипЗнч(Лишнее) = Тип("Массив") Тогда
		Для Каждого ЛишнийФрагмент Из Лишнее Цикл
			УдалитьВложеннуюОбласть(Фрагмент, ЛишнийФрагмент);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		Для Каждого НаборЗначений Из Значения Цикл
			Фрагмент.Параметры.Заполнить(НаборЗначений);
		КонецЦикла;
	ИначеЕсли Значения <> Неопределено Тогда
		Фрагмент.Параметры.Заполнить(Значения);
	КонецЕсли;
	
	Результат.Вывести(Фрагмент);
	
КонецПроцедуры

Процедура УдалитьВложеннуюОбласть(Область, ИмяВложеннойОбласти)
	
	УдаляемаяОбласть = Область.Области.Найти(ИмяВложеннойОбласти);
	
	Если УдаляемаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

Функция ФорматДаты(Дата)
	Возврат Формат(Дата, "ДЛФ=D");
КонецФункции

Функция ФорматСуммы(Сумма, Валюта)
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма, Валюта);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
