
&НаКлиенте
Перем УстановкаОсновногоБанковскогоСчетаВыполнена;
&НаКлиенте 
Перем ТекущийТекстНомераСчета; // Текст, набранный в поле ввода номера счета

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан владелец банковского счета!'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если Параметры.Ключ.Пустая() Тогда
		БанковскийСчетСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Наименование = "";
			УстановитьНаименованиеСчета(ЭтотОбъект);
		Иначе
			Если НЕ Объект.Валютный Тогда
				Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			АвтоНаименование = СокрЛП(Объект.Наименование);
			Если ПустаяСтрока(Объект.НомерСчета) И НЕ ПустаяСтрока(АвтоНаименование)
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АвтоНаименование) Тогда
				Объект.НомерСчета = АвтоНаименование;
			Иначе
				Объект.Наименование = "";
			КонецЕсли;
		КонецЕсли;
		
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если СвойстваБанковскогоСчета.СчетОрганизации Тогда
		
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Владелец));
		
	Иначе
		
		Если Не СвойстваБанковскогоСчета.СчетКонтрагента И Не СвойстваБанковскогоСчета.СчетФизлица Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Неверно указан владелец банковского счета!'"),,,, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПодразделениеОрганизацииРасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Подразделение, которое подставляется по умолчанию в Поступление и Списание с этого банковского счета'");
	
	Если Элементы.ВалютаДенежныхСредств.Видимость Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("ВалютаДенежныхСредств")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ВалютаДенежныхСредств)
			И Параметры.ЗначенияЗаполнения.Свойство("Валютный") Тогда
			Элементы.ВалютаДенежныхСредств.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Не ЗначениеЗаполнено(БанковскийСчетСсылка) Тогда
		БанковскийСчетСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(Объект.НомерСчета) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НомерСчета", , Отказ);
	КонецЕсли;
	
	Если Не БанковскиеСчетаФормыКлиентСервер.НомерСчетаКорректен(Объект.НомерСчета, БИКБанка, ЯвляетсяБанкомРФ, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.НомерСчета",, Отказ);
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Не удалось записать банковский счет'"),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.БанковскиеСчета,
			,
			ТекстОшибки);
	КонецЕсли;
	
	Если Объект.СчетКорпоративныхРасчетов Тогда
		ПроверитьНаличиеПривязанныхКарт(Отказ);
	КонецЕсли;
	
	Если ДополнительныеРеквизитыQRКода.Количество() > 0 Тогда
		ПроверитьЗаполнениеРеквизитовКодаДляОплаты(Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	Если ИнтеграцияСБанком И Не БанковскиеПравила.ЭтоРублевыйСчет(Объект.НомерСчета) Тогда
		ТекстОшибки = НСтр("ru = 'Банковские счета в валюте не поддерживаются в режиме интеграции с банком.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.НомерСчета",, Отказ);
		Возврат;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиент.ПередЗаписью(Объект.НомерСчета, БИКБанка, Объект.Ссылка, Отказ);
	
	Если Не Отказ
		И Не ПараметрыЗаписи.Свойство("ИзменитьВидКонтрагентаНаИП") Тогда
		
		Если ФизическомуЛицуЗаписываетсяСчетИПНаСервере(Объект.Владелец, Объект.НомерСчета) Тогда
		
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьФизическомуЛицуСчетИПЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			
			ТекстВопроса = НСтр("ru='Номер счета контрагента был определен, как счет индивидуального предпринимателя.
							|
							|Изменить вид контрагента на ""Индивидуальный предприниматель""?'");
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ИспользуетсяБанкДляРасчетов Тогда
		ТекущийОбъект.БанкДляРасчетов = Неопределено;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(БанковскийСчетСсылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзменитьВидКонтрагентаНаИП") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзменитьВидКонтрагентаНаИП",ПараметрыЗаписи.ИзменитьВидКонтрагентаНаИП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеКорпоративныхКарт(КорпоративныеКарты, Объект.Владелец, БанковскийСчетСсылка);
	
	ЗаписатьДанныеРеквизитовQRКода(ДополнительныеРеквизитыQRКода, БанковскийСчетСсылка);
	
	ЗаписатьРеквизитыОтчетностиНФО();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТипЗнч(НаименованиеПлательщикаПриПеречисленииВБюджет) = Тип("Строка")
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации")
		И ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
			ТекущеНаименованиеПлательщика = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.Владелец, "НаименованиеПлательщикаПриПеречисленииВБюджет"));
			Если НаименованиеПлательщикаПриПеречисленииВБюджет <> ТекущеНаименованиеПлательщика Тогда
				ОрганизацияОбъект = Объект.Владелец.ПолучитьОбъект();
				ОрганизацияОбъект.НаименованиеПлательщикаПриПеречисленииВБюджет = НаименованиеПлательщикаПриПеречисленииВБюджет;
				
				Попытка
					ОрганизацияОбъект.Записать();
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Если ИнформацияОбОшибке.Причина = Неопределено Тогда
						ОписаниеОшибки = ИнформацияОбОшибке.Описание;
					Иначе
						ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
					КонецЕсли;
					
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при записи настроек организации:
						|%1'"), ОписаниеОшибки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
	КонецЕсли;
	
	Если Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(Объект.Владелец) = 1 Тогда
		ПараметрыЗаписи.Вставить("ЭтоЕдинственныйБанковскийСчет");
	КонецЕсли;
	
	ЗаполнитьСвойстваБанковскогоСчета(ТекущийОбъект, ЭтотОбъект);
	КлючСохраненияПоложенияОкна = СвойстваПоложенияОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МожноУстанавливатьОсновным = Истина;
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) Или Объект.ПометкаУдаления Тогда
		МожноУстанавливатьОсновным = Ложь;
		ПараметрОповещения = Новый Структура("Ссылка, Владелец, ОсновнойБанковскийСчет",
			Объект.Ссылка, Объект.Владелец, ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
	Иначе
		ПараметрОповещения = Новый Структура("Ссылка, Владелец", Объект.Ссылка, Объект.Владелец);
	КонецЕсли;
	
	Оповестить("ИзмененБанковскийСчет", ПараметрОповещения);
	
	Если ПараметрыЗаписи.Свойство("ЭтоЕдинственныйБанковскийСчет")
		И МожноУстанавливатьОсновным Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КонтрагентОрганизация",  Объект.Владелец);
		СтруктураПараметров.Вставить("ОсновнойБанковскийСчет", Объект.Ссылка);
		
		Оповестить("УстановкаОсновногоБанковскогоСчетаПриЗаписи", СтруктураПараметров);
		
		// Если форма владельца закрыта, то запишем основной банковский счет самостоятельно.
		Если Не УстановкаОсновногоБанковскогоСчетаВыполнена Тогда
			УстановитьОсновнойБанковскийСчет(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзменитьВидКонтрагентаНаИП") Тогда
		Если ПараметрыЗаписи.ИзменитьВидКонтрагентаНаИП Тогда
			Оповестить("Изменение_Вида_Контрагента","ИндивидуальныйПредприниматель", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаВыполнена" Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Истина;
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		ОбновитьВидимостьЭлементовНастроекПодключения();
		
		ПоказатьЭлементыНастроекПодключения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НадежностьБанковКлиент.ПодключитьОбработчикПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.НомерСчета = СтрЗаменить(Объект.НомерСчета, " ", "");
	
	СчетВалютныйДоИзменения = Объект.Валютный;
	
	УстановитьВалюту = Не ИнтеграцияСБанком Или БанковскиеПравила.ЭтоРублевыйСчет(Объект.НомерСчета);
	Если УстановитьВалюту Тогда
		БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
			Объект, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
	Иначе
		Объект.ВалютаДенежныхСредств = Неопределено; // Очистим валюту счета, т.к. там "рубли"
	КонецЕсли;
	
	ИзменениеВалюты = СчетВалютныйДоИзменения <> Объект.Валютный;
	СчетУчетаПоУмолчанию(ЭтотОбъект, ИзменениеВалюты);
	УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(ЭтотОбъект);
	
	ДоступностьВалютыСчета(ЭтотОбъект);
	ДоступностьНомераИДатыРазрешения(ЭтотОбъект);
	УстановитьНаименованиеСчета(ЭтотОбъект, Истина);
	УстановитьПараметрыВыбораСчетаБанк(ЭтотОбъект);
	
	ОбновитьВидимостьЭлементовНастроекПодключения();
	ПоказатьЭлементыНастроекПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	СчетВалютныйДоИзменения = Объект.Валютный;
	
	Объект.Валютный = Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета;
	
	Если СчетВалютныйДоИзменения <> Объект.Валютный Тогда
		СчетУчетаПоУмолчанию(ЭтотОбъект, Истина);
		УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьПараметрыВыбораСчетаБанк(ЭтотОбъект);
	
	УстановитьНаименованиеСчета(ЭтотОбъект);
	ДоступностьНомераИДатыРазрешения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ГосударственныйКонтракт = Неопределено;
	
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
	Если РеквизитыБанка = Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗначенияЗаполнения") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("БанкОбработкаСоздания", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.Банки.ФормаОбъекта", ВыбранноеЗначение.ЗначенияЗаполнения, ЭтотОбъект, , , , ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = РеквизитыБанка.Ссылка;
	
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	
	ДоступностьБанкаДляРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
	Если РеквизитыБанка = Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗначенияЗаполнения") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("БанкДляРасчетовОбработкаСоздания", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.Банки.ФормаОбъекта", ВыбранноеЗначение.ЗначенияЗаполнения, ЭтотОбъект, , , , ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = РеквизитыБанка.Ссылка;
	
	ОбновитьРеквизитыБанкаДляРасчетовНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьАвтоНаименование(ЭтотОбъект, Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст, " ", "");
	Если Не БанковскиеПравила.ЭтоРублевыйСчет(ТекущийТекстНомераСчета) Тогда
		ВидимостьЭлементовДиректБанк = "НеПоказывать";
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПодсказкуНомераСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
		БИКБанка = "";
		НаименованиеБанка = "";
		ДеятельностьБанкаПрекращена = Ложь;
		ЯвляетсяБанкомРФ = Ложь;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, ЯвляетсяБанкомРФ);
	Объект.НомерСчета = Элементы.НомерСчета.ОграничениеТипа.ПривестиЗначение(Объект.НомерСчета);
	
	СчетВалютныйДоИзменения = Объект.Валютный;
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		Объект, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
	
	Если СчетВалютныйДоИзменения <> Объект.Валютный Тогда
		СчетУчетаПоУмолчанию(ЭтотОбъект);
		УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(ЭтотОбъект);
	КонецЕсли;
	
	БанкПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкДляРасчетовПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.БанкДляРасчетов) Тогда
		КодБанкаДляРасчетов = "";
		ДеятельностьБанкаНепрямыхРасчетовПрекращена = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкДляРасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Объект.Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьЭлементыНастроекПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПомощник = Истина;
		Если Модифицированность Тогда
			
			ОткрытьПомощник = Записать();
			
		КонецЕсли;
		Если ОткрытьПомощник Тогда
			
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Объект.Владелец, Объект.Банк, Объект.НомерСчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНомерСчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПомощник = Истина;
	Если Модифицированность Тогда
		ОткрытьПомощник = Записать();
	КонецЕсли;
	
	Если ОткрытьПомощник Тогда
		Если НавигационнаяСсылкаФорматированнойСтроки = "ДиректБанкПомощникПодключения" Тогда
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Объект.Владелец, Объект.Банк, Объект.НомерСчета);
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СБППомощникПодключения" Тогда
			Если ЗначениеЗаполнено(НастройкаСБП) Тогда
				ПараметрыФормы = Новый Структура("Ключ", НастройкаСБП);
				ОткрытьФорму("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			Иначе
				НаименованиеНастройки = СтрШаблон(НСтр("ru = 'Настройка СБП в %1 (%2)'"),
					НаименованиеБанка, Объект.Владелец);
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Организация",  Объект.Владелец);
				ДополнительныеПараметры.Вставить("Наименование", НаименованиеНастройки);
				ДополнительныеПараметры.Вставить("Банк",         Объект.Банк);
				ДополнительныеПараметры.Вставить("ИспользоватьОплатуПоПлатежнымКартам",
					ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПоПлатежнымКартам"));
				ОтборУчастников = "ПлатежныеАгрегаторы";
				ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияСБП", ЭтотОбъект, ДополнительныеПараметры);
				ИнтеграцияСПлатежнымиСистемамиКлиент.ПодключитьИнтеграциюССБП(
					БИКБанка, ОписаниеОповещения, ДополнительныеПараметры, ОтборУчастников);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпискаЗагружаетсяПоДепозитномуСчетуПриИзменении(Элемент)
	
	Если Не Объект.ВыпискаЗагружаетсяПоДепозитномуСчету Тогда
		ВидимостьЭлементовДиректБанк = "НеПоказывать";
	Иначе
		ОбновитьВидимостьЭлементовНастроекПодключения();
	КонецЕсли;
	
	ПоказатьЭлементыНастроекПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормыКорпоративныеКарты

&НаКлиенте
Процедура КорпоративныеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорпоративныеКартыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.БанковскийСчет = БанковскийСчетСсылка;
		Элемент.ТекущиеДанные.Организация    = Объект.Владелец;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормыДополнительныеРеквизитыQRКода

&НаКлиенте
Процедура ДополнительныеРеквизитыQRКодаНастроитьСписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДополнительныеРеквизитыQRКода.ТекущиеДанные;
	Если ТекущиеДанные.ВыбиратьИзСписка Тогда
		ОткрытьФорму("Справочник.РеквизитыКодаДляОплаты.Форма.ФормаНастройкиСписка",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыQRКодаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ДополнительныеРеквизитыQRКода.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.ДопустимыеЗначения = Новый СписокЗначений;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыQRКодаСпособВводаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДополнительныеРеквизитыQRКода.ТекущиеДанные;
	ЗаполнитьДополнительныеКолонкиРеквизитыQRКода(ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиПлатежныхПорученийТребований(Команда)
	
	ПараметрыФормы = Новый Структура("БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, НастройкиПП");
	
	Если Элементы.ПодразделениеОрганизации.Видимость Тогда
		// Владелец - Организация
		ПараметрыФормы.Вставить("ЭтоСчетОрганизации", Истина);
		ПараметрыФормы.Вставить("Организация",        Объект.Владелец);
		ПараметрыФормы.БанковскийСчетОрганизации = Объект.Ссылка;
		ПараметрыФормы.НастройкиПП = Новый Структура("ТекстКорреспондента, ВсегдаУказыватьКПП, МесяцПрописью, СуммаБезКопеек",
			Объект.ТекстКорреспондента, Объект.ВсегдаУказыватьКПП, Объект.МесяцПрописью, Объект.СуммаБезКопеек);
		
		Если ТипЗнч(НаименованиеПлательщикаПриПеречисленииВБюджет) = Тип("Строка") Тогда
			ПараметрыФормы.НастройкиПП.Вставить("НаименованиеПлательщикаПриПеречисленииВБюджет",
				НаименованиеПлательщикаПриПеречисленииВБюджет);
		КонецЕсли;
	Иначе
		// Владелец - Контрагент
		ПараметрыФормы.БанковскийСчетКонтрагента = Объект.Ссылка;
		ПараметрыФормы.Вставить("Контрагент", Объект.Владелец);
		ПараметрыФормы.НастройкиПП = Новый Структура("ТекстКорреспондента, ТекстНазначения, ВсегдаУказыватьКПП",
			Объект.ТекстКорреспондента, Объект.ТекстНазначения, Объект.ВсегдаУказыватьКПП);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Наименование", Объект.Наименование);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("МесяцПрописью") Тогда
			ХранилищеОбщихНастроек.Сохранить("НастройкиПлатежныхПорученийТребований", "ВсегдаУказыватьКППОрганизации",
				ВыбранноеЗначение.ВсегдаУказыватьКПП);
			НаименованиеПлательщикаПриПеречисленииВБюджет = СокрЛП(ВыбранноеЗначение.НаименованиеПлательщикаПриПеречисленииВБюджет);
		Иначе
			Если ВыбранноеЗначение.Свойство("ВсегдаУказыватьКПП") Тогда
				ХранилищеОбщихНастроек.Сохранить("НастройкиПлатежныхПорученийТребований", "ВсегдаУказыватьКППКонтрагента",
					ВыбранноеЗначение.ВсегдаУказыватьКПП);
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьНаименованиеСчета(Форма);
	
	Форма.ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(Форма.ДеятельностьБанкаПрекращена);
	
	Если Не ЗначениеЗаполнено(Форма.ПодсказкаНомерСчета) Тогда
		Форма.ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
			Форма.Объект.НомерСчета, Форма.БИКБанка, Форма.ЯвляетсяБанкомРФ, Форма.ЦветВыделенияНекорректногоЗначение,
			Форма.НомерСчетаКорректен);
	КонецЕсли;
	
	Форма.ПодсказкаБанкНепрямыхРасчетов = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(
		Форма.ДеятельностьБанкаНепрямыхРасчетовПрекращена);
	
	ВидимостьРеквизитовБанкаРФ = Форма.ИспользуетсяГособоронзаказ
		И Форма.ЯвляетсяБанкомРФ Или Не ЗначениеЗаполнено(Объект.Банк);
	Форма.Элементы.ГруппаГосударственныйКонтракт.Видимость = Не Форма.СвойстваБанковскогоСчета.СчетФизлица
		И ВидимостьРеквизитовБанкаРФ;
	
	ДоступностьВалютыСчета(Форма);
	ДоступностьНомераИДатыРазрешения(Форма);
	ДоступностьПоляГосударственныйКонтракт(Форма);
	ДоступностьБанкаДляРасчетов(Форма);
	
	ПоказатьЭлементыНастроекПодключения(Форма);
	ЭлементыКорпоративныеКарты(Форма);
	
	// В интерфейсе интеграции с банком недоступна печать платежных поручений.
	Элементы.НастройкиПлатежныхПорученийТребований.Видимость = Не Форма.ИнтеграцияСБанком;
	
	УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаименованиеСчета(Форма, ИзменениеНомераСчета = Ложь)
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.Наименование) ИЛИ Объект.Наименование = Форма.АвтоНаименование Тогда
		Форма.АвтоНаименование = СформироватьАвтоНаименование(Форма);
		Если НЕ ПустаяСтрока(Форма.АвтоНаименование) И Форма.АвтоНаименование <> Объект.Наименование Тогда
			Объект.Наименование = Форма.АвтоНаименование;
		КонецЕсли;
	Иначе
		Если ИзменениеНомераСчета И НЕ ПустаяСтрока(Форма.НомерСчетаТекущий) Тогда
			Объект.Наименование = СтрЗаменить(Объект.Наименование, Форма.НомерСчетаТекущий, СокрЛП(Объект.НомерСчета));
		КонецЕсли;
		
		Форма.АвтоНаименование = СформироватьАвтоНаименование(Форма, Объект.Наименование);
	КонецЕсли;
	
	Форма.НомерСчетаТекущий = СокрЛП(Объект.НомерСчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьАвтоНаименование(Форма, Знач Текст = "")
	
	Элементы     = Форма.Элементы;
	Объект       = Форма.Объект;
	
	ПредставлениеВалюты = "" + Объект.ВалютаДенежныхСредств;
	
	ПредставлениеБанка = "";
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		ПредставлениеБанка = СокрЛП(Форма.НаименованиеБанка);
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования1 = УчетДенежныхСредствКлиентСервер.НаименованиеБанковскогоСчетаПоУмолчанию(
		Объект.НомерСчета,
		ПредставлениеБанка,
		ПредставлениеВалюты,
		Объект.Валютный,
		1); // Вариант по умолчанию выводим последним
	
	Если НЕ ПустаяСтрока(СтрокаНаименования1) Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования1));
	КонецЕсли;
	
	СтрокаНаименования2 = УчетДенежныхСредствКлиентСервер.НаименованиеБанковскогоСчетаПоУмолчанию(
		Объект.НомерСчета,
		ПредставлениеБанка,
		ПредставлениеВалюты,
		Объект.Валютный,
		2);
	
	Строки1и2НеРавны = СокрЛП(СтрокаНаименования2) <> "(" + СтрокаНаименования1 + ")";
	Если СтрокаНаименования2 <> "" И Строки1и2НеРавны
			И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(СтрокаНаименования2) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования2));
	КонецЕсли;
	
	СтрокаНаименования = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(Объект, ПредставлениеБанка);
	
	Если НЕ ПустаяСтрока(СтрокаНаименования) И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(СтрокаНаименования) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Текст) И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Текст) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(Текст));
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОсновнойБанковскийСчет(СтруктураПараметров)
	
	Справочники.БанковскиеСчета.УстановитьОсновнойБанковскийСчет(
		СтруктураПараметров.КонтрагентОрганизация, 
		СтруктураПараметров.ОсновнойБанковскийСчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_УстановитьПодсказкуНомераСчета()
	
	НомерСчетаКорректен = Истина;
	Если ЯвляетсяБанкомРФ Тогда
		Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(ТекущийТекстНомераСчета) Тогда
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиент.ПодсказкаВводаПоляНомерСчета(
				ТекущийТекстНомераСчета, БИКБанка);
			НомерСчетаКорректен = Ложь;
		Иначе
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
				ТекущийТекстНомераСчета, БИКБанка, ЯвляетсяБанкомРФ, ЦветВыделенияНекорректногоЗначение, НомерСчетаКорректен);
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьЭлементыНастроекПодключения(ЭтотОбъект, ТекущийТекстНомераСчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЭтоГосударственныйКонтрактПриИзменении(Элемент)
	
	Если НЕ ЭтоГосударственныйКонтракт Тогда
		Объект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	ДоступностьПоляГосударственныйКонтракт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКорпоративныхРасчетовПриИзменении(Элемент)
	
	СчетКорпоративныхРасчетовИзменение(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
	
	ИспользуетсяГособоронзаказ  = ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ");
	ЭтоГосударственныйКонтракт  = ЗначениеЗаполнено(Объект.ГосударственныйКонтракт);
	ИспользуетсяБанкДляРасчетов = ЗначениеЗаполнено(Объект.БанкДляРасчетов);
	
	ИнтеграцияСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком(); // Запоминаем в реквизите формы для отключения рекламы ДиректБанка
	Если ИнтеграцияСБанком Тогда
		БанкВРежимеИнтеграции = БанкВРежимеИнтеграции(Объект.Владелец, Объект.Банк);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПлатежиПоРеестрам") Тогда
		Элементы.ГруппаДопреквизитыQRКода.Заголовок = НСтр("ru = 'Дополнительные реквизиты платежей физических лиц'");
	Иначе
		Элементы.ГруппаДопреквизитыQRКода.Заголовок = НСтр("ru = 'Дополнительные реквизиты QR кода для оплаты'");
	КонецЕсли;
	
	Элементы.ЭтоГосударственныйКонтракт.Доступность = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета);
	
	ЗаполнитьРеквизитыБанков();
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, ЯвляетсяБанкомРФ);
	
	НомерСчетаКорректен = БанковскиеСчетаФормыКлиентСервер.НомерСчетаКорректен(
		Объект.НомерСчета, БИКБанка, ЯвляетсяБанкомРФ);
	
	СвойстваБанковскогоСчета = НовыйСвойстваБанковскогоСчета();
	ЗаполнитьСвойстваБанковскогоСчета(Объект, ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(ЭтотОбъект); // должно быть выше ОбновитьВидимостьЭлементовНастроекПодключения()
	ОбновитьВидимостьЭлементовНастроекПодключения();
	
	Если СвойстваБанковскогоСчета.КорпКарта Тогда
		КорпоративныеКартыПрочитатьНаборЗаписей();
		Если Элементы.ГруппаКорпоративныеКарты.Скрыта() Тогда
			Элементы.ГруппаКорпоративныеКарты.Показать();
		КонецЕсли;
	Иначе
		Если Не Элементы.ГруппаКорпоративныеКарты.Скрыта() Тогда
			Элементы.ГруппаКорпоративныеКарты.Скрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваБанковскогоСчета.БанкДляРасчетов Тогда
		Если Элементы.ГруппаИспользуетсяБанкДляРасчетов.Скрыта() Тогда
			Элементы.ГруппаИспользуетсяБанкДляРасчетов.Показать();
		КонецЕсли;
	Иначе
		Если Не Элементы.ГруппаИспользуетсяБанкДляРасчетов.Скрыта() Тогда
			Элементы.ГруппаИспользуетсяБанкДляРасчетов.Скрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяГособоронзаказ Тогда
		Если ЗначениеЗаполнено(Объект.ГосударственныйКонтракт) Тогда
			Если Элементы.ГруппаГосударственныйКонтракт.Скрыта() Тогда
				Элементы.ГруппаГосударственныйКонтракт.Показать();
			КонецЕсли;
		Иначе
			Если Не Элементы.ГруппаГосударственныйКонтракт.Скрыта() Тогда
				Элементы.ГруппаГосударственныйКонтракт.Скрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СчетБанк.Видимость = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если СвойстваБанковскогоСчета.НФО Тогда
		ПрочитатьРеквизитыОтчетностиНФО();
	КонецЕсли;
	
	Элементы.ГруппаОтчетностьНФО.Видимость = СвойстваБанковскогоСчета.НФО;
	
	Если СвойстваБанковскогоСчета.СчетКонтрагента Тогда
		
		Элементы.Владелец.Заголовок = НСтр("ru = 'Контрагент'");
		
		Элементы.СчетБанк.Видимость                 = Ложь;
		Элементы.ГруппаКорпоративныеКарты.Видимость = Ложь;
		Элементы.ПодразделениеОрганизации.Видимость = Ложь;
		Элементы.ДатаОткрытия.Видимость             = Ложь;
		
	ИначеЕсли СвойстваБанковскогоСчета.СчетОрганизации Тогда
		
		Элементы.Владелец.Видимость = СвойстваБанковскогоСчета.НесколькоОрганизаций;
		Элементы.Владелец.Заголовок = НСтр("ru = 'Организация'");
		
		Элементы.ГруппаКорпоративныеКарты.Видимость          = Не ИнтеграцияСБанком;
		Элементы.ГруппаИспользуетсяБанкДляРасчетов.Видимость = Не ИнтеграцияСБанком;
		
		Элементы.ПодразделениеОрганизации.Видимость = Истина;
		
		Элементы.ГруппаДатыОткрытияЗакрытияСчета.РасширеннаяПодсказка.Заголовок =
			?(УчетнаяПолитика.ПрименяетсяУСН(Объект.Владелец, ТекущаяДатаСеанса()),
				НСтр("ru = 'Дата открытия и закрытия счета необходимы для правильного формирования Книги учета доходов и расходов (УСН)'"),
				"");
		
	ИначеЕсли СвойстваБанковскогоСчета.СчетФизлица Тогда
		
		Элементы.Владелец.Заголовок = НСтр("ru = 'Физическое лицо'");
		
		Элементы.СчетБанк.Видимость                           = Ложь;
		Элементы.ГруппаКорпоративныеКарты.Видимость           = Ложь;
		Элементы.ПодразделениеОрганизации.Видимость           = Ложь;
		Элементы.ДатаОткрытия.Видимость                       = Ложь;
		Элементы.ГруппаВидСчетаНомерИДатаРазрешения.Видимость = Ложь;
		
	КонецЕсли;
	
	Если СвойстваБанковскогоСчета.ВозможныДопРеквизиты Тогда
		
		ПрочитатьДанныеРеквизитовQRКода(Объект.Ссылка);
		
		ЗаполнитьСписокВариантов(Элементы.ДополнительныеРеквизитыQRКодаИдентификатор.СписокВыбора);
		
		Если Параметры.Свойство("ГруппаДопреквизитыQRКода") Тогда
			Элементы.ГруппаДопреквизитыQRКода.Показать();
		КонецЕсли;
		
		УстановитьУсловноеОформление();
	Иначе
		Элементы.ГруппаДопреквизитыQRКода.Видимость = Ложь;
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = СвойстваПоложенияОкна();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Для каждого ЭлементВыбора Из Элементы.ДополнительныеРеквизитыQRКодаИдентификатор.СписокВыбора Цикл
	
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДополнительныеРеквизитыQRКодаИдентификатор");
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"ДополнительныеРеквизитыQRКода.Идентификатор",
			ВидСравненияКомпоновкиДанных.Равно,
			ЭлементВыбора.Значение);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементВыбора.Представление);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРеквизитовQRКода(ДополнительныеРеквизитыQRКода, БанковскийСчетСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыКодаДляОплаты.Ссылка КАК Ссылка,
	|	РеквизитыКодаДляОплаты.Код КАК Идентификатор
	|ИЗ
	|	Справочник.РеквизитыКодаДляОплаты КАК РеквизитыКодаДляОплаты
	|ГДЕ
	|	РеквизитыКодаДляОплаты.Владелец = &БанковскийСчетСсылка";
	
	Запрос.УстановитьПараметр("БанковскийСчетСсылка", БанковскийСчетСсылка);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	СписокВыбора = Элементы.ДополнительныеРеквизитыQRКодаИдентификатор.СписокВыбора;
	
	Для каждого РеквизитQRКода Из ДополнительныеРеквизитыQRКода Цикл
		
		СтрокаТаблицы = ТаблицаРеквизитов.Найти(РеквизитQRКода.Идентификатор, "Идентификатор");
		
		Если СтрокаТаблицы <> Неопределено  Тогда
			РеквизитОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			
			ТаблицаРеквизитов.Удалить(СтрокаТаблицы);
		Иначе
			РеквизитОбъект = Справочники.РеквизитыКодаДляОплаты.СоздатьЭлемент();
			РеквизитОбъект.Владелец = БанковскийСчетСсылка;
		КонецЕсли; 
		
		РеквизитОбъект.Код = РеквизитQRКода.Идентификатор;
		РеквизитОбъект.ПометкаУдаления = Ложь;
		
		РеквизитОбъект.ДопустимыеЗначения.Очистить();
		Для каждого ЭлементСписка Из РеквизитQRКода.ДопустимыеЗначения Цикл
			НоваяСтрока = РеквизитОбъект.ДопустимыеЗначения.Добавить();
			НоваяСтрока.Значение = ЭлементСписка.Значение;
			НоваяСтрока.Представление = ЭлементСписка.Представление;
		КонецЦикла; 
		
		РеквизитОбъект.Записать();
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
	
		РеквизитОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		РеквизитОбъект.ПометкаУдаления = Истина;
		РеквизитОбъект.Записать();
	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеРеквизитовQRКода(БанковскийСчетСсылка)
	Если БанковскийСчетСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчетСсылка", БанковскийСчетСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыКодаДляОплаты.Ссылка КАК РеквизитСсылка,
	|	РеквизитыКодаДляОплаты.Код КАК Идентификатор,
	|	РеквизитыКодаДляОплаты.ДопустимыеЗначения.(
	|		Значение КАК Значение,
	|		Представление КАК Представление,
	|		ПометкаУдаления КАК Пометка
	|	) КАК ДопустимыеЗначения
	|ИЗ
	|	Справочник.РеквизитыКодаДляОплаты КАК РеквизитыКодаДляОплаты
	|ГДЕ
	|	РеквизитыКодаДляОплаты.Владелец = &БанковскийСчетСсылка
	|	И НЕ РеквизитыКодаДляОплаты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	ДополнительныеРеквизитыQRКода.Очистить();
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		НоваяСтрока = ДополнительныеРеквизитыQRКода.Добавить();
		
		НоваяСтрока.РеквизитСсылка = РезультатЗапроса.РеквизитСсылка;
		НоваяСтрока.Идентификатор  = РезультатЗапроса.Идентификатор;
		
		НоваяСтрока.ДопустимыеЗначения = Новый СписокЗначений;
		
		ДопустимыеЗначения = РезультатЗапроса.ДопустимыеЗначения.Выбрать();
		Пока ДопустимыеЗначения.Следующий() Цикл
			НоваяСтрока.ДопустимыеЗначения.Добавить(ДопустимыеЗначения.Значение, ДопустимыеЗначения.Представление, ДопустимыеЗначения.Пометка);
		КонецЦикла;
		
		НоваяСтрока.ВыбиратьИзСписка = (НоваяСтрока.ДопустимыеЗначения.Количество() > 0);
		
		ЗаполнитьДополнительныеКолонкиРеквизитыQRКода(НоваяСтрока);
	КонецЦикла; 
	
	Если ДополнительныеРеквизитыQRКода.Количество() > 0 Тогда
		Элементы.ГруппаДопреквизитыQRКода.Показать();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыОтчетностиНФО()
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер = РегистрыСведений.РегистрационныеНомераБанков.СоздатьМенеджерЗаписи();
	Менеджер.Банк = Объект.Банк;
	Менеджер.Прочитать();
	Если Не Менеджер.Выбран() Тогда
		Менеджер.Банк = Объект.Банк;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РеквизитыОтчетностиНФО, Менеджер);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыОтчетностиНФО()
	
	Если Не СвойстваБанковскогоСчета.НФО 
		Или Не ЗначениеЗаполнено(РеквизитыОтчетностиНФО.Банк) Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер = РеквизитФормыВЗначение("РеквизитыОтчетностиНФО");
	Менеджер.Записать();
	ЗначениеВРеквизитФормы(Менеджер, "РеквизитыОтчетностиНФО");
	
КонецПроцедуры

&НаСервере
Процедура КорпоративныеКартыПрочитатьНаборЗаписей()
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КорпоративныеКарты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БанковскийСчет.Установить(БанковскийСчетСсылка);
	НаборЗаписей.Отбор.Организация.Установить(Объект.Владелец);
	НаборЗаписей.Прочитать();
	
	ЗначениеВРеквизитФормы(НаборЗаписей, "КорпоративныеКарты");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеПривязанныхКарт(Отказ)
	
	Если КорпоративныеКарты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Привяжите к счету хотя бы 1 карту.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КорпоративныеКарты",, Отказ);
		Возврат;
	КонецЕсли;
	
	КэшСинонимовРеквизитов = Новый Структура();
	КэшСинонимовРеквизитов.Вставить("НомерКарты",      НСтр("ru = 'Номер карты'"));
	КэшСинонимовРеквизитов.Вставить("ПодотчетноеЛицо", НСтр("ru = 'Подотчетное лицо'"));
	
	НомераКарт = Новый Соответствие;
	НазваниеТаблицы = НСтр("ru = 'Корпоративные карты'");
	
	НомерСтроки = 1;
	Для Каждого СтрокаНабора Из КорпоративныеКарты Цикл
		Для Каждого КлючИЗначение Из КэшСинонимовРеквизитов Цикл
			ШаблонТекстаСообщенияКолонка = "";
			ПроверяемыйРеквизит = КлючИЗначение.Ключ;
			СинонимРеквизита    = КлючИЗначение.Значение;
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"КорпоративныеКарты", НомерСтроки, ПроверяемыйРеквизит);
			Если Не ЗначениеЗаполнено(СтрокаНабора[ПроверяемыйРеквизит]) Тогда
				ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", "%1", "%2", НазваниеТаблицы);
			ИначеЕсли ПроверяемыйРеквизит = "НомерКарты" Тогда
				Если НомераКарт[СтрокаНабора[ПроверяемыйРеквизит]] <> Неопределено Тогда
					ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Корректность", "%1", "%2", НазваниеТаблицы,
						НСтр("ru = 'Дубль номера.'"));
				КонецЕсли;
				
				НомераКарт.Вставить(СтрокаНабора[ПроверяемыйРеквизит], Истина);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ШаблонТекстаСообщенияКолонка) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщенияКолонка, СинонимРеквизита, НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыБанков()
	
	РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(Объект.Банк);
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
	РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(Объект.БанкДляРасчетов);
	ОбновитьРеквизитыБанкаДляРасчетовНаФорме(ЭтотОбъект, РеквизитыБанка);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		БИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКорпоративныхКарт(КорпоративныеКарты, Организация, БанковскийСчетСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КорпоративныеКарты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БанковскийСчет.Установить(БанковскийСчетСсылка);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Загрузить(КорпоративныеКарты.Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	
	ОбновитьВидимостьЭлементовНастроекПодключения();
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект,
		БИКБанка,
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	Если ИнтеграцияСБанком Тогда
		БанкВРежимеИнтеграции = БанкВРежимеИнтеграции(Объект.Владелец, Объект.Банк);
	КонецЕсли;
	
	Если СвойстваБанковскогоСчета.НФО Тогда
		ПрочитатьРеквизитыОтчетностиНФО();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовНастроекПодключения()
	
	ВидимостьЭлементовДиректБанк = "НеПоказывать";
	ВидимостьПодсказкиСБП = Ложь;
	
	Если Не СвойстваБанковскогоСчета.СчетОрганизации
		Или Объект.ВалютаДенежныхСредств
			<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
		Или Элементы.ВыпискаЗагружаетсяПоДепозитномуСчету.Видимость
			И Не Объект.ВыпискаЗагружаетсяПоДепозитномуСчету Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		Объект.Владелец, Объект.Банк);
	
	ИнтеграцияДоступна = СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна();
	Если ИнтеграцияДоступна Тогда
		НастройкиИнтеграцииСБП = ИнтеграцияССБПБП.НастройкиИнтеграцииСБП(Объект.Владелец, БИКБанка);
		ИнтеграцияДоступна = НастройкиИнтеграцииСБП.ИнтеграцияДоступнаСБПc2b;
	КонецЕсли;
	
	Если ИнтеграцияДоступна Тогда
		НастройкаСБП = НастройкиИнтеграцииСБП.Настройка;
		ВидимостьПодсказкиСБП = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БанкВРежимеИнтеграции(Организация, Банк)
	
	БанкВРежимеИнтеграции = Ложь;
	Если ЗначениеЗаполнено(Банк) Тогда
		НастройкаИнтеграции = Справочники.НастройкиИнтеграцииСБанками.НастройкаИнтеграцииОрганизацииСБанком(
			Организация, Банк);
		Если ЗначениеЗаполнено(НастройкаИнтеграции) Тогда
			БанкВРежимеИнтеграции = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БанкВРежимеИнтеграции;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетаБанк(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СчетаБанка = СчетаБанка(Форма.Объект.ВалютаДенежныхСредств, Объект.СчетКорпоративныхРасчетов);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", СчетаБанка));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Функция НовыйСвойстваБанковскогоСчета()
	
	Возврат Новый Структура("СчетОрганизации,
		|НесколькоОрганизаций,
		|СчетКонтрагента,
		|СчетФизлица,
		|ГОЗ,
		|КорпКарта,
		|ВозможныДопРеквизиты,
		|БанкДляРасчетов,
		|ЯвляетсяБанкомРФ,
		|НФО,
		|ВыпискаЗагружаетсяПоДепозитномуСчету,
		|ИнтеграцияСБанком");
	
КонецФункции

&НаСервере
Функция СвойстваПоложенияОкна()
	
	ВключенныеСвойстваБанковскогоСчета = Новый Массив;
	Для Каждого КлючИЗначение Из СвойстваБанковскогоСчета Цикл
		Если КлючИЗначение.Значение Тогда
			ВключенныеСвойстваБанковскогоСчета.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ВключенныеСвойстваБанковскогоСчета, "/");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСвойстваБанковскогоСчета(ТекОбъект, Форма)
	
	Форма.СвойстваБанковскогоСчета.СчетКонтрагента = ТипЗнч(ТекОбъект.Владелец) = Тип("СправочникСсылка.Контрагенты");
	Форма.СвойстваБанковскогоСчета.СчетФизлица     = ТипЗнч(ТекОбъект.Владелец) = Тип("СправочникСсылка.ФизическиеЛица");
	Форма.СвойстваБанковскогоСчета.СчетОрганизации = ТипЗнч(ТекОбъект.Владелец) = Тип("СправочникСсылка.Организации");
	Форма.СвойстваБанковскогоСчета.НесколькоОрганизаций = Форма.СвойстваБанковскогоСчета.СчетОрганизации
		И Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	Форма.СвойстваБанковскогоСчета.КорпКарта = Не Форма.СвойстваБанковскогоСчета.СчетФизлица
		И ТекОбъект.СчетКорпоративныхРасчетов;
	Форма.СвойстваБанковскогоСчета.ГОЗ = Не Форма.СвойстваБанковскогоСчета.СчетФизлица
		И Форма.ИспользуетсяГособоронзаказ
		И ЗначениеЗаполнено(ТекОбъект.ГосударственныйКонтракт);
	Форма.СвойстваБанковскогоСчета.ИнтеграцияСБанком = Форма.СвойстваБанковскогоСчета.СчетОрганизации
		И Форма.ИнтеграцияСБанком;
	Форма.СвойстваБанковскогоСчета.БанкДляРасчетов = ЗначениеЗаполнено(ТекОбъект.БанкДляРасчетов);
	Форма.СвойстваБанковскогоСчета.ЯвляетсяБанкомРФ = Форма.ЯвляетсяБанкомРФ;
	Форма.СвойстваБанковскогоСчета.ВозможныДопРеквизиты = Форма.СвойстваБанковскогоСчета.СчетОрганизации;
	Форма.СвойстваБанковскогоСчета.НФО = Форма.СвойстваБанковскогоСчета.СчетОрганизации
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетНФО")
		И ЗначениеЗаполнено(ТекОбъект.Владелец)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекОбъект.Владелец, "НекредитнаяФинансоваяОрганизация");
	Форма.СвойстваБанковскогоСчета.ВыпискаЗагружаетсяПоДепозитномуСчету = ТекОбъект.ВыпискаЗагружаетсяПоДепозитномуСчету;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаБанка(Знач ВалютаДенежныхСредств, Знач ЭтоСчетКорпоративныхРасчетов)
	
	СчетаОтбора = Новый Массив;
	ОтбиратьПоВалюте = Ложь;
	ОбразецСчета     = Неопределено;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТолькоРублевые  = Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет()
		Или ВалютаДенежныхСредств = ВалютаРеглУчета;
	ТолькоВалютные  = ЗначениеЗаполнено(ВалютаДенежныхСредств) И ВалютаДенежныхСредств <> ВалютаРеглУчета;
	
	Если Не ЭтоСчетКорпоративныхРасчетов Тогда
		СчетаОтбора = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
		Если ТолькоРублевые Тогда
			ОбразецСчета = ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньги");;
		ИначеЕсли ТолькоВалютные Тогда
			ОбразецСчета = ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньгиВВалюте");
		Иначе
			Возврат СчетаОтбора;
		КонецЕсли;
		
		ОтбиратьПоВалюте = Истина;
		СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ОбразецСчета);
		
		Возврат Новый ФиксированныйМассив(СчетаБанка);
	КонецЕсли;
	
	Если ТолькоРублевые Тогда
		ОтбиратьПоВалюте = Истина;
		ОбразецСчета     = ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетов");
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньги"));
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетов"));
	ИначеЕсли ТолькоВалютные Тогда
		ОтбиратьПоВалюте = Истина;
		ОбразецСчета     = ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетовВВалюте");
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньгиВВалюте"));
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетовВВалюте"));
	Иначе
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньги"));
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("БезналичныеДеньгиВВалюте"));
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетов"));
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетовВВалюте"));
	КонецЕсли;
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ОбразецСчета);
	
	Возврат Новый ФиксированныйМассив(СчетаБанка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЭлементыКорпоративныеКарты(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаКорпоративныеКартыАналитика.Доступность = Объект.СчетКорпоративныхРасчетов;
	УстановитьПараметрыВыбораСчетаБанк(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетКорпоративныхРасчетовИзменение(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.СчетКорпоративныхРасчетов Тогда
		Запись = Форма.КорпоративныеКарты.Добавить();
		Запись.БанковскийСчет = Форма.БанковскийСчетСсылка;
		Запись.Организация    = Объект.Владелец;
	Иначе
		Форма.КорпоративныеКарты.Очистить();
	КонецЕсли;
	
	ЭлементыКорпоративныеКарты(Форма);
	
	СчетУчетаПоУмолчанию(Форма);
	УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетУчетаПоУмолчанию(Форма, ИзменениеВалюты = Ложь)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.СчетКорпоративныхРасчетов И ЗначениеЗаполнено(Объект.СчетБанк) И Не ИзменениеВалюты Тогда
		ЗначениеОтбора = Неопределено;
		Для Каждого ПараметрВыбора Из Элементы.СчетБанк.ПараметрыВыбора Цикл
			Если ПараметрВыбора.Имя = "Отбор.Ссылка" Тогда
				ЗначениеОтбора = ПараметрВыбора.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеОтбора = Неопределено Или ЗначениеОтбора.Найти(Объект.СчетБанк) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.СчетБанк = БанковскиеСчетаКлиентСервер.СчетУчетаПоНомеру(Объект.НомерСчета, Объект.Валютный);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		
		Если РеквизитыБанка.ЯвляетсяБанкомРФ Тогда
			Форма.БИКБанка = РеквизитыБанка.Код;
		Иначе
			Форма.БИКБанка = РеквизитыБанка.СВИФТБИК;
		КонецЕсли;
		
		Форма.НаименованиеБанка = РеквизитыБанка.Наименование;
		Форма.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
		Форма.ЯвляетсяБанкомРФ = РеквизитыБанка.ЯвляетсяБанкомРФ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаДляРасчетовНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		Форма.КодБанкаДляРасчетов = РеквизитыБанка.Код;
		Форма.ДеятельностьБанкаНепрямыхРасчетовПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьВалютыСчета(Форма);
	
	ЭтоКлиринговаяВалюта = Ложь;
	АлфавитныйСимвол = Сред(Форма.Объект.НомерСчета, 6, 1);
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АлфавитныйСимвол) Тогда
		ЦифраШестогоРазряда = СтрНайти(БанковскиеПравила.ДопустимыеАлфавитныеСимволыНомераБанковскогоСчета()
			, АлфавитныйСимвол);
		ЭтоКлиринговаяВалюта = ЦифраШестогоРазряда <> Неопределено
	КонецЕсли;
	
	Форма.Элементы.ВалютаДенежныхСредств.ТолькоПросмотр = Форма.ЯвляетсяБанкомРФ И Не ЭтоКлиринговаяВалюта;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьПоляГосударственныйКонтракт(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ГосударственныйКонтракт.Доступность = Форма.ЭтоГосударственныйКонтракт;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьНомераИДатыРазрешения(Форма)
	
	Форма.Элементы.НомерИДатаРазрешения.Доступность = Форма.Объект.Валютный;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьБанкаДляРасчетов(Форма)
	
	Форма.Элементы.ГруппаРеквизитыБанкаДляРасчетов.Доступность = Форма.ИспользуетсяБанкДляРасчетов;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиQRКодаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущийЭлемент = Элементы.ДополнительныеРеквизитыQRКодаНастроитьСписок Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФормуРедактированияСписка(Элементы.ДополнительныеРеквизитыQRКода.ТекущиеДанные);
	КонецЕсли; 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьЭлементыНастроекПодключения(Форма, ТекущийТекстНомераСчета = "")
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоСчетДепозита = БанковскиеСчетаКлиентСервер.НазначениеСчета(Объект.НомерСчета) = "Депозиты";
	
	ВидимостьБаннераДиректБанк     = Ложь;
	ВидимостьГиперссылкиДиректБанк = Ложь;
	Форма.ВидимостьПодсказкиСБП = Форма.ВидимостьПодсказкиСБП И Форма.НомерСчетаКорректен
		И (Не ЭтоСчетДепозита Или Объект.ВыпискаЗагружаетсяПоДепозитномуСчету);
	
	Если (ЗначениеЗаполнено(Объект.НомерСчета) ИЛИ ЗначениеЗаполнено(ТекущийТекстНомераСчета))
		И Форма.НомерСчетаКорректен // номер счета корректен
		И (Не ЭтоСчетДепозита Или Объект.ВыпискаЗагружаетсяПоДепозитномуСчету)
		И Не Форма.БанкВРежимеИнтеграции Тогда
		ВидимостьБаннераДиректБанк     = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер";
		ВидимостьГиперссылкиДиректБанк = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	КонецЕсли;
	
	Если Элементы.ГруппаРекламаДиректБанк.Видимость <> ВидимостьБаннераДиректБанк Тогда
		Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннераДиректБанк;
		
		// При изменении видимости элементов в веб-клиенте происходит сброс данных редактируемого поля
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И ЗначениеЗаполнено(ТекущийТекстНомераСчета) Тогда
			Объект.НомерСчета = ТекущийТекстНомераСчета;
			УстановитьНаименованиеСчета(Форма, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СоставСтрокиПодсказки = Новый Массив;
	
	Если ВидимостьГиперссылкиДиректБанк Тогда
		ТекстГиперссылки = НСтр("ru = 'Подключить 1С:ДиректБанк'");
		ПодсказкаНомерСчетаДиректБанк = Новый ФорматированнаяСтрока(
			ТекстГиперссылки,, Форма.ЦветГиперссылки,, "ДиректБанкПомощникПодключения");
		СоставСтрокиПодсказки.Добавить(ПодсказкаНомерСчетаДиректБанк);
	КонецЕсли;
	
	Если Форма.ВидимостьПодсказкиСБП Тогда
		Если ЗначениеЗаполнено(Форма.НастройкаСБП) Тогда
			ТекстГиперссылки = НСтр("ru = 'Подключен обмен с СБП'");
		Иначе
			ТекстГиперссылки = НСтр("ru = 'Подключить обмен с СБП'");
		КонецЕсли;
		
		ПодсказкаПодключениеСБП = Новый ФорматированнаяСтрока(
			ТекстГиперссылки,, Форма.ЦветГиперссылки,, "СБППомощникПодключения");
		
		Если ЗначениеЗаполнено(СоставСтрокиПодсказки) Тогда
			СоставСтрокиПодсказки.Добавить(" | ");
		КонецЕсли;
		
		СоставСтрокиПодсказки.Добавить(ПодсказкаПодключениеСБП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоставСтрокиПодсказки) Тогда
		Форма.ПодсказкаНомерСчета = Новый ФорматированнаяСтрока(СоставСтрокиПодсказки);
	ИначеЕсли Форма.НомерСчетаКорректен Тогда
		Форма.ПодсказкаНомерСчета = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьИнформациюНадежностьБанков(Форма)

	Если Форма.ДеятельностьБанкаПрекращена
		ИЛИ НЕ ЗначениеЗаполнено(Форма.БИКБанка)
		ИЛИ НЕ Форма.ЯвляетсяБанкомРФ Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюНадежностьБанков()
	
	НадежностьБанковКлиент.ПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияСБП(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Оповестить("ИзмененаНастройкаОбмена");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создано подключение к СБП'"));
	
	Если Не ДополнительныеПараметры.ИспользоватьОплатуПоПлатежнымКартам
		И ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаСоздания(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Банк = РезультатЗакрытия;
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(Объект.Банк);
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкДляРасчетовОбработкаСоздания(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.БанкДляРасчетов = РезультатЗакрытия;
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(Объект.БанкДляРасчетов);
	ОбновитьРеквизитыБанкаДляРасчетовНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическомуЛицуЗаписываетсяСчетИПНаСервере(Знач Контрагент, Знач НомерСчета)
	
	Возврат Справочники.Контрагенты.ФизическомуЛицуЗаписываетсяСчетИП(Контрагент, НомерСчета);
	
КонецФункции

&НаКлиенте
Процедура ВопросЗаписатьФизическомуЛицуСчетИПЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ИзменитьВидКонтрагентаНаИП", Истина);
	Иначе
		ПараметрыЗаписи.Вставить("ИзменитьВидКонтрагентаНаИП", Ложь);
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи)
		И ПараметрыЗаписи.Свойство("Закрыть", Истина) Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыКодаДляОплаты

&НаСервере
Процедура ПроверитьЗаполнениеРеквизитовКодаДляОплаты(Отказ)
	СписокРеквизитов = Новый Массив;
	
	ПредставленияРеквизитов = Элементы.ДополнительныеРеквизитыQRКодаИдентификатор.СписокВыбора;
	
	Для НомерСтроки = 1 По ДополнительныеРеквизитыQRКода.Количество() Цикл
		СтрокаРеквизита = ДополнительныеРеквизитыQRКода[НомерСтроки - 1];
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"ДополнительныеРеквизитыQRКода", НомерСтроки, "Идентификатор");
			
		Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Идентификатор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Заполнение", НСтр("ru = 'Реквизит'"), НомерСтроки, 
				НСтр("ru = 'Дополнительные реквизиты QR кода для оплаты'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		ИначеЕсли ПредставленияРеквизитов.НайтиПоЗначению(СтрокаРеквизита.Идентификатор) = Неопределено Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Корректность", НСтр("ru = 'Реквизит'"), НомерСтроки, 
				НСтр("ru = 'Дополнительные реквизиты QR кода для оплаты'"),
				НСтр("ru = 'Недопустимый идентификатор'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		ИначеЕсли СписокРеквизитов.Найти(СтрокаРеквизита.Идентификатор) <> Неопределено Тогда
			ЭлементСписка = ПредставленияРеквизитов.НайтиПоЗначению(СтрокаРеквизита.Идентификатор);
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Корректность", НСтр("ru = 'Реквизит'"), НомерСтроки, 
				НСтр("ru = 'Дополнительные реквизиты QR кода для оплаты'"), 
				СтрШаблон(НСтр("ru = 'Реквизит ""%1"" уже есть в списке.'"), ЭлементСписка.Представление));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		Иначе
			СписокРеквизитов.Добавить(СтрокаРеквизита.Идентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНадписи(Число)
	Склонения = ПолучитьСклоненияСтрокиПоЧислу(НСтр("ru = 'значение'"), Число,,"ЧС=Количественное", "ПД=Именительный");
	
	Если Склонения.Количество() = 1 Тогда
		Возврат Склонения[0];
	Иначе
		Возврат СтрШаблон("%1 %2", Число, НСтр("ru = 'значение'"));
	КонецЕсли; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеКолонкиРеквизитыQRКода(СтрокаТаблицы)
		Если НЕ СтрокаТаблицы.ВыбиратьИзСписка Тогда
			СтрокаТаблицы.НадписьНастроитьСписок = "";
		ИначеЕсли СтрокаТаблицы.ДопустимыеЗначения.Количество() > 0 Тогда
			СтрокаТаблицы.НадписьНастроитьСписок = ПредставлениеНадписи(СтрокаТаблицы.ДопустимыеЗначения.Количество()); 
		Иначе
			СтрокаТаблицы.НадписьНастроитьСписок = НСтр("ru = 'Настроить список'");
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСписка(ТекущиеДанные)
	Если НЕ ТекущиеДанные.ВыбиратьИзСписка Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("СписокЗначений", ТекущиеДанные.ДопустимыеЗначения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеСпискаЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ОткрытьФорму("Справочник.РеквизитыКодаДляОплаты.Форма.ФормаНастройкиСписка",ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеСпискаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Перем ТекущиеДанные;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СписокЗначений")
		ИЛИ НЕ ДополнительныеПараметры.Свойство("ТекущиеДанные", ТекущиеДанные) Тогда
		
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные.ДопустимыеЗначения = ВыбранноеЗначение;
	
	ЗаполнитьДополнительныеКолонкиРеквизитыQRКода(ТекущиеДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВариантов(СписокЗначений)
	Для каждого КлючИЗначение Из Справочники.РеквизитыКодаДляОплаты.СписокРеквизитов() Цикл
		СписокЗначений.Добавить(КлючИЗначение.Ключ, 
			СтрШаблон("%1 (%2)", КлючИЗначение.Значение.Представление, КлючИЗначение.Ключ));
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьНастройкиЗагрузкаВыпискиПоДепозиту(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВидимостьНастройки = БанковскиеСчетаКлиентСервер.НазначениеСчета(Объект.НомерСчета) = "Депозиты";
	
	Элементы.ВыпискаЗагружаетсяПоДепозитномуСчету.Видимость = ВидимостьНастройки;
	
КонецПроцедуры

#КонецОбласти
