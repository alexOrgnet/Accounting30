&НаКлиенте
Перем УстановкаОсновногоБанковскогоСчетаВыполнена;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		
		Владелец = Параметры.Отбор.Владелец;
		
	КонецЕсли;
	
	Элементы.Владелец.Видимость = ЗначениеЗаполнено(Владелец);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Создать", "Видимость", ЗначениеЗаполнено(Владелец));
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Элементы.Владелец.Заголовок = НСтр("ru = 'Контрагент'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			Элементы.Владелец.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
			Элементы.Владелец.Заголовок = НСтр("ru = 'Организация'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
			
			Элементы.СчетБанк.Видимость = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
			
			// Переключение на подменю создать
			ДоступноСоздание = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета);

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Создать", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоздать", "Видимость", ДоступноСоздание);

		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Элементы.Владелец.Заголовок = НСтр("ru = 'Физическое лицо'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.ФизическиеЛица);
			
		КонецЕсли;
		
		ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	Элементы.ФормаИспользоватьОсновным.Видимость = ЗначениеЗаполнено(Владелец)
		И ДоступноИспользоватьОсновным И Не ЭтоИнтерфейсИнтеграцииСБанком;
	
	Элементы.Основной.Видимость = ЗначениеЗаполнено(Владелец) И Не ЭтоИнтерфейсИнтеграцииСБанком;
	Элементы.СтатусСчета.Видимость = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВИнформационнойБазеВключена();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	УстановитьПараметрыСписка(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаВыполнена" Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Истина;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если ЗначениеЗаполнено(Владелец) И Владелец = Параметр.КонтрагентОрганизация Тогда
			
			Если УстановкаОсновногоБанковскогоСчетаВыполнена = Истина Тогда
				
				ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
				УстановитьПараметрыСписка(ЭтотОбъект);
				
				УправлениеФормойКлиент();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет")
			И ЗначениеЗаполнено(Владелец) И Владелец = Параметр.Владелец Тогда
			ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Элементы.Список.ТекущаяСтрока = Параметр.Ссылка;
		УстановитьПараметрыСписка(ЭтотОбъект);
		УправлениеФормойКлиент();
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УправлениеФормойКлиент();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Свойство("Ссылка") И ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			И ТекущиеДанные.Свойство("Основной") И ТекущиеДанные.Основной
			И (ТекущиеДанные.Свойство("ПометкаУдаления") И ТекущиеДанные.ПометкаУдаления
				Или ТекущиеДанные.Свойство("ДатаЗакрытия") И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗакрытия)) Тогда
			ПараметрОповещения = Новый Структура("Ссылка, Владелец, ОсновнойБанковскийСчет",
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.Владелец,
				ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
			Оповестить("ИзмененБанковскийСчет", ПараметрОповещения);
		Иначе
			УправлениеФормойКлиент();
		КонецЕсли;
	КонецЕсли;
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	БИКБанков = Новый Массив;
	Для каждого ЭлементСписка Из Строки Цикл
		БИКБанков.Добавить(ЭлементСписка.Значение.Данные.БИК);
	КонецЦикла;
	
	Результат = НадежностьБанков.ИнформацияОКритичныхСобытиях(БИКБанков);
	Если НЕ Результат.Используется Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Строки Цикл
		ЕстьСобытие = Результат.События[ЭлементСписка.Значение.Данные.БИК] <> Неопределено;
		Если ЕстьСобытие Тогда
			ЭлементСписка.Значение.Оформление["Наименование"].УстановитьЗначениеПараметра(
				"ЦветТекста",
				ЦветаСтиля.КритичноеСобытиеНадежностьБанковЦветТекста);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Владелец) Или Копирование Или ТипЗнч(Владелец) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Владелец);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыВыбораЗавершение", ЭтотОбъект, ПараметрыФормы);

	ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаВыбораВидаСчета",
		ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьОсновным(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено
		Или Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка")
		Или Не Элементы.Список.ТекущиеДанные.Свойство("Владелец") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Ссылка = ОсновнойБанковскийСчет Тогда
		ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		ОсновнойБанковскийСчет = Элементы.Список.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Если ФизическомуЛицуЗаписываетсяСчетИПНаСервере(Владелец, Элементы.Список.ТекущиеДанные.НомерСчета) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьФизическомуЛицуСчетИПЗавершение", ЭтотОбъект, Новый Структура);
		
		ТекстВопроса = НСтр("ru='Номер основного счета контрагента был определен, как счет индивидуального предпринимателя.
						|
						|Изменить вид контрагента на ""Индивидуальный предприниматель""?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПараметрыСписка(ЭтотОбъект);
	
	УстановкаОсновногоБанковскогоСчетаВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КонтрагентОрганизация",  Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("ОсновнойБанковскийСчет", ОсновнойБанковскийСчет);
	
	Оповестить("УстановкаОсновногоБанковскогоСчета", СтруктураПараметров);
	
	// Если форма владельца закрыта, то запишем основной банковский счет самостоятельно.
	Если Не УстановкаОсновногоБанковскогоСчетаВыполнена Тогда
		УстановитьОсновнойБанковскийСчет(СтруктураПараметров);
	КонецЕсли;
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЦифровойСчет(Команда)
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат;
	КонецЕсли;

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Владелец);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЦифровойСчет", Истина);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлементаЦифровойСчет", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат;
	КонецЕсли;

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Владелец);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента", ПараметрыФормы);  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура УстановитьОсновнойБанковскийСчет(СтруктураПараметров)
	
	Справочники.БанковскиеСчета.УстановитьОсновнойБанковскийСчет(
		СтруктураПараметров.КонтрагентОрганизация,
		СтруктураПараметров.ОсновнойБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойКлиент()
	
	Если ОсновнойБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ДоступноИспользоватьОсновным И ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			Элементы.ФормаИспользоватьОсновным.Пометка = ТекущиеДанные.Ссылка = ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ПометкаУдаления") И ТекущиеДанные.ПометкаУдаления Тогда
			Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
		ИначеЕсли ТекущиеДанные.Свойство("ДатаЗакрытия") И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗакрытия) Тогда
			Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
		ИначеЕсли ТекущиеДанные.Свойство("ЦифровойСчет") И ТекущиеДанные.ЦифровойСчет Тогда
			Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
		Иначе
			Элементы.ФормаИспользоватьОсновным.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСчетов()
	
	СтатусыСчетов = Новый Структура;
	СтатусыСчетов.Вставить("СчетВРежимеИнтеграции", 0);
	СтатусыСчетов.Вставить("СчетБезИнтеграции", 1);
	
	Возврат СтатусыСчетов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСписка(Форма)
	
	Список = Форма.Список;
	
	СтатусыСчетов = СтатусыСчетов();
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСчетВРежимеИнтеграции", СтатусыСчетов.СчетВРежимеИнтеграции);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСчетБезИнтеграции", СтатусыСчетов.СчетБезИнтеграции);
	
	Если ЗначениеЗаполнено(Форма.ОсновнойБанковскийСчет) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойБанковскийСчет", Форма.ОсновнойБанковскийСчет);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойБанковскийСчет", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаЗакрытия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическомуЛицуЗаписываетсяСчетИПНаСервере(Знач Контрагент, Знач НомерСчета)
	
	Возврат Справочники.Контрагенты.ФизическомуЛицуЗаписываетсяСчетИП(Контрагент, НомерСчета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьВидКонтрагентаНаИП(Владелец)
	
	Попытка
		
		ВладелецОбъект = Владелец.ПолучитьОбъект();
		ВладелецОбъект.ИндивидуальныйПредприниматель = Истина;
		ВладелецОбъект.Записать();
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗаписатьФизическомуЛицуСчетИПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ИзменитьВидКонтрагентаНаИП(Владелец) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 не удалось изменить вид контрагента на ""Индивидуальный предприниматель"".'"),
							Владелец);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыСписка(ЭтотОбъект);
	
	УстановкаОсновногоБанковскогоСчетаВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КонтрагентОрганизация",  Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("ОсновнойБанковскийСчет", ОсновнойБанковскийСчет);
	
	Оповестить("УстановкаОсновногоБанковскогоСчета", СтруктураПараметров);
	
	// Если форма владельца закрыта, то запишем основной банковский счет самостоятельно.
	Если Не УстановкаОсновногоБанковскогоСчетаВыполнена Тогда
		УстановитьОсновнойБанковскийСчет(СтруктураПараметров);
	КонецЕсли;
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Владелец);
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияБанковскиеСчетаОрганизаций());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;

	Если РезультатЗакрытия.ЦифровойСчет Тогда 
		
		ДополнительныеПараметры.Вставить("ЦифровойСчет", Истина);
		ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлементаЦифровойСчет", ДополнительныеПараметры);
		
	Иначе 
		
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

