#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция БанковскиеСчетаОрганизации(ВладелецСчета, ВалютаСчета, Банк = Неопределено, ЦифровойСчет = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(2999, 1, 1)
	|		ИНАЧЕ БанковскиеСчета.ДатаЗакрытия
	|	КОНЕЦ КАК ДатаЗакрытияДляУпорядочивания,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Основной
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|	И БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.ЦифровойСчет = &ЦифровойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной УБЫВ,
	|	ДатаЗакрытияДляУпорядочивания УБЫВ,
	|	Представление";
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Если Банк = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БанковскиеСчета.Банк = &Банк", "ИСТИНА");
	КонецЕсли;
	
	Если ЦифровойСчет = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БанковскиеСчета.ЦифровойСчет = &ЦифровойСчет", "ИСТИНА");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецСчета", ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",        ВалютаСчета);
	Запрос.УстановитьПараметр("Банк",          Банк); 
	Запрос.УстановитьПараметр("ЦифровойСчет",  ЦифровойСчет);

	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает реквизиты банковских счетов
// 
// Параметры:
//  БанковскиеСчета - Массив из СправочникСсылка.БанковскиеСчета - Банковские счета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Реквизиты банковских счетов
//    * НомерСчета - Строка - Номер счета
//    * БанкКод - Строка - БИК банка
//    * ДатаОткрытия - Дата - Дата открытия
//    * ДатаЗакрытия - Дата - Дата закрытия
//
Функция РеквизитыБанковскихСчетов(БанковскиеСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскиеСчета", БанковскиеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БанкКод,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&БанковскиеСчета)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Владелец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

Функция КоличествоБанковскихСчетовОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Процедура ПроверитьУстановитьЗначениеОпцииИспользоватьНесколькоБанковскихСчетовОрганизации(Организация, ПометкаУдаления = Ложь) Экспорт
	
	ДолжныИспользоваться = ПометкаУдаления ИЛИ КоличествоБанковскихСчетовОрганизации(Организация) > 1;
	Если ДолжныИспользоваться Тогда
		ВключитьИспользованиеНесколькоБанковскихСчетов(Организация);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоБанковскихСчетовОрганизации",
		Новый Структура("Организация", Организация));
	
КонецФункции

Процедура УстановитьОсновнойБанковскийСчет(Владелец, БанковскийСчет) Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации")
		И НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентОрганизацияОбъект = Владелец.ПолучитьОбъект();
	
	УстановитьОсновнойБанковскийСчет = Истина;
	
	Попытка
		КонтрагентОрганизацияОбъект.Заблокировать();
	Исключение
		// в случае блокировки - не выполнять изменение объекта
		УстановитьОсновнойБанковскийСчет = Ложь;
		// записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заблокировать объект.'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,, КонтрагентОрганизацияОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	Если УстановитьОсновнойБанковскийСчет Тогда
		КонтрагентОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскийСчет;
		КонтрагентОрганизацияОбъект.Записать();
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			УчетЗарплаты.ОбновитьОсновнойВариантПеречисленияСотруднику(Владелец, БанковскийСчет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодразделениеПоУмолчанию(Организация, БанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ПодразделениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ПодразделениеОрганизации");
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Возврат ПодразделениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ТипПодразделения = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения();
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если Не ЗначениеЗаполнено(ПодразделениеПоУмолчанию) 
		Или ТипЗнч(ПодразделениеПоУмолчанию) <> ТипПодразделения Тогда
		Возврат Новый(ТипПодразделения);
	КонецЕсли;
	
	ОрганизацияПодразделения = БухгалтерскийУчетПереопределяемый.ОрганизацияПодразделения(ПодразделениеПоУмолчанию);
	Если ОрганизацияПодразделения <> Организация Тогда
		Возврат Новый(ТипПодразделения);
	КонецЕсли;
	
	Возврат ПодразделениеПоУмолчанию;
	
КонецФункции

Функция БанковскийСчетПоРеквизитам(Владелец, Банк, НомерСчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	БанковскиеСчета.ПометкаУдаления,
	|	БанковскиеСчета.Ссылка");
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(БанковскиеПравила.МаксимальнаяДлинаНомераСчета());
	ПриведенныйНомерСчета = ТипСтрока.ПривестиЗначение(НомерСчета);
	Запрос.УстановитьПараметр("НомерСчета", ПриведенныйНомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Получает ссылку на элемент справочника с переданными свойствами.
// Если элемент с таким набором свойств отсутствует в справочнике,
// он автоматически создается.
//
// Параметры:
//  - Владелец - Ссылка - ссылка на элемент-владелец
//  - НомерСчета - Строка - номер банковского счета
//  - БИК        - Строка - БИК банка
//  - ДанныеЗаполнения - Структура - дополнительные данные для заполнения нового элемента справочника
//
// Возвращаемое значение:
//  - Ссылка - ссылка на элемент справочника
//
Функция ПолучитьЭлемент(Знач Владелец, Знач НомерСчета, Знач БИК, ДанныеЗаполнения = Неопределено) Экспорт
	
	Результат = ПустаяСсылка();
	
	// Поиск существующего банковского счета по номеру и БИК
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",   Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("БИК",        БИК);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Банк.Код = &БИК
	|	И БанковскиеСчета.Банк.КоррСчет = &КоррСчет";
	
	КоррСчет = "";
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И ДанныеЗаполнения.Свойство("КоррСчетБанка", КоррСчет)
		И ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(КоррСчет)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоррСчет) Тогда
		КоррСчет = СокрЛП(СтрЗаменить(КоррСчет, "00000000000000000000", ""));
		Запрос.УстановитьПараметр("Коррсчет", КоррСчет);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И БанковскиеСчета.Банк.КоррСчет = &КоррСчет", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Если Результат.Пустая() Тогда
		
		ДанныеБанковскогоСчета = Новый Структура;
		ДанныеБанковскогоСчета.Вставить("Владелец",   Владелец);
		ДанныеБанковскогоСчета.Вставить("НомерСчета", НомерСчета);
		ДанныеБанковскогоСчета.Вставить("БИК",        БИК);
		ДанныеБанковскогоСчета.Вставить("КоррСчетБанка", КоррСчет);
		
		Если ДанныеЗаполнения <> Неопределено Тогда
			Если ДанныеЗаполнения.Свойство("НаименованиеБанка") Тогда
				ДанныеБанковскогоСчета.Вставить("НаименованиеБанка", ДанныеЗаполнения.НаименованиеБанка);
			ИначеЕсли ДанныеЗаполнения.Свойство("Банк") И ТипЗнч(ДанныеЗаполнения.Банк) = Тип("Строка") Тогда
				ДанныеБанковскогоСчета.Вставить("НаименованиеБанка", ДанныеЗаполнения.Банк);
			КонецЕсли;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = СоздатьЭлемент();
		БанковскийСчетКонтрагента.Заполнить(ДанныеБанковскогоСчета);
		БанковскийСчетКонтрагента.Записать();
		
		Результат = БанковскийСчетКонтрагента.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция БанковскийСчетПоГосОбронЗаказу(Владелец, ГосКонтракт, Валюта = Неопределено) Экспорт
	
	Если Валюта = Неопределено Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	БанковскийСчет = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",    Владелец);
	Запрос.УстановитьПараметр("ГосКонтракт", ГосКонтракт);
	Запрос.УстановитьПараметр("Валюта",      Валюта);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|	И БанковскиеСчета.ГосударственныйКонтракт = &ГосКонтракт
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

// Возвращает реквизиты банковского счета - номер счета, БИК банка, вид счета, дата открытия и закрытия счета.
//
// Параметры:
//   БанковскийСчет - СправочникСсылка.БанковскиеСчета - ссылка на счет.
//
// Возвращаемое значение:
//   - Структура - реквизиты счета.
//   - Неопределено - если счет не найден.
//
Функция РеквизитыСчета(БанковскийСчет) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БИКБанка,
	|	БанковскиеСчета.Банк.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчета.ВидСчета КАК ВидСчета,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает признак наличия валютных счетов у проверяемой организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Булево - принимает значение Истина, если у организации есть хотя бы один банковский счет в валюте, отличной от
//          валюты регламентированного учета
//
Функция ЕстьСчетаВИностраннойВалюте(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ Первые 1
		|	ИСТИНА КАК НаличиеСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Валютный
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|	И БанковскиеСчета.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает счет учета банковского счета (счет банк), для подстановки в банковские документы
//
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета
//
// Возвращаемое значение:
//  СчетБанк - ПланыСчетовСсылка.Хозрасчетный - счет учета банковского счета
//
Функция СчетУчетаБанковскогоСчета(БанковскийСчет) Экспорт
	
	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ПустойСчет;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		БанковскийСчет, "СчетБанк, НомерСчета, Валютный, ЦифровойСчет");
	УстановитьПривилегированныйРежим(Ложь);
	
	СчетБанк = РеквизитыБанковскогоСчета.СчетБанк;
	
	Если ЗначениеЗаполнено(СчетБанк) И СчетБанк <> ПустойСчет Тогда
		Возврат СчетБанк;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыБанковскогоСчета.НомерСчета) Тогда
		Если РеквизитыБанковскогоСчета.Валютный = Неопределено Тогда
			СчетБанк = БанковскиеСчетаКлиентСервер.СчетУчетаПоНомеру(РеквизитыБанковскогоСчета.НомерСчета);
		Иначе
			СчетБанк = БанковскиеСчетаКлиентСервер.СчетУчетаПоНомеру(
				РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета.Валютный, РеквизитыБанковскогоСчета.ЦифровойСчет);
		КонецЕсли;
	Иначе
		СчетБанк = ПустойСчет;
	КонецЕсли;
	
	Возврат СчетБанк;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

Процедура ВключитьИспользованиеНесколькоБанковскихСчетов(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации.СоздатьМенеджерЗаписи();
	Запись.Организация  = Организация;
	Запись.Используется = Истина;
	Запись.Записать();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК БанковскиеСчета
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = БанковскиеСчета.Владелец.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|ИЛИ ( ЗначениеРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.ФизическиеЛица)
	|          И ЧтениеСпискаРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.ФизическиеЛица) )
	|ИЛИ ЧтениеСпискаРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.Контрагенты)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(БанковскиеСчета.Владелец)
	|  И ИзменениеСпискаРазрешено(БанковскиеСчета.Владелец)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПубликацияДанных

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор справочника Банковские счета.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "bank_accounts";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если НЕ Параметры.Отбор.Свойство("Владелец") Или НЕ ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
		
		Если НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
			
			Параметры.Отбор.Вставить("Владелец",
				БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаЭлемента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ");
	
	// Проверка на копирование
	Если Значение = Неопределено Тогда
		Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ЗначениеКопирования");
	КонецЕсли;
		
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Значение.ЦифровойСчет Тогда
		ВыбраннаяФорма = "ФормаЭлементаЦифровойСчет";
	Иначе
		ВыбраннаяФорма = "ФормаЭлемента";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПубликацияДанных

Функция ПубликуемыеДанные(Организация) Экспорт
	
	ПубликуемыеДанные = Новый Структура;
	ДанныеСчетов = Новый Массив;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаБанковскихСчетов = БанковскиеСчетаОрганизации(Организация, ВалютаРеглУчета);
	БанковскиеСчета = ТаблицаБанковскихСчетов.ВыгрузитьКолонку("Ссылка");
	РеквизитыСчетов = РеквизитыБанковскихСчетов(БанковскиеСчета);
	Для Каждого РеквизитыСчета Из РеквизитыСчетов Цикл
		ДанныеСчета = Новый Структура;
		Для Каждого ПравилоПубликации Из ПравилаПубликацииБанковскогоСчета() Цикл
			ПубликацияДанных.ОпубликоватьЗначениеПоПравилу(РеквизитыСчета, ПравилоПубликации, ДанныеСчета);
		КонецЦикла;
		
		ДанныеСчетов.Добавить(ДанныеСчета);
	КонецЦикла;
	
	ПубликуемыеДанные.Вставить(ПубликуемыйИдентификатор(), ДанныеСчетов);
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

Функция ПравилаПубликацииБанковскогоСчета()
	
	Правила = ПубликацияДанных.НовыеПравилаПубликации();
	
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "БанкКод",      "bank");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "НомерСчета",   "account");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ДатаОткрытия", "opening_date");
	ПубликацияДанных.ДобавитьПравилоПубликации(Правила, "ДатаЗакрытия", "closing_date");
	
	Возврат Правила;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Заполняет реквизит "Счет учета" в справочнике
//
// Параметры:
//  Параметры - Структура
//    * ОбработкаЗавершена - Булево - признак окончания обработки обновления, т.к. выборка данных для обработки пуста.
//
Процедура ЗаполнитьСчетУчета(Параметры) Экспорт
	
	СчетаБанка = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаБанка", СчетаБанка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Валютный КАК Валютный
	|ПОМЕСТИТЬ ВТ_БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И БанковскиеСчета.СчетБанк = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И БанковскиеСчета.НомерСчета <> """"""""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.БанковскийСчет КАК БанковскийСчет,
	|	ВложенныйЗапрос.СчетБанк КАК СчетБанк,
	|	СУММА(ВложенныйЗапрос.КоличествоДокументов) КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВТ_СчетаИзДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|		Хозрасчетный.СчетДт КАК СчетБанк,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйСубконто.Регистратор) КАК КоличествоДокументов
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|			ПО ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|				И ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|				И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|				И ХозрасчетныйСубконто.УточнениеПериода = Хозрасчетный.УточнениеПериода
	|				И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|				И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|			ПО ХозрасчетныйСубконто.Значение = ВТ_БанковскиеСчета.Ссылка
	|	ГДЕ
	|		Хозрасчетный.СчетДт В(&СчетаБанка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_БанковскиеСчета.Ссылка,
	|		Хозрасчетный.СчетДт
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_БанковскиеСчета.Ссылка,
	|		Хозрасчетный.СчетКт,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйСубконто.Регистратор)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|			ПО ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|				И ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|				И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|				И ХозрасчетныйСубконто.УточнениеПериода = Хозрасчетный.УточнениеПериода
	|				И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|				И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|			ПО ХозрасчетныйСубконто.Значение = ВТ_БанковскиеСчета.Ссылка
	|	ГДЕ
	|		Хозрасчетный.СчетКт В(&СчетаБанка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_БанковскиеСчета.Ссылка,
	|		Хозрасчетный.СчетКт) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.БанковскийСчет,
	|	ВложенныйЗапрос.СчетБанк
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТ_БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВТ_БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВТ_БанковскиеСчета.Валютный КАК Валютный,
	|	ЕСТЬNULL(ВТ_СчетаИзДокументов.СчетБанк, НЕОПРЕДЕЛЕНО) КАК СчетБанк,
	|	ЕСТЬNULL(ВТ_СчетаИзДокументов.КоличествоДокументов, 0) КАК КоличествоДокументов
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаИзДокументов КАК ВТ_СчетаИзДокументов
	|		ПО ВТ_БанковскиеСчета.Ссылка = ВТ_СчетаИзДокументов.БанковскийСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	БанковскийСчет,
	|	КоличествоДокументов УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ПредыдущийСчет = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Проверка на NULL и пустые поля
		Если Не ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСчет = Выборка.БанковскийСчет Тогда
			// По банковскому счету найдено несколько счетов учета. Приоритет отдается первому из выборки,
			// т.к. она упорядочена по максимальному числу указаний счета учета для данного банковского счета.
			Продолжить;
		КонецЕсли;
		
		ПредыдущийСчет = Выборка.БанковскийСчет;
		
		НачатьТранзакцию();
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.БанковскиеСчета");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.БанковскийСчет);
			Блокировка.Заблокировать();
			
			БанковскийСчет = Выборка.БанковскийСчет.ПолучитьОбъект();
			
			Если БанковскийСчет = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.СчетБанк) Тогда
				БанковскийСчет.СчетБанк = Выборка.СчетБанк;
			Иначе
				БанковскийСчет.СчетБанк = БанковскиеСчетаКлиентСервер.СчетУчетаПоНомеру(Выборка.НомерСчета, Выборка.Валютный);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(БанковскийСчет);
			ЗафиксироватьТранзакцию();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении обработчика БанковскиеСчета.ЗаполнитьСчетУчета для банковского счета ""%1"" по причине:
					|%2'"),
				Выборка.БанковскийСчет,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.БанковскиеСчета,
				Выборка.БанковскийСчет, ТекстСообщения);
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		КонецПопытки
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении обработчика БанковскиеСчета.ЗаполнитьСчетУчета
				|не удалось записать заполнение реквизита ""Счет учета"" в справочник ""Банковские счета"" для %1 элементов.'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура БанковскиеСчета.ЗаполнитьСчетУчета
				|обработала очередную элементов справочника ""Банковские счета"": %1 элементов.'"),
				ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.БанковскиеСчета, ,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Выполняет проверки на корректность заполнения номера счета и БИК.
//
// Параметры:
//  БанковскийСчет   - ДанныеФормыСтруктура - банковский счет, который требуется проверить.
//  КодБанка         - Строка - БИК банка, проверяемого счета.
//  ЯвляетсяБанкомРФ - Булево, признак российского банка.
//  Отказ            - Булево - см. описание параметра Отказ в процедуре ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(БанковскийСчет, КодБанка, ЯвляетсяБанкомРФ, Отказ) Экспорт
	
	ТекстСообщения = "";
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк)
		И ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.Банк",, Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(БанковскийСчет.Банк)
		И Не ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
		
	КонецЕсли;
	
	Если БанковскиеСчетаФормыКлиентСервер.НомерСчетаКорректен(БанковскийСчет.НомерСчета, КодБанка, ЯвляетсяБанкомРФ, ТекстСообщения) Тогда
		
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета)
			И ЗначениеЗаполнено(БанковскийСчет.Банк)
			И Не ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
			
			Если ЯвляетсяБанкомРФ Тогда
				Если НЕ БанковскиеПравила.ЭтоРублевыйСчет(БанковскийСчет.НомерСчета) Тогда
					ТекстСообщения = Нстр("ru = 'Валюта счета неизвестна. Проверьте номер счета'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
				КонецЕсли;
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Валюта счета'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.ВалютаДенежныхСредств",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
			НСтр("ru = 'Номер счета'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
		
	КонецЕсли;
	
	// Если есть ошибка, то запишем информацию о проблеме с расчетным счетом в журнал регистрации.
	Если Отказ И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать банковский счет'"),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.БанковскиеСчета,
			,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#Область ПрямойОбменСБанком

Функция БанкиИНастройкиСПрямымОбменом(Организация) Экспорт
	
	Настройки = Новый Соответствие;
	Для Каждого СчетНастройка Из БанковскиеСчетаСНастройкамиПрямогоОбмена(Организация) Цикл
		Если Настройки[СчетНастройка.Банк] = Неопределено Тогда
			Настройки.Вставить(СчетНастройка.Банк, СчетНастройка.НастройкаОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция БанковскиеСчетаСНастройкамиПрямогоОбмена(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	Банки.Код КАК БИК,
	|	ЕСТЬNULL(НастройкиОбменСБанками.Ссылка, НастройкиОбменСБанкамиПоБИК.Ссылка) КАК НастройкаОбмена,
	|	ВЫБОР
	|		КОГДА НастройкиОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
	|			ТОГДА 0
	|		КОГДА НастройкиОбменСБанкамиПоБИК.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
	|			И (НастройкиОбменСБанками.Организация = &Организация)
	|			И (НЕ НастройкиОбменСБанками.ПометкаУдаления)
	|			И (НЕ НастройкиОбменСБанками.Недействительна)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанкамиПоБИК
	|		ПО (Банки.Код = НастройкиОбменСБанкамиПоБИК.Банк.Код)
	|			И (НастройкиОбменСБанкамиПоБИК.Организация = &Организация)
	|			И (НЕ НастройкиОбменСБанкамиПоБИК.ПометкаУдаления)
	|			И (НЕ НастройкиОбменСБанкамиПоБИК.Недействительна)
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И БанковскиеСчета.Владелец = &Организация
	|	И (НастройкиОбменСБанками.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ НастройкиОбменСБанкамиПоБИК.Ссылка ЕСТЬ НЕ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	БИК";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция БанковскиеСчетаБезПрямогоОбмена(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
	|			И (БанковскиеСчета.Владелец = &Организация)
	|			И (НЕ НастройкиОбменСБанками.ПометкаУдаления)
	|			И (НЕ НастройкиОбменСБанками.Недействительна)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанкамиПоБИК
	|		ПО (Банки.Код = НастройкиОбменСБанками.Банк.Код)
	|			И (БанковскиеСчета.Владелец = &Организация)
	|			И (НЕ НастройкиОбменСБанкамиПоБИК.ПометкаУдаления)
	|			И (НЕ НастройкиОбменСБанкамиПоБИК.Недействительна)
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И БанковскиеСчета.Владелец = &Организация
	|	И НастройкиОбменСБанками.Ссылка ЕСТЬ NULL
	|	И НастройкиОбменСБанкамиПоБИК.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Банки.Код";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
