// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
// 
// Параметры:
//  ИсключенияПоискаСсылок - Массив из ОбъектМетаданных, Строка
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.Реклама);
КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
// Возвращаемое значение: 
//  Массив из Строка - имена реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив(); // Массив из Строка
	Результат.Добавить("Код");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Актуализировать рекламу.
//
Процедура АктуализироватьРекламу() Экспорт
	
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Попытка
		
		УдалитьРекламуПоДатеОкончания();
		
		ДобавитьОфлайнРекламу();
		
		ДобавитьОнлайнРекламу();
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			НСтр("ru = 'РекламныйСервис: АктуализироватьРекламу'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ДатаНачала);
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Удалить устаревшую рекламу.
// 
Процедура УдалитьРекламуПоДатеОкончания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СправочникРеклама.Ссылка КАК Реклама
	|ИЗ
	|	Справочник.Реклама КАК СправочникРеклама
	|ГДЕ
	|	СправочникРеклама.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СправочникРеклама.ДатаОкончания < &ТекущаяДата
	|	И СправочникРеклама.Ссылка > &Реклама
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникРеклама.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Реклама = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("Реклама", Реклама);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Реклама");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Реклама");
			Блокировка.Заблокировать();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Реклама = ВыборкаДетальныеЗаписи.Реклама; // СправочникСсылка.Реклама
				
				РекламаОбъект = Реклама.ПолучитьОбъект();
				
				// В БСП РС ВерсииОбъектов разделенный, измерение Объект содержит тип СправочникСсылка, 
				// в режиме сервиса при удалении элемента справочника Реклама происходит попытка удалить 
				// запись разделенного РС ВерсииОбъектов, это приводит к ошибке.
				РекламаОбъект.ОбменДанными.Загрузка = Истина;
				
				РекламаОбъект.Удалить();
				
				РегистрыСведений.ЗначенияХарактеристикРекламы.ОчиститьНаборЗаписейРекламы(Реклама);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЭлементРекламы(
				РекламныйСервисСлужебный.ИмяДействияУдаление());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия, 
				УровеньЖурналаРегистрации.Ошибка, 
				РекламаОбъект.Метаданные(), , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьОфлайнРекламу() Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Справочники.Реклама.ДобавитьОбновитьОфлайнРекламу");
	
	ТаблицаЭлементыРекламыИзМакета = ПолучитьДанныеОфлайнРекламыИзМакета();
	
	ТаблицаЭлементыРекламы = ПодготовитьТаблицуЭлементыРекламы(ТаблицаЭлементыРекламыИзМакета);
	
	ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЗагрузкаОфлайнРекламы();
	
	ДобавитьОбновитьРекламу(ТаблицаЭлементыРекламы, ИмяСобытия);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ТаблицаЭлементыРекламы.Количество());
	
КонецПроцедуры

// Добавить обновить контент онлайн рекламы.
// 
// Параметры:
//  ТаблицаЭлементыРекламыИзСервиса - см. НовыйТаблицаЭлементыРекламы
// 
Процедура ДобавитьОбновитьКонтентОнлайнРекламы(ТаблицаЭлементыРекламыИзСервиса) Экспорт
	
	Если ТаблицаЭлементыРекламыИзСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Справочники.Реклама.ДобавитьОбновитьКонтентОнлайнРекламы");
	
	ТаблицаЭлементыРекламы = ПодготовитьТаблицуЭлементыРекламы(ТаблицаЭлементыРекламыИзСервиса);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ПодготовитьТаблицуЭлементыРекламы");
	
	ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЗагрузкаОнлайнРекламы();
	
	ДобавитьОбновитьРекламу(ТаблицаЭлементыРекламы, ИмяСобытия);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ТаблицаЭлементыРекламы.Количество());
	
КонецПроцедуры

// Сопоставить характеристики рекламы.
// 
// Параметры:
//  ТаргетыРекламы - см. НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Процедура ДобавитьОбновитьТаргетыОнлайнРекламы(Знач ТаргетыРекламы) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Справочники.Реклама.ДобавитьОбновитьТаргетыОнлайнРекламы");
	
	ТаблицаЭлементыРекламы = НовыйТаблицаЭлементыРекламы();
	
	ВыборкаИдентификаторыРекламы = ВыборкаИтогиДобавитьОбновитьТаргетыОнлайнРекламы(ТаргетыРекламы);
	
	Пока ВыборкаИдентификаторыРекламы.Следующий() Цикл
		
		ИдентификаторРекламы = ВыборкаИдентификаторыРекламы.ИдентификаторРекламы;
		РекламаСсылка = ВыборкаИдентификаторыРекламы.РекламаСсылка;
		
		СтрокаТаблицыРекламы = ТаблицаЭлементыРекламы.Добавить();
		СтрокаТаблицыРекламы.Ссылка = РекламаСсылка;
		СтрокаТаблицыРекламы.Код = ИдентификаторРекламы;
		СтрокаТаблицыРекламы.Офлайн = Ложь;
		СтрокаТаблицыРекламы.Версия = ВыборкаИдентификаторыРекламы.Версия;;
		
		ТаблицаТаргеты = РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаТаргетыРекламы();
		ВыборкаТаргеты = ВыборкаИдентификаторыРекламы.Выбрать();
		Пока ВыборкаТаргеты.Следующий() Цикл
			
			ИдентификаторХарактеристики = ВыборкаТаргеты.ИдентификаторХарактеристики; // ОпределяемыйТип.ВидХарактеристикиРекламы
			Если ПустаяСтрока(ИдентификаторХарактеристики) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицы = ТаблицаТаргеты.Добавить();
			НоваяСтрокаТаблицы.РекламаСсылка = РекламаСсылка;
			НоваяСтрокаТаблицы.ИдентификаторРекламы = ИдентификаторРекламы;
			НоваяСтрокаТаблицы.Характеристика = ИдентификаторХарактеристики;
			ЗначениеХарактеристики = ВыборкаТаргеты.ЗначениеХарактеристики; // ОпределяемыйТип.ЗначениеХарактеристикиРекламы
			НоваяСтрокаТаблицы.Значение = ЗначениеХарактеристики;
			
		КонецЦикла;
		
		СтрокаТаблицыРекламы.Таргеты = ТаблицаТаргеты;
		
	КонецЦикла;
	
	ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЗагрузкаОнлайнРекламы();
	
	ДобавитьОбновитьРекламу(ТаблицаЭлементыРекламы, ИмяСобытия);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ТаблицаЭлементыРекламы.Количество());
	
КонецПроцедуры

#Область Конструкторы

// Изменяемые данные элемента рекламы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый данные элемента рекламы:
// * Ссылка - СправочникСсылка.Реклама - ссылка на элемент справочника Реклама.
// * Код - ОпределяемыйТип.ИдентификаторРекламы, Строка - идентификатор рекламного носителя.
// * ЦелевоеДействие - Строка - ссылка для перехода по событию нажатия на рекламу.
// * ДатаНачала - Дата - дата начала показа рекламы.
// * ДатаОкончания - Дата - дата окончания показа рекламы.
// * Офлайн - Булево - реклама полученная не из сервиса.
// * МинимальныйИнтервалПоказа - Число - в часах.
// * Изображение - Строка - изображение рекламы.
// * ЭкранныеФормыДляПоказа - Массив из Строка
// * Таргеты - см. РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаТаргетыРекламы
// * Версия - Число - версия рекламного носителя.
// * ПоказыватьМаркерРеклама - Булево
// * ЮридическоеЛицоРекламодателя - Строка
//
Функция НовыйТаблицаЭлементыРекламы() Экспорт
	
	Типы = РекламныйСервисСлужебный.Типы();
	
	ЭлементыРекламы = Новый ТаблицаЗначений();
	ЭлементыРекламы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Реклама"));
	ЭлементыРекламы.Колонки.Добавить("Код", Метаданные.ОпределяемыеТипы.ИдентификаторРекламы.Тип);
	ЭлементыРекламы.Колонки.Добавить(
		"ЦелевоеДействие", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(550)));
	ЭлементыРекламы.Колонки.Добавить("ДатаНачала", Типы.Дата);
	ЭлементыРекламы.Колонки.Добавить("ДатаОкончания", Типы.Дата);
	ЭлементыРекламы.Колонки.Добавить("Офлайн", Типы.Булево);
	ЭлементыРекламы.Колонки.Добавить("МинимальныйИнтервалПоказа", Типы.Число);
	ЭлементыРекламы.Колонки.Добавить("Изображение", Типы.Строка);
	ЭлементыРекламы.Колонки.Добавить("ЭкранныеФормыДляПоказа", Типы.Массив);
	ЭлементыРекламы.Колонки.Добавить("Таргеты", Типы.ТаблицаЗначений);
	ЭлементыРекламы.Колонки.Добавить("Версия", Типы.Число);
	ЭлементыРекламы.Колонки.Добавить("ПоказыватьМаркерРеклама", Типы.Булево);
	ЭлементыРекламы.Колонки.Добавить(
		"ЮридическоеЛицоРекламодателя", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	
	Возврат ЭлементыРекламы;
	
КонецФункции

// Новый таблица таргеты рекламы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый таблица таргеты рекламы:
// * ИдентификаторРекламы - ОпределяемыйТип.ИдентификаторРекламы
// * ИдентификаторХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
// * ЗначениеХарактеристики - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
// * Версия - Число
//
Функция НовыйТаблицаТаргетыРекламыИзДанныхСервиса() Экспорт
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ИдентификаторРекламы", Метаданные.ОпределяемыеТипы.ИдентификаторРекламы.Тип);
	Результат.Колонки.Добавить("ИдентификаторХарактеристики", Метаданные.ОпределяемыеТипы.ВидХарактеристикиРекламы.Тип);
	Результат.Колонки.Добавить("ЗначениеХарактеристики", Метаданные.ОпределяемыеТипы.ЗначениеХарактеристикиРекламы.Тип);
	Результат.Колонки.Добавить("Версия", РекламныйСервисСлужебный.Типы().Число);
	
	Результат.Индексы.Добавить("ИдентификаторХарактеристики");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросовИзДанныхСервиса

// Список таргеты онлайн рекламы из модели сервиса.
// 
// Параметры:
//  Данные - Массив из Структура:
//  * id - Строка
//  * targets - Массив из Структура:
//  ** characteristicId - Строка
//  ** characteristicValues - Массив из Строка
//  * version - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Функция ТаргетыОнлайнРекламыИзДанныхСервиса(Знач Данные) Экспорт
	
	Таблица = НовыйТаблицаТаргетыРекламыИзДанныхСервиса();
	ИмяСвойстваДанныхРекламыТаргеты = РекламныйСервисСлужебный.ИмяСвойстваДанныхРекламыТаргеты();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		
		ИдентификаторРекламы = РекламныйСервисСлужебный.ПривестиТипКИдентификаторуРекламы(СтрокаДанных.id);
		ВерсияЭлементаРекламы = СтрокаДанных.version;
		
		Если СтрокаДанных.Свойство(ИмяСвойстваДанныхРекламыТаргеты) Тогда
			
			СписокТаргетов = СтрокаДанных[ИмяСвойстваДанныхРекламыТаргеты]; // Массив из Структура
			ЗаполнитьСтрокиТаблицыТаргеты(Таблица, СписокТаргетов, ИдентификаторРекламы, ВерсияЭлементаРекламы);
			
		Иначе
			
			НоваяСтрокаТаблицы = Таблица.Добавить();
			НоваяСтрокаТаблицы.ИдентификаторРекламы = ИдентификаторРекламы;
			НоваяСтрокаТаблицы.Версия = ВерсияЭлементаРекламы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Прочитать полученные данные рекламы.
// 
// Параметры:
//  ТаблицаЭлементыРекламы см. НовыйТаблицаЭлементыРекламы
//  ДанныеИзСервиса - Строка
//  Офлайн - Булево - Признак офлайн/онлайн рекламы.
//
Процедура ЭлементыРекламыИзДанныхСервиса(ТаблицаЭлементыРекламы, Знач ДанныеИзСервиса, Знач Офлайн = Ложь) Экспорт
	
	ИмяПроцедуры = "РекламныйСервисСлужебный.ТаблицаЭлементыРекламыИзДанныхСервиса";
	
	ПолученныеДанныеРекламы = КонвертироватьДанныеРекламыИзСервиса(ДанныеИзСервиса);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяПроцедуры, "Реклама.ЭлементыРекламыИзДанныхСервиса", ПолученныеДанныеРекламы, Тип("Массив"));
	
	Для Каждого ДанныеРекламы Из ПолученныеДанныеРекламы Цикл
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ДанныеРекламы) = Тип("Структура"), 
			НСтр("ru = 'Тип полученных данных рекламы не равен Структура'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ИмяПроцедуры);
		
		ДанныеЭлемента = ТаблицаЭлементыРекламы.Добавить();
		
		// Действие по клику на рекламу
		ЦелевоеДействие = СвойствоСтруктуры(ДанныеРекламы, "action", "", Истина); // Строка
		ДанныеЭлемента.ЦелевоеДействие = Строка(ЦелевоеДействие);
		
		// Дата начала показа
		ДатаНачала = СвойствоСтруктуры(ДанныеРекламы, "actualFrom", Дата(1, 1, 1), Истина); // Дата
		ДанныеЭлемента.ДатаНачала = Дата(ДатаНачала);
		
		// Дата окончания показа
		ДатаОкончания = СвойствоСтруктуры(ДанныеРекламы, "actualTo", Дата(1, 1, 1)); // Дата
		ДанныеЭлемента.ДатаОкончания = Дата(ДатаОкончания);
		
		// id рекламы
		Код = СвойствоСтруктуры(ДанныеРекламы, "id", "", Истина); // Строка
		ДанныеЭлемента.Код = РекламныйСервисСлужебный.ПривестиТипКИдентификаторуРекламы(Код);
		
		ДанныеЭлемента.Офлайн = Офлайн;
		
		// Минимальный Интервал Показа
		МинимальныйИнтервалПоказаВЧасах = СвойствоСтруктуры(ДанныеРекламы, "minShowIntervalInHours", 0);
		МинутВЧасе = 60;
		ДанныеЭлемента.МинимальныйИнтервалПоказа = Число(МинимальныйИнтервалПоказаВЧасах) * МинутВЧасе;
		
		// Изображение
		ИзображениеТекст = СвойствоСтруктуры(ДанныеРекламы, "image", "", Истина); // Строка
		ДанныеЭлемента.Изображение = ИзображениеТекст;
		
		// Экранные формы для показа
		ЭкранныеФормы = СвойствоСтруктуры(ДанныеРекламы, "mediaContexts", Новый Массив);
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ЭкранныеФормы) = Тип("Массив"), 
			НСтр("ru = 'Тип поля ""mediaContexts"" ожидается ""массив""'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ИмяПроцедуры);
		Для Каждого ЭкраннаяФорма Из ЭкранныеФормы Цикл // Строка
			ДанныеЭлемента.ЭкранныеФормыДляПоказа.Добавить(ЭкраннаяФорма);
		КонецЦикла;
		
		// Таргеты или характеристики профиля потребителя.
		ИмяСвойстваДанныхРекламыТаргеты = РекламныйСервисСлужебный.ИмяСвойстваДанныхРекламыТаргеты();
		ОписаниеТаргеты = СвойствоСтруктуры(
			ДанныеРекламы, ИмяСвойстваДанныхРекламыТаргеты, Новый Массив); // Массив из Структура
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ОписаниеТаргеты) = Тип("Массив"), 
			НСтр("ru = 'Тип поля ""targets"" ожидается ""массив""'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ИмяПроцедуры);
		
		ДанныеЭлемента.Таргеты = ТаблицаТаргетыРекламы(ОписаниеТаргеты, ДанныеЭлемента.Код);
		
		// Версия рекламы
		Версия = СвойствоСтруктуры(ДанныеРекламы, "version", 0, Истина); // Число
		ДанныеЭлемента.Версия = Число(Версия);
		
		// Признак показа плашки "Реклама"
		ПоказыватьМаркерРеклама = СвойствоСтруктуры(ДанныеРекламы, "showAdvertisingMarker", Ложь); // Булево
		ДанныеЭлемента.ПоказыватьМаркерРеклама = Булево(ПоказыватьМаркерРеклама);
		
		// Наименование рекламодателя
		ЮридическоеЛицоРекламодателя = СвойствоСтруктуры(ДанныеРекламы, "advertiser", ""); // Строка
		ДанныеЭлемента.ЮридическоеЛицоРекламодателя = Строка(ЮридическоеЛицоРекламодателя);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОфлайнРеклама

// Получить данные рекламы из макетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ЭлементыРекламыИзДанныхСервиса
//
Функция ПолучитьДанныеОфлайнРекламыИзМакета()
	
	ТаблицаЭлементыРекламы = НовыйТаблицаЭлементыРекламы();
	
	ИмяМакетаОфлайнРекламы = РекламныйСервисСлужебный.ИмяМакетаОфлайнРекламы();
	ДанныеМакета = ПолучитьМакет(ИмяМакетаОфлайнРекламы).ПолучитьТекст(); // Строка
	
	Если ПустаяСтрока(ДанныеМакета) Тогда
		Возврат ТаблицаЭлементыРекламы;
	КонецЕсли;
	
	ЭлементыРекламыИзДанныхСервиса(ТаблицаЭлементыРекламы, ДанныеМакета, Истина);
	
	Возврат ТаблицаЭлементыРекламы;
	
КонецФункции

// Конвертировать данные оффлайн рекламы.
// 
// Параметры:
//  ДанныеИЗСервиса - Строка -  Данные макета
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * action					 - Строка - Целевое действие рекламы.
//  * actualFrom				 - Дата - Дата начала действия рекламы.
//  * actualTo					 - Дата - Дата окончания действия рекламы.
//  * id						 - Строка - Идентификатор рекламы.
//  * minShowIntervalInHours	 - Число - Минимальная частота показа Рекламы на Рекламном носителе в часах.
//  * image						 - Строка - Графическое изображение рекламного баннера в base64.
//  * mediaContexts				 - Массив из Строка - Экранные формы для показа рекламы.
//  * targets					 - Массив из Структура:
//  ** characteristicId - Строка
//  ** characteristicValues - Строка
//  * version					 - Число - Номер версии Рекламы (увеличивается при изменении данных).
//
Функция КонвертироватьДанныеРекламыИзСервиса(ДанныеИЗСервиса)
	
	ПолученныеДанныеРекламы = ДанныеИЗСервиса;
	Если ТипЗнч(ДанныеИЗСервиса) = Тип("Строка") Тогда
		СвойстваСДатой = НовыйСвойстваДанныхРекламыСДатой();
		ПолученныеДанныеРекламы = РекламныйСервисСлужебный.JSONВЗначение(ДанныеИЗСервиса, Ложь, СвойстваСДатой);
	КонецЕсли;
	
	Возврат ПолученныеДанныеРекламы;
	
КонецФункции

#КонецОбласти

#Область ОнлайнРеклама

Процедура ДобавитьОнлайнРекламу()
	
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Попытка
		
		ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЗагрузкаОнлайнРекламы();
		
		ТаргетыРекламы = СписокТаргетыОнлайнРекламы(ИмяСобытия);
		
		РегистрыСведений.ЗначенияХарактеристикПотребителяРекламы.ОбновитьЗначенияХарактеристикПотребителя(
			ТаргетыРекламы);
		
		ДобавитьОбновитьТаргетыОнлайнРекламы(ТаргетыРекламы);
		
		КонтентОнлайнРекламы = СписокКонтентОнлайнРекламы(ИмяСобытия);
		Если КонтентОнлайнРекламы.Количество() = 0 Тогда
			
			ОценкаПроизводительности.ЗакончитьЗамерВремени(
				НСтр("ru = 'РекламныйСервис: ДобавитьОнлайнРекламу'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
					ДатаНачала);
			
			Возврат;
			
		КонецЕсли;
		
		ДобавитьОбновитьКонтентОнлайнРекламы(КонтентОнлайнРекламы);
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			НСтр("ru = 'РекламныйСервис: ДобавитьОнлайнРекламу'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			ДатаНачала);
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Список таргеты онлайн рекламы.
// 
// Параметры:
//  ИмяСобытия - Строка
//  
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Функция СписокТаргетыОнлайнРекламы(Знач ИмяСобытия)
	
	Запрос = РекламныйСервисСлужебный.ЗапросСписокТаргетыОнлайнРекламы();
	
	Попытка
		
		Ответ = РекламныйСервисСлужебный.ВыполнитьЗапрос(Запрос);
		Если Ответ.Отказ Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		Иначе
			Таблица = ТаргетыОнлайнРекламыИзДанныхСервиса(Ответ.Данные);
		КонецЕсли;
		
		Возврат Таблица;
	
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.РегистрыСведений.ЗначенияХарактеристикПотребителяРекламы, , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

// Список контент онлайн рекламы.
// 
// Параметры:
//  ИмяСобытия - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйТаблицаЭлементыРекламы
//
Функция СписокКонтентОнлайнРекламы(Знач ИмяСобытия)
	
	ТаблицаЭлементыРекламы = НовыйТаблицаЭлементыРекламы();
	
	ПараметрыЗапроса = НовыйПараметрыЗапросаКонтентаОнлайнРекламы();
	Если ПустаяСтрока(ПараметрыЗапроса) Тогда
		Возврат ТаблицаЭлементыРекламы;
	КонецЕсли;
	
	Попытка
		
		Запрос = РекламныйСервисСлужебный.ЗапросСписокКонтентОнлайнРекламы(ПараметрыЗапроса);
		Ответ = РекламныйСервисСлужебный.ВыполнитьЗапрос(Запрос);
		
		Если Ответ.Отказ Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		ДанныеИзСервиса = Ответ.Данные; // Строка
		ЭлементыРекламыИзДанныхСервиса(ТаблицаЭлементыРекламы, ДанныеИзСервиса);
		
		Возврат ТаблицаЭлементыРекламы;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.РегистрыСведений.ЗначенияХарактеристикПотребителяРекламы, , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

// Выборка обновления таргетов рекламы. Обход результата по группировкам.
// 
// Параметры:
//  ТаргетыРекламы - см. НовыйТаблицаТаргетыРекламыИзДанныхСервиса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
// * ИдентификаторРекламы - ОпределяемыйТип.ИдентификаторРекламы
// * Версия - Число - версия полученной рекламы из сервиса.
// * РекламаВерсия - Число - версия рекламы из справочника реклама.
// * РекламаСсылка - СправочникСсылка.Реклама
// * ИдентификаторХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
// * ЗначениеХарактеристики - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
//
Функция ВыборкаИтогиДобавитьОбновитьТаргетыОнлайнРекламы(ТаргетыРекламы)
	
	Запрос = Новый Запрос;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Запрос.Текст = ТекстЗапросаДобавитьОбновитьТаргетыОнлайнРекламыВРежимеСервиса();
	Иначе
		Запрос.Текст = ТекстЗапросаДобавитьОбновитьТаргетыОнлайнРекламы();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаргетыРекламы", ТаргетыРекламы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторыРекламы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаИдентификаторыРекламы;
	
КонецФункции

// В режиме коробки получаем данные той рекламы, таргеты которой совпадают с характеристиками
// профиля потребителя.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаДобавитьОбновитьТаргетыОнлайнРекламы()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблица.Версия КАК Версия,
		|	ВременнаяТаблица.ИдентификаторРекламы КАК ИдентификаторРекламы,
		|	ВременнаяТаблица.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
		|	ВременнаяТаблица.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ТаргетыРекламы
		|ИЗ
		|	&ТаргетыРекламы КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаргетыРекламы.ИдентификаторРекламы КАК ИдентификаторРекламы,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаргетыРекламы.ИдентификаторХарактеристики) КАК КоличествоХарактеристик
		|ПОМЕСТИТЬ КоличествоХарактеристикВТаргетах
		|ИЗ
		|	ТаргетыРекламы КАК ТаргетыРекламы
		|СГРУППИРОВАТЬ ПО
		|	ТаргетыРекламы.ИдентификаторРекламы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаргетыРекламы.ИдентификаторРекламы КАК ИдентификаторРекламы,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаргетыРекламы.ИдентификаторХарактеристики) КАК КоличествоХарактеристик
		|ПОМЕСТИТЬ КоличествоХарактеристикПрофиля
		|ИЗ
		|	ТаргетыРекламы КАК ТаргетыРекламы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияХарактеристикПотребителяРекламы КАК ЗначенияХарактеристикПотребителя
		|		ПО (ТаргетыРекламы.ИдентификаторХарактеристики = ЗначенияХарактеристикПотребителя.Характеристика)
		|		И (ТаргетыРекламы.ЗначениеХарактеристики = ЗначенияХарактеристикПотребителя.Значение)
		|СГРУППИРОВАТЬ ПО
		|	ТаргетыРекламы.ИдентификаторРекламы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоХарактеристикВТаргетах.ИдентификаторРекламы КАК ИдентификаторРекламы,
		|	ЕСТЬNULL(Реклама.Версия, 0) КАК ВерсияСсылка,
		|	ЕСТЬNULL(Реклама.Ссылка, ЗНАЧЕНИЕ(Справочник.Реклама.ПустаяСсылка)) КАК РекламаСсылка
		|ПОМЕСТИТЬ СовпавшаяИОбщаяРеклама
		|ИЗ
		|	КоличествоХарактеристикВТаргетах КАК КоличествоХарактеристикВТаргетах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоХарактеристикПрофиля КАК КоличествоХарактеристикПрофиля
		|		ПО КоличествоХарактеристикВТаргетах.ИдентификаторРекламы = КоличествоХарактеристикПрофиля.ИдентификаторРекламы
		|		И КоличествоХарактеристикВТаргетах.КоличествоХарактеристик = КоличествоХарактеристикПрофиля.КоличествоХарактеристик
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Реклама КАК Реклама
		|		ПО КоличествоХарактеристикВТаргетах.ИдентификаторРекламы = Реклама.Код
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаргетыРекламы.ИдентификаторРекламы,
		|	ЕСТЬNULL(Реклама.Версия, 0),
		|	ЕСТЬNULL(Реклама.Ссылка, ЗНАЧЕНИЕ(Справочник.Реклама.ПустаяСсылка))
		|ИЗ
		|	ТаргетыРекламы КАК ТаргетыРекламы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Реклама КАК Реклама
		|		ПО ТаргетыРекламы.ИдентификаторРекламы = Реклама.Код
		|ГДЕ
		|	ТаргетыРекламы.ИдентификаторХарактеристики = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СовпавшаяИОбщаяРеклама.ИдентификаторРекламы КАК ИдентификаторРекламы,
		|	ТаргетыРекламы.Версия КАК Версия,
		|	СовпавшаяИОбщаяРеклама.ВерсияСсылка КАК ВерсияСсылка,
		|	СовпавшаяИОбщаяРеклама.РекламаСсылка КАК РекламаСсылка,
		|	ЕСТЬNULL(ТаргетыРекламы.ИдентификаторХарактеристики, """") КАК ИдентификаторХарактеристики,
		|	ЕСТЬNULL(ТаргетыРекламы.ЗначениеХарактеристики, """") КАК ЗначениеХарактеристики
		|ИЗ
		|	СовпавшаяИОбщаяРеклама КАК СовпавшаяИОбщаяРеклама
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаргетыРекламы КАК ТаргетыРекламы
		|		ПО СовпавшаяИОбщаяРеклама.ИдентификаторРекламы = ТаргетыРекламы.ИдентификаторРекламы
		|ГДЕ
		|	ТаргетыРекламы.Версия <> СовпавшаяИОбщаяРеклама.ВерсияСсылка
		|ИТОГИ
		|	МАКСИМУМ(Версия),
		|	МАКСИМУМ(ВерсияСсылка),
		|	МАКСИМУМ(РекламаСсылка)
		|ПО
		|	ИдентификаторРекламы";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// В режиме сервиса (fresh) получаем всю рекламу из Рекламного сервиса.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаДобавитьОбновитьТаргетыОнлайнРекламыВРежимеСервиса()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Версия КАК Версия,
	|	ВременнаяТаблица.ИдентификаторРекламы КАК ИдентификаторРекламы,
	|	ВременнаяТаблица.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	ВременнаяТаблица.ЗначениеХарактеристики КАК ЗначениеХарактеристики
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&ТаргетыРекламы КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИдентификаторРекламы КАК ИдентификаторРекламы,
	|	Таблица.Версия КАК Версия,
	|	ЕСТЬNULL(Реклама.Версия, 0) КАК ВерсияСсылка,
	|	ЕСТЬNULL(Реклама.Ссылка, ЗНАЧЕНИЕ(Справочник.Реклама.ПустаяСсылка)) КАК РекламаСсылка,
	|	ЕСТЬNULL(Таблица.ИдентификаторХарактеристики, """") КАК ИдентификаторХарактеристики,
	|	ЕСТЬNULL(Таблица.ЗначениеХарактеристики, """") КАК ЗначениеХарактеристики
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Реклама КАК Реклама
	|		ПО Таблица.ИдентификаторРекламы = Реклама.Код
	|ГДЕ
	|	Таблица.Версия <> ЕСТЬNULL(Реклама.Версия, 0)
	|ИТОГИ
	|	МАКСИМУМ(Версия),
	|	МАКСИМУМ(ВерсияСсылка),
	|	МАКСИМУМ(РекламаСсылка)
	|ПО
	|	ИдентификаторРекламы";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Добавить обновить данные справочника "Реклама" и РС "ЗначенияХарактеристикРекламы"
// 
// Параметры:
//  ТаблицаЭлементыРекламы - см. НовыйТаблицаЭлементыРекламы
//  ИмяСобытия - Строка - имя события для записи в журнал регистрации.
//
Процедура ДобавитьОбновитьРекламу(ТаблицаЭлементыРекламы, ИмяСобытия)
	
	Если ТаблицаЭлементыРекламы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Реклама");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаЭлементыРекламы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		ТаблицаЗаписейРегистра = РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаТаргетыРекламы();
		
		Для Каждого ДанныеРекламы Из ТаблицаЭлементыРекламы Цикл
			
			СоздатьОбновитьЭлементРекламы(ДанныеРекламы);
			
			Для Каждого ДанныеТаргета Из ДанныеРекламы.Таргеты Цикл
				
				СтрокаТаргета = ТаблицаЗаписейРегистра.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаргета, ДанныеТаргета);
				СтрокаТаргета.РекламаСсылка = ДанныеРекламы.Ссылка;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТаблицаЗаписейРегистра.Количество() > 0 Тогда
			РегистрыСведений.ЗначенияХарактеристикРекламы.СоздатьОбновитьНаборыЗаписей(ТаблицаЗаписейРегистра);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Создать элемент рекламы.
// 
// Параметры:
//  ДанныеРекламы - СтрокаТаблицыЗначений: см. НовыйТаблицаЭлементыРекламы
//
Процедура СоздатьОбновитьЭлементРекламы(ДанныеРекламы)
	
	Попытка
		
		РекламаСсылка = ДанныеРекламы.Ссылка;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если РекламаСсылка.Пустая() Тогда
			
			РекламаОбъект = СоздатьЭлемент();
			
		Иначе
			
			РекламаОбъект = РекламаСсылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		РекламаОбъект.Заполнить(ДанныеРекламы);
		
		Если РекламаОбъект.ПроверитьЗаполнение() Тогда
			
			РекламаОбъект.Записать();
			ДанныеРекламы.Ссылка = РекламаОбъект.Ссылка;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет ссылки на рекламу в переданной таблице.
// 
// Параметры:
//  ТаблицаЭлементыРекламы - см. НовыйТаблицаЭлементыРекламы
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПодготовитьТаблицуЭлементыРекламы(ТаблицаЭлементыРекламы);
	
	ВыборкаДетальныеЗаписи = ВыборкаДополнитьТаблицуЭлементовРекламаСсылкой(ТаблицаЭлементыРекламы);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Код", ВыборкаДетальныеЗаписи.Идентификатор);
		НайденныеСтроки = ТаблицаЭлементыРекламы.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если ВыборкаДетальныеЗаписи.Версия = ВыборкаДетальныеЗаписи.ВерсияСсылка 
				И Не ПустаяСтрока(ВыборкаДетальныеЗаписи.ЦелевоеДействие) Тогда
				
				ТаблицаЭлементыРекламы.Удалить(Строка);
				
			Иначе
				
				Строка.Ссылка = ВыборкаДетальныеЗаписи.РекламаСсылка;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ТаблицаЭлементыРекламы;
	
КонецФункции

// Выборка дополнить таблицу элементов реклама ссылкой.
// 
// Параметры:
//  ТаблицаЭлементыРекламы - см. НовыйТаблицаЭлементыРекламы
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка дополнить таблицу элементов реклама ссылкой:
// * Идентификатор - ОпределяемыйТип.ИдентификаторРекламы
// * РекламаСсылка - СправочникСсылка.Реклама
// * Версия - Число
// * ВерсияСсылка - Число
// * ЦелевоеДействие - Строка
//
Функция ВыборкаДополнитьТаблицуЭлементовРекламаСсылкой(ТаблицаЭлементыРекламы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблица.Код КАК Идентификатор,
		|	ВременнаяТаблица.Версия
		|ПОМЕСТИТЬ ИдентификаторыРекламы
		|ИЗ
		|	&ТаблицаЭлементыРекламы КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭлементыРекламы.Идентификатор,
		|	Реклама.Ссылка КАК РекламаСсылка,
		|	ТаблицаЭлементыРекламы.Версия КАК Версия,
		|	Реклама.Версия КАК ВерсияСсылка,
		|	Реклама.ЦелевоеДействие КАК ЦелевоеДействие
		|ИЗ
		|	ИдентификаторыРекламы КАК ТаблицаЭлементыРекламы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Реклама КАК Реклама
		|		ПО ТаблицаЭлементыРекламы.Идентификатор = Реклама.Код";
	
	Запрос.УстановитьПараметр("ТаблицаЭлементыРекламы", ТаблицаЭлементыРекламы);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

// Таблица таргеты рекламы.
// 
// Параметры:
//  ОписаниеТаргеты - Массив из Структура:
//   * characteristicId - Строка
//   * characteristicValues - Массив из Строка
//  ИдентификаторРекламы - Строка
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйТаблицаТаргетыРекламы
//
Функция ТаблицаТаргетыРекламы(Знач ОписаниеТаргеты, Знач ИдентификаторРекламы)
	
	ТаблицаТаргеты = РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаТаргетыРекламы();
	
	Для Каждого ОписаниеТаргета Из ОписаниеТаргеты Цикл
		ВидХарактеристики = РекламныйСервисСлужебный.ПривестиТипКВидХарактеристики(ОписаниеТаргета.characteristicId);
		Для Каждого ЗначениеТаргета Из ОписаниеТаргета.characteristicValues Цикл
			СтрокаТаблицы = ТаблицаТаргеты.Добавить();
			СтрокаТаблицы.ИдентификаторРекламы = ИдентификаторРекламы;
			СтрокаТаблицы.Характеристика = ВидХарактеристики;
			СтрокаТаблицы.Значение = РекламныйСервисСлужебный.ПривестиТипКЗначениеХарактеристики(ЗначениеТаргета);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаТаргеты;
	
КонецФункции

// Заполнить строки таблицы таргеты.
// 
// Параметры:
//  Таблица - см. НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//  СписокТаргетов - Массив из Структура:
//  * characteristicId - Строка
//  * characteristicValues - Массив из Строка
//  ИдентификаторРекламы - ОпределяемыйТип.ИдентификаторРекламы
//  ВерсияЭлементаРекламы - Число
//
Процедура ЗаполнитьСтрокиТаблицыТаргеты(
		Таблица, Знач СписокТаргетов, Знач ИдентификаторРекламы, Знач ВерсияЭлементаРекламы)
	
	Для Каждого СтрокаХарактеристикиРекламы Из СписокТаргетов Цикл
		
		ИдентификаторХарактеристики = 
			РекламныйСервисСлужебный.ПривестиТипКВидХарактеристики(СтрокаХарактеристикиРекламы.characteristicId);
		
		ЗначенияХарактеристикиРекламы = СтрокаХарактеристикиРекламы.characteristicValues; // Массив из Строка
		НовыеСтрокиЗначений = Новый Массив; // Массив из Строка
		
		Для Каждого ЗначениеХарактеристики Из ЗначенияХарактеристикиРекламы Цикл
			
			НовыеСтрокиЗначений.Добавить(ЗначениеХарактеристики);
			ЗначенияСтрокой = СтрСоединить(НовыеСтрокиЗначений, ",");
			
			Если СтрДлина(ЗначенияСтрокой) > 100 Тогда
				
				// Поиск гарантированно выдает результат, т.к. элемент добавляется выше.
				СтрокаЗначенияХарактеристики = НовыеСтрокиЗначений.Найти(ЗначениеХарактеристики);
				НовыеСтрокиЗначений.Удалить(СтрокаЗначенияХарактеристики);
				
				ЗначенияСтрокой = СтрСоединить(НовыеСтрокиЗначений, ",");
				
				НоваяСтрокаТаблицы = Таблица.Добавить();
				НоваяСтрокаТаблицы.ИдентификаторРекламы = ИдентификаторРекламы;
				НоваяСтрокаТаблицы.ИдентификаторХарактеристики = ИдентификаторХарактеристики;
				НоваяСтрокаТаблицы.ЗначениеХарактеристики = ЗначенияСтрокой;
				НоваяСтрокаТаблицы.Версия = ВерсияЭлементаРекламы;
				
				НовыеСтрокиЗначений.Очистить();
				НовыеСтрокиЗначений.Добавить(ЗначениеХарактеристики);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НовыеСтрокиЗначений.Количество() > 0 Тогда
			
			ЗначенияСтрокой = СтрСоединить(НовыеСтрокиЗначений, ",");
			
			НоваяСтрокаТаблицы = Таблица.Добавить();
			НоваяСтрокаТаблицы.ИдентификаторРекламы = ИдентификаторРекламы;
			НоваяСтрокаТаблицы.ИдентификаторХарактеристики = ИдентификаторХарактеристики;
			НоваяСтрокаТаблицы.ЗначениеХарактеристики = ЗначенияСтрокой;
			НоваяСтрокаТаблицы.Версия = ВерсияЭлементаРекламы;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвойствоСтруктуры(
		Знач Структура, Знач ИмяСвойства, Знач ЗначениеПоУмолчанию = Неопределено, Знач Проверять = Ложь)
	
	ИмяПроцедуры = "РекламныйСервисСлужебный.ТаблицаЭлементыРекламыИзДанныхСервиса";
	
	Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, ИмяСвойства);
	
	Если Проверять Тогда
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			Значение <> Неопределено, 
			СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяСвойства), 
			ИмяПроцедуры);
		
	КонецЕсли;
	
	Если Значение = Неопределено И ЗначениеПоУмолчанию <> Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#Область Конструкторы

// Новый свойства данных рекламы с датой.
// 
// Возвращаемое значение:
//  Массив из Строка - Новый свойства данных рекламы с датой
//
Функция НовыйСвойстваДанныхРекламыСДатой()
	
	Результат = Новый Массив; // Массив из Строка
	Результат.Добавить("actualFrom");
	Результат.Добавить("actualTo");
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса контента онлайн рекламы.
// Выбирается онлайн реклама и которая еще не получила основной контент, изображение, целевое действие.
// 
// Возвращаемое значение:
//  Строка - сериализованные данные в формат JSON.
//
Функция НовыйПараметрыЗапросаКонтентаОнлайнРекламы()
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Реклама.Код КАК ИдентификаторРекламы
		|ИЗ
		|	Справочник.Реклама КАК Реклама
		|ГДЕ
		|	НЕ Реклама.Офлайн
		|	И Реклама.ЦелевоеДействие = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	Иначе
		Идентификаторы = Новый Массив; // Массив из Строка
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Идентификаторы.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторРекламы);
	КонецЦикла;
	
	Результат = РекламныйСервисСлужебный.ЗначениеВJSON(Идентификаторы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли