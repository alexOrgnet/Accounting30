
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;

	НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВидРасходов = "РасходыНаСтрахование" Тогда
		ТекущийОбъект.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням;
		ТекущийОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП.ДебиторскаяЗадолженность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповещениеОСозданииРБП = ОповещениеОСозданииНаКлиенте(ЭтотОбъект);
	Если Не ОповещениеОСозданииРБП = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииРБП, Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность
		И ТекущийОбъект.ВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
		
		ЗаписатьДанныеВРегистрКоличестваЗастрахованных(ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы ="РегистрСведений.КоличествоЗастрахованныхОтНесчастныхСлучаев.Форма.РедактированиеИсторииКоличестваЗастрахованных" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		КоличествоЗастрахованныхДоИзменения = КоличествоЗастрахованных;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// Проверка истории количества застрахованных от несчастных случаев
	Если Объект.ВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности
		И ИсторияКоличестваЗастрахованныхЗаполнена Тогда
		
		ИсторияКоличестваЗастрахованных = ПолучитьИзВременногоХранилища(АдресИсторияКоличествоЗастрахованных);
		
		Для Каждого ЗаписьИстории Из ИсторияКоличестваЗастрахованных Цикл
			Если ЗначениеЗаполнено(ЗаписьИстории.ДатаНачалаДействия )
				И ЗаписьИстории.ДатаНачалаДействия < Объект.ДатаНачалаСписания
				Или ЗначениеЗаполнено(Объект.ДатаОкончанияСписания)
				И ЗаписьИстории.ДатаНачалаДействия > Объект.ДатаОкончанияСписания Тогда

				СообщениеОбОшибке =
					НСтр("ru = 'Срок действия договора не соответствует информации, указанной в истории изменений количества застрахованных.
					|Проверьте правильность срока действия договора и историю изменений количества застрахованных.'");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетЗатратПрочиеРасходыПриИзменении(Элемент)
	
	ПриИзмененииСчетаЗатрат();
		
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратРасходыНаСтрахованиеПриИзменении(Элемент)
	
	ПриИзмененииСчетаЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИсторияНажатие(Элемент)
	ОткрытьФормуКоличествоЗастрахованных(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗастрахованныхПриИзменении(Элемент)
	
	Если ИсторияКоличестваЗастрахованныхЗаполнена
		И КоличествоЗастрахованныхДоИзменения <> КоличествоЗастрахованных Тогда
		
		ОткрытьФормуКоличествоЗастрахованных(Истина);
		
	КонецЕсли;
	
	КоличествоЗастрахованныхДоИзменения = КоличествоЗастрахованных;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрочиеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрочиеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПрочиеРасходы3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрочиеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасходыНаСтрахование");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасходыНаСтрахование");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратРасходыНаСтрахование3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасходыНаСтрахование");
КонецПроцедуры

// Для статей РБП по договорам добровольного страхования предлагается автоматическая установка способа
// признания расходов по календарным дням соответственно статье 272 гл.25 НК.
&НаКлиенте
Процедура ВидРБПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УказанныйСпособПризнанияРасходов = Объект.СпособПризнанияРасходов; 
	УказанныйВидРБП = ВыбранноеЗначение;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества") Тогда
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
		ПриИзмененииСчетаЗатрат();
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоМесяцам");
	КонецЕсли;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиПрошлыхЛет") Тогда
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке");
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		ПриИзмененииСчетаЗатрат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРБППриИзменении(Элемент)
	
	Объект.ВидАктива = ВидАктиваПоУмолчаниюДляНУ(ВидыРБПНУ, Объект.ВидРБП, ВидАктиваПоУмолчанию);
	
	Если Объект.ВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества") Тогда
		
		Элементы.ГруппаПредупреждениеУбытокОС.Видимость = Истина;
		
		Если ЗначениеЗаполнено(ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС) Тогда
			
			Элементы.ДекорацияПредупреждениеУбытокОС.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				НСтр("ru = 'Убытки от реализации основных средств учитываются автоматически для документов Передачи ОС введенных с 
				|<a href=""Ссылка"">%1</a>, поэтому не нужно вводить ручные операции с использованием статьи расходов будущих периодов.'"),
				Формат(ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС, "ДЛФ=DD"));
		Иначе
			
			Элементы.ДекорацияПредупреждениеУбытокОС.Заголовок =
				НСтр("ru = 'Убытки от реализации основных средств учитываются автоматически, поэтому не нужно вводить ручные операции с использованием статьи расходов будущих периодов.'");
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаПредупреждениеУбытокОС.Видимость = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСтрахованияПриИзменении(Элемент)
	
	ЗаполнитьСтатьюЗатратПоВидуРБП();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаПредупреждениеУстановкиДатыУбытокОС.Видимость = Не Элементы.ГруппаПредупреждениеУстановкиДатыУбытокОС.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходовПриИзменении(Элемент)
	
	ВидРасходовПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
	
	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьДатуНачалаАвтоматическогоУчетаУбытковОтРеализацииОС(Команда)
	
	УстановитьДатуНачалаАвтоматическогоУчетаУбытковОтРеализацииОСНаСервере();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Дата установлена, можете закрыть форму.'");
	Сообщение.Сообщить();
	
	Модифицированность = Ложь;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидРасходовПриИзмененииСервер()

	// При переключении страниц "Вид расходов" происходит изменение вида РБП и аналитики списания.
	// При возврате на предыдущую страниц восстановим значения реквизитов, которые были до переключения.
	ВосстанавливаемыеРеквизиты = "ВидРБП, ВидАктива, СпособПризнанияРасходов, СчетЗатрат, СубконтоЗатрат1, СубконтоЗатрат2, СубконтоЗатрат3";
	Если ЗначениеЗаполнено(ЗначенияРеквизитовДоИзменения) Тогда
		ТекущиеЗначенияРеквизитов = Новый Структура(ВосстанавливаемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(ТекущиеЗначенияРеквизитов, Объект);
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитовДоИзменения);
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, ТекущиеЗначенияРеквизитов);
		НастроитьСубконто();
	Иначе
		ЗначенияРеквизитовДоИзменения = Новый Структура(ВосстанавливаемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Объект);
		Объект.ВидРБП = ВидРБППоУмолчанию(ВидРасходов);
		ЗаполнитьСтатьюЗатратПоВидуРБП();
		Если ВидРасходов = "ПрочиеРасходы" Тогда
			Объект.ВидАктива = ВидАктиваПоУмолчаниюДляНУ(ВидыРБПНУ, Объект.ВидРБП, ВидАктиваПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
		
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Функция ОповещениеОСозданииНаКлиенте(Форма) Экспорт

	Результат = Неопределено;
	
	Если Форма.ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) <> Тип("Структура")  Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры, "ОписаниеОповещенияОСозданииКонтрагента", Неопределено);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПриИзмененииСчетаЗатрат()
		
	НастроитьСубконто();
		
	Если Не ЗначениеЗаполнено(Объект.ВидАктива) Тогда
		Объект.ВидАктива = ОпределитьВидАктиваРБП();
	КонецЕсли;
	
	ЗаполнитьСтатьюЗатратПоВидуРБП();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСубконто()
	
	Для Каждого ПараметрыУстановкиСвойствСубконто Из КоллекцияПараметровУстановкиСвойствСубконто(ЭтотОбъект) Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьВидРасходов();
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если Параметры.ПараметрыВыбора.Свойство("СчетУчета")
			И Параметры.ПараметрыВыбора.СчетУчета = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников Тогда
			Объект.ВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности;
		КонецЕсли;
		
		Если Параметры.ПараметрыВыбора.Свойство("Организация") И ЗначениеЗаполнено(Параметры.ПараметрыВыбора.Организация)
			Или ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
				БазовыеНастройки = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(ТекущаяДатаСеанса(), ОсновнаяОрганизация);
			Иначе
				БазовыеНастройки =
					Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(ТекущаяДатаСеанса(), Параметры.ПараметрыВыбора.Организация);
			КонецЕсли;
			Объект.СчетЗатрат = БазовыеНастройки.ОсновнойСчетУчета;
			ЗаполнитьСтатьюЗатратПоВидуРБП();
		КонецЕсли;
		
	КонецЕсли;
	
	ПрочитатьКоличествоЗастрахованных();
	
	Для Каждого ПараметрыУстановкиСвойствСубконто Из КоллекцияПараметровУстановкиСвойствСубконто(ЭтотОбъект)  Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто);
	КонецЦикла;
		
	ВидАктиваПоУмолчанию = Метаданные.Справочники.РасходыБудущихПериодов.Реквизиты.ВидАктива.ЗначениеЗаполнения;
	
	ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС =
		Константы.ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС.Получить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКоличествоЗастрахованных()
	
	ИсторияКоличестваЗастрахованных = Справочники.РасходыБудущихПериодов.ИсторияКоличествоЗастрахованных(Объект.Ссылка);
	
	АдресИсторияКоличествоЗастрахованных = 
		ПоместитьВоВременноеХранилище(ИсторияКоличестваЗастрахованных, УникальныйИдентификатор);
	
	Если ИсторияКоличестваЗастрахованных.Количество() > 0 Тогда
		НомерПоследнейСтроки = ИсторияКоличестваЗастрахованных.Количество() - 1;
		КоличествоЗастрахованных = ИсторияКоличестваЗастрахованных[НомерПоследнейСтроки].Количество;
		КоличествоЗастрахованныхДоИзменения = КоличествоЗастрахованных;
		ИсторияКоличестваЗастрахованныхЗаполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидРасходов()

	ВидыРБПДобровольноеСтрахование = РасходыДобровольноеСтрахование();
	ВидыРБПНУ = Справочники.РасходыБудущихПериодов.РасходыНУ();
	
	Если Справочники.РасходыБудущихПериодов.ПрочиеРасходы().НайтиПоЗначению(Объект.ВидРБП) <> Неопределено Тогда
		ВидРасходов = "ПрочиеРасходы";
	Иначе
		ВидРасходов = "РасходыНаСтрахование";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасходыДобровольноеСтрахование()
	
	СписокРасходов = Новый СписокЗначений();
	СписокРасходов.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	СписокРасходов.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	СписокРасходов.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);

	Возврат СписокРасходов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВидАктива.Доступность = (Форма.ВидыРБПНУ.НайтиПоЗначению(Объект.ВидРБП) = Неопределено);
	
	Элементы.СтраницыВидРасходов.ТекущаяСтраница = Элементы["Группа" + Форма.ВидРасходов];
	
	// Количество застрахованных указывается только для расходов по страхованию от несчастных случаев.
	Элементы.ГруппаКоличествоЗастрахованных.Видимость = 
		(Объект.ВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКоличествоЗастрахованных(ДобавитьСтроку)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресИсторияКоличествоЗастрахованных", АдресИсторияКоличествоЗастрахованных);
	ПараметрыФормы.Вставить("КоличествоЗастрахованных",             КоличествоЗастрахованных);
	ПараметрыФормы.Вставить("ДобавитьСтроку",                       ДобавитьСтроку);
	ПараметрыФормы.Вставить("ДатаНачалаСписания",                   Объект.ДатаНачалаСписания);
	ПараметрыФормы.Вставить("ДатаОкончанияСписания",                Объект.ДатаОкончанияСписания);
	
	ОткрытьФорму(
		"РегистрСведений.КоличествоЗастрахованныхОтНесчастныхСлучаев.Форма.РедактированиеИсторииКоличестваЗастрахованных",
		ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьВидАктиваРБП()
	
	СчетСписания = Объект.СчетЗатрат;
	
	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет01)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ОсновныеСредства)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет08)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы)
		|				ИНАЧЕ ВЫБОР
		|						КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетЗатрат)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.Запасы)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидАктива
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка = &ТекущийСчет";

	Запрос.УстановитьПараметр("ТекущийСчет", СчетСписания);
	Запрос.УстановитьПараметр("Счет01", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("Счет08", ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);

	Запрос.УстановитьПараметр("СчетЗатрат", Массив);

	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();

	Возврат Результат.ВидАктива;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	Для Каждого ПараметрыУстановкиСвойствСубконто Из КоллекцияПараметровУстановкиСвойствСубконто(ЭтотОбъект) Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
			ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка, ИдентификаторГруппыЭлементов)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект, ИдентификаторГруппыЭлементов));
		
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияПараметровУстановкиСвойствСубконто(Форма)
	
	Массив = Новый Массив();
	Массив.Добавить(ПараметрыУстановкиСвойствСубконто(Форма, "РасходыНаСтрахование"));
	Массив.Добавить(ПараметрыУстановкиСвойствСубконто(Форма, "ПрочиеРасходы"));
	
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма, ИдентификаторГруппыЭлементов)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоЗатрат" + ИдентификаторГруппыЭлементов, "", "СубконтоЗатрат", "", "СчетЗатрат");
	Результат.ДопРеквизиты.Вставить("Организация", Форма.ОсновнаяОрганизация);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаписатьДанныеВРегистрКоличестваЗастрахованных(ТекущийОбъект)

	НаборЗаписей = РегистрыСведений.КоличествоЗастрахованныхОтНесчастныхСлучаев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РасходыНаСтрахование.Установить(ТекущийОбъект.Ссылка);

	Если ИсторияКоличестваЗастрахованныхЗаполнена Тогда

		ИсторияКоличестваЗастрахованных = ПолучитьИзВременногоХранилища(АдресИсторияКоличествоЗастрахованных);
		Для Каждого ЗаписьИстории Из ИсторияКоличестваЗастрахованных Цикл
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.РасходыНаСтрахование = ТекущийОбъект.Ссылка;
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ЗаписьИстории);
			Если Не ЗначениеЗаполнено(ЗаписьРегистра.ДатаНачалаДействия) Тогда
				ЗаписьРегистра.ДатаНачалаДействия = ТекущийОбъект.ДатаНачалаСписания;
				ЗаписьИстории.ДатаНачалаДействия = ТекущийОбъект.ДатаНачалаСписания;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если КоличествоЗастрахованных > 0 Тогда
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.РасходыНаСтрахование = ТекущийОбъект.Ссылка;
			ЗаписьРегистра.Количество = КоличествоЗастрахованных;
			ЗаписьРегистра.ДатаНачалаДействия = ТекущийОбъект.ДатаНачалаСписания;
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаАвтоматическогоУчетаУбытковОтРеализацииОСНаСервере()
	Константы.ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС.Установить(ДатаНачалаАвтоматическогоУчетаУбытковОтРеализацииОС);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьюЗатратПоВидуРБП()
	СтатьяЗатрат = Справочники.РасходыБудущихПериодов.СтатьяЗатратПоВидуРБП(Объект.ВидРБП);
	Если ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетЗатрат);
		Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
			Если СвойстваСчета["ВидСубконто" + XMLСтрока(НомерСубконто)] = ВидСубконто Тогда
				Объект["СубконтоЗатрат" + XMLСтрока(НомерСубконто)] = СтатьяЗатрат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидРБППоУмолчанию(ВидРасходовРБП)
	Если ВидРасходовРБП = "РасходыНаСтрахование" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ВидыРБП.Прочие");
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидАктиваПоУмолчаниюДляНУ(ВидыРБПНУ, ВидРБП, ВидАктиваПоУмолчанию)
	
	Если ВидыРБПНУ.НайтиПоЗначению(ВидРБП) <> Неопределено Тогда
		ВидАктива = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(ВидАктива) Тогда
		ВидАктива = ВидАктиваПоУмолчанию;
	КонецЕсли;
	
	Возврат ВидАктива;
	
КонецФункции

#КонецОбласти
