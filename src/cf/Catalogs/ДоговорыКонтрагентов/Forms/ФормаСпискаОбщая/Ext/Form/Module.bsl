#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанельПравая;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	УстановитьВосстановленныеОтборы();
	
	АдресХранилищаНастроекПодменюДокументы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Элементы.ЕстьФайлы.Видимость = ПолучитьФункциональнуюОпцию("ОтображатьДополнительныеКолонкиВСписках");
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.ДоговорыКонтрагентов",
		"ФормаСписка",
		НСтр("ru='Новости: Договоры'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	ПараметрыПриСозданииНаСервере.ИсточникКомандЭДО = Список;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УстановитьУсловноеОформление();
	
	НастроитьОтборДоговорЗакрыт();
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентов_СозданиеФайлаДоговора" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			Параметры.Отбор.Удалить("Организация");
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Владелец") И ЗначениеЗаполнено(СтруктураОтбора.Владелец) Тогда
			ОтборВладелец = СтруктураОтбора.Владелец;
			ОтборВладелецИспользование = ЗначениеЗаполнено(ОтборВладелец);
			Параметры.Отбор.Удалить("Владелец");
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("ВидДоговора") И ЗначениеЗаполнено(СтруктураОтбора.ВидДоговора) Тогда
			ОтборВидДоговора = СтруктураОтбора.ВидДоговора;
			ОтборВидДоговораИспользование = ЗначениеЗаполнено(ОтборВидДоговора);
			Параметры.Отбор.Удалить("ВидДоговора");
		КонецЕсли;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДействуетНаИспользование Тогда
		УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	КонецЕсли;

	УстановитьВосстановленныеОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Или ПустаяСтрока(ВыбранноеЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = ПараметрыФормыДокумента(Тип("ДокументСсылка." + ВыбранноеЗначение));
		ОткрытьФорму("Документ." + ВыбранноеЗначение + ".ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецПриИзменении(Элемент)
	
	ОтборВладелецИспользование = ЗначениеЗаполнено(ОтборВладелец);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДоговораПриИзменении(Элемент)
	
	ОтборВидДоговораИспользование = ЗначениеЗаполнено(ОтборВидДоговора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ВидДоговора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДоговораИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ВидДоговора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДействуетНаИспользованиеПриИзменении(Элемент)
	
	УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДействуетНаПриИзменении(Элемент)
	
	ОтборДействуетНаИспользование = ЗначениеЗаполнено(ОтборДействуетНа);
	Список.Параметры.УстановитьЗначениеПараметра("ДействуетНа", ОтборДействуетНа);
	
	УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорЗакрытПриИзменении(Элемент)
	
	НастроитьОтборДоговорЗакрыт();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	НастроитьОперацииПодменюДокументы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ВыбраннаяСтрока, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентами.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа И НЕ Копирование Тогда
		Отказ = Истина;
		
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
		ЗначенияЗаполнения.Вставить("Родитель", Родитель);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктРеализация(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктСверки(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ОткрытьФорму("Документ.АктСверкиВзаиморасчетов.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюРеализация(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПокупателю(Команда)

	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПоставщика(Команда)

	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюПередача(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаТоваров"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДругойДокумент(Команда)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыПоДоговоруКонтрагента");
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВидДоговораКонтрагента", ТекущиеДанные.ВидДоговора);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВосстановленныеОтборы()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДействуетНа", ОтборДействуетНа);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ВидДоговора");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСрокуДействия(Список, Знач ОтборДействуетНа, Знач Использование)
	
	Если НЕ Использование Тогда
		// Если отбор ранее не был установлен, то ничего делать не нужно
		ГруппаЭлементовОтбора = ОтборыСписковКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборДействуетНа");
		Если ГруппаЭлементовОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ГруппаОтбораИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы, "ОтборДействуетНа",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИ, "Дата", Новый ПолеКомпоновкиДанных("ДействуетНа"),
		Использование, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
	ГруппаОтбораИЛИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораИ.Элементы, "ОтборПоСрокДействия",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИЛИ, "ДействуетНа", Новый ПолеКомпоновкиДанных("СрокДействия"),
		Использование, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИЛИ, "СрокДействия", Дата('00010101'),
		Использование, ВидСравненияКомпоновкиДанных.Равно);
		
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Функция ПараметрыФормыДокумента(ТипДокумента, ВидОперации = Неопределено)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СвойстваДоговора = Неопределено;
	Если ТекущиеДанные <> Неопределено Тогда
		СвойстваДоговора = ПараметрыВыбораДоговораКонтрагента(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если ОтборОрганизацияИспользование Тогда
		ЗначенияЗаполнения.Вставить("Организация", ОтборОрганизация);
	ИначеЕсли СвойстваДоговора <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("Организация", СвойстваДоговора.Организация);
	КонецЕсли;
	
	Если ОтборВладелецИспользование Тогда
		Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ЗначенияЗаполнения.Вставить("КонтрагентДебитор", ОтборВладелец);
			ЗначенияЗаполнения.Вставить("КонтрагентКредитор", ОтборВладелец);
		Иначе
			ЗначенияЗаполнения.Вставить("Контрагент", ОтборВладелец);
		КонецЕсли;
	ИначеЕсли СвойстваДоговора <> Неопределено Тогда
		Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ЗначенияЗаполнения.Вставить("КонтрагентДебитор", СвойстваДоговора.Владелец);
			ЗначенияЗаполнения.Вставить("КонтрагентКредитор", СвойстваДоговора.Владелец);
		Иначе
			ЗначенияЗаполнения.Вставить("Контрагент", СвойстваДоговора.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура НастроитьОперацииПодменюДокументы()
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Элементы.ПодменюДокументы.Видимость = ТекущиеДанные <> Неопределено;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Получаем настройки видимости команд из временного хранилища
	НастройкиПодменюДокументы = ПолучитьИзВременногоХранилища(АдресХранилищаНастроекПодменюДокументы);
	
	НастройкиИзменены = Ложь;
	
	Если НастройкиПодменюДокументы = Неопределено Тогда
		НастройкиПодменюДокументы = Новый Соответствие;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	ТекущиеОперации = НастройкиПодменюДокументы[ТекущиеДанные.ВидДоговора];
	Если ТекущиеОперации = Неопределено Тогда
		ТекущиеОперации = ОперацииПоВидуДоговора(ТекущиеДанные.ВидДоговора);
		НастройкиПодменюДокументы[ТекущиеДанные.ВидДоговора] = ТекущиеОперации;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если НастройкиИзменены Тогда
		ПоместитьВоВременноеХранилище(НастройкиПодменюДокументы, АдресХранилищаНастроекПодменюДокументы);
	КонецЕсли;
	
	Элементы.СоздатьСчетПокупателю.Видимость = ТекущиеОперации.Найти("СоздатьСчетПокупателю") <> Неопределено;
	Элементы.СоздатьАктРеализация.Видимость = ТекущиеОперации.Найти("СоздатьАктРеализация") <> Неопределено;
	Элементы.СоздатьНакладнуюРеализация.Видимость = ТекущиеОперации.Найти("СоздатьНакладнуюРеализация") <> Неопределено;
	Элементы.СоздатьНакладнуюПередача.Видимость = ТекущиеОперации.Найти("СоздатьНакладнуюПередача") <> Неопределено;
	Элементы.СоздатьСчетПоставщика.Видимость = ТекущиеОперации.Найти("СоздатьСчетПоставщика") <> Неопределено;
	Элементы.СоздатьАктПоступление.Видимость = ТекущиеОперации.Найти("СоздатьАктПоступление") <> Неопределено;
	Элементы.СоздатьНакладнуюПоступление.Видимость = ТекущиеОперации.Найти("СоздатьНакладнуюПоступление") <> Неопределено;
	Элементы.СоздатьПлатежноеПоручение.Видимость = ТекущиеОперации.Найти("СоздатьПлатежноеПоручение") <> Неопределено;
	Элементы.СоздатьАктСверки.Видимость = ТекущиеОперации.Найти("СоздатьАктСверки") <> Неопределено;
	Элементы.СоздатьДругойДокумент.Видимость = ТекущиеОперации.Найти("СоздатьДругойДокумент") <> Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОперацииПоВидуДоговора(ВидДоговора)
	
	ТипыДокументов = Новый Массив;
	ДокументыЖурнала = ЖурналыДокументов.ЖурналОпераций.СоставДокументов("ДокументыПоДоговоруКонтрагента");
	Для Каждого ОбъектМетаданных Из ДокументыЖурнала Цикл
		Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
			ТипыДокументов.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	ТипыДокументов = КритерииОтбора.ДокументыПоДоговоруКонтрагента.ОтобратьДокументыПоВидуДоговора(ТипыДокументов,
		ВидДоговора);
	
	ДоступенСчетПокупателю = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПокупателю) <> Неопределено;
	ДоступенРеализацияТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.РеализацияТоваровУслуг) <> Неопределено;
	Если ДоступенРеализацияТоваровУслуг Тогда
		ВидыОперацийРеализацияТоваровУслуг = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыОперацийДокумента(
			ВидДоговора, Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		ДоступенАктРеализация = ВидыОперацийРеализацияТоваровУслуг.Найти(
			Перечисления.ВидыОперацийРеализацияТоваров.Услуги) <> Неопределено;
		ДоступенНакладнаяРеализация = ВидыОперацийРеализацияТоваровУслуг.Найти(
			Перечисления.ВидыОперацийРеализацияТоваров.Товары) <> Неопределено;
		ДоступенНакладнаяПередача = ВидыОперацийРеализацияТоваровУслуг.Найти(
			Перечисления.ВидыОперацийРеализацияТоваров.ПередачаТоваров) <> Неопределено;
	Иначе
		ДоступенАктРеализация = ДоступенРеализацияТоваровУслуг;
		ДоступенНакладнаяРеализация = ДоступенРеализацияТоваровУслуг;
		ДоступенНакладнаяПередача = ДоступенРеализацияТоваровУслуг;
	КонецЕсли;
	ДоступенСчетПоставщика = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПоставщика) <> Неопределено;
	ДоступенПоступлениеТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.ПоступлениеТоваровУслуг) <> Неопределено;
	Если ДоступенПоступлениеТоваровУслуг Тогда
		ВидыОперацийПоступлениеТоваровУслуг = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыОперацийДокумента(
			ВидДоговора, Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		ДоступенАктПоступление = ВидыОперацийПоступлениеТоваровУслуг.Найти(
			Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги) <> Неопределено;
		ДоступенНакладнаяПоступление = ВидыОперацийПоступлениеТоваровУслуг.Найти(
			Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары) <> Неопределено;
	Иначе
		ДоступенАктПоступление = ДоступенПоступлениеТоваровУслуг;
		ДоступенНакладнаяПоступление = ДоступенПоступлениеТоваровУслуг;
	КонецЕсли;
	ДоступенПлатежноеПоручение = ТипыДокументов.Найти(Метаданные.Документы.ПлатежноеПоручение) <> Неопределено;
	ДоступенАктСверкиВзаиморасчетов = ТипыДокументов.Найти(Метаданные.Документы.АктСверкиВзаиморасчетов) <> Неопределено;
	
	СписокОпераций = Новый Массив;
	Если ДоступенСчетПокупателю Тогда
		СписокОпераций.Добавить("СоздатьСчетПокупателю");
	КонецЕсли;
	Если ДоступенАктРеализация Тогда
		СписокОпераций.Добавить("СоздатьАктРеализация");
	КонецЕсли;
	Если ДоступенНакладнаяРеализация Тогда
		СписокОпераций.Добавить("СоздатьНакладнуюРеализация");
	КонецЕсли;
	Если ДоступенНакладнаяПередача Тогда
		СписокОпераций.Добавить("СоздатьНакладнуюПередача");
	КонецЕсли;
	Если ДоступенСчетПоставщика Тогда
		СписокОпераций.Добавить("СоздатьСчетПоставщика");
	КонецЕсли;
	Если ДоступенАктПоступление Тогда
		СписокОпераций.Добавить("СоздатьАктПоступление");
	КонецЕсли;
	Если ДоступенНакладнаяПоступление Тогда
		СписокОпераций.Добавить("СоздатьНакладнуюПоступление");
	КонецЕсли;
	Если ДоступенПлатежноеПоручение Тогда
		СписокОпераций.Добавить("СоздатьПлатежноеПоручение");
	КонецЕсли;
	Если ДоступенАктСверкиВзаиморасчетов Тогда
		СписокОпераций.Добавить("СоздатьАктСверки");
	КонецЕсли;
	Если ТипыДокументов.Количество() > 0 Тогда
		СписокОпераций.Добавить("СоздатьДругойДокумент");
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВыбораДоговораКонтрагента(Знач ДоговорКонтрагента)
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорЗакрыт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборДоговорЗакрыт()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДоговорЗакрыт",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,,
		?(ОтборДоговорЗакрыт = 0, Истина, Ложь));
	
КонецПроцедуры

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПечатьДоговоровКлиент.ВыполнитьОткрытиеТекстаДоговора(ТекущиеДанные.Ссылка, ЭтотОбъект, Ложь, Истина);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет И ДополнительныеПараметры.ЕстьФайлДоговора Тогда
		
		СообщенияОбОшибках = ПечатьДоговоровВызовСервера.СообщенияЗаполненияОбязательныхРеквизитов(ТекущиеДанные.Ссылка);
		
		Если СообщенияОбОшибках.Количество() <> 0 Тогда
							
			ПечатьДоговоровКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках);
			Возврат;
			
		КонецЕсли;

		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(ДополнительныеПараметры.КомандаЭДО, ЭтотОбъект, Элементы.Список);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоРедактирования()
	Возврат ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	Элементы.Список.Обновить();
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда
		
		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		Возврат;
		
	КонецЕсли;
	
	ЕстьРабочийЭДД = ПечатьДоговоровВызовСервера.ЕстьЭлектронныйДоговорныйДокумент(ТекущиеДанные.Ссылка);
	ЯвляетсяКомандойФормированияЭД = СтрНайти(Команда.Имя, "СформироватьПодписатьОтправитьЭД") <> 0 Или
		СтрНайти(Команда.Имя, "ОткрытьАктуальныйЭД") <> 0;
		
	// Для ограниченных прав
	Если Не ЕстьПравоРедактирования() Тогда
			
		Если ЕстьРабочийЭДД Или Не ЯвляетсяКомандойФормированияЭД Тогда
			ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		ИначеЕсли Не ЕстьРабочийЭДД Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав для формирования электронного документа.'"));
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;

	Если Не ЕстьРабочийЭДД И ЯвляетсяКомандойФормированияЭД Тогда
		
		ЕстьФайлДоговора = ТекущиеДанные.ЕстьФайлы = 0;
		
		Если ЕстьФайлДоговора И ТекущиеДанные.ЭлектронныйФормат Тогда
			
			СообщенияОбОшибках = ПечатьДоговоровВызовСервера.СообщенияЗаполненияОбязательныхРеквизитов(ТекущиеДанные.Ссылка);
			
			Если СообщенияОбОшибках.Количество() <> 0 Тогда
							
				ПечатьДоговоровКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках);
				Возврат;
				
			КонецЕсли;

			ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
				
		Иначе
				
			ДополнительныеПараметры = Новый Структура("ЕстьФайлДоговора, КомандаЭДО", ЕстьФайлДоговора, Команда);
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрВопроса = ?(ЕстьФайлДоговора, НСтр("ru = 'содержит только'"), НСтр("ru = 'не содержит'"));

			ТекстВопроса = НСтр("ru = 'Сохраненный файл %1 текст.
								|Сформировать договор для выгрузки в электронном формате?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрВопроса);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
		КонецЕсли;
					
	Иначе

		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()

    ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.СостояниеЭДО);

КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти