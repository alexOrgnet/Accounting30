#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанельПравая;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	
	ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ОсновныеДоговорыКонтрагента);
	Если Не ДоступноИспользоватьОсновным Тогда
		Элементы.ФормаИспользоватьОсновным.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Элементы.Основной.Видимость = Ложь;
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	Список.Параметры.УстановитьЗначениеПараметра("ДействуетНа", ОтборДействуетНа);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.ДоговорыКонтрагентов",
		"ФормаСписка",
		НСтр("ru='Новости: Договоры'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	ПараметрыПриСозданииНаСервере.ИсточникКомандЭДО = Список;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УстановитьУсловноеОформление();
	
	НастроитьОтборДоговорЗакрыт();
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбновитьОтображениеДанных();
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация              = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" Тогда
		Элементы.Список.Обновить();
		ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
		НастроитьКомандуИспользоватьОсновным(ТекущиеДанные);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			СтруктураОтбора.Удалить("Организация");
		КонецЕсли;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДействуетНаИспользование Тогда
		УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	КонецЕсли;
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДействуетНаИспользованиеПриИзменении(Элемент)
	
	УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДействуетНаПриИзменении(Элемент)
	
	ОтборДействуетНаИспользование = ЗначениеЗаполнено(ОтборДействуетНа);
	Список.Параметры.УстановитьЗначениеПараметра("ДействуетНа", ОтборДействуетНа);
	
	УстановитьОтборПоСрокуДействия(Список, ОтборДействуетНа, ОтборДействуетНаИспользование);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорЗакрытПриИзменении(Элемент)
	
	НастроитьОтборДоговорЗакрыт();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОткрытИзПлатежки И НЕ Группа И НЕ Копирование Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;

		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Родитель", Родитель);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
			
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение[0].Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	НастроитьКомандуИспользоватьОсновным(ТекущиеДанные);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ВыбраннаяСтрока, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентами.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьОсновным(Команда)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаИспользоватьОсновным.Пометка Тогда
		НеИспользоватьКакОсновнойДоговор(ТекущиеДанные.Ссылка);
	Иначе
		ИспользоватьКакОсновнойДоговор(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	Элементы.ФормаИспользоватьОсновным.Пометка = Не Элементы.ФормаИспользоватьОсновным.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ИспользоватьКакОсновнойДоговор(Знач Договор)
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(Договор);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НеИспользоватьКакОсновнойДоговор(Знач Договор)

	РаботаСДоговорамиКонтрагентовБП.НеИспользоватьКакОсновнойДоговор(Договор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСрокуДействия(Список, Знач ОтборДействуетНа, Знач Использование)
	
	Если НЕ Использование Тогда
		// Если отбор ранее не был установлен, то ничего делать не нужно
		ГруппаЭлементовОтбора = ОтборыСписковКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборДействуетНа");
		Если ГруппаЭлементовОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ГруппаОтбораИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы, "ОтборДействуетНа",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИ, "Дата", Новый ПолеКомпоновкиДанных("ДействуетНа"),
		Использование, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
	ГруппаОтбораИЛИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораИ.Элементы, "ОтборПоСрокДействия",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИЛИ, "ДействуетНа", Новый ПолеКомпоновкиДанных("СрокДействия"),
		Использование, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораИЛИ, "СрокДействия", Дата('00010101'),
		Использование, ВидСравненияКомпоновкиДанных.Равно);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандуИспользоватьОсновным(ТекущиеДанные)
	
	Если Не ДоступноИспользоватьОсновным Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Или ТекущиеДанные.ДоговорЗакрыт Тогда
		Элементы.ФормаИспользоватьОсновным.Пометка     = Ложь;
		Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
	Иначе
		Элементы.ФормаИспользоватьОсновным.Пометка     = ТекущиеДанные.Основной;
		Элементы.ФормаИспользоватьОсновным.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорЗакрыт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборДоговорЗакрыт()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДоговорЗакрыт",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,,
		?(ОтборДоговорЗакрыт = 0, Истина, Ложь));
	
КонецПроцедуры

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПечатьДоговоровКлиент.ВыполнитьОткрытиеТекстаДоговора(ТекущиеДанные.Ссылка, ЭтотОбъект, Ложь, Истина);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет И ДополнительныеПараметры.ЕстьФайлДоговора Тогда
		
		СообщенияОбОшибках = ПечатьДоговоровВызовСервера.СообщенияЗаполненияОбязательныхРеквизитов(ТекущиеДанные.Ссылка);
		
		Если СообщенияОбОшибках.Количество() <> 0 Тогда
							
			ПечатьДоговоровКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках);
			Возврат; 
			
		КонецЕсли;

		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(ДополнительныеПараметры.КомандаЭДО, ЭтотОбъект, Элементы.Список);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоРедактирования()
	Возврат ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	Элементы.Список.Обновить();
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоГруппа Тогда
		
		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		Возврат;
		
	КонецЕсли;
	
	ЕстьРабочийЭДД = ПечатьДоговоровВызовСервера.ЕстьЭлектронныйДоговорныйДокумент(ТекущиеДанные.Ссылка);
	ЯвляетсяКомандойФормированияЭД = СтрНайти(Команда.Имя, "СформироватьПодписатьОтправитьЭД") <> 0 Или
		СтрНайти(Команда.Имя, "ОткрытьАктуальныйЭД") <> 0;
		
	// Для ограниченных прав
	Если Не ЕстьПравоРедактирования() Тогда
			
		Если ЕстьРабочийЭДД Или Не ЯвляетсяКомандойФормированияЭД Тогда     
			ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		ИначеЕсли Не ЕстьРабочийЭДД Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав для формирования электронного документа.'"));
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;

	Если Не ЕстьРабочийЭДД И ЯвляетсяКомандойФормированияЭД Тогда
		
		ЕстьФайлДоговора = ТекущиеДанные.ЕстьФайлы = 0;
		
		Если ЕстьФайлДоговора И ТекущиеДанные.ЭлектронныйФормат Тогда
			
			СообщенияОбОшибках = ПечатьДоговоровВызовСервера.СообщенияЗаполненияОбязательныхРеквизитов(ТекущиеДанные.Ссылка);
			
			Если СообщенияОбОшибках.Количество() <> 0 Тогда
							
				ПечатьДоговоровКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках);
				Возврат;
				
			КонецЕсли;

			ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
				
		Иначе
				
			ДополнительныеПараметры = Новый Структура("ЕстьФайлДоговора, КомандаЭДО", ЕстьФайлДоговора, Команда);
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрВопроса = ?(ЕстьФайлДоговора, НСтр("ru = 'содержит только'"), НСтр("ru = 'не содержит'"));

			ТекстВопроса = НСтр("ru = 'Сохраненный файл %1 текст.
								|Сформировать договор для выгрузки в электронном формате?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрВопроса);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
		КонецЕсли;
					
	Иначе

		ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()

    ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.СостояниеЭДО);

КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти