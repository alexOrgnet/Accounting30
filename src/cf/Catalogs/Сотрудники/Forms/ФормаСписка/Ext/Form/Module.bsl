#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.РежимВыбора Тогда
		Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
			СервисЭлектронныхТрудовыхКнижек.НастроитьПараметрыОтбораСотрудников(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Для больничного листа. Но ниже доуточняется значение отбора.
	ДоступныДГПХ = Параметры.Свойство("ДоступныДГПХ") И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
	
	Элементы.КоманднаяПанельФормыСписка.Видимость         = НЕ Параметры.РежимВыбора;
	Элементы.КоманднаяПанельФормыВыбора.Видимость         = Параметры.РежимВыбора И Не ДоступныДГПХ;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
			МодульКадровыйУчетДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетДляНебольшихОрганизаций");
			МодульКадровыйУчетДляНебольшихОрганизаций.ПриСозданииФормыСпискаСотрудников(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение параметров отбора.
	Параметры.Отбор.Свойство("ТекущаяОрганизация", ОтборТекущаяОрганизация);
	Параметры.Отбор.Свойство("ГоловнаяОрганизация", ОтборГоловнаяОрганизация);
	Параметры.Отбор.Свойство("ТекущееПодразделение", ОтборТекущееПодразделение);
	
	Параметры.Отбор.Удалить("ТекущаяОрганизация");
	Параметры.Отбор.Удалить("ГоловнаяОрганизация");
	Параметры.Отбор.Удалить("ТекущееПодразделение");
	
	// Считается, что организация такая же как и головная организация, если организация не задана.
	Если НЕ ЗначениеЗаполнено(ОтборГоловнаяОрганизация) Тогда
		ОтборГоловнаяОрганизация = ОтборТекущаяОрганизация;
	ИначеЕсли НЕ ЗначениеЗаполнено(ОтборТекущаяОрганизация) Тогда
		ОтборТекущаяОрганизация = ОтборГоловнаяОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборГоловнаяОрганизация) Тогда
		ОтборГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ОтборГоловнаяОрганизация);
	КонецЕсли;
	
	// Получение значений по умолчанию, если организация не задана.
	Если НЕ ЗначениеЗаполнено(ОтборТекущаяОрганизация) Тогда
		
		ЗаполняемыеЗначения = Новый Структура;
		ЗаполняемыеЗначения.Вставить("Организация", "ОтборТекущаяОрганизация");
		ЗаполняемыеЗначения.Вставить("Подразделение", "ОтборТекущееПодразделение");
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗаполняемыеЗначения);
		
	КонецЕсли;
	
	// Настройка формы для режима выбора.
	Если Параметры.РежимВыбора Тогда
		
		Элементы.Список.РежимВыбора = Истина;
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		
		Если Параметры.ЗакрыватьПриВыборе = Ложь Тогда
			Элементы.Список.МножественныйВыбор = Истина;
			Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Множественный;
		КонецЕсли;
		
		// Если это выбор из особенного документа, например "Прием на работу"
		// управляем отборами в зависимости от "принятости на работу".
		Параметры.Свойство("ДоступныНепринятые", ДоступныНепринятые);
		Если ДоступныНепринятые Тогда
			
			ОтборТекущаяОрганизация = ОтборГоловнаяОрганизация;
			ОтборТекущееПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ОтборГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОбособленноеПодразделение", Ложь));
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОтборТекущаяОрганизация",
				"ПараметрыВыбора",
				Новый ФиксированныйМассив(МассивПараметровВыбора));
			
			Параметры.Отбор.Вставить("ОформленПоТрудовомуДоговору", Ложь);
			
			// Если при открытии формы выбора передан сотрудник, и он уже принят на работу
			// отключим отбор по непринятым сотрудникам.
			Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Параметры.ТекущаяСтрока, "ТекущаяОрганизация", ТекущаяДатаСеанса());
				Если КадровыеДанные.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(КадровыеДанные[0].ТекущаяОрганизация) Тогда
						Параметры.Отбор.Удалить("ОформленПоТрудовомуДоговору");
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"СписокКомпоновщикНастроекПользовательскиеНастройкиТекущееПодразделение",
				"Видимость",
				Ложь);
			
		Иначе
			
			Если НЕ ДоступныПринятыеИУволенные Тогда
				Параметры.Свойство("ДоступныПринятыеИУволенные", ДоступныПринятыеИУволенные);
			КонецЕсли;
			
			НачалоПериодаПримененияОтбора = '00010101';
			ОкончаниеПериодаПримененияОтбора = '00010101';
			
			Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
				
					НачалоПериодаПримененияОтбора = Параметры.Отбор.ДатаПримененияОтбора;
					ОкончаниеПериодаПримененияОтбора = Параметры.Отбор.ДатаПримененияОтбора;
				
				КонецЕсли;
				
				Параметры.Отбор.Удалить("ДатаПримененияОтбора");
				
			КонецЕсли;
				
			Если Параметры.Отбор.Свойство("НачалоПериодаПримененияОтбора") Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.НачалоПериодаПримененияОтбора) Тогда
				
					НачалоПериодаПримененияОтбора = Параметры.Отбор.НачалоПериодаПримененияОтбора;
					
					Если Параметры.Отбор.Свойство("ОкончаниеПериодаПримененияОтбора")
						И ЗначениеЗаполнено(Параметры.Отбор.ОкончаниеПериодаПримененияОтбора) Тогда
						
						ОкончаниеПериодаПримененияОтбора = Параметры.Отбор.ОкончаниеПериодаПримененияОтбора;
							
					Иначе
						ОкончаниеПериодаПримененияОтбора = КонецМесяца(НачалоПериодаПримененияОтбора);
					КонецЕсли;
				
				КонецЕсли;
				
				Параметры.Отбор.Удалить("НачалоПериодаПримененияОтбора");
				Параметры.Отбор.Удалить("ОкончаниеПериодаПримененияОтбора");
				
			КонецЕсли;
			
			Если Параметры.Отбор.Свойство("МесяцПримененияОтбора") Тогда
				
				Если Не ЗначениеЗаполнено(НачалоПериодаПримененияОтбора)
					И ЗначениеЗаполнено(Параметры.Отбор.МесяцПримененияОтбора) Тогда
					
					НачалоПериодаПримененияОтбора = НачалоМесяца(Параметры.Отбор.МесяцПримененияОтбора);
					ОкончаниеПериодаПримененияОтбора = КонецМесяца(Параметры.Отбор.МесяцПримененияОтбора);
					
				КонецЕсли;
				
				Параметры.Отбор.Удалить("МесяцПримененияОтбора");
				
			КонецЕсли;
			
			// Установка отбора по периоду работы.
			Если ЗначениеЗаполнено(НачалоПериодаПримененияОтбора) Тогда
				
				Если ДоступныДГПХ Тогда
					ДоступныДГПХ = НачалоПериодаПримененияОтбора >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
				КонецЕсли;
				
				Если НачалоДня(НачалоПериодаПримененияОтбора) = НачалоДня(ОкончаниеПериодаПримененияОтбора) Тогда
					ЗаголовокЭлементаОтбора = НСтр("ru='Работающие'") + " " + Формат(НачалоПериодаПримененияОтбора, "ДЛФ=DD");
				Иначе
					ЗаголовокЭлементаОтбора = НСтр("ru='Работающие в периоде с'") + " " + Формат(НачалоПериодаПримененияОтбора, "ДЛФ=DD") + " " + НСтр("ru='по'") + " " + Формат(ОкончаниеПериодаПримененияОтбора, "ДЛФ=DD");
				КонецЕсли;
				
				ОсновнаяГруппаОтбораСотрудника = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
				Если ДоступныДГПХ Тогда
					ОсновнаяГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
						Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, ЗаголовокЭлементаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
					ОсновнаяГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
					
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						ОсновнаяГруппаОтбора, "Договорник", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
					
					ГруппаОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
						ОсновнаяГруппаОтбора, , ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
						
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						ГруппаОтбораИ, "Работник", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
				Иначе
					ГруппаОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
						Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, ЗаголовокЭлементаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
					ГруппаОтбораИ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораИ, "ДатаПриема", , ВидСравненияКомпоновкиДанных.Заполнено, , Истина);
					
				ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораИ, "ГруппаОтбораИДатаПриема", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораИЛИ, "ДатаПриема", ОкончаниеПериодаПримененияОтбора, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Истина);
					
				ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораИ, "ГруппаОтбораИИмяДатаУвольнения", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораИЛИ, "ДатаУвольнения", , ВидСравненияКомпоновкиДанных.НеЗаполнено, НСтр("ru='Заполненность даты увольнения'"), Истина);
				
				ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораИЛИ, "ГруппаОтбораИлиИмяДатаУвольнения", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораИЛИ, "ДатаУвольнения", НачалоПериодаПримененияОтбора, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, , Истина);
				
			Иначе
				ДоступныДГПХ = Ложь;
			КонецЕсли;
			
			// Режим в котором доступны все сотрудники.
			Если ДоступныПринятыеИУволенные <> Истина И НЕ Параметры.Свойство("ДоступныВсеСотрудники") Тогда
				Если Не ДоступныДГПХ Тогда
					Параметры.Отбор.Вставить("ОформленПоТрудовомуДоговору", Истина);
				Иначе
					ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
						Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
						"ОформленПоТрудовомуДоговоруИлиДоговорник",
						ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						ГруппаОтбораИЛИ, "ОформленПоТрудовомуДоговору", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						ГруппаОтбораИЛИ, "Договорник", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина, , РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.Список.ИзменятьСоставСтрок = ДоступныНепринятые ИЛИ ДоступныПринятыеИУволенные;
		
		// Настройка заголовка формы
		АвтоЗаголовок = Ложь;
		Если ЗначениеЗаполнено(ОтборТекущаяОрганизация) ИЛИ ЗначениеЗаполнено(ОтборГоловнаяОрганизация) Тогда
			
			ОрганизацияЗаголовка = ?(ЗначениеЗаполнено(ОтборТекущаяОрганизация), ОтборТекущаяОрганизация, ОтборГоловнаяОрганизация);
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЗаголовка, "Наименование");
			
		Иначе
			НаименованиеОрганизации = НСтр("ru = '<Организация не указана>'");
		КонецЕсли;
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудники (%1)'"), НаименованиеОрганизации);
		
		// Подготовка списка подобранных сотрудников.
		АдресСпискаПодобранныхСотрудников = "";
		Если Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников) Тогда
			Если НЕ ПустаяСтрока(АдресСпискаПодобранныхСотрудников) Тогда
				СписокПодобранных.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(АдресСпискаПодобранныхСотрудников));
			КонецЕсли;
		КонецЕсли;
		
		Если ОтборТекущееПодразделение = Неопределено Тогда
			ОтборТекущееПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		// Заполнение меню ввода на основании.
		СотрудникиФормы.УстановитьМенюВводаНаОсновании(ЭтотОбъект, "ОформитьДокумент");
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормыПравая;
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
			ОтборТекущееПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			Элементы.КоманднаяПанельФормыЛевая.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка признаков использования быстрых отборов.
	ОтборТекущаяОрганизацияИспользование = ЗначениеЗаполнено(ОтборТекущаяОрганизация);
	ОтборТекущееПодразделениеИспользование = ЗначениеЗаполнено(ОтборТекущееПодразделение) и УчетЗарплаты.ВедетсяУчетПоПодразделениям();
	
	// Установка отбора по головной организации.
	Если ЗначениеЗаполнено(ОтборГоловнаяОрганизация) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			"ГоловнаяОрганизация",
			ОтборГоловнаяОрганизация,
			,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Иначе
		
		// Очистка  связей параметров выбора организации.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборТекущаяОрганизация",
			"СвязиПараметровВыбора",
			Новый ФиксированныйМассив(Новый Массив));
		
	КонецЕсли;
	
	// Перенос отборов из параметров формы в настройки динамического списка.
	ЗарплатаКадрыКлиентСервер.НастроитьОтборыПараметровФормыСписка(Список, Параметры);
	
	ПрименитьОтборНаСервере();
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список", , , , "ГоловнаяОрганизация, ТекущаяОрганизация, ТекущееПодразделение");
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список", Новый Структура("ИмяПоляИндикатораПроблем", "ИндикаторПроблем"));
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ОтборРолиСотрудников = Перечисления.РолиСотрудников.Работник;
	Если НЕ Параметры.РежимВыбора Тогда
		ДополнитьОтборНаСервере();
		// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтотОбъект,
			"БП.Справочник.Сотрудники",
			"ФормаСписка",
			НСтр("ru='Новости: Сотрудники'"),
			ИдентификаторыСобытийПриОткрытии
		);
		// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Иначе
		Элементы.ВыбратьЗначение.КнопкаПоУмолчанию = ДоступныДГПХ;
		ДополнитьОтборНаСервере();
	КонецЕсли;
	Элементы.КоманднаяПанельФормыВыбораСОтбором.Видимость = Параметры.РежимВыбора И ДоступныДГПХ;
	
	УстановитьУсловноеОформление();
	
	УстановитьСписокПодобранныхСотрудников();
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеСотрудники.Количество() > 0 Тогда
		ОповеститьОВыборе(ВыбранныеСотрудники.ВыгрузитьЗначения());
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	Если ИмяСобытия = "ИзменениеДанныхМестаРаботы"
		ИЛИ ИмяСобытия = "Запись_ДоговорРаботыУслуги" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "СозданСотрудник" Тогда
		
		Если Параметры.РежимВыбора И Источник = ЭтотОбъект Тогда
			ОповеститьОВыборе(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Сотрудники" Или ИмяСобытия = "Запись_ПриемНаРаботу" 
		Или ИмяСобытия = "Запись_Увольнение" Или ИмяСобытия = "ИзменениеКадровыхДокументов" Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		Оповестить("ПоказатьИнформациюОПравеПримененияСпецрежима",
			?(ОтборТекущаяОрганизацияИспользование, ОтборТекущаяОрганизация, Неопределено),
			ЭтотОбъект);
		
		ПодключитьОбработчикОжидания("ПоказатьПредупреждениеПревышениеЛимитаТарифа", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ПоказатьИнформациюОПравеПримененияСпецрежима" Тогда
		Если Источник <> ЭтотОбъект
			И (Не ОтборТекущаяОрганизацияИспользование Или Параметр = ОтборТекущаяОрганизация) Тогда
			ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеПревышениеЛимитаТарифа", 0.1, Истина);
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборТекущаяОрганизацияИспользованиеПриИзменении(Элемент)
	
	ПрименитьОтбор();
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеПревышениеЛимитаТарифа", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТекущаяОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбораПоОрганизации();
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеПревышениеЛимитаТарифа", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТекущееПодразделениеИспользованиеПриИзменении(Элемент)
	
	ПрименитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТекущееПодразделениеПриИзменении(Элемент)
	
	ОтборТекущееПодразделениеИспользование = ЗначениеЗаполнено(ОтборТекущееПодразделение);
	ПрименитьОтбор();

КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРолиСотрудниковПриИзменении(Элемент)
	
	ДополнитьОтборНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНажатие(Элемент)
	
	КонтрольПраваПримененияСпецрежимаКлиент.ПодробнееНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПозжеНажатие(Элемент)
	
	ОтложитьПоказНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОТарифах(Элемент)
	
	ОплатаСервисаКлиент.ОткрытьФормуОплатыСервиса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЭлементаСправочникаСотрудники");
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыНовогоЭлементаСправочникаСотрудники");

	Если Элементы.Список.РежимВыбора И ДоступныНепринятые Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ЗначениеЗаполнено(ОтборГоловнаяОрганизация) Тогда
			ПараметрыФормы.Вставить("ГоловнаяОрганизация", ОтборГоловнаяОрганизация);
		КонецЕсли;
		
		Если ОтборТекущаяОрганизацияИспользование И ЗначениеЗаполнено(ОтборТекущаяОрганизация) Тогда
			ПараметрыФормы.Вставить("ТекущаяОрганизация",  ОтборТекущаяОрганизация);
		КонецЕсли;
		
		ОткрытьФорму(
			"Справочник.Сотрудники.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		СписокЗначений = Значение;
	Иначе
		СписокЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	КонецЕсли;
	
	Если СписокЗначений.Количество() > 0 Тогда
		
		Если Элементы.Список.МножественныйВыбор Тогда
			
			ОбновитьСписокПодобранных(СписокЗначений);
			Если СписокЗначений.Количество() > 1 Тогда
				Закрыть();
			КонецЕсли; 
			
		Иначе
			
			Если СписокПодобранных.НайтиПоЗначению(СписокЗначений[0]) = Неопределено Тогда
				ОповеститьОВыборе(СписокЗначений[0]);
			Иначе
				Закрыть();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьЗначение(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	СписокВыборЗначения(Элементы.Список, ТекущиеДанные.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформитьНаОсновании(Команда)
	
	СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, Элементы.Список.ТекущаяСтрока, Команда.Имя);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Элементы.Список);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область ПравоПримененияСпецрежима

&НаКлиенте
Процедура ПоказатьИнформациюОПравеПримененияСпецрежима()
	
	Если Не ОтборТекущаяОрганизацияИспользование
		Или Не КонтрольПраваПримененияСпецрежимаКлиент.Контролировать(ОтборТекущаяОрганизация) Тогда
		Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	Иначе
		ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере()
	
	ИнформацияОПравеПримененияСпецрежима = КонтрольПраваПримененияСпецрежима.ИнформацияОПравеПримененияСпецрежима(
		ОтборТекущаяОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаРаботники());
	СледующееЗначениеНапоминания = ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания;
	СсылкаНаПояснение = ИнформацияОПравеПримененияСпецрежима.СсылкаНаПояснение;
	
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = ИнформацияОПравеПримененияСпецрежима.Показать;
	Элементы.ИнформацияОПравеПримененияСпецрежима.ЦветФона = ИнформацияОПравеПримененияСпецрежима.ЦветФонаГруппы;
	Элементы.ТекстИнформации.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстИнформации;
	
	Элементы.Подробнее.Видимость = ЗначениеЗаполнено(СсылкаНаПояснение);
	
	Элементы.НапомнитьПозже.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстНапомнитьПозже;
	Элементы.НапомнитьПозже.Видимость = ИнформацияОПравеПримененияСпецрежима.ОтображатьНапоминание;
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьПоказНапоминанияНаСервере()
	
	КонтрольПраваПримененияСпецрежима.ОтложитьПоказНапоминания(
		ОтборТекущаяОрганизация,
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаРаботники(),
		СледующееЗначениеНапоминания);
		
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КонецЕсли;
	ИдентификаторЗамера = Неопределено;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МассивКУдалению = Новый Массив;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление <> НСтр("ru='Выделение подобранных'") Тогда
			МассивКУдалению.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЗначениеМассива Из МассивКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЗначениеМассива)
	КонецЦикла;
	
	// Преключатель вида договора
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекущаяДолжность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидЗанятости");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаПриема");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаУвольнения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекущийАванс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекущийСпособРасчетаАванса");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборРолиСотрудников", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РолиСотрудников.Работник);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПодобранных(Значение)
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		СписокЗначений = Значение;
	Иначе
		СписокЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	КонецЕсли;
	
	Для каждого ВыбранноеЗначение Из СписокЗначений Цикл
		Если СписокПодобранных.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СписокПодобранных.Добавить(ВыбранноеЗначение);
			ВыбранныеСотрудники.Добавить(ВыбранноеЗначение);
		КонецЕсли; 
	КонецЦикла;
	
	УстановитьСписокПодобранныхСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокПодобранныхСотрудников()
	
	ЭлементУсловногоОформления = Неопределено;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru='Выделение подобранных'") Тогда
			ЭлементУсловногоОформления = ЭлементОформления;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЭлементУсловногоОформления <> Неопределено Тогда
		ЭлементУсловногоОформления.Отбор.Элементы[0].ПравоеЗначение = СписокПодобранных;
	КонецЕсли; 
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПрименитьОтбор()
	
	УстановитьБыстрыйОтборСписка(
		Список,
		ОтборТекущаяОрганизацияИспользование,
		ОтборТекущаяОрганизация,
		ОтборТекущееПодразделениеИспользование,
		ОтборТекущееПодразделение,
		ДоступныНепринятые,
		ПолучитьФункциональнуюОпциюФормы("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая"));	
		
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборНаСервере()
	
	УстановитьБыстрыйОтборСписка(
		Список,
		ОтборТекущаяОрганизацияИспользование,
		ОтборТекущаяОрганизация,
		ОтборТекущееПодразделениеИспользование,
		ОтборТекущееПодразделение,
		ДоступныНепринятые,
		ПолучитьФункциональнуюОпциюФормы("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая"));	
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьОтборНаСервере()
	
	ОсновнаяГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "ОтборРолиСотрудников" , ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Если ОтборРолиСотрудников <> Перечисления.РолиСотрудников.ПустаяСсылка() Тогда
		
		Если ОтборРолиСотрудников = Перечисления.РолиСотрудников.Договорник Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ОсновнаяГруппаОтбора,
				"Договорник",
				Истина,
				ВидСравненияКомпоновкиДанных.Равно,
				"ОтборРолиСотрудниковДоговорник",
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ОсновнаяГруппаОтбора,
				"Работник",
				,
				,
				"ОтборРолиСотрудниковРаботник",
				Ложь,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
		ИначеЕсли ОтборРолиСотрудников = Перечисления.РолиСотрудников.Работник Тогда
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ОсновнаяГруппаОтбора,
				"Договорник",
				,
				,
				"ОтборРолиСотрудниковДоговорник",
				Ложь,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ОсновнаяГруппаОтбора,
				"Работник",
				Истина,
				ВидСравненияКомпоновкиДанных.Равно,
				"ОтборРолиСотрудниковРаботник",
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
		КонецЕсли;
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОсновнаяГруппаОтбора,
			"Договорник",
			,
			,
			"ОтборРолиСотрудниковДоговорник",
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОсновнаяГруппаОтбора,
			"Работник",
			,
			,
			"ОтборРолиСотрудниковРаботник",
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБыстрыйОтборСписка(Список, ИспользованиеОрганизации, Организация, ИспользованиеПодразделения, Подразделение, ДоступныНепринятые, ИспользоватьНесколькоОрганизаций)
	
	Если ДоступныНепринятые Тогда
		ИмяПоляОтбораПоОрганизации = "ГоловнаяОрганизация";
	Иначе
		ИмяПоляОтбораПоОрганизации = "ТекущаяОрганизация";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяПоляОтбораПоОрганизации);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "ТекущееПодразделение");
	
	Если ИспользованиеОрганизации И ИспользоватьНесколькоОрганизаций Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			ИмяПоляОтбораПоОрганизации,
			Организация,
			,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
	Если ИспользованиеПодразделения Тогда
		
		Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			"ТекущееПодразделение",
			Подразделение,
			ВидСравненияОтбора,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораПоОрганизации()
	
	ОтборТекущаяОрганизацияИспользование = ЗначениеЗаполнено(ОтборТекущаяОрганизация);
	ОтборТекущееПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	ОтборТекущееПодразделениеИспользование = Ложь;
	ПрименитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПревышениеЛимитаТарифа()
	
	ТарификацияБПКлиент.ОтобразитьБаннерПревышенияЛимитаТарифаНаЧислоСотрудников(
		ЭтотОбъект, ОтборТекущаяОрганизация, ОтборТекущаяОрганизацияИспользование);
	
КонецПроцедуры

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

