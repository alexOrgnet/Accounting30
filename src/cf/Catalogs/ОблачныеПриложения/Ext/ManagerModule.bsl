#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает облачное приложение по его идентификатору.
//
// Параметры:
//   Идентификатор - Строка - идентификатор облачного приложения
//
// Возвращаемое значение:
//   СправочникСсылка.ОблачныеПриложения - ссылка на облачное приложение,
//   Неопределено - если приложение по указанному идентификатору не найдено
//
Функция Получить(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОблачныеПриложения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОблачныеПриложения КАК ОблачныеПриложения
	|ГДЕ
	|	ОблачныеПриложения.Код = &Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОблачныеПриложения.Ссылка";
	
	Запрос.Параметры.Вставить("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает данные облачного приложения.
//
// Параметры:
//   Приложение - СправочникСсылка.ОблачныеПриложения - ссылка на облачное приложение
//
// Возвращаемое значение:
//   Структура:
//    * Адрес - Строка - URI облачного приложения
//    * Идентификатор - Строка - уникальный идентификатор облачного приложения. Каждое приложение генерирует
//                      себе уникальный идентификатор, записывает в константу ИдентификаторПриложенияСообщенийОблачныхПриложений.
//   Неопределено - если передана битая ссылка
//
Функция ДанныеПриложения(Приложение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОблачныеПриложения.Адрес КАК Адрес,
	|	ОблачныеПриложения.Код КАК Идентификатор
	|ИЗ
	|	Справочник.ОблачныеПриложения КАК ОблачныеПриложения
	|ГДЕ
	|	ОблачныеПриложения.Ссылка = &Приложение";
	
	Запрос.Параметры.Вставить("Приложение", Приложение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Адрес, Идентификатор", Выборка.Адрес, Выборка.Идентификатор);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает экземпляр облачного приложения по идентификатору. Создает отсутствующий экземпляр.
// Если экземпляр существует, и у него не заполнено Наименование, то Наименование
// заполняется из параметров.
//
// Параметры:
//   Идентификатор - Строка - идентификатор облачного приложения
//   Адрес - Строка - URI приложения
//   Наименование - Строка - наименование облачного приложения в облаке
//
// Возвращаемое значение:
//   СправочникСсылка.ОблачныеПриложения - ссылка на экземпляр облачного приложения
//   Неопределено - если передан пустой идентификатор приложения
//
Функция СсылкаПриложение(Идентификатор, Адрес = "", Наименование = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ОблачныеПриложения");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Приложение = Получить(Идентификатор);
		Если Приложение <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Приложение.Адрес) И ЗначениеЗаполнено(Адрес) Тогда
				ПриложениеОбъект = Приложение.ПолучитьОбъект();
				ПриложениеОбъект.Наименование = Наименование;
				ПриложениеОбъект.Адрес = Адрес;
				ПриложениеОбъект.Записать();
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Приложение;
		КонецЕсли;
		
		Приложение = Справочники.ОблачныеПриложения.СоздатьЭлемент();
		Приложение.Наименование = Наименование;
		Приложение.Код = Идентификатор;
		Приложение.Адрес = Адрес;
		
		Если Не ЗначениеЗаполнено(Приложение.Наименование) Тогда
			Приложение.Наименование = Идентификатор;
		КонецЕсли;
		
		Приложение.Записать();
		ЗафиксироватьТранзакцию();
		
		Возврат Приложение.Ссылка;
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Облачные приложения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	КонецПопытки;
КонецФункции

// Переименовывает существующий экземпляр облачного приложения
//
// Параметры:
//   Приложение - СправочникСсылка.ОблачныеПриложения - ссылка на облачное приложение
//   Наименование - Строка - наименование облачного приложения в облаке
//
Процедура Переименовать(Приложение, Наименование) Экспорт
	
	ПриложениеОбъект = Приложение.ПолучитьОбъект();
	ПриложениеОбъект.Наименование = Наименование;
	ПриложениеОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли