#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ЕстьПравоИзменениеПоступлениеТоваровУслуг = ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоИзменениеРеализацияТоваровУслуг  = ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг);
	ЕстьПравоИзменениеСчетНаОплату            = ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю);
	ЕстьПравоИзменениеКоммерческоеПредложение = ПравоДоступа("Изменение", Метаданные.Документы.КоммерческоеПредложение);
	ЕстьПравоИзменениеРозничнаяПродажа        = ПравоДоступа("Изменение", Метаданные.Документы.РозничнаяПродажа);
	
	ЕстьПравоИзмененияДокументовПродажи = ЕстьПравоИзменениеРеализацияТоваровУслуг Или ЕстьПравоИзменениеСчетНаОплату
		Или ЕстьПравоИзменениеКоммерческоеПредложение Или ЕстьПравоИзменениеРозничнаяПродажа;

	Элементы.ГруппаКорзина.Видимость = ЕстьПравоИзмененияДокументовПродажи;
	Элементы.СписокКонтекстноеМенюДобавитьВКорзину.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг Или ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьКоммерческоеПредложение.Видимость = ЕстьПравоИзменениеКоммерческоеПредложение;
	Элементы.СоздатьСчетПокупателю.Видимость = ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьАктРеализация.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьНакладнуюРеализация.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьНакладнуюПоступление.Видимость = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	Элементы.КартинкаКорзина.Видимость = ЕстьПравоИзмененияДокументовПродажи;
	
	НастроитьОперацииПодменюОтчеты();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	
	НастроитьБаннерКассаНеПодключена();
	
	СуммаВключаетНДС = Истина;
	
	РазрешенПросмотрЦен = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	Элементы.ТипЦен.Видимость = РазрешенПросмотрЦен;
	Элементы.ТоварЦенаПредставление.Видимость = РазрешенПросмотрЦен;
	
	ОтображатьОстаткиИЦеныВСписке = Константы.ОтображатьОстаткиИЦеныВСпискеТовары.Получить();
	
	ИспользоватьОтборПоСкладу = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет")
		И ВедетсяСкладскойУчет();
		
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияБП.ИспользуетсяОборудование("СканерШтрихкода");
	
	ПоказыватьОстатки = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	
	Элементы.Остаток.Видимость = ОтображатьОстаткиИЦеныВСписке И ПоказыватьОстатки;
	Элементы.Цена.Видимость = ОтображатьОстаткиИЦеныВСписке И РазрешенПросмотрЦен;
	Элементы.ГруппаСвойстваТовара.Видимость = Не ОтображатьОстаткиИЦеныВСписке;
	Элементы.ТоварОстатокПредставление.Видимость = ПоказыватьОстатки;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Номенклатура",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru='Новости: Товары'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	НастройкиСписка = Новый Структура;
	НастройкиСписка.Вставить("ОтображатьОстаткиИЦеныВСписке", ОтображатьОстаткиИЦеныВСписке);
	НастройкиСписка.Вставить("РазрешенПросмотрЦен", РазрешенПросмотрЦен);
	НастройкиСписка.Вставить("ПоказыватьОстатки", ПоказыватьОстатки);
	
	ИсключаемыеСчетаУчетаТоваров = ИсключаемыеСчетаУчетаТоваров();
	
	НастройкиСписка.Вставить("СчетаУчетаТоваров", БухгалтерскиеОтчеты.СчетаУчетаТоваров(ИсключаемыеСчетаУчетаТоваров));
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НастройкиСписка", НастройкиСписка);
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьВидимостьБаннера(Элементы);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	УправлениеПанельюПодсказки.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ИзменитьНастройкиСписка = Истина;
		СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Или ЗначениеЗаполнено(Склад) Или Корзина.Количество() <> 0 Тогда
		УправлениеСпискомФормы(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	Если НЕ ТолькоПросмотр И ИспользоватьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияТребующиеОбновленияСписка = Новый Массив;
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РеализацияТоваровУслуг");
	
	Если СобытияТребующиеОбновленияСписка.Найти(ИмяСобытия) <> Неопределено Тогда
		Элементы.Список.Обновить();
		Если Не ОтображатьОстаткиИЦеныВСписке Тогда
			ОбновитьСвойстваТекущегоТовара();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТипЦенНоменклатуры" Тогда
		ОбновитьИнтерфейс();
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" Тогда
		ОбновитьВидимостьБаннера(Элементы);
	ИначеЕсли Источник = "ПодключаемоеОборудование" 
		И ИмяСобытия = "ScanData" И ВводДоступен() Тогда
		
		ДанныеСоСканераСтруктура = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
		
		ПараметрыЗапросаОстаткиЦены = Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.НастройкиСписка;
		
		РезультатПоиска = НоменклатураПоШтрихкодуНаСервере(
			ДанныеСоСканераСтруктура.Штрихкод, РазрешенПросмотрЦен, ПараметрыЗапросаОстаткиЦены);
			
		Если РезультатПоиска <> Неопределено Тогда
			ДобавитьНоменклатуруВКорзину(РезультатПоиска.Номенклатура, РезультатПоиска.Цена);
			
			УправлениеСпискомФормы(ЭтотОбъект);
			УправлениеФормой(ЭтотОбъект);
	
			ПоказатьОповещениеПользователя(НСтр("ru='Товар добавлен в корзину'"));
		КонецЕсли; 
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	УправлениеПанельюПодсказкиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНакладнуюПоступление(Команда)
	
	СоздатьНакладную();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВКорзину(Команда)
	
	ПоместитьТекущиеДанныеВКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПокупателю(Команда)
	
	СозданиеСчетаПокупателю();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюРеализация(Команда)
	
	СозданияНакладнойРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктРеализация(Команда)
	
	СозданиеАктаРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧек(Команда)
	
	СозданиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКоммерческоеПредложение(Команда)
	
	СозданиеКоммерческогоПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДвижениеТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ДвижениеТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборачиваемостьТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОборачиваемостьТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОстаткиТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоНоменклатуре(Команда)
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоНоменклатуре");
	Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;

	ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
	ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	
	ФормаОтчета = ПолучитьФорму("Отчет.Продажи.ФормаОбъекта", ПараметрыОтчета, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДоходыИРасходы(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ДоходыРасходы.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализПродаж(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ВаловаяПрибыль.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборотныеСредства(Команда)

	ФормаОтчета = ПолучитьФорму("Отчет.ОборотныеСредства.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСравнениеПродажПоНоменклатуре(Команда)
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("КлючВарианта", "СравнениеПродажПоНоменклатуре");
	Уникальность = СтрШаблон("Отчет.СравнениеПродаж/КлючВарианта.%1", ПараметрыОтчета.КлючВарианта);
	
	ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
	ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии",     Истина);
	
	ОткрытьФорму("Отчет.СравнениеПродаж.ФормаОбъекта", ПараметрыОтчета, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетКалькуляцияСебестоимости(Команда)
	
	СправкиРасчетыКлиент.СформироватьОтчетПоРезультатамМесяца("СправкаРасчетКалькуляцияСебестоимости",
		ТекущаяДата(),
		Неопределено, // Параметр Организация:  Открываем отчет по всем организациям, пользователь сам отберет необходимую.
		Неопределено, // Параметр ВидРегламентнойОперации:  Без привязки к регламентной операции
		ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВидовОплат(Команда)
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаСписка", , , , , ,
		Новый ОписаниеОповещения("ОповещениеОбновленияБаннера", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключаемоеОборудование(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", , , , , ,
		Новый ОписаниеОповещения("ОповещениеОбновленияБаннера", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	Если ДоступнаРаботаСКассовойСменой() Тогда
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.ЗакрытьСмену(УникальныйИдентификатор, Список.КомпоновщикНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиТоваровПоСрокамХранения(Команда)
	
	Вариант = Новый Структура;
	Вариант.Вставить("ИмяОтчета",    "ОстаткиТоваровПоСрокамХранения");
	Вариант.Вставить("КлючВарианта", "ОстаткиТоваровПоСрокамХранения");
	
	БухгалтерскиеОтчетыКлиент.ОткрытьВариантОтчета(Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КорзинаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресКорзиныВХранилище = ПоместитьКорзинуВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресКорзиныВХранилище", АдресКорзиныВХранилище);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияКорзины", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКорзина", ПараметрыФормы, ЭтаФорма,,,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(ТипЦен), ЦенаВключаетНДС(ТипЦен), Истина);
	
	Если ОтображатьОстаткиИЦеныВСписке Тогда
		УправлениеСпискомФормы(ЭтотОбъект);
	Иначе
		ОбновитьСвойстваТекущегоТовара();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ПерезаполнитьЦеныВКорзине();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ОтображатьОстаткиИЦеныВСписке Тогда
		УправлениеСпискомФормы(ЭтотОбъект);
	Иначе
		ОбновитьСвойстваТекущегоТовара();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, ОрганизацияПоУмолчанию());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#Область Панель_Подсказки

&НаКлиенте
Процедура НавигацияВПрограммеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.НавигацияВПрограммеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяФункциональностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.ДополнительнаяФункциональностьОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоветПоРаботе4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПанельюПодсказкиКлиент.СоветПоРаботеОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиСписка = Настройки.ДополнительныеСвойства.НастройкиСписка;
	
	СоответствиеСтрокДинамическогоСписка = Новый Соответствие;
	НоменклатураКРасчетуОстатковЦен = Новый Массив;
	
	Для каждого ЭлементСписка Из Строки Цикл
		
		СтрокаСписка = ЭлементСписка.Значение.Данные;
		
		Если СтрокаСписка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйЭлемент = НастройкиСписка.КорзинаНоменклатура.Найти(СтрокаСписка.Ссылка);
		СтрокаСписка.КартинкаКорзина = ?(НайденныйЭлемент = Неопределено, 0, 1);
		
		Если НастройкиСписка.ОтображатьОстаткиИЦеныВСписке Тогда
			НоменклатураКРасчетуОстатковЦен.Добавить(СтрокаСписка.Ссылка);
			СоответствиеСтрокДинамическогоСписка.Вставить(СтрокаСписка.Ссылка, ЭлементСписка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НоменклатураКРасчетуОстатковЦен.Количество() <> 0 Тогда
		ЗаполнитьКолонкиОстаткиЦены(НастройкиСписка, СоответствиеСтрокДинамическогоСписка, НоменклатураКРасчетуОстатковЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "КартинкаКорзина" Тогда
		СтандартнаяОбработка = Ложь;
		ПоместитьТекущиеДанныеВКорзину();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	МожноДобавлятьВКоризну = ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа;
	
	Элементы.ДобавитьВКорзину.Доступность = МожноДобавлятьВКоризну;
	Элементы.СписокКонтекстноеМенюДобавитьВКорзину.Доступность = МожноДобавлятьВКоризну;
	
	Если Не ОтображатьОстаткиИЦеныВСписке Тогда
		ПодключитьОбработчикОжидания("ОбновитьСвойстваТекущегоТовара", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		КлючеваяОперация = "СозданиеФормыНоменклатура";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КлючеваяОперация = "ОткрытиеФормыНоменклатура";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

&НаСервере
Функция ИсключаемыеСчетаУчетаТоваров()
	
	СчетаИсключаемые = Новый Массив;
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);       // 10.11
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            // 10.07
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаИсключаемые);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВедетсяСкладскойУчет()
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначенияБП.ОпределитьПараметрыУчета().СкладскойУчет <> 0;
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСпискомФормы(Форма)
	
	НастройкиСписка = Форма.Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.НастройкиСписка;
	
	НастройкиСписка.Вставить("ТипЦен", Форма.ТипЦен);
	НастройкиСписка.Вставить("Склад", ?(Форма.ИспользоватьОтборПоСкладу, Форма.Склад, Неопределено));
	
	КорзинаНоменклатура = Новый Массив;
	Для каждого СтрокаКорзина Из Форма.Корзина Цикл
		КорзинаНоменклатура.Добавить(СтрокаКорзина.Номенклатура);
	КонецЦикла;
	
	НастройкиСписка.Вставить("КорзинаНоменклатура", КорзинаНоменклатура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Склад.Видимость = Форма.ИспользоватьОтборПоСкладу;
	Элементы.ГруппаКорзина.Ширина = ?(Элементы.ИзменитьВидимостьПодсказок.Видимость, 40, 44);
	
	ИтогКоличество = Форма.Корзина.Итог("Количество");
	СтрокаКоличество = СтрЗаменить(ЧислоПрописью(ИтогКоличество, "Л=ru_RU", НСтр("ru='товар, товара, товаров, м,,,,, 0'")),
			ЧислоПрописью(ИтогКоличество, "Л=ru_RU", НСтр("ru=',,, м,,,,, 0'")),
			Формат(ИтогКоличество, "ЧЦ=") + " ");

	ИтогСумма = Форма.Корзина.Итог("Сумма");
	СтрокаСумма = ?(ИтогСумма = 0,
		"",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' на %1 %2'"), 
			Формат(ИтогСумма, "ЧДЦ=2; ЧН=0"), Форма.ВалютаРегламентированногоУчета));
	
	КоличествоПозицийВКорзине = Форма.Корзина.Количество();
	Форма.КорзинаПредставление = ?(КоличествоПозицийВКорзине = 0,
		НСтр("ru='Корзина пуста'"),
		СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2", СтрокаКоличество, СтрокаСумма)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураПоШтрихкодуНаСервере(Штрихкод, ПолучитьЦену, ПараметрыЗапросаОстаткиЦены)
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("Цена",         0);

	ТаблицаШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	Если ТаблицаШтрихкодов.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, ТаблицаШтрихкодов[0]);
	КонецЕсли; 
	
	Если ПолучитьЦену Тогда
		РезультатЗапроса = РезультатЗапросаОстаткиЦены(ПараметрыЗапросаОстаткиЦены, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.Номенклатура));
			
		Если РезультатЗапроса.Следующий() Тогда
			Результат.Вставить("Цена", РезультатЗапроса.Цена);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция РезультатЗапросаОстаткиЦены(ПараметрыЗапросаОстаткиЦены, НоменклатураКРасчетуОстатковЦен)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток,
	|	МАКСИМУМ(ВложенныйЗапрос.Цена) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		0 КАК Остаток,
	|		ЦеныНоменклатуры.Цена КАК Цена
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ТипЦен = &ТипЦен
	|					И Номенклатура В (&МассивНоменклатур)) КАК ЦеныНоменклатуры
	|	ГДЕ
	|		&ИспользоватьЦеныНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныНоменклатуры.Номенклатура,
	|		0,
	|		ЦеныНоменклатуры.Цена
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатуры
	|	ГДЕ
	|		ЦеныНоменклатуры.Номенклатура В(&МассивНоменклатур)
	|		И ЦеныНоменклатуры.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам)
	|		И &ИспользоватьЦеныНоменклатурыДокументов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|		ХозрасчетныйОстатки.КоличествоОстаток КАК Остаток,
	|		0 КАК Цена
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаУчетаТоваров), &ВидыСубконто, Субконто1 В (&МассивНоменклатур)) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура";
	
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", ПараметрыЗапросаОстаткиЦены.СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("МассивНоменклатур", НоменклатураКРасчетуОстатковЦен);
	Запрос.УстановитьПараметр("ИспользоватьЦеныНоменклатуры", ПараметрыЗапросаОстаткиЦены.РазрешенПросмотрЦен
		И ЗначениеЗаполнено(ПараметрыЗапросаОстаткиЦены.ТипЦен));
	Запрос.УстановитьПараметр("ИспользоватьЦеныНоменклатурыДокументов", ПараметрыЗапросаОстаткиЦены.РазрешенПросмотрЦен
		И Не ЗначениеЗаполнено(ПараметрыЗапросаОстаткиЦены.ТипЦен));
	Запрос.УстановитьПараметр("ТипЦен", ПараметрыЗапросаОстаткиЦены.ТипЦен);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Если Не ПараметрыЗапросаОстаткиЦены.ПоказыватьОстатки Тогда
		
		// Удаляем из запроса обращение к остаткам регистра бухгалтерии
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ВложенныйЗапросОператоры = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы;
		ВложенныйЗапросОператоры.Удалить(2);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса(); 
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапросаОстаткиЦены.Склад) Тогда
	
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
		ВложенныйЗапросОператоры = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы;
	
		ТекущееУсловиеСубконто = ВложенныйЗапросОператоры[2].Источники[0].Источник.Параметры[3];
		ТекущееУсловиеСубконто.Выражение = Новый ВыражениеСхемыЗапроса(Строка(ТекущееУсловиеСубконто.Выражение)
			+ " И Субконто2 = &Склад");
	
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса(); 
	
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		Запрос.УстановитьПараметр("Склад", ПараметрыЗапросаОстаткиЦены.Склад);
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКолонкиОстаткиЦены(НастройкиСписка, СоответствиеСтрокДинамическогоСписка, НоменклатураКРасчетуОстатковЦен)
	
	РезультатЗапроса = РезультатЗапросаОстаткиЦены(НастройкиСписка, НоменклатураКРасчетуОстатковЦен); 
	
	Пока РезультатЗапроса.Следующий() Цикл
		ТекущаяСтрокаСписка = СоответствиеСтрокДинамическогоСписка[РезультатЗапроса.Номенклатура].Данные;
		Если НастройкиСписка.РазрешенПросмотрЦен Тогда
			ТекущаяСтрокаСписка.Цена = РезультатЗапроса.Цена;
		КонецЕсли;
		Если НастройкиСписка.ПоказыватьОстатки Тогда
			ТекущаяСтрокаСписка.Остаток = РезультатЗапроса.Остаток;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьБаннера(Элементы)
	
	Баннер = ИмяВидимогоБаннераНаСервере();
	Если ЗначениеЗаполнено(Баннер)
		И Элементы.БаннерСтраницы.ПодчиненныеЭлементы.Найти(Баннер) <> Неопределено Тогда
		Элементы.БаннерСтраницы.Видимость = ЕстьПравоЧтенияРозничныхПродаж();
		Элементы.БаннерСтраницы.ТекущаяСтраница = Элементы[Баннер];
	Иначе
		Элементы.БаннерСтраницы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяВидимогоБаннераНаСервере()
	
	ИмяБаннера = ЖурналыДокументов.РозничныеПродажи.ИмяВидимогоБаннера_РозничнаяТорговля();
	Возврат ИмяБаннера;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыДокумента(ВидОперации = Неопределено)

	Если ЗначениеЗаполнено(ВидОперации) Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугТовары";
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугУслуги";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	АдресКорзиныВХранилище = ПоместитьКорзинуВХранилище();
	ЗначенияЗаполнения.Вставить("АдресТаблицыНоменклатуры", АдресКорзиныВХранилище);
	ЗначенияЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ЗначенияЗаполнения.Вставить("ТипЦен", ТипЦен);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПоместитьТекущиеДанныеВКорзину()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ВвестиНакладную", НСтр("ru='Ввести накладную'"));
		СписокКнопок.Добавить("ЗагрузитьИзExcel", НСтр("ru='Загрузить из Excel'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("ФормаТоварыЗавершениеВопросаДобавлениеТоваров", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Помещать в корзину пока нечего.
			|Начните с заполнения списка товаров.'"), СписокКнопок);
		
	Иначе
		
		Счетчик = 0;
		
		ВыбранныеЭлементыНоменклатуры = УбратьГруппы(Элементы.Список.ВыделенныеСтроки);
		
		ЦенаНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ТекущиеДанные, "Цена", ЭтотОбъект.ТоварЦена);
		
		Для каждого ЭлементНоменклатуры Из ВыбранныеЭлементыНоменклатуры Цикл
			
			ДобавитьНоменклатуруВКорзину(ЭлементНоменклатуры, ЦенаНоменклатуры);
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		УправлениеСпискомФормы(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
		Если Счетчик = 1 Тогда
			ТекстОповещения = НСтр("ru='Товар добавлен в корзину'");
		ИначеЕсли Счетчик > 1 Тогда
			ТекстОповещения = НСтр("ru='Товары добавлены в корзину'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзину(ЭлементНоменклатуры, Цена)

	СтруктураОтбора = Новый Структура("Номенклатура", ЭлементНоменклатуры);
	
	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКорзины = НайденныеСтроки[0];
	Иначе
		СтрокаКорзины = Корзина.Добавить();
		СтрокаКорзины.Номенклатура = ЭлементНоменклатуры;
	КонецЕсли;
	
	СтрокаКорзины.Количество = СтрокаКорзины.Количество + 1;
	
	Если СтрокаКорзины.Цена = 0 Тогда
		СтрокаКорзины.Цена = Цена;
	КонецЕсли;
	
	СтрокаКорзины.Сумма = СтрокаКорзины.Количество * СтрокаКорзины.Цена;

КонецПроцедуры

&НаСервере
Функция ПоместитьКорзинуВХранилище()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Корзина.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКорзинуИзХранилища(АдресКорзиныВХранилище)
	
	СохраненнаяКорзина = ПолучитьИзВременногоХранилища(АдресКорзиныВХранилище);
	
	Если СохраненнаяКорзина <> Неопределено Тогда
		Корзина.Загрузить(СохраненнаяКорзина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	УправлениеСпискомФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ФормаТоварыЗавершениеВопросаДобавлениеТоваров(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "ВвестиНакладную" Тогда
		СоздатьНакладную();
	ИначеЕсли Ответ = "ЗагрузитьИзExcel" Тогда
		ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
			"Обработка.ЗагрузкаНоменклатурыИзФайла.Форма", УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладную()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыПоступлениеТоваровУслугТовары");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНоменклатуре(Знач Номенклатура, Знач ТипЦен, Знач Склад, Знач ПоказыватьОстатки)
	
	Если Не ПоказыватьОстатки Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.ТипЦен КАК ТипЦен,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ТипЦен = &ТипЦен
		|				И Номенклатура = &Номенклатура
		|				И Валюта = &ВалютаРегламентированногоУчета
		|				И &ЦеныДоступны) КАК ЦеныНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТоварОстаток,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL
		|				ТОГДА ЦеныНоменклатурыДокументов.Цена
		|			ИНАЧЕ ЦеныНоменклатуры.Цена
		|		КОНЕЦ, 0) КАК ТоварЦена,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС ЕСТЬ NULL
		|				ТОГДА ЦеныНоменклатурыДокументов.ЦенаВключаетНДС
		|			ИНАЧЕ ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС
		|		КОНЕЦ, ИСТИНА) КАК ТоварЦенаВключаетНДС,
		|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|		ПО (ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам))
		|			И (ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура)
		|			И (&ЦеныДоступны)
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СчетаЗапасов
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В (&СчетаИсключения)
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНаСкладе.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ОстаткиНаСкладе
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВТ_СчетаЗапасов.Ссылка
		|				ИЗ
		|					ВТ_СчетаЗапасов),
		|			&ВидыСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1 = &Номенклатура) КАК ОстаткиНаСкладе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.ТипЦен КАК ТипЦен,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ТипЦен = &ТипЦен
		|				И Номенклатура = &Номенклатура
		|				И Валюта = &ВалютаРегламентированногоУчета
		|				И &ЦеныДоступны) КАК ЦеныНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК ТоварОстаток,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL
		|				ТОГДА ЦеныНоменклатурыДокументов.Цена
		|			ИНАЧЕ ЦеныНоменклатуры.Цена
		|		КОНЕЦ, 0) КАК ТоварЦена,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС ЕСТЬ NULL
		|				ТОГДА ЦеныНоменклатурыДокументов.ЦенаВключаетНДС
		|			ИНАЧЕ ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС
		|		КОНЕЦ, ИСТИНА) КАК ТоварЦенаВключаетНДС,
		|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|		ПО (ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам))
		|			И (ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура)
		|			И (&ЦеныДоступны)
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура";
		
	КонецЕсли;
	
	ЦеныДоступны = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Если ПоказыватьОстатки И ЗначениеЗаполнено(Склад) Тогда
	
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
		ТекущееУсловиеХозрасчетный = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Источники[0].Источник.Параметры[3];
		ТекущееУсловиеХозрасчетный.Выражение = Новый ВыражениеСхемыЗапроса(Строка(ТекущееУсловиеХозрасчетный.Выражение)
			+ " И Субконто2 = &Склад");
		
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();  
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Номенклатура",                   Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",                         ТипЦен);
	Запрос.УстановитьПараметр("ЦеныДоступны",                   ЦеныДоступны);
	Запрос.УстановитьПараметр("ВидыСубконто",                   ВидыСубконто);
	
	СчетаИсключения = Новый Массив;
	
	СчетаГТД = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ГТД);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключения, СчетаГТД);
	
	СчетаМатериальныеЦенностиВЭксплуатации =
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключения, СчетаМатериальныеЦенностиВЭксплуатации);

	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса);
	Результат.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.СтавкаНДС(
		Результат.ВидСтавкиНДС, ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвойстваТекущегоТовара()
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТоварНаименование         = "";
		ТоварОстатокПредставление = "";
		ТоварЦенаПредставление    = "";
		
	Иначе
		
		Если ТекущиеДанные.ЭтоГруппа Тогда
		
			ТоварНаименование         = ТекущиеДанные.Наименование;
			ТоварОстатокПредставление = "";
			ТоварЦенаПредставление    = "";
		
		Иначе
		
			СведенияОНоменклатуре = СведенияОНоменклатуре(ТекущиеДанные.Ссылка, ТипЦен, Склад, ПоказыватьОстатки);
			
			ТоварНаименование    = ТекущиеДанные.Наименование;
			ТоварОстаток         = СведенияОНоменклатуре.ТоварОстаток;
			ТоварЦена            = СведенияОНоменклатуре.ТоварЦена;
			ТоварЦенаВключаетНДС = СведенияОНоменклатуре.ТоварЦенаВключаетНДС;
			СтавкаНДС            = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЗначениеЗаполнено(СтавкаНДС)
				И ТоварЦенаВключаетНДС <> СуммаВключаетНДС Тогда
				ТоварЦена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					ТоварЦена,
					ТоварЦенаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			КонецЕсли;
			
			ТоварОстатокПредставление = ?(ТекущиеДанные.Услуга, "", Строка(ТоварОстаток) + " " + ТекущиеДанные.ЕдиницаИзмерения);
			ТоварЦенаПредставление    = ?(ТоварЦена = 0, "", Формат(ТоварЦена, "ЧДЦ=2") + " " + ВалютаРегламентированногоУчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаВключаетНДС(ТипЦен)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьЦеныВКорзине()
	
	ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
		Корзина.Выгрузить().ВыгрузитьКолонку("Номенклатура"),
		ТипЦен,
		КонецДня(ТекущаяДатаСеанса()));
		
	Для каждого СтрокаКорзины Из Корзина Цикл
		
		МассивНайденныхСтрок = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКорзины.Номенклатура));
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			СтрокаКорзины.Цена = 0;
			СтрокаКорзины.Сумма = 0;
			
		Иначе
			
			СтрокаТаблицыЦен = МассивНайденныхСтрок[0];
			
			ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыЦен.Номенклатура, "ВидСтавкиНДС");
			СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ОбщегоНазначения.ТекущаяДатаПользователя());
			
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицыЦен.Цена,
				СтрокаТаблицыЦен.ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаКорзины.Цена = Цена;
			СтрокаКорзины.Сумма = СтрокаКорзины.Количество * Цена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияКорзины(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ЗагрузитьКорзинуИзХранилища(РезультатЗакрытия.АдресКорзиныВХранилище);
		
		Если РезультатЗакрытия.Свойство("Действие") Тогда
		
			Если РезультатЗакрытия.Действие = "СоздатьСчетПокупателю" Тогда
			
				СозданиеСчетаПокупателю();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьАктРеализация" Тогда
			
				СозданиеАктаРеализация();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьНакладнуюРеализация" Тогда
			
				СозданияНакладнойРеализация();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьЧек" Тогда
			
				СозданиеЧека();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьКоммерческоеПредложение" Тогда
			
				СозданиеКоммерческогоПредложения();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеСчетаПокупателю()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента();
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданияНакладнойРеализация()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеАктаРеализация()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЧека()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента();
	СтруктураПараметров.ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
	ОткрытьФорму("Документ.РозничнаяПродажа.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
	Корзина.Очистить();
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКоммерческогоПредложения()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента();
	ОткрытьФорму("Документ.КоммерческоеПредложение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
	Корзина.Очистить();
	
	УправлениеСпискомФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УбратьГруппы(Знач МассивЭлементов)
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из МассивЭлементов Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбновленияБаннера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьБаннеры_РозничнаяТорговля");
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаРаботаСКассовойСменой()
	
	// Возможен сценарий, когда пользователь работает с документом Розничная продажа (чек),
	// но не имеет прав для работы с кассовой сменой. В этом случае пользователь должен видеть
	// возможные проблемные ситуации, связанные с состоянием кассовой смены (смена закрыта, смена просрочена).
	// Элементы формы, связанные с управлением кассовой сменой, остаются видимыми, независимо от прав доступа,
	// на случай описанного сценария.
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Недостаточно прав для выполнения операции'"));
	КонецЕсли;
	Возврат УправлениеКассовойСменойДоступно;
	
КонецФункции

&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Доступность = Истина;
	
	Если РезультатВыполнения <> Неопределено И Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СобытияДляОповещения") Тогда
		Для Каждого Событие Из ДополнительныеПараметры.СобытияДляОповещения Цикл
			Если Событие.Значение = Истина Тогда
				Оповестить(Событие.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьПодсказокНаСервере()
	
	УправлениеПанельюПодсказки.ИзменитьВидимостьПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОперацииПодменюОтчеты()
	
	ЕстьПравоОтчетКалькуляцияСебестоимости = ПравоДоступа("Использование", Метаданные.Отчеты.СправкаРасчетКалькуляцияСебестоимости);
	ЕстьПравоОтчетОборотныеСредства = ПравоДоступа("Использование", Метаданные.Отчеты.ОборотныеСредства);
	ЕстьПравоОтчетДоходыИРасходы = ПравоДоступа("Использование", Метаданные.Отчеты.ДоходыРасходы);
	ЕстьПравоОтчетСравнениеПродаж = ПравоДоступа("Использование", Метаданные.Отчеты.СравнениеПродаж);
	ЕстьПравоОтчетОстаткиТоваровПоСрокамХранения = ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиТоваровПоСрокамХранения);
	ЕстьПравоОтчетОборачиваемостьТоваров = ПравоДоступа("Использование", Метаданные.Отчеты.ОборачиваемостьТоваров);
	ЕстьПравоОтчетДвижениеТоваров = ПравоДоступа("Использование", Метаданные.Отчеты.ДвижениеТоваров);
	ЕстьПравоОтчетПродажи = ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
	ЕстьПравоОтчетАнализПродаж = ПравоДоступа("Использование", Метаданные.Отчеты.ВаловаяПрибыль);
	
	Элементы.ОтчетАнализПродаж.Видимость = ЕстьПравоОтчетАнализПродаж;
	Элементы.ОтчетКалькуляцияСебестоимости.Видимость = ЕстьПравоОтчетКалькуляцияСебестоимости;
	Элементы.ОтчетОборотныеСредства.Видимость = ЕстьПравоОтчетОборотныеСредства;
	Элементы.ОтчетДоходыИРасходы.Видимость = ЕстьПравоОтчетДоходыИРасходы;
	Элементы.ОтчетСравнениеПродажПоНоменклатуре.Видимость = ЕстьПравоОтчетСравнениеПродаж;
	Элементы.ОтчетОстаткиТоваровПоСрокамХранения.Видимость = ЕстьПравоОтчетОстаткиТоваровПоСрокамХранения;
	Элементы.ОтчетОборачиваемостьТоваров.Видимость = ЕстьПравоОтчетОборачиваемостьТоваров;
	Элементы.ОтчетДвижениеТоваров.Видимость = ЕстьПравоОтчетДвижениеТоваров;
	Элементы.ОтчетПродажиПродажиПоНоменклатуре.Видимость = ЕстьПравоОтчетПродажи;
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ОрганизацияПоУмолчанию());
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияТовары());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияПоУмолчанию()
	
	// Форма используется только в простом интерфейсе, а в нем всегда одна организация.
	// Поэтому передадим в отбор организацию по умолчанию.
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено,ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоЧтенияРозничныхПродаж()
	Возврат ПравоДоступа("Чтение", Метаданные.Документы.РозничнаяПродажа);
КонецФункции

&НаСервере
Процедура НастроитьБаннерКассаНеПодключена()
	
	НастройкиБаннера = ЖурналыДокументов.РозничныеПродажи.НастройкиБаннераКассаНеПодключена();
	Элементы.НадписьКассаНеПодключена.Заголовок = НастройкиБаннера.ЗаголовокБаннера;
	Элементы.ОткрытьПодключаемоеОборудование.Видимость = НастройкиБаннера.ПодключениеКассыДоступно;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти





