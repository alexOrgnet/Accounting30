#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторКопируемойСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактированиеНастроек = Справочники.НастройкиУчетаЗатрат.ПрименитьПараметрыФормыНастроек(ЭтотОбъект, Счет);
	
	УстановитьРольСчета(РедактированиеНастроек);
	
	НастроитьСписокВыбораБазаРаспределения(
		Элементы.ОсновнаяБазаРаспределения.СписокВыбора,
		РольСчета,
		РедактированиеНастроек.Настройки,
		Истина);
	НастроитьСписокВыбораБазаРаспределения(
		Элементы.ИндивидуальнаяБазаРаспределения.СписокВыбора,
		РольСчета,
		РедактированиеНастроек.Настройки,
		Ложь);
	
	ЗаполнитьСодержимоеФормы(РедактированиеНастроек);
	
	НастроитьПодсказкиВвода();
	НастроитьУсловноеОформлениеМодификаторТребуетНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(БазаРаспределения) Тогда
	
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.Распределение.Реквизиты.БазаРаспределения.Синоним);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "БазаРаспределения", , Отказ);
		
	ИначеЕсли МодификаторОсновногоПравилаТребуетНастройки Тогда
		
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Корректность",
				Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.Распределение.Реквизиты.БазаРаспределения.Синоним,
				,
				,
				НСтр("ru = 'Настройка базы распределения не завершена'"));
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПредставлениеМодификатораОсновногоПравила", , Отказ);
		
	КонецЕсли;
		
	Для Каждого Запись Из Настройки.Распределение Цикл
	
		ИндексСтроки = Настройки.Распределение.Индекс(Запись);
		НомерСтроки  = ИндексСтроки + 1;
		
		Если Не ЗначениеЗаполнено(Запись.БазаРаспределения) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.Распределение.Реквизиты.БазаРаспределения.Синоним,
				НомерСтроки,
				Элементы.ПравилаДляОтдельныхЗатрат.Заголовок);
				
			ПолеСообщения = СтрШаблон("Настройки.Распределение[%1].БазаРаспределения", XMLСтрока(ИндексСтроки));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеСообщения, , Отказ);
			
		ИначеЕсли Запись.МодификаторТребуетНастройки Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Корректность",
				Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.Распределение.Реквизиты.БазаРаспределения.Синоним,
				НомерСтроки,
				Элементы.ПравилаДляОтдельныхЗатрат.Заголовок,
				НСтр("ru = 'Настройка базы распределения не завершена'"));
				
			ПолеСообщения = СтрШаблон("Настройки.Распределение[%1].ПредставлениеМодификатора", XMLСтрока(ИндексСтроки));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеСообщения, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаборПравилПриИзменении(Элемент)
	
	НастроитьПоВыбранномуНаборуПравил();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяБазаРаспределенияПриИзменении(Элемент)
	
	ПоляРедактирования = ОбновитьРедактированиеОбщаяБазаРаспределения(
		БазаРаспределения,
		РольСчета,
		АдресМодификаторыПравилРаспределения);
		
	ПредставлениеМодификатораОсновногоПравила   = ПоляРедактирования.Модификатор.ПредставлениеМодификатора;
	МодификаторОсновногоПравилаТребуетНастройки = ПоляРедактирования.Модификатор.МодификаторТребуетНастройки;
	
	Элементы.ОсновноеПравилоРаспределения.РасширеннаяПодсказка.Заголовок = ПоляРедактирования.Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяБазаРаспределенияМодификаторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияМодификатора(ИдентификаторСтрокиОсновнойБазы(), Организация, БазаРаспределения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаДляОтдельныхЗатратЗаписи

&НаКлиенте
Процедура ИндивидуальнаяБазаРаспределенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаДляОтдельныхЗатратЗаписи.ТекущиеДанные;
	
	ПоляРедактирования = ОбновитьРедактированиеМодификатора(
		ТекущиеДанные.БазаРаспределения,
		ТекущиеДанные.ПолучитьИдентификатор(),
		РольСчета,
		АдресМодификаторыПравилРаспределения);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПоляРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратЗаписиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ИдентификаторКопируемойСтроки = Элементы.ПравилаДляОтдельныхЗатратЗаписи.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратЗаписиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование И ИдентификаторКопируемойСтроки <> Неопределено Тогда
		ТекущаяСтрока = Элементы.ПравилаДляОтдельныхЗатратЗаписи.ТекущаяСтрока;
		СкопироватьМодификатор(АдресМодификаторыПравилРаспределения, РольСчета, ИдентификаторКопируемойСтроки, ТекущаяСтрока);
	КонецЕсли;
	
	ИдентификаторКопируемойСтроки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратЗаписиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокОсобыеПравилаРаспределения_Подключаемый", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратЗаписиПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокОсобыеПравилаРаспределения_Подключаемый", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ИндивидуальнаяБазаРаспределенияМодификатор Тогда
		
		СтандартнаяОбработка = Ложь;
		ПравилаДляОтдельныхЗатратРедактироватьМодификатор(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаOK(Команда)
	
	РезультатФормы = Неопределено;
	
	Если ПроверитьЗаполнение() Тогда
		
		Если Модифицированность Тогда
			РезультатФормы = УстановитьВыполненныеНастройки();
		КонецЕсли;
		
		Закрыть(РезультатФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СкопироватьМодификатор(АдресМодификаторы, РольСчета, КопируемаяСтрока, ДобавляемаяСтрока)
	
	Редактирование = ПолучитьИзВременногоХранилища(АдресМодификаторы);
	
	РедактированиеКопируемойСтроки = Редактирование[КопируемаяСтрока];
	
	Если РедактированиеКопируемойСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРедактированиеМодификатора(
		РедактированиеКопируемойСтроки.БазаРаспределения,
		ДобавляемаяСтрока,
		РольСчета,
		АдресМодификаторы);
		
	РедактированиеДобавляемойСтроки = Редактирование[ДобавляемаяСтрока];
	
	РедактированиеДобавляемойСтроки.Модификатор = ОбщегоНазначения.СкопироватьРекурсивно(РедактированиеКопируемойСтроки.Модификатор);
	
	ПоместитьВоВременноеХранилище(Редактирование, АдресМодификаторы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРольСчета(РедактированиеНастроек)

	ЗакрытиеСчета = РедактированиеНастроек.Настройки.Закрытие[Счет];
	Если ЗакрытиеСчета <> Неопределено Тогда
		РольСчета = ЗакрытиеСчета.Роль;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПодсказкиВвода()

	ПредставленияПолейОтбора = Новый Структура;
	// Ключ - имя свойства в Настройки.Распределение. Должно быть поле с таким же именем
	ПредставленияПолейОтбора.Вставить("Подразделение", НСтр("ru = 'Все подразделения'"));
	ПредставленияПолейОтбора.Вставить("СтатьяЗатрат",  НСтр("ru = 'Все статьи затрат'"));
	
	Для Каждого ОписаниеПоля Из ПредставленияПолейОтбора Цикл
		
		// - в режиме выбора
		
		Элементы[ОписаниеПоля.Ключ].ПодсказкаВвода = ОписаниеПоля.Значение;
		
		// - вне режима выбора
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОписаниеПоля.Ключ);
		
		ПутьПоля = СтрШаблон("Настройки.Распределение.%1", ОписаниеПоля.Ключ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			ПутьПоля,
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",      ОписаниеПоля.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформлениеМодификаторТребуетНастройки()
	
	НастраиваемыеПоля = Новый Соответствие; // Ключ - путь к реквизиту; Значение - настраиваемое поле
	НастраиваемыеПоля.Вставить(
		"МодификаторОсновногоПравилаТребуетНастройки",
		Элементы.ОсновнаяБазаРаспределенияМодификатор);
	НастраиваемыеПоля.Вставить(
		"Настройки.Распределение.МодификаторТребуетНастройки",
		Элементы.ИндивидуальнаяБазаРаспределенияМодификатор);
		
	Для Каждого ОписаниеПоля Из НастраиваемыеПоля Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОписаниеПоля.Значение.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			ОписаниеПоля.Ключ,
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораБазаРаспределения(СписокВыбора, РольСчета, Настройки, ОсновнаяНастройка = Истина)
	
	РазрешенаГибкаяНастройкаБазы = Ложь;
	РасширеннаяАналитикаЗатрат.УстановитьГибкаяНастройкаПравилРаспределения(РазрешенаГибкаяНастройкаБазы);
	
	СписокВыбора.Очистить();
	
	// См. также БазаРаспределенияПрименяется
	
	Ограничение = Новый Массив;
	Если РольСчета = Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Ограничение = Перечисления.БазыРаспределенияКосвенныхРасходов.ОграничениеРаспределенияЗатратНаРемонтОС();
	ИначеЕсли РольСчета <> Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		Ограничение = Перечисления.БазыРаспределенияКосвенныхРасходов.ТолькоРаспределениеСчетаКосвенныеРасходы();
	ИначеЕсли Не РазрешенаГибкаяНастройкаБазы Тогда
		Ограничение.Добавить(Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнаяНастройка", ОсновнаяНастройка);
	Запрос.УстановитьПараметр("Ограничение",       Ограничение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БазыРаспределения.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(БазыРаспределения.Ссылка) КАК Представление,
	|	БазыРаспределения.Порядок КАК Порядок
	|ИЗ
	|	Перечисление.БазыРаспределенияКосвенныхРасходов КАК БазыРаспределения
	|ГДЕ
	|	НЕ БазыРаспределения.Ссылка В (&Ограничение)
	|	И НЕ(&ОсновнаяНастройка
	|				И БазыРаспределения.Ссылка = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Справочники.НастройкиУчетаЗатрат.БазаРаспределенияПрименяется(Выборка.Ссылка, Настройки) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БазаРаспределенияПрименяется(БазаРаспределения, РольСчета, Настройки, ОсновнаяНастройка = Истина)
	
	// См. также НастроитьСписокВыбораБазаРаспределения
	
	Если ОсновнаяНастройка И БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РольСчета = Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Ограничение = Перечисления.БазыРаспределенияКосвенныхРасходов.ОграничениеРаспределенияЗатратНаРемонтОС();
		Если Ограничение.Найти(БазаРаспределения) <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли РольСчета <> Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		Ограничение = Перечисления.БазыРаспределенияКосвенныхРасходов.ТолькоРаспределениеСчетаКосвенныеРасходы();
		Если Ограничение.Найти(БазаРаспределения) <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Справочники.НастройкиУчетаЗатрат.БазаРаспределенияПрименяется(БазаРаспределения, Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержимоеФормы(РедактированиеНастроек)
	
	// Контекст
	
	ИспользоватьФилиалы = Справочники.Организации.ЕстьОбособленныеПодразделения(Организация);
	Элементы.Филиал.Видимость = ИспользоватьФилиалы;
	
	ВыпускПродукции = РедактированиеНастроек.Настройки.ВыпускПродукции;
	
	Если ИспользоватьФилиалы Тогда
		ИсточникПодразделений = "Элементы.ПравилаДляОтдельныхЗатратЗаписи.ТекущиеДанные.Филиал";
	Иначе
		ИсточникПодразделений = "Организация";
	КонецЕсли;
	
	ОтборВладелец         = Новый СвязьПараметраВыбора("Отбор.Владелец", ИсточникПодразделений);
	СвязиПараметровВыбора = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборВладелец));
	
	Элементы.Подразделение.СвязиПараметровВыбора = СвязиПараметровВыбора;
	
	// Подсказка счета
	
	ЗакрытиеСчета = РедактированиеНастроек.Настройки.Закрытие[Счет];
	
	ШаблонТекста = "";
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		
		Приемники = Справочники.НастройкиУчетаЗатрат.ПриемникиРаспределения(ЗакрытиеСчета, РедактированиеНастроек.Настройки);
		
		ПредставлениеПорядкаРаспределения = Справочники.НастройкиУчетаЗатрат.ПредставлениеПорядкаРаспределения(
			Приемники,
			РедактированиеНастроек.Настройки);
		
		ШаблонТекста = СтрШаблон(НСтр(
			"ru = 'Затраты, учтенные на счете [Счет], распределяются %1 пропорционально выбранному показателю (базе распределения).'"),
			ПредставлениеПорядкаРаспределения);
		
	Иначе
		
		АналитикаСчета = РедактированиеНастроек.Настройки.Аналитика[Счет];
		Если АналитикаСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) <> Неопределено Тогда
			// Обратим внимание, что кроме прямых, на счете могут быть и косвенные затраты
			Если РедактированиеНастроек.Настройки.ВыпускПродукции Тогда
				ШаблонТекста = НСтр(
					"ru = 'На счете [Счет] могут быть учтены прямые и косвенные затраты.
			         |Прямые учитываются с детализацией до наименований продукции (услуг), косвенные - без их указания.
			         |Косвенные затраты распределяются между наименованиями продукции (услуг) пропорционально выбранному показателю (базе распределения).'");
			Иначе
				ШаблонТекста = НСтр(
					"ru = 'На счете [Счет] могут быть учтены прямые и косвенные затраты.
			         |Прямые учитываются с детализацией до наименований услуг, косвенные - без их указания.
			         |Косвенные затраты распределяются между наименованиями услуг пропорционально выбранному показателю (базе распределения).'");
			КонецЕсли;
		Иначе
			// Обратим внимание, что речь идет именно о выпуске
			Если РедактированиеНастроек.Настройки.ВыпускПродукции Тогда
				ШаблонТекста = НСтр(
					"ru = 'Затраты, учтенные на счете [Счет], распределяются между наименованиями выпущенной продукции (оказанных услуг) пропорционально выбранному показателю (базе распределения).'");
			Иначе
				ШаблонТекста = НСтр(
					"ru = 'Затраты, учтенные на счете [Счет], распределяются между наименованиями оказанных услуг пропорционально выбранному показателю (базе распределения).'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(Счет));
	
	Элементы.НастройкиСчета.РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонТекста,
		ПараметрыТекста);
		
	// Собственно правила распределения
	
	АдресМодификаторыПравилРаспределения = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
	СчетОсновногоНабора = Справочники.НастройкиУчетаЗатрат.СчетОсновногоНабораПравилРаспределения(РедактированиеНастроек.Настройки);
	ОсновнойНаборПравилРаспределения = НовыйОсновнойНаборПравилРаспределения(
		СчетОсновногоНабора,
		РедактированиеНастроек.Настройки.Распределение);
	АдресОсновнойНаборПравилРаспределения = ПоместитьВоВременноеХранилище(ОсновнойНаборПравилРаспределения, УникальныйИдентификатор);
	
	Распределение = ЗакрытиеСчета.Распределение;
	
	Если Счет = ОсновнойНаборПравилРаспределения.Счет Тогда
		НаборПравил = "Основной";
	ИначеЕсли Не ЗначениеЗаполнено(Распределение) Тогда
		НаборПравил = "Наследуемый";
	Иначе
		НаборПравил = "Уникальный";
	КонецЕсли;
	
	НастроитьПоНаборуПравил(РедактированиеНастроек, ОсновнойНаборПравилРаспределения.Счет);
	
	Элементы.ПравилаДляОтдельныхЗатрат.Видимость = (ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты);
	
	ЭлементыКлючаСохраненияОкна = Новый Массив;
	ЭлементыКлючаСохраненияОкна.Добавить(НаборПравил);
	ЭлементыКлючаСохраненияОкна.Добавить(XMLСтрока(БазаРаспределения));
	ЭлементыКлючаСохраненияОкна.Добавить(XMLСтрока(ЗначениеЗаполнено(Настройки.Распределение)));
	ЭлементыКлючаСохраненияОкна.Добавить(XMLСтрока(ЗакрытиеСчета.Роль));
	
	КлючСохраненияПоложенияОкна = СтрСоединить(ЭлементыКлючаСохраненияОкна, ";");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйОсновнойНаборПравилРаспределения(Счет, Распределение)
	
	ОписаниеНабора = Новый Структура;
	
	ОписаниеНабора.Вставить("Счет",          Счет);
	ОписаниеНабора.Вставить("Распределение", Распределение);
	
	Возврат ОписаниеНабора;
	
КонецФункции

&НаСервере
Процедура НастроитьПоНаборуПравил(РедактированиеНастроек, СчетОсновногоНабораПравил)
	
	Если НаборПравил <> "Основной" Тогда
		
		Элементы.ОсновнаяБазаРаспределения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ПредставлениеИсточникаНастроек = ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(СчетОсновногоНабораПравил);
		
		ВариантНаследуемый = Элементы.НаборПравил.СписокВыбора.НайтиПоЗначению("Наследуемый");
		ВариантНаследуемый.Представление = СтрШаблон(НСтр("ru = 'Как для счета %1'"), ПредставлениеИсточникаНастроек);
		
	КонецЕсли;
	
	НастроитьВидимостьПереключателяНабораПравил();
			
	НастроитьПоВыбранномуНаборуПравил(РедактированиеНастроек);
	
	Если ЗначениеЗаполнено(Настройки.Распределение) Тогда
		Элементы.ПравилаДляОтдельныхЗатрат.Показать();
	КонецЕсли;
	
	НастроитьОтображениеПравилаДляОтдельныхЗатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПереключателяНабораПравил()
	
	Если НаборПравил = "Основной" Тогда
		Элементы.НаборПравил.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РольСчета <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойНаборПравилРаспределения = ПолучитьИзВременногоХранилища(АдресОсновнойНаборПравилРаспределения);
	ОсновнаяНастройка =
		Справочники.НастройкиУчетаЗатрат.ОсновнаяНастройкаРаспределенияСчета(ОсновнойНаборПравилРаспределения.Распределение);
		
	Если ОсновнаяНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяБаза = ОсновнаяНастройка.БазаРаспределения;
	Если Не БазаРаспределенияПрименяется(ОсновнаяБаза, Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки) Тогда
		Элементы.НаборПравил.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоВыбранномуНаборуПравил(Знач РедактированиеНастроек = Неопределено)
	
	РедактированиеПравилРаспределения = (НаборПравил <> "Наследуемый");
	// Поле ввода в режиме ТолькоПросмотр выглядит неудачно - как текст в рамке.
	// Поэтому для полей ввода оперируем доступностью.
	Для Каждого Элемент Из Элементы.ПравилаРаспределения.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Элемент.Доступность = РедактированиеПравилРаспределения;
		Иначе
			Элемент.ТолькоПросмотр = Не РедактированиеПравилРаспределения;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборПравил <> "Уникальный" Тогда
		ОсновнойНаборПравилРаспределения = ПолучитьИзВременногоХранилища(АдресОсновнойНаборПравилРаспределения);
		Распределение = ОсновнойНаборПравилРаспределения.Распределение;
	ИначеЕсли РедактированиеНастроек <> Неопределено Тогда
		Распределение = РедактированиеНастроек.Настройки.Закрытие[Счет].Распределение;
	Иначе
		// Уже заполнено, повторно заполнять не следует
		Возврат;
	КонецЕсли;
	
	// Основная настройка может храниться в таблице (первой)
	ОсновнаяНастройка = Справочники.НастройкиУчетаЗатрат.ОсновнаяНастройкаРаспределенияСчета(Распределение);
	Если ОсновнаяНастройка = Неопределено Тогда
		БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию();
	Иначе
		БазаРаспределения = ОсновнаяНастройка.БазаРаспределения;
		Если РедактированиеНастроек <> Неопределено 
			И Не БазаРаспределенияПрименяется(БазаРаспределения, РольСчета, РедактированиеНастроек.Настройки, Истина) Тогда
			БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию();
		КонецЕсли;
	КонецЕсли;

	МодификаторыПравилРаспределения = ПолучитьИзВременногоХранилища(АдресМодификаторыПравилРаспределения);
	
	Настройки.Распределение.Очистить();
	
	Для Каждого Запись Из Распределение Цикл
		
		Если Запись = ОсновнаяНастройка Тогда
			
			РедактированиеМодификатора = Справочники.НастройкиУчетаЗатрат.РедактированиеМодификатораБазыРаспределения(
				БазаРаспределения, РольСчета, Запись.Модификатор, Истина);
				
			ПредставлениеМодификатораОсновногоПравила   = РедактированиеМодификатора.Представление;
			МодификаторОсновногоПравилаТребуетНастройки = РедактированиеМодификатора.ТребуетНастройки;
			
			МодификаторыПравилРаспределения.Вставить(ИдентификаторСтрокиОсновнойБазы(), РедактированиеМодификатора);
			
		Иначе // Запись индивидуальной настройки
			
			ОтображаемаяЗапись = Настройки.Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(ОтображаемаяЗапись, Запись);
			
			РедактированиеМодификатора = Справочники.НастройкиУчетаЗатрат.РедактированиеМодификатораБазыРаспределения(
				ОтображаемаяЗапись.БазаРаспределения, РольСчета, Запись.Модификатор);
			
			ОтображаемаяЗапись.ПредставлениеМодификатора   = РедактированиеМодификатора.Представление;
			ОтображаемаяЗапись.МодификаторТребуетНастройки = РедактированиеМодификатора.ТребуетНастройки;
			
			МодификаторыПравилРаспределения.Вставить(ОтображаемаяЗапись.ПолучитьИдентификатор(), РедактированиеМодификатора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МодификаторыПравилРаспределения, АдресМодификаторыПравилРаспределения);
	
	УстановитьОписаниеБазыРаспределения(Элементы.ОсновноеПравилоРаспределения.РасширеннаяПодсказка.Заголовок, БазаРаспределения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьРедактированиеОбщаяБазаРаспределения(Знач БазаРаспределения, Знач РольСчета, Знач АдресМодификаторы)
	
	РедактированиеМодификатора = ОбновитьРедактированиеМодификатора(
		БазаРаспределения,
		ИдентификаторСтрокиОсновнойБазы(),
		РольСчета,
		АдресМодификаторы);
	
	ПоляРедактирования = Новый Структура;
	ПоляРедактирования.Вставить("Модификатор", РедактированиеМодификатора);
	ПоляРедактирования.Вставить("Описание",    "");
	
	УстановитьОписаниеБазыРаспределения(ПоляРедактирования.Описание, БазаРаспределения);
	
	Возврат ПоляРедактирования;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокОсобыеПравилаРаспределения_Подключаемый() Экспорт
	
	НастроитьОтображениеПравилаДляОтдельныхЗатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеПравилаДляОтдельныхЗатрат(Форма)
	
	Если ЗначениеЗаполнено(Форма.Настройки.Распределение) Тогда
		Состояние = НСтр("ru = 'установлены'");
	Иначе
		Состояние = НСтр("ru = 'не установлены'");
	КонецЕсли;
	
	Форма.Элементы.ПравилаДляОтдельныхЗатрат.ЗаголовокСвернутогоОтображения = СтрШаблон(
		НСтр("ru = 'Особые правила распределения %1'"),
		Состояние);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьРедактированиеМодификатора(Знач БазаРаспределения, Знач ИдентификаторСтроки, Знач РольСчета, Знач АдресМодификаторы)
	
	РедактированиеМодификаторов = ПолучитьИзВременногоХранилища(АдресМодификаторы);
	Редактирование = РедактированиеМодификаторов[ИдентификаторСтроки];
	
	Если Редактирование = Неопределено Или Редактирование.БазаРаспределения <> БазаРаспределения Тогда
		Редактирование = Справочники.НастройкиУчетаЗатрат.РедактированиеМодификатораБазыРаспределения(БазаРаспределения, РольСчета);
		РедактированиеМодификаторов.Вставить(ИдентификаторСтроки, Редактирование);
		ПоместитьВоВременноеХранилище(РедактированиеМодификаторов, АдресМодификаторы);
	КонецЕсли;
	
	ПоляРедактирования = Новый Структура;
	
	ПоляРедактирования.Вставить("ПредставлениеМодификатора",   Редактирование.Представление);
	ПоляРедактирования.Вставить("МодификаторТребуетНастройки", Редактирование.ТребуетНастройки);
	
	Возврат ПоляРедактирования;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОписаниеБазыРаспределения(Текст, БазаРаспределения)
	
	Текст = Перечисления.БазыРаспределенияКосвенныхРасходов.Пояснение(БазаРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаДляОтдельныхЗатратРедактироватьМодификатор(ИдентификаторСтроки)
	
	РедактируемаяСтрока = Настройки.Распределение.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ПустаяСтрока(РедактируемаяСтрока.ПредставлениеМодификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемаяСтрока.Свойство("Филиал") И ЗначениеЗаполнено(РедактируемаяСтрока.Филиал) Тогда
		ПараметрОрганизация = РедактируемаяСтрока.Филиал;
	Иначе
		ПараметрОрганизация = Организация;
	КонецЕсли;
	
	ОткрытьФормуРедактированияМодификатора(
		ИдентификаторСтроки,
		ПараметрОрганизация,
		РедактируемаяСтрока.БазаРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияМодификатора(ИдентификаторСтроки, ПараметрОрганизация, БазаРаспределения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                    ПараметрОрганизация);
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ТолькоПросмотр Или Не Элементы.ОсновнаяБазаРаспределения.Доступность);
	ПараметрыФормы.Вставить("АдресМодификаторы",              АдресМодификаторыПравилРаспределения);
	ПараметрыФормы.Вставить("АдресРедактированиеНастроек",    АдресРедактированиеНастроек);
	ПараметрыФормы.Вставить("РедактируемаяСтрока",            ИдентификаторСтроки);
	ПараметрыФормы.Вставить("Счет",                           Счет);
	ПараметрыФормы.Вставить("ВыпускПродукции",                ВыпускПродукции);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ОкончаниеРедактироватьМодификаторБазыРаспределения",
		ЭтотОбъект,
		ИдентификаторСтроки);
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Если БазаРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения") Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.НастройкиУчетаЗатрат.Форма.МодификаторБазыРаспределения",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкна);
		
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРедактироватьМодификаторБазыРаспределения(РезультатЗакрытия, ИдентификаторПравила) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторПравила = ИдентификаторСтрокиОсновнойБазы() Тогда
		
		ПредставлениеМодификатораОсновногоПравила   = РезультатЗакрытия.Представление;
		МодификаторОсновногоПравилаТребуетНастройки = РезультатЗакрытия.ТребуетНастройки;
		
	Иначе
		
		РедактируемаяСтрока = Настройки.Распределение.НайтиПоИдентификатору(ИдентификаторПравила);
		Если РедактируемаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РедактируемаяСтрока.ПредставлениеМодификатора   = РезультатЗакрытия.Представление;
		РедактируемаяСтрока.МодификаторТребуетНастройки = РезультатЗакрытия.ТребуетНастройки;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция УстановитьВыполненныеНастройки()
	
	РедактированиеНастроек = Справочники.НастройкиУчетаЗатрат.НачатьУстановкуВыполненныхНастроек(АдресРедактированиеНастроек);
	
	Если НаборПравил = "Основной" Тогда
		Распределение = РедактированиеНастроек.Настройки.Распределение;
	Иначе
		Распределение = РедактированиеНастроек.Настройки.Закрытие[Счет].Распределение;
	КонецЕсли;
	
	Распределение.Очистить();
	
	Если НаборПравил <> "Наследуемый" Тогда
		
		Модификаторы = ПолучитьИзВременногоХранилища(АдресМодификаторыПравилРаспределения);
		
		// Общее правило
		Запись = Распределение.Добавить();
		Запись.БазаРаспределения = БазаРаспределения;
		
		ДанныеМодификатора = Модификаторы[ИдентификаторСтрокиОсновнойБазы()];
		Если ДанныеМодификатора <> Неопределено Тогда
			Запись.Модификатор = ДанныеМодификатора.Модификатор;
		КонецЕсли;
		
		// Исключения
		Для Каждого РедактируемаяЗапись Из Настройки.Распределение Цикл
			
			Запись = Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, РедактируемаяЗапись);
			
			ДанныеМодификатора = Модификаторы[РедактируемаяЗапись.ПолучитьИдентификатор()];
			Если ДанныеМодификатора <> Неопределено Тогда
				Запись.Модификатор = ДанныеМодификатора.Модификатор;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Справочники.НастройкиУчетаЗатрат.ЗавершитьУстановкуВыполненныхНастроек(
		АдресРедактированиеНастроек,
		РедактированиеНастроек);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСтрокиОсновнойБазы()
	
	// См. также параметр РедактируемаяСтрока в форме МодификаторБазыРаспределения
	Возврат -1;
	
КонецФункции

#КонецОбласти
