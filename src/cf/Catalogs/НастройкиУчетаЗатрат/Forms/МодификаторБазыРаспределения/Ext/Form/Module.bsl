#Область ОписаниеПеременных

&НаКлиенте
Перем ПропуститьОбработчикПередЗакрытием;

&НаКлиенте
Перем НеСохранять;

&НаКлиенте
Перем ИдентификаторСтрокиБазы;

&НаКлиенте
Перем ФормаСхемыРаспределения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Параметр РедактируемаяСтрока
	// - положительный - идентификатор редактируемого элемента коллекции индивидуальных правил распределения
	// - отрицательный - для обозначения основного правила распределения, см. ИдентификаторСтрокиОсновнойБазы в форме РаспределениеЗатрат
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"Организация,
		|РедактируемаяСтрока,
		|АдресМодификаторы,
		|АдресРедактированиеНастроек,
		|Счет,
		|ВыпускПродукции");
	
	Редактирование = ПолучитьИзВременногоХранилища(АдресМодификаторы);
	
	РедактированиеСтроки = Редактирование[РедактируемаяСтрока];
	
	Если РедактированиеСтроки = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	БазаРаспределения = РедактированиеСтроки.БазаРаспределения;
	ПрочитатьЗначения(БазаРаспределения, РедактированиеСтроки.Модификатор);
	
	Заголовок = Строка(БазаРаспределения);
	ПрименитьФункциональныеОпции();
	НастроитьМодификатор();
	УправлениеФормой();
	УстановитьПодсказки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Или ПропуститьОбработчикПередЗакрытием = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	// Форма настройки собственной базы закрывается нажатием кнопки закрытия, а не кнопками "ОК" или "Отмена".
	Если БазаРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения") Тогда
		Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
		Возврат;
	КонецЕсли;
	
	ПропуститьОбработчикПередЗакрытием = Истина;
	Отказ = Истина;
	Закрыть(ОтправитьРезультатЗакрытия());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаБазыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдСтроки      = Элементы.ТаблицаБазы.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиБазы Тогда
	
		Для Каждого ДобавленнаяКолонка Из ДобавленныеКолонки Цикл
			ИзменитьПараметрыВыбораПоляАналитики(ТекущиеДанные, ДобавленнаяКолонка.Ключ);
		КонецЦикла;
		
		ИдентификаторСтрокиБазы = ИдСтроки;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавленнаяКолонка Из ДобавленныеКолонки Цикл
		ИзменитьПараметрыВыбораПоляАналитики(ТекущиеДанные, ДобавленнаяКолонка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеБазыРаспределенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", 						ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресНастройкаАналитики", 				АдресНастройкаАналитики);
	ПараметрыФормы.Вставить("НаименованиеБазы", 					НаименованиеБазы);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияПоказателя", 			ЕдиницаИзмеренияПоказателя);
	ПараметрыФормы.Вставить("УникальныйИдентификаторСчетаСтрокой",
		СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ВидАналитики_", ""));
	
	ПредметНастройки = "";
	Если НавигационнаяСсылкаФорматированнойСтроки = "Счет" Тогда
		ПредметНастройки = "Счет";
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ВидАналитики_") Тогда
		ПредметНастройки = "ВидАналитики";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НаименованиеБазы" Тогда
		ПредметНастройки = "Наименование";
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПредметНастройки", ПредметНастройки);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаЗавершение", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.НастройкиУчетаЗатрат.Форма.НастройкаБазыРаспределения", ПараметрыФормы, , , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ТаблицаБазы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЕдинственныйСчетУчета) Тогда
		ТекущиеДанные.Счет = ЕдинственныйСчетУчета;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьИтоги", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗначенияАналитики(Элемент)
	ТекущиеДанные = Элементы.ТаблицаБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПоляАналитики(ТекущиеДанные, Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСхемуРаспределения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Ложь);
	ПараметрыФормы.Вставить("АдресТаблицыКоэффициентов",       АдресТаблицаРаспределения(ТаблицаБазы, УникальныйИдентификатор));
	
	Если ПараметрыФормы.АдресТаблицыКоэффициентов = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'База распределения пустая. Отчет не может быть сформирован.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТаблицаБазы);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресНастройкаАналитики",    АдресНастройкаАналитики);
	ПараметрыФормы.Вставить("ВидыАналитики",              ДобавленныеКолонки);
	ПараметрыФормы.Вставить("Счет",                       Счет);
	ПараметрыФормы.Вставить("НаименованиеБазы",           НаименованиеБазы);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияПоказателя", ЕдиницаИзмеренияПоказателя);
	ФормаОтчета = ОткрытьФорму("Отчет.СхемаРаспределенияЗатрат.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
	Если ФормаОтчета = ФормаСхемыРаспределения Тогда
		Оповестить("ИзмениласьНастройкаРаспределения", ПараметрыФормы, ФормаОтчета);
	Иначе
		ФормаСхемыРаспределения = ФормаОтчета;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнструкцию(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://buh.ru/articles/documents/153983/");
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	ПропуститьОбработчикПередЗакрытием = Истина;
	РезультатЗакрытия = Неопределено;
	Если Модифицированность Тогда
		РезультатЗакрытия = ОтправитьРезультатЗакрытия();
	КонецЕсли;
	Закрыть(РезультатЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ПропуститьОбработчикПередЗакрытием = Истина;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьПараметрыВыбораПоляАналитики(ТекущиеДанные, ИмяКолонки)
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), "Подразделение");
	
	Для Каждого ТипДоговора Из БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы() Цикл
		ВидыПараметров.Вставить(ТипДоговора, "Договор");
	КонецЦикла;
	
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	
	ВидПараметраВыбора = ВидыПараметров[ТипЗнч(ТекущиеДанные[ИмяКолонки])];
	ПараметрВыбора = Неопределено;
	
	Если ВидПараметраВыбора = "Субконто" Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ДобавленныеКолонки[ИмяКолонки]);
	ИначеЕсли ВидПараметраВыбора = "Подразделение" Тогда
		ИмяРеквизитаОрганизация = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		ПараметрВыбора = Новый ПараметрВыбора("Отбор." + ИмяРеквизитаОрганизация, Организация);
	ИначеЕсли ВидПараметраВыбора = "Договор" Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", Организация);
	КонецЕсли;
	
	Если ПараметрВыбора <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы[ИмяКолонки].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		
		ОбновитьЭлементыФормы();
		ОбновитьИтогиНаСервере();
		
		// Кнопки "ОК" и "Отмена" используются только для "Собственной базы"
		Если ТолькоПросмотр Тогда
			Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресТаблицаРаспределения(Знач ТаблицаБазы, Знач УникальныйИдентификатор)
	
	БазаРаспределения = ТаблицаБазы.Выгрузить();
	
	Если БазаРаспределения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(БазаРаспределения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	
	ОбновитьЭлементыФормы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	НастройкаАналитикиБазы = ПолучитьИзВременногоХранилища(АдресНастройкаАналитики);
		
	ТаблицаСчетов = НастройкаАналитикиБазы.Скопировать();
	ТаблицаСчетов.Свернуть("Счет, СчетСтатус");
	
	СтрокиИспользуемыхСчетов = ТаблицаСчетов.НайтиСтроки(Новый Структура("СчетСтатус", 1));
	Элементы.ОписаниеБазыРаспределения.Заголовок = ТекстНастройкиБазыРаспределения(НастройкаАналитикиБазы);
	
	// Если счет учета единственный, столбец со счетом будет скрыт, заполнение счета будет происходить автоматически.
	// В случае нескольких счетов - ограничим список выбора используемыми счетами.
	ЕдинственныйСчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Если СтрокиИспользуемыхСчетов.Количество() > 1 Тогда
		
		МассивСчетовДляОтбора = Новый Массив;
		
		Для Каждого СтрокаСчета Из  СтрокиИспользуемыхСчетов Цикл
			МассивСчетовДляОтбора.Добавить(СтрокаСчета.Счет);
		КонецЦикла;
		
		Элементы.ТаблицаБазыСчетУчета.Видимость = Истина;
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетовДляОтбора));
		Элементы.ТаблицаБазыСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ТаблицаБазыСчетУчета.БыстрыйВыбор = Истина;
	ИначеЕсли СтрокиИспользуемыхСчетов.Количество() = 1 Тогда
		ЕдинственныйСчетУчета = СтрокиИспользуемыхСчетов[0].Счет;
		Для Каждого СтрокаБазы Из ТаблицаБазы Цикл
			СтрокаБазы.Счет = ЕдинственныйСчетУчета;
		КонецЦикла;
		Элементы.ТаблицаБазыСчетУчета.Видимость = Ложь;
	КонецЕсли;
	
	// Настроим видимость колонок, соответствующих настраиваемым видам аналитик,
	// и установим значения реквизитов, используемых в условном оформлении таблицы базы.
	// Для этого сначала приведем вспомогательную структуру, используемую для заполнения реквизитов, в состояние по умолчанию,
	// когда все значения равны нулю, а также скроем все добавленные колонки.
	Для каждого ЭлементСтруктуры Из ЗначенияСтатусов Цикл
		ЗначенияСтатусов[ЭлементСтруктуры.Ключ] = 0;
	КонецЦикла;
		
	Для Каждого ЭлементСтруктуры Из ДобавленныеКолонки Цикл
		Элементы[ЭлементСтруктуры.Ключ].Видимость = Ложь;
	КонецЦикла;
	
	// По данным настройки аналитики базы включим видимость колонок и использование аналитик в таблице базы.
	СтрокиИспользуемыеАналитики = НастройкаАналитикиБазы.НайтиСтроки(Новый Структура("СчетСтатус, ВидАналитикиСтатус", 1, 1));
	
	РазрезыРаспределения = ПолучитьИзВременногоХранилища(АдресРазрезыРаспределения);
	ИдентификаторыСчетовУчета = ПолучитьИзВременногоХранилища(АдресИдентификаторыСчетовУчета);
	
	Для Каждого СтрокаИспользуемаяАналитика Из СтрокиИспользуемыеАналитики Цикл
		
		ИмяРазрезаРаспределения = СтрокаИспользуемаяАналитика.ВидАналитики;
		
		Если ТипЗнч(СтрокаИспользуемаяАналитика.ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
			
			РазрезРаспределения = РазрезыРаспределения.Найти(СтрокаИспользуемаяАналитика.ВидАналитики, "Ключ");

			Если РазрезРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяРазрезаРаспределения = РазрезРаспределения.Имя;
		КонецЕсли;
		
		// Эти элементы ранее добавлены с помощью методов ДобавитьРеквизитыФормыСобственнаяБаза() и ДобавитьЭлементыФормыСобственнаяБаза()
		Элементы[ИмяРазрезаРаспределения].Видимость = Истина;

		ЗначенияСтатусов[ИмяСтатусаВидаАналитики(ИдентификаторыСчетовУчета, СтрокаИспользуемаяАналитика.Счет, ИмяРазрезаРаспределения)] = 1;

	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияСтатусов);

	Элементы.ТаблицаБазыКоэффициент.Заголовок =
		Справочники.НастройкиУчетаЗатрат.ПредставлениеСобственнойБазыРаспределения(НаименованиеБазы, ЕдиницаИзмеренияПоказателя);
		
КонецПроцедуры

&НаСервере
Функция ТекстНастройкиБазыРаспределения(НастройкаАналитикиБазы)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаАналитики", НастройкаАналитикиБазы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаАналитики.ВидАналитики КАК ВидАналитики,
	|	НастройкаАналитики.ВидАналитикиСтатус КАК ВидАналитикиСтатус,
	|	НастройкаАналитики.Счет КАК Счет
	|ПОМЕСТИТЬ НастройкаАналитики
	|ИЗ
	|	&НастройкаАналитики КАК НастройкаАналитики
	|ГДЕ
	|	НастройкаАналитики.СчетСтатус = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ХозрасчетныйВидыСубконто.НомерСтроки
	|	КОНЕЦ КАК ПорядокСубконто,
	|	НастройкаАналитики.ВидАналитики КАК ВидАналитики,
	|	ВЫРАЗИТЬ(НастройкаАналитики.Счет КАК ПланСчетов.Хозрасчетный).Код КАК КодСчета,
	|	НастройкаАналитики.Счет КАК Счет,
	|	НастройкаАналитики.ВидАналитикиСтатус КАК ВидАналитикиСтатус
	|ИЗ
	|	НастройкаАналитики КАК НастройкаАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО НастройкаАналитики.ВидАналитики = ХозрасчетныйВидыСубконто.ВидСубконто
	|			И (ХозрасчетныйВидыСубконто.Ссылка = НастройкаАналитики.Счет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫРАЗИТЬ(НастройкаАналитики.Счет КАК ПланСчетов.Хозрасчетный).Порядок,
	|	ПорядокСубконто
	|ИТОГИ
	|	МАКСИМУМ(КодСчета)
	|ПО
	|	Счет";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСчетов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КодРаспределяемогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Код");
	ПредставлениеБазы = Справочники.НастройкиУчетаЗатрат.ПредставлениеСобственнойБазыРаспределения(НаименованиеБазы, ЕдиницаИзмеренияПоказателя);

	НастройкаРаспределения = Новый Массив;
	СписокСчетов = Новый Массив;
	Пока ВыборкаСчетов.Следующий() Цикл
		
		ПорядокРаспределенияСчета = Новый Структура;
		ПорядокРаспределенияСчета.Вставить("Счет",         ВыборкаСчетов.Счет);
		ПорядокРаспределенияСчета.Вставить("КодСчета",     ВыборкаСчетов.КодСчета);
		ПорядокРаспределенияСчета.Вставить("ВидыАналитик", Новый Массив);
		
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
		
		Выборка = ВыборкаСчетов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидАналитикиСтатус <> 1 Тогда
				Продолжить;
			КонецЕсли;
			ПорядокРаспределенияСчета.ВидыАналитик.Добавить(Выборка.ВидАналитики);
		КонецЦикла;
		НастройкаРаспределения.Добавить(ПорядокРаспределенияСчета);
	КонецЦикла;
	
	ТекстыРаспределения = Новый Массив;
	
	// Единственный счет без аналитик
	Если НастройкаРаспределения.Количество() = 1 Тогда
		ДанныеРаспределения = НастройкаРаспределения[НастройкаРаспределения.ВГраница()];
		
		Если ДанныеРаспределения.ВидыАналитик.Количество() = 0 Тогда

			ШаблонТекста =
				НСтр("ru = 'Затраты счета %1 переносятся на <a href=""Счет"">счет %2</a> %3'");

			ДобавляемыйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				КодРаспределяемогоСчета,
				ДанныеРаспределения.КодСчета,
				ПредставлениеВидовАналитик(ДанныеРаспределения.ВидыАналитик, "Именительный", ДанныеРаспределения.Счет));
			
			ТекстыРаспределения.Добавить(ДобавляемыйТекст);

		Иначе
			// Единственный счет, аналитика распределения указана
			ШаблонТекста =
				НСтр("ru = 'Затраты счета %1 переносятся на <a href=""Счет"">счет %2</a> и распределяются между %3 
				|пропорционально <a href=""НаименованиеБазы"">%4</a> на основании данных, указанных в таблице ниже'");
			
			ДобавляемыйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				КодРаспределяемогоСчета,
				ДанныеРаспределения.КодСчета,
				ПредставлениеВидовАналитик(ДанныеРаспределения.ВидыАналитик, "Творительный", ДанныеРаспределения.Счет),
				НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(ПредставлениеБазы, 3)));
			ТекстыРаспределения.Добавить(ДобавляемыйТекст);
		КонецЕсли;
	ИначеЕсли НастройкаРаспределения.Количество() > 1 Тогда
		
		Шаблон = НСтр("ru = 'Затраты счета %1 распределяются на счета <a href=""Счет"">%2</a>:
		|%3.
		|Затраты распределяются пропорционально <a href=""НаименованиеБазы"">%4</a> на основании данных, указанных в таблице ниже'");
		
		ТекстыПоСчетам = Новый Массив;
		Для Каждого ДанныеРаспределения Из НастройкаРаспределения Цикл
			ШаблонСтроки = НСтр("ru = ' ● на счет %1 %2%3'");
			ТекстПоСчету = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				ДанныеРаспределения.КодСчета,
				?(ДанныеРаспределения.ВидыАналитик.Количество() > 0, НСтр("ru = 'по '"), ""),
				ПредставлениеВидовАналитик(ДанныеРаспределения.ВидыАналитик, "Дательный", ДанныеРаспределения.Счет));
			ТекстыПоСчетам.Добавить(ТекстПоСчету);
		КонецЦикла;
		
		ТекстыРаспределения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			КодРаспределяемогоСчета,
			ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(СписокСчетов),
			СтрСоединить(ТекстыПоСчетам, НСтр("ru = ';'") + Символы.ПС),
			НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(ПредставлениеБазы, 3))));
			
	КонецЕсли;

	Возврат СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(ТекстыРаспределения));
	
КонецФункции


&НаСервере
Процедура ПрочитатьЗначения(БазаРаспределения, Модификатор)
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Модификатор, "Счет,Подразделение");
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		СписокСтатейЗатрат = Модификатор.Ссылка;

	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Модификатор, "НаименованиеБазы, ЕдиницаИзмеренияПоказателя");
		Если Не ЗначениеЗаполнено(НаименованиеБазы) Тогда
			НаименованиеБазы = НСтр("ru = 'Коэффициенты'");
		КонецЕсли;

		ПоддерживаемыеСчета = Справочники.НастройкиУчетаЗатрат.СчетаРаспределенияЗатратСобственнойБазы();

		НастроитьМодификаторСобственнойБазыРаспределения(
			Модификатор.ТаблицаБазы, Модификатор.НастройкаАналитикиБазы, ПоддерживаемыеСчета);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьМодификаторСобственнойБазыРаспределения(ТаблицаБазыМодификатора, НастройкаАналитикиБазыМодификатора, ПоддерживаемыеСчета)

	ДобавленныеКолонки = Новый Структура;

	ЗначенияСтатусов = Новый Структура;
	
	// Описание статусов см. Справочник.НастройкиУчетаЗатрат.НастройкаАналитикиБазы()
	ТаблицаНастройкиАналитики = НастройкаАналитикиБазыМодификатора.СкопироватьКолонки();

	ДобавитьРеквизитыФормыСобственнаяБаза(ПоддерживаемыеСчета, ДобавленныеКолонки, ТаблицаНастройкиАналитики);

	ДобавитьЭлементыФормыСобственнаяБаза(ДобавленныеКолонки);

	ДобавитьУсловноеОформление(ПоддерживаемыеСчета, ДобавленныеКолонки);

	ТаблицаНастройкиАналитики.Индексы.Добавить("Счет");
	ТаблицаНастройкиАналитики.Индексы.Добавить("Счет, ВидАналитики");
	ТаблицаНастройкиАналитики.Индексы.Добавить("Счет, ВидАналитикиСтатус");
	ТаблицаНастройкиАналитики.Индексы.Добавить("СчетСтатус, ВидАналитикиСтатус");
	
	ПрочитатьАналитику(НастройкаАналитикиБазыМодификатора, ТаблицаНастройкиАналитики);
	ТаблицаБазы.Загрузить(ТаблицаБазыМодификатора);

	ЗаполнитьАналитикуПоУмолчанию(ТаблицаНастройкиАналитики);
	АдресНастройкаАналитики = ПоместитьВоВременноеХранилище(ТаблицаНастройкиАналитики, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыФормыСобственнаяБаза(ПоддерживаемыеСчета, ДобавленныеКолонки, ТаблицаАналитики)

	РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроек);
	Аналитика = РедактированиеНастроек.Настройки.ОтображаемаяАналитика;
	
	// Таблица аналитик, установленных в учетной политике как используемые.
	ИспользуемыеВУчетнойПолитикеАналитики = Новый ТаблицаЗначений();
	ИспользуемыеВУчетнойПолитикеАналитики.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ИспользуемыеВУчетнойПолитикеАналитики.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов(
		Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.РазрезыУчета.Реквизиты.ВидАналитики.Тип));
	
	Для Каждого АналитикаСчета Из Аналитика Цикл
		Для Каждого РазрезАналитики Из АналитикаСчета.Значение Цикл
			СтрокаАналитики = ИспользуемыеВУчетнойПолитикеАналитики.Добавить();
			СтрокаАналитики.Счет = АналитикаСчета.Ключ;
			СтрокаАналитики.ВидАналитики = РазрезАналитики;
		КонецЦикла;
	КонецЦикла;
	
	// Аналитику счетов, указанных в учетной политике, ограничиваем настроенной в ней аналитикой, а аналитику
	// остальных счетов, в частности, счета 91.02, получаем из плана счетов.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользуемыеВУчетнойПолитикеАналитики", ИспользуемыеВУчетнойПолитикеАналитики);
	Запрос.УстановитьПараметр("ПредставлениеПодразделения", НСтр("ru = 'Подразделения'"));
	Запрос.УстановитьПараметр("ПоддерживаемыеСчета", ПоддерживаемыеСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользуемыеВУчетнойПолитикеАналитики.Счет КАК Счет,
	|	ИспользуемыеВУчетнойПолитикеАналитики.ВидАналитики КАК ВидАналитики
	|ПОМЕСТИТЬ ИспользуемыеВУчетнойПолитикеАналитики
	|ИЗ
	|	&ИспользуемыеВУчетнойПолитикеАналитики КАК ИспользуемыеВУчетнойПолитикеАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИспользуемыеВУчетнойПолитикеАналитики.Счет КАК Счет
	|ПОМЕСТИТЬ ИспользуемыеВУчетнойПолитикеСчетаУчета
	|ИЗ
	|	ИспользуемыеВУчетнойПолитикеАналитики КАК ИспользуемыеВУчетнойПолитикеАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	""Подразделение"" КАК ВидСубконто,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ВидАналитикиСтатус,
	|	0 КАК Порядок,
	|	Хозрасчетный.Порядок КАК ПорядокСчета
	|ПОМЕСТИТЬ ИспользуемыеАналитикиПланСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеВУчетнойПолитикеСчетаУчета КАК ИспользуемыеВУчетнойПолитикеСчетаУчета
	|		ПО (ИспользуемыеВУчетнойПолитикеСчетаУчета.Счет = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&ПоддерживаемыеСчета)
	|	И ИспользуемыеВУчетнойПолитикеСчетаУчета.Счет ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка,
	|	ХозрасчетныйВидыСубконто.ВидСубконто,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.ВидСубконто ЕСТЬ NULL
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ХозрасчетныйВидыСубконто.НомерСтроки,
	|	ХозрасчетныйВидыСубконто.Ссылка.Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеВУчетнойПолитикеСчетаУчета КАК ИспользуемыеВУчетнойПолитикеСчетаУчета
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = ИспользуемыеВУчетнойПолитикеСчетаУчета.Счет
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&ПоддерживаемыеСчета)
	|	И ИспользуемыеВУчетнойПолитикеСчетаУчета.Счет ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИспользуемыеВУчетнойПолитикеАналитики.Счет,
	|	ИспользуемыеВУчетнойПолитикеАналитики.ВидАналитики,
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.НомерСтроки, 0),
	|	Хозрасчетный.Порядок
	|ИЗ
	|	ИспользуемыеВУчетнойПолитикеАналитики КАК ИспользуемыеВУчетнойПолитикеАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ИспользуемыеВУчетнойПолитикеАналитики.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|			И ИспользуемыеВУчетнойПолитикеАналитики.ВидАналитики = ХозрасчетныйВидыСубконто.ВидСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ИспользуемыеВУчетнойПолитикеАналитики.Счет = Хозрасчетный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуемыеАналитикиПланСчетов.Счет КАК Счет,
	|	ИспользуемыеАналитикиПланСчетов.ВидСубконто КАК ВидСубконто,
	|	ИспользуемыеАналитикиПланСчетов.ВидАналитикиСтатус КАК ВидАналитикиСтатус,
	|	ИспользуемыеАналитикиПланСчетов.Порядок КАК Порядок,
	|	ИспользуемыеАналитикиПланСчетов.ПорядокСчета КАК ПорядокСчета,
	|	ВЫБОР
	|		КОГДА ИспользуемыеАналитикиПланСчетов.ВидСубконто = ""Подразделение""
	|			ТОГДА &ПредставлениеПодразделения
	|		ИНАЧЕ ИспользуемыеАналитикиПланСчетов.ВидСубконто.Представление
	|	КОНЕЦ КАК ВидСубконтоПредставление,
	|	ИспользуемыеАналитикиПланСчетов.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ИспользуемыеАналитикиПланСчетов КАК ИспользуемыеАналитикиПланСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСчета,
	|	Порядок";

	Результат = Запрос.Выполнить();

	ТаблицаСубконто = Результат.Выгрузить();
	
	// Некоторые виды субконто могут быть скрыты в интерфейсе, например, номенклатурные группы.
	ИсключитьНеотображаемыеВидыСубконто(ТаблицаСубконто);

	ТаблицаСубконто.Индексы.Добавить("Счет, ВидСубконто");

	ВидыСубконто = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСубконто.ВыгрузитьКолонку("ВидСубконто"));
	
	РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределенияСчетовУчета(
		Справочники.НастройкиУчетаЗатрат.СчетаРаспределенияЗатратСобственнойБазы());
		
	АдресРазрезыРаспределения = ПоместитьВоВременноеХранилище(РазрезыРаспределения, УникальныйИдентификатор);
	МассивРеквизитов = Новый Массив;
	
	ИдентификаторыСчетовУчета = Новый Соответствие;
	Для Каждого СчетСписка Из ПоддерживаемыеСчета Цикл

		Для Каждого ВидСубконто Из ВидыСубконто Цикл
			
			РазрезРаспределения = РазрезыРаспределения.Найти(ВидСубконто, "Ключ");
			
			Если РазрезРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = РазрезРаспределения.Имя;
			
			ИдентификаторСчетаУчета = ИдентификаторыСчетовУчета[СчетСписка];
			Если ИдентификаторСчетаУчета = Неопределено Тогда
				ИдентификаторСчетаУчета = Справочники.НастройкиУчетаЗатрат.СтрокаУникальногоИдентификатораИзСсылки(СчетСписка);
				ИдентификаторыСчетовУчета.Вставить(СчетСписка, ИдентификаторСчетаУчета);
			КонецЕсли;
			
			ОтборСтрок = Новый Структура("Счет, ВидСубконто", СчетСписка, ВидСубконто);
			СтрокиСубконто = ТаблицаСубконто.НайтиСтроки(ОтборСтрок);

			Если СтрокиСубконто.Количество() > 0 Тогда

				СтрокаСубконто = СтрокиСубконто[0];

				Если Не ДобавленныеКолонки.Свойство(ИмяКолонки) Тогда

					ТипЗначения = СтрокаСубконто.ТипЗначения;
					Если СтрокаСубконто.ВидСубконто = "Подразделение" Тогда
						ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
					КонецЕсли;
					РеквизитКолонкаТаблицы = Новый РеквизитФормы(
						ИмяКолонки, ТипЗначения, "ТаблицаБазы", СтрокаСубконто.ВидСубконтоПредставление);
					МассивРеквизитов.Добавить(РеквизитКолонкаТаблицы);

					ДобавленныеКолонки.Вставить(ИмяКолонки, ВидСубконто);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Для всех сочетаний ВидАналитики/Счет добавляем на форму реквизит числового типа. Он используется для
			// условного оформления в строках базы распределения: несовместимые со счетом, а также невыбранные аналитики
			// не доступны для изменения в строке таблицы и заполняются текстом "Не используется".
			// Эти реквизиты могут принимать значения: 0 - вид аналитики не используется, 1 - используется.
			ИмяСтатуса = ИмяСтатусаВидаАналитики(ИдентификаторыСчетовУчета, СчетСписка, ИмяКолонки);
			РеквизитСтатус =
				Новый РеквизитФормы(ИмяСтатуса, ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
			МассивРеквизитов.Добавить(РеквизитСтатус);
			
			ЗначенияСтатусов.Вставить(ИмяСтатуса, 0);

			НоваяСтрокаАналитики = ТаблицаАналитики.Добавить();
			НоваяСтрокаАналитики.Счет = СчетСписка;
			НоваяСтрокаАналитики.ВидАналитики = ВидСубконто;
			НоваяСтрокаАналитики.ВидАналитикиСтатус = ?(СтрокиСубконто.Количество() > 0, СтрокиСубконто[0].ВидАналитикиСтатус, -1);
			НоваяСтрокаАналитики.ВидАналитикиПредставление = ?(СтрокиСубконто.Количество() > 0, СтрокиСубконто[0].ВидСубконтоПредставление, "");

		КонецЦикла;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	АдресИдентификаторыСчетовУчета = ПоместитьВоВременноеХранилище(ИдентификаторыСчетовУчета, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьНеотображаемыеВидыСубконто(ТаблицаСубконто)
	
	Для Каждого СтрокаТаблицаСубконто Из ТаблицаСубконто Цикл
		
		Если БухгалтерскийУчетКлиентСервер.НужноСкрытьСубконто(Истина, СтрокаТаблицаСубконто.ТипЗначения) Тогда
			СтрокаТаблицаСубконто.ВидАналитикиСтатус = -1;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитикуПоУмолчанию(ТаблицаНастройкиАналитики)
	// Если пока никакие счета не указаны в качестве используемых, настроим базу "по умолчанию":
	// затраты распределяются на счет 20.01 между подразделениями пропорционально коэффициентам.
	//
	// Проверяем, заполнялась ли настройка распределения ранее, то есть указан ли хотя бы один счет как используемый.
	Если ТаблицаНастройкиАналитики.Найти(1, "СчетСтатус") <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	СчетаОсновногоПроизводства = УчетЗатрат.СчетаРасходов(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);

	Если СчетаОсновногоПроизводства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СчетОсновногоПроизводства = СчетаОсновногоПроизводства[0];
	
	ОтборСтрок = Новый Структура("Счет", СчетОсновногоПроизводства);
	СтрокиДляЗаполненияПоУмолчанию = ТаблицаНастройкиАналитики.НайтиСтроки(ОтборСтрок);

	Для Каждого СтрокаНастройки Из СтрокиДляЗаполненияПоУмолчанию Цикл

		СтрокаНастройки.СчетСтатус = 1;
		Если СтрокаНастройки.ВидАналитики = "Подразделение" И СтрокаНастройки.ВидАналитикиСтатус <> -1 Тогда
			СтрокаНастройки.ВидАналитикиСтатус = 1;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыСобственнаяБаза(ДобавленныеКолонки)
	
	Для Каждого ДобавленнаяКолонка Из ДобавленныеКолонки Цикл
		// Для каждого добавленного столбца, соответствующего виду аналитики таблицы базы, создадим элемент на форме.
		ИмяКолонки = ДобавленнаяКолонка.Ключ;

		КолонкаТаблицы = Элементы.Вставить(ИмяКолонки, Тип("ПолеФормы"), Элементы.ТаблицаБазы, Элементы.ТаблицаБазыКоэффициент);
		КолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаТаблицы.ПутьКДанным = "ТаблицаБазы." + ИмяКолонки;
		КолонкаТаблицы.Видимость = Ложь;
		КолонкаТаблицы.Ширина = 20;
		
		КолонкаТаблицы.УстановитьДействие("ПриИзменении", "ПриИзмененииЗначенияАналитики");

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление(ПоддерживаемыеСчета, ДобавленныеКолонки)

	ИдентификаторыСчетовУчета = ПолучитьИзВременногоХранилища(АдресИдентификаторыСчетовУчета);
	Для Каждого ЭлементСтруктуры Из ДобавленныеКолонки Цикл
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
			
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ЭлементСтруктуры.Ключ);

		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ЭлементУО.Отбор, ЭлементСтруктуры.Ключ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		Для Каждого СчетУчета Из ПоддерживаемыеСчета Цикл
			ГруппаОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбора, СчетУчета.УникальныйИдентификатор(), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтбораИ, 
				ИмяСтатусаВидаАналитики(ИдентификаторыСчетовУчета, СчетУчета, ЭлементСтруктуры.Ключ), ВидСравненияКомпоновкиДанных.Равно, 0);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтбораИ, "ТаблицаБазы.Счет", ВидСравненияКомпоновкиДанных.Равно, СчетУчета);
		КонецЦикла;

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИмяСтатусаВидаАналитики(ИдентификаторыСчетовУчета, СчетУчета, ИмяАналитики)
	
	Возврат "СтатусВидаАналитики_" + ИдентификаторыСчетовУчета[СчетУчета] + "_" + ИмяАналитики;

КонецФункции

&НаСервере
Процедура ПрочитатьАналитику(НастройкаАналитикиБазыМодификатора, ТаблицаАналитики)

	Для Каждого СтрокаИсходнойТаблицы Из НастройкаАналитикиБазыМодификатора Цикл

		Если СтрокаИсходнойТаблицы.СчетСтатус <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСчета = ТаблицаАналитики.НайтиСтроки(Новый Структура("Счет", СтрокаИсходнойТаблицы.Счет));
		
		Для Каждого СтрокаСчета Из СтрокиСчета Цикл
			СтрокаСчета.СчетСтатус = 1;
		КонецЦикла;
		
		Если СтрокаИсходнойТаблицы.ВидАналитикиСтатус = 1 Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Счет", СтрокаИсходнойТаблицы.Счет);
			Отбор.Вставить("ВидАналитики", СтрокаИсходнойТаблицы.ВидАналитики);
			Отбор.Вставить("ВидАналитикиСтатус", 0);
			
			СтрокиАналитики = ТаблицаАналитики.НайтиСтроки(Отбор);
			Если СтрокиАналитики.Количество() > 0 Тогда
				СтрокиАналитики[0].ВидАналитикиСтатус = 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначения(БазаРаспределения, Модификатор)
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		
		ЗаполнитьЗначенияСвойств(Модификатор, ЭтотОбъект, "Счет,Подразделение");
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		Модификатор.Ссылка = СписокСтатейЗатрат;
		Модификатор.СтатьиЗатрат = Справочники.НастройкиУчетаЗатрат.СодержимоеСпискаСтатейЗатрат(СписокСтатейЗатрат);

	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда

		ЗаполнитьЗначенияСвойств(Модификатор, ЭтотОбъект);
		Модификатор.НастройкаАналитикиБазы = ПолучитьИзВременногоХранилища(АдресНастройкаАналитики);
		Модификатор.ТаблицаБазы = ТаблицаБазы.Выгрузить();
		Модификатор.ТаблицаБазы.Колонки.Удалить("Отступ");

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьФункциональныеОпции()
	
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	Элементы.ПодразделениеВыручка.Видимость = ВестиУчетЗатратПоПодразделениям;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьМодификатор()
	
	ПоляМодификаторов = Новый Соответствие;
	
	ПоляМодификаторов.Вставить(
		Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка,
		Элементы.Выручка);
	ПоляМодификаторов.Вставить(
		Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг,
		Элементы.Выручка);
	ПоляМодификаторов.Вставить(
		Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат,
		Элементы.ОтдельныеСтатьиПрямыхЗатрат);
	ПоляМодификаторов.Вставить(
		Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения,
		Элементы.СобственнаяБазаРаспределения);

	ВидимостьПолей = Новый Структура;
	Для Каждого ОписаниеПоля Из ПоляМодификаторов Цикл
		Если ВидимостьПолей.Свойство(ОписаниеПоля.Значение.Имя) И ВидимостьПолей[ОписаниеПоля.Значение.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ВидимостьПолей.Вставить(ОписаниеПоля.Значение.Имя, (БазаРаспределения = ОписаниеПоля.Ключ));
	КонецЦикла;
	
	Для Каждого ВидимостьПоля Из ВидимостьПолей Цикл
		Элементы[ВидимостьПоля.Ключ].Видимость = ВидимостьПоля.Значение;
	КонецЦикла;
	
	КлючСохраненияПоложенияОкна = XMLСтрока(БазаРаспределения); // чтобы восстанавливался размер формы, соответствующий контенту
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказки()
	
	Текст = "";
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
		Текст = НСтр("ru = 'Счет, на который будут распределены затраты.
                      |При отсутствии прямых затрат на этом счете, косвенные затраты распределяются пропорционально выручке от реализации услуг.
                      |Если счет не указан, то определяется автоматически по данным о прямых затратах; в этом случае при отсутствии прямых затрат распределение не выполняется.'");
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		Текст = НСтр("ru = 'Счет, на который будут распределены затраты.
                      |Если счет не указан, то затраты относятся на первый по порядку калькуляционный счет.'");
	КонецЕсли;
	Элементы.СчетВыручка.Подсказка = Текст;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРезультатЗакрытия()
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Представление",    "");
	РезультатЗакрытия.Вставить("ТребуетНастройки", Ложь);
	
	Редактирование = ПолучитьИзВременногоХранилища(АдресМодификаторы);
	РедактированиеСтроки = Редактирование[РедактируемаяСтрока];
	
	УстановитьЗначения(РедактированиеСтроки.БазаРаспределения, РедактированиеСтроки.Модификатор);
	
	Справочники.НастройкиУчетаЗатрат.ОбновитьРедактированиеМодификатораБазыРаспределения(РедактированиеСтроки);
	
	ПоместитьВоВременноеХранилище(Редактирование, АдресМодификаторы);
	
	ЗаполнитьЗначенияСвойств(РезультатЗакрытия, РедактированиеСтроки);
	
	Возврат РезультатЗакрытия;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИтоги()
	ОбновитьИтогиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере()
	Элементы.ТаблицаБазыКоэффициент.ТекстПодвала = Формат(ТаблицаБазы.Итог("Коэффициент"), "ЧДЦ=3;");
КонецПроцедуры

// Возвращает представление списка видов аналитик в указанном падеже.
//
// Параметры:
//  ВидыАналитик	- Массив из Строка, ПланыВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - массив разрезов распределения.
//  Падеж 	        - Строка - наименование падежа
//  Счет            - ПланСчетовСсылка.Хозрасчетный - используется для формирования гиперссылки.
//
// Возвращаемое значение:
//    Строка - результат склонения представления списка видов аналитик в указанном падеже.
//
&НаСервере
Функция ПредставлениеВидовАналитик(ВидыАналитик, Падеж, Счет)
	
	РезультатСклонения = Новый Массив;
	
	Для Каждого ВидАналитики Из ВидыАналитик Цикл
		РезультатСклонения.Добавить(Справочники.НастройкиУчетаЗатрат.ПредставлениеАналитикиСчета(ВидАналитики, ВыпускПродукции, Падеж));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РезультатСклонения) Тогда
		РезультатСклонения.Добавить(НСтр("ru = 'одной суммой'"));
	КонецЕсли;
		
	ШаблонРезультата = НСтр("ru = '<a href=""%1"">%2</a>'");
	ПредставлениеВидовАналитик = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонРезультата,
		"ВидАналитики_" + XMLСтрока(Счет.УникальныйИдентификатор()),
		ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(РезультатСклонения));
		
	Возврат ПредставлениеВидовАналитик;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	ПропуститьОбработчикПередЗакрытием = Истина;
	Закрыть(ОтправитьРезультатЗакрытия());
КонецПроцедуры

#КонецОбласти
