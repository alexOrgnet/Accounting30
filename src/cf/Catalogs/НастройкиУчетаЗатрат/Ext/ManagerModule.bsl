
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Элементы справочника являются контейнерами для хранения связанных сведений об учетной политике

#Область ПрограммныйИнтерфейс

// Работа с данными справочника выполняется опосредованно: через коллекцию Настройки.

#Область ДанныеСправочника

// Готовит (читает или заполняет по умолчанию) настройки учета затрат,
// в части, общей для редактирования и применения.
// 
// Параметры:
//  Период - Дата - начало применения настройки
//  Организация - СправочникСсылка.Организации
//  Ссылка - СправочникСсылка.НастройкиУчетаЗатрат - читаемая ссылка, если известна
//         - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - редактируемая запись учетной политики.
//           Следует передавать, если настройки должны быть заполнены автоматически, с учетом редактируемой записи
//         - Неопределено - ссылка будет определена автоматически
// 
// Возвращаемое значение:
//  Структура - см. НовыйИсполняемыеНастройкиУчетаЗатрат
//
Функция БазовыеНастройки(Период, Организация, Знач Ссылка = Неопределено) Экспорт
	
	Настройки = НовыйБазовыеНастройкиУчетаЗатрат();
	
	Настройки.Контекст.Период      = Период;
	Настройки.Контекст.Организация = Организация;
	
	НачатьЗаполнениеБазовыхНастроек(Настройки, Ссылка, Ложь);
	ЗакончитьЗаполнениеБазовыхНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Готовит объект, позволяющий редактировать настройки учета затрат в форме учетной политики.
//
// Параметры:
//  РедактируемаяЗапись - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - редактируемая запись учетной политики.
//  ВосстановитьАвтоматическиеНастройки - Булево - Истина, если нужно вернуться к автоматическим настройкам
// 
// Возвращаемое значение:
//  см. НовыйРедактированиеНастроекУчетаЗатрат
//
Функция РедактированиеЗаписиУчетнойПолитики(РедактируемаяЗапись, ВосстановитьАвтоматическиеНастройки) Экспорт
	
	ИсточникНастроек = РедактируемаяЗапись.НастройкиУчетаЗатрат;
	Если ВосстановитьАвтоматическиеНастройки Или Не ЗначениеЗаполнено(ИсточникНастроек) Тогда
		ИсточникНастроек = РедактируемаяЗапись;
	КонецЕсли;
	
	Настройки = БазовыеНастройки(
		РедактируемаяЗапись.Период,
		РедактируемаяЗапись.Организация,
		ИсточникНастроек);
	
	РедактированиеНастроек = НовыйРедактированиеНастроекУчетаЗатрат(Настройки);
	РедактированиеНастроек.Ссылка = РедактируемаяЗапись.НастройкиУчетаЗатрат;
	
	Если ВосстановитьАвтоматическиеНастройки Тогда
		РедактированиеНастроек.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат РедактированиеНастроек;
	
КонецФункции

// Приводит настройки учета затрат, редактируемые в форме записи учетной политики, в соответствие измененным пользователем
// свойствам учетной политики, не являющихся частью настроек учета затрат.
//
// Параметры:
//  РедактированиеНастроек - см. НовыйРедактированиеНастроекУчетаЗатрат
//  РедактируемаяЗапись - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - редактируемая запись учетной политики
// 
// Возвращаемое значение:
//  Булево - Ложь, если настройки не зависят от свойств редактируемой записи
//
Функция ОбновитьРедактированиеЗаписиУчетнойПолитики(РедактированиеНастроек, РедактируемаяЗапись) Экспорт
	
	Если РедактированиеНастроек.Настройки.УстановленыВручную Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьПоУмолчанию(РедактированиеНастроек.Настройки, Ложь, РедактируемаяЗапись);
	ЗаполнитьКраткоеОписание(РедактированиеНастроек);
	
	Возврат Истина;
	
КонецФункции

// Готовит настройки учета затрат для их применения, например, в ходе расчета себестоимости.
// В частности, такие настройки ограничиваются контекстом: текущим месяцем, конкретным филиалом и т.п.
//
// Параметры:
//  Период - Дата - любая дата из месяца, в котором применяются настройки
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - см. НовыйИсполняемыеНастройкиУчетаЗатрат
//
Функция ИсполняемыеНастройки(Период, Организация) Экспорт
	
	Настройки = НовыйИсполняемыеНастройкиУчетаЗатрат();
	
	Настройки.Контекст.Период           = НачалоМесяца(Период);
	Настройки.Контекст.ПериодДействия   = КонецМесяца(Период);
	Настройки.Контекст.Организация      = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Настройки.Контекст.ОтборОрганизация = Организация;
	
	НачатьЗаполнениеБазовыхНастроек(Настройки);
	
	ОграничитьПоОрганизации(Настройки, Организация);
	
	ЗакончитьЗаполнениеБазовыхНастроек(Настройки);
	
	ДополнитьИсполняемыеНастройки(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Текст описания настройки на естественном языке.
// Содержит гиперссылки для редактирования.
// Используется для перехода к редактированию настройки.
//
// Параметры:
//  Период - Дата - дата, в которую применяются настройки
//  Организация - СправочникСсылка.Организации - организация, чьи настройки отображаются
// 
// Возвращаемое значение:
//  Массив Из ФорматированнаяСтрока - абзацы текста.
//
Функция КраткоеОписаниеНастройки(Период, Организация) Экспорт
	
	Текст = Новый Массив;
	
	Настройки = БазовыеНастройки(Период, Организация);
	Если Не ЗначениеЗаполнено(Настройки.СчетаУчета) Тогда
		Возврат Текст;
	КонецЕсли;
	
	Составитель = НовыйСоставительКраткогоОписания(Настройки);
	
	ЗаполнитьАбзацыКраткогоОписания(Составитель);
	
	Для Каждого Абзац Из Составитель.Абзацы Цикл
		
		Текст.Добавить(СтроковыеФункции.ФорматированнаяСтрока(Абзац));
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Счета учета, для которых настройками учета затрат предполагается отнесение к расходам периода
// (другими словами, это счета затрат, не включаемых в стоимость запасов).
//
// Параметры:
//  Период - Дата - дата, в которую применяются настройки
//  Организация - СправочникСсылка.Организации - организация, чьи настройки анализируются
// 
// Возвращаемое значение:
//  Массив Из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаРасходыПериода(Период, Организация) Экспорт
	
	СчетаРасходыПериода = Новый Массив;
	
	Настройки = БазовыеНастройки(Период, Организация);
	
	РолиРасходыПериода = Новый Массив;
	РолиРасходыПериода.Добавить(Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж);
	РолиРасходыПериода.Добавить(Перечисления.РолиСчетовЗатрат.УправленческиеРасходы);
	РолиРасходыПериода.Добавить(Перечисления.РолиСчетовЗатрат.РасходыНаПродажу);
	РолиРасходыПериода.Добавить(Перечисления.РолиСчетовЗатрат.ПрочиеРасходы);
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		Если ЗакрытиеСчета = Неопределено
			Или РолиРасходыПериода.Найти(ЗакрытиеСчета.Роль) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаРасходыПериода.Добавить(Счет);
		
	КонецЦикла;
	
	Возврат СчетаРасходыПериода;
	
КонецФункции


// Возвращает счета учета, для которых игнорируется наличие на счете развернутого начального сальдо
// по субконто "Продукция". Если в качестве параметра Настройки передано значение Неопределено, возвращается
// пустой массив.
// См. ПереходНЗПДетализацияПоПродукции.СчетаВРежимеСовместимостиНЗП
// 
// Параметры:
//  Настройки - см. ИсполняемыеНастройки
//            - Неопределено
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаИгнорироватьАналитикуПродукцияНачальногоСальдо(Настройки) Экспорт

	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	СчетаИгнорироватьАналитикуПродукцияНачальногоСальдо = Новый Массив;
	
	Для Каждого Закрытие Из Настройки.Закрытие Цикл
		Если Закрытие.Значение.РежимСовместимостиНезавершенногоПроизводства Тогда
			СчетаИгнорироватьАналитикуПродукцияНачальногоСальдо.Добавить(Закрытие.Ключ);
		КонецЕсли;
	КонецЦикла;
		
	Возврат СчетаИгнорироватьАналитикуПродукцияНачальногоСальдо;
	
КонецФункции

// Возвращает счета учета, на которых ведется учет незавершенного производства в разрезе продукции.
// 
// Параметры:
//  Настройки - Структура - см. ИсполняемыеНастройки()
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаВедетсяНезавершенноеПроизводствоПоПродукции(Настройки) Экспорт
	
	СписокСчетов = Новый Массив;
	
	Для Каждого Закрытие Из Настройки.Закрытие Цикл
		СчетУчета = Закрытие.Ключ;
		Если Закрытие.Значение.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации
			И Настройки.АналитикаНезавершенногоПроизводства[СчетУчета].Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) <> Неопределено Тогда
			СписокСчетов.Добавить(СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСчетов;
	
КонецФункции

#КонецОбласти

#Область ЭлементыКоллекции

// Конструктор объекта, позволяющего работать с базовыми настройками: просматривать, редактировать, применять.
//
// Полное имя НастройкиУчетаЗатрат можно сокращать до Настройки, когда из контекста ясно, что речь идет о НастройкиУчетаЗатрат.
//
Функция НовыйБазовыеНастройкиУчетаЗатрат() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Контекст",                   НовыйКонтекстНастроекУчетаЗатрат()); // откуда получены настройки
	Настройки.Вставить("Ссылка",                     Справочники.НастройкиУчетаЗатрат.ПустаяСсылка());
	Настройки.Вставить("УстановленыВручную",         Ложь);
	
	Настройки.Вставить("СчетаУчета",                 Новый Массив);       // элементы - ПланСчетовСсылка.Хозрасчетный
	Настройки.Вставить("ОсновнойСчетУчета",          ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Настройки.Вставить("Аналитика",                  Новый Соответствие); // Ключ - Счет, Значение - Массив видов субконто, имен измерений регистра бухгалтерии
	Настройки.Вставить("ОтображаемаяАналитика",      Новый Соответствие); // Аналитика, отображаемая пользователю, т.е. по которой предполагается фактическая вариативность
	Настройки.Вставить("АналитикаНезавершенногоПроизводства", Новый Соответствие); // Ключ - Счет, Значение - Массив видов субконто, имен измерений регистра бухгалтерии. 
	                                                                                //Аналитика, используемая в незавершенном производстве
	
	Настройки.Вставить("Распределение",              НовыйНастройкиРаспределенияСчета()); // Общие правила распределения. В Закрытие могут быть заданы исключения
	Настройки.Вставить("Закрытие",                   Новый Соответствие); // Ключ - Счет, Значение - НовыйНастройкиЗакрытияСчета. Должны быть все СчетаУчета
	
	Настройки.Вставить("ВыпускПродукции",              УчетПроизводства.ИспользоватьВыпускПродукции());
	Настройки.Вставить("ВариантУчетаСтоимостиВыпуска", Перечисления.ВариантыУчетаСтоимостиВыпуска.ФактическаяСтоимость);
	
	// По общему правилу в режиме оценки незавершенного производства без инвентаризации,
	// незавершенное производство учитывается, если нет ни выпуска продукции, ни реализации услуг.
	// В программе есть возможность исключить из перечня событий, влияющих на НЗП (точнее, на закрытие счетов затрат),
	// некоторые виды реализации услуг, оставив только такие, которые можно условно назвать "выпуском":
	// реализацию услуг с указанием плановых цен
	// Эта возможность используется для совместимости с предыдущими версиями (ред. 2) и в будущих версиях может быть удалена.
	Настройки.Вставить("НакапливатьЗатратыДоВыпуска", Ложь);
	
	// Как правило, никакие настройки встречного выпуска не требуются.
	// Но для совместимости с предыдущими версиями (ред. 2) они поддерживаются.
	// В будущих версиях могут быть удалены.
	Настройки.Вставить("ВстречныйВыпуск", Перечисления.СпособыРасчетаСебестоимостиПродукции.ПустаяСсылка());
	
	// В предыдущих версиях программы могли быть выполнены настройки незавершенного производства,
	// сценарий использования которых отсутствует.
	// В будущих версиях планируется отказаться от таких настроек.
	Настройки.Вставить("КомбинированныеНастройкиНезавершенноеПроизводство", Новый Массив); // Перечень счетов
	
	// Служебное (private) значение для упрощения работы с отдельными свойствами
	Настройки.Вставить("Кеш", Новый Структура);
	Настройки.Кеш.Вставить("СчетаПоРолям"); // См. СчетаРоли
	Настройки.Кеш.Вставить("СчетОсновногоНабораПравилРаспределения"); // См. СчетОсновногоНабораПравилРаспределения
	Настройки.Кеш.Вставить("РазрезыРаспределения"); // См. РазрезыРаспределения
	
	// Служебное (private) значение для передачи информации между вызываемыми методами
	Настройки.Вставить("Сообщения", Новый Структура);
	// Используется для передачи добавляемых в настройку счетов из функции УстановитьВыполненныеНастройки()
	// формы СчетаУчетаЗатрат в процедуру ИсправитьСебестоимостьПродажНаУправленческиеРасходы() текущего модуля.
	Настройки.Сообщения.Вставить("ДобавленныеСчетаУчета", Новый Массив);
	
	Возврат Настройки;
	
КонецФункции

// Конструктор объекта, позволяющего применять настройки учета затрат.
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйИсполняемыеНастройкиУчетаЗатрат() Экспорт
	
	Настройки = НовыйБазовыеНастройкиУчетаЗатрат();
	
	Настройки.Вставить("ПрименяетсяПБУ5", Ложь); // Режим совместимости с устаревшим стандартом
	
	Возврат Настройки;
	
КонецФункции

// Конструктор коллекции, предназначенной для редактирования настроек учета затрат.
// Расширяет настройки сведениями, необходимыми для записи их в информационную базу.
//
// Параметры:
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат настройки учета затрат
// 
// Возвращаемое значение:
//  Структура - созданная коллекция; состав свойств см. в теле функции
//
Функция НовыйРедактированиеНастроекУчетаЗатрат(Знач Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = НовыйБазовыеНастройкиУчетаЗатрат();
	КонецЕсли;
	
	РедактированиеНастроек = Новый Структура;
	РедактированиеНастроек.Вставить("Настройки",          Настройки);
	РедактированиеНастроек.Вставить("Ссылка",             ПустаяСсылка());
	РедактированиеНастроек.Вставить("Модифицированность", Ложь);
	РедактированиеНастроек.Вставить("КраткоеОписание",    Новый ФорматированнаяСтрока(""));
	// Проверяется неинтерактивное право, так как прикладным пользователям ограничено интерактивное редактирование объекта
	РедактированиеНастроек.Вставить("ТолькоПросмотр",     Не ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиУчетаЗатрат)
														  Или БухгалтерскийУчетПереопределяемый.ОбособленноеПодразделение(Настройки.Контекст.Организация));
	
	ЗаполнитьКраткоеОписание(РедактированиеНастроек);
	
	Возврат РедактированиеНастроек;
	
КонецФункции

// Проверяет, что переданные данные соответствуют по структуре настройкам учета затрат
//
// Параметры:
//  ПроверяемоеЗначение - Структура, см. НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  Булево - Истина, если переданное значение - настройки учета затрат
//
Функция ЭтоНастройкиУчетаЗатрат(Знач ПроверяемоеЗначение) Экспорт
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементБазовыхНастроек Из НовыйБазовыеНастройкиУчетаЗатрат() Цикл
		Если Не ПроверяемоеЗначение.Свойство(ЭлементБазовыхНастроек.Ключ) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Определяет счет, для которого настроен основной набор правил распределения - 
// на настройки этого счета будут "равняться" настройки других счетов.
//
// Параметры:
//  Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  ПланСчетовСсылка.Хозрасчетный
//
Функция СчетОсновногоНабораПравилРаспределения(Настройки) Экспорт
	
	Если ЗначениеЗаполнено(Настройки.Кеш.СчетОсновногоНабораПравилРаспределения) Тогда
		Возврат Настройки.Кеш.СчетОсновногоНабораПравилРаспределения;
	КонецЕсли;
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Если Не ТребуетсяРаспределениеЗатрат(ЗакрытиеСчета, Настройки) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Кеш.СчетОсновногоНабораПравилРаспределения = Счет;
		
		Возврат Счет;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описывает счета учета, добавленные в настройку или удаленные из нее.
//
// Параметры:
//  Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат
//  СчетаУчета - Массив - измененные счета учета.
//
Процедура ЗапомнитьДобавленныеСчета(Настройки, СчетаУчета) Экспорт
	
	Настройки.Сообщения.ДобавленныеСчетаУчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаУчета, Настройки.СчетаУчета);
	
КонецПроцедуры

// Описывает область применения исполняемой настройки распределения: для каких расходов она применяется.
//
// Параметры:
//  ЗаписьДетальнойНастройки - СтрокаТаблицыЗначений Из НовыйНастройкиРаспределенияСчета
// 
// Возвращаемое значение:
//  Структура - поля отбора. Состав ключей зависит от того, какие поля заполнены в настройке.
//    Ключ - строка из ПоляДетальнойНастройкиРаспределения. Значение - значение отбора.
//
Функция ПоляОтбораДетальнойНастройкиРаспределения(ЗаписьДетальнойНастройки) Экспорт
	
	ПоляОтбора = Новый Структура;
	
	Для Каждого ОписаниеПоля Из ПоляДетальнойНастройкиРаспределения(Истина) Цикл
		
		ИмяПоля = ОписаниеПоля.Ключ;
		
		ЗначениеОтбора = ЗаписьДетальнойНастройки[ИмяПоля];
		Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляОтбора.Вставить(ИмяПоля, ЗначениеОтбора);
		
	КонецЦикла;
	
	Возврат ПоляОтбора;
	
КонецФункции

// Тип ссылки на конкретную настройку распределения.
// 
// Возвращаемое значение:
//  ОписаниеТипов - тип
//
Функция ТипСсылкиНастройкиРаспределения() Экспорт
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(5); // Номер строки табличной части Распределение
	
КонецФункции

// Находит в коллекции конкретную настройку распределения по ссылке.
//
// Параметры:
//  Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат - анализируемые настройки
//  Счет - ПланСчетовСсылка.Хозрасчетный - распределяемый счет
//  Ссылка - см. ТипСсылкиНастройкиРаспределения - ссылка на конкретную настройку
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений Из НовыйНастройкиРаспределенияСчета - найденная настройка
//  Неопределено - настройки с такой ссылкой нет
//
Функция НастройкаРаспределения(Настройки, Счет, Ссылка) Экспорт
	
	ЗакрытиеСчета = Настройки.Закрытие[Счет];
	Если ЗакрытиеСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗакрытиеСчета.Распределение.Найти(Ссылка, "Ссылка");
	
КонецФункции

// Определяет основное правило (настройку) распределения - наиболее общую, применяемую для счета в целом.
//
// Параметры:
//  Распределение - см. НовыйНастройкиРаспределенияСчета
// 
// Возвращаемое значение:
//  Неопределено - нет подходящей настройки
//  СтрокаТабличнойЧасти - найденная настройка
//
Функция ОсновнаяНастройкаРаспределенияСчета(Распределение) Экспорт
	
	Если Не ЗначениеЗаполнено(Распределение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОсновнаяНастройка = Распределение[0];
	
	Если ЗначениеЗаполнено(ОсновнаяНастройка.Филиал)
		Или ЗначениеЗаполнено(ОсновнаяНастройка.Подразделение)
		Или ЗначениеЗаполнено(ОсновнаяНастройка.СтатьяЗатрат) Тогда
		// Основная настройка должна быть максимально общей
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОсновнаяНастройка;
	
КонецФункции

// Определяет отбор статей затрат, включаемых в базу распределения.
//
// Параметры:
//  БазаРаспределения - ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов
//  Модификатор - Структура - см. НовыйМодификаторБазыРаспределения
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.СтатьиЗатрат
//
Функция ОтборБазыРаспределения(БазаРаспределения, Модификатор) Экспорт
	
	// Сейчас в отбор включается только перечень статей затрат
	
	Если БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Модификатор) <> Тип("Структура")
		Или Не Модификатор.Свойство("СтатьиЗатрат")
		Или ТипЗнч(Модификатор.СтатьиЗатрат) <> Тип("Массив") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Модификатор.СтатьиЗатрат;
	
КонецФункции

// Устанавливает (читает или заполняет по умолчанию) модификатор базы распределения.
//
// Параметры:
//  НастройкаРаспределения - СтрокаТаблицыЗначений Из НовыйНастройкиРаспределенияСчета - модифицируемая настройка
//  ХранимаяЗапись - СтрокаТабличнойЧасти:Справочник.НастройкиУчетаЗатрат.Распределение - источник данных
//                 - Неопределено - заполнение значением по умолчанию
//  Ссылка         - СправочникСсылка.НастройкиУчетаЗатрат - справочник, к которой относится модифицируемая настройка
//                 - Неопределено - заполнение значением по умолчанию
//
Процедура УстановитьМодификаторБазыРаспределения(НастройкаРаспределения, ХранимаяЗапись = Неопределено, Ссылка = Неопределено) Экспорт
	
	НастройкаРаспределения.Модификатор = НовыйМодификаторБазыРаспределения(НастройкаРаспределения.БазаРаспределения);
	
	// Учтем значение из ХранимаяЗапись
	Если ХранимаяЗапись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		Если ЗначениеЗаполнено(ХранимаяЗапись.СписокСтатейЗатрат) Тогда
			
			НастройкаРаспределения.Модификатор.Ссылка       = ХранимаяЗапись.СписокСтатейЗатрат;
			НастройкаРаспределения.Модификатор.СтатьиЗатрат = СодержимоеСпискаСтатейЗатрат(ХранимаяЗапись.СписокСтатейЗатрат);
			
		Иначе
			
			НастройкаРаспределения.Модификатор.СтатьиЗатрат = ДесериализоватьОтборСтатейЗатрат(ХранимаяЗапись.ОтборБазыРаспределения);
			
		КонецЕсли;
		
	ИначеЕсли НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		
		Для Каждого ОписаниеПоляМодификатора Из ПоляСохраненияМодификатораВыручки() Цикл
			НастройкаРаспределения.Модификатор[ОписаниеПоляМодификатора.Ключ] = ХранимаяЗапись[ОписаниеПоляМодификатора.Значение];
		КонецЦикла;
	ИначеЕсли НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		ПрочитатьСобственнуюБазуРаспределения(НастройкаРаспределения.Модификатор, ХранимаяЗапись, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Приемники распределения.
// 
// Параметры:
//  ЗакрытиеСчета - Структура - см. НовыйНастройкиЗакрытияСчета()
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат()
// 
// Возвращаемое значение:
//   Структура - см. НовыйПриемникиРаспределения()
//  
Функция ПриемникиРаспределения(ЗакрытиеСчета, Настройки) Экспорт
	
	Если ЗакрытиеСчета.Приемники = Неопределено Тогда
		
		ЗакрытиеСчета.Приемники = НовыйПриемникиРаспределения();
		ЗаполнитьПриемникиРаспределенияСчета(ЗакрытиеСчета, Настройки);
		
	КонецЕсли;
	
	Возврат ЗакрытиеСчета.Приемники;
	
КонецФункции

#КонецОбласти

#Область ДействияНадКоллекцией

// Заполняет базовые настройки учета затрат значениями по умолчанию
//
// Параметры:
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат
//  ДопускаютсяПустые - Булево - Ложь, если важно, чтобы результат был заполнен.
//       Например, важно показать заполненный результат при отображении пользователю (редактировании).
//  РедактируемаяЗаписьУчетнойПолитики - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - редактируемая запись учетной политики
//       (может измененные свойства, влияющие на настройки учета затрат).
//       Если не передана, нужные свойства будут прочитаны из информационной базы.
//
Процедура ЗаполнитьПоУмолчанию(Настройки, ДопускаютсяПустые = Истина, РедактируемаяЗаписьУчетнойПолитики = Неопределено) Экспорт
	
	Организация = Настройки.Контекст.Организация;
	Если ЗначениеЗаполнено(Настройки.Контекст.ОтборОрганизация) Тогда
		Организация = Настройки.Контекст.ОтборОрганизация;
	КонецЕсли;
	
	Настройки.СчетаУчета = УчетЗатрат.ИспользуемыеСчетаРасходов(
		Настройки.Контекст.Период,
		Настройки.Контекст.ПериодДействия,
		Организация,
		Не ЗначениеЗаполнено(Настройки.Контекст.ОтборОрганизация));
		
	ДобавитьСчетАвтоматическийВыпускПродукцииПоДаннымПродаж(Настройки, РедактируемаяЗаписьУчетнойПолитики);
	
	Если Не ДопускаютсяПустые И Не ЗначениеЗаполнено(Настройки.СчетаУчета) Тогда
		Настройки.СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновнойСчет("Затраты"));
	КонецЕсли;
	
	ПрименитьНастройкиПланаСчетов(Настройки.Аналитика, Настройки.ОтображаемаяАналитика, Настройки.СчетаУчета);
	ИнициализироватьНастройкиЗакрытия(Настройки);
	
	Исправить(Настройки);
	
КонецПроцедуры

// Добавляет в настройку счет учета.
//
// Параметры:
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат
//  Счет - ПланСчетовСсылка.Хозрасчетный - добавляемый счет
//
Процедура ДобавитьСчетУчета(Настройки, Счет) Экспорт
	
	Если Настройки.СчетаУчета.Найти(Счет) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// При добавлении сохраняем канонический порядок
	СчетаУчетаБезУчетаПорядка = ОбщегоНазначения.СкопироватьРекурсивно(Настройки.СчетаУчета);
	СчетаУчетаБезУчетаПорядка.Добавить(Счет);
	СчетаУчетаУпорядоченные = Новый Массив(УчетЗатрат.СчетаРасходов(СчетаУчетаБезУчетаПорядка));
	ПозицияУпорядочивания = СчетаУчетаУпорядоченные.Найти(Счет);
	Если ПозицияУпорядочивания = Неопределено Или ПозицияУпорядочивания = СчетаУчетаУпорядоченные.ВГраница() Тогда
		СледующийСчет = Неопределено;
	Иначе
		СледующийСчет = СчетаУчетаУпорядоченные[ПозицияУпорядочивания + 1];
	КонецЕсли;
	Позиция = Неопределено;
	Если СледующийСчет <> Неопределено Тогда
		Позиция = Настройки.СчетаУчета.Найти(СледующийСчет);
	КонецЕсли;
	
	Если Позиция = Неопределено Тогда
		Настройки.СчетаУчета.Добавить(Счет);
	Иначе
		Настройки.СчетаУчета.Вставить(Позиция, Счет);
	КонецЕсли;
	
	ИнициализироватьНастройкиЗакрытияСчета(Настройки, Счет);
	
	Если Счет = ПланыСчетов.Хозрасчетный.ВыпускПродукции
		И Не Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСчетВыпускПродукции(Настройки.ВариантУчетаСтоимостиВыпуска) Тогда
		Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ОтклоненияСтоимости;
	КонецЕсли;
	
КонецПроцедуры

// Валидирует базовые настройки учета затрат. Незаполненные приводятся к значениям по умолчанию
//
// Параметры:
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат
//
Процедура Исправить(Настройки) Экспорт
	
	ОтключитьАвтоматическоеРаспределение(Настройки);
	
	ИсправитьОсновнойСчетУчета(Настройки);
	
	// См. также ЗаполнитьКешВариантУчетаСтоимостиВыпуска
	ПроверитьПоддерживаетсяПлановаяСебестоимость(Настройки.ВариантУчетаСтоимостиВыпуска);
	ПроверитьПоддерживаетсяОценкаПродукцииПоПлановойСтоимости(Настройки.ВариантУчетаСтоимостиВыпуска);
	
	ИсправитьСчетВыпускПродукции(Настройки);
	ИсправитьАналитику(Настройки);
	ИсправитьАналитикуНезавершенногоПроизводства(Настройки);
	
	ИсправитьНастройкиЗакрытия(Настройки);
	ИсправитьОсновнойНаборПравилРаспределения(Настройки);
		
	ИсправитьПоКонтексту(Настройки);
	
	ОбновитьКеш(Настройки);
	
КонецПроцедуры

// Читает содержимое базовых настроек учета затрат из справочника.
//
// Параметры:
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат, заполняемая коллекция
//  Ссылка    - СправочникСсылка.НастройкиУчетаЗатрат - читаемая ссылка. Допустимо передавать некорректную ("битую") ссылку
//  ДопускаютсяПустые - Булево - Ложь, если важно, чтобы результат был заполнен.
//       Например, важно показать заполненный результат при отображении пользователю (редактировании).
//  РедактируемаяЗаписьУчетнойПолитики - РегистрСведенийМенеджерЗаписи.УчетнаяПолитика - редактируемая запись учетной политики.
//       Следует передавать, если чтение настроек выполняется в контексте формы редактирования учетной политики.
//
Процедура ПрочитатьСсылку(Настройки, Ссылка, ДопускаютсяПустые = Истина, РедактируемаяЗаписьУчетнойПолитики = Неопределено) Экспорт
	
	Настройки.Ссылка = Ссылка;
	
	// Общие настройки
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.УстановленыВручную КАК УстановленыВручную,
	|	Настройки.ОсновнойСчетУчета КАК ОсновнойСчетУчета,
	|	Настройки.ВариантУчетаСтоимостиВыпуска КАК ВариантУчетаСтоимостиВыпуска
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	КонецЕсли;
	
	Если Не Настройки.УстановленыВручную Тогда
		ЗаполнитьПоУмолчанию(Настройки, ДопускаютсяПустые, РедактируемаяЗаписьУчетнойПолитики);
		Возврат;
	КонецЕсли;
	
	// План счетов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Счет КАК Счет,
	|	Настройки.Роль КАК Роль
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.ПланСчетов КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Настройки.НомерСтроки";
	
	СчетаУчета = Новый Массив;
	РолиСчетов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетаУчета.Добавить(Выборка.Счет);
		Если ЗначениеЗаполнено(Выборка.Роль) Тогда
			РолиСчетов.Вставить(Выборка.Счет, Выборка.Роль);
		КонецЕсли;
	КонецЦикла;
	
	Настройки.СчетаУчета = Новый Массив(УчетЗатрат.СчетаРасходов(СчетаУчета));
	
	Если Не ЗначениеЗаполнено(Настройки.СчетаУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьНастройкиПланаСчетов(Настройки.Аналитика, Настройки.ОтображаемаяАналитика, Настройки.СчетаУчета);
	
	ОграничитьРазрезыУчетаНастройкой(Настройки.Аналитика, Настройки.ОтображаемаяАналитика, Ссылка);
	
	ИнициализироватьНастройкиЗакрытия(Настройки);
	
	// Роли счетов
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		Роль = РолиСчетов[Счет];
		
		Если Не ЗначениеЗаполнено(Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьРоль(Счет, Роль, Настройки);
		
	КонецЦикла;
	
	// Правила распределения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СчетаУчета", Настройки.СчетаУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.НомерСтроки КАК Ссылка,
	|	Правила.Филиал КАК Филиал,
	|	Правила.Счет КАК Счет,
	|	Правила.Подразделение КАК Подразделение,
	|	Правила.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Правила.БазаРаспределения КАК БазаРаспределения,
	|	Правила.ОтборБазыРаспределения КАК ОтборБазыРаспределения,
	|	Правила.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|	Правила.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|	Правила.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	Правила.НаименованиеБазы КАК НаименованиеБазы,
	|	Правила.ЕдиницаИзмеренияПоказателя КАК ЕдиницаИзмеренияПоказателя,
	|	Правила.ИдентификаторБазыРаспределения КАК ИдентификаторБазыРаспределения
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.Распределение КАК Правила
	|ГДЕ
	|	Правила.Ссылка = &Ссылка
	|	И Правила.Счет В(&СчетаУчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Правила.НомерСтроки
	|ИТОГИ ПО
	|	Счет";
	
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[ВыборкаСчет.Счет];
		
		Если Не ЗначениеЗаполнено(ЗакрытиеСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			Запись = ЗакрытиеСчета.Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			УстановитьМодификаторБазыРаспределения(Запись, Выборка, Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Настройки незавершенного производства
	// См. также ЗаполнитьКешТребуетсяСчетРасходовПоОказаниюУслуг
	// Аналитика незавершенного производства.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаУчета.Счет КАК СчетУчета,
		|	ЕСТЬNULL(РазрезыНЗП.ВидАналитики, НЕОПРЕДЕЛЕНО) КАК ВидАналитики
		|ИЗ
		|	Справочник.НастройкиУчетаЗатрат.ПланСчетов КАК СчетаУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат.РазрезыУчетаНезавершенногоПроизводства КАК РазрезыНЗП
		|		ПО СчетаУчета.Ссылка = РазрезыНЗП.Ссылка
		|			И СчетаУчета.Счет = РазрезыНЗП.Счет
		|ГДЕ
		|	СчетаУчета.Счет В(&КалькуляционныеСчета)
		|	И СчетаУчета.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	СчетУчета";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КалькуляционныеСчета", СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСчет.Следующий() Цикл
		Настройки.АналитикаНезавершенногоПроизводства.Вставить(ВыборкаСчет.СчетУчета, АналитикаНезавершенногоПроизводстваПоУмолчанию());
		Выборка = ВыборкаСчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ВидАналитики) Тогда
				Настройки.АналитикаНезавершенногоПроизводства[ВыборкаСчет.СчетУчета].Добавить(Выборка.ВидАналитики);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СчетаВРежимеСовместимостиНЗП", ПереходНЗПДетализацияПоПродукции.СчетаВРежимеСовместимостиНЗП(Настройки));
	
	// Вариант учета и режим совместимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Счет КАК Счет,
	|	Настройки.ВариантУчета КАК ВариантУчета,
	|	ЛОЖЬ КАК РежимСовместимости
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.НезавершенноеПроизводство КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|	И НЕ Настройки.Счет В (&СчетаВРежимеСовместимостиНЗП)
	|	И НЕ Настройки.ВариантУчета В (ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаНезавершенногоПроизводства.НеВедется), ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаНезавершенногоПроизводства.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Настройки.Счет,
	|	ЕСТЬNULL(Настройки.ВариантУчета, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаНезавершенногоПроизводства.НеВедется)),
	|	ИСТИНА
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат.НезавершенноеПроизводство КАК Настройки
	|		ПО (Настройки.Счет = Хозрасчетный.Ссылка)
	|			И (Настройки.Ссылка = &Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаВРежимеСовместимостиНЗП)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Выборка.Счет];
		Если ЗакрытиеСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗакрытиеСчета.НезавершенноеПроизводство = Выборка.ВариантУчета;
		
		// Для варианта учета НЗП "Ведется по результатам инвентаризации" с количественной оценкой переход пока не автоматизирован,
		//но для счетов учета, на которых применяется этот вариант учета НЗП, остатки не должны игнорироваться.
		Если Выборка.ВариантУчета = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации
			И АналитикаНезавершенногоПроизводстваСодержитПродукцию(Настройки, Выборка.Счет) Тогда
				Продолжить;
		КонецЕсли;
		
		ЗакрытиеСчета.РежимСовместимостиНезавершенногоПроизводства = Выборка.РежимСовместимости;
		
	КонецЦикла;
		
	// Настройки учета затрат на доставку от поставщика
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Счет КАК Счет,
	|	Настройки.НеРаспределятьЗатратыНаДоставку КАК НеРаспределятьЗатратыНаДоставку
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.ЗатратыНаДоставку КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Закрытие = Настройки.Закрытие[Выборка.Счет];
		Если Закрытие = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Закрытие.НеРаспределятьЗатратыНаДоставку = Выборка.НеРаспределятьЗатратыНаДоставку;
		
	КонецЦикла;
	
	УстановитьНастройкиСовместимостиРедакция2(Настройки, Настройки.Контекст.Период, Настройки.Контекст.Организация);
	
	УстановитьКомбинированныеНастройкиНезавершенноеПроизводство(Настройки);
	
	Исправить(Настройки);
	
КонецПроцедуры

// Помещает настройку в СправочникОбъект для сохранения в информационной базе.
//
// Параметры:
//  Объект - СправочникОбъект.НастройкиУчетаЗатрат - заполняемый объект
//  Настройки - Структура - см. НовыйБазовыеНастройкиУчетаЗатрат, источник
//
Процедура Сохранить(Объект, Настройки) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, Настройки, "УстановленыВручную, ОсновнойСчетУчета, ВариантУчетаСтоимостиВыпуска");
	
	СохранитьПравилаЗакрытияСчетов(Объект, Настройки);
	СохранитьРазрезыУчета(Объект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПланаСчетов

// Определяет требования к настройке плана счетов исходя из настроек учета затрат.
//
// Параметры:
//  ТребованияУчета - см. ПланыСчетов.Хозрасчетный.НовыйТребованияАналитикиУчета
//  Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат
//
Процедура ЗаполнитьТребованияАналитикиУчета(ТребованияУчета, Настройки) Экспорт
	
	ПозицияДобавленныхЗаписей = ТребованияУчета.Количество();
	
	ДобавитьТребованиеРазрезАналитикиПродукция(ТребованияУчета, Настройки);
	
	Перечисления.ВариантыУчетаСтоимостиВыпуска.ЗаполнитьТребованияАналитикиУчета(
		ТребованияУчета,
		Настройки.ВариантУчетаСтоимостиВыпуска);
	
	Для Индекс = ПозицияДобавленныхЗаписей По ТребованияУчета.Количество() - 1 Цикл
		
		ТребованияУчета[Индекс].Суммовой = 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КешируемыеЗначения

// Непосредственное вычисление значений см. в СлужебныйПрограммныйИнтерфейс

// Определяет, требуется ли в документах оказания услуг указывать счет расходов.
//
// Параметры:
//  Период - Дата - дата документа
//  Организация - СправочникСсылка.Организации - организация, указанная в документе
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется указывать счет расходов.
//
Функция ТребуетсяСчетРасходовПоОказаниюУслуг(Период, Организация) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.ТребуетсяСчетРасходовПоОказаниюУслуг(
		УчетнаяПолитика.ПериодКеша(Период),
		Организация);
	
КонецФункции

// Определяет применяется ли плановая себестоимость.
// Значение кешируется.
//
// Параметры:
//  Период      - Дата
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево
//
Функция ПлановаяСебестоимость(Период, Организация) Экспорт
	
	ВариантУчета = БухгалтерскийУчетПовтИсп.ВариантУчетаСтоимостиВыпуска(
		УчетнаяПолитика.ПериодКеша(Период),
		Организация);
		
	Возврат Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьПлановуюСебестоимость(ВариантУчета);
	
КонецФункции

// Определяет применяемый вариант учета стоимости выпуска.
// Значение кешируется.
//
// Параметры:
//  Период      - Дата
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево
//
Функция ВариантУчетаСтоимостиВыпуска(Период, Организация) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.ВариантУчетаСтоимостиВыпуска(
		УчетнаяПолитика.ПериодКеша(Период),
		Организация);
	
КонецФункции

// Определяет, ведется ли на счете учет затрат по продукции.
// Если в параметре Счет передано значение Неопределено, то проверяется использование
// аналитики Продукция хотя бы на одном счете затрат, выбранного в учетной политике.
// Значение кешируется.
//
// Параметры:
//  Период - Дата - дата документа
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет учета расходов, указанный в документе
//       - Неопределено
//  Организация - СправочникСсылка.Организации - организация, указанная в документе
// 
// Возвращаемое значение:
//  Булево - Истина, если ведется учет затрат по продукции.
//
Функция ВедетсяУчетЗатратПоПродукции(Период, Счет, Организация) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.ВедетсяУчетЗатратПоПродукции(
		УчетнаяПолитика.ПериодКеша(Период),
		Счет,
		Организация);
	
КонецФункции

// Определяет список счетов, имеющих заданную роль.
// 
// Параметры:
//  Роль      - ПеречислениеСсылка.РолиСчетовЗатрат
//  Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаРоли(Роль, Настройки) Экспорт

	СчетаПоРолям = Настройки.Кеш.СчетаПоРолям;
	Если Настройки.Кеш.СчетаПоРолям = Неопределено Тогда

		СчетаПоРолям = Новый Соответствие;
		Настройки.Кеш.СчетаПоРолям = СчетаПоРолям;

		Для Каждого Счет Из Настройки.СчетаУчета Цикл

			ЗакрытиеСчета = Настройки.Закрытие[Счет];

			СчетаРоли = СчетаПоРолям[ЗакрытиеСчета.Роль];

			Если СчетаРоли = Неопределено Тогда
				СчетаРоли = Новый Массив;
				СчетаПоРолям.Вставить(ЗакрытиеСчета.Роль, СчетаРоли);
			КонецЕсли;

			СчетаРоли.Добавить(Счет);

		КонецЦикла;

	КонецЕсли;

	СчетаРоли = СчетаПоРолям[Роль];
	Если СчетаРоли = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат СчетаРоли;
	КонецЕсли;

КонецФункции

// Возвращает список счетов, для которых в плане счетов или в настройках учетной политики отключено использование
// заданного вида субконто.
// 
// Параметры:
//  Период - Дата
//  Организация - СправочникСсылка.Организации
//  ВидАналитики - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный - Счета с отключенной аналитикой
//
Функция СчетаСОтключеннойАналитикой(Период, Организация, ВидАналитики) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.СчетаСОтключеннойАналитикой(
		УчетнаяПолитика.ПериодКеша(Период),
		Организация,
		ВидАналитики);
	
	КонецФункции

// Возвращает список счетов калькуляции себестоимости, заданный в учетной политике.
// Если в учетной политике не установлено использование калькуляционных счетов или используется автоматическая настройка,
// то возвращается список предопределенных калькуляционных счетов.
// 
// Параметры:
//  Период - Дата - Период записи учетной политики
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный - Счета с отключенной аналитикой
//
Функция КалькуляционныеСчета(Период, Организация) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.КалькуляционныеСчета(
		УчетнаяПолитика.ПериодКеша(Период),
		Организация);
	
КонецФункции

#КонецОбласти

#Область ПодключениеПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Ограничения

Функция НастраиваемыеСчета() Экспорт
	
	НастраиваемыеСчета = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастраиваемыеСчета, УчетЗатрат.ПредопределенныеСчетаРасходов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастраиваемыеСчета, УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
	НастраиваемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ВыпускПродукции);
	
	Возврат УчетЗатрат.СчетаРасходов(НастраиваемыеСчета);
	
КонецФункции

// Определяет счета учета, для которых можно детально настроить правила распределения затрат
// 
// Возвращаемое значение:
//  Массив Из ПланСчетовСсылка.Хозрасчетный
//
Функция НастраиваемыеСчетаОсобыеПравилаРаспределения() Экспорт
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчетаПравилаРаспределения());
	
КонецФункции

Функция НастраиваемаяАналитика() Экспорт
	
	Аналитика = Новый Соответствие;
	
	КалькуляционныеСчета = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	Для Каждого Счет Из КалькуляционныеСчета Цикл
		Аналитика.Вставить(Счет, НастраиваемаяАналитикаКалькуляционныеСчета());
	КонецЦикла;
	
	Возврат Аналитика;
	
КонецФункции

Функция БазаРаспределенияПрименяется(БазаРаспределения, Настройки, Роль = Неопределено) Экспорт
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость
		И Не Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьПлановуюСебестоимость(Настройки.ВариантУчетаСтоимостиВыпуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		СписокЗапрещенныхБаз = Перечисления.БазыРаспределенияКосвенныхРасходов.ОграничениеРаспределенияЗатратНаРемонтОС();
		Если СписокЗапрещенныхБаз.Найти(БазаРаспределения) <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет вид операции, который используется в документе Инвентаризация незавершенного производства для указанного счета.
// Если учет незавершенного производства не ведется, то возвращается пустая ссылка.
//
// Параметры:
//  Период - Дата - дата документа
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет учета расходов, указанный в документе
//  Организация - СправочникСсылка.Организации - организация, указанная в документе
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИнвентаризацияНЗП
//
Функция ИспользованиеДокументаИнвентаризацияНезавершенногоПроизводства(Период, Счет, Организация) Экспорт
	
	НастройкиУчетаЗатрат = БазовыеНастройки(Период, Организация);
	НастройкиЗакрытия = НастройкиУчетаЗатрат.Закрытие[Счет];
	
	ВариантыУчетаНеВедется = ВариантыУчетаНезавершенноеПроизводствоНеВедется();
	
	Если НастройкиЗакрытия = Неопределено Или
		ВариантыУчетаНеВедется.Найти(НастройкиЗакрытия.НезавершенноеПроизводство) <> Неопределено Тогда
		
		Возврат Перечисления.ВидыОперацийИнвентаризацияНЗП.ПустаяСсылка();
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.СуммоваяОценка;
	
	ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой =
		ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой();
	АналитикаНезавершенногоПроизводстваСодержитПродукцию =
		АналитикаНезавершенногоПроизводстваСодержитПродукцию(НастройкиУчетаЗатрат, Счет);
		
	Если ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой.Найти(НастройкиЗакрытия.НезавершенноеПроизводство) <> Неопределено
		И АналитикаНезавершенногоПроизводстваСодержитПродукцию Тогда
		ВидОперации = Перечисления.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

Функция СчетаСубконтоПродукцияОборотное(ПроверяемыеСчета) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", ПроверяемыеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Ссылка В(&Счета)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Счета, на которые можно распределить затраты в собственной базе распределения.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - Счета учета, на которые можно распределить затраты.
//
Функция СчетаРаспределенияЗатратСобственнойБазы() Экспорт
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства_);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	СчетаСписка = УчетЗатрат.СчетаРасходов(МассивСчетов);
	
	Возврат СчетаСписка;
	
КонецФункции


// Возвращает текстовое представление аналитики счета в указанном падеже
//
// Параметры:
//  РазрезАналитики	 - Строка, ПланВидовХарактеристик.ВидыСубконтоХозрасчетные - аналитика счета.
//  ВыпускПродукции	 - Булево
//  Падеж			 - Строка - наименование падежа "Именительный", "Родительный" и пр.
// 
// Возвращаемое значение:
//  Строка - представление аналитики.
//
Функция ПредставлениеАналитикиСчета(РазрезАналитики, ВыпускПродукции, Падеж) Экспорт
	
	ПредставлениеАналитикиИменительныйПадеж = "";
	
	Если РазрезАналитики = "Подразделение" Тогда
		ПредставлениеАналитикиИменительныйПадеж = НСтр("ru = 'подразделения'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Если ВыпускПродукции Тогда
			ПредставлениеАналитикиИменительныйПадеж = НСтр("ru = 'наименования продукции (услуг)'");
		Иначе
			ПредставлениеАналитикиИменительныйПадеж = НСтр("ru = 'наименования услуг'");
		КонецЕсли;
	Иначе
		ПредставлениеАналитикиИменительныйПадеж = НРег(РазрезАналитики);
	КонецЕсли;
	
	Возврат НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ПредставлениеАналитикиИменительныйПадеж,
				НомерПадежа(Падеж)));
	
КонецФункции

#КонецОбласти

#Область КешируемыеЗначения

// См. также ПрочитатьСсылку

Процедура ЗаполнитьКешТребуетсяСчетРасходовПоОказаниюУслуг(Требуется, Период, Организация) Экспорт
	
	Требуется = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = УчетнаяПолитика.НастройкиУчетаЗатрат(Период, Организация);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.УстановленыВручную КАК УстановленыВручную
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.ПланСчетов КАК СчетаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат.НезавершенноеПроизводство КАК НастройкиНЗП
	|		ПО СчетаУчета.Ссылка = НастройкиНЗП.Ссылка
	|			И СчетаУчета.Счет = НастройкиНЗП.Счет
	|			И (НастройкиНЗП.ВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат КАК Настройки
	|		ПО СчетаУчета.Ссылка = Настройки.Ссылка
	|			И (СчетаУчета.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСчетовЗатрат.КалькуляцияСебестоимости))
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|	И Настройки.УстановленыВручную";
	
	Требуется = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

Процедура ЗаполнитьКешВариантУчетаСтоимостиВыпуска(ВариантУчета, Период, Организация) Экспорт
	
	ВариантУчета = Перечисления.ВариантыУчетаСтоимостиВыпуска.ФактическаяСтоимость;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = УчетнаяПолитика.НастройкиУчетаЗатрат(Период, Организация);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.ВариантУчетаСтоимостиВыпуска КАК ВариантУчета
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|	И Настройки.УстановленыВручную";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУчета = Выборка.ВариантУчета;
	
	ПроверитьПоддерживаетсяПлановаяСебестоимость(ВариантУчета);
	ПроверитьПоддерживаетсяОценкаПродукцииПоПлановойСтоимости(ВариантУчета);
	
КонецПроцедуры

Процедура ЗаполнитьКешОсновнойСчетУчетаЗатрат(Счет, Период, Организация) Экспорт
	
	Счет = ПланыСчетов.Хозрасчетный.ОсновнойСчет("Затраты");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = УчетнаяПолитика.НастройкиУчетаЗатрат(Период, Организация);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Запрос.УстановитьПараметр("НедопустимыеРоли", НедопустимыеРолиОсновнойСчетУчета());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.ОсновнойСчетУчета КАК Счет,
	|	Настройки.УстановленыВручную КАК УстановленыВручную
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат.ПланСчетов КАК СчетаУчета
	|		ПО Настройки.Ссылка = СчетаУчета.Ссылка
	|			И Настройки.ОсновнойСчетУчета = СчетаУчета.Счет
	|			И (НЕ СчетаУчета.Роль В (&НедопустимыеРоли))
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.УстановленыВручную Тогда
		Счет = Выборка.Счет;
		Возврат;
	КонецЕсли;
	
	// Если ОсновнойСчетУчета в настройках не установлен вручную, то считаем его основным только когда
	// он действительно используется. В случае когда его нет среди используемых, основным будет считаться
	// один из использованных счетов.
	Если Выборка.Количество() = 1 Тогда
		ОсновнойАвтоматическийСчет = Выборка.Счет;
	Иначе
		ОсновнойАвтоматическийСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	ИспользуемыеСчета = ИспользуемыеСчетаРасходовПериодаДействияУчетнойПолитики(Период, Организация);
	Если ИспользуемыеСчета.Количество() > 0 Тогда
		ИндексСчета = ИспользуемыеСчета.Найти(ОсновнойАвтоматическийСчет);
		Если ИндексСчета <> Неопределено Тогда
			Счет = ИспользуемыеСчета[ИндексСчета];
		Иначе
			Счет = ИспользуемыеСчета[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет возвращаемый параметр Ведется, признаком использования аналитики Продукция на счете.
// Если в параметре Счет передано значение Неопределено, то параметр Ведется заполняется признаком использования
// аналитики Продукция хотя бы на одном счете затрат, выбранном в учетной политике.
//
// Параметры:
//  Ведется - Булево - возвращаемый параметр.
//  Период - Дата - дата документа.
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет учета расходов, указанный в документе.
//       - Неопределено
//  Организация - СправочникСсылка.Организации - организация, указанная в документе.
//
Процедура ЗаполнитьКешВедетсяУчетЗатратПоПродукции(Ведется, Период, Счет, Организация) Экспорт
	
	Ведется = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = УчетнаяПолитика.НастройкиУчетаЗатрат(Период, Организация);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.ВидАналитики КАК ВидАналитики
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.РазрезыУчета КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|	И &УсловиеСчета
	|	И Настройки.ВидАналитики = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|	И Настройки.Ссылка.УстановленыВручную";
	
	УсловиеСчета = ?(Счет = Неопределено, "ИСТИНА", "Настройки.Счет = &Счет");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСчета", УсловиеСчета);
	
	Ведется = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Заполняет список счетов, для которых в плане счетов или в настройках учетной политики отключено использование
// заданного вида субконто.
// 
// Параметры:
//  СчетаСОтключеннойАналитикой - Неопределено
//                              - Массив Из ПланСчетовСсылка.Хозрасчетный - Возвращаемый параметр
//  Период - Дата - Период записи учетной политики
//  Организация - СправочникСсылка.Организации
//  ВидАналитики - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
// 
Процедура ЗаполнитьКешСчетаСОтключеннойАналитикой(СчетаСОтключеннойАналитикой, Период, Организация, ВидАналитики) Экспорт
	
	СчетаСОтключеннойАналитикой = Новый Массив;
	
	Настройки = БазовыеНастройки(Период, Организация);
	
	Для Каждого СчетУчета Из Настройки.СчетаУчета Цикл
		Если Настройки.Аналитика[СчетУчета].Найти(ВидАналитики) = Неопределено Тогда
			СчетаСОтключеннойАналитикой.Добавить(СчетУчета);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет список калькуляционных счетов.
//
// Параметры:
//  КалькуляционныеСчета - Неопределено
//                       - Массив Из ПланСчетовСсылка.Хозрасчетный - Возвращаемый параметр
//  Период - Дата - Период записи учетной политики
//  Организация - СправочникСсылка.Организации
// 
Процедура ЗаполнитьКешКалькуляционныеСчета(КалькуляционныеСчета, Период, Организация) Экспорт

	КалькуляционныеСчета = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = УчетнаяПолитика.НастройкиУчетаЗатрат(Период, Организация);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Роль", Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиУчетаЗатратПланСчетов.Счет КАК Счет
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.ПланСчетов КАК НастройкиУчетаЗатратПланСчетов
	|ГДЕ
	|	НастройкиУчетаЗатратПланСчетов.Ссылка = &Ссылка
	|	И НастройкиУчетаЗатратПланСчетов.Роль = &Роль
	|	И НастройкиУчетаЗатратПланСчетов.Ссылка.УстановленыВручную
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиУчетаЗатратПланСчетов.Счет.ПометкаУдаления,
	|	НастройкиУчетаЗатратПланСчетов.Счет.Порядок";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		КалькуляционныеСчета = Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФормыНастройки

// Редактирование элементов настройки учета затрат выполняется в формах справочника.
//
// Форме передается объект редактирования настроек (НовыйРедактированиеНастроекУчетаЗатрат),
// помещенный во временное хранилище на сервере.
// Форма отображает свойства редактируемых настроек, а при окончании редактирования -
// меняет состояние объекта редактирования во временном хранилище.
//
// Методы этого раздела берут на себя техническую работу, в частности, по преобразованию из адреса в объект и обратно:
// - при создании формы следует вызвать ПрименитьПараметрыФормыНастроек
// - при нажатии кнопки ОК - методы НачатьУстановкуВыполненныхНастроек и ЗавершитьУстановкуВыполненныхНастроек.
//   между которыми форма должна поменять состояние объекта редактирования, предоставленного из НачатьУстановкуВыполненныхНастроек
// Таким образом, в форме нужно реализовать только методическую часть работы с конкретной настройкой (набором тесно связанных настроек).
// 
// Требования к форме:
// - параметры РедактированиеНастроек, Период, Организация
//   Параметры Период и Организация используются исключительно как естественный ключ формы.
// - реквизит АдресРедактированияНастроек. Могут использоваться Период, Организация (будут заполнены автоматически)
// - может использоваться реквизит и параметр Счет, если в форме предполагается редактирование настроек конкретного счета.
//   Параметр Счет - это строка, уникальный идентификатор ссылки на счет, настройки которого редактируются.
//   Сериализация параметра используется, чтобы использовать его в качестве элемента ссылки внутри форматированной строки.
// - кнопка ФормаОтмена

// Применяет параметры формы настроек, с которыми она открыта, к форме.
// Форма должна быть открыта с параметрами:
// - РедактированиеНастроек - строка, адрес во временном хранилище,
//   по которому размещены редактируемые настройки
// - Счет - строка, сериализованная ссылка на счет,
//   настройки которого редактируются.
//   Параметр используется, если форма предполагает редактирование настройки одного счета.
//
// Параметры:
//  Форма - УправляемаяФорма - общие требования к форме см. в комментарии области
//  Счет  - ПланСчетов.Хозрасчетный - возвращаемый параметр, в который будет помещено значение счета,
//          настройки которого редактируются в форме
// 
// Возвращаемое значение:
//  см. НовыйРедактированиеНастроекУчетаЗатрат
//
Функция ПрименитьПараметрыФормыНастроек(Форма, Счет = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Форма.Параметры.РедактированиеНастроек) Тогда
		Форма.АдресРедактированиеНастроек = Форма.Параметры.РедактированиеНастроек;
	Иначе
		ВызватьИсключение НСтр("ru = 'Параметр РедактированиеНастроек не содержит адрес временного хранилища.'");
	КонецЕсли;
	
	РедактированиеНастроек = ПолучитьИзВременногоХранилища(Форма.АдресРедактированиеНастроек);
	
	ЗаполнитьЗначенияСвойств(Форма, РедактированиеНастроек.Настройки.Контекст);
	
	Если РедактированиеНастроек.ТолькоПросмотр Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		Форма.Элементы.ФормаОтмена.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если Счет = Неопределено Тогда
		Возврат РедактированиеНастроек;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.Параметры.Счет) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано значение обязательного параметра Счет.'");
	КонецЕсли;
	
	Счет = ПланыСчетов.Хозрасчетный.ПолучитьСсылку(Новый УникальныйИдентификатор(Форма.Параметры.Счет));
	
	Если РедактированиеНастроек.Настройки.СчетаУчета.Найти(Счет) = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Указанный Счет отсутствует в редактируемых настройках'");
	КонецЕсли;
	
	Возврат РедактированиеНастроек;
	
КонецФункции

// Предоставляет объект редактирования настроек для изменения в нем значений при успешном окончании работы формы.
//
// Параметры:
//  АдресРедактированиеНастроек - Строка - значение одноименного реквизита формы
// 
// Возвращаемое значение:
//  см. НовыйРедактированиеНастроекУчетаЗатрат
//
Функция НачатьУстановкуВыполненныхНастроек(АдресРедактированиеНастроек) Экспорт
	
	РедактированиеНастроек = ПолучитьИзВременногоХранилища(АдресРедактированиеНастроек);
	ОбновитьКеш(РедактированиеНастроек.Настройки);
	
	Возврат РедактированиеНастроек;
	
КонецФункции

// Выполняет общие действия при окончании редактирования настроек, в частности, валидирует их.
//
// Параметры:
//  АдресРедактированиеНастроек - Строка - значение одноименного реквизита формы
//  РедактированиеНастроек - см. НовыйРедактированиеНастроекУчетаЗатрат
// 
// Возвращаемое значение:
//  см. СводнаяИнформацияРедактированиеНастроек - сводная информация о результате редактирования
//
Функция ЗавершитьУстановкуВыполненныхНастроек(АдресРедактированиеНастроек, РедактированиеНастроек) Экспорт
	
	РедактированиеНастроек.Модифицированность = Истина;
	РедактированиеНастроек.Настройки.УстановленыВручную = Истина;
	
	Исправить(РедактированиеНастроек.Настройки);
	ЗаполнитьКраткоеОписание(РедактированиеНастроек);
	
	ПоместитьВоВременноеХранилище(РедактированиеНастроек, АдресРедактированиеНастроек);
	
	Возврат СводнаяИнформацияРедактированиеНастроек(РедактированиеНастроек);
	
КонецФункции

// Конструктор коллекции, предоставляющей сводную информации о редактируемых настройках для отображения на общей форме
// (например, форме учетной политики)
//
// Параметры:
//  РедактированиеНастроек - см. НовыйРедактированиеНастроекУчетаЗатрат
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция СводнаяИнформацияРедактированиеНастроек(РедактированиеНастроек) Экспорт
	
	СводнаяИнформация = Новый Структура;
	
	СводнаяИнформация.Вставить(
		"УстановленыВручную",
		РедактированиеНастроек.Настройки.УстановленыВручную);
	СводнаяИнформация.Вставить(
		"Описание",
		РедактированиеНастроек.КраткоеОписание);
	СводнаяИнформация.Вставить(
		"СчетаУчета",
		ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(РедактированиеНастроек.Настройки.СчетаУчета));
	СводнаяИнформация.Вставить(
		"КоличествоСчетовУчета",
		РедактированиеНастроек.Настройки.СчетаУчета.Количество());
	
	Возврат СводнаяИнформация;
	
КонецФункции

// Преобразует ссылку в строку УникальногоИдентификатора без дефисов. Если в параметре передана строка,
// то возвращается эта строка.
// 
// Параметры:
//  Значение - ЛюбаяСсылка, Строка - Ссылка на объект или строка.
// 
// Возвращаемое значение:
//  Строка - Строковое представление УникальногоИдентификатора значения, из которого удалены дефисы.
//
Функция СтрокаУникальногоИдентификатораИзСсылки(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат Значение;
	Иначе 
		Возврат СтрЗаменить(XMLСтрока(Значение), "-", "");
	КонецЕсли;

КонецФункции

Функция ПредставлениеСобственнойБазыРаспределения(НаименованиеБазы, ЕдиницаИзмеренияПоказателя) Экспорт
	
	ТекстыПредставления = Новый Массив;
	ТекстыПредставления.Добавить(НаименованиеБазы);

	Если ЗначениеЗаполнено(ЕдиницаИзмеренияПоказателя) Тогда
		ТекстыПредставления.Добавить(ЕдиницаИзмеренияПоказателя);
	КонецЕсли;
	
	Представление = СтрСоединить(ТекстыПредставления, ", ");
			
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область РедактированиеМодификатораБазыРаспределения

// Создает коллекцию, которая хранит сведения о модификаторе базы распределения для его интерактивного редактирования
//
// Параметры:
//  БазаРаспределения - ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов
//  РольСчета - ПеречислениеСсылка.РолиСчетовЗатрат
//  Модификатор - см. НовыйМодификаторБазыРаспределения
//  ОсновнаяНастройка - Булево - Определяет принадлежит ли модификатор основному правилу (настройке) распределения.
// 
// Возвращаемое значение:
//  Структура - состав свойств см. в теле функции
//
Функция РедактированиеМодификатораБазыРаспределения(БазаРаспределения, РольСчета, Знач Модификатор = Неопределено, ОсновнаяНастройка = Ложь) Экспорт
	
	Если Модификатор = Неопределено Тогда
		Модификатор = НовыйМодификаторБазыРаспределения(БазаРаспределения);
	КонецЕсли;
	
	Редактирование = Новый Структура;
	Редактирование.Вставить("БазаРаспределения", БазаРаспределения);
	Редактирование.Вставить("Модификатор",       Модификатор);
	Редактирование.Вставить("РольСчета",         РольСчета);
	Редактирование.Вставить("ТребуетНастройки",  Ложь);
	Редактирование.Вставить("Представление",     "");
	Редактирование.Вставить("ОсновнаяНастройка", ОсновнаяНастройка);
	
	ОбновитьРедактированиеМодификатораБазыРаспределения(Редактирование);
	
	Возврат Редактирование;
	
КонецФункции


// Обновляет значения свойств модификатора базы распределения, необходимых для его интерактивного редактирования
//
// Параметры:
//  Редактирование - см. РедактированиеМодификатораБазыРаспределения
//
Процедура ОбновитьРедактированиеМодификатораБазыРаспределения(Редактирование) Экспорт
	
	Редактирование.ТребуетНастройки = МодификаторТребуетНастройки(Редактирование.Модификатор, Редактирование.БазаРаспределения);
	Редактирование.Представление    = ПредставлениеМодификатора(
		Редактирование.Модификатор,
		Редактирование.БазаРаспределения,
		Редактирование.РольСчета,
		Редактирование.ОсновнаяНастройка);
	
КонецПроцедуры

// Возвращает список статей затрат, содержащихся в табличной части элемента справочника
// СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов
//
// Параметры:
//  Ссылка - СправочникСсылка.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов
//
// Возвращаемое значение:
//  Массив - список статей затрат
//
Функция СодержимоеСпискаСтатейЗатрат(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Список.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.СтатьиЗатрат КАК Список
	|ГДЕ
	|	Список.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьяЗатрат";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяЗатрат");
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ПредставлениеСпискаАналитики(АналитикаСчета, Падеж = "Именительный", ВыпускПродукции = Истина) Экспорт
	
	ПредставленияАналитикиСчета = Новый Массив;
	
	Для Каждого РазрезАналитики Из АналитикаСчета Цикл
		
		ПредставлениеРазрезаАналитики = ПредставлениеАналитикиСчета(РазрезАналитики, ВыпускПродукции, Падеж);
		
		Если Не ЗначениеЗаполнено(ПредставлениеРазрезаАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставленияАналитикиСчета.Добавить(ПредставлениеРазрезаАналитики);
		
	КонецЦикла;
	
	Возврат ПредставленияАналитикиСчета;

КонецФункции

Функция ПредставлениеПорядкаРаспределения(Приемники, Настройки) Экспорт
	
	ПредставленияАналитики = ПредставлениеСпискаАналитики(
		Приемники.Аналитика,
		"Творительный",
		Настройки.ВыпускПродукции);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить(
		"СчетаПриемники",
		ПредставлениеСпискаСчетов(Приемники.Счета));
	ПараметрыТекста.Вставить(
		"АналитикаПриемников",
		ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставленияАналитики));
	
	// Представление порядка распределения будет формироваться только в том случае, когда действительно может происходит
	// распределение: используется несколько калькуляционных счетов или несколько аналитик приемника.
	// В противном случае будет возвращена пустая строка и вместо предложения о распределении нужно использовать
	// предложение о переносе сумм.
	
	ШаблонСпискаСчетовПриемников = "";
	Если Не ЗначениеЗаполнено(Приемники.Счета) И ЗначениеЗаполнено(Приемники.Аналитика) Тогда
		ШаблонСпискаСчетовПриемников = НСтр("ru = 'между [АналитикаПриемников]'");
	ИначеЕсли Приемники.Счета.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(Приемники.Аналитика) Тогда
			ШаблонСпискаСчетовПриемников = НСтр("ru = 'между [АналитикаПриемников] на счете [СчетаПриемники]'");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Приемники.Аналитика) Тогда
			ШаблонСпискаСчетовПриемников = НСтр("ru = 'между [АналитикаПриемников] на счетах [СчетаПриемники]'");
		Иначе
			ШаблонСпискаСчетовПриемников = НСтр("ru = 'между счетами [СчетаПриемники]'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСпискаСчетовПриемников, ПараметрыТекста);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Коллекции

Функция НовыйКонтекстНастроекУчетаЗатрат()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Период",           '0001-01-01');
	Контекст.Вставить("Организация",      Справочники.Организации.ПустаяСсылка()); // организация, учетная политика которой используется
	Контекст.Вставить("ПериодДействия",   '0001-01-01');
	Контекст.Вставить("ОтборОрганизация", Справочники.Организации.ПустаяСсылка());
	// Отбор позволяет ограничить применение настроек филиалом или только головной организацией.
	// Если не указан, то предполагается вся организация, включая все филиалы.
	Возврат Контекст;
	
КонецФункции

Функция НовыйНастройкиЗакрытияСчета()
	
	// В коде модуля допускается сокращать результат конструктора как ЗакрытиеСчета
	
	Настройки = Новый Структура;
	Настройки.Вставить("Роль",                                         Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж); // См. УстановитьРоль, СчетаРоли
	Настройки.Вставить("НезавершенноеПроизводство",                    Перечисления.ВариантыУчетаНезавершенногоПроизводства.ПустаяСсылка());
	Настройки.Вставить("РежимСовместимостиНезавершенногоПроизводства", Ложь); // Булево
	Настройки.Вставить("Распределение",                                НовыйНастройкиРаспределенияСчета());
	Настройки.Вставить("НеРаспределятьЗатратыНаДоставку",              Ложь);
	// Устарело. Оставлено для совместимости, в будущих версиях может быть удалено.
	// См. УстановитьРольСчетаИзНастроекДляСовместимости
	Настройки.Вставить("Направление", "");
	
	// Служебное (private) кешируемое значение для упрощения работы с отдельными свойствами.
	// В будущем предполагается использование этих значений в ПравилаРаспределенияРасходов.
	// Получать значения следует с помощью ПриемникиРаспределения.
	// См. также НовыйПриемникиРаспределения
	Настройки.Вставить("Приемники", Неопределено);
	
	// Служебное (private) значение для заполнения настройки для совместимости
	Настройки.Вставить("ИсходноеНаправление", "");
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкиРаспределенияСчета()
	
	// Порядок записей - естественный для пользователя, от общего к частному
	
	НастройкиРаспределения = Новый ТаблицаЗначений;
	НастройкиРаспределения.Колонки.Добавить("Ссылка", ТипСсылкиНастройкиРаспределения());
	Для Каждого ОписаниеПоля Из ПоляДетальнойНастройкиРаспределения() Цикл
		НастройкиРаспределения.Колонки.Добавить(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
	КонецЦикла;
	НастройкиРаспределения.Колонки.Добавить(
		"БазаРаспределения",
		Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	НастройкиРаспределения.Колонки.Добавить("Модификатор"); // См. НовыйМодификаторБазыРаспределения
	
	НастройкиРаспределения.Индексы.Добавить("Ссылка");
	
	Возврат НастройкиРаспределения;
	
КонецФункции

Функция НовыйПриемникиРаспределения()
	
	Приемники = Новый Структура;
	
	Приемники.Вставить("Счета",     Новый Массив);
	Приемники.Вставить("Аналитика", Новый Массив); // Видов субконто, Имен измерений
	
	Возврат Приемники;
	
КонецФункции

// Таблица НастройкаАналитикиБазы используется для хранения настройки использования счетов и соответствущих этим счетам
// аналитик базы распределения. 
//  * СчетСтатус -          0 - счет учета не отмечен как используемый в базе распределения,
//                          1 - отмечен как используемый.
//  * ВидАналитикиСтатус - -1 - вид аналитики не совместим со счетом учета:
//                              а) субконто не доступно для редактирования пользователем. Например, номенклатурные группы не отображаются
//                                 в интерфейсе при отключенной константе ИспользоватьНесколькоНоменклатурныхГрупп;
//                              б) на счете отсуствует указанное субконто или, если вид аналитики - это "Подразделение",
//                                 не включен учет по подразделениям;
//                              в) аналитика не входит в перечень отображаемых аналитик, установленных в учетной политике.
//                              Используется на форме настройки модификатора базы
//                              для управления отображением элементов. С точки зрения работы алгоритмов вне формы
//                              эквивалентен статусу 0.
//                          0 - вид аналитики не отмечен как используемый для счета,
//                          1 - вид аналитики отмечен как используемый для счета.
//                        
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции.
//
Функция НовыйНастройкаАналитикиБазы()
	
	ТаблицаАналитики = Новый ТаблицаЗначений;
	ТаблицаАналитики.Колонки.Добавить("Счет",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАналитики.Колонки.Добавить("СчетСтатус",                ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ТаблицаАналитики.Колонки.Добавить("ВидАналитики",
		Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.ЗначенияАналитикиБазыРаспределения.Реквизиты.ВидАналитики.Тип);
	ТаблицаАналитики.Колонки.Добавить("ВидАналитикиСтатус",        ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ТаблицаАналитики.Колонки.Добавить("ВидАналитикиПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(
		Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДлинаНаименования));
	
	Возврат ТаблицаАналитики;
	
КонецФункции

Функция ПоляДетальнойНастройкиРаспределения(ИсполняемыеНастройки = Ложь)
	
	Поля = Новый Структура;
	
	Если Не ИсполняемыеНастройки Тогда
		// Исполняемые настройки приводятся к конкретной организации
		Поля.Вставить("Филиал",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	Поля.Вставить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Поля.Вставить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Возврат Поля;
	
КонецФункции

Функция ЭтоДетальнаяНастройкаРаспределения(Запись)
	
	Для Каждого ОписаниеПоля Из ПоляДетальнойНастройкиРаспределения() Цикл
		Если ЗначениеЗаполнено(Запись[ОписаниеПоля.Ключ]) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НовыйМодификаторБазыРаспределения(БазаРаспределения)
	
	Модификатор = Неопределено;
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		Модификатор = Новый Структура;
		Модификатор.Вставить("СтатьиЗатрат", Новый Массив);
		// В информационной базе отбор может храниться, в том числе,
		// в виде именованного списка (в отдельном справочнике списков)
		Модификатор.Вставить(
			"Ссылка",
			Справочники.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка());
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		
		Модификатор = Новый Структура;
		// Аналитика, на которую относятся расходы в результате распределения
		Модификатор.Вставить("Счет",             ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		Модификатор.Вставить("Подразделение",    Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		
		Модификатор = Новый Структура;
		Модификатор.Вставить("НаименованиеБазы",            "");
		Модификатор.Вставить("ЕдиницаИзмеренияПоказателя",  "");
		// Содержит колонки "Счет", "Коэффициент", а также колонки, соответствующие видам субконто счетов, на которые распределяются
		// затраты собственной базы распределения.
		Модификатор.Вставить("ТаблицаБазы",                    Новый ТаблицаЗначений);
		Модификатор.Вставить("НастройкаАналитикиБазы",         НовыйНастройкаАналитикиБазы());
		Модификатор.Вставить("Счет",                           ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Модификатор.Вставить("ИдентификаторБазыРаспределения", "");

	КонецЕсли;
	
	Возврат Модификатор;
	
КонецФункции

Функция ТребуетсяРаспределениеЗатрат(ЗакрытиеСчета, Настройки)
	Приемники = ПриемникиРаспределения(ЗакрытиеСчета, Настройки);
	Возврат ЗначениеЗаполнено(Приемники.Аналитика) Или (ЗначениеЗаполнено(Приемники.Счета) И ЗатратыМогутРаспределятьсяМеждуСчетами(ЗакрытиеСчета.Роль));
КонецФункции

Процедура УстановитьРоль(Счет, Роль, Настройки)
	
	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
	Иначе
		ЗакрытиеСчета = Счет;
	КонецЕсли;
	
	ЗакрытиеСчета.Роль = Роль;
	
	Настройки.Кеш.СчетаПоРолям = Неопределено;
	
КонецПроцедуры

Функция РазрезыРаспределения(Настройки)
	
	Если Настройки.Кеш.РазрезыРаспределения <> Неопределено Тогда
		Возврат Настройки.Кеш.РазрезыРаспределения;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаЗатрат", Настройки.СчетаУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаЗатрат)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	Запрос.Выполнить();
	
	Настройки.Кеш.РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределения(МенеджерВременныхТаблиц);
	
	Возврат Настройки.Кеш.РазрезыРаспределения;
	
КонецФункции

// Обновляет кеш настроек.
//
// Параметры:
//   Настройки - см. НовыйБазовыеНастройкиУчетаЗатрат
//
Процедура ОбновитьКеш(Настройки)
	
	Настройки.Кеш.СчетаПоРолям                           = Неопределено;
	Настройки.Кеш.СчетОсновногоНабораПравилРаспределения = Неопределено;
	Настройки.Кеш.РазрезыРаспределения                   = Неопределено;
	
	Для Каждого ОписаниеЗакрытияСчета Из Настройки.Закрытие Цикл
		ОписаниеЗакрытияСчета.Значение.Приемники = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуемыеСчетаРасходовПериодаДействияУчетнойПолитики(Период, Организация)

	ПериодДействия = РегистрыСведений.УчетнаяПолитика.ПериодДействия(
			Период,
			Организация);
	ИспользуемыеСчета = УчетЗатрат.ИспользуемыеСчетаРасходов(
			Период,
			ПериодДействия,
			Организация);
			
	Возврат ИспользуемыеСчета;

КонецФункции

Функция ЗатратыМогутРаспределятьсяМеждуСчетами(РольСчета)
	Возврат РольСчета = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты;
КонецФункции

Функция АналитикаНезавершенногоПроизводстваСодержитПродукцию(НастройкиУчетаЗатрат, Счет)
	
	Если НастройкиУчетаЗатрат.АналитикаНезавершенногоПроизводства[Счет] <> Неопределено
		И НастройкиУчетаЗатрат.АналитикаНезавершенногоПроизводства[Счет].Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Ограничения

Функция СчетаОбщехозяйственныеРасходы()
	
	Возврат УчетЗатрат.СчетаРасходов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы));
	
КонецФункции

Функция НастраиваемаяАналитикаКалькуляционныеСчета()
	
	// перечень разрезов учета, которые можно добавить на счет непосредственно с помощью интерактивного редактирования настроек
	
	Аналитика = Новый Массив;
	Аналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
	Возврат Аналитика;
	
КонецФункции

Функция АналитикаНезавершенногоПроизводстваПоУмолчанию()
	
	Аналитика = Новый Массив;
	Аналитика.Добавить("Подразделение");
	Аналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Возврат Аналитика;
	
КонецФункции

Функция ПоддерживаетсяНастройкаАналитикиСчета(Счет, Настройки, Кеш = Неопределено)
	
	ЗакрытиеСчета = Настройки.Закрытие[Счет];
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Кеш) <> Тип("Структура") Тогда
		НастраиваемаяАналитика = НастраиваемаяАналитика();
	ИначеЕсли Не Кеш.Свойство("НастраиваемаяАналитика") Тогда
		НастраиваемаяАналитика = НастраиваемаяАналитика();
		Кеш.Вставить("НастраиваемаяАналитика", НастраиваемаяАналитика);
	Иначе
		НастраиваемаяАналитика = Кеш.НастраиваемаяАналитика;
	КонецЕсли;
	
	НастраиваемаяАналитикаСчета = НастраиваемаяАналитика[Счет];
	Возврат ЗначениеЗаполнено(НастраиваемаяАналитикаСчета);
	
КонецФункции

Функция ВариантыУчетаНезавершенноеПроизводствоНеВедется()

	ВариантыУчетаНеВедется = Новый Массив;
	ВариантыУчетаНеВедется.Добавить(Перечисления.ВариантыУчетаНезавершенногоПроизводства.ПустаяСсылка());
	ВариантыУчетаНеВедется.Добавить(Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется);
	
	Возврат ВариантыУчетаНеВедется;
	
КонецФункции

Функция ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой()

	ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой = Новый Массив;
	ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой.Добавить(Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации);
	Возврат ВариантыУчетаНезавершенноеПроизводствоОпределяетсяАналитикой;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура НачатьЗаполнениеБазовыхНастроек(Настройки, Знач Источник = Неопределено, ДопускаютсяПустые = Истина)
	
	ТипИсточникаНастроек = ТипЗнч(Источник);
	РедактируемаяЗаписьУчетнойПолитики = Неопределено;
	
	Если ТипИсточникаНастроек = Тип("РегистрСведенийМенеджерЗаписи.УчетнаяПолитика") Тогда
		РедактируемаяЗаписьУчетнойПолитики = Источник;
	ИначеЕсли Не ЗначениеЗаполнено(Источник) Тогда
		Источник = УчетнаяПолитика.НастройкиУчетаЗатрат(Настройки.Контекст.Период, Настройки.Контекст.Организация);
		ТипИсточникаНастроек = ТипЗнч(Источник);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Настройки.Контекст.ПериодДействия) Тогда
		Настройки.Контекст.ПериодДействия = РегистрыСведений.УчетнаяПолитика.ПериодДействия(
			Настройки.Контекст.Период,
			Настройки.Контекст.Организация);
	КонецЕсли;
	
	Если ТипИсточникаНастроек = Тип("СправочникСсылка.НастройкиУчетаЗатрат") И ЗначениеЗаполнено(Источник) Тогда
		ПрочитатьСсылку(Настройки, Источник, ДопускаютсяПустые, РедактируемаяЗаписьУчетнойПолитики);
	Иначе
		ЗаполнитьПоУмолчанию(Настройки, ДопускаютсяПустые, РедактируемаяЗаписьУчетнойПолитики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьЗаполнениеБазовыхНастроек(Настройки)
	
	// Модификация конфигурации
	ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриЗаполненииНастроекУчетаЗатрат(Настройки);
	УстановитьРольСчетаИзНастроекДляСовместимости(Настройки);
	
КонецПроцедуры

Процедура ДобавитьСчетАвтоматическийВыпускПродукцииПоДаннымПродаж(Настройки, РедактируемаяЗаписьУчетнойПолитики)
	
	СчетАвтоматическийВыпуск = РасчетВыпускаПоДаннымПродаж.СчетЗатратДляВыпущеннойПродукции();
	
	Если Настройки.СчетаУчета.Найти(СчетАвтоматическийВыпуск) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемаяЗаписьУчетнойПолитики = Неопределено Тогда
		АвтоматическийВыпуск = УчетнаяПолитика.УчетВыпускаПродукцииПоДаннымПродаж(
			Настройки.Контекст.Организация,
			Настройки.Контекст.Период);
	Иначе
		АвтоматическийВыпуск = РедактируемаяЗаписьУчетнойПолитики.УчетВыпускаПродукцииПоДаннымПродаж;
	КонецЕсли;
	
	Если Не АвтоматическийВыпуск Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.СчетаУчета.Вставить(0, СчетАвтоматическийВыпуск);
	
КонецПроцедуры

Процедура ЗаполнитьПриемникиРаспределенияСчета(ЗакрытиеСчета, Настройки)
	
	Если ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		
		КалькуляционныеСчета = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки);
		АналитикаКалькуляционныхСчетов = Новый Соответствие;
		
		Для Каждого СчетПриемник Из КалькуляционныеСчета Цикл
			
			ЗакрытиеСчета.Приемники.Счета.Добавить(СчетПриемник);
			
			Для Каждого Разрез Из Настройки.ОтображаемаяАналитика[СчетПриемник] Цикл
				АналитикаКалькуляционныхСчетов.Вставить(Разрез, Разрез);
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого РазрезКалькуляции Из УчетЗатрат.РазрезыКалькуляции() Цикл
			Если АналитикаКалькуляционныхСчетов[РазрезКалькуляции] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗакрытиеСчета.Приемники.Аналитика.Добавить(РазрезКалькуляции);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
			ЗакрытиеСчета.Приемники.Аналитика, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
			
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		
		ЗакрытиеСчета.Приемники.Аналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
	
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		
		ЗакрытиеСчета.Приемники.Аналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж Тогда
		
		ЗаполнитьПриемникиРаспределенияНаФинансовыйРезультат(
			ЗакрытиеСчета.Приемники,
			ПланыСчетов.Хозрасчетный.СебестоимостьПродаж,
			Настройки);
		
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		
		ЗаполнитьПриемникиРаспределенияНаФинансовыйРезультат(
			ЗакрытиеСчета.Приемники,
			ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы,
			Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПриемникиРаспределенияНаФинансовыйРезультат(Приемники, СчетРезультата, Настройки)
	
	Приемники.Счета.Добавить(СчетРезультата);
	
	АналитикаРаспределенияСчета = Новый Соответствие;
	РазрезыРаспределения = РазрезыРаспределения(Настройки);
	РасширеннаяАналитикаЗатрат.ЗаполнитьАналитикуРаспределенияНаФинансовыйРезультат(
		АналитикаРаспределенияСчета,
		СчетРезультата,
		РазрезыРаспределения);
		
	Если Не ЗначениеЗаполнено(АналитикаРаспределенияСчета) Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемаяАналитика = ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика();
	Для Каждого ОписаниеРазрезаРаспределения Из АналитикаРаспределенияСчета Цикл
		
		Если НеиспользуемаяАналитика.Найти(ОписаниеРазрезаРаспределения.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Приемники.Аналитика.Добавить(ОписаниеРазрезаРаспределения.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкиПланаСчетов(АналитикаСчетов, ОтображаемаяАналитикаСчетов, СчетаУчета)
	
	Для Каждого Счет Из СчетаУчета Цикл
		АналитикаСчетов.Вставить(Счет, Новый Массив);
		ОтображаемаяАналитикаСчетов.Вставить(Счет, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаУчета",              СчетаУчета);
	Запрос.УстановитьПараметр("НеиспользуемаяАналитика", ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидАналитикиЗатрат,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК Порядок,
	|	НЕ ХозрасчетныйВидыСубконто.ВидСубконто В (&НеиспользуемаяАналитика) КАК Отображаемая
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчета)
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	""Подразделение"",
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|	И Хозрасчетный.УчетПоПодразделениям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АналитикаСчета = АналитикаСчетов[Выборка.Счет];
		Если АналитикаСчета <> Неопределено Тогда
			АналитикаСчета.Добавить(Выборка.ВидАналитикиЗатрат);
		КонецЕсли;
		
		Если Не Выборка.Отображаемая Тогда
			Продолжить;
		КонецЕсли;
		
		ОтображаемаяАналитикаСчета = ОтображаемаяАналитикаСчетов[Выборка.Счет];
		Если ОтображаемаяАналитикаСчета <> Неопределено Тогда
			ОтображаемаяАналитикаСчета.Добавить(Выборка.ВидАналитикиЗатрат);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиЗакрытия(Настройки)
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ИнициализироватьНастройкиЗакрытияСчета(Настройки, Счет);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиЗакрытияСчета(Настройки, Счет)
	
	ЗакрытиеСчета = НовыйНастройкиЗакрытияСчета();
	Настройки.Закрытие.Вставить(Счет, ЗакрытиеСчета);
	
	ОсновнаяРоль = Перечисления.РолиСчетовЗатрат.ОсновнаяРольСчета(Счет);
	УстановитьРоль(ЗакрытиеСчета, ОсновнаяРоль, Настройки);
	
КонецПроцедуры

Процедура ОграничитьРазрезыУчетаНастройкой(АналитикаСчетов, ОтображаемаяАналитикаСчетов, Ссылка)
	
	ОтключаемаяАналитика = НастраиваемаяАналитика();
	Если Не ЗначениеЗаполнено(ОтключаемаяАналитика) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Счет КАК Счет,
	|	Настройки.ВидАналитики КАК ВидАналитики
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.РазрезыУчета КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтключаемаяАналитикаСчета = ОтключаемаяАналитика[Выборка.Счет];
		Если ОтключаемаяАналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОтключаемаяАналитикаСчета, Выборка.ВидАналитики);
		
	КонецЦикла;
	
	ОтключитьАналитику(АналитикаСчетов,             ОтключаемаяАналитика);
	ОтключитьАналитику(ОтображаемаяАналитикаСчетов, ОтключаемаяАналитика);
	
КонецПроцедуры

Процедура ОтключитьАналитику(АналитикаСчетов, ОтключаемаяАналитика)
	
	Для Каждого ОтключаемаяАналитикаСчета Из ОтключаемаяАналитика Цикл
		
		АналитикаСчета = АналитикаСчетов[ОтключаемаяАналитикаСчета.Ключ];
		
		Если АналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВидАналитики Из ОтключаемаяАналитикаСчета.Значение Цикл
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(АналитикаСчета, ВидАналитики);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Валидация

Процедура ИсправитьОсновнойСчетУчета(Настройки)
	
	// См. также ЗаполнитьКешОсновнойСчетУчетаЗатрат
	
	Если ЗначениеЗаполнено(Настройки.ОсновнойСчетУчета)
		И Настройки.СчетаУчета.Найти(Настройки.ОсновнойСчетУчета) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.ОсновнойСчетУчета = ПланыСчетов.Хозрасчетный.ОсновнойСчет("Затраты");
	
	Если Не ЗначениеЗаполнено(Настройки.СчетаУчета) Тогда
		Возврат;
	КонецЕсли;
	
	НедопустимыеРоли = НедопустимыеРолиОсновнойСчетУчета();
	
	ОсновнойСчет = Настройки.СчетаУчета[0];
	ЗакрытиеСчета = Настройки.Закрытие[ОсновнойСчет];
	Если ЗакрытиеСчета = Неопределено
		Или НедопустимыеРоли.Найти(ЗакрытиеСчета.Роль) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.ОсновнойСчетУчета = ОсновнойСчет;
	
КонецПроцедуры

Процедура ПроверитьПоддерживаетсяПлановаяСебестоимость(ВариантУчетаСтоимостиВыпуска)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ФактическаяСтоимость;
	
КонецПроцедуры

Процедура ПроверитьПоддерживаетсяОценкаПродукцииПоПлановойСтоимости(ВариантУчетаСтоимостиВыпуска)
	
	Если ВариантУчетаСтоимостиВыпуска <> Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость Тогда
		Возврат;
	КонецЕсли;
	
	Поддерживается = Ложь;
	ОценкаПродукцииПоПлановойСтоимости.ОпределитьФункциональностьПоддерживается(Поддерживается);
	
	Если Поддерживается Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ОтклоненияСтоимости;
	
КонецПроцедуры

Процедура ИсправитьСчетВыпускПродукции(Настройки)
	
	Если Не Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСчетВыпускПродукции(Настройки.ВариантУчетаСтоимостиВыпуска) Тогда
		ИсключитьСчетВыпускаПродукции(Настройки);
	ИначеЕсли Настройки.СчетаУчета.Найти(ПланыСчетов.Хозрасчетный.ВыпускПродукции) = Неопределено Тогда
		Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ФактическаяСтоимость;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьСчетВыпускаПродукции(Настройки)

	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Настройки.СчетаУчета, ПланыСчетов.Хозрасчетный.ВыпускПродукции);

КонецПроцедуры

Процедура ИсправитьАналитику(Настройки)
	
	Если Не Настройки.УстановленыВручную Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольныеНастройки = НовыйБазовыеНастройкиУчетаЗатрат();
	КонтрольныеНастройки.СчетаУчета = Настройки.СчетаУчета;
	
	ПрименитьНастройкиПланаСчетов(
		КонтрольныеНастройки.Аналитика,
		КонтрольныеНастройки.ОтображаемаяАналитика,
		КонтрольныеНастройки.СчетаУчета);
		
	РасширенныеКонтрольныеНастройки = ОбщегоНазначения.СкопироватьРекурсивно(КонтрольныеНастройки);
		
	РасширитьНастройкиПланаСчетовНастраиваемойАналитикой(
		РасширенныеКонтрольныеНастройки.Аналитика,
		РасширенныеКонтрольныеНастройки.ОтображаемаяАналитика,
		РасширенныеКонтрольныеНастройки.СчетаУчета);
	
	ИменаКоллекцийАналитики = Новый Массив; // Обрабатываемые коллекции, см. НовыйБазовыеНастройкиУчетаЗатрат
	ИменаКоллекцийАналитики.Добавить("Аналитика");
	ИменаКоллекцийАналитики.Добавить("ОтображаемаяАналитика");
	
	Для Каждого ИмяКоллекции Из ИменаКоллекцийАналитики Цикл
		
		Для Каждого Счет Из Настройки.СчетаУчета Цикл
			
			АналитикаСчета                       = Настройки[ИмяКоллекции][Счет];
			КонтрольнаяАналитикаСчета            = КонтрольныеНастройки[ИмяКоллекции][Счет];
			РасширеннаяКонтрольнаяАналитикаСчета = РасширенныеКонтрольныеНастройки[ИмяКоллекции][Счет];
			
			Если АналитикаСчета = Неопределено Тогда
				// Убедимся, что для всех счетов определена аналитика
				Настройки[ИмяКоллекции].Вставить(Счет, КонтрольнаяАналитикаСчета);
			Иначе
				
				// Убедимся, что нет недопустимых для счета видов аналитики
				КоличествоЭлементов = АналитикаСчета.Количество();
				Для НомерСКонца = 1 По КоличествоЭлементов Цикл
					Индекс = КоличествоЭлементов - НомерСКонца;
					Если РасширеннаяКонтрольнаяАналитикаСчета.Найти(АналитикаСчета[Индекс]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					АналитикаСчета.Удалить(Индекс);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла; //По счетам
		
	КонецЦикла; // По ИменаКоллекцийАналитики
	
КонецПроцедуры

Процедура ИсправитьАналитикуНезавершенногоПроизводства(Настройки)

	Для Каждого СчетУчета Из СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки) Цикл
		
		АналитикаНезавершенногоПроизводства = Настройки.АналитикаНезавершенногоПроизводства[СчетУчета];
		Если Настройки.АналитикаНезавершенногоПроизводства[СчетУчета] = Неопределено Тогда
			АналитикаНезавершенногоПроизводства = АналитикаНезавершенногоПроизводстваПоУмолчанию();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АналитикаНезавершенногоПроизводства, НастраиваемаяАналитикаКалькуляционныеСчета(), Истина);
		КонецЕсли;
		
		ЛишняяАналитика = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			АналитикаНезавершенногоПроизводства,
			Настройки.Аналитика[СчетУчета]);
		Настройки.АналитикаНезавершенногоПроизводства.Вставить(СчетУчета, ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			АналитикаНезавершенногоПроизводства,
			ЛишняяАналитика));
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьНастройкиЗакрытия(Настройки)
	
	// Незавершенное производство применимо только к калькуляционным счетам
	// См. также ЗаполнитьКешТребуетсяСчетРасходовПоОказаниюУслуг
	Для Каждого ОписаниеЗакрытиеСчета Из Настройки.Закрытие Цикл
		
		Если ОписаниеЗакрытиеСчета.Значение.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЗакрытиеСчета.Значение.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ПустаяСсылка();
		
	КонецЦикла;
	
	ИсправитьПростойУчетБезКалькуляцииСебестоимости(Настройки);
	
	ИсправитьТолькоУправленческиеРасходы(Настройки);
	
	ИсправитьСебестоимостьПродажНаУправленческиеРасходы(Настройки);
	
	ИсправитьКосвенныеЗатратыНаУправленческиеРасходы(Настройки);
	
	ИсправитьНеприменимыеБазыРаспределения(Настройки);
	
	УстановитьНастройкиЗакрытияДляСовместимости(Настройки);
	
КонецПроцедуры

Процедура ИсправитьПоКонтексту(Настройки)
	
	Если Не ЗначениеЗаполнено(Настройки.Контекст.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	КешФилиалов      = Неопределено;       // Кеш заполняется полностью при первом обращении
	                                       // Неопределено означает, что кеш подлежит заполнению
	КешПодразделений = Новый Соответствие; // Кеш дополняется по мере требования
	
	ИсправитьФилиалы(Настройки.Распределение, Настройки.Контекст.Организация, КешФилиалов);
	ИсправитьПодразделения(Настройки.Распределение, Настройки.Контекст.Организация, КешПодразделений);
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		ИсправитьФилиалы(ЗакрытиеСчета.Распределение, Настройки.Контекст.Организация, КешФилиалов);
		
		ИсправитьПодразделения(ЗакрытиеСчета.Распределение, Настройки.Контекст.Организация, КешПодразделений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьФилиалы(НастройкаРаспределения, Организация, КешФилиалов)
	
	Если КешФилиалов = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КешФилиалов) <> Тип("Соответствие") Тогда
		Филиалы = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
		Если Филиалы.Количество() < 2 Тогда
			КешФилиалов = Ложь;
			Возврат;
		КонецЕсли;
		КешФилиалов = Новый Соответствие;
		Для Каждого Филиал Из Филиалы Цикл
			КешФилиалов.Вставить(Филиал, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Правило Из НастройкаРаспределения Цикл
		
		Если Не ЗначениеЗаполнено(Правило.Филиал) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КешФилиалов[Правило.Филиал] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Правило.Филиал = Организация;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьПодразделения(НастройкиРаспределения, Организация, ОрганизацииПодразделений)
	
	Если ОрганизацииПодразделений = Неопределено Тогда
		ОрганизацииПодразделений = Новый Соответствие;
	КонецЕсли;
	
	ВыбранныеПодразделения = Новый Соответствие;
	Для Каждого НастройкаРаспределения Из НастройкиРаспределения Цикл
		
		ВыбранныеПодразделения.Вставить(НастройкаРаспределения.Подразделение, Истина);
		ВыбранныеПодразделения.Вставить(ПодразделениеМодификатора(НастройкаРаспределения.Модификатор), Истина);
		
	КонецЦикла;
	
	ПодразделенияДляПроверки = Новый Массив;
	Для Каждого ОписаниеПодразделения Из ВыбранныеПодразделения Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеПодразделения.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОрганизацииПодразделений[ОписаниеПодразделения.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделенияДляПроверки.Добавить(ОписаниеПодразделения.Ключ);
		
	КонецЦикла;
	
	ОписанияПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПодразделенияДляПроверки, "Владелец");
	Для Каждого ОписаниеПодразделения Из ОписанияПодразделений Цикл
		ОрганизацииПодразделений.Вставить(ОписаниеПодразделения.Ключ, ОписаниеПодразделения.Значение.Владелец);
	КонецЦикла;
		
	Для Каждого НастройкаРаспределения Из НастройкиРаспределения Цикл
		
		ПроверяемыйВладелец = НастройкаРаспределения.Филиал;
		Если Не ЗначениеЗаполнено(ПроверяемыйВладелец) Тогда
			ПроверяемыйВладелец = Организация;
		КонецЕсли;
		
		// Подразделение в отборе затрат
		ДопустимыйВладелец = ОрганизацииПодразделений[НастройкаРаспределения.Подразделение];
		Если ПроверяемыйВладелец <> ДопустимыйВладелец Тогда
			НастройкаРаспределения.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
		// Подразделение в модификаторе
		ПроверяемоеПодразделение = ПодразделениеМодификатора(НастройкаРаспределения.Модификатор);
		Если ЗначениеЗаполнено(ПроверяемоеПодразделение) Тогда
			ДопустимыйВладелец = ОрганизацииПодразделений[ПроверяемоеПодразделение];
			Если ПроверяемыйВладелец <> ДопустимыйВладелец Тогда
				НастройкаРаспределения.Модификатор.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НедопустимыеРолиОсновнойСчетУчета()
	
	НедопустимыеРоли = Новый Массив;
	
	НедопустимыеРоли.Добавить(Перечисления.РолиСчетовЗатрат.ВыпускПродукции);
	НедопустимыеРоли.Добавить(Перечисления.РолиСчетовЗатрат.ПрочиеРасходы);
	
	Возврат НедопустимыеРоли;
	
КонецФункции

Процедура РасширитьНастройкиПланаСчетовНастраиваемойАналитикой(АналитикаСчетов, ОтображаемаяАналитикаСчетов, СчетаУчета)
	
	НастраиваемаяАналитика  = НастраиваемаяАналитика();
	НеотображаемаяАналитика = ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика();
	
	Для Каждого Счет Из СчетаУчета Цикл
		
		НастраиваемаяАналитикаСчета = НастраиваемаяАналитика[Счет];
		Если НастраиваемаяАналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АналитикаСчета = АналитикаСчетов[Счет];
		ОтображаемаяАналитикаСчета = ОтображаемаяАналитикаСчетов[Счет];
		
		Для Каждого РазрезАналитики Из НастраиваемаяАналитикаСчета Цикл
			
			Если АналитикаСчета.Найти(РазрезАналитики) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			АналитикаСчета.Добавить(РазрезАналитики);
			
			Если НеотображаемаяАналитика.Найти(РазрезАналитики) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			ОтображаемаяАналитикаСчета.Добавить(РазрезАналитики);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодразделениеМодификатора(Модификатор)
	
	Если ТипЗнч(Модификатор) <> Тип("Структура") Тогда
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Модификатор.Свойство("Подразделение") Тогда
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Модификатор.Подразделение;
	
КонецФункции

Процедура ИсправитьОсновнойНаборПравилРаспределения(Настройки)
	
	Если ЗначениеЗаполнено(Настройки.Распределение) Тогда
		ИсправитьЗакрытиеСчетовДляНеприменимыхБазРаспределенияОсновнойНастройки(Настройки);
		Возврат;
	КонецЕсли;
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Если Не ЗначениеЗаполнено(ЗакрытиеСчета.Распределение) Тогда
			Продолжить;
		КонецЕсли;
		
		ОсновныеНастройки = ЗакрытиеСчета.Распределение;
		ЗакрытиеСчета.Распределение = Настройки.Распределение; // Пустая коллекция
		Настройки.Распределение = ОсновныеНастройки;
						
		ИсправитьЗакрытиеСчетовДляНеприменимыхБазРаспределенияОсновнойНастройки(Настройки);
		
		Возврат;
		
	КонецЦикла;
	
	// Настройки по умолчанию
	Настройки.Распределение.Добавить().БазаРаспределения =
		Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию();
	
КонецПроцедуры

Процедура ИсправитьПростойУчетБезКалькуляцииСебестоимости(Настройки)
	
	КалькуляционныеСчета = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки);
	КалькуляционныеСчетаРемонтаОС = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки);
	Если ЗначениеЗаполнено(КалькуляционныеСчета) Или ЗначениеЗаполнено(КалькуляционныеСчетаРемонтаОС) Тогда
		Возврат;
	КонецЕсли;
	
	// Недопустимо использование счета выпуска продукции
	Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ФактическаяСтоимость;
	ИсключитьСчетВыпускаПродукции(Настройки);
	
	// Недопустимо использование счетов косвенных затрат
	НедопустимыеСчета = СчетаРоли(Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты, Настройки);
	Для Каждого Счет Из НедопустимыеСчета Цикл
		УстановитьРоль(Счет, Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж, Настройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьТолькоУправленческиеРасходы(Настройки)
	
	СчетаУправленческиеРасходы = СчетаРоли(Перечисления.РолиСчетовЗатрат.УправленческиеРасходы, Настройки);
	Если Не ЗначениеЗаполнено(СчетаУправленческиеРасходы) Тогда
		Возврат;
	КонецЕсли;
	
	РолиСчетовСебестоимостьПродаж = Новый Массив;
	РолиСчетовСебестоимостьПродаж.Добавить(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости);
	РолиСчетовСебестоимостьПродаж.Добавить(Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж);
	
	Для Каждого Роль Из РолиСчетовСебестоимостьПродаж Цикл
		
		СчетаСебестоимостьПродаж = СчетаРоли(Роль, Настройки);
		Если ЗначениеЗаполнено(СчетаСебестоимостьПродаж) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Есть счета, относящиеся к УправленческиеРасходы, но при этом нет счетов, относящихся к себестоимости продаж.
	// Это считаем недопустимым (были соответствующие Рекомендации аудиторам Минфина)
	УстановитьРоль(СчетаУправленческиеРасходы[0], Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж, Настройки);
	
КонецПроцедуры

Процедура ИсправитьСебестоимостьПродажНаУправленческиеРасходы(Настройки)
	
	// В связи с началом действия ФСБУ 5/2019 "Запасы" управленческие расходы не включаются в фактическую себестоимость
	// незавершенного производства и готовой продукции, кроме случаев, когда эти затраты являются прямыми.
	// Исправляем роль СебестоимостьПродаж на УправленческиеРасходы, если добавились счета с ролью КалькуляцияСебестоимости и
	// отсутствуют счета с ролью УправленческиеРасходы.
	ПериодДействияУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.ПериодДействия(Настройки.Контекст.Период, Настройки.Контекст.Организация);
	
	Если ЗначениеЗаполнено(ПериодДействияУчетнойПолитики)
		И РегистрыСведений.УчетнаяПолитика.ПрименяетсяПБУ5(ПериодДействияУчетнойПолитики, Настройки.Контекст.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеСчета = Настройки.Сообщения.ДобавленныеСчетаУчета;
	Если Не ЗначениеЗаполнено(ДобавленныеСчета) Тогда
		Возврат;
	КонецЕсли;

	СчетаУправленческиеРасходы = СчетаРоли(Перечисления.РолиСчетовЗатрат.УправленческиеРасходы, Настройки);
	СчетаСебестоимостьПродаж = СчетаРоли(Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж, Настройки);
	СчетаСебестоимостьПродажУстановленныеРанее = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаСебестоимостьПродаж, ДобавленныеСчета);
	
	Если ЗначениеЗаполнено(СчетаУправленческиеРасходы) Или Не ЗначениеЗаполнено(СчетаСебестоимостьПродажУстановленныеРанее) Тогда
		Возврат;
	КонецЕсли;

	СчетаКалькуляцииСебестоимости = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки);
	СчетаКалькуляцииРемонтовОС = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаКалькуляцииСебестоимости, СчетаКалькуляцииРемонтовОС);
	// Если хотя бы один счет калькуляции себестоимости ранее был в настройке,
	// считаем, что роль счета СебестоимостьПродаж установлена целенаправленно.
	СчетаКалькуляцииСебестоимостиУстановленныеРанее
		= ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаКалькуляцииСебестоимости, ДобавленныеСчета);
	
	Если ЗначениеЗаполнено(СчетаКалькуляцииСебестоимостиУстановленныеРанее) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщехозяйственныеСчета = СчетаОбщехозяйственныеРасходы();

	Для каждого СчетСебестоимостиПродаж Из СчетаСебестоимостьПродажУстановленныеРанее Цикл
		Если ОбщехозяйственныеСчета.Найти(СчетСебестоимостиПродаж) <> Неопределено Тогда
			УстановитьРоль(СчетСебестоимостиПродаж, Перечисления.РолиСчетовЗатрат.УправленческиеРасходы, Настройки);
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Сообщения.ДобавленныеСчетаУчета = Новый Массив;
	
КонецПроцедуры

Процедура ИсправитьНеприменимыеБазыРаспределения(Настройки)
	
	Для Каждого Запись Из Настройки.Распределение Цикл
		ИсправитьНеприменимаяБазаРаспределения(Запись, Настройки);
	КонецЦикла;
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Для Каждого Запись Из ЗакрытиеСчета.Распределение Цикл
			ИсправитьНеприменимаяБазаРаспределения(Запись, Настройки, ЗакрытиеСчета.Роль);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьНеприменимаяБазаРаспределения(Запись, Настройки, Роль = Неопределено)
	
	Если Не ЗначениеЗаполнено(Запись.БазаРаспределения)
		Или Не БазаРаспределенияПрименяется(Запись.БазаРаспределения, Настройки, Роль) Тогда
		Запись.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьКосвенныеЗатратыНаУправленческиеРасходы(Настройки)
	
	// Согласно ФСБУ 5 "Запасы" управленческие расходы не включаются в стоимость запасов, в отличие от действовавшего ранее ПБУ 5.

	РазрешенаНастройкаРолейСчетов = Ложь;
	РасширеннаяАналитикаЗатрат.УстановитьГибкаяНастройкаПравилРаспределения(РазрешенаНастройкаРолейСчетов);
	
	Если РазрешенаНастройкаРолейСчетов
		Или РегистрыСведений.УчетнаяПолитика.ПрименяетсяПБУ5(Настройки.Контекст.Период, Настройки.Контекст.Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементЗакрытие Из Настройки.Закрытие Цикл
		
		Счет = ЭлементЗакрытие.Ключ;
		
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
			И ЭлементЗакрытие.Значение.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
			
			ЭлементЗакрытие.Значение.Роль = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ИсправитьЗакрытиеСчетовДляНеприменимыхБазРаспределенияОсновнойНастройки(Настройки)
	
	ОсновнаяНастройка = ОсновнаяНастройкаРаспределенияСчета(Настройки.Распределение);
	
	Если ОсновнаяНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если БазаРаспределенияПрименяется(
			ОсновнаяНастройка.БазаРаспределения, Настройки, Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС) Тогда
		Возврат;
	КонецЕсли;
	
	// Для счетов с ролью "Калькуляция себестоимости ремонтов ОС" может применяться только база, основанная на стоимости
	// прямых затрат. В случае если для такого счета установлена база "Как для счета 20.01" и база на счете 20.01 не подходит
	// для счета ремонтов ОС (например, Объем выпуска), то создаем отдельную настройку закрытия
	// счета с базой распределения "Прямые затраты".
	СчетаРемонтовОС = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки);
	
	Для Каждого СчетРемонта Из СчетаРемонтовОС Цикл
		Если Настройки.Закрытие[СчетРемонта].Распределение.Количество() = 0 Тогда
			РаспределениеСчета = Настройки.Закрытие[СчетРемонта].Распределение.Добавить();
			РаспределениеСчета.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ЗначениеПоУмолчанию();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеНастроек

// Определяет предопределенные счета учета, для которых можно настроить правила распределения затрат
// 
// Возвращаемое значение:
//  Массив Из ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаПравилаРаспределения()
	
	СчетаУчета = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета, УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
	РасширеннаяАналитикаЗатрат.ДобавитьСчетБракВПроизводстве(СчетаУчета);
	
	Возврат СчетаУчета;
	
КонецФункции

Функция КомандыРедактированияНастроек()
	
	// Значения - имена форм
	
	Команды = Новый Структура;
	Команды.Вставить("СчетаУчета",                   "СчетаУчетаЗатрат");
	Команды.Вставить("НазначениеСчета",              "НазначениеСчета");
	Команды.Вставить("АналитикаСчета",               "АналитикаСчета");
	Команды.Вставить("РаспределениеЗатрат",          "РаспределениеЗатрат");
	Команды.Вставить("НезавершенноеПроизводство",    "НезавершенноеПроизводство");
	Команды.Вставить("ПредварительнаяОценкаВыпуска", "ПлановаяСебестоимость");
	Команды.Вставить("ОценкаГотовойПродукции",       "ОценкаГотовойПродукции");
	Команды.Вставить("ЗатратыНаДоставку",            "ЗатратыНаДоставку");
	
	Возврат Команды;
	
КонецФункции

Функция КомандаРедактированияНастроекСчета(Команда, Счет)
	
	Возврат СтрШаблон("%1/%2", Команда, XMLСтрока(Счет));
	
КонецФункции

Функция ТегКомандыРедактированияНастроекСчета(Команда, Счет, ПредставлениеКоманды)
	
	Возврат СтрШаблон(
		"<a href = ""%1"">%2</a>",
		КомандаРедактированияНастроекСчета(Команда, Счет),
		ПредставлениеКоманды);
	
КонецФункции

Функция МодификаторТребуетНастройки(Модификатор, БазаРаспределения)
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		Возврат Не ЗначениеЗаполнено(Модификатор.Ссылка) И Не ЗначениеЗаполнено(Модификатор.СтатьиЗатрат);
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		Возврат Модификатор.ТаблицаБазы.Количество() = 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеМодификатора(Модификатор, БазаРаспределения, РольСчета, ОсновнаяНастройка = Ложь)
	
	Представление = "";
	
	Если Модификатор = Неопределено Тогда
		Возврат Представление;
	КонецЕсли;
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		Если МодификаторТребуетНастройки(Модификатор, БазаРаспределения) Тогда
			Представление = НСтр("ru = 'Заполнить перечень статей'");
		ИначеЕсли ЗначениеЗаполнено(Модификатор.Ссылка) Тогда
			Представление = СтрШаблон(НСтр("ru = 'Перечень статей: %1'"), Строка(Модификатор.Ссылка));
		Иначе
			КоличествоСтатей = Модификатор.СтатьиЗатрат.Количество();
			Если КоличествоСтатей < 3 Тогда
				Представление = СтрСоединить(Модификатор.СтатьиЗатрат, ", ");
			Иначе
				ПредставлениеПервойСтатьи = Строка(Модификатор.СтатьиЗатрат[0]);
				ШаблонСклонения = НСтр("ru = ';%1 статья;;%1 статьи;%1 статей;%1 статей'");
				ПредставлениеКоличестваСтатей = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					ШаблонСклонения,
					КоличествоСтатей - 1);
				Представление = СтрШаблон(НСтр("ru = '%1 и еще %2'"), ПредставлениеПервойСтатьи, ПредставлениеКоличестваСтатей);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг)
		И РольСчета = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		
		АналитикаПриемника = Новый Массив;
		
		Если ЗначениеЗаполнено(Модификатор.Счет) Тогда
			АналитикаПриемника.Добавить(Модификатор.Счет);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям")
			И ЗначениеЗаполнено(Модификатор.Подразделение) Тогда
			АналитикаПриемника.Добавить(Модификатор.Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АналитикаПриемника) Тогда
			Представление = СтрСоединить(АналитикаПриемника, НСтр("ru = '; '"));
		ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
			Представление = НСтр("ru = 'Учитываются данные о прямых затратах'");
		Иначе
			Представление = НСтр("ru = 'Простой учет'");
		КонецЕсли;
	
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		Если МодификаторТребуетНастройки(Модификатор, БазаРаспределения) Тогда
			Представление = НСтр("ru = 'Заполнить базу распределения'");
		Иначе
			ШаблонПредставления = "%1";
			Если ОсновнаяНастройка Тогда
				ШаблонПредставления = НСтр("ru = 'База распределения: %1'");
			КонецЕсли;
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставления, ПредставлениеСобственнойБазыРаспределения(Модификатор.НаименованиеБазы, Модификатор.ЕдиницаИзмеренияПоказателя));
        КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ПрочитатьСобственнуюБазуРаспределения(Модификатор, ХранимаяЗапись, Ссылка)
	
	Модификатор.НаименованиеБазы               = ХранимаяЗапись.НаименованиеБазы;
	Модификатор.ЕдиницаИзмеренияПоказателя     = ХранимаяЗапись.ЕдиницаИзмеренияПоказателя;
	Модификатор.ИдентификаторБазыРаспределения = ХранимаяЗапись.ИдентификаторБазыРаспределения;
	
	// Здесь ВидАналитикиСтатус может принимать значение 0 и 1. При использовании на форме модификатора значениям ВидАналитикиСтатус
	// для ВидовАналитик, которые несовместимы со счетом учета строки настройки, вместо 0 присваивается  значение -1 - для указания на то,
	// что ВидАналитики не может быть отмечен как используемый для счета. Во всех случаях используемой считается только та аналитика,
	// статус которой равен 1.
	// Чтение разрезов и счетов учета, которые были указаны при настройке. В таблице коэффициентов при этом могут быть использованы
	// не все указанные разрезы. Например, в настройке может быть указано, что распределение происходит на некоторый счет учета,
	// но в таблице коэффициентов он отсутствует.
	// Если для некоторого счета учета во всех строках установлено СчетСтатус = 1 и ВидАналитикиСтатус <> 1, 
	// это означает, что затраты распределяются на счет "одной суммой", то есть ни один из видов
	// аналитик в базе не указывается.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторБазыРаспределения", ХранимаяЗапись.ИдентификаторБазыРаспределения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПредставлениеПодразделения", НСтр("ru = 'Подразделение'"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкаАналитики.Счет КАК Счет,
	|	НастройкаАналитики.ВидАналитики КАК ВидАналитики,
	|	1 КАК СчетСтатус,
	|	ВЫБОР
	|		КОГДА НастройкаАналитики.ВидАналитики <> НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидАналитикиСтатус,
	|	ВЫБОР
	|		КОГДА НастройкаАналитики.ВидАналитики = ""Подразделение""
	|			ТОГДА &ПредставлениеПодразделения
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Представление, НастройкаАналитики.ВидАналитики)
	|	КОНЕЦ КАК ВидАналитикиПредставление,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ХозрасчетныйВидыСубконто.НомерСтроки
	|	КОНЕЦ КАК ПорядокВидаАналитики,
	|	НастройкаАналитики.Счет.Порядок КАК ПорядокСчета
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.НастройкаАналитикиБазы КАК НастройкаАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО НастройкаАналитики.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|			И НастройкаАналитики.ВидАналитики = ХозрасчетныйВидыСубконто.ВидСубконто
	|ГДЕ
	|	НастройкаАналитики.Ссылка = &Ссылка
	|	И НастройкаАналитики.ИдентификаторБазыРаспределения = &ИдентификаторБазыРаспределения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСчета,
	|	ПорядокВидаАналитики,
	|	ВидАналитики";
	
	Результат = Запрос.Выполнить();
	Модификатор.НастройкаАналитикиБазы = Результат.Выгрузить();
	
	Модификатор.НастройкаАналитикиБазы.Индексы.Добавить("Счет");
	Модификатор.НастройкаАналитикиБазы.Индексы.Добавить("Счет, ВидАналитики");
	Модификатор.НастройкаАналитикиБазы.Индексы.Добавить("Счет, ВидАналитикиСтатус");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияАналитики.ВидАналитики,
	|	ЗначенияАналитики.ЗначениеПредопределенные,
	|	ЗначенияАналитики.ЗначениеСубконто,
	|	Коэффициенты.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.НастройкиУчетаЗатрат.ЗначенияАналитикиБазыРаспределения КАК ЗначенияАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиУчетаЗатрат.КоэффициентыБазыРаспределения КАК Коэффициенты
	|		ПО ЗначенияАналитики.Ссылка = Коэффициенты.Ссылка
	|		И Коэффициенты.ИдентификаторАналитики = ЗначенияАналитики.ИдентификаторАналитики
	|ГДЕ
	|	ЗначенияАналитики.Ссылка = &Ссылка
	|	И Коэффициенты.ИдентификаторБазыРаспределения = &ИдентификаторБазыРаспределения
	|ИТОГИ
	|	МАКСИМУМ(Коэффициент)
	|ПО
	|	Коэффициенты.ИдентификаторАналитики";
	// Связывание табличных частей ЗначенияАналитикиБазыРаспределения и КоэффициентыБазыРаспределения производится
	// по полю ИдентификаторАналитики, при этом оно не используется в таблице базы, служит только для организации
	// хранения данных. Поэтому оно отсутствует в выбираемых полях.
	
	Результат = Запрос.Выполнить();

	ВыборкаКоэффициентов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаБазы = Модификатор.ТаблицаБазы;
	ТаблицаБазы.Колонки.Очистить();
	
	// Добавление в таблицу базы столбцов, которые присутствуют при любых настройках.
	ТаблицаБазы.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаБазы.Колонки.Добавить("Коэффициент", 
		Новый ОписаниеТипов(Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.КоэффициентыБазыРаспределения.Реквизиты.Коэффициент.Тип));
	
	РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределенияСчетовУчета(СчетаРаспределенияЗатратСобственнойБазы());
	
	ИменаКолонок = Новый Соответствие;
	ИменаКолонок.Вставить("Счет", "Счет");
	
	Пока ВыборкаКоэффициентов.Следующий() Цикл
		СтрокаБазы = ТаблицаБазы.Добавить();
		СтрокаБазы.Коэффициент = ВыборкаКоэффициентов.Коэффициент;
		Выборка = ВыборкаКоэффициентов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ИмяКолонки = ИменаКолонок.Получить(Выборка.ВидАналитики);
			
			Если ИменаКолонок[Выборка.ВидАналитики] = Неопределено Тогда
				// Вид аналитики "Счет" хранится в базе данных в виде строки. В РазрезыРаспределения эта строка
				// указана в колонке "Имя", а в колонке "Ключ" для этой аналитики хранится описание типа плана счетов. 
				// У вида аналитики "Подразделение" в обеих колонках указано "Подразделение", то есть для него подойдет 
				// поиск по любому из этих полей, в том числе и по полю "Имя".
				// Остальные виды аналитики являются ссылками на план видов характеристик, для них возможен поиск
				// только по полю "Ключ".
				ПолеПоиска = "Имя";
				Если ТипЗнч(Выборка.ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
					ПолеПоиска = "Ключ";
				КонецЕсли;
				
				РазрезРаспределения = РазрезыРаспределения.Найти(Выборка.ВидАналитики, ПолеПоиска);
				
				Если РазрезРаспределения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяКолонки = РазрезРаспределения.Имя;
				
				ТаблицаБазы.Колонки.Добавить(ИмяКолонки, РазрезРаспределения.ТипЗначения);
				ИменаКолонок.Вставить(Выборка.ВидАналитики, ИмяКолонки);
			КонецЕсли;
			
			// В составном типе нельзя указать одновременное использование типа "Характеристика.<ИмяПланаВидовХарактеристи>
			// совместно с другими типами, поэтому для хранения значений субконто используется отдельный реквизит.
			ИмяРеквизитаХраненияЗначенияАналитики = ИмяРеквизитаХраненияЗначенияАналитики(Выборка.ВидАналитики);
			СтрокаБазы[ИмяКолонки] = Выборка[ИмяРеквизитаХраненияЗначенияАналитики];
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИсполняемыеНастройки

Процедура ОграничитьПоОрганизации(Настройки, Организация)
	
	НастройкиИзменены = Ложь;
	
	Для Каждого ОписаниеЗакрытиеСчета Из Настройки.Закрытие Цикл
		
		КоличествоЗаписей = ОписаниеЗакрытиеСчета.Значение.Распределение.Количество();
		Для НомерСКонца = 1 По КоличествоЗаписей Цикл
			
			Индекс = КоличествоЗаписей - НомерСКонца;
			Запись = ОписаниеЗакрытиеСчета.Значение.Распределение[Индекс];
			
			Если Не ЗначениеЗаполнено(Запись.Филиал) Или Запись.Филиал = Организация Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеЗакрытиеСчета.Значение.Распределение.Удалить(Индекс);
			НастройкиИзменены = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не НастройкиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	// В результате исключения настроек других организаций
	// может оказаться, что какие-то счета заполнять и не нужно
	ОтключитьАвтоматическоеРаспределение(Настройки);
	
КонецПроцедуры

Процедура ОтключитьАвтоматическоеРаспределение(Настройки)
	
	// Настройки распределения могут исключать автоматическое закрытие счета
	
	// Счета могут быть удалены из Настройки.СчетаУчета, поэтому обходим с конца
	КоличествоСчетов = Настройки.СчетаУчета.Количество();
	Для НомерСчетаСКонца = 1 По КоличествоСчетов Цикл
		
		ИндексСчета = КоличествоСчетов - НомерСчетаСКонца;
		Счет = Настройки.СчетаУчета[ИндексСчета];
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Если Не ЗначениеЗаполнено(ЗакрытиеСчета.Распределение)
			Или ЭтоДетальнаяНастройкаРаспределения(ЗакрытиеСчета.Распределение[0])
			Или ЗакрытиеСчета.Распределение[0].БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
			Продолжить;
		КонецЕсли;
		
		ВозможноРаспределение = Ложь;
		Для Каждого НастройкаРаспределения Из ЗакрытиеСчета.Распределение Цикл
			Если НастройкаРаспределения.БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
				ВозможноРаспределение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВозможноРаспределение Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.СчетаУчета.Удалить(ИндексСчета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьИсполняемыеНастройки(Настройки)
	
	Настройки.ПрименяетсяПБУ5 = РегистрыСведений.УчетнаяПолитика.ПрименяетсяПБУ5(
		Настройки.Контекст.Период,
		Настройки.Контекст.Организация);
		
	Для Каждого ОписаниеЗакрытиеСчета Из Настройки.Закрытие Цикл
		
		НаследоватьОсновныеПравилаРаспределения(ОписаниеЗакрытиеСчета.Значение, Настройки);
			
		НастроитьАвтоматическиРаспределениеВнутриКалькуляционногоСчета(ОписаниеЗакрытиеСчета.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаследоватьОсновныеПравилаРаспределения(ЗакрытиеСчета, Настройки)
	
	Если Не ТребуетсяРаспределениеЗатрат(ЗакрытиеСчета, Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗакрытиеСчета.Распределение) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойНаборПравилРаспределения = Настройки.Распределение;
	
	Для Каждого ПравилоОсновногоНабора Из ОсновнойНаборПравилРаспределения Цикл
		
		Правило = ЗакрытиеСчета.Распределение.Добавить();
		ЗаполнитьЗначенияСвойств(Правило, ПравилоОсновногоНабора);
		
		Если ПравилоОсновногоНабора.Модификатор <> Неопределено Тогда
			Правило.Модификатор = ОбщегоНазначения.СкопироватьРекурсивно(ПравилоОсновногоНабора.Модификатор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьАвтоматическиРаспределениеВнутриКалькуляционногоСчета(ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеСчета.Распределение.Количество() <> 1
		Или ЭтоДетальнаяНастройкаРаспределения(ЗакрытиеСчета.Распределение[0]) Тогда
		Возврат;
	КонецЕсли;
	
	// Интерфейсно детальная настройка этих правил сейчас не предполагается.
	// В то же время, общая настройка может оказаться неподходящей в частном случае.
	// Поэтому подберем более подходящие настройки - они будут применены, если общая настройка не подойдет.
	
	ОсновнаяБазаРаспределения = ЗакрытиеСчета.Распределение[0].БазаРаспределения;
	
	ПодходящиеБазыРаспределения = Новый Массив;
	Если ОсновнаяБазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		// При отсутствии плановой себестоимости будем пытаться распределить по сумме затрат
		ПодходящиеБазыРаспределения.Добавить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты);
	ИначеЕсли ОсновнаяБазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
		// При отсутствии базы распределения, основанной на сумме затрат, будем пытаться распределить по плановой себестоимости
		ПодходящиеБазыРаспределения.Добавить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
	КонецЕсли;
	ПодходящиеБазыРаспределения.Добавить(Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска);
	// Выручка в качестве базы сейчас не используется, так как не предоставляются данные о выручке в разрезе продукции
	
	Для Каждого БазаРаспределения Из ПодходящиеБазыРаспределения Цикл
		
		Если БазаРаспределения = ОсновнаяБазаРаспределения Тогда
			// Уже задана
			Продолжить;
		КонецЕсли;
		
		// Для калькуляционного счета порядок задается не "от общего к частному",
		// а от "основной" к "резервным".
		Запись = ЗакрытиеСчета.Распределение.Добавить();
		Запись.БазаРаспределения = БазаРаспределения;
		УстановитьМодификаторБазыРаспределения(Запись, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеНастроек

Процедура СохранитьПравилаЗакрытияСчетов(Объект, Настройки)
	
	Объект.ПланСчетов.Очистить();
	Объект.НезавершенноеПроизводство.Очистить();
	Объект.Распределение.Очистить();
	Объект.ЗатратыНаДоставку.Очистить();
	Объект.ЗначенияАналитикиБазыРаспределения.Очистить();
	Объект.КоэффициентыБазыРаспределения.Очистить();
	Объект.НастройкаАналитикиБазы.Очистить();
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Если ЗакрытиеСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Объект.ПланСчетов.Добавить();
		Запись.Счет = Счет;
		Запись.Роль = ЗакрытиеСчета.Роль;
		
		Если ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.РасходыНаПродажу Тогда
			Запись = Объект.ЗатратыНаДоставку.Добавить();
			Запись.Счет = Счет;
			Запись.НеРаспределятьЗатратыНаДоставку = ЗакрытиеСчета.НеРаспределятьЗатратыНаДоставку;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗакрытиеСчета.НезавершенноеПроизводство)
			И ЗакрытиеСчета.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется Тогда
			
			Запись = Объект.НезавершенноеПроизводство.Добавить();
			Запись.Счет         = Счет;
			Запись.ВариантУчета = ЗакрытиеСчета.НезавершенноеПроизводство;
		
		КонецЕсли;
		
		Если Счет = СчетОсновногоНабораПравилРаспределения(Настройки) Тогда
			Распределение = Настройки.Распределение;
		Иначе
			Распределение = ЗакрытиеСчета.Распределение;
		КонецЕсли;
		
		СохранитьПравилаРаспределенияСчета(Объект, Счет, Распределение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПравилаРаспределенияСчета(Объект, Счет, Распределение)
	
	КешСпискиСтатейЗатрат = Новый Соответствие;
	КешРазрезыРаспределения = Неопределено;
	КешПредопределенныеЗначенияСубконто = Неопределено;
	
	Для Каждого НастройкаРаспределения Из Распределение Цикл
		
		Запись = Объект.Распределение.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, НастройкаРаспределения);
		Запись.Счет = Счет;
		
		Если НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
			Или НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
			
			Если ТипЗнч(НастройкаРаспределения.Модификатор) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ОписаниеПоля Из ПоляСохраненияМодификатораВыручки() Цикл
				
				Если Не НастройкаРаспределения.Модификатор.Свойство(ОписаниеПоля.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись[ОписаниеПоля.Значение] = НастройкаРаспределения.Модификатор[ОписаниеПоля.Ключ];
				
			КонецЦикла;
			
		ИначеЕсли НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
			
			СписокЗаданСсылкой = СпискиСтатейЗатратСовпадают(
				НастройкаРаспределения.Модификатор.Ссылка,
				НастройкаРаспределения.Модификатор.СтатьиЗатрат,
				КешСпискиСтатейЗатрат);
				
			Если СписокЗаданСсылкой Тогда
				Запись.СписокСтатейЗатрат = НастройкаРаспределения.Модификатор.Ссылка;
			Иначе
				Запись.ОтборБазыРаспределения = СериализоватьОтборСтатейЗатрат(НастройкаРаспределения.Модификатор.СтатьиЗатрат);
			КонецЕсли;
		ИначеЕсли НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
			Запись.НаименованиеБазы           = НастройкаРаспределения.Модификатор.НаименованиеБазы;
			Запись.ЕдиницаИзмеренияПоказателя = НастройкаРаспределения.Модификатор.ЕдиницаИзмеренияПоказателя;
			ЗаполнитьДанныеБазыРаспределения(Запись, Объект, НастройкаРаспределения.Модификатор, КешРазрезыРаспределения, КешПредопределенныеЗначенияСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеБазыРаспределения(Запись, Объект, Модификатор, РазрезыРаспределения, ПредопределенныеЗначенияСубконто)
	
	ИдентификаторБазыРаспределения = XMLСтрока(Новый УникальныйИдентификатор);
															 
	Если РазрезыРаспределения = Неопределено Тогда
		РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределенияСчетовУчета(СчетаРаспределенияЗатратСобственнойБазы());
	КонецЕсли;
	
	Если ПредопределенныеЗначенияСубконто = Неопределено Тогда
		ПредопределенныеЗначенияСубконто = БухгалтерскийУчетКлиентСервер.ПредопределенныеЗначенияСубконтоПоУмолчанию();
	КонецЕсли;
	
	Запись.ИдентификаторБазыРаспределения = ИдентификаторБазыРаспределения;
	
	ИспользуемыеАналитики = Новый ТаблицаЗначений;
	ИспользуемыеАналитики.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ИспользуемыеАналитики.Колонки.Добавить("ВидАналитики",
		Метаданные.Справочники.НастройкиУчетаЗатрат.ТабличныеЧасти.НастройкаАналитикиБазы.Реквизиты.ВидАналитики.Тип);
		
	ЗаполнитьНастройкуАналитики(Объект, Модификатор, ИспользуемыеАналитики, ИдентификаторБазыРаспределения, РазрезыРаспределения);

	ЗаполнитьТаблицуБазы(Объект, Модификатор, ИспользуемыеАналитики, ИдентификаторБазыРаспределения, РазрезыРаспределения, ПредопределенныеЗначенияСубконто);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуАналитики(Объект, Модификатор, ИспользуемыеАналитики, ИдентификаторБазыРаспределения, РазрезыРаспределения)

	СчетаРаспределяемыеОднойСуммой = Новый Соответствие; // * Ключ - ПланСчетовСсылка.Хозрасчетный,
														 // * Значение - Булево - признак того,
														 // что для счета не установлена аналитика распределения.
	
	Для Каждого СтрокаМодификаторНастройка Из Модификатор.НастройкаАналитикиБазы Цикл
		
		Если Не РазрезИспользуется(СтрокаМодификаторНастройка, "Счет") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетаРаспределяемыеОднойСуммой[СтрокаМодификаторНастройка.Счет] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		// Все неиспользуемые аналитики пропускаем. Исключение составляет случай, 
		// когда затраты распределяются на счет "одной суммой": у счета установлен признак
		// использования, а использование всех видов аналитик отключено. В этом случае в таблицу добавляем
		// единственную строку, соответствующую счету, с незаполненным видом аналитики.
		РазрезВидАналитикиИспользуется = РазрезИспользуется(СтрокаМодификаторНастройка, "ВидАналитики", РазрезыРаспределения);
			
		Если Не РазрезВидАналитикиИспользуется Тогда
			
			// Именно этот вид аналитики для счета не используется, но есть другие, которые используются.
			Если СчетаРаспределяемыеОднойСуммой[СтрокаМодификаторНастройка.Счет] = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Счет, ВидАналитикиСтатус", СтрокаМодификаторНастройка.Счет, 1);
			КоличествоИспользуемыхАналитик = Модификатор.НастройкаАналитикиБазы.НайтиСтроки(СтруктураПоиска).Количество();
			
			Если КоличествоИспользуемыхАналитик = 0 Тогда
				СчетаРаспределяемыеОднойСуммой.Вставить(СтрокаМодификаторНастройка.Счет, Истина);
			Иначе
				СчетаРаспределяемыеОднойСуммой.Вставить(СтрокаМодификаторНастройка.Счет, Ложь);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНастройкаАналитики = Объект.НастройкаАналитикиБазы.Добавить();
		СтрокаНастройкаАналитики.Счет = СтрокаМодификаторНастройка.Счет;
		СтрокаНастройкаАналитики.ИдентификаторБазыРаспределения = ИдентификаторБазыРаспределения;
		
		Если РазрезВидАналитикиИспользуется Тогда
			СтрокаНастройкаАналитики.ВидАналитики = СтрокаМодификаторНастройка.ВидАналитики;
			ЗаполнитьЗначенияСвойств(ИспользуемыеАналитики.Добавить(), СтрокаМодификаторНастройка);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуБазы(Объект, Модификатор, ИспользуемыеАналитики, ИдентификаторБазыРаспределения,
							   РазрезыРаспределения, ПредопределенныеЗначенияСубконто)
	
	ИспользуемыеАналитики.Индексы.Добавить("Счет");
	
	ИменаКолонок = Новый Соответствие(); // * Ключ - ВидАналитики, * Значение - Имя колонки базы распределения
	
	ВидыАналитик = Новый Соответствие;
	Для Каждого СтрокаБазы Из Модификатор.ТаблицаБазы Цикл
		
		Коэффициент = СтрокаБазы.Коэффициент;
		ИдентификаторАналитики = XMLСтрока(Новый УникальныйИдентификатор);

		СтрокаКоэффициента = Объект.КоэффициентыБазыРаспределения.Добавить();
		СтрокаКоэффициента.Коэффициент                    = Коэффициент;
		СтрокаКоэффициента.ИдентификаторБазыРаспределения = ИдентификаторБазыРаспределения;
		СтрокаКоэффициента.ИдентификаторАналитики         = ИдентификаторАналитики;

		СтрокаЗначениеАналитики = Объект.ЗначенияАналитикиБазыРаспределения.Добавить();
		СтрокаЗначениеАналитики.ВидАналитики             = "Счет";
		СтрокаЗначениеАналитики.ИдентификаторАналитики   = ИдентификаторАналитики;
		СтрокаЗначениеАналитики.ЗначениеПредопределенные = СтрокаБазы.Счет;
		
		// Массив видов аналитик, которые отмечены как используемые при настройке базы.
		Если ВидыАналитик[СтрокаБазы.Счет] = Неопределено Тогда
			ОтборСчет = Новый Структура("Счет", СтрокаБазы.Счет);
			ВидыАналитик.Вставить(СтрокаБазы.Счет, ИспользуемыеАналитики.Скопировать(ОтборСчет).ВыгрузитьКолонку("ВидАналитики"));
		КонецЕсли;
	
		Для Каждого ВидАналитики Из ВидыАналитик[СтрокаБазы.Счет] Цикл

			ИмяКолонки = ИменаКолонок[ВидАналитики];
			Если ИмяКолонки = Неопределено Тогда
				РазрезРаспределения = РазрезыРаспределения.Найти(ВидАналитики, "Ключ");
				Если РазрезРаспределения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИмяКолонки = РазрезРаспределения.Имя;
				ИменаКолонок.Вставить(ВидАналитики, ИмяКолонки);
			КонецЕсли;

			СтрокаЗначениеАналитики = Объект.ЗначенияАналитикиБазыРаспределения.Добавить();
			СтрокаЗначениеАналитики.ВидАналитики = ВидАналитики;
			СтрокаЗначениеАналитики.ИдентификаторАналитики = ИдентификаторАналитики;
			СтрокаЗначениеАналитики[ИмяРеквизитаХраненияЗначенияАналитики(ВидАналитики)] = СтрокаБазы[ИмяКолонки];
			
			// Заполнение субконто значением по умолчанию. Например, заполняется основная номенклатурная группа.
			Если Не ЗначениеЗаполнено(СтрокаБазы[ИмяКолонки]) Тогда
				СтрокаЗначениеАналитики[ИмяРеквизитаХраненияЗначенияАналитики(ВидАналитики)] =
					ПредопределенныеЗначенияСубконто[СтрокаЗначениеАналитики.ВидАналитики];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазрезИспользуется(ИсточникДанных, Разрез, РазрезыРаспределения = Неопределено)
	
	// Некоторые виды субконто, например, "Номенклатурные группы" могут не отображаться в интерфейсе,
	// но в проводках субконто должно быть заполнено значением по умолчанию.
	Если Разрез = "ВидАналитики" Тогда
		СтрокаРазрезыРаспределения = РазрезыРаспределения.Найти(ИсточникДанных[Разрез], "Ключ");
		Если СтрокаРазрезыРаспределения = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если БухгалтерскийУчетКлиентСервер.НужноСкрытьСубконто(Истина, СтрокаРазрезыРаспределения.ТипЗначения) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоСтатус = Разрез + "Статус";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, СвойствоСтатус) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РазрезИспользуется = (ИсточникДанных[СвойствоСтатус] = 1);
	
	Возврат РазрезИспользуется;
	
КонецФункции

Функция ИмяРеквизитаХраненияЗначенияАналитики(ВидАналитики)
	
	ИмяРеквизита = "ЗначениеПредопределенные";
	
	Если ТипЗнч(ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
		
		ИмяРеквизита = "ЗначениеСубконто";
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Процедура СохранитьРазрезыУчета(Объект, Настройки)
	
	Объект.РазрезыУчета.Очистить();
	
	НастраиваемаяАналитика = НастраиваемаяАналитика();
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		НастраиваемаяАналитикаСчета = НастраиваемаяАналитика[Счет];
		
		Если НастраиваемаяАналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АналитикаСчета = Настройки.Аналитика[Счет];
		
		Если АналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВидАналитики Из АналитикаСчета Цикл
			
			Если НастраиваемаяАналитикаСчета.Найти(ВидАналитики) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = Объект.РазрезыУчета.Добавить();
			Запись.Счет         = Счет;
			Запись.ВидАналитики = ВидАналитики;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.РазрезыУчетаНезавершенногоПроизводства.Очистить();
	
	СчетаРоли = СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки);
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		Если СчетаРоли.Найти(Счет) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Настройки.АналитикаНезавершенногоПроизводства[Счет] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Аналитика незавершенного производства, используемая по умолчанию, не может быть отключена.
		// В справочнике "Настройки учета затрат" хранится только та аналитика, которую можно
		// настроить для целей учета незавершенного производства.
		АналитикаНезавершенногоПроизводства = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			Настройки.АналитикаНезавершенногоПроизводства[Счет],
			АналитикаНезавершенногоПроизводстваПоУмолчанию());
		
		НастраиваемаяАналитикаСчета = НастраиваемаяАналитика[Счет];
		
		Если НастраиваемаяАналитикаСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ВидАналитики Из АналитикаНезавершенногоПроизводства Цикл
			
			Если НастраиваемаяАналитикаСчета.Найти(ВидАналитики) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = Объект.РазрезыУчетаНезавершенногоПроизводства.Добавить();
			Запись.Счет         = Счет;
			Запись.ВидАналитики = ВидАналитики;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляСохраненияМодификатораВыручки()
	
	ПоляМодификатора = Новый Структура;
	
	// Ключ - имя поля; Значение - имя реквизита
	
	ПоляМодификатора.Вставить("Счет",          "СчетПрямыхЗатрат");
	ПоляМодификатора.Вставить("Подразделение", "ПодразделениеЗатрат");
	
	Возврат ПоляМодификатора;
	
КонецФункции

Функция СпискиСтатейЗатратСовпадают(Ссылка, Массив, Кеш)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Не ЗначениеЗаполнено(Массив);
	КонецЕсли;
	
	СодержимоеСсылки = Кеш[Ссылка];
	
	Если СодержимоеСсылки = Неопределено Тогда
		СодержимоеСсылки = СодержимоеСпискаСтатейЗатрат(Ссылка);
		Кеш.Вставить(Ссылка, СодержимоеСсылки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СодержимоеСсылки) Тогда
		Возврат Не ЗначениеЗаполнено(Массив);
	КонецЕсли;
	
	Если ТипЗнч(Массив) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Приведем массив к тому же виду, что и СодержимоеСпискаСтатейЗатрат
	Сортировщик = Новый ТаблицаЗначений;
	Сортировщик.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Для Каждого Значение Из Массив Цикл
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		Сортировщик.Добавить().Значение = Значение;
	КонецЦикла;
	Сортировщик.Сортировать("Значение", Новый СравнениеЗначений);
	СодержимоеМассива = Сортировщик.ВыгрузитьКолонку("Значение");
	
	// Проверим идентичность объектов
	Возврат ОбщегоНазначения.ДанныеСовпадают(СодержимоеСсылки, СодержимоеМассива);
	
КонецФункции

Функция СериализоватьОтборСтатейЗатрат(СтатьиЗатрат)
	
	// См. ДесериализоватьОтборСтатейЗатрат
	
	Если Не ЗначениеЗаполнено(СтатьиЗатрат) Тогда
		Возврат "";
	КонецЕсли;
	
	Отбор = Новый ОтборКомпоновкиДанных;
	
	Запись = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Запись.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатьяЗатрат");
	Запись.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	Запись.ПравоеЗначение = Новый СписокЗначений;
	Запись.ПравоеЗначение.ЗагрузитьЗначения(СтатьиЗатрат);
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
	
КонецФункции

Функция ДесериализоватьОтборСтатейЗатрат(ОтборБазыРаспределения)
	
	// См. СериализоватьОтборСтатейЗатрат
	
	Если ПустаяСтрока(ОтборБазыРаспределения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Отбор = ОбщегоНазначения.ЗначениеИзСтрокиXML(ОтборБазыРаспределения);
	
	Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПолеСтатьяЗатрат = Новый ПолеКомпоновкиДанных("СтатьяЗатрат");
	
	Для Каждого Запись Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Запись) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			// Иерархия не поддерживается
			Продолжить;
		КонецЕсли;
		
		Если Запись.ЛевоеЗначение <> ПолеСтатьяЗатрат Тогда
			Продолжить;
		КонецЕсли;
		
		Если Запись.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Возврат Запись.ПравоеЗначение.ВыгрузитьЗначения();
		ИначеЕсли Запись.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ПравоеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Массив;
	
КонецФункции

#КонецОбласти

#Область ОписаниеНастроек

// Формирует (заполняет, обновляет) краткое описание настройки.
//
// Параметры:
//  РедактированиеНастроек - Структура - см. НовыйРедактированиеНастроекУчетаЗатрат
//
Процедура ЗаполнитьКраткоеОписание(РедактированиеНастроек)
	
	Составитель = НовыйСоставительКраткогоОписания(РедактированиеНастроек.Настройки);
	
	ЗаполнитьАбзацыКраткогоОписания(Составитель);
	ОписаниеHTML = СтрСоединить(Составитель.Абзацы, Символы.ПС + Символы.ПС);
	
	РедактированиеНастроек.КраткоеОписание = СтроковыеФункции.ФорматированнаяСтрока(ОписаниеHTML);
	
КонецПроцедуры

Функция НовыйСоставительКраткогоОписания(Настройки)
	
	Составитель = Новый Структура;
	
	Составитель.Вставить("Настройки", Настройки);
	Составитель.Вставить("Абзацы",    Новый Массив);
	Составитель.Вставить("Команды",   КомандыРедактированияНастроек());
	Составитель.Вставить("Сообщения", Новый Структура);
	
	Возврат Составитель;
	
КонецФункции

Процедура ЗаполнитьАбзацыКраткогоОписания(Составитель)
	
	ДополнитьОписаниеПереченьСчетов(Составитель);
	
	Для Каждого Счет Из Составитель.Настройки.СчетаУчета Цикл
		
		Предложения = Новый Массив;
		
		ДополнитьОписаниеПоСчетуЗатрат(Предложения, Составитель, Счет);
		
		Если Не ЗначениеЗаполнено(Предложения) Тогда
			Продолжить;
		КонецЕсли;
		
		Составитель.Абзацы.Добавить(СтрСоединить(Предложения, Символы.ПС));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОписаниеПереченьСчетов(Составитель)
	
	Если Составитель.Настройки.СчетаУчета.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеТекста");
	
	Если Не ЗначениеЗаполнено(Составитель.Настройки.СчетаУчета) Тогда
		
		Текст = СтрШаблон(НСтр("ru = 'Счета учета затрат: <a href = ""%1"">Настроить</a>'"), Составитель.Команды.СчетаУчета);
		
	Иначе
		
		Текст = СтрШаблон(
			НСтр("ru = 'Затраты учитываются на счетах <a href = ""%1"">%2</a>'"),
			Составитель.Команды.СчетаУчета,
			ПредставлениеСпискаСчетов(Составитель.Настройки.СчетаУчета));
			
	КонецЕсли;
	
	Составитель.Абзацы.Добавить(Текст);
	
КонецПроцедуры

Процедура ДополнитьОписаниеПоСчетуЗатрат(Предложения, Составитель, Счет)
	
	Составитель.Сообщения.Удалить("ВыведеноВводноеПредложениеСчета");
	
	ЗакрытиеСчета = Составитель.Настройки.Закрытие[Счет];
	
	ВыведенПолныйТекст = ДобавитьПредложениеСчетВыпускПродукции(Предложения, Составитель, Счет, ЗакрытиеСчета);
	Если ВыведенПолныйТекст Тогда
		// Особый случай для счета 40
		Возврат;
	КонецЕсли;
	
	ДобавитьПредложениеСчетКалькулированияСебестоимостиВыпуска(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеСчетКалькулированияСтоимостиРемонтовОС(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеНазначениеРегулярногоСчетаЗатрат(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеСчетАналитическогоУчета(Предложения, Составитель, Счет);
	
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеСчета") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПредложениеСчетРаспределяемыхЗатрат(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеСчетНезавершенногоПроизводства(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеСчетРасходыНаПродажу(Предложения, Составитель, Счет, ЗакрытиеСчета);
	
	ДобавитьПредложениеСчетИспользуетсяПоУмолчанию(Предложения, Составитель, Счет);
	
КонецПроцедуры

Функция ВводноеПредложениеТекстаПроОдинСчетЗатрат(ШаблонПредложения, Составитель, Счет)
	
	КомандаСчета = ТегКомандыРедактированияНастроекСчета(
		Составитель.Команды.СчетаУчета,
		Счет,
		ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(Счет));
	
	Возврат СтрШаблон(ШаблонПредложения, КомандаСчета);
	
КонецФункции

Функция ВводноеПредложениеОписанияСчета(ШаблонПредложения, Счет)
	
	ФорматированноеПредставлениеСчета = СтрШаблон(
		"<b>%1</b>",
		ПланыСчетов.Хозрасчетный.ПолноеПредставлениеСчета(Счет));
	
	Возврат СтрШаблон(ШаблонПредложения, ФорматированноеПредставлениеСчета);
	
КонецФункции

Функция ДобавитьПредложениеСчетВыпускПродукции(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.ВыпускПродукции Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВводноеПредложение = ВводноеПредложениеОписанияСчета(
		НСтр("ru = 'На счете %1 учитываются отклонения фактической себестоимости от плановой.'"),
		Счет);
	Предложения.Добавить(ВводноеПредложение);
	
	ПоддерживаетсяОценкаПоПлановойСтоимости = Ложь;
	ОценкаПродукцииПоПлановойСтоимости.ОпределитьФункциональностьПоддерживается(ПоддерживаетсяОценкаПоПлановойСтоимости);
	
	ВедетсяПростойУчетБезКалькуляцииСебестоимости =
		Не ЗначениеЗаполнено(СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Составитель.Настройки));
		
	Если Не ПоддерживаетсяОценкаПоПлановойСтоимости Или ВедетсяПростойУчетБезКалькуляцииСебестоимости Тогда
		Шаблон = НСтр("ru = 'Они включаются в себестоимость продукции.
                       |В результате продукция оценивается по фактической себестоимости.'");
	ИначеЕсли Составитель.Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость Тогда
		Шаблон = НСтр("ru = 'Они включаются в расходы периода выпуска продукции.
                       |В результате продукция оценивается в сумме <a href = ""%1"">плановых</a> затрат.'");
	Иначе
		Шаблон = НСтр("ru = 'Они включаются в себестоимость продукции.
                       |В результате продукция оценивается по <a href = ""%1"">фактической</a> себестоимости.'");
	КонецЕсли;
	
	ПредложениеСпособОценки =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Составитель.Команды.ОценкаГотовойПродукции);
		
	Предложения.Добавить(ПредложениеСпособОценки);
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПредложениеСчетКалькулированияСебестоимостиВыпуска(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьВариантУчетаСтоимостиВыпуска = Истина;
	СообщениеВыведеноВводноеПредложениеСчета = "ВыведеноВводноеПредложениеСчета";
	Если Составитель.Сообщения.Свойство("ВыведенВариантУчетаСтоимостиВыпуска") Тогда
		// Уже выведен
		ВыводитьВариантУчетаСтоимостиВыпуска = Ложь;
	ИначеЕсли Составитель.Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ОтклоненияСтоимости
		Или Составитель.Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость Тогда
		// Выводится в разделе про счет 40
		ВыводитьВариантУчетаСтоимостиВыпуска = Ложь;
	КонецЕсли;
	
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеТекста") Тогда
		ВводноеПредложение = ВводноеПредложениеТекстаПроОдинСчетЗатрат(
			НСтр("ru = 'Затраты учитываются на счете %1.'"),
			Составитель,
			Счет);
		Предложения.Добавить(ВводноеПредложение);
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеТекста");
		Составитель.Сообщения.Вставить(СообщениеВыведеноВводноеПредложениеСчета);
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Счет предназначен для [НазначениеСчета].'");
	Если Не Составитель.Сообщения.Свойство(СообщениеВыведеноВводноеПредложениеСчета) Тогда
		Шаблон = ВводноеПредложениеОписанияСчета(
			НСтр("ru = 'Счет %1 предназначен для [НазначениеСчета].'"),
			Счет);
		Составитель.Сообщения.Вставить(СообщениеВыведеноВводноеПредложениеСчета);
	КонецЕсли;
	
	НазначениеСчета              = "";
	ПорядокПредварительнойОценки = "";
	
	Если Не ВыводитьВариантУчетаСтоимостиВыпуска Тогда
		НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования фактической себестоимости продукции (услуг)'");
	ИначеЕсли Составитель.Настройки.ВыпускПродукции Тогда
		Если Составитель.Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПредварительнаяСтоимость Тогда
			НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования фактической себестоимости продукции (услуг)'");
			ПорядокПредварительнойОценки = НСтр("ru = 'В течение месяца выпущенная продукция предварительно оценивается <a href = ""[Команда]"">по плановой стоимости</a>.'");
		Иначе
			НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования <a href = ""[Команда]"">фактической себестоимости</a> продукции (услуг)'");
		КонецЕсли;
	Иначе
		Если Составитель.Настройки.ВариантУчетаСтоимостиВыпуска = Перечисления.ВариантыУчетаСтоимостиВыпуска.ПредварительнаяСтоимость Тогда
			НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования фактической себестоимости работ'");
			ПорядокПредварительнойОценки = НСтр("ru = 'В течение месяца расходы на выполнение работ предварительно оцениваются <a href = ""[Команда]"">по плановой стоимости</a>.'");
		Иначе
			НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования <a href = ""[Команда]"">фактической себестоимости</a> услуг'");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыТекста = Новый Структура("Команда", Составитель.Команды.ПредварительнаяОценкаВыпуска);
	
	НазначениеСчета              = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НазначениеСчета, ЭлементыТекста);
	ПорядокПредварительнойОценки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПорядокПредварительнойОценки, ЭлементыТекста);
	
	ЭлементыТекста = Новый Структура("НазначениеСчета", НазначениеСчета);
	Предложения.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЭлементыТекста));
	Если Не ПустаяСтрока(ПорядокПредварительнойОценки) Тогда
		Предложения.Добавить(ПорядокПредварительнойОценки);
	КонецЕсли;
	
	Если ВыводитьВариантУчетаСтоимостиВыпуска Тогда
		Составитель.Сообщения.Вставить("ВыведенВариантУчетаСтоимостиВыпуска");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПредложениеНазначениеРегулярногоСчетаЗатрат(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	ВыведеноВводноеПредложениеТекста = Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеТекста");
	Если Не ВыведеноВводноеПредложениеТекста Тогда
		// Тривиальный случай, пояснения не требуются. Вводным предложением будет формируемое в ДобавитьПредложениеСчетАналитическогоУчета
		Возврат;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Счет предназначен для [НазначениеСчета].'");
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеСчета") Тогда
		Шаблон = ВводноеПредложениеОписанияСчета(
			НСтр("ru = 'Счет %1 предназначен для [НазначениеСчета].'"),
			Счет);
	КонецЕсли;
	
	ШаблонНазначениеСчета = НСтр("ru = 'учета %1, %2'"); // КлассЗатрат, Пояснение
	
	ВозможноИзменениеРолиСчета = Истина;
	Если ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж Тогда
		
		КлассЗатрат = НСтр("ru = 'расходов'");
		Пояснение   = НСтр("ru = 'включаемых в себестоимость продаж'");
		
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		
		КлассЗатрат = НСтр("ru = 'косвенных затрат'");
		ВидыВыпуска = Новый Массив;
		Если Составитель.Настройки.ВыпускПродукции Тогда
			ВидыВыпуска.Добавить(НСтр("ru = 'продукции'"));
		КонецЕсли;
		ВидыВыпуска.Добавить(НСтр("ru = 'услуг'"));
		Пояснение = СтрШаблон(
			НСтр("ru = 'ежемесячно распределяемых между конкретными видами %1'"),
			ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ВидыВыпуска));
			
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		
		КлассЗатрат = НСтр("ru = 'управленческих расходов'");
		ПрименяетсяКалькуляцияСебестоимости = ПрименяетсяКалькуляцияСебестоимости(Составитель.Настройки);
		Если Не ПрименяетсяКалькуляцияСебестоимости Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'отражаемых в отчете о финансовых результатах обособленно'"));
		Иначе
			ВидыКалькулируемыхОбъектов = Новый Массив;
			Если Составитель.Настройки.ВыпускПродукции Тогда
				ВидыКалькулируемыхОбъектов.Добавить(НСтр("ru = 'продукции'"));
			КонецЕсли;
			ВидыКалькулируемыхОбъектов.Добавить(НСтр("ru = 'услуг'"));
			НезавершенноеПроизводство = ПрименяетсяНезавершенноеПроизводство(Составитель.Настройки);
			Если НезавершенноеПроизводство Тогда
				ВидыКалькулируемыхОбъектов.Добавить(НСтр("ru = 'незавершенного производства'"));
			КонецЕсли;
			Пояснение = СтрШаблон(
				НСтр("ru = 'не включаемых в себестоимость %1'"),
				ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ВидыКалькулируемыхОбъектов));
		КонецЕсли;
		
	ИначеЕсли ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.ПрочиеРасходы Тогда
		
		КлассЗатрат = НСтр("ru = 'расходов'");
		Пояснение   = НСтр("ru = 'не относящихся к обычным видам деятельности'");
		ВозможноИзменениеРолиСчета = Ложь;
		
	Иначе
		
		// Здесь выводится назначение для регулярных ролей счетов.
		// Для специальных см., например,
		// ДобавитьПредложениеСчетКалькулированияСебестоимостиВыпуска,
		// ДобавитьПредложениеСчетВыпускПродукции,
		// ДобавитьПредложениеСчетАналитическогоУчета
		
		Возврат;
		
	КонецЕсли;
	
	РазрешенаНастройкаРолейСчетов = Ложь;
	РасширеннаяАналитикаЗатрат.УстановитьГибкаяНастройкаПравилРаспределения(РазрешенаНастройкаРолейСчетов);
	
	Если Не ВозможноИзменениеРолиСчета Или Не РазрешенаНастройкаРолейСчетов Тогда
		КомандаКлассЗатрат = КлассЗатрат;
	Иначе
		КомандаКлассЗатрат = ТегКомандыРедактированияНастроекСчета(
			Составитель.Команды.НазначениеСчета,
			Счет,
			КлассЗатрат);
	КонецЕсли;
	
	ЭлементыТекста = Новый Структура(
		"НазначениеСчета",
		СтрШаблон(ШаблонНазначениеСчета, КомандаКлассЗатрат, Пояснение));
		
	Предложения.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЭлементыТекста));
	
	Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеСчета");
	
КонецПроцедуры

Функция ДобавитьПредложениеСчетАналитическогоУчета(Предложения, Составитель, Счет)
	
	АналитикаСчета = Составитель.Настройки.ОтображаемаяАналитика[Счет];
	
	Если Не ЗначениеЗаполнено(АналитикаСчета) Тогда
		// Про этот счет ничего толком сказать не можем
		Возврат Ложь;
	КонецЕсли;
	
	// Первое предложение может использоваться как вводное (для всего текста, для счета).
	
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеТекста") Тогда
		Шаблон = ВводноеПредложениеТекстаПроОдинСчетЗатрат(
			НСтр("ru = 'Затраты учитываются на счете %1 в разрезе [ПредставлениеАналитики].'"),
			Составитель,
			Счет);
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеТекста");
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеСчета");
	ИначеЕсли Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеСчета") Тогда
		Шаблон = ВводноеПредложениеОписанияСчета(
			НСтр("ru = 'Затраты на счете %1 учитываются в разрезе [ПредставлениеАналитики].'"),
			Счет);
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеСчета");
	Иначе
		// не вводное; уже выведен текст, из которого понятно, про какой счет идет речь
		Шаблон = НСтр("ru = 'Затраты на счете учитываются в разрезе [ПредставлениеАналитики].'");
	КонецЕсли;
	
	ПредставленияАналитики = ПредставлениеСпискаАналитики(
		АналитикаСчета,
		"Родительный",
		Составитель.Настройки.ВыпускПродукции);
		
	ПредставлениеАналитики = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставленияАналитики);
		
	Если ПоддерживаетсяНастройкаАналитикиСчета(Счет, Составитель.Настройки, Составитель.Сообщения) Тогда
	
		ПредставлениеАналитики = ТегКомандыРедактированияНастроекСчета(
			Составитель.Команды.АналитикаСчета,
			Счет,
			ПредставлениеАналитики);
			
	КонецЕсли;
	
	ЭлементыТекста = Новый Структура("ПредставлениеАналитики", ПредставлениеАналитики);
	Предложения.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЭлементыТекста));
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПредложениеСчетРаспределяемыхЗатрат(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если Не ТребуетсяРаспределениеЗатрат(ЗакрытиеСчета, Составитель.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыБаз = НовыйТекстыБаз();
		
	ПредставленияБазРаспределения = Новый Массив;
	
	ПриемникиРаспределения = ПриемникиРаспределения(ЗакрытиеСчета, Составитель.Настройки);

	Если ЗначениеЗаполнено(ЗакрытиеСчета.Распределение) Тогда
		
		ЗаполнитьТекстыБазРаспределения(ТекстыБаз, ЗакрытиеСчета, Составитель.Настройки, ПриемникиРаспределения);
	
	ИначеЕсли ПриемникиРаспределения.Счета.Количество() = 1 И Не ЗначениеЗаполнено(ПриемникиРаспределения.Аналитика) Тогда
		
		БазыРаспределения = Новый Массив;
		Если Составитель.Сообщения.Свойство("БазыРаспределенияОсновногоНабора") Тогда
			БазыРаспределения = Составитель.Сообщения.БазыРаспределенияОсновногоНабора;
		ИначеЕсли ЗначениеЗаполнено(Составитель.Настройки.Распределение) Тогда
			БазыРаспределения = БазыНастройки(Составитель.Настройки.Распределение);
			
		КонецЕсли;
		ТекстыБазыПереноситсяПриНаличии = ПредставлениеБазРаспределения(БазыРаспределения, "Родительный");
		ТекстыБаз.ПереносятсяПриНаличии.Вставить(ПриемникиРаспределения.Счета[0], ТекстыБазыПереноситсяПриНаличии);
		
	ИначеЕсли Составитель.Сообщения.Свойство("ПредставлениеБазРаспределенияОсновногоНабора") Тогда
		
		ПредставленияБазРаспределения = Составитель.Сообщения.ПредставлениеБазРаспределенияОсновногоНабора;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Составитель.Настройки.Распределение) Тогда
			ПредставленияБазРаспределения = Новый Массив;
		Иначе
			
			БазыРаспределения = БазыНастройки(Составитель.Настройки.Распределение);
			ПредставленияБазРаспределения = ПредставлениеБазРаспределения(БазыРаспределения);
			
		КонецЕсли;
		
		Составитель.Сообщения.Вставить("ПредставлениеБазРаспределенияОсновногоНабора", ПредставленияБазРаспределения);
		Составитель.Сообщения.Вставить("БазыРаспределенияОсновногоНабора", БазыРаспределения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставленияБазРаспределения) Тогда

		ПредставлениеПорядкаРаспределения = ПредставлениеПорядкаРаспределения(ПриемникиРаспределения, Составитель.Настройки);
	
		ПредставлениеПеречняБазРаспределения = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставленияБазРаспределения);
	
		Команда = ТегКомандыРедактированияНастроекСчета(Составитель.Команды.РаспределениеЗатрат, Счет, ПредставлениеПеречняБазРаспределения);
		Текст = СтрШаблон(
			НСтр("ru = 'Затраты распределяются %1 пропорционально %2.'"),
			ПредставлениеПорядкаРаспределения,
			Команда);
			
	ИначеЕсли ТекстыБаз.Распределяются.Количество() > 0
		Или ТекстыБаз.Переносятся.Количество() > 0
		Или ТекстыБаз.ПереносятсяПриНаличии.Количество() > 0 Тогда
		
		// В общем случае для счета может быть задано несколько настроек (например, для разных подразделений) и текст может оказаться
		// разноплановым.
		// Например:
		// "Затраты распределяются между счетами 20.01 и 23 пропорционально оплате труда и площади помещений,
		// между номенклатурными группами и статьями затрат на счете 20.01 пропорционально прямым затратам,
		// переносятся на счет 20.01 одной суммой, на счет 23 одной суммой."
		ШаблонТекста = НСтр("ru = 'Затраты %1.'");
		ТекстыРаспределения = Новый Массив;
		// Может включать два "текста":
		// 1. со словом "распределяются"
		// 2. со словом "переносятся".
		// Первый может содержать описание нескольких наборов аналитики, а каждый из наборов - перечисление нескольких баз распределения
		// (вместе - "представлений распределения").
		// Второй может содержать описание нескольких счетов, суммы на которые переносятся без распределения.
		
		Если ТекстыБаз.Распределяются.Количество() > 0  Тогда
			
			ПредставлениеРаспределения = Новый Массив;
			
			Для Каждого ТекстБаз Из ТекстыБаз.Распределяются Цикл
				
				// ТекстБаз: * Ключ - текст, описывающий набор аналитики ("между подразделениями на счете 23")
				//           * Значение - перечень баз распределения
				
				БазыРаспределения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТекстБаз.Значение);
				
				Команда = ТегКомандыРедактированияНастроекСчета(
					Составитель.Команды.РаспределениеЗатрат,
					Счет,
					ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(БазыРаспределения));
				
				ТекстРаспределенияПоБазам = СтрШаблон(
					НСтр("ru = '%1 пропорционально %2'"),
					ТекстБаз.Ключ,
					Команда);
				
				ПредставлениеРаспределения.Добавить(ТекстРаспределенияПоБазам);
				
			КонецЦикла;
			
			ШаблонРаспределяются = НСтр("ru = 'распределяются %1'");
			
			ТекстыРаспределения.Добавить(СтрШаблон(ШаблонРаспределяются, СтрСоединить(ПредставлениеРаспределения, НСтр("ru = ', '"))));
			
		КонецЕсли;
		
		Если ТекстыБаз.ПереносятсяПриНаличии.Количество() > 0  Тогда
			
			ПредставлениеРаспределения = Новый Массив;
			
			Для Каждого ТекстБаз Из ТекстыБаз.ПереносятсяПриНаличии Цикл
			
				Команда = ТегКомандыРедактированияНастроекСчета(
					Составитель.Команды.РаспределениеЗатрат,
					Счет,
					ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ТекстБаз.Значение, "ИЛИ"));
				
				ТекстРаспределенияПоБазам = СтрШаблон(
					НСтр("ru = 'на счет %1 при наличии %2'"),
					ТекстБаз.Ключ,
					Команда);
				
				ПредставлениеРаспределения.Добавить(ТекстРаспределенияПоБазам);
				
			КонецЦикла;
			
			ШаблонРаспределяются = НСтр("ru = 'переносятся %1'");
			
			ТекстыРаспределения.Добавить(СтрШаблон(ШаблонРаспределяются, СтрСоединить(ПредставлениеРаспределения, НСтр("ru = ', '"))));
			
		КонецЕсли;
		
		Если ТекстыБаз.Переносятся.Количество() > 0  Тогда
			ПредставлениеРаспределения = Новый Массив;
			
			Для Каждого ТекстБаз Из ТекстыБаз.Переносятся Цикл
				
				// ТекстБаз: * Ключ - представление счета
				//           * Значение - не используется
				
				Команда = ТегКомандыРедактированияНастроекСчета(
					Составитель.Команды.РаспределениеЗатрат,
					Счет,
					НСтр("ru = 'одной суммой'"));
				
				ТекстПереносятсяНаСчет = СтрШаблон(
					НСтр("ru = '%1 %2'"),
					ТекстБаз.Ключ,
					Команда);
					
				ПредставлениеРаспределения.Добавить(ТекстПереносятсяНаСчет);
				
			КонецЦикла;
			
			ШаблонПереносятся = НСтр("ru = 'переносятся %1'");
			
			ТекстыРаспределения.Добавить(СтрШаблон(ШаблонПереносятся, СтрСоединить(ПредставлениеРаспределения, НСтр("ru = ', '"))));
			
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, СтрСоединить(ТекстыРаспределения, НСтр("ru = ', '")));
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Предложения.Добавить(Текст);
	
КонецПроцедуры

Процедура ДобавитьПредложениеСчетРасходыНаПродажу(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.РасходыНаПродажу Тогда
		Возврат;
	КонецЕсли;
	
	НеРаспределятьЗатратыНаДоставку = Составитель.Настройки.Закрытие[Счет].НеРаспределятьЗатратыНаДоставку;
	
	Шаблон = НСтр("ru = 'Затраты на доставку товаров от поставщика включаются в состав расходов на продажу '");
	
	Если НеРаспределятьЗатратыНаДоставку <> Неопределено И НеРаспределятьЗатратыНаДоставку Тогда
		Шаблон = Шаблон + НСтр("ru = '<a href = ""%1"">сразу, в периоде возникновения</a>.'");
	Иначе
		Шаблон = Шаблон + НСтр("ru = '<a href = ""%1"">ежемесячно, по мере реализации товаров</a>.'");
	КонецЕсли;
	
	Предложения.Добавить(СтрШаблон(Шаблон, КомандаРедактированияНастроекСчета(Составитель.Команды.ЗатратыНаДоставку, Счет)));
	
КонецПроцедуры

Функция ПредставлениеБазРаспределения(БазыРаспределения, Падеж = "Дательный")
	
	ПредставленияБазРаспределения = Новый Массив;
	Для Каждого БазаРаспределения Из БазыРаспределения Цикл
		Если Падеж = "Дательный" Тогда
			Представление = Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеДательныйПадеж(БазаРаспределения);
		ИначеЕсли Падеж = "Родительный" Тогда
			Представление = Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеРодительныйПадеж(БазаРаспределения);
		КонецЕсли;
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		ПредставленияБазРаспределения.Добавить(Представление);
	КонецЦикла;
	
	Возврат ПредставленияБазРаспределения;

КонецФункции

Функция НовыйТекстыБаз()
	
	ТекстыБаз = Новый Структура;
	ТекстыБаз.Вставить("Распределяются",        Новый Соответствие); // см. БазыРаспределенияСоответствующиеПорядкуРаспределения() 
	ТекстыБаз.Вставить("Переносятся",           Новый Соответствие);
	ТекстыБаз.Вставить("ПереносятсяПриНаличии", Новый Соответствие);
	
	Возврат ТекстыБаз;
	
КонецФункции

Процедура ЗаполнитьТекстыБазРаспределения(ТекстыБаз, ЗакрытиеСчета, Настройки, Приемники)

	// Порядок распределения - это на какие счета и какую аналитику распределять.
	// Для всех предопределенных баз одного счета он одинаковый, для собственных - может отличаться.
	ПредставлениеПорядкаРаспределенияПредопределенныхБаз = ПредставлениеПорядкаРаспределения(Приемники, Настройки);
	
	Для Каждого НастройкаРаспределения Из ЗакрытиеСчета.Распределение Цикл
		
		ДобавитьОписаниеБазыВКоллекциюТекстов(
			ТекстыБаз,
			НастройкаРаспределения,
			Приемники,
			ПредставлениеПорядкаРаспределенияПредопределенныхБаз,
			Настройки.ВыпускПродукции);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьОписаниеБазыВКоллекциюТекстов(ТекстыБаз, НастройкаРаспределения, Приемники, ПредставлениеПорядкаРаспределенияПредопределенныхБаз, ВыпускПродукции)
	
	ПорядокРаспределения = "";
	Если НастройкаРаспределения.БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		
		Если ЗначениеЗаполнено(ПредставлениеПорядкаРаспределенияПредопределенныхБаз) Тогда
			ПредставлениеБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеДательныйПадеж(
				НастройкаРаспределения.БазаРаспределения);
	
			Если ПустаяСтрока(ПредставлениеБазы) Тогда
				Возврат;
			КонецЕсли;
			ПорядокРаспределения = ПредставлениеПорядкаРаспределенияПредопределенныхБаз;
			ЧастиТекста = ТекстыБаз.Распределяются;
		ИначеЕсли Приемники.Счета.Количество() = 1 И Не ЗначениеЗаполнено(Приемники.Аналитика) Тогда
			ПредставлениеБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПредставлениеРодительныйПадеж(НастройкаРаспределения.БазаРаспределения);
			ПорядокРаспределения = Приемники.Счета[0];
			ЧастиТекста = ТекстыБаз.ПереносятсяПриНаличии;
		КонецЕсли;
		
	Иначе // собственная база
				
		// Изменяемый параметр, Истина - затраты распределяются между разрезами аналитики и/или счетами учета, 
		// Ложь - в настройке базы указан единственный счет учета и не выбрана ни одна из видов аналитик распределения,
		// затрат переносятся на этот счет одной суммой без распределения по коэффициентам.
		ЗатратыРаспределяются = Истина;
		ПорядокРаспределения = ПредставлениеПорядкаРаспределенияСобственнойБазы(
			НастройкаРаспределения.Модификатор,
			ЗатратыРаспределяются,
			ВыпускПродукции);
		
		Если ЗатратыРаспределяются Тогда
			
			ЧастиТекста = ТекстыБаз.Распределяются;
			
			Падеж = 3; // дательный
			ПредставлениеБазы = НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				НастройкаРаспределения.Модификатор.НаименованиеБазы,
				Падеж));
			
		Иначе
			ЧастиТекста = ТекстыБаз.Переносятся;
			ПредставлениеБазы = "";
		КонецЕсли;		
		
	КонецЕсли;
	
	БазыРаспределения = БазыРаспределенияСоответствующиеПорядкуРаспределения(ЧастиТекста, ПорядокРаспределения);
	БазыРаспределения.Добавить(ПредставлениеБазы);
	
КонецПроцедуры

Функция ПредставлениеПорядкаРаспределенияСобственнойБазы(Модификатор, ЗатратыРаспределяются, ВыпускПродукции)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НастройкаАналитики.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	НастройкаАналитики.ВидАналитики КАК ВидАналитики,
	|	НастройкаАналитики.ВидАналитикиСтатус КАК ВидАналитикиСтатус
	|ПОМЕСТИТЬ НастройкаАналитики
	|ИЗ
	|	&НастройкаАналитики КАК НастройкаАналитики
	|ГДЕ
	|	НастройкаАналитики.СчетСтатус = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаАналитики.Счет.Код КАК Счет,
	|	НастройкаАналитики.ВидАналитикиСтатус КАК ВидАналитикиСтатус,
	|	НастройкаАналитики.ВидАналитики КАК ВидАналитики,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйВидыСубконто.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ХозрасчетныйВидыСубконто.НомерСтроки
	|	КОНЕЦ КАК Порядок,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	НастройкаАналитики КАК НастройкаАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО НастройкаАналитики.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|			И НастройкаАналитики.ВидАналитики = ХозрасчетныйВидыСубконто.ВидСубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкаАналитики.Счет.Порядок,
	|	Порядок,
	|	ВидАналитики
	|ИТОГИ ПО
	|	Счет";

	Запрос.УстановитьПараметр("ПредставлениеПодразделения", НСтр("ru = 'Подразделения'"));
	Запрос.УстановитьПараметр("НастройкаАналитики", Модификатор.НастройкаАналитикиБазы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСчетУчета = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	АналитикиРаспределения = Новый Массив;
	СчетаБезАналитик = Новый Массив;

	Пока ВыборкаСчетУчета.Следующий() Цикл
		
		СтруктураДанныхРаспределения = Новый Структура("Счет, Аналитика, ТекстРаспределения", ВыборкаСчетУчета.Счет, Новый Массив, "");
		
		ВыборкаАналитик = ВыборкаСчетУчета.Выбрать();

		Пока ВыборкаАналитик.Следующий() Цикл

			Если ВыборкаАналитик.ВидАналитикиСтатус = 1 И ЗначениеЗаполнено(ВыборкаАналитик.ВидАналитики) 
				И Не БухгалтерскийУчетКлиентСервер.НужноСкрытьСубконто(Истина, ВыборкаАналитик.ТипЗначения) Тогда
				
				ПредставлениеАналитикиСчета = ПредставлениеАналитикиСчета(
					ВыборкаАналитик.ВидАналитики,
					ВыпускПродукции,
					"Творительный");
					
				Если ЗначениеЗаполнено(ПредставлениеАналитикиСчета) Тогда
					СтруктураДанныхРаспределения.Аналитика.Добавить(ПредставлениеАналитикиСчета);
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;

		Если СтруктураДанныхРаспределения.Аналитика.Количество() > 0 Тогда
			ШаблонТекста = НСтр("ru = 'между %1 на счете %2'");
			Аналитика = СтруктураДанныхРаспределения.Аналитика;
			СтруктураДанныхРаспределения.ТекстРаспределения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Аналитика), ВыборкаСчетУчета.Счет);
		Иначе
			СчетаБезАналитик.Добавить(ВыборкаСчетУчета.Счет);
		КонецЕсли;

		АналитикиРаспределения.Добавить(СтруктураДанныхРаспределения);
		
	КонецЦикла;

	Если АналитикиРаспределения.Количество() = 1 
		И Не ЗначениеЗаполнено(АналитикиРаспределения[0].ТекстРаспределения) Тогда
		
		// Указан один счет, ни одна аналитика не указана.	
		ЗатратыРаспределяются = Ложь;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'на счет %1'"), АналитикиРаспределения[0].Счет);
	КонецЕсли;
	
	ТекстыПорядкаРаспределения = Новый Массив;
	ПропускатьСчетаБезАналитики = Ложь;
	
	Для Каждого СтрокаАналитикиРаспределения Из АналитикиРаспределения Цикл
		
		Если ЗначениеЗаполнено(СтрокаАналитикиРаспределения.Аналитика) Тогда
			
			ТекстыПорядкаРаспределения.Добавить(СтрокаАналитикиРаспределения.ТекстРаспределения);
			
			// Все счета, для которых не указана аналитика, группируем, в эту ветку условия заходим только один раз.
		Иначе
			
			Если ПропускатьСчетаБезАналитики Тогда
				Продолжить;
			КонецЕсли;
			
			Если СчетаБезАналитик.Количество() = 1 Тогда
				ТекстСчетовБезАналитики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'между счетом %1'"), СчетаБезАналитик[0]);
			Иначе
				ТекстСчетовБезАналитики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'между счетами %1'"), ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(СчетаБезАналитик));
			КонецЕсли;
			
			ТекстыПорядкаРаспределения.Добавить(ТекстСчетовБезАналитики);
			ПропускатьСчетаБезАналитики = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыПорядкаРаспределения, НСтр("ru = ', '"));
	
КонецФункции

Функция БазыРаспределенияСоответствующиеПорядкуРаспределения(ЧастиТекста, ПорядокРаспределения)

	БазыРаспределения = ЧастиТекста[ПорядокРаспределения];
	Если БазыРаспределения = Неопределено Тогда
		БазыРаспределения = Новый Массив;
		ЧастиТекста.Вставить(ПорядокРаспределения, БазыРаспределения);
	КонецЕсли;
	
	Возврат БазыРаспределения;
	
КонецФункции

Процедура ДобавитьПредложениеСчетНезавершенногоПроизводства(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости
		И ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;	
	
	ШаблонНезавершенногоПроизводства = НСтр("ru = 'Учет незавершенного производства %1.'");
	Если Не ЗначениеЗаполнено(ЗакрытиеСчета.НезавершенноеПроизводство)
		Или ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		ПредставлениеУчетНЗП = Строка(Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется);
	Иначе
		ПредставлениеУчетНЗП = ЗакрытиеСчета.НезавершенноеПроизводство;
	КонецЕсли;

	ПредставлениеУчетНЗП = ОбщегоНазначенияБПКлиентСервер.ДекапитализироватьСтроку(ПредставлениеУчетНЗП);
	
	ПрименяетсяПодсистемаКомпонентыАмортизацииОС = Ложь;
	КомпонентыАмортизацииОС.ОпределитьПодсистемаПрименяется(ПрименяетсяПодсистемаКомпонентыАмортизацииОС);
	
	Если ЗакрытиеСчета.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		
		Команда = ТегКомандыРедактированияНастроекСчета(Составитель.Команды.НезавершенноеПроизводство, Счет,
			ПредставлениеУчетНЗП);
		Предложения.Добавить(СтрШаблон(ШаблонНезавершенногоПроизводства, Команда));

		Если Составитель.Настройки.НакапливатьЗатратыДоВыпуска
			И ЗакрытиеСчета.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда

			Предложения.Добавить(НСтр(
				"ru = 'Затраты, связанные с оказанием услуг, формируют незавершенное производство до тех пор, пока не введены специализированные документы производственного учета.'"));

		КонецЕсли;
		
	Иначе
		
		ШаблонТекстаТекущиеРемонты = НСтр(
			"ru = 'Затраты %1 списываются аналогично затратам на амортизацию основных средств.'");
		
		Если ПрименяетсяПодсистемаКомпонентыАмортизацииОС Тогда
			Предложения.Добавить(СтрШаблон(ШаблонТекстаТекущиеРемонты, НСтр("ru = 'на текущие ремонты'")));
			Предложения.Добавить(НСтр(
				"ru = 'Затраты на капитальные ремонты формируют капитальные вложения до тех пор, пока не введены документы завершения ремонта.'"));
		Иначе
			Предложения.Добавить(СтрШаблон(ШаблонТекстаТекущиеРемонты, НСтр("ru = 'на счете'")));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПредложениеСчетИспользуетсяПоУмолчанию(Предложения, Составитель, Счет)
	
	Если Счет <> Составитель.Настройки.ОсновнойСчетУчета
		Или Составитель.Настройки.СчетаУчета.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
		
	Предложения.Добавить(СтрШаблон(
		НСтр("ru = 'Счет <a href = ""%1"">используется по умолчанию</a> при вводе документов.'"),
		Составитель.Команды.СчетаУчета));
	
КонецПроцедуры

Функция ПредставлениеСпискаСчетов(Счета)
	
	ЭлементыПредставлений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Счета, "Код");
	
	КодыСчетов = Новый Массив;
	Для Каждого Счет Из Счета Цикл
		КодСчета = ЭлементыПредставлений[Счет];
		Если КодСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КодыСчетов.Добавить(КодСчета);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(КодыСчетов);
	
КонецФункции

Функция НомерПадежа(НаименованиеПадежа)
	
	Если НаименованиеПадежа = "Именительный" Тогда
		Возврат 1;
	ИначеЕсли НаименованиеПадежа = "Родительный" Тогда
		Возврат 2;
	ИначеЕсли НаименованиеПадежа = "Дательный" Тогда
		Возврат 3;
	ИначеЕсли НаименованиеПадежа = "Винительный" Тогда
		Возврат 4;
	ИначеЕсли НаименованиеПадежа = "Творительный" Тогда
		Возврат 5;
	ИначеЕсли НаименованиеПадежа = "Предложный" Тогда
		Возврат 6;
	КонецЕсли;
	
КонецФункции

Функция ПрименяетсяКалькуляцияСебестоимости(Настройки)
	
	Возврат ЗначениеЗаполнено(СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки))
				Или ЗначениеЗаполнено(СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки));
	
КонецФункции

Функция ПрименяетсяНезавершенноеПроизводство(Настройки)
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		
		Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗакрытиеСчета.НезавершенноеПроизводство)
			И ЗакрытиеСчета.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьПредложениеСчетКалькулированияСтоимостиРемонтовОС(Предложения, Составитель, Счет, ЗакрытиеСчета)
	
	Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеТекста") Тогда
		ВводноеПредложение = ВводноеПредложениеТекстаПроОдинСчетЗатрат(
			НСтр("ru = 'Затраты учитываются на счете %1.'"),
			Составитель,
			Счет);
		Предложения.Добавить(ВводноеПредложение);
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеТекста");
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеСчета");
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Счет предназначен для [НазначениеСчета].'");
	Если Не Составитель.Сообщения.Свойство("ВыведеноВводноеПредложениеСчета") Тогда
		Шаблон = ВводноеПредложениеОписанияСчета(
			НСтр("ru = 'Счет %1 предназначен для [НазначениеСчета].'"),
			Счет);
		Составитель.Сообщения.Вставить("ВыведеноВводноеПредложениеСчета");
	КонецЕсли;
	
	НазначениеСчета =  НСтр("ru = 'ежемесячного калькулирования затрат на ремонт основных средств'");
		
	ЭлементыТекста = Новый Структура("НазначениеСчета", НазначениеСчета);
	Предложения.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЭлементыТекста));
	
КонецПроцедуры

Функция БазыНастройки(Распределение)

	БазыРаспределения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		БазыРаспределения,
		Распределение.ВыгрузитьКолонку("БазаРаспределения"),
		Истина);
	Возврат БазыРаспределения;
КонецФункции

#КонецОбласти

#Область НастройкаСубконто

Процедура ДобавитьТребованиеРазрезАналитикиПродукция(Требования, Настройки)
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		
		Если Настройки.Аналитика[Счет].Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Требование = Требования.Добавить();
		Требование.Счет = Счет;
		Требование.РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
		
		НастройкаНезавершенноеПроизводство = Настройки.Закрытие[Счет].НезавершенноеПроизводство;
		Если НастройкаНезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации
			И Настройки.КомбинированныеНастройкиНезавершенноеПроизводство.Найти(Счет) = Неопределено Тогда
			Требование.УчетОстатков = 1;
		КонецЕсли;
		
		Если НастройкаНезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации
			И Настройки.АналитикаНезавершенногоПроизводства[Счет] <> Неопределено
			И Настройки.АналитикаНезавершенногоПроизводства[Счет].Найти(Требование.РазрезАналитики) <> Неопределено Тогда
			Требование.УчетОстатков = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Совместимость

Функция НаправленияЗакрытияДляСовместимости()
	
	ЗначенияСовместимости = Новый Структура;
	ЗначенияСовместимости.Вставить("СебестоимостьВыпуска",  Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости);
	ЗначенияСовместимости.Вставить("КалькуляционныйСчет",   Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты);
	ЗначенияСовместимости.Вставить("УправленческиеРасходы", Перечисления.РолиСчетовЗатрат.УправленческиеРасходы);
	ЗначенияСовместимости.Вставить("СебестоимостьПродаж",   Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж);
	
	Возврат ЗначенияСовместимости;
	
КонецФункции

Процедура УстановитьНастройкиЗакрытияДляСовместимости(Настройки)
	
	Для Каждого ОписаниеЗначенияСовместимости Из НаправленияЗакрытияДляСовместимости() Цикл
		
		Для Каждого Счет Из СчетаРоли(ОписаниеЗначенияСовместимости.Значение, Настройки) Цикл
			
			ЗакрытиеСчета = Настройки.Закрытие[Счет];
			ЗакрытиеСчета.Направление = ОписаниеЗначенияСовместимости.Ключ;
			ЗакрытиеСчета.ИсходноеНаправление = ЗакрытиеСчета.Направление;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРольСчетаИзНастроекДляСовместимости(Настройки)
	
	// Свойство Направление использовалось в предыдущих версиях.
	// В новых разработках это свойство использовать не следует - следует использовать Роль счета.
	// Однако, при кастомизации разработчики могли использовать Направление, в частности в расширениях.
	// Поэтому оно оставлено для совместимости: его значение конвертируется из свойства Роль и обратно.
	
	ЗначенияСовместимости = НаправленияЗакрытияДляСовместимости();
	
	Для Каждого ОписаниеЗакрытиеСчета Из Настройки.Закрытие Цикл
		
		ЗакрытиеСчета = ОписаниеЗакрытиеСчета.Значение;
		
		Если ЗакрытиеСчета.Направление = ЗакрытиеСчета.ИсходноеНаправление Тогда
			Продолжить;
		КонецЕсли;
		
		Роль = Неопределено;
		Если Не ЗначенияСовместимости.Свойство(ЗакрытиеСчета.Направление, Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьРоль(ЗакрытиеСчета, Роль, Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкиСовместимостиРедакция2(Настройки, Период, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.Период КАК ПериодЗаписи
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
	ЗаписьУчетнойПолитики.Период      = Выборка.ПериодЗаписи;
	ЗаписьУчетнойПолитики.Организация = Организация;
	ЗаписьУчетнойПолитики.Прочитать();
	
	Настройки.ВстречныйВыпуск = УчетнаяПолитика.СпособНастройкиВстречногоВыпуска(
		ЗаписьУчетнойПолитики,
		Настройки.Контекст.Период,
		Настройки.Контекст.Организация);
	
	ИспользоватьПлановуюСебестоимость = Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьПлановуюСебестоимость(
		Настройки.ВариантУчетаСтоимостиВыпуска);
		
	Настройки.НакапливатьЗатратыДоВыпуска = УчетнаяПолитика.НакапливатьЗатратыДоВыпуска(
		ЗаписьУчетнойПолитики,
		ИспользоватьПлановуюСебестоимость);
		
КонецПроцедуры

Процедура УстановитьКомбинированныеНастройкиНезавершенноеПроизводство(Настройки)

	ПроверяемыеСчета = Новый Массив;

	Для Каждого Счет Из Настройки.СчетаУчета Цикл

		ЗакрытиеСчета = Настройки.Закрытие[Счет];
		Если ЗакрытиеСчета.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда
			Продолжить;
		КонецЕсли;

		ОтображаемаяАналитика = Настройки.ОтображаемаяАналитика[Счет];
		Если ОтображаемаяАналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПроверяемыеСчета.Добавить(Счет);

	КонецЦикла;

	Если Не ЗначениеЗаполнено(ПроверяемыеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	КомбинированныеНастройкиНезавершенноеПроизводство = СчетаСубконтоПродукцияОборотное(ПроверяемыеСчета);
	
	СчетаСубконтоПродукцияОстаточноеОтсутствуетПереходНЗППоПродукции = 
		ПереходНЗПДетализацияПоПродукции.СчетаСубконтоПродукцияОстаточноеОтсутствуетПереходНЗППоПродукции(
			ПроверяемыеСчета, Настройки.Контекст.Организация);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		КомбинированныеНастройкиНезавершенноеПроизводство,
		СчетаСубконтоПродукцияОстаточноеОтсутствуетПереходНЗППоПродукции,
		Истина);
		
	Настройки.КомбинированныеНастройкиНезавершенноеПроизводство = КомбинированныеНастройкиНезавершенноеПроизводство;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура СоздатьЭлементы() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Создает новые записи, поэтому выполняется централизованно
		Возврат;
	КонецЕсли;
	
	// Порядок работы с филиалами:
	// - будет создана или изменена запись по головной организации, которая будет включать все данные всех филиалов
	// - при записи этой записи она синхронизируется на все филиалы (за это отвечает код, вызываемый из модуля регистра)
	
	// Получим все настройки учета затрат из учетной политики.
	// Внутренние соединения со справочниками позволяют исключать из обработки некорректные записи.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитика.Организация.ГоловнаяОрганизация КАК Организация,
	|	УчетнаяПолитика.НастройкиУчетаЗатрат КАК НастройкиУчетаЗатрат
	|ПОМЕСТИТЬ ЗаписиУчетнойПолитики
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО УчетнаяПолитика.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	(УчетнаяПолитика.НастройкиУчетаЗатрат.УдалитьБазаРаспределения ЕСТЬ NULL
	|			ИЛИ УчетнаяПолитика.НастройкиУчетаЗатрат.УдалитьБазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МетодыРаспределения.Период КАК Период,
	|	МетодыРаспределения.Организация.ГоловнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ ПромежуточныеЗаписи
	|ИЗ
	|	РегистрСведений.УдалитьМетодыРаспределенияКосвенныхРасходовОрганизаций КАК МетодыРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО МетодыРаспределения.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	НЕ (МетодыРаспределения.Период, МетодыРаспределения.Организация.ГоловнаяОрганизация) В
	|				(ВЫБРАТЬ
	|					ЗаписиУчетнойПолитики.Период,
	|					ЗаписиУчетнойПолитики.Организация
	|				ИЗ
	|					ЗаписиУчетнойПолитики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиУчетнойПолитики.Период КАК Период,
	|	ЗаписиУчетнойПолитики.Организация КАК Организация,
	|	ЗаписиУчетнойПолитики.НастройкиУчетаЗатрат КАК НастройкиУчетаЗатрат,
	|	ИСТИНА КАК СуществуетЗаписьУчетнойПолитики
	|ИЗ
	|	ЗаписиУчетнойПолитики КАК ЗаписиУчетнойПолитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПромежуточныеЗаписи.Период,
	|	ПромежуточныеЗаписи.Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиУчетаЗатрат.ПустаяСсылка),
	|	ЛОЖЬ
	|ИЗ
	|	ПромежуточныеЗаписи КАК ПромежуточныеЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ПредыдущаяЗаписьУчетнойПолитики = Неопределено;
		
		ВыборкаЗапись = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапись.Следующий() Цикл
			
			ИсточникНастроекУчетаЗатрат = Неопределено;
			
			Если ВыборкаЗапись.СуществуетЗаписьУчетнойПолитики Тогда
				
				ИсточникНастроекУчетаЗатрат = ВыборкаЗапись.НастройкиУчетаЗатрат;
				
				МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапись);
				МенеджерЗаписи.Прочитать();
				
				ПредыдущаяЗаписьУчетнойПолитики = МенеджерЗаписи;
				
			ИначеЕсли ПредыдущаяЗаписьУчетнойПолитики = Неопределено Тогда
				
				Продолжить;
				
			Иначе
				
				ИсточникНастроекУчетаЗатрат = ПредыдущаяЗаписьУчетнойПолитики.НастройкиУчетаЗатрат;
				
				МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПредыдущаяЗаписьУчетнойПолитики);
				МенеджерЗаписи.Период = ВыборкаЗапись.Период;
				МенеджерЗаписи.НастройкиУчетаЗатрат = Неопределено;
				
				ПредыдущаяЗаписьУчетнойПолитики = МенеджерЗаписи;
				
			КонецЕсли;
			
			Настройки = НовыйБазовыеНастройкиУчетаЗатрат();
			
			ЗаполнитьЗначенияСвойств(Настройки.Контекст, ВыборкаЗапись);
			
			Если Не ЗначениеЗаполнено(ИсточникНастроекУчетаЗатрат) Тогда
				ЗаполнитьПоУмолчанию(Настройки);
			Иначе
				ПрочитатьСсылку(Настройки, ИсточникНастроекУчетаЗатрат);
			КонецЕсли;
			
			РегистрыСведений.УдалитьМетодыРаспределенияКосвенныхРасходовОрганизаций.ПрочитатьНастройки(
				Настройки,
				ВыборкаЗапись.Период,
				ВыборкаЗапись.Организация);
				
			Исправить(Настройки);
				
			Попытка
				РегистрыСведений.УчетнаяПолитика.Записать(МенеджерЗаписи, Настройки);
			Исключение
				
				// Обработчик обновления - сервисный.
				// Если он не будет выполнен, то продолжать работу можно.
				
				// Обработка возможных нарушений стандарта разработки
				// в вызываемом коде библиотек
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбработкаОбновления'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.УчетнаяПолитика,
					,
					ОписаниеОшибки());
					
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Отложенный обработчик обновления: заполняет настройки учета затрат при переходе от их хранения
// в регистре УчетнаяПолитика.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//
Процедура ЗаполнитьНастройкамиУчетнойПолитики(ПараметрыОбработчика) Экспорт
	
	// Ответственное чтение откладываем на более позднее время,
	// так как обновление настроек не является необходимым для их редактирования.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитика.Организация КАК Организация,
	|	УчетнаяПолитика.НастройкиУчетаЗатрат КАК Настройка
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО УчетнаяПолитика.НастройкиУчетаЗатрат.ОсновнойСчетУчета = Хозрасчетный.Ссылка
	|ГДЕ
	|	НЕ УчетнаяПолитика.НастройкиУчетаЗатрат.УстановленыВручную
	|	И Хозрасчетный.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Организация,
	|	Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.УчетнаяПолитика");
		ЭлементБлокировкиДанных.УстановитьЗначение("Период",      Выборка.Период);
		ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Организация);
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.НастройкиУчетаЗатрат");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка",      Выборка.Настройка);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
			// Проверим, что запись консистентна
			ЗаписьУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
			ЗаписьУчетнойПолитики.Период      = Выборка.Период;
			ЗаписьУчетнойПолитики.Организация = Выборка.Организация;
			ЗаписьУчетнойПолитики.Прочитать();
			
			Если ЗаписьУчетнойПолитики.Выбран() И ЗаписьУчетнойПолитики.НастройкиУчетаЗатрат = Выборка.Настройка Тогда
			
				// Обновим настройку
				Объект = ЗаписьУчетнойПолитики.НастройкиУчетаЗатрат.ПолучитьОбъект();
				Если Объект <> Неопределено
					И Не Объект.УстановленыВручную
					И Не ЗначениеЗаполнено(Объект.ОсновнойСчетУчета) Тогда
					
					ЗаполнитьЗаписьНастройкамиУчетнойПолитики(
						Объект,
						ЗаписьУчетнойПолитики,
						Выборка.Период,
						Выборка.Организация);
						
					Если Объект.Модифицированность() Тогда
						Объект.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обработку проблемных данных пропускаем, так как приоритет имеют беспроблемные данные.
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.НастройкиУчетаЗатрат,
				Выборка.Настройка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьНастройкамиУчетнойПолитики(Объект, ЗаписьУчетнойПолитики, Период, Организация)
	
	Объект.ОсновнойСчетУчета = ЗаписьУчетнойПолитики.УдалитьОсновнойСчетУчетаЗатрат;
	
	// - перечень счетов
	ПрименяетсяПБУ5 = РегистрыСведений.УчетнаяПолитика.ПрименяетсяПБУ5(
		ЗаписьУчетнойПолитики.Период,
		ЗаписьУчетнойПолитики.Организация);
	
	ВариантУчетаСтоимостиВыпуска = УчетнаяПолитика.ВариантУчетаСтоимостиВыпуска(ЗаписьУчетнойПолитики);
	
	Объект.УстановленыВручную = ЗаполнитьИспользуемыеСчетаНастройкамиУчетнойПолитики(
		Объект.ПланСчетов,
		ЗаписьУчетнойПолитики,
		ПрименяетсяПБУ5,
		ВариантУчетаСтоимостиВыпуска);
	
	Если Не Объект.УстановленыВручную Тогда
		Возврат;
	КонецЕсли;
	
	КалькуляционныеСчета = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	ИспользуютсяКалькуляционныеСчета = Ложь;
	Для Каждого Счет Из КалькуляционныеСчета Цикл
		Если Объект.ПланСчетов.Найти(Счет, "Счет") <> Неопределено Тогда
			ИспользуютсяКалькуляционныеСчета = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИспользуютсяКалькуляционныеСчета Тогда
		Возврат;
	КонецЕсли;
	
	// - вариант учета стоимости выпуска
	Объект.ВариантУчетаСтоимостиВыпуска = ВариантУчетаСтоимостиВыпуска;
	
	// - включение расходов на управление в себестоимость продукции
	СтоимостьЗапасовВключаетУправленческиеРасходы = ПрименяетсяПБУ5 И Не ЗаписьУчетнойПолитики.УдалитьДиректКостинг;
	
	Если СтоимостьЗапасовВключаетУправленческиеРасходы Тогда
		
		Для Каждого Счет Из СчетаОбщехозяйственныеРасходы() Цикл
			
			ЗаписьСчета = Объект.ПланСчетов.Найти(Счет, "Счет");
			Если ЗаписьСчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСчета.Роль = Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// - разрезы учета (продукция)
	Объект.РазрезыУчета.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаКалькуляции",  УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета()));
	Запрос.УстановитьПараметр("ИспользуемыеСчета", Объект.ПланСчетов.ВыгрузитьКолонку("Счет"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СубконтоПродукция.Ссылка КАК Счет,
	|	СубконтоПродукция.Ссылка.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СубконтоПродукция
	|ГДЕ
	|	СубконтоПродукция.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|	И СубконтоПродукция.Суммовой
	|	И СубконтоПродукция.Ссылка В(&СчетаКалькуляции)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Счет";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Объект.РазрезыУчета.Добавить();
		Запись.Счет         = Выборка.Счет;
		Запись.ВидАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
	КонецЦикла;
	
	// - незавершенное производство
	ВариантУчетаНезавершенногоПроизводства = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации;
	
	Если УчетнаяПолитика.УчетНезавершенногоПроизводстваВедетсяБезИнвентаризации(ЗаписьУчетнойПолитики) Тогда
		ВариантУчетаНезавершенногоПроизводства = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации;
	КонецЕсли;
	
	Объект.НезавершенноеПроизводство.Очистить();
	Для Каждого Счет Из КалькуляционныеСчета Цикл
		ЗаписьНезавершенноеПроизводство = Объект.НезавершенноеПроизводство.Добавить();
		ЗаписьНезавершенноеПроизводство.Счет         = Счет;
		ЗаписьНезавершенноеПроизводство.ВариантУчета = ВариантУчетаНезавершенногоПроизводства;
	КонецЦикла;
	
	// - правила распределения
	СчетаУчета = Объект.ПланСчетов.ВыгрузитьКолонку("Счет");
	
	// -- отказ от групповых счетов в настройке
	ДетализироватьНастройкиРаспределенияПоСчетам(Объект.Распределение, СчетаУчета);
	
	// -- отказ от общей настройки для всех счетов
	ПеренестиОбщуюБазуРаспределения(Объект.Распределение, Объект.УдалитьБазаРаспределения, СчетаУчета);
	
	// -- выручка от реализации услуг
	Если УчетнаяПолитика.ЕстьУсловияБазыРаспределенияВыручкаОтРеализацииУслуг(ЗаписьУчетнойПолитики) Тогда
		
		Отбор = Новый Структура("БазаРаспределения", Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
		Для Каждого Запись Из Объект.Распределение.НайтиСтроки(Отбор) Цикл
			Запись.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьИспользуемыеСчетаНастройкамиУчетнойПолитики(ОбъектПланСчетов, ЗаписьУчетнойПолитики, ПрименяетсяПБУ5, ВариантУчетаСтоимостиВыпуска)
	
	Если ПереченьСчетовРанееРедактировалсяПользователем() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СчетаРасходов = СчетаРасходовЗаписиУчетнойПолитики(ЗаписьУчетнойПолитики, ПрименяетсяПБУ5, ВариантУчетаСтоимостиВыпуска);
	
	Если ЗначениеЗаполнено(СчетаРасходов) Тогда
		
		// Закрытие счетов 44 раньше подразумевалось вне зависимости от настроек
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
		
		СчетаРасходов = УчетЗатрат.СчетаРасходов(СчетаРасходов);
		
	Иначе
		
		// Перечень счетов определяем данными о фактических расходах, исходя из того,
		// что закрытие месяца так определяло, надо ли выполнять регламентную операцию
		ИспользуемыеСчета = ИспользуемыеСчетаРасходовПериодаДействияУчетнойПолитики(
			ЗаписьУчетнойПолитики.Период, ЗаписьУчетнойПолитики.Организация);
		
		СчетаНастраиваемыеУчетнойПолитикой = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеСчетаПрямыхРасходов());
		СчетаБезНастроек = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИспользуемыеСчета, СчетаНастраиваемыеУчетнойПолитикой);
		
		Если ИспользуемыеСчета.Количество() = СчетаБезНастроек.Количество() Тогда
			// Тривиальный случай, достаточно автоматической настройки
			Возврат Ложь;
		КонецЕсли;
		
		СчетаРасходов = СчетаБезНастроек;
		
	КонецЕсли;
	
	ОбъектПланСчетов.Очистить();
	Для Каждого Счет Из СчетаРасходов Цикл
		ОбъектПланСчетов.Добавить().Счет = Счет;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПереченьСчетовРанееРедактировалсяПользователем()
	
	Возврат Ложь; // В НКО мог редактироваться
	
КонецФункции

Функция СчетаРасходовЗаписиУчетнойПолитики(ЗаписьУчетнойПолитики, ПрименяетсяПБУ5, ВариантУчетаСтоимостиВыпуска)
	
	СчетаРасходов = Новый Массив;
	
	Если ЗаписьУчетнойПолитики.УдалитьВыпускПродукции Или ЗаписьУчетнойПолитики.УдалитьОказаниеУслуг Тогда
	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
		
		Если Не ПрименяетсяПБУ5 Тогда
			РасширеннаяАналитикаЗатрат.ДобавитьСчетБракВПроизводстве(СчетаРасходов);
		КонецЕсли;
		
		Если Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСчетВыпускПродукции(ВариантУчетаСтоимостиВыпуска) Тогда
			СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ВыпускПродукции);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗаписьУчетнойПолитики.УдалитьРасходыОбслуживающихПроизводствВключатьВПрочиеРасходы Тогда
	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаОбслуживающиеПроизводства());
	
	КонецЕсли;
	
	Возврат СчетаРасходов;
	
КонецФункции

Процедура ДетализироватьНастройкиРаспределенияПоСчетам(Распределение, СчетаУчета)
	
	СчетаНастройки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Распределение.ВыгрузитьКолонку("Счет"));
	СчетаПримененияНастроек = Новый Соответствие; // Ключ - счет настройки (сводный); Значение - массив детальных счетов
	
	Для Каждого СчетНастройки Из СчетаНастройки Цикл
		
		Если Не ЗначениеЗаполнено(СчетНастройки) Тогда
			// Требуется распространить настройку на все счета
			ДетальныеСчета = СчетаУчета;
		ИначеЕсли СчетаУчета.Найти(СчетНастройки) = Неопределено Тогда
			// Возможно, в настройке указан счет-группа.
			// В этом случае попробуем распространить настройку на подходящие субсчета.
			ДетальныеСчета = Новый Массив;
			Для Каждого Субсчет Из БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетНастройки) Цикл
				Если СчетаУчета.Найти(Субсчет) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДетальныеСчета.Добавить(Субсчет);
			КонецЦикла;
		Иначе
			// Уже все хорошо
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДетальныеСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаПримененияНастроек.Вставить(СчетНастройки, ДетальныеСчета);
		
	КонецЦикла;
	
	// Коллекцию будем модифицировать - добавлять и удалять записи.
	// Поэтому для обхода сделаем массив строк таблицы, который будет неизменным.
	ИсходныеЗаписи = Новый Массив;
	Для Каждого СводнаяЗапись Из Распределение Цикл
		ИсходныеЗаписи.Добавить(СводнаяЗапись);
	КонецЦикла;
	
	Для Каждого СводнаяЗапись Из ИсходныеЗаписи Цикл
		
		ДетальныеСчета = СчетаПримененияНастроек[СводнаяЗапись.Счет];
		Если ДетальныеСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Заменим сводную запись на набор детальных
		Позиция = Распределение.Индекс(СводнаяЗапись);
		Для Каждого СчетДетальнойНастройки Из ДетальныеСчета Цикл
			ДетальнаяЗапись = Распределение.Вставить(Позиция);
			ЗаполнитьЗначенияСвойств(ДетальнаяЗапись, СводнаяЗапись);
			ДетальнаяЗапись.Счет = СчетДетальнойНастройки;
			Позиция = Позиция + 1;
		КонецЦикла;
		
		Распределение.Удалить(СводнаяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиОбщуюБазуРаспределения(Распределение, ОбщаяБазаРаспределения, СчетаУчета)
	
	// Ранее хранилось общее правило для всех счетов (в УдалитьБазаРаспределения)
	// и исключения (в ОсобыеПравилаРаспределения).
	// При этом исключения могли дополнять правило.
	// Теперь исключения по счету заменяют общее правило. Соответствующая табличная часть переименована в Распределение.
	// Поэтому содержимое табличной части нужно дополнить данными общего правила.
	
	Если Не ЗначениеЗаполнено(ОбщаяБазаРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	ПервыеПравилаПоСчетам = Новый Соответствие;
	Для Каждого Запись Из Распределение Цикл
		
		ПервоеПравило = ПервыеПравилаПоСчетам[Запись.Счет];
		
		Если ПервоеПравило <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПервыеПравилаПоСчетам.Вставить(Запись.Счет, Запись);
		
	КонецЦикла;
	
	Для Каждого Счет Из СчетаУчета Цикл
		
		ПервоеПравило = ПервыеПравилаПоСчетам[Счет];
		
		Если ПервоеПравило <> Неопределено
			И Не ЗначениеЗаполнено(ПервоеПравило.Филиал)
			И Не ЗначениеЗаполнено(ПервоеПравило.Подразделение)
			И Не ЗначениеЗаполнено(ПервоеПравило.СтатьяЗатрат) Тогда
			// Для счета задана максимально общая настройка, устанавливать другую общую нет смысла
			Продолжить;
		КонецЕсли;
		
		НастройкаРаспределения = Распределение.Вставить(0);
		НастройкаРаспределения.Счет              = Счет;
		НастройкаРаспределения.БазаРаспределения = ОбщаяБазаРаспределения;
		
	КонецЦикла;
	
	ОбщаяБазаРаспределения = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
