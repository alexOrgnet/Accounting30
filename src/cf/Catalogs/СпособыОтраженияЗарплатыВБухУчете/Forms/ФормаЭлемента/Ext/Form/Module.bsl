#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	НастройкаСчетаИАналитики();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзменении(Элемент)
	
	НастройкаСчетаИАналитики();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, ЭтотОбъект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	Если Счет <> СчетУчетаРБП Тогда
		СчетНУ      = Неопределено;
		СубконтоНУ1 = Неопределено;
		СубконтоНУ2 = Неопределено;
		СубконтоНУ3 = Неопределено;
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, ЭтотОбъект, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	КонецЕсли;
	
	УправлениеСчетомНУ(ЭтотОбъект);
	УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНУПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, ПорядокОтраженияВБухУчете, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗатратЕНВДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПоказатьАналитикуЕНВД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУСНПриИзменении(Элемент)
	
	ПорядокОтраженияВБухУчете.ОтражениеВУСН = ОтражениеВУСН;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
		Элементы.ГруппаОсобыйПорядокНалогообложения.Видимость = Ложь;
		Элементы.НалоговыйУчетСтраховыхВзносов.Видимость      = Истина;
		Элементы.ГруппаНалоговыйУчетУСН.Видимость             = Истина;
		Элементы.ГруппаСчетИСубконто.ОтображатьЗаголовок      = Ложь;
	ИначеЕсли Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		Элементы.ГруппаОсобыйПорядокНалогообложения.Видимость = Ложь;
		Элементы.НалоговыйУчетСтраховыхВзносов.Видимость      = Ложь;
		Элементы.ГруппаНалоговыйУчетУСН.Видимость             = Ложь;
		Элементы.ГруппаСчетИСубконто.ОтображатьЗаголовок      = Ложь;
	Иначе
		Элементы.ГруппаОсобыйПорядокНалогообложения.Видимость = Истина;
		Элементы.НалоговыйУчетСтраховыхВзносов.Видимость      = Истина;
		Элементы.ГруппаНалоговыйУчетУСН.Видимость             = Истина;
		Элементы.ГруппаСчетИСубконто.ОтображатьЗаголовок      = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСчетаИАналитики()
	
	МассивОтборов = Новый Массив;
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения));
	ИначеЕсли Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения));
	Иначе
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения));
	КонецЕсли;
	
	ПараметрыВыбораСубконто = Новый ФиксированныйМассив(МассивОтборов);
	Элементы.Субконто1.ПараметрыВыбора = ПараметрыВыбораСубконто;
	Элементы.Субконто2.ПараметрыВыбора = ПараметрыВыбораСубконто;
	Элементы.Субконто3.ПараметрыВыбора = ПараметрыВыбораСубконто;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ИспользуетсяУСН = ПолучитьФункциональнуюОпцию("ИспользуетсяУСН");
	ИспользуетсяАУСН = ПолучитьФункциональнуюОпцию("ИспользуетсяАУСН");
	
	Если Параметры.Ключ.Пустая() Тогда
		Если (ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") Или ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент"))
			И НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") Или ИспользуетсяУСН Или ИспользуетсяАУСН) Тогда
			
			ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
			
		КонецЕсли;
		
		СпособОтраженияЗарплатыВБухУчетеСсылка = Справочники.СпособыОтраженияЗарплатыВБухУчете.ПолучитьСсылку();
		Если ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования) Тогда 
			СкопироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, СпособОтраженияЗарплатыВБухУчетеСсылка, ЭтотОбъект.Параметры.ЗначениеКопирования);	
		КонецЕсли;
		ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, СпособОтраженияЗарплатыВБухУчетеСсылка);
	Иначе
		ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	СчетУчетаРБП = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов");
	
	УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам(ЭтотОбъект);
	ПоказатьАналитикуЕНВД(ЭтотОбъект);
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, ЭтотОбъект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, ЭтотОбъект, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
		
	УправлениеСчетомНУ(ЭтотОбъект);
	УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам(ЭтотОбъект);
	
	Если ВидЗатратЕНВД = Неопределено Тогда
		ВидЗатратЕНВД = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
	КонецЕсли;
	
	ЗаголовокОтражениеВУСН = ?(ИспользуетсяАУСН И Не ИспользуетсяУСН,
		НСтр("ru = 'Отражение в АУСН'"),
		НСтр("ru = 'Отражение в УСН'"));
	Элементы.ОтражениеВУСН.Заголовок = ЗаголовокОтражениеВУСН;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗаписьДляРедактированияВФорме(Форма, ВедущийОбъект)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете;	
	
	ИмяЭлемента = "ПорядокОтраженияВБухУчете";
	МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписи.ЕНВД = Ложь;
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяЭлемента);
	
	ОтражениеВУСН = МенеджерЗаписи.ОтражениеВУСН;
	
	ИмяЭлемента = "ПорядокОтраженияВБухУчетеЕНВД";
	МенеджерЗаписиЕНВД = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЕНВД.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписиЕНВД.ЕНВД = Истина;
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписиЕНВД, ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписьДляРедактированияВФорме(Форма, ВедущийОбъект)
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		ИнициализироватьЗаписьДляРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете;
	
	ИмяЭлемента = "ПорядокОтраженияВБухУчете";
	МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписи.ЕНВД = Ложь;
	МенеджерЗаписи.Прочитать();
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяЭлемента);
	
	ОтражениеВУСН = МенеджерЗаписи.ОтражениеВУСН;
	
	ИмяЭлемента = "ПорядокОтраженияВБухУчетеЕНВД";
	МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписи.ЕНВД = Истина;
	МенеджерЗаписи.Прочитать();
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяЭлемента);
	
	Если ВедущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		ЗаполнитьЗначенияСвойств(Форма, Форма.ПорядокОтраженияВБухУчетеЕНВД);
		Если НЕ ЗначениеЗаполнено(Форма.Счет) Тогда
			Форма.Счет = Форма.ПорядокОтраженияВБухУчете.Счет;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(Форма, Форма.ПорядокОтраженияВБухУчете);
		Если НЕ ЗначениеЗаполнено(Форма.Счет) Тогда
			Форма.Счет = Форма.ПорядокОтраженияВБухУчетеЕНВД.Счет;
		КонецЕсли;
		
	КонецЕсли;
	
	Для НомерСубконто = 1 По 3 Цикл
		Если ТипЗнч(Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.СтатьиЗатрат") 
			ИЛИ ТипЗнч(Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			Форма.ВидЗатратЕНВД = Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьЗаписьДляРедактированияВФорме(Форма, ВедущийОбъект, КопируемыйОбъект)
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете;	
	
	МенеджерЗаписиКопируемыйОбъект = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписиКопируемыйОбъект.СпособОтраженияЗарплатыВБухУчете = КопируемыйОбъект;
	МенеджерЗаписиКопируемыйОбъект.ЕНВД = Ложь;
	МенеджерЗаписиКопируемыйОбъект.Прочитать();
	
	МенеджерЗаписиЕНВДКопируемыйОбъект = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЕНВДКопируемыйОбъект.СпособОтраженияЗарплатыВБухУчете = КопируемыйОбъект;
	МенеджерЗаписиЕНВДКопируемыйОбъект.ЕНВД = Истина;
	МенеджерЗаписиЕНВДКопируемыйОбъект.Прочитать();
	
		
	ИмяЭлемента = "ПорядокОтраженияВБухУчете";
	МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписи.ЕНВД = Ложь;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МенеджерЗаписиКопируемыйОбъект);
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяЭлемента);
	
	ИмяЭлемента = "ПорядокОтраженияВБухУчетеЕНВД";
	МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	МенеджерЗаписи.ЕНВД = Истина;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МенеджерЗаписиЕНВДКопируемыйОбъект);
	МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяЭлемента);
	
	Для НомерСубконто = 1 По 3 Цикл				
		Если ТипЗнч(Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.СтатьиЗатрат") 
			ИЛИ ТипЗнч(Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			Форма.ВидЗатратЕНВД = Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто];	
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам(Форма)
	
	Текст = НСтр("ru = 'Порядок отражения страховых взносов в БУ и НУ совпадает'");
	
	Если ЗначениеЗаполнено(Форма.Счет) Тогда
		Если Форма.Счет = Форма.СчетУчетаРБП Тогда
			
			Текст = СтрШаблон(НСтр("ru = 'Счет учета расходов по страховым взносам по БУ: %1 по НУ: %2'"), Форма.Счет, Форма.СчетНУ);
			
		КонецЕсли;
	КонецЕсли;
	
	Форма.НадписьСчетУчетаРасходовПоСтраховымВзносам = Текст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСчетомНУ(Форма)
	
	ЭтоРБП = Форма.Счет = Форма.СчетУчетаРБП;
	Форма.Элементы.СчетНУ.Доступность               = ЭтоРБП;
	Форма.Элементы.СчетНУ.АвтоОтметкаНезаполненного = ЭтоРБП;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаписьПослеРедактированияВФорме(Форма, ВедущийОбъект, ДанныеМодифицированы = Ложь)
	
	Если Форма.Модифицированность Тогда
	
		Форма.ПорядокОтраженияВБухУчете.ЕНВД = Ложь;
		Форма.ПорядокОтраженияВБухУчете.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект.Ссылка;
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ПорядокОтраженияВБухУчете");
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Счет)
			ИЛИ ВедущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЗаписыватьЕНВД = ВедущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат <> Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		
		Если ЗаписыватьЕНВД Тогда
			Форма.ПорядокОтраженияВБухУчетеЕНВД.Счет = Форма.ПорядокОтраженияВБухУчете.Счет;
		Иначе
			Форма.ПорядокОтраженияВБухУчетеЕНВД.Счет = "";
		КонецЕсли;
		
		Для НомерСубконто = 1 По 3 Цикл
			Если ЗаписыватьЕНВД Тогда
				Если ВедущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат <> Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения
					И (ТипЗнч(Форма.ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.СтатьиЗатрат") 
					ИЛИ ТипЗнч(Форма.ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")) Тогда
					Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = Форма.ВидЗатратЕНВД;
				Иначе
					Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто];
				КонецЕсли;
			Иначе
				Форма.ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = "";
			КонецЕсли;
		КонецЦикла;
			
		Форма.ПорядокОтраженияВБухУчетеЕНВД.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		Форма.ПорядокОтраженияВБухУчетеЕНВД.ЕНВД = Истина;
		Форма.ПорядокОтраженияВБухУчетеЕНВД.СпособОтраженияЗарплатыВБухУчете = ВедущийОбъект.Ссылка;
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ПорядокОтраженияВБухУчетеЕНВД");
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Счет) ИЛИ НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент"))
			ИЛИ ВедущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияСчета()
	
	ПорядокОтраженияВБухУчете.Счет     = Счет;
	ПорядокОтраженияВБухУчете.СчетНУ   = СчетНУ;
	ПорядокОтраженияВБухУчетеЕНВД.Счет = Счет;
	ЗаполнитьЗначенияСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияСубконто()
	
	ПоказыватьАналитикуЕНВД = Ложь;
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = 
			ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения") Тогда
		
		Для НомерСубконто = 1 По 3 Цикл
			ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто] = ЭтотОбъект["Субконто" + НомерСубконто];
		КонецЦикла;
		
		Для НомерСубконто = 1 По 3 Цикл
			ПорядокОтраженияВБухУчете["СубконтоНУ" + НомерСубконто] = ЭтотОбъект["СубконтоНУ" + НомерСубконто];
		КонецЦикла;
		
	ИначеЕсли Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = 
			ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения") Тогда
		
		Для НомерСубконто = 1 По 3 Цикл
			ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = ЭтотОбъект["Субконто" + НомерСубконто];
		КонецЦикла;
		
	Иначе
		
		Для НомерСубконто = 1 По 3 Цикл
			ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто] = ЭтотОбъект["Субконто" + НомерСубконто];
		КонецЦикла;
		
		Для НомерСубконто = 1 По 3 Цикл
			ПорядокОтраженияВБухУчете["СубконтоНУ" + НомерСубконто] = ЭтотОбъект["СубконтоНУ" + НомерСубконто];
		КонецЦикла;
		
		Для НомерСубконто = 1 По 3 Цикл
			Если ТипЗнч(ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПоказыватьАналитикуЕНВД = Истина;
				Если ТипЗнч(ВидЗатратЕНВД) <> Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
					ВидЗатратЕНВД = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
				КонецЕсли;
			ИначеЕсли ТипЗнч(ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ПоказыватьАналитикуЕНВД = Истина;
				Если ТипЗнч(ВидЗатратЕНВД) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
					ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка");
					ВидЗатратЕНВД = ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
				ПорядокОтраженияВБухУчетеЕНВД["Субконто" + НомерСубконто] = ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПоказыватьАналитикуЕНВД Тогда
		ВидЗатратЕНВД = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
	КонецЕсли;
	
	ПоказатьАналитикуЕНВД(ЭтотОбъект, ПоказыватьАналитикуЕНВД);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьАналитикуЕНВД(Форма, ПоказыватьАналитикуЕНВД = Неопределено)
		
	Если ПоказыватьАналитикуЕНВД = Неопределено Тогда
		ПоказыватьАналитикуЕНВД = Ложь;
		Для НомерСубконто = 1 По 3 Цикл
			Если ТипЗнч(Форма.ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.СтатьиЗатрат") 
				ИЛИ ТипЗнч(Форма.ПорядокОтраженияВБухУчете["Субконто" + НомерСубконто])  = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ПоказыватьАналитикуЕНВД = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Элементы.ГруппаСтраницаСчетИСубконтоЕНВД.Доступность = ПоказыватьАналитикуЕНВД;
	
	Форма.Элементы.ВидЗатратЕНВД.АвтоОтметкаНезаполненного = ПоказыватьАналитикуЕНВД;
	
	Если ПоказыватьАналитикуЕНВД Тогда
		Форма.НадписьСчетУчетаПоЕНВД = "Расходы отражаются на отдельной статье затрат";
	Иначе
		Форма.НадписьСчетУчетаПоЕНВД = "Отражается аналогично расходам по основной системе налогообложения";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, ЭтотОбъект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	ЗаполнитьЗначенияСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		ПорядокОтраженияВБухУчете, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"Субконто", "", "Субконто", "", "Счет");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.ОсновнаяОрганизация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконтоНУ(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, ПорядокОтраженияВБухУчете, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	ЗаполнитьЗначенияСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		ПорядокОтраженияВБухУчете, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНУ(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоНУ", "", "СубконтоНУ", "", "СчетНУ");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.ОсновнаяОрганизация);
	
	Возврат Результат;

КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
