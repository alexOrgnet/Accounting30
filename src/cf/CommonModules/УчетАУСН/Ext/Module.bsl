#Область ПрограммныйИнтерфейс

// Возвращает сумму доходов организации на АУСН за выбранный период.
// Учитываются только доходы, полученные по банку и по кассе. Доходы по кассе определяются по данным бухгалтерского учета.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  НачалоПериода - Дата - начало периода
//  КонецПериода - Дата - конец периода
// 
// Возвращаемое значение:
//  Число - сумма доходов за период
//
Функция СуммаДоходов(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не УчетнаяПолитика.ПрименяетсяАУСН(Организация, КонецПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаДоходов = СуммаДоходовПоБанковскимОперациям(Организация, НачалоПериода, КонецПериода)
		+ СуммаДоходовПоКассовымОперациям(Организация, НачалоПериода, КонецПериода);
	
	Возврат СуммаДоходов;
	
КонецФункции

// Возвращает лимит доходов налогоплательщика, ограничивающий его право на применение Автоматизированной УСН
// Автоматизированная УСН
// 
// Возвращаемое значение:
//  Число 
//
Функция ГраницаДоходов() Экспорт
	
	Возврат 60000000;

КонецФункции

// Возвращает лимит средней численности работников
//
// Возвращаемое значение:
//  Число - Граница среднесписочной численности работников, ограничивающая право применения Автоматизированной УСН 
//
Функция ГраницаЧисленностиРаботников() Экспорт
	
	Возврат 5;
	
КонецФункции

// Возвращает лимит остаточной стоимости основных средств налогоплательщика,
// ограничивающий его право на применение Автоматизированной УСН
// 
// Возвращаемое значение:
//  Число - Лимит остаточной стоимости основных средств 
//
Функция ГраницаСтоимостиОсновныхСредств() Экспорт

	Возврат 150000000;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодготовитьТаблицуРасчетНДФЛ(ТаблицаПеречислениеЗарплаты, ОплатаПоДоговорамПодряда, ТаблицаРеквизитов) Экспорт
	
	Возврат УчетЗарплаты.ДанныеРасчетаНДФЛАУСН(ТаблицаПеречислениеЗарплаты, ОплатаПоДоговорамПодряда, ТаблицаРеквизитов);

КонецФункции

Процедура СформироватьДвиженияНДФЛ(РеквизитыРасчетаНДФЛАУСН, ТаблицаРасчетаНДФЛАУСН, Движения) Экспорт 
	
	Если Не ЗначениеЗаполнено(РеквизитыРасчетаНДФЛАУСН)
		Или Не ЗначениеЗаполнено(ТаблицаРасчетаНДФЛАУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженияНДФЛАУСН(РеквизитыРасчетаНДФЛАУСН, ТаблицаРасчетаНДФЛАУСН);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого ЗаписьНДФЛАУСН Из Параметры.РасчетыНДФЛАУСН Цикл
		
		Движение = Движения.РасчетыНДФЛАУСН.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьНДФЛАУСН);
		
	КонецЦикла;
	
	Движения.РасчетыНДФЛАУСН.Записывать = Истина;

КонецПроцедуры 

Функция ПодготовитьПараметрыДвиженияНДФЛАУСН(ТаблицаРеквизиты, РасчетыНДФЛАУСН)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата> - период движений - дата документа
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Регистратор";              // <ДокументСсылка>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.РасчетыНДФЛАУСН.
	СписокОбязательныхКолонок = ""
	+ "Ведомость,"                      // <ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк>
	+ "ФизическоеЛицо,"                 // <СправочникСсылка.ФизическиеЛица>
	+ "НалоговыйПериод,"                // <Дата>
	+ "КодДохода,"                      // <Строка, 4>
	+ "КодВычета,"                      // <Строка, 3>
	+ "КодНеоблагаемогоВзносамиДохода," // <Строка, 2>
	+ "СуммаДохода,"                    // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	+ "СуммаВычета,"                    // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	+ "СуммаНеоблагаемаяВзносами,"      // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	+ "СуммаНДФЛ,"                      // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	+ "СуммаНДФЛУдержаный,"             // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	+ "СуммаНДФЛПеречисленный"         // <ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака>
	;
	Параметры.Вставить("РасчетыНДФЛАУСН", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РасчетыНДФЛАУСН,
																		СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Обработчик события ПриСозданииНаСервере формы универсального отчета (общей формы ФормаОтчета).
// Если запускается вариант "ВыплатыПриИспользованииАУСН" в контексте списка задач,
// добавляет на форму баннер с пояснениями.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//  Отказ - Булево - признак отказа от выполнения обработчика
//  СтандартнаяОбработка - Булево - признак отказа от стандартной обработки события
//
Процедура ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.КлючТекущегоВарианта <> "ВыплатыПриИспользованииАУСН" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Форма.Параметры;
	
	ВызовИзСпискаЗадач = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "ВызовИзСпискаЗадач", Ложь);
	СвойстваЗадачи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "СвойстваЗадачи", Новый Структура);
	
	Срок = Неопределено;
	
	Если Не ВызовИзСпискаЗадач Или Не СвойстваЗадачи.Свойство("Срок", Срок) Тогда
		Возврат;
	КонецЕсли;
	
	РазместитьИнформациюОЗадачеСведенияПоСотрудникам(Форма, Срок);
	
КонецПроцедуры

// Описывает контекст, в котором выполняется начисление налога АУСН - организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  ПериодРасчета    - Дата - месяц, за который начисляется налог.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - начисление не имеет смысла: в указанный период организация еще не зарегистрирована, или не применяет АУСН
//
Функция НовыйКонтекстРасчетаНалога(Организация, ПериодРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоНалоговогоПериода = НачалоМесяца(ПериодРасчета);
	КонецНалоговогоПериода = КонецМесяца(ПериодРасчета);
	
	ПрименяетсяАУСН = УчетнаяПолитика.ПрименяетсяАУСН(Организация, НачалоНалоговогоПериода);
	Если НЕ ПрименяетсяАУСН Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстРасчета = Новый Структура;
	
	КонтекстРасчета.Вставить("Организация",             Организация);
	КонтекстРасчета.Вставить("Период",                  ПериодРасчета);
	КонтекстРасчета.Вставить("ПрименяетсяАУСН",         ПрименяетсяАУСН);
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", НачалоНалоговогоПериода);
	КонтекстРасчета.Вставить("КонецНалоговогоПериода",  КонецНалоговогоПериода);
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Возвращает данные для отражения уплаченного налога АУСН в проводках.
//
// Параметры:
//  КонтекстРасчета      - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                     см. НовыйКонтекстРасчета().
//
// Возвращаемое значение:
//  Структура    - содержит таблицы для отражения начисленного налога в бухучете и для формирования справки-расчета:
//                  * ТаблицаПроводок       - см. НалоговыйУчет.НоваяТаблицаНачисленияНалога()
//                  * ТаблицаСправкиРасчета - см. НоваяТаблицаСправкиРасчетаНалога()
//                  * Ошибки - Массив из Структура - массив ошибок.
//
Функция ПодготовитьРасчетНалога(КонтекстРасчета) Экспорт
	
	ТаблицаПроводок = НалоговыйУчет.НоваяТаблицаНачисленияНалога();
	Ошибки = Новый Массив;
	
	Если КонтекстРасчета.ПрименяетсяАУСН Тогда
		НачислитьНалогАУСН(КонтекстРасчета, ТаблицаПроводок, Ошибки);
	КонецЕсли;
	
	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("ТаблицаПроводок", ТаблицаПроводок);
	РезультатРасчета.Вставить("Ошибки", Ошибки);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Процедура - Формирует движения начисления налога АУСН
//
// Параметры:
//  ТаблицаПроводок   - Таблица значений -   содерижт данные для формирования проводок,
//                                           см. НалоговыйУчет.НоваяТаблицаНачисленияНалога
//  ТаблицаРеквизитов - Таблица значений -   содержит реквизиты организации
//                                           см. РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаАУСН
//  Движения          - Коллекция движений - движения документа Регламентная операция
//  Отказ             - Булево -             признак прерывания процедуры
//
Процедура СформироватьДвиженияНачислениеНалогаАУСН(ТаблицаПроводок, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыНачисленияНалогаАУСН(ТаблицаПроводок, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводка по начислению налога.
	Для Каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетДт, Проводка.СубконтоДт);
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетКт, Проводка.СубконтоКт);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуммаДоходовПоБанковскимОперациям(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Приход", Перечисления.ПризнакиНалоговойБазыАУСН.Приход);
	Запрос.УстановитьПараметр("ВозвратПрихода", Перечисления.ПризнакиНалоговойБазыАУСН.ВозвратПрихода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазметкаАУСНОбороты.СуммаОборот КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РазметкаАУСН.Обороты(&НачалоПериода, &КонецПериода,, Организация = &Организация) КАК
	|			РазметкаАУСНОбороты
	|	ГДЕ
	|		РазметкаАУСНОбороты.ПризнакНалоговойБазы = &Приход
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		-РазметкаАУСНОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.РазметкаАУСН.Обороты(&НачалоПериода, &КонецПериода,, Организация = &Организация) КАК
	|			РазметкаАУСНОбороты
	|	ГДЕ
	|		РазметкаАУСНОбороты.ПризнакНалоговойБазы = &ВозвратПрихода) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СуммаДоходовПоКассовымОперациям(Организация, НачалоПериода, КонецПериода)
	
	СчетаВыручки = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка); // 90.01
	
	КорСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаОрганизации)); // 50.01
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПереводыВПути)); // 57.01
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)); // 62.Р
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СчетаВыручки", СчетаВыручки);
	Запрос.УстановитьПараметр("КорСчета", КорСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода,, Счет В (&СчетаВыручки),,
	|		Организация = &Организация, КорСчет В (&КорСчета),) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура РазместитьИнформациюОЗадачеСведенияПоСотрудникам(Форма, Срок)
	
	Элементы = Форма.Элементы;
	
	ГруппаБаннера = Элементы.Вставить("ГруппаПояснениеЗадачи", Тип("ГруппаФормы"), , Элементы.ОтчетТабличныйДокумент);
	ГруппаБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннера.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаБаннера.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаБаннера.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннера.РастягиватьПоВертикали = Ложь;
	ГруппаБаннера.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	ГруппаБаннера.ОтображатьЗаголовок = Ложь;
	ГруппаБаннера.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	
	НадписьБаннера = Элементы.Добавить("ДекорацияПояснениеЗадачи", Тип("ДекорацияФормы"), ГруппаБаннера);
	НадписьБаннера.Вид = ВидДекорацииФормы.Надпись;
	НадписьБаннера.РастягиватьПоГоризонтали = Истина;
	НадписьБаннера.РастягиватьПоВертикали = Ложь;
	НадписьБаннера.АвтоМаксимальнаяШирина = Ложь;
	НадписьБаннера.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(
		НСтр("ru = 'Передайте в ФНС сведения о доходах, вычетах и суммах НДФЛ по каждому сотруднику.
			|Эти сведения требуется перенести из отчета в <a href=""%1"">личный кабинет плательщика АУСН</a> не позднее <b>%2</>'"),
		УчетАУСНКлиентСервер.АдресЛичногоКабинетаПлательщикаАУСН(),
		Формат(Срок, "ДЛФ=DD;")));
	
КонецПроцедуры

Процедура НачислитьНалогАУСН(КонтекстРасчета, ТаблицаПроводок, Ошибки)
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.НалогПриАУСН;         // Кт 68.15
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецНалоговогоПериода);
	
	ПростойУчетЕНС = КонтекстРасчета.НачалоНалоговогоПериода >= ЕдиныйНалоговыйСчет.НачалоПростогоУчета();
	
	Если ПростойУчетЕНС Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогПриАУСН),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогПриАУСН)
		|				И Организация = &Организация
		|				И ГоловнаяОрганизация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты";
	КонецЕсли;
	
	СуммаПоУчету = Запрос.Выполнить().Выбрать();
	
	Если СуммаПоУчету.Следующий() Тогда
		НалогКНачислению = СуммаПоУчету.Сумма;
	Иначе
		НалогКНачислению = 0;
	КонецЕсли;
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге)
	Если НалогКНачислению <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		
		СтрокаПроводки.СчетДт                 = СчетОтраженияНалога;
		СтрокаПроводки.СчетКт                 = СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма                  = НалогКНачислению;
		СтрокаПроводки.Содержание             = НСтр("ru = 'Отражен расход по налогу при АУСН'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияНалогаАУСН(ТаблицаПроводок, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"         // <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"                  // <Число, 15, 2> - сумма проводки
		+ "Содержание";             // <Строка, 150> - содержание проводки
		
	Проводки = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок);
	Параметры.Вставить("Проводки", Проводки);
		
	Возврат Параметры;

КонецФункции

#КонецОбласти