// @strict-types

#Область ПрограммныйИнтерфейс

// Обработчик события формы "ПриСозданииНаСервере".
// Проверяет возможность показа рекламного носителя, после чего запускает фоновое задание по формированию рекламы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для размещения рекламы.
//  ПараметрРекламногоСервиса - см. РекламныйСервис.НовыйПараметрРекламногоСервиса
//
Процедура ПриСозданииНаСервере(Форма, ПараметрРекламногоСервиса = Неопределено) Экспорт
	
	ДатаНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Отказ = Ложь;
	ПроверитьВозможностьПоказаРекламыНаФорме(Форма, ПараметрРекламногоСервиса, Отказ);
	Если Отказ Тогда
		СкрытьГруппуРекламныйСервис(Форма);
		ЗакончитьЗамерВремени(ДатаНачалаЗамера);
		Возврат;
	КонецЕсли;
	
	Если ПараметрРекламногоСервиса = Неопределено Тогда
		ПараметрРекламногоСервиса = НовыйПараметрРекламногоСервиса();
	КонецЕсли;
	
	// Дополнительная проверка возможности показа рекламы на формах прикладного решения.
	РекламныйСервисПереопределяемый.ПриСозданииНаСервере(Форма, ПараметрРекламногоСервиса);
	Если Не ПараметрРекламногоСервиса.ПоказыватьРекламу Тогда
		ЗакончитьЗамерВремени(ДатаНачалаЗамера);
		Возврат;
	КонецЕсли;
	
	// Проверка наличия группы на форме созданной статически.
	ГруппаФормыРС = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(
		Форма, 
		РекламныйСервисСлужебный.ИмяГруппыРекламныйСервис());
	Если ГруппаФормыРС = Неопределено Тогда
		
		Если ПараметрРекламногоСервиса.РасположениеРекламы = 
			РекламныйСервисСлужебный.НовыйРасположениеРекламы().ФормаСпискаПраво Тогда
			СоздатьРеквизитыЭлементыНаФормеОбъектаПраво(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстДокументаHTML = РекламныйСервисСлужебный.HTMLСтраницаЗагрузки();
	ИмяПоляHTMLДокумента = РекламныйСервисСлужебныйКлиентСервер.ИмяПоляHTMLДокумента();
	Форма[ИмяПоляHTMLДокумента] = ТекстДокументаHTML;
	
	СформироватьРекламныйМакетВФоне(Форма, ПараметрРекламногоСервиса);
	
	ЗакончитьЗамерВремени(ДатаНачалаЗамера);
	
КонецПроцедуры

// Параметр рекламного сервиса.
// 
// Возвращаемое значение:
//  Структура:
//   * РасположениеРекламы - Строка - значения см. РекламныйСервисСлужебный.НовыйРасположениеРекламы
//   * ФоновоеЗадание - Структура - свойство будет заменено результатом функции ДлительныеОперации.ВыполнитьФункцию
//   * ПоказыватьРекламу - Булево - если Истина то реклама на форму будет выведена.
//
Функция НовыйПараметрРекламногоСервиса() Экспорт
	
	РасположениеРекламы = РекламныйСервисСлужебный.НовыйРасположениеРекламы().ФормаСпискаПраво;
	
	ПараметрРекламногоСервиса = Новый Структура;
	ПараметрРекламногоСервиса.Вставить("РасположениеРекламы", РасположениеРекламы);
	ПараметрРекламногоСервиса.Вставить("ФоновоеЗадание", Новый Структура);
	ПараметрРекламногоСервиса.Вставить("ПоказыватьРекламу", Истина);
	
	Возврат ПараметрРекламногоСервиса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	Справочники.Реклама.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу.ИмяМетода);
	
КонецПроцедуры

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	РекламныйСервисВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.Реклама);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьВозможностьПоказаРекламыНаФорме(Форма, Знач ПараметрРекламногоСервиса, Отказ)
	
	Если РекламныйСервисСлужебныйПовтИсп.ИспользованиеРекламногоСервисаЗапрещено() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка входящих параметров.
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервис.ПриСозданииНаСервере", 
		"Форма", 
		Форма, 
		Тип("ФормаКлиентскогоПриложения"));
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Форма.Параметры; // Структура
	РежимВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "РежимВыбора", Ложь);
	Если РежимВыбора Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка необходимости показа рекламного носителя.
	РекламныйСервисСлужебный.ЕстьРекламаКПоказу(Форма.ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрРекламногоСервиса <> Неопределено Тогда
		
		ОжидаемыеТипыСвойств = Новый Структура;
		ОжидаемыеТипыСвойств.Вставить("РасположениеРекламы", Тип("Строка"));
		ОжидаемыеТипыСвойств.Вставить("ФоновоеЗадание", Тип("Структура"));
		ОжидаемыеТипыСвойств.Вставить("ПоказыватьРекламу", Тип("Булево"));
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"РекламныйСервис.ПроверитьВозможностьПоказаРекламыНаФорме", 
			"ПараметрРекламногоСервиса", 
			ПараметрРекламногоСервиса, 
			Тип("Структура"), 
			ОжидаемыеТипыСвойств);
		
		Если Не ПараметрРекламногоСервиса.ПоказыватьРекламу Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		РасположениеРекламы = ПараметрРекламногоСервиса.РасположениеРекламы;
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			Не ПустаяСтрока(РасположениеРекламы) 
			И РекламныйСервисСлужебный.НовыйРасположениеРекламы().Свойство(РасположениеРекламы), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует обработчик создания рекламы для %1'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				РасположениеРекламы), 
		"РекламныйСервис.ПроверитьВозможностьПоказаРекламыНаФорме");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьЗамерВремени(ДатаНачалаЗамера)
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		НСтр("ru = 'РекламныйСервис: ПриСозданииНаСервере'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ДатаНачалаЗамера);
		
КонецПроцедуры

#Область АдаптацияФормы

// Создать рекламные элементы на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура СоздатьРеквизитыЭлементыНаФормеОбъектаПраво(Форма)
	
	РеквизитыФормы(Форма);
	
	ЭлементТаблицаФормы = Неопределено;
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			ЭлементТаблицаФормы = Элемент; // ТаблицаФормы
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЭлементТаблицаФормы <> Неопределено, 
		СтрШаблон(
			НСтр("ru = 'Не удалось найти элемент таблица формы на форме %1'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			Форма.ИмяФормы), 
		"РекламныйСервис.СоздатьРеквизитыЭлементыНаФормеОбъектаПраво");
	
	РодительГруппы = ЭлементТаблицаФормы.Родитель;
	ГруппаРекламныйСервисВерхнийУровень = ГруппаРекламныйСервисВерхнийУровень(Форма, РодительГруппы);
	
	ГруппаРекламныйСервисТиповые = ГруппаРекламныйСервисТиповые(Форма, ГруппаРекламныйСервисВерхнийУровень);
	Форма.Элементы.Переместить(ЭлементТаблицаФормы, ГруппаРекламныйСервисТиповые);
	
	// Идентификатор добавляемый к именам элементов, пользователь не может скрыть элементы рекламы.
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_");
	
	ГруппаРекламныйСервис = ГруппаРекламныйСервис(Форма, ГруппаРекламныйСервисВерхнийУровень, Идентификатор);
	
	ГруппаРекламныйСервисКоманднаяПанель = 
		ГруппаРекламныйСервисКоманднаяПанель(Форма, ГруппаРекламныйСервис, Идентификатор);
	
	ЭлементОбратногоОтсчета(Форма, ГруппаРекламныйСервисКоманднаяПанель, Идентификатор);
	
	КомандаЗакрытьФорму(Форма, ГруппаРекламныйСервисКоманднаяПанель, Идентификатор);
	
	СоздатьЭлементФормыПолеHTML(Форма, Идентификатор, ГруппаРекламныйСервис);
	
КонецПроцедуры

// Реквизиты формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура РеквизитыФормы(Форма)
	
	НовыеРеквизиты = Новый Массив; // Массив из РеквизитФормы
	Типы = РекламныйСервисСлужебный.Типы();
	
	// Реквизит для хранения параметра рекламного сервиса.
	ИмяРеквизитаПараметрРекламногоСервиса = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаПараметрРекламногоСервиса();
	ТипПроизвольный = Типы.Произвольный;
	РеквизитФормы(Форма, НовыеРеквизиты, ИмяРеквизитаПараметрРекламногоСервиса, ТипПроизвольный);
	
	// Реквизит для показа изображения рекламы.
	ИмяПоляHTMLДокумента = РекламныйСервисСлужебныйКлиентСервер.ИмяПоляHTMLДокумента();
	ТипСтрока = Типы.Строка;
	РеквизитФормы(Форма, НовыеРеквизиты, ИмяПоляHTMLДокумента, ТипСтрока);
	
	// Реквизит обратного отсчета кнопки закрытия рекламы.
	ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия();
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
	РеквизитФормы(Форма, НовыеРеквизиты, ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия, ТипЧисло);
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
КонецПроцедуры

// Группа рекламный сервис верхний уровень.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ФормаКлиентскогоПриложения, ГруппаФормы - родитель группы.
// 
// Возвращаемое значение:
//  ГруппаФормы
//
Функция ГруппаРекламныйСервисВерхнийУровень(Форма, Родитель)
	
	// Общая группа верхнего уровня.
	СвойстваГруппы = НовыйСвойстваГруппыФормы();
	ИмяГруппы = РекламныйСервисСлужебный.ИмяГруппыРекламныйСервис();
	СвойстваГруппы.Имя = ИмяГруппы;
	СвойстваГруппы.Заголовок = ИмяГруппы;
	Группа = ГруппаФормы(Форма, Родитель, СвойстваГруппы);
	
	Возврат Группа;
	
КонецФункции

// Группа рекламный сервис типовые.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ГруппаФормы
// 
// Возвращаемое значение:
//  ГруппаФормы
//
Функция ГруппаРекламныйСервисТиповые(Форма, Знач Родитель)
	
	// Группа второго уровня лево элементы типового решения.
	СвойстваГруппы = НовыйСвойстваГруппыФормы();
	Имя = "ГруппаРекламныйСервисТиповые";
	СвойстваГруппы.Имя = Имя;
	СвойстваГруппы.Заголовок = Имя;
	СвойстваГруппы.Группировка = Форма.Группировка;
	СвойстваГруппы.РастягиватьПоГоризонтали = Истина;
	СвойстваГруппы.РазрешитьИзменениеСостава = Истина;
	Группа = ГруппаФормы(Форма, Родитель, СвойстваГруппы);
	
	Возврат Группа;
	
КонецФункции

// Группа рекламный сервис.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ГруппаФормы
//  Идентификатор - Строка
// 
// Возвращаемое значение:
//  ГруппаФормы
//
Функция ГруппаРекламныйСервис(Форма, Знач Родитель, Знач Идентификатор)
	
	// Группа второго уровня право Рекламный сервис.
	ЗаголовокГруппы = РекламныйСервисСлужебныйКлиентСервер.ИмяГруппыРекламныйСервис();
	ИмяГруппыРекламныйСервис = СтрШаблон("%1_%2", ЗаголовокГруппы, Идентификатор);
	СвойстваГруппы = НовыйСвойстваГруппыФормы();
	СвойстваГруппы.Имя = ИмяГруппыРекламныйСервис;
	СвойстваГруппы.Заголовок = ЗаголовокГруппы;
	СвойстваГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СвойстваГруппы.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Группа = ГруппаФормы(Форма, Родитель, СвойстваГруппы);
	
	Возврат Группа;
	
КонецФункции

// Группа рекламный сервис командная панель.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ГруппаФормы
//  Идентификатор - Строка
// 
// Возвращаемое значение:
//  ГруппаФормы
//
Функция ГруппаРекламныйСервисКоманднаяПанель(Форма, Знач Родитель, Знач Идентификатор)
	
	// Командная панель группы Рекламный сервис.
	ЗаголовокГруппыКоманднойПанели = "ГруппаРекламныйСервисКоманднаяПанель";
	ИмяГруппыРекламныйСервисКоманднаяПанель = СтрШаблон("%1_%2", ЗаголовокГруппыКоманднойПанели, Идентификатор);
	СвойстваГруппы = НовыйСвойстваГруппыФормы();
	СвойстваГруппы.Имя = ИмяГруппыРекламныйСервисКоманднаяПанель;
	СвойстваГруппы.Заголовок = ЗаголовокГруппыКоманднойПанели;
	СвойстваГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	СвойстваГруппы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Группа = ГруппаФормы(
		Форма, 
		Родитель, 
		СвойстваГруппы);
		
	Возврат Группа;
	
КонецФункции

// Команда закрыть форму.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ГруппаФормы
//  Идентификатор - Строка
//
Процедура КомандаЗакрытьФорму(Форма, Знач Родитель, Знач Идентификатор)
	
	// Кнопка закрытия рекламы.
	ИмяКопкиЗакрытияРекламы = РекламныйСервисСлужебныйКлиентСервер.ИмяКопкиЗакрытияРекламы();
	КомандаЗакрытьФорму = Форма.Команды.Найти(ИмяКопкиЗакрытияРекламы);
	Если КомандаЗакрытьФорму = Неопределено Тогда
		КомандаЗакрытьФорму = Форма.Команды.Добавить(ИмяКопкиЗакрытияРекламы);
		КомандаЗакрытьФорму.Действие = "Подключаемый_КомандаЗакрытьРекламу";
		КомандаЗакрытьФорму.Картинка = БиблиотекаКартинок.Закрыть;
		КомандаЗакрытьФорму.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	ИмяЭлементКнопкиЗакрытияРекламы = СтрШаблон("%1_%2", ИмяКопкиЗакрытияРекламы, Идентификатор);
	ЭлементКнопкиЗакрытияРекламы = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(
		Форма, ИмяКопкиЗакрытияРекламы);
	Если ЭлементКнопкиЗакрытияРекламы = Неопределено Тогда
		
		ЭлементКнопкиЗакрытияРекламы = Форма.Элементы.Добавить(
			ИмяЭлементКнопкиЗакрытияРекламы, Тип("КнопкаФормы"), Родитель);
		ЭлементКнопкиЗакрытияРекламы.Заголовок = ИмяКопкиЗакрытияРекламы;
		ЭлементКнопкиЗакрытияРекламы.ИмяКоманды = ИмяКопкиЗакрытияРекламы;
		ЭлементКнопкиЗакрытияРекламы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ЭлементКнопкиЗакрытияРекламы.Видимость = Ложь;
		ЭлементКнопкиЗакрытияРекламы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

// Элемент обратного отсчета.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ГруппаФормы
//  Идентификатор - Строка
//
Процедура ЭлементОбратногоОтсчета(Форма, Знач Родитель, Знач Идентификатор)
	
	ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия();
	
	ИмяЭлементОбратногоОтсчета = СтрШаблон("%1_%2", ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия, Идентификатор);
	СвойстваЭлемента = НовыйСвойстваЭлементаФормы();
	СвойстваЭлемента.Имя = ИмяЭлементОбратногоОтсчета;
	СвойстваЭлемента.Заголовок = ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия;
	СвойстваЭлемента.Вид = ВидПоляФормы.ПолеНадписи;
	СвойстваЭлемента.ПутьКДанным = ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия;
	СвойстваЭлемента.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СвойстваЭлемента.Формат = "ЧЦ=2; ЧВН=";
	ЭлементФормы(Форма, Родитель, СвойстваЭлемента);
	
КонецПроцедуры

// Создать элемент формы поле HTML.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Идентификатор - Строка
//  Родитель - ГруппаФормы
//
Процедура СоздатьЭлементФормыПолеHTML(Форма, Знач Идентификатор, Знач Родитель)
	
	ИмяПоляHTMLДокумента = РекламныйСервисСлужебныйКлиентСервер.ИмяПоляHTMLДокумента();
	
	ИмяЭлемента = СтрШаблон("%1_%2", ИмяПоляHTMLДокумента, Идентификатор);
	
	СвойстваЭлемента = НовыйСвойстваЭлементаФормы();
	
	СвойстваЭлемента.Имя = ИмяЭлемента;
	СвойстваЭлемента.Заголовок = ИмяПоляHTMLДокумента;
	СвойстваЭлемента.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	СвойстваЭлемента.ПутьКДанным = ИмяПоляHTMLДокумента;
	СвойстваЭлемента.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СвойстваЭлемента.РастягиватьПоГоризонтали = Ложь;
	СвойстваЭлемента.Ширина = 26;
	СвойстваЭлемента.АвтоМаксимальнаяШирина = Ложь;
	СвойстваЭлемента.МаксимальнаяШирина = 26;
	
	ЭлементФормы = ЭлементФормы(Форма, Родитель, СвойстваЭлемента);
	ЭлементФормы.КонтекстноеМеню.Видимость = Ложь;
	ЭлементФормы.ЦветРамки = ЦветаСтиля.ЦветРамкиБелый;
	
	ИмяПроцедуры = СтрШаблон("Подключаемый_%1ПриНажатии", ИмяПоляHTMLДокумента);
	ЭлементФормы.УстановитьДействие("ПриНажатии", ИмяПроцедуры);
	
КонецПроцедуры

// Скрыть группу рекламный сервис.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура СкрытьГруппуРекламныйСервис(Форма)
	
	// При статическом размещении элементов формы, убираем ее видимость
	ИмяГруппыРекламныйСервис = РекламныйСервисСлужебныйКлиентСервер.ИмяГруппыРекламныйСервис();
	ГруппаФормы = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(Форма, ИмяГруппыРекламныйСервис);
	Если ГруппаФормы <> Неопределено Тогда
		Форма.Элементы[ИмяГруппыРекламныйСервис].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Конструктор свойств групп формы.
// 
// Возвращаемое значение:
//  Структура - Новый свойства группы формы:
// * Имя - Строка
// * Заголовок - Строка
// * ОтображатьЗаголовок - Булево
// * Отображение - ОтображениеОбычнойГруппы
// * Группировка - ГруппировкаПодчиненныхЭлементовФормы
// * РастягиватьПоГоризонтали - Неопределено, Булево - Неопределено это значение "Авто"
// * ВертикальныйИнтервал - ИнтервалМеждуЭлементамиФормы
// * ГоризонтальноеПоложениеВГруппе - ГоризонтальноеПоложениеЭлемента
// * РазрешитьИзменениеСостава - Булево
//
Функция НовыйСвойстваГруппыФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("ОтображатьЗаголовок", Ложь);
	Результат.Вставить("Отображение", ОтображениеОбычнойГруппы.Нет);
	Результат.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	Результат.Вставить("РастягиватьПоГоризонтали", Неопределено);
	Результат.Вставить("ВертикальныйИнтервал", ИнтервалМеждуЭлементамиФормы.Авто);
	Результат.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Авто);
	Результат.Вставить("РазрешитьИзменениеСостава", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Свойства элемента формы.
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка
// * Заголовок - Строка
// * Вид - ВидПоляФормы
// * ПутьКДанным - Строка
// * ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы
// * Формат - Строка
//
Функция НовыйСвойстваЭлементаФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	Результат.Вставить("ПутьКДанным", "");
	Результат.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	Результат.Вставить("Формат", "");
	Результат.Вставить("РастягиватьПоГоризонтали", Неопределено);
	Результат.Вставить("Ширина", 0);
	Результат.Вставить("АвтоМаксимальнаяШирина", Истина);
	Результат.Вставить("МаксимальнаяШирина", 0);
	
	Возврат Результат;
	
КонецФункции

// Создать группу формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ФормаКлиентскогоПриложения, ПолеФормы, ГруппаФормы, ДекорацияФормы, ТаблицаФормы, КнопкаФормы - 
//  																								родитель элемента
//  СвойстваГруппы - см. НовыйСвойстваГруппыФормы
// 
// Возвращаемое значение:
//  ГруппаФормы
//
Функция ГруппаФормы(Форма, Знач Родитель, Знач СвойстваГруппы)
	
	ГруппаФормы = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(Форма, СвойстваГруппы.Заголовок);
	Если ГруппаФормы = Неопределено Тогда
		
		ГруппаФормы = 
			Форма.Элементы.Добавить(СвойстваГруппы.Имя, Тип("ГруппаФормы"), Родитель);
		ГруппаФормы.Заголовок = СвойстваГруппы.Заголовок;
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Отображение = СвойстваГруппы.Отображение;
		ГруппаФормы.Группировка = СвойстваГруппы.Группировка;
		ГруппаФормы.ОтображатьЗаголовок = СвойстваГруппы.ОтображатьЗаголовок;
		ГруппаФормы.РастягиватьПоГоризонтали = СвойстваГруппы.РастягиватьПоГоризонтали;
		ГруппаФормы.ГоризонтальноеПоложениеВГруппе = СвойстваГруппы.ГоризонтальноеПоложениеВГруппе;
		ГруппаФормы.ВертикальныйИнтервал = СвойстваГруппы.ВертикальныйИнтервал;
		ГруппаФормы.РазрешитьИзменениеСостава = СвойстваГруппы.РазрешитьИзменениеСостава;
		
	КонецЕсли;
	
	Возврат ГруппаФормы;
	
КонецФункции

// Создать элемент формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Родитель - ФормаКлиентскогоПриложения, ПолеФормы, ГруппаФормы, ДекорацияФормы, ТаблицаФормы, КнопкаФормы - 
//  																								родитель элемента
//  СвойстваЭлемента - см. НовыйСвойстваЭлементаФормы
// 
// Возвращаемое значение: 
//  ПолеФормы, ГруппаФормы, ДекорацияФормы, ТаблицаФормы, КнопкаФормы - элемент формы.
//
Функция ЭлементФормы(Форма, Знач Родитель, Знач СвойстваЭлемента)
	
	ЭлементФормы = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(Форма, СвойстваЭлемента.Заголовок);
	Если ЭлементФормы = Неопределено Тогда
		
		ЭлементФормы = 
			Форма.Элементы.Добавить(СвойстваЭлемента.Имя, Тип("ПолеФормы"), Родитель);
		
		ЭлементФормы.Заголовок = СвойстваЭлемента.Заголовок;
		ЭлементФормы.Вид = СвойстваЭлемента.Вид;
		ЭлементФормы.ПутьКДанным = СвойстваЭлемента.ПутьКДанным;
		ЭлементФормы.ПоложениеЗаголовка = СвойстваЭлемента.ПоложениеЗаголовка;
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
			ЭлементФормы.Формат = СвойстваЭлемента.Формат;
		КонецЕсли;
		ЭлементФормы.РастягиватьПоГоризонтали = СвойстваЭлемента.РастягиватьПоГоризонтали;
		ЭлементФормы.Ширина = СвойстваЭлемента.Ширина;
		ЭлементФормы.АвтоМаксимальнаяШирина = СвойстваЭлемента.АвтоМаксимальнаяШирина;
		ЭлементФормы.МаксимальнаяШирина = СвойстваЭлемента.МаксимальнаяШирина;
		
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Создать реквизит формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  НовыеРеквизиты - Массив из РеквизитФормы
//  ИмяРеквизита - Строка
//  ТипРеквизита - ОписаниеТипов
// 
Процедура РеквизитФормы(Форма, НовыеРеквизиты, Знач ИмяРеквизита, Знач ТипРеквизита)
	
	РеквизитСуществует = Ложь;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РеквизитСуществует Тогда
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		НовыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

// Сформировать рекламный макет в фоне.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПараметрРекламногоСервиса - см. РекламныйСервис.НовыйПараметрРекламногоСервиса
//
Процедура СформироватьРекламныйМакетВФоне(Форма, ПараметрРекламногоСервиса)
	
	Шаблон = НСтр("ru = '%1Получить данные рекламы.'");
	Наименование = СтрШаблон(Шаблон, РекламныйСервисСлужебный.ИмяСобытияРекламногоСервиса());
	ИмяПроцедуры = "РекламныйСервисСлужебный.РекламныйМакет";
	
	ПараметрыПроцедуры = РекламныйСервисСлужебный.НовыйПараметрыПроцедурыПолучитьДанныеРекламы();
	ПараметрыПроцедуры.ИмяФормы = Форма.ИмяФормы;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	ПараметрРекламногоСервиса.ФоновоеЗадание = 
		ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяПроцедуры, ПараметрыПроцедуры);
	
	ИмяРеквизитаПараметрРекламногоСервиса = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаПараметрРекламногоСервиса();
	
	Форма[ИмяРеквизитаПараметрРекламногоСервиса] = ПараметрРекламногоСервиса;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
