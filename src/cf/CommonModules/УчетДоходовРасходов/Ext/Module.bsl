// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает таблицы значений с выручкой от реализации собственных и, отдельно, комиссионных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//		ТоварыУслугиКомитентов 			- реализованные товары и услуги, принятые на комиссию
//		РеализованныеТоварыКомитентов 	- выручка за реализованные комиссионные товары и услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - <ТаблицаЗначений> - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаВзаиморасчеты - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Является результатом функции УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  Отказ              	 - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//   <Структура>   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтРеализации(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат НовыеТаблицыВыручки();
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиОтРеализации(
		ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
		
	Возврат ТаблицыВыручкиОтРеализации(Параметры, Отказ);
	
КонецФункции

Функция ПодготовитьПараметрыВыручкиОтРеализации(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "ЭтоНесырьевойТовар,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента";
	
	Если ТаблицаТоварыУслуги <> Неопределено Тогда
		Если ТаблицаТоварыУслуги.Колонки.Найти("ИдентификаторСтроки") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ", ИдентификаторСтроки";
		КонецЕсли;
		Если ТаблицаТоварыУслуги.Колонки.Найти("НалоговаяБазаНДС") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ", НалоговаяБазаНДС";
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"
	+ "ПодразделениеРасчетов,"
	+ "СчетРасчетов,"
	+ "СчетАвансов,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаРубПоКурсуАванса,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаРуб_ЕНВД,"
	+ "СуммаВзаиморасчетовПатент,"
	+ "СуммаРуб_Патент,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаРуб_Комитента,"
	+ "СуммаВзаиморасчетовТорговыйСбор,"
	+ "СуммаРуб_ТорговыйСбор,"
	+ "ВидДоговора,"
	+ "РасчетыВВалюте,"
	+ "РасчетыВУсловныхЕдиницах"
	;
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы списанных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Возвращает таблицы значений с выручкой от реализации собственных и, отдельно, комиссионных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//		ТоварыУслугиКомитентов 			- реализованные товары и услуги, принятые на комиссию
//		РеализованныеТоварыКомитентов 	- выручка за реализованные комиссионные товары и услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - <ТаблицаЗначений> - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  Отказ              	 - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//   <Структура>   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтРеализацииВозвратРозница(ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат НовыеТаблицыВыручки();
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиОтРеализацииВозвратРозница(
		ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
		
	Возврат ТаблицыВыручкиОтРеализации(Параметры, Отказ);
	
КонецФункции

Функция ПодготовитьПараметрыВыручкиОтРеализацииВозвратРозница(ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Сделка,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента"
	;	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	Параметры.Вставить("Взаиморасчеты", Неопределено);
	
	// Подготовка таблицы списанных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции


// Возвращает таблицы значений с выручкой от реализации собственных и, отдельно, комиссионных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//		ТоварыУслугиКомитентов 			- реализованные товары и услуги, принятые на комиссию
//		РеализованныеТоварыКомитентов 	- выручка за реализованные комиссионные товары и услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - <ТаблицаЗначений> - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаВзаиморасчеты - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Является результатом функции УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  Отказ              	 - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//   <Структура>   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтРеализацииВозвратКомиссионеру(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат НовыеТаблицыВыручки();
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиОтРеализацииВозвратКомиссионеру(
		ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
		
	Возврат ТаблицыВыручкиОтРеализации(Параметры, Отказ);
	
КонецФункции

Функция ПодготовитьПараметрыВыручкиОтРеализацииВозвратКомиссионеру(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Сделка,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента"
	;	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"
	+ "ПодразделениеРасчетов,"
	+ "СчетРасчетов,"
	+ "СчетАвансов,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаРубПоКурсуАванса,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаРуб_ЕНВД,"
	+ "СуммаВзаиморасчетовПатент,"
	+ "СуммаРуб_Патент,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаРуб_Комитента,"
	+ "ВидДоговора,"
	+ "РасчетыВВалюте,"
	+ "РасчетыВУсловныхЕдиницах"
	;
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы списанных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Возвращает таблицы значений с выручкой от реализации комиссионером собственных и, отдельно, комиссионных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//		ТоварыУслугиКомитентов 			- реализованные товары и услуги, принятые на комиссию
//		РеализованныеТоварыКомитентов 	- выручка за реализованные комиссионные товары и услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - <ТаблицаЗначений> - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаВзаиморасчеты - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Является результатом функции УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  Отказ              	 - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//   <Структура>   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтРеализацииКомиссионером(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат НовыеТаблицыВыручки();
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиОтРеализацииКомиссионером(
		ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Возврат ТаблицыВыручкиОтРеализации(Параметры, Отказ);
	
КонецФункции

Функция ПодготовитьПараметрыВыручкиОтРеализацииКомиссионером(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "ЭтоНесырьевойТовар,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента,"
	+ "СчетФактура,"
	+ "ВыставленСФ,"
	+ "ДатаСФ,"
	+ "ВозвратПоТекущемуДокументу"
	;
	
	Если ТаблицаТоварыУслуги <> Неопределено 
		И ТаблицаТоварыУслуги.Колонки.Найти("ИдентификаторСтроки") <> Неопределено Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ", ИдентификаторСтроки";
	КонецЕсли;
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"
	+ "ПодразделениеРасчетов,"
	+ "СчетРасчетов,"
	+ "СчетАвансов,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаРубПоКурсуАванса,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаРуб_ЕНВД,"
	+ "СуммаВзаиморасчетовПатент,"
	+ "СуммаРуб_Патент,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаРуб_Комитента,"
	+ "ВидДоговора,"
	+ "РасчетыВВалюте,"
	+ "РасчетыВУсловныхЕдиницах"
	;
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы списанных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Функция НовыеТаблицыВыручки()
	
	ТаблицыВыручки = Новый Структура;
	ТаблицыВыручки.Вставить("СобственныеТоварыУслуги");
	ТаблицыВыручки.Вставить("ТоварыУслугиКомитентов");
	ТаблицыВыручки.Вставить("РеализованныеТоварыКомитентов");
	Возврат ТаблицыВыручки;
	
КонецФункции

Функция ТаблицыВыручкиОтРеализации(Параметры, Отказ)
	
	ТаблицыВыручки = НовыеТаблицыВыручки();
	Период = Параметры.Реквизиты[0].Период;
	
	ТаблицаВыручкиОтРеализации = ПолучитьТаблицуРеализацииПоКурсуАвансов(Параметры, Отказ);
	ТаблицаВыручкиОтРеализации.Индексы.Добавить("ЭтоКомиссия");
	
	// Собственные товары и услуги
	
	Отбор = Новый Структура("ЭтоКомиссия", Ложь);
	ТаблицаСобственныеТоварыУслуги = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	
	// Товары и услуги комитентов
	
	Отбор = Новый Структура("ЭтоКомиссия,ЭтоУслуга", Истина, Истина);
	ТаблицаУслугиКомитентов = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	Отбор = Новый Структура("ЭтоКомиссия,ЭтоУслуга", Истина, Ложь);
	ТаблицаТоварыКомитентов = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	ТаблицаТоварыКомитентов = ОпределитьПартииРеализованныхТоваровКомитентов(
		ТаблицаТоварыКомитентов, 
		Параметры, 
		Отказ);
	ТаблицаТоварыУслугиКомитентов = ТаблицаУслугиКомитентов;
	ТаблицаТоварыУслугиКомитентов.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТоварыКомитентов, ТаблицаТоварыУслугиКомитентов);
	ЗаполнитьСуммыРасчетовСКомитентами(ТаблицаТоварыУслугиКомитентов, Период);
	ТаблицаРеализованныеТоварыКомитентов = ПодготовитьТаблицуРеализованныхТоваровУслугКомитентов(
		ТаблицаТоварыУслугиКомитентов);
		
	ТаблицыВыручки.СобственныеТоварыУслуги       = ТаблицаСобственныеТоварыУслуги;
	ТаблицыВыручки.ТоварыУслугиКомитентов        = ТаблицаТоварыУслугиКомитентов;
	ТаблицыВыручки.РеализованныеТоварыКомитентов = ТаблицаРеализованныеТоварыКомитентов;
	
	Возврат ТаблицыВыручки;

КонецФункции

Функция ПодготовитьТаблицыВыручкиОтОказаниеУслуг(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыручкиОтОказанииУслуг(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты);

	Период = Параметры.Реквизиты[0].Период;
	
	ТаблицаВыручкиОтРеализации = ПолучитьТаблицуРеализацииПоКурсуАвансов(Параметры, Отказ);
	
	ТаблицыВыручки = Новый Структура;
	ТаблицыВыручки.Вставить("СобственныеТоварыУслуги",       ТаблицаВыручкиОтРеализации);
	
	Возврат ТаблицыВыручки;

КонецФункции

Функция ПодготовитьПараметрыВыручкиОтОказанииУслуг(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "КодРаздел7ДекларацииНДС,"
	+ "КодСоответствуетСт149НКРФ,"
	+ "КодВключаетсяВРеестр,"
	+ "УслугиЗаРубежом,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СчетФактура,"
	+ "ВыданСФ,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента"
	;	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"
	+ "ПодразделениеРасчетов,"
	+ "СчетРасчетов,"
	+ "СчетАвансов,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаРубПоКурсуАванса,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаРуб_ЕНВД,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаРуб_Комитента,"
	+ "ВидДоговора,"
	+ "РасчетыВВалюте,"
	+ "РасчетыВУсловныхЕдиницах"
	;
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Формируются проводки по учету выручки от реализации собственных и комиссионных товров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - <ТаблицаЗначений> - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаТоварыУслугиКомитентов  - <ТаблицаЗначений> - подготовленные для учета выручки данные по комиссионным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаРеализованныеТоварыКомитентов  - <ТаблицаЗначений> - информация для записи в регистр одноименный накопления.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводки
	
	СформироватьДвиженияРеализацияСобственныхТоваровУслуг(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты,
		Ложь,
		Движения, 
		Отказ);

	СформироватьДвиженияРеализацияТоваровУслугКомитентов(
		Параметры.ТаблицаТоварыУслугиКомитентов, 
		Реквизиты,
		Ложь,
		Движения, 
		Отказ);
	
	СформироватьДвиженияРеализованныеТоварыКомитентов(
		Параметры.ТаблицаРеализованныеТоварыКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ)	

КонецПроцедуры
	
// Формируются проводки по учету выручки от возврата реализации собственных и комиссионных товров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - <ТаблицаЗначений> - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаТоварыУслугиКомитентов  - <ТаблицаЗначений> - подготовленные для учета выручки данные по комиссионным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаРеализованныеТоварыКомитентов  - <ТаблицаЗначений> - информация для записи в регистр одноименный накопления.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияВозвратРеализации(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратРеализации(
		ТаблицаСобственныеТоварыУслуги,
		ТаблицаТоварыУслугиКомитентов,
		ТаблицаРеализованныеТоварыКомитентов,
		ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ВозвратОтгруженныхТоваров Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки
	
	СформироватьДвиженияРеализацияСобственныхТоваровУслуг(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты,
		Истина, 
		Движения, 
		Отказ);

	СформироватьДвиженияРеализацияТоваровУслугКомитентов(
		Параметры.ТаблицаТоварыУслугиКомитентов, 
		Реквизиты,
		Истина,
		Движения, 
		Отказ);
	
	СформироватьДвиженияРеализованныеТоварыКомитентов(
		Параметры.ТаблицаРеализованныеТоварыКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ)	

КонецПроцедуры

Функция ПодготовитьПараметрыВозвратРеализации(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"               // <Регистратор...> - документ, записывающий движения в регистры
	+ "ВозвратОтгруженныхТоваров," // <Булево> - признак возврата товаров до их реализации
	+ "Организация";               // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных собственных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчета,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента";
	
	Параметры.Вставить("ТаблицаСобственныеТоварыУслуги",
		?(Не ЗначениеЗаполнено(ТаблицаСобственныеТоварыУслуги), Неопределено,
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок)));
	
	// Подготовка таблицы реализованных комиссионных товаров и услуг:
	СписокОбязательныхКолонок = СписокОбязательныхКолонок + "," + "Партия";
	
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов), Неопределено,
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок)));

	СписокОбязательныхКолонок = ""
	+ "Активность,"
	+ "Период,"
	+ "Организация,"
	+ "Контрагент,"
	+ "ДокументРасчетов,"
	+ "ДоговорКонтрагента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Выручка,"
	+ "СуммаПоступления,"
	+ "Партия,"
	+ "Покупатель,"
	+ "ДатаРеализации,"
	+ "СуммаНДС,"
	+ "Субкомиссионер,"
	+ "СчетФактураСубкомиссионера";
	
	Параметры.Вставить("ТаблицаРеализованныеТоварыКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаРеализованныеТоварыКомитентов), Неопределено,
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеализованныеТоварыКомитентов, СписокОбязательныхКолонок)));
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных собственных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчета,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДокументРасчетов,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента"
	;	
	Параметры.Вставить("ТаблицаСобственныеТоварыУслуги",
		?(Не ЗначениеЗаполнено(ТаблицаСобственныеТоварыУслуги), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок)));
	
	// Подготовка таблицы реализованных комиссионных товаров и услуг (к составу колонок добавлено еще несколько:
	СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
	+ "Партия"
	;
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок)));


	СписокОбязательныхКолонок = ""
	+ "Активность,"
	+ "Период,"
	+ "Организация,"
	+ "Контрагент,"
	+ "ДокументРасчетов,"
	+ "ДоговорКонтрагента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Выручка,"
	+ "СуммаПоступления,"
	+ "Партия,"
	+ "Покупатель,"
	+ "ДатаРеализации,"
	+ "СуммаНДС,"
	+ "Субкомиссионер,"
	+ "СчетФактураСубкомиссионера"
	;
	Параметры.Вставить("ТаблицаРеализованныеТоварыКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаРеализованныеТоварыКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеализованныеТоварыКомитентов, СписокОбязательныхКолонок)));	
	
	Возврат Параметры;

КонецФункции

// Формируются проводки по корректировке учета выручки от реализации собственных и комиссионных товров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - <ТаблицаЗначений> - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаТоварыУслугиКомитентов  - <ТаблицаЗначений> - подготовленные для учета выручки данные по комиссионным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаРеализованныеТоварыКомитентов  - <ТаблицаЗначений> - информация для записи в регистр одноименный накопления.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияРеализацияКорректировка(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ТаблицаСторноСобственныеТоварыУслуги, ТаблицаСторноТоварыУслугиКомитентов, ТаблицаСторноРеализованныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
		
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыРеализацияКорректировка(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
					ТаблицаСторноСобственныеТоварыУслуги, ТаблицаСторноТоварыУслугиКомитентов, ТаблицаСторноРеализованныеТоварыКомитентов, ТаблицаРеквизиты);
	Реквизиты 	= Параметры.Реквизиты[0];
	
	// Проводки
	
	СформироватьДвиженияРеализацияСобственныхТоваровУслугКорректировка(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты, 
		Движения, 
		Отказ);
		
	СформироватьДвиженияСторноРеализацияСобственныхТоваровУслугКорректировка(
		Параметры.ТаблицаСторноСобственныеТоварыУслуги, 
		Реквизиты, 
		Движения, 
		Отказ);
	
	СформироватьДвиженияРеализацияТоваровУслугКомитентовКорректировка(
		Параметры.ТаблицаТоварыУслугиКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ);
	
	СформироватьДвиженияСторноРеализацияТоваровУслугКомитентовКорректировка(
		Параметры.ТаблицаСторноТоварыУслугиКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ);
	
	СформироватьДвиженияРеализованныеТоварыКомитентов(
		Параметры.ТаблицаРеализованныеТоварыКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ);

	СформироватьДвиженияРеализованныеТоварыКомитентов(
		Параметры.ТаблицаСторноРеализованныеТоварыКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ)

КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияКорректировка(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, 
			ТаблицаСторноСобственныеТоварыУслуги, ТаблицаСторноТоварыУслугиКомитентов, ТаблицаСторноРеализованныеТоварыКомитентов, Таблицареквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"             // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"             // <СправочникСсылка.Организации> - организация документа
	+ "ОтчетностьПодписана,"     // <Булево>
	+ "ДокументРеализации,"      // <ДокументСсылка>
	+ "ПрошлыйПериод,"           // <Булево>
	+ "СтатьяПрочихДоходовИРасходов," // <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "ДатаДокументаРеализации"; // <Дата> - дата корректируемого документа 

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
			
	// Подготовка таблицы реализованных собственных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента"
	;	
	
	Параметры.Вставить("ТаблицаСобственныеТоварыУслуги",
		?(Не ЗначениеЗаполнено(ТаблицаСобственныеТоварыУслуги), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок)));
	Параметры.Вставить("ТаблицаСторноСобственныеТоварыУслуги",
		?(Не ЗначениеЗаполнено(ТаблицаСторноСобственныеТоварыУслуги), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСторноСобственныеТоварыУслуги, СписокОбязательныхКолонок)));
	
	// Подготовка таблицы реализованных комиссионных товаров и услуг (к составу колонок добавлено еще несколько:
	СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
	+ "Партия"
	;
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок)));
	Параметры.Вставить("ТаблицаСторноТоварыУслугиКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаСторноТоварыУслугиКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСторноТоварыУслугиКомитентов, СписокОбязательныхКолонок)));

	// Подготовка таблицы выручки по реализованным комиссионным товарам и услугам:
	СписокОбязательныхКолонок = ""
	+ "Активность,"
	+ "Период,"
	+ "Организация,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Выручка,"
	+ "СуммаНДС,"
	+ "СуммаПоступления,"
	+ "Партия,"
	+ "Покупатель,"
	+ "ДатаРеализации,"
	+ "ДокументРасчетов"
	;
	Параметры.Вставить("ТаблицаРеализованныеТоварыКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаРеализованныеТоварыКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеализованныеТоварыКомитентов, СписокОбязательныхКолонок)));
	Параметры.Вставить("ТаблицаСторноРеализованныеТоварыКомитентов",
		?(Не ЗначениеЗаполнено(ТаблицаСторноРеализованныеТоварыКомитентов), Неопределено, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСторноРеализованныеТоварыКомитентов, СписокОбязательныхКолонок)));
	
	Возврат Параметры;

КонецФункции

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьДвиженияРеализацияСобственныхТоваровУслуг(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, ЭтоВозврат, Движения, Отказ)
	Перем ТекстСодержанияПоТоварам;
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Период      = ПараметрыРеализации.Период;
	Организация = ПараметрыРеализации.Организация;
	
	Если ЭтоВозврат Тогда
		ТекстСодержанияПоТоварам = НСтр("ru = 'Возврат %1 от покупателя'");
	ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейПрочегоИмущества(ПараметрыРеализации.Регистратор) Тогда
		ТекстСодержанияПоТоварам = НСтр("ru = 'Реализация прочего имущества'");
	Иначе
		ТекстСодержанияПоТоварам = НСтр("ru = 'Реализация %1'");
	КонецЕсли;
	
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяОтчетомКомитенту(ПараметрыРеализации.Регистратор) Тогда
		ТекстСодержанияПоУслугам = НСтр("ru = 'Оказание услуг по договору комиссии'");
	ИначеЕсли Документы.РеализацияТоваровУслуг.ЭтоВыполнениеСтроительныхРабот(ПараметрыРеализации.Регистратор) Тогда
		ТекстСодержанияПоУслугам = НСтр("ru = 'Строительные работы'");
	Иначе
		ТекстСодержанияПоУслугам = НСтр("ru = 'Реализация услуг'");
	КонецЕслИ;
	
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	ВычислятьСодержаниеПроводкиТовары = (СтрНайти(ТекстСодержанияПоТоварам, "%1") > 0);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
		
		Если СтрокаТаблицы.ЭтоУслуга Тогда
			Проводка.Содержание = ТекстСодержанияПоУслугам;
		ИначеЕсли НЕ ВычислятьСодержаниеПроводкиТовары Тогда 
			Проводка.Содержание = ТекстСодержанияПоТоварам;
		Иначе
			Проводка.Содержание = СтрШаблон(ТекстСодержанияПоТоварам, БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета));
		КонецЕсли; 
		
		Проводка.СчетДт = СтрокаТаблицы.КорСчет;
		ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете, СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
		ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете, СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияРеализацияТоваровУслугКомитентов(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, ЭтоВозврат, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = ПараметрыРеализации.Регистратор;
	Период      = ПараметрыРеализации.Период;
	Организация = ПараметрыРеализации.Организация;
	ТекстСодержанияПоТоварам = ?(ЭтоВозврат, "Возврат от покупателя", "Реализация товаров");
	ТекстСодержанияПоУслугам = ?(БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяОтчетомКомитенту(ПараметрыРеализации.Регистратор), "Оказание услуг по договору комиссии", "Реализация услуг");
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетовСКомитентом) Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ?(СтрокаТаблицы.ЭтоУслуга, ТекстСодержанияПоУслугам, ТекстСодержанияПоТоварам);
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", СтрокаТаблицы.ДокументРасчетовСКомитентом, ОтражатьВНалоговомУчете);
		КонецЕсли; 
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияРеализованныеТоварыКомитентов(ТаблицаРеализованныеТоварыКомитентов, ПараметрыРеализации, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаРеализованныеТоварыКомитентов) Тогда
		Возврат;
	КонецЕсли;
	
	Период      = ПараметрыРеализации.Период;
	Организация = ПараметрыРеализации.Организация;
	
	Для каждого СтрокаПартии Из ТаблицаРеализованныеТоварыКомитентов Цикл
		
		Движение = Движения.РеализованныеТоварыКомитентов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаПартии);
		Движение.Активность  = Истина;
		Движение.Период      = Период;
		Движение.Организация = Организация;
		
	КонецЦикла;
	
	Движения.РеализованныеТоварыКомитентов.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияРеализацияСобственныхТоваровУслугКорректировка(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Организация              = ПараметрыРеализации.Организация;
	ТипРегистратора          = ТипЗнч(ПараметрыРеализации.Регистратор);
	ТекстСодержания          = "Корректировка реализации";
	ДатаКонцаПредыдущегоГода = НачалоГода(ПараметрыРеализации.Период)-1;
	
	ВалютаРеглУчета          = Константы.ВалютаРегламентированногоУчета.Получить();
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПараметрыРеализации.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
		
		Если ПараметрыРеализации.ПрошлыйПериод Тогда
			
			//Движение по признанию дохода в прошлом периоде в налоговом учете
			Если ОтражатьВНалоговомУчете 
				ИЛИ (СвойстваСчетаДоходов.Количественный И СтрокаТаблицы.Количество <> 0) Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = ПараметрыРеализации.ДатаДокументаРеализации;
				Проводка.Организация = Организация;
				Проводка.Сумма       = 0;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
				
				Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
				ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете);
			КонецЕсли; 
			
			//Признание выручки по БУ концом предыдущего года
			Если НЕ ПараметрыРеализации.ОтчетностьПодписана И СтрокаТаблицы.СуммаБУ <> 0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = ДатаКонцаПредыдущегоГода;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				
				Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
				ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", Ложь);
				Проводка.КоличествоКт = 0;
			КонецЕсли;
			
			//Движение по признанию финансового результата
			ФинРезультатБУ = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаСписания;
			ФинРезультатНУ = СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаСписанияНУ;
			
			ЭтоСчетПрочихДоходов = СтрокаТаблицы.СчетДоходов = Планысчетов.Хозрасчетный.ПрочиеДоходы;
			
			Если ФинРезультатНУ <> 0 И ОтражатьВНалоговомУчете Тогда
				СформироватьДвиженияПризнанияФинРезультата(Движения, Организация, 
				ПараметрыРеализации.ДатаДокументаРеализации, 0, ФинРезультатНУ, ОтражатьВНалоговомУчете, ЭтоСчетПрочихДоходов);
			КонецЕсли; 
			
			Если НЕ ПараметрыРеализации.ОтчетностьПодписана И ФинРезультатБУ <> 0 Тогда
				СформироватьДвиженияПризнанияФинРезультата(Движения, Организация, 
				ДатаКонцаПредыдущегоГода, ФинРезультатБУ, 0, ОтражатьВНалоговомУчете, ЭтоСчетПрочихДоходов);
			КонецЕсли;
			
			//Движение по признанию задолженности в налоговом учете
			Если (НЕ ПараметрыРеализации.ОтчетностьПодписана И СтрокаТаблицы.СуммаБУ <> 0) 
				ИЛИ (ОтражатьВНалоговомУчете И СтрокаТаблицы.СуммаНУ <> 0) Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = ПараметрыРеализации.Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = ?(ПараметрыРеализации.ОтчетностьПодписана, 0, СтрокаТаблицы.СуммаБУ);
				Проводка.Содержание  = ТекстСодержания;
					
				Проводка.СчетДт = СтрокаТаблицы.КорСчет;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
				
				Проводка.СчетКт =  ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете);
				
			КонецЕсли;
			
			Если ПараметрыРеализации.ОтчетностьПодписана Тогда
				//Формируем движения текущим периодом
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = ПараметрыРеализации.Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = СтрокаТаблицы.КорСчет;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				Проводка.ВалютнаяСуммаДт = 0; // Валютная сумма сформирована проводкой по признанию задолженности в налоговом учете

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ПараметрыРеализации.СтатьяПрочихДоходовИРасходов);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
				
				Если СвойстваСчетаКт.Количественный Тогда
					Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
				КонецЕсли;
				
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);

			Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
			ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСторноРеализацияСобственныхТоваровУслугКорректировка(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Организация              = ПараметрыРеализации.Организация;
	ТипРегистратора          = ТипЗнч(ПараметрыРеализации.Регистратор);
	ТекстСодержания          = "Корректировка реализации";
	ДатаКонцаПредыдущегоГода = НачалоГода(ПараметрыРеализации.Период)-1;
	
	ВалютаРеглУчета          = Константы.ВалютаРегламентированногоУчета.Получить();
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПараметрыРеализации.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если ПараметрыРеализации.ПрошлыйПериод Тогда
			
			//Признание выручки по БУ концом предыдущего года
			Если НЕ ПараметрыРеализации.ОтчетностьПодписана Тогда
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = ДатаКонцаПредыдущегоГода;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				
				Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
				ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", Ложь);
				
				//Движение по признанию финансового результата
				ФинРезультатБУ = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаСписания;
		
				Если НЕ ПараметрыРеализации.ОтчетностьПодписана И ФинРезультатБУ <> 0 Тогда
					ЭтоСчетПрочихДоходов = СтрокаТаблицы.СчетДоходов = Планысчетов.Хозрасчетный.ПрочиеДоходы;
					СформироватьДвиженияПризнанияФинРезультата(Движения, Организация, 
						ДатаКонцаПредыдущегоГода, ФинРезультатБУ, 0, ОтражатьВНалоговомУчете, ЭтоСчетПрочихДоходов);
				КонецЕсли;
				
				//Движение по признанию задолженности в бухгалтерском учете
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = ПараметрыРеализации.Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
					
				Проводка.СчетДт = СтрокаТаблицы.КорСчет;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);

				Проводка.СчетКт =  ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Кт", Ложь);

			КонецЕсли;
			
			//Формируем движения текущим периодом
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = ?(ПараметрыРеализации.ОтчетностьПодписана, - СтрокаТаблицы.СуммаБУ, 0);
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетКт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете,, Истина);
			Если НЕ ПараметрыРеализации.ОтчетностьПодписана Тогда
				Проводка.ВалютнаяСуммаКт = 0;
			КонецЕсли; 
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", ПараметрыРеализации.СтатьяПрочихДоходовИРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
				
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = -СтрокаТаблицы.Количество;
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете И СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = - (СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаНДСРуб);
				Проводка.СуммаПРДт = - (СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ);
			КонецЕсли;
			
		Иначе
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);

			Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
			ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияРеализацияТоваровУслугКомитентовКорректировка(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыРеализации.Организация;
	ТекстСодержания = "Корректировка реализации";
	ДатаКонцаПредыдущегоГода = НачалоГода(ПараметрыРеализации.Период)-1;
	
	ВалютаРеглУчета         = Константы.ВалютаРегламентированногоУчета.Получить();
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПараметрыРеализации.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл

		Если ПараметрыРеализации.ПрошлыйПериод Тогда
			
			// заполняем задолженности в прошлом периоде по НУ по счетам корректировки
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = ПараметрыРеализации.ДатаДокументаРеализации;
			Проводка.Организация = Организация;
			Проводка.Сумма       = 0;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
			//Признание выручки по БУ концом предыдущего года
			Если НЕ ПараметрыРеализации.ОтчетностьПодписана Тогда
				// заполняем задолженности в прошлом периоде по НУ
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = ДатаКонцаПредыдущегоГода;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
				ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, Ложь);
			КонецЕсли;

			
			// списываем задолженность клиента в текущем периоде по НУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = ?(ПараметрыРеализации.ОтчетностьПодписана, 0, СтрокаТаблицы.СуммаБУ);
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете);
			
			// списываем задолженность комитенту в текущем периоде по НУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = ?(ПараметрыРеализации.ОтчетностьПодписана, 0, СтрокаТаблицы.СуммаБУ);
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Дт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
			Если ПараметрыРеализации.ОтчетностьПодписана Тогда
				// движения в текущем периоде по БУ
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = ПараметрыРеализации.Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				Проводка.Содержание  = ТекстСодержания;
				
				Проводка.СчетДт = СтрокаТаблицы.КорСчет;
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				
				Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
				ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, Ложь);
			КонецЕсли;
			
		Иначе
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСторноРеализацияТоваровУслугКомитентовКорректировка(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = ПараметрыРеализации.Регистратор;
	Организация = ПараметрыРеализации.Организация;
	ТекстСодержания = "Корректировка реализации";
	ДатаКонцаПредыдущегоГода = НачалоГода(ПараметрыРеализации.Период)-1;
	
	ВалютаРеглУчета         = Константы.ВалютаРегламентированногоУчета.Получить();
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПараметрыРеализации.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл

		Если ПараметрыРеализации.ПрошлыйПериод И НЕ ПараметрыРеализации.ОтчетностьПодписана Тогда
			
			// заполняем задолженности в прошлом периоде по НУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ДатаКонцаПредыдущегоГода;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
				
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
				
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, Ложь);
	
			
			// списываем задолженность клиента в текущем периоде по НУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", Ложь);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Кт", Ложь);
			
			// списываем задолженность комитенту в текущем периоде по НУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Дт", ПараметрыРеализации.ДокументРеализации, Ложь);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, Ложь);
			

			// движения в текущем периоде по БУ
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = 0;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
		Иначе
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ПараметрыРеализации.Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержания;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", ПараметрыРеализации.ДокументРеализации, ОтражатьВНалоговомУчете);
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитики, ОтражатьВНалоговомУчете, СуммаВР = 0, Сторно = Ложь)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	БухгалтерскийУчет.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 1, СтрокаТаблицы.КорСубконто1);
	БухгалтерскийУчет.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 2, СтрокаТаблицы.КорСубконто2);
	БухгалтерскийУчет.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 3, СтрокаТаблицы.КорСубконто3);
	Если СвойстваСчета.Валютный Тогда
		Проводка["Валюта"+ТипАналитики]        = СтрокаТаблицы.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма"+ТипАналитики] = ?(Сторно, -СтрокаТаблицы.СуммаВзаиморасчетов, СтрокаТаблицы.СуммаВзаиморасчетов);
	КонецЕсли;
		
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение"+ТипАналитики] = СтрокаТаблицы.Подразделение;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И СвойстваСчета.НалоговыйУчет Тогда
		Проводка["СуммаНУ"+ТипАналитики] = ?(Сторно, -СтрокаТаблицы.СуммаНУ, СтрокаТаблицы.СуммаНУ);
		Проводка["СуммаВР"+ТипАналитики] = ?(Сторно, -СуммаВР, СуммаВР);
		Проводка["СуммаПР"+ТипАналитики] = ?(Сторно, -(СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ - СуммаВР),
													(СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ - СуммаВР));
	КонецЕсли;
	
КонецПроцедуры

Процедура  ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитики, ОтражатьВНалоговомУчете, СуммаВР = 0)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], 1,                   СтрокаТаблицы.Субконто);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "СтавкиНДС",         СтрокаТаблицы.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Номенклатура",      СтрокаТаблицы.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
	
	Если СвойстваСчета.Количественный Тогда
		Проводка["Количество"+ТипАналитики] = СтрокаТаблицы.Количество;  
	КонецЕсли;
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение"+ТипАналитики] = СтрокаТаблицы.Подразделение;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И СвойстваСчета.НалоговыйУчет Тогда
		Проводка["СуммаНУ"+ТипАналитики] = СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаНДСРуб;
		Проводка["СуммаВР"+ТипАналитики] = СуммаВР;
		Проводка["СуммаПР"+ТипАналитики] = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ - СуммаВР;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, ТипАналитики, ДокументРасчетов, ОтражатьВНалоговомУчете)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Контрагенты", СтрокаТаблицы.Комитент);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "Договоры",    СтрокаТаблицы.ДоговорКомиссии);
	БухгалтерскийУчет.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], "ДокументыРасчетовСКонтрагентами", ДокументРасчетов);
	
	Если СвойстваСчета.Валютный Тогда
		Проводка["Валюта"+ТипАналитики]        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
		Проводка["ВалютнаяСумма"+ТипАналитики] = СтрокаТаблицы.СуммаРасчетовСКомитентом;
	КонецЕсли;

	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение"+ТипАналитики] = СтрокаТаблицы.Подразделение;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И СвойстваСчета.НалоговыйУчет Тогда
		Проводка["СуммаНУ"+ТипАналитики] = СтрокаТаблицы.СуммаНУ;
		Проводка["СуммаПР"+ТипАналитики] = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПризнанияФинРезультата(Движения, Организация, Период, ФинРезультатБУ, ФинРезультатНУ, ОтражатьВНалоговомУчете, ЭтоПрочиеДоходы)
	
	КорСчет = ?(ЭтоПрочиеДоходы, ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов,
								 ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	
	Проводка 				= Движения.Хозрасчетный.Добавить();
	Проводка.Период       	= Период;
	Проводка.Организация  	= Организация;
	Проводка.Содержание   	= "Финансовый результат корректировки";
	
	Если (ФинРезультатБУ > 0) ИЛИ (ФинРезультатБУ=0 И ФинРезультатНУ >0) Тогда
		Проводка.СчетДт = КорСчет;
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Множитель = 1;
	Иначе
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Проводка.СчетКт = КорСчет;
		Множитель = -1;
	КонецЕсли;
	
	Проводка.Сумма = ФинРезультатБУ * Множитель;
	Если ОтражатьВНалоговомУчете Тогда
		Проводка.СуммаНУДт = ФинРезультатНУ * Множитель;
		Проводка.СуммаНУКт = ФинРезультатНУ * Множитель;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуРеализацииПоКурсуАвансов(Параметры, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Реквизиты)
	 Или Не ЗначениеЗаполнено(Параметры.ТоварыУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты                    = Параметры.Реквизиты[0];
	ТаблицаПоступлениеРеализация = Параметры.ТоварыУслуги;
	ТаблицаВзаиморасчеты         = Параметры.Взаиморасчеты;
	
	ЕстьКолонкаНалоговаяБазаНДС = ТаблицаПоступлениеРеализация.Колонки.Найти("НалоговаяБазаНДС") <> Неопределено;
	
	// Дополнительно добавим сумму без НДС для последующей записи в регистры.
	Если ТаблицаПоступлениеРеализация.Колонки.Найти("СуммаБезНДСРуб") = Неопределено Тогда
		
		ТаблицаПоступлениеРеализация.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоступлениеРеализация Цикл
			Если ЕстьКолонкаНалоговаяБазаНДС И СтрокаТаблицы.НалоговаяБазаНДС <> 0 Тогда
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.НалоговаяБазаНДС;
			Иначе
				СтрокаТаблицы.СуммаБезНДСРуб = ?(ЗначениеЗаполнено(СтрокаТаблицы.СуммаРуб), СтрокаТаблицы.СуммаРуб, 0) 
					- ?(ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДСРуб), СтрокаТаблицы.СуммаНДСРуб, 0);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда
		Возврат ТаблицаПоступлениеРеализация;
	КонецЕсли;
	
	Период          = Реквизиты.Период;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать(, "ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	ТаблицаДоговоров.Свернуть("ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	ТаблицаВзаиморасчеты.Индексы.Добавить("ДоговорКонтрагента");
	
	ТаблицаРезультат = ТаблицаПоступлениеРеализация.СкопироватьКолонки();
	
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		ВалютаВзаиморасчетов     = СтрокаДоговора.ВалютаВзаиморасчетов;
		РасчетыВУсловныхЕдиницах = СтрокаДоговора.РасчетыВУсловныхЕдиницах;
		
		Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДоговора.ДоговорКонтрагента);
		ТаблицаВзаиморасчетыПоДоговору = ТаблицаВзаиморасчеты.Скопировать(Отбор);
		
		СуммаКорректировки = ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРубПоКурсуАванса") 
			- ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРуб");
			
		Если ТаблицаПоступлениеРеализация.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать();
		Иначе
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаРеглУчета 
			ИЛИ СуммаКорректировки = 0 Тогда
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
			Продолжить;
		КонецЕсли;
		
		// БУ - корректируются значения колонки СуммаБУ.
		СуммаРуб = ТаблицаРезультатПоДоговору.Итог("СуммаРуб");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаРуб + СуммаКорректировки,
			ТаблицаРезультатПоДоговору,
			"СуммаБУ",
			"СуммаРуб");
		
		// НУ
		НУПоКурсуРеализации = Период >= '20220101' 
			И ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
		Если РасчетыВУсловныхЕдиницах Тогда
			НУПоКурсуАвансов = Не НУПоКурсуРеализации;
		Иначе
			// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
			НУПоКурсуАвансов = Не НУПоКурсуРеализации И ('20100101' <= Период);
		КонецЕсли;
		
		Если НУПоКурсуРеализации Тогда
			КэшКурсовВалют = Новый Соответствие;
			Для каждого СтрокаТаблицы Из ТаблицаРезультатПоДоговору Цикл
				ДатаРеализации = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаРеализации), 
					НачалоДня(СтрокаТаблицы.ДатаРеализации), 
					НачалоДня(Период));
				СтруктураКурса = КэшКурсовВалют[ДатаРеализации];
				Если СтруктураКурса = Неопределено Тогда
					СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаРеализации);
					КэшКурсовВалют.Вставить(ДатаРеализации, СтруктураКурса);
				КонецЕсли;
				СтрокаТаблицы.СуммаНУ = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ВалютаРеглУчета,
					СтруктураКурса.Курс, 1,
					СтруктураКурса.Кратность, 1);
			КонецЦикла;
		ИначеЕсли НУПоКурсуАвансов Тогда
			ТаблицаРезультатПоДоговору.ЗагрузитьКолонку(ТаблицаРезультатПоДоговору.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
		КонецЕсли;
		
		// НДС
		
		// Рассчитаем сумму без НДС до корректировки.
		Для Каждого СтрокаТаблицы Из ТаблицаРезультатПоДоговору Цикл
			СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
		КонецЦикла;
		
		НДСПоКурсуАвансов = РасчетыВУсловныхЕдиницах
			И НЕ (БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейОтгруженныхТоваров(Реквизиты.Регистратор)
				И УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период));
		
		Если НДСПоКурсуАвансов Тогда // Корректируются значения колонки СуммаНДСРуб.
			
			ТолькоПоКурсуАванса = ТаблицаВзаиморасчетыПоДоговору.Итог("ОстатокВзаиморасчетов") 
				>= ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаВзаиморасчетов");
				
			Если НЕ ТолькоПоКурсуАванса Тогда
				СуммаНДСРуб           = ТаблицаРезультатПоДоговору.Итог("СуммаНДСРуб");
				СуммаКорректировкиНДС = Окр(СуммаКорректировки * СуммаНДСРуб / СуммаРуб, 2);
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаНДСРуб + СуммаКорректировкиНДС,
					ТаблицаРезультатПоДоговору,
					"СуммаНДСРуб");
			КонецЕсли;
			
			Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаРезультатПоДоговору Цикл
				Если ТолькоПоКурсуАванса Тогда
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицыПоДоговору.СтавкаНДС);
					СтрокаТаблицыПоДоговору.СуммаНДСРуб = Окр(СтрокаТаблицыПоДоговору.СуммаБУ * ПроцентНДС / (100 + ПроцентНДС), 2);
				КонецЕсли;
				СтрокаТаблицыПоДоговору.СуммаБезНДСРуб = СтрокаТаблицыПоДоговору.СуммаБУ - СтрокаТаблицыПоДоговору.СуммаНДСРуб;
			КонецЦикла;
		КонецЕсли;
		
		// Результат корректировки по договору добавляем в общую таблицу.
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
	
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПодготовитьТаблицыПоступленияПоКурсуАвансов(СтруктураТаблицДокумента, ТаблицаВзаиморасчеты, Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат СтруктураТаблицДокумента;
	КонецЕсли;
	
	ТаблицыПоступленияПоКурсуАвансов = ПолучитьТаблицыПоступленияПоКурсуАвансов(СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, Реквизиты[0].Период);
		
	Если Реквизиты[0].НДСВключенВСтоимость 
	   И (Реквизиты.Колонки.Найти("УчетАгентскогоНДС") = Неопределено Или Не Реквизиты[0].УчетАгентскогоНДС) Тогда
		Возврат ТаблицыПоступленияПоКурсуАвансов;
	КонецЕсли;
	
	// Исключение НДС из сумм документа (если НДС не включен в стоимость или покупатель исполняет обязанности налогового агента по НДС)	
	Для каждого ЭлементСтруктуры Из ТаблицыПоступленияПоКурсуАвансов Цикл
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из ЭлементСтруктуры.Значение Цикл
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетов;
			СтрокаТаблицы.СуммаРуб            = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
			СтрокаТаблицы.СуммаБУ             = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНДСРуб;
			СтрокаТаблицы.СуммаНУ             = СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаНДСРуб;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицыПоступленияПоКурсуАвансов;
	
КонецФункции

// Возвращает структуру таблиц, состав которой и список колонок совпадает с переданными в параметре ТаблицыДокумента,
// а рублевые суммы скорректированы с учетом курсов зачтенных валютных авансов
//
// Параметры
//  <ТаблицыДокумента>  - <Структура> - структура таблиц документа. Вместо таблицы может передаваться Неопределено.
//                        Если передается таблица, она обязательно должна иметь колонки:
//                        СуммаРуб, СуммаБУ, СуммаНУ, СуммаНДСРуб.
//                        Состав остальных колонок может быть произвольным.
//  <Взаиморасчеты>     - <ТаблицаЗначений> - таблица взаиморасчетов по документу. Обязательно должна иметь колонки:
//                        ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, СуммаРуб, СуммаРубПоКурсуАванса
//  <Период>            - <Дата> - дата документа поступления или реализации
//
// Возвращаемое значение:
//   <Структура>   - структура таблиц, состав и список колонок которых совпадает с переданными в параметре ТаблицыДокумента,
//                   а рублевые суммы скорректированы с учетом курсов зачтенных валютных авансов
//
Функция ПолучитьТаблицыПоступленияПоКурсуАвансов(ТаблицыДокумента, Взаиморасчеты, Период) Экспорт
	
	Результат = Новый Структура;
	ТаблицыЗначений = Новый Структура;
	Для каждого СтрокаТаблицы Из ТаблицыДокумента Цикл
		Если СтрокаТаблицы.Значение = Неопределено Тогда
			Результат.Вставить(СтрокаТаблицы.Ключ, Неопределено);
		Иначе
			ТаблицыЗначений.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Рассчитаем сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Если СтрокаТаблицы.Значение.Колонки.Найти("СуммаБезНДСРуб") = Неопределено Тогда
			СтрокаТаблицы.Значение.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		КонецЕсли;
		
		Для Каждого СтрокаСкопированнойТаблицы Из СтрокаТаблицы.Значение Цикл
			СтрокаСкопированнойТаблицы.СуммаБезНДСРуб = ?(ЗначениеЗаполнено(СтрокаСкопированнойТаблицы.СуммаРуб), СтрокаСкопированнойТаблицы.СуммаРуб, 0)
													    - ?(ЗначениеЗаполнено(СтрокаСкопированнойТаблицы.СуммаНДСРуб), СтрокаСкопированнойТаблицы.СуммаНДСРуб, 0);
		КонецЦикла;
	КонецЦикла;
	
	Если Взаиморасчеты.Количество() = 0 Тогда
		Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение.СкопироватьКолонки());
	КонецЦикла;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Договоры = Взаиморасчеты.Скопировать(, "ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС");
	Договоры.Свернуть("ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС");
	Взаиморасчеты.Индексы.Добавить("ДоговорКонтрагента");
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Ключ",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СводнаяТаблица.Колонки.Добавить("СуммаРуб",    ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СводнаяТаблица.Колонки.Добавить("СуммаБУ",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СводнаяТаблица.Колонки.Добавить("СуммаНУ",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СводнаяТаблица.Колонки.Добавить("СуммаНДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СводнаяТаблица.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СводнаяТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
	Для каждого СтрокаДоговора Из Договоры Цикл
		
		Если СтрокаДоговора.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			ТребуетсяКорректировка = Ложь;
		Иначе
			Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДоговора.ДоговорКонтрагента);
			ВзаиморасчетыПоДоговору = Взаиморасчеты.Скопировать(Отбор);
			СуммаКорректировки = ВзаиморасчетыПоДоговору.Итог("СуммаРубПоКурсуАванса") - ВзаиморасчетыПоДоговору.Итог("СуммаРуб");
			ТребуетсяКорректировка = (СуммаКорректировки <> 0);
		КонецЕсли;
		
		Если НЕ ТребуетсяКорректировка Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
				ИсходнаяТаблица = СтрокаТаблицы.Значение;
				Если ИсходнаяТаблица.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица, Результат[СтрокаТаблицы.Ключ]);
				Иначе
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица.Скопировать(Отбор), Результат[СтрокаТаблицы.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Корректировка требуется. Создаем структуру таблиц по договору
		
		РезультатПоДоговору = Новый Структура;
		Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			ИсходнаяТаблица = СтрокаТаблицы.Значение;
			Если ИсходнаяТаблица.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
				РезультатПоДоговору.Вставить(СтрокаТаблицы.Ключ, ИсходнаяТаблица.Скопировать());
			Иначе
				РезультатПоДоговору.Вставить(СтрокаТаблицы.Ключ, ИсходнаяТаблица.Скопировать(Отбор));
			КонецЕсли;
		КонецЦикла;
	
		// Первый этап - распределяем суммы корректировки между таблицами по договору
		
		СводнаяТаблица.Очистить();
		Для каждого СтрокаПоДоговору Из РезультатПоДоговору Цикл
			
			НоваяСтрока = СводнаяТаблица.Добавить();
			НоваяСтрока.Ключ = СтрокаПоДоговору.Ключ;
			// Заполняем колонки, по которым определяется база распределения
			Если СтрокаДоговора.УчетАгентскогоНДС Тогда
				НоваяСтрока.СуммаРуб = СтрокаПоДоговору.Значение.Итог("СуммаРуб") - СтрокаПоДоговору.Значение.Итог("СуммаНДСРуб");
			Иначе	
				НоваяСтрока.СуммаРуб = СтрокаПоДоговору.Значение.Итог("СуммаРуб");
			КонецЕсли;
			НоваяСтрока.СуммаНДСРуб = СтрокаПоДоговору.Значение.Итог("СуммаНДСРуб");
			НоваяСтрока.СуммаБезНДСРуб = СтрокаПоДоговору.Значение.Итог("СуммаБезНДСРуб");
			НоваяСтрока.СуммаНДСВзаиморасчетов = СтрокаПоДоговору.Значение.Итог("СуммаНДСВзаиморасчетов");
			
		КонецЦикла;
		
		// БУ - корректируются значения колонки СуммаБУ
		ОбщаяСуммаБУ = СводнаяТаблица.Итог("СуммаРуб") + СуммаКорректировки;
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ОбщаяСуммаБУ, СводнаяТаблица, "СуммаБУ", "СуммаРуб");
		
		// НУ
		Если СтрокаДоговора.РасчетыВУсловныхЕдиницах Тогда
			НУПоКурсуАвансов = Истина;
		Иначе
			// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
			НУПоКурсуАвансов = ('20100101' <= Период);
		КонецЕсли;
		
		Если НУПоКурсуАвансов Тогда // корректируются значения колонки СуммаНУ
			СводнаяТаблица.ЗагрузитьКолонку(СводнаяТаблица.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
		КонецЕсли;
		
		// НДС
		НДСПоКурсуАвансов = СтрокаДоговора.РасчетыВУсловныхЕдиницах или СтрокаДоговора.УчетАгентскогоНДС;
		
		Если НДСПоКурсуАвансов Тогда // корректируется значение колонки СуммаНДСРуб
			
			ОбщаяСуммаНДСРуб = СводнаяТаблица.Итог("СуммаНДСРуб")
				+ Окр(СуммаКорректировки * СводнаяТаблица.Итог("СуммаНДСРуб") / СводнаяТаблица.Итог("СуммаРуб"), 2);
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ОбщаяСуммаНДСРуб, СводнаяТаблица, "СуммаНДСРуб");
			
		КонецЕсли;
		
		// Второй этап - распределяем общую сумму корректировки по каждой таблице между строками таблицы
		
		Для каждого ИтоговаяСтрока Из СводнаяТаблица Цикл
			
			ТаблицаПоДоговору = РезультатПоДоговору[ИтоговаяСтрока.Ключ];
			
			// БУ
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтоговаяСтрока.СуммаБУ, ТаблицаПоДоговору, "СуммаБУ", "СуммаРуб");
			// НУ
			Если НУПоКурсуАвансов Тогда
				ТаблицаПоДоговору.ЗагрузитьКолонку(ТаблицаПоДоговору.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
			КонецЕсли;
			// НДС
			Если НДСПоКурсуАвансов Тогда
				
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					ИтоговаяСтрока.СуммаНДСРуб, ТаблицаПоДоговору, "СуммаНДСРуб");
					
				Если НЕ СтрокаДоговора.УчетАгентскогоНДС Тогда
						
					// Пересчитываем сумму без НДС по каждой строке.
					Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаПоДоговору Цикл
						СтрокаТаблицыПоДоговору.СуммаБезНДСРуб = СтрокаТаблицыПоДоговору.СуммаБУ -СтрокаТаблицыПоДоговору.СуммаНДСРуб;
					КонецЦикла;
					
				Иначе
					
					// Пересчитываем сумму без НДС по каждой строке.
					Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаПоДоговору Цикл
						СтрокаТаблицыПоДоговору.СуммаБезНДСРуб = СтрокаТаблицыПоДоговору.СуммаБУ;
					КонецЦикла;
					
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаДоговора.УчетАгентскогоНДС Тогда
				
				Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаПоДоговору Цикл
					
					СтрокаТаблицыПоДоговору.СуммаРуб = СтрокаТаблицыПоДоговору.СуммаБУ + СтрокаТаблицыПоДоговору.СуммаНДСРуб;
					СтрокаТаблицыПоДоговору.СуммаБУ = СтрокаТаблицыПоДоговору.СуммаРуб;
					СтрокаТаблицыПоДоговору.СуммаНУ = ?(НУПоКурсуАвансов, СтрокаТаблицыПоДоговору.СуммаРуб, СтрокаТаблицыПоДоговору.СуммаНУ);
					
				КонецЦикла;
				
			КонецЕсли;	
				
		КонецЦикла;
		
		// Третий этап - результаты корректировки по договору добавляем в общие таблицы результата
		
		Для каждого СтрокаПоДоговору Из РезультатПоДоговору Цикл
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтрокаПоДоговору.Значение, Результат[СтрокаПоДоговору.Ключ]);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьПартииРеализованныхТоваровКомитентов(ТаблицаТоварыКомитентовБезПартий, Параметры, Отказ)
	
	ТаблицаТоварыСПартиями = ТаблицаТоварыКомитентовБезПартий.СкопироватьКолонки();
	ТаблицаТоварыСПартиями.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыКомитентовБезПартий) Тогда
		Возврат ТаблицаТоварыСПартиями;
	КонецЕсли;
	
	ТаблицаСписанныеТовары = Параметры.СписанныеТовары;
	Реквизиты = Параметры.Реквизиты[0];
	Период = Реквизиты.Период;
	
	Если Параметры.Свойство("ТоварыКомитента") Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Параметры.ТоварыКомитента, ТаблицаСписанныеТовары);
	КонецЕсли; 
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	// Товары комитентов - распределение сумм выручки пропорционально количеству каждой списанной партии
	
	ТаблицаСписанныеТовары.Индексы.Добавить("ИмяСписка,НомерСтроки");
	
	Для Каждого СтрокаТовараБезПартий Из ТаблицаТоварыКомитентовБезПартий Цикл
		
		Отбор = Новый Структура("ИмяСписка,НомерСтроки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовараБезПартий);
		СтрокиСписанныхПартийТовара = ТаблицаСписанныеТовары.НайтиСтроки(Отбор);
		
		ТаблицаТовараСПартиями = ТаблицаТоварыСПартиями.СкопироватьКолонки();
		
		Для каждого СтрокаСписаннойПартии Из СтрокиСписанныхПартийТовара Цикл
			СтрокаТовараСПартией = ТаблицаТовараСПартиями.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараСПартией, СтрокаТовараБезПартий);
			СтрокаТовараСПартией.Партия                      = СтрокаСписаннойПартии.Партия;
			СтрокаТовараСПартией.Количество                  = СтрокаСписаннойПартии.Количество;
			СтрокаТовараСПартией.СуммаПоступленияОтКомитента = СтрокаСписаннойПартии.СуммаСписания;
			
			//Если партия не опеределена, заполним обязательные показатели
			Если Не ЗначениеЗаполнено(СтрокаТовараСПартией.Партия) Тогда
				СтрокаТовараСПартией.ВалютаРасчетовСКомитентом = ВалютаРеглУчета;
				СтрокаТовараСПартией.СчетРасчетовСКомитентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураРаспределяемыхКолонок = Новый Структура("СуммаВзаиморасчетов,СуммаРуб,СуммаНДСРуб,СуммаБУ,СуммаНУ");
		Для каждого ЭлементСтруктурыКолонок Из СтруктураРаспределяемыхКолонок Цикл
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СтрокаТовараБезПартий[ЭлементСтруктурыКолонок.Ключ], 
				ТаблицаТовараСПартиями, 
				ЭлементСтруктурыКолонок.Ключ, 
				"Количество");
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовараСПартиями, ТаблицаТоварыСПартиями);
		
	КонецЦикла;
	
	БухгалтерскийУчетПереопределяемый.ЗаполнитьПараметрыПартийТоваровКомитентов(ТаблицаТоварыСПартиями, Реквизиты, Отказ);
	
	Возврат ТаблицаТоварыСПартиями;
	
КонецФункции

Функция ПолучитьПустуюТаблицуРеализованныеТоварыКомитентов()

	ПустаяТаблица = РегистрыНакопления.РеализованныеТоварыКомитентов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	
	ПустаяТаблица.Колонки.Добавить("Партия");
	Возврат ПустаяТаблица;

КонецФункции

Функция ПодготовитьТаблицуРеализованныхТоваровУслугКомитентов(ТаблицаТоварыУслугиКомитентов)
	
	ТаблицаРеализованныеТоварыКомитентов = ПолучитьПустуюТаблицуРеализованныеТоварыКомитентов();
	
	Отбор = Новый Структура("ЭтоКомиссия", Истина);
	СписокКолонок = "Покупатель,Комитент,ДоговорКомиссии,Номенклатура,Количество,СуммаРасчетовСКомитентом,"
		+ "СуммаПоступленияОтКомитента,Партия,ДатаРеализации,СуммаНДСРуб,Контрагент, ДокументРасчетов";
	Если ТаблицаТоварыУслугиКомитентов.Колонки.Найти("СчетФактура") <> Неопределено Тогда
		СписокКолонок = СписокКолонок + ",СчетФактура";
	КонецЕсли;
	
	ТаблицаРеализацияКомитентов = ТаблицаТоварыУслугиКомитентов.Скопировать(, СписокКолонок);
	ТаблицаРеализацияКомитентов.Колонки.Контрагент.Имя                     = "Субкомиссионер";
	ТаблицаРеализацияКомитентов.Колонки.СуммаНДСРуб.Имя                    = "СуммаНДС";
	ТаблицаРеализацияКомитентов.Колонки.Комитент.Имя                       = "Контрагент";
	ТаблицаРеализацияКомитентов.Колонки.ДоговорКомиссии.Имя                = "ДоговорКонтрагента";
	ТаблицаРеализацияКомитентов.Колонки.СуммаРасчетовСКомитентом.Имя       = "Выручка";
	ТаблицаРеализацияКомитентов.Колонки.СуммаПоступленияОтКомитента.Имя    = "СуммаПоступления";
	Если ТаблицаРеализацияКомитентов.Колонки.Найти("СчетФактура") <> Неопределено Тогда
		ТаблицаРеализацияКомитентов.Колонки.СчетФактура.Имя = "СчетФактураСубкомиссионера";
	Иначе
		ТаблицаРеализацияКомитентов.Колонки.Удалить("Субкомиссионер")
	КонецЕсли;
	
	Для каждого СтрокаРеализации Из ТаблицаРеализацияКомитентов Цикл
		НоваяСтрока = ТаблицаРеализованныеТоварыКомитентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации);
	КонецЦикла;
	
	Возврат ТаблицаРеализованныеТоварыКомитентов;
	
КонецФункции

Процедура ЗаполнитьСуммыРасчетовСКомитентами(ТаблицаТоваровУслугКомитентов, Период)

	КэшКурсов = Новый Соответствие;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваровУслугКомитентов Цикл
	
		Если СтрокаТаблицы.ВалютаРасчетовСКомитентом = СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
			СтрокаТаблицы.СуммаРасчетовСКомитентом = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтруктураКурса = КэшКурсов[СтрокаТаблицы.ВалютаРасчетовСКомитентом];
			Если СтруктураКурса = Неопределено Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом, Период);
				КэшКурсов.Вставить(СтрокаТаблицы.ВалютаРасчетовСКомитентом, СтруктураКурса);
			КонецЕсли;
			СтрокаТаблицы.СуммаРасчетовСКомитентом = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаБУ,
				ВалютаРеглУчета, СтрокаТаблицы.ВалютаРасчетовСКомитентом,
				1, СтруктураКурса.Курс,
				1, СтруктураКурса.Кратность);
			СтрокаТаблицы.СуммаПоступленияОтКомитента = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаПоступленияОтКомитента,
				ВалютаРеглУчета, СтрокаТаблицы.ВалютаРасчетовСКомитентом,
				1, СтруктураКурса.Курс,
				1, СтруктураКурса.Кратность);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#Область ПереоценкаВалютныхАвансовПодотчетногоЛица

Функция ПодготовитьТаблицыАвансовогоОтчетаПоКурсуАвансов(СтруктураТаблицДокумента, ВалютныеАвансыПодотчетногоЛица, Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(Реквизиты) Или Не ЗначениеЗаполнено(ВалютныеАвансыПодотчетногоЛица) Тогда
		Возврат СтруктураТаблицДокумента;
	КонецЕсли;
	
	ТаблицыАвансовогоОтчетаПоКурсуАвансов = ПолучитьТаблицыАвансовогоОтчетаПоКурсуАвансов(СтруктураТаблицДокумента,
		ВалютныеАвансыПодотчетногоЛица, Реквизиты[0].Период);
	
	Если Реквизиты[0].НДСВключенВСтоимость Тогда
		Возврат ТаблицыАвансовогоОтчетаПоКурсуАвансов;
	КонецЕсли;
	
	// Исключение НДС из сумм документа(если НДС не включен в стоимость)
	Для Каждого ЭлементСтруктуры Из ТаблицыАвансовогоОтчетаПоКурсуАвансов Цикл
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ЭлементСтруктуры.Значение Цикл
			СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
			СтрокаТаблицы.СуммаБУ  = СтрокаТаблицы.СуммаБУ  - СтрокаТаблицы.СуммаНДСРуб;
			СтрокаТаблицы.СуммаНУ  = СтрокаТаблицы.СуммаНУ  - СтрокаТаблицы.СуммаНДСРуб;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицыАвансовогоОтчетаПоКурсуАвансов;
	
КонецФункции

// Возвращает структуру таблиц, состав которой и список колонок совпадает с переданными в параметре ТаблицыДокумента,
// а рублевые суммы скорректированы с учетом курсов зачтенных валютных авансов подотчетного лица
//
// Параметры
//  <ТаблицыДокумента>  - <Структура> - структура таблиц документа. Вместо таблицы может передаваться Неопределено.
//                        Если передается таблица, она обязательно должна иметь колонки:
//                        СуммаРуб, СуммаБУ, СуммаНДСРуб.
//                        Состав остальных колонок может быть произвольным.
//  <ВалютныеАвансы>     - <ТаблицаЗначений> - таблица валютных авансов подотченого лица. Обязательно должна иметь колонки:
//                        ФизЛицо, ВалютаВзаиморасчетов, СуммаРуб, СуммаРубПоКурсуАванса
//  <Период>            - <Дата> - дата документа поступления или реализации
//
// Возвращаемое значение:
//   <Структура>   - структура таблиц, состав и список колонок которых совпадает с переданными в параметре ТаблицыДокумента,
//                   а рублевые суммы скорректированы с учетом курсов зачтенных валютных авансов
//
Функция ПолучитьТаблицыАвансовогоОтчетаПоКурсуАвансов(ТаблицыДокумента, ВалютныеАвансы, Период) Экспорт
	
	Результат = Новый Структура;
	ТаблицыЗначений = Новый Структура;
	Для Каждого СтрокаТаблицы Из ТаблицыДокумента Цикл
		Если СтрокаТаблицы.Значение = Неопределено Тогда
			Результат.Вставить(СтрокаТаблицы.Ключ, Неопределено);
		Иначе
			ТаблицыЗначений.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	// Рассчитаем сумму без НДС.
	Для Каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Если СтрокаТаблицы.Значение.Колонки.Найти("СуммаБезНДСРуб") = Неопределено Тогда
			СтрокаТаблицы.Значение.Колонки.Добавить("СуммаБезНДСРуб", ТипЧисло);
		КонецЕсли;
		
		Для Каждого СтрокаСкопированнойТаблицы Из СтрокаТаблицы.Значение Цикл
			СтрокаСкопированнойТаблицы.СуммаБезНДСРуб = ?(ЗначениеЗаполнено(СтрокаСкопированнойТаблицы.СуммаРуб),
				СтрокаСкопированнойТаблицы.СуммаРуб, 0)
				- ?(ЗначениеЗаполнено(СтрокаСкопированнойТаблицы.СуммаНДСРуб), СтрокаСкопированнойТаблицы.СуммаНДСРуб, 0);
		КонецЦикла;
	КонецЦикла;
	
	Если ВалютныеАвансы.Количество() = 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение.СкопироватьКолонки());
	КонецЦикла;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ФизЛица = ВалютныеАвансы.Скопировать(, "ФизЛицо, ВалютаВзаиморасчетов");
	ФизЛица.Свернуть("ФизЛицо, ВалютаВзаиморасчетов");
	ВалютныеАвансы.Индексы.Добавить("ФизЛицо, ВалютаВзаиморасчетов");
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Ключ",                   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СводнаяТаблица.Колонки.Добавить("СуммаРуб",               ТипЧисло);
	СводнаяТаблица.Колонки.Добавить("СуммаБУ",                ТипЧисло);
	СводнаяТаблица.Колонки.Добавить("СуммаНУ",                ТипЧисло);
	СводнаяТаблица.Колонки.Добавить("СуммаНДСРуб",            ТипЧисло);
	СводнаяТаблица.Колонки.Добавить("СуммаБезНДСРуб",         ТипЧисло);
	СводнаяТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов", ТипЧисло);
	
	Для Каждого СтрокаФизлицо Из ФизЛица Цикл
		Если СтрокаФизлицо.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			ТребуетсяКорректировка = Ложь;
		Иначе
			Отбор = Новый Структура("ФизЛицо, ВалютаВзаиморасчетов", СтрокаФизлицо.ФизЛицо, СтрокаФизлицо.ВалютаВзаиморасчетов);
			ВзаиморасчетыПоФизлицу = ВалютныеАвансы.Скопировать(Отбор);
			СуммаКорректировки = ВзаиморасчетыПоФизлицу.Итог("СуммаРубПоКурсуАванса") - ВзаиморасчетыПоФизлицу.Итог("СуммаРуб");
			ТребуетсяКорректировка = СуммаКорректировки <> 0;
		КонецЕсли;
		
		Если Не ТребуетсяКорректировка Тогда
			Для Каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
				ИсходнаяТаблица = СтрокаТаблицы.Значение;
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица, Результат[СтрокаТаблицы.Ключ]);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		// Корректировка требуется. Создаем структуру таблиц по физ.лицу
		
		РезультатПоФизЛицу = Новый Структура;
		Для Каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			ИсходнаяТаблица = СтрокаТаблицы.Значение;
			РезультатПоФизЛицу.Вставить(СтрокаТаблицы.Ключ, ИсходнаяТаблица.Скопировать());
		КонецЦикла;
		
		// Первый этап - распределяем суммы корректировки между таблицами по физ.лицу
		СводнаяТаблица.Очистить();
		Для Каждого СтрокаПоФизлицу Из РезультатПоФизЛицу Цикл
			НоваяСтрока = СводнаяТаблица.Добавить();
			НоваяСтрока.Ключ = СтрокаПоФизлицу.Ключ;
			// Заполняем колонки, по которым определяется база распределения
			НоваяСтрока.СуммаРуб = СтрокаПоФизлицу.Значение.Итог("СуммаРуб");
			НоваяСтрока.СуммаНДСРуб = СтрокаПоФизлицу.Значение.Итог("СуммаНДСРуб");
			НоваяСтрока.СуммаБезНДСРуб = СтрокаПоФизлицу.Значение.Итог("СуммаБезНДСРуб");
			НоваяСтрока.СуммаНДСВзаиморасчетов = СтрокаПоФизлицу.Значение.Итог("СуммаНДСВзаиморасчетов");
		КонецЦикла;
		
		// БУ - корректируются значения колонки СуммаБУ
		ОбщаяСуммаБУ = СводнаяТаблица.Итог("СуммаРуб") + СуммаКорректировки;
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ОбщаяСуммаБУ, СводнаяТаблица, "СуммаБУ", "СуммаРуб");
		// НУ
		СводнаяТаблица.ЗагрузитьКолонку(СводнаяТаблица.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
		
		// Второй этап - распределяем общую сумму корректировки по каждой таблице между строками таблицы
		Для Каждого ИтоговаяСтрока Из СводнаяТаблица Цикл
			ТаблицаПоФизлицу = РезультатПоФизлицу[ИтоговаяСтрока.Ключ];
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтоговаяСтрока.СуммаБУ, ТаблицаПоФизлицу, "СуммаБУ", "СуммаРуб");
			ТаблицаПоФизлицу.ЗагрузитьКолонку(ТаблицаПоФизлицу.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
			Если ИтоговаяСтрока.Ключ = "ПогашениеЗадолженностиТаблица" Тогда
				ТаблицаПоФизлицу.ЗагрузитьКолонку(ТаблицаПоФизлицу.ВыгрузитьКолонку("СуммаБУ"), "СуммаРуб");
			КонецЕсли;
		КонецЦикла;
		
		// Третий этап - результаты корректировки по физ.лицу добавляем в общие таблицы результата
		Для Каждого СтрокаПоФизлицу Из РезультатПоФизлицу Цикл
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтрокаПоФизлицу.Значение, Результат[СтрокаПоФизлицу.Ключ]);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ

// Возвращает таблицы значений с выручкой от реализации собственных и, отдельно, комиссионных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//		ТоварыУслугиКомитентов 			- реализованные товары и услуги, принятые на комиссию
//		РеализованныеТоварыКомитентов 	- выручка за реализованные комиссионные товары и услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - <ТаблицаЗначений> - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаВзаиморасчеты - <ТаблицаЗначений> - содержимое шапки документа и вспомогательных значений
//                       Является результатом функции УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  Отказ              	 - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//   <Структура>   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтКорректировкиРеализации(ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаТоварыКомитента, ТаблицаРеквизиты, Отказ, ТаблицаАвансов = Неопределено) Экспорт
	
	ТаблицыВыручки = Новый Структура("СобственныеТоварыУслуги,ТоварыУслугиКомитентов,РеализованныеТоварыКомитентов");
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат ТаблицыВыручки;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиОтКорректировкиРеализации(
		ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаТоварыКомитента, ТаблицаРеквизиты);

	Период = Параметры.Реквизиты[0].Период;
	
	ТаблицаВыручкиОтРеализации = Параметры.ТоварыУслуги;
	
	Если Не ТаблицаАвансов = Неопределено Тогда
		
		Если ТаблицаРеквизиты[0].ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	
			ТаблицаВыручкиОтРеализации.Колонки.Добавить("СуммаВзаиморасчетовАвансаПоСтроке");
			ТаблицаВыручкиОтРеализации.Колонки.Добавить("СуммаРубАвансовПоСтроке");
			
			СуммаВзаиморасчетовРаспределенияАванса = ТаблицаАвансов.Итог("СуммаВзаиморасчетов");
			
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаВзаиморасчетовРаспределенияАванса, ТаблицаВыручкиОтРеализации, "СуммаВзаиморасчетовАвансаПоСтроке", "СуммаВзаиморасчетов");
			
			СуммаРубПоКурсуАванса = ТаблицаАвансов.Итог("СуммаРубПоКурсуАванса");
			
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаРубПоКурсуАванса, ТаблицаВыручкиОтРеализации, "СуммаРубАвансовПоСтроке", "СуммаВзаиморасчетовАвансаПоСтроке");
			
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			ТаблицаРеквизиты[0].ВалютаВзаиморасчетов, ТаблицаРеквизиты[0].ДокументРеализации.Дата);
			
			КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Для Каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
				
				СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаРубАвансовПоСтроке + ?(КратностьВзаиморасчетов = 0, 0, (СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовАвансаПоСтроке)*КурсВзаиморасчетов/КратностьВзаиморасчетов);
				
				Если ТаблицаРеквизиты[0].РасчетыВУсловныхЕдиницах Тогда
					
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					
					СтрокаТаблицы.СуммаНДСРуб = СтрокаТаблицы.СуммаБУ*ПроцентНДС/(100 + ПроцентНДС);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ТаблицаВыручкиОтРеализации.Индексы.Добавить("ЭтоКомиссия");
	
	ТаблицаВыручкиОтРеализации.Колонки.Добавить("СуммаСписания",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаВыручкиОтРеализации.Колонки.Добавить("СуммаСписанияНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	// Собственные товары и услуги
	
	Отбор = Новый Структура("ЭтоКомиссия", Ложь);
	ТаблицаСобственныеТоварыУслуги = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	
	//Добавим стоимость списания для товаров
	СтоимостьТоваров = Параметры.СписанныеТовары.Скопировать(,"НомерСтроки, СуммаСписания, СуммаСписанияНУ");
	СтоимостьТоваров.Свернуть("НомерСтроки","СуммаСписания, СуммаСписанияНУ");
	Отбор = Новый Структура("ЭтоУслуга", Ложь);
	СтрокиТоваров = ТаблицаСобственныеТоварыУслуги.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиТоваров Цикл
		СтрокаСписания = СтоимостьТоваров.Найти(Строка.НомерСтроки, "НомерСтроки");
		Если СтрокаСписания<>Неопределено Тогда
			Строка.СуммаСписания   = СтрокаСписания.СуммаСписания;
			Строка.СуммаСписанияНУ = СтрокаСписания.СуммаСписанияНУ;
		КонецЕсли;
	КонецЦикла;
	
	// Товары и услуги комитентов
	
	Отбор = Новый Структура("ЭтоКомиссия,ЭтоУслуга", Истина, Истина);
	ТаблицаУслугиКомитентов = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	
	Отбор = Новый Структура("ЭтоКомиссия,ЭтоУслуга", Истина, Ложь);
	ТаблицаТоварыКомитентов = ТаблицаВыручкиОтРеализации.Скопировать(Отбор);
	
	ТаблицаТоварыКомитентов = ОпределитьПартииРеализованныхТоваровКомитентов(
		ТаблицаТоварыКомитентов, 
		Параметры, 
		Отказ);
	ТаблицаТоварыУслугиКомитентов = ТаблицаУслугиКомитентов;
	ТаблицаТоварыУслугиКомитентов.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТоварыКомитентов, ТаблицаТоварыУслугиКомитентов);
	ЗаполнитьСуммыРасчетовСКомитентами(ТаблицаТоварыУслугиКомитентов, Период);
	
	ТаблицаРеализованныеТоварыКомитентов = ПодготовитьТаблицуРеализованныхТоваровУслугКомитентовСУчетомОстатков(
		ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
		
	ТаблицыВыручки = Новый Структура;
	ТаблицыВыручки.Вставить("СобственныеТоварыУслуги",       ТаблицаСобственныеТоварыУслуги);
	ТаблицыВыручки.Вставить("ТоварыУслугиКомитентов",        ТаблицаТоварыУслугиКомитентов);
	ТаблицыВыручки.Вставить("РеализованныеТоварыКомитентов", ТаблицаРеализованныеТоварыКомитентов);
	
	Возврат ТаблицыВыручки;

КонецФункции

Функция ПодготовитьТаблицуРеализованныхТоваровУслугКомитентовСУчетомОстатков(ТаблицаТоварыКомитентов, ТаблицаРеквизиты)
	ТаблицаРеализованныеТоварыКомитентов = ПодготовитьТаблицуРеализованныхТоваровУслугКомитентов(ТаблицаТоварыКомитентов);
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ РегистрыНакопления.РеализованныеТоварыКомитентов.ЗаполнятьДокументРасчетов(Реквизиты.Период) Тогда
		Возврат ТаблицаРеализованныеТоварыКомитентов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",  					Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДокументРасчетов", 		Реквизиты.ДокументРеализации);
	Запрос.УстановитьПараметр("Номенклатура", 			ТаблицаТоварыКомитентов.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РеализованныеТоварыКомитентов.Остатки(&Дата, ДокументРасчетов = &ДокументРасчетов) КАК РеализованныеТоварыКомитентовОстатки
	|		ПО СправочникНоменклатура.Ссылка = РеализованныеТоварыКомитентовОстатки.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&Номенклатура)
	|	И (РеализованныеТоварыКомитентовОстатки.КоличествоОстаток >= 0
	|			ИЛИ СправочникНоменклатура.Услуга)";
	
	НоменклатураСОстатками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	РеализованныеТоварыКомитентовСУчетомОстатка = ПолучитьПустуюТаблицуРеализованныеТоварыКомитентов();
	
	Для каждого СтрокаТоварыКомитента Из ТаблицаРеализованныеТоварыКомитентов Цикл
		// Если по товару уже отчитались, то корректировку стоимости без количества в реализованные товары комитента не пишем
		Если СтрокаТоварыКомитента.Количество = 0 
			И НоменклатураСОстатками.Найти(СтрокаТоварыКомитента.Номенклатура) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(РеализованныеТоварыКомитентовСУчетомОстатка.Добавить(), СтрокаТоварыКомитента);
	КонецЦикла; 
	
	Возврат РеализованныеТоварыКомитентовСУчетомОстатка;
КонецФункции
 

Функция ПодготовитьПараметрыВыручкиОтКорректировкиРеализации(ТаблицаТоварыУслуги, ТаблицаСписанныеТовары, ТаблицаТоварыКомитента, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация";           // <СправочникСсылка.Организации> - организация документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента,"
	+ "ДатаРеализации,"
	+ "ДокументРасчетов"
	;	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы списанных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	// Подготовка таблицы списанных товаров комитента:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"    
	+ "СинонимСписка,"
	+ "НомерСтроки,"  
	+ "СчетУчета,"    
	+ "Номенклатура," 
	+ "Склад,"        
	+ "Партия,"       
	+ "Себестоимость,"
	+ "Количество,"   
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение,"
	+ "СуммаСписания,"
	+ "СуммаСписанияНУ,"
	+ "СуммаСписанияПР,"
	+ "СуммаСписанияВР"
	;
	Параметры.Вставить("ТоварыКомитента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыКомитента, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ПЕРЕОЦЕНКА ТОВАРОВ В РОЗНИЦЕ

Процедура СформироватьДвиженияПереоценкаТоваровВРознице(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаТоваровВРознице(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	Период        = Реквизиты.Период;
	Организация   = Реквизиты.Организация;
	Подразделение = Реквизиты.Подразделение;
	ТаблицаТоваров          = Параметры.Товары;
	ТаблицаСписанныхТоваров = Параметры.СписанныеТовары;
	
	Отбор = Новый Структура("ТипСклада", Перечисления.ТипыСкладов.РозничныйМагазин);
	ТоварыНаРозничномСкладе = ТаблицаТоваров.НайтиСтроки(Отбор);
	Если ТоварыНаРозничномСкладе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТоварыНаРозничномСкладе Цикл
		
		Если БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТовара.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТовара.ИмяСписка, СтрокаТовара.НомерСтроки);
		СтрокиТаблицыСписанныхТоваров = ТаблицаСписанныхТоваров.НайтиСтроки(Отбор);
		
		Для каждого СтрокаПартии Из СтрокиТаблицыСписанныхТоваров Цикл
			
			УчетнаяСумма    = СтрокаПартии.СуммаСписания;
			СуммаПродажи    = СтрокаТовара.Сумма;
			СуммаПереоценки = Окр(СуммаПродажи * СтрокаПартии.Количество / СтрокаТовара.Количество, 2) - УчетнаяСумма;
		
			Если СуммаПереоценки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проводка по переоценке Дт 41 Кт 42.01
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка товаров в рознице";
			Проводка.Сумма       = СуммаПереоценки;
			
			Проводка.СчетДт = СтрокаТовара.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТовара.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       СтрокаПартии.Партия);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТовара.Склад);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СуммаПереоценки;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",       СтрокаТовара.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТовара.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",       СтрокаПартии.Партия);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммаПереоценки;
			КонецЕсли;
			
			// Проводка по списанию результата переоценки на тот же счет, куда списывается товар (Дт 90 Кт 41)
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка товаров в рознице";
			Проводка.Сумма       = СуммаПереоценки;
			
			Проводка.СчетДт = СтрокаТовара.КорСчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,                   СтрокаТовара.КорСубконтоСписания1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТовара.Номенклатура);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СуммаПереоценки;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТовара.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",       СтрокаТовара.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТовара.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",       СтрокаПартии.Партия);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммаПереоценки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПереоценкаТоваровВРознице(ТаблицаТовары, ТаблицаСписанныеТовары, Таблицареквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"           // <Регистратор...> - документ, записывающий движения в регистры
	+ "Подразделение,"         // <СправочникСсылка.ПодразделенияОрганизации> - 
	+ "Организация,"           // <СправочникСсылка.Организации> - организация документа
	+ "Склад,"
	+ "ТипСклада"
	;           
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "ТипСклада,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "КорСубконтоСписания1,"
	+ "Сумма"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "Партия,"
	+ "Количество,"
	+ "СуммаСписания"
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции


// СУММОВЫЕ РАЗНИЦЫ ПРИ РАСЧЕТАХ В УСЛОВНЫХ ЕДИНИЦАХ

Процедура СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(СуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(СуммовыеРазницы) ИЛИ Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Период      = Реквизиты.Период;
	Организация = Реквизиты.Организация;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСуммовыеРазницыРасчетыВУЕ(СуммовыеРазницы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Регистратор           = Реквизиты.Регистратор;
	НаправлениеДвижения   = Реквизиты.НаправлениеДвижения;
	РасчетыПоРеализации   = Реквизиты.РасчетыПоРеализации;
	
	ТаблицаСуммовыеРазницы = Параметры.ТаблицаСуммовыеРазницы;
	ТаблицаСуммовыеРазницы.Свернуть(
		"СчетРасчетов, ВалютаВзаиморасчетов, Подразделение, Контрагент, ДоговорКонтрагента, ДокументРасчетов, ДатаДокументаРасчетов",
		"Разница, НДС");
	
	СтатьяСуммовыхРазниц = Неопределено; // локальный кеш
	СчетДоходов          = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;	// 91.01
	СчетРасходов         = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;	// 91.02
	
	Множитель = ?(НаправлениеДвижения = "Поступление", 1, -1);
	
	Для каждого СтрокаРазницы Из ТаблицаСуммовыеРазницы Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Начислена суммовая разница";
		
		Проводка.Сумма = 0; // Суммовая разница отражается только в НУ
		
		Если РасчетыПоРеализации Тогда
			Если СтрокаРазницы.ДатаДокументаРасчетов >= '20111001' Тогда
				СуммоваяРазница = СтрокаРазницы.Разница * Множитель;
			Иначе	
				СуммоваяРазница = (СтрокаРазницы.Разница - СтрокаРазницы.НДС) * Множитель;
			КонецЕсли;
		Иначе
			СуммоваяРазница = СтрокаРазницы.Разница * Множитель;
		КонецЕсли;	
		
		Если СуммоваяРазница = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатьяСуммовыхРазниц = Неопределено Тогда
			СтатьяСуммовыхРазниц = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("СуммовыеРазницы");
		КонецЕсли;
		
		Если СуммоваяРазница > 0 Тогда
		
			Проводка.СчетДт = СтрокаРазницы.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетДт"], Проводка["СубконтоДт"],
				"Контрагенты", СтрокаРазницы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетДт"], Проводка["СубконтоДт"],
				"Договоры", СтрокаРазницы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетДт"], Проводка["СубконтоДт"],
				"ДокументыРасчетовСКонтрагентами", СтрокаРазницы.ДокументРасчетов);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = СтрокаРазницы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = 0;
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаРазницы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СчетДоходов;
			Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяСуммовыхРазниц;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаРазницы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммоваяРазница;
				Проводка.СуммаПРКт = -СуммоваяРазница;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
		
		ИначеЕсли СуммоваяРазница < 0 Тогда
		
			Проводка.СчетДт = СчетРасходов;
			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяСуммовыхРазниц;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаРазницы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаРазницы.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетКт"], Проводка["СубконтоКт"],
				"Контрагенты", СтрокаРазницы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетКт"], Проводка["СубконтоКт"],
				"Договоры", СтрокаРазницы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетКт"], Проводка["СубконтоКт"],
				"ДокументыРасчетовСКонтрагентами", СтрокаРазницы.ДокументРасчетов);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = СтрокаРазницы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = 0;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаРазницы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = -СуммоваяРазница;
				Проводка.СуммаПРДт = СуммоваяРазница;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыеРазницы, Таблицареквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"			// <СправочникСсылка.Организации> - по которой регистрируются движения 
	+ "НаправлениеДвижения,"	// <Строка> - "Выбытие" или "Поступление"
	+ "РасчетыПоРеализации"		// <Булвео> - признак расчетов по реализованыыми товарам (услугам)
	;           
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы суммовых разниц:
	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"			// <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"	// <СправочникСсылка.Валюты>
	+ "Подразделение,"			// <СправочникСсылка.ПодразделенияОрганизации>
	+ "Контрагент,"				// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"		// <Регистратор...>
	+ "ДатаДокументаРасчетов,"	// <Дата>
	+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС>
	+ "Разница,"				// <Число(15,2)> - Величина суммовой разницы
	+ "НДС"                     // <Число(15,2)> - Сумма НДС с суммовой разницы
	;
	Параметры.Вставить("ТаблицаСуммовыеРазницы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСуммовыеРазницы, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции


// РОЗНИЧНАЯ ВЫРУЧКА

Процедура СформироватьДвиженияРозничнаяВыручка(ТаблицаТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРозничнаяВыручка(ТаблицаТоварыУслуги, ТаблицаРеквизиты);
	ТаблицаДокумента = Параметры.ТоварыУслуги;
	Реквизиты 		= Параметры.Реквизиты[0];
	Период          = Реквизиты.Период;
	Организация     = Реквизиты.Организация;
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	Содержание 		= Реквизиты.Содержание;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	УчетПоПродажнойСтоимости = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		// Проводка по розничной выручке
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = Содержание;
		
		Проводка.СчетДт = СтрокаДокумента.СчетУчетаДенежныхСредств;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиДвиженияДенежныхСредств",  СтрокаДокумента.СтатьяДвиженияДенежныхСредств);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаДокумента.СуммаВзаиморасчетов;
		КонецЕсли;
							
		Проводка.СчетКт = СтрокаДокумента.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтавкиНДС",  СтрокаДокумента.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"НоменклатурныеГруппы", СтрокаДокумента.НоменклатурнаяГруппа);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаДокумента.СуммаРуб;
		
		Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаДокумента.СуммаРуб - СтрокаДокумента.СуммаНДСРуб;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
		
		// Проводка по списанию товаров со счета 41.12 при учете по продажной стоимости
			
		Если УчетПоПродажнойСтоимости Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			
			Проводка.СчетДт = СтрокаДокумента.СчетРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"НоменклатурныеГруппы", СтрокаДокумента.НоменклатурнаяГруппа);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтавкиНДС", СтрокаДокумента.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Склады", СтрокаДокумента.Склад);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаДокумента.Подразделение;
			КонецЕсли;
								
			Проводка.Сумма = СтрокаДокумента.СуммаРуб;
			
		КонецЕсли;
			
		// Проводка по выручке на вспомогательном счете РВ.1 при учете по стоимости приобретения
			
		Если НЕ УчетПоПродажнойСтоимости Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
			
			Проводка.СубконтоДт.Склады    = СтрокаДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаДокумента.СтавкаНДС;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДокумента.СуммаРуб;
			
		КонецЕсли;
			
		// Проводка по НДС на вспомогательном счете РВ.2 при учете по стоимости приобретения
			
		Если НЕ УчетПоПродажнойСтоимости 
			И СтрокаДокумента.СуммаНДСРуб > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
			
			Проводка.СубконтоДт.Склады    = СтрокаДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаДокумента.СтавкаНДС;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДокумента.СуммаНДСРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
			
КонецПроцедуры

Функция ПодготовитьПараметрыРозничнаяВыручка(ТаблицаТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата>
	+ "Регистратор,"           // <ДокументСсылка>
	+ "Организация,"           // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       // <СправочникСсылка.Валюты>
	+ "Содержание";            // <Строка> - содержание проводок
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Подразделение,"
	+ "Склад,"
	+ "СчетУчетаДенежныхСредств,"
	+ "СтатьяДвиженияДенежныхСредств,"
	+ "СтавкаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СчетДоходов,"
	+ "СчетРасходов,"
	+ "НоменклатурнаяГруппа"
	;
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРозничнаяВыручкаОплатаПлатежнойКартой(ТаблицаТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРозничнаяВыручкаОплатаПлатежнойКартой(ТаблицаТоварыУслуги, ТаблицаРеквизиты);
	ТаблицаДокумента = Параметры.ТоварыУслуги;
	Реквизиты 		= Параметры.Реквизиты[0];
	Период          = Реквизиты.Период;
	Организация     = Реквизиты.Организация;
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	Содержание 		= Реквизиты.Содержание;
	Регистратор		= Реквизиты.Регистратор;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	УчетПоПродажнойСтоимости = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	СвойстваСчетаРасчетыСРозничнымиПокупателями =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
			
	СвойстваСчетаУчетаТоваровВНТТ =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			
	СвойстваСчетаРВ_3 =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
			
	СвойстваСчетаРВ_4 =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН);
	
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		// Проводка по розничной выручке
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = Содержание;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Склады",  СтрокаДокумента.Склад);
		Если СвойстваСчетаРасчетыСРозничнымиПокупателями.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаРасчетыСРозничнымиПокупателями.Валютный Тогда
			Проводка.ВалютаДт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаДокумента.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете 
			И СвойстваСчетаРасчетыСРозничнымиПокупателями.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаДокумента.СуммаРуб;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = 0;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаДокумента.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтавкиНДС",  СтрокаДокумента.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"НоменклатурныеГруппы", СтрокаДокумента.НоменклатурнаяГруппа);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаДокумента.СуммаРуб;
		
		Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаДокумента.СуммаРуб - СтрокаДокумента.СуммаНДСРуб;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = Содержание;
		
		Проводка.СчетДт = СтрокаДокумента.СчетУчетаДенежныхСредств;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Контрагенты",  СтрокаДокумента.Эквайер);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Договоры",  СтрокаДокумента.ДоговорЭквайринга);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДокументыРасчетовСКонтрагентами",  Регистратор);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаДокумента.СуммаВзаиморасчетов;
		КонецЕсли;
							
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Склады",  СтрокаДокумента.Склад);
		Если СвойстваСчетаРасчетыСРозничнымиПокупателями.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаДокумента.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаДокумента.СуммаРуб;
		
		Если ОтражатьВНалоговомУчете И 
			СвойстваСчетаРасчетыСРозничнымиПокупателями.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаДокумента.СуммаРуб;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
		
		// Проводка по списанию товаров со счета 41.12 при учете по продажной стоимости
			
		Если УчетПоПродажнойСтоимости Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			
			Проводка.СчетДт = СтрокаДокумента.СчетРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"НоменклатурныеГруппы", СтрокаДокумента.НоменклатурнаяГруппа);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтавкиНДС", СтрокаДокумента.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Склады", СтрокаДокумента.Склад);
			Если СвойстваСчетаУчетаТоваровВНТТ.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаДокумента.Подразделение;
			КонецЕсли;
								
			Проводка.Сумма = СтрокаДокумента.СуммаРуб;
			
		КонецЕсли;
			
		// Проводка по выручке на вспомогательном счете РВ.3 при учете по стоимости приобретения
			
		Если НЕ УчетПоПродажнойСтоимости Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН;
			
			Проводка.СубконтоДт.Склады    = СтрокаДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаДокумента.СтавкаНДС;
			Если СвойстваСчетаРВ_3.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДокумента.СуммаРуб;
			
		КонецЕсли;
			
		// Проводка по НДС на вспомогательном счете РВ.4 при учете по стоимости приобретения
			
		Если НЕ УчетПоПродажнойСтоимости 
			И СтрокаДокумента.СуммаНДСРуб > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН;
			
			Проводка.СубконтоДт.Склады    = СтрокаДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаДокумента.СтавкаНДС;
			Если СвойстваСчетаРВ_4.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДокумента.СуммаНДСРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
			
КонецПроцедуры

Функция ПодготовитьПараметрыРозничнаяВыручкаОплатаПлатежнойКартой(ТаблицаТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата>
	+ "Регистратор,"           // <ДокументСсылка>
	+ "Организация,"           // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       // <СправочникСсылка.Валюты>
	+ "Содержание";            // <Строка> - содержание проводок
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Подразделение,"
	+ "Склад,"
	+ "СчетУчетаДенежныхСредств,"
	+ "Эквайер,"
	+ "ДоговорЭквайринга,"
	+ "СтавкаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СчетДоходов,"
	+ "СчетРасходов,"
	+ "НоменклатурнаяГруппа"
	;
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ПРОВЕДЕНИЕ ОТЧЕТА О РОЗНИЧНЫХ ПРОДАЖАХ

// Движения формируются для склада-НТТ при учете по стоимости приобретения
//
Процедура СформироватьДвиженияРаспределениеРозничнойВыручки(ТаблицаВыручки, ТаблицаРеквизиты, ОстаткиНераспределеннойВыручки,Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручки) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СуммаОплатыНаличными = Реквизиты.СуммаОплатыНаличными;
	Если СуммаОплатыНаличными <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Реквизиты.Организация;
	Период      = Реквизиты.Период;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор    = Реквизиты.Регистратор;
	Склад          = Реквизиты.Склад;
	Подразделение  = Реквизиты.Подразделение;
	СчетДоходов    = Реквизиты.СчетДоходов;
	НоменклатурнаяГруппаВыручки   = Реквизиты.НоменклатурнаяГруппаВыручки;
	СчетУчетаДенежныхСредств      = Реквизиты.СчетУчетаДенежныхСредств;
	СтатьяДвиженияДенежныхСредств = Реквизиты.СтатьяДвиженияДенежныхСредств;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	НераспределеннаяСумма = СуммаОплатыНаличными;
	
	// Проводки по сторнированию ранее отраженной с "предварительными" ставками НДС розничной выручки
	
	Для каждого СтрокаОстатка из ОстаткиНераспределеннойВыручки Цикл
		
		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаОстатка.СуммаРуб <= НераспределеннаяСумма Тогда
			РаспределеннаяСумма    = СтрокаОстатка.СуммаРуб;
			РаспределеннаяСуммаНДС = СтрокаОстатка.СуммаНДСРуб;
		Иначе
			РаспределеннаяСумма    = НераспределеннаяСумма;
			РаспределеннаяСуммаНДС = Окр(СтрокаОстатка.СуммаНДСРуб * НераспределеннаяСумма / СтрокаОстатка.СуммаРуб, 2);
		КонецЕсли;
		
		НераспределеннаяСумма = НераспределеннаяСумма - РаспределеннаяСумма;
		
		// Проводка по сторнированию розничной выручки 
		// Дт 50 Кт 90 сторно
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = -РаспределеннаяСумма;
		
		Проводка.СчетДт = СчетУчетаДенежныхСредств;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Склады", Склад);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"НоменклатурныеГруппы", НоменклатурнаяГруппаВыручки);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтавкиНДС", СтрокаОстатка.СтавкаНДС);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = -РаспределеннаяСумма;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = 0;
		КонецЕсли;
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = -(РаспределеннаяСумма - РаспределеннаяСуммаНДС);
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
		
		// Проводка по сторнированию нераспределенной розничной выручки 
		// Дт РВ.1 или РВ.3 сторно
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = -РаспределеннаяСумма;
		
		Проводка.СчетДт = ?(СтрокаОстатка.НаличнаяВыручка, ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка, ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
		Проводка.СубконтоДт.Склады    = Склад;
		Проводка.СубконтоДт.СтавкиНДС = СтрокаОстатка.СтавкаНДС;
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		
		// Проводка по сторнированию НДС от розничной выручки 
		// Дт 90.03 Кт 68.02 сторно
		
		Если РаспределеннаяСуммаНДС > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = -РаспределеннаяСуммаНДС;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"СтавкиНДС", СтрокаОстатка.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Подразделение;
			КонецЕсли;
			
		КонецЕсли;
	
		// Проводка по сторнированию нераспределенного НДС от розничной выручки 
		// Дт РВ.2 или РВ.4 сторно
		
		Если РаспределеннаяСуммаНДС > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = -РаспределеннаяСуммаНДС;
			
			Проводка.СчетДт = ?(СтрокаОстатка.НаличнаяВыручка, ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке, ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН);
			Проводка.СубконтоДт.Склады    = Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаОстатка.СтавкаНДС;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Подразделение;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Перераспределение выручки по вспомогательным счетам РВ.1, РВ.2 согласно фактическим ставкам НДС
	
	НераспределеннаяСумма = СуммаОплатыНаличными;
	
	Для каждого СтрокаВыручки из ТаблицаВыручки Цикл
		
		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаВыручки.СуммаРуб <= НераспределеннаяСумма Тогда
			РаспределеннаяСумма    = СтрокаВыручки.СуммаРуб;
			РаспределеннаяСуммаНДС = СтрокаВыручки.СуммаНДСРуб;
		Иначе
			РаспределеннаяСумма    = НераспределеннаяСумма;
			РаспределеннаяСуммаНДС = Окр(СтрокаВыручки.СуммаНДСРуб * НераспределеннаяСумма / СтрокаВыручки.СуммаРуб, 2);
		КонецЕсли;
		
		НераспределеннаяСумма = НераспределеннаяСумма - РаспределеннаяСумма;
		
		// Проводка по поступлению нераспределенной розничной выручки
		// Дт РВ.1
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = РаспределеннаяСумма;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
		Проводка.СубконтоДт.Склады    = Склад;
		Проводка.СубконтоДт.СтавкиНДС = СтрокаВыручки.СтавкаНДС;
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		
		// Проводка по распределению выручки
		// Кт РВ.1
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = РаспределеннаяСумма;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
		Проводка.СубконтоКт.Склады    = Склад;
		Проводка.СубконтоКт.СтавкиНДС = СтрокаВыручки.СтавкаНДС;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Подразделение;
		КонецЕсли;
		
		// Проводка по поступлению нераспределенного НДС от розничной выручки 
		// Дт РВ.2
		
		Если РаспределеннаяСуммаНДС > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = РаспределеннаяСуммаНДС;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
			Проводка.СубконтоДт.Склады    = Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаВыручки.СтавкаНДС;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Подразделение;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводка по распределению НДС от розничной выручки 
		// Кт РВ.2
		
		Если РаспределеннаяСуммаНДС > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = РаспределеннаяСуммаНДС;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
			Проводка.СубконтоКт.Склады    = Склад;
			Проводка.СубконтоКт.СтавкиНДС = СтрокаВыручки.СтавкаНДС;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Подразделение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
		
КонецПроцедуры

// Возвращает структуру таблиц по выручке для распределения Отчетом о розничных продажах
// При учете в ценах покупки - возвращает только сводную таблицу остатков нераспределенной выручки на счетах РВ
// При учете по продажным ценам и применении спец. режимов - дополнительно формируется детализированная таблица выручки за месяц
// по документам платежа и даными отражения в НУ
Функция ПодготовитьТаблицыВыручкиЗаМесяц(ТаблицаРеквизиты, Отказ) Экспорт
	
	Перем ТаблицаВыручкиЗаМесяц, ТаблицаВыручкиПоДокументамПлатежа;
	
	СтруктураТаблицВыручки = Новый Структура("ТаблицаВыручкиЗаМесяц, ТаблицаВыручкиПоДокументамПлатежа",
											  ТаблицаВыручкиЗаМесяц, ТаблицаВыручкиПоДокументамПлатежа);
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат СтруктураТаблицВыручки;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Организация = Реквизиты.Организация;
	Период      = Реквизиты.Период;
	Регистратор = Реквизиты.Регистратор;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "ТипСклада") <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Возврат СтруктураТаблицВыручки;
	КонецЕсли; 
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	УчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	СуммаДокумента = Реквизиты.СуммаОплатыНаличными;
	
	Если УчетВПродажныхЦенах Тогда
		ТаблицаВыручкиПоДокументамПлатежа = ПолучитьТаблицуРозничнойВыручкиПоПоступлениямЗаМесяц(Реквизиты);
		ТаблицаВыручкиЗаМесяц = ТаблицаВыручкиПоДокументамПлатежа.Скопировать();
		ТаблицаВыручкиЗаМесяц.Свернуть("СтавкаНДС, НаличнаяВыручка", "СуммаРуб, СуммаНДСРуб");
	Иначе
		ТаблицаВыручкиЗаМесяц = ПолучитьОстаткиНераспределеннойРозничнойВыручки(Реквизиты);
	КонецЕсли;
	
	ОстатокНераспределеннойВыручки = ТаблицаВыручкиЗаМесяц.Итог("СуммаРуб");
	Если ОстатокНераспределеннойВыручки < СуммаДокумента Тогда
		ТекстОшибки = НСтр("ru = 'Доступной розничной выручки для продаж: %1, требуется: %2.
			|Недостающая выручка должна быть сначала оприходована документом Поступление наличных'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			ОстатокНераспределеннойВыручки,
			СуммаДокумента);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Регистратор, , , Отказ);
	КонецЕсли;
	
	СтруктураТаблицВыручки.Вставить("ТаблицаВыручкиЗаМесяц",			 ТаблицаВыручкиЗаМесяц);
	СтруктураТаблицВыручки.Вставить("ТаблицаВыручкиПоДокументамПлатежа", ТаблицаВыручкиПоДокументамПлатежа);
	
	Возврат СтруктураТаблицВыручки;
	
КонецФункции

Функция ПодготовитьТаблицуОплаченнойВыручкиЗаМесяц(ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц, ТаблицаНеоплаченнойБезналичнойВыручки, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручкиЗаМесяц)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если НЕ Реквизиты.ПрименяетсяУСН И НЕ Реквизиты.ПрименяетсяУСНПатент Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = Реквизиты.Организация;
	Период      = Реквизиты.Период;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаНеоплаченнойБезналичнойВыручки) Тогда
		// Вся выручка за месяц оплачена
		Возврат ТаблицаВыручкиЗаМесяц;
	КонецЕсли;
	
	ТаблицаНеоплаченнойБезналичнойВыручки.Индексы.Добавить("РасчетныйДокумент");
	
	// при учете в продажных ценах сформируем таблицу отражения в НУ оплаченной выручки для сторно записей КУДиР
	ТаблицаОплаченнойВыручки = ТаблицаВыручкиЗаМесяц.СкопироватьКолонки();
	
	Для каждого СтрокаВыручки Из ТаблицаВыручкиЗаМесяц Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("РасчетныйДокумент", СтрокаВыручки.ДокументПлатежа);
		
		НайденныеСтроки = ТаблицаНеоплаченнойБезналичнойВыручки.НайтиСтроки(ОтборСтрок);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// строка выручки полностью оплачена, просто копируем
			НоваяСтрокаОплаченнойВыручки = ТаблицаОплаченнойВыручки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаченнойВыручки, СтрокаВыручки);
		Иначе
			
			НеоплаченныйОстаток = 0;
			
			Для каждого СтрокаБезналичнойВыручки Из НайденныеСтроки Цикл
				НеоплаченныйОстаток = НеоплаченныйОстаток + СтрокаБезналичнойВыручки.СуммаОстаток;
			КонецЦикла;
			
			Если НеоплаченныйОстаток < СтрокаВыручки.СуммаРуб Тогда
				
				// строка выручки оплачена частично, копируем с пропорциональным уменьшением сумм
				НоваяСтрокаОплаченнойВыручки = ТаблицаОплаченнойВыручки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаченнойВыручки, СтрокаВыручки);
				
				ОплаченныйОстаток = СтрокаВыручки.СуммаРуб - НеоплаченныйОстаток;
				КоэффОплаты       = ОплаченныйОстаток / СтрокаВыручки.СуммаРуб;
				
				НоваяСтрокаОплаченнойВыручки.СуммаРуб             = ОплаченныйОстаток;
				НоваяСтрокаОплаченнойВыручки.СуммаРубЕНВД         = Окр(СтрокаВыручки.СуммаРубЕНВД * КоэффОплаты, 2);
				НоваяСтрокаОплаченнойВыручки.СуммаРубКомитент     = Окр(СтрокаВыручки.СуммаРубКомитент * КоэффОплаты, 2);
				НоваяСтрокаОплаченнойВыручки.СуммаРубТорговыйСбор = Окр(СтрокаВыручки.СуммаРубТорговыйСбор * КоэффОплаты, 2);
				НоваяСтрокаОплаченнойВыручки.СуммаРубПатент       = Окр(СтрокаВыручки.СуммаРубПатент * КоэффОплаты, 2);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОплаченнойВыручки;
	
КонецФункции

// Таблица остатков по счетам РВ.1, РВ.2, РВ.3, РВ.4 формируется для склада-НТТ при учете по стоимости приобретения
//
Функция ПолучитьОстаткиНераспределеннойРозничнойВыручки(СтруктураПараметров)

	Организация   = СтруктураПараметров.Организация;
	Период        = СтруктураПараметров.Период;
	Регистратор   = СтруктураПараметров.Регистратор;
	Склад         = СтруктураПараметров.Склад;
	Подразделение = СтруктураПараметров.Подразделение;
	
	ЗначенияБлокировки = Новый ТаблицаЗначений;
	ЗначенияБлокировки.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ЗначениеБлокировки = ЗначенияБлокировки.Добавить();
	ЗначениеБлокировки.Счет = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;   // РВ.1
	ЗначениеБлокировки = ЗначенияБлокировки.Добавить();
	ЗначениеБлокировки.Счет = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;               // РВ.2
	ЗначениеБлокировки = ЗначенияБлокировки.Добавить();
	ЗначениеБлокировки.Счет = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН; // РВ.3
	ЗначениеБлокировки = ЗначенияБлокировки.Добавить();
	ЗначениеБлокировки.Счет = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН;             // РВ.4
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
	ЭлементБлокировки.УстановитьЗначение("Организация",   Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",        Новый Диапазон(, Период));
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, Склад);
	ЭлементБлокировки.ИсточникДанных = ЗначенияБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
	Блокировка.Заблокировать();

	Запрос = Новый Запрос();
	
	МоментВремениОстатков = Новый МоментВремени(Период, Регистратор);
	Запрос.УстановитьПараметр("МоментВремениОстатков", МоментВремениОстатков);
	Запрос.УстановитьПараметр("Склад"      , Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение",  Подразделение);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СписокСчетовУчетаРозничнойВыручки = Новый Массив;
	СписокСчетовУчетаРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка);
	СписокСчетовУчетаРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
	Запрос.УстановитьПараметр("СписокСчетовУчетаРозничнойВыручки", СписокСчетовУчетаРозничнойВыручки);
	
	СписокСчетовУчетаНДСРозничнойВыручки = Новый Массив;
	СписокСчетовУчетаНДСРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке);
	СписокСчетовУчетаНДСРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН);
	Запрос.УстановитьПараметр("СписокСчетовУчетаНДСРозничнойВыручки", СписокСчетовУчетаНДСРозничнойВыручки);
	
	СписокСчетовУчетаБезналичнойРозничнойВыручки = Новый Массив;
	СписокСчетовУчетаБезналичнойРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
	СписокСчетовУчетаБезналичнойРозничнойВыручки.Добавить(ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручкеБН);
	Запрос.УстановитьПараметр("СписокСчетовУчетаБезналичнойРозничнойВыручки", СписокСчетовУчетаБезналичнойРозничнойВыручки);
	
	СчетаУчетаРозничнойВыручки = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РозничнаяВыручка);
	Запрос.УстановитьПараметр("СчетаУчетаРозничнойВыручки", СчетаУчетаРозничнойВыручки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Остатки.Счет В (&СписокСчетовУчетаБезналичнойРозничнойВыручки)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличнаяВыручка,
	|	Остатки.Субконто1 КАК Склад,
	|	Остатки.Субконто2 КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА Остатки.Счет В (&СписокСчетовУчетаРозничнойВыручки)
	|				ТОГДА Остатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРуб,
	|	СУММА(ВЫБОР
	|			КОГДА Остатки.Счет В (&СписокСчетовУчетаНДСРозничнойВыручки)
	|				ТОГДА Остатки.СуммаОстатокДт
	|			ИНАЧЕ 0 
	|		КОНЕЦ) КАК СуммаНДСРуб
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениОстатков,
	|			Счет В (&СчетаУчетаРозничнойВыручки),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 = &Склад) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Остатки.Счет В (&СписокСчетовУчетаБезналичнойРозничнойВыручки)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Остатки.Субконто1,
	|	Остатки.Субконто2
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;

КонецФункции

// Таблица формируется при продаже товаров комитентов со склада-НТТ при учете по продажной стоимости
//
Функция ПодготовитьТаблицуСторноВыручкиНТТ(ТаблицаДокумента, ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц, Отказ) Экспорт
	
	Если ТаблицаДокумента = Неопределено Тогда
		ТаблицаСторно = Новый ТаблицаЗначений;
		ТаблицаСторно.Колонки.Добавить("СтавкаНДС", 	Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаСторно.Колонки.Добавить("СуммаРуб", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаСторно.Колонки.Добавить("СуммаНДСРуб", 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаСторно.Колонки.Добавить("СчетДоходов",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаСторно.Колонки.Добавить("СчетРасходов",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Возврат ТаблицаСторно;
	КонецЕсли;
	
	//ТаблицаДокумента = СтруктураПараметров.ТаблицаВыручки;
	ТаблицаСторно    = ТаблицаДокумента.СкопироватьКолонки();
	ТаблицаСторно.Колонки.Добавить("СчетДоходов",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСторно.Колонки.Добавить("СчетРасходов",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат ТаблицаСторно;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СуммаОплатыНаличными = Реквизиты.СуммаОплатыНаличными;
	Если СуммаОплатыНаличными <= 0 Тогда
		Возврат ТаблицаСторно;
	КонецЕсли;
	
	Организация    = Реквизиты.Организация;
	Период         = Реквизиты.Период;
	Регистратор    = Реквизиты.Регистратор;
	СчетДоходов    = Реквизиты.СчетДоходов;
	СчетРасходов   = Реквизиты.СчетРасходов;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат ТаблицаСторно;
	КонецЕсли;
	
	ОтражатьВНалоговомУчете         = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	ТаблицаДокумента = ТаблицаДокумента.Скопировать();
	МассивСумм = ТаблицаДокумента.ВыгрузитьКолонку("СуммаРуб");
	МассивОплатНаличными = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаОплатыНаличными, МассивСумм);
	ТаблицаДокумента.ЗагрузитьКолонку(МассивОплатНаличными, "СуммаРуб");
	ТаблицаВыручкиЗаМесяц.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1,0));
	
	Для каждого СтрокаДокумента из ТаблицаДокумента Цикл
		
		Для каждого СтрокаВыручки из ТаблицаВыручкиЗаМесяц Цикл
			Если СтрокаВыручки.СтавкаНДС = СтрокаДокумента.СтавкаНДС Тогда
				СтрокаВыручки.Приоритет = 1;
			Иначе
				СтрокаВыручки.Приоритет = 2;
			КонецЕсли;
		КонецЦикла;
		ТаблицаВыручкиЗаМесяц.Сортировать("Приоритет, СтавкаНДС", Новый СравнениеЗначений);
		
		НераспределеннаяСумма = СтрокаДокумента.СуммаРуб;
		НераспределеннаяСуммаНДС = СтрокаДокумента.СуммаНДСРуб;
		
		Для каждого СтрокаВыручки из ТаблицаВыручкиЗаМесяц Цикл
			
			Если НераспределеннаяСумма <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаВыручки.СуммаРуб <= НераспределеннаяСумма Тогда
				РаспределеннаяСумма    = СтрокаВыручки.СуммаРуб;
				РаспределеннаяСуммаНДС = Мин(СтрокаВыручки.СуммаНДСРуб, НераспределеннаяСуммаНДС);
			Иначе
				РаспределеннаяСумма    = НераспределеннаяСумма;
				РаспределеннаяСуммаНДС = НераспределеннаяСуммаНДС;
			КонецЕсли;
			
			СтрокаСторно = ТаблицаСторно.Добавить();
			СтрокаСторно.СтавкаНДС   = СтрокаВыручки.СтавкаНДС;
			СтрокаСторно.СуммаРуб    = -РаспределеннаяСумма;
			СтрокаСторно.СуммаНДСРуб = -РаспределеннаяСуммаНДС;
			
			НераспределеннаяСумма     = НераспределеннаяСумма - РаспределеннаяСумма;
			НераспределеннаяСуммаНДС  = НераспределеннаяСуммаНДС - РаспределеннаяСуммаНДС;
			СтрокаВыручки.СуммаРуб    = СтрокаВыручки.СуммаРуб - РаспределеннаяСумма;
			СтрокаВыручки.СуммаНДСРуб = СтрокаВыручки.СуммаНДСРуб - РаспределеннаяСуммаНДС;
			
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаСторно.ЗаполнитьЗначения(СчетДоходов,  "СчетДоходов");
	ТаблицаСторно.ЗаполнитьЗначения(СчетРасходов, "СчетРасходов");
	
	Возврат ТаблицаСторно;
	
КонецФункции

// Движения формируются при продаже товаров комитентов со склада-НТТ при учете по продажной стоимости
//
Процедура СформироватьДвиженияСторноРозничнойВыручки(ТаблицаСторноВыручки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСторноВыручки) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация    = Реквизиты.Организация;
	Период         = Реквизиты.Период;
	Склад          = Реквизиты.Склад;
	Подразделение  = Реквизиты.Подразделение;
	Регистратор    = Реквизиты.Регистратор;
	НоменклатурнаяГруппаВыручки   = Реквизиты.НоменклатурнаяГруппаВыручки;
	СчетУчетаДенежныхСредств      = Реквизиты.СчетУчетаДенежныхСредств;
	СтатьяДвиженияДенежныхСредств = Реквизиты.СтатьяДвиженияДенежныхСредств;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	// Проводки по сторнированию ранее отраженной розничной выручки
	
	Для каждого СтрокаСторно из ТаблицаСторноВыручки Цикл
		
		// Проводка по сторнированию розничной выручки 
		// Дт 50 Кт 90 сторно
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = СтрокаСторно.СуммаРуб;
		
		Проводка.СчетДт = СчетУчетаДенежныхСредств;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Склады", Склад);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаСторно.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтавкиНДС", СтрокаСторно.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"НоменклатурныеГруппы", НоменклатурнаяГруппаВыручки);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаСторно.СуммаРуб;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = 0;
		КонецЕсли;
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаСторно.СуммаРуб - СтрокаСторно.СуммаНДСРуб;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;
		
		// Проводка по сторнированию списания товаров по продажной стоимости
		// Дт 90 Кт 41.12 сторно
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Реализация товаров в розницу";
		Проводка.Сумма       = СтрокаСторно.СуммаРуб;
		
		Проводка.СчетДт = СтрокаСторно.СчетРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"НоменклатурныеГруппы", НоменклатурнаяГруппаВыручки);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Склады", Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтавкиНДС", СтрокаСторно.СтавкаНДС);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Подразделение;
		КонецЕсли;
				
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Движения формируются при продаже товаров комитентов со склада-НТТ при учете по продажной стоимости
//
Процедура СформироватьДвиженияНДССторноРозничнойВыручки(ТаблицаСторноВыручки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если  ТаблицаСторноВыручки = Неопределено ИЛИ ТаблицаСторноВыручки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация    = Реквизиты.Организация;
	Период         = Реквизиты.Период;
	Регистратор    = Реквизиты.Регистратор;
		
	// Движения регистра НДСЗаписиКнигиПродаж по сторнированию ранее отраженной розничной выручки
	
	Для каждого СтрокаСторно из ТаблицаСторноВыручки Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		
		Движение.Период      = Период;
		Движение.Организация = Организация;
		Движение.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		Движение.СчетФактура = Регистратор;
		Движение.СтавкаНДС   = СтрокаСторно.СтавкаНДС;
		Движение.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
		Движение.ДатаСобытия = Период;
		Движение.СуммаБезНДС = СтрокаСторно.СуммаРуб - СтрокаСторно.СуммаНДСРуб;
		Движение.НДС         = СтрокаСторно.СуммаНДСРуб;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
		
КонецПроцедуры

// Таблицы формируется при продаже со склада-НТТ при учете по продажной стоимости
//
Функция ПолучитьТаблицуРозничнойВыручкиПоПоступлениямЗаМесяц(СтруктураПараметров)
	
	Организация   = СтруктураПараметров.Организация;
	Период        = СтруктураПараметров.Период;
	Склад         = СтруктураПараметров.Склад;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНачала",  НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",   Период);
	Запрос.УстановитьПараметр("Склад",       Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ПрименяетсяУСН		 = СтруктураПараметров.ПрименяетсяУСН;
	ПрименяетсяУСНПатент = СтруктураПараметров.ПрименяетсяУСНПатент;
	
	Если ПрименяетсяУСН ИЛИ ПрименяетсяУСНПатент Тогда
		
		Запрос.УстановитьПараметр("ПрименяетсяУСНПатент", ПрименяетсяУСНПатент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СтавкаНДС КАК СтавкаНДС,
		|	ПриходныйКассовыйОрдер.СуммаПлатежа КАК СуммаРуб,
		|	ПриходныйКассовыйОрдер.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА ПриходныйКассовыйОрдер.Ссылка.ДоходыЕНВД_УСН
		|				И (НЕ &ПрименяетсяУСНПатент
		|					ИЛИ НЕ ПриходныйКассовыйОрдер.Ссылка.ДеятельностьНаПатенте)
		|			ТОГДА ПриходныйКассовыйОрдер.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРубЕНВД,
		|	0 КАК СуммаРубКомитент,
		|	ВЫБОР
		|		КОГДА ПриходныйКассовыйОрдер.Ссылка.ДеятельностьНаТорговомСборе
		|			ТОГДА ПриходныйКассовыйОрдер.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРубТорговыйСбор,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНПатент
		|				И ПриходныйКассовыйОрдер.Ссылка.ДеятельностьНаПатенте
		|				И НЕ ПриходныйКассовыйОрдер.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ПриходныйКассовыйОрдер.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРубПатент,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНПатент
		|				И ПриходныйКассовыйОрдер.Ссылка.ДеятельностьНаПатенте
		|				И НЕ ПриходныйКассовыйОрдер.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ПриходныйКассовыйОрдер.Ссылка.Патент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Патент,
		|	ИСТИНА КАК НаличнаяВыручка,
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументПлатежа,
		|	ПриходныйКассовыйОрдер.Ссылка.Дата КАК ДокументПлатежаДата
		|ПОМЕСТИТЬ ТаблицаРозничнойВыручки
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ПриходныйКассовыйОрдер.Ссылка.Организация = &Организация
		|	И ПриходныйКассовыйОрдер.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
		|	И ПриходныйКассовыйОрдер.Ссылка.ВыручкаСНТТ
		|	И ПриходныйКассовыйОрдер.Ссылка.Контрагент = &Склад
		|	И ПриходныйКассовыйОрдер.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ДоходыЕНВД_УСН
		|				И (НЕ &ПрименяетсяУСНПатент
		|					ИЛИ НЕ ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ДеятельностьНаПатенте)
		|			ТОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	ВЫБОР
		|		КОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ДеятельностьНаТорговомСборе
		|			ТОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНПатент
		|				И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ДеятельностьНаПатенте
		|				И НЕ ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНПатент
		|				И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ДеятельностьНаПатенте
		|				И НЕ ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Патент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата
		|ИЗ
		|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
		|ГДЕ
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент = &Склад
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРозничнойВыручки.СтавкаНДС,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаНДСРуб) КАК СуммаНДСРуб,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРубЕНВД) КАК СуммаРубЕНВД,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРубКомитент) КАК СуммаРубКомитент,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРубТорговыйСбор) КАК СуммаРубТорговыйСбор,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРубПатент) КАК СуммаРубПатент,
		|	ТаблицаРозничнойВыручки.Патент,
		|	ТаблицаРозничнойВыручки.НаличнаяВыручка,
		|	ТаблицаРозничнойВыручки.ДокументПлатежа КАК ДокументПлатежа,
		|	ТаблицаРозничнойВыручки.ДокументПлатежаДата КАК ДокументПлатежаДата
		|ИЗ
		|	ТаблицаРозничнойВыручки КАК ТаблицаРозничнойВыручки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРозничнойВыручки.ДокументПлатежаДата,
		|	ТаблицаРозничнойВыручки.ДокументПлатежа,
		|	ТаблицаРозничнойВыручки.НаличнаяВыручка,
		|	ТаблицаРозничнойВыручки.СтавкаНДС,
		|	ТаблицаРозничнойВыручки.Патент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументПлатежаДата,
		|	ДокументПлатежа";
		
		ТаблицаВыручки = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СтавкаНДС КАК СтавкаНДС,
		|	ПриходныйКассовыйОрдер.СуммаПлатежа КАК СуммаРуб,
		|	ПриходныйКассовыйОрдер.СуммаНДС КАК СуммаНДСРуб,
		|	ИСТИНА КАК НаличнаяВыручка
		|ПОМЕСТИТЬ ТаблицаРозничнойВыручки
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ПриходныйКассовыйОрдер.Ссылка.Организация = &Организация
		|	И ПриходныйКассовыйОрдер.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
		|	И ПриходныйКассовыйОрдер.Ссылка.ВыручкаСНТТ
		|	И ПриходныйКассовыйОрдер.Ссылка.Контрагент = &Склад
		|	И ПриходныйКассовыйОрдер.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа,
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаНДС,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
		|ГДЕ
		|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент = &Склад
		|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРозничнойВыручки.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРозничнойВыручки.НаличнаяВыручка,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ТаблицаРозничнойВыручки.СуммаНДСРуб) КАК СуммаНДСРуб,
		|	0 КАК СуммаРубЕНВД,
		|	0 КАК СуммаРубКомитент,
		|	0 КАК СуммаРубТорговыйСбор,
		|	0 КАК СуммаРубПатент,
		|	НЕОПРЕДЕЛЕНО КАК Патент,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПлатежа,
		|	НЕОПРЕДЕЛЕНО КАК ДокументПлатежаДата
		|ИЗ
		|	ТаблицаРозничнойВыручки КАК ТаблицаРозничнойВыручки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРозничнойВыручки.СтавкаНДС,
		|	ТаблицаРозничнойВыручки.НаличнаяВыручка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтавкаНДС";
		
	КонецЕсли;
	
	ТаблицаВыручки = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыручки;

КонецФункции


// СПИСАНИЕ ТОВАРОВ КОМИТЕНТОВ

Функция ПодготовитьТаблицуСписанныхТоваровКомитентов(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
			Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписанныхТоваровКомитентов(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0]; 
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Выделение сумм по комиссионным товарам
	ТаблицаСписанныеТоварыКомитентов = Параметры.СписанныеТовары.СкопироватьКолонки(
		"Подразделение,Номенклатура,Партия,Количество,СуммаСписания,Комитент,ДоговорКомиссии,СчетАвансовСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,СуммаРасчетовСКомитентом");
	Для каждого СтрокаТаблицы Из ТаблицаСписанныеТовары Цикл
		Если БухгалтерскийУчетПовтИсп.СчетУчетаКомиссионногоТовара(СтрокаТаблицы.СчетУчета) Тогда
			НоваяСтрока = ТаблицаСписанныеТоварыКомитентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТаблицаСписанныеТоварыКомитентов.Колонки.СуммаСписания.Имя = "СуммаРуб";
	
	БухгалтерскийУчетПереопределяемый.ЗаполнитьПараметрыПартийТоваровКомитентов(ТаблицаСписанныеТоварыКомитентов, Реквизиты, Отказ);
	
	// Расчет валютной суммы
	Для каждого СтрокаТаблицы Из ТаблицаСписанныеТоварыКомитентов Цикл
		
		Если СтрокаТаблицы.ВалютаРасчетовСКомитентом = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаРасчетовСКомитентом = СтрокаТаблицы.СуммаРуб;
		Иначе
			ДанныеОВалютеРасчетовСКомитентом 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом, Реквизиты.Период);
			СтрокаТаблицы.СуммаРасчетовСКомитентом 	= РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаРуб,
																		ВалютаРегламентированногоУчета,
																		СтрокаТаблицы.ВалютаРасчетовСКомитентом,
																		1, ДанныеОВалютеРасчетовСКомитентом.Курс,
																		1, ДанныеОВалютеРасчетовСКомитентом.Кратность);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанныеТоварыКомитентов.Свернуть("Подразделение, Комитент, ДоговорКомиссии, СчетАвансовСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, Номенклатура",
		"Количество, СуммаРуб, СуммаРасчетовСКомитентом");
		
	Возврат ТаблицаСписанныеТоварыКомитентов;		
	
КонецФункции

Функция ПодготовитьПараметрыСписанныхТоваровКомитентов(ТаблицаСписанныеТовары, Таблицареквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"            // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация"           // <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Комитент," 					//	<СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии," 			//	<СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СчетАвансовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов по авансам
	+ "СчетРасчетовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов
	+ "ВалютаРасчетовСКомитентом,"	//	<СправочникСсылка.Валюты> - валюта взаиморасчетов по договору комиссии
	+ "СуммаРасчетовСКомитентом,"	//	<Число(15,2)> - выручка (сумма отгрузки)
	+ "СчетУчета,"					// 	<ПланСчетовСсылка.Хозрасчетный> - счет учета остатков товара
	+ "Подразделение," 				//	<Ссылка на справочник подразделений> - 
	+ "Номенклатура," 				//	<СправочникСсылка.Номенклатура> - реализуемые товары и услуги
	+ "Партия," 					// 	<Регистратор...> - партия, по которой учитывается реализуемый товар
	+ "Количество," 				//	<Число(14,3)> - кол-во реализованного товара
	+ "СуммаСписания"				//	<Число(15,2)> - выручка (сумма отгрузки)
	;
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровКомитентовВыручка(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов)
			Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровКомитентовВыручка(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблица Из Параметры.ТаблицаТоварыУслугиКомитентов Цикл
		
		Движение = Движения.РеализованныеТоварыКомитентов.Добавить();
		Движение.Активность         = Истина;
		Движение.Период             = Реквизиты.Период;
		Движение.Организация        = Реквизиты.Организация;
		Движение.Контрагент         = СтрокаТаблица.Комитент;
		Движение.ДоговорКонтрагента = СтрокаТаблица.ДоговорКомиссии;
		Движение.Номенклатура       = СтрокаТаблица.Номенклатура;
		Движение.Количество         = СтрокаТаблица.Количество;
		Движение.Выручка            = 0;
		Движение.СуммаПоступления   = СтрокаТаблица.СуммаРасчетовСКомитентом;
		
	КонецЦикла;
	
	Движения.РеализованныеТоварыКомитентов.Записывать = Истина;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаВыручка = ТаблицаТоварыУслугиКомитентов.Скопировать();
	ТаблицаВыручка.Свернуть("Комитент, ДоговорКомиссии, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом", "СуммаРуб, СуммаРасчетовСКомитентом");
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручка Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаРуб;
		
		СодержаниеПроводки = "Списание %1";
		СодержаниеПроводки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СодержаниеПроводки, Реквизиты.Основание);
		Проводка.Содержание = СодержаниеПроводки;

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТаблицы.ДоговорКомиссии);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаРасчетовСКомитентом;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
		
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровКомитентовВыручка(ТаблицаТоварыУслугиКомитентов, Таблицареквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"   // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"   // <СправочникСсылка.Организации> - организация документа
	+ "Подразделение," // <Ссылка на справочник подразделений> - 
	+ "Основание"      // <ДокументСсылка....> - документ - основание
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Комитент," 					//	<СправочникСсылка.Контрагенты> - владелец проданного товара (услуги)
	+ "ДоговорКомиссии," 			//	<СправочникСсылка.ДоговорыКонтрагентов> - договор комиссии
	+ "СчетАвансовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов по авансам
	+ "СчетРасчетовСКомитентом," 	//	<ПланСчетовСсылка.Хозрасчетный> - учет расчетов
	+ "ВалютаРасчетовСКомитентом,"	//	<СправочникСсылка.Валюты> - валюта взаиморасчетов по договору комиссии
	+ "Подразделение," 				//	<Ссылка на справочник подразделений> - по которому ведется учет
	+ "Номенклатура," 				//	<СправочникСсылка.Номенклатура> - реализуемые товары и услуги
	+ "Количество," 				//	<Число(14,3)> - кол-во реализованного товара
	+ "СуммаРуб," 					//	<Число(15,2)> - выручка (сумма отгрузки)
	+ "СуммаРасчетовСКомитентом," 	//	<Число(15,2)> - выручка (сумма отгрузки)
	;
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ УСЛУГ

Процедура СформироватьДвиженияПоступлениеУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаУслуги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеУслуг(ТаблицаУслуги, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
				
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
			
			СуммаПР = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
			
			ЭтоНеПринимаемыйРасходНУ = НалоговыйУчет.ЭтоНепринимаемыйРасходНУ(СтрокаТаблицы.СубконтоНУ1, 
				СтрокаТаблицы.СубконтоНУ2, СтрокаТаблицы.СубконтоНУ3);
			
			Если ЭтоНеПринимаемыйРасходНУ Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = 0;
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ;
					Проводка.СуммаВРДт = 0;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаПРКт = СуммаПР;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СчетЗатратНУ = Проводка.СчетДт Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаПРДт = СуммаПР;
					Проводка.СуммаВРДт = 0;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаПРКт = СуммаПР;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
				
			Иначе
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = 0;
					Проводка.СуммаПРДт = СуммаПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаПРКт = СуммаПР;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СтрокаТаблицы.Содержание;
				Проводка.Сумма       = 0;
				
				Проводка.СчетДт = СтрокаТаблицы.СчетЗатратНУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТаблицы.КорСчет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Реквизиты.Подразделение;
				КонецЕсли;
				
				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				КонецЕсли;
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаПРДт = 0;
					Проводка.СуммаВРДт = -СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = 0;
					Проводка.СуммаПРКт = 0;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли;

	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеУслуг(ТаблицаУслуги, Таблицареквизиты)

	//ОтПодотчетногоЛица
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"             // <ДокументСсылка> - документ, записывающий движения в регистры
	+ "Организация,"             // <СправочникСсылка.Организации> - организация документа
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - 
	+ "ВалютаВзаиморасчетов"    // <СправочникСсылка.Валюты> - валюта из договора 
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"            // <Число,5 , 0>
	+ "СуммаВзаиморасчетов,"    // <Число, 15, 2> - сумма в валюте взаиморасчетов с учетом курса расчетов по авансам
	+ "СуммаБУ,"                // <Число, 15, 2> - сумма взаиморасчетов для целей БУ
	+ "СуммаНУ,"                // <Число, 15, 2> - сумма взаиморасчетов для целей НУ
	+ "СчетЗатрат,"             // <ПланСчетовСсылка.Хозрасчетный> - счет, на который относятся затраты по полученным услугам
	+ "Субконто1,"              // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"              // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"              // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСчет,"                // <ПланСчетовСсылка.Хозрасчетный> - счет, с которого поступает услуга
	+ "ВидКорСубконто1,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто2,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто3,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто
		// счета, с которого поступает услага
	+ "КорСубконто1,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто2,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто3,"           // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого
		// поступает услуга
	+ "СчетЗатратНУ,"           // <ПланСчетовСсылка.Хозрасчетный> - счет, на который относятся затраты для целей НУ
	+ "СубконтоНУ1,"            // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоНУ2,"            // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоНУ3,"            // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "ПодразделениеЗатрат,"    // <Ссылка на справочник подразделений> - на которое будут отнесены затраты по услугам
	+ "Содержание"              // <Строка, 150>
	;
	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаУслуги, СписокОбязательныхКолонок));
	

	Возврат Параметры;

КонецФункции


// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты, Движения, Отказ, Ошибки = Неопределено, ЭтоЭкспрессПроверка = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВалютаДокумента = Реквизиты.ВалютаДокумента;
	
	ПараметрыПереоценки = Новый Структура;
	ПараметрыПереоценки.Вставить("Регистратор",     Реквизиты.Регистратор);
	ПараметрыПереоценки.Вставить("Период",          Реквизиты.Период);
	ПараметрыПереоценки.Вставить("Организация",     Реквизиты.Организация);
	ПараметрыПереоценки.Вставить("ВалютаДокумента", ВалютаДокумента);
	
	РегламентнаяПереоценка = БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Реквизиты.Регистратор);
	
	Если РегламентнаяПереоценка Тогда
		ТаблицаВалютныхОстатков = ПодготовитьТаблицуВалютныхОстатковВсе(ПараметрыПереоценки, Движения);
	Иначе
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		ЕстьВалютныеСчета = Истина;
		
		Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ЕстьВалютныеСчета = ЕстьВалютныеСчета(Движения.Хозрасчетный);
		КонецЕсли;
		
		ТаблицаВалютныхОстатков = ПодготовитьТаблицуВалютныхОстатковПоДокументу(ПараметрыПереоценки, Движения, ЕстьВалютныеСчета);
		
	КонецЕсли;
	
	ПараметрыПереоценки.Вставить("ТаблицаВалютныхОстатков", ТаблицаВалютныхОстатков);
	
	Возврат ПодготовитьТаблицуПереоценкаВалютныхОстатков(ПараметрыПереоценки, Отказ, Ошибки, ЭтоЭкспрессПроверка);
	
КонецФункции

//Возвращает таблицу для переоценки движений документа
Функция ПодготовитьТаблицуПереоценкиДвиженийДокумента(ТаблицаРеквизиты, Движения, Отказ, Ошибки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПараметрыПереоценки = Новый Структура;
	ПараметрыПереоценки.Вставить("Регистратор",     Реквизиты.Регистратор);
	ПараметрыПереоценки.Вставить("Период",          Реквизиты.Период);
	ПараметрыПереоценки.Вставить("Организация",     Реквизиты.Организация);
	ПараметрыПереоценки.Вставить("ВалютаДокумента", Реквизиты[?(Параметры.Реквизиты.Колонки.Найти("ВалютаДокумента") = Неопределено, "ВалютаВзаиморасчетов", "ВалютаДокумента")]);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЕстьВалютныеСчета = Истина;
	
	Если ПараметрыПереоценки.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		ЕстьВалютныеСчета = ЕстьВалютныеСчета(Движения.Хозрасчетный);
	КонецЕсли;
	
	ТаблицаОстатков = ПодготовитьТаблицуВалютныхОстатковПоДокументу(ПараметрыПереоценки, Движения, ЕстьВалютныеСчета);
	
	ТаблицаВалютныхДвиженийДокумента = ПодготовитьТаблицуВалютныхДвиженийПоДокументу(ПараметрыПереоценки, ТаблицаОстатков, Движения, ЕстьВалютныеСчета);
	
	ПараметрыПереоценки.Вставить("ТаблицаВалютныхОстатков", ТаблицаВалютныхДвиженийДокумента);
	
	Возврат ПодготовитьТаблицуПереоценкаВалютныхОстатков(ПараметрыПереоценки, Отказ, Ошибки, Ложь);
	
КонецФункции	

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатковПоПроводкамДокумента(Таблицареквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"		// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация,"		// <СправочникСсылка.Организации> - организация документа
	+ "ВалютаДокумента"		//
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВалютныхОстатков) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Дата              = Реквизиты.Период;
	Организация       = Реквизиты.Организация;
	
	ТаблицаПереоценка = Параметры.ТаблицаПереоценка;
	Проводки        = Движения.Хозрасчетный;
	
	// С целью оптимизации производительности напрямую (а не через функции с повторно используемыми значениями) кешируем
	// свойства счетов. При заполнении субконто исключаем лишние проверки на значения субконто (наличие субконто на счете
	// и т.п. существующие в алгоритме как предусловия).
	СчетаПереоценкиКеш = Новый Соответствие;
	СчетПрочиеПрибылиИУбытки = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки; // 99.09
	СчетПрочиеПрибылиИУбыткиСвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПрочиеПрибылиИУбытки);
	СчетПрочиеДоходы = ПланыСчетов.Хозрасчетный.ПрочиеДоходы; // 91.01
	СчетПрочиеДоходыСвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПрочиеДоходы);
	СчетПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СчетПрочиеРасходыСвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПрочиеРасходы);
	
	СтатьиДоходовРасходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	ОрганизацияПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	
	КешОтложенныеКурсовыеРазницы = Неопределено;
	
	Для каждого СтрокаКорректировки Из ТаблицаПереоценка Цикл
		
		// С 2010 года результат переоценки авансов в НУ не образует курсовых разниц в налоговом учете и относится на счет 99.09
		ЭтоАванс2010 = СтрокаКорректировки.ЭтоАванс И (Дата >= '20100101');
		
		Если СтрокаКорректировки.СуммаПереоценки < 0 Или СтрокаКорректировки.СуммаПереоценкиНУ < 0 Тогда
			
			Проводка = Проводки.Вставить(0); // Может быть удалена позднее - см. УдалитьПроводкиБезСумм
			
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валютных остатков";
			
			Проводка.СчетКт = СтрокаКорректировки.Счет;
			СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(Проводка.СчетКт, Проводка.СубконтоКт, СчетаПереоценкиКеш,
				СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
				
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
			КонецЕсли;
			
			Проводка.ВалютаКт = СтрокаКорректировки.Валюта;
			
			СуммаПереоценки = ?(СтрокаКорректировки.СуммаПереоценки < 0, -СтрокаКорректировки.СуммаПереоценки, 0);
			СуммаПереоценкиНУ = ?(СтрокаКорректировки.СуммаПереоценкиНУ < 0, -СтрокаКорректировки.СуммаПереоценкиНУ, 0);
			СуммаРазниц = СуммаПереоценки - СуммаПереоценкиНУ;
			
			Если ЭтоАванс2010 Тогда
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					Проводка.СуммаПРКт = -СуммаПереоценкиНУ;
					Проводка.СуммаВРКт = 0;
				КонецЕсли;
				
				Если Не СвойстваСчетаКт.Забалансовый Тогда
					Проводка.СчетДт = СчетПрочиеПрибылиИУбытки;
					СвойстваСчетаДт = СчетПрочиеПрибылиИУбыткиСвойстваСчета;
					
					Если СвойстваСчетаДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = 0;
						Проводка.СуммаПРДт = 0;
						Проводка.СуммаВРДт = 0;
					КонецЕсли;
					
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Проводка.Сумма = СуммаПереоценки;
				
				Расход          = СуммаПереоценкиНУ;
				РазницаВРасходе = СуммаРазниц;
				Если ОрганизацияПлательщикНалогаНаПрибыль И СтрокаКорректировки.ОтложенныйРасход <> 0 Тогда
					Расход          = Расход          - СтрокаКорректировки.ОтложенныйРасход;
					РазницаВРасходе = РазницаВРасходе + СтрокаКорректировки.ОтложенныйРасход;
				КонецЕсли;
				
				Если ОрганизацияПлательщикНалогаНаПрибыль И СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = Расход;
					Проводка.СуммаПРКт = 0;
					Проводка.СуммаВРКт = РазницаВРасходе;
				КонецЕсли;
				
				Если Не СвойстваСчетаКт.Забалансовый Тогда
					Проводка.СчетДт = СчетПрочиеРасходы;
					СвойстваСчетаДт = СчетПрочиеРасходыСвойстваСчета;
					
					Если СтрокаКорректировки.РасчетыВУсловныхЕдиницах
						И Не СтрокаКорректировки.ПереоцениватьПоНУпосле2015 Тогда
						Проводка.СубконтоДт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
							"КурсовыеРазницыПоРасчетамВУЕ",
							СтатьиДоходовРасходов);
					Иначе
						Проводка.СубконтоДт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
							"КурсовыеРазницы",
							СтатьиДоходовРасходов);
					КонецЕсли;
					
					Если ОрганизацияПлательщикНалогаНаПрибыль И СвойстваСчетаДт.НалоговыйУчет Тогда
						
						Если СтрокаКорректировки.ОтложенныйРасход <> 0 Тогда
							ЗапомнитьПроводкуОтложеннаяКурсоваяРазница(
								КешОтложенныеКурсовыеРазницы,
								Проводка,
								СтрокаКорректировки,
								СтрокаКорректировки.ОтложенныйРасход,
								ВидДвиженияБухгалтерии.Дебет);
						КонецЕсли;
						
						Проводка.СуммаНУДт = Расход;
						Проводка.СуммаПРДт = 0;
						Проводка.СуммаВРДт = РазницаВРасходе;
						
					КонецЕсли;
					
					Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаКорректировки.СуммаПереоценки > 0 Или СтрокаКорректировки.СуммаПереоценкиНУ > 0 Тогда
			
			Проводка = Проводки.Вставить(0); // Может быть удалена позднее - см. УдалитьПроводкиБезСумм
			
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валютных остатков";
			
			Проводка.СчетДт = СтрокаКорректировки.Счет;
			СвойстваСчетаДт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(Проводка.СчетДт, Проводка.СубконтоДт, СчетаПереоценкиКеш,
				СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
				
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
			КонецЕсли;
			
			Проводка.ВалютаДт = СтрокаКорректировки.Валюта;
			
			СуммаПереоценки = ?(СтрокаКорректировки.СуммаПереоценки > 0, СтрокаКорректировки.СуммаПереоценки, 0);
			СуммаПереоценкиНУ = ?(СтрокаКорректировки.СуммаПереоценкиНУ > 0, СтрокаКорректировки.СуммаПереоценкиНУ, 0);
			СуммаРазниц = СуммаПереоценки - СуммаПереоценкиНУ;
			
			Если ЭтоАванс2010 Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПереоценкиНУ;
					Проводка.СуммаПРДт = -СуммаПереоценкиНУ;
					Проводка.СуммаВРДт = 0;
				КонецЕсли;
				
				Если Не СвойстваСчетаДт.Забалансовый Тогда
					Проводка.СчетКт = СчетПрочиеПрибылиИУбытки;
					СвойстваСчетаКт = СчетПрочиеПрибылиИУбыткиСвойстваСчета;
					
					Если СвойстваСчетаКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = 0;
						Проводка.СуммаПРКт = 0;
						Проводка.СуммаВРКт = 0;
					КонецЕсли;
					
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Проводка.Сумма = СуммаПереоценки;
				
				Доход          = СуммаПереоценкиНУ;
				РазницаВДоходе = СуммаРазниц;
				Если ОрганизацияПлательщикНалогаНаПрибыль И СтрокаКорректировки.ОтложенныйДоход <> 0 Тогда
					Доход          = Доход          - СтрокаКорректировки.ОтложенныйДоход;
					РазницаВДоходе = РазницаВДоходе + СтрокаКорректировки.ОтложенныйДоход;
				КонецЕсли;
				
				Если ОрганизацияПлательщикНалогаНаПрибыль И СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = Доход;
					Проводка.СуммаПРДт = 0;
					Проводка.СуммаВРДт = РазницаВДоходе;
				КонецЕсли;
				
				Если Не СвойстваСчетаДт.Забалансовый Тогда
					Проводка.СчетКт = СчетПрочиеДоходы;
					СвойстваСчетаКт = СчетПрочиеДоходыСвойстваСчета;
					
					Если СтрокаКорректировки.РасчетыВУсловныхЕдиницах И НЕ СтрокаКорректировки.ПереоцениватьПоНУпосле2015 Тогда
						Проводка.СубконтоКт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
							"КурсовыеРазницыПоРасчетамВУЕ",
							СтатьиДоходовРасходов);
					Иначе
						Проводка.СубконтоКт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
							"КурсовыеРазницы",
							СтатьиДоходовРасходов);
					КонецЕсли;
					
					Если ОрганизацияПлательщикНалогаНаПрибыль И СвойстваСчетаКт.НалоговыйУчет Тогда
						
						Если СтрокаКорректировки.ОтложенныйДоход <> 0 Тогда
							ЗапомнитьПроводкуОтложеннаяКурсоваяРазница(
								КешОтложенныеКурсовыеРазницы,
								Проводка,
								СтрокаКорректировки,
								СтрокаКорректировки.ОтложенныйДоход,
								ВидДвиженияБухгалтерии.Кредит);
						КонецЕсли;
						
						Проводка.СуммаНУКт = Доход;
						Проводка.СуммаПРКт = 0;
						Проводка.СуммаВРКт = РазницаВДоходе;
						
					КонецЕсли;
					
					Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
						Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьДвиженияОтложитьКурсовыеРазницы(Движения, КешОтложенныеКурсовыеРазницы, Дата, Организация);
	УдалитьПроводкиБезСумм(Проводки, КешОтложенныеКурсовыеРазницы);
	
	Если ОрганизацияПлательщикНалогаНаПрибыль Тогда
		СформироватьПроводкиКорректировкаСтоимостиАрендованногоИмуществаПриПереоценке(
			Проводки, ТаблицаПереоценка, СчетаПереоценкиКеш, Реквизиты);
	КонецЕсли;
	
	// Использовать Движения.Хозрасчетный.ЗаполнитьСуммыВременныхРазниц здесь не следует,
	// так как код формирования проводок НДС в первичных документах не заполняет суммы НУ.
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#Область ОтложенныеКурсовыеРазницы

// Читает значение настройки.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Ложь   - Курсовые разницы признаются одновременно с признанием дохода или расхода
//           В этом варианте откладывание курсовых разниц обеспечивается откладыванием признания курсовых разниц.
//  Истина - Курсовые разницы признаются ежемесячно, даже если доход или расход не признается.
//           В этом варианте отложенные доходы и расходы учитываются обособленно.
//
Функция УчитыватьОтложенныеКурсовыеРазницы(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.УчитыватьОтложенныеКурсовыеРазницы КАК ЗначениеНастройки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльПостоянные КАК Настройки
	|ГДЕ
	|	Настройки.Организация = &ГоловнаяОрганизация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеНастройки;
	Иначе
		Возврат Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыльПостоянные.Ресурсы.УчитыватьОтложенныеКурсовыеРазницы.ЗначениеЗаполнения;
	КонецЕсли;
	
КонецФункции

Функция ОтложитьОтрицательныеКурсовыеРазницы2022(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.ОтложитьОтрицательныеКурсовыеРазницы2022 КАК ЗначениеНастройки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльПостоянные КАК Настройки
	|ГДЕ
	|	Настройки.Организация = &ГоловнаяОрганизация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(),
		Выборка.ЗначениеНастройки,
		Ложь);
	
КонецФункции

Процедура ЗапомнитьПроводкуОтложеннаяКурсоваяРазница(Кеш, ИсходнаяПроводка, Аналитика, ОтложеннаяКурсоваяРазница, СторонаПрибылиУбытка)
	
	Если Кеш = Неопределено Тогда
		Кеш = НовыйКешПроводкиОтложеннаяКурсоваяРазница();
	КонецЕсли;
	
	Запись = Кеш.Проводки.Добавить();
	Запись.ИсходнаяПроводка          = ИсходнаяПроводка;
	Запись.Аналитика                 = Аналитика;
	Запись.СторонаПрибылиУбытка      = СторонаПрибылиУбытка;
	Запись.ОтложеннаяКурсоваяРазница = ОтложеннаяКурсоваяРазница;
	
КонецПроцедуры

Процедура ДобавитьДвиженияОтложитьКурсовыеРазницы(Движения, Кеш, Период, Организация)
	
	Если Кеш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидИспользованияНалоговыхСумм = БухгалтерскийУчет.ИспользоватьСуммыНалогНаПрибыль(Организация, Период);
	ИспользоватьСуммыВременныхРазниц = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияНалоговыхСумм);
	
	Для Каждого РегулярнаяПроводка Из Кеш.Проводки Цикл
		
		Если РегулярнаяПроводка.СторонаПрибылиУбытка = ВидДвиженияБухгалтерии.Дебет Тогда
			Ресурс                  = "Расход";
			ИмяСтороныПрибылиУбытка = "Дт";
			ИмяСтороныБаланса       = "Кт";
		Иначе
			Ресурс                  = "Доход";
			ИмяСтороныПрибылиУбытка = "Кт";
			ИмяСтороныБаланса       = "Дт";
		КонецЕсли;
		
		ИмяСчетаПрибылиУбытка          = СтрШаблон("Счет%1",     ИмяСтороныПрибылиУбытка);
		ИмяНабораСубконтоБаланса       = СтрШаблон("Субконто%1", ИмяСтороныБаланса);
		ИмяНабораСубконтоПрибылиУбытка = СтрШаблон("Субконто%1", ИмяСтороныПрибылиУбытка);
		ИмяСуммыБаланса                = СтрШаблон("СуммаНУ%1",  ИмяСтороныБаланса);
		ИмяСуммыПрибылиУбытка          = СтрШаблон("СуммаНУ%1",  ИмяСтороныПрибылиУбытка);
		ИмяСуммыВРБаланса              = СтрШаблон("СуммаВР%1",  ИмяСтороныБаланса);
		ИмяСуммыВРПрибылиУбытка        = СтрШаблон("СуммаВР%1",  ИмяСтороныПрибылиУбытка);
		
		ЗначенияСубконто = РегулярнаяПроводка.ИсходнаяПроводка[ИмяНабораСубконтоБаланса];
		
		// Регистр бухгалтерии
		
		ПозицияПроводок = Движения.Хозрасчетный.Индекс(РегулярнаяПроводка.ИсходнаяПроводка);
		Проводка = Движения.Хозрасчетный.Вставить(ПозицияПроводок + 1); // за регулярной
		
		ЗаполнитьЗначенияСвойств(
			Проводка,
			РегулярнаяПроводка.ИсходнаяПроводка,
			,
			"Сумма, СуммаНУДт, СуммаПРДт, СуммаВРДт, СуммаНУКт,  СуммаПРКт, СуммаВРКт");
		
		Проводка[ИмяСуммыБаланса]       = РегулярнаяПроводка.ОтложеннаяКурсоваяРазница;
		Проводка[ИмяСуммыПрибылиУбытка] = РегулярнаяПроводка.ОтложеннаяКурсоваяРазница;
		Если ИспользоватьСуммыВременныхРазниц Тогда
			Проводка[ИмяСуммыВРБаланса]       = - РегулярнаяПроводка.ОтложеннаяКурсоваяРазница;
			Проводка[ИмяСуммыВРПрибылиУбытка] = - РегулярнаяПроводка.ОтложеннаяКурсоваяРазница;
		КонецЕсли;
		
		СчетОтложенныеКурсовыеРазницы = Кеш.СчетаОтложенныеКурсовыеРазницы[РегулярнаяПроводка.СторонаПрибылиУбытка];
		Проводка[ИмяСчетаПрибылиУбытка] = СчетОтложенныеКурсовыеРазницы;
		Проводка[ИмяНабораСубконтоПрибылиУбытка].Очистить();
		
		Для Каждого ОписаниеЗначенияСубконто Из ЗначенияСубконто Цикл
			Проводка[ИмяНабораСубконтоБаланса].Вставить(ОписаниеЗначенияСубконто.Ключ, ОписаниеЗначенияСубконто.Значение);
		КонецЦикла;
		
		Движения.Хозрасчетный.Записывать = Истина;
		
		// Регистр накопления
		
		Запись = Движения.ОтложенныеКурсовыеРазницы.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, РегулярнаяПроводка.ИсходнаяПроводка);
		ЗаполнитьЗначенияСвойств(Запись, РегулярнаяПроводка.Аналитика);
		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись[Ресурс] = РегулярнаяПроводка.ОтложеннаяКурсоваяРазница;
		
		Движения.ОтложенныеКурсовыеРазницы.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКешПроводкиОтложеннаяКурсоваяРазница()
	
	Кеш = Новый Структура;
	
	Кеш.Вставить("Проводки", Новый ТаблицаЗначений);
	Кеш.Проводки.Колонки.Добавить("ИсходнаяПроводка",           Новый ОписаниеТипов("РегистрБухгалтерииЗапись.Хозрасчетный"));
	Кеш.Проводки.Колонки.Добавить("Аналитика",                  Новый ОписаниеТипов("СтрокаТаблицыЗначений")); // содержит Валюта, Счет, Подразделение, Субконто1..3
	Кеш.Проводки.Колонки.Добавить("СторонаПрибылиУбытка",       Новый ОписаниеТипов("ВидДвиженияБухгалтерии"));
	Кеш.Проводки.Колонки.Добавить("ОтложеннаяКурсоваяРазница",  БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Кеш.Вставить("СчетаОтложенныеКурсовыеРазницы", Новый Соответствие);
	Кеш.СчетаОтложенныеКурсовыеРазницы.Вставить(
		ВидДвиженияБухгалтерии.Дебет,
		ПланыСчетов.Хозрасчетный.ОтложенныеРасходыПоКурсовымРазницам);
	Кеш.СчетаОтложенныеКурсовыеРазницы.Вставить(
		ВидДвиженияБухгалтерии.Кредит,
		ПланыСчетов.Хозрасчетный.ОтложенныеДоходыПоКурсовымРазницам);
		
	Возврат Кеш;
	
КонецФункции

Процедура УдалитьПроводкиБезСумм(Проводки, Кеш)
	
	// При некоторых условиях проводка может получить нулевые суммы.
	// Такие проводки сохранять не будем.
	
	Если Кеш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРесурсов = Новый Массив;
	Для Каждого ОписаниеРесурса Из Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы Цикл
		Если ОписаниеРесурса.Балансовый Тогда
			ИменаРесурсов.Добавить(ОписаниеРесурса.Имя);
		Иначе
			ИменаРесурсов.Добавить(СтрШаблон("%1Дт", ОписаниеРесурса.Имя));
			ИменаРесурсов.Добавить(СтрШаблон("%1Кт", ОписаниеРесурса.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого РегулярнаяПроводка Из Кеш.Проводки Цикл
		
		ВсеРесурсыПустые = Истина;
		
		Для Каждого ИмяРесурса Из ИменаРесурсов Цикл
			Если ЗначениеЗаполнено(РегулярнаяПроводка.ИсходнаяПроводка[ИмяРесурса]) Тогда
				ВсеРесурсыПустые = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВсеРесурсыПустые Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексПроводки = Проводки.Индекс(РегулярнаяПроводка.ИсходнаяПроводка);
		Если ИндексПроводки < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводки.Удалить(ИндексПроводки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуКорректировкаКурсовыхРазниц2022(ТаблицаПереоценка, ТаблицаРеализацияОтложенныхРазниц, ТаблицаРеквизиты) Экспорт
	
	ТаблицаКорректировка = ТаблицаПереоценка.СкопироватьКолонки();
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация = Реквизиты.Организация;
	Период = Реквизиты.Период;
	ЭтоКонец2022Года = КонецМесяца(Период) = '2022-12-31-23-59-59';
	Если Не ЭтоКонец2022Года
		Или Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) 
		Или Не УчитыватьОтложенныеКурсовыеРазницы(Организация) Тогда
		Возврат ТаблицаКорректировка;
	КонецЕсли;
	
	// Запрос использует таблицы, подготовленные регламентной операцией переоценки за декабрь 2022 года:
	// - ТаблицаПереоценки содержит результат регламентной переоценки имущества и непогашенных требований и обязательств
	// - ТаблицаРеализацияОтложенныхРазниц содержит суммы уменьшения отложенных доходов по погашенной задолженности
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПереоценкаДекабрь.Счет КАК Счет,
	|	ПереоценкаДекабрь.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ПереоценкаДекабрь.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(ПереоценкаДекабрь.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(ПереоценкаДекабрь.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|	ПереоценкаДекабрь.Валюта КАК Валюта,
	|	ПереоценкаДекабрь.ОстатокВВалюте КАК ОстатокВВалюте,
	|	ПереоценкаДекабрь.СуммаПереоценкиНУ КАК СуммаПереоценкиНУ
	|ПОМЕСТИТЬ ПереоценкаДекабрь
	|ИЗ
	|	&ТаблицаПереоценки КАК ПереоценкаДекабрь
	|ГДЕ
	|	ПереоценкаДекабрь.ЭтоТребованиеОбязательство
	|	И ПереоценкаДекабрь.ОстатокВВалюте <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияОтложенныхРазницДекабрь.Счет КАК Счет,
	|	РеализацияОтложенныхРазницДекабрь.Подразделение КАК Подразделение,
	|	РеализацияОтложенныхРазницДекабрь.Субконто1 КАК Субконто1,
	|	РеализацияОтложенныхРазницДекабрь.Субконто2 КАК Субконто2,
	|	РеализацияОтложенныхРазницДекабрь.Субконто3 КАК Субконто3,
	|	РеализацияОтложенныхРазницДекабрь.Валюта КАК Валюта,
	|	РеализацияОтложенныхРазницДекабрь.РеализованныйДоход КАК РеализованныйДоход
	|ПОМЕСТИТЬ РеализацияОтложенныхРазницДекабрь
	|ИЗ
	|	&ТаблицаРеализацияОтложенныхРазниц КАК РеализацияОтложенныхРазницДекабрь
	|ГДЕ
	|	НЕ &Применяется523ФЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтложенныеДоходы2022.Счет КАК Счет,
	|	ОтложенныеДоходы2022.Подразделение КАК Подразделение,
	|	ОтложенныеДоходы2022.Субконто1 КАК Субконто1,
	|	ОтложенныеДоходы2022.Субконто2 КАК Субконто2,
	|	ОтложенныеДоходы2022.Субконто3 КАК Субконто3,
	|	ОтложенныеДоходы2022.Валюта КАК Валюта,
	|	СУММА(ОтложенныеДоходы2022.ОтложенныйДоход) КАК ОтложенныйДоход
	|ПОМЕСТИТЬ ОтложенныеДоходы2022Год
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтложенныеРазницы.Счет КАК Счет,
	|		ОтложенныеРазницы.Подразделение КАК Подразделение,
	|		ОтложенныеРазницы.Субконто1 КАК Субконто1,
	|		ОтложенныеРазницы.Субконто2 КАК Субконто2,
	|		ОтложенныеРазницы.Субконто3 КАК Субконто3,
	|		ОтложенныеРазницы.Валюта КАК Валюта,
	|		ОтложенныеРазницы.ДоходОстаток КАК ОтложенныйДоход
	|	ИЗ
	|		РегистрНакопления.ОтложенныеКурсовыеРазницы.Остатки(
	|				&КонецПериодаГраница,
	|				НЕ &Применяется523ФЗ
	|					И Организация = &Организация) КАК ОтложенныеРазницы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПереоценкаДекабрь.Счет,
	|		ПереоценкаДекабрь.Подразделение,
	|		ПереоценкаДекабрь.Субконто1,
	|		ПереоценкаДекабрь.Субконто2,
	|		ПереоценкаДекабрь.Субконто3,
	|		ПереоценкаДекабрь.Валюта,
	|		ПереоценкаДекабрь.СуммаПереоценкиНУ
	|	ИЗ
	|		ПереоценкаДекабрь КАК ПереоценкаДекабрь
	|	ГДЕ
	|		ПереоценкаДекабрь.СуммаПереоценкиНУ > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияОтложенныхРазницДекабрь.Счет,
	|		РеализацияОтложенныхРазницДекабрь.Подразделение,
	|		РеализацияОтложенныхРазницДекабрь.Субконто1,
	|		РеализацияОтложенныхРазницДекабрь.Субконто2,
	|		РеализацияОтложенныхРазницДекабрь.Субконто3,
	|		РеализацияОтложенныхРазницДекабрь.Валюта,
	|		-РеализацияОтложенныхРазницДекабрь.РеализованныйДоход
	|	ИЗ
	|		РеализацияОтложенныхРазницДекабрь КАК РеализацияОтложенныхРазницДекабрь) КАК ОтложенныеДоходы2022
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтложенныеДоходы2022.Счет,
	|	ОтложенныеДоходы2022.Подразделение,
	|	ОтложенныеДоходы2022.Субконто1,
	|	ОтложенныеДоходы2022.Субконто2,
	|	ОтложенныеДоходы2022.Субконто3,
	|	ОтложенныеДоходы2022.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОтложенныеДоходы2022.ОтложенныйДоход) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереоценкаЯнварьНоябрь.ПериодРасчета КАК ПериодРасчета,
	|	ПереоценкаЯнварьНоябрь.Счет КАК Счет,
	|	ПереоценкаЯнварьНоябрь.Подразделение КАК Подразделение,
	|	ПереоценкаЯнварьНоябрь.Субконто1 КАК Субконто1,
	|	ПереоценкаЯнварьНоябрь.Субконто2 КАК Субконто2,
	|	ПереоценкаЯнварьНоябрь.Субконто3 КАК Субконто3,
	|	ПереоценкаЯнварьНоябрь.Валюта КАК Валюта,
	|	МАКСИМУМ(ПереоценкаДекабрь.ОстатокВВалюте) КАК ЗадолженностьНаКонецГода,
	|	СУММА(ПереоценкаЯнварьНоябрь.ОстатокВВалюте) КАК ЗадолженностьНаКонецМесяца,
	|	СУММА(ПереоценкаЯнварьНоябрь.СуммаПереоценкиНУ) КАК СуммаПереоценкиНУ,
	|	ВЫБОР
	|		КОГДА СУММА(ПереоценкаЯнварьНоябрь.ОстатокВВалюте) = 0
	|			ТОГДА 0
	|		КОГДА МАКСИМУМ(ПереоценкаДекабрь.ОстатокВВалюте) / СУММА(ПереоценкаЯнварьНоябрь.ОстатокВВалюте) > 1
	|			ТОГДА 1
	|		ИНАЧЕ МАКСИМУМ(ПереоценкаДекабрь.ОстатокВВалюте) / СУММА(ПереоценкаЯнварьНоябрь.ОстатокВВалюте)
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ РасходыЯнварьНоябрь
	|ИЗ
	|	РегистрСведений.РасчетПереоценкиВалютныхСредств КАК ПереоценкаЯнварьНоябрь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПереоценкаДекабрь КАК ПереоценкаДекабрь
	|		ПО ПереоценкаЯнварьНоябрь.Счет = ПереоценкаДекабрь.Счет
	|			И ПереоценкаЯнварьНоябрь.Подразделение = ПереоценкаДекабрь.Подразделение
	|			И ПереоценкаЯнварьНоябрь.Валюта = ПереоценкаДекабрь.Валюта
	|			И ПереоценкаЯнварьНоябрь.Субконто1 = ПереоценкаДекабрь.Субконто1
	|			И ПереоценкаЯнварьНоябрь.Субконто2 = ПереоценкаДекабрь.Субконто2
	|			И ПереоценкаЯнварьНоябрь.Субконто3 = ПереоценкаДекабрь.Субконто3
	|ГДЕ
	|	ПереоценкаЯнварьНоябрь.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И ПереоценкаЯнварьНоябрь.Организация = &Организация
	|	И ПереоценкаЯнварьНоябрь.ПериодРасчета МЕЖДУ ДАТАВРЕМЯ(2022, 1, 1) И ДАТАВРЕМЯ(2022, 11, 30)
	|	И ПереоценкаЯнварьНоябрь.СуммаПереоценкиНУ < 0
	|	И (ПереоценкаДекабрь.ОстатокВВалюте > 0
	|				И ПереоценкаЯнварьНоябрь.ОстатокВВалюте > 0
	|			ИЛИ ПереоценкаДекабрь.ОстатокВВалюте < 0
	|				И ПереоценкаЯнварьНоябрь.ОстатокВВалюте < 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереоценкаЯнварьНоябрь.ПериодРасчета,
	|	ПереоценкаЯнварьНоябрь.Счет,
	|	ПереоценкаЯнварьНоябрь.Подразделение,
	|	ПереоценкаЯнварьНоябрь.Субконто1,
	|	ПереоценкаЯнварьНоябрь.Субконто2,
	|	ПереоценкаЯнварьНоябрь.Субконто3,
	|	ПереоценкаЯнварьНоябрь.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыЯнварьНоябрь.ПериодРасчета КАК ПериодРасчета,
	|	РасходыЯнварьНоябрь.Счет КАК Счет,
	|	РасходыЯнварьНоябрь.Подразделение КАК Подразделение,
	|	РасходыЯнварьНоябрь.Субконто1 КАК Субконто1,
	|	РасходыЯнварьНоябрь.Субконто2 КАК Субконто2,
	|	РасходыЯнварьНоябрь.Субконто3 КАК Субконто3,
	|	РасходыЯнварьНоябрь.Валюта КАК Валюта,
	|	РасходыЯнварьНоябрь.ЗадолженностьНаКонецГода КАК ЗадолженностьНаКонецГода,
	|	РасходыЯнварьНоябрь.ЗадолженностьНаКонецМесяца КАК ЗадолженностьНаКонецМесяца,
	|	-РасходыЯнварьНоябрь.СуммаПереоценкиНУ КАК РасходВсего,
	|	ВЫРАЗИТЬ(-РасходыЯнварьНоябрь.СуммаПереоценкиНУ * РасходыЯнварьНоябрь.Коэффициент КАК ЧИСЛО(15, 2)) КАК РасходПоЗадолженностиНаКонецГода
	|ПОМЕСТИТЬ Расходы2022Помесячно
	|ИЗ
	|	РасходыЯнварьНоябрь КАК РасходыЯнварьНоябрь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(2022, 12, 31),
	|	ПереоценкаДекабрь.Счет,
	|	ПереоценкаДекабрь.Подразделение,
	|	ПереоценкаДекабрь.Субконто1,
	|	ПереоценкаДекабрь.Субконто2,
	|	ПереоценкаДекабрь.Субконто3,
	|	ПереоценкаДекабрь.Валюта,
	|	ПереоценкаДекабрь.ОстатокВВалюте,
	|	ПереоценкаДекабрь.ОстатокВВалюте,
	|	-ПереоценкаДекабрь.СуммаПереоценкиНУ,
	|	-ПереоценкаДекабрь.СуммаПереоценкиНУ
	|ИЗ
	|	ПереоценкаДекабрь КАК ПереоценкаДекабрь
	|ГДЕ
	|	ПереоценкаДекабрь.СуммаПереоценкиНУ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы2022Помесячно.Счет КАК Счет,
	|	Расходы2022Помесячно.Подразделение КАК Подразделение,
	|	Расходы2022Помесячно.Субконто1 КАК Субконто1,
	|	Расходы2022Помесячно.Субконто2 КАК Субконто2,
	|	Расходы2022Помесячно.Субконто3 КАК Субконто3,
	|	Расходы2022Помесячно.Валюта КАК Валюта,
	|	МАКСИМУМ(Расходы2022Помесячно.ЗадолженностьНаКонецГода) КАК ЗадолженностьНаКонецГода,
	|	СУММА(Расходы2022Помесячно.РасходПоЗадолженностиНаКонецГода) КАК РасходПоЗадолженностиНаКонецГода
	|ПОМЕСТИТЬ Расходы2022Год
	|ИЗ
	|	Расходы2022Помесячно КАК Расходы2022Помесячно
	|ГДЕ
	|	НЕ &Применяется523ФЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы2022Помесячно.Счет,
	|	Расходы2022Помесячно.Подразделение,
	|	Расходы2022Помесячно.Субконто1,
	|	Расходы2022Помесячно.Субконто2,
	|	Расходы2022Помесячно.Субконто3,
	|	Расходы2022Помесячно.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы2022Помесячно.ПериодРасчета КАК ПериодРасчета,
	|	Расходы2022Помесячно.Счет КАК Счет,
	|	Расходы2022Помесячно.Подразделение КАК Подразделение,
	|	Расходы2022Помесячно.Субконто1 КАК Субконто1,
	|	Расходы2022Помесячно.Субконто2 КАК Субконто2,
	|	Расходы2022Помесячно.Субконто3 КАК Субконто3,
	|	Расходы2022Помесячно.Валюта КАК Валюта,
	|	Расходы2022Помесячно.ЗадолженностьНаКонецГода КАК ЗадолженностьНаКонецГода,
	|	Расходы2022Помесячно.ЗадолженностьНаКонецМесяца КАК ЗадолженностьНаКонецМесяца,
	|	Расходы2022Помесячно.РасходВсего КАК РасходВсего,
	|	Расходы2022Помесячно.РасходПоЗадолженностиНаКонецГода КАК РасходПоЗадолженностиНаКонецГода
	|ИЗ
	|	Расходы2022Помесячно КАК Расходы2022Помесячно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы2022Год.Счет КАК Счет,
	|	Расходы2022Год.Подразделение КАК Подразделение,
	|	Расходы2022Год.Субконто1 КАК Субконто1,
	|	Расходы2022Год.Субконто2 КАК Субконто2,
	|	Расходы2022Год.Субконто3 КАК Субконто3,
	|	Расходы2022Год.Валюта КАК Валюта,
	|	Расходы2022Год.ЗадолженностьНаКонецГода КАК ЗадолженностьНаКонецГода,
	|	Расходы2022Год.РасходПоЗадолженностиНаКонецГода КАК РасходПоЗадолженностиНаКонецГода,
	|	ОтложенныеДоходы2022Год.ОтложенныйДоход КАК ОтложенныйДоход,
	|	ВЫБОР
	|		КОГДА Расходы2022Год.РасходПоЗадолженностиНаКонецГода < ОтложенныеДоходы2022Год.ОтложенныйДоход
	|			ТОГДА Расходы2022Год.РасходПоЗадолженностиНаКонецГода
	|		ИНАЧЕ ОтложенныеДоходы2022Год.ОтложенныйДоход
	|	КОНЕЦ КАК УменьшениеРасхода
	|ИЗ
	|	Расходы2022Год КАК Расходы2022Год
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтложенныеДоходы2022Год КАК ОтложенныеДоходы2022Год
	|		ПО Расходы2022Год.Счет = ОтложенныеДоходы2022Год.Счет
	|			И Расходы2022Год.Подразделение = ОтложенныеДоходы2022Год.Подразделение
	|			И Расходы2022Год.Валюта = ОтложенныеДоходы2022Год.Валюта
	|			И Расходы2022Год.Субконто1 = ОтложенныеДоходы2022Год.Субконто1
	|			И Расходы2022Год.Субконто2 = ОтложенныеДоходы2022Год.Субконто2
	|			И Расходы2022Год.Субконто3 = ОтложенныеДоходы2022Год.Субконто3
	|ГДЕ
	|	НЕ &Применяется523ФЗ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТаблицаПереоценки", ТаблицаПереоценка);
	Запрос.УстановитьПараметр("ТаблицаРеализацияОтложенныхРазниц", ТаблицаРеализацияОтложенныхРазниц);
	Применяется523ФЗ = ОтложитьОтрицательныеКурсовыеРазницы2022(Организация);
	Запрос.УстановитьПараметр("Применяется523ФЗ", Применяется523ФЗ);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Если организация применяет 532-ФЗ, часть расходов по отрицательным курсовым разницам, которая относится 
	// к непогашенной на 31.12.2022 задолженности, будет сторнирована и перенесена в отложенные на счет 97.КР.
	// Если 532-ФЗ не применяется, такие расходы будут уменьшены на остаток отложенного дохода по этой задолженности.
	
	ВыборкаПомесячно = Результаты[6].Выбрать();
	Пока ВыборкаПомесячно.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКорректировка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПомесячно);
		НоваяСтрока.ЭтоТребованиеОбязательство = Истина;
		// По записям с НомерЗаписи = 1 формируется отдельный раздел справки-расчета.
		// Если закон 523-ФЗ применяется, по этим записям также формируются проводки.
		НоваяСтрока.НомерЗаписи = 1; 
		// Корректировка на 31.12.2022 - разовая операция, новых ресурсов для нее не добавляем, используем существующие.
		НоваяСтрока.ОстатокВВалюте = ВыборкаПомесячно.ЗадолженностьНаКонецМесяца;
		НоваяСтрока.ЗадолженностьВВалюте = ВыборкаПомесячно.ЗадолженностьНаКонецГода;
		НоваяСтрока.ОстатокВРубляхНУ = ВыборкаПомесячно.РасходВсего;
		НоваяСтрока.СуммаПереоценкиНУ = ВыборкаПомесячно.РасходПоЗадолженностиНаКонецГода;
		
	КонецЦикла;
	
	Если Не Применяется523ФЗ Тогда
		
		ВыборкаГод = Результаты[7].Выбрать();
		Пока ВыборкаГод.Следующий() Цикл
			
			НоваяСтрока = ТаблицаКорректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаГод);
			НоваяСтрока.ЭтоТребованиеОбязательство = Истина;
			// По записям с НомерЗаписи = 2 формируется отдельный раздел справки-расчета, также формируются проводки.
			НоваяСтрока.НомерЗаписи = 2;
			// Корректировка на 31.12.2022 - разовая операция, новых ресурсов для нее не добавляем, используем существующие.
			НоваяСтрока.ЗадолженностьВВалюте = ВыборкаГод.ЗадолженностьНаКонецГода;
			НоваяСтрока.ОстатокВРубляхНУ = ВыборкаГод.РасходПоЗадолженностиНаКонецГода;
			НоваяСтрока.ЗадолженностьНУ = ВыборкаГод.ОтложенныйДоход;
			НоваяСтрока.СуммаПереоценкиНУ = -ВыборкаГод.УменьшениеРасхода;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаКорректировка;
	
КонецФункции

Процедура СформироватьДвиженияКорректировкаКурсовыхРазниц2022(ТаблицаКорректировки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаКорректировки) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Применяется523ФЗ = ОтложитьОтрицательныеКурсовыеРазницы2022(Реквизиты.Организация);
	Если Применяется523ФЗ Тогда
		СформироватьДвиженияПереносНаБудущееРасходов2022(ТаблицаКорректировки, ТаблицаРеквизиты, Движения, Отказ);
	Иначе
		СформироватьДвиженияСверткаРасходовИОтложенныхДоходов2022(ТаблицаКорректировки, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПереносНаБудущееРасходов2022(ТаблицаКорректировки, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	Дата = Реквизиты.Период;
	Организация = Реквизиты.Организация;
	
	Корректировка = ТаблицаКорректировки.Скопировать(, 
		"Счет,Подразделение,Субконто1,Субконто2,Субконто3,Валюта,СуммаПереоценкиНУ");
	Корректировка.Свернуть(
		"Счет,Подразделение,Субконто1,Субконто2,Субконто3,Валюта", "СуммаПереоценкиНУ");
	
	СчетаПереоценкиКеш = Новый Соответствие;
	СчетПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СвойстваСчетаПрочиеРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПрочиеРасходы);
	СчетОтложенныеРасходы = ПланыСчетов.Хозрасчетный.ОтложенныеРасходыПоКурсовымРазницам; // 97.КР
	СвойстваСчетаОтложенныеРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтложенныеРасходы);
	
	СтатьиДоходовРасходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	СодержаниеПроводок = НСтр("ru='Перенос на будущие периоды расходов 2022 года по требованиям и обязательствам, не погашенным на 31.12.2022'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаКорректировки Из Корректировка Цикл
		
		СуммаСторноРасходовНУ = - СтрокаКорректировки.СуммаПереоценкиНУ;
		СуммаОтложенныхРасходовНУ = - СуммаСторноРасходовНУ;
		
		// Сторно-проводка Дт 91.02 Кт <СчетЗадолженности>
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = СодержаниеПроводок;
		
		Проводка.Сумма = 0;
		
		Проводка.СчетДт = СчетПрочиеРасходы;
		Проводка.СубконтоДт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
			"КурсовыеРазницы",
			СтатьиДоходовРасходов);
		
		Если СвойстваСчетаПрочиеРасходы.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СуммаСторноРасходовНУ;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = - СуммаСторноРасходовНУ;
		КонецЕсли;
		
		Если СвойстваСчетаПрочиеРасходы.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаКорректировки.Счет;
		СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, Проводка.СубконтоКт, СчетаПереоценкиКеш,
			СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.ВалютаКт = СтрокаКорректировки.Валюта;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаСторноРасходовНУ;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = - СуммаСторноРасходовНУ;
		КонецЕсли;
		
		// Проводка Дт 97.КР Кт <СчетЗадолженности>
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = СодержаниеПроводок;
		
		Проводка.Сумма = 0;
		
		Проводка.СчетДт = СчетОтложенныеРасходы;
		
		Если СвойстваСчетаОтложенныеРасходы.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СуммаОтложенныхРасходовНУ;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = - СуммаОтложенныхРасходовНУ;
		КонецЕсли;
		
		Если СвойстваСчетаОтложенныеРасходы.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаКорректировки.Счет;
		СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, Проводка.СубконтоКт, СчетаПереоценкиКеш,
			СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.ВалютаКт = СтрокаКорректировки.Валюта;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаОтложенныхРасходовНУ;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = - СуммаОтложенныхРасходовНУ;
		КонецЕсли;
		
		// Регистр накопления ОтложенныеКурсовыеРазницы
		
		Запись = Движения.ОтложенныеКурсовыеРазницы.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаКорректировки);
		Запись.Период = Дата;
		Запись.Организация = Организация;
		Запись.Расход = СуммаОтложенныхРасходовНУ;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	Движения.ОтложенныеКурсовыеРазницы.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСверткаРасходовИОтложенныхДоходов2022(ТаблицаКорректировки, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	Дата = Реквизиты.Период;
	Организация = Реквизиты.Организация;
	
	ОтборСтрок = Новый Структура("НомерЗаписи", 2);
	Корректировка = ТаблицаКорректировки.Скопировать(ОтборСтрок, 
		"Счет,Подразделение,Субконто1,Субконто2,Субконто3,Валюта,СуммаПереоценкиНУ");
	Корректировка.Свернуть(
		"Счет,Подразделение,Субконто1,Субконто2,Субконто3,Валюта", "СуммаПереоценкиНУ");
	
	СчетаПереоценкиКеш = Новый Соответствие;
	СчетПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СвойстваСчетаПрочиеРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПрочиеРасходы);
	СчетОтложенныеРасходы = ПланыСчетов.Хозрасчетный.ОтложенныеРасходыПоКурсовымРазницам; // 97.КР
	СвойстваСчетаОтложенныеРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтложенныеРасходы);
	СчетОтложенныеДоходы = ПланыСчетов.Хозрасчетный.ОтложенныеДоходыПоКурсовымРазницам; // 98.КР
	СвойстваСчетаОтложенныеДоходы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтложенныеДоходы);
	
	СтатьиДоходовРасходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	СодержаниеПроводокРасходы = 
		НСтр("ru='Уменьшение расходов 2022 года по требованиям и обязательствам, не погашенным на 31.12.2022'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	СодержаниеПроводокДоходы = 
		НСтр("ru='Уменьшение отложенных доходов 2022 года по требованиям и обязательствам, не погашенным на 31.12.2022'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаКорректировки Из Корректировка Цикл
		
		СуммаСторноРасходовНУ = СтрокаКорректировки.СуммаПереоценкиНУ;
		СуммаСторноОтложенныхДоходовНУ = СуммаСторноРасходовНУ;
		
		// Сторно-проводка Дт 91.02 Кт <СчетЗадолженности>
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = СодержаниеПроводокРасходы;
		
		Проводка.Сумма = 0;
		
		Проводка.СчетДт = СчетПрочиеРасходы;
		Проводка.СубконтоДт.ПрочиеДоходыИРасходы = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
			"КурсовыеРазницы",
			СтатьиДоходовРасходов);
		
		Если СвойстваСчетаПрочиеРасходы.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СуммаСторноРасходовНУ;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = - СуммаСторноРасходовНУ;
		КонецЕсли;
		
		Если СвойстваСчетаПрочиеРасходы.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаКорректировки.Счет;
		СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, Проводка.СубконтоКт, СчетаПереоценкиКеш,
			СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.ВалютаКт = СтрокаКорректировки.Валюта;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаСторноРасходовНУ;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = - СуммаСторноРасходовНУ;
		КонецЕсли;
		
		// Сторно-проводка Дт <СчетЗадолженности> Кт 98.КР 
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = СодержаниеПроводокДоходы;
		
		Проводка.Сумма = 0;
		
		Проводка.СчетДт = СтрокаКорректировки.Счет;
		СвойстваСчетаДт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетДт, Проводка.СубконтоДт, СчетаПереоценкиКеш,
			СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		Проводка.ВалютаДт = СтрокаКорректировки.Валюта;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СуммаСторноОтложенныхДоходовНУ;
			Проводка.СуммаПРДт = 0;
			Проводка.СуммаВРДт = - СуммаСторноОтложенныхДоходовНУ;
		КонецЕсли;
		
		Проводка.СчетКт = СчетОтложенныеДоходы;
		
		Если СвойстваСчетаОтложенныеДоходы.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаСторноОтложенныхДоходовНУ;
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = - СуммаСторноОтложенныхДоходовНУ;
		КонецЕсли;
		
		Если СвойстваСчетаОтложенныеДоходы.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
		КонецЕсли;
		
		// Регистр накопления ОтложенныеКурсовыеРазницы
		
		Запись = Движения.ОтложенныеКурсовыеРазницы.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаКорректировки);
		Запись.Период = Дата;
		Запись.Организация = Организация;
		Запись.Доход = СуммаСторноОтложенныхДоходовНУ;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	Движения.ОтложенныеКурсовыеРазницы.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РеализацияОтложенныхКурсовыхРазниц

Функция ПодготовитьТаблицуРеализацияОтложенныхКурсовыхРазниц(ТаблицаРеквизиты) Экспорт
	
	ТаблицаРеализацияРазниц = НовыйТаблицаРеализацияОтложенныхКурсовыхРазниц();
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Организация = Реквизиты.Организация;
	Период = Реквизиты.Период;
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) 
		Или Не УчитыватьОтложенныеКурсовыеРазницы(Организация) Тогда
		Возврат ТаблицаРеализацияРазниц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтложенныеРазницы.Счет КАК Счет
	|ИЗ
	|	РегистрНакопления.ОтложенныеКурсовыеРазницы.Остатки(&НачалоМесяца, Организация = &Организация) КАК ОтложенныеРазницы";
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СчетаРазниц = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСчета Из СчетаРазниц Цикл
		
		Запрос = Новый Запрос;
		// Это шаблон текста запроса, он модифицируется ниже в соответствие со свойствами счета
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтложенныеРазницы.Счет КАК Счет,
		|	ОтложенныеРазницы.Подразделение КАК Подразделение,
		|	ОтложенныеРазницы.Валюта КАК Валюта,
		|	ОтложенныеРазницы.Субконто1 КАК Субконто1,
		|	ОтложенныеРазницы.Субконто2 КАК Субконто2,
		|	ОтложенныеРазницы.Субконто3 КАК Субконто3,
		|	ОтложенныеРазницы.ДоходОстаток КАК Доход,
		|	ОтложенныеРазницы.РасходОстаток КАК Расход
		|ПОМЕСТИТЬ ОтложенныеРазницы
		|ИЗ
		|	РегистрНакопления.ОтложенныеКурсовыеРазницы.Остатки(
		|			&НачалоМесяца,
		|			Организация = &Организация
		|				И Счет = &Счет) КАК ОтложенныеРазницы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Валюта,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задолженность.Подразделение КАК Подразделение,
		|	Задолженность.Валюта КАК Валюта,
		|	Задолженность.Субконто1 КАК Субконто1,
		|	Задолженность.Субконто2 КАК Субконто2,
		|	Задолженность.Субконто3 КАК Субконто3,
		|	Задолженность.ВалютнаяСуммаНачальныйОстаток КАК ОстатокДолга,
		|	ВЫБОР
		|		КОГДА Задолженность.ВалютнаяСуммаКонечныйОстаток = 0
		|			ТОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток
		|		КОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток > 0
		|			ТОГДА ВЫБОР
		|					КОГДА Задолженность.ВалютнаяСуммаОборотКт > 0
		|						ТОГДА Задолженность.ВалютнаяСуммаОборотКт
		|					ИНАЧЕ 0
		|				КОНЕЦ + ВЫБОР
		|					КОГДА Задолженность.ВалютнаяСуммаОборотДт < 0
		|						ТОГДА -Задолженность.ВалютнаяСуммаОборотДт
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток < 0
		|			ТОГДА ВЫБОР
		|					КОГДА Задолженность.ВалютнаяСуммаОборотДт > 0
		|						ТОГДА -Задолженность.ВалютнаяСуммаОборотДт
		|					ИНАЧЕ 0
		|				КОНЕЦ + ВЫБОР
		|					КОГДА Задолженность.ВалютнаяСуммаОборотКт < 0
		|						ТОГДА Задолженность.ВалютнаяСуммаОборотКт
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПогашениеДолга
		|ПОМЕСТИТЬ Задолженность
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоМесяца, &КонецМесяца, , , Счет = &Счет, , Организация = &Организация) КАК Задолженность
		|ГДЕ
		|	Задолженность.ВалютнаяСуммаНачальныйОстаток <> 0
		|	И ВЫБОР
		|			КОГДА Задолженность.ВалютнаяСуммаКонечныйОстаток = 0
		|				ТОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток
		|			КОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток > 0
		|				ТОГДА ВЫБОР
		|						КОГДА Задолженность.ВалютнаяСуммаОборотКт > 0
		|							ТОГДА Задолженность.ВалютнаяСуммаОборотКт
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА Задолженность.ВалютнаяСуммаОборотДт < 0
		|							ТОГДА -Задолженность.ВалютнаяСуммаОборотДт
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОГДА Задолженность.ВалютнаяСуммаНачальныйОстаток < 0
		|				ТОГДА ВЫБОР
		|						КОГДА Задолженность.ВалютнаяСуммаОборотДт > 0
		|							ТОГДА -Задолженность.ВалютнаяСуммаОборотДт
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА Задолженность.ВалютнаяСуммаОборотКт < 0
		|							ТОГДА Задолженность.ВалютнаяСуммаОборотКт
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Валюта,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтложенныеРазницы.Счет КАК Счет,
		|	ОтложенныеРазницы.Подразделение КАК Подразделение,
		|	ОтложенныеРазницы.Валюта КАК Валюта,
		|	ОтложенныеРазницы.Субконто1 КАК Субконто1,
		|	ОтложенныеРазницы.Субконто2 КАК Субконто2,
		|	ОтложенныеРазницы.Субконто3 КАК Субконто3,
		|	ОтложенныеРазницы.Доход КАК ОтложенныйДоход,
		|	ОтложенныеРазницы.Расход КАК ОтложенныйРасход,
		|	Задолженность.ОстатокДолга КАК ОстатокДолга,
		|	Задолженность.ПогашениеДолга КАК ПогашениеДолга
		|ИЗ
		|	ОтложенныеРазницы КАК ОтложенныеРазницы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
		|		ПО ОтложенныеРазницы.Подразделение = Задолженность.Подразделение
		|			И ОтложенныеРазницы.Валюта = Задолженность.Валюта
		|			И ОтложенныеРазницы.Субконто1 = Задолженность.Субконто1
		|			И ОтложенныеРазницы.Субконто2 = Задолженность.Субконто2
		|			И ОтложенныеРазницы.Субконто3 = Задолженность.Субконто3
		|ГДЕ
		|	(Задолженность.ОстатокДолга > 0
		|				И Задолженность.ПогашениеДолга > 0
		|			ИЛИ Задолженность.ОстатокДолга < 0
		|				И Задолженность.ПогашениеДолга < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Валюта,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3";
		
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет", СтрокаСчета.Счет);
		
		// Изменяем запрос к бухгалтерским остаткам в соответствие со свойствами счета:
		// Пустое подразделение, если учет по подразделениям не ведется
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.Счет);
		Если Не СвойстваСчета.УчетПоПодразделениям Тогда
			ТекстПоиска = "Задолженность.Подразделение КАК Подразделение";
			ТекстЗамены = "&ПустоеПодразделение КАК Подразделение";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
			Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		КонецЕсли;
		// Пустое значение нужного типа, если субконто оборотное
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета[СтрШаблон("ВидСубконто%1ТолькоОбороты", НомерСубконто)] Тогда
				ТекстПоиска = СтрШаблон("Задолженность.Субконто%1 КАК Субконто%1", НомерСубконто);
				ТекстЗамены = СтрШаблон("&ПустоеСубконто%1 КАК Субконто%1", НомерСубконто);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
				ТипыСубконто = СвойстваСчета[СтрШаблон("ВидСубконто%1ТипЗначения", НомерСубконто)];
				ПустоеСубконто = ТипыСубконто.ПривестиЗначение(Неопределено);
				Запрос.УстановитьПараметр(СтрШаблон("ПустоеСубконто%1", НомерСубконто), ПустоеСубконто);
			КонецЕсли;
		КонецЦикла;
		// Неопределено, если субконто с таким номером нет на счете
		Для НомерСубконто = СвойстваСчета.КоличествоСубконто + 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			ТекстПоиска = СтрШаблон("Задолженность.Субконто%1 КАК Субконто%1", НомерСубконто);
			ТекстЗамены = СтрШаблон("НЕОПРЕДЕЛЕНО КАК Субконто%1", НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОстатокДолга = 0 Или Выборка.ПогашениеДолга = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоэффициентПогашения = Мин(1, Выборка.ПогашениеДолга / Выборка.ОстатокДолга);
			
			НоваяСтрока = ТаблицаРеализацияРазниц.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			РеализованныйДоход = Окр(Выборка.ОтложенныйДоход * КоэффициентПогашения, 2);
			НоваяСтрока.РеализованныйДоход = РеализованныйДоход;
			РеализованныйРасход = Окр(Выборка.ОтложенныйРасход * КоэффициентПогашения, 2);
			НоваяСтрока.РеализованныйРасход = РеализованныйРасход;
		
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ТаблицаРеализацияРазниц;
	
КонецФункции

Функция НовыйТаблицаРеализацияОтложенныхКурсовыхРазниц()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Результат.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	Результат.Колонки.Добавить("Субконто1", ОписаниеТиповСубконто);
	Результат.Колонки.Добавить("Субконто2", ОписаниеТиповСубконто);
	Результат.Колонки.Добавить("Субконто3", ОписаниеТиповСубконто);
	Результат.Колонки.Добавить("ОтложенныйДоход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("ОтложенныйРасход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("ОстатокДолга", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("ПогашениеДолга", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("РеализованныйДоход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("РеализованныйРасход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Возврат Результат;
	
КонецФункции

Процедура СформироватьДвиженияРеализацияОтложенныхКурсовыхРазниц(ТаблицаРеализацияОтложенныхРазниц, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеализацияОтложенныхРазниц) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Организация = Реквизиты.Организация;
	Период = Реквизиты.Период;
	
	// Расход по регистру "Отложенные курсовые разницы"
	
	Для каждого СтрокаТаблицы Из ТаблицаРеализацияОтложенныхРазниц Цикл
		
		НовоеДвижение = Движения.ОтложенныеКурсовыеРазницы.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаТаблицы);
		НовоеДвижение.Период = Период;
		НовоеДвижение.Организация = Организация;
		НовоеДвижение.Доход = СтрокаТаблицы.РеализованныйДоход;
		НовоеДвижение.Расход = СтрокаТаблицы.РеализованныйРасход;
		
	КонецЦикла;
	
	// Проводки
	
	СтатьяКурсовыеРазницы = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("КурсовыеРазницы");
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	ТаблицаРеализацияРазницПоПодразделениям = ТаблицаРеализацияОтложенныхРазниц.Скопировать(, 
		"Подразделение,РеализованныйДоход,РеализованныйРасход");
	ТаблицаРеализацияРазницПоПодразделениям.Свернуть("Подразделение", "РеализованныйДоход,РеализованныйРасход");
	
	СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;   // 91.01
	СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СчетОтложенныхДоходов = ПланыСчетов.Хозрасчетный.ОтложенныеДоходыПоКурсовымРазницам;   // 98.КР
	СчетОтложенныхРасходов = ПланыСчетов.Хозрасчетный.ОтложенныеРасходыПоКурсовымРазницам; // 97.КР
	
	СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов);
	СвойстваСчетаРасходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасходов);
	СвойстваСчетаОтложенныхДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтложенныхДоходов);
	СвойстваСчетаОтложенныхРасходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтложенныхРасходов);
	
	Для каждого СтрокаТаблицы Из ТаблицаРеализацияРазницПоПодразделениям Цикл
		
		// Проводка Дт 98.КР Кт 91.01
		РеализованныйДоход = СтрокаТаблицы.РеализованныйДоход;
		Если РеализованныйДоход <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание = НСтр("ru='Признаны доходы по отложенным курсовым разницам'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			Проводка.СчетДт = СчетОтложенныхДоходов;
			Если СвойстваСчетаОтложенныхДоходов.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СчетДоходов;
			Если СвойстваСчетаДоходов.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтатьяКурсовыеРазницы);
			
			Проводка.Сумма = 0;
			Проводка.СуммаНУДт = РеализованныйДоход;
			Проводка.СуммаНУКт = РеализованныйДоход;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаВРДт = -РеализованныйДоход;
				Проводка.СуммаВРКт = -РеализованныйДоход;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводка Дт 91.02 Кт 97.КР
		РеализованныйРасход = СтрокаТаблицы.РеализованныйРасход;
		Если РеализованныйРасход <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = Период;
			Проводка.Организация = Организация;
			Проводка.Содержание = НСтр("ru='Признаны расходы по отложенным курсовым разницам'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			Проводка.СчетДт = СчетРасходов;
			Если СвойстваСчетаРасходов.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтатьяКурсовыеРазницы);
			
			Проводка.СчетКт = СчетОтложенныхРасходов;
			Если СвойстваСчетаОтложенныхРасходов.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = 0;
			Проводка.СуммаНУДт = РеализованныйРасход;
			Проводка.СуммаНУКт = РеализованныйРасход;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаВРДт = -РеализованныйРасход;
				Проводка.СуммаВРКт = -РеализованныйРасход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ОтложенныеКурсовыеРазницы.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияРасчетРеализацииОтложенныхКурсовыхРазниц(ТаблицаРеализацияОтложенныхРазниц, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеализацияОтложенныхРазниц) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	ПериодРасчета = НачалоДня(КонецМесяца(Реквизиты.Период));
	Для каждого СтрокаТаблицы Из ТаблицаРеализацияОтложенныхРазниц Цикл
		
		НовоеДвижение = Движения.РасчетРеализацииОтложенныхКурсовыхРазниц.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаТаблицы);
		НовоеДвижение.ПериодРасчета = ПериодРасчета;
		НовоеДвижение.Организация = Реквизиты.Организация;
		
	КонецЦикла;
	
	Движения.РасчетРеализацииОтложенныхКурсовыхРазниц.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

Функция ОцениватьПодотчетныеСуммыПоКурсуАвансов(Дата) Экспорт
	
	// Суммы на 71 счете оцениваются с учетом курса авансов с 01.01.2020 г.
	Возврат Дата >= '2020-01-01';
	
КонецФункции

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"         // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"    // <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация"     // <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "ЭтоАванс,"                      // <Булево> - признак авансовых расчетов
	+ "КорректироватьСтоимостьАренды," // <Булево> - признак необходимости скорректировать стоимотсь аренды на счете 01.К
	+ "Счет,"                          // <ПланСчетовСсылка.Хозрасчетный> - переоцениваемый счет
	+ "Подразделение,"                 // <Ссылка на справочник подразделений> - подразделение, по которому учитывается переоценка
	+ "Субконто1,"                     // <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"                     // <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"                     // <> - значение аналитики переоцениваемого счета
	+ "Валюта,"                        // <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "РасчетыВУсловныхЕдиницах,"      // <Булево> - признак учета расчетов в условных единицах
	+ "ПереоцениватьПоНУпосле2015,"    // <Булево> - признак учета расчетов в условных единицах
	+ "СуммаВВалюте,"                  // <Число(15,2)> - 
	+ "СуммаВРублях,"                  // <Число(15,2)> - 
	+ "СуммаВРубляхНУ,"                // <Число(15,2)> - 
	+ "КурсПереоценки,"                // <Число(10,4)> - 
	+ "Кратность,"                     // <Число(10,0)> - 
	+ "СуммаПереоценки,"               // <Число(15,2)> - 
	+ "СуммаПереоценкиНУ,"             // <Число(15,2)> - 
	+ "ОтложенныйДоход,"               // <Число(15,2)> - 
	+ "ОтложенныйРасход,"              // <Число(15,2)> - 
	;
	Параметры.Вставить("ТаблицаПереоценка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВалютныхОстатков, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРасчетПереоценкиВалютныхСредств(ТаблицаПереоценки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаПереоценки) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасчетПереоценкиВалютныхСредств(ТаблицаПереоценки, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СчетаПереоценки = Параметры.РасчетПереоценки.ВыгрузитьКолонку("Счет");
	РазличныеСчетаПереоценки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РазличныеСчетаПереоценки, СчетаПереоценки, Истина);
	ЗабалансовыеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(РазличныеСчетаПереоценки, "Забалансовый");
	
	Для каждого СтрокаТаблицы Из Параметры.РасчетПереоценки Цикл
		
		Если ЗабалансовыеСчета[СтрокаТаблицы.Счет] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.РасчетПереоценкиВалютныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.РасчетПереоценкиВалютныхСредств.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчетПереоценкиВалютныхСредств(ТаблицаПереоценки, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"         // <Дата> - дата документа
	+ "Регистратор,"    // <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация"     // <СправочникСсылка.Организации> - организация документа
	;
	
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", Реквизиты);
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "ПериодРасчета,"                 // <Дата> - месяц расчета
	+ "Счет,"                          // <ПланСчетовСсылка.Хозрасчетный> - переоцениваемый счет
	+ "Подразделение,"                 // <Ссылка на справочник подразделений> - подразделение, по которому учитывается переоценка
	+ "Субконто1,"                     // <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"                     // <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"                     // <> - значение аналитики переоцениваемого счета
	+ "Валюта,"                        // <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "НомерЗаписи,"                   // <Число(1,0)>  - номер записи с повторяющейся аналитикой
	+ "КурсПереоценки,"                // <Число(10,4)> - курс переоценки
	+ "Кратность,"                     // <Число(10,0)> - кратность курса
	+ "ОстатокВВалюте,"                // <Число(15,2)> - остаток в валюте на момент переоценки
	+ "ОстатокВРублях,"                // <Число(15,2)> - остаток в рублях на момент переоценки
	+ "ОстатокПоКурсуПереоценки,"      // <Число(15,2)> - остаток в рублях, рассчитанный по курсу на дату переоценки
	+ "СуммаПереоценки,"               // <Число(15,2)> - сумма переоценки (БУ)
	+ "ЭтоТребованиеОбязательство,"    // <Булево> - переоценивается требование или обязательство (НУ)
	+ "ОстатокВРубляхНУ,"              // <Число(15,2)> - остаток в рублях на момент переоценки (НУ)
	+ "ЗадолженностьВВалюте,"          // <Число(15,2)> - остаток задолженности в валюте на момент документа (НУ)
	+ "ЗадолженностьНУ,"               // <Число(15,2)> - остаток задолженности в рублях на момент документа (НУ)
	+ "ПогашениеЗадолженностиВВалюте," // <Число(15,2)> - сумма погашения задолженности в валюте документом (НУ)
	+ "ПогашениеЗадолженностиНУ,"      // <Число(15,2)> - сумма погашения задолженности в рублях документом (НУ)
	+ "ПогашениеПоКурсуОстаткаНУ,"     // <Число(15,2)> - сумма погашения в рублях по курсу остатка задолженности (НУ)
	+ "СуммаПереоценкиНУ"              // <Число(15,2)> - сумма переоценки (НУ)
	;
	РасчетПереоценки = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПереоценки, СписокОбязательныхКолонок);
	
	Параметры.Вставить("РасчетПереоценки", РасчетПереоценки);
	
	Возврат Параметры;
	
КонецФункции

// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ - ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Корректируем остатки на счете 01.К в НУ на сумму переоценки по счетам арендных обязательств.
// На счете 01.К учитывается разница между стоимостью амортизируемого имущества в НУ 
// и номинальной рублевой оценкой арендного обязательства.
// При изменении рублевой оценки обязательства на ту же сумму изменяем остаток по О1.К.
//
Процедура СформироватьПроводкиКорректировкаСтоимостиАрендованногоИмуществаПриПереоценке(Проводки, ТаблицаПереоценка, СчетаПереоценкиКеш, Реквизиты)
	
	ТаблицаПереоценка.Индексы.Добавить("КорректироватьСтоимостьАренды");
	Отбор = Новый Структура("КорректироватьСтоимостьАренды", Истина);
	ТаблицаКорректировкиСтоимостиАренды = ТаблицаПереоценка.Скопировать(Отбор);
	
	Если Не ЗначениеЗаполнено(ТаблицаКорректировкиСтоимостиАренды) Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Реквизиты.Период;
	Организация = Реквизиты.Организация;
	Регистратор = Реквизиты.Регистратор;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	ВЫРАЗИТЬ(ТаблицаКорректировки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫРАЗИТЬ(ТаблицаКорректировки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор
		|ПОМЕСТИТЬ КонтрагентыДоговоры
		|ИЗ
		|	&ТаблицаКорректировки КАК ТаблицаКорректировки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервоначальныеСведенияОСБухгалтерскийУчет.Контрагент КАК Контрагент,
		|	ПервоначальныеСведенияОСБухгалтерскийУчет.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость КАК СуммаПоступления
		|ПОМЕСТИТЬ ПервоначальныеСведенияОС
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&Период,
		|			(Организация, Контрагент, ДоговорКонтрагента) В
		|				(ВЫБРАТЬ
		|					КонтрагентыДоговоры.Организация,
		|					КонтрагентыДоговоры.Контрагент,
		|					КонтрагентыДоговоры.Договор
		|				ИЗ
		|					КонтрагентыДоговоры)) КАК ПервоначальныеСведенияОСБухгалтерскийУчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОСОрганизаций.Организация КАК Организация,
		|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
		|ПОМЕСТИТЬ ДатыПоследнихСостояний
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|ГДЕ
		|	СостоянияОСОрганизаций.ДатаСостояния < &Период
		|	И СостоянияОСОрганизаций.Организация = &Организация
		|	И СостоянияОСОрганизаций.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				ПервоначальныеСведенияОС.ОсновноеСредство
		|			ИЗ
		|				ПервоначальныеСведенияОС)
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияОСОрганизаций.ОсновноеСредство,
		|	СостоянияОСОрганизаций.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ОсновныеСредстваНаУчете
		|ИЗ
		|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
		|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
		|ГДЕ
		|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Контрагент КАК Контрагент,
		|	ПервоначальныеСведенияОС.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОС.СуммаПоступления КАК СуммаПоступления
		|ИЗ
		|	ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
		|ГДЕ
		|	ПервоначальныеСведенияОС.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				ОсновныеСредстваНаУчете.ОсновноеСредство
		|			ИЗ
		|				ОсновныеСредстваНаУчете)");
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаКорректировки", ТаблицаКорректировкиСтоимостиАренды);
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	ТаблицаОС.Колонки.Добавить("СуммаКорректировки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаОС.Индексы.Добавить("Контрагент,ДоговорКонтрагента");
	
	СодержаниеПроводок = НСтр("ru='Корректировка стоимости арендованного имущества'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	СчетКорректировкаСтоимости = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
	СвойстваСчетаКорректировкаСтоимости = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		СчетКорректировкаСтоимости);
	
	// Если на счете 01.К ведется учет по подразделениям, корректировку стоимости относим на подразделение,
	// в котором числится ОС на момент корректировки
	Если СвойстваСчетаКорректировкаСтоимости.УчетПоПодразделениям Тогда
		
		ТаблицаОС.Индексы.Добавить("ОсновноеСредство");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
			|	МестонахождениеОС.Местонахождение КАК ПодразделениеОС
			|ИЗ
			|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
			|			&Период,
			|			Организация = &Организация
			|				И ОсновноеСредство В (&ОсновныеСредства)) КАК МестонахождениеОС");
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(Дата, Регистратор));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаОС = ТаблицаОС.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
			Если СтрокаОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОС.Подразделение = Выборка.ПодразделениеОС;
		КонецЦикла; 
		
	КонецЕсли;
	
	Для каждого СтрокаКорректировки Из ТаблицаКорректировкиСтоимостиАренды Цикл
		
		Отбор = Новый Структура("Контрагент,ДоговорКонтрагента", 
			СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2);
		ТаблицаОСПоДоговору = ТаблицаОС.Скопировать(Отбор);
		Если Не ЗначениеЗаполнено(ТаблицаОСПоДоговору) Тогда
			Продолжить;
		КонецЕсли;
		
		// Увеличение оценки обязательства (Дт 91.02 Кт 76.х7.1) отражается в таблице переоценки с "минусом",
		// уменьшение оценки (Дт 76.х7.1 Кт 91.01) с "плюсом". Для корректировки меняем знак суммы.
		ИтогКорректировки = - СтрокаКорректировки.СуммаПереоценки;
		
		СуммыПоступления = ТаблицаОСПоДоговору.ВыгрузитьКолонку("СуммаПоступления");
		СуммыКорректировки = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ИтогКорректировки, СуммыПоступления);
		Если СуммыКорректировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОСПоДоговору.ЗагрузитьКолонку(СуммыКорректировки, "СуммаКорректировки");
		
		Для каждого СтрокаОС Из ТаблицаОСПоДоговору Цикл
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = СодержаниеПроводок;
			
			Если СтрокаОС.СуммаКорректировки > 0 Тогда
				
				Проводка.СчетКт = СтрокаКорректировки.Счет;
				СвойстваСчетаКт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
					Проводка.СчетКт, Проводка.СубконтоКт, СчетаПереоценкиКеш,
					СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
					
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаКорректировки.Подразделение;
				КонецЕсли;
				
				Проводка.ВалютаКт = СтрокаКорректировки.Валюта;
				
				Проводка.Сумма = 0;
				
				Проводка.СчетДт = СчетКорректировкаСтоимости;
				Проводка.СубконтоДт.ОсновныеСредства = СтрокаОС.ОсновноеСредство;
				
				Проводка.СуммаНУДт = СтрокаОС.СуммаКорректировки;
				Проводка.СуммаВРДт = - СтрокаОС.СуммаКорректировки;
				
				Если СвойстваСчетаКорректировкаСтоимости.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаОС.Подразделение;
				КонецЕсли;
				
			Иначе
				
				Проводка.СчетДт = СтрокаКорректировки.Счет;
				СвойстваСчетаДт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
					Проводка.СчетДт, Проводка.СубконтоДт, СчетаПереоценкиКеш,
					СтрокаКорректировки.Субконто1, СтрокаКорректировки.Субконто2, СтрокаКорректировки.Субконто3);
					
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаКорректировки.Подразделение;
				КонецЕсли;
				
				Проводка.ВалютаДт = СтрокаКорректировки.Валюта;
				
				Проводка.Сумма = 0;
				
				Проводка.СчетКт = СчетКорректировкаСтоимости;
				Проводка.СубконтоКт.ОсновныеСредства = СтрокаОС.ОсновноеСредство;
				
				Проводка.СуммаНУКт = - СтрокаОС.СуммаКорректировки;
				Проводка.СуммаВРКт = СтрокаОС.СуммаКорректировки;
				
				Если СвойстваСчетаКорректировкаСтоимости.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаОС.Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьПустуюТаблицуДляПереоценки()
	
	// См. также СвернутьТаблицуДляПереоценки, ПодготовитьТаблицуВалютныхОстатковВсе, ПодготовитьПараметрыПереоценкаВалютныхОстатков
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	
	ТаблицаДляВозврата.Колонки.Добавить("ПериодРасчета",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДляВозврата.Колонки.Добавить("Счет",                          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляВозврата.Колонки.Добавить("СчетПредставление",             Новый ОписаниеТипов("Строка"));
	ТаблицаДляВозврата.Колонки.Добавить("СчетНаименование",              Новый ОписаниеТипов("Строка"));
	ТаблицаДляВозврата.Колонки.Добавить("Подразделение",                 Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ТаблицаДляВозврата.Колонки.Добавить("Субконто1",                      ОписаниеТиповСубконто);
	ТаблицаДляВозврата.Колонки.Добавить("Субконто2",                      ОписаниеТиповСубконто);
	ТаблицаДляВозврата.Колонки.Добавить("Субконто3",                      ОписаниеТиповСубконто);
	ТаблицаДляВозврата.Колонки.Добавить("Валюта",                         Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДляВозврата.Колонки.Добавить("ВалютаПредставление",            Новый ОписаниеТипов("Строка"));
	ТаблицаДляВозврата.Колонки.Добавить("НомерБанковскогоСчета",          ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаДляВозврата.Колонки.Добавить("ВидДоговора",                    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ТаблицаДляВозврата.Колонки.Добавить("РасчетыВУсловныхЕдиницах",       Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("ДатаВозникновенияЗадолженности", Новый ОписаниеТипов("Дата"));
	ТаблицаДляВозврата.Колонки.Добавить("ЕстьСубконтоДокументыРасчетов",  Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("ЭтоАванс",                       Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("КорректироватьСтоимостьАренды",  Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("ПереоцениватьПоНУпосле2015",     Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("КурсПереоценки",                 ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	ТаблицаДляВозврата.Колонки.Добавить("Кратность",                      ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаДляВозврата.Колонки.Добавить("НомерЗаписи",                    ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	// Суммы остатков на момент проведения документа
	ТаблицаДляВозврата.Колонки.Добавить("СуммаВВалюте",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("СуммаВРублях",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("СуммаВРубляхНУ",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы сформированных проводок документа 
	ТаблицаДляВозврата.Колонки.Добавить("СуммаДокументаВВалюте",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("СуммаДокументаВРублях",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("СуммаДокументаНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы остатков на момент переоценки
	ТаблицаДляВозврата.Колонки.Добавить("ОстатокВВалюте",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ОстатокВРублях",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ОстатокВРубляхНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ОстатокПоКурсуПереоценки",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы переоценки - результат расчета
	ТаблицаДляВозврата.Колонки.Добавить("СуммаПереоценки",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("СуммаПереоценкиНУ",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы для справки-расчета переоценки требований и обязательств в НУ с 2022 года
	ТаблицаДляВозврата.Колонки.Добавить("ЭтоТребованиеОбязательство",     Новый ОписаниеТипов("Булево"));
	ТаблицаДляВозврата.Колонки.Добавить("ЗадолженностьВВалюте",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ЗадолженностьНУ",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ПогашениеЗадолженностиВВалюте",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ПогашениеЗадолженностиНУ",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ПогашениеПоКурсуОстаткаНУ",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДляВозврата.Колонки.Добавить("ОтложенныйДоход",  БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаДляВозврата.Колонки.Добавить("ОтложенныйРасход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	// Т.к. в таблице валютных остатков могут быть строки которые по каким-то причинам не подлежат переоценке,
	// то чтобы не делать по ним движения и, если это необходимо, сообщить пользователю о технической ошибке учета
	// установим этот признак.
	ТаблицаДляВозврата.Колонки.Добавить("ПризнакОшибки",                  Новый ОписаниеТипов("Булево"));
	// "Вид ошибки": 
	// 0 - переоценка не требуется; 
	// 1 - незаполнена валюта по строке остатка;
	// 2 - не указан документ расчетов с контрагентом в строке остатка по расчетам в у.е.
	ТаблицаДляВозврата.Колонки.Добавить("ВидОшибки",                      ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	Возврат ТаблицаДляВозврата; 
	
КонецФункции	

Функция ПодготовитьТаблицуВалютныхОстатковПоДокументу(СтруктураПараметров, Движения, ЕстьВалютныеСчета)
	
	Ссылка          = СтруктураПараметров.Регистратор;
	Дата            = СтруктураПараметров.Период;
	Организация     = СтруктураПараметров.Организация;
	ВалютаДокумента = СтруктураПараметров.ВалютаДокумента;
	Проводки        = Движения.Хозрасчетный;
	
	ТаблицаВалютныхОстатков = СоздатьПустуюТаблицуДляПереоценки();
	
	Если НЕ ЕстьВалютныеСчета Тогда
		Возврат ТаблицаВалютныхОстатков;
	КонецЕсли;
	
	МоментВремени = Новый МоментВремени(Дата, Ссылка);
	
	СчетаПодлежащиеПереоценке	= БухгалтерскийУчетПереопределяемый.СчетаПодлежащиеПереоценке();
	СчетаРасчетовСКонтрагентами	= ПолучитьСчетаРасчетовСКонтрагентами(СчетаПодлежащиеПереоценке);
	СчетаБанк					= ПолучитьСчетаБанк(СчетаПодлежащиеПереоценке);
	
	// Получение остатков только по счетам и субконто, которые уже содержатся в переданном наборе записей регистра "Хозрасчетный"
	// Оборотные субконто переданного набора записей пропускаются
	
	// Формирование таблицы счетов и субконто для переоценки
	// Заполнение полей ИспользоватьСубконтоХ:
	// 		- если субконто с номером Х нет на счете - Ложь
	// 		- если субконто с номером Х есть и оно необоротное - Истина
	// 		- если субконто с номером Х есть и оно оборотное - Ложь
	
	ТаблицаДляПереоценки = Новый ТаблицаЗначений;
	ТаблицаДляПереоценки.Колонки.Добавить("Счет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляПереоценки.Колонки.Добавить("Подразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаДляПереоценки.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто1", Новый ОписаниеТипов("Булево")); 
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто2", Новый ОписаниеТипов("Булево"));
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто3", Новый ОписаниеТипов("Булево"));
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто1");
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто2");
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто3");
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	ЗначенияНеиспользуемыхСубконто = Новый Соответствие; // пустые значения по-умолчанию
	
	Для каждого Проводка Из Проводки Цикл
		
		Если СчетаПодлежащиеПереоценке.Найти(Проводка.СчетДт) <> Неопределено Тогда
			ДополнитьТаблицуПереоценки(ТаблицаДляПереоценки, Проводка, "Дт", ВидыСубконтоСчетов, ЗначенияНеиспользуемыхСубконто);
		КонецЕсли;
		Если СчетаПодлежащиеПереоценке.Найти(Проводка.СчетКт) <> Неопределено Тогда
			ДополнитьТаблицуПереоценки(ТаблицаДляПереоценки, Проводка, "Кт", ВидыСубконтоСчетов, ЗначенияНеиспользуемыхСубконто);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаДляПереоценки.Количество() = 0 Тогда // В проводках нет счетов для переоценки
		Возврат ТаблицаВалютныхОстатков;
	КонецЕсли;

	ТаблицаДляПереоценки.Свернуть(
		"Счет, Подразделение, Субконто1, Субконто2, Субконто3, ИспользоватьСубконто1, ИспользоватьСубконто2, ИспользоватьСубконто3, Валюта");
	
	// По строкам подготовленной таблицы для переоценки выполняются запросы к остаткам
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстатки.Счет.Наименование КАК СчетНаименование,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Валюта) КАК ВалютаПредставление,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.БанковскиеСчета).НомерСчета КАК НомерБанковскогоСчета,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	&ИспользоватьСубконто3 КАК ЕстьСубконтоДокументыРасчетов,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК СуммаВВалюте,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаВРублях,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.НалоговыйУчет
	|				И НЕ ХозрасчетныйОстатки.Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваВал), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваУЕ))
	|			ТОГДА ХозрасчетныйОстатки.СуммаНУОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВРубляхНУ,
	|	&ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет = &Счет,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение ЕСТЬ NULL)
	|				И Валюта = &Валюта
	|				И Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2
	|				И Субконто3 = &Субконто3) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет";
	
	// Заменим обращение к реквизитам договора через переопределяемые функции.
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
										"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора",
										БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидДоговора("ХозрасчетныйОстатки.Субконто2"));
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
										"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах",
										БухгалтерскийУчетПереопределяемый.ТекстЗапросаРасчетыВУЕ("ХозрасчетныйОстатки.Субконто2"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Для каждого СтрокаДляПереоценки Из ТаблицаДляПереоценки Цикл
		
		Запрос.УстановитьПараметр("Счет",          СтрокаДляПереоценки.Счет);
		Запрос.УстановитьПараметр("Подразделение", СтрокаДляПереоценки.Подразделение);
		Запрос.УстановитьПараметр("Валюта",        СтрокаДляПереоценки.Валюта);
		Запрос.УстановитьПараметр("Субконто1",     СтрокаДляПереоценки.Субконто1);
		Запрос.УстановитьПараметр("Субконто2",     СтрокаДляПереоценки.Субконто2);
		Запрос.УстановитьПараметр("Субконто3",     СтрокаДляПереоценки.Субконто3);
		Запрос.УстановитьПараметр("ИспользоватьСубконто3", СтрокаДляПереоценки.ИспользоватьСубконто3);
		Если СтрокаДляПереоценки.ИспользоватьСубконто3 И ЗначениеЗаполнено(СтрокаДляПереоценки.Субконто3) Тогда
			ДатаВозникновенияЗадолженности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляПереоценки.Субконто3, "Дата");
		Иначе
			ДатаВозникновенияЗадолженности = '00010101';
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаВозникновенияЗадолженности", ДатаВозникновенияЗадолженности);
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаДляПереоценки.Счет];
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоСчета.ВыгрузитьКолонку("ВидСубконто"));
		
		ТекстЗапроса = ШаблонТекстаЗапроса;
		
		ЭтоСчетБанк = СчетаБанк.Найти(СтрокаДляПереоценки.Счет) <> Неопределено;
		Если НЕ ЭтоСчетБанк Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.БанковскиеСчета).НомерСчета КАК НомерБанковскогоСчета",
				"НЕОПРЕДЕЛЕНО КАК НомерБанковскогоСчета");
				
		КонецЕсли;
		
		ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(СтрокаДляПереоценки.Счет) <> Неопределено;
		Если НЕ ЭтоСчетРасчетов Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ЕСТЬNULL(" + БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидДоговора("ХозрасчетныйОстатки.Субконто2") + ", НЕОПРЕДЕЛЕНО) КАК ВидДоговора",
				"НЕОПРЕДЕЛЕНО КАК ВидДоговора");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ЕСТЬNULL(" + БухгалтерскийУчетПереопределяемый.ТекстЗапросаРасчетыВУЕ("ХозрасчетныйОстатки.Субконто2") + ", ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах",
				"ЛОЖЬ КАК РасчетыВУсловныхЕдиницах");
			
		КонецЕсли;
		
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто1", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто1 = &Субконто1", "");
		КонецЕсли;
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто2 = &Субконто2", "");
		КонецЕсли;
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто3 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто3", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто3 = &Субконто3", "");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамРезультата = Результат.Выбрать();
		
		Пока ВыборкаПоСтрокамРезультата.Следующий() Цикл
			
			НоваяСтрока = ТаблицаВалютныхОстатков.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСтрокамРезультата);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	ИсправитьПустыеСубконтоВТаблицеТаблицаВалютныхОстатков(ТаблицаВалютныхОстатков);
	ТаблицаВалютныхОстатков.ЗаполнитьЗначения(КонецМесяца(Дата), "ПериодРасчета");
	
	Возврат ТаблицаВалютныхОстатков;
	
КонецФункции

Процедура ИсправитьПустыеСубконтоВТаблицеТаблицаВалютныхОстатков(ТаблицаВалютныхОстатков)
	
	// Оборотные субконто замененяются на пустую ссылку или Неопределено, если субконто не единственное.
	ПредыдущийСчет = Неопределено;
	ЗначенияНеиспользуемыхСубконто = Новый Соответствие; // пустые значения по-умолчанию
	Для каждого СтрокаОстаток Из ТаблицаВалютныхОстатков Цикл
		
		Если ПредыдущийСчет <> СтрокаОстаток.Счет Тогда
			
			ПредыдущийСчет = СтрокаОстаток.Счет;
			ОборотныеСубконтоПростыхТипов = Новый Структура;
			ВидыСубконтоСчета = СтрокаОстаток.Счет.ВидыСубконто;
			Для НомерСубконто = 1 По ВидыСубконтоСчета.Количество() Цикл
				
				СтрокаВидаСубконто = ВидыСубконтоСчета[НомерСубконто - 1];
				Если Не СтрокаВидаСубконто.ТолькоОбороты Тогда
					Продолжить;
				КонецЕсли;
				
				ОборотныеСубконтоПростыхТипов.Вставить("Субконто" + НомерСубконто,
					БухгалтерскийУчет.ЗначениеПоУмолчаниюДляСубконто(СтрокаВидаСубконто, ЗначенияНеиспользуемыхСубконто));
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого СтрокаВидаСубконто Из ОборотныеСубконтоПростыхТипов Цикл
			СтрокаОстаток[СтрокаВидаСубконто.Ключ] = СтрокаВидаСубконто.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Объединяем данные из ТаблицаВалютныхОстатков с ранее определенными остатками на момент проведения документа
// с валютными и рублевыми суммами проводок из ранее сформированных движений документа.
//
Функция ПодготовитьТаблицуВалютныхДвиженийПоДокументу(СтруктураПараметров, ТаблицаВалютныхОстатков, Движения, ЕстьВалютныеСчета)
	
	Ссылка          = СтруктураПараметров.Регистратор;
	Дата            = СтруктураПараметров.Период;
	Организация     = СтруктураПараметров.Организация;
	ВалютаДокумента = СтруктураПараметров.ВалютаДокумента;
	Проводки        = Движения.Хозрасчетный;
	
	СчетаПодлежащиеПереоценке	= БухгалтерскийУчетПереопределяемый.СчетаПодлежащиеПереоценке();
	СчетаРасчетовСКонтрагентами	= ПолучитьСчетаРасчетовСКонтрагентами(СчетаПодлежащиеПереоценке);
	СчетаБанк					= ПолучитьСчетаБанк(СчетаПодлежащиеПереоценке);
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются

	Если ТаблицаВалютныхОстатков = Неопределено или ТаблицаВалютныхОстатков.Колонки.Количество() = 0 Тогда
		
		ТаблицаДляПереоценки = СоздатьПустуюТаблицуДляПереоценки();
		
	Иначе
		
		ТаблицаДляПереоценки = ТаблицаВалютныхОстатков.Скопировать();
		
	КонецЕсли;	
	
	Если НЕ ЕстьВалютныеСчета Тогда
		Возврат ТаблицаВалютныхОстатков;
	КонецЕсли;
	
	СуммыНалоговогоУчетаЗаполнены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Проводки.ДополнительныеСвойства, "СуммыНалоговогоУчетаЗаполнены", Ложь);
	
	Для каждого Проводка Из Проводки Цикл
		
		СчетДтПереоценивается = СчетаПодлежащиеПереоценке.Найти(Проводка.СчетДт) <> Неопределено;
		Если СчетДтПереоценивается Тогда
			
			СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			СтрокаДляПереоценки.Счет                = Проводка.СчетДт;
			СтрокаДляПереоценки.Подразделение       = Проводка.ПодразделениеДт;
			СтрокаДляПереоценки.Валюта              = ?(ЗначениеЗаполнено(Проводка.ВалютаДт), 
															Проводка.ВалютаДт, 
															Справочники.Валюты.ПустаяСсылка());
			СтрокаДляПереоценки.СчетПредставление   = СвойстваСчетаДт.Код;
			СтрокаДляПереоценки.ВалютаПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляПереоценки.Валюта, "Наименование");
			СтрокаДляПереоценки.СчетНаименование    = СвойстваСчетаДт.Наименование;
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[Проводка.СчетДт];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = Проводка.СчетДт.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(Проводка.СчетДт, ВидыСубконтоСчета);
			КонецЕсли;
			
			НомерБанковскогоСчета          = Неопределено;
			ВидДоговора                    = Неопределено;
			РасчетыВУсловныхЕдиницах       = Неопределено;
			ДатаВозникновенияЗадолженности = Неопределено;
			ЕстьСубконтоДокументыРасчетов  = Неопределено;
			
			ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(Проводка.СчетДт) <> Неопределено; 
			
			Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
				
				НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
				ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
				
				Если НЕ ИспользоватьСубконто Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокаДляПереоценки["Субконто" + НомерСубконто] = Проводка.СубконтоДт[СтрокаВидаСубконто.ВидСубконто];
				
				Если ТипЗнч(СтрокаДляПереоценки["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					НомерБанковскогоСчета = СтрокаДляПереоценки["Субконто" + НомерСубконто].НомерСчета;
				ИначеЕсли ЭтоСчетРасчетов 
					И ТипЗнч(СтрокаДляПереоценки["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					
					ВидДоговора              = СтрокаДляПереоценки["Субконто" + НомерСубконто].ВидДоговора;
					РасчетыВУсловныхЕдиницах = СтрокаДляПереоценки["Субконто" + НомерСубконто].РасчетыВУсловныхЕдиницах;
					
				ИначеЕсли ЭтоСчетРасчетов и НомерСубконто = 3 Тогда
					
					Если СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено Тогда
						ДатаВозникновенияЗадолженности = '00010101';
					Иначе	
						ДатаВозникновенияЗадолженности = СтрокаДляПереоценки["Субконто" + НомерСубконто].Дата;
					КонецЕсли;	
					
					ЕстьСубконтоДокументыРасчетов = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаДляПереоценки.НомерБанковскогоСчета          = НомерБанковскогоСчета;
			СтрокаДляПереоценки.ВидДоговора                    = ВидДоговора;
			СтрокаДляПереоценки.РасчетыВУсловныхЕдиницах       = РасчетыВУсловныхЕдиницах;
			СтрокаДляПереоценки.ДатаВозникновенияЗадолженности = ДатаВозникновенияЗадолженности;
			СтрокаДляПереоценки.ЕстьСубконтоДокументыРасчетов  = ЕстьСубконтоДокументыРасчетов;
			
			СтрокаДляПереоценки.СуммаДокументаВВалюте = -Проводка.ВалютнаяСуммаДт;
			СтрокаДляПереоценки.СуммаДокументаВРублях = -Проводка.Сумма;
			
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				СтрокаДляПереоценки.СуммаДокументаНУ = ?(Проводка.СуммаНУДт = 0 И Не СуммыНалоговогоУчетаЗаполнены,
					-Проводка.Сумма, 
					-Проводка.СуммаНУДт);
			Иначе
				СтрокаДляПереоценки.СуммаДокументаНУ = -Проводка.Сумма;
			КонецЕсли;
				
		КонецЕсли;
		
		СчетКтПереоценивается = СчетаПодлежащиеПереоценке.Найти(Проводка.СчетКт) <> Неопределено;
		Если СчетКтПереоценивается Тогда
			
			СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			СтрокаДляПереоценки.Счет                = Проводка.СчетКт;
			СтрокаДляПереоценки.Подразделение       = Проводка.ПодразделениеКт;
			СтрокаДляПереоценки.Валюта              = ?(ЗначениеЗаполнено(Проводка.ВалютаКт), 
															Проводка.ВалютаКт,
															Справочники.Валюты.ПустаяСсылка());
			СтрокаДляПереоценки.СчетПредставление   = СвойстваСчетаКт.Код;
			СтрокаДляПереоценки.ВалютаПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
																		СтрокаДляПереоценки.Валюта,
																		"Наименование");
			СтрокаДляПереоценки.СчетНаименование    = СвойстваСчетаКт.Наименование;
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[Проводка.СчетКт];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = Проводка.СчетКт.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(Проводка.СчетКт, ВидыСубконтоСчета);
			КонецЕсли;
			
			НомерБанковскогоСчета          = Неопределено;
			ВидДоговора                    = Неопределено;
			РасчетыВУсловныхЕдиницах       = Неопределено;
			ДатаВозникновенияЗадолженности = Неопределено;
			ЕстьСубконтоДокументыРасчетов  = Неопределено;
			
			ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(Проводка.СчетКт) <> Неопределено; 
			
			Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
				
				НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
				ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
				
				Если НЕ ИспользоватьСубконто Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокаДляПереоценки["Субконто" + НомерСубконто] = Проводка.СубконтоКт[СтрокаВидаСубконто.ВидСубконто];
				
				Если ТипЗнч(СтрокаДляПереоценки["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					НомерБанковскогоСчета = СтрокаДляПереоценки["Субконто" + НомерСубконто].НомерСчета;
				ИначеЕсли ЭтоСчетРасчетов 
					И ТипЗнч(СтрокаДляПереоценки["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					
					ВидДоговора              = СтрокаДляПереоценки["Субконто" + НомерСубконто].ВидДоговора;
					РасчетыВУсловныхЕдиницах = СтрокаДляПереоценки["Субконто" + НомерСубконто].РасчетыВУсловныхЕдиницах;
					
				ИначеЕсли ЭтоСчетРасчетов и НомерСубконто = 3 Тогда
					
					Если СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено Тогда
						ДатаВозникновенияЗадолженности = '00010101';
					Иначе	
						ДатаВозникновенияЗадолженности = СтрокаДляПереоценки["Субконто" + НомерСубконто].Дата;
					КонецЕсли;	
					
					ЕстьСубконтоДокументыРасчетов = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаДляПереоценки.НомерБанковскогоСчета          = НомерБанковскогоСчета;
			СтрокаДляПереоценки.ВидДоговора                    = ВидДоговора;
			СтрокаДляПереоценки.РасчетыВУсловныхЕдиницах       = РасчетыВУсловныхЕдиницах;
			СтрокаДляПереоценки.ДатаВозникновенияЗадолженности = ДатаВозникновенияЗадолженности;
			СтрокаДляПереоценки.ЕстьСубконтоДокументыРасчетов  = ЕстьСубконтоДокументыРасчетов;
			
			СтрокаДляПереоценки.СуммаДокументаВВалюте = Проводка.ВалютнаяСуммаКт;
			СтрокаДляПереоценки.СуммаДокументаВРублях = Проводка.Сумма;
			
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				СтрокаДляПереоценки.СуммаДокументаНУ = ?(Проводка.СуммаНУДт = 0 И Не СуммыНалоговогоУчетаЗаполнены,
					Проводка.Сумма, 
					Проводка.СуммаНУКт);
			Иначе
				СтрокаДляПереоценки.СуммаДокументаНУ = Проводка.Сумма;
			КонецЕсли;
				
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДляПереоценки.Сортировать("Счет");
	
	ИсправитьПустыеСубконтоВТаблицеТаблицаВалютныхОстатков(ТаблицаДляПереоценки);
	ТаблицаДляПереоценки.ЗаполнитьЗначения(КонецМесяца(Дата), "ПериодРасчета");
	
	Если ТаблицаДляПереоценки.Количество() = 0 Тогда // В проводках нет счетов для переоценки
		Возврат ТаблицаВалютныхОстатков;
	КонецЕсли;
	
	Возврат СвернутьТаблицуДляПереоценки(ТаблицаДляПереоценки);	
	
КонецФункции

Процедура ДополнитьТаблицуПереоценки(ТаблицаДляПереоценки, Проводка, СторонаПроводки,
										ВидыСубконтоСчетов, ЗначенияНеиспользуемыхСубконто)
	
	Счет = Проводка["Счет" + СторонаПроводки];

	СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
	СтрокаДляПереоценки.Счет          = Счет;
	СтрокаДляПереоценки.Подразделение = Проводка["Подразделение" + СторонаПроводки];
	СтрокаДляПереоценки.Валюта        = Проводка["Валюта" + СторонаПроводки];
	
	ВидыСубконтоСчета = ВидыСубконтоСчетов[Счет];
	Если ВидыСубконтоСчета = Неопределено Тогда
		ВидыСубконтоСчета = Счет.ВидыСубконто;
		ВидыСубконтоСчетов.Вставить(Счет, ВидыСубконтоСчета);
	КонецЕсли;

	НаборСубконто = Проводка["Субконто" + СторонаПроводки];
	Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл

		НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
		ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
		СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
		ИсходноеЗначение = НаборСубконто[СтрокаВидаСубконто.ВидСубконто];
		Если ИспользоватьСубконто Тогда

			СтрокаДляПереоценки["Субконто" + НомерСубконто] = ИсходноеЗначение;

		ИначеЕсли ИсходноеЗначение = Неопределено Или ИсходноеЗначение = Null Тогда

			СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;

		Иначе
			
			СтрокаДляПереоценки["Субконто" + НомерСубконто] = БухгалтерскийУчет.ЗначениеПоУмолчаниюДляСубконто(
				СтрокаВидаСубконто, ЗначенияНеиспользуемыхСубконто);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция СвернутьТаблицуДляПереоценки(ТаблицаДляСворачивания)
	
	ГруппируемыеКолонки = ""
	+"ПериодРасчета,"
	+"Счет,"
	+"СчетПредставление,"
	+"СчетНаименование,"
	+"Подразделение,"
	+"Субконто1,"
	+"Субконто2,"
	+"Субконто3,"
	+"Валюта,"
	+"ВалютаПредставление,"
	+"НомерБанковскогоСчета,"
	+"ВидДоговора,"
	+"РасчетыВУсловныхЕдиницах,"
	+"ДатаВозникновенияЗадолженности,"
	+"ЕстьСубконтоДокументыРасчетов,"
	+"ЭтоАванс,"
	+"ЭтоТребованиеОбязательство,"
	+"КорректироватьСтоимостьАренды,"
	+"ПереоцениватьПоНУпосле2015,"
	+"КурсПереоценки,"
	+"Кратность,"
	+"НомерЗаписи,"
	+"ПризнакОшибки,"
	+"ВидОшибки";
	
	СуммируемыеКолонки = ""
	+"СуммаВВалюте,"
	+"СуммаВРублях,"
	+"СуммаВРубляхНУ,"
	+"СуммаДокументаВВалюте,"
	+"СуммаДокументаВРублях,"
	+"СуммаДокументаНУ,"
	+"ОстатокВВалюте,"
	+"ОстатокВРублях,"
	+"ОстатокВРубляхНУ,"
	+"ОстатокПоКурсуПереоценки,"
	+"ЗадолженностьВВалюте,"
	+"ЗадолженностьНУ,"
	+"ПогашениеЗадолженностиВВалюте,"
	+"ПогашениеЗадолженностиНУ,"
	+"ПогашениеПоКурсуОстаткаНУ,"
	+"ОтложенныйДоход,"
	+"ОтложенныйРасход,"
	+"СуммаПереоценки,"
	+"СуммаПереоценкиНУ";
	
	ТаблицаДляСворачивания.Свернуть(ГруппируемыеКолонки, СуммируемыеКолонки);
	
	Возврат ТаблицаДляСворачивания;
	
КонецФункции	

Функция ПодготовитьТаблицуПереоценкаВалютныхОстатков(СтруктураПараметров, Отказ, Ошибки, ЭтоЭкспрессПроверка)
	
	ТаблицаПереоценки = СтруктураПараметров.ТаблицаВалютныхОстатков;
	
	Если Не ЗначениеЗаполнено(ТаблицаПереоценки) Тогда
		Возврат ТаблицаПереоценки;
	КонецЕсли;
	
	Ссылка          = СтруктураПараметров.Регистратор;
	Дата            = СтруктураПараметров.Период;
	Организация     = СтруктураПараметров.Организация;
	
	РегламентнаяПереоценка = БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Ссылка);
	ЭтоАвансовыйОтчет = ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет");
	ОрганизацияПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Дата);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// В БУ не переоцениваются авансы в валюте, остальные остатки по балансовым счетам переоцениваются
	// В налоговом учете по налогу на прибыль курсовые разницы по переоценке авансов отражаются до 2010 года.
	// С 2010 года порядок переоценки авансов в НУ такой же, как и в БУ.
	
	Запрос = Новый Запрос;
	
	// Счета расчетов с подотчетными лицами - используются для определения авансов по средствам выданным под отчет в валюте
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_))";
	СчетаРасчетовСПодотчетнымиЛицами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с поставщиками - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ))";
	СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с покупателями - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНВспомогательныеСчета))";
	СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета обязательств по аренде - по ним не производится переоценка в налоговом учете
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваВал), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеВал), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАренднымОбязательствамВал),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваУЕ),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ))";
	СчетаОбязательствПоАренде = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета процентов по аренде - по ним не корректируется стоимость предметов аренды в НУ по служебному счету 01.К
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеВал), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ))";
	СчетаПроцентовПоАренде = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета процентов по рассрочке - по ним не производится переоценка в налоговом учете.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоРассрочкеВал), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоРассрочкеУЕ))";
	СчетаПроцентовПоРассрочке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета требований и обязательств - по ним в 2022-2024 годах курсовые разницы в НУ признаются специальным образом.
	// Список включает валютные субсчета счетов 60, 62, 66, 67, 76, 55.23, 71, 
	// а также валютные субсчета других счетов из регистра "Счета с особым порядком переоценки" 
	// с порядком переоценки "Переоценивать по мере погашения задолженности".
	// Счета авансов тоже включаются в этот список, фильтр по авансам делается отдельно.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка.Валютный
	|	И ВидыСубконто.Ссылка.НалоговыйУчет
	|	И ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам), 
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.НалоговыйУчет
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка.Валютный
	|	И ВидыСубконто.Ссылка.НалоговыйУчет
	|	И ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций)
	|	И ВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценки.Счет
	|ИЗ
	|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки
	|ГДЕ
	|	СчетаСОсобымПорядкомПереоценки.Счет.Валютный
	|	И СчетаСОсобымПорядкомПереоценки.Счет.НалоговыйУчет
	|	И СчетаСОсобымПорядкомПереоценки.ПорядокПереоценки = ЗНАЧЕНИЕ(Перечисление.ОсобыйПорядокПереоценки.ПереоцениватьПоМереПогашенияЗадолженности)";
	СчетаТребованийОбязательств = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	КэшКурсовВалют = Новый Соответствие;
	
	ОцениватьДоходыИРасходыВНУПоКурсуАвансов = Ложь;
	ПоложительныеРазницыНУПриПогашенииДолга  = Ложь;
	ОтрицательныеРазницыНУПриПогашенииДолга  = Ложь;
	УчитыватьОтложенныеКурсовыеРазницы       = Ложь;
	
	Если ОрганизацияПлательщикНалогаНаПрибыль Тогда
		// С 01.01.2010 в НУ оценка доходов и расходов осуществляется по курсу авансов.
		ОцениватьДоходыИРасходыВНУПоКурсуАвансов = ('20100101' <= Дата);
		// В 2022-2024 годах в НУ действует специальный порядок признания курсовых разниц по требованиям и обязательствам.
		// Положительная разница признается только при погашении задолженности в 2022-2024 годах.
		// Отрицательная разница признается только при погашении задолженности в 2023-2024 годах.
		// Организация может решить отложить отрицательные разницы 2022 года по задолженности, не погашенной на 31.12.2022.
		ПоложительныеРазницыНУПриПогашенииДолга = Дата >= '20220101' И Дата <= '20241231235959';
		ОтрицательныеРазницыНУПриПогашенииДолга = Дата >= '20230101' И Дата <= '20241231235959';
		УчитыватьОтложенныеКурсовыеРазницы = ПоложительныеРазницыНУПриПогашенииДолга И УчитыватьОтложенныеКурсовыеРазницы(Организация);
	КонецЕсли;
	
	ДатаОтменыСуммовыхРазниц = '20150101';
	
	ПодотчетныеСуммыПоКурсуАвансов = ОцениватьПодотчетныеСуммыПоКурсуАвансов(Дата);
	
	Для каждого СтрокаОстатка Из ТаблицаПереоценки Цикл
		
		ЭтоРасчетыСПодотчетнымиЛицами = СчетаРасчетовСПодотчетнымиЛицами.Найти(СтрокаОстатка.Счет) <> Неопределено;
		Если ЭтоРасчетыСПодотчетнымиЛицами И ЭтоАвансовыйОтчет Тогда
			// В момент проведения авансового отчета переоценивать расчеты с подотчетными лицами не требуется.
			СтрокаОстатка.ПризнакОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
			СтрокаОстатка.ПризнакОшибки = Истина;
			СтрокаОстатка.ВидОшибки     = 1;
			Продолжить;
		КонецЕсли;
		
		// В БУ не переоцениваются авансы по расчетам в валюте и в условных единицах
		// В НУ не переоценивается авансы и задолженность по расчетам в условных единицах,
		// а также авансы по договорам в валюте, если дата документа больше 01.01.2010.
		// Во всех случаях разного порядка переоценки в БУ и НУ возникают постоянные разницы
		
		// Аванс или задолженность - определяется по виду остатка на счете (дебиторская/кредиторская)
		// и по виду договора
		// Вид договора в таблице остатков определен только для счетов расчетов
		
		ПереоцениватьПоНУпосле2015 = НЕ СтрокаОстатка.РасчетыВУсловныхЕдиницах;
		
		ЭтоРасчетыСКонтрагентами = ЗначениеЗаполнено(СтрокаОстатка.ВидДоговора);
		ЭтоОбязательствоПоАренде = Не ЭтоРасчетыСКонтрагентами И Не ЭтоРасчетыСПодотчетнымиЛицами
			И СчетаОбязательствПоАренде.Найти(СтрокаОстатка.Счет) <> Неопределено;
		ЭтоПроцентыПоРассрочке = Не ЭтоРасчетыСКонтрагентами И Не ЭтоРасчетыСПодотчетнымиЛицами
			И Не ЭтоОбязательствоПоАренде И СчетаПроцентовПоРассрочке.Найти(СтрокаОстатка.Счет) <> Неопределено;
		
		ПроверятьПогашениеДолгаНУ = (ПоложительныеРазницыНУПриПогашенииДолга Или ОтрицательныеРазницыНУПриПогашенииДолга)
			И СчетаТребованийОбязательств.Найти(СтрокаОстатка.Счет) <> Неопределено;
			
		Если ЭтоОбязательствоПоАренде Тогда
			СтрокаОстатка.СуммаВРубляхНУ = 0;
			ЭтоПроцентыПоАренде = СчетаПроцентовПоАренде.Найти(СтрокаОстатка.Счет) <> Неопределено;
		Иначе
			ЭтоПроцентыПоАренде = Ложь;
		КонецЕсли;
		
		Если ЭтоПроцентыПоРассрочке Тогда
			СтрокаОстатка.СуммаВРубляхНУ = 0;
		КонецЕсли;
		
		ЭтоАванс = Ложь;
		СтрокаОстатка.ОстатокВВалюте = СтрокаОстатка.СуммаВВалюте - СтрокаОстатка.СуммаДокументаВВалюте;
		
		Если ЭтоРасчетыСКонтрагентами Тогда
			
			Если СтрокаОстатка.СуммаВВалюте = 0 И СтрокаОстатка.СуммаДокументаВВалюте = 0 Тогда
				
				ЭтоАванс = Ложь;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПокупателем(СтрокаОстатка.ВидДоговора) Тогда
				
				// Переоценка не требуется, если документ расчетов - регистратор
				Если СтрокаОстатка.Субконто3 = Ссылка Тогда
					СтрокаОстатка.ПризнакОшибки = Истина;
					Продолжить;
				КонецЕсли;
				
				ЭтоАванс = СтрокаОстатка.ОстатокВВалюте < 0 Или СтрокаОстатка.СуммаВВалюте < 0;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПоставщиком(СтрокаОстатка.ВидДоговора) Тогда
				
				// Переоценка не требуется, если документ расчетов - регистратор
				Если СтрокаОстатка.Субконто3 = Ссылка Тогда
					СтрокаОстатка.ПризнакОшибки = Истина;
					Продолжить;
				КонецЕсли;
				
				ЭтоАванс = СтрокаОстатка.ОстатокВВалюте > 0 Или СтрокаОстатка.СуммаВВалюте > 0;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионером(СтрокаОстатка.ВидДоговора) Тогда
				
				Если СтрокаОстатка.ОстатокВВалюте > 0 Или СтрокаОстатка.СуммаВВалюте > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(СтрокаОстатка.ВидДоговора) Тогда
				
				Если СтрокаОстатка.ОстатокВВалюте > 0 Или СтрокаОстатка.СуммаВВалюте > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(СтрокаОстатка.ВидДоговора) Тогда
				
				Если СтрокаОстатка.ОстатокВВалюте < 0 Или СтрокаОстатка.СуммаВВалюте < 0 Тогда
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(СтрокаОстатка.ВидДоговора) Тогда
				
				Если СтрокаОстатка.ОстатокВВалюте > 0 Или СтрокаОстатка.СуммаВВалюте > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетыСПодотчетнымиЛицами И ПодотчетныеСуммыПоКурсуАвансов Тогда
			
			ЭтоАванс = СтрокаОстатка.СуммаВВалюте > 0;
			Если Не ЭтоАванс 
				И СтрокаОстатка.СуммаДокументаВВалюте < СтрокаОстатка.СуммаВВалюте Тогда
				// Если сумма выдается в счет погашения долга перед подотчетным лицом и эта сумма больше остатка долга,
				// переоценивать нужно только сумму остатка долга. Остальная часть суммы документа - аванс, не переоценивается.
				КоэффициентОстатка = СтрокаОстатка.СуммаВВалюте / СтрокаОстатка.СуммаДокументаВВалюте;
				СтрокаОстатка.СуммаДокументаВВалюте = СтрокаОстатка.СуммаВВалюте;
				СтрокаОстатка.СуммаДокументаВРублях = Окр(СтрокаОстатка.СуммаДокументаВРублях * КоэффициентОстатка, 2);
				СтрокаОстатка.СуммаДокументаНУ = Окр(СтрокаОстатка.СуммаДокументаНУ * КоэффициентОстатка, 2);
				СтрокаОстатка.ОстатокВВалюте = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаОстатка.ОстатокВРублях = СтрокаОстатка.СуммаВРублях - СтрокаОстатка.СуммаДокументаВРублях;
		
		//С 01.01.2015 в налоговом учете упразднены "Суммовые разницы" для активов и обязательств, выраженных в
		//иностранной валюте, опалата по которым предусмотренна в рублях (у.е.) и принятых к учету после 01.01.2015. 
		//Для этих объектов учета с 01.01.2015 действует порядок переоценки, аналогичный порядку переоценки активов и обязательств, 
		//выраженных в иностранной валюте и оплата которых предусмотрена также в иностранной валюте. Для активов и обязательств,
		//принятых к учету до 01.01.2015 действует прежний порядок.
		
		Если НЕ ЭтоАванс и ЭтоРасчетыСКонтрагентами Тогда
			
			Если Дата >= ДатаОтменыСуммовыхРазниц или ЭтоЭкспрессПроверка Тогда
				
				Если СтрокаОстатка.РасчетыВУсловныхЕдиницах Тогда
					
					ПереоцениватьПоНУпосле2015 = Истина;
					
					Если НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаВозникновенияЗадолженности) Тогда
						
						Если СтрокаОстатка.ЕстьСубконтоДокументыРасчетов Тогда
							
							Если СтрокаОстатка.ОстатокВРублях <> 0 Или СтрокаОстатка.ОстатокВВалюте <> 0 Тогда
								
								СтрокаОстатка.ПризнакОшибки = Истина;
								СтрокаОстатка.ВидОшибки     = 2;
								
								Продолжить;
								
							КонецЕсли;	
							
						КонецЕсли;	
						
					Иначе
						
						Если СтрокаОстатка.ДатаВозникновенияЗадолженности < ДатаОтменыСуммовыхРазниц Тогда
							ПереоцениватьПоНУпосле2015 = Ложь;
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		ПереоцениватьОстатокБУ = НЕ ЭтоАванс;
		ПереоцениватьОстатокНУ = ОрганизацияПлательщикНалогаНаПрибыль
			И ПереоцениватьПоНУпосле2015
			И Не (ЭтоАванс И ОцениватьДоходыИРасходыВНУПоКурсуАвансов)
			И Не ЭтоОбязательствоПоАренде
			И Не ЭтоПроцентыПоРассрочке;
		
		Если НЕ ПереоцениватьОстатокБУ
		   И НЕ ПереоцениватьОстатокНУ Тогда
			
			СтрокаОстатка.ПризнакОшибки = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураКурса = КэшКурсовВалют[СтрокаОстатка.Валюта];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаОстатка.Валюта, Дата);
			КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;
		СтрокаОстатка.КурсПереоценки = СтруктураКурса.Курс;
		СтрокаОстатка.Кратность = СтруктураКурса.Кратность;
		
		РасчетныйОстатокВРублях = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаОстатка.ОстатокВВалюте,
			СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
			СтрокаОстатка.КурсПереоценки, 1,
			СтрокаОстатка.Кратность, 1);
		РасчетныйОстатокВРублях = Окр(РасчетныйОстатокВРублях, 2);
			
		Если ПереоцениватьОстатокБУ Тогда
			СтрокаОстатка.ОстатокПоКурсуПереоценки = РасчетныйОстатокВРублях;
			СтрокаОстатка.СуммаПереоценки = РасчетныйОстатокВРублях - СтрокаОстатка.ОстатокВРублях;
		КонецЕсли;
		
		Если Не ПереоцениватьОстатокНУ Тогда
			СтрокаОстатка.СуммаПереоценкиНУ = 0;
		ИначеЕсли Не ПроверятьПогашениеДолгаНУ Тогда
			// Переоцениваются все суммы остатков по валютным счетам аналогично бухгалтерскому учету.
			СтрокаОстатка.ОстатокВРубляхНУ = СтрокаОстатка.СуммаВРубляхНУ - СтрокаОстатка.СуммаДокументаНУ;
			СтрокаОстатка.ОстатокПоКурсуПереоценки = РасчетныйОстатокВРублях;
			СтрокаОстатка.СуммаПереоценкиНУ = РасчетныйОстатокВРублях - СтрокаОстатка.ОстатокВРубляхНУ;
		ИначеЕсли РегламентнаяПереоценка Тогда
			// Переоцениваются все суммы долга. 
			// Разницы разных знаков (положительные и отрицательные) могут в зависимости от периода отражаться или не отражаться в НУ.
			СтрокаОстатка.ЭтоТребованиеОбязательство = Истина;
			СтрокаОстатка.ЗадолженностьВВалюте = СтрокаОстатка.СуммаВВалюте;
			СтрокаОстатка.ЗадолженностьНУ = СтрокаОстатка.СуммаВРубляхНУ;
			СтрокаОстатка.ОстатокВРубляхНУ = СтрокаОстатка.СуммаВРубляхНУ;
			СуммаПереоценкиНУ = РасчетныйОстатокВРублях - СтрокаОстатка.ОстатокВРубляхНУ;
			Если СтрокаОстатка.СуммаВВалюте = 0 Тогда
				// Наличие только рублевой суммы без валютной считаем ошибкой переоценки в течение месяца и исправляем.
				СтрокаОстатка.ПогашениеЗадолженностиВВалюте = 0;
				СтрокаОстатка.ПогашениеЗадолженностиНУ = 0;
				СтрокаОстатка.ПогашениеПоКурсуОстаткаНУ = СтрокаОстатка.СуммаВРубляхНУ;
				СтрокаОстатка.СуммаПереоценкиНУ = - СтрокаОстатка.СуммаВРубляхНУ;
			ИначеЕсли УчитыватьОтложенныеКурсовыеРазницы Тогда
				// Признаем курсовые разницы, но можем не признать доход (расход)
				СтрокаОстатка.СуммаПереоценкиНУ = СуммаПереоценкиНУ;
				Если СуммаПереоценкиНУ > 0 И ПоложительныеРазницыНУПриПогашенииДолга Тогда
					СтрокаОстатка.ОтложенныйДоход  = СуммаПереоценкиНУ;
				ИначеЕсли СуммаПереоценкиНУ < 0 И ОтрицательныеРазницыНУПриПогашенииДолга Тогда
					СтрокаОстатка.ОтложенныйРасход = -СуммаПереоценкиНУ;
				КонецЕсли;
			ИначеЕсли СуммаПереоценкиНУ > 0 И ПоложительныеРазницыНУПриПогашенииДолга 
				Или СуммаПереоценкиНУ < 0 И ОтрицательныеРазницыНУПриПогашенииДолга Тогда
				// Не признаем ни курсовые разницы, ни доход (расход)
				СтрокаОстатка.СуммаПереоценкиНУ = 0;
			Иначе
				// Стандартный порядок учета - признаем и курсовые разницы и доход
				СтрокаОстатка.СуммаПереоценкиНУ = СуммаПереоценкиНУ;
			КонецЕсли;
		Иначе
			СтрокаОстатка.ЭтоТребованиеОбязательство = Истина;
			СтрокаОстатка.ЗадолженностьВВалюте = СтрокаОстатка.СуммаВВалюте;
			СтрокаОстатка.ЗадолженностьНУ = СтрокаОстатка.СуммаВРубляхНУ;
			ЭтоПогашениеДолгаНУ = СтрокаОстатка.СуммаВВалюте <> 0 
				И ЗнакиСовпадают(СтрокаОстатка.СуммаВВалюте, СтрокаОстатка.СуммаДокументаВВалюте);
			Если ЭтоПогашениеДолгаНУ Тогда
				// Переоцениваются только суммы погашения долга, определяем это по наличию остатка долга на момент документа
				// и одинаковому знаку сумм СуммаВВалюте и СуммаДокументаВВалюте. Разные знаки сумм соответствуют увеличению долга.
				// При частичном погашении долга делаем так, чтобы непогашенная часть не переоценивалась 
				// и продолжала учитываться по тому же курсу, что и до частичного погашения.
				СтрокаОстатка.ПогашениеЗадолженностиВВалюте = СтрокаОстатка.СуммаДокументаВВалюте;
				СтрокаОстатка.ПогашениеЗадолженностиНУ = СтрокаОстатка.СуммаДокументаНУ;
				РасчетныйКурсНУ = СтрокаОстатка.ЗадолженностьНУ / СтрокаОстатка.ЗадолженностьВВалюте;
				СтрокаОстатка.ПогашениеПоКурсуОстаткаНУ = Окр(СтрокаОстатка.ПогашениеЗадолженностиВВалюте * РасчетныйКурсНУ, 2);
				СтрокаОстатка.СуммаПереоценкиНУ = СтрокаОстатка.ПогашениеЗадолженностиНУ - СтрокаОстатка.ПогашениеПоКурсуОстаткаНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОстатка.СуммаПереоценки = 0
			И СтрокаОстатка.СуммаПереоценкиНУ = 0 Тогда
			СтрокаОстатка.ПризнакОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаОстатка.ЭтоАванс = ЭтоАванс;
		СтрокаОстатка.КорректироватьСтоимостьАренды = ЭтоОбязательствоПоАренде И Не ЭтоПроцентыПоАренде;
		СтрокаОстатка.ПереоцениватьПоНУпосле2015 = ПереоцениватьПоНУпосле2015;
		
	КонецЦикла;
	
	Если НЕ ЭтоЭкспрессПроверка Тогда
		ТаблицаПереоценки = ОписатьНевернаяАналитикаВалютныхОстатков(Ошибки, ТаблицаПереоценки, Дата, Организация, Ссылка, Отказ);
	КонецЕсли;	
	
	Возврат ТаблицаПереоценки;
		
КонецФункции

Функция ЗнакиСовпадают(Число1, Число2)
	
	Возврат Число1 = 0 
		Или Число1 > 0 И Число2 >= 0 
		Или Число1 < 0 И Число2 <= 0;
	
КонецФункции

Функция ПолучитьСчетаРасчетовСКонтрагентами(МассивСчетов)

	// Счета расчетов с контрагентами
	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Контрагенты, Договоры, Документы расчетов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаСубконтоКонтрагенты.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДоговоры
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДоговоры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДокументы
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДокументы.Ссылка
	|ГДЕ
	|	СчетаСубконтоКонтрагенты.Ссылка В(&МассивСчетов)
	|	И СчетаСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И СчетаСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И СчетаСубконтоДокументы.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция ПолучитьСчетаБанк(МассивСчетов)

	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Банковские счета
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаСубконтоБанковскиеСчета.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоБанковскиеСчета
	|ГДЕ
	|	СчетаСубконтоБанковскиеСчета.Ссылка В(&МассивСчетов)
	|	И СчетаСубконтоБанковскиеСчета.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Определяет, есть ли в проводках документа хоть один валютный счет
Функция ЕстьВалютныеСчета(Проводки)
	
	СчетаВПроводках = ОбщегоНазначения.ВыгрузитьКолонку(Проводки, "СчетДт", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВПроводках, ОбщегоНазначения.ВыгрузитьКолонку(Проводки, "СчетКт", Истина));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьВалютныеСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаВПроводках)
	|	И Хозрасчетный.Валютный");
	Запрос.УстановитьПараметр("СчетаВПроводках", СчетаВПроводках);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПодготовитьТаблицуВалютныхОстатковВсе(СтруктураПараметров, Движения)
	
	Ссылка          = СтруктураПараметров.Регистратор;
	Дата            = СтруктураПараметров.Период;
	Организация     = СтруктураПараметров.Организация;
	Проводки        = Движения.Хозрасчетный;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаВалютныхОстатков		= Новый ТаблицаЗначений;
	СчетаПодлежащиеПереоценке	= БухгалтерскийУчетПереопределяемый.СчетаПодлежащиеПереоценке();
	СчетаРасчетовСКонтрагентами	= ПолучитьСчетаРасчетовСКонтрагентами(СчетаПодлежащиеПереоценке);
	СчетаБанк					= ПолучитьСчетаБанк(СчетаПодлежащиеПереоценке);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",					Организация);
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке",		СчетаПодлежащиеПереоценке);
	Запрос.УстановитьПараметр("СчетаРасчетовСКонтрагентами",	СчетаРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СчетаБанк",						СчетаБанк);
	Запрос.УстановитьПараметр("ГраницаОстатков",				Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПустоеПодразделение", 			БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Получение всех остатков по всем счетам, подлежащим переоценке
	// Для целей НУ базой для переоценки счетов, по которым не ведется налоговый учет,
	// например, по счетам учета денежных средств, являются данные БУ
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстатки.Счет.Наименование КАК СчетНаименование,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Валюта) КАК ВалютаПредставление,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаБанк)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.БанковскиеСчета).НомерСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДоговора,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСубконтоДокументыРасчетов,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК СуммаВВалюте,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаВРублях,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.НалоговыйУчет
	|			ТОГДА ХозрасчетныйОстатки.СуммаНУОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВРубляхНУ
	|ПОМЕСТИТЬ ТаблицаХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&СчетаПодлежащиеПереоценке), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаХозрасчетныйОстатки.Счет КАК Счет,
	|	ТаблицаХозрасчетныйОстатки.СчетПредставление КАК СчетПредставление,
	|	ТаблицаХозрасчетныйОстатки.СчетНаименование КАК СчетНаименование,
	|	ТаблицаХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ТаблицаХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ТаблицаХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ТаблицаХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ТаблицаХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ТаблицаХозрасчетныйОстатки.ВалютаПредставление КАК ВалютаПредставление,
	|	ТаблицаХозрасчетныйОстатки.НомерБанковскогоСчета КАК НомерБанковскогоСчета,
	|	ТаблицаХозрасчетныйОстатки.ВидДоговора КАК ВидДоговора,
	|	ТаблицаХозрасчетныйОстатки.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ТаблицаХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|					ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаВозникновенияЗадолженности,
	|	ТаблицаХозрасчетныйОстатки.ЕстьСубконтоДокументыРасчетов КАК ЕстьСубконтоДокументыРасчетов,
	|	ТаблицаХозрасчетныйОстатки.СуммаВВалюте КАК СуммаВВалюте,
	|	ТаблицаХозрасчетныйОстатки.СуммаВРублях КАК СуммаВРублях,
	|	ТаблицаХозрасчетныйОстатки.СуммаВРубляхНУ КАК СуммаВРубляхНУ
	|ИЗ
	|	ТаблицаХозрасчетныйОстатки КАК ТаблицаХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТаблицаХозрасчетныйОстатки.Организация = ДанныеПервичныхДокументов.Организация
	|			И ТаблицаХозрасчетныйОстатки.Субконто3 = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаХозрасчетныйОстатки.Счет,
	|	ТаблицаХозрасчетныйОстатки.Субконто1,
	|	ТаблицаХозрасчетныйОстатки.Субконто2,
	|	ТаблицаХозрасчетныйОстатки.Субконто3,
	|	ТаблицаХозрасчетныйОстатки.Валюта,
	|	ТаблицаХозрасчетныйОстатки.Подразделение";
	
	// Заменим обращение к реквизитам договора через переопределяемые функции.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидДоговора("ХозрасчетныйОстатки.Субконто2"));
								
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаРасчетыВУЕ("ХозрасчетныйОстатки.Субконто2"));	
								
								
	ТаблицаВалютныхОстатков = Запрос.Выполнить().Выгрузить();
	
	ИсправитьПустыеСубконтоВТаблицеТаблицаВалютныхОстатков(ТаблицаВалютныхОстатков);
	
	//Дополним таблицу колонками
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПериодРасчета",                  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаВалютныхОстатков.ЗаполнитьЗначения(КонецМесяца(Дата), "ПериодРасчета");
	ТаблицаВалютныхОстатков.Колонки.Добавить("ЭтоАванс",                       Новый ОписаниеТипов("Булево"));
	ТаблицаВалютныхОстатков.Колонки.Добавить("КорректироватьСтоимостьАренды",  Новый ОписаниеТипов("Булево"));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПереоцениватьПоНУпосле2015",     Новый ОписаниеТипов("Булево"));
	ТаблицаВалютныхОстатков.Колонки.Добавить("КурсПереоценки",                 ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	ТаблицаВалютныхОстатков.Колонки.Добавить("Кратность",                      ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	ТаблицаВалютныхОстатков.Колонки.Добавить("НомерЗаписи",                    ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	// Суммы сформированных проводок документа 
	ТаблицаВалютныхОстатков.Колонки.Добавить("СуммаДокументаВВалюте",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("СуммаДокументаВРублях",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("СуммаДокументаНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы остатков на момент переоценки
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОстатокВВалюте",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОстатокВРублях",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОстатокВРубляхНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОстатокПоКурсуПереоценки",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы переоценки - результат расчета
	ТаблицаВалютныхОстатков.Колонки.Добавить("СуммаПереоценки",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("СуммаПереоценкиНУ",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	// Суммы для справки-расчета переоценки требований и обязательств в НУ с 2022 года
	ТаблицаВалютныхОстатков.Колонки.Добавить("ЭтоТребованиеОбязательство",     Новый ОписаниеТипов("Булево"));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ЗадолженностьВВалюте",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ЗадолженностьНУ",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПогашениеЗадолженностиВВалюте",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПогашениеЗадолженностиНУ",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПогашениеПоКурсуОстаткаНУ",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОтложенныйДоход",  БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаВалютныхОстатков.Колонки.Добавить("ОтложенныйРасход", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	// Т.к. в таблице валютных остатков могут быть строки которые по каким-то причинам не подлежат переоценке,
	// то чтобы не делать по ним движения и, если это необходимо, сообщить пользователю о технической ошибке учета
	// установим этот признак.
	ТаблицаВалютныхОстатков.Колонки.Добавить("ПризнакОшибки",                  Новый ОписаниеТипов("Булево"));
	// "Вид ошибки": 
	// 0 - переоценка не требуется; 
	// 1 - незаполнена валюта по строке остатка;
	// 2 - не указан документ расчетов с контрагентом в строке остатка по расчетам в у.е.
	ТаблицаВалютныхОстатков.Колонки.Добавить("ВидОшибки",                      ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	Возврат ТаблицаВалютныхОстатков;
	
КонецФункции // ПодготовитьТаблицуВалютныхОстатковВсе()

Функция ОписаниеРасшифровкиБухгалтерскийОтчет(ВидОтчета, Счет, Подразделение = Неопределено, Контрагент = Неопределено, Договор = Неопределено)
	
	Результат = ВыводСообщенийОбОшибках.НовыйОписаниеРасшифровки(ВидОтчета);
	Результат.Счет          = Счет;
	Результат.Подразделение = Подразделение;
	
	Если Контрагент = Неопределено И Договор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Заполним Отбор
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
		Если Контрагент <> Неопределено 
			И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
			Результат.Отбор.Вставить("Субконто" + НомерСубконто, Контрагент);
		ИначеЕсли Договор <> Неопределено 
			И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
			Результат.Отбор.Вставить("Субконто" + НомерСубконто, Договор);
		КонецЕсли;
	КонецЦикла;
			
	Возврат Результат;
	
КонецФункции

// В этой функции готовится структура таблиц по ошибкам, выявленным при обработке таблицы валютных остатков
// в функции ПодготовитьТаблицуПереоценкаВалютныхОстатков.
// возвращается соответствие у которого:
// Ключ     - индекс вида ощибки
// Значение - таблица с необходимыми данными для описания ошибки пользователю
Функция ПодготовитьСоответствиеТаблицОписывающихОшибкиИндексамВидаОшибок(Знач ОбщаяТаблица)
	
	//Выделим строки только с ошибками;
	Отбор = Новый Структура("ПризнакОшибки", Истина);
	
	ТаблицаТолькоОшибок = ОбщаяТаблица.Скопировать(Отбор);
	
	СоответствиеДляВозврата = Новый Соответствие;
	
	ОтборПовидуОшибки = Новый Структура("ВидОшибки");
	
	//Зададим структуру таблицы, описывающей ошибку, которую будем помещать в структуру
	СписокОбязательныхКолонок = ""
	+ "Счет,"			// <ПланСчетов.Хозрасчетный> - счет на котором числится в учете переоцениваемый актив или пассив
	+ "Подразделение,"  // <СправочникСсылка.ПодразделенияОрганизации> - подразделение по которому в учете числится актив или пассив
	+ "Субконто1,"	    
	+ "Субконто2,"		 
	+ "Субконто3,"		 
	+ "СуммаВВалюте,"   // <Число> - остаток в валюте, валютная оценка актива или пассива
	+ "СуммаВРублях"	// <Число> - остаток в рублях, рублевая оценка актива или пассива до переоценки
	;
	
	Для ИндексВидаОшибки = 1 по 2 Цикл
		
		ОтборПовидуОшибки.ВидОшибки = ИндексВидаОшибки;
		
		СоответствиеДляВозврата.Вставить(ИндексВидаОшибки, ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТолькоОшибок.Скопировать(ОтборПовидуОшибки), СписокОбязательныхКолонок));
		
	КонецЦикла;	
	
	Возврат СоответствиеДляВозврата;
	
КонецФункции

Функция ОписатьНевернаяАналитикаВалютныхОстатков(Ошибки, Знач ДетальныеДанные, Период, Организация, Ссылка, Отказ)
	
	// виды обрабатываемых ошибок:
	// 1 - не указана валюта у переоцениваемого остатка
	// 2 - не указан документ расчетов с контрагентом в остатках по договорам в у.е. 
	
	СоответствиеИндексаВидаОшибок = ПодготовитьСоответствиеТаблицОписывающихОшибкиИндексамВидаОшибок(ДетальныеДанные);
	
	ЭтоРегламентаяОперация = БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Ссылка);
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	
	Для Каждого ЭлементКоллекции Из СоответствиеИндексаВидаОшибок Цикл
		
		ВидОбрабатываемойОшибки            = ЭлементКоллекции.Ключ;
		ТаблицаСДетальнымиЗаписямиПоОшибке = ЭлементКоллекции.Значение;
		
		Если ТаблицаСДетальнымиЗаписямиПоОшибке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
	
		Если НЕ ЭтоРегламентаяОперация Тогда
			
			ТекстОшибки = "";
			
			Для Каждого СтрокаОшибки Из ТаблицаСДетальнымиЗаписямиПоОшибке Цикл
				
				Если ВидОбрабатываемойОшибки = 2 Тогда
					
					ТекстОшибки = ТекстОшибки + НСтр("ru='Невозможно переоценить задолженность в у.е. для данных НУ. 
					|Сальдо на счетах расчетов в у.е. имеет пустое субконто ""Документы расчетов с контрагентом"". 
					|Укажите документы расчетов с контрагентом в операциях, образующих указанное сальдо:
					|	- счет: %1 <%2>
					|	- Контрагент: %3
					|	- Договор: %4
					|'");
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
					СтрокаОшибки.Счет,
					СтрокаОшибки.Счет.Наименование,
					СтрокаОшибки.Субконто1,
					СтрокаОшибки.Субконто2);
					
				Иначе
					
					ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОшибки.Счет];
					Если ВидыСубконтоСчета = Неопределено Тогда
						ВидыСубконтоСчета = СтрокаОшибки.Счет.ВидыСубконто;
						ВидыСубконтоСчетов.Вставить(СтрокаОшибки.Счет, ВидыСубконтоСчета);
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru='Ошибка переоценки валютных счетов.
						|Обнаружены остатки по валютным счетам без указания валюты. Переоценка остатка не производится.
						|	- счет: %1 <%2>'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
					СтрокаОшибки.Счет,
					СтрокаОшибки.Счет.Наименование);
					Для НомерСубконто = 1 по ВидыСубконтоСчета.Количество() Цикл
						Если ВидыСубконтоСчета[НомерСубконто-1].ТолькоОбороты Тогда
							Продолжить;
						КонецЕсли;
						ТекстОшибки = ТекстОшибки + НСтр("ru='
							|		- субконто <%1> : ""%2""'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
							Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто),
							СтрокаОшибки["Субконто" + НомерСубконто]);
					КонецЦикла;
					ТекстОшибки = ТекстОшибки + НСтр("ru='
						|		валютный остаток: %1 , рублевый остаток: %2
						|Рекомендуется указать валюту в проводках по указанным данным'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
						Формат(СтрокаОшибки.СуммаВВалюте, "ЧЦ=15; ЧДЦ=2; ЧН=-"),
						Формат(СтрокаОшибки.СуммаВРублях, "ЧЦ=15; ЧДЦ=2; ЧН=-"));
					
				КонецЕсли;	
					
			КонецЦикла;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
			
				ТекстОшибки = ТекстОшибки + НСтр("ru='Если операция находится в закрытом для редактирования периоде, то для каждого сальдо 
				|сформируйте документ ""Операция (БУ и НУ)"" и укажите документ расчетов с контрагентом.'");
			
			Иначе
				
				ТекстОшибки = ТекстОшибки + НСтр("ru='Если операция находтся в закрытом для редактирования периоде, то для каждого сальдо 
				|сформируйте документ ""Операция (БУ и НУ)"" и укажите валюту.'");
				
			КонецЕсли;	
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка,, "Объект", Отказ);
			
		Иначе
			
			Отказ = Истина;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				Описание     = НСтр("ru = 'Невозможно переоценить задолженность по договорам в у.е.'");
			Иначе
				Описание     = НСтр("ru = 'Невозможно переоценить остатки по валютным счетам'");
			КонецЕсли;	
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				ЧтоСлучилось = НСтр("ru = 'Дата возникновения задолженности определена не для всех конечных сальдо счетов учета расчетов в у.е.'");
			Иначе
				ЧтоСлучилось = НСтр("ru = 'Валюта заполнена не для всех конечных сальдо валютных счетов'");
			КонецЕсли;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				
				ЧтоНадоЗнать = НСтр("ru = 'В конце месяца переоценивается только та задолженность в у.е., которая возникла после 1 января 2015 года. 
				|Дата возникновения задолженности определяется по дате документа, указанного в субконто ""Документы расчетов с контрагентом"". 
				|Если документ не указан, то невозможно определить необходимость проведения переоценки'");
				
			Иначе
				
				ЧтоНадоЗнать = НСтр("ru = 'В конце месяца переоцениваются активы и пассивы номинированные в иностранной валюте. 
				|Для этого сальдо в валюте счетов, у которых установлен признак валютного учета, умножается на курс валюты сальдо.
				|Таким образом определяется рублевая оценка активов и пассивов на конец месяца.
				|Результатом переоценки принимается разница между сальдо в рублях и рублевой оценкой.
				|Отсутствие валюты у валютного сальдо, делает невозможной вышеописанную процедуру, 
				|т.к. невозможно определить курс пересчета валютного сальдо с пустой валютой.'");
				
			КонецЕсли;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				ГдеПроблема  = НСтр("ru = 'В таблице показано сальдо на счетах расчетов в у.е. с пустым субконто ""Документы расчетов с контрагентом"":'");
			Иначе	
				ГдеПроблема  = НСтр("ru = 'В таблице показано сальдо валютных счетов с пустой валютой:'");
			КонецЕсли;
			
			ЧтоДелать = Новый Массив;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				
				ЧтоДелать.Добавить(НСтр("ru = 'Установите документы расчетов с контрагентом в операциях, образующих указанное сальдо. Список операций можно открыть двойным щелчком мыши на строке таблицы.
				|Если операции находятся в закрытых для редактирования периодах, то сформируйте документ ""Операция (БУ и НУ)""
				| и укажите документ расчетов с контрагентом для каждого сальдо.'"));
				
			Иначе	
				
				ЧтоДелать.Добавить(НСтр("ru = 'Установите валюту в операциях, образующих указанное сальдо. Список операций можно открыть двойным щелчком мыши на строке таблицы.
				|Если операции находятся в закрытых для редактирования периодах, то сформируйте документ ""Операция (БУ и НУ)""
				| и укажите валюту для каждого сальдо.'"));
				
			КонецЕсли;	
				
			Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
			
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     Описание);
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ЧтоСлучилось);
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ЧтоНадоЗнать);
			
			// ГдеПроблема - комплексный раздел, содержит таблицу
			Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ГдеПроблема);
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ОтсутствуютДокументыРасчетовСКонтрагентамиПоДоговорамВУЕ_Шапка", Новый Структура);
			Иначе
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ОтсутствуетВалютаВОстаткахПоВалютнымСчетам_Шапка", Новый Структура);
			КонецЕсли;
			
			Если ВидОбрабатываемойОшибки = 2 Тогда
				ИмяСекцииДляДетальныхЗаписей = "ОтсутствуютДокументыРасчетовСКонтрагентамиПоДоговорамВУЕ_Строка";
			Иначе
				ИмяСекцииДляДетальныхЗаписей = "ОтсутствуетВалютаВОстаткахПоВалютнымСчетам_Строка";
			КонецЕсли;	
			
			Для Каждого СтрокаДетальныхДанных Из ТаблицаСДетальнымиЗаписямиПоОшибке Цикл
				
				Если ВидОбрабатываемойОшибки = 2 Тогда
					ДанныеДляВывода = Новый Структура("Счет, Субконто1, Субконто2, СуммаВВалюте, СуммаВРублях");
				Иначе
					ДанныеДляВывода = Новый Структура("Счет, Субконто1, Субконто2, СуммаВРублях");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДанныеДляВывода, СтрокаДетальныхДанных);
				
				// Расшифровка
				РасшифровкаСтрокиЗадолженности = ОписаниеРасшифровкиБухгалтерскийОтчет("ВедомостьПоСчету" ,
				СтрокаДетальныхДанных.Счет, 
				СтрокаДетальныхДанных.Подразделение, 
				СтрокаДетальныхДанных.Субконто1, 
				СтрокаДетальныхДанных.Субконто2);
				
				ДанныеДляВывода.Вставить("РасшифровкаСтрокиЗадолженности", РасшифровкаСтрокиЗадолженности);
				
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, 
														ИмяСекцииДляДетальныхЗаписей, 
														ДанныеДляВывода);
				
			КонецЦикла;
			
			// ЧтоДелать
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ЧтоДелать);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДетальныеДанные.Скопировать(Новый Структура("ПризнакОшибки", Ложь));
	
КонецФункции	

// ОПРЕДЕЛЕНИЕ ВИДА ДЕЯТЕЛЬНОСТИ ПРИ РЕАЛИЗАЦИИ

// Определяет, облагается ли реализация налогом в особом порядке.
//
// Не учитывает данные о счетах учета выручки.
// Если без этих данных нельзя определить, как реализация облагается налогом,
// то функция не определит, но скажет об этом.
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации 
//  Период					 - Дата
//  ДополнительныеПараметры	 - Структура - может содержать ключи Склад, ТипСклада, ДокументОснование, ДеятельностьНаПатенте, ЭтоУслуга
//
// Возвращаемое значение:
//   - см. РезультатОсобыйПорядокНалогообложения()
Функция РеализацияОсобыйПорядокНалогообложения(Организация, Период, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период) Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Ложь);
	КонецЕсли;
	
	Если УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Истина);
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Неопределено);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДеятельностьНаПатенте") И ДополнительныеПараметры.ДеятельностьНаПатенте = Истина 
		И Период >= УчетПСН.ДатаНачалаДействияПатентнойСистемы() Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Истина);
	КонецЕсли;
	
	// При реализации товаров может зависеть от склада
	Если Не ДополнительныеПараметры.Свойство("ЭтоУслуга") Или ДополнительныеПараметры.ЭтоУслуга Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Неопределено);
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		Возврат РезультатОсобыйПорядокНалогообложения(Неопределено);
	КонецЕсли;
	
	// Зависит от склада
	ТипСклада = Неопределено;
	Если ДополнительныеПараметры.Свойство("ТипСклада") Тогда
		
		ТипСклада = ДополнительныеПараметры.ТипСклада;
		
	ИначеЕсли ДополнительныеПараметры.Свойство("Склад") Тогда
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Склад, "ТипСклада");
		
	ИначеЕсли ДополнительныеПараметры.Свойство("ДокументОснование") Тогда
		
		ДокументОснование = ДополнительныеПараметры.ДокументОснование;
		
		Если ЗначениеЗаполнено(ДокументОснование)
		И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументОснование))
		И ДокументОснование.Метаданные().Реквизиты.Найти("Склад") <> Неопределено Тогда
		
			ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад.ТипСклада");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Справочники.Склады.ЭтоСкладРозничнойТорговли(ТипСклада) Тогда
		
		Возврат РезультатОсобыйПорядокНалогообложения(Истина, Истина);
		
	КонецЕсли;
	
	Возврат РезультатОсобыйПорядокНалогообложения(Неопределено);
	
КонецФункции

Функция РезультатОсобыйПорядокНалогообложения(ОсобыйПорядокНалогообложения = Неопределено, МожетБытьУточнен = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", ОсобыйПорядокНалогообложения); // Булево или Неопределено
	Если МожетБытьУточнен <> Неопределено Тогда
		Результат.Вставить("МожетБытьУточнен", МожетБытьУточнен); // Булево
	ИначеЕсли ОсобыйПорядокНалогообложения = Неопределено Тогда
		Результат.Вставить("МожетБытьУточнен", Истина);
	Иначе
		Результат.Вставить("МожетБытьУточнен", Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// КОНТРОЛЬ ПРАВИЛЬНОСТИ ОТРАЖЕНИЯ ФАКТОВ ХОЗЯЙСТВЕННОЙ ЖИЗНИ, ВЫПОЛНЯЕМЫЙ ПРИ ЗАКРЫТИИ МЕСЯЦА

Процедура ВыявитьОшибкиПриЗакрытииМесяца(Ошибки, Период,  Организация) Экспорт
	
	ПроверитьВыполненРасчетДолейСписанияКосвенныхРасходов(Ошибки, Период, Организация);
	
	ПроверитьИзвестенВидДеятельностиДоходов(Ошибки, Период, Организация);
	
КонецПроцедуры

Процедура ПроверитьВыполненРасчетДолейСписанияКосвенныхРасходов(Ошибки, Период, Организация)
	
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период)
		Или УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если РегистрыСведений.ДолиСписанияКосвенныхРасходов.ВыполненРасчетДолейСписанияКосвенныхРасходов(Период, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет долей списания косвенных расходов требуется, если есть распределяемые расходы на счете 91.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаРасходов",                БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	Запрос.УстановитьПараметр("СтатьиРаспределяемыхРасходов", СтатьиРаспределяемыхРасходов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация = &Организация
	|				И Субконто1 В (&СтатьиРаспределяемыхРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.КоличествоОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаНУОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаВРОборотДт <> 0)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Нет расходов, для которых нужно выполнять расчет долей
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		
	Ошибка.Описание     = НСтр("ru = 'Нет данных о долях списания косвенных расходов.'");
	Ошибка.Локализация  = НСтр("ru = 'Расчет долей списания косвенных расходов требуется, потому что отражены расходы, относящиеся как к видам деятельности с особым порядком налогообложения, так и к видам деятельности с основной системой налогообложения.'");
	Ошибка.Рекомендация = НСтр("ru = 'Выполните регламентную операцию ""Расчет долей списания косвенных расходов""'");
	
	СсылкаНаРегламентнуюОперацию = РегистрыСведений.ДолиСписанияКосвенныхРасходов.РегламентнаяОперация(Период, Организация);
	
	Если ЗначениеЗаполнено(СсылкаНаРегламентнуюОперацию) Тогда
		Ошибка.Ссылка = СсылкаНаРегламентнуюОперацию;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьИзвестенВидДеятельностиДоходов(Ошибки, Период, Организация)
	
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период)
		Или УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаДоходов",                 БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	Запрос.УстановитьПараметр("СтатьиРаспределяемыхРасходов", СтатьиРаспределяемыхРасходов());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределяемыеДоходы.Регистратор КАК Регистратор,
	|	РаспределяемыеДоходы.Счет КАК Счет,
	|	РаспределяемыеДоходы.Организация КАК Организация
	|ПОМЕСТИТЬ Ошибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&СчетаДоходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация = &Организация
	|				И Субконто1 В (&СтатьиРаспределяемыхРасходов),
	|			,
	|			) КАК РаспределяемыеДоходы
	|ГДЕ
	|	НЕ РаспределяемыеДоходы.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределяемыеДоходы.Регистратор,
	|	РаспределяемыеДоходы.Счет,
	|	РаспределяемыеДоходы.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределяемыеДоходы.СуммаОборотКт) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Регистратор КАК Регистратор,
	|	Ошибки.Счет КАК Счет,
	|	Ошибки.Счет.Код КАК СчетКод
	|ИЗ
	|	Ошибки КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Ошибки.Организация = ДанныеПервичныхДокументов.Организация
	|			И Ошибки.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ошибки.Счет.Порядок,
	|	Ошибки.Счет,
	|	ДанныеПервичныхДокументов.ДатаРегистратора,
	|	Ошибки.Регистратор
	|ИТОГИ ПО
	|	Счет";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСчетов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстОписание     = НСтр("ru = 'На счете %1 отражены доходы, которые невозможно отнести к определенному виду деятельности'");
	ТекстЛокализация  = НСтр("ru = 'В следующих документах указаны статьи, предназначенные для учета расходов, которые невозможно отнести к определенному виду деятельности'");
	ТекстРекомендация = НСтр("ru = 'Укажите для всех прочих доходов статьи для учета деятельности с основной системой налогообложения или с особым порядком налогообложения'");
	
	Пока ВыборкаСчетов.Следующий() Цикл
	
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		Ошибка.Описание     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОписание, ВыборкаСчетов.СчетКод);
		Ошибка.Рекомендация = ТекстРекомендация;
		Ошибка.Локализация  = ТекстЛокализация;
		
		Выборка = ВыборкаСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока Выборка.Следующий() Цикл
		
			Локализация = Ошибка.ЛокализацияДетально.Добавить();
			Локализация.Ссылка = Выборка.Регистратор;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры		

Процедура ПроверитьЗаполненаСтатьяПрочихДоходовРасходов(Ошибки, Период, Организация, Счет) Экспорт
	
	Если Счет = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
		ИмяОбъектаРодительныйПадеж = НСтр("ru = 'доходов'");
	ИначеЕсли Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		ИмяОбъектаРодительныйПадеж = НСтр("ru = 'расходов'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Счета",          БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходыРасходы.Регистратор КАК Регистратор,
	|	ДоходыРасходы.Счет КАК Счет,
	|	ДоходыРасходы.Организация КАК Организация
	|ПОМЕСТИТЬ Ошибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&Счета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка),
	|			,
	|			) КАК ДоходыРасходы
	|ГДЕ
	|	НЕ ДоходыРасходы.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыРасходы.Регистратор,
	|	ДоходыРасходы.Счет,
	|	ДоходыРасходы.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДоходыРасходы.СуммаОборот) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Регистратор КАК Регистратор,
	|	Ошибки.Счет КАК Счет,
	|	Ошибки.Счет.Код КАК СчетКод
	|ИЗ
	|	Ошибки КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Ошибки.Организация = ДанныеПервичныхДокументов.Организация
	|			И Ошибки.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ошибки.Счет.Порядок,
	|	Ошибки.Счет,
	|	ДанныеПервичныхДокументов.ДатаРегистратора,
	|	Ошибки.Регистратор
	|ИТОГИ ПО
	|	Счет";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСчетов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстОписание     = НСтр("ru = 'Не указана статья %1 на счете %2'");
	ТекстЛокализация  = НСтр("ru = 'Статья не заполнена в проводках следующих документов'");
	ТекстРекомендация = НСтр("ru = 'Заполните статьи прочих %1'");
	
	Пока ВыборкаСчетов.Следующий() Цикл
	
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		Ошибка.Описание     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОписание, 
			ИмяОбъектаРодительныйПадеж, 
			ВыборкаСчетов.СчетКод);
		Ошибка.Локализация  = ТекстЛокализация;
		Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстРекомендация, ИмяОбъектаРодительныйПадеж);
		
		Выборка = ВыборкаСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока Выборка.Следующий() Цикл
		
			Локализация = Ошибка.ЛокализацияДетально.Добавить();
			Локализация.Ссылка = Выборка.Регистратор;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры		

Функция СтатьиРаспределяемыхРасходов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК СтатьяРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяРасходов");
	
КонецФункции

#Область СчетаУчетаДоходовРасходов

Функция ОсновнойСчетВыручки(СпециальныйРежимНалогообложения = Ложь) Экспорт
	
	Если СпециальныйРежимНалогообложения Тогда
		Возврат ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	КонецЕсли;
	
КонецФункции

Функция ЗапасыПродажаКоторыхПрочиеДоходы() Экспорт
	
	СчетаЗапасов = Новый Массив;
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	
	Возврат Новый ФиксированныйМассив(СчетаЗапасов);
	
КонецФункции

Функция СчетСебестоимостьПродаж(СчетВыручки, Знач СпециальныйРежимНалогообложения) Экспорт
	
	Если ЗначениеЗаполнено(СчетВыручки) Тогда
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетВыручки, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			Возврат ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		ИначеЕсли СчетВыручки = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД Тогда
			Возврат ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		ИначеЕсли СчетВыручки = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД Тогда
			Возврат ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		Иначе
			СчетаСпециальныеРежимы          = БухгалтерскийУчетПовтИсп.СчетаУчетаЕНВД();
			СпециальныйРежимНалогообложения = (СчетаСпециальныеРежимы.Найти(СчетВыручки)  <> Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если СпециальныйРежимНалогообложения Тогда
		Возврат ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
	КонецЕсли;
	
КонецФункции

Функция СчетВыручкаНДС(СчетВыручки) Экспорт
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетВыручки, ПланыСчетов.Хозрасчетный.Продажи) Тогда
		Возврат ПланыСчетов.Хозрасчетный.Продажи_НДС;
	Иначе
		Возврат СчетСебестоимостьПродаж(СчетВыручки, Ложь);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Формируются проводки по учету выручки от реализации собственных и комиссионных товаров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - <ТаблицаЗначений> - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаТоварыУслугиКомитентов  - <ТаблицаЗначений> - подготовленные для учета выручки данные по комиссионным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  ТаблицаРеализованныеТоварыКомитентов  - <ТаблицаЗначений> - информация для записи в регистр одноименный накопления.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияКомпенсации(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводки
	
	СформироватьДвиженияКомпенсацияЗаТовары(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты,
		Ложь,
		Движения, 
		Отказ);

	СформироватьДвиженияКомпенсацияЗаТоварыКомитентов(
		Параметры.ТаблицаТоварыУслугиКомитентов, 
		Реквизиты,
		Ложь,
		Движения, 
		Отказ);
	
	СформироватьДвиженияРеализованныеТоварыКомитентов(
		Параметры.ТаблицаРеализованныеТоварыКомитентов, 
		Реквизиты, 
		Движения, 
		Отказ)	

КонецПроцедуры

Процедура СформироватьДвиженияКомпенсацияЗаТовары(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, ЭтоВозврат, Движения, Отказ)
	Перем ТекстСодержанияПоТоварам;
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Период      = ПараметрыРеализации.Период;
	Организация = ПараметрыРеализации.Организация;
	
	ТекстСодержанияПоТоварам = "Компенсация за утерю или порчу товара";
	ОтражатьВНалоговомУчете  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если СтрокаТаблицы.СуммаБУ = 0 
			И СтрокаТаблицы.СуммаНУ = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание  = ТекстСодержанияПоТоварам;
		
		Проводка.СчетДт = СтрокаТаблицы.КорСчет;
		ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете, СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
		ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, "Кт", ОтражатьВНалоговомУчете, СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияКомпенсацияЗаТоварыКомитентов(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, ЭтоВозврат, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаВыручкиОтРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = ПараметрыРеализации.Регистратор;
	Период      = ПараметрыРеализации.Период;
	Организация = ПараметрыРеализации.Организация;
	
	ТекстСодержанияПоТоварам = "Компенсация за утерю или порчу товара";
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если СтрокаТаблицы.СуммаБУ = 0 
			И СтрокаТаблицы.СуммаНУ = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетовСКомитентом) Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
			Проводка.Содержание  = ТекстСодержанияПоТоварам;
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, "Дт", ОтражатьВНалоговомУчете);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			ЗаполнитьАналитикуСчетаРасчетовСКомитентом(Проводка, СтрокаТаблицы, "Кт", СтрокаТаблицы.ДокументРасчетовСКомитентом, ОтражатьВНалоговомУчете);
		КонецЕсли; 
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры
