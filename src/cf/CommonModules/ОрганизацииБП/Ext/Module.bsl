
#Область ПроцедурыДляОрганизацииПереопределяемый

// См. ОрганизацииПереопределяемый.ПриОпределенииРегистрационныхДанныхОрганизации
Процедура ПриОпределенииРегистрационныхДанныхОрганизации(Организация, Поля, Дата, РегистрационныеДанные) Экспорт
	
	ЗаполняемыеРеквизитыОрганизации = СтрРазделить(Поля, ",", Ложь);
	Для НомерРеквизита = 0 По ЗаполняемыеРеквизитыОрганизации.Количество() - 1 Цикл
		ЗаполняемыеРеквизитыОрганизации[НомерРеквизита] = СокрЛП(ЗаполняемыеРеквизитыОрганизации[НомерРеквизита]);
	КонецЦикла;
	
	ЗаполнитьПоДаннымПрограммногоИнтерфейса(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные);
	
	ЗаполнитьПоДаннымОрганизации(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные);
	
	ЗаполнитьПоДаннымРегистрацииВНалоговомОргане(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные);
	
	ЗаполнитьПоДаннымРегистрацииВПФР(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные);
	
	ЗаполнитьПоНалогам(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СведенияОбОрганизации

Процедура ЗаполнитьПоДаннымПрограммногоИнтерфейса(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные)
	
	РеквизитыИзПрограммногоИнтерфейса = ЗаполняемыеРеквизитыИзПрограммногоИнтерфейса();
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Дата);
	
	Для Каждого ЗаполняемыйРеквизит Из ЗаполняемыеРеквизитыОрганизации Цикл
		РеквизитПрограммногоИнтерфейса = Неопределено;
		РеквизитыИзПрограммногоИнтерфейса.Свойство(ЗаполняемыйРеквизит, РеквизитПрограммногоИнтерфейса);
		Если ЗначениеЗаполнено(РеквизитПрограммногоИнтерфейса) Тогда
			РегистрационныеДанные.Вставить(ЗаполняемыйРеквизит, СведенияОбОрганизации[РеквизитПрограммногоИнтерфейса]);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("ЭтоФизическоеЛицо") <> Неопределено Тогда
		РегистрационныеДанные.Вставить("ЭтоФизическоеЛицо",
			СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("ЭтоЮридическоеЛицо") <> Неопределено Тогда
		РегистрационныеДанные.Вставить("ЭтоЮридическоеЛицо", 
			СведенияОбОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполняемыеРеквизитыИзПрограммногоИнтерфейса()
	
	РеквизитыИзПрограммногоИнтерфейса = Новый Структура;
	РеквизитыИзПрограммногоИнтерфейса.Вставить("ИНН", "ИНН");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("КПП", "КПП");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("НаименованиеПолное", "ПолноеНаименование");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("НаименованиеСокращенное", "СокращенноеНаименование");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("ОГРН", "ОГРН");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("ДатаРегистрации", "ДатаРегистрации");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
	РеквизитыИзПрограммногоИнтерфейса.Вставить("СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
	
	Возврат РеквизитыИзПрограммногоИнтерфейса;
	
КонецФункции

Процедура ЗаполнитьПоДаннымОрганизации(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные)
	
	РеквизитыЗапросаКОрганизации = СтруктураЗапросаКРеквизитам(
		ЗаполняемыеРеквизитыОрганизации, ЗаполняемыеРеквизитыПоДаннымОрганизации());
	
	Если ЗначениеЗаполнено(РеквизитыЗапросаКОрганизации) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитыЗапросаКОрганизации);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РегистрационныеДанные, РеквизитыОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполняемыеРеквизитыПоДаннымОрганизации()
	
	РеквизитыПоДаннымОрганизации = Новый Структура;
	
	РеквизитыПоДаннымОрганизации.Вставить("КодОКВЭД", "КодОКВЭД");
	РеквизитыПоДаннымОрганизации.Вставить("НаименованиеОКВЭД", "НаименованиеОКВЭД");
	РеквизитыПоДаннымОрганизации.Вставить("КодОКВЭД2", "КодОКВЭД2");
	РеквизитыПоДаннымОрганизации.Вставить("НаименованиеОКВЭД2", "НаименованиеОКВЭД2");
	РеквизитыПоДаннымОрганизации.Вставить("КодОКФС", "КодОКФС");
	РеквизитыПоДаннымОрганизации.Вставить("РегистрационныйНомерТФОМС", "РегистрационныйНомерТФОМС");
	
	Возврат РеквизитыПоДаннымОрганизации;
	
КонецФункции

Процедура ЗаполнитьПоДаннымРегистрацииВНалоговомОргане(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные)
	
	РеквизитыЗапросаКРегистрации = СтруктураЗапросаКРеквизитам(
		ЗаполняемыеРеквизитыОрганизации, ЗаполняемыеРеквизитыПоДаннымРегистрацииВНалоговомОргане());
	
	Если ЗначениеЗаполнено(РеквизитыЗапросаКРегистрации) Тогда
		РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, Дата);
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
			РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, РеквизитыЗапросаКРегистрации);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РегистрационныеДанные, РеквизитыРегистрации);
		Иначе
			Для Каждого РеквизитЗапросаКРегистрации Из РеквизитыЗапросаКРегистрации Цикл
				РегистрационныеДанные.Вставить(РеквизитЗапросаКРегистрации.Значение, "");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполняемыеРеквизитыПоДаннымРегистрацииВНалоговомОргане()
	
	РеквизитыПоДаннымОрганизации = Новый Структура;
	РеквизитыПоДаннымОрганизации.Вставить("КодНалоговогоОргана", "Код");
	РеквизитыПоДаннымОрганизации.Вставить("НаименованиеНалоговогоОргана", "НаименованиеИФНС");
	РеквизитыПоДаннымОрганизации.Вставить("КодПоОКАТО", "КодПоОКАТО");
	РеквизитыПоДаннымОрганизации.Вставить("КодПоОКТМО", "КодПоОКТМО");
	
	Возврат РеквизитыПоДаннымОрганизации;
	
КонецФункции

Процедура ЗаполнитьПоДаннымРегистрацииВПФР(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные)
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("РегистрационныйНомерПФР") <> Неопределено Тогда
		
		РегистрационныеДанные.Вставить("РегистрационныйНомерПФР", УчетЗарплаты.РегистрационныйНомерПФР(Организация, Дата));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоНалогам(Организация, ЗаполняемыеРеквизитыОрганизации, Дата, РегистрационныеДанные)
	
//            *  - Число - местная ставка налога на прибыль.
//            *  - Число - ставка налога на прибыль субъекта РФ.
//            *  - Число - ставка налога на прибыль фед бюдж.
//            *  - Число - ставка налога УСН.
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("СтавкаНалогаНаПрибыльМестный") <> Неопределено Тогда
		
		// В местный бюджет налог на прибыль уже не платиться.
		РегистрационныеДанные.Вставить("СтавкаНалогаНаПрибыльМестный", 0);
		
	КонецЕсли;
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("СтавкаНалогаНаПрибыльСубъектРФ") <> Неопределено Тогда
		
		РегистрационныеДанные.Вставить("СтавкаНалогаНаПрибыльСубъектРФ", НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(
			Дата, Организация));
		
	КонецЕсли;
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("СтавкаНалогаНаПрибыльФБ") <> Неопределено Тогда
		
		РегистрационныеДанные.Вставить("СтавкаНалогаНаПрибыльФБ", НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(
			Дата, Организация));
		
	КонецЕсли;
	
	Если ЗаполняемыеРеквизитыОрганизации.Найти("СтавкаНалогаУСН") <> Неопределено Тогда
		
		РегистрационныеДанные.Вставить("СтавкаНалогаУСН", УчетнаяПолитика.СтавкаНалогаУСН(Организация, Дата));
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураЗапросаКРеквизитам(ЗаполняемыеРеквизитыОрганизации, ДоступныеРеквизиты)
	
	РеквизитыДляЗапроса = Новый Структура;
	Для Каждого ЗаполняемыйРеквизит Из ЗаполняемыеРеквизитыОрганизации Цикл
		ИмяРеквизитаДляЗапроса = Неопределено;
		ДоступныеРеквизиты.Свойство(ЗаполняемыйРеквизит, ИмяРеквизитаДляЗапроса);
		Если ЗначениеЗаполнено(ИмяРеквизитаДляЗапроса) Тогда
			РеквизитыДляЗапроса.Вставить(ЗаполняемыйРеквизит, ИмяРеквизитаДляЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыДляЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура УстановитьФункциональныеОпцииИнтерфейсТаксиПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаОрганизаций = РезультатЗапроса.Выбрать();
	
	ВыборкаОрганизаций.Следующий();
	ИзменитьИнтерфейсТаксиПростой(ВыборкаОрганизаций, Источник.Значение);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ИзменитьИнтерфейсТаксиПростой(Организация, Значение)
	
	Если Организация.Ссылка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Организация.Ссылка.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый Тогда
		НовоеЗначение = Ложь;
		ВозможенПереходНаУСН = Ложь;
	Иначе
		НовоеЗначение = Значение;
		ВозможенПереходНаУСН = Обработки.ПомощникПоПереходуНаУСН.ВозможенПереходНаУСН(Организация.Ссылка, Значение);
	КонецЕсли;
	
	Константы.ИнтерфейсТаксиПростойИПиЮрЛица.Установить(НовоеЗначение);
	Константы.ВозможенПереходНаУСН.Установить(ВозможенПереходНаУСН);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

Процедура СборСтатистикиПоСНООрганизаций() Экспорт
	
	ДатаСбораСтатистики = Константы.ДатаСбораСтатистикиПоНалогообложениюОрганизациий.Получить();
	
	Если КонецДня(ДатаСбораСтатистики) < КонецМесяца(ТекущаяДатаСеанса()) Тогда
		ДатаСбораСтатистики = КонецМесяца(ТекущаяДатаСеанса());
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
		|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН КАК ПрименяетсяУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНП КАК ПлательщикЕНП,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяАУСН КАК ПрименяетсяАУСН,
		|	Организации.СтатусФизическогоЛица КАК СтатусФизическогоЛица
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО НастройкиСистемыНалогообложенияСрезПоследних.Организация = Организации.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Организация КАК Организация,
		|	Организации.СистемаНалогообложения КАК СистемаНалогообложения,
		|	Организации.ПрименяетсяУСН КАК ПрименяетсяУСН,
		|	Организации.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	Организации.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	Организации.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	Организации.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
		|	Организации.ПлательщикЕНП КАК ПлательщикЕНП,
		|	Организации.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход,
		|	Организации.ПрименяетсяАУСН КАК ПрименяетсяАУСН,
		|	Организации.СтатусФизическогоЛица КАК СтатусФизическогоЛица
		|ИЗ
		|	Организации КАК Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Банки.Код КАК БИКБанка
		|ИЗ
		|	Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО Банки.Код = КлассификаторБанков.Код
		|			ПО БанковскиеСчета.Банк = Банки.Ссылка
		|		ПО (Организации.ПрименяетсяАУСН)
		|			И Организации.Организация = БанковскиеСчета.Владелец
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Банки.Код";
	
	Запрос.УстановитьПараметр("Период", ДатаСбораСтатистики);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат;
	Иначе
		
		ВыборкаСНО = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаСНО.Следующий() Цикл
			СистемаНалогообложения = СистемаНалогообложения(ВыборкаСНО);
			ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.СНООрганизаций.%1", ХешСтроки(СистемаНалогообложения));
			ОбщегоНазначенияБП.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации);
		КонецЦикла;
		
		ВыборкаБанки = РезультатЗапроса[2].Выбрать();
		
		Пока ВыборкаБанки.Следующий() Цикл
			ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.СНООрганизаций.БанкАУСН.%1", ХешСтроки(ВыборкаБанки.БИКБанка));
			ОбщегоНазначенияБП.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации);
		КонецЦикла;
		
		Константы.ДатаСбораСтатистикиПоНалогообложениюОрганизациий.Установить(ДатаСбораСтатистики);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ХешСтроки(Строка)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Строка);
	Возврат СтрЗаменить(НРег(ХешированиеДанных.ХешСумма), " ", "");
	
КонецФункции

Функция СистемаНалогообложения(УчетнаяПолитика)
	
	Если УчетнаяПолитика.Организация.ЮридическоеФизическоеЛицо =
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ВидОрганизвции = "ООО";
	Иначе
		Если УчетнаяПолитика.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель Тогда
			ВидОрганизвции = "ИП";
		ИначеЕсли УчетнаяПолитика.СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый Тогда
			ВидОрганизвции = "Самозанятый";
		Иначе
			ВидОрганизвции = "Не идентифицирован";
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход Тогда
		СистемаНалогообложения = "НПД";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНПатент Тогда
		Если УчетнаяПолитика.ПрименяетсяУСНДоходы Тогда
			СистемаНалогообложения = "УСН(доходы), Патент";
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы Тогда
			СистемаНалогообложения = "УСН(доходы-расходы), Патент";
		ИначеЕсли УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			СистемаНалогообложения = "Общая, Патент";
		Иначе
			СистемаНалогообложения = "Патентная";
		КонецЕсли;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы Тогда
		СистемаНалогообложения = "УСН(доходы)";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы Тогда
		СистемаНалогообложения = "УСН(доходы-расходы)";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяАУСН
		И УчетнаяПолитика.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
		СистемаНалогообложения = "АУСН(доходы)";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяАУСН
		И УчетнаяПолитика.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
		СистемаНалогообложения = "АУСН(доходы-расходы)";
		Иначе
		СистемаНалогообложения = "Общая";
	КонецЕсли;
	
	Возврат СтрШаблон("%1, %2", ВидОрганизвции, СистемаНалогообложения);
	
КонецФункции

#КонецОбласти
