#Область СлужебныйПрограммныйИнтерфейс

#Область ФункцииИспользующиеПереопределение

// Возвращает ИНН и КПП переданной организации и торгового объекта, структурой со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
// Параметры:
//   ОрганизацияКонтрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - 
//     ссылка на организацию, реквизиты которой нужно определить,
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//   Структура - структура со свойствами ИНН, КПП
//
Функция ИННКПППоОрганизацииКонтрагенту(ОрганизацияКонтрагент, ТорговыйОбъект = Неопределено) Экспорт
	
	ИННиКПП = Новый Структура("ИНН, КПП", "", "");
	ИнтеграцияИСПереопределяемый.ЗаполнитьИННКПППоОрганизацииКонтрагенту(ИННиКПП, ОрганизацияКонтрагент, ТорговыйОбъект);
	Возврат ИННиКПП;
	
КонецФункции

Функция НалоговыйНомерКонтрагента(Контрагент) Экспорт
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтрагентов.Добавить(Контрагент);
	
	СоответствиеНалоговыхНомеров = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеНалоговыхНомеров, МассивКонтрагентов);
	
	Возврат СоответствиеНалоговыхНомеров[Контрагент];
	
КонецФункции

#КонецОбласти

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, КодЯзыка = Неопределено) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
КонецФункции

#Область ЧастичноеВыбытие

// Возвращает признак возможности для вида продукции участвовать в частичном выбытии.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС                - вид маркируемой продукции.
//  ОперацияИС   - ПеречислениеСсылка.ВидыОперацийИСМП, ПеречислениеСсылка.ВидыДокументовЕГАИС, Неопределено - вид операции ИСМП.
// Возвращаемое значение:
//  Булево - Вид продукци может выбывать частично.
Функция ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ОперацияИС = Неопределено) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ИнтеграцияЕГАИСКлиентСервер.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ОперацияИС);
	Иначе
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)
			Или Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
		
		Возврат МодульИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			ВидПродукции,
			ОперацияИС);
	КонецЕсли;
	
КонецФункции

// Данные представления настройки номенклатуры. Формирует гиперссылку для отображения в карточке номенклатуры.
// Гиперссылка открывает форму настройки номенклатуры.
// 
// Параметры:
//  ПараметрыФормирования - см. ИнтеграцияИСКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры
// Возвращаемое значение:
//  Неопределено, ФорматированнаяСтрока - Данные представления настройки номенклатуры.
Функция ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыФормирования) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ВидПродукции                           = ПараметрыФормирования.ВидПродукции;
	СсылкаНаОбъект                         = ПараметрыФормирования.СсылкаНаОбъект;
	РазрешеноРедактированиеРеквизитов      = ПараметрыФормирования.РазрешеноРедактированиеРеквизитов;
	ЕстьПравоРедактирования                = ПараметрыФормирования.ЕстьПравоРедактирования;
	ТребуетВзвешивания                     = ПараметрыФормирования.ТребуетВзвешивания;
	ПредставлениеВНесколькоСтрок           = ПараметрыФормирования.ПредставлениеВНесколькоСтрок;
	ДопустимаНастройкаЛогистическойЕдиницы = ПараметрыФормирования.ДопустимаНастройкаЛогистическойЕдиницы;
	ОтступПриВыводеНастройкиВидаУпаковки   = ПараметрыФормирования.ОтступПриВыводеНастройкиВидаУпаковки;
	ВыводитьНастройкиВидовУпаковокПоGTIN   = ПараметрыФормирования.ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN;
	РазделительНастройкиВидовУпаковок      = ПараметрыФормирования.РазделительНастройкиВидовУпаковокПоGTIN;
	
	Если Не ЗначениеЗаполнено(ВидПродукции)
		И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СсылкаНаОбъект);
	КонецЕсли;
	Если Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина)
		И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеПредставления            = Новый Массив();
	ПоддерживаетсяЧастичноеВыбытие = ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции);
	ЭтоМолочнаяПродукция           = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции);
	ЭтоТабак                       = (ВидПродукции = Перечисления.ВидыПродукцииИС.Табак);
	ЭтоПиво                        = (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво);
	ЭтоБАПиво                      = (ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво);
	ЭтоАльтернативныйТабак         = (ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	ЭтоНСП                         = (ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
	ЭтоДухи                        = (ВидПродукции = Перечисления.ВидыПродукцииИС.Духи);
	ЭтоАлкоголь                    = (ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная);
	ТолькоПросмотр                 = Ложь;
	ДопустимаНастройкаТабака       = (ЭтоТабак И ДопустимаНастройкаЛогистическойЕдиницы);
	
	Если Не РазрешеноРедактированиеРеквизитов
		Или Не ЕстьПравоРедактирования Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		ИмяГиперссылкиНастройки = "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИСДляПросмотра";
		ТекстГиперсылкиОткрытияФормы = НСтр("ru = 'Подробнее'");
	Иначе
		ИмяГиперссылкиНастройки = "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИС";
		ТекстГиперсылкиОткрытияФормы = НСтр("ru = 'Настроить'");
	КонецЕсли;
	
	Если ПоддерживаетсяЧастичноеВыбытие Тогда
		УчаствуетКакПродаваемая = РегистрыСведений.НастройкиЧастичногоВыбытияПродукцииИС.ОсновнаяНоменклатураЧастичногоВыбытия(СсылкаНаОбъект);
		ОбщийСписокНоменклатуры = УчаствуетКакПродаваемая.ВыгрузитьКолонку("Номенклатура");
	Иначе
		ОбщийСписокНоменклатуры = Новый Массив();
	КонецЕсли;
	ОбщийСписокНоменклатуры.Добавить(СсылкаНаОбъект);
	
	ЭтоОтдельнаяНоменклаутра    = Ложь;
	ОписаниеНоменклатур         = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(ОбщийСписокНоменклатуры);
	ОписаниеНоменклатуры        = ОписаниеНоменклатур[СсылкаНаОбъект];
	ВариантИспользованияЕдиницы = ОписаниеНоменклатуры.ВариантИспользованияЕдиницыХранения;
	
	Если ПоддерживаетсяЧастичноеВыбытие Тогда
		
		ДанныеПредставленияОсновнойНоменклатуры = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из УчаствуетКакПродаваемая Цикл
			ТекущееОписаниеНоменклатуры = ОписаниеНоменклатур[СтрокаТаблицы.Номенклатура];
			Если ЗначениеЗаполнено(ТекущееОписаниеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
				ЭтоОтдельнаяНоменклаутра = Истина;
				Если ДанныеПредставленияОсновнойНоменклатуры.Количество() Тогда
					ДанныеПредставленияОсновнойНоменклатуры.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеПредставленияОсновнойНоменклатуры.Добавить(
					Новый ФорматированнаяСтрока(
						СтрокаТаблицы.НоменклатураПредставление,,,,
						ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Номенклатура)));
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоОтдельнаяНоменклаутра Тогда
			
			Если ЭтоДухи Или ЭтоПиво Или ЭтоАлкоголь Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Используется для продажи на разлив:'"));
			Иначе
				ДанныеПредставления.Добавить(НСтр("ru = 'Используется для поштучной продажи:'"));
			КонецЕсли;
			ДанныеПредставления.Добавить(" ");
			ДанныеПредставления.Добавить(Новый ФорматированнаяСтрока(ДанныеПредставленияОсновнойНоменклатуры));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоОтдельнаяНоменклаутра Тогда
		
		ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры = (ТребуетВзвешивания <> Неопределено И ТребуетВзвешивания);
		
		Если ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияТребуетУказанияЗначения
			Или ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры Тогда
			ДанныеПредставления.Добавить(НСтр("ru = 'Маркируемые потребительские упаковки требуют взвешивания'"));
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ПотребительскаяУпаковка
			Или Не ЗначениеЗаполнено(ВариантИспользованияЕдиницы) Тогда
			Если ЭтоМолочнаяПродукция Или ЭтоПиво Или ЭтоБАПиво Или ЭтоНСП Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует потребительской упаковке'"));
			ИначеЕсли ДопустимаНастройкаТабака Или ЭтоАльтернативныйТабак Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует пачке'"));
			ИначеЕсли ЭтоДухи Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует флакону'"));
			ИначеЕсли ЭтоАлкоголь Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует бутылке'"));
			КонецЕсли;
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияТребуетУказанияЗначения Тогда
			ДанныеПредставления.Добавить(НСтр("ru = 'Потребительские упаковки требуют взвешивания'"));
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ГрупповаяЛогистическаяУпаковка Тогда
			
			ЗначениеКоличества = 1;
			Если ЗначениеЗаполнено(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке) Тогда
				ЗначениеКоличества = Окр(1 / ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке);
			КонецЕсли;
			ДанныеПредставления.Добавить(НСтр("ru = 'Содержит'"));
			ДанныеПредставления.Добавить(" ");
			
			Если ЭтоАльтернативныйТабак Или ДопустимаНастройкаТабака Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 пачку;;%1 пачки;%1 пачек;%1 пачек'"),
						ЗначениеКоличества));
			ИначеЕсли ЭтоДухи Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 флакон;;%1 флакона;%1 флаконов;%1 флакона'"),
						ЗначениеКоличества));
			ИначеЕсли ЭтоАлкоголь Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 бутылку;;%1 бутылки;%1 бутылок;%1 бутылок'"),
						ЗначениеКоличества));
			Иначе
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 потребительскую упаковку;;%1 потребительских упаковок;%1 потребительских упаковок;%1 потребительская упаковка'"),
						ЗначениеКоличества));
			КонецЕсли;
			
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияСФиксированнымЗначением Тогда
			
			ДанныеНоменклатуры = ИнтеграцияИСМП.ДанныеНоменклатуры(СсылкаНаОбъект);
			ДанныеПредставления.Добавить(
				СтрШаблон(
					НСтр("ru = 'В потребительской упаковке %1 %2'"),
					ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке,
					ДанныеНоменклатуры.ЕдиницаИзмерения));
		
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками Тогда
			
			ДанныеНоменклатуры = ИнтеграцияИСМП.ДанныеНоменклатуры(СсылкаНаОбъект);
			ДанныеПредставления.Добавить(
				СтрШаблон(
					НСтр("ru = 'Маркируемая потребительская упаковка: %1'"),
					ОписаниеНоменклатуры.ПотребительскаяУпаковка));
			
		КонецЕсли;
		
		Если ПоддерживаетсяЧастичноеВыбытие Тогда
			
			Если ДанныеПредставления.Количество() Тогда
				ДанныеПредставления.Добавить(". ");
			КонецЕсли;
			Если ПредставлениеВНесколькоСтрок Тогда
				ДанныеПредставления.Добавить(Символы.ПС);
			КонецЕсли;
			
			ДанныеПредставления.Добавить(ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции));
			ДанныеПредставления.Добавить(":");
			ДанныеПредставления.Добавить(" ");
			Если ЗначениеЗаполнено(ОписаниеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
				Если ЭтоДухи Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 мл. во флаконе'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				ИначеЕсли ЭтоПиво или ЭтоБАПиво Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 л. в кеге'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				ИначеЕсли ЭтоАлкоголь Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 мл. в бутылке'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				ИначеЕсли ЭтоНСП Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 ед. в потребительской упаковке'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				Иначе
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 шт. в пачке'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				КонецЕсли;
			ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ГрупповаяЛогистическаяУпаковка Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'не поддерживается'"));
			Иначе
				ДанныеПредставления.Добавить(НСтр("ru = 'не используется'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПредставления.Количество()
			И Не ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры Тогда
			ДанныеПредставления.Добавить(". ");
			ДанныеПредставления.Добавить(Новый ФорматированнаяСтрока(ТекстГиперсылкиОткрытияФормы,,,, ИмяГиперссылкиНастройки));
		КонецЕсли;
		
	КонецЕсли;
	
	// Виды упаковок
	Если ВыводитьНастройкиВидовУпаковокПоGTIN Тогда
		Если ДанныеПредставления.Количество() Тогда
			Если ОтступПриВыводеНастройкиВидаУпаковки Тогда
				ДанныеПредставления.Добавить(Символы.ПС);
			ИначеЕсли РазделительНастройкиВидовУпаковок = Неопределено Тогда
				ДанныеПредставления.Добавить(". ");
			КонецЕсли;
			Если РазделительНастройкиВидовУпаковок <> Неопределено Тогда
				ДанныеПредставления.Добавить(РазделительНастройкиВидовУпаковок);
			КонецЕсли;
		КонецЕсли;
		ДанныеПредставления.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Виды упаковок по GTIN'"),,,,
				"ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП"));
	КонецЕсли;
	
	Если ДанныеПредставления.Количество() Тогда
		ВозвращаемоеЗначение = Новый ФорматированнаяСтрока(ДанныеПредставления);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

// Коэффициент упаковки.
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
//  КэшированныеЗначения - Неопределено, Структура -
// Возвращаемое значение:
//  Число - Коэффициент упаковки
Функция КоэффициентУпаковки(Упаковка, Номенклатура = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Коэффициент = 1;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		ИнтеграцияИСПереопределяемый.КоэффициентУпаковки(Коэффициент, Упаковка, Номенклатура, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Возвращает вес упаковки в килограммах.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено, Структура - кэшированные значения
// Возвращаемое значение:
//  Число - Вес упаковки в килограммах
Функция ВесУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка, КэшированныеЗначения).Вес;
	
КонецФункции

// Возвращает объем упаковки в литрах.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено, Структура - кэшированные значения
// Возвращаемое значение:
//  Число - Объем упаковки в литрах
Функция ОбъемУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка, КэшированныеЗначения).Объем;
	
КонецФункции

// Возвращает коэффициент упаковки, вес упаковки в килограммах, объем упаковки в литрах и тип измеряемой величины.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка
//  КэшированныеЗначения - Неопределено - кэшированные значения не используются,
//                         Структура - кэшированные значения:
//                          Ключ - "КоэффициентВесОбъемУпаковки", Значение - Соответствие:
//                          Ключ - Номенклатура,                  Значение - Соответствие:
//                          Ключ - Упаковка,                      Значение - Структура:
//                           Ключ - "Коэффициент", Значение - Число,
//                           Ключ - "Вес",         Значение - Число,
//                           Ключ - "Объем",       Значение - Число.
//                           Ключ - "ТипИзмеряемойВеличиныВес"   - Значение - Булево.
//                           Ключ - "ТипИзмеряемойВеличиныОбъем" - Значение - Булево.
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Коэффициент - Число - Коэффициент упаковки.
//   * Вес         - Число - Вес упаковки в килограммах.
//   * Объем       - Число - Объем упаковки в литрах.
//   * ТипИзмеряемойВеличиныВес   - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения веса.
//   * ТипИзмеряемойВеличиныОбъем - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения объема.
//
Функция КоэффициентВесОбъемУпаковки(Номенклатура, Упаковка = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Коэффициент", 0);
	Результат.Вставить("Вес",         0);
	Результат.Вставить("Объем",       0);
	Результат.Вставить("ТипИзмеряемойВеличиныВес",   Ложь);
	Результат.Вставить("ТипИзмеряемойВеличиныОбъем", Ложь);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИспользоватьКэшированныеЗначения = КэшированныеЗначения <> Неопределено;
	
	Если ИспользоватьКэшированныеЗначения Тогда
		
		Если Не КэшированныеЗначения.Свойство("КоэффициентВесОбъемУпаковки") Тогда
			КэшированныеЗначения.Вставить("КоэффициентВесОбъемУпаковки", Новый Соответствие);
		КонецЕсли;
		
		ДанныеНоменклатуры = КэшированныеЗначения.КоэффициентВесОбъемУпаковки[Номенклатура];
		Если ДанныеНоменклатуры = Неопределено Тогда
			КэшированныеЗначения.КоэффициентВесОбъемУпаковки.Вставить(Номенклатура, Новый Соответствие);
			ДанныеНоменклатуры = КэшированныеЗначения.КоэффициентВесОбъемУпаковки[Номенклатура];
		КонецЕсли;
		
		Если Упаковка = Неопределено Тогда
			КлючУпаковки = ИнтеграцияИСКлиентСерверПовтИсп.ПустоеЗначениеУпаковки();
			Если КлючУпаковки = Неопределено Тогда
				КлючУпаковки = "";
			КонецЕсли;
		Иначе
			КлючУпаковки = Упаковка;
		КонецЕсли;
		
		ДанныеУпаковки = ДанныеНоменклатуры[КлючУпаковки];
		
	Иначе
		ДанныеУпаковки = Неопределено;
	КонецЕсли;
	
	Если ДанныеУпаковки = Неопределено Тогда
		
		ДанныеУпаковок = ТаблицаДанныхУпаковок();
		
		Строка = ДанныеУпаковок.Добавить();
		Строка.Номенклатура = Номенклатура;
		Строка.Упаковка     = Упаковка;
		
		ИнтеграцияИСПереопределяемый.КоэффициентВесОбъемУпаковок(ДанныеУпаковок);
		
		ДанныеУпаковки = ДанныеУпаковок[0];
		ЗаполнитьЗначенияСвойств(Результат, ДанныеУпаковки);
		
		Если ИспользоватьКэшированныеЗначения Тогда
			ДанныеНоменклатуры.Вставить(КлючУпаковки, Результат);
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, ДанныеУпаковки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения коэффициента, веса, объема упаковок и тип измеряемой величины.
//
// Параметры:
//  ВходящиеДанные - ТаблицаЗначений, ТабличнаяЧасть - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - Упаковка, данные которой нужно получить - если не указана,
//                                               тогда получаются данные базовой единицы измерения номенклатуры.
//                 - Массив из Структура со свойствами:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - см.ТаблицаЗначений
//   * Упаковка     - ОпределяемыйТип.Упаковка - см.ТаблицаЗначений
//                 - Массив из ОпределяемыйТип.Номенклатура - см.ТаблицаЗначений, Упаковка считается не указанной.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - Если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                                иначе - в единицах измерения, указанных в константах:
//                                                ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
// Возвращаемое значение:
//  Соответствие - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Соответствие из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.Упаковка,
//    * Значение - Структура со свойствами:
//     * Коэффициент - Число - Разрядность (15, 3).
//     * Вес         - Число - Разрядность (15, 3).
//     * Объем       - Число - Разрядность (15, 3).
//     * ТипИзмеряемойВеличиныВес   - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                             или упаковка, является единицой измерения веса.
//     * ТипИзмеряемойВеличиныОбъем - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                             или упаковка, является единицой измерения объема.
//
Функция КоэффициентВесОбъемУпаковок(ВходящиеДанные, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеУпаковок = ТаблицаДанныхУпаковокИзВходящихДанных(ВходящиеДанные);
	
	ИнтеграцияИСПереопределяемый.КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС);
	
	Для Каждого СтрокаДанных Из ДанныеУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура;
		ДанныеУпаковки.Вставить("Коэффициент", СтрокаДанных.Коэффициент);
		ДанныеУпаковки.Вставить("Вес",         СтрокаДанных.Вес);
		ДанныеУпаковки.Вставить("Объем",       СтрокаДанных.Объем);
		ДанныеУпаковки.Вставить("ТипИзмеряемойВеличиныВес",   СтрокаДанных.ТипИзмеряемойВеличиныВес);
		ДанныеУпаковки.Вставить("ТипИзмеряемойВеличиныОбъем", СтрокаДанных.ТипИзмеряемойВеличиныОбъем);
		
		ДанныеНоменклатуры = Результат[СтрокаДанных.Номенклатура];
		Если ДанныеНоменклатуры = Неопределено Тогда
			Результат.Вставить(СтрокаДанных.Номенклатура, Новый Соответствие);
			ДанныеНоменклатуры = Результат[СтрокаДанных.Номенклатура];
		КонецЕсли;
		
		Если СтрокаДанных.Упаковка = Неопределено Тогда
			КлючУпаковки = "";
		Иначе
			КлючУпаковки = СтрокаДанных.Упаковка;
		КонецЕсли;
		
		ДанныеНоменклатуры.Вставить(КлючУпаковки, ДанныеУпаковки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает единицу измерения, указанную в константе ЕдиницаИзмеренияКилограммИС.
//
// Возвращаемое значение:
// 	ОпределяемыйТип.Упаковка
// 
Функция ЕдиницаИзмеренияКилограмм() Экспорт
	
	Возврат Константы.ЕдиницаИзмеренияКилограммИС.Получить();
	
КонецФункции

// Возвращает единицу измерения, указанную в константе ЕдиницаИзмеренияЛитрИС.
//
// Возвращаемое значение:
// 	ОпределяемыйТип.Упаковка
// 
Функция ЕдиницаИзмеренияЛитр() Экспорт
	
	Возврат Константы.ЕдиницаИзмеренияЛитрИС.Получить();
	
КонецФункции

// Возвращает единицы измерения веса и объема.
//
// Возвращаемое значение:
// 	Структура
// 		* ЕдиницаИзмеренияВеса - ОпределяемыйТип.Упаковка
// 		* ЕдиницаИзмеренияОбъема - ОпределяемыйТип.Упаковка
// 
Функция ЕдиницыИзмеренияВесаИОбъема() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницаИзмеренияКилограммИС.Значение КАК ЕдиницаИзмеренияВеса,
	|	ЕдиницаИзмеренияЛитрИС.Значение КАК ЕдиницаИзмеренияОбъема
	|ИЗ
	|	Константа.ЕдиницаИзмеренияКилограммИС КАК ЕдиницаИзмеренияКилограммИС,
	|	Константа.ЕдиницаИзмеренияЛитрИС КАК ЕдиницаИзмеренияЛитрИС";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Результат.Вставить("ЕдиницаИзмеренияВеса",   Выборка.ЕдиницаИзмеренияВеса);
	Результат.Вставить("ЕдиницаИзмеренияОбъема", Выборка.ЕдиницаИзмеренияОбъема);
	
	Возврат Результат;
	
КонецФункции

Функция ПустоеЗначениеУпаковки() Экспорт
	
	Возврат ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка");
	
КонецФункции

#КонецОбласти

// Классифицирует текущий сеанс, как сеанс, запущенный в фоновом задании в клиент-серверном варианте, в остальных
// случаях, сеанс имеет ту же файловую систему на стороне сервера, что и основной сеанс.
//	
// Возвращаемое значение:
// 	Булево - Описание
Функция ЭтоФоновоеЗаданиеНаСервере() Экспорт
	
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() <> Неопределено
		И Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ОбработкаОшибок

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ГосИС если оно не задано.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ИмяСобытия       - Строка           - имя события.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	Если ИмяСобытия = Неопределено Тогда
		ИмяСобытия = НСтр("ru='ГосИС'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		ОбъектМетаданных,
		Данные,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Функция СписокАвтоподбораПолеСоставногоТипа(ОписаниеТипов, ТекстДляАвтоПодбора,
	ДобавлятьСлужебныеЭлементы = Истина, МинимальнаяДлинаСтрокиПоиска = 1) Экспорт
	
	Возврат СобытияФормИС.СписокАвтоподбораПолеСоставногоТипа(
		ОписаниеТипов, ТекстДляАвтоПодбора, ДобавлятьСлужебныеЭлементы, МинимальнаяДлинаСтрокиПоиска);
	
КонецФункции

#КонецОбласти

#Область ОпределяемыеТипы

Функция ЗемельныйУчастокИСПереопределен() Экспорт
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ЗемельныйУчастокИС.Тип.Типы();
	
	Возврат ОписаниеТипов.Количество() > 1 Или ОписаниеТипов[0] <> Тип("СправочникСсылка.ЗемельныеУчасткиИС");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаДанныхУпаковок()
	
	ОписаниеТипаЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ДанныеУпаковок = Новый ТаблицаЗначений;
	ДанныеУпаковок.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеУпаковок.Колонки.Добавить("Упаковка",     Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеУпаковок.Колонки.Добавить("Коэффициент",  ОписаниеТипаЧисло);
	ДанныеУпаковок.Колонки.Добавить("Вес",          ОписаниеТипаЧисло);
	ДанныеУпаковок.Колонки.Добавить("Объем",        ОписаниеТипаЧисло);
	ДанныеУпаковок.Колонки.Добавить("ТипИзмеряемойВеличиныВес",   ОписаниеТипаБулево);
	ДанныеУпаковок.Колонки.Добавить("ТипИзмеряемойВеличиныОбъем", ОписаниеТипаБулево);
	
	Возврат ДанныеУпаковок;
	
КонецФункции

Функция ТаблицаДанныхУпаковокИзВходящихДанных(ВходящиеДанные)
	
	ДанныеУпаковок = ТаблицаДанныхУпаковок();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив")
		И ВходящиеДанные.Количество() > 0
		И ТипЗнч(ВходящиеДанные[0]) <> Тип("Структура")
		И ТипЗнч(ВходящиеДанные[0]) <> Тип("СтрокаТаблицыЗначений")
		И ТипЗнч(ВходящиеДанные[0]) <> Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Элемент Из ВходящиеДанные Цикл
			Если ЗначениеЗаполнено(Элемент) Тогда
				СтрокаДанных = ДанныеУпаковок.Добавить();
				СтрокаДанных.Номенклатура = Элемент;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из ВходящиеДанные Цикл
			Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				СтрокаДанных = ДанныеУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанных, Строка, "Номенклатура, Упаковка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеУпаковок.Свернуть("Номенклатура, Упаковка",
		"Коэффициент, Вес, Объем, ТипИзмеряемойВеличиныВес, ТипИзмеряемойВеличиныОбъем");
	
	Возврат ДанныеУпаковок;
	
КонецФункции

#КонецОбласти