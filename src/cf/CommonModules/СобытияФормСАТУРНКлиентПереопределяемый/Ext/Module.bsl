#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.Номенклатура - Результат выбора.
//  ИсточникВыбора          - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
//  ПараметрыЗаполнения    - Неопределено,
//                           См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ЗависимыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		ЗависимыеРеквизиты.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	
	ОбновитьПАТ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ПАТ")
		И Форма.ИмяФормы <> "Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаДокумента"
		И Форма.ИмяФормы <> "Документ.ИмпортПродукцииСАТУРН.Форма.ФормаДокумента"
		И Не (Форма.ИмяФормы = "Документ.НакладнаяСАТУРН.Форма.ФормаДокумента"
			И Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути"));
	Если ОбновитьПАТ Тогда
		ЗависимыеРеквизиты.Добавить("ПАТ");
		ПАТ = ТекущаяСтрока.ПАТ;
	КонецЕсли;
	
	ИнтеграцияСАТУРНКлиентСерверПереопределяемый.ПриИзмененииНоменклатуры(ТекущаяСтрока, СтрСоединить(ЗависимыеРеквизиты, ","),,0);
	
	Если ОбновитьПАТ И ПАТ <> ТекущаяСтрока.ПАТ Тогда
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Партия");
		СтруктураРеквизитов.Вставить("ВыделеннаяПартия");
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураРеквизитов);
	КонецЕсли;
	
	ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки подбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить("ПодконтрольнаяПродукцияСАТУРН");
	Если Форма.ИмяФормы	= "Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаДокумента" Тогда
		ИмяТабличнойЧасти = "Сырье";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	ПараметрыПодбора = ПолучитьПараметрыПодбора(Форма.Объект, ИмяТабличнойЧасти);
	ПараметрыПодбора.ДопустимыеВидыПродукции = ОсобенностьУчета;
	
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат выбора в форму документа САТУРН (например из формы подбора номенклатуры,
//   при использовании множественного выбора вместо закрытия формы подбора с общим результатом).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ВыбранноеЗначение - Произвольный - результат выбора.
//  ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, в которой произведен выбор.
Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ДопПараметры = Новый Структура("ИмяТабличнойЧасти", ИсточникВыбора.ИмяТаблицы);
		Форма.Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, в которой вызывается команда создания номенклатуры,
//  ПараметрыНоменклатуры - См. ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ИмяКолонкиНоменклатура - Строка - имя колонки с данными номенклатуры.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Упаковки

// Выполняет действия при изменении упаковки в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                         См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения);
	ПриИзмененииТипаИзмеряемойВеличины(Форма, ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении типа измеряемой величины в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                        См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииТипаИзмеряемойВеличины(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоВУпаковкеСАТУРН") Тогда
		
		ДанныеУпаковки = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковки(
			ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		
		// ТипИзмеряемойВеличины
		// 0 - Неизвестен
		// 1 - Объем
		// 2 - Вес
		// 3 - Вес или Объем
		Если ДанныеУпаковки.ТипИзмеряемойВеличиныОбъем Тогда
			ТипИзмеряемойВеличины = 1;
		ИначеЕсли ДанныеУпаковки.ТипИзмеряемойВеличиныВес Тогда
			ТипИзмеряемойВеличины = 2;
		ИначеЕсли ДанныеУпаковки.Вес > 0 И ДанныеУпаковки.Объем > 0 Тогда
			ТипИзмеряемойВеличины = 3;
		ИначеЕсли ДанныеУпаковки.Объем > 0 Тогда
			ТипИзмеряемойВеличины = 1;
		ИначеЕсли ДанныеУпаковки.Вес > 0 Тогда
			ТипИзмеряемойВеличины = 2;
		Иначе
			ТипИзмеряемойВеличины = 0;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипИзмеряемойВеличиныСАТУРН") Тогда
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТипИзмеряемойВеличиныСАТУРН) Тогда
				Если ТипИзмеряемойВеличины = 1 Или ТипИзмеряемойВеличины = 3 Тогда
					ТекущаяСтрока.ТипИзмеряемойВеличиныСАТУРН =
						ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличинСАТУРН.Объем");
				ИначеЕсли ТипИзмеряемойВеличины = 2 Или ТипИзмеряемойВеличины = 0 Тогда
					ТекущаяСтрока.ТипИзмеряемойВеличиныСАТУРН =
						ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличинСАТУРН.Вес");
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяСтрока.ТипИзмеряемойВеличиныСАТУРН =
				ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличинСАТУРН.Объем") Тогда
				ТекущийТипИзмеряемойВеличины = 1;
			ИначеЕсли ТекущаяСтрока.ТипИзмеряемойВеличиныСАТУРН =
				ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличинСАТУРН.Вес") Тогда
				ТекущийТипИзмеряемойВеличины = 2;
			Иначе
				ТекущийТипИзмеряемойВеличины = 0;
			КонецЕсли;
		Иначе
			ТекущийТипИзмеряемойВеличины = 0;
		КонецЕсли;
		
		Если ТипИзмеряемойВеличины <> 0 Тогда
			Если ТекущийТипИзмеряемойВеличины = 1 Тогда
				ТекущаяСтрока.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Объем;
			ИначеЕсли ТекущийТипИзмеряемойВеличины = 2 Тогда
				ТекущаяСтрока.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Вес;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Количество

// Выполняет действия при изменении подобранного количества (поле КоличествоУпаковок) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                         См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
	
		Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ТекущаяСтрока.Упаковка, ТекущаяСтрока.Номенклатура, КэшированныеЗначения);
		Если Не ЗначениеЗаполнено(Коэффициент) Тогда
			Коэффициент = 1;
		КонецЕсли;
		
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок * Коэффициент;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОКПД2

Процедура ПриИзмененииОКПД2(Форма, Элемент) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриНачалеВыбораОКПД2(Форма, Элемент, ДанныеВыбора, ТекущееЗначение, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РежимВыбора",   Истина);
	
	ОткрытьФорму("Справочник.КлассификаторОКПД2.Форма.ФормаСписка", ПараметрыВыбора, Элемент, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПриОбработкеВыбораОКПД2(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриАвтоподбореОКПД2(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыПодбора(ОбъектФормы, ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(ОбъектФормы.Дата) = НачалоДня(ТекущаяДата()), Неопределено, ОбъектФормы.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, ОбъектФормы.Ссылка, НСтр("ru = 'Товары'"));
	
	Возврат ИнтеграцияСАТУРНБПВызовСервера.ПолучитьПараметрыПодбораНоменклатуры(ДатаРасчетов, ЗаголовокПодбора, ИмяТаблицы);

КонецФункции

Процедура СоздатьДокументПоступлениеТоваровУслугНаОснованииИмпортПродукцииСАТУРН(ДанныеЗаполнения) Экспорт
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары", ПараметрыФормы);
	
КонецПроцедуры

Процедура СоздатьДокументПоступлениеТоваровУслугНаОснованииНакладнаяСАТУРН(ДанныеЗаполнения) Экспорт
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары", ПараметрыФормы);

КонецПроцедуры

Процедура СоздатьДокументВозвратТоваровОтПокупателяНаОснованииНакладнаяСАТУРН(ДанныеЗаполнения) Экспорт
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокументаОбщая", ПараметрыФормы);

КонецПроцедуры

#КонецОбласти
