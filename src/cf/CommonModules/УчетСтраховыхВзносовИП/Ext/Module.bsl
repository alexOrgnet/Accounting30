#Область ПрограммныйИнтерфейс

// Возвращает оптимальную периодичность уплаты фиксированных страховых взносов ИП,
// в зависимости от системы налогообложения
//
// Параметры:
//  Организация - СправочникСсылка.Организация
//  Период - Дата
//
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период) Экспорт
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода = КонецКвартала(Период);
	
	Возврат ПериодичностьУплатыФиксированныхСтраховыхВзносовЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

// Возвращает оптимальную периодичность уплаты фиксированных страховых взносов ИП,
// в зависимости от системы налогообложения
//
// Параметры:
//  Организация - СправочникСсылка.Организация
//  НачалоПериода - Дата
//  КонецПериода - Дата
//
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьУплатыФиксированныхСтраховыхВзносовЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат Перечисления.Периодичность.Год;
	КонецЕсли;
	
	СистемаНалогообложенияНаНачалоГода = УчетнаяПолитика.СистемаНалогообложения(Организация, НачалоГода(НачалоПериода));
	Если СистемаНалогообложенияНаНачалоГода = Перечисления.СистемыНалогообложения.АУСН Тогда
		Возврат Перечисления.Периодичность.Год;
	КонецЕсли;
	
	Если НачалоПериода >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж()
		И УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, КонецПериода) Тогда
		
		Возврат Перечисления.Периодичность.Год;
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, НачалоПериода, КонецПериода);
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода);
	
	Если ПлательщикЕНВД Тогда
		ФиксированныеВзносыУменьшаютЕНВД = УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(НачалоПериода)
			Или Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода);
	Иначе
		ФиксированныеВзносыУменьшаютЕНВД = Ложь;
	КонецЕсли;
	
	Если ПрименяетсяУСН
		Или (ПлательщикЕНВД И ФиксированныеВзносыУменьшаютЕНВД)
		Или (ПлательщикНДФЛ И НачалоПериода >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()) Тогда
		
		Периодичность = Перечисления.Периодичность.Квартал;
		
	Иначе
		Периодичность = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции


// Возвращает суммы фиксированных страховых взносов к уплате на дату с учетом уплаченных ранее в налоговом периоде
//
Функция ФиксированныеСтраховыеВзносыКУплате(Организация, Период, ПериодичностьУплаты, СообщатьОбОшибках = Истина, Регистратор = Неопределено) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	
	// Сумма годового взноса
	СтраховыеВзносы.Вставить("СуммаВзносаПФРВсего", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРДобровольноВсего", 0);
	СтраховыеВзносы.Вставить("КоэффициентПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССВсего", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаЕдиныйТарифВсего", 0);
	
	// Начислено с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРНачислено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРДобровольноНачислено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСНачислено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССНачислено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаЕдиныйТарифНачислено", 0);

	// Переплата на начало года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРПереплата", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРДобровольноПереплата", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСПереплата", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССПереплата", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаЕдиныйТарифПереплата", 0);

	// Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРДобровольноУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаЕдиныйТарифУплачено", 0);
	
	// Сумма к уплате сейчас
	СтраховыеВзносы.Вставить("СуммаВзносаПФР", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМС", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФСС", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаЕдиныйТариф", 0);
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыУплаченные", Неопределено);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчет фиксированных страховых взносов за %1 год не поддерживается'"), Формат(Период, "ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	ФиксированныеСтраховыеВзносы  = РассчитатьФиксированныеСтраховыеВзносы(
		?(ПериодичностьУплаты = Перечисления.Периодичность.Квартал, КонецКвартала(Период), КонецГода(Период)),
		Организация);
	
	ОстатокРасчетовПоВзносам = ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(Организация, Период);
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, 
		Перечисления.ВидыПлатежейВГосБюджет.Налог, Регистратор);
	
	Если СтраховыеВзносыУплаченные <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("СчетУчета");
		СтраховыеВзносыУплаченные.Индексы.Добавить("СчетУчета");
	КонецЕсли;
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
		
		Если Не ФиксированныеСтраховыеВзносы.Свойство(КлючИЗначение.Ключ) Тогда 
			Продолжить;
		КонецЕсли;
		
		Начислено = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ];
		Всего     = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ + "Всего"];
		Переплата = Макс(0, ОстатокРасчетовПоВзносам[КлючИЗначение.Ключ]);
		
		Уплачено = 0;
		Если СтраховыеВзносыУплаченные <> Неопределено Тогда
			ПараметрыОтбора.СчетУчета = КлючИЗначение.Значение;
			МассивСтрокОплаты  = СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаОплаты Из МассивСтрокОплаты Цикл
				Уплачено = Уплачено + СтрокаОплаты.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Всего"]     = Всего;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Начислено"] = Начислено;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Уплачено"]  = Уплачено;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Переплата"] = Переплата;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ]               = Макс(Начислено - Переплата - Уплачено, 0);
		
	КонецЦикла;
	
	СтраховыеВзносы.СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные;
	СтраховыеВзносы.КоэффициентПФРДобровольно = ФиксированныеСтраховыеВзносы.КоэффициентПФРДобровольно;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает суммы страховых взносов, исчисленные с суммы доходов
//
Функция СтраховыеВзносыСДоходовКУплате(Организация, Период, СтруктураДоходов, СообщатьОбОшибках = Истина) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	СтраховыеВзносы.Вставить("ПредельнаяСуммаВзноса",          Ложь);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовВсего",    0); // Сумма взноса с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовУплачено", 0); // Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходов",         0); // Сумма к уплате
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыУплаченные", Неопределено);
	
	СтраховыеВзносы.Вставить("ПараметрыРасчетаВзносаСДоходов", НовыеПараметрыРасчетаВзносаСДоходов());
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Страховые взносы, исчисленные с суммы дохода за %1 год не уплачиваются'"), Формат(Период, "Л=ru; ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	// Особенности, влияющие на расчет.
	
	ПериодичностьНачисления = ПериодичностьНачисления(Организация, Период);
	
	НачалоПериода = НачалоСтраховогоПериода(Период);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодичностьНачисления, Период);
	
	ТекущийПериодПользователя = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ПериодичностьНачисления,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	РасчетЗаТекущийПериод = (КонецПериода >= ТекущийПериодПользователя);
	
	УчитыватьРасходы = УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, Период);
	
	ПараметрыРасчета = СтраховыеВзносы.ПараметрыРасчетаВзносаСДоходов;
	
	ПараметрыРасчета.РасчетЗаТекущийПериод = РасчетЗаТекущийПериод;
	ПараметрыРасчета.ПериодичностьНачисления = ПериодичностьНачисления;
	
	// Подготовка даннных для расчета.
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносовСДоходов(КонецПериода, Организация);
	
	ВсегоДоходов = СтруктураДоходов.СуммаДоходаИП
				 + СтруктураДоходов.СуммаДоходаУСН
				 + СтруктураДоходов.ВмененныйДоход
				 + СтруктураДоходов.ПотенциальноВозможныйДоход;
	
	ПараметрыРасчета.ВсегоДоходов = ВсегоДоходов;
	
	// Если имеется только доход по ПСН, то расходы не учитываются при расчете взносов с доходов
	Если ВсегоДоходов = СтруктураДоходов.ПотенциальноВозможныйДоход Тогда
		УчитыватьРасходы = Ложь;
	КонецЕсли;
	
	ПараметрыРасчета.УчитыватьРасходы = УчитыватьРасходы;
	
	Если РасчетЗаТекущийПериод И УчитыватьРасходы
		И ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
		// Для расчета потребуются все уплаченные взносы.
		ОтборВидУплаченныхВзносов = Неопределено;
	Иначе
		// Потребуются только уплаченные взносы с доходов.
		ОтборВидУплаченныхВзносов = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	КонецЕсли;
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, ОтборВидУплаченныхВзносов);
	
	Если СтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыУплаченные.Скопировать(
			Новый Структура("ВидПлатежаВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела));
		
		УплаченоСДоходов = 0;
		Для Каждого ТекущийПлатеж Из СтраховыеВзносыСДоходовУплаченные Цикл
			Если ТекущийПлатеж.ДатаДокументаОплаты <= КонецПериода Тогда
				УплаченоСДоходов = УплаченоСДоходов + ТекущийПлатеж.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтраховыеВзносыСДоходовУплаченные = Неопределено;
		УплаченоСДоходов = 0;
	КонецЕсли;
	
	// Расчет суммы взноса.
	
	ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	ДатаНачалаВеденияУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	Если ДатаНачалаВеденияУчета <> Неопределено И Период <= ДатаНачалаВеденияУчета Тогда
		
		// Данные по страховым взносам за годы до начала ведения учета в программе рассчитывать по доходам не нужно.
		// Обязанность по уплате проверим по вводу остатков
		ДатаВводаОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
		Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ПериодСобытия,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Организация = &Организация
			|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)) КАК ХозрасчетныйОстатки
			|
			|ИМЕЮЩИЕ
			|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) <= 0");
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ПериодСобытия", Новый Граница(КонецДня(ДатаВводаОстатков), ВидГраницы.Включая));
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РасчетнаяСуммаВзноса = Выборка.СуммаОстаток;
			Иначе
				РасчетнаяСуммаВзноса= 0;
			КонецЕсли;
		Иначе
			РасчетнаяСуммаВзноса = 0;
		КонецЕсли;
		
	ИначеЕсли РасчетЗаТекущийПериод И УчитыватьРасходы Тогда
		
		Если ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
			
			// При ежеквартальном признании расходов взносы, оплаченные в течение периода, уже учтены в расходах.
			// Считаем, что неоплаченная часть взносов будет оплачена и учтена в расходах текущего квартала.
			Если Период < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
				ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьПФР + ДанныеДляРасчета.ФиксированнаяЧастьФФОМС;
			Иначе
				ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьЕдиныйТариф;
			КонецЕсли;
			
			Если СтраховыеВзносыУплаченные <> Неопределено Тогда
				
				// Зачет уплаченных фиксированных взносов происходит только после проведения закрытия периода,
				// а уплата ФСС засчитывается по факту ввода платежного документа, из-за чего до закрытыия периода система пересчитывает 
				// взносы с доходов с учетом уплаченного ФСС, что приводит к появлению задолженнности по взносам с доходов.
				// Поэтому при расчете взносов с доходов мы не смотрим на уплаченный ФСС.
				
				УплаченоФиксированнаяЧасть = 0;
				СчетУчетаФСС = ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод;
				Для Каждого ТекущийПлатеж Из СтраховыеВзносыУплаченные Цикл
					Если ТекущийПлатеж.СчетУчета <> СчетУчетаФСС И ТекущийПлатеж.ДатаДокументаОплаты <= КонецПериода Тогда
						УплаченоФиксированнаяЧасть = УплаченоФиксированнаяЧасть + ТекущийПлатеж.Сумма;
					КонецЕсли;
				КонецЦикла;
				
				УплаченоФиксированнаяЧасть = Макс(УплаченоФиксированнаяЧасть - УплаченоСДоходов, 0);
				
			Иначе
				УплаченоФиксированнаяЧасть = 0;
			КонецЕсли;
			
			НеУплаченоФиксированннаяЧасть = Макс(ФиксированнаяЧастьВзносов - УплаченоФиксированнаяЧасть, 0);
			ПараметрыРасчета.ФиксированнаяЧастьВзносов = НеУплаченоФиксированннаяЧасть;
			
			// При расчете взноса с разницы доходов и расходов необходимо:
			// - добавить к расходам не оплаченную фиксированную часть, поскольку она будет учтена в расходах после оплаты;
			// - исключить расходы на уже уплаченные взносы с доходов, поскольку они являются частью расчетной суммы взноса
			//   и не должны влиять на расчет.
			ОблагаемыйДоход = Макс(ВсегоДоходов + УплаченоСДоходов - НеУплаченоФиксированннаяЧасть - ДанныеДляРасчета.ПорогДоходов, 0);
			
			РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / (100 + ДанныеДляРасчета.ПроцентВзносов), 2, 1);
			
		Иначе
			
			// Ежегодное начисление взносов с учетом расходов производится только у ИП на ОСНО в периоды ранее 2020 года.
			
			УчтенныеРасходыНаУплатуВзносовЗаТекущийПериод
				= УчетДоходовИРасходовПредпринимателя.РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод(Организация, Период);
			
			// Учтенные расходы на постоянную часть взносов нужно исключить из базы - вместо них учитываются планируемые расходы за год.
			ВсегоДоходов = ВсегоДоходов + УчтенныеРасходыНаУплатуВзносовЗаТекущийПериод;
			
			Если Период < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
				ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьПФР + ДанныеДляРасчета.ФиксированнаяЧастьФФОМС; // До конца года будет учтена в расходах.
			Иначе
				ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьЕдиныйТариф;
			КонецЕсли;
	
			ПараметрыРасчета.ФиксированнаяЧастьВзносов = ФиксированнаяЧастьВзносов;
			
			ОблагаемыйДоход = Макс(ВсегоДоходов - ФиксированнаяЧастьВзносов - ДанныеДляРасчета.ПорогДоходов, 0);
			РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / (100 + ДанныеДляРасчета.ПроцентВзносов), 2, 1);
			
		КонецЕсли;
		
	Иначе
		
		ОблагаемыйДоход = Макс(ВсегоДоходов - ДанныеДляРасчета.ПорогДоходов, 0);
		РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / 100, 2, 1);
		
	КонецЕсли;
	
	МаксимальнаяСуммаВзноса = ДанныеДляРасчета.ПредельнаяСуммаВзноса - ДанныеДляРасчета.ФиксированнаяЧастьПФР;
	
	// Проверка предельной величины взноса
	СтраховыеВзносы.ПредельнаяСуммаВзноса = (РасчетнаяСуммаВзноса >= МаксимальнаяСуммаВзноса);
	
	СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего = ?(СтраховыеВзносы.ПредельнаяСуммаВзноса, МаксимальнаяСуммаВзноса, РасчетнаяСуммаВзноса);
	СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено = УплаченоСДоходов;
	СтраховыеВзносы.СуммаВзносаПФРсДоходов
		= Макс(СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего - СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено, 0);
	
	СтраховыеВзносы.СтраховыеВзносыУплаченные = СтраховыеВзносыСДоходовУплаченные;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает структуру данных, необходимых для расчета фиксированноей части страховых взносов
//
// Параметры:
//   Период - Дата - период расчета страховых взносов
//   Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Структура
//
Функция ДанныеДляРасчетаСтраховыхВзносов(Период, Организация = Неопределено) Экспорт
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("Периодичность", Перечисления.Периодичность.Год);
	ДанныеДляРасчета.Вставить("ДатаРегистрации", Дата(1, 1, 1));
	ДанныеДляРасчета.Вставить("УплачиваютсяДобровольныеВзносыВФСС", Ложь);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеДляРасчета.Периодичность = ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		ДанныеДляРасчета.ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
		ДанныеДляРасчета.УплачиваютсяДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(
			Организация, Период);
	КонецЕсли;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает структуру данных, необходимых для расчета страховых взносов с суммы доходов
//
Функция ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация = Неопределено) Экспорт
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("ПроцентВзносов", 0);
	ДанныеДляРасчета.Вставить("ПорогДоходов", 0);
	ДанныеДляРасчета.Вставить("ПредельнаяСуммаВзноса", 0); // с учетом фиксированной части
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьПФР", 0);
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьФФОМС", 0);
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьФСС", 0); 
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьЕдиныйТариф", 0);
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Период, Организация);
	
	ПредельнаяСуммаВзноса = РазмерыСтраховыхВзносов(Период, Организация).ПредельнаяСуммаВзноса;
	
	Если Организация = Неопределено Тогда
		// В сервисе регистрации ИП считаем по умолчанию взнос с доходов
		УплачиваетсяВзносСДоходов = Истина;
	Иначе
		// Взносы с доходов платятся на обязательное пенсионное страхование в случае единого тарифа
		// п.1.2 ст. 430 НК РФ
		УплачиваетсяВзносСДоходов = УчетСтраховыхВзносовИППовтИсп.УплачиваетсяВзносСДоходов(
			Организация,
			НачалоСтраховогоПериода(Период),
			Период);
	КонецЕсли;
	
	Если УплачиваетсяВзносСДоходов Тогда
		ДанныеДляРасчета.ПроцентВзносов = 1;
	КонецЕсли;
	
	ДанныеДляРасчета.ПорогДоходов          = ПредельныйДоходНеОблагаемыйВзносамиВПФР();
	ДанныеДляРасчета.ПредельнаяСуммаВзноса = ПредельнаяСуммаВзноса;  
	Если Период < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		ДанныеДляРасчета.ФиксированнаяЧастьПФР   = ФиксированныеСтраховыеВзносы.ПФР;
		ДанныеДляРасчета.ФиксированнаяЧастьФФОМС = ФиксированныеСтраховыеВзносы.ФФОМС;
	Иначе 
		ДанныеДляРасчета.ФиксированнаяЧастьЕдиныйТариф = ФиксированныеСтраховыеВзносы.ЕдиныйТариф;
	КонецЕсли;
	ДанныеДляРасчета.ФиксированнаяЧастьФСС   = ФиксированныеСтраховыеВзносы.ФСС; 
	
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает предельный размер дохода ИП, с которого не производится начисление дополнительного взноса в ПФР.
// Доходы свыше данного предела облагаются взносом в размере 1%, уплачиваемым в дополнение к фиксированной части
// взноса в ПФР за себя.
//
// Возвращаемое значение:
//   Число - предел доходов, при превышении которого начисляются взносы "с доходов свыше предела".
//
Функция ПредельныйДоходНеОблагаемыйВзносамиВПФР() Экспорт
	
	Возврат 300000;
	
КонецФункции

// Возвращает доходы, исчисленные в соответствии с частью 8 статьи 14 Федерального закона 212-ФЗ
//
// Возвращаемое значение:
//   Структура 
//     * СуммаДоходаИП - Число(15, 2) - сумма дохода по ОСНО
//     * СуммаДоходаУСН - Число(15, 2) - сумма дохода по УСН
//     * ВмененныйДоход - Число(15, 2) - сумма вмененного дохода ЕНВД
//     * ПотенциальноВозможныйДоход - Число(15, 2) - сумма потенциального дохода по полученным патентам
//
Функция СтруктураДоходовПоВидамДеятельности(Организация, Знач НачалоПериода, Знач КонецПериода, СообщатьОбОшибках = Истина) Экспорт
	
	СтруктураДоходов = Новый Структура("СуммаДоходаИП, СуммаДоходаУСН, ВмененныйДоход, ПотенциальноВозможныйДоход", 0, 0, 0, 0);
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Если ДатаРегистрации > КонецПериода Тогда
			Возврат СтруктураДоходов;
		КонецЕсли;
		Если ДатаРегистрации > НачалоПериода Тогда
			НачалоПериода = ДатаРегистрации;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДоходов.СуммаДоходаИП = УчетДоходовИРасходовПредпринимателя.СуммаДоходаДляРасчетаСтраховыхВзносов(
		Организация, НачалоПериода, КонецПериода);
	
	СтруктураДоходов.СуммаДоходаУСН = УчетУСН.СуммаДоходаДляРасчетаСтраховыхВзносовИП(
		Организация, НачалоПериода, КонецПериода);
	
	СтруктураДоходов.ВмененныйДоход = УчетЕНВД.ВмененныйДоход(
		Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках);
	
	СтруктураДоходов.ПотенциальноВозможныйДоход = УчетПСН.ПотенциальноВозможныйДоход(
		Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках);
	
	Возврат СтруктураДоходов;
	
КонецФункции

// Определяет, нужно ли вычитать расходы из доходов при расчете взносов в ПФР с доходов.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для расчета взносов.
//  Период - Дата - период (день в пределах года), за который рассчитываются взносы.
//
// Возвращаемое значение:
//   Булево   - если Истина, доходы при расчете взносов уменьшаются на расходы.
//
Функция УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, Период) Экспорт
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период)
		И Период >= Дата(2016, 1, 1) Тогда
		
		// Подпункт 1 пункта 9 статьи 430 НК РФ, пункт 3 статьи 210 НК РФ.
		Возврат Истина;
		
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
		И Период >= Дата(2020, 1, 1) Тогда
		
		// Определение Конституционного суда РФ от 30.01.2020 N 10-О.
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоСчетУчетаСтраховыхВзносовИП(СчетУчета) Экспорт
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
		Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
			Если КлючИЗначение.Значение = СчетУчета Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период)
	
	СтраховойПериод = Год(Период);
	Если СтраховойПериод >= 2017 Тогда
		НормативныйАкт = "НКРФ";  // НК РФ, статья 430 
	ИначеЕсли СтраховойПериод = 2015 Или СтраховойПериод = 2016 Тогда
		НормативныйАкт = "212ФЗМинтруд"; // 212-ФЗ, статья 14 или письмо Минтруда 10.03.2015 № 17-3/В-103 
	Иначе
		НормативныйАкт = "212ФЗ"; // 212-ФЗ, статья 14
	КонецЕсли;
	Возврат НормативныйАкт;
	
КонецФункции

Функция УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьНастройкуУчетаДняРегистрации(Период) Тогда
		УчитыватьДень = Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Получить();
	Иначе
		УчитыватьДень = (АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период) = "НКРФ");
	КонецЕсли;
	
	Возврат УчитыватьДень;
	
КонецФункции

Функция ПроверятьНастройкуУчетаДняРегистрации(Период) Экспорт
	
	Возврат АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период) = "212ФЗМинтруд";
	
КонецФункции

// Возвращает размер добровольного взноса в ПФР в процентах
//
// Возвращаемое значение:
//  Число - размер взноса в процентах
//
Функция ПроцентУплачиваемыхДобровольныхВзносовВПФР() Экспорт
	
	Возврат 22;
	
КонецФункции

#Область УплатаСтраховыхВзносов

Функция ПодготовитьТаблицуУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты) Экспорт
	
	Параметры = ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты);
	
	Если Параметры.РасшифровкаПлатежа.Количество() = 0
		Или Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Параметры.РасшифровкаПлатежа;
	КонецЕсли;
	
	Реквизиты          = Параметры.Реквизиты[0];
	РасшифровкаПлатежа = Параметры.РасшифровкаПлатежа;
	
	Если Реквизиты.СчетУчета <> ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП
		Или ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(Реквизиты.Период) Тогда
		
		Возврат РасшифровкаПлатежа;
		
	КонецЕсли;
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Реквизиты.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерСубконто = 0 Тогда
		Возврат РасшифровкаПлатежа;
	КонецЕсли;
	
	НалоговыйПериод = ?(ЗначениеЗаполнено(Реквизиты.НалоговыйПериод), Реквизиты.НалоговыйПериод, Реквизиты.Период);
	
	ФиксированныеСтраховыеВзносыКУплате = ФиксированныеСтраховыеВзносыКУплате(
		Реквизиты.Организация, НалоговыйПериод, Перечисления.Периодичность.Год, Ложь, Реквизиты.Регистратор);
	
	СуммаВзносаПФРКУплате = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		
		ВидПлатежаВГосБюджет = СтрокаРасшифровки["СубконтоДт" + НомерСубконто];
		Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) И (ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.Налог) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаВзносаПФРКУплате = 0 Тогда
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			
		ИначеЕсли СтрокаРасшифровки.СуммаРуб > СуммаВзносаПФРКУплате Тогда
			
			СуммаРуб = СтрокаРасшифровки.СуммаРуб;
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			СтрокаРасшифровки.СуммаРуб = СуммаВзносаПФРКУплате;
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
			НоваяСтрока["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			НоваяСтрока.СуммаРуб = СуммаРуб - СуммаВзносаПФРКУплате;
			
			СуммаВзносаПФРКУплате = 0;
			
		Иначе
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаРасшифровки.СуммаРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Функция ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "СубконтоДт1,"           // Субконто1 по счету дебета
	+ "СубконтоДт2,"           // Субконто2 по счету дебета
	+ "СубконтоДт3,"           // Субконто3 по счету дебета
	+ "ИспользоватьНомераСубконто," // Булево. Истина - субконто выше идентифицируются номерами субконто; Ложь - видам субконто, перечисленными ниже
	+ "ВидСубконтоДт1,"        // Вид СубконтоДт1
	+ "ВидСубконтоДт2,"        // Вид СубконтоДт2
	+ "ВидСубконтоДт3,"        // Вид СубконтоДт3
	+ "ПодразделениеДт,"       // <Ссылка на справочник подразделений> - подразделение по дебету проводки
	+ "СчетКт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по кредиту проводки (счет учета денежных средств)
	+ "СубконтоКт1,"           // Субконто1 по счету кредита
	+ "СубконтоКт2,"           // Субконто2 по счету кредита
	+ "СубконтоКт3,"           // Субконто3 по счету кредита
	+ "ПодразделениеКт,"       // <Ссылка на справочник подразделений> - подразделение по кредиту проводки
	+ "ВалютнаяСумма,"         // <Число,15,2> - сумма поступления в валюте документа
	+ "Содержание,"            // <Строка> - содержание проводки
	+ "СуммаРуб";              // <Число,15,2> - рублевая сумма поступления
	
	
	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасшифровкаПлатежа, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - период движений - дата документа
	+ "Организация,"           // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       // <СправочникСсылка.Валюты>
	+ "Содержание,"            // <Строка,150> - содержание проводок
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "НалоговыйПериод,"       // <Дата> - налоговый период, за который уплачивается взнос
	+ "Регистратор";           // <ДокументСсылка> - документ, который проводится
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область НачислениеСтраховыхВзносов

Функция ПодготовитьТаблицуНачисленияСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Если Реквизиты.Период < ДатаНачалаУчетаСтраховыхВзносовИП()
	 Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонецДня(Реквизиты.Период) <> КонецГода(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаСтраховыхВзносов = ТаблицаНачисленияСтраховыхВзносов(Реквизиты.Организация, Реквизиты.Период);
	
	СтраховыеВзносыНачисленные = СтраховыеВзносыНачисленные(Реквизиты.Организация, НачалоГода(Реквизиты.Период), Реквизиты.Период);
	ПоляОтбора = "СчетУчета, ВидПлатежаВГосБюджет";
	СтраховыеВзносыНачисленные.Индексы.Добавить(ПоляОтбора);
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	ТаблицаНачисления = НоваяТаблицаСтраховыхВзносов();
	Для Каждого СтраховойВзнос Из ТаблицаСтраховыхВзносов Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтраховойВзнос);
		НайденныеСтроки = СтраховыеВзносыНачисленные.НайтиСтроки(ПараметрыОтбора);
		НачисленоСумма = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0);
		
		Если СтраховойВзнос.Сумма > НачисленоСумма Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтраховойВзнос);
			НоваяСтрока.Сумма = СтраховойВзнос.Сумма - НачисленоСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНачисления;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНачисленияСтраховыхВзносов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.Период < ДатаНачалаУчетаСтраховыхВзносовИП()
	 Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтраховойВзнос Из Параметры.СтраховыеВзносы Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		
		ПредставлениеПериода = ПредставлениеПериода(
			НачалоГода(СтраховойВзнос.СтраховойПериод), КонецГода(СтраховойВзнос.СтраховойПериод), "ФП=Истина");
		
		Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Начислены страховые взносы за %1", ПредставлениеПериода);
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы",
			СтраховойВзнос.СтатьяЗатрат);
		
		Проводка.СчетКт = СтраховойВзнос.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет",
			СтраховойВзнос.ВидПлатежаВГосБюджет);
		
		Проводка.Сумма = СтраховойВзнос.Сумма;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "СтраховойПериод,"      // <Дата> - период, к которому относится уплата взноса
		+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
		+ "ВидПлатежаВГосБюджет," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
		+ "СтатьяЗатрат,"         // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
		+ "Сумма,";               // <Число, 15, 2>
	
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияСтраховыхВзносов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыявитьУчетныеОшибкиУплатыСтраховыхВзносов(Ошибки, Период, Организация) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или Не УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоГода(Период), КонецМесяца(Период)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодичностьНачисления(Организация, Период) = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
	Иначе
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	КонецПериода = КонецМесяца(Период);
	
	ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация);
	
КонецПроцедуры

Функция СодержаниеОперацииУплатыВзносов(СчетУчета, ВидПлатежаВГосБюджет, СтраховойПериод = Неопределено) Экспорт
	
	Описание = "";
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП Тогда
		Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
			Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное пенсионное страхование в фиксированном размере, исчисленные с суммы доходов'");
		Иначе
			Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное пенсионное страхование в фиксированном размере'");
		КонецЕсли;
	ИначеЕсли  СчетУчета = ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП Тогда
		Описание = НСтр("ru = 'Уплачены страховые взносы по единому тарифу в фиксированном размере'");
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод Тогда
		Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное медицинское страхование в фиксированном размере'");
	Иначе
		Возврат "";
	КонецЕсли;
	
	УточнениеПериода = "";
	Если ЗначениеЗаполнено(СтраховойПериод) Тогда
		УточнениеПериода = " " + СтрШаблон(НСтр("ru = 'за %1 год'"), Формат(СтраховойПериод, "ДФ=yyyy"));
	КонецЕсли;
	
	Содержание = Описание + УточнениеПериода + ".";
	
	Возврат Содержание;
	
КонецФункции

Функция РассчитатьФиксированныеСтраховыеВзносы(Знач Период, Организация = Неопределено) Экспорт

	Если Период < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		Возврат РассчитатьФиксированныеСтраховыеВзносыДо2023(Период, Организация);
	Иначе
		Возврат РассчитатьФиксированныеСтраховыеВзносыПосле2023(Период, Организация);
	КонецЕсли;
	
КонецФункции

Функция РассчитатьФиксированныеСтраховыеВзносыДо2023(Знач Период, Организация = Неопределено)
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтраховыеВзносы = Новый Структура;
	// Суммы взносов до конца текущего месяца.
	СтраховыеВзносы.Вставить("ПФР",            0);
	СтраховыеВзносы.Вставить("ПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("ФФОМС",          0);
	СтраховыеВзносы.Вставить("ФСС",            0);
	// Суммы взносов до конца года.
	СтраховыеВзносы.Вставить("ПФРВсего",            0);
	СтраховыеВзносы.Вставить("ПФРДобровольноВсего", 0);
	СтраховыеВзносы.Вставить("ФФОМСВсего",          0);
	СтраховыеВзносы.Вставить("ФССВсего",            0);
	
	СтраховыеВзносы.Вставить("КоэффициентПФРДобровольно", 0);
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносов(Период, Организация);
	
	// Страховые взносы за годы до даты регистрации рассчитывать не нужно.
	Если ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации) И КонецГода(Период) < ДанныеДляРасчета.ДатаРегистрации Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	СуммаВзносаПФР = 0;
	СуммаВзносаПФРДобровольно = 0;
	СуммаВзносаФФОМС = 0;
	СуммаВзносаПФРВсего = 0;
	СуммаВзносаПФРДобровольноВсего = 0;
	СуммаВзносаФФОМСВсего = 0;
	
	РазмерыСтраховыхВзносов = РазмерыСтраховыхВзносов(Период, Организация);
	МесячныйВзносПФР   = РазмерыСтраховыхВзносов.ПФР / 12;
	МесячныйВзносФФОМС = РазмерыСтраховыхВзносов.ФФОМС / 12;
	МесячныйВзносФСС   = РазмерыСтраховыхВзносов.ФСС / 12;
	МесячныйВзносПФРДобровольно = РазмерыСтраховыхВзносов.ПФРДобровольно / 12;
	
	ГодМесяцаРасчета = Год(Период);
	НомерМесяцаРасчета = Месяц(Период);
	
	ПервыйМесяц = ?(ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации) И Год(ДанныеДляРасчета.ДатаРегистрации) = ГодМесяцаРасчета, Месяц(ДанныеДляРасчета.ДатаРегистрации), 1);
	
	ДатаНачалаРасчета = Дата(ГодМесяцаРасчета, ПервыйМесяц, 1);
	ДатаОкончанияРасчета = КонецГода(Период);
	ИнтервалыИПНеОплачиваетВзносы =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.ИнтервалыИПНеОплачиваетСтраховыеВзносы(
			Организация, ДатаНачалаРасчета, ДатаОкончанияРасчета);
	ИнтервалыНеОплачиваютсяВзносыЗаМесяц = ИнтервалыИПНеОплачиваетВзносы.СкопироватьКолонки();
	ИнтервалыИПОплачиваетНПД = РегистрыСведений.НастройкиСистемыНалогообложения.ИнтервалыИППрименяетНПД(
		Организация, ДатаНачалаРасчета, ДатаОкончанияРасчета);
	
	Для НомерМесяца = ПервыйМесяц По 12 Цикл
		
		ИнтервалыНеОплачиваютсяВзносыЗаМесяц.Очистить();
		
		НачалоМесяца = Дата(ГодМесяцаРасчета, НомерМесяца, 1);
		КонецМесяца  = КонецМесяца(НачалоМесяца);
		ДнейВМесяце = День(КонецМесяца);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Если ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации)
			И НачалоМесяца < ДанныеДляРасчета.ДатаРегистрации
			И ДанныеДляРасчета.ДатаРегистрации <= НачалоДня(КонецМесяца) Тогда
				// В этом месяце была осуществлена регистрация в качестве ИП
				ПервыйДеньМесяца = ДанныеДляРасчета.ДатаРегистрации;
				Если Не УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Период) Тогда
					// Течение срока начинается на следующий день после календарной даты, которым определено его начало.
					// Таким образом, расчет страховых взносов осуществляется со дня, следующего за днем государственной регистрации
					// индивидуального предпринимателя. Следовательно, дата регистрации в качестве индивидуального предпринимателя при
					// расчете страховых взносов не учитывается (настройка не применяется с 2017 года).
					ПервыйДеньМесяца = КонецДня(ДанныеДляРасчета.ДатаРегистрации) + 1;
					Если ПервыйДеньМесяца > КонецМесяца Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПервыйДеньМесяца = НачалоМесяца;
			КонецЕсли;
		Иначе
			// Расчет за полный месяц
			ПервыйДеньМесяца = НачалоМесяца;
		КонецЕсли;
		
		ДнейУплатыВзносов = ДнейВМесяце - День(ПервыйДеньМесяца) + 1;
		
		// Если на расчетный период попадают дни, когда ИП не оплачивал страховые взносы, вычтем их из общего количества дней
		// в месяце за которые должен уплачиваться взнос
		ДатыНеОплачиваютсяВзносы = Новый Массив;
		Для Каждого Интервал Из ИнтервалыИПНеОплачиваетВзносы Цикл
			Если Интервал.ДатаНачала > КонецМесяца Или Интервал.ДатаОкончания < ПервыйДеньМесяца Тогда
				Продолжить;
			КонецЕсли;
			ИнтервалВходящийВПериод = ИнтервалСУчетомРассматриваемогоПериода(Интервал, ПервыйДеньМесяца, КонецМесяца);
			ДнейУплатыВзносов = ДнейУплатыВзносов - ПродолжительностьИнтервала(ИнтервалВходящийВПериод);
			ИнтервалЗаМесяц = ИнтервалыНеОплачиваютсяВзносыЗаМесяц.Добавить();
			ИнтервалЗаМесяц.ДатаНачала = ИнтервалВходящийВПериод.ДатаНачала;
			ИнтервалЗаМесяц.ДатаОкончания = ИнтервалВходящийВПериод.ДатаОкончания;
		КонецЦикла;
		
		// Если ИП является самозанятым и оплачивает добровольные взносы в ПФР,
		// то эти дни необходимо рассчитать по другому алгоритму, т.к. сумма добровольных взносов в ПФР рассчитывается иначе
		ДнейУплатыДобровольныхВзносов = 0;
		
		Для Каждого ИнтервалНПД Из ИнтервалыИПОплачиваетНПД Цикл
			Если ИнтервалНПД.ДатаНачала > КонецМесяца Или ИнтервалНПД.ДатаОкончания < ПервыйДеньМесяца Тогда
				Продолжить;
			КонецЕсли;
			ИнтервалНПДЗаМесяц = ИнтервалСУчетомРассматриваемогоПериода(ИнтервалНПД, ПервыйДеньМесяца, КонецМесяца);
			ДнейУплатыДобровольныхВзносов = ДнейУплатыДобровольныхВзносов + ПродолжительностьИнтервала(ИнтервалНПДЗаМесяц);
			Для Каждого ИнтервалНеОплачиваютсяВзносы Из ИнтервалыНеОплачиваютсяВзносыЗаМесяц Цикл
				Если ИнтервалНПДЗаМесяц.ДатаНачала <= ИнтервалНеОплачиваютсяВзносы.ДатаОкончания
					И ИнтервалНПДЗаМесяц.ДатаОкончания >= ИнтервалНеОплачиваютсяВзносы.ДатаНачала Тогда
					КоличествоДнейНеОплачивалисьВзносы = РазностьИнтерваловВДнях(ИнтервалНПДЗаМесяц, ИнтервалНеОплачиваютсяВзносы);
					ДнейУплатыДобровольныхВзносов = ДнейУплатыДобровольныхВзносов - КоличествоДнейНеОплачивалисьВзносы;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Периоды, в которых налогоплательщик применяет систему налогообложения "Налог на профессиональный доход"
		// и вместе с этим оплачивает страховые взносы в ПФР считаем периодами оплаты добровольных взносов в ПФР
		ДнейУплатыВзносов = ДнейУплатыВзносов - ДнейУплатыДобровольныхВзносов;
		
		// Сумма взносов за первый месяц деятельности
		СуммаВзносаПФРЗаМесяц   = МесячныйВзносПФР * ДнейУплатыВзносов/ДнейВМесяце;
		СуммаВзносаФФОМСЗаМесяц = МесячныйВзносФФОМС * ДнейУплатыВзносов/ДнейВМесяце;
		СуммаВзносаПФРДобровольноЗаМесяц = МесячныйВзносПФРДобровольно * ДнейУплатыДобровольныхВзносов / ДнейВМесяце;
		
		// Сумма взносов до конца года
		СуммаВзносаПФРВсего   = СуммаВзносаПФРВсего + СуммаВзносаПФРЗаМесяц;
		СуммаВзносаФФОМСВсего = СуммаВзносаФФОМСВсего + СуммаВзносаФФОМСЗаМесяц;
		СуммаВзносаПФРДобровольноВсего = СуммаВзносаПФРДобровольноВсего + СуммаВзносаПФРДобровольноЗаМесяц;
		
		Если НомерМесяца <= НомерМесяцаРасчета Тогда
			// Сумма взносов до конца текущего месяца
			СуммаВзносаПФР   = СуммаВзносаПФР + СуммаВзносаПФРЗаМесяц;
			СуммаВзносаПФРДобровольно = СуммаВзносаПФРДобровольно + СуммаВзносаПФРДобровольноЗаМесяц;
			СуммаВзносаФФОМС = СуммаВзносаФФОМС + СуммаВзносаФФОМСЗаМесяц;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляРасчета.УплачиваютсяДобровольныеВзносыВФСС Тогда
		// Право на получение страхового обеспечения наступает только при условии уплаты
		// полной суммы страховых взносов за предшествующий календарный год
		СуммаВзносаФСС      = МесячныйВзносФСС * Месяц(Период);
		СуммаВзносаФССВсего = МесячныйВзносФСС * 12;
	Иначе
		СуммаВзносаФСС      = 0;
		СуммаВзносаФССВсего = 0;
	КонецЕсли;
	
	СтраховыеВзносы.ПФР = Окр(СуммаВзносаПФР, 2, 1);
	СтраховыеВзносы.ПФРДобровольно = Окр(СуммаВзносаПФРДобровольно, 2, 1);
	СтраховыеВзносы.ФФОМС = Окр(СуммаВзносаФФОМС, 2, 1);
	СтраховыеВзносы.ФСС = Окр(СуммаВзносаФСС, 2, 1);
	
	СтраховыеВзносы.ПФРВсего = Окр(СуммаВзносаПФРВсего, 2, 1);
	СтраховыеВзносы.ПФРДобровольноВсего = Окр(СуммаВзносаПФРДобровольноВсего, 2, 1);
	СтраховыеВзносы.ФФОМСВсего = Окр(СуммаВзносаФФОМСВсего, 2, 1);
	СтраховыеВзносы.ФССВсего = Окр(СуммаВзносаФССВсего, 2, 1);
	
	Если СуммаВзносаПФРДобровольноВсего <> 0 И РазмерыСтраховыхВзносов.ПФРДобровольно <> 0 Тогда
		СтраховыеВзносы.КоэффициентПФРДобровольно =
			Окр(СуммаВзносаПФРДобровольноВсего / РазмерыСтраховыхВзносов.ПФРДобровольно, 2);
	Иначе
		СтраховыеВзносы.КоэффициентПФРДобровольно = 1;
	КонецЕсли;
		
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция РассчитатьФиксированныеСтраховыеВзносыПосле2023(Знач Период, Организация = Неопределено)
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтраховыеВзносы = Новый Структура;
	// Суммы взносов до конца текущего месяца.
	СтраховыеВзносы.Вставить("ЕдиныйТариф",    0);
	СтраховыеВзносы.Вставить("ПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("ФСС",            0);
	// Суммы взносов до конца года.
	СтраховыеВзносы.Вставить("ЕдиныйТарифВсего",    0);
	СтраховыеВзносы.Вставить("ПФРДобровольноВсего", 0);
	СтраховыеВзносы.Вставить("ФССВсего",            0);
	
	СтраховыеВзносы.Вставить("КоэффициентПФРДобровольно", 0);
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносов(Период, Организация);
	
	// Страховые взносы за годы до даты регистрации рассчитывать не нужно.
	Если ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации) И КонецГода(Период) < ДанныеДляРасчета.ДатаРегистрации Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	СуммаВзносаЕдиныйТариф = 0;
	СуммаВзносаПФРДобровольно = 0;
	СуммаВзносаЕдиныйТарифВсего = 0;
	СуммаВзносаПФРДобровольноВсего = 0;
	
	РазмерыСтраховыхВзносов = РазмерыСтраховыхВзносов(Период, Организация);
	МесячныйВзносФСС = РазмерыСтраховыхВзносов.ФСС / 12;
	
	НомерМесяцаРасчета = Месяц(Период);
	
	Если ЗначениеЗаполнено(ДанныеДляРасчета.ДатаРегистрации) И ДанныеДляРасчета.ДатаРегистрации > НачалоГода(Период) Тогда
		ДатаНачалаРасчета = ДанныеДляРасчета.ДатаРегистрации;
	Иначе
		ДатаНачалаРасчета = НачалоГода(Период);
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		// В сервисе регистрации ИП до создания организации рассчитывается сумма налога при выборе системы налогообложения
		СуммаВзносаЕдиныйТарифВсего = РазмерыСтраховыхВзносов.ЕдиныйТариф;
	Иначе
		ТаблицаРасчета = ТаблицаТарифовСтраховыхВзносов(Организация, ДатаНачалаРасчета, КонецГода(Период));
		Для Каждого ТекущаяСтрока Из ТаблицаРасчета Цикл
			
			Если НомерМесяцаРасчета >= Месяц(ТекущаяСтрока.ДатаНачала) Тогда
				СуммаВзносаЕдиныйТариф = СуммаВзносаЕдиныйТариф + ТекущаяСтрока.Сумма;
				СуммаВзносаПФРДобровольно = СуммаВзносаПФРДобровольно + ТекущаяСтрока.СуммаДобровольногоВзноса;
			КонецЕсли;
			
			СуммаВзносаЕдиныйТарифВсего = СуммаВзносаЕдиныйТарифВсего + ТекущаяСтрока.Сумма;
			СуммаВзносаПФРДобровольноВсего = СуммаВзносаПФРДобровольноВсего + ТекущаяСтрока.СуммаДобровольногоВзноса;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДляРасчета.УплачиваютсяДобровольныеВзносыВФСС Тогда
		// Право на получение страхового обеспечения наступает только при условии уплаты
		// полной суммы страховых взносов за предшествующий календарный год
		СуммаВзносаФСС      = МесячныйВзносФСС * Месяц(Период);
		СуммаВзносаФССВсего = МесячныйВзносФСС * 12;
	Иначе
		СуммаВзносаФСС      = 0;
		СуммаВзносаФССВсего = 0;
	КонецЕсли;
	
	СтраховыеВзносы.ЕдиныйТариф = Окр(СуммаВзносаЕдиныйТариф, 2, 1);
	СтраховыеВзносы.ПФРДобровольно = Окр(СуммаВзносаПФРДобровольно, 2, 1);
	СтраховыеВзносы.ФСС = Окр(СуммаВзносаФСС, 2, 1);
	
	СтраховыеВзносы.ЕдиныйТарифВсего = Окр(СуммаВзносаЕдиныйТарифВсего, 2, 1);
	СтраховыеВзносы.ПФРДобровольноВсего = Окр(СуммаВзносаПФРДобровольноВсего, 2, 1);
	СтраховыеВзносы.ФССВсего = Окр(СуммаВзносаФССВсего, 2, 1);
	
	СтраховыеВзносы.КоэффициентПФРДобровольно =
		Окр(СуммаВзносаПФРДобровольноВсего / РазмерыСтраховыхВзносов.ПФРДобровольно, 2);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, СтраховойПериод, ВидПлатежаВГосБюджет = Неопределено, Регистратор = Неопределено)
	
	Перем СтраховыеВзносыУплаченные;
	
	Если ПериодичностьНачисления(Организация, СтраховойПериод) = Перечисления.Периодичность.Квартал Тогда
		ГраницыПериода = Новый Структура;
		ГраницыПериода.Вставить("НачалоПериода", НачалоГода(СтраховойПериод));
		ГраницыПериода.Вставить("КонецПериода", КонецКвартала(СтраховойПериод));
	Иначе
		ГраницыПериода = ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, ВидПлатежаВГосБюджет);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.Налог, Регистратор);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		
		СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела, Регистратор);
		
		Если СтраховыеВзносыСДоходовУплаченные <> Неопределено Тогда
			Если СтраховыеВзносыУплаченные = Неопределено Тогда
				СтраховыеВзносыУплаченные = СтраховыеВзносыСДоходовУплаченные;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтраховыеВзносыСДоходовУплаченные, СтраховыеВзносыУплаченные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПериода, КонецПериода, ВидПлатежаВГосБюджет = Неопределено) Экспорт
	
	// Не проверяем страховой период
	Возврат СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, , ВидПлатежаВГосБюджет);
	
КонецФункции

// При расчете взносов к оплате учитывается Страховой период - ищем все оплаты, относящиеся к страховому периоду
// При начислении взносов учитывается период начисления с Начала периода по Конец периода - ищем все оплаты за период начисления
//
Функция СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, СтраховойПериод = Неопределено, ВидПлатежаВГосБюджет = Неопределено, Регистратор = Неопределено)
	
	ПараметрыРасчета = ПараметрыРасчетаУплаченныхВзносов(
		Организация,
		НачалоПериода,
		КонецПериода,
		СтраховойПериод,
		ВидПлатежаВГосБюджет,
		Регистратор);
	
	Если КонецПериода < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат СтраховыеВзносыУплаченные2023(ПараметрыРасчета);
	Иначе
		Возврат СтраховыеВзносыУплаченные2024(ПараметрыРасчета);
	КонецЕсли;
	
КонецФункции

Функция СтраховыеВзносыНачисленные(Организация, НачалоПериода, КонецПериода, ВидПлатежаВГосБюджет = Неопределено)
	
	Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Тогда
		ВидыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПлатежаВГосБюджет);
	Иначе
		ВидыПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыПлатежей", ВидыПлатежей);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетУчета,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ВидПлатежаВГосБюджет,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Если НЕ ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
		|			,
		|			СчетКт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			Организация = &Организация
		|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтраховыеВзносыНачисленные = Запрос.Выполнить().Выгрузить();
	
	Возврат СтраховыеВзносыНачисленные;
	
КонецФункции

// Возвращает границы периода, в течение которого могут уплачиваться фиксированные взносы
// указанного вида за указанный страховой период.
//
// Параметры:
//  СтраховойПериод      - Дата - дата в пределах страхового периода (года начисления взносов).
//  ВидПлатежаВГосБюджет - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - вид взносов.
//
// Возвращаемое значение:
//   Структура:
//    * НачалоПериода - Дата
//    * КонецПериода  - Дата
//
Функция ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, ВидПлатежаВГосБюджет) Экспорт
	
	ГраницыПериода = Новый Структура;
	ГраницыПериода.Вставить("НачалоПериода", НачалоГода(СтраховойПериод));
	
	СрокУплатыПоЕдиномуТарифу = НачалоДня(КонецГода(СтраховойПериод));
	СрокУплатыВзносыСДоходов = НачалоДня(СрокУплатыВзносовСвышеПредела(СтраховойПериод));
	
	// Уточним сроки оплаты в банковских днях
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		ДатыКалендаря = Новый Массив;
		ДатыКалендаря.Добавить(СрокУплатыПоЕдиномуТарифу);
		ДатыКалендаря.Добавить(СрокУплатыВзносыСДоходов);
		ПараметрыРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат(ПроизводственныйКалендарь);
		ПараметрыРабочихДат.ВызыватьИсключение = Ложь;
		БлижайшиеРабочиеДаты = КалендарныеГрафики.БлижайшиеРабочиеДаты(
			ПроизводственныйКалендарь,
			ДатыКалендаря,
			ПараметрыРабочихДат);
		Если БлижайшиеРабочиеДаты.Получить(СрокУплатыПоЕдиномуТарифу) <> Неопределено Тогда
			СрокУплатыПоЕдиномуТарифу = БлижайшиеРабочиеДаты[СрокУплатыПоЕдиномуТарифу];
		КонецЕсли;
		Если БлижайшиеРабочиеДаты.Получить(СрокУплатыВзносыСДоходов) <> Неопределено Тогда
			СрокУплатыВзносыСДоходов = БлижайшиеРабочиеДаты[СрокУплатыВзносыСДоходов];
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		// Рег. операция засчитывает авансовые платежи на конец месяца
		СрокУплаты = КонецМесяца(СрокУплатыВзносыСДоходов);
	Иначе
		СрокУплаты = СрокУплатыПоЕдиномуТарифу;
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(СтраховойПериод) Тогда
		// При начислении страховых взносов независимо от платежей - учитываются уплаченные взносы без ограничения периода.
		ГраницыПериода.Вставить("КонецПериода", Макс(СрокУплаты, КонецДня(ТекущаяДатаСеанса())));
	Иначе
		// При начислении страховых взносов на основании проведенных платежей срок осмотра ограничен сроками уплаты.
		ГраницыПериода.Вставить("КонецПериода", КонецДня(СрокУплаты));
	КонецЕсли;
	
	Возврат ГраницыПериода;
	
КонецФункции

// Возвращает нормативную дату, по которую уплачиваются взносы в ПФР с доходов за указанный страховой период.
//
// Параметры:
//  СтраховойПериод - Дата - дата в пределах страхового периода (года, за который уплачиваются взносы).
//
// Возвращаемое значение:
//  Дата
//
Функция СрокУплатыВзносовСвышеПредела(СтраховойПериод) Экспорт
	
	ГодСтраховогоПериода = Год(СтраховойПериод);
	Если ГодСтраховогоПериода < 2017 Тогда
		СрокУплаты = Дата(ГодСтраховогоПериода + 1, 4, 1); // до 1 апреля следующего года
	Иначе
		СрокУплаты = Дата(ГодСтраховогоПериода + 1, 7, 1); // до 1 июля следующего года
	КонецЕсли;
	
	Возврат СрокУплаты;
	
КонецФункции

Функция РазмерыСтраховыхВзносов(СтраховойПериод, Организация)
	
	СтраховыеВзносы = Новый Структура;
	СтраховыеВзносы.Вставить("ПФР", 0);
	СтраховыеВзносы.Вставить("ПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("ФФОМС", 0);
	СтраховыеВзносы.Вставить("ФСС", 0);  
	СтраховыеВзносы.Вставить("ЕдиныйТариф", 0);
	СтраховыеВзносы.Вставить("ПредельнаяСуммаВзноса", 0);
	// Федеральный закон от 04.08.2023 N 427-ФЗ
	СтраховыеВзносы.Вставить("КоэффициентОплатыФФОМС", 0.198922);
	СтраховыеВзносы.Вставить("ПониженныйТариф", 0);
	
	Если СтраховойПериод < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(Организация);
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = ПараметрыПродленияСроков.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	Иначе
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Ложь;
	КонецЕсли;
	
	МРОТ = МинимальнаяОплатаТрудаРФНаНачалоГода(СтраховойПериод);
	
	РайонныйКоэффициент = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.РайонныйКоэффициентСтраховыхВзносовФСС(Организация, СтраховойПериод);
	СтраховыеВзносы.ФСС = МРОТ * РайонныйКоэффициент * 12 * ТарифВзносаФСС(СтраховойПериод) / 100;
	
	ГодСтраховогоПериода = Год(СтраховойПериод);
	Если ГодСтраховогоПериода < 2018 Тогда
		СтраховыеВзносы.ПФР   = МРОТ * 12 * 26 / 100;
		СтраховыеВзносы.ФФОМС = МРОТ * 12 * 5.1 / 100;
	ИначеЕсли ГодСтраховогоПериода = 2018 Тогда
		СтраховыеВзносы.ПФР   = 26545;
		СтраховыеВзносы.ФФОМС = 5840;
	ИначеЕсли ГодСтраховогоПериода = 2019 Тогда
		СтраховыеВзносы.ПФР   = 29354;
		СтраховыеВзносы.ФФОМС = 6884;
	ИначеЕсли ГодСтраховогоПериода = Год(ПериодУменьшенияВзносов_ДеятельностьОтнесенаКПострадавшимОтКоронавируса()) Тогда
		СтраховыеВзносы.ПФР   = ?(ДеятельностьОтнесенаКПострадавшимОтКоронавируса, 20318, 32448);
		СтраховыеВзносы.ПредельнаяСуммаВзноса = 32448 * 8;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2020 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2021 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2022 Тогда
		СтраховыеВзносы.ПФР   = 34445;
		СтраховыеВзносы.ФФОМС = 8766;  
	ИначеЕсли ГодСтраховогоПериода = 2023 Тогда
		СтраховыеВзносы.ЕдиныйТариф = 45842;
		СтраховыеВзносы.ПониженныйТариф = 14400; // Федеральный закон от 04.08.2023 N 427-ФЗ
	ИначеЕсли ГодСтраховогоПериода = 2024 Тогда
		СтраховыеВзносы.ЕдиныйТариф = 49500; // Федеральный закон от 31.07.2023 № 389-ФЗ
		СтраховыеВзносы.ПониженныйТариф = 25200; // Федеральный закон от 04.08.2023 N 427-ФЗ
	ИначеЕсли ГодСтраховогоПериода = 2025 Тогда
		СтраховыеВзносы.ПониженныйТариф = 36000; // Федеральный закон от 04.08.2023 N 427-ФЗ
	Иначе
		СтраховыеВзносы.ПФР   = 36723;
		СтраховыеВзносы.ФФОМС = 9119;
	КонецЕсли;
	
	СтраховыеВзносы.ПФРДобровольно = МРОТ * ПроцентУплачиваемыхДобровольныхВзносовВПФР() / 100 * 12;
	
	Если СтраховыеВзносы.ПредельнаяСуммаВзноса = 0 Тогда 
		Если ГодСтраховогоПериода < 2023 Тогда
			СтраховыеВзносы.ПредельнаяСуммаВзноса = СтраховыеВзносы.ПФР * 8; 
		ИначеЕсли ГодСтраховогоПериода = 2023 Тогда
			СтраховыеВзносы.ПредельнаяСуммаВзноса = 257061;
		Иначе
			// Федеральный закон от 31.07.2023 № 389-ФЗ
			СтраховыеВзносы.ПредельнаяСуммаВзноса = 277571;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция ПериодУменьшенияВзносов_ДеятельностьОтнесенаКПострадавшимОтКоронавируса() Экспорт
	
	Возврат Дата(2020, 1, 1);
	
КонецФункции

Функция ТарифВзносаФСС(СтраховойПериод)
	
	Если СтраховойПериод < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Возврат 0;
	Иначе
		Возврат 2.9;
	КонецЕсли;
	
КонецФункции

Функция МинимальнаяОплатаТрудаРФНаНачалоГода(Период)
	
	Возврат УчетЗарплаты.МинимальныйРазмерОплатыТрудаРФ(НачалоГода(Период));
	
КонецФункции

Функция СчетаУчетаСтраховыхВзносов() Экспорт
	
	СчетаУчета = Новый Структура; 
	СчетаУчета.Вставить("ПФР",   ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчета.Вставить("ФФОМС", ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаУчета.Вставить("ФСС",   ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	СчетаУчета.Вставить("ПФРДобровольно", ПланыСчетов.Хозрасчетный.ПФР_ДОБР_орг); 
	СчетаУчета.Вставить("ЕдиныйТариф", ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП);
	
	Возврат СчетаУчета;
	
КонецФункции

Процедура ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан вид платежа в страховой фонд.'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите вид платежа в страховой фонд.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан вид платежа в страховой фонд'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОбновленияИБ

Процедура УстановитьЗначениеКонстантыУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП() Экспорт
	
	МенеджерЗначения = Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
КонецПроцедуры

// Возвращает периодичность начисления страховых взносов в фиксированном размере
//
Функция ПериодичностьНачисления(Организация, Период) Экспорт
	
	Если Период >= ДатаАвтоНачисленияСтраховыхВзносовИП() Тогда
		
		ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходыЗаПериод(
			Организация, НачалоКвартала(Период), КонецКвартала(Период));
		ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(
			Организация, НачалоКвартала(Период), КонецКвартала(Период));
		
		Если ПрименяетсяУСНДоходыМинусРасходы
			Или (ПлательщикНДФЛ И Период >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()) Тогда
			// Выполняем чаще для признания расходов и уменьшения авансового платежа
			Периодичность = Перечисления.Периодичность.Квартал;
		ИначеЕсли ПлательщикНДФЛ
			И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период))
			И УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период) Тогда
			// Выполняем ежеквартально для разделения расходов между ОСНО и уменьшением ЕНВД
			Периодичность = Перечисления.Периодичность.Квартал;
		Иначе
			Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
		
	Иначе
		
		Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			Периодичность = Перечисления.Периодичность.Год;
		Иначе
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

// Рассчитывает страховые взносы с начала года до конца периода
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - конец месяца, на который рассчитываются страховые взносы
//   СуммаВзносаПФРсДоходов - Число - сумма взносов с доходов к начислению. Указывается
//     в случаях, если рассчитывать сумму не нужно. Например, при уплате взносов за период,
//     предшествующий вводу остатков.
//
Функция ТаблицаНачисленияСтраховыхВзносов(Организация, Период, СуммаВзносаПФРсДоходов = Неопределено)
	
	ТаблицаСтраховыхВзносов = НоваяТаблицаСтраховыхВзносов();
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Период, Организация);
	
	ПерешлиНаЕдиныйТариф = Период >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	Если СуммаВзносаПФРсДоходов = Неопределено Тогда
		СтраховыеВзносыСДоходов = РассчитатьСтраховыеВзносыСДоходов(Организация, Период);
	Иначе
		СтраховыеВзносыСДоходов = Новый Структура;
		СтраховыеВзносыСДоходов.Вставить("Сумма", СуммаВзносаПФРсДоходов);
		СтраховыеВзносыСДоходов.Вставить("СуммаПредельная", ДанныеДляРасчетаСтраховыхВзносовСДоходов(КонецМесяца(Период), Организация).ПредельнаяСуммаВзноса);
	КонецЕсли;
	
	Если УчетнаяПолитика.УплачивалсяТолькоНПДЗаПериод(Организация, НачалоГода(Период), КонецГода(Период)) Тогда
		СтраховыеВзносыСДоходов.Сумма = 0;
	КонецЕсли;
	
	СтраховойПериод = НачалоГода(Период);
	
	ПорядокУчетаРасходов = Новый Структура("СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, ПринятиеКналоговомуУчету");
	ПорядокУчетаРасходов.СтатьяЗатрат = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносовИП");
	
	Если ЗначениеЗаполнено(ПорядокУчетаРасходов.СтатьяЗатрат) Тогда
		СвойстваСтатьиЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПорядокУчетаРасходов.СтатьяЗатрат,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат, ПринятиеКналоговомуУчету");
		ЗаполнитьЗначенияСвойств(ПорядокУчетаРасходов, СвойстваСтатьиЗатрат);
	КонецЕсли;
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	
	Если Не ПерешлиНаЕдиныйТариф И ФиксированныеСтраховыеВзносы.ПФР > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ПФР;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ПФРВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если ФиксированныеСтраховыеВзносы.ПФРДобровольно > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФРДобровольно;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ПФРДобровольно;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ПФРДобровольноВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если СтраховыеВзносыСДоходов.Сумма > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
		НоваяСтрока.Сумма = СтраховыеВзносыСДоходов.Сумма;
		НоваяСтрока.СуммаПредельная = СтраховыеВзносыСДоходов.СуммаПредельная;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если Не ПерешлиНаЕдиныйТариф И ФиксированныеСтраховыеВзносы.ФФОМС > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ФФОМС;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ФФОМС;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ФФОМСВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли; 
	
	Если ПерешлиНаЕдиныйТариф И ФиксированныеСтраховыеВзносы.ЕдиныйТариф > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ЕдиныйТариф;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ЕдиныйТариф;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ЕдиныйТарифВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если ФиксированныеСтраховыеВзносы.ФСС > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ФСС;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ФСС;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ФССВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Возврат ТаблицаСтраховыхВзносов;
	
КонецФункции

// Возвращает таблицу расходов ИП на ОСНО и УСН
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НачалоПериода - Дата - начало периода, за который рассчитываются страховые взносы
//   КонецПериода - Дата - конец периода, за который рассчитываются страховые взносы
//
// Возвращаемое значение:
//    ТаблицаЗначений, Неопределено - см. УчетСтраховыхВзносовИП.НоваяТаблицаСтраховыхВзносов();
//
Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода < ДатаНачалаУчетаСтраховыхВзносовИП()
		Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или Не УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат НоваяТаблицаСтраховыхВзносов();
	КонецЕсли;
	
	ТаблицаРасходов = ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода);
	
	Возврат ТаблицаРасходов;
	
КонецФункции

// Возвращает таблицу расходов уменьшающих налог УСН и ЕНВД
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НачалоПериода - Дата - начало периода, за который рассчитываются страховые взносы
//   КонецПериода - Дата - конец периода, за который рассчитываются страховые взносы
//
// Возвращаемое значение:
//    ТаблицаЗначений, Неопределено - см. УчетСтраховыхВзносовИП.НоваяТаблицаСтраховыхВзносов();
//
Функция ПодготовитьТаблицуРасходовУменьшающихНалог(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода < ДатаНачалаУчетаСтраховыхВзносовИП() Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРасходов = ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода);
	
	// Добровольные взносы в ФСС не уменьшают налоги
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	ПараметрыОтбора = Новый Структура("СчетУчета", СчетаУчетаСтраховыхВзносов.ФСС);
	
	НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоСтрок = НайденныеСтроки.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		ТаблицаРасходов.Удалить(НайденныеСтроки[КоличествоСтрок - Счетчик]);
	КонецЦикла;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода)
	
	НачалоПрошлогоГода = НачалоГода(ДобавитьМесяц(КонецПериода, -12));
	СрокУплатыВзносовЗаПрошлыйГод = СрокУплатыВзносовСвышеПредела(НачалоПрошлогоГода);
	Если НачалоПериода <= СрокУплатыВзносовЗаПрошлыйГод Тогда
		// До истечения срока уплаты взносов с доходов могут уплачиваться взносы, которые относятся к прошлому году.
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПрошлогоГода, КонецПериода);
	Иначе
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоГода(НачалоПериода), КонецПериода);
	КонецЕсли;
	
	Если СтраховыеВзносыУплаченные = Неопределено Тогда
		Возврат НоваяТаблицаСтраховыхВзносов();
	КонецЕсли;
	
	ПоляОтбора = "СтраховойПериод, СчетУчета, ВидПлатежаВГосБюджет";
	СтраховыеВзносыУплаченные.Индексы.Добавить(ПоляОтбора);
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	СтраховыеВзносыУплаченные.Сортировать("СтраховойПериод");
	ВсеСтраховыеПериоды = ОбщегоНазначения.ВыгрузитьКолонку(СтраховыеВзносыУплаченные, "СтраховойПериод", Истина);
	
	Индекс = ВсеСтраховыеПериоды.ВГраница();
	Пока Индекс >= 0 Цикл
		Если ВсеСтраховыеПериоды[Индекс] = '00010101' Или ВсеСтраховыеПериоды[Индекс] > КонецПериода Тогда
			ВсеСтраховыеПериоды.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ДатаВводаОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	
	ТаблицаСтраховыхВзносов = НоваяТаблицаСтраховыхВзносов();
	Для Каждого СтраховойПериод Из ВсеСтраховыеПериоды Цикл
		
		Если ЗначениеЗаполнено(ДатаВводаОстатков) И КонецГода(СтраховойПериод) <= КонецДня(ДатаВводаОстатков) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("СтраховойПериод", СтраховойПериод);
			Отбор.Вставить("ВидПлатежаВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
			СтраховыеВзносыУплаченныеЗаПериодДоВводаОстатков = СтраховыеВзносыУплаченные.НайтиСтроки(Отбор);
			
			СуммаВзносаПФРсДоходовДоВводаОстатков = 0;
			Для Каждого Уплачено Из СтраховыеВзносыУплаченныеЗаПериодДоВводаОстатков Цикл
				СуммаВзносаПФРсДоходовДоВводаОстатков = СуммаВзносаПФРсДоходовДоВводаОстатков + Уплачено.Сумма
			КонецЦикла;
		Иначе
			СуммаВзносаПФРсДоходовДоВводаОстатков = Неопределено;
		КонецЕсли;
		
		ГраницаНачисления = Мин(КонецГода(СтраховойПериод), КонецПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаНачисленияСтраховыхВзносов(Организация, ГраницаНачисления, СуммаВзносаПФРсДоходовДоВводаОстатков),
			ТаблицаСтраховыхВзносов);
	КонецЦикла;
	
	ТаблицаРасходов = НоваяТаблицаСтраховыхВзносов();
	Для Каждого Начислено Из ТаблицаСтраховыхВзносов Цикл
		
		// Ищем платежи, которые относятся к начислению
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Начислено);
		НайденныеПлатежи = СтраховыеВзносыУплаченные.Скопировать(ПараметрыОтбора);
		НайденныеПлатежи.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		Для Каждого Уплачено Из НайденныеПлатежи Цикл
			
			Сумма = Мин(Уплачено.Сумма, Начислено.СуммаПредельная);
			Начислено.СуммаПредельная = Начислено.СуммаПредельная - Сумма;
			
			Если КонецПериода = КонецГода(КонецПериода) Тогда
				Если Сумма <= Начислено.Сумма Тогда
					СуммаРасходов  = Сумма;
					СуммаПереплаты = 0;
				Иначе
					СуммаРасходов  = Начислено.Сумма;
					СуммаПереплаты = Сумма - Начислено.Сумма;
				КонецЕсли;
			Иначе
				СуммаРасходов  = Сумма;
				СуммаПереплаты = 0;
			КонецЕсли;
			Начислено.Сумма = Начислено.Сумма - СуммаРасходов;
			
			Если СуммаРасходов <> 0 И НачалоПериода <= Уплачено.ДатаДокументаОплаты И Уплачено.ДатаДокументаОплаты <= КонецПериода Тогда
				НоваяСтрока = ТаблицаРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Начислено);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Уплачено);
				НоваяСтрока.Сумма = СуммаРасходов;
				Если ТипЗнч(Уплачено.ДокументОплаты) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
					НоваяСтрока.ДатаПринятияЕНП = Уплачено.ДатаВходящегоДокумента;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПереплаты <> 0 И Уплачено.ДатаДокументаОплаты < НачалоПериода Тогда
				НоваяСтрока = ТаблицаРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Начислено);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Уплачено);
				НоваяСтрока.Сумма = -СуммаПереплаты;
				Если ТипЗнч(Уплачено.ДокументОплаты) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
					НоваяСтрока.ДатаПринятияЕНП = Уплачено.ДатаВходящегоДокумента;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

#КонецОбласти

Функция НачалоСтраховогоПериода(Период) Экспорт
	
	Возврат НачалоГода(Период);
	
КонецФункции

Функция НачальныеОстаткиПоВзносамВведены(Организация) Экспорт
	
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(Организация, ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК ВводНачальныхОстатковРасчетыПоНалогамИСборам
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Проведен
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Организация = &Организация
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.ОтражатьВБухгалтерскомУчете
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
	|	И (ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод)
	|			ИЛИ ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП))";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает сумму добровольных взносов за себя в СФР на случай временной нетрудоспособности и материнства.
// Сумма рассчитывается с учетом платежей за год, в т.ч. подготовленных, но не оплаченных.
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ИП, который уплачивает добровольный взнос
//   ПериодСобытия - Дата - Период, в котором необходимо уплатить добровольный взнос
//
// Возвращаемое значение:
//   Число
//
Функция СуммаФиксированныхВзносовНаВНиМ(Организация, ПериодСобытия) Экспорт
	
	// Добровольный взнос в СФР уплачивается до конца года: либо разовым платежом, либо несколькими в течение года
	ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС;
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	// Рассчитаем взносы, которые необходимо оплатить за весь год
	ВзносыИП = РассчитатьФиксированныеСтраховыеВзносы(КонецГода(ПериодСобытия), Организация);
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	// Учитываем созданные платежи, в т.ч. подготовленные и не оплаченные
	ДокументыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
		Организация,
		НачалоГода(ПериодСобытия),
		ПериодСобытия,
		ПараметрыУплатыНалогов);
	
	Возврат Макс(ВзносыИП.ФССВсего - ДокументыУплатыНалогов.Итог("Сумма"), 0);
	
КонецФункции

// Возвращает дату действия новой логике зачета взносов в налоговой базе
// согласно Федерального закона от 31.07.2023 N 389-ФЗ
//
// Действие поправок с 01.01.2023 г., но т.к. в течение года ИП уже сдали уведомления по авансам и заявления о зачете за 1 полугодие,
// то новую логику зачет применяем с расчета за 9 месяцев
//
// Возвращаемое значение:
//   Дата
//
Функция ДатаПереходаНаУпрощенныйЗачетВзносов() Экспорт
	
	Возврат '20230901';
	
КонецФункции

// Возвращает сумму фиксированных взносов по единому тарифу за период, которая подлежит уплате для ИП
//
// Параметры:
//   Организация     - СправочникСсылка.Организации - ИП, который уплачивает фиксированные взносы
//   НалоговыйПериод - Дата - Период, за который оплачиваются фиксированные взносы
//
// Возвращаемое значение:
//   Число
//
Функция ВзносыПоЕдиномуТарифуПодлежащиеУплате(Организация, НалоговыйПериод) Экспорт
	
	Возврат ФиксированныеСтраховыеВзносыКУплате(
		Организация,
		НалоговыйПериод,
		Перечисления.Периодичность.Год).СуммаВзносаЕдиныйТарифВсего;
	
КонецФункции

// Возвращает взносы с доходов ИП, подлежащие уплате за период
//
// Параметры:
//   Организация     - СправочникСсылка.Организации - ИП, который уплачивает взносы с доходов
//   НалоговыйПериод - Дата - Период, за который оплачиваются взносы с доходов
//
// Возвращаемое значение:
//   Структура - см. НовыйРезультатВзносыСДоходовПодлежащиеУплате()
//
Функция ВзносыСДоходовПодлежащиеУплате(Организация, НалоговыйПериод) Экспорт
	
	Результат = НовыйРезультатВзносыСДоходовПодлежащиеУплате();
	
	ПериодПрошлыйГод = НачалоГода(НалоговыйПериод) - 1;
	
	// Взнос с доходов платится после окончания налогового периода по сроку - 1 июля следующего года
	// Согласно Федерального закона от 31.07.2023 N 389-ФЗ
	// взнос с доходов за 2024 г. можно зачесть в налоговой базе 2025 г.
	Результат.ЗаТекущийГод = ВзносСДоходовПодлежащийУплатеЗаПериод(Организация, НалоговыйПериод, ПериодПрошлыйГод);
	
	// Переходный период действия Федерального закон от 31.07.2023 N 389-ФЗ
	// Взнос с доходов за 2023 г. можно зачесть в базе как 2023 г., так и в 2024 г.
	// Повторно не зачитывается в налоговой базе
	Результат.ПереходныйПериод = ВзносСДоходовПодлежащийУплатеЗаПериод(Организация,
		НалоговыйПериод,
		НалоговыйПериод);
	
	Результат.Всего = Результат.ЗаТекущийГод + Результат.ПереходныйПериод;
	
	Возврат Результат;
	
КонецФункции

// Возвращает празнак того, что правило задачи соответствует задачи уплаты взноса с доходов
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило задачи по уплате взносов ИП
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПравилоУплатыВзносовСДоходов(Правило) Экспорт
	
	КодЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Код");
	Возврат КодЗадачи = ВыполнениеЗадачБухгалтера.ИдентификаторПравилаСтраховыеВзносыИПСДоходов();
	
КонецФункции

// Возвращает срок уплаты взноса за период
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ИП, который уплачивает взнос
//   Период        - Период, за который оплачивается взнос
//   ВзносСДоходов - Булево - Признак, указывающий на оплату взноса с доходов
//
// Возвращаемое значение:
//   Дата
//
Функция СрокОплатыВзноса(Организация, НалоговыйПериод, ВзносСДоходов = Ложь) Экспорт
	
	КонецПериодаПоУмолчанию = КонецГода(НалоговыйПериод);
	
	Если ВзносСДоходов Тогда
		ПорядокУплаты = УчетСтраховыхВзносовИППовтИсп.ПорядокУплатыВзноса(
			Организация,
			НалоговыйПериод,
			Истина);
		Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовЕдиныйТариф(КонецПериодаПоУмолчанию);
	Иначе
		ПорядокУплаты = УчетСтраховыхВзносовИППовтИсп.ПорядокУплатыВзноса(
			Организация,
			КонецГода(НалоговыйПериод));
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплаты, "Срок", КонецПериодаПоУмолчанию);
	
КонецФункции

// Возвращает вид страхового взноса для ИП
//
// Параметры:
//   ВзносСДохода - Булево - Признак, что взнос считается с доходов свыше предела
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыНалогов
//
Функция ВидСтраховогоВзносаИП(ВзносСДоходов = Ложь) Экспорт
	
	Если ВзносСДоходов Тогда
		ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф;
	КонецЕсли;
	
	Возврат ВидНалога;
	
КонецФункции

// Возвращает сумму взносов, уплаченных после перехода на ЕНС за расчетные периоды, предшествующие 2023 году
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ИП, для которого необходимо рассчитать уплаченную задолженность по взносам
//   Период      - Дата - Отчетный период
//
// Возвращаемое значение:
//  Сумма
//
Функция ОплаченнаяЗадолженностьПоВзносамПодлежащаяЗачету(Организация, Период) Экспорт
	
	// Суммы страховых взносов, уплаченные после 31 декабря 2022 года за расчетные периоды, предшествующие 2023 году,
	// уменьшают исчисленную за налоговые периоды 2023 - 2025 годов сумму налога.
	// п.1.2 ст. 346.51 НК РФ
	
	ДатаПереходаНаЕНС = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	Если Не ПриниматьКУчетуЗадолженностьДоЕНС(Период) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СуммаРасход), 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Период,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И СчетУчета В (&СчетаУчетаВзносов)
	|				И СрокУплаты < &ДатаПереходаНаЕНС) КАК РасчетыПоНалогамНаЕдиномНалоговомСчете");
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоГода(Период));
	Запрос.УстановитьПараметр("ДатаОкончания",       Новый Граница(КонецДня(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаПереходаНаЕНС",   ДатаПереходаНаЕНС);
	
	СчетаУчетаВзносов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаВзносов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаВзносов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаВзносов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод));
	
	Запрос.УстановитьПараметр("СчетаУчетаВзносов", СчетаУчетаВзносов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Сумма;
	
КонецФункции

// Возвращает признак того, можно ли зачесть взносы ИП, уплаченные после перехода на ЕНС за расчетные периоды, предшествующие 2023 году
//
// Параметры:
//   Период - Дата - Отчетный период
//
// Возвращаемое значение:
//  Булево
//
Функция ПриниматьКУчетуЗадолженностьДоЕНС(Период) Экспорт
	
	// Суммы страховых взносов, уплаченные после 31 декабря 2022 года за расчетные периоды, предшествующие 2023 году,
	// уменьшают исчисленную за налоговые периоды 2023 - 2025 годов сумму налога.
	// п.1.2 ст. 346.51 НК РФ
	
	ДатаПереходаНаЕНС = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	ГодПереходаНаЕНП = Год(ДатаПереходаНаЕНС);
	ГодНалоговогоПериода = Год(Период);
	
	Возврат ГодНалоговогоПериода >= ГодПереходаНаЕНП Или ГодНалоговогоПериода <= (ГодПереходаНаЕНП + 2);
	
КонецФункции

// Возвращает периоды уплаты взносов с доходов, которые ИП должен заплатить в отчетном периоде
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ИП, для которого необходимо рассчитать периоды уплаты взносов с доходов
//   ПериодСобытия - Дата - Отчетный период
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаПериодовУплатыВзносовСДоходов()
//
Функция ПериодыУплатыВзносаСДоходов(Организация, ПериодСобытия) Экспорт
	
	// Взнос с доходов уплачивается на пенсионное страхование в случае, когда для ИП действует единый тариф
	// п.1.2 ст.430 НК РФ
	
	Результат = НоваяТаблицаПериодовУплатыВзносовСДоходов();
	
	ТаблицаДействияТарифов = ТаблицаТарифовСтраховыхВзносов(
		Организация,
		НачалоСтраховогоПериода(ПериодСобытия),
		ПериодСобытия);
	
	ПониженныеТарифы = УчетСтраховыхВзносовИППовтИсп.ПониженныеТарифыСтраховыхВзносов();
	
	ДатаПереходаНаЕНС = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	НоваяСтрока = Неопределено;
	
	Для Каждого ТекущийПериод Из ТаблицаДействияТарифов Цикл
		
		Если (ТекущийПериод.ДатаНачала < ДатаПереходаНаЕНС Или ЗначениеЗаполнено(ТекущийПериод.Сумма))
			И ПониженныеТарифы.Найти(ТекущийПериод.Тариф) = Неопределено Тогда
			
			Если НоваяСтрока = Неопределено Или КонецДня(НоваяСтрока.ДатаОкончания) + 1 < ТекущийПериод.ДатаНачала Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ДатаНачала = ТекущийПериод.ДатаНачала;
			КонецЕсли;
			
			НоваяСтрока.ДатаОкончания = Макс(НоваяСтрока.ДатаОкончания, ТекущийПериод.ДатаОкончания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму взносов, подлежащих уплате за период.
// Переходный период: за 2022 г. считаем взнос в 2023 г. с учетом оплаченных и зачтенных в 2022 г. сумм
//
// Параметры:
//   Организация     - СправочникСсылка.Организации - ИП, для которого необходимо рассчитать периоды уплаты взносов с доходов
//   НалоговыйПериод - Дата - Отчетный период, в котором взносы подлежат уплате
//   ПериодСобытия   - Дата - Дата, на которую необходимо вычислить взнос с доходов
//
// Возвращаемое значение:
//  Число
//
Функция ВзносСДоходовПодлежащийУплатеЗаПериод(Организация, НалоговыйПериод, ПериодСобытия) Экспорт
	
	Результат = 0;
	
	СрокУплаты = УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(
		ПериодСобытия,
		Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	Если ЗначениеЗаполнено(СрокУплаты) И ВзносСДоходовПодлежитУплатеВТекущемПериоде(НалоговыйПериод, СрокУплаты) Тогда
		
		// Взнос с доходов платится в случае, когда у ИП единый тариф - п.1.2 ст. 430 НК РФ
		ПериодыУплатыВзносаСДоходов = ПериодыУплатыВзносаСДоходов(Организация, ПериодСобытия);
		
		ДатаПереходаНаЕНС = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
		Для Каждого ТекущийПериод Из ПериодыУплатыВзносаСДоходов Цикл
			
			ДатаОкончания = КонецДня(ТекущийПериод.ДатаОкончания);
			СтруктураДоходов = СтруктураДоходовПоВидамДеятельности(Организация, ТекущийПериод.ДатаНачала, ДатаОкончания);
			ВзносыНачислено = СтраховыеВзносыСДоходовКУплате(Организация, ДатаОкончания, СтруктураДоходов);
			Результат = Результат + ВзносыНачислено.СуммаВзносаПФРсДоходовВсего;
			
			СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные(Организация,
				ТекущийПериод.ДатаНачала,
				ДатаОкончания,
				, // Выбираем все уплаченные за период взносы, в т.ч. за предшествующие периоды
				Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
			
			// Проверяем переплату по взносу с доходов за предшествующий год
			// если переплата была, то она включена в уменьшение налога - соотвественно, нужно уменшить взносы, подлежащие уплате
			СуммаОплаченнаяЗаСтраховойПериод = 0;
			Для Каждого ТекущаяОплата Из СтраховыеВзносыУплаченные Цикл
				Если ТекущаяОплата.СтраховойПериод >= ТекущийПериод.ДатаНачала И ТекущаяОплата.СтраховойПериод <= ДатаОкончания Тогда
					СуммаОплаченнаяЗаСтраховойПериод = СуммаОплаченнаяЗаСтраховойПериод + ТекущаяОплата.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			СуммаОплаченнаяЗаПрошлыеПериоды = СтраховыеВзносыУплаченные.Итог("Сумма") - СуммаОплаченнаяЗаСтраховойПериод;
			
			Если ПериодСобытия < ДатаПереходаНаЕНС И Результат > 0 Тогда
				// Исключаем платежи, которые были учтены в периоде до перехода на ЕНС
				// За период до ЕНС взнос с доходов к зачету вычисляется за вычетом уплаченных сумм до даты перехода на ЕНС,
				// т.е. начислено - оплачено по счету 69.06.05 до 01.01.2023 г.
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	-ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) КАК СуммаОстаток
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Остатки(
				|			&ПериодСобытия,
				|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
				|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
				|			Организация = &Организация
				|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)) КАК ХозрасчетныйОстатки
				|
				|ИМЕЮЩИЕ
				|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) <> 0");
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ПериодСобытия", Новый Граница(НачалоГода(ДатаОкончания) - 1, ВидГраницы.Включая));
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ОстатокНаНачалоГода = Выборка.СуммаОстаток;
				Иначе
					ОстатокНаНачалоГода = 0;
				КонецЕсли;
				
				Если СуммаОплаченнаяЗаПрошлыеПериоды > ОстатокНаНачалоГода Тогда
					// Была переплата по взносы за предыдущий период - автоматом переносим на страховой период
					Результат = Макс(0, Результат - СуммаОплаченнаяЗаСтраховойПериод
						- (СуммаОплаченнаяЗаПрошлыеПериоды - ОстатокНаНачалоГода));
				Иначе
					Результат = Макс(0, Результат - СуммаОплаченнаяЗаСтраховойПериод);
				КонецЕсли;
			ИначеЕсли Год(НалоговыйПериод) - 1 = Год(ДатаПереходаНаЕНС) Тогда
				// Взнос с доходов за 2023 г. можно принять как в 2023 г., так и в 2024 г.
				// Для налогового периода 2024 г. нужно рассчитать сумму взноса с учетом скорректированной суммы пользователем:
				// все взносы, принятые пользователем - сумма фиксированных взносов по единому тарифу - суммы взноса с доходов за 2022 г.
				ПрошлыйГод = НачалоГода(НалоговыйПериод) - 1;
				
				ВзносыУказанныеПользователем = СкорректированнаяСуммаВзносовПодлежащихУплате(Организация, ПрошлыйГод);
				ВзносПоЕдиномуТарифуПрошлыйГод = ВзносыПоЕдиномуТарифуПодлежащиеУплате(Организация, ПрошлыйГод);
				Если ЗначениеЗаполнено(ВзносыУказанныеПользователем) Тогда
					ВзносСДоходовПрошлыйГод = ВзносыСДоходовПодлежащиеУплате(Организация, ПрошлыйГод).ЗаТекущийГод;
					Результат = Результат - Макс(
						ВзносыУказанныеПользователем - ВзносПоЕдиномуТарифуПрошлыйГод - ВзносСДоходовПрошлыйГод, 0);
				Иначе
					ИспользованныеВзносы = ВзносыПодлежащиеУплатеИспользованныеДляУменьшенияНалога(
						Организация, КонецГода(ДатаПереходаНаЕНС) + 1, Истина);
					Результат = Макс(0, Результат
						- Макс(ИспользованныеВзносы.Итого - ВзносПоЕдиномуТарифуПрошлыйГод - СуммаОплаченнаяЗаПрошлыеПериоды, 0));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сумма страховых взносов ИП, которые были оплачены и зарезервированы в налоговом периоде
// Федеральный закон от 31.07.2023 N 389-ФЗ
//
// Параметры:
//   Организация         - СправочникСсылка.Организации - ИП, который уплачивает фиксированные взносы
//   НачалоПериода       - Дата - Начало налогового период, за который оплачиваются фиксированные взносы
//   КонецПериода        - Дата - Конец налогового период, за который оплачиваются фиксированные взносы
//   УменьшенияНалогаПСН - Булево - Признак, что необходимо получать взносы, принятые для уменьшаения налога по ПСН.
//                                  Иначе будут получены взносы для уменьшения УСН.
//
// Возвращаемое значение:
//   Сумма
//
Функция ЗарезервированныеСуммыВзносовЗаНалоговыйПериод(Организация, НачалоПериода, КонецПериода, УменьшенияНалогаПСН = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетаУчетаСтраховыхВзносов = УчетСтраховыхВзносовИП.СчетаУчетаСтраховыхВзносов();
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(СчетаУчетаСтраховыхВзносов.ПФР);
	СчетаУчета.Добавить(СчетаУчетаСтраховыхВзносов.ФФОМС);
	СчетаУчета.Добавить(СчетаУчетаСтраховыхВзносов.ЕдиныйТариф);
	
	НачалоПериодаНачисления = НачалоГода(НачалоПериода); // Период начисления в регистре - начало отчетного года
	КонецПрошлогоПериода = НачалоГода(КонецПериода) - 1;
	
	КонецПрошлогоГода = НачалоГода(КонецПериода) - 1;
	ПорядокУплатыВзносаСДоходов = УчетСтраховыхВзносовИППовтИсп.ПорядокУплатыВзноса(
		Организация,
		КонецПрошлогоГода,
		Истина);
	СрокУплатыВзносовЗаПрошлыйПериод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПорядокУплатыВзносаСДоходов,
		"Срок",
		УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(
			НачалоГода(КонецПериода) - 1,
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела));
	
	// Собираем данные, зачтенные при расчете налога в уменьшении налога за текущий налоговый период:
	// взнос с доходов за предыдущий год, т.к. он подлежит оплате в текущем периоде
	// + взнос по единому тарифу за текущий период.
	// Исключаем суммы уплаты по задолженности за периоды до перехода на ЕНС -
	// эти суммы зачитываются по сроку уплаты и отражаются в расчете как уплаченные взносы.
	// Взносы по единому тарифу за прошлый год могут быть перенесены для оплаты на текущий год,
	// но они считаются подлежащими к уплате в прошлом году.
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.ДокументРасхода КАК ДокументРасхода,
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.ПериодНачисления КАК ПериодНачисления,
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.Период КАК ПериодЗачета,
	|	ЕСТЬNULL(СУММА(РасходыУменьшающиеНалогПоОтдельнымРежимам.СуммаРасхода), 0) КАК Сумма
	|ПОМЕСТИТЬ ОплаченныеВзносыВТекущемГоду
	|ИЗ
	|	РегистрНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам КАК РасходыУменьшающиеНалогПоОтдельнымРежимам
	|ГДЕ
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.Организация = &Организация
	|	И РасходыУменьшающиеНалогПоОтдельнымРежимам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (РасходыУменьшающиеНалогПоОтдельнымРежимам.ДокументРасхода ССЫЛКА Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|			ИЛИ РасходыУменьшающиеНалогПоОтдельнымРежимам.ДокументРасхода ССЫЛКА Документ.РегламентнаяОперация)
	|	И РасходыУменьшающиеНалогПоОтдельнымРежимам.СчетУчета В(&СчетаУчета)
	|	И РасходыУменьшающиеНалогПоОтдельнымРежимам.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.ДокументРасхода,
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.ПериодНачисления,
	|	РасходыУменьшающиеНалогПоОтдельнымРежимам.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Результат.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ОплаченныеВзносыВТекущемГоду.Сумма), 0) КАК Сумма
	|	ИЗ
	|		ОплаченныеВзносыВТекущемГоду КАК ОплаченныеВзносыВТекущемГоду
	|	ГДЕ
	|		ОплаченныеВзносыВТекущемГоду.ПериодНачисления МЕЖДУ &НачалоПериодаНачисления И &КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ОплаченныеВзносыВТекущемГоду.Сумма)
	|	ИЗ
	|		ОплаченныеВзносыВТекущемГоду КАК ОплаченныеВзносыВТекущемГоду
	|	ГДЕ
	|		ОплаченныеВзносыВТекущемГоду.ПериодНачисления МЕЖДУ &НачалоПрошлогоГода И &КонецПрошлогоГода
	|		И ОплаченныеВзносыВТекущемГоду.ПериодЗачета = &СрокУплатыВзносовЗаПрошлыйПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ОплаченныеВзносыВТекущемГоду.Сумма)
	|	ИЗ
	|		ОплаченныеВзносыВТекущемГоду КАК ОплаченныеВзносыВТекущемГоду
	|	ГДЕ
	|		ОплаченныеВзносыВТекущемГоду.ПериодНачисления МЕЖДУ &НачалоПрошлогоГода И &КонецПрошлогоГода
	|		И ОплаченныеВзносыВТекущемГоду.ПериодЗачета < &СрокУплатыВзносовЗаПрошлыйПериод
	|		И ОплаченныеВзносыВТекущемГоду.ДокументРасхода ССЫЛКА Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ОплаченныеВзносыВТекущемГоду.Сумма)
	|	ИЗ
	|		ОплаченныеВзносыВТекущемГоду КАК ОплаченныеВзносыВТекущемГоду
	|	ГДЕ
	|		ОплаченныеВзносыВТекущемГоду.ПериодНачисления МЕЖДУ &НачалоПрошлогоГода И &КонецПрошлогоГода
	|		И ОплаченныеВзносыВТекущемГоду.ПериодНачисления >= &ДатаПереходаНаЕНС
	|		И ОплаченныеВзносыВТекущемГоду.ПериодЗачета < &ПредельныйСрокОплатыЗаПредыдущиеПериоды
	|		И ОплаченныеВзносыВТекущемГоду.ДокументРасхода ССЫЛКА Документ.РегламентнаяОперация) КАК Результат");
	
	Если УменьшенияНалогаПСН Тогда
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Установить(
			3, Новый ВыражениеСхемыЗапроса("ЕСТЬNULL(СУММА(РасходыУменьшающиеНалогПоОтдельнымРежимам.СуммаРасходаПСН), 0)"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериодаНачисления", НачалоПериодаНачисления);
	Запрос.УстановитьПараметр("НачалоПрошлогоГода", НачалоГода(КонецПрошлогоПериода));
	Запрос.УстановитьПараметр("КонецПрошлогоГода", КонецПрошлогоПериода);
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	Запрос.УстановитьПараметр("СрокУплатыВзносовЗаПрошлыйПериод", НачалоДня(СрокУплатыВзносовЗаПрошлыйПериод));
	Запрос.УстановитьПараметр("ДатаПереходаНаЕНС", НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	// Считаем, что максимально срок оплаты фиксированных взносов могут перенести на ближайший месяц следующего года
	Запрос.УстановитьПараметр("ПредельныйСрокОплатыЗаПредыдущиеПериоды", ДобавитьМесяц(КонецПрошлогоПериода, 1));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Суммы зарезервированных взносов за текущий налоговый период + оплата взноса с доходов за предыдущий год
	Возврат Выборка.Сумма;
	
КонецФункции

// Сумма страховых взносов ИП, подлежащих уплате, на которые уже уменьшен налог,
// для 2023 года разрешено использовать взносы с дохода за 2023 год
//
// Параметры:
//   Организация         - СправочникСсылка.Организации - ИП, который уплачивает фиксированные взносы
//   Период              - Дата - дата, на которую рассчитывается сумма
//   РасчетДля_2023_Года - Булево - признак расчета года целиком, если Ложь - не считаем
//
// Возвращаемое значение:
//   Стуктура см. НовыйРезультатИспользованныеВзносыПодлежащиеУплате()
//
Функция ВзносыПодлежащиеУплатеИспользованныеДляУменьшенияНалога(Организация, Период, РасчетДля_2023_Года = Ложь) Экспорт
	
	Результат = НовыйРезультатИспользованныеВзносыПодлежащиеУплате();
	
	Если Не ЗначениеЗаполнено(Организация) Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПериодРасчета = ?(РасчетДля_2023_Года, Период - 1, Период);
	
	// Взносы использованные для уменьшения УСН Доход
	РассчитыватьУСН = РасчетДля_2023_Года Или НачалоГода(Период) <> НачалоКвартала(Период)
		И УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоГода(ПериодРасчета), КонецГода(ПериодРасчета));
	Если РассчитыватьУСН Тогда
		Результат.УСН_Доход = УчетУСН.ВзносыИспользованныеДляУменьшенияУСН(Организация, Период);
	КонецЕсли;
	
	// Взносы использованные для уменьшения ПСН
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ПериодРасчета)
		Или УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Организация, ПериодРасчета) Тогда
		Результат.ПСН =
			УчетПСН.ВзносыИспользованныеДляУменьшенияПатента(Организация, ПериодРасчета);
	КонецЕсли;
	
	// Всего использовано взносов
	Результат.Итого = Результат.ПСН + Результат.УСН_Доход;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму взносов, подлежащих уплате указанную пользователем, если сумма корректировалась
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию
//   ПериодРасчета - Дата - дата в том году, за который нужно найти сумму
//   Патент - Булево - истина, если надо отобрать по патенту
// 
// Возвращаемое значение:
//   - Число, Неопределено - неопределено, если нет записи, иначе сумма взноса указанная пользователем
//
Функция СкорректированнаяСуммаВзносовПодлежащихУплате(Организация, ПериодРасчета, Патент = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если Патент Тогда
		Запрос.УстановитьПараметр("КонецПериода", НачалоКвартала(КонецГода(ПериодРасчета)));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", НачалоКвартала(ПериодРасчета));
	КонецЕсли;
	Запрос.УстановитьПараметр("Патент", Патент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(УменьшениеНалогаНаВзносыПодлежащиеУплате.Сумма, 0) КАК СуммаВзносаДляУменьшения
	|ИЗ
	|	РегистрСведений.УменьшениеНалогаНаВзносыПодлежащиеУплате КАК УменьшениеНалогаНаВзносыПодлежащиеУплате
	|ГДЕ
	|	УменьшениеНалогаНаВзносыПодлежащиеУплате.Период = &КонецПериода
	|	И УменьшениеНалогаНаВзносыПодлежащиеУплате.Организация = &Организация
	|	И УменьшениеНалогаНаВзносыПодлежащиеУплате.ДеятельностьНаПатенте = &Патент";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаВзносаДляУменьшения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Описание структуры параметров расчета взноса с доходов
//
// Возвращаемое значение:
//   Структура
//
Функция НовыеПараметрыРасчетаВзносаСДоходов() Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ПериодичностьНачисления", Перечисления.Периодичность.Квартал);
	ПараметрыРасчета.Вставить("УчитыватьРасходы", Ложь);
	ПараметрыРасчета.Вставить("РасчетЗаТекущийПериод", Ложь);
	ПараметрыРасчета.Вставить("ВсегоДоходов", 0);
	ПараметрыРасчета.Вставить("ФиксированнаяЧастьВзносов", 0);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция УплаченныеСтраховыеВзносыПоСроку(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасходыУменьшающиеНалогПоОтдельнымРежимамОбороты.СуммаРасходаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК РасходыУменьшающиеНалогПоОтдельнымРежимамОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаСтраховыхВзносов()
	
	ТаблицаСтраховыхВзносов = Новый ТаблицаЗначений;
	
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтраховойПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидПлатежаВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ПринятиеКналоговомуУчету", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДокументОплаты",Документы.ТипВсеСсылки());
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДатаДокументаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СуммаПредельная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДатаВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("НомерВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДатаПринятияЕНП", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаСтраховыхВзносов;
	
КонецФункции

Функция РассчитатьСтраховыеВзносыСДоходов(Организация, Период)
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация);
	
	ВсегоДоходов = СуммаДоходаДляНачисленияВзносаПФР(Организация, Период, ДанныеДляРасчета);
	
	ОблагаемыйДоход = Макс(ВсегоДоходов - ДанныеДляРасчета.ПорогДоходов, 0);
	РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / 100, 2, 1);
	
	МаксимальнаяСуммаВзноса = ДанныеДляРасчета.ПредельнаяСуммаВзноса - ДанныеДляРасчета.ФиксированнаяЧастьПФР;
	
	СуммаВзносаПФРсДоходов = Мин(РасчетнаяСуммаВзноса, МаксимальнаяСуммаВзноса);
	
	Возврат Новый Структура("Сумма, СуммаПредельная", СуммаВзносаПФРсДоходов, ДанныеДляРасчета.ПредельнаяСуммаВзноса);
	
КонецФункции

Функция СуммаДоходаДляНачисленияВзносаПФР(Организация, Период, ДанныеДляРасчета)
	
	СуммаДохода = 0;
	
	// В зависимости от применяемого режима взнос начисляется либо от "чистых" доходов, либо от доходов за вычетом расходов.
	// Если учитываются расходы - наряду с суммами, отраженными в книгах на момент расчета, необходимо учесть и расходы
	// текущего периода на уплату взносов, которые пока в налоговом учете не отражены.
	
	ПериодичностьНачисленияВзносов = ПериодичностьНачисления(Организация, Период);
	РасчетЗаГод = (КонецМесяца(Период) = КонецГода(Период));
	ДатаПереходаНаЕНС = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	// Взнос с доходов платится в случае, когда у ИП единый тариф - п.1.2 ст. 430 НК РФ
	ПериодыУплатыВзносаСДоходов = ПериодыУплатыВзносаСДоходов(Организация, Период);
	Для Каждого ТекущийПериод Из ПериодыУплатыВзносаСДоходов Цикл
		
		ДатаОкончания = КонецДня(ТекущийПериод.ДатаОкончания);
		СтруктураДоходов = СтруктураДоходовПоВидамДеятельности(Организация, ТекущийПериод.ДатаНачала, ДатаОкончания);
		УчитыватьРасходы = УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, ДатаОкончания);
		
		Если РасчетЗаГод И УчитыватьРасходы И ПериодичностьНачисленияВзносов = Перечисления.Периодичность.Квартал Тогда
			ДоходыИРасходыОтраженыВКУДИР = Истина;
		Иначе
			ДоходыИРасходыОтраженыВКУДИР = Ложь;
		КонецЕсли;
		
		// Обработаем сценарии расчета облагаемого взносами дохода в порядке возрастания сложности.
		
		Если Не УчитыватьРасходы Или ДоходыИРасходыОтраженыВКУДИР Тогда
			
			// Самый простой случай: считаем доход по КУДИР
			
			СуммаДохода = СуммаДохода + СтруктураДоходов.СуммаДоходаИП
				+ СтруктураДоходов.СуммаДоходаУСН
				+ СтруктураДоходов.ВмененныйДоход
				+ СтруктураДоходов.ПотенциальноВозможныйДоход;
			
		ИначеЕсли Не РасчетЗаГод Или ПериодичностьНачисленияВзносов = Перечисления.Периодичность.Год Тогда
			
			// Облагаемый взносами доход уменьшается на расходы.
			
			// До завершения года при ежеквартальном начислении, а также при начислении 1 раз в конце года (ИП на ОСНО ранее 2020 года)
			// используется допущение: все уплаченные взносы будут при начислении включены в расходы.
			
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьНачисленияВзносов, ДатаОкончания);
			КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодичностьНачисленияВзносов, ДатаОкончания);
			
			ВзносыУплаченныеЗаПериод = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПериода, КонецПериода);
			
			Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаОкончания) Тогда
				// Исключим добровольные взносы в ФСС - при УСН они в расходах не учитываются.
				УдалитьПлатежиИзТаблицы(ВзносыУплаченныеЗаПериод, СчетаУчетаСтраховыхВзносов().ФСС);
			КонецЕсли;
			
			СуммаДохода = СуммаДохода + СтруктураДоходов.ВмененныйДоход
				+ СтруктураДоходов.ПотенциальноВозможныйДоход
				+ Макс(СтруктураДоходов.СуммаДоходаИП + СтруктураДоходов.СуммаДоходаУСН - ВзносыУплаченныеЗаПериод.Итог("Сумма"), 0);
			
		Иначе
			
			// Облагаемый взносами доход уменьшается на расходы. В конце года все платежи по взносам уже отражены.
			// Можно определить итоговые расходы по взносам в пределах начисленных сумм, отбросив переплату.
			// Поскольку доход, с суммы которого начисляется взнос, в расходной части включает в себя и саму сумму взноса,
			// необходимо расчетным путем определить предельно возможную сумму взноса с доходов
			// и ограничить этой суммой фактические платежи, исключив из расходов возможную переплату.
			
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьНачисленияВзносов, ДатаОкончания);
			КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодичностьНачисленияВзносов, ДатаОкончания);
		
			НачалоГода = НачалоГода(ДатаОкончания);
			КонецПредыдущегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(КонецПериода, ПериодичностьНачисленияВзносов, -1);
			
			УчетныйДоходОсновнаяДеятельность = СтруктураДоходов.СуммаДоходаИП + СтруктураДоходов.СуммаДоходаУСН;
			УчетныйДоходОсобыйПорядок        = СтруктураДоходов.ВмененныйДоход + СтруктураДоходов.ПотенциальноВозможныйДоход;
			
			ВзносыУплаченныеЗаГод = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоГода, КонецПериода);
			
			СчетаВзносов = СчетаУчетаСтраховыхВзносов();
			
			Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаОкончания) Тогда
				// Исключим добровольные взносы в ФСС - при УСН они в расходах не учитываются.
				УдалитьПлатежиИзТаблицы(ВзносыУплаченныеЗаГод, СчетаВзносов.ФСС);
				СчетаВзносов.Удалить("ФСС");
			КонецЕсли;
			
			// Расходы периода на постоянную часть взносов в пределах исчисленных сумм.
			
			ТекущийРасходНаПостоянныеВзносы = 0;
			
			Для Каждого КлючИЗначение Из СчетаВзносов Цикл
				
				ИмяПоказателя = "ФиксированнаяЧасть" + КлючИЗначение.Ключ;
				
				Если Не ДанныеДляРасчета.Свойство(ИмяПоказателя) Тогда
					Продолжить;
				КонецЕсли;
				
				СчетУчетаВзноса = КлючИЗначение.Значение;
				
				УплаченоЗаГод = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоГода, КонецПериода,
					СчетУчетаВзноса, ДатаОкончания, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				УплаченоРанее = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоГода, КонецПредыдущегоПериода,
					СчетУчетаВзноса, ДатаОкончания, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				РасходыЗаГод = Мин(ДанныеДляРасчета[ИмяПоказателя], УплаченоЗаГод);
				// Переплата постоянной части взносов контролируется в течение года и в расходы не включается.
				РасходТекущегоПериода = Макс(РасходыЗаГод - УплаченоРанее, 0);
				
				ТекущийРасходНаПостоянныеВзносы = ТекущийРасходНаПостоянныеВзносы + РасходТекущегоПериода;
				
			КонецЦикла;
			
			// Расходы периода на уплаченный взнос в ПФР с доходов.
			
			// Имеется особенность: в периодах до завершения года все платежи включаются в расходы, переплата не контролируется.
			// При завершении года после определения окончательной суммы взноса возможно сторно расходов. Поэтому при вычислении
			// предельного расчетного расхода на взнос с доходов и суммы фактического расхода необходимо исключить из
			// учетных доходов полностью учтенные в расходах оплаты взноса с доходов в предыдущих периодах года.
			
			ПФРСДоходовУплаченоЗаГод = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоГода, КонецПериода,
				СчетаВзносов.ПФР, ДатаОкончания, Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
			ПФРСДоходовУплаченоРанее = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоГода, КонецПредыдущегоПериода,
				СчетаВзносов.ПФР, ДатаОкончания, Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
			
			// Учтем платежи по взносам всех видов за прошлые годы, совершенныме в текущем периоде.
			// Используется допущение: платежи за прошлые годы не содержат переплат и полностью включаются в расходы.
			ВсегоУплаченоТекущийПериод = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоПериода, КонецПериода);
			УплаченоТекущиеВзносыТекущийПериод = СуммаОплатыВзноса(ВзносыУплаченныеЗаГод, НачалоПериода, КонецПериода, , ДатаОкончания);
			
			УплаченоЗаПрошлыеГоды = ВсегоУплаченоТекущийПериод - УплаченоТекущиеВзносыТекущийПериод;
			
			// При совмещении ОСНО или УСН с Патентом, взносы распределяются пропорционально доходам
			// При расчете дохода, необходимо его уменьшать только на взносы по основной системе (УСН или ОСНО)
			Если УчетныйДоходОсновнаяДеятельность + УчетныйДоходОсобыйПорядок > 0 Тогда
				КоэффициентРаспределенияВзносов = УчетныйДоходОсновнаяДеятельность
					/ (УчетныйДоходОсновнаяДеятельность + УчетныйДоходОсобыйПорядок);
			Иначе
				КоэффициентРаспределенияВзносов = 1;
			КонецЕсли;
			
			// Для определения расчетной суммы взноса необходимо знать итоговую сумму годового дохода
			// с учетом расходов текущего периода на постоянную часть взносов, но без расходов на сам взнос с доходов.
			РасчетныйДоходБезУчетаВзноса = УчетныйДоходОсобыйПорядок
				+ Макс(УчетныйДоходОсновнаяДеятельность
				+ ПФРСДоходовУплаченоРанее
				- Окр(ТекущийРасходНаПостоянныеВзносы * КоэффициентРаспределенияВзносов, 2, 1) - УплаченоЗаПрошлыеГоды, 0);
			// Определяем максимальную сумму взноса с доходов, которую можно учесть в расходах, расчетным способом по ставке 1/101.
			РасчетнаяБазаВзносовСДоходов = РасчетныйДоходБезУчетаВзноса - ДанныеДляРасчета.ПорогДоходов;
			ПФРСДоходовПредельныеРасходыЗаГод
				= Окр(РасчетнаяБазаВзносовСДоходов * ДанныеДляРасчета.ПроцентВзносов / (100 + ДанныеДляРасчета.ПроцентВзносов), 2, 1);
			
			// Теперь определим фактическую сумму расходов на взнос с доходов, которая будет учтена в НУ по итогам года.
			// Эту сумму необходимо будет отнять от расчетного дохода, чтобы получить базу для начисления взноса по ставке 1%.
			
			ПФРСДоходовРасходыЗаГод = Мин(ПФРСДоходовПредельныеРасходыЗаГод, ПФРСДоходовУплаченоЗаГод);
			
			СуммаДохода = СуммаДохода + Макс(РасчетныйДоходБезУчетаВзноса - ПФРСДоходовРасходыЗаГод, 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаДохода;
	
КонецФункции

Функция СуммаОплатыВзноса(ТаблицаУплатыВзносов, НачалоПериода, КонецПериода, СчетУчета = Неопределено, СтраховойПериод = Неопределено, ВидПлатежаВГосБюджет = Неопределено)
	
	СуммаОплаты = 0;
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат СуммаОплаты;
	КонецЕсли;
	
	// Отберем платежи, удовлетворяющие переданным параметрам.
	Для Каждого Платеж Из ТаблицаУплатыВзносов Цикл
		
		Если Платеж.ДатаДокументаОплаты > КонецДня(КонецПериода)
			Или Платеж.ДатаДокументаОплаты < НачалоДня(НачалоПериода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетУчета <> Неопределено
			И Платеж.СчетУчета <> СчетУчета Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтраховойПериод <> Неопределено
			И КонецГода(Платеж.СтраховойПериод) <> КонецГода(СтраховойПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидПлатежаВГосБюджет <> Неопределено
			И Платеж.ВидПлатежаВГосБюджет <> ВидПлатежаВГосБюджет Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаОплаты = СуммаОплаты + Платеж.Сумма;
		
	КонецЦикла;
	
	Возврат СуммаОплаты;
	
КонецФункции

Процедура УдалитьПлатежиИзТаблицы(ТаблицаУплатыВзносов, СчетУчета)
	
	Индекс = ТаблицаУплатыВзносов.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		СтрокаПлатеж = ТаблицаУплатыВзносов[Индекс];
		Если СтрокаПлатеж.СчетУчета = СчетУчета Тогда
			ТаблицаУплатыВзносов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

// Дата автоматизации учета страховых взносов в фиксированном размере
//
Функция ДатаНачалаУчетаСтраховыхВзносовИП() Экспорт
	
	Возврат Дата(2014, 1, 1);
	
КонецФункции

// Дата перехода к начислению страховых взносов в фиксированном размере независимо от наличия оплаты
//
Функция ДатаАвтоНачисленияСтраховыхВзносовИП()
	
	Возврат Дата(2016, 1, 1);
	
КонецФункции

Функция ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(Организация, СтраховойПериод) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	
	СтраховыеВзносы.Вставить("ПФР", 0);
	СтраховыеВзносы.Вставить("ПФРДобровольно", 0);
	СтраховыеВзносы.Вставить("ФФОМС", 0);
	СтраховыеВзносы.Вставить("ФСС", 0);
	Если СтраховойПериод >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		СтраховыеВзносы.Вставить("ЕдиныйТариф", 0);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		Или УчетнаяПолитика.ПлательщикЕНП(Организация, СтраховойПериод) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	// Данные по состоянию расчетов за предыдущие страховые периоды определяются следующим образом:
	// 1. Получаем платежи за предыдущие страховые периоды, выполненные с начала года переданного страхового периода.
	// 2. Суммируем с остатками по взносам на начало текущего страхового периода.
	ТекстЗапроса = "ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_ПлатежиСНачалаГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			СчетДт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаОплатыНалога),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиИОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПлатежиСНачалаГода.Счет,
	|	ВТ_ПлатежиСНачалаГода.СуммаОборот
	|ИЗ
	|	ВТ_ПлатежиСНачалаГода КАК ВТ_ПлатежиСНачалаГода
	|ГДЕ
	|	ВТ_ПлатежиСНачалаГода.НалоговыйПериод < &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиИОплаты.Счет КАК Счет,
	|	СУММА(ВТ_ОстаткиИОплаты.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ВТ_ОстаткиИОплаты КАК ВТ_ОстаткиИОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОплаты.Счет";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтраховойПериод));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	
	СчетаНачисленияНалога = Новый Массив;
	Если СтраховойПериод < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		СчетаНачисленияНалога.Добавить(СчетаУчетаСтраховыхВзносов.ПФР);
		СчетаНачисленияНалога.Добавить(СчетаУчетаСтраховыхВзносов.ФФОМС);
	Иначе
		СчетаНачисленияНалога.Добавить(СчетаУчетаСтраховыхВзносов.ЕдиныйТариф);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ЦифровойРубль));
	Запрос.УстановитьПараметр("СчетаОплатыНалога", СчетаОплатыНалога);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет = СчетаУчетаСтраховыхВзносов.ПФР Тогда
			СтраховыеВзносы.ПФР = Выборка.СуммаОстаток;
		ИначеЕсли Выборка.Счет = СчетаУчетаСтраховыхВзносов.ФФОМС Тогда
			СтраховыеВзносы.ФФОМС = Выборка.СуммаОстаток;       
		ИначеЕсли Выборка.Счет = СчетаУчетаСтраховыхВзносов.ЕдиныйТариф Тогда
			СтраховыеВзносы.ЕдиныйТариф = Выборка.СуммаОстаток;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция ИнтервалСУчетомРассматриваемогоПериода(Интервал, ПервыйДеньМесяца, КонецМесяца)
	
	Если Интервал.ДатаНачала > ПервыйДеньМесяца Тогда
		НачалоИнтервала = Интервал.ДатаНачала;
	Иначе
		НачалоИнтервала = ПервыйДеньМесяца;
	КонецЕсли;
	Если Интервал.ДатаОкончания < КонецМесяца Тогда
		КонецИнтервала = Интервал.ДатаОкончания;
	Иначе
		КонецИнтервала = КонецМесяца;
	КонецЕсли;
	
	НовыйИнтервал = Новый Структура;
	НовыйИнтервал.Вставить("ДатаНачала", НачалоИнтервала);
	НовыйИнтервал.Вставить("ДатаОкончания", КонецИнтервала);
	
	Возврат НовыйИнтервал;
	
КонецФункции

Функция ПродолжительностьИнтервала(Интервал)
	
	Возврат День(Интервал.ДатаОкончания) - День(Интервал.ДатаНачала) + 1;
	
КонецФункции

Функция РазностьИнтерваловВДнях(УменьшаемыйИнтервал, ВычитаемыйИнтервал)
	
	РезультатИнтервал = Новый Структура;
	РезультатИнтервал.Вставить("ДатаНачала", Макс(УменьшаемыйИнтервал.ДатаНачала, ВычитаемыйИнтервал.ДатаНачала));
	РезультатИнтервал.Вставить("ДатаОкончания", Мин(УменьшаемыйИнтервал.ДатаОкончания, ВычитаемыйИнтервал.ДатаОкончания));
	Возврат ПродолжительностьИнтервала(РезультатИнтервал);
	
КонецФункции

Функция ВзносСДоходовПодлежитУплатеВТекущемПериоде(НалоговыйПериод, СрокУплаты)
	
	ГодНалоговогоПериода = Год(НалоговыйПериод);
	ГодСрокаУплаты = Год(СрокУплаты);
	ГодПереходаНаЕНС = Год(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	
	Если ГодНалоговогоПериода = ГодПереходаНаЕНС И ГодНалоговогоПериода = (ГодСрокаУплаты - 1) Тогда
		// Письмо ФНС России от 25.08.2023 № СД-4-3/10872@
		// Федеральный закон от 31.07.2023 N 389-ФЗ
		// В 2023 г. взнос с доходов за 2023 г. может быть признан налогоплательщиком подлежащими уплате как в 2023 г., так и в 2024 г.
		Возврат Истина;
	КонецЕсли;
	
	// Взнос подлежит оплате в текущем налоговом периоде
	Возврат (ГодНалоговогоПериода = ГодСрокаУплаты);
	
КонецФункции

Функция НовыйРезультатВзносыСДоходовПодлежащиеУплате()
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", 0); // Всего взносов, подлежащих уплате в налоговом периоде
	Результат.Вставить("ЗаТекущийГод", 0); // Сумма взносов с доходов за предыдущий год, подлежащая уплате в текущем периоде
	Результат.Вставить("ПереходныйПериод", 0); // Сумма взносов с доходов за 2023 г, подлежащих уплате в 2023 или в 2024 г. (переходный период)
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатИспользованныеВзносыПодлежащиеУплате()
	
	Результат = Новый Структура;
	Результат.Вставить("УСН_Доход", 0); // Использовано взносов, подлежащих уплате для уменьшения налога УСН с объектом Доход
	Результат.Вставить("ПСН", 0); // Использовано взносов, подлежащих уплате для уменьшения налога по Патентам
	Результат.Вставить("Итого", 0); // Использовано взносов всего
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаТарифовСтраховыхВзносов(Организация, ДатаНачала, ДатаОкончания)
	
	// Фиксированные взносы рассчитываются по следующей формуле:
	// Сумма взносов = (Тариф/12) * Количество полных месяцев + (Тариф/12 / Количество дней в месяце) * Количество дней действия тарифа
	//
	// Для точного расчета суммы взноса необходимо знать периоды действия тарифа и его месячный тариф:
	// по ИП вычисляем тариф на начало периода и его изменения в самом периоде
	
	// Рассчитываем до 4 знаков - для тарифа военные пенсионеры коэффициент указывается с такой точностью
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 4);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // Начало действия тарифа
	Результат.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // Конец действия тарифа
	Результат.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0)); // Всего дней действия тарифа
	Результат.Колонки.Добавить("Тариф", Новый ОписаниеТипов("ПеречислениеСсылка.ИПТарифыФиксированныхВзносов"));
	Результат.Колонки.Добавить("МесячныйРазмер", ОписаниеТипаЧисло); // Сумма тарифа за полный месяц
	Результат.Колонки.Добавить("Сумма", ОписаниеТипаЧисло); // (МесячныйРазмер/Количество дней в месяце)*КоличествоДней
	// Добровольный взнос рассчитывается для ИП в периоде действия НПД не по тарифу, а от МРОТ
	Результат.Колонки.Добавить("СуммаДобровольногоВзноса", ОписаниеТипаЧисло);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Результат.Период КАК Период,
	|	Результат.ПлательщикСтраховыхВзносовПФР_ФФОМС КАК ПлательщикСтраховыхВзносов,
	|	Результат.Тариф КАК Тариф
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) > НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Период
	|				ТОГДА ЕСТЬNULL(НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1))
	|			ИНАЧЕ НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Период
	|		КОНЕЦ КАК Период,
	|		НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.ПлательщикСтраховыхВзносовПФР_ФФОМС КАК ПлательщикСтраховыхВзносовПФР_ФФОМС,
	|		ВЫБОР
	|			КОГДА НЕ НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.ПлательщикСтраховыхВзносовПФР_ФФОМС
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ИПТарифыФиксированныхВзносов.ПустаяСсылка)
	|			ИНАЧЕ НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Тариф
	|		КОНЕЦ КАК Тариф
	|	ИЗ
	|		РегистрСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС КАК НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС
	|	ГДЕ
	|		НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) > НастройкиУчетаСтраховыхВзносов.Период
	|					И ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) < &НачалоПериода
	|				ТОГДА &НачалоПериода
	|			КОГДА ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) > НастройкиУчетаСтраховыхВзносов.Период
	|				ТОГДА ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.Организация.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1))
	|			КОГДА НастройкиУчетаСтраховыхВзносов.Период < &НачалоПериода
	|				ТОГДА &НачалоПериода
	|			ИНАЧЕ НастройкиУчетаСтраховыхВзносов.Период
	|		КОНЕЦ,
	|		НастройкиУчетаСтраховыхВзносов.ПлательщикСтраховыхВзносовПФР_ФФОМС,
	|		ВЫБОР
	|			КОГДА НЕ НастройкиУчетаСтраховыхВзносов.ПлательщикСтраховыхВзносовПФР_ФФОМС
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ИПТарифыФиксированныхВзносов.ПустаяСсылка)
	|			ИНАЧЕ НастройкиУчетаСтраховыхВзносов.Тариф
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК НастройкиУчетаСтраховыхВзносов) КАК Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончания));
	
	ТаблицаНастроекСтраховыхВзносов = Запрос.Выполнить().Выгрузить();
	КоличествоСтрок = ТаблицаНастроекСтраховыхВзносов.Количество();
	НомерСтроки = 0;
	
	РазмерыСтраховыхВзносов = РазмерыСтраховыхВзносов(ДатаОкончания, Организация);
	
	// Рассчитаем тариф по каждому месяцу по периодам действия настроек
	// Например, в настройках ИП с 01.01.2023 г. действует единый тариф, а с 24.06.2023 г. действует тариф для военных пенсионеров
	// В результате обработки нужно получить таблицу действия тарифа по каждому месяцу.
	
	Для Каждого НастройкаСтраховыхВзносов Из ТаблицаНастроекСтраховыхВзносов Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ДатаНачала = НастройкаСтраховыхВзносов.Период;
		НоваяСтрока.Тариф = НастройкаСтраховыхВзносов.Тариф;
		НоваяСтрока.МесячныйРазмер = СуммаМесячногоВзносаПоТарифу(РазмерыСтраховыхВзносов, НастройкаСтраховыхВзносов.Тариф);
		
		НомерСтроки = НомерСтроки + 1;
		МесяцНачалаПериода = Месяц(НастройкаСтраховыхВзносов.Период);
		
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если по ИП указана всего одна настройка, тогда рассчитаем тариф на начало периода до конца месяца
			НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаНачала);
			РассчитатьПоказателиТарифаЗаПериод(НоваяСтрока);
		Иначе
			// Построим таблицу по месяцам действия настройки
			СтрокаСледующегоПериода = ТаблицаНастроекСтраховыхВзносов[НомерСтроки];
			ДополнитьТаблицуМесяцамиИзПериода(Результат, НоваяСтрока, СтрокаСледующегоПериода.Период);
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим последние периоды действия крайней настройки, дополняя недостающие месяцы до даты окончания периода
	Если НастройкаСтраховыхВзносов <> Неопределено И КонецМесяца(НастройкаСтраховыхВзносов.Период) + 1 < ДатаОкончания Тогда
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ДатаНачала = КонецМесяца(НастройкаСтраховыхВзносов.Период) + 1;
		НоваяСтрока.Тариф = НастройкаСтраховыхВзносов.Тариф;
		НоваяСтрока.МесячныйРазмер = СуммаМесячногоВзносаПоТарифу(РазмерыСтраховыхВзносов, НастройкаСтраховыхВзносов.Тариф);
		ДополнитьТаблицуМесяцамиИзПериода(Результат, НоваяСтрока, КонецДня(ДатаОкончания));
	КонецЕсли;
	
	// Скорректируем таблицу с учетом периодов, в которых ИП на НПД платит добровольные взносы
	// добровольные взносы рассчитываются по другому тарифу
	ИнтервалыИПОплачиваетНПД = РегистрыСведений.НастройкиСистемыНалогообложения.ИнтервалыИППрименяетНПД(
		Организация,
		ДатаНачала,
		ДатаОкончания);
	
	МесячныйДобровольныйВзнос = МесячныйДобровольныйВзнос(РазмерыСтраховыхВзносов);
	
	Для Каждого ТекущийИнтервал Из ИнтервалыИПОплачиваетНПД Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Если СтрокаРезультата.МесячныйРазмер = 0 Тогда
				// За период взносы не уплачиваются на ОПС и ОМС
				Продолжить;
			КонецЕсли;
			
			Если ТекущийИнтервал.ДатаНачала <= СтрокаРезультата.ДатаНачала
				И ТекущийИнтервал.ДатаОкончания >= СтрокаРезультата.ДатаОкончания Тогда
				
				// Весь период ИП находился на НПД, пересчитываем тариф на добровольные взносы
				СтрокаРезультата.МесячныйРазмер = МесячныйДобровольныйВзнос;
				РассчитатьПоказателиТарифаЗаПериод(СтрокаРезультата, Истина);
				
			ИначеЕсли ТекущийИнтервал.ДатаНачала >= СтрокаРезультата.ДатаНачала
				И ТекущийИнтервал.ДатаНачала <= СтрокаРезультата.ДатаОкончания Тогда
				
				// В текущем периоде ИП платил взносы по фиксированному тарифу, а затем перешел на НПД
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ДатаНачала = ТекущийИнтервал.ДатаНачала;
				НоваяСтрока.ДатаОкончания = Мин(ТекущийИнтервал.ДатаОкончания, СтрокаРезультата.ДатаОкончания);
				НоваяСтрока.МесячныйРазмер = МесячныйДобровольныйВзнос;
				РассчитатьПоказателиТарифаЗаПериод(НоваяСтрока, Истина);
				// Смещаем период действия фиксированного тарифа от даты начала действия НПД, пересчитываем сумму взноса
				СтрокаРезультата.ДатаОкончания = НачалоДня(НоваяСтрока.ДатаНачала) - 1;
				РассчитатьПоказателиТарифаЗаПериод(СтрокаРезультата);
				
			ИначеЕсли ТекущийИнтервал.ДатаНачала < СтрокаРезультата.ДатаНачала
				И ТекущийИнтервал.ДатаОкончания >= СтрокаРезультата.ДатаНачала
				И ТекущийИнтервал.ДатаОкончания < СтрокаРезультата.ДатаОкончания Тогда
				
				// В текущем периоде ИП находился на НПД, затем перешел на другую систему налогообложения
				// и начал платить взносы по фиксированному тарифу
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ДатаНачала = СтрокаРезультата.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ТекущийИнтервал.ДатаОкончания;
				НоваяСтрока.МесячныйРазмер = МесячныйДобровольныйВзнос;
				РассчитатьПоказателиТарифаЗаПериод(НоваяСтрока, Истина);
				// Смещаем начало периода действия тарифа до даты окончания действия НПД, пересчитываем сумму взноса
				СтрокаРезультата.ДатаНачала = НачалоДня(ТекущийИнтервал.ДатаОкончания) + 1;
				РассчитатьПоказателиТарифаЗаПериод(СтрокаРезультата);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СуммаМесячногоВзносаПоТарифу(РазмерыСтраховыхВзносов, Тариф)
	
	Если Тариф = Перечисления.ИПТарифыФиксированныхВзносов.Единый Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыСтраховыхВзносов, "ЕдиныйТариф", 0) / 12;
	ИначеЕсли Тариф = Перечисления.ИПТарифыФиксированныхВзносов.ВоенныйПенсионер Тогда
		ЕдиныйТариф = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыСтраховыхВзносов, "ЕдиныйТариф", 0);
		Коэффициент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыСтраховыхВзносов, "КоэффициентОплатыФФОМС", 0);
		Возврат Коэффициент * ЕдиныйТариф / 12;
	ИначеЕсли Тариф = Перечисления.ИПТарифыФиксированныхВзносов.УчастникСЭЗнаНТ Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыСтраховыхВзносов, "ПониженныйТариф", 0) / 12;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция МесячныйДобровольныйВзнос(РазмерыСтраховыхВзносов)
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыСтраховыхВзносов, "ПФРДобровольно", 0) / 12;
	
КонецФункции

Процедура РассчитатьПоказателиТарифаЗаПериод(ТекущийРасчет, ДобровольныйВзнос = Ложь)
	
	Интервал = Новый Структура;
	Интервал.Вставить("ДатаНачала", ТекущийРасчет.ДатаНачала);
	Интервал.Вставить("ДатаОкончания", ТекущийРасчет.ДатаОкончания);
	
	ТекущийРасчет.КоличествоДней = ПродолжительностьИнтервала(Интервал);
	ДнейВМесяце = День(КонецМесяца(ТекущийРасчет.ДатаНачала));
	
	Если ДобровольныйВзнос Тогда
		ТекущийРасчет.Сумма = 0;
		ТекущийРасчет.СуммаДобровольногоВзноса = ТекущийРасчет.МесячныйРазмер * ТекущийРасчет.КоличествоДней / ДнейВМесяце;
	Иначе
		ТекущийРасчет.Сумма = ТекущийРасчет.МесячныйРазмер * ТекущийРасчет.КоличествоДней / ДнейВМесяце;
		ТекущийРасчет.СуммаДобровольногоВзноса = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуМесяцамиИзПериода(Результат, СтрокаИсточник, Период)
	
	// Рассчитываем количество полных месяцев между двумя периодами
	Если НачалоМесяца(Период) = НачалоДня(Период) Тогда
		КоличествоДобавляемыхМесяцев = Месяц(Период) - Месяц(СтрокаИсточник.ДатаНачала) - 1;
	Иначе
		КоличествоДобавляемыхМесяцев = Месяц(Период) - Месяц(СтрокаИсточник.ДатаНачала);
	КонецЕсли;
	
	Если КоличествоДобавляемыхМесяцев <= 0 Тогда
		СтрокаИсточник.ДатаОкончания = Период - 1;
		РассчитатьПоказателиТарифаЗаПериод(СтрокаИсточник);
	Иначе
		СтрокаИсточник.ДатаОкончания = КонецМесяца(СтрокаИсточник.ДатаНачала);
		РассчитатьПоказателиТарифаЗаПериод(СтрокаИсточник);
		Для ТекущийМесяц = 1 По КоличествоДобавляемыхМесяцев Цикл
			ДобавляемаяСтрока = Результат.Добавить();
			ДобавляемаяСтрока.ДатаНачала = ДобавитьМесяц(НачалоМесяца(СтрокаИсточник.ДатаНачала), ТекущийМесяц);
			ДобавляемаяСтрока.Тариф = СтрокаИсточник.Тариф;
			ДобавляемаяСтрока.МесячныйРазмер = СтрокаИсточник.МесячныйРазмер;
			Если КоличествоДобавляемыхМесяцев - ТекущийМесяц > 0 Тогда
				ДобавляемаяСтрока.ДатаОкончания = КонецМесяца(ДобавляемаяСтрока.ДатаНачала);
			Иначе
				ДобавляемаяСтрока.ДатаОкончания = Период - 1;
			КонецЕсли;
			РассчитатьПоказателиТарифаЗаПериод(ДобавляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаПериодовУплатыВзносовСДоходов()
	
	ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", ОписаниеТипаДата);
	Результат.Колонки.Добавить("ДатаОкончания", ОписаниеТипаДата);
	
	Возврат Результат;
	
КонецФункции

// Дата, с которой можно применять тариф "Военный пенсионер"
//
// Возвращаемое значение:
//   Дата
//
Функция ДатаНачалаПримененияТарифаВоенныйПенсионер() Экспорт

	Возврат Дата(2023, 6, 24);

КонецФункции

// Уплата взносов с 2024 г. отражается по данным загруженных сведений из личного кабинета ЕНС
// По умолчанию считается, что дата операции - это дата списания взноса с ЕНС
// - единый тариф списывается - в конце года
// - взнос с доходов - 1 июля следующего года
//
Функция СтраховыеВзносыУплаченные2024(ПараметрыРасчета)
	
	Результат = НоваяТаблицаУплаченныеВзносы();
	
	Если УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(
		ПараметрыРасчета.Организация,
		ПараметрыРасчета.КонецПериодаДата) Тогда
		
		// Не нужно отражать уплаченные взносы в расходах
		Возврат Результат;
		
	КонецЕсли;
	
	ВзносыСвышеПредела = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.КонецПериодаДата);
	Запрос.УстановитьПараметр("СчетаУчетаФиксированныеВзносы", ПараметрыРасчета.СчетаУчетаФиксированныеВзносы);
	Запрос.УстановитьПараметр("ВидыПлатежей", ПараметрыРасчета.ВидыПлатежей);
	Запрос.УстановитьПараметр("КонецСтраховогоГода", КонецГода(ПараметрыРасчета.КонецПериодаДата));
	Запрос.УстановитьПараметр("МесяцПлатежаВзносаСДоходов", ПараметрыРасчета.МесяцПлатежаВзносаСДоходов);
	Запрос.УстановитьПараметр("ВзносыСвышеПредела", ВзносыСвышеПредела);
	
	СхемыЗапроса = Новый СхемаЗапроса;
	СхемыЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	Документ.Дата КАК Период,
	|	Документ.Ссылка КАК Регистратор,
	|	Документ.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СведенияОбУплатеНалогов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
	|					И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ) >= &МесяцПлатежаВзносаСДоходов
	|				ИЛИ СведенияОбУплатеНалогов.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
	|					И КОНЕЦПЕРИОДА(Документ.Дата, ДЕНЬ) < &КонецСтраховогоГода
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Документ.Дата, ГОД), ГОД, -1)
	|		КОГДА СведенияОбУплатеНалогов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
	|				И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ) < &МесяцПлатежаВзносаСДоходов
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Документ.Дата, ГОД), ГОД, -2)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Документ.Дата, ГОД)
	|	КОНЕЦ КАК СтраховойПериод,
	|	СведенияОбУплатеНалогов.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СведенияОбУплатеНалогов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
	|			ТОГДА &ВзносыСвышеПредела
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	КОНЕЦ КАК СубконтоДт1,
	|	СведенияОбУплатеНалогов.Сумма КАК Сумма,
	|	Документ.Дата КАК ДатаПринятияЕНП
	|ПОМЕСТИТЬ ВТ_СтраховыеВзносыУплаченные
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов.Сведения КАК СведенияОбУплатеНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОбУплатеНалогов КАК Документ
	|		ПО СведенияОбУплатеНалогов.Ссылка = Документ.Ссылка
	|			И (Документ.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (Документ.Организация = &Организация)
	|			И (Документ.Проведен)
	|			И (СведенияОбУплатеНалогов.СчетУчета В (&СчетаУчетаФиксированныеВзносы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыУплаченные.Регистратор КАК ДокументОплаты,
	|	СтраховыеВзносыУплаченные.Организация КАК Организация,
	|	СтраховыеВзносыУплаченные.СтраховойПериод КАК СтраховойПериод,
	|	СтраховыеВзносыУплаченные.СчетУчета КАК СчетУчета,
	|	СтраховыеВзносыУплаченные.СубконтоДт1 КАК ВидПлатежаВГосБюджет,
	|	СтраховыеВзносыУплаченные.Сумма КАК Сумма,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.НомерРегистратора, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, СтраховыеВзносыУплаченные.Период) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
	|	СтраховыеВзносыУплаченные.ДатаПринятияЕНП КАК ДатаПринятияЕНП
	|ИЗ
	|	ВТ_СтраховыеВзносыУплаченные КАК СтраховыеВзносыУплаченные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО СтраховыеВзносыУплаченные.Организация = РеквизитыДокументовОплаты.Организация
	|			И СтраховыеВзносыУплаченные.Регистратор = РеквизитыДокументовОплаты.Документ
	|ГДЕ
	|	СтраховыеВзносыУплаченные.СубконтоДт1 В(&ВидыПлатежей)");
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.СтраховойПериод) Тогда
		ОтборЗапроса = СхемыЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		ОтборЗапроса.Добавить("СтраховыеВзносыУплаченные.СтраховойПериод Между &НачалоСтраховогоПериода И &КонецСтраховогоПериода");
		Запрос.УстановитьПараметр("НачалоСтраховогоПериода", НачалоГода(ПараметрыРасчета.СтраховойПериод));
		Запрос.УстановитьПараметр("КонецСтраховогоПериода", КонецГода(ПараметрыРасчета.СтраховойПериод));
	КонецЕсли;
	
	Запрос.Текст = СхемыЗапроса.ПолучитьТекстЗапроса();
	СведенияОбУплатеНалогов = Запрос.Выполнить().Выгрузить();
	
	// Если суммы были зарезервированы ранее, то нужно их исключить из оплат за текущий период
	// Для ИП на УСН доходы-расходы или ОСНО можно зарезервировать суммы заранее в счет будущей оплаты.
	// Вычитываем суммы, которые ИП подал к резерву по конкретному сроку оплаты
	
	Для Каждого ТекущаяСтрока Из СведенияОбУплатеНалогов Цикл
		
		СрокОплатыВзноса = УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(
			ТекущаяСтрока.СтраховойПериод,
			ТекущаяСтрока.ВидПлатежаВГосБюджет);
		
		ЗарезервированоПоСроку = ЗарезервированныеСуммыПоСрокуУплаты(
			ТекущаяСтрока.Организация, 
			ТекущаяСтрока.СчетУчета,
			СрокОплатыВзноса);
		
		СуммаОстаток = Макс(ТекущаяСтрока.Сумма - ЗарезервированоПоСроку, 0);
		Если СуммаОстаток > 0 Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Сумма = СуммаОстаток;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// При расчете взносов к оплате учитывается Страховой период - ищем все оплаты, относящиеся к страховому периоду
// При начислении взносов учитывается период начисления с Начала периода по Конец периода - ищем все оплаты за период начисления
//
Функция СтраховыеВзносыУплаченные2023(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Для Каждого ТекущийПараметр Из ПараметрыРасчета Цикл
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
	КонецЦикла;
	
	ТекстОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Период КАК Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
		|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
		|	КОНЕЦ КАК СтраховойПериод,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПринятияЕНП
		|ПОМЕСТИТЬ ВТ_СтраховыеВзносыУплаченные
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_Добр_Орг), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП)),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			СчетКт В (&СчетаУплаты),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт");
	
	Если Не ЗначениеЗаполнено(ПараметрыРасчета.ВидПлатежаВГосБюджет) Или ПараметрыРасчета.ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		ТекстыЗапроса.Добавить(ТекстОбъединитьВсе);
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Период КАК Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
		|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
		|	КОНЕЦ КАК СтраховойПериод,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПринятияЕНП
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			СчетКт В (&СчетаУплаты),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстОбъединитьВсе);
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Период КАК Период,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор КАК Регистратор,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор) = ТИП(Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности)
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
		|							И ГОД(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) <= ГОД(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Период)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ВЫРАЗИТЬ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор КАК Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности).Дата, ГОД, -1)
		|					ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор КАК Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности).Дата
		|				КОНЕЦ
		|		КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СчетУчета В (&СчетаУчетаФиксированныеВзносы)
		|				И ТИПЗНАЧЕНИЯ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор) = ТИП(Документ.РегламентнаяОперация)
		|				И &ПлательщикЕНП
		|			ТОГДА ВЫБОР
		|					КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты, ДЕНЬ) = &СрокУплатыВзносовЗаПрошлыйПериод
		|							ИЛИ МЕСЯЦ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) = &МесяцПлатежаВзносаСДоходов
		|								И ГОД(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) = ГОД(&НачалоПериода)
		|						ТОГДА &НалоговыйПериодПрошлыйГод
		|					КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты, ДЕНЬ) = &СрокУплаты
		|							ИЛИ МЕСЯЦ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) = &МесяцПлатежаВзносаСДоходов
		|								И ГОД(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) - 1 = ГОД(&НачалоПериода)
		|						ТОГДА &НачалоПериода
		|					КОГДА МЕСЯЦ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) = &МесяцПлатежаВзносаСДоходов
		|							И ГОД(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) < &ГодПереходаНаЕНС
		|						ТОГДА ДОБАВИТЬКДАТЕ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты, ГОД, -1)
		|					ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты
		|				КОНЕЦ
		|		ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты
		|	КОНЕЦ КАК СрокУплаты,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
		|				И &ПлательщикЕНП
		|				И МЕСЯЦ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты) = &МесяцПлатежаВзносаСДоходов
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
		|	КОНЕЦ КАК СубконтоДт1,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход КАК СуммаРасход,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты КАК ДатаПринятияЕНП
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетУчета В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_Добр_Орг), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП))
		|				И Организация = &Организация
		|				И ГоловнаяОрганизация = &Организация
		|				И ВЫБОР
		|					КОГДА СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП)
		|							И &ПлательщикЕНП
		|							И МЕСЯЦ(СрокУплаты) = &МесяцПлатежаВзносаСДоходов
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
		|				КОНЕЦ В (&ВидыПлатежей)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты");
	ТекстыЗапроса.Добавить("
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Регистратор");
	ТекстыЗапроса.Добавить(ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	СтраховыеВзносыУплаченные.Регистратор КАК ДокументОплаты,
		|	СтраховыеВзносыУплаченные.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносыУплаченные.СтраховойПериод, ГОД) КАК СтраховойПериод,
		|	СтраховыеВзносыУплаченные.СчетДт КАК СчетУчета,
		|	СтраховыеВзносыУплаченные.СубконтоДт1 КАК ВидПлатежаВГосБюджет,
		|	СтраховыеВзносыУплаченные.СуммаОборот КАК Сумма,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.НомерРегистратора, """") КАК НомерДокументаОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, СтраховыеВзносыУплаченные.Период) КАК ДатаДокументаОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.Номер, """") КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
		|	СтраховыеВзносыУплаченные.ДатаПринятияЕНП КАК ДатаПринятияЕНП
		|ИЗ
		|	ВТ_СтраховыеВзносыУплаченные КАК СтраховыеВзносыУплаченные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО СтраховыеВзносыУплаченные.Организация = РеквизитыДокументовОплаты.Организация
		|			И СтраховыеВзносыУплаченные.Регистратор = РеквизитыДокументовОплаты.Документ");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса);
	
	СтраховыеВзносыУплаченные = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.СтраховойПериод) Тогда
		
		// Проверка страхового периода
		Индекс = СтраховыеВзносыУплаченные.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ТекущаяСтрока = СтраховыеВзносыУплаченные[Индекс];
			
			// Считаем, что налоговый период равен дате заявления, поэтому проверяем тип документа оплаты
			Если ТипЗнч(ТекущаяСтрока.ДокументОплаты) <> Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
				
				// Страховой период для взносов свыше предела подбирается по дате платежа, что не верно. 
				// Поэтому проверяем вид взноса, месяц платежа и год срока уплаты. Если это взнос ПФР, месяц уплаты должен
				// совпадать с месяцем уплаты вноса свыше предела, а год уплаты равен году страхового периода, то считаем,
				// что страховой период - это прошлый год
				
				Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП
					И Месяц(ТекущаяСтрока.ДатаПринятияЕНП) = ПараметрыРасчета.МесяцПлатежаВзносаСДоходов
					И Год(ТекущаяСтрока.ДатаПринятияЕНП) = Год(ТекущаяСтрока.СтраховойПериод) Тогда
						ТекущаяСтрока.СтраховойПериод = НачалоГода(ДобавитьМесяц(ТекущаяСтрока.СтраховойПериод, -12));
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтраховойПериод)
				И НачалоГода(ТекущаяСтрока.СтраховойПериод) <> НачалоГода(ПараметрыРасчета.СтраховойПериод) Тогда
				
				СтраховыеВзносыУплаченные.Удалить(ТекущаяСтрока);
				
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция ПараметрыРасчетаУплаченныхВзносов(Организация, НачалоПериода, КонецПериода, СтраховойПериод = Неопределено, ВидПлатежаВГосБюджет = Неопределено, Регистратор = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("НачалоПериода", НачалоПериода);
	Результат.Вставить("ВидПлатежаВГосБюджет", ВидПлатежаВГосБюджет);
	Результат.Вставить("СтраховойПериод", СтраховойПериод);
	
	Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Тогда
		ВидыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПлатежаВГосБюджет);
		Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
			// Срок платежа по взносу свыше предела 01.07 следующего за налоговым периодом года, но так как закрытие периода
			// происходит на конец месяца сдвинем период окончания на конец месяца
			КонецПериода = КонецМесяца(КонецПериода);
		КонецЕсли;
	Иначе
		ВидыПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	КонецЕсли;
	
	СчетаУплаты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ЦифровойРубль));
	
	// Определим месяц уплаты взносов с доходов свыше предела
	ПорядокУплатыВзносаСДоходов = УчетСтраховыхВзносовИППовтИсп.ПорядокУплатыВзноса(
		Организация,
		КонецГода(НачалоПериода),
		Истина);
	
	МесяцПлатежаВзносаСДоходов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПорядокУплатыВзносаСДоходов,
		"Срок",
		КонецПериода);
	Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовСвышеПредела(МесяцПлатежаВзносаСДоходов);
	МесяцПлатежаВзносаСДоходов = Месяц(МесяцПлатежаВзносаСДоходов);
	
	// Если срок уплаты страховых взносов выпадает на выходной день,
	// то срок переносится на первый рабочий день следующего года.
	// Определим срок уплаты страховых взносов за прошлый период,
	// чтобы корректно определить страховой период
	КонецПрошлогоГода = НачалоГода(КонецПериода) - 1;
	Если УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, КонецПрошлогоГода, Ложь) Тогда
		// С введением ЕНС для упрощенного зачета взносов срок по задачам не смещается на ближайший рабочий день
		ПравилоПрошлыйГод = УчетСтраховыхВзносовИППовтИсп.ПорядокУплатыВзноса(Организация, КонецПрошлогоГода);
		СрокУплатыВзносовЗаПрошлыйПериод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПравилоПрошлыйГод,
			"Срок",
			УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(КонецПрошлогоГода));
		НалоговыйПериодПрошлыйГод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПравилоПрошлыйГод,
			"ПериодСобытия",
			КонецПрошлогоГода);
	Иначе
		// Срок по уплате фиксированных взносов до введения ЕНС в задачах генерировался до конца года
		// и смещался на последний рабочий день отчетного периода,
		// но при уплате на ЕНС отражается по фактическому сроку оплаты с учетом переноса на ближайший рабочий день
		СрокУплатыВзносовЗаПрошлыйПериод = УчетСтраховыхВзносовИППовтИсп.СрокОплатыПоВидуПлатежа(КонецПрошлогоГода);
		НалоговыйПериодПрошлыйГод = КонецПрошлогоГода;
	КонецЕсли;
	
	СчетаУчетаФиксированныеВзносы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаФиксированныеВзносы,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф_ИП));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаФиксированныеВзносы,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаФиксированныеВзносы,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод));
	
	Если СтраховойПериод = Неопределено Тогда
		ДатаРасчета = КонецПериода;
	Иначе
		ДатаРасчета = Макс(СтраховойПериод, КонецПериода);
	КонецЕсли;

	ПлательщикЕНП = ДатаРасчета >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();

	Результат.Вставить("ВидыПлатежей", ВидыПлатежей);
	Результат.Вставить("СчетаУплаты", СчетаУплаты);
	Результат.Вставить("ПлательщикЕНП", ПлательщикЕНП);
	Результат.Вставить("СрокУплаты", КонецПериода);
	Результат.Вставить("МесяцПлатежаВзносаСДоходов", МесяцПлатежаВзносаСДоходов);
	Результат.Вставить("СрокУплатыВзносовЗаПрошлыйПериод", НачалоДня(СрокУплатыВзносовЗаПрошлыйПериод));
	Результат.Вставить("НалоговыйПериодПрошлыйГод", НалоговыйПериодПрошлыйГод);
	Результат.Вставить("СчетаУчетаФиксированныеВзносы", СчетаУчетаФиксированныеВзносы);
	Результат.Вставить("ГодПереходаНаЕНС", Год(НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж()));
	
	Если Регистратор = Неопределено Тогда
		Если КонецПериода < НачалоПериода Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Вставить("КонецПериода", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
		Результат.Вставить("КонецПериодаДата", КонецДня(КонецПериода));
	Иначе
		МоментВремени = Регистратор.МоментВремени();
		Если МоментВремени.Дата < НачалоПериода Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Вставить("КонецПериода", Новый Граница(МоментВремени, ВидГраницы.Исключая));
		Результат.Вставить("КонецПериодаДата", МоментВремени.Дата - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗарезервированныеСуммыПоСрокуУплаты(Организация, СчетУчета, СрокОплатыВзноса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Сумма), 0) КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Налоги КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Ссылка = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Проведен)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Организация = &Организация)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.СчетУчета = &СчетУчета)
	|			И (НАЧАЛОПЕРИОДА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.СрокУплаты, ДЕНЬ) = &СрокУплаты)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("СрокУплаты", НачалоДня(СрокОплатыВзноса));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Сумма;
	КонецЕсли;
	
КонецФункции

Функция НоваяТаблицаУплаченныеВзносы()
	
	ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДокументОплаты");
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("СтраховойПериод", ОписаниеТипаДата);
	Результат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("ВидПлатежаВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	Результат.Колонки.Добавить("ДатаДокументаОплаты", ОписаниеТипаДата);
	Результат.Колонки.Добавить("НомерВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Результат.Колонки.Добавить("ДатаВходящегоДокумента", ОписаниеТипаДата);
	Результат.Колонки.Добавить("ДатаПринятияЕНП", ОписаниеТипаДата);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти