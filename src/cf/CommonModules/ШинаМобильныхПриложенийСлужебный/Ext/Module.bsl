#Область ПрограммныйИнтерфейс

// Сохраняет данные подключения в безопасное хранилище.
//
// Параметры:
//  Владелец - СправочникСсылка, Строка - ссылка на объект ИБ, представляющий
//                                        объект-владелец сохраняемого пароля или строка.
//  Данные - Структура - сохраняемые данные.
//
Процедура СохранитьДанныеПодключения(Владелец, Данные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из Данные Цикл
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			Владелец,
			КлючИЗначение.Значение,
			КлючИЗначение.Ключ);
			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращет менеджер для приложения из перечня подключенных приложений.
// См. область "Описание" модуля ШинаМобильныхПриложений.
//
// Параметры:
//  Приложение - имя приложения в шине.
//  МенеджерыПриложений - Массив - перечень подключенных приложений (менеджеров приложений).
//                                 Элементы массива - общий модуль или объект метаданных, имеющий модуль менеджера.
//
// Возвращаемое значение:
//  Объект метаданных.
//
Функция МенеджерПриложения(Приложение, МенеджерыПриложений) Экспорт
	
	Для Каждого МенеджерПриложения Из МенеджерыПриложений Цикл
		Если МенеджерПриложения.ИмяМобильногоПриложения() = Приложение Тогда
			Возврат МенеджерПриложения;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Неизвестный код приложения: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
КонецФункции

// Возвращает идентификатор данных типа "Данные шины мобильных приложений" Менеджера сервиса.
//
// Возвращаемое значение:
//  Строка.
//
Функция ИдентификаторДанныхМенеджераСервиса() Экспорт
	
	Возврат "MobileBus";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяСобытияЖурналаРегистрации(Действие = "", Приложение = "") Экспорт
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'Шина мобильных приложений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
		Если ЗначениеЗаполнено(Приложение) Тогда
			ЭлементыИмени.Добавить(Приложение);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

Процедура ЗаписатьОшибкуКодСостояния(ОтветСервиса, Приложение, Действие) Экспорт
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		,
		ОтветСервиса.КодСостояния,
		ОтветСервиса.Текст);
	
КонецПроцедуры

Функция АутентификацияИТС() Экспорт
	
	ЗаголовкиАутентификации = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
		ИдентификаторДанныхМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(ДанныеАутентификации.КодОшибки) Тогда
		
		ИмяСобытия = ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Аутентификация на портале поддержки'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДанныеАутентификации.КодОшибки,
			ДанныеАутентификации.ИнформацияОбОшибке);
		
		Возврат ЗаголовкиАутентификации;
		
	КонецЕсли;
	
	ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификацииИТС(), ДанныеАутентификации.Тикет);
	
	Возврат ЗаголовкиАутентификации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяЗаголовкаАутентификацииИТС()
	
	Возврат "auth-login-1c";
	
КонецФункции

#КонецОбласти