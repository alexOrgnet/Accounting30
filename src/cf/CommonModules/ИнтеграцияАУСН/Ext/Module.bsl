#Область ПрограммныйИнтерфейс

// Запускает фоновое выполнение метода взаимодействия с сервисом интеграции.
//
// Параметры:
//  ПараметрыМетода - Структура: см. ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия
//  ИдентификаторФормы - УникальныйИдентификатор, Неопределено - идентификатор формы, откуда вызвана функция.
// 
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьВФоне
// 
Функция ВыполнитьВФоне(ПараметрыМетода, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = 
		СтрШаблон(НСтр("ru = 'Интеграция АУСН: выполнение метода %1'"), ПараметрыМетода.МетодВзаимодействия);
		
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияАУСН.ВыполнитьМетодВзаимодействияВФоне",
		ПараметрыМетода, 
		ПараметрыВыполнения);
	
	//@skip-check constructor-function-return-section
	Возврат Результат;
	
КонецФункции

// Возвращает список методов взаимодействия с сервисом.
//
// Возвращаемое значение:
//  Структура - где ключ - имя метода, значение - Структура: см. НовыйОписаниеМетода
//
Функция МетодыВзаимодействия() Экспорт
	
	ВсеМетоды = Новый Структура;
	
	ИменаМетодов = ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия();
	
	// API для работы с документами
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.СоздатьДокумент,
		НСтр("ru = 'Создать документ'"),
		"POST",
		"/documents/");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОбновитьДокумент,
		НСтр("ru = 'Обновить документ'"),
		"PUT",
		"/documents/[ueid]");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.УдалитьДокумент,
		НСтр("ru = 'Удалить документ'"),
		"DELETE",
		"/documents/[ueid]");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.СтатусДокумента,
		НСтр("ru = 'Статус документа'"),
		"GET",
		"/documents/[ueid]/status");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОбновитьСтатусДокумента,
		НСтр("ru = 'Обновить статуса документа'"),
		"PUT",
		"/documents/[ueid]/status");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОбновитьСтатусыДокументов,
		НСтр("ru = 'Обновить статус у набора документов'"),
		"PUT",
		"/documents/batch/statuses");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.НайтиДокументы,
		НСтр("ru = 'Поиск документов'"),
		"POST",
		"/documents/search");
	
	// API для работы с заявками на подключение к сервису
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.НайтиЗаявку,
		НСтр("ru = 'Поиск заявки на подключение'"),
		"POST",
		"/connections/requests/search");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ПодтвердитьЗаявку,
		НСтр("ru = 'Подтверждение заявки на подключение'"),
		"PUT",
		"/connections/requests/[requestUeid]/accept");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОтклонитьЗаявку,
		НСтр("ru = 'Отклонение заявки на подключение'"),
		"PUT",
		"/connections/requests/[requestUeid]/decline");
	
	// API для работы с информацией банков, подключенных к системе
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.СписокБанков,
		НСтр("ru = 'Список банков, подключенных к системе'"),
		"GET",
		"/banks/");
	
	// API для работы с подключениями к сервису
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОтключитьВсе,
		НСтр("ru = 'Отключение учетной системы'"),
		"DELETE",
		"/connections/");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОтключитьОрганизацию,
		НСтр("ru = 'Отключение организации'"),
		"DELETE",
		"/connections/inn/[inn]");
	
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.ОтключитьБанк,
		НСтр("ru = 'Отключение банка'"),
		"DELETE",
		"/connections/inn/[inn]/banks/[bankUeid]");
		
	ДобавитьОписаниеМетода(ВсеМетоды,
		ИменаМетодов.СоздатьТокенАвторизации,
		НСтр("ru = 'Создание токена авторизации'"),
		"POST",
		"/auth/token/");
		
	Возврат ВсеМетоды;
	
КонецФункции

// Возвращает признак наличия подключенного сервиса АУСН
//
// Возвращаемое значение:
//  Булево - признак того, что в базе есть организация, использующая систему налогообложения АУСН и
//  с настроенной интеграцией с сервисом банка
//
Функция НастроенОбменССервисомАУСН() Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользуетсяАУСН") И 
		РегистрыСведений.СостоянияИнтеграцииАУСН.СервисПодключен();
		
	Возврат Результат;
	
КонецФункции

// Получает новые документы из сервиса АУСН, выгружает в сервис документы отмеченные для выгрузки. Если
// необходимо обновляет статусы документов.
//
// Параметры:
//  Адрес - Строка, Неопределено - Адрес временного хранилища, в которое помещается таблица с описанием ошибок,
//          возникших при выполнении обмена, если адрес заполнен
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатОбменаССервисом
//
Функция ВыполнитьОбменССервисом(Адрес = Неопределено) Экспорт
	
	РезультатОбмена = НовыйРезультатОбменаССервисом();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НастроенОбменССервисомАУСН() Тогда
		Возврат РезультатОбмена;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаблокированныеДанные = ЗаблокированныеДанныеДляВыполненияОбмена();
	Если ЗаблокированныеДанные = Неопределено Тогда
		Возврат РезультатОбмена;
	КонецЕсли;
	
	ПроверитьНеобходимостьПовторногоЧтенияДокументов(ЗаблокированныеДанные.КлючиСИдентификаторами);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОшибок", НовыйОписаниеОшибок());
	ДополнительныеПараметры.Вставить("ПолучившиеОтветСервиса", НовыйКлючиСостоянияОбмена());
	ДополнительныеПараметры.Вставить("ОписаниеОшибокОтправки", НовыйОписаниеОшибокОтправки());
	ДополнительныеПараметры.Вставить("ОтправленныеДанные", НовыйОписаниеОтправленныхДанных());
	
	Для Каждого Ключ Из ЗаблокированныеДанные.КлючиСИдентификаторами Цикл
		
		ПолучитьНовыеДокументыИзСервиса(Ключ.Организация, Ключ.ИдентификаторБанка, ДополнительныеПараметры);
	
	КонецЦикла;
	
	ПолучившиеОтветСервиса = ДополнительныеПараметры.ПолучившиеОтветСервиса;
	Если ЗначениеЗаполнено(ПолучившиеОтветСервиса) Тогда
		ОтметитьОтсутствиеБлокирующихОшибок(ПолучившиеОтветСервиса);
	КонецЕсли;
	
	ИзменитьСтатусДокументов(
		Перечисления.СтатусыДокументовАУСН.ОтправленоПользователю,
		Перечисления.СтатусыДокументовАУСН.ДоставленоПользователю,
		ДополнительныеПараметры);
	
	НовыйДокумент = РегистрыСведений.ДокументыАУСН.НайтиДокументы(
		Перечисления.СтатусыДокументовАУСН.ДоставленоПользователю);
	
	СоздатьВременныйКаталог = Истина;
	
	Пока НовыйДокумент.Следующий() Цикл

		Если СоздатьВременныйКаталог Тогда
			
			КаталогРазбора = ФайловаяСистема.СоздатьВременныйКаталог("zip");
			СоздатьВременныйКаталог = Ложь;
			
		КонецЕсли;
		
		РазобратьДокумент(НовыйДокумент, КаталогРазбора, ДополнительныеПараметры);
		
		Попытка
			// Очищаем только содержимое каталога.
			УдалитьФайлы(КаталогРазбора, "*");
		Исключение
			// Поскольку с очиской каталога возникла проблема, то создадим новый пустой каталог.
			СоздатьВременныйКаталог = Истина;
		КонецПопытки;
		
		Если СоздатьВременныйКаталог Тогда
			// Снова возникнет исключение, но теперь оно будет сопровождаеться стандартной записью в журнал регистрации от подсистемы БСП.
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогРазбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СоздатьВременныйКаталог Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(КаталогРазбора);
	КонецЕсли;
	
	Выписки = Неопределено;
	Если ДополнительныеПараметры.Свойство("БанковскиеВыписки", Выписки) Тогда
		РаспровестиДокументыНеИзСервисаАУСН(Выписки);
	КонецЕсли;
	
	ВыгрузитьДанныеОДокументахСОшибками(ДополнительныеПараметры.ОписаниеОшибок);
	
	ИзменитьСтатусДокументов(
		Перечисления.СтатусыДокументовАУСН.ДоставленоПользователю,
		Перечисления.СтатусыДокументовАУСН.ОбработаноПользователем,
		ДополнительныеПараметры);
		
	ОтправитьРазметкуВБанк(ДополнительныеПараметры);
	
	ОтправитьРасчетыНДФЛАУСНВБанк(ДополнительныеПараметры.ОписаниеОшибокОтправки);
	
	ДокументКОтправке = РегистрыСведений.ДокументыАУСН.НайтиДокументы(
		Перечисления.СтатусыДокументовАУСН.ОжидаетОтправкиВБанк);
	
	Пока ДокументКОтправке.Следующий() Цикл
		ОтправитьДокументВБанк(ДокументКОтправке, ДополнительныеПараметры.ОтправленныеДанные);
	КонецЦикла;
	
	ЗаписатьСостояниеОбмена(ДополнительныеПараметры);
	
	Для Каждого КлючЗаписи Из ЗаблокированныеДанные.КлючиСостоянийИнтеграции Цикл
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	КонецЦикла;
	
	РезультатОбмена.ЗагруженыНовыеВыписки = ЗначениеЗаполнено(Выписки);
	Если ЗначениеЗаполнено(Адрес) Тогда
		РезультатОбмена.ОшибкиОтправки = ПоместитьВоВременноеХранилище(
			ДополнительныеПараметры.ОписаниеОшибокОтправки, Адрес);
	КонецЕсли;
	
	Возврат РезультатОбмена;
	
КонецФункции

// Выполняет расшифровку данных поля DATA из полученного документа из сервиса АУСН
//
// Параметры:
//  Документ - ВыборкаИзРезультатаЗапроса - выборка из регистра сведений ДокументыАУСН.
//  КаталогРазбора - Строка - временный каталог для хранения файлов перед обработкой.
//  ДополнительныеПараметры - Структура - контекст выполнения фонового задания по обмену с сервисом АУСН.
//                          - Неопределено
// 
// Возвращаемое значение:
//  Структура - см. НовыеПараметрыРасшифровкиДанныхДокумента()
//  Неопределено - в случае некорректного значения поля Данные
//
Функция РасшифроватьДанныеДокумента(Документ, КаталогРазбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Ошибки = НовыйОписаниеОшибок();
	Иначе
		Ошибки = ДополнительныеПараметры.ОписаниеОшибок;
	КонецЕсли;
	
	Данные = Документ.Данные.Получить();
	Если ТипЗнч(Данные) <> Тип("Строка") Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Неверный тип данных в документе %1. Ожидаемый тип данных: Строка'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Документ.Идентификатор);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные = Base64Значение(Данные);
		Данные = "";
		Архиватор = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
		Архиватор.ИзвлечьВсе(КаталогРазбора);
		ДвоичныеДанные = Неопределено;
		Архиватор.Закрыть();
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка чтения zip-файла из документа %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Документ.Идентификатор);
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаМанифеста = ИмяФайлаОписанияАрхиваСДаннымиДокумента();
	
	ФайлОписания = НайтиФайлы(КаталогРазбора, ИмяФайлаМанифеста, Истина);
	Если ФайлОписания.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не найден манифест файла для документа %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Документ.Идентификатор);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеТекста(ФайлОписания[0].ПолноеИмя, КодировкаТекста.UTF8);
		ДанныеМанифеста = ЗначениеИзJSON(ЧтениеJSON.Прочитать(), Ложь, СвойстваТипаДата());
		ЧтениеJSON.Закрыть();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось прочитать манифест в документе %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), Документ.Идентификатор);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	КлючиМанифеста = КлючиДанныхФайлаОписанияАрхиваСДаннымиДокумента();
	
	Если Не ДанныеМанифеста.Свойство(КлючиМанифеста.ВерсияПротокола) Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В манифесте документа %1 не указана версия протокола обмена'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Документ.Идентификатор);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяФабрикаXDTO = ФабрикаПротоколаОбмена(ДанныеМанифеста[КлючиМанифеста.ВерсияПротокола]);
	Если НоваяФабрикаXDTO = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для версии протокола обмена № %1 не найдена схема данных .XSD'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеМанифеста[КлючиМанифеста.ВерсияПротокола]);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = НовыеПараметрыРасшифровкиДанныхДокумента();
	
	ИмяФайлаЗапроса = Неопределено;
	Если ДанныеМанифеста.Свойство(КлючиМанифеста.ФайлЗапроса, ИмяФайлаЗапроса) И ЗначениеЗаполнено(ИмяФайлаЗапроса) Тогда
		Попытка
			Результат.Запрос = ПолучитьДанныеФайлаXML(НоваяФабрикаXDTO, КаталогРазбора, ИмяФайлаЗапроса, Ложь);
		Исключение
			КраткийТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось прочитать данные в документе %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), Документ.Идентификатор);
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибкуВЖурналРегистрации(КраткийТекстОшибки, ПодробныйТекстОшибки);
			ТекстОшибки = Новый Массив;
			ТекстОшибки.Добавить(КраткийТекстОшибки);
			ТекстОшибки.Добавить(ПодробныйТекстОшибки);
			ДобавитьОшибку(Ошибки, СтрСоединить(ТекстОшибки, Символы.ПС), Документ, Ложь);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ИмяФайлаОтвета = Неопределено;
	Если ДанныеМанифеста.Свойство(КлючиМанифеста.ФайлОтвета, ИмяФайлаОтвета) И ЗначениеЗаполнено(ИмяФайлаОтвета) Тогда
		Попытка
			Результат.Ответ = ПолучитьДанныеФайлаXML(НоваяФабрикаXDTO, КаталогРазбора, ИмяФайлаОтвета, Истина);
		Исключение
			КраткийТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось прочитать данные в документе %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), Документ.Идентификатор);
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьОшибкуВЖурналРегистрации(КраткийТекстОшибки, ПодробныйТекстОшибки);
			ТекстОшибки = Новый Массив;
			ТекстОшибки.Добавить(КраткийТекстОшибки);
			ТекстОшибки.Добавить(ПодробныйТекстОшибки);
			ДобавитьОшибку(Ошибки, СтрСоединить(ТекстОшибки, Символы.ПС), Документ, Ложь);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Результат.Фабрика = НоваяФабрикаXDTO;
	
	Возврат Результат;
	
КонецФункции

// Возвращает новые настройки подключения к сервису
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - подключаемая организация
//  БанкиСервиса - ТаблицаЗначений: см. РегистрыСведений.БанкиАУСН.НовыйПодключенныеБанки()
// 
// Возвращаемое значение:
//  Структура - настройки подключения:
//     * Организация - СправочникСсылка.Организации - подключаемая организация
//     * Банк - СправочникСсылка.КлассификаторБанков - банк, с которым можно выполнить настройку
//     * СостояниеИнтеграции - ПеречислениеСсылка.СостоянияИнтеграцииАУСН - текущее состояние интеграции с банком
//
Функция НовыеНастройкиПодключения(Организация, БанкиСервиса) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Организация", Организация);
	РезультатПоиска.Вставить("Банк", Справочники.КлассификаторБанков.ПустаяСсылка());
	РезультатПоиска.Вставить("СостояниеИнтеграции", Перечисления.СостоянияИнтеграцииАУСН.ПустаяСсылка()); 
	
	// Ищем первый банк с ошибкой подключения, либо один из неподключенных банков.
	// Неподключенный банк основного счета при этом имеет приоритет.
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(БанкиСервиса) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ВсеСостоянияИнтеграции = РегистрыСведений.СостоянияИнтеграцииАУСН.ВсеСостоянияИнтеграции(Организация);
	
	СведенияОбОрганизации = СведенияОбОрганизации(
		Организация, НачалоМесяца(ТекущаяДатаСеанса()), КонецМесяца(ТекущаяДатаСеанса()));
	
	Для Каждого СтрокаТаблицы Из БанкиСервиса Цикл
		Если СведенияОбОрганизации.БанкиОрганизации.Найти(СтрокаТаблицы.Банк) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СостояниеИнтеграции = ВсеСостоянияИнтеграции.Получить(СтрокаТаблицы.Банк);
		Если СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Ошибка Тогда
			РезультатПоиска.Банк = СтрокаТаблицы.Банк;
			РезультатПоиска.СостояниеИнтеграции = СостояниеИнтеграции;
			Прервать;
		ИначеЕсли СостояниеИнтеграции <> Перечисления.СостоянияИнтеграцииАУСН.Подключено Тогда
			Если Не ЗначениеЗаполнено(РезультатПоиска.Банк)
				Или СтрокаТаблицы.Банк = СведенияОбОрганизации.БанкОсновногоСчета Тогда
				РезультатПоиска.Банк = СтрокаТаблицы.Банк;
				РезультатПоиска.СостояниеИнтеграции = СостояниеИнтеграции;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Определяет по данным ранее загруженных документов АУСН наиболее актуальную сумму задолженности на ЕНС
// (по платежам, срок которых истек).
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - см. НовыйДанныеЗадолженности, данные о задолженности, в том числе об ее отсутствии
//  Неопределено - нет данных, позволяющих сказать, есть задолженность или нет
//
Функция ДанныеЗадолженностиЕНС(Организация) Экспорт
	
	ДанныеСервиса = РегистрыСведений.ДокументыАУСН.АктуальныйОтветСервиса(
		Перечисления.ТипыДокументовАУСН.Задолженность,
		Организация);
		
	Если ДанныеСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗадолженности = НовыйДанныеЗадолженности();
	
	СодержимоеДанных = ДанныеСервиса.Содержимое;
	Если СодержимоеДанных.Свойства().Получить("ENSBalanceError") <> Неопределено
		И СодержимоеДанных.ENSBalanceError.Количество() > 0 Тогда
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		ДанныеСервиса.Фабрика.ЗаписатьXML(Запись, ДанныеСервиса.Содержимое, "Result");
		ДанныеЗадолженности.Ошибки = Запись.Закрыть();
	ИначеЕсли СодержимоеДанных.ENSBalance.Количество() = 0 Тогда
		// Пояснения к протоколу содержат текст:
		// "Если данных по налогоплательщику нет (сальдо), то в ответе в структуре
		// ENSBalance[] данный налогоплательщик не вернется."
		ДанныеЗадолженности.Дата = МестноеВремя(ДанныеСервиса.Дата);
	Иначе
		Попытка
			// Используем Попытка вместо детального анализа соответствия объекта текстовым пояснениям,
			// в связи с тем, что информация об ошибке не будет интересна пользователю,
			// а синтаксически удобных средств такого анализа нет - применение имеющихся в платформе
			// сделало бы код нечитаемым.
			ДанныеЛК = ДанныеСервиса.Содержимое.ENSBalance[0].LkEns;
			Если ДанныеЛК = Неопределено Тогда
				// Такой ответ формально соответствует схеме.
				// Считаем, текст в протоколе про "данных нет" относится и к этому ответу тоже.
				ДанныеЗадолженности.Дата = МестноеВремя(ДанныеСервиса.Дата);
			Иначе
				// из пояснений к протоколу: "Отдается только когда отрицательное. В остальных случаях не передается"
				ДанныеЗадолженности.Сумма = - Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип.ПривестиЗначение(
					ДанныеЛК.SaldoENS);
				ДанныеЗадолженности.Дата  = ДанныеЛК.DateChange;
			КонецЕсли;
		Исключение
			// Ответ соответствует схеме, но не соответствует текстовым пояснениям
			ЗаписатьОшибкуВЖурналРегистрации(
				НСтр("ru = 'Неверный состав сведений о сальдо ЕНС (GetENSBalanceResponse)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДанныеЗадолженности;
	
КонецФункции

// Определяет по данным ранее загруженных документов АУСН наиболее актуальные платежные реквизиты ЕНС.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  см. НовыйРеквизитыЕНС
//
Функция ПлатежныеРеквизитыЕНС(Организация) Экспорт
	
	ДанныеСервиса = РегистрыСведений.ДокументыАУСН.АктуальныйОтветСервиса(
		Перечисления.ТипыДокументовАУСН.ПлатежныеРеквизиты,
		Организация);
		
	Если ДанныеСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = НовыйРеквизитыЕНС();
	
	Если ДанныеСервиса.Содержимое.Свойства().Получить("ENSRequisiteError") <> Неопределено
		И ЗначениеЗаполнено(ДанныеСервиса.Содержимое.ENSRequisiteError) Тогда
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		ДанныеСервиса.Фабрика.ЗаписатьXML(Запись, ДанныеСервиса.Содержимое, "Result");
		Реквизиты.Ошибки = Запись.Закрыть();
		Возврат Реквизиты;
	КонецЕсли;
	
	Наборы = ДанныеСервиса.Содержимое.ENSRequisite;
	Если Наборы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значения = Наборы[0];
	
	Для Каждого ОписаниеРеквизита Из СловарьПлатежныхРеквизитовЕНС() Цикл
		
		ИсточникДанных = ОписаниеРеквизита.Значение;
		Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты[ОписаниеРеквизита.Ключ] = Значения[ИсточникДанных];
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Конструктор коллекции, содержашей платежные реквизиты ЕНС.
// 
// Возвращаемое значение:
//  Структура - конструируемая коллекция.
//   * Ключ - см. СловарьПлатежныхРеквизитовЕНС
//   * Значение - значение по умолчанию, тип которого определеются одноименным реквизитом документа ПлатежноеПоручение.
//                Для отсутствующих в документе - Строка.
//
Функция НовыйРеквизитыЕНС() Экспорт
	
	Реквизиты = Новый Структура;
	
	ПоляПлатежногоПоручения = Метаданные.Документы.ПлатежноеПоручение.Реквизиты;
	Для Каждого ОписаниеРеквизита Из СловарьПлатежныхРеквизитовЕНС() Цикл
		
		ПолеПлатежногоПоручения = ПоляПлатежногоПоручения.Найти(ОписаниеРеквизита.Ключ);
		Если ПолеПлатежногоПоручения = Неопределено Тогда
			ЗначениеПоУмолчанию = "";
		ИначеЕсли ЗначениеЗаполнено(ПолеПлатежногоПоручения.ЗначениеЗаполнения) Тогда
			ЗначениеПоУмолчанию = ПолеПлатежногоПоручения.ЗначениеЗаполнения;
		Иначе
			ЗначениеПоУмолчанию = ПолеПлатежногоПоручения.Тип.ПривестиЗначение(Неопределено);
		КонецЕсли;
		
		Реквизиты.Вставить(ОписаниеРеквизита.Ключ, ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	Реквизиты.Вставить("Ошибки", "");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает признак того, что в настоящий момент не выполняется обмен с сервисом АУСН.
//
// Возвращаемое значение:
// Булево
//
Функция ВозможноПрочитатьДанныеОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НастроенОбменССервисомАУСН() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	КлючиОбмена = ЗаблокированныеДанныеДляВыполненияОбмена();
	Возврат КлючиОбмена <> Неопределено;
	
КонецФункции

// Возвращает коды вычетов, которые могут использоваться для вычетов из доходов с кодом
// 4901 (доходы, которые не подлежат обложению налогом на основании ст. 217 НК РФ)
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция КодыВычетовПоНеоблагаемымДоходам() Экспорт
	
	КодыВычетов = Новый Массив;
	КодыВычетов.Добавить("502");
	КодыВычетов.Добавить("503");
	КодыВычетов.Добавить("504");
	КодыВычетов.Добавить("508");
	КодыВычетов.Добавить("610");
	КодыВычетов.Добавить("620");
	
	Возврат КодыВычетов;
	
КонецФункции

// Возвращает код вычета налогоплательщика "Вычет в размере полученных выплат",
// используемый для АУСН
//
// Возвращаемое значение:
//  Строка
//
Функция КодВычетаВРазмереПолученнойПрибыли() Экспорт
	
	Возврат "610";
	
КонецФункции

// Возвращает код для вида дохода налогоплательщика
// "Доходы, не подлежащие налогообложению в соответствии со статьей 217 Налогового кодекса Российской Федерации",
// используемый для АУСН
//
// Возвращаемое значение:
//  Строка
//
Функция КодДоходаНеПодлежащегоНалогообложению() Экспорт
	
	Возврат "4901";
	
КонецФункции

// Возвращает коды видов дохода налогоплательщика для АУСН, требующие указывать вычеты, в размере полученной прибыли
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция КодыВыплатАУСНДляВычетаВРазмереПолученнойПрибыли() Экспорт
	
	КодыВыплат = Новый Массив;
	КодыВыплат.Добавить("4902");
	КодыВыплат.Добавить("4903");
	
	Возврат КодыВыплат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполнения метода взаимодействия с сервисом интеграции в фоне.
// При вызове на клиенте должна выполняться асинхронно.
//
// Параметры:
//  ПараметрыМетода - Структура: см. ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат выполнения.
//
Процедура ВыполнитьМетодВзаимодействияВФоне(ПараметрыМетода, АдресРезультата) Экспорт
	
	Ответ = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
	
	ПоместитьВоВременноеХранилище(Ответ, АдресРезультата);
	
КонецПроцедуры

// Выполняет метод взаимодействия с сервисом интеграции и возвращает результат выполнения.
// Должна выполняться в фоновом задании.
//
// Параметры:
//  ПараметрыМетода - Структура: см. ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия
// 
// Возвращаемое значение:
//  Структура - структура ответа:
//    * Статус - Строка
//    * КодСостояния - Число
//    * Результат - Структура, Неопределено - результат выполнения
//    * Сообщение - Строка
//
Функция ВыполнитьМетодВзаимодействия(ПараметрыМетода) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ВызватьИсключение НСтр("ru = 'Работа с внешними ресурсами заблокирована'");
	КонецЕсли;
	
	Возврат ПолучитьОтветСервиса(ПараметрыМетода);
	
КонецФункции

// Записывает ошибку в журнал регистрации
// 
// Параметры:
//  КраткоеПредставлениеОшибки - Строка - Краткое представление ошибки
//  ПодробноеПредставлениеОшибки - Строка, Неопределено - Подробное представление ошибки
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		?(ПодробноеПредставлениеОшибки <> Неопределено, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки));
	
КонецПроцедуры

// Возвращает основную организацию пользователя
// 
// Возвращаемое значение:
//   ОпределяемыйТип.Организация
//  
Функция ОсновнаяОрганизация() Экспорт
	
	Перем ОсновнаяОрганизация;
	
	ИнтеграцияАУСНПереопределяемый.ПолучитьОсновнуюОрганизацию(ОсновнаяОрганизация);
	
	Если ОсновнаяОрганизация = Неопределено Тогда
		ОбработатьОшибкуРеализацииПереопределяемогоМодуля("ИнтеграцияАУСНПереопределяемый.ОсновнаяОрганизация()");
	КонецЕсли;
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

// Возвращает сведения об организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  НачалоПериода - Дата, Неопределено - Начало периода периодических сведений,
//                                       если не задано, используется текущая дата
//  КонецПериода - Дата, Неопределено - Конец периода периодических сведений,
//                                      если не задан, используется текущая дата
// 
// Возвращаемое значение:
//   Структура - см. НовыеСведенияОбОрганизации()
//  
Функция СведенияОбОрганизации(Организация, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	Перем СведенияОбОрганизации;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат НовыеСведенияОбОрганизации();
	КонецЕсли;
	
	ИнтеграцияАУСНПереопределяемый.ПолучитьСведенияОбОрганизации(
		Организация, НачалоПериода, КонецПериода, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации = Неопределено Тогда
		ОбработатьОшибкуРеализацииПереопределяемогоМодуля("ИнтеграцияАУСНПереопределяемый.ПолучитьСведенияОбОрганизации()");
	КонецЕсли;
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

// Конструктор сведений об организации
// 
// Возвращаемое значение:
//  Структура - Новые сведения об организации:
//    * ИНН - Строка - ИНН организации
//    * ИспользуетсяНесколькоБанковскихСчетов - Булево - Истина, если у организации несколько банковских счетов
//    * БанкОсновногоСчета - СправочникСсылка.КлассификаторБанков - банк основного счета
//    * БанкиОрганизации - Массив из СправочникСсылка.КлассификаторБанков - банки, в которых у организации открыты счета
//    * ПрименяетсяАУСН - Булево - Истина, если организация применяет АУСН в выбранном периоде
//    * ПредставлениеСистемыНалогообложения - Строка - представление применяемой системы налогообложения
//
Функция НовыеСведенияОбОрганизации() Экспорт
	
	СведенияОбОрганизации = Новый Структура;
	СведенияОбОрганизации.Вставить("ИНН", "");
	СведенияОбОрганизации.Вставить("ИспользуетсяНесколькоБанковскихСчетов", Истина);
	СведенияОбОрганизации.Вставить("БанкОсновногоСчета", Справочники.КлассификаторБанков.ПустаяСсылка());
	СведенияОбОрганизации.Вставить("БанкиОрганизации", Новый Массив);
	СведенияОбОрганизации.Вставить("ПрименяетсяАУСН", Истина);
	СведенияОбОрганизации.Вставить("ПредставлениеСистемыНалогообложения", "");
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

// Возвращает список банков подключенных к сервису.
// Если список банков неактуален, обновляет его из сервиса.
// Функцию следует вызывать только в фоновом задании.
// 
// Возвращаемое значение:
//    Неопределено, ТаблицаЗначений - см. РегистрыСведений.БанкиАУСН.НовыйПодключенныеБанки
//
Функция ПодключенныеБанки() Экспорт
	
	ПодключенныеБанки = РегистрыСведений.БанкиАУСН.ПодключенныеБанки();
	Если ПодключенныеБанки = Неопределено Тогда
		
		ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СписокБанков");
		Ответ = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
		Если Ответ.Статус = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов().Выполнено Тогда
			ПодключенныеБанки = ОбновитьСписокБанков(Ответ.Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодключенныеБанки;
	
КонецФункции

// Обновляет список банков подключенных к сервису по данным сервиса
// 
// Параметры:
//  РезультатВыполненияМетода - Структура - ответ метода СписокБанков
// 
// Возвращаемое значение:
//  ТаблицаЗначений: см. РегистрыСведений.БанкиАУСН.НовыйПодключенныеБанки()
//
Функция ОбновитьСписокБанков(РезультатВыполненияМетода) Экспорт
	
	СписокБанковСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполненияМетода, "banks", Новый Массив);
	ОписаниеБанков = НовыйОписаниеБанков();
	
	Для Индекс = 0 По СписокБанковСервиса.ВГраница() Цикл
		ТекущаяСтрока = СписокБанковСервиса[Индекс];
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяСтрока, "bic", "");
		СписокБИК = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БИК);
		ПолученныеБИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяСтрока, "bics", Новый Массив);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокБИК, ПолученныеБИК, Истина);
		Для Каждого БИК Из СписокБИК Цикл
			Если Не ЗначениеЗаполнено(БИК) Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеБанка = ОписаниеБанков.Добавить();
			ОписаниеБанка.Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ТекущаяСтрока, "ueid", "");
			ОписаниеБанка.БИК = БИК;
			ОписаниеБанка.СсылкаЛичныйКабинет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ТекущаяСтрока, "serviceConnectionPageUrl", "");
		КонецЦикла;
	КонецЦикла;
	
	СписокБанков = НайтиБанки(ОписаниеБанков.ВыгрузитьКолонку("БИК"));
	
	ПодключенныеБанки = РегистрыСведений.БанкиАУСН.НовыйПодключенныеБанки();
	Для Каждого СтрокаБанк Из ОписаниеБанков Цикл
		Банк = СписокБанков[СтрокаБанк.БИК];
		Если ЗначениеЗаполнено(Банк) Тогда
			НоваяСтрока = ПодключенныеБанки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБанк);
			НоваяСтрока.Банк = Банк;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.БанкиАУСН.ОбновитьСписокБанков(ПодключенныеБанки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПодключенныеБанки;
	
КонецФункции

// Процедура регламентного задания ОбменССервисомАУСН
//
Процедура ОбработатьЗапускРегламентногоЗаданияПоОбменуССервисом() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомАУСН);
	
	ИспользуетсяРазделениеДанных = РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		И РаботаВМоделиСервиса.РазделениеВключено();
	
	Если Не НужноВыполнятьРегламентноеЗадание() Тогда
		Если Не ИспользуетсяРазделениеДанных Тогда
			ИзменитьПрименениеЗаданияПоОбменуССервисом(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменССервисом();
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомАУСН.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомАУСН.ИмяМетода);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомАУСН;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяАУСН;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Изменяет параметр "Использование" регламентного задания по обмену с сервисом АУСН
//
// Параметры:
//  Применять - Булево - значение, в которое будет установлен параметр "Использование"
//
Процедура ИзменитьПрименениеЗаданияПоОбменуССервисом(Применять) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеОбменаССервисом = Метаданные.РегламентныеЗадания.ОбменССервисомАУСН;
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Применять);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ЗаданиеОбменаССервисом, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Конструктор данных, которые формируют разметку АУСН для отправки в банк
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция НовыеДанныеДляОтправки() Экспорт
	
	Данные = Новый ТаблицаЗначений();
	Данные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Данные.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.Банки"));
	Данные.Колонки.Добавить("БанковскийСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	Данные.Колонки.Добавить("БанковскиеОперации", Новый ОписаниеТипов("Массив"));
	Данные.Колонки.Добавить("ДанныеВФорматеФНС", Новый ОписаниеТипов("Строка"));
	Возврат Данные;
	
КонецФункции

// Конструктор данных, содержащих ошибки, возникающие при отправке документов в банк
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция НовыйОписаниеОшибокОтправки() Экспорт
	
	Ошибки = Новый ТаблицаЗначений;
	
	Ошибки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Ошибки.Колонки.Добавить("ИдентификаторБанка", ОписаниеТипаИдентификатор());
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	Ошибки.Колонки.Добавить("Объект", Новый ОписаниеТипов(ТипыОбъектов));
	
	Ошибки.Колонки.Добавить("Реквизиты", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Ошибки;
	
КонецФункции

// Заполняет сведения о банковских операциях, подготовленные для отправки в банк, данными в формате протокола обмена
// с сервисом АУСН. При наличии ошибок, добавляет информацию о них в таблицу Ошибки.
//
// Параметры:
//  ДанныеКОтправке - ТаблицаЗначений - см. НовыеДанныеДляОтправки
//  ВсеДокументы - Соответствие из КлючЗначение:
//               Ключ - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.ПоступлениеНаРасчетныйСчет -
//                      ссылка на банковскую операцию
//               Значение - Строка - идентификатор банковской операции, который присваивается банком
//  Ошибки - ТаблицаЗначений - см. НовыйОписаниеОшибокОтправки
//
Процедура ПодготовитьДанныеОБезналичныхОперацияхВФорматеФНС(ДанныеКОтправке, ВсеДокументы, Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазметкаАУСНОбороты.БанковскаяОперация КАК БанковскаяОперация,
	|	РазметкаАУСНОбороты.ПризнакНалоговойБазы КАК ПризнакНалоговойБазы,
	|	РазметкаАУСНОбороты.КатегорияОперации КАК КатегорияОперации,
	|	РазметкаАУСНОбороты.СуммаОборот КАК Сумма,
	|	РазметкаАУСНОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА РазметкаАУСНОбороты.БанковскаяОперация.ВалютаДокумента = &ОсновнаяВалюта
	|			ТОГДА """"
	|		ИНАЧЕ РазметкаАУСНОбороты.БанковскаяОперация.ВалютаДокумента.Наименование
	|	КОНЕЦ КАК БуквенныйКодВалюты,
	|	ВЫБОР
	|		КОГДА РазметкаАУСНОбороты.БанковскаяОперация.ВалютаДокумента = &ОсновнаяВалюта
	|			ТОГДА 0
	|		ИНАЧЕ РазметкаАУСНОбороты.БанковскаяОперация.КурсНаДатуПриобретенияРеализацииВалюты
	|	КОНЕЦ КАК КурсВалюты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк.Код
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк.Код
	|	КОНЕЦ КАК Бик,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк.Наименование
	|	КОНЕЦ КАК БанкНаименование,
	|	РазметкаАУСНОбороты.Организация.НаименованиеПолное КАК НаименованиеОрганизации,
	|	РазметкаАУСНОбороты.Организация.ИНН КАК ИНН,
	|	РазметкаАУСНОбороты.Организация.КПП КАК КПП,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.НомерСчета
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.НомерСчета
	|	КОНЕЦ КАК НомерСчета,
	|	РазметкаАУСНОбороты.Организация КАК Организация,
	|	БанковскиеДокументыАУСН.ДанныеВФорматеСервиса КАК ДанныеВФорматеСервиса,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк.Город
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк.Город
	|	КОНЕЦ КАК БанкГород,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк.КоррСчет
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк.КоррСчет
	|	КОНЕЦ КАК БанкКоррСчет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РазметкаАУСНОбороты.БанковскаяОперация) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации
	|		ИНАЧЕ ВЫРАЗИТЬ(РазметкаАУСНОбороты.БанковскаяОперация КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации
	|	КОНЕЦ КАК БанковскийСчет,
	|	БанковскиеДокументыАУСН.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).Дата
	|		ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).Дата
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).ИсточникРазметкиАУСН
	|		КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).ИсточникРазметкиАУСН
	|		ИНАЧЕ БанковскиеДокументыАУСН.Документ.ИсточникРазметкиАУСН
	|	КОНЕЦ КАК ИсточникРазметкиАУСН
	|ИЗ
	|	РегистрНакопления.РазметкаАУСН.Обороты(
	|			,
	|			,
	|			,
	|			Организация В (&Организации)
	|				И БанковскаяОперация В (&ДокументыСсылки)) КАК РазметкаАУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
	|		ПО РазметкаАУСНОбороты.Организация = БанковскиеДокументыАУСН.Организация
	|			И РазметкаАУСНОбороты.БанковскаяОперация = БанковскиеДокументыАУСН.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ВалютнаяСумма),
	|	МИНИМУМ(БуквенныйКодВалюты),
	|	МИНИМУМ(КурсВалюты),
	|	МИНИМУМ(Бик),
	|	МИНИМУМ(БанкНаименование),
	|	МИНИМУМ(НаименованиеОрганизации),
	|	МИНИМУМ(ИНН),
	|	МИНИМУМ(КПП),
	|	МИНИМУМ(НомерСчета),
	|	МИНИМУМ(БанкГород),
	|	МИНИМУМ(БанкКоррСчет),
	|	МИНИМУМ(ИдентификаторПолучателя),
	|	МИНИМУМ(ДатаДокумента),
	|	МИНИМУМ(ИсточникРазметкиАУСН)
	|ПО
	|	Организация,
	|	БанковскийСчет,
	|	БанковскаяОперация";
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеКОтправке, "Организация");
	ДокументыСсылки = ОбщегоНазначения.ВыгрузитьКолонку(ВсеДокументы, "Ключ");
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ДокументыСсылки", ДокументыСсылки);
	Запрос.УстановитьПараметр("ОсновнаяВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ФабрикаСервисаАУСН = ФабрикаПротоколаОбмена(АктуальнаяВерсияПротоколаОбмена());
	
	ТипОбъектаВыписка = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"Statement");
	ТипОбъектаБанк = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"BankPartyType");
	ТипБанкПолный = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"BankType");

	ТипОбъектаКлиент = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"CustomerPartyType");
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		ВыборкаПоСчетам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСчетам.Следующий() Цикл
		
			Выписка = ФабрикаСервисаАУСН.Создать(ТипОбъектаВыписка);
			Выписка.id = Строка(Новый УникальныйИдентификатор);
			Выписка.formatVersion = "0.3";
			Выписка.creationDate = ОбщегоНазначения.ТекущаяДатаПользователя();
			Выписка.userAgent = НСтр("ru = '1С:Бухгалтерия предприятия'");
			
			Выписка.Sender = ФабрикаСервисаАУСН.Создать(ТипОбъектаБанк);
			Выписка.Sender.bic = ВыборкаПоСчетам.Бик;
			Выписка.Sender.name = ВыборкаПоСчетам.БанкНаименование;
			Выписка.Recipient = ФабрикаСервисаАУСН.Создать(ТипОбъектаКлиент);
			ИдентификаторПолучателя = ВыборкаПоСчетам.ИдентификаторПолучателя;
			Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
				ИдентификаторПолучателя = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Выписка.Recipient.id = ИдентификаторПолучателя;
			Выписка.Recipient.name = ВыборкаПоОрганизациям.НаименованиеОрганизации;
			Выписка.Recipient.inn = ВыборкаПоОрганизациям.ИНН;
			Если ЗначениеЗаполнено(ВыборкаПоОрганизациям.КПП) Тогда
				Выписка.Recipient.kpp = ВыборкаПоОрганизациям.КПП;
			КонецЕсли;
			
			ТипДанныеВыписки = ТипОбъектаВыписка.Свойства.Получить("Data").Тип;
			ДанныеВыписки = ФабрикаСервисаАУСН.Создать(ТипДанныеВыписки);
			ДанныеВыписки.StatementType = "0";
			ДанныеВыписки.DateFrom = ВыборкаПоСчетам.ДатаДокумента;
			ДанныеВыписки.Account = ВыборкаПоСчетам.НомерСчета;
			БанкВыписки = ФабрикаСервисаАУСН.Создать(ТипБанкПолный);
			БанкВыписки.BIC = ВыборкаПоСчетам.Бик;
			БанкВыписки.Name = ВыборкаПоСчетам.БанкНаименование;
			БанкВыписки.City = ВыборкаПоСчетам.БанкГород;
			БанкВыписки.CorrespAcc = ВыборкаПоСчетам.БанкКоррСчет;
			ДанныеВыписки.Bank = БанкВыписки;
			
			ВыборкаПоДокументам = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				ЕстьОшибки = Ложь;
				ДанныеВыписки.DateTo = ВыборкаПоДокументам.ДатаДокумента;
				Выборка = ВыборкаПоДокументам.Выбрать();
				Выборка.Следующий();
				ДанныеВФорматеСервиса = Выборка.ДанныеВФорматеСервиса.Получить();
				ТипБанковскаяОперация = ТипДанныеВыписки.Свойства.Получить("OperationInfo").Тип;
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(ДанныеВФорматеСервиса);
				БанковскаяОперация = ФабрикаСервисаАУСН.ПрочитатьXML(ЧтениеXML, ТипБанковскаяОперация);
				
				ТипОбъектаРазметка = ФабрикаСервисаАУСН.Тип(
					"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
					"AusnDetails");
				Разметка = ФабрикаСервисаАУСН.Создать(ТипОбъектаРазметка);
				Если Разметка.Свойства().Получить("SpecificSource") <> Неопределено Тогда
					ИсточникРазметки = ?(
						ЗначениеЗаполнено(ВыборкаПоДокументам.ИсточникРазметкиАУСН),
						ВыборкаПоДокументам.ИсточникРазметкиАУСН,
						Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию());
					Разметка.SpecificSource = Перечисления.ИсточникиРазметкиАУСН.Идентификатор(ИсточникРазметки);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоДокументам.БуквенныйКодВалюты) Тогда
					Разметка.CurrencyCode = ВыборкаПоДокументам.БуквенныйКодВалюты;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоДокументам.КурсВалюты) Тогда
					Разметка.ExchangeRate = ВыборкаПоДокументам.КурсВалюты;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоДокументам.БуквенныйКодВалюты) Тогда
					Разметка.ForeignCurrencyAmount = ВыборкаПоДокументам.ВалютнаяСумма;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.БуквенныйКодВалюты)
					И ЗначениеЗаполнено(ВыборкаПоДокументам.ВалютнаяСумма) Тогда
					ТекстОшибки =
						НСтр("ru = 'Если валютой документа является российский рубль, валютная сумма должна равняться 0'", КодЯзыка);
					Синоним = НСтр("ru = 'Валютная сумма'", КодЯзыка);
					ЗаполнитьОшибкуОтправкиПоВыборке(Ошибки, ВыборкаПоДокументам, "ВалютнаяСумма", Синоним, ТекстОшибки, ЕстьОшибки);
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоДокументам.БуквенныйКодВалюты) И ВыборкаПоДокументам.ВалютнаяСумма = 0 Тогда
					ТекстОшибки = НСтр(
						"ru = 'Если валютой документа является не российский рубль, то валютная сумма не должна равняться 0'",
						КодЯзыка);
					Синоним = НСтр("ru = 'Валютная сумма'", КодЯзыка);
					ЗаполнитьОшибкуОтправкиПоВыборке(Ошибки, ВыборкаПоДокументам, "ВалютнаяСумма", Синоним, ТекстОшибки, ЕстьОшибки);
				КонецЕсли;
				Разметка.LastModifiedDate = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(
					ТекущаяДатаСеанса());
				
				ТипРазметкаСтрока = ФабрикаСервисаАУСН.Тип(
					"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
					"SpecificItem");
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Сумма <= 0 Тогда
						ТекстОшибки = НСтр("ru = 'Сумма должна быть больше 0'", КодЯзыка);
						Синоним = НСтр("ru = 'Сумма'", КодЯзыка);
						ЗаполнитьОшибкуОтправкиПоВыборке(Ошибки, ВыборкаПоДокументам, "Сумма", Синоним, ТекстОшибки, ЕстьОшибки);
					КонецЕсли;
					Если Не ЗначениеЗаполнено(Выборка.ПризнакНалоговойБазы) Тогда
						ТекстОшибки = НСтр("ru = 'Признак налоговой базы не может быть пустым'");
						Синоним = НСтр("ru = 'Признак налоговой базы'", КодЯзыка);
						ЗаполнитьОшибкуОтправкиПоВыборке(
							Ошибки, ВыборкаПоДокументам, "ПризнакНалоговойБазы", Синоним, ТекстОшибки, ЕстьОшибки);
					КонецЕсли;
					СтрокаРазметки = ФабрикаСервисаАУСН.Создать(ТипРазметкаСтрока);
					Если ЗначениеЗаполнено(ВыборкаПоДокументам.БуквенныйКодВалюты) Тогда
						СтрокаРазметки.ForeignCurrencyAmount = Выборка.ВалютнаяСумма;
					КонецЕсли;
					СтрокаРазметки.Amount = Выборка.Сумма;
					Если Выборка.КатегорияОперации <> Перечисления.КатегорииОперацийАУСН.НеЗадана Тогда
						СтрокаРазметки.OperationCategory = Перечисления.КатегорииОперацийАУСН.Идентификатор(
							Выборка.КатегорияОперации);
					КонецЕсли;
					СтрокаРазметки.OperationTaxbaseCode = Перечисления.ПризнакиНалоговойБазыАУСН.Идентификатор(
						Выборка.ПризнакНалоговойБазы);
					Разметка.Specifics.Добавить(СтрокаРазметки);
				КонецЦикла;
				
				Если ЕстьОшибки Тогда
					ВсеДокументы.Удалить(ВыборкаПоДокументам.БанковскаяОперация);
					Продолжить;
				КонецЕсли;
				
				БанковскаяОперация.AusnDetails = Разметка;
				ДанныеВыписки.OperationInfo.Добавить(БанковскаяОперация);
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ДанныеВыписки.OperationInfo) Тогда
				Продолжить;
			КонецЕсли;
			
			Выписка.Data = ДанныеВыписки;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.ОткрытьФайл(СтрШаблон("%1%2", ВременныйКаталог, "manifest.json"));
			ДанныеМанифеста = Новый Структура;
			ДанныеМанифеста.Вставить("version", АктуальнаяВерсияПротоколаОбмена());
			ДанныеМанифеста.Вставить("request", "PostExtendedStatementRequest.xml");
			ЗаписатьJSON(ЗаписьJSON, ДанныеМанифеста);
			ЗаписьJSON.Закрыть();
			
			ТипЗапрос = ФабрикаСервисаАУСН.Пакеты.Получить(
				"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0").КорневыеСвойства.Получить(
				"PostExtendedStatementRequest").Тип;
			ОбъектЗапрос = ФабрикаСервисаАУСН.Создать(ТипЗапрос);
			ОбъектЗапрос.Statement = Выписка;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку("UTF-8");
			
			ФабрикаСервисаАУСН.ЗаписатьXML(ЗаписьXML, ОбъектЗапрос, "PostExtendedStatementRequest");
			
			ТекстXML = УпаковатьЗапросВКонтейнерSendMessageAsync(ЗаписьXML.Закрыть());
			
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ТекстXML);
			Текст.Записать(СтрШаблон("%1%2", ВременныйКаталог, "PostExtendedStatementRequest.xml"));
			
			ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
			Архиватор = Новый ЗаписьZipФайла(ИмяАрхива);
			Архиватор.Добавить(СтрШаблон("%1%2", ВременныйКаталог, "manifest.json"));
			Архиватор.Добавить(СтрШаблон("%1%2", ВременныйКаталог, "PostExtendedStatementRequest.xml"));
			Архиватор.Записать();
			
			Результат = ОбщегоНазначенияБПКлиентСервер.СтрокаBase64(Новый ДвоичныеДанные(ИмяАрхива));
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ВыборкаПоОрганизациям.Организация);
			Отбор.Вставить("БанковскийСчет", ВыборкаПоСчетам.БанковскийСчет);
			НайденныеСтроки = ДанныеКОтправке.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденныеСтроки[0].ДанныеВФорматеФНС = Результат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОписаниеМетода(ВсеМетоды, Метод, Представление, МетодHttp, ШаблонАдресаРесурса)
	
	ТекущаяВерсия = ИнтеграцияАУСНКлиентСервер.ТекущаяВерсияРесурсов();
	
	ОписаниеМетода = НовыйОписаниеМетода();
	ОписаниеМетода.Метод = Метод;
	ОписаниеМетода.Представление = Представление;
	ОписаниеМетода.МетодHttp = МетодHttp;
	ОписаниеМетода.ШаблонАдресаРесурса = СтрШаблон("%1%2", АдресВерсииРесурсов(ТекущаяВерсия), ШаблонАдресаРесурса);
	
	ВсеМетоды.Вставить(Метод, ОписаниеМетода);

КонецПроцедуры

Функция НовыйОписаниеМетода()
	
	Результат = Новый Структура;
	Результат.Вставить("Метод", "");
	Результат.Вставить("Представление", "");
	Результат.Вставить("МетодHttp", "");
	Результат.Вставить("ШаблонАдресаРесурса", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОтветСервиса(ПараметрыМетода)
	
	// Получаем описание метода
	ОписаниеМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		МетодыВзаимодействия(), ПараметрыМетода.МетодВзаимодействия, Неопределено);
	Если ОписаниеМетода = Неопределено Тогда
		Ответ = ОтветОшибка(405,
			СтрШаблон(НСтр("ru = 'Неизвестный метод сервиса АУСН: %1'"), ПараметрыМетода.МетодВзаимодействия));
		Возврат Ответ;
	КонецЕсли;
	
	// Проверяем заполнение параметров
	ПроверяемыеПараметры = ПроверяемыеПараметрыМетода(ПараметрыМетода.МетодВзаимодействия);
	СообщениеОбОшибке = "";
	Если Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		Ответ = ОтветОшибка(400, СообщениеОбОшибке);
		Возврат Ответ;
	КонецЕсли;
	
	// Получаем токен авторизации
	ЭтоМетодСАвторизацией = ЭтоМетодСАвторизацией(ПараметрыМетода.МетодВзаимодействия);
	Если ЭтоМетодСАвторизацией Тогда
		
		ИдентификаторПриложения = РегистрыСведений.СостоянияИнтеграцииАУСН.ИдентификаторПриложения(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Организация"),
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "ИдентификаторБанка"));
		Если ИдентификаторПриложения = Неопределено Тогда
			Ответ = ОтветОшибка(400, НСтр("ru = 'Не выполнено подключение к сервису АУСН'"));
			Возврат Ответ;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		ТокенАвторизации = ТокенАвторизации(ИдентификаторПриложения, СообщениеОбОшибке);
		Если Не ЗначениеЗаполнено(ТокенАвторизации) Тогда
			Ответ = ОтветОшибка(401, СообщениеОбОшибке);
			Возврат Ответ;
		КонецЕсли;
		
	Иначе
		ИдентификаторПриложения = Неопределено; // Не требуется
		ТокенАвторизации = Неопределено;
	КонецЕсли;
	
	// Выполняем запрос
	ПараметрыЗапроса = ПараметрыЗапросаКСервису(ПараметрыМетода, ОписаниеМетода, ТокенАвторизации);
	Ответ = ОтветСервиса(ПараметрыЗапроса);
	
	// Проверяем чем вызвана ошибка. Если устарел токен авторизации, обновляем его и повторяем запрос.
	Если ЭтоМетодСАвторизацией
		И Ответ.Статус = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов().Ошибка
		И Ответ.КодСостояния = 401 Тогда
		
		СообщениеОбОшибке = "";
		ТокенАвторизации = НовыйТокенАвторизации(ИдентификаторПриложения, СообщениеОбОшибке);
		Если ЗначениеЗаполнено(ТокенАвторизации) Тогда
			ПараметрыЗапроса = ПараметрыЗапросаКСервису(ПараметрыМетода, ОписаниеМетода, ТокенАвторизации);
			Ответ = ОтветСервиса(ПараметрыЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#Область КлассификаторБанков

Функция НайтиБанки(СписокБИК)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СписокБИК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокБИК", СписокБИК);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Код КАК Код,
	|	КлассификаторБанков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.ЭтоГруппа = ЛОЖЬ
	|	И КлассификаторБанков.Код В (&СписокБИК)
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторБанков.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Код, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПараметровЗапроса

Функция ПараметрыЗапросаКСервису(ПараметрыМетода, ОписаниеМетода, ТокенАвторизации = Неопределено)
	
	ПараметрыЗапроса = НовыйПараметрыЗапросаКСервису();
	ПараметрыЗапроса.Метод = ОписаниеМетода.Метод;
	ПараметрыЗапроса.МетодHttp = ОписаниеМетода.МетодHttp;
	ПараметрыЗапроса.АдресРесурса = АдресРесурса(ОписаниеМетода.ШаблонАдресаРесурса, ПараметрыМетода);
	
	Если ТокенАвторизации <> Неопределено Тогда
		ПараметрыЗапроса.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенАвторизации));
	КонецЕсли;
	
	ЗаполнитьДанныеЗапроса(ПараметрыЗапроса.Данные, ПараметрыМетода);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция АдресРесурса(ШаблонАдресаРесурса, ПараметрыМетода)
	
	ПараметрыПодстановки = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыРесурсов() Цикл
		
		Если Найти(ШаблонАдресаРесурса, СтрШаблон("[%1]", КлючИЗначение.Значение)) <> 0 Тогда
			
			ЗначениеПараметра = Неопределено;
			
			Если КлючИЗначение.Ключ = "ИНН" Тогда
				Организация = Неопределено;
				Если ПараметрыМетода.Свойство("Организация", Организация) Тогда
					ЗначениеПараметра = СведенияОбОрганизации(Организация).ИНН;
				КонецЕсли;
			Иначе
				ПараметрыМетода.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра);
			КонецЕсли;
			
			Если ЗначениеПараметра <> Неопределено Тогда
				ПараметрыПодстановки.Вставить(КлючИЗначение.Значение, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ПараметрыМетода.Количество() > 0 Тогда
		АдресРесурса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонАдресаРесурса, ПараметрыПодстановки);
	Иначе
		АдресРесурса = ШаблонАдресаРесурса;
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке = Неопределено)
	
	Если ПроверяемыеПараметры.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Сообщения = Новый Массив;
	Для Каждого ИмяПараметра Из ПроверяемыеПараметры Цикл
		ПозицияТочки = СтрНайти(ИмяПараметра, ".");
		Если ПозицияТочки = 0 Тогда
			ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, ИмяПараметра); 
			Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Сообщения.Добавить(ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , ИмяПараметра));
			КонецЕсли;
		Иначе // Свойство задано через точку
			КорневойПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыМетода,
				Лев(ИмяПараметра, ПозицияТочки - 1));
			Если ЗначениеЗаполнено(КорневойПараметр) Тогда
				Если ТипЗнч(КорневойПараметр) = Тип("Структура") Тогда
					ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
						КорневойПараметр,
						Сред(ИмяПараметра, ПозицияТочки + 1));
					Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						Сообщения.Добавить(ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , ИмяПараметра));
					КонецЕсли;
				ИначеЕсли ТипЗнч(КорневойПараметр) = Тип("Массив") Тогда
					Для Индекс = 0 По КорневойПараметр.ВГраница() Цикл
						Если ТипЗнч(КорневойПараметр) = Тип("Структура") Тогда
							ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
								КорневойПараметр[Индекс],
								Сред(ИмяПараметра, ПозицияТочки + 1));
						Иначе
							ЗначениеПараметра = КорневойПараметр[Индекс];
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							Сообщения.Добавить(ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
								, , СтрЗаменить(ИмяПараметра, ".", СтрШаблон("[%1].", Индекс))));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнены = Сообщения.Количество() = 0;
	Если Не ПараметрыЗаполнены Тогда
		СообщениеОбОшибке = СтрСоединить(Сообщения, Символы.ПС);
	КонецЕсли;
	Возврат ПараметрыЗаполнены;
	
КонецФункции

Функция ПроверяемыеПараметрыМетода(Метод)
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(Метод);
	
	ПроверяемыеПараметры = Новый Массив;
	
	ДобавитьПроверяемыйПараметрЕслиЕсть("ИдентификаторПриложения", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Тикет", ПроверяемыеПараметры, ПараметрыМетода);
	
	ДобавитьПроверяемыйПараметрЕслиЕсть("Организация", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("ИдентификаторБанка", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Идентификатор", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Статус", ПроверяемыеПараметры, ПараметрыМетода);
	
	ДобавитьПроверяемыйПараметрЕслиЕсть("Документ", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Документ.Тип", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Документ.Данные", ПроверяемыеПараметры, ПараметрыМетода);
	
	ДобавитьПроверяемыйПараметрЕслиЕсть("Статусы", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Статусы.Идентификатор", ПроверяемыеПараметры, ПараметрыМетода);
	ДобавитьПроверяемыйПараметрЕслиЕсть("Статусы.Статус", ПроверяемыеПараметры, ПараметрыМетода);
	
	Возврат ПроверяемыеПараметры;
	
КонецФункции

Процедура ДобавитьПроверяемыйПараметрЕслиЕсть(ИмяПараметра, ПроверяемыеПараметры, ПараметрыМетода)
	
	ПозицияТочки = СтрНайти(ИмяПараметра, ".");
	Если ПозицияТочки = 0 Тогда
		Если ПараметрыМетода.Свойство(ИмяПараметра) Тогда
			ПроверяемыеПараметры.Добавить(ИмяПараметра);
		КонецЕсли;
	Иначе // Свойство задано через точку
		Если ПараметрыМетода.Свойство(Лев(ИмяПараметра, ПозицияТочки - 1)) Тогда
			ПроверяемыеПараметры.Добавить(ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыЗапросаКСервису()
	
	Результат = Новый Структура;
	Результат.Вставить("Метод", "");
	Результат.Вставить("МетодHttp", "");
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Данные", Новый Структура);
	Возврат Результат;
	
КонецФункции

Функция ЭтоМетодСАвторизацией(Метод)
	
	Возврат ИнтеграцияАУСНКлиентСервер.МетодыБезАвторизации().Найти(Метод) = Неопределено;
	
КонецФункции

Функция ИмяСервисаНаПорталеИТС()

	Возврат "UsnIntegration";

КонецФункции

Процедура ЗаполнитьДанныеЗапроса(Данные, ПараметрыМетода)
	
	Метод = ПараметрыМетода.МетодВзаимодействия;
	
	ВсеМетоды = ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия();
	
	ТекущаяВерсия = ИнтеграцияАУСНКлиентСервер.ТекущаяВерсияРесурсов();
	ВсеВерсии = ИнтеграцияАУСНКлиентСервер.ВерсииРесурсов();
	
	Если Метод = ВсеМетоды.СоздатьДокумент Тогда
		ЗаполнитьДанныеЗапроса_СоздатьДокумент(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.ОбновитьДокумент Тогда
		ЗаполнитьДанныеЗапроса_ОбновитьДокумент(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.ОбновитьСтатусДокумента Тогда
		ЗаполнитьДанныеЗапроса_ОбновитьСтатусДокумента(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.ОбновитьСтатусыДокументов Тогда
		ЗаполнитьДанныеЗапроса_ОбновитьСтатусыДокументов(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.НайтиДокументы Тогда
		Если ТекущаяВерсия = ВсеВерсии.Версия2 Тогда
			ЗаполнитьДанныеЗапроса_НайтиДокументыВерсия2(Данные, ПараметрыМетода);
		Иначе
			ЗаполнитьДанныеЗапроса_НайтиДокументы(Данные, ПараметрыМетода);
		КонецЕсли;
	ИначеЕсли Метод = ВсеМетоды.ПодтвердитьЗаявку Тогда
		ЗаполнитьДанныеЗапроса_ПодтвердитьЗаявку(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.ОтклонитьЗаявку Тогда
		ЗаполнитьДанныеЗапроса_ОтклонитьЗаявку(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.НайтиЗаявку Тогда
		ЗаполнитьДанныеЗапроса_НайтиЗаявку(Данные, ПараметрыМетода);
	ИначеЕсли Метод = ВсеМетоды.СоздатьТокенАвторизации Тогда
		ЗаполнитьДанныеЗапроса_СоздатьТокенАвторизации(Данные, ПараметрыМетода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_СоздатьДокумент(Данные, ПараметрыМетода)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Организация", Справочники.Организации.ПустаяСсылка());
	Данные.Вставить("inn", СведенияОбОрганизации(Организация).ИНН);
	
	Данные.Вставить("bankUeid", ПараметрыМетода.ИдентификаторБанка);
	Данные.Вставить("creationRequestUeid", ПараметрыМетода.Идентификатор);
	
	Документ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Документ", Новый Структура);
	ТипДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Документ, "Тип", Перечисления.ТипыДокументовАУСН.ПустаяСсылка());
	ДанныеДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Документ, "Данные", "");
	
	Данные.Вставить("documentInfo", ДанныеЗапроса_Документ(ТипДокумента, ДанныеДокумента));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_ОбновитьДокумент(Данные, ПараметрыМетода)
	
	Документ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Документ", Новый Структура);
	ТипДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Документ, "Тип", Перечисления.ТипыДокументовАУСН.ПустаяСсылка());
	ДанныеДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Документ, "Данные", "");
	
	Данные.Вставить("documentInfo", ДанныеЗапроса_Документ(ТипДокумента, ДанныеДокумента));
	
КонецПроцедуры

Функция ДанныеЗапроса_Документ(ТипДокумента, ДанныеДокумента)
	
	Документ = Новый Структура;
	Документ.Вставить("type", Перечисления.ТипыДокументовАУСН.Идентификатор(ТипДокумента));
	Документ.Вставить("data", Строка(ДанныеДокумента));
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьДанныеЗапроса_ОбновитьСтатусДокумента(Данные, ПараметрыМетода)
	
	Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Статус", Перечисления.СтатусыДокументовАУСН.ПустаяСсылка());
	
	Данные.Вставить("status", Перечисления.СтатусыДокументовАУСН.Идентификатор(Статус));
	Данные.Вставить("bankUeid", ПараметрыМетода.ИдентификаторБанка);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_ОбновитьСтатусыДокументов(Данные, ПараметрыМетода)
	
	Данные.Вставить("bankUeid", ПараметрыМетода.ИдентификаторБанка);
	
	Статусы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Статусы", Новый Массив);
	
	Данные.Вставить("statuses", Новый Массив);
	Для Индекс = 0 По Статусы.ВГраница() Цикл
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Статусы[Индекс], "Идентификатор", "");
		Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Статусы[Индекс], "Статус", Перечисления.СтатусыДокументовАУСН.ПустаяСсылка());
		Данные.statuses.Добавить(
			Новый Структура("ueid, status", Идентификатор, Перечисления.СтатусыДокументовАУСН.Идентификатор(Статус)));
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_НайтиДокументы(Данные, ПараметрыМетода)
	
	Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Статус", Перечисления.СтатусыДокументовАУСН.ПустаяСсылка());
	Данные.Вставить("status", Перечисления.СтатусыДокументовАУСН.Идентификатор(Статус));
	Метка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Метка", "");
	Если ЗначениеЗаполнено(Метка) Тогда
		Данные.Вставить("cursor", Метка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_ПодтвердитьЗаявку(Данные, ПараметрыМетода)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Организация", Справочники.Организации.ПустаяСсылка());
	Данные.Вставить("applicationName", Метаданные.Имя);
	Данные.Вставить("inn", СведенияОбОрганизации(Организация).ИНН);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_ОтклонитьЗаявку(Данные, ПараметрыМетода)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Организация", Справочники.Организации.ПустаяСсылка());
	Данные.Вставить("inn", СведенияОбОрганизации(Организация).ИНН);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_НайтиЗаявку(Данные, ПараметрыМетода)
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "Организация", Справочники.Организации.ПустаяСсылка());
	Данные.Вставить("inn", СведенияОбОрганизации(Организация).ИНН);	
	
	КодЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "КодЗаявки", "");
	Данные.Вставить("requestUeid", КодЗаявки);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_СоздатьТокенАвторизации(Данные, ПараметрыМетода)
	
	ИдентификаторПриложения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "ИдентификаторПриложения", "");
	Данные.Вставить("applicationUeid", ИдентификаторПриложения);
	
	Тикет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Тикет", "");
	Данные.Вставить("ticket", Тикет);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса_НайтиДокументыВерсия2(Данные, ПараметрыМетода)
	
	Статусы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Статусы", Новый Массив);
	Данные.Вставить("statuses", Новый Массив);
	Для Каждого Статус Из Статусы Цикл
		Данные.statuses.Добавить(Перечисления.СтатусыДокументовАУСН.Идентификатор(Статус));
	КонецЦикла;
	Метка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыМетода, "Метка", "");
	Если ЗначениеЗаполнено(Метка) Тогда
		Данные.Вставить("cursor", Метка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗапросов

Функция ОтветСервиса(ПараметрыЗапроса)
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(БазовыйАдрес());
	Соединение = СоединениеССервисом(СтруктураАдреса, ТаймаутСоединения());
	Запрос = ЗапросКСервису(СтруктураАдреса, ПараметрыЗапроса);
	
	Попытка
		ОтветHttp = Соединение.ВызватьHTTPМетод(ПараметрыЗапроса.МетодHttp, Запрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Ответ = ОтветОшибка(500, НСтр("ru = 'Не удалось получить данные сервиса'"));
		Возврат Ответ;
	КонецПопытки;
	
	КодСостояния = ОтветHttp.КодСостояния;
	ТелоОтвета   = ОтветHttp.ПолучитьТелоКакСтроку();
	
	Если Цел(КодСостояния/100) = 2 Тогда
		Ответ = ОтветВыполнено(КодСостояния, ТелоОтвета)
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(СтрШаблон(
			НСтр("ru = 'Метод: %1. Код состояния: %2.
				|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПараметрыЗапроса.Метод,
			КодСостояния,
			ТелоОтвета));
		Ответ = ОтветОшибка(КодСостояния, ТелоОтвета);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция СоединениеССервисом(СтруктураАдреса, Таймаут, Пользователь = Неопределено, Пароль = Неопределено)

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураАдреса.Схема);
	Соединение = Новый HTTPСоединение(
		СтруктураАдреса.Хост,
		СтруктураАдреса.Порт,
		Пользователь,
		Пароль,
		Прокси,
		Таймаут,
		?(СтруктураАдреса.Схема = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
		
	Возврат Соединение;

КонецФункции

Функция ЗапросКСервису(СтруктураАдреса, ПараметрыЗапроса)

	Запрос = Новый HTTPЗапрос;
	
	Запрос.АдресРесурса = ?(ПустаяСтрока(СтруктураАдреса.ПутьНаСервере), 
		"", 
		"/" + СтруктураАдреса.ПутьНаСервере)
		+ ПараметрыЗапроса.АдресРесурса;
	
	Запрос.Заголовки.Вставить("Accept", "application/json");
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Данные) Тогда
		Запрос.Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Для Каждого Заголовок Из ПараметрыЗапроса.Заголовки Цикл
		Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Данные) Тогда
		ТелоЗапроса = ЗначениеВJSON(ПараметрыЗапроса.Данные);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции

Функция ТаймаутСоединения()
	
	Возврат 30;
	
КонецФункции

Функция НовыйОтвет()

	Результат = Новый Структура;
	Результат.Вставить("Статус", "");
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Сообщение", "");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Адреса

Функция БазовыйАдрес()
	
	Возврат АдресСервиса() + "/api/user/rest";
	
КонецФункции

Функция АдресСервиса()
	
	Возврат "https://usn-integration.1c.ru";
	
КонецФункции

Функция ПараметрыРесурсов()
	
	ПараметрыРесурсов = Новый Структура;
	ПараметрыРесурсов.Вставить("КодЗаявки", "requestUeid");
	ПараметрыРесурсов.Вставить("ИНН", "inn");
	ПараметрыРесурсов.Вставить("ИдентификаторБанка", "bankUeid");
	ПараметрыРесурсов.Вставить("Идентификатор", "ueid");
	
	Возврат ПараметрыРесурсов;
	
КонецФункции

Функция АдресВерсииРесурсов(Версия)
	
	ВерсииРесурсов = ИнтеграцияАУСНКлиентСервер.ВерсииРесурсов();
	
	Если Версия = ВерсииРесурсов.Версия2 Тогда
		Возврат "/v2";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область JSON

Функция СвойстваТипаДата()
	
	Результат = Новый Массив;
	Результат.Добавить("timestamp");
	Результат.Добавить("createdAt");
	Результат.Добавить("updatedAt");
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗначениеИзJSON(Знач ТекстJSON, ВСоответствие, СвойстваТипаДата = Неопределено)
	
	Если СвойстваТипаДата <> Неопределено Тогда
		Для Каждого СвойствоТипаДата Из СвойстваТипаДата Цикл
			СтрокаПоиска = СтрШаблон("""%1"":null", СвойствоТипаДата);
			СтрокаЗамены = СтрШаблон("""%1"":""0001-01-01T00:00:00""", СвойствоТипаДата);
			ТекстJSON = СтрЗаменить(ТекстJSON, СтрокаПоиска, СтрокаЗамены);
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		Значение = ПрочитатьJSON(ЧтениеJSON, ВСоответствие, СвойстваТипаДата);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ПривестиЗначениеПриЗаписиJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Процедура ОбработатьОшибкуРеализацииПереопределяемогоМодуля(ИмяПроцедуры)
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Не реализована процедура %1'"), ИмяПроцедуры);
	
КонецПроцедуры

Функция ОтветВыполнено(КодСостояния = 200, ТелоОтвета = "")
	
	Ответ = НовыйОтвет();
	Ответ.Статус = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов().Выполнено;
	Ответ.КодСостояния = КодСостояния;
	Ответ.Сообщение = "";
	Ответ.Результат = ЗначениеИзJSON(ТелоОтвета, Ложь, СвойстваТипаДата());
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветОшибка(КодСостояния = 500, ТелоОтвета = "")
	
	Результат = ЗначениеИзJSON(ТелоОтвета, Ложь, СвойстваТипаДата());
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		КодОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "type", "");
		ОписаниеОшибки = "";
		Если ЗначениеЗаполнено(КодОшибки) И ВсеКодыОшибок().Свойство(ВРег(КодОшибки), ОписаниеОшибки) Тогда
			Сообщение = ОписаниеОшибки;
		Иначе
			Сообщение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "message", "");
		КонецЕсли;
	Иначе
		КодОшибки = "";
		Сообщение = ?(ЗначениеЗаполнено(Результат), Результат, НСтр("ru = 'Неизвестная ошибка'"));
	КонецЕсли;
	
	Ответ = НовыйОтвет();
	Ответ.Статус = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов().Ошибка;
	Ответ.КодСостояния = КодСостояния;
	Ответ.Сообщение = Сообщение;
	Ответ.Результат = Новый Структура("type, message", КодОшибки, Сообщение);
	
	Возврат Ответ;
	
КонецФункции

Функция ВсеКодыОшибок()
	
	КодыОшибок = Новый Структура;
	КодыОшибок.Вставить("INTERNAL", НСтр("ru = 'Внутренняя ошибка сервиса. Обратитесь в службу поддержки.'"));
	КодыОшибок.Вставить("USER_TICKET_EXPIRED_OR_NOT_EXISTS", НСтр("ru = 'Срок действия тикета портала истек или тикет не существует. Повторите запрос.'"));
	КодыОшибок.Вставить("USER_CONNECTION_REQUEST_NOT_FOUND", НСтр("ru = 'Код заявки не найден. Проверьте код заявки.'"));
	КодыОшибок.Вставить("ACCEPT_USER_CONNECTION_REQUEST_ERROR", НСтр("ru = 'Невозможно подтвердить заявку. Проверьте правильность указания кода заявки.'"));
	КодыОшибок.Вставить("DECLINE_USER_CONNECTION_REQUEST_ERROR", НСтр("ru = 'Невозможно отклонить заявку. Проверьте правильность указания кода заявки.'"));
	КодыОшибок.Вставить("NO_ACCEPTED_CONNECTION_BETWEEN_BANK_AND_USER_APPLICATION", НСтр("ru = 'Подключение к сервису не настроено'"));
	КодыОшибок.Вставить("DOCUMENT_NOT_FOUND", НСтр("ru = 'Документ не найден'"));
	КодыОшибок.Вставить("CHANGE_DOCUMENT_TYPE_ERROR", НСтр("ru = 'Ошибка при изменении типа документа'"));
	КодыОшибок.Вставить("CHANGE_DOCUMENT_STATUS_ERROR", НСтр("ru = 'Ошибка при изменении статуса документа'"));
	
	Возврат КодыОшибок;
	
КонецФункции

// Возвращает факт успешности выполнения метода взаимодействия с сервисом.
//
// Параметры:
//  КодВозврата - Строка - код, который вернул сервис.
// 
// Возвращаемое значение:
//   Булево
//
Функция МетодВыполненУспешно(КодВозврата) Экспорт
	
	Возврат (ВРег(КодВозврата) = "OK");
	
КонецФункции

Функция УпаковатьЗапросВКонтейнерSendMessageAsync(ТекстЗапроса)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Envelope");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns", ПространствоИменOpenApiAsync());
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Body");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ns:SendMessageRequest");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ns:Message");
	
	ЗаписьXML.ЗаписатьБезОбработки(ТекстЗапроса);
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ns:Message
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ns:SendMessageRequest
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // soapenv:Body
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // soapenv:Envelope
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПространствоИменOpenApiAsync()
	Возврат "urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types/1.0";
КонецФункции

Функция АктуальнаяВерсияПротоколаОбмена(Дата = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		ЧасовойПоясСервисаАУСНФНС = "GMT+3";
		Дата = ТекущаяУниверсальнаяДата() + СмещениеСтандартногоВремени(ЧасовойПоясСервисаАУСНФНС);
	КонецЕсли;
	
	Если Дата >= Дата(2023, 9, 14) Тогда
		Возврат "1.2.1";
	ИначеЕсли Дата > Дата(1, 1, 1) Тогда
		Возврат "1.2.0";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает сохраненный токен авторизации, создает при его отсутствии
//
// Параметры:
//   ИдентификаторПриложения - Строка - Идентификатор приложения
//   СообщениеОбОшибке - Строка - Исходящий параметр
//
// Возвращаемое значение:
//  Строка, Неопределено - токен
//
Функция ТокенАвторизации(ИдентификаторПриложения, СообщениеОбОшибке = "")
	
	УстановитьПривилегированныйРежим(Истина);
	ТокенАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецДанныхБезопасногоХранилища(ИдентификаторПриложения),
		КлючДанныхБезопасногоХранилища());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ТокенАвторизации) Тогда
		Возврат ТокенАвторизации;
	Иначе
		Возврат НовыйТокенАвторизации(ИдентификаторПриложения, СообщениеОбОшибке);
	КонецЕсли;
	
КонецФункции

// Запрашивает и возвращает новый токен авторизации
//
// Параметры:
//   ИдентификаторПриложения - Строка - Идентификатор приложения
//   СообщениеОбОшибке - Строка - Исходящий параметр
//
// Возвращаемое значение:
//  Строка, Неопределено - токен
//
Функция НовыйТокенАвторизации(ИдентификаторПриложения, СообщениеОбОшибке = "")
	
	Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не выполнено подключение к сервису АУСН'");
		Возврат Неопределено;
	КонецЕсли;
	
	Тикет = ТикетАутентификацииНаПорталеПоддержки(СообщениеОбОшибке);
	Если Не ЗначениеЗаполнено(Тикет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
		ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия().СоздатьТокенАвторизации);
	ПараметрыМетода.ИдентификаторПриложения = ИдентификаторПриложения;
	ПараметрыМетода.Тикет = Тикет;
	
	ОписаниеМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		МетодыВзаимодействия(), ПараметрыМетода.МетодВзаимодействия, Неопределено);
	
	ПараметрыЗапроса = ПараметрыЗапросаКСервису(ПараметрыМетода, ОписаниеМетода);
	ОтветСервиса = ОтветСервиса(ПараметрыЗапроса);
	
	СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
	
	Если ОтветСервиса.Статус = СтатусыЗапросов.Выполнено И ОтветСервиса.КодСостояния = 200 Тогда
		ТокенАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ОтветСервиса.Результат, "serviceUserToken", Неопределено);
	Иначе
		ТокенАвторизации = Неопределено;
	КонецЕсли;
	
	Если ТокенАвторизации <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ВладелецДанныхБезопасногоХранилища(ИдентификаторПриложения),
			ТокенАвторизации,
			КлючДанныхБезопасногоХранилища());
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТокенАвторизации;
	
КонецФункции

Функция ТикетАутентификацииНаПорталеПоддержки(СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
		ИмяСервисаНаПорталеИТС());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Возврат ДанныеАутентификации.Тикет;
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(ДанныеАутентификации.ИнформацияОбОшибке);
		СообщениеОбОшибке = ДанныеАутентификации.СообщениеОбОшибке;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВладелецДанныхБезопасногоХранилища(ИдентификаторПриложения)
	
	Возврат СтрШаблон("БухгалтерияПредприятия.ИнтеграцияАУСН.%1", ИдентификаторПриложения);
	
КонецФункции

Функция КлючДанныхБезопасногоХранилища()
	
	Возврат "serviceUserToken";
	
КонецФункции

#КонецОбласти

Функция ОрганизацияДокумента(ОрганизацииУчастникиОбмена, ИНН)
	
	НайденнаяОрганизация = ОрганизацииУчастникиОбмена[ИНН];
	Если НайденнаяОрганизация = Неопределено Тогда
		НайденнаяОрганизация = Справочники.Организации.НайтиОрганизацию(ИНН);
		ОрганизацииУчастникиОбмена.Вставить(ИНН, НайденнаяОрганизация);
	КонецЕсли;
	
	Возврат НайденнаяОрганизация;
	
КонецФункции

Функция ПараметрыМетодаДляПолученияНовыхДокументов(Организация, ИдентификаторБанка)
	
	ТекущаяВерсия = ИнтеграцияАУСНКлиентСервер.ТекущаяВерсияРесурсов();
	ВсеВерсии = ИнтеграцияАУСНКлиентСервер.ВерсииРесурсов();
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
		ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия().НайтиДокументы);
	Если ТекущаяВерсия = ВсеВерсии.Версия2 Тогда
		ПараметрыМетода.Статусы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Перечисления.СтатусыДокументовАУСН.ОтправленоПользователю);
	Иначе
		ПараметрыМетода.Статус = Перечисления.СтатусыДокументовАУСН.ОтправленоПользователю;
	КонецЕсли;
	ПараметрыМетода.Организация = Организация;
	ПараметрыМетода.ИдентификаторБанка = ИдентификаторБанка;
	
	Возврат ПараметрыМетода;
	
КонецФункции

Процедура ИзменитьСтатусДокументов(ИзменяемыйСтатус, НовыйСтатус, КонтекстОбменаССервисом)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыАУСН.Организация КАК Организация,
		|	ДокументыАУСН.Тип КАК Тип,
		|	ДокументыАУСН.Идентификатор КАК Идентификатор,
		|	ДокументыАУСН.Статус КАК Статус,
		|	ДокументыАУСН.Данные КАК Данные,
		|	ДокументыАУСН.ИдентификаторБанка КАК ИдентификаторБанка
		|ИЗ
		|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|ГДЕ
		|	ДокументыАУСН.Статус = &ИзменяемыйСтатус";
	
	Запрос.УстановитьПараметр("ИзменяемыйСтатус", ИзменяемыйСтатус);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Записи = РегистрыСведений.ДокументыАУСН.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
			ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия().ОбновитьСтатусДокумента);
		ПараметрыМетода.Идентификатор = Выборка.Идентификатор;
		ПараметрыМетода.Статус = НовыйСтатус;
		ПараметрыМетода.Организация = Выборка.Организация;
		ПараметрыМетода.ИдентификаторБанка = Выборка.ИдентификаторБанка;
		
		ОтветСервиса = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
		СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
		
		Если ОтветСервиса.Статус = СтатусыЗапросов.Выполнено Тогда
			Записи.Отбор.Организация.Установить(Выборка.Организация);
			Записи.Отбор.Тип.Установить(Выборка.Тип);
			Записи.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
			Записи.Отбор.ИдентификаторБанка.Установить(Выборка.ИдентификаторБанка);
			ДокументАУСН = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументАУСН, Выборка);
			ДокументАУСН.Статус = НовыйСтатус;
			ДокументАУСН.ДатаИзменения = ТекущаяУниверсальнаяДата();
			Записи.Записать(Истина);
			Записи.Очистить();
		ИначеЕсли ОтветСервиса.Статус = СтатусыЗапросов.Ошибка Тогда
			ПараметрыОшибки = НовыйПараметрыОшибки();
			ПараметрыОшибки.ТекстОшибки = ТекстОшибкиВыполненияМетода(ПараметрыМетода, ОтветСервиса);
			ПараметрыОшибки.Организация = Выборка.Организация;
			ПараметрыОшибки.ИдентификаторБанка = Выборка.ИдентификаторБанка;
			ПараметрыОшибки.ИдентификаторДокумента = Выборка.Идентификатор;
			ПараметрыОшибки.ОтправитьВ1С = Истина;
			ЗаписатьОшибку(КонтекстОбменаССервисом.ОписаниеОшибок, ПараметрыОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьРазметкуВБанк(ДополнительныеПараметры)
	
	ДанныеДляОтправкиВБанк = НовыеДанныеДляОтправки();
	ВсеДокументы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
		|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации
		|		ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(БанковскиеДокументыАУСН.Документ) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
		|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк
		|		ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк
		|	КОНЕЦ КАК Банк
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.ОтправитьВБанк
		|ИТОГИ
		|	МИНИМУМ(Банк)
		|ПО
		|	Организация,
		|	БанковскийСчет";
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			СтрокаДанных = ДанныеДляОтправкиВБанк.Добавить();
			СтрокаДанных.Организация = ВыборкаОрганизация.Организация;
			СтрокаДанных.Банк = ВыборкаСчет.Банк;
			СтрокаДанных.БанковскийСчет = ВыборкаСчет.БанковскийСчет;
			БанковскиеОперации = Новый Массив;
			ВыборкаДокументы = ВыборкаСчет.Выбрать();
			Пока ВыборкаДокументы.Следующий() Цикл
				ВсеДокументы.Вставить(ВыборкаДокументы.Документ, ВыборкаДокументы.Идентификатор);
				БанковскиеОперации.Добавить(ВыборкаДокументы.Документ);
			КонецЦикла;
			СтрокаДанных.БанковскиеОперации = БанковскиеОперации;
		КонецЦикла;
	КонецЦикла;
	
	ПодготовитьДанныеОБезналичныхОперацияхВФорматеФНС(ДанныеДляОтправкиВБанк, ВсеДокументы, ДополнительныеПараметры.ОписаниеОшибокОтправки);
	
	ОтправленныеДокументы = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеДляОтправкиВБанк Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ДанныеВФорматеФНС) Тогда
			Продолжить;
		КонецЕсли;
		
		Банк = СтрокаДанных.Банк;
		
		МенеджерЗаписи = РегистрыСведений.ДокументыАУСН.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = СтрокаДанных.Организация;
		МенеджерЗаписи.Тип = Перечисления.ТипыДокументовАУСН.БанковскаяВыпискаСРучнойРазметкой;
		МенеджерЗаписи.Идентификатор = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.ИдентификаторБанка = РегистрыСведений.БанкиАУСН.Идентификатор(Банк);
		МенеджерЗаписи.Статус = Перечисления.СтатусыДокументовАУСН.ОжидаетОтправкиВБанк;
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(СтрокаДанных.ДанныеВФорматеФНС);
		МенеджерЗаписи.ДатаИзменения = ТекущаяУниверсальнаяДата();
		МенеджерЗаписи.Записать();
		
		Если ОтправитьДокументВБанк(МенеджерЗаписи, ДополнительныеПараметры.ОтправленныеДанные) Тогда
			Для Каждого БанковскаяОперация Из СтрокаДанных.БанковскиеОперации Цикл
				Если ВсеДокументы[БанковскаяОперация] <> Неопределено Тогда
					ОтправленныеДокументы.Добавить(БанковскаяОперация);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияАУСНБП.ИзменитьОтправкуВБанк(ОтправленныеДокументы, Ложь);
	
КонецПроцедуры

Функция НужноВыполнятьРегламентноеЗадание()
	
	Возврат РегистрыСведений.СостоянияИнтеграцииАУСН.СервисПодключен();
	
КонецФункции

// Создает в регистре сведений ДокументыАУСН записи с данными расчета НДФЛ для последующей отправки в банк.
// При наличии ошибок, добавляет информацию о них в таблицу Ошибки.
//
// Параметры:
//  Ошибки - см. НовыйОписаниеОшибокОтправки
//
Процедура ОтправитьРасчетыНДФЛАУСНВБанк(Ошибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыНДФЛАУСН.Регистратор КАК Выплата,
		|	РасчетыНДФЛАУСН.Организация КАК Организация,
		|	РасчетыНДФЛАУСН.Ведомость КАК Ведомость,
		|	РасчетыНДФЛАУСН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНДФЛАУСН.НалоговыйПериод КАК НалоговыйПериод,
		|	РасчетыНДФЛАУСН.КодДохода КАК КодДохода,
		|	РасчетыНДФЛАУСН.КодВычета КАК КодВычета,
		|	РасчетыНДФЛАУСН.КодНеоблагаемогоВзносамиДохода КАК КодНеоблагаемогоВзносамиДохода,
		|	РасчетыНДФЛАУСН.СуммаДохода КАК СуммаДохода,
		|	РасчетыНДФЛАУСН.СуммаВычета КАК СуммаВычета,
		|	РасчетыНДФЛАУСН.СуммаНеоблагаемаяВзносами КАК СуммаНеоблагаемаяВзносами,
		|	РасчетыНДФЛАУСН.СуммаНДФЛ КАК СуммаНДФЛ,
		|	РасчетыНДФЛАУСН.СуммаНДФЛУдержаный КАК СуммаНДФЛУдержаный,
		|	РасчетыНДФЛАУСН.СуммаНДФЛПеречисленный КАК СуммаНДФЛПеречисленный,
		|	РасчетыНДФЛАУСН.Регистратор.СчетОрганизации.Банк КАК Банк,
		|	РасчетыНДФЛАУСН.Организация.ИНН КАК ОрганизацияИНН,
		|	РасчетыНДФЛАУСН.Регистратор.ДатаВходящегоДокумента КАК ДатаПлатежа,
		|	БанковскиеДокументыАУСН.Идентификатор КАК ИдентификаторБО,
		|	ВедомостьНаВыплатуЗарплатыВБанкСостав.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект КАК ЗарплатныйПроект
		|ПОМЕСТИТЬ ВТРасчетыНДФЛАУСН
		|ИЗ
		|	РегистрНакопления.РасчетыНДФЛАУСН КАК РасчетыНДФЛАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|		ПО РасчетыНДФЛАУСН.Регистратор = БанковскиеДокументыАУСН.Документ
		|			И РасчетыНДФЛАУСН.Организация = БанковскиеДокументыАУСН.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК ВедомостьНаВыплатуЗарплатыВБанкСостав
		|		ПО РасчетыНДФЛАУСН.Ведомость = ВедомостьНаВыплатуЗарплатыВБанкСостав.Ссылка
		|			И РасчетыНДФЛАУСН.ФизическоеЛицо = ВедомостьНаВыплатуЗарплатыВБанкСостав.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
		|		ПО РасчетыНДФЛАУСН.Ведомость = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
		|ГДЕ
		|	РасчетыНДФЛАУСН.ОтправитьВБанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыНДФЛАУСН.Выплата КАК Выплата,
		|	РасчетыНДФЛАУСН.Организация КАК Организация,
		|	РасчетыНДФЛАУСН.Ведомость КАК Ведомость,
		|	РасчетыНДФЛАУСН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНДФЛАУСН.НалоговыйПериод КАК НалоговыйПериод,
		|	РасчетыНДФЛАУСН.КодДохода КАК КодДохода,
		|	РасчетыНДФЛАУСН.КодВычета КАК КодВычета,
		|	РасчетыНДФЛАУСН.КодНеоблагаемогоВзносамиДохода КАК КодНеоблагаемогоВзносамиДохода,
		|	РасчетыНДФЛАУСН.СуммаДохода КАК СуммаДохода,
		|	РасчетыНДФЛАУСН.СуммаВычета КАК СуммаВычета,
		|	РасчетыНДФЛАУСН.СуммаНеоблагаемаяВзносами КАК СуммаНеоблагаемаяВзносами,
		|	РасчетыНДФЛАУСН.СуммаНДФЛ КАК СуммаНДФЛ,
		|	РасчетыНДФЛАУСН.СуммаНДФЛУдержаный КАК СуммаНДФЛУдержаный,
		|	РасчетыНДФЛАУСН.СуммаНДФЛПеречисленный КАК СуммаНДФЛПеречисленный,
		|	РасчетыНДФЛАУСН.Банк КАК Банк,
		|	РасчетыНДФЛАУСН.ОрганизацияИНН КАК ОрганизацияИНН,
		|	РасчетыНДФЛАУСН.ДатаПлатежа КАК ДатаПлатежа,
		|	РасчетыНДФЛАУСН.ИдентификаторБО КАК ИдентификаторБО,
		|	РасчетыНДФЛАУСН.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РасчетыНДФЛАУСН.ЗарплатныйПроект КАК ЗарплатныйПроект
		|ИЗ
		|	ВТРасчетыНДФЛАУСН КАК РасчетыНДФЛАУСН
		|ИТОГИ
		|	СУММА(СуммаДохода),
		|	СУММА(СуммаВычета),
		|	СУММА(СуммаНеоблагаемаяВзносами),
		|	СУММА(СуммаНДФЛ),
		|	СУММА(СуммаНДФЛУдержаный),
		|	СУММА(СуммаНДФЛПеречисленный),
		|	МИНИМУМ(Банк),
		|	МИНИМУМ(ОрганизацияИНН),
		|	МИНИМУМ(ДатаПлатежа),
		|	МИНИМУМ(ИдентификаторБО),
		|	МИНИМУМ(ИдентификаторСтроки),
		|	МИНИМУМ(ЗарплатныйПроект)
		|ПО
		|	Организация,
		|	Ведомость,
		|	Выплата,
		|	ФизическоеЛицо,
		|	НалоговыйПериод,
		|	КодДохода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	ВТРасчетыНДФЛАУСН КАК СведенияОДоходах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТФизЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеФизЛиц.ИНН КАК ИНН,
		|	ДанныеФизЛиц.СтраховойНомерПФР КАК СНИЛС,
		|	ДанныеФизЛиц.Фамилия КАК Фамилия,
		|	ДанныеФизЛиц.Имя КАК Имя,
		|	ДанныеФизЛиц.Отчество КАК Отчество,
		|	ДанныеФизЛиц.ДатаРождения КАК ДатаРождения,
		|	ЕСТЬNULL(ГражданствоФизическихЛицСрезПоследних.Страна.Код, ""643"") КАК Гражданство,
		|	ДанныеФизЛиц.Пол КАК Пол,
		|	ЕСТЬNULL(ДанныеПаспортаРФ.ВидДокумента.КодМВД, """") КАК КодВидаДокумента,
		|	ЕСТЬNULL(ДанныеПаспортаРФ.Серия, """") КАК Серия,
		|	ЕСТЬNULL(ДанныеПаспортаРФ.Номер, """") КАК Номер,
		|	ЕСТЬNULL(ДанныеИногоДокумента.ВидДокумента.КодМВД, """") КАК КодВидаДокументаДоп,
		|	ЕСТЬNULL(ДанныеИногоДокумента.Серия, """") КАК СерияДоп,
		|	ЕСТЬNULL(ДанныеИногоДокумента.Номер, """") КАК НомерДоп
		|ИЗ
		|	ВТФизЛица КАК ВТФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ДанныеФизЛиц
		|		ПО ВТФизЛица.ФизическоеЛицо = ДанныеФизЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(, ) КАК ГражданствоФизическихЛицСрезПоследних
		|		ПО ВТФизЛица.ФизическоеЛицо = ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(, ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДанныеПаспортаРФ
		|		ПО ВТФизЛица.ФизическоеЛицо = ДанныеПаспортаРФ.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(, ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДанныеИногоДокумента
		|		ПО ВТФизЛица.ФизическоеЛицо = ДанныеИногоДокумента.Физлицо";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	НомерЗапросаОтчета       = 1;
	НомерЗапросаДанныеФЛ     = 3;
	
	РезультатЗапросаДанныеФЛ = РезультатыЗапроса[НомерЗапросаДанныеФЛ];
	РезультатЗапроса         = РезультатыЗапроса[НомерЗапросаОтчета]; 
	
	Если РезультатЗапросаДанныеФЛ.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	НаборДанныхФЛ = Новый Соответствие;
	ДанныеФЛСОшибками = Новый Соответствие;
	ВыборкаДанныеФЛ = РезультатЗапросаДанныеФЛ.Выбрать();
	
	Пока ВыборкаДанныеФЛ.Следующий() Цикл
		НекорректныеРеквизиты = НовыйРеквизитыОшибкиОтправки();
		ТекстОшибки = "";
		Если Не ИнтеграцияАУСНКлиентСервер.ИННСоответствуетПротоколуОбмена(ВыборкаДанныеФЛ.ИНН, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "ИНН";
			РеквизитОшибка.Синоним = НСтр("ru = 'ИНН'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(
			ВыборкаДанныеФЛ.СНИЛС, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "СНИЛС";
			РеквизитОшибка.Синоним = НСтр("ru = 'СНИЛС'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ОбработанныйТекстОшибки(ТекстОшибки);
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.ФИОСоответствуетПротоколуОбмена(ВыборкаДанныеФЛ.Фамилия, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "Фамилия";
			РеквизитОшибка.Синоним = НСтр("ru = 'Фамилия'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.ФИОСоответствуетПротоколуОбмена(ВыборкаДанныеФЛ.Имя, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "Имя";
			РеквизитОшибка.Синоним = НСтр("ru = 'Имя'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДанныеФЛ.Отчество)
			И Не ИнтеграцияАУСНКлиентСервер.ФИОСоответствуетПротоколуОбмена(ВыборкаДанныеФЛ.Отчество, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "Отчество";
			РеквизитОшибка.Синоним = НСтр("ru = 'Отчество'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.ПолФизическогоЛицаСоответствуетПротоколуОбмена(
			ВыборкаДанныеФЛ.Пол, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "Пол";
			РеквизитОшибка.Синоним = НСтр("ru = 'Пол'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.КодГражданстваСоответствуетПротоколуОбмена(
			ВыборкаДанныеФЛ.Гражданство, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита = "Страна";
			РеквизитОшибка.Синоним = НСтр("ru = 'Страна гражданства'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДанныеФЛ.КодВидаДокумента) Тогда
			КодВидаДокумента = ВыборкаДанныеФЛ.КодВидаДокумента;
			Серия = ВыборкаДанныеФЛ.Серия;
			Номер = ВыборкаДанныеФЛ.Номер;
		Иначе
			КодВидаДокумента = ВыборкаДанныеФЛ.КодВидаДокументаДоп;
			Серия = ВыборкаДанныеФЛ.СерияДоп;
			Номер = ВыборкаДанныеФЛ.НомерДоп;
		КонецЕсли;
		ВидДокумента = ДокументыФизическихЛицБП.ВидДокументаПоКодуФНС(КодВидаДокумента);
		Если Не ИнтеграцияАУСНВызовСервера.ВидДокументаСоответствуетПротоколуОбмена(ВидДокумента, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита =
				СтрШаблон("%1ВидДокумента", ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаСведенийДокумента());
			РеквизитОшибка.Синоним = НСтр("ru = 'Вид документа'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.СерияДокументаСоответствуетПротоколуОбмена(ВидДокумента, Серия, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита =
				СтрШаблон("%1Серия", ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаСведенийДокумента());
			РеквизитОшибка.Синоним = НСтр("ru = 'Серия'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если Не ИнтеграцияАУСНКлиентСервер.НомерДокументаСоответствуетПротоколуОбмена(ВидДокумента, Номер, ТекстОшибки) Тогда
			РеквизитОшибка = НекорректныеРеквизиты.Добавить();
			РеквизитОшибка.ИмяРеквизита =
				СтрШаблон("%1Номер", ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаСведенийДокумента());
			РеквизитОшибка.Синоним = НСтр("ru = 'Номер'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = ТекстОшибки;
			ТекстОшибки = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(НекорректныеРеквизиты) Тогда
			ДанныеФЛСОшибками.Вставить(ВыборкаДанныеФЛ.ФизическоеЛицо, НекорректныеРеквизиты);
		КонецЕсли;
		ДанныеФЛ = НовыйДанныеФЛ();
		ЗаполнитьЗначенияСвойств(ДанныеФЛ, ВыборкаДанныеФЛ);
		НаборДанныхФЛ.Вставить(ВыборкаДанныеФЛ.ФизическоеЛицо, ДанныеФЛ);
	КонецЦикла;
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ФабрикаСервисаАУСН = ФабрикаПротоколаОбмена(АктуальнаяВерсияПротоколаОбмена());

	ТипЗапрос = ФабрикаСервисаАУСН.Пакеты.Получить(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0").КорневыеСвойства.Получить(
		"PostEmployeeInfoRequest").Тип;
	
	ТипОбъектаEmployeeInfo = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"EmployeeInfo");
	
	ТипОбъектаReorganizationInfo = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"ReorganizationInfo");
	
	ТипEmployeeIncomeInfo = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"EmployeeIncomeInfo");
	
	ТипDeductionsInfo = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"DeductionsInfo");
	
	ТипUninsuredPaymentInfo = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"UninsuredPaymentInfo");
	
	ТипОбъектаEmployees = ФабрикаСервисаАУСН.Тип(
		"urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0",
		"Employees");
			
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтправленныеДокументы = Новый Массив;
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		Организация = ВыборкаОрганизация.Организация;
		Банк = ВыборкаОрганизация.Банк;
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
		ИдентификаторБанка = ИнтеграцияАУСНПовтИсп.ИдентификаторБанка(БИК);
		
		ОбъектЗапрос = ФабрикаСервисаАУСН.Создать(ТипЗапрос);
		
		ВыборкаВедомость = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КОтправке = Новый Соответствие;
		ВыплатыСОшибками = Новый Массив;
		
		Пока ВыборкаВедомость.Следующий() Цикл
			
			ВыборкаВыплата = ВыборкаВедомость.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВыплата.Следующий() Цикл
				
				ЕстьОшибки = Не ВедомостьИДвиженияРасчетыНДФЛСоответствуютПротоколуОбмена(
					ВыборкаВыплата, Организация, ИдентификаторБанка, Ошибки);
				
				ИспользуемыеИНН = Новый Массив;
				ИспользуемыеДокументы = Новый Массив;
				ИспользуемыеСНИЛС = Новый Массив;
				
				EmployeeInfo = ФабрикаСервисаАУСН.Создать(ТипОбъектаEmployeeInfo);
				
				Если ЗначениеЗаполнено(ВыборкаВыплата.ЗарплатныйПроект) Тогда
					EmployeeInfo.id = Строка(ВыборкаВыплата.Ведомость.УникальныйИдентификатор());
				Иначе
					EmployeeInfo.id = Строка(ВыборкаВыплата.ИдентификаторСтроки);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(EmployeeInfo.id) Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					ПараметрыОшибки.Объект = ВыборкаВыплата.Выплата;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					РеквизитОшибка.ИмяРеквизита = СтрШаблон("%1Ведомость", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
					РеквизитОшибка.Синоним = "Ведомость";
					РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Укажите ведомость на выплату зарплаты'",
						ОбщегоНазначения.КодОсновногоЯзыка());
					ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
				КонецЕсли;
				
				ВедомостьЗаполнена = ЗначениеЗаполнено(ВыборкаВыплата.Ведомость);
				
				EmployeeInfo.LastModifiedDate = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(
					ТекущаяДатаСеанса());
				
				EmployeeInfo.BankOperationId = ВыборкаВыплата.ИдентификаторБО;
				EmployeeInfo.PaymentDate = ВыборкаВыплата.ДатаПлатежа;
				EmployeeInfo.Inn = ВыборкаОрганизация.ОрганизацияИНН;
				
				ВыборкаФизическоеЛицо = ВыборкаВыплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаФизическоеЛицо.Следующий() Цикл
					
					НайденныеОшибки = ДанныеФЛСОшибками.Получить(ВыборкаФизическоеЛицо.ФизическоеЛицо);
					Если НайденныеОшибки <> Неопределено Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						ПараметрыОшибки.Объект = ВыборкаФизическоеЛицо.ФизическоеЛицо;
						ПараметрыОшибки.Реквизиты = НайденныеОшибки;
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
					
					ДанныеФЛ = НаборДанныхФЛ[ВыборкаФизическоеЛицо.ФизическоеЛицо];
					
					Employees = ФабрикаСервисаАУСН.Создать(ТипОбъектаEmployees);
					EmployeeInfo.Employees.Добавить(Employees);
					
					Employees.EmployeeInn = ДанныеФЛ.ИНН;
					Employees.Snils       = ДанныеФЛ.СНИЛС;
					Employees.FirstName   = ДанныеФЛ.Имя;
					Employees.LastName    = ДанныеФЛ.Фамилия;
					Employees.Patronymic  = ДанныеФЛ.Отчество;
					Employees.Birthdate   = ДанныеФЛ.ДатаРождения;
					Employees.Citizenship = ДанныеФЛ.Гражданство;
					
					Если ДанныеФЛ.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Employees.Gender = 2;
					Иначе
						Employees.Gender = 1;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеФЛ.КодВидаДокумента) Тогда
						Employees.DocumentTypeCode = ДанныеФЛ.КодВидаДокумента;
						Employees.DocumentNumber   = СокрЛП(СтрШаблон("%1 %2", ДанныеФЛ.Серия, ДанныеФЛ.Номер));
					Иначе
						Employees.DocumentTypeCode = ДанныеФЛ.КодВидаДокументаДоп;
						Employees.DocumentNumber   = СокрЛП(СтрШаблон("%1 %2", ДанныеФЛ.СерияДоп, ДанныеФЛ.НомерДоп));
					КонецЕсли;
					
					Если ВедомостьЗаполнена Тогда
						Если ИспользуемыеИНН.Найти(ДанныеФЛ.ИНН) = Неопределено Тогда
							ИспользуемыеИНН.Добавить(ДанныеФЛ.ИНН);
						Иначе
							ЕстьОшибки = Истина;
							ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
							ПараметрыОшибки.Организация = Организация;
							ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
							ПараметрыОшибки.Объект = ВыборкаВыплата.Ведомость;
							РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
							РеквизитОшибка.ИмяРеквизита = "ФизическоеЛицо";
							РеквизитОшибка.Синоним = НСтр("ru = 'Сотрудник'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки =
								НСтр("ru = 'В одной ведомости не должно быть сотрудников с одинаковым ИНН'", КодЯзыка);
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
					
						Если ИспользуемыеСНИЛС.Найти(ДанныеФЛ.СНИЛС) = Неопределено Тогда
							ИспользуемыеСНИЛС.Добавить(ДанныеФЛ.СНИЛС);
						Иначе
							ЕстьОшибки = Истина;
							ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
							ПараметрыОшибки.Организация = Организация;
							ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
							ПараметрыОшибки.Объект = ВыборкаВыплата.Ведомость;
							РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
							РеквизитОшибка.ИмяРеквизита = "ФизическоеЛицо";
							РеквизитОшибка.Синоним = НСтр("ru = 'Сотрудник'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки =
								НСтр("ru = 'В одной ведомости не должно быть сотрудников с одинаковым СНИЛС'", КодЯзыка);
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
						
						ПроверяемыеПараметрыДокумента = СтрШаблон("%1_%2", Employees.DocumentTypeCode, Employees.DocumentNumber);
					
						Если ИспользуемыеДокументы.Найти(ПроверяемыеПараметрыДокумента) = Неопределено Тогда
							ИспользуемыеДокументы.Добавить(ПроверяемыеПараметрыДокумента);
						Иначе
							ЕстьОшибки = Истина;
							ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
							ПараметрыОшибки.Организация = Организация;
							ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
							ПараметрыОшибки.Объект = ВыборкаВыплата.Ведомость;
							РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
							РеквизитОшибка.ИмяРеквизита = "ФизическоеЛицо";
							РеквизитОшибка.Синоним = НСтр("ru = 'Сотрудник'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки = НСтр(
								"ru = 'В одной ведомости не должно быть сотрудников с одинаковыми данными документа, подтверждающего личность'",
								КодЯзыка);
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
					
					КонецЕсли;
					
					ВыборкаНалоговыйПериод = ВыборкаФизическоеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаНалоговыйПериод.Следующий() Цикл
						
						ВыборкаКодДохода = ВыборкаНалоговыйПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаКодДохода.Следующий() Цикл
							
							EmployeeIncomeInfo = ФабрикаСервисаАУСН.Создать(ТипEmployeeIncomeInfo);
							Employees.EmployeeIncomeInfo.Добавить(EmployeeIncomeInfo);
							
							EmployeeIncomeInfo.PaymentCalculationMonth = Месяц(ВыборкаНалоговыйПериод.НалоговыйПериод);
							EmployeeIncomeInfo.PaymentCalculationYear  = Год(ВыборкаНалоговыйПериод.НалоговыйПериод);
							
							ТекстОшибки = "";
							Если Не ИнтеграцияАУСНКлиентСервер.ДатаРожденияСоответствуетПротоколуОбмена(
								ДанныеФЛ.ДатаРождения, ТекстОшибки, EmployeeIncomeInfo.PaymentCalculationYear) Тогда
								ЕстьОшибки = Истина;
								ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
								ПараметрыОшибки.Организация = Организация;
								ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
								ПараметрыОшибки.Объект = ВыборкаФизическоеЛицо.ФизическоеЛицо;
								РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
								РеквизитОшибка.ИмяРеквизита = "ДатаРождения";
								РеквизитОшибка.Синоним = НСтр("ru = 'Дата рождения'", КодЯзыка);
								РеквизитОшибка.ТекстОшибки = ТекстОшибки;
								ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
							КонецЕсли;
							
							EmployeeIncomeInfo.PaymentCode         = ВыборкаКодДохода.КодДохода;
							EmployeeIncomeInfo.PaymentAmount       = ВыборкаКодДохода.СуммаДохода;
							EmployeeIncomeInfo.CalculatedTaxAmount = ВыборкаКодДохода.СуммаНДФЛ;
							EmployeeIncomeInfo.WithholdTaxAmount   = ВыборкаКодДохода.СуммаНДФЛУдержаный;
							EmployeeIncomeInfo.PaidTaxAmount       = ВыборкаКодДохода.СуммаНДФЛПеречисленный;
							
							ВыборкаДетальныеЗаписи = ВыборкаКодДохода.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодВычета)
									Или ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаВычета) Тогда
									
									DeductionsInfo = ФабрикаСервисаАУСН.Создать(ТипDeductionsInfo);
									
									DeductionsInfo.Code = ВыборкаДетальныеЗаписи.КодВычета;
									DeductionsInfo.Amount = ВыборкаДетальныеЗаписи.СуммаВычета;
									
									EmployeeIncomeInfo.DeductionsInfo.Добавить(DeductionsInfo);
									
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодНеоблагаемогоВзносамиДохода)
									Или ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаНеоблагаемаяВзносами) Тогда
									
									UninsuredPaymentInfo = ФабрикаСервисаАУСН.Создать(ТипUninsuredPaymentInfo);
									
									UninsuredPaymentInfo.Code = ВыборкаДетальныеЗаписи.КодНеоблагаемогоВзносамиДохода;
									UninsuredPaymentInfo.Amount = ВыборкаДетальныеЗаписи.СуммаНеоблагаемаяВзносами;
									
									EmployeeIncomeInfo.UninsuredPaymentInfo.Добавить(UninsuredPaymentInfo);
									
								КонецЕсли;
							
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				Если Не ЕстьОшибки Тогда
					ЭлементКОтправке = КОтправке.Получить(ВыборкаВыплата.Выплата);
					Если ЭлементКОтправке = Неопределено Тогда
						ДанныеВыплаты = Новый Массив;
						ДанныеВыплаты.Добавить(EmployeeInfo);
						КОтправке.Вставить(ВыборкаВыплата.Выплата, ДанныеВыплаты);
					Иначе
						ЭлементКОтправке.Добавить(EmployeeInfo);
					КонецЕсли;
				Иначе
					ВыплатыСОшибками.Добавить(ВыборкаВыплата.Выплата);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКОтправке Из КОтправке Цикл
			Если ВыплатыСОшибками.Найти(ЭлементКОтправке.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтправленныеДокументы.Добавить(ЭлементКОтправке.Ключ);
			Для Каждого ИнформацияВыплаты Из ЭлементКОтправке.Значение Цикл
				ОбъектЗапрос.EmployeeInfos.Добавить(ИнформацияВыплаты);
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ОбъектЗапрос.EmployeeInfos) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		
		ФабрикаСервисаАУСН.ЗаписатьXML(ЗаписьXML, ОбъектЗапрос, "PostEmployeeInfoRequest");
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(СтрШаблон("%1%2", ВременныйКаталог, "manifest.json"));
		ДанныеМанифеста = Новый Структура;
		ДанныеМанифеста.Вставить("version", АктуальнаяВерсияПротоколаОбмена());
		ДанныеМанифеста.Вставить("request", "PostEmployeeInfoRequest.xml");
		ЗаписатьJSON(ЗаписьJSON, ДанныеМанифеста);
		ЗаписьJSON.Закрыть();
		
		ТекстXML = УпаковатьЗапросВКонтейнерSendMessageAsync(ЗаписьXML.Закрыть());
		
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ТекстXML);
		Текст.Записать(СтрШаблон("%1%2", ВременныйКаталог, "PostEmployeeInfoRequest.xml"));
		
		ИмяАрхива = СтрШаблон("%1%2", ВременныйКаталог, "PostEmployeeInfoRequest.zip");
		Архиватор = Новый ЗаписьZipФайла(ИмяАрхива);
		Архиватор.Добавить(СтрШаблон("%1%2", ВременныйКаталог, "manifest.json"));
		Архиватор.Добавить(СтрШаблон("%1%2", ВременныйКаталог, "PostEmployeeInfoRequest.xml"));
		Архиватор.Записать();
		
		Результат = ОбщегоНазначенияБПКлиентСервер.СтрокаBase64(Новый ДвоичныеДанные(ИмяАрхива));
		
		МенеджерЗаписи = РегистрыСведений.ДокументыАУСН.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Тип = Перечисления.ТипыДокументовАУСН.РасчетНДФЛ;
		МенеджерЗаписи.Идентификатор = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.ИдентификаторБанка = РегистрыСведений.БанкиАУСН.Идентификатор(Банк);
		МенеджерЗаписи.Статус = Перечисления.СтатусыДокументовАУСН.ОжидаетОтправкиВБанк;
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Результат);
		МенеджерЗаписи.ДатаИзменения = ТекущаяУниверсальнаяДата();
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтправленныеДокументы) Тогда
		НаборЗаписей = РегистрыНакопления.РасчетыНДФЛАУСН.СоздатьНаборЗаписей();
	КонецЕсли;
	Для Каждого ОтправленныйДокумент Из ОтправленныеДокументы Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ОтправленныйДокумент);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ОтправитьВБанк = Ложь;
		КонецЦикла;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтправленоВБанк", Истина);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНовыеДокументыИзСервиса(Знач Организация, Знач ИдентификаторБанка, ДополнительныеПараметры)
	
	ОписаниеОшибок = ДополнительныеПараметры.ОписаниеОшибок;
	ПолучившиеОтветСервиса = ДополнительныеПараметры.ПолучившиеОтветСервиса;
	
	ПараметрыМетода = ПараметрыМетодаДляПолученияНовыхДокументов(Организация, ИдентификаторБанка);
	ПовторитьПоиск = Истина;
	ПолученныеДокументы = Новый Массив;
	Метка = "";
	Успешно = Ложь;
	
	Пока ПовторитьПоиск Цикл
		Ответ = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
		СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
		
		ПолученныеВТекущейИтерации = Новый Массив;
		
		Если Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
			ПараметрыОшибки = НовыйПараметрыОшибки();
			ПараметрыОшибки.ТекстОшибки = ТекстОшибкиВыполненияМетода(ПараметрыМетода, Ответ);
			ПараметрыОшибки.Организация = Организация;
			ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
			ПараметрыОшибки.ОтправитьВ1С = Истина;
			ЗаписатьОшибку(ОписаниеОшибок, ПараметрыОшибки);
		КонецЕсли;
		
		Если Не Ответ.Статус = СтатусыЗапросов.Выполнено 
			Или Не Ответ.Результат.Свойство("documents", ПолученныеВТекущейИтерации) Тогда
			Успешно = Ложь;
			Прервать;
		КонецЕсли;
		
		Успешно = Истина;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолученныеДокументы, ПолученныеВТекущейИтерации);
		
		ПовторитьПоиск = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "hasElse", Ложь);
		
		Если ПовторитьПоиск Тогда
			Метка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "cursor", "");
			Если Не ЗначениеЗаполнено(Метка) Тогда
				Прервать;
			Иначе
				ПараметрыМетода.Метка = Метка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Успешно Тогда
		// Зафиксируем, что для данного сочетания "Организация - Банк" есть ответ от сервиса
		СтрокаПодключеноУспешно = ПолучившиеОтветСервиса.Добавить();
		СтрокаПодключеноУспешно.Организация = Организация;
		СтрокаПодключеноУспешно.ИдентификаторБанка = ИдентификаторБанка;
	КонецЕсли;
	
	ОрганизацииУчастникиОбмена = Новый Соответствие;
	Для Каждого Документ Из ПолученныеДокументы Цикл
		Ошибки = Новый Массив;
		ОтправитьВ1С = Ложь;
		ОрганизацияДокумента = ОрганизацияДокумента(ОрганизацииУчастникиОбмена, Документ.inn);
		Если Не ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В базе отсутствует организация с ИНН ""%1""'"), Документ.inn);
			Ошибки.Добавить(ОписаниеОшибки);
			ОтправитьВ1С = Истина;
		КонецЕсли;
		
		ТипДокумента = Перечисления.ТипыДокументовАУСН.ЗначениеПоИдентификатору(Документ.type);
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Неизвестный тип документа %1 (ID %2)'"), Документ.type, Документ.ueid);
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
		Если Ошибки.Количество() > 0 Тогда
			ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
			ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки);
			ПараметрыОшибки = НовыйПараметрыОшибки();
			ПараметрыОшибки.Организация = Организация;
			ПараметрыОшибки.ИдентификаторБанка = Документ.bankUeid;
			ПараметрыОшибки.ИдентификаторДокумента = Документ.ueid;
			ПараметрыОшибки.ТекстОшибки = ОписаниеОшибки;
			Если ОтправитьВ1С Тогда
				ПараметрыОшибки.ОтправитьВ1С = Истина;
			Иначе
				ПараметрыОшибки.ОтправитьВБанк = Истина;
			КонецЕсли;
			ЗаписатьОшибку(ОписаниеОшибок, ПараметрыОшибки);
			Продолжить;
		КонецЕсли;
		
		СтатусДокумента = Перечисления.СтатусыДокументовАУСН.ОтправленоПользователю;
		
		ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
		ДатаИзменения = ОписаниеТипаДата.ПривестиЗначение(Документ.createdAt); // Нас интересует дата получения сведений банком, а не изменение статусов
		Если ЗначениеЗаполнено(ДатаИзменения) Тогда
			// при десериализации для удобства разработчика платформа приводит дату к часовому поясу сеанса
			ДатаИзменения = УниверсальноеВремя(ДатаИзменения);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.ДокументыАУСН.ЗаписатьДокумент(
			Организация, 
			ТипДокумента,
			Документ.ueid,
			СтатусДокумента,
			Документ.data,
			Документ.bankUeid,
			ДатаИзменения);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеОДокументахСОшибками(ОписаниеОшибок)
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыСОшибками = ОписаниеОшибок.Скопировать( , "Организация, ИдентификаторБанка, ИдентификаторДокумента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДокументыСОшибками.Организация КАК Организация,
		|	ВТ_ДокументыСОшибками.ИдентификаторБанка КАК ИдентификаторБанка,
		|	ВТ_ДокументыСОшибками.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ПОМЕСТИТЬ ВТ_ДокументыСОшибками
		|ИЗ
		|	&ДокументыСОшибками КАК ВТ_ДокументыСОшибками
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДокументыСОшибками.Организация КАК Организация,
		|	ВТ_ДокументыСОшибками.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ВЫБОР
		|		КОГДА ДокументыАУСН.Идентификатор ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДокументЗаписанВБазе,
		|	ВТ_ДокументыСОшибками.ИдентификаторБанка КАК ИдентификаторБанка
		|ИЗ
		|	ВТ_ДокументыСОшибками КАК ВТ_ДокументыСОшибками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|		ПО ВТ_ДокументыСОшибками.ИдентификаторДокумента = ДокументыАУСН.Идентификатор";
	
	Запрос.УстановитьПараметр("ДокументыСОшибками", ДокументыСОшибками);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбновляемыеДокументы = Новый Массив;
	СтатусОшибка = Перечисления.СтатусыДокументовАУСН.ОшибкаОбработкиПользователем;
	СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
			ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия().ОбновитьСтатусДокумента);
		ПараметрыМетода.Организация = Выборка.Организация;
		ПараметрыМетода.ИдентификаторБанка = Выборка.ИдентификаторБанка;
		ПараметрыМетода.Идентификатор = Выборка.ИдентификаторДокумента;
		ПараметрыМетода.Статус = СтатусОшибка;
		
		ОтветСервиса = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
			
		Если ОтветСервиса.Статус = СтатусыЗапросов.Выполнено И Выборка.ДокументЗаписанВБазе Тогда
			ОбновляемыеДокументы.Добавить(Выборка.ИдентификаторДокумента);
		ИначеЕсли ОтветСервиса.Статус = СтатусыЗапросов.Ошибка Тогда
			ПараметрыОшибки = НовыйПараметрыОшибки();
			ПараметрыОшибки.ТекстОшибки = ТекстОшибкиВыполненияМетода(ПараметрыМетода, ОтветСервиса);
			ПараметрыОшибки.Организация = Выборка.Организация;
			ПараметрыОшибки.ИдентификаторБанка = Выборка.ИдентификаторБанка;
			ПараметрыОшибки.ИдентификаторДокумента = Выборка.ИдентификаторДокумента;
			ПараметрыОшибки.ОтправитьВ1С = Истина;
			ЗаписатьОшибку(ОписаниеОшибок, ПараметрыОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбновляемыеДокументы) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументыАУСН.Организация КАК Организация,
			|	ДокументыАУСН.Тип КАК Тип,
			|	ДокументыАУСН.Идентификатор КАК Идентификатор,
			|	ДокументыАУСН.ИдентификаторБанка КАК ИдентификаторБанка
			|ИЗ
			|	РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
			|ГДЕ
			|	ДокументыАУСН.Идентификатор В(&Идентификаторы)";
		
		Запрос.УстановитьПараметр("Идентификаторы", ОбновляемыеДокументы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ДокументыАУСН.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Статус = СтатусОшибка;
				СтрокаОшибка = ОписаниеОшибок.Найти(Выборка.Идентификатор, "ИдентификаторДокумента");
				Если СтрокаОшибка <> Неопределено Тогда
					МенеджерЗаписи.ТекстОшибки = СтрокаОшибка.ТекстОшибки;
				КонецЕсли;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспровестиДокументыНеИзСервисаАУСН(Выписки)
	
	ТекстЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	КоличествоЭлементов = Выписки.ВГраница();
	Для Индекс = 0 По КоличествоЭлементов Цикл
		Если Индекс <> 0 Тогда
			ТекстЗапроса.Добавить(
			"
			|
			|ОБЪЕДИНИТЬ
			|
			|");
		КонецЕсли;
			
			
		Схема = Новый СхемаЗапроса;
		ЭлементТекста =
		"ВЫБРАТЬ
		|	БанковскаяОперация.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК БанковскаяОперация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|		ПО (БанковскиеДокументыАУСН.Документ = БанковскаяОперация.Ссылка)
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ ЕСТЬ NULL
		|	И БанковскаяОперация.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	БанковскаяОперация.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК БанковскаяОперация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|		ПО (БанковскиеДокументыАУСН.Документ = БанковскаяОперация.Ссылка)
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ ЕСТЬ NULL
		|	И БанковскаяОперация.Проведен";
	
		Схема.УстановитьТекстЗапроса(ЭлементТекста);
		Если Индекс = 0 Тогда
			Схема.ПакетЗапросов[0].ВыбиратьРазрешенные = Истина;
		КонецЕсли;
		Операторы = Схема.ПакетЗапросов[0].Операторы;
		ИндексСтрокой = Формат(Индекс, "ЧН=0; ЧГ=;");
		Для Каждого Оператор Из Операторы Цикл
			Оператор.Отбор.Добавить(СтрШаблон("БанковскаяОперация.Организация = &Организация%1", ИндексСтрокой));
			Оператор.Отбор.Добавить(СтрШаблон("БанковскаяОперация.СчетОрганизации.Банк = &Банк%1", ИндексСтрокой));
			Оператор.Отбор.Добавить(
				СтрШаблон("БанковскаяОперация.Дата МЕЖДУ &ДатаНачала%1 И &ДатаОкончания%1", ИндексСтрокой));
		КонецЦикла;
		Запрос.УстановитьПараметр(СтрШаблон("Организация%1", ИндексСтрокой), Выписки[Индекс].Организация);
		Запрос.УстановитьПараметр(СтрШаблон("Банк%1", ИндексСтрокой), Выписки[Индекс].Банк);
		Запрос.УстановитьПараметр(СтрШаблон("ДатаНачала%1", ИндексСтрокой), НачалоДня(Выписки[Индекс].ДатаНачала));
		Запрос.УстановитьПараметр(СтрШаблон("ДатаОкончания%1", ИндексСтрокой), КонецДня(Выписки[Индекс].ДатаОкончания));
		ТекстЗапроса.Добавить(Схема.ПолучитьТекстЗапроса());
	КонецЦикла;

	Запрос.Текст = СтрСоединить(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Информация = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурналРегистрации(
				КраткоеПредставлениеОшибки(Информация),
				ПодробноеПредставлениеОшибки(Информация));
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Конструктор параметров расшифровки данных документа.
// 
// Возвращаемое значение:
//  Структура - Новые параметры расшифровки данных документа:
//   * Запрос  - ОбъектXDTO
//   * Ответ   - ОбъектXDTO
//   * Фабрика - ФабрикаXDTO
//
Функция НовыеПараметрыРасшифровкиДанныхДокумента()

	Результат = Новый Структура;
	
	Результат.Вставить("Запрос");
	Результат.Вставить("Ответ");
	Результат.Вставить("Фабрика");

	//@skip-check constructor-function-return-section
	Возврат Результат;

КонецФункции

Функция ИмяФайлаОписанияАрхиваСДаннымиДокумента()

	Возврат "manifest.json";
	
КонецФункции

Функция КлючиДанныхФайлаОписанияАрхиваСДаннымиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ВерсияПротокола", "version");
	Результат.Вставить("ФайлЗапроса", "request");
	Результат.Вставить("ФайлОтвета", "response");
	
	Возврат Результат;
	
КонецФункции

Функция ФабрикаПротоколаОбмена(Знач ВерсияПротокола)
	
	Если ДоступныеВерсииПротокола().Найти(ВерсияПротокола) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияПротокола =  СтрЗаменить(ВерсияПротокола, ".", "_");
	ИмяМакета = СтрШаблон("UsnPartnersMergedScheme_v%1", ВерсияПротокола);
	
	ДвоичныеДанныеСхемы = ПолучитьОбщийМакет(ИмяМакета);
	ВремФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	ДвоичныеДанныеСхемы.Записать(ВремФайлСхемы);
	Фабрика = СоздатьФабрикуXDTO(ВремФайлСхемы);
	УдалитьФайлы(ВремФайлСхемы);
	
	Возврат Фабрика;
	
КонецФункции

// Возвращает массив доступных версий протокола обмена АУСН
//
// Возвращаемое значение:
//   Массив из Строка - массив версий протокола
//
Функция ДоступныеВерсииПротокола()
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.1.1");
	МассивВерсий.Добавить("1.2.0");
	МассивВерсий.Добавить("1.2.1");
	МассивВерсий.Добавить("1.2.3");
	
	Возврат МассивВерсий;
	
КонецФункции

Функция ПолучитьДанныеФайлаXML(ФабрикаXDTO, КаталогФайлов, ИмяФайла, ЭтоФайлОтвета = Ложь)
	
	Перем Результат;
	
	ФайлДанных = НайтиФайлы(КаталогФайлов, ИмяФайла, Истина);
	Если ФайлДанных.Количество() = 0 Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			СтрШаблон(НСтр("ru = 'Не найден файл с запросом %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяФайла));
		Возврат Неопределено;
	КонецЕсли;
	ФайлДанных = ФайлДанных[0];
	
	ЧитаемыйФайлПоток = Новый ФайловыйПоток(ФайлДанных.ПолноеИмя, РежимОткрытияФайла.Открыть, ДоступКФайлу.Чтение);
	
	ТекстСтрокой = Новый ЧтениеТекста(ЧитаемыйФайлПоток, КодировкаТекста.UTF8);
	ПолученныеДанные = ТекстСтрокой.Прочитать();
	ТекстСтрокой.Закрыть();
	
	ТекстОтвета = "";
	Если ЭтоФайлОтвета Тогда // проверяем статус
	
		ЧитаемыйФайлПоток.Перейти(0, ПозицияВПотоке.Начало);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьПоток(ЧитаемыйФайлПоток);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Если ОбъектXDTO.Body.GetMessageResponse.ProcessingStatus = "COMPLETED" Тогда
			СодержимоеСообщения = СодержимоеВходящегоСообщенияXML(ПолученныеДанные);
		КонецЕсли;
	
	Иначе
		
		СодержимоеСообщения = СодержимоеВходящегоСообщенияXML(ПолученныеДанные);
		
	КонецЕсли;
	ПолученныеДанные = "";
	ЧитаемыйФайлПоток.Закрыть();
	
	Если Не ЗначениеЗаполнено(СодержимоеСообщения.ИмяУзла) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен()).КорневыеСвойства.Получить(СодержимоеСообщения.ИмяУзла);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеСообщения.Текст);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СвойствоXDTO.Тип);
	СодержимоеСообщения.Текст = "";
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция СодержимоеВходящегоСообщенияXML(КонвертSOAP)
	
	СодержимоеСообщения = НовыйСодержимоеСообщения();
	ИмяЭлемента = "message";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(КонвертSOAP);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени(ИмяЭлемента);
	Если СписокЭлементовDOM.Количество() > 0 Тогда
		ЭлементDOM = СписокЭлементовDOM.Элемент(0);
	Иначе
		Возврат СодержимоеСообщения;
	КонецЕсли;
	
	Если ЭлементDOM.ЕстьДочерниеУзлы() И ЭлементDOM.ДочерниеУзлы.Количество() = 1 Тогда
		ЭлементDOM = ЭлементDOM.ДочерниеУзлы.Элемент(0);
	Иначе
		Возврат СодержимоеСообщения;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементDOM) = Тип("ЭлементDOM") Тогда
		СодержимоеСообщения.ИмяУзла = ЭлементDOM.ИмяУзла;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ЭлементDOM, ЗаписьXML);
		СодержимоеСообщения.Текст = ЗаписьXML.Закрыть();
	КонецЕсли;
	
	Возврат СодержимоеСообщения;
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат "urn://x-artefacts-gnivc-ru/ais3/USN/UsnPartnersIntegrationService/types/1.0";
	
КонецФункции

Функция СловарьПлатежныхРеквизитовЕНС()
	
	// Для имен сервиса используются имена из метода 7.5, для имен программы - имена документа
	// ПлатежноеПоручение (где применимо).
	// В свою очередь, имена метода 7.5 основаны на нумерации полей платежного поручения,
	// приведенной в Положении ЦБ РФ "О правилах осуществления перевода денежных средств" (762-П)
	// См. также данные объекта РеквизитыОплаты в Обработка.ПомощникУплатыНалогаАУСН.ИдентификаторыДанныхПротоколаОбмена
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидПлатежа", "");
	Результат.Вставить("ИННПлательщика", "Inn");
	Результат.Вставить("КПППлательщика", "Field102");
	Результат.Вставить("НаименованиеПлательщика", "Field8");
	Результат.Вставить("СчетПлательщика");
	Результат.Вставить("БИКПлательщика");
	Результат.Вставить("КорреспондентскийСчетПлательщика");
	Результат.Вставить("БанкПлательщика");
	Результат.Вставить("ИННПолучателя", "Field61");
	Результат.Вставить("КПППолучателя", "Field103");
	Результат.Вставить("Получатель",     "Field16");
	Результат.Вставить("СчетПолучателя", "Field15");
	Результат.Вставить("БИКПолучателя", "Field14");
	Результат.Вставить("КорреспондентскийСчетПолучателя", "Field17");
	Результат.Вставить("БанкПолучателя", "Field13");
	Результат.Вставить("ВидОперации");
	Результат.Вставить("ОчередностьПлатежа");
	Результат.Вставить("НазначениеПлатежа", "Field24");
	Результат.Вставить("СтатусСоставителя", "Field101");
	Результат.Вставить("КодБК", "Field104");
	Результат.Вставить("КодОКАТО", "Field105");
	Результат.Вставить("ПоказательОснования", "Field106");
	Результат.Вставить("ПоказательПериода", "Field107");
	Результат.Вставить("ПоказательНомера", "Field108");
	Результат.Вставить("ПоказательДаты", "Field109");
	Результат.Вставить("ПоказательТипа");
	Результат.Вставить("ИдентификаторПлатежа", "Field22");
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьДокумент(Документ, КаталогРазбора, ДополнительныеПараметры)
	
	ДанныеДокумента = РасшифроватьДанныеДокумента(Документ, КаталогРазбора, ДополнительныеПараметры);
	
	Если ДанныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если Перечисления.ТипыДокументовАУСН.ЭтоДокументБанковскойВыписки(Документ.Тип) Тогда
			ИнтеграцияАУСНБП.ОбработатьПолученныеБанковскиеВыписки(Документ, ДанныеДокумента, ДополнительныеПараметры);
		ИначеЕсли Документ.Тип = Перечисления.ТипыДокументовАУСН.УведомлениеОтФНС Тогда
			УведомленияОтФНСАУСН.ОбработатьУведомлениеОтФНС(Документ, ДанныеДокумента, КаталогРазбора);
		ИначеЕсли РегистрыСведений.НалоговыеНачисленияАУСН.ЭтоИсточникДанныхИзСервиса(Документ.Тип) Тогда
			РегистрыСведений.НалоговыеНачисленияАУСН.ЗаписатьДанныеИзСервиса(
				ДанныеДокумента,
				Документ,
				ДополнительныеПараметры.ОписаниеОшибок);
		КонецЕсли;
	Исключение
		КраткийТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось разобрать документ %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Документ.Идентификатор);
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(КраткийТекстОшибки, ПодробныйТекстОшибки);
		ТекстОшибки = Новый Массив;
		ТекстОшибки.Добавить(КраткийТекстОшибки);
		ТекстОшибки.Добавить(ПодробныйТекстОшибки);
		ДобавитьОшибку(
			ДополнительныеПараметры.ОписаниеОшибок,
			СтрСоединить(ТекстОшибки, Символы.ПС),
			Документ,
			Истина);
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьДокументВБанк(Документ, ОтправленныеДанные)
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(
		ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействия().СоздатьДокумент);
	ПараметрыМетода.Организация = Документ.Организация;
	ПараметрыМетода.ИдентификаторБанка = Документ.ИдентификаторБанка;
	ПараметрыМетода.Документ.Тип = Документ.Тип;
	ПараметрыМетода.Документ.Данные = Документ.Данные.Получить();
	ПараметрыМетода.Идентификатор = Документ.Идентификатор;
	
	ОтветСервиса = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
	Выполнено = ОтветСервиса.Статус = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов().Выполнено;
	
	Если Выполнено Тогда
		
		МенеджерЗаписи = РегистрыСведений.ДокументыАУСН.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Документ);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Статус = Перечисления.СтатусыДокументовАУСН.ОтправленоВБанк;
			МенеджерЗаписи.Идентификатор = ОтветСервиса.Результат.ueid;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		СтрокаОтправлено = ОтправленныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправлено, Документ);
		
	КонецЕсли;
	
	Возврат Выполнено;
	
КонецФункции

Функция НовыйДанныеЗадолженности()
	
	Данные = Новый Структура;
	
	Данные.Вставить("Дата",  '0001-01-01');
	Данные.Вставить("Сумма", 0);
	Данные.Вставить("Ошибки", "");
	
	Возврат Данные;
	
КонецФункции

Функция НовыйДанныеФЛ()
	
	ДанныеФЛ = Новый Структура;
	
	ДанныеФЛ.Вставить("ИНН", "");
	ДанныеФЛ.Вставить("СНИЛС", "");
	ДанныеФЛ.Вставить("Фамилия", "");
	ДанныеФЛ.Вставить("Имя", "");
	ДанныеФЛ.Вставить("Отчество", "");
	ДанныеФЛ.Вставить("ДатаРождения", Дата(1,1,1));
	ДанныеФЛ.Вставить("Гражданство", "643");
	ДанныеФЛ.Вставить("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеФЛ.Вставить("КодВидаДокумента", "");
	ДанныеФЛ.Вставить("Серия", "");
	ДанныеФЛ.Вставить("Номер", "");
	ДанныеФЛ.Вставить("КодВидаДокументаДоп", "");
	ДанныеФЛ.Вставить("СерияДоп", "");
	ДанныеФЛ.Вставить("НомерДоп", "");
	
	Возврат ДанныеФЛ;

КонецФункции

Функция НовыйОписаниеОшибок()
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Ошибки.Колонки.Добавить("ИдентификаторБанка", ОбщегоНазначения.ОписаниеТипаСтрока(
		ОбщегоНазначенияБПКлиентСервер.ДлинаИдентификатора()));
	Ошибки.Колонки.Добавить("ИдентификаторДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(
		ОбщегоНазначенияБПКлиентСервер.ДлинаИдентификатора()));
	Ошибки.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Ошибки.Колонки.Добавить("ОтправитьВ1С", Новый ОписаниеТипов("Булево"));
	Ошибки.Колонки.Добавить("ОтправитьВБанк", Новый ОписаниеТипов("Булево"));
	
	Возврат Ошибки;
	
КонецФункции

Функция НовыйПараметрыОшибки()
	
	Описание = НовыйОписаниеОшибок();
	НоваяСтрока = Описание.Добавить();
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрока);
	
КонецФункции

Процедура ЗаписатьСостояниеОбмена(Параметры)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если Параметры.Свойство("БанковскиеВыписки") Тогда
		Выписки = Параметры.БанковскиеВыписки;
	Иначе
		Выписки = Новый Массив;
	КонецЕсли;
	
	ОписаниеОшибокОтправки = Параметры.ОписаниеОшибокОтправки;
	КлючиНастроекСОшибкамиОтправки = КлючиНастроекОшибокОбмена(ОписаниеОшибокОтправки);
	ЗаписатьОшибкиОбмена(ОписаниеОшибокОтправки, ТекущаяДата, КлючиНастроекСОшибкамиОтправки);
	
	ОписаниеОшибок = Параметры.ОписаниеОшибок;
	КлючиНастроекСОшибками = КлючиНастроекОшибокОбмена(ОписаниеОшибок);
	ЗаписатьОшибкиОбмена(ОписаниеОшибок, ТекущаяДата, КлючиНастроекСОшибками, Ложь);
	
	Для Каждого Выписка Из Выписки Цикл
		
		Если Выписка.ЗагруженоДокументов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьОшибки(КлючиНастроекСОшибками, Выписка) Тогда
			// Если есть ошибки, то не фиксируем успешно проведенный обмен
			Продолжить;
		КонецЕсли;
		
		ПодключенныеБанки = РегистрыСведений.СостоянияИнтеграцииАУСН.Банки(Выписка.Организация, Выписка.ИдентификаторБанка);
		Пока ПодключенныеБанки.Следующий() Цикл
			Набор = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выписка.Организация);
			Набор.Отбор.Банк.Установить(ПодключенныеБанки.Банк);
			Набор.Прочитать();
			Если ЗначениеЗаполнено(Набор) Тогда
				Запись = Набор[0];
				Запись.Ошибки = Новый ХранилищеЗначения(Неопределено);
				Если Не ЕстьОшибки(КлючиНастроекСОшибкамиОтправки, Выписка) Тогда
					Запись.ОшибкиОтправки = Новый ХранилищеЗначения(Неопределено);
				КонецЕсли;
				Запись.ЗагруженоБанковскихДокументов = Выписка.ЗагруженоДокументов;
				Запись.ДатаОбмена = ТекущаяДата;
			КонецЕсли;
			Набор.Записать();
		КонецЦикла;
	КонецЦикла;
	
	ОтправленныеДанные = Параметры.ОтправленныеДанные;
	ОтправленныеДанные.Свернуть("Организация, ИдентификаторБанка");
	Для Каждого СтрокаОтправленныхДанных Из ОтправленныеДанные Цикл
		Если Не ЕстьОшибки(КлючиНастроекСОшибкамиОтправки, СтрокаОтправленныхДанных) Тогда
			ПодключенныеБанки = РегистрыСведений.СостоянияИнтеграцииАУСН.Банки(
				СтрокаОтправленныхДанных.Организация, СтрокаОтправленныхДанных.ИдентификаторБанка);
			Пока ПодключенныеБанки.Следующий() Цикл
				Набор = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(СтрокаОтправленныхДанных.Организация);
				Набор.Отбор.Банк.Установить(ПодключенныеБанки.Банк);
				Набор.Прочитать();
				Если ЗначениеЗаполнено(Набор) Тогда
					Запись = Набор[0];
					Запись.ОшибкиОтправки = Новый ХранилищеЗначения(Неопределено);
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПолучившиеОтветСервиса = Параметры.ПолучившиеОтветСервиса;
	Для Каждого СтрокаПолученныйОтвет Из ПолучившиеОтветСервиса Цикл
		ПараметрыОтбора = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПолученныйОтвет);
		НайденныеСтроки = КлючиНастроекСОшибкамиОтправки.НайтиСтроки(ПараметрыОтбора);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Банки = РегистрыСведений.СостоянияИнтеграцииАУСН.Банки(
				СтрокаПолученныйОтвет.Организация, СтрокаПолученныйОтвет.ИдентификаторБанка);
			Пока Банки.Следующий() Цикл
				Набор = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(СтрокаПолученныйОтвет.Организация);
				Набор.Отбор.Банк.Установить(Банки.Банк);
				Набор.Прочитать();
				Если ЗначениеЗаполнено(Набор) Тогда
					Запись = Набор[0];
					Запись.ОшибкиОтправки = Новый ХранилищеЗначения(Неопределено);
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстОшибкиВыполненияМетода(ПараметрыМетода, Ответ)
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыМетода, , "ПривестиЗначениеПриЗаписиJSON", ИнтеграцияАУСН);
	ЧастиТекстаОшибки = Новый Массив;
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Ошибка сервиса АУСН'", КодЯзыка));
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Параметры метода:'", КодЯзыка));
	ЧастиТекстаОшибки.Добавить(ЗаписьJSON.Закрыть());
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Ответ сервиса:'", КодЯзыка));
	ЧастиТекстаОшибки.Добавить(ЗначениеВJSON(Ответ));
	ТекстОшибки = СтрСоединить(ЧастиТекстаОшибки, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ДобавитьОшибку(Ошибки, Содержание, Документ, ОтправитьВ1С = Истина) Экспорт
	
	ПараметрыОшибки = НовыйПараметрыОшибки();
	ЗаполнитьЗначенияСвойств(ПараметрыОшибки, Документ);
	ПараметрыОшибки.ИдентификаторДокумента = Документ.Идентификатор;
	ПараметрыОшибки.ТекстОшибки = Содержание;
	Если ОтправитьВ1С Тогда
		ПараметрыОшибки.ОтправитьВ1С = Истина;
	Иначе
		ПараметрыОшибки.ОтправитьВБанк = Истина;
	КонецЕсли;
	ЗаписатьОшибку(Ошибки, ПараметрыОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(ОписаниеОшибок, ПараметрыОшибки)
	
	НоваяОшибка = ОписаниеОшибок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяОшибка, ПараметрыОшибки);
	
КонецПроцедуры

Функция НовыйКлючиСостоянияОбмена()
	
	Ключи = Новый ТаблицаЗначений;
	Ключи.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Ключи.Колонки.Добавить("ИдентификаторБанка", ОбщегоНазначенияБПКлиентСервер.ОписаниеТипаИдентификатор());
	
	Возврат Ключи;
	
КонецФункции

Процедура ОтметитьОтсутствиеБлокирующихОшибок(ПолучившиеОтветСервиса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПолучившиеОтветСервиса.Организация КАК Организация,
		|	ПолучившиеОтветСервиса.ИдентификаторБанка КАК ИдентификаторБанка
		|ПОМЕСТИТЬ ВТ_ПолучившиеОтветСервиса
		|ИЗ
		|	&ПолучившиеОтветСервиса КАК ПолучившиеОтветСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПолучившиеОтветСервиса.Организация КАК Организация,
		|	БанкиАУСН.Банк КАК Банк
		|ПОМЕСТИТЬ ВТ_КлючиНастроекСостоянийИнтеграции
		|ИЗ
		|	ВТ_ПолучившиеОтветСервиса КАК ВТ_ПолучившиеОтветСервиса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО ВТ_ПолучившиеОтветСервиса.ИдентификаторБанка = БанкиАУСН.Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияИнтеграцииАУСН.Организация КАК Организация,
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк
		|ИЗ
		|	ВТ_КлючиНастроекСостоянийИнтеграции КАК ВТ_КлючиНастроекСостоянийИнтеграции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ПО ВТ_КлючиНастроекСостоянийИнтеграции.Организация = СостоянияИнтеграцииАУСН.Организация
		|			И ВТ_КлючиНастроекСостоянийИнтеграции.Банк = СостоянияИнтеграцииАУСН.Банк
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.БлокирующаяОшибкаОбмена";
	
	Запрос.УстановитьПараметр("ПолучившиеОтветСервиса", ПолучившиеОтветСервиса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Банк.Установить(Выборка.Банк);
		НаборЗаписей.Прочитать();
		Если ЗначениеЗаполнено(НаборЗаписей) Тогда
			Запись = НаборЗаписей[0];
			Запись.Ошибки = Новый ХранилищеЗначения(Неопределено);
			Запись.БлокирующаяОшибкаОбмена = Ложь;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеБанков()
	
	ОписаниеБанков = Новый ТаблицаЗначений;
	ОписаниеБанков.Колонки.Добавить("Идентификатор", ОбщегоНазначенияБПКлиентСервер.ОписаниеТипаИдентификатор());
	ДлинаБИК = БанковскиеПравила.ДлинаБИК();
	ОписаниеБанков.Колонки.Добавить("БИК", ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаБИК));
	ДлинаСсылкиЛичногоКабинета =
		Метаданные.РегистрыСведений.БанкиАУСН.Ресурсы.СсылкаЛичныйКабинет.Тип.КвалификаторыСтроки.Длина;
	ОписаниеБанков.Колонки.Добавить("СсылкаЛичныйКабинет", ОбщегоНазначения.ОписаниеТипаСтрока(
		ДлинаСсылкиЛичногоКабинета));
	
	Возврат ОписаниеБанков;
	
КонецФункции

Функция НовыйРезультатОбменаССервисом()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагруженыНовыеВыписки", Ложь);
	Результат.Вставить("ОшибкиОтправки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ЗаблокированныеДанныеДляВыполненияОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияИнтеграцииАУСН.Организация КАК Организация,
		|	СостоянияИнтеграцииАУСН.Банк КАК Банк,
		|	БанкиАУСН.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанкиАУСН КАК БанкиАУСН
		|		ПО СостоянияИнтеграцииАУСН.Банк = БанкиАУСН.Банк
		|ГДЕ
		|	СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено)
		|ИТОГИ ПО
		|	Организация,
		|	Идентификатор";
	
	Ключи = Новый Массив;
	КлючиСИдентификаторами = Новый Массив;
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаИдентификатор = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификатор.Следующий() Цикл
			КлючСИдентификатором = Новый Структура;
			КлючСИдентификатором.Вставить("Организация", ВыборкаИдентификатор.Организация);
			КлючСИдентификатором.Вставить("ИдентификаторБанка", ВыборкаИдентификатор.Идентификатор);
			КлючиСИдентификаторами.Добавить(КлючСИдентификатором);
			Выборка = ВыборкаИдентификатор.Выбрать();
			Попытка
				Пока Выборка.Следующий() Цикл
					ЗначенияКлюча = Новый Структура;
					ЗначенияКлюча.Вставить("Организация", Выборка.Организация);
					ЗначенияКлюча.Вставить("Банк", Выборка.Банк);
					КлючЗаписи = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьКлючЗаписи(ЗначенияКлюча);
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
					Ключи.Добавить(КлючЗаписи);
				КонецЦикла;
			Исключение
				// Данные получаются другим потоком
				Возврат Неопределено;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Результат = НовыйОписаниеЗаблокированныхДанных();
	Результат.КлючиСостоянийИнтеграции = Ключи;
	Результат.КлючиСИдентификаторами = КлючиСИдентификаторами;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьОшибки(КлючиНастроек, Выписка)
	
	Отбор = Новый Структура("Организация", Выписка.Организация);
	ОшибкиПоОрганизации = КлючиНастроек.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(ОшибкиПоОрганизации) Тогда
		Для Каждого СтрокаСОшибкой Из ОшибкиПоОрганизации Цикл
			Если СтрокаСОшибкой.ИдентификаторБанка = Выписка.ИдентификаторБанка Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаписатьОшибкиОбмена(Ошибки, ТекущаяДата, КлючиНастроек, ОшибкиОтправки = Истина)
	
	Для Каждого Ключ Из КлючиНастроек Цикл
		КопируемыеСтроки = Новый Массив;
		Организация = Ключ.Организация;
		Для Каждого СтрокаОшибка Из Ошибки Цикл
			Если СтрокаОшибка.Организация = Организация И СтрокаОшибка.ИдентификаторБанка = Ключ.ИдентификаторБанка Тогда
				КопируемыеСтроки.Добавить(СтрокаОшибка);
			КонецЕсли;
		КонецЦикла;
		ОшибкиДляТекущейНастройкиОбмена = Ошибки.Скопировать(КопируемыеСтроки);
		БлокирующаяОшибка = Ложь;
		Если Не ОшибкиОтправки Тогда
			Для Каждого СтрокаОшибка Из ОшибкиДляТекущейНастройкиОбмена Цикл
				Если Не ЗначениеЗаполнено(СтрокаОшибка.ИдентификаторДокумента) Тогда
					БлокирующаяОшибка = Истина;
				Иначе
					КлючЗаписи = РегистрыСведений.ДокументыАУСН.КлючиЗаписейДокументов(СтрокаОшибка.ИдентификаторДокумента);
					Если Не КлючЗаписи.Следующий() Тогда
						Продолжить;
					КонецЕсли;
					МенеджерЗаписи = РегистрыСведений.ДокументыАУСН.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.ТекстОшибки = СтрокаОшибка.ТекстОшибки;
						МенеджерЗаписи.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПодключенныеБанки = РегистрыСведений.СостоянияИнтеграцииАУСН.Банки(Организация, Ключ.ИдентификаторБанка);
		Пока ПодключенныеБанки.Следующий() Цикл
			Набор = РегистрыСведений.СостоянияИнтеграцииАУСН.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Организация);
			Набор.Отбор.Банк.Установить(ПодключенныеБанки.Банк);
			Набор.Прочитать();
			Если ЗначениеЗаполнено(Набор) Тогда
				Запись = Набор[0];
				Если ОшибкиОтправки Тогда
					Запись.ОшибкиОтправки = Новый ХранилищеЗначения(ОшибкиДляТекущейНастройкиОбмена);
				Иначе
					Запись.Ошибки = Новый ХранилищеЗначения(ОшибкиДляТекущейНастройкиОбмена);
				КонецЕсли;
				Запись.ДатаОбмена = ТекущаяДата;
				Запись.БлокирующаяОшибкаОбмена = БлокирующаяОшибка;
				Запись.ЗагруженоБанковскихДокументов = 0;
			КонецЕсли;
			Набор.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция КлючиНастроекОшибокОбмена(Ошибки)
	
	ИменаКлючейНастроекОбмена = "Организация, ИдентификаторБанка";
	
	Ошибки.Сортировать(ИменаКлючейНастроекОбмена);
	
	КлючиНастроекСОшибками = Ошибки.Скопировать( , ИменаКлючейНастроекОбмена);
	КлючиНастроекСОшибками.Свернуть(ИменаКлючейНастроекОбмена);
	
	Возврат КлючиНастроекСОшибками;
	
КонецФункции

Процедура ЗаполнитьОшибкуОтправкиПоВыборке(Ошибки, Выборка, ИмяРеквизита, Синоним, ТекстОшибки, ЕстьОшибки)
	
	ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
	ПараметрыОшибки.Организация = Выборка.Организация;
	ПараметрыОшибки.ИдентификаторБанка = ИнтеграцияАУСНПовтИсп.ИдентификаторБанка(Выборка.Бик);
	ПараметрыОшибки.Объект = Выборка.БанковскаяОперация;
	РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
	РеквизитОшибка.ИмяРеквизита = СтрШаблон("%1%2",
		ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДвиженийРазметкаАУСН(), ИмяРеквизита);
	РеквизитОшибка.Синоним = Синоним;
	РеквизитОшибка.ТекстОшибки = ТекстОшибки;
	ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
	ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура ДобавитьОшибкуОтправки(Ошибки, ПараметрыЗаполнения)
	
	СтрокаОшибка = Ошибки.Найти(ПараметрыЗаполнения.Объект, "Объект");
	Если СтрокаОшибка = Неопределено Тогда
		СтрокаОшибка = Ошибки.Добавить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаОшибка.Реквизиты) Тогда
		СтрокаОшибка.Реквизиты = НовыйРеквизитыОшибкиОтправки();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаОшибка, ПараметрыЗаполнения, , "Реквизиты");
	Для Каждого СтрокаРеквизит Из ПараметрыЗаполнения.Реквизиты Цикл
		НайденнаяСтрока = СтрокаОшибка.Реквизиты.Найти(СтрокаРеквизит.ИмяРеквизита, "ИмяРеквизита");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = СтрокаОшибка.Реквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеквизит);
		Иначе
			СодержаниеОшибки = СтрРазделить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Ложь);
			ДобавляемаяОшибка = СтрРазделить(СтрокаРеквизит.ТекстОшибки, Символы.ПС, Ложь);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СодержаниеОшибки, ДобавляемаяОшибка, Истина);
			НайденнаяСтрока.ТекстОшибки = СтрСоединить(СодержаниеОшибки, Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыЗаполненияОшибкиОтправки()
	
	ОписаниеОшибок = НовыйОписаниеОшибокОтправки();
	Строка = ОписаниеОшибок.Добавить();
	Строка.Реквизиты = НовыйРеквизитыОшибкиОтправки();
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
	
КонецФункции

Функция НовыйОписаниеОтправленныхДанных()
	
	ОтправленныеДанные = Новый ТаблицаЗначений;
	ОтправленныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОтправленныеДанные.Колонки.Добавить("ИдентификаторБанка", ОписаниеТипаИдентификатор());
	Возврат ОтправленныеДанные;
	
КонецФункции

Функция НовыйРеквизитыОшибкиОтправки()
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(
		ОбщегоНазначенияБПКлиентСервер.ДлинаИмениРеквизита()));
	Реквизиты.Колонки.Добавить("Синоним", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Реквизиты.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат Реквизиты;
	
КонецФункции

Функция ОписаниеТипаИдентификатор()
	
	ДлинаИдентификатора = ОбщегоНазначенияБПКлиентСервер.ДлинаИдентификатора();
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаИдентификатора);
	
КонецФункции

Функция ОбработанныйТекстОшибки(ТекстОшибки)
	
	Если Прав(ТекстОшибки, 1) = "." Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстОшибки, 1);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция НовыйОписаниеЗаблокированныхДанных()
	
	Описание = Новый Структура;
	Описание.Вставить("КлючиСостоянийИнтеграции", Новый Массив);
	Описание.Вставить("КлючиСИдентификаторами", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция РасшифроватьОтветФНС(ТекстОтвета) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	АктуальнаяВерсияПротокола = АктуальнаяВерсияПротоколаОбмена();
	Фабрика = ФабрикаПротоколаОбмена(АктуальнаяВерсияПротокола);
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстОтвета);
	ОтветФНС = Фабрика.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	Возврат ОтветФНС;
	
КонецФункции

Функция ГодНачалаДействияАУСН()
	
	Возврат 2022;
	
КонецФункции

Функция ДопустимыеКодыВыплатНеПодлежащиеНалогообложению(Дата)
	
	ДопустимыеКоды = Новый Массив;
	Если Дата >= '20230101' Тогда
		ДопустимыеКоды.Добавить("01");
	Иначе
		ДопустимыеКоды.Добавить("01");
		ДопустимыеКоды.Добавить("02");
		ДопустимыеКоды.Добавить("03");
		ДопустимыеКоды.Добавить("04");
	КонецЕсли;
	
	Возврат ДопустимыеКоды;
	
КонецФункции

Функция РеквизитНДФЛЗаполненКорректно(ПроверяемыйРеквизит, Выборка, ПараметрыОшибки, ДвиженияКорректировалисьВручную)
	
	ЕстьОшибки = Ложь;
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Выборка[ПроверяемыйРеквизит.Ключ] < 0 Тогда
		РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
		Если ДвиженияКорректировалисьВручную Тогда
			ЕстьОшибки = Истина;
			ПараметрыОшибки.Объект = Выборка.Выплата;
			РеквизитОшибка.ИмяРеквизита = СтрШаблон(
				"%1%2", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ(), ПроверяемыйРеквизит.Ключ);
			РеквизитОшибка.Синоним = ПроверяемыйРеквизит.Значение;
			РеквизитОшибка.ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1 не может быть отрицательной'", КодЯзыка), ПроверяемыйРеквизит.Значение);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Ведомость) Тогда
			ЕстьОшибки = Истина;
			ПараметрыОшибки.Объект = Выборка.Ведомость;
			РеквизитОшибка.ИмяРеквизита = "СоставНДФЛСумма";
			РеквизитОшибка.Синоним = НСтр("ru = 'НДФЛ (сумма)'", КодЯзыка);
			РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Сумма НДФЛ не может быть отрицательной'", КодЯзыка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ВедомостьИДвиженияРасчетыНДФЛСоответствуютПротоколуОбмена(ВыборкаВыплата, Организация, ИдентификаторБанка, Ошибки)
	
	ЕстьОшибки = Ложь;
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ВедомостьУказана = ЗначениеЗаполнено(ВыборкаВыплата.Ведомость);
	Ведомость = ВыборкаВыплата.Ведомость;
	Выплата = ВыборкаВыплата.Выплата;
	ДвиженияКорректировалисьВручную = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Выплата, "РучнаяКорректировка");
	
	Если Не ЗначениеЗаполнено(ВыборкаВыплата.ДатаПлатежа) Тогда
		ЕстьОшибки = Истина;
		ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
		ПараметрыОшибки.Организация = Организация;
		ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
		ПараметрыОшибки.Объект = Выплата;
		РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
		РеквизитОшибка.ИмяРеквизита = СтрШаблон(
			"%1ДатаВходящегоДокумента", ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДокумента());
		РеквизитОшибка.Синоним = "Дата входящего документа";
		РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Не заполнена дата входящего документа'", КодЯзыка);
		ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаВыплата.ОрганизацияИНН) Тогда
		ЕстьОшибки = Истина;
		ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
		ПараметрыОшибки.Организация = Организация;
		ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
		ПараметрыОшибки.Объект = Организация;
		РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
		РеквизитОшибка.ИмяРеквизита = "ИНН";
		РеквизитОшибка.Синоним = НСтр("ru = 'ИНН'", КодЯзыка);
		РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Не заполнен ИНН в настройках организации'", КодЯзыка);
		ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
	КонецЕсли;
	
	ВыборкаФизическоеЛицо = ВыборкаВыплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФизическоеЛицо.Следующий() Цикл
		ВыборкаНалоговыйПериод = ВыборкаФизическоеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНалоговыйПериод.Следующий() Цикл
			Если ВедомостьУказана Тогда
				Если Не УчетнаяПолитика.ПрименяетсяАУСН(
					Организация, ВыборкаНалоговыйПериод.НалоговыйПериод) Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					ПараметрыОшибки.Объект = Ведомость;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					РеквизитОшибка.ИмяРеквизита = "ПериодРегистрации";
					РеквизитОшибка.Синоним = НСтр("ru = 'Месяц'", КодЯзыка);
					РеквизитОшибка.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'В период %1 АУСН не применялась'", КодЯзыка),
						Формат(ВыборкаНалоговыйПериод.НалоговыйПериод, "Л=ru; ДФ='ММММ yyyy ''г.'''"));
					ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
				КонецЕсли;
				НужноДобавитьОшибкуВДатеПлатежа = Ложь;
				ТекстОшибкиДатыПлатежа = Новый Массив;
				ГодВыплаты = Год(ВыборкаНалоговыйПериод.НалоговыйПериод);
				Если ГодВыплаты < ГодНачалаДействияАУСН() Тогда
					ТекстОшибкиДатыПлатежа.Добавить(
						СтрШаблон(НСтр("ru = 'Период выплаты не может быть раньше %1 г.'"),
						Формат(ГодНачалаДействияАУСН(), "ЧГ=")));
					НужноДобавитьОшибкуВДатеПлатежа = Истина;
				КонецЕсли;
				Если ГодВыплаты > Год(ТекущаяДатаСеанса()) Тогда
					ТекстОшибкиДатыПлатежа.Добавить(
						СтрШаблон(НСтр("ru = 'Год периода выплаты не может превышать текущий %1 г.'"),
						Формат(Год(ТекущаяДата()), "ЧГ=")));
					НужноДобавитьОшибкуВДатеПлатежа = Истина;
				КонецЕсли;
				Если НужноДобавитьОшибкуВДатеПлатежа Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					ПараметрыОшибки.Объект = Ведомость;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					РеквизитОшибка.ИмяРеквизита = "ПериодРегистрации";
					РеквизитОшибка.Синоним = НСтр("ru = 'Месяц'", КодЯзыка);
					РеквизитОшибка.ТекстОшибки = СтрСоединить(ТекстОшибкиДатыПлатежа, Символы.ПС);
					ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
				КонецЕсли;
			КонецЕсли;
			ВыборкаКодДохода = ВыборкаНалоговыйПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКодДохода.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаКодДохода.СуммаДохода) И Не ЗначениеЗаполнено(ВыборкаКодДохода.КодДохода) Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					Если ДвиженияКорректировалисьВручную Тогда
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1КодДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Код дохода'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Не заполнен код дохода'", КодЯзыка);
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					ИначеЕсли ВедомостьУказана Тогда
						ПараметрыОшибки.Объект = Ведомость;
						РеквизитОшибка.ИмяРеквизита = "ВидДоходаИсполнительногоПроизводства";
						РеквизитОшибка.Синоним = НСтр("ru = 'Вид дохода'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Некорректно заполнен вид дохода'", КодЯзыка);
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКодДохода.СуммаДохода < 0 Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					Если ДвиженияКорректировалисьВручную Тогда
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1СуммаДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Сумма дохода'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Сумма дохода не может быть отрицательной'", КодЯзыка);
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					ИначеЕсли ВедомостьУказана Тогда
						ПараметрыОшибки.Объект = Ведомость;
						РеквизитОшибка.ИмяРеквизита = "СоставКВыплатеСумма";
						РеквизитОшибка.Синоним = НСтр("ru = 'К выплате'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Сумма к выплате не может быть отрицательной'");
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаКодДохода.СуммаВычета)
					И ВыборкаКодДохода.СуммаВычета > ВыборкаКодДохода.СуммаДохода Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					Если ДвиженияКорректировалисьВручную Тогда
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1СуммаДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Сумма дохода'", КодЯзыка);
					ИначеЕсли ВедомостьУказана Тогда
						ПараметрыОшибки.Объект = Ведомость;
						РеквизитОшибка.ИмяРеквизита = "СоставКВыплатеСумма";
						РеквизитОшибка.Синоним = НСтр("ru = 'К выплате'", КодЯзыка);
					КонецЕсли;
					Если ЗначениеЗаполнено(ПараметрыОшибки.Объект) Тогда
						РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Сумма дохода не может быть меньше суммы вычета'", КодЯзыка);
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
				КонецЕсли;
				
				ПроверяемыеРеквизитыСуммыНДФЛ = Новый Структура;
				ПроверяемыеРеквизитыСуммыНДФЛ.Вставить("СуммаНДФЛ", НСтр("ru = 'Сумма НДФЛ исчисленный'", КодЯзыка));
				ПроверяемыеРеквизитыСуммыНДФЛ.Вставить("СуммаНДФЛУдержаный", НСтр("ru = 'Сумма НДФЛ удержанный'", КодЯзыка));
				ПроверяемыеРеквизитыСуммыНДФЛ.Вставить("СуммаНДФЛПеречисленный",
					НСтр("ru = 'Сумма НДФЛ перечисленный'", КодЯзыка));
				
				Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыСуммыНДФЛ Цикл
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					Если Не РеквизитНДФЛЗаполненКорректно(
						ПроверяемыйРеквизит, ВыборкаКодДохода, ПараметрыОшибки, ДвиженияКорректировалисьВручную) Тогда
						ЕстьОшибки = Истина;
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ВыборкаКодДохода.КодДохода = КодДоходаНеПодлежащегоНалогообложению()
					И ВыборкаКодДохода.СуммаДохода <> ВыборкаКодДохода.СуммаВычета Тогда
					ЕстьОшибки = Истина;
					ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
					ПараметрыОшибки.Организация = Организация;
					ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
					РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
					Если ДвиженияКорректировалисьВручную Тогда
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1СуммаДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Сумма дохода'", КодЯзыка);
					ИначеЕсли ВедомостьУказана Тогда
						ПараметрыОшибки.Объект = Ведомость;
						РеквизитОшибка.ИмяРеквизита = "СоставКВыплатеСумма";
						РеквизитОшибка.Синоним = НСтр("ru = 'К выплате'", КодЯзыка);
					КонецЕсли;
					Если ЗначениеЗаполнено(ПараметрыОшибки.Объект) Тогда
						РеквизитОшибка.ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Для вида выплаты с кодом %1 должны применяться вычеты на сумму выплаты'", КодЯзыка),
							КодДоходаНеПодлежащегоНалогообложению());
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаКодДохода.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаВычета)
						И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодВычета) Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						Если ДвиженияКорректировалисьВручную Тогда
							ПараметрыОшибки.Объект = Выплата;
							РеквизитОшибка.ИмяРеквизита =
								СтрШаблон("%1КодВычета", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
							РеквизитОшибка.Синоним = НСтр("ru = 'Код вычета'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Не заполнен код вычета'");
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						ИначеЕсли ВедомостьУказана Тогда
							ПараметрыОшибки.Объект = Ведомость;
							РеквизитОшибка.ИмяРеквизита = "КодВычета";
							РеквизитОшибка.Синоним = НСтр("ru = 'Вид вычета'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Некорректно заполнен вид вычета'");
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
					КонецЕсли;
					Если ВыборкаДетальныеЗаписи.СуммаВычета < 0
						Или ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодВычета) И ВыборкаДетальныеЗаписи.СуммаВычета = 0 Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						Если ДвиженияКорректировалисьВручную Тогда
							ПараметрыОшибки.Объект = Выплата;
							РеквизитОшибка.ИмяРеквизита =
								СтрШаблон("%1СуммаВычета", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						ИначеЕсли ВедомостьУказана Тогда
							ПараметрыОшибки.Объект = Ведомость;
							РеквизитОшибка.ИмяРеквизита = "СуммаВычета";
						КонецЕсли;
						Если ЗначениеЗаполнено(ПараметрыОшибки.Объект) Тогда
							РеквизитОшибка.Синоним = НСтр("ru = 'Сумма вычета'", КодЯзыка);
							РеквизитОшибка.ТекстОшибки = НСтр("ru = 'Сумма вычета должна быть положительной'");
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
					КонецЕсли;
					ПроверяемыеКодыВыплат = КодыВыплатАУСНДляВычетаВРазмереПолученнойПрибыли();
					Если ПроверяемыеКодыВыплат.Найти(ВыборкаКодДохода.КодДохода) <> Неопределено
						И (ВыборкаДетальныеЗаписи.КодВычета <> КодВычетаВРазмереПолученнойПрибыли()
						Или ВыборкаКодДохода.СуммаДохода <> ВыборкаКодДохода.СуммаВычета) Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1КодДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Код дохода'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Для выплаты с кодом %1 должен быть вычет с кодом %2 в размере суммы выплаты'", КодЯзыка),
							ВыборкаКодДохода.КодДохода,
							КодВычетаВРазмереПолученнойПрибыли());
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
					ВычетыПоНеоблагаемымДоходам = КодыВычетовПоНеоблагаемымДоходам();
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодВычета)
						И ВыборкаКодДохода.КодДохода = КодДоходаНеПодлежащегоНалогообложению()
						И ВычетыПоНеоблагаемымДоходам.Найти(ВыборкаДетальныеЗаписи.КодВычета) = Неопределено Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1КодВычета", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Код вычета'", КодЯзыка);
						РеквизитОшибка.ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Для выплаты с кодом %1 не применим вычет с кодом %2'", КодЯзыка),
							ВыборкаКодДохода.КодДохода,
							ВыборкаДетальныеЗаписи.КодВычета);
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодНеоблагаемогоВзносамиДохода)
						И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаНеоблагаемаяВзносами) Тогда
						Продолжить;
					КонецЕсли;
					
					ДопустимыеКодыВыплат = ДопустимыеКодыВыплатНеПодлежащиеНалогообложению(ВыборкаНалоговыйПериод.НалоговыйПериод);
					
					Если ЗначениеЗаполнено(ДопустимыеКодыВыплат)
						И ДопустимыеКодыВыплат.Найти(ВыборкаДетальныеЗаписи.КодНеоблагаемогоВзносамиДохода) = Неопределено Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						ПараметрыОшибки.Объект = Выплата;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						РеквизитОшибка.ИмяРеквизита =
							СтрШаблон("%1КодДохода", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
						РеквизитОшибка.Синоним = НСтр("ru = 'Код дохода'", КодЯзыка);
						СодержаниеОшибки = Новый Массив;
						СодержаниеОшибки.Добавить(НСтр("ru = 'Недопустимый код дохода.'"));
						Если ДопустимыеКодыВыплат.Количество() = 1 Тогда
							СодержаниеОшибки.Добавить(СтрШаблон(НСтр(
								"ru = 'Допускается код дохода %1'"), ДопустимыеКодыВыплат[0]));
						Иначе
							СодержаниеОшибки.Добавить(СтрШаблон(НСтр(
								"ru = 'Допускаются коды %1'"), СтрСоединить(ДопустимыеКодыВыплат, " ,")));
						КонецЕсли;
						РеквизитОшибка.ТекстОшибки = СтрСоединить(СодержаниеОшибки, " ");
						ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписи.СуммаНеоблагаемаяВзносами < 0 Тогда
						ЕстьОшибки = Истина;
						ПараметрыОшибки = НовыйПараметрыЗаполненияОшибкиОтправки();
						ПараметрыОшибки.Организация = Организация;
						ПараметрыОшибки.ИдентификаторБанка = ИдентификаторБанка;
						РеквизитОшибка = ПараметрыОшибки.Реквизиты.Добавить();
						Если ДвиженияКорректировалисьВручную Тогда
							ПараметрыОшибки.Объект = Выплата;
							РеквизитОшибка.ИмяРеквизита =
								СтрШаблон("%1СуммаНеоблагаемаяВзносами", ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ());
							РеквизитОшибка.Синоним = НСтр("ru = 'Сумма необлагаемая страховыми взносами'", КодЯзыка);
						ИначеЕсли ВедомостьУказана Тогда
							ПараметрыОшибки.Объект = Ведомость;
							РеквизитОшибка.ИмяРеквизита = "СоставКВыплатеСумма";
							РеквизитОшибка.Синоним = НСтр("ru = 'К выплате'", КодЯзыка);
						КонецЕсли;
						Если ЗначениеЗаполнено(ПараметрыОшибки.Объект) Тогда
							РеквизитОшибка.ТекстОшибки = НСтр(
								"ru = 'Сумма выплаты, не подлежащая обложению страховыми взносами, не может быть отрицательной'");
							ДобавитьОшибкуОтправки(Ошибки, ПараметрыОшибки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Процедура ПроверитьНеобходимостьПовторногоЧтенияДокументов(КлючиСИдентификаторами)
	
	ИмяНастройки = ИнтеграцияАУСНКлиентСервер.ИмяНастройкиПовторноеЧтениеДокументов();
	ДатаПовторногоЧтения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройки, ИмяНастройки, Дата(1, 1, 1));
	Если ДатаПовторногоЧтения > Дата(2023, 11, 10) Тогда
		Возврат;
	КонецЕсли;
	КлючиНастроек = Новый ТаблицаЗначений;
	КлючиНастроек.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДлинаИдентификатора = ОбщегоНазначенияБПКлиентСервер.ДлинаИдентификатора();
	КлючиНастроек.Колонки.Добавить("ИдентификаторБанка", ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаИдентификатора));
	Для Каждого Строка Из КлючиСИдентификаторами Цикл
		НовыйКлюч = КлючиНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйКлюч, Строка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючиНастроек.Организация КАК Организация,
		|	КлючиНастроек.ИдентификаторБанка КАК ИдентификаторБанка
		|ПОМЕСТИТЬ ВТ_КлючиНастроек
		|ИЗ
		|	&КлючиНастроек КАК КлючиНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КлючиНастроек.Организация КАК Организация,
		|	ВТ_КлючиНастроек.ИдентификаторБанка КАК ИдентификаторБанка,
		|	ДокументыАУСН.Тип КАК Тип,
		|	ДокументыАУСН.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВТ_КлючиНастроек КАК ВТ_КлючиНастроек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыАУСН КАК ДокументыАУСН
		|		ПО ВТ_КлючиНастроек.Организация = ДокументыАУСН.Организация
		|			И ВТ_КлючиНастроек.ИдентификаторБанка = ДокументыАУСН.ИдентификаторБанка
		|ГДЕ
		|	ДокументыАУСН.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовАУСН.ОшибкаОбработкиПользователем)";
	Запрос.УстановитьПараметр("КлючиНастроек", КлючиНастроек);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДокументыАУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ИдентификаторБанка.Установить(Выборка.ИдентификаторБанка);
		НаборЗаписей.Отбор.Тип.Установить(Выборка.Тип);
		НаборЗаписей.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Статус = Перечисления.СтатусыДокументовАУСН.ДоставленоПользователю;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, ИмяНастройки, ТекущаяДата());
	
КонецПроцедуры

Функция НовыйСодержимоеСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяУзла", "");
	Результат.Вставить("Текст", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти