#Область ПрограммныйИнтерфейс

// Переключает видимость быстрых настроек в переданной форме отчета
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура ПереключитьВидимостьБыстрыхНастроек(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Форма.ПоказыватьБыстрыеНастройки = Не Форма.ПоказыватьБыстрыеНастройки;

	Элементы.БыстрыеНастройкиОтчета.Видимость = Форма.ПоказыватьБыстрыеНастройки;
	Элементы.ПоказатьБыстрыеНастройки.Пометка = Форма.ПоказыватьБыстрыеНастройки;
	
	Если Элементы.МакетОформленияБыстрыеНастройки.СписокВыбора.Количество() > 0
		И (ПустаяСтрока(Форма.МакетОформления) Или Форма.МакетОформления = "МакетОформленияОтчетовЗеленый") Тогда
		Форма.МакетОформления = Элементы.МакетОформленияБыстрыеНастройки.СписокВыбора[0].Значение;
	КонецЕсли;

	Если Форма.ПоказыватьБыстрыеНастройки Тогда
		Элементы.ПоказатьБыстрыеНастройки.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.ПоказатьБыстрыеНастройки.Картинка = БиблиотекаКартинок.СтрелкаВлево;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события НачалоВыбора для поля отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле в колонке табличной части Отбор, для которой вызван обработчик.
//	ДанныеВыбора - СписокЗначений - Список значений для выбора.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	СписокПараметров - Структура - Содержит
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, которому принадлежит редактируемый отбор.
//		Если не указан, то ожидается что это форма отчета, и у отчета есть свойство КомпоновщикНастроек.
//
Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, СписокПараметров, КомпоновщикНастроек = Неопределено) Экспорт

	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;

	Если КомпоновщикНастроек = Неопределено 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "КомпоновщикНастроек") Тогда
		КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	ИначеЕсли КомпоновщикНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементОтбора = Неопределено;
	ПолеОтбора = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	
	Для Каждого Отбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		Если Отбор.ЛевоеЗначение = ПолеОтбора Тогда 
			ЭлементОтбора = Отбор;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение           = ЭлементОтбора.ПравоеЗначение;
	Поле               = ЭлементОтбора.ЛевоеЗначение;
	ВидСравненияСтрока = ЭлементОтбора.ВидСравнения;
	
	ЭтоКорСубконто = (СтрНайти(Строка(Поле), "КорСубконто") = 1);

	ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
		КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,
		Поле,
		"Тип");
	
	Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если ТипЗнч(СтрокаОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
			
		// Учитываем только условия сравнения на равенство, на неравенство пропускаем.
		Если СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			Или СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			Или СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		
			ДругоеПоле = СтрокаОтбора.ЛевоеЗначение;
			ДругоеЗначение = Неопределено;
			Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				ДругоеЗначение = СтрокаОтбора.ПравоеЗначение;
			ИначеЕсли СтрокаОтбора.ПравоеЗначение.Количество() > 0 Тогда
				ДругоеЗначение = СтрокаОтбора.ПравоеЗначение[0].Значение;
			КонецЕсли;
			
			ДругойТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
				КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,
				ДругоеПоле,
				"Тип");
			
			Если ЭтоКорСубконто <> (СтрНайти(Строка(ДругоеПоле), "КорСубконто") = 1) Тогда
				// Параметр относится к другому отбору
				Продолжить;
			КонецЕсли;
			
			Если ДругойТипПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
				СписокПараметров.Вставить("Номенклатура", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Склад Тогда
				СписокПараметров.Вставить("Склад", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
				СписокПараметров.Вставить("Контрагент", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
				СписокПараметров.Вставить("ДоговорКонтрагента", ДругоеЗначение);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Принятая в конфигурации обработка работает только для равенства или вхождения в группу.
	Если    Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
		
		Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
			СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбораГруппы");
		Иначе
			СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбора");
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиент.ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение,
			СписокПараметров, ТипПоля);
		
	КонецЕсли;

КонецПроцедуры

// Создает новое письмо по заданному шаблону
//
Процедура ОтправитьОтзывПоЭлектроннойПочте() Экспорт
	
	ПредставлениеИнтерфейса = БыстрыеНастройкиОтчетовВызовСервера.ПредставлениеИнтерфейса();
	ДополнениеОбИнтерфейсе = ?(Не ПустаяСтрока(ПредставлениеИнтерфейса),
		СтрШаблон(НСтр("ru=' (интерфейс приложения: %1)'"), ПредставлениеИнтерфейса),
		"");
	
	ПараметрыПисьма = РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	ПараметрыПисьма.Получатель = "bp@1c.ru";
	ПараметрыПисьма.Тема = НСтр("ru='Отзыв о быстрых настройках'");
	ПараметрыПисьма.Текст = СтрШаблон(НСтр("ru='Поделитесь вашим мнением о быстрых настройках в отчетах%1?
		|
		|
		|'"), ДополнениеОбИнтерфейсе);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти
