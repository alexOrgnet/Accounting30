// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Переопределение/дополнение события "Перед записью" библиотечных справочников и документов.
//   Позволяет модифицировать библиотечные объекты при необходимости.
//   * Не вызывается в режиме "ОбменДанными.Загрузка"
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи (для документов)
//  РежимПроведения - РежимПроведенияДокумента - режим проведения (для документов)
// 
Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределение/дополнение события "Обработка проверки заполнения" библиотечных справочников и документов.
//   Позволяет модифицировать список проверяемых и непроверяемых реквизитов
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  ПроверяемыеРеквизиты - Массив Из Строка - массив проверяемых реквизитов
//  МассивНепроверяемыхРеквизитов - Массив Из Строка - массив непроверяемых реквизитов (заполнять для отключения проверки)
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты.
// ТабличнаяЧасть может иметь различный состав колонок.
// В ТабличнаяЧасть обязательно содержится колонка Номенклатура - ОпределяемыйТип.Номенклатура.
// Заполнению подлежат колонки из нижеперечисленного списка, если значения, указываемые в колонке, используются в прикладном решении.
// Например:
// 	В "ТабличнаяЧасть" присутствует колонка "Артикул".
// 	Колонка подлежит заполнению, если в прикладном решении для номенклатуры возможно указание артикула.
// Список колонок для заполнения:
// 	Артикул                    - ОпределяемыйТип.Артикул - артикул номенклатуры.
// 	Код                        - ОпределяемыйТип.УникальныйИдентификаторИС - код номенклатуры.
// 	ХарактеристикиИспользуются - Булево - признак обязательного использования характеристик номенклатуры.
// 	ЕдиницаИзмерения           - ОпределяемыйТип.Упаковка - базовая единица измерения номенклатуры, в которой осуществляется учет и хранение.
// 	ТипНоменклатуры            - ОпределяемыйТип.ТипНоменклатуры - тип номенклатуры.
// 	ТребуетВзвешивания         - Булево - признак, что для номенклатуры маркированные потребительские упаковки имеют индивидуальный вес.
// 	ПроизвольнаяЕдиницаУчета   - Булево - признак, что для номенклатуры базовая единица учета отличается от маркированной потребительской упаковки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		КолонкиРеквизитов = ТабличнаяЧасть.Колонки;
	Иначе
		КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	КонецЕсли;

	Если КолонкиРеквизитов.Найти("Номенклатура")= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		СписокРеквизитов.Добавить("Артикул");
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		СписокРеквизитов.Добавить("Код");
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		СписокРеквизитов.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		МассивНоменклатура = ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура");
	Иначе
		МассивНоменклатура = ТабличнаяЧасть.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
		
	МассивНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатура);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивНоменклатура, Справочники.Номенклатура.ПустаяСсылка());
	
	СоответствиеСведенийОНоменклатуре = Новый Соответствие;
	Если СписокРеквизитов.Количество() > 0 Тогда
		СоответствиеСведенийОНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатура, СписокРеквизитов);
	КонецЕсли; 
	
	Если КолонкиРеквизитов.Найти("ТребуетВзвешивания")<> Неопределено Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура В(&Номенклатура)
		|	И ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке = 0";
		
		МассивТребуетВзвешивания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Иначе
		МассивТребуетВзвешивания = Новый Массив;
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ПроизвольнаяЕдиницаУчета")<> Неопределено Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура В(&Номенклатура)
		|	И ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке <> 1";
		
		МассивПроизвольнаяЕдиницаУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Иначе
		МассивПроизвольнаяЕдиницаУчета = Новый Массив;
	КонецЕсли;
	
	ЕстьДанныеТребуетВзвешивания       = МассивТребуетВзвешивания.Количество() > 0;
	ЕстьДанныеПроизвольнаяЕдиницаУчета = МассивПроизвольнаяЕдиницаУчета.Количество() > 0;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре[СтрокаТЧ.Номенклатура];
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СведенияОНоменклатуре);
		КонецЕсли;
		
		Если ЕстьДанныеТребуетВзвешивания Тогда
			СтрокаТЧ.ТребуетВзвешивания = (НЕ МассивТребуетВзвешивания.Найти(СтрокаТЧ.Номенклатура) = Неопределено);
		КонецЕсли;
		
		Если ЕстьДанныеПроизвольнаяЕдиницаУчета Тогда
			СтрокаТЧ.ПроизвольнаяЕдиницаУчета = (НЕ МассивПроизвольнаяЕдиницаУчета.Найти(СтрокаТЧ.Номенклатура) = Неопределено);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") 
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "КодТНВЭД.Код");
		Если ЗначениеЗаполнено(КодТНВЭД) Тогда
			СтрокаТабличнойЧасти.КодТНВЭД = КодТНВЭД;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации", "ДатаСертификации", "СрокДействия", "Бессрочный".
// Информацию по сертификатам следует добавить в соответствие 
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие Из Структура - данные сертификатов:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Массив из структура:
//   ** ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - Вид сертификата.
//   ** НомерСертификации - Строка - Идентификационный номер сертификата.
//   ** ДатаСертификации - Дата - Дата начала действия сертификата.
//   ** СрокДействия - Дата - Дата окончания срока действия сертификата.
//   ** Бессрочный - Булево - истина, если сертификат бессрочный.
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Настроить способ расчета статусов оформления.
// 
// Параметры:
//  РасчетОтдельно - Булево - Истина если расчет статусов оформления осуществляется отдельно от транзакции записи
Процедура НастроитьСпособРасчетаСтатусовОформления(РасчетОтдельно) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ ГосИС который проводится
//  Отказ - Булево - флаг отказа
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Встраивание движений документов ГосИС по прикладным регистрам (при необходимости, например регистрация серий)
// 
Процедура ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по прикладным регистрам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

#Область КодыТНВЭД

// В данной процедуре требуется переопределить текст запроса, определяющий сопоставление классификатора ТН ВЭД и данных регистра сведений КодыТНВЭДИСМП.
//   Требования к тексту запроса:
//     Если классификатора ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * КодТНВЭД   - Строка - код.
//    * ВидПродукции - Перечислениессылка.ВидыПродукцииИС - вид продукции.
//    * НаименованиеПолное - Строка - наименование.
//    * КодТНВЭДСсылка - Произвольный - ссылка на сопоставленный элемент классификатора.
//    * Сопоставлено - Число - 0, если в базе найден соотвествующий элемент классификатора, 1 - если найден.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСопоставлениеКодовТНВЭД(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыТНВЭДИСМП.КодТНВЭД           КАК КодТНВЭД,
	|	КодыТНВЭДИСМП.ВидПродукции       КАК ВидПродукции,
	|	КодыТНВЭДИСМП.НаименованиеПолное КАК НаименованиеПолное,
	|
	|	ЕстьNULL(КлассификаторТНВЭД.Ссылка, Неопределено) КАК КодТНВЭДСсылка,
	|	ВЫБОР
	|		КОГДА КлассификаторТНВЭД.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сопоставлено
	|ИЗ
	|	РегистрСведений.КодыТНВЭДИСМП КАК КодыТНВЭДИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КодыТНВЭДИСМП.КодТНВЭД = КлассификаторТНВЭД.Код";
	
КонецПроцедуры

#КонецОбласти

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПродукцииИС", ВидПродукцииИС);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)";
	
	Использование = Не Запрос.Выполнить().Пустой();
			
КонецПроцедуры

#Область ОписаниеНоменклатурыИС

// В процедуре требуется определить наличие маркируемых товаров для которых нет стандартной фабричной упаковки
//   (настраиваемых не в регистре ОписаниеноменклатурыИС).
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (исходящий).
//
Процедура ИспользованиеПродукцииТребующейВзвешивания(Использование) Экспорт
	
	Использование = Истина;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании источника описания номенклатуры отличного от ссылки 
//   на номенклатуру:
//   * Дополняет входящий массив классами номенклатуры,
//   * Возвращает соответствие добавленных классов и исходной номенклатуры.
//
// Параметры:
//  Номенклатура - Массив Из ОпределяемыйТип.ИсточникОписанияноменклатурыИС - Источник описания номенклатуры.
//  СоответстиеИсточникаНоменклатуре - Соответствие - описание добавленных классов номенклатуры:
//   * Ключ - ОпределяемыйТип.ИсточникОписанияНоменклатурыИС - Источник описания номенклатуры,
//   * Значение - Массив Из ОпределяемыйТип.Номенклатура - номенклатура из входящего массива
Процедура ДополнитьИсточникиОписанияНоменклатуры(Номенклатура, СоответстиеИсточникаНоменклатуре) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре, а также при использовании режима "ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками":
//   * Дополняет входящий текст запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса получения описания номенклатуры ИС.
Процедура ДополнитьТекстЗапросаОписанияНоменклатуры(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре:
//   * Модифицирует соединение с регистром если в качестве источника описания может использоваться не номенклатура,
//   * Получает значение служебного реквизита "Произвольная единица учета" (для номенклатуры единица учета отличается от
//     маркированной потребительской упаковки),
//   * Получает значение служебного реквизита "Требует взвешивания" (маркированные потребительские упаковки имеют
//     индивидуальный вес).
//
// Параметры:
//  ТекстЗапроса          - Строка - текст запроса с регистром "ОписаниеНоменклатурыИС" (исходящий),
//  ПутьКРегистру         - Строка - имя таблицы регистра "ОписаниеНоменклатурыИС" в запросе,
//  ПутьКПолюНоменклатура - Строка - путь к номенклатуре в запросе
Процедура ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, ПутьКРегистру, ПутьКПолюНоменклатура) Экспорт
	
	Возврат;
	
КонецПроцедуры


#КонецОбласти

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
		|		ПО Товары.%4 = СведенияОбАлкогольнойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
		|		ПО СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		"ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, Ложь)",
		ИмяПоляНоменклатура);
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

// Коэффициент упаковки.
// 
// Параметры:
// Коэффициент - Число - Выходное значение коэффициента упаковки.
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
// КэшированныеЗначения - Произвольный - Кэшированные значениия
Процедура КоэффициентУпаковки(Коэффициент, Знач Упаковка, Знач Номенклатура, КэшированныеЗначения) Экспорт
	
	
	Возврат;

КонецПроцедуры

// Возвращает объем упаковки или единицы измерения в литрах.
//  * Если не задана упаковка, то для единицы учета номенклатуры
//  * Если задана упаковка, то для указанной упаковки
//  * Если задана единица измерения, то для указанной единицы измерения
// 
// Параметры:
//  Объем - Число - Объем упаковки (исходящий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка или единица измерения номенклатуры
//  КэшированныеЗначения - Произвольный - Кэшированные значения
Процедура ОбъемУпаковки(Объем, Знач Номенклатура, Знач Упаковка, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Возвращает коэффициенты переданной единицы измерения
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения - Упаковка или единица измерения
//  Номенклатура - Массив Из ОпределяемыйТип.Номенклатура - Номенклатура
//  КоэффициентыУпаковокНоменклатуры - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура
//   * Значение - структура:
//   * КодОшибки - Число  - Код ошибки получения коэффициента:
//        0 - Нет ошибок;
//        1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//        2 - В справочнике 'Номенклатура' выключена возможность пересчета количества в соответствующую мерную единицу измерения;
//        3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' с единицей измерения 'Упаковка'.
//   * Коэффициент - Число  - Коэффициент пересчета единицы измерения из 'Упаковка'.
Процедура ПриОпределенииКоэффициентовУпаковки(Упаковка, Номенклатура, КоэффициентыУпаковокНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА КлассификаторЕдиницИзмерения.Код = ""166""
	|			ТОГДА 1
	|		КОГДА КлассификаторЕдиницИзмерения.Код = ""163""
	|			ТОГДА 0.001
	|		КОГДА КлассификаторЕдиницИзмерения.Код = ""168""
	|			ТОГДА 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО Номенклатура.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		КоэффициентыУпаковокНоменклатуры.Вставить(Результат.Номенклатура, Новый Структура("Коэффициент", Результат.Коэффициент));
	КонецЦикла;
	
КонецПроцедуры

Процедура ЕдиницаИзмеренияКилограмм(ЕдиницаИзмеренияКилограмм) Экспорт
	
	Результат = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166");
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект 						= Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Объект.Код 					= "166";
		Объект.Наименование 		= НСтр("ru = 'кг'");
		Объект.НаименованиеПолное 	= НСтр("ru = 'Килограмм'");
		Объект.Записать();
		Результат 					= Объект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ЕдиницаИзмеренияКилограмм = Результат;

КонецПроцедуры

// В процедуре требуется определить единицу измерения объема с кодом по ОКЕИ 112.
// Используется для пересчета упаковок в литры.
//  
// Параметры:
//  ЕдиницаИзмеренияЛитр - ОпределяемыйТип.Упаковка - Единица измерения объема (литр).
Процедура ЕдиницаИзмеренияЛитр(ЕдиницаИзмеренияЛитр) Экспорт
	
	Результат = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("112");
	Если Не ЗначениеЗаполнено(Результат) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Объект 						= Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Объект.Код 					= "112";
		Объект.Наименование 		= НСтр("ru = 'л'");
		Объект.НаименованиеПолное 	= НСтр("ru = 'Литр'");
		Объект.Записать();
		Результат 					= Объект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	ЕдиницаИзмеренияЛитр = Результат;
	
КонецПроцедуры

// Предназначена для получения значения коэффициента, веса и объема упаковки
//
// Параметры:
//  ДанныеУпаковок - ТаблицаЗначений - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
//                    тогда получаются данные базовой единицы измерения номенклатуры.
//   * Вес          - Число - Вес упаковки.
//   * Объем        - Число - Объем упаковки.
//   * Коэффициент  - Число - Коэффициент упаковки.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                       иначе - в единицах измерения, указанных в константах:
//                                       ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
//
Процедура КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	Для Каждого СтрокаДанныеУпаковок Из ДанныеУпаковок Цикл
		СтрокаДанныеУпаковок.Коэффициент = 1;
		СтрокаДанныеУпаковок.Упаковка = СтрокаДанныеУпаковок.Номенклатура.ЕдиницаИзмерения;
		Если СтрокаДанныеУпаковок.Номенклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166") Тогда
			СтрокаДанныеУпаковок.ТипИзмеряемойВеличиныВес = Истина;
			СтрокаДанныеУпаковок.Вес = 1;
		КонецЕсли;
		Если СтрокаДанныеУпаковок.Номенклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("112") Тогда
			СтрокаДанныеУпаковок.ТипИзмеряемойВеличиныОбъем = Истина;
			СтрокаДанныеУпаковок.Объем = 1;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПродукцииИС", ВидПродукцииИС);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке <> 1
		|ГДЕ
		|	(&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак) И Номенклатура.АльтернативныйТабак)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак) И Номенклатура.ТабачнаяПродукция)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи) И Номенклатура.Духи)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво) И Номенклатура.Пиво)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво) И Номенклатура.БезалкогольноеПиво)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС) И Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		| 	ИЛИ (&ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС) И Номенклатура.МолочнаяПродукцияБезВЕТИС)";
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

#КонецОбласти


#Область ОрганизацииИКонтрагенты

// Требуется определить массив ссылок служебных организаций, исключаемых из списков выбора в библиотеке.
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списков.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Проверяет использование подразделений в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Подразделения используются (исходящий).
//
Процедура ИспользованиеПодразделений(Использовать) Экспорт
	
	
КонецПроцедуры

// Определяет использование в инофрмационной базе обособленных подразделений выделенных на отдельный баланс
// 
// Параметры:
//  Использовать - Булево - Используются подразделения, выделенных на обособленный баланс
//
Процедура ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс(Использовать) Экспорт
	
	Использовать = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделения");	
	
КонецПроцедуры

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ. Значение по умолчанию Ложь.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт

	Используется = ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ");

КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("НаименованиеДляПечатныхФорм") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение соответствия ИНН (или налогового номера в стране регистрации) и контрагентов
// для переданного массива контрагентов.
//
// Параметры:
//  СоответствиеИННКонтрагентам - Соответствие из Строка- соответствие для заполнения:
//   * Ключ - ОпределяемыйТип.КонтрагентГосИС - ссылка на контрагента.
//   * Значение - Строка - ИНН (или его аналог).
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентГосИС - массив контрагентов.
Процедура ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеИННКонтрагентам, Контрагенты) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеИННКонтрагентам.Вставить(Выборка.Контрагент, Выборка.НалоговыйНомер);
	КонецЦикла;
		
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	Подразделение = Неопределено;
	
	Если ТорговыйОбъект <> Неопределено Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТорговыйОбъект, "ПодразделениеОрганизации");
		Подразделение   = РеквизитыСклада.ПодразделениеОрганизации;
	КонецЕсли;
	
	ИННКПП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ИННКПП.Вставить("КПП", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КПП"));
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сведения, ИННКПП);
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП/GLN из информационной базы.
//
// Параметры:
//  Сведения      - Структура - структура с реквизитами организации, которые требуется заполнить,
//  Организация   - ОпределяемыйТип.Организация - ссылка на собственную организацию,
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
Процедура ПриОпределенииИННКППGLNОрганизации(Сведения, Организация, Подразделение) Экспорт
	ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	
	Если ЗначениеЗаполнено(Подразделение) И Подразделение.ОбособленноеПодразделение Тогда
		ЗначенияЗаполнения.Вставить("КПП", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КПП"));
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сведения, ЗначенияЗаполнения);
КонецПроцедуры

//Получение кода ОКОПФ по организации.
//
//Параметры:
//  КодОКОПФ    - Строка - Код ОКОПФ организации.
//  Организация - ОпределяемыйТип.Организация - Организация, для которой необходимо получить код ОКОПФ.
//
Процедура КодОКОПФОрганизации(КодОКОПФ, Организация) Экспорт
	
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(Руководители.РуководительПредставление);
	ПредставлениеРуководителя.Должность    = Строка(Руководители.РуководительДолжность);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организация = КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	Контрагент = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| Контрагенты.Ссылка КАК Контрагент,
	| Контрагенты.ИНН    КАК ИНН
	|ИЗ
	| Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	| Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив Из Строка - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//    * Ключ - Строка - Налоговый номер
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| Контрагенты.Ссылка КАК Контрагент,
	| Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ИЗ
	| Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	| Контрагенты.НалоговыйНомер В (&КоллекцияНалоговыхНомеров)
	|");
	Запрос.УстановитьПараметр("КоллекцияНалоговыхНомеров", КоллекцияНалоговыхНомеров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.НалоговыйНомер, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Организация.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| Организации.Ссылка КАК Организация,
	| Организации.ИНН    КАК ИНН
	|ИЗ
	| Справочник.Организации КАК Организации
	|ГДЕ
	| Организации.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Организация);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ХозяйствующийСубъект, Предприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ХозяйствующийСубъект, Реквизиты.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ГрузополучательХозяйствующийСубъект, ГрузополучательПредприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ГрузополучательХозяйствующийСубъект, Реквизиты.ГрузополучательПредприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ГрузополучательХозяйствующийСубъект, Объект.ГрузополучательПредприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда;
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		
	Иначе
		
		Организация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры

#КонецОбласти

// В процедуре нужно реализовать заполнение налогового номера в стране регистрации контрагента из информационной базы.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГосИС - ссылка на собственную организацию или контрагента.
//  НалоговыйНомер - Строка - налоговый номер в стране регистрации, которые требуется заполнить.
Процедура ПриОпределенииНалоговогоНомераКонтрагента(Контрагент, НалоговыйНомер) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалоговыйНомер = Выборка.НалоговыйНомер;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	Элементы = Форма.Элементы;
	
	ПодключаемоеОборудованиеМаркировка = Новый Массив;
	ПодключаемоеОборудованиеМаркировка.Добавить("ТерминалСбораДанных");
	ПодключаемоеОборудованиеМаркировка.Добавить("СканерШтрихкода");
	ПодключаемоеОборудованиеМаркировка.Добавить("СчитывательRFID");
	ПодключаемоеОборудованиеМаркировка.Добавить("ПринтерЭтикеток");
	ПодключаемоеОборудованиеМаркировка.Добавить("ЭлектронныеВесы");
	
	Форма.ИспользоватьПодключаемоеОборудование = МенеджерОборудованияБП.ИспользуетсяОборудование(ПодключаемоеОборудованиеМаркировка);
	
	// Использование ТСД
	ИспользуетсяТСД = Форма.ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияБП.ИспользуетсяОборудование("ТерминалСбораДанных");
		
	ЗагружатьДанныеИзТСД = ИспользуетсяТСД;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КоличествоСтрокПодобраннойПродукции") Тогда
		ВыгружатьДанныеВТСД = (Форма.КоличествоСтрокПодобраннойПродукции > 0) И ИспользуетсяТСД;
	Иначе
		ВыгружатьДанныеВТСД = Ложь;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
		
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Префикс + "ЗагрузитьДанныеИзТСД", "Видимость", ЗагружатьДанныеИзТСД);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Префикс + "ВыгрузитьДанныеВТСД",  "Видимость", ВыгружатьДанныеВТСД);
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузитьДанныеИзТСД", "Видимость", ЗагружатьДанныеИзТСД);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыгрузитьДанныеВТСД",  "Видимость", ВыгружатьДанныеВТСД);
	КонецЕсли;
	
	// Использование весов
	ИспользуютсяВесы = Форма.ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияБП.ИспользуетсяОборудование("ЭлектронныеВесы");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучитьВес", "Видимость", ИспользуютсяВесы);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	

	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры


// Возвращаяет представление объекта.
// 
// Параметры:
// 	Представление - Строка - Исходящий параметр со значением представления.
// 	ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
//
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	Представление = ОбменДаннымиСервер.ПредставлениеОбъекта(ПараметрОбъект);
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли; 
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, ЕдиницаИзмерения", Истина);
	Представление = ?(ЗначениеЗаполнено(РеквизитыНоменклатуры.НаименованиеПолное), РеквизитыНоменклатуры.НаименованиеПолное, РеквизитыНоменклатуры.Наименование);
	
КонецПроцедуры

#КонецОбласти


#Область ВызовыИзБСП

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// В процедуре необходимо реализовать проверку возможности выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий.
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии.
//  СерияДолжнаБытьУказана - Булево - исходящий, признак обязательного заполнения серии.
//  КэшированныеЗначения   - Произвольный - кэшированные значения
//
Процедура ПриОпределенииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор, СерияДолжнаБытьУказана, КэшированныеЗначения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Произвольный     - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  Объект    - ДокументОбъект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Произвольный - См. ИнтеграцияИС.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устарело. Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ГосИС или его выделенных строках
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект для заполнения
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть документа
//  ВыделенныеСтроки - Массив Из ДанныеФормыЭлементКоллекции - выделенные строки документа
//  ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий
//  РезультатЗаполненияСерий - см. ИнтеграцияИС.РезультатГенерацииИЗаполненияСерий.
Процедура ПриГенерацииСерий(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, РезультатЗаполненияСерий) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#Область Локализация

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры)
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	Использование = Ложь;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	Использование = Ложь;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	Использование = Ложь;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	Использование = Ложь;
	
КонецПроцедуры
