#Область ПрограммныйИнтерфейс

// Определяет, требуется ли в информационной базе вести налоговый учет по налогу на прибыль организаций.
// 
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяНалоговыйУчет() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетЮридическогоЛица")
		И ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО");
		
КонецФункции

// Закрывает забалансовые счета, на которых в течение налогового периода накапливаются суммы расходов и доходов,
// не принятых для целей налогообложения.
// Проводки в Дт счетов расходов и Кт счетов доходов формируются в ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете регистра бухгалтерии.
//
// Параметры:
//  Проводки    - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - дополняемый набор записей
//  Период      - Дата - период, характеризующий закрываемый год; он же используется для записи проводок
//  Организация - СправочникСсылка.Организации - организация (головная организация), в учете которой закрываются счета.
//                Автоматическая реформация баланса в организации с обособленными подразделениями не обеспечивается:
//                например, для расходов проводки по Дт счета формируются в разрезе филиалов, а проводки по Кт - по головной организации.
//
Процедура ЗакрытьСчетДоходыРасходыНеУчитываемые(Проводки, Период, Организация) Экспорт
	
	// Действие выполняется по окончании налогового периода
	НалоговыйПериод = БлижайшийНалоговыйПериод(Период, Организация);
	Если КонецМесяца(Период) <> НалоговыйПериод.Конец Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",   КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ВсяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Счета",          БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДоходыРасходыНеУчитываемые));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&Счета), , Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки";
	
	СчетаДоходов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДоходыНеУчитываемые);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru = 'Закрытие года'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Если СчетаДоходов.Найти(Выборка.Счет) = Неопределено Тогда
			// Расходы
			Проводка.СчетКт = Выборка.Счет; // Забалансовый
			СуммаНУ = Выборка.СуммаНУ;
		Иначе
			// Доходы
			Проводка.СчетДт = Выборка.Счет; // Забалансовый
			СуммаНУ = -Выборка.СуммаНУ;
		КонецЕсли;
		
		ЗаполнитьНалоговыеСуммыПроводки(
			СуммаНУ, СуммаНУ,
			0, 0,
			0, 0,
			Проводка);
				
		Проводки.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Корректирует проводки налогового учета для выполнения требований по отражению возвратов товаров в налоговой декларации
// как прибылей или убытков прошлых лет.
//
// Таким образом учитываются возвраты товаров, реализованных в прошлом налоговом периоде -
// см. письмо Минфина от 25 июля 2016 г. N 03-03-06/1/43372
//
// При этом порядок отражения доходов и расходов должен существенно отличаться от бухгалтерского учета - формула проводки "противоположная":
//  - вместо уменьшения выручки по обычным видам деятельности - увеличение внереализационного убытка
//  - вместо уменьшения себестоимости продаж - увеличение внереализационных доходов (прибыли).
//
// Поэтому проводки формируются в два этапа:
// 1. по правилам бухгалтерского учета, с заполнением сумм налогового учета
// 2. суммы налогового учета по счетам выручки и себестоимости очищаются - переносятся в новые,
//    отдельные сводные записи.
//    Таким образом суммы налогового учета корректируются только в части доходов и расходов, но не активов и обязательств.
//
// На момент вызова процедуры должен быть выполнен первый этап: сформированы (помещены в переданный набор записей)
// проводки по правилам бухгалтерского учета.
// Процедура по этим данным дополнит набор записей проводками, корректирующими доходы и расходы:
//  Дт 90.02 Кт 91.01
//  Дт 91.02 Кт 90.01,
//  перенеся в них суммы налогового учета.
//
// Параметры:
//  Проводки       - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - набор записей, содержащий проводки с данными о возврате товаров
//  ДатаРеализации - Дата - дата реализации возвращаемых товаров
//  ДатаВозврата   - Дата - дата возврата товаров (формирования проводок)
//  Организация    - СправочникСсылка.Организации - налогоплательщик
//
Процедура СкорректироватьПроводкиВозвратТоваровПрибылиУбыткиПрошлыхЛет(Проводки, ДатаРеализации, ДатаВозврата, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаВозврата) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРеализации = НачалоНалоговогоПериода(ДатаРеализации, Организация);
	ПериодВозврата   = НачалоНалоговогоПериода(ДатаВозврата, Организация);
	
	Если ПериодРеализации = Неопределено Или ПериодВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодРеализации >= ПериодВозврата Тогда
		Возврат;
	КонецЕсли;
	
	ПрибылиУбытки = СкорректироватьВыручкуСебестоимостьПоВозвратамТоваровПрошлыхЛет(Проводки, ДатаВозврата, Организация);
	
	ОтразитьПрибылиУбыткиПоВозвратамТоваровПрошлыхЛет(Проводки, ПрибылиУбытки, ДатаВозврата, Организация);
	
КонецПроцедуры

// Определяет перечень счетов учета выручки и себестоимости продаж, используемых в целях налогового учета по налогу на прибыль.
// Из перечня счетов исключаются субсчета, предназначенные для учета деятельности, не облагаемой налогом на прибыль.
//
// Параметры:
//  Период      - Дата - период, характеризующий отчетный (налоговый) период
//  Организация - СправочникСсылка.Организации - налогоплательщик
// 
// Возвращаемое значение:
// Структура - индексированные коллекции счетов:
//  * Выручка - Соответствие - перечень счетов выручки; Ключ - ссылка на счет, Значение - отлично от Неопределено
//  * СебестоимостьПродаж - Соответствие - перечень счетов себестоимости продаж; Ключ - ссылка на счет, Значение - отлично от Неопределено
//
Функция СчетаВыручкиСебестоимости(Период, Организация) Экспорт
	
	СчетаВыручкиСебестоимости = Новый Структура;
	СчетаВыручкиСебестоимости.Вставить("Выручка",             Новый Соответствие);
	СчетаВыручкиСебестоимости.Вставить("СебестоимостьПродаж", Новый Соответствие);
	
	Запрос = Новый Запрос;
	// Текст запроса может быть модифицирован схемой запроса: удалено использование СчетаДоходовИРасходовЕНВД
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Выручка"" КАК ТипСчета,
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО (СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.НалоговыйУчет
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|	И СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СебестоимостьПродаж"",
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО (СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.НалоговыйУчет
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|	И СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL";
	
	Если Не УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		ОбщегоНазначенияБП.УдалитьИсточникЗапроса(Запрос.Текст, "СчетаДоходовИРасходовЕНВД");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетаВыручкиСебестоимости[Выборка.ТипСчета].Вставить(Выборка.Счет, Выборка.Счет);
	КонецЦикла;
	
	Возврат СчетаВыручкиСебестоимости;
	
КонецФункции

Функция НоваяТаблицаНачисленияНалога() Экспорт

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("СчетДт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("СчетКт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("ПрибылиИУбытки",         Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	Результат.Колонки.Добавить("ВидыПлатежейВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("Содержание",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат Результат;

КонецФункции

// Устанавливает значения субконто для проводки по начислению налога
//
// Параметры:
//   ТекущаяПроводка - Структура, СтрокаТаблицыЗначения - данные проводки по начислению налога
//   Счет            - ПланСчетовСсылка.Хозрасчетный - счет, для которого требуется установить субконто
//   СубконтоСчета   - РегистрБухгалтерииСубконто.Хозрасчетный - субконто, для которого требуется установить значения
//
Процедура УстановитьСубконтоСчетаПоНачислениюНалога(ТекущаяПроводка, Счет, СубконтоСчета) Экспорт
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	ВидСубконтоПрибытиИУбытки = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки;
	ВидСубконтоПлатежиВБюджет = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	
	Для Индекс = 1 По 3 Цикл
		
		Если СвойстваСчета[СтрШаблон("ВидСубконто%1", Индекс)] = ВидСубконтоПрибытиИУбытки Тогда
			БухгалтерскийУчет.УстановитьСубконто(Счет,
				СубконтоСчета,
				"ПрибылиИУбытки",
				ТекущаяПроводка.ПрибылиИУбытки);
		КонецЕсли;
		
		Если СвойстваСчета[СтрШаблон("ВидСубконто%1", Индекс)] = ВидСубконтоПлатежиВБюджет Тогда
			БухгалтерскийУчет.УстановитьСубконто(Счет,
				СубконтоСчета,
				"ВидыПлатежейВГосБюджет",
				ТекущаяПроводка.ВидыПлатежейВГосБюджет);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, учитываются ли суммы затрат для целей налогообложения, исходя из статьи затрат.
//
// Назначение статьи (вид деятельности) не проверяется, так как предполагается, что раздельный учет
// по видам деятельности обеспечивается разрезами учета (например, субсчетами), а не суммами проводок.
//
// Параметры:
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - проверяемая статья затрат
// 
// Возвращаемое значение:
//  Булево - Истина, если расходы учитываются для целей налогообложения.
//
Функция СтатьяЗатратУчитывается(СтатьяЗатрат) Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатрат);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.Ссылка = &СтатьяЗатрат
	|	И СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает процент или сумму нормирования.
// 
// Параметры:
//  ВидРасходовНУ - ПеречислениеСсылка.ВидыРасходовНУ - Вид расходов налогового учета.
// 
// Возвращаемое значение:
//  Число - Процент или сумма, исходя из которых рассчитывается ограничение.
//
Функция НормаРасходов(ВидРасходовНУ) Экспорт
	
	Если ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
		// п. 16, ст. 255 НК РФ
		// Взносы по договорам добровольного личного страхования, 
		// предусматривающим выплаты исключительно в случаях смерти и (или) причинения вреда здоровью застрахованного лица, 
		// включаются в состав расходов в размере, не превышающем 15 000 рублей в год, 
		// рассчитанном как отношение общей суммы взносов, 
		// уплачиваемых по указанным договорам, к количеству застрахованных работников.
		Возврат 15000;
	ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Тогда
		// п. 16, ст. 255 НК РФ
		// Добровольное личное страхование
		// Взносы по договорам добровольного личного страхования, предусматривающим оплату страховщиками медицинских расходов 
		// застрахованных работников ... включаются в состав расходов в размере, 
		// не превышающем 6 процентов от суммы расходов на оплату труда.
		Возврат 0.06;
	ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Тогда
		// п. 16, ст. 255 НК РФ 
		// Совокупная сумма взносов работодателей, уплачиваемых ... на накопительную часть трудовой пенсии,
		// по договорам долгосрочного страхования жизни работников, 
		// добровольного пенсионного страхования и (или) негосударственного пенсионного обеспечения работников, 
		// учитывается в целях налогообложения в размере, 
		// не превышающем 12 процентов от суммы расходов на оплату труда.
		Возврат 0.12;
	ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
		// п. 4, ст. 264 НК РФ
		// Расходы на отдельные виды рекламы признаются в размере, не превышающем 1 процента выручки от реализации
		Возврат 0.01;
	ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
		// п. 2, ст. 264 НК РФ
		// Представительские расходы ... включаются в состав прочих расходов в размере, 
		// не превышающем 4 процента от расходов налогоплательщика на оплату труда.
		// Есть разъяснение, что в сумму этих расходов входит не только оплата труда, 
		// но и другие вознаграждения сотрудникам (страхование)
		Возврат 0.04;
	ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Тогда
		// п. 24.1, ст. 255 НК РФ
		// Расходы на возмещение затрат работников по уплате процентов по займам
		// расходы на возмещение затрат работников по уплате процентов по займам (кредитам) 
		// на приобретение и (или) строительство жилого помещения ... признаются в размере, 
		// не превышающем 3 процентов суммы расходов на оплату труда
		Возврат 0.03;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

#Область Антикризис

// Определяет, что на организацию распространяется освобождение от налогов,
// установленное статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево
//
Функция ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(Организация);
	
	Возврат ПараметрыПродленияСроков.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	
КонецФункции

// Определяет период освобождения от налогов, установленный статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
// 
// Возвращаемое значение:
//  Структура - ключи Начало,Конец - даты
//
Функция ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса() Экспорт
	
	ВторойКвартал2020 = '2020-04-01';
	
	Период = Новый Структура;
	Период.Вставить("Начало", ВторойКвартал2020);
	Период.Вставить("Конец",  КонецКвартала(ВторойКвартал2020));
	
	Возврат Период;
	
КонецФункции

// Содержит перечень налогов, по которым предусмотрено освобождение статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
// 
// Возвращаемое значение:
//  Массив из Строка - идентификаторы задач из списка задач бухгалтера
//
Функция НалогиОсвобождениеПострадавшихОтКоронавируса() Экспорт
	
	Налоги = Новый Массив;
	
	Налоги.Добавить("НалогНаПрибыль");       // подп. 1
	Налоги.Добавить("Акцизы");               // подп. 2
	Налоги.Добавить("ВодныйНалог");          // подп. 3
	Налоги.Добавить("НДПИ");                 // подп. 4
	Налоги.Добавить("ЕСХН");                 // подп. 5
	Налоги.Добавить("УСН");                  // подп. 6
	Налоги.Добавить("ЕНВД");                 // подп. 7
	Налоги.Добавить("ТранспортныйНалог");    // подп. 8
	Налоги.Добавить("НалогНаИмущество");     // подп. 9
	Налоги.Добавить("ЗемельныйНалог");       // подп. 10
	// подп. 11 - налог на имущество физических лиц, который не учитывается в программе
	Налоги.Добавить("НДФЛ_Предприниматель"); // подп. 12
	Налоги.Добавить("ТорговыйСбор");         // подп. 13
	
	Возврат Налоги;
	
КонецФункции

// Возвращает текст содержания проводки по освобождению от налога
//
// Параметры:
//  Период - Дата - дата, для которой формируется текст содержания проводки
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(Период) Экспорт
	
	НомерКвартала = Месяц(КонецКвартала(Период)) / 3;
	Год = Год(Период);
	
	Возврат СтрШаблон(НСтр("ru = 'Освобождение от налога за %1 квартал %2 года'"), НомерКвартала, Формат(Год, "ЧГ=0"));
	
КонецФункции

// Определяет, возможно ли освобождение от конкретного налога в конкретном периоде.
// Для проверки, имеет ли право организация на это освобождение, следует дополнительно применять
// ДеятельностьОтнесенаКПострадавшимОтКоронавируса
//
// Параметры:
//  КодЗадачи   - Строка - код задачи по уплате налога
//  Период      - Дата - период, для которого требуется проверить, возможно ли освобождение от налога
// 
// Возвращаемое значение:
//  Булево
//
Функция ВозможноОсвобождениеОтНалога(КодЗадачи, Период) Экспорт
	
	ПериодОсвобождения = ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	Если Период < ПериодОсвобождения.Начало Или Период > ПериодОсвобождения.Конец Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсвобожденныеНалоги = НалоговыйУчет.НалогиОсвобождениеПострадавшихОтКоронавируса();
	Возврат (ОсвобожденныеНалоги.Найти(КодЗадачи) <> Неопределено);
	
КонецФункции

// Добавляет данные по освобождению от налога в таблицу проводок
//
// Параметры:
//   ТаблицаПроводок - ТаблицаЗначений - См. НоваяТаблицаНачисленияНалога()
//   Период          - Дата - Дата начисления налога
//   СчетРасчетов    - ПланСчетовСсылка.Хозрасчетный - счет начисления налога
//   Сумма           - Число - Сумма к уплате
//
Процедура ДополнитьПроводкамиПоОсвобождениюОтНалога(ТаблицаПроводок, Период, СчетРасчетов, Сумма) Экспорт
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	
	СтрокаПроводки = ТаблицаПроводок.Добавить();
	Содержание = НалоговыйУчет.ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(Период);
	
	СтрокаПроводки.СчетДт                 = СчетРасчетов;
	СтрокаПроводки.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	СтрокаПроводки.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	СтрокаПроводки.Сумма                  = Сумма;
	СтрокаПроводки.Содержание             = Содержание;
	
КонецПроцедуры

// Возвращает сумму налога, которая была освобождена от уплаты в бюджет
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - Организация, для которой необходимо рассчитать сумму
//   НачалоПериода - Дата - начала периода, за который требуется рассчитать сумму освобожденного налога
//   КонецПериода  - Дата - конец периода, за который требуется рассчитать сумму освобожденного налога
//   СчетРасчетов  - ПланСчетовСсылка.Хозрасчетный - счет начисления налога
//
// Возвращаемое значение:
//   Число
//
Функция СуммаОсвобожденияОтНалога(Организация, НачалоПериода, КонецПериода, СчетРасчетов) Экспорт
	
	ПериодОсвобождения = ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	Если (КонецПериода < ПериодОсвобождения.Начало Или НачалоПериода > ПериодОсвобождения.Конец)
		Или Не ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет = &СчетРасчетов,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежей),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки),
	|			) КАК ХозрасчетныйОбороты");
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("СчетРасчетов",  СчетРасчетов);
	Запрос.УстановитьПараметр("ВидыПлатежей",  Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Сумма;
	
КонецФункции

#КонецОбласти

#Область НалоговыйПериод

// Идентифицирует вариант, как имеющий отношение к налогу на прибыль
//
// Параметры:
//  ВариантНалоговогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный вариант применяется для налога на прибыль
//
Функция ПрименяютсяПравилаРасширенногоНалоговогоПериода(ВариантНалоговогоПериода) Экспорт
	
	Возврат ВариантНалоговогоПериода = Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре;
	
КонецФункции

// Определяет дату начала налогового периода по налогу на прибыль.
//
// Параметры:
//  Период	    - Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - организация, дату регистрации которой следует учесть при получении периода
// 
// Возвращаемое значение:
//  Дата         - дата начала налогового периода по налогу на прибыль
//  Неопределено - в запрошенный период организация не существовала
//
Функция НачалоНалоговогоПериода(Период, Организация) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	ОписаниеПериода = БлижайшийНалоговыйПериод(Период, ГоловнаяОрганизация);
	Если ОписаниеПериода.Начало > Период Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПериода.Начало;
	
КонецФункции

// Определяет дату окончания предыдущего отчетного периода по налогу на прибыль в рамках налогового периода.
//
// Параметры:
//  Период	    - Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - организация, сведения о которой следует учесть при получении периода
//  Кеш         - Соответствие - можно передать, если для одной и той же организации следует определить множество отчетных периодов.
//                Для вызовов с разными организациями следует передавать разный Кеш.
// 
// Возвращаемое значение:
//  Дата         - дата окончания предыдущего отчетного периода по налогу на прибыль.
//  Неопределено - это первый отчетный период в течение налогового - предыдущего нет
//
Функция КонецПредыдущегоОтчетногоПериода(Период, Организация, Кеш = Неопределено) Экспорт
	
	Если Кеш = Неопределено Тогда
		ПериодичностьОтчетногоПериода = ПериодичностьОтчетногоПериода(Период, Организация);
	Иначе
		НалоговыйПериод = НачалоГода(Период);
		ПериодичностьОтчетногоПериода = Кеш[НалоговыйПериод];
		Если ПериодичностьОтчетногоПериода = Неопределено Тогда
			ПериодичностьОтчетногоПериода = ПериодичностьОтчетногоПериода(Период, Организация);
			Кеш.Вставить(НалоговыйПериод, ПериодичностьОтчетногоПериода);
		КонецЕсли;
	КонецЕсли;
	
	НачалоОчередногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьОтчетногоПериода, Период);
	
	Если НачалоОчередногоПериода = НачалоГода(Период) Тогда
		// Это первый отчетный период.
		// Здесь сравнение именно с формальным идентификатором отчетного периода (началом календарного года),
		// а не налогового периода
		Возврат Неопределено;
	КонецЕсли;
	
	КонецПредыдущегоОтчетногоПериода = НачалоОчередногоПериода - 1;
	
	НачалоНалоговогоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонецПредыдущегоОтчетногоПериода < НачалоНалоговогоПериода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонецПредыдущегоОтчетногоПериода;
	
КонецФункции

// Определяет периодичность, с которой должна отчитываться организация в данном налоговом периоде
//
// Параметры:
//  Период		- Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - налогоплательщик
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность (продолжительность первого отчетного периода)
//
Функция ПериодичностьОтчетногоПериода(Период, Организация) Экспорт
	
	ПорядокУплатыАвансов = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПорядокУплатыАвансовДействующейНастройки(Организация, Период);
												
	Если ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли Тогда
		Возврат Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	Возврат Перечисления.Периодичность.Квартал;
	
КонецФункции

// Определяет периодичность, с которой уплачивается налог
// данной организацией за данный налоговый период
//
// Параметры:
//  Период      - Дата - дата, характеризующая налоговый период
//  Организация - СправочникСсылка.Организации - налогоплательщик
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность (периодичность уплаты налога или авансового платежа)
//
Функция ПериодичностьУплатыНалога(Период, Организация) Экспорт
	
	ПорядокУплатыАвансов = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПорядокУплатыАвансовДействующейНастройки(Организация, Период);
	
	Если ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально Тогда
		Возврат Перечисления.Периодичность.Квартал;
	Иначе
		Возврат Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
КонецФункции

// Определяет границы налогового периода, к которому относится переданная дата.
//  Возвращает данные первого налогового периода организации, если переданная дата относится к периоду до ее создания.
//
// Параметры:
//  ПроверяемыйПериод	 - Дата - дата в периоде, границы которого определяются
//  Организация			 - СправочникСсылка.Организации - налогоплательщик
// 
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало налогового периода (например, 01 июля для третьего квартала);
//    * Начало - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации;
//    * Конец  - Дата - дата с указанием времени.
// 
Функция БлижайшийНалоговыйПериод(ПроверяемыйПериод, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		ПроверяемыйПериод,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Перечисления.Периодичность.Год);
		
КонецФункции

// Готовит тексты информации для пользователя об особенностях первого налогового периода по налогу на прибыль
// организации, зарегистрированной в декабре.
//
// Параметры:
//  Период		- Дата - конец отчетного периода, к которому относится информация
//  Организация	- СправочникСсылка.Организации - налогоплательщик
//  ОписаниеНалоговогоПериода 
//              - Структура - результат функции ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод.
//                Может быть передан для оптимизации производительности, если уже рассчитан в вызывающем коде.
// 
// Возвращаемое значение:
//  Структура - ИнформированиеНалоговыйПериодКлиентСервер.НовыйИнформация
//
Функция ИнформацияНалоговыйПериод(Период, Организация, ОписаниеНалоговогоПериода = Неопределено) Экспорт

	Возврат ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Период,
		Организация,
		НСтр("ru = 'декларацию по налогу на прибыль'"),
		Перечисления.Периодичность.Год,
		ПериодичностьОтчетногоПериода(Период, Организация),
		ОписаниеНалоговогоПериода);

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

Функция ИспользуютсяСпециальныеНалоговыеРежимы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") 
		Или ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент");
		
КонецФункции

Функция УчетВРазрезеНалоговыхОрганов() Экспорт
	
	ВедетсяУчет = Ложь;
	НалоговыйУчетОбособленныхПодразделений.ОпределитьВедениеУчетаВРазрезеНалоговыхОрганов(ВедетсяУчет);
	Возврат ВедетсяУчет;
	
КонецФункции

// Определяет налоговый орган, в который подается декларация по налогу на прибыль по организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация - плательщик налога на прибыль 
//  Период	    - Дата - дата, характеризующая налоговый период
// 
// Возвращаемое значение:
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция РегистрацияОрганизацииВНалоговомОргане(Организация, Период) Экспорт
	
	РегистрацияВНалоговомОргане = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ОпределитьТекущуюРегистрациюОрганизацииВНалоговомОргане(РегистрацияВНалоговомОргане, Организация, Период);
	
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");	
	КонецЕсли; 
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

Функция ЕстьОбособленныеПодразделения(Организация) Экспорт
	
	ЕстьПодразделения = Ложь;
	НалоговыйУчетОбособленныхПодразделений.ОпределитьЕстьОбособленныеПодразделения(ЕстьПодразделения, Организация);
	Возврат ЕстьПодразделения;
	
КонецФункции

Функция ЭтоСубконтоРегистрацияВНалоговомОргане(ВидСубконто) Экспорт
	
	ЭтоСубконтоРегистрация = Ложь;
	НалоговыйУчетОбособленныхПодразделений.ОпределитьСубконтоРегистрацияВНалоговомОргане(
		ЭтоСубконтоРегистрация, ВидСубконто);
	Возврат ЭтоСубконтоРегистрация;
	
КонецФункции

#КонецОбласти

#Область Проводки

// Процедура устанавливает в проводке суммы НУ,ПР,ВР в зависимости от признака ведения налогового учета на счете
//
Процедура ЗаполнитьНалоговыеСуммыПроводки(СуммаНУДт = 0, СуммаНУКт = 0,
			СуммаПРДт = 0, СуммаПРКт = 0, СуммаВРДт = 0, СуммаВРКт = 0, Проводка, ЕстьРазницы = Истина) Экспорт
	
	Если Проводка.СчетДт.НалоговыйУчет Тогда
		Проводка.СуммаНУДт = СуммаНУДт;
		
		Если ЕстьРазницы Тогда
			Проводка.СуммаПРДт = СуммаПРДт;
			Проводка.СуммаВРДт = СуммаВРДт;
		КонецЕсли;
		
	Иначе
		Проводка.СуммаНУДт = 0;	
		Проводка.СуммаПРДт = 0;
		Проводка.СуммаВРДт = 0;	
	КонецЕсли;
	
	Если Проводка.СчетКт.НалоговыйУчет Тогда
		Проводка.СуммаНУКт = СуммаНУКт;
		
		Если ЕстьРазницы Тогда
			Проводка.СуммаПРКт = СуммаПРКт;
			Проводка.СуммаВРКт = СуммаВРКт;
		КонецЕсли;
		
	Иначе
		Проводка.СуммаНУКт = 0;	
		Проводка.СуммаПРКт = 0;
		Проводка.СуммаВРКт = 0;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ЭтоНепринимаемыйРасходНУ(СтатьяЗатрат1, СтатьяЗатрат2, СтатьяЗатрат3) Экспорт
	
	НеПринимаемыйРасход = Ложь;
	
	Если ТипЗнч(СтатьяЗатрат1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат1.ЭтоГруппа
			И СтатьяЗатрат1.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения
			И СтатьяЗатрат1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	ИначеЕсли ТипЗнч(СтатьяЗатрат2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат2.ЭтоГруппа
			И СтатьяЗатрат2.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения
			И СтатьяЗатрат2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	ИначеЕсли ТипЗнч(СтатьяЗатрат3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		НеПринимаемыйРасход = НЕ СтатьяЗатрат3.ЭтоГруппа
			И СтатьяЗатрат3.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения
			И СтатьяЗатрат3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	Иначе
		
		СтатьиПрочихРасходов = Новый Массив;
		СтатьиПрочихРасходов.Добавить(СтатьяЗатрат1);
		СтатьиПрочихРасходов.Добавить(СтатьяЗатрат2);
		СтатьиПрочихРасходов.Добавить(СтатьяЗатрат3);
		
		НеПринимаемыйРасход = ЗапрещеноОтражатьСуммыНалоговогоУчетаПоСтатьямПрочихРасходов(СтатьиПрочихРасходов);
		
	КонецЕсли;
	
	Возврат НеПринимаемыйРасход;
	
КонецФункции

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то возвращаемое значение "истина".
//
// Параметры:
//  Проводка     - РегистрБухгалтерииЗапись - анализируемая проводка.
//  ПровереноСчетДтНеСтроительствоОбъектовОсновныхСредств - Булево - передавать Истина может понадобиться из соображений производительности.
//                                                         Проверку рекомендуется выполнять снаружи, если функция вызывается в цикле.
//
Функция ОпределитьНеПринимаемыеРасходы(Проводка, ПровереноСчетДтНеСтроительствоОбъектовОсновныхСредств = Ложь) Экспорт
	
	// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
	Если Не ПровереноСчетДтНеСтроительствоОбъектовОсновныхСредств
	   И БухгалтерскийУчетПовтИсп.СчетВИерархии(Проводка.СчетДт, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Субконто1 = Неопределено;
	Субконто2 = Неопределено;
	Субконто3 = Неопределено;
	
	Для каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если Субконто1 = Неопределено Тогда
			Субконто1 = Субконто.Значение;
		ИначеЕсли Субконто2 = Неопределено Тогда
			Субконто2 = Субконто.Значение;
		ИначеЕсли Субконто3 = Неопределено Тогда
			Субконто3 = Субконто.Значение;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ЭтоНепринимаемыйРасходНУ(Субконто1, Субконто2, Субконто3);
		
КонецФункции

Функция ПолучитьМассивСчетовУчетаРасходов() Экспорт
	
	СчетаЗатрат = Новый Массив;
	
	// Добавим все субсчета счета 20 "Основное производство".
	СчетаОсновноеПроизводство = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаЗатрат, СчетаОсновноеПроизводство);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СчетаЗатрат, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	
	// Исключим счет 20.02 "Производство продукции из давальческого сырья" и его субсчета.
	СчетаПроизводствоИзДавальческогоСырья =
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СчетаЗатрат = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаЗатрат, СчетаПроизводствоИзДавальческогоСырья);
	
	// Добавим все субсчета счета 23 "Вспомогательные производства".
	Счета23 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства_);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаЗатрат, Счета23);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СчетаЗатрат, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства_);
	
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	
	Возврат СчетаЗатрат;
	
КонецФункции

#КонецОбласти

#Область НалоговыеСтавки

// Определяет ставку налога на прибыль, подлежащего уплате в федеральный бюджет
//
// Параметры:
//  Период	              - Дата - характеризует налоговый период
//  Организация	          - СправочникСсылка.Организации - налогоплательщик
//  ФормаПредставленияРезультата 
//                        - Строка - форма, в которой функция вернет значение
//                          * "Доля"                              - как доля от налоговой базы (например, 0,2)
//                          * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%)
// 
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата)
//
Функция НалоговаяСтавкаФедеральныйБюджет(Период, Организация, ФормаПредставленияРезультата = "Доля") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкиНалога.СтавкаФБ КАК Ставка
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период, &Организация = Организация) КАК СтавкиНалога";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВПроцентах = Выборка.Ставка;
	Иначе
		ЗначениеВПроцентах = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюФедеральныйБюджет(Период);
	КонецЕсли;
	
	Если ФормаПредставленияРезультата = "Доля" Тогда
		Возврат ЗначениеВПроцентах / 100;
	Иначе
		Возврат ЗначениеВПроцентах;
	КонецЕсли;
	
КонецФункции

// Определяет ставку налога на прибыль, подлежащего уплате в региональный бюджет (бюджет субъекта Российской Федерации)
//
// Параметры:
//  Период	              - Дата - характеризует налоговый период
//  Организация           - СправочникСсылка.Организации	- налогоплательщик
//  ФормаПредставленияРезультата 
//                        - Строка - форма, в которой функция вернет значение
//                          * "Доля"                              - как доля от налоговой базы (например, 0,2)
//                          * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%)
// 
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата)
//
Функция НалоговаяСтавкаРегиональныйБюджет(Период, Организация, ФормаПредставленияРезультата = "Доля") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкиНалога.СтавкаСубъектРФ КАК Ставка
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период, &Организация = Организация) КАК СтавкиНалога";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВПроцентах = Выборка.Ставка;
	Иначе
		ЗначениеВПроцентах = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюРегиональныйБюджет(Период);
	КонецЕсли;
	
	Если ФормаПредставленияРезультата = "Доля" Тогда
		Возврат ЗначениеВПроцентах / 100;
	Иначе
		Возврат ЗначениеВПроцентах;
	КонецЕсли;
	
КонецФункции

// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Используется в режиме совместимости с редакцией ПБУ 18 2015 года.
// После - см. НалогНаПрибыльБухгалтерскийУчет.ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств() Экспорт
	
	// Количество строк в этой таблице не может превышать 1000 - см. РасчетНалогаНаПрибыль.СоздатьНастройкиСчетовДляРасчета()
	
	Если  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 1 ТОгда
		ЕстьСкладскойУчет = Ложь;
	ИНачеЕсли  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 2 ТОгда
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	Иначе
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств, Строка"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",                  Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",               Новый ОписаниеТипов("Массив"));

	// Для ОС и НМА установим признак, что данные необходимо группировать без учета самого счета (в целом по субконто).
	// Это нужно, так как стоимость основного средства в общем случае "размазана" по двум счетам - стоимости ОС и "накопленной" амортизации.
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ГруппироватьПоСчету", Новый ОписаниеТипов("Булево"));
	
	// Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.ГруппироватьПоСчету    = Ложь;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
	НоваяСтрока.ГруппироватьПоСчету    = Ложь;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Нематериальные активы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Ложь;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы   08.01.1
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковСДопРасходами);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04.1
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы 08.05
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Внеоборотные активы 08.08
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	// Внеоборотные активы 08.11 и 08.12
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеПоисковыеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеПоисковыеАктивы);
	
	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	СчетаУчетаМатериалов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		КодСчета = СчетУчетаМатериалов.Код;
		Если Лев(КодСчета, 5) = "10.МЦ"
			Или Лев(КодСчета, 5) = "10.11" 
			Или Лев(КодСчета, 5) = "10.07" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Материалы  в переработке
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Материалы  в эксплуатации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации.Ссылка);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	
	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Основые средства отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		
	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Финансовые вложения (обесценение; счет 59)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	// Оценки по обесценению учитываем обособленно от первоначальной оценки актива,
	// так как детализация на счете 59 не позволяет однозначно идентифицировать актив:
	// на счете 58 есть субсчета, отличающиеся аналитикой, а на счете 59 нет субсчетов и аналитика беднее.
	НоваяСтрока.ГруппироватьПоСчету = Истина; 
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);	
	
	// Дебиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Кредиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях (пассивные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях (активные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в валюте (пассивные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в валюте (активные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	
	// Недостачи и потери от порчи ценностей
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
	
	// Оценочные обязательства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	
	// Резервы по сомнительным долгам
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	// Прочие доходы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеДоходы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы)); // 91.01
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	// Прочие расходы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ПрочиеРасходы;
	НоваяСтрока.ГруппироватьПоСчету    = Истина;
	НоваяСтрока.Счета = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы)); // 91.02
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);

	// Убытки прошлых лет
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УбыткиПрошлыхЛет);
	
	// Заполнение прочих настроек расчета.
	Для каждого НоваяСтрока Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если НоваяСтрока.Счета.Количество() > 0 Тогда
			
			УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
			УсловияОтбора.ИспользоватьВПроводках = Неопределено;
			НоваяСтрока.Счета = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(НоваяСтрока.Счета, УсловияОтбора);
				
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ТаблицаВидовАктивовИОбязательств;
	
КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДекларацияПоПрибыли

Процедура ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2010Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010503", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030019003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040015003", Истина, Истина);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010703", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030019003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040015003", Истина, Истина);
	
КонецПроцедуры

// Функция рассчитывает прибыли убытки по указанном виду доходов и расходов
//
// Параметры:
//   Счет учета доходов   91.01
//   Счет учета расходов  91.02
//   Вид доходов и расходов из перечисления ВидыПрочихДоходовИРасходов
//   Флаг выдаваемого результата. "Убыток" - выдать сумму убытка, иначе - выдать сумму прибыли.
//
//
Функция ПрибылиИУбытки(Запрос, Счет911, Счет912, ВидРасходов, Флаг) Экспорт
	 
	Запрос.УстановитьПараметр("Счет911",      Счет911);
	Запрос.УстановитьПараметр("Счет912",      Счет912);
	// Для хозрасчетного плана счетов надо исключать перенос убытков от реализации амотризируемого имущества - проводки Дт 91.02 Кт 97.21 
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидРасходов",  ВидРасходов);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто",  Массив);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборот) КАК Результат,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет911, &ВидыСубконто, Организация В (&СписокОрганизаций), КорСчет <> &КорСчет, ) КАК ХозрасчетныйОбороты
	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборот),
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, &ВидыСубконто, Организация В (&СписокОрганизаций), КорСчет <> &КорСчет, ) КАК ХозрасчетныйОбороты
	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2";
	
	
	БухИтогиРезультат = Запрос.Выполнить().Выгрузить();
	БухИтогиРезультат.Свернуть("Субконто2", "Результат");
	Результат = 0;
	Для Каждого Строка Из БухИтогиРезультат Цикл
		Если Флаг = "Убыток" Тогда
			РезультатТек = ?(Строка.Результат > 0, Строка.Результат, 0);
		Иначе
			РезультатТек = ?(Строка.Результат < 0, - Строка.Результат, 0);
		КонецЕсли;
		
		Результат = Результат + РезультатТек;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НормированиеРасходов

// Возвращает предельную сумму расходов, принимаемую для целей налогового учета.
//
// Параметры:
//  База	 - Число - База нормирования
//  Норма	 - 	 - Процент нормирования. Если передано значение 0, то предельной суммой является база нормирования
// 
// Возвращаемое значение:
//  Число
//
Функция ПредельныйРазмерРасходов(База, Норма) Экспорт
	// Для договоров страхования применение процента нормирования и вычисление предельного размера
	// происходит при расчете базы, поэтому умножение на процент нормирования для них здесь не выполняем.
	Если Норма = 0 Тогда
		Возврат База;
	Иначе
		Возврат Макс(0, Окр(База * Норма, 2, 1));
	КонецЕсли;
	
КонецФункции

Функция ДолиСписанияРасходов(Период, Организация, ПротоколНормируемыеРасходы) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДоляЕНВД",                                                 0);
	Результат.Вставить("ДоляТранспортныхРасходов",                                 0);
	Результат.Вставить("ДоляРасходовНаРекламу",                                    0);
	Результат.Вставить("ДоляРасходовНаДобровольноеМедицинскоеСтрахование",         0);
	Результат.Вставить("ДоляРасходовНаДобровольноеСтрахованиеЖизни",               0);
	Результат.Вставить("ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев", 0);
	Результат.Вставить("ДоляПредставительскихРасходов",                            0);
	Результат.Вставить("ДоляРасходовНаВозмещениеПроцентовРаботникам",              0);
	Результат.Вставить("ДоляРезервовПоСомнительнымДолгамНУ",                       0);
	
	// Распределение расходов по видам деятельности
	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	ДоляСпециальныхРежимов = КоэффициентРаспределенияРасходовПоВидамДеятельности(Организации, Период); // За месяц
	Результат.ДоляЕНВД     = ДоляСпециальныхРежимов;
	
	// Транспортные расходы могут быть отнесены к остаткам нереализованных товаров - ст. 320 НК РФ
	Результат.ДоляТранспортныхРасходов = ДоляТранспортныхРасходовТекущегоМесяца(Период, Организация);
	
	// РАСХОДЫ, ПО КОТОРЫМ ЕСТЬ ОГРАНИЧЕНИЯ
	Ограничения = ДолиСписанияНормируемыхРасходов(Период, Организация, ДоляСпециальныхРежимов, ПротоколНормируемыеРасходы);
	
	Для Каждого ОписаниеПоля Из РегистрыСведений.ДолиСписанияКосвенныхРасходов.ИменаВидовНормируемыхРасходов() Цикл
		Результат[ОписаниеПоля.Ключ] = Ограничения[Перечисления.ВидыРасходовНУ[ОписаниеПоля.Значение]];
	КонецЦикла;
	
	// Расходы по сомнительным долгам еще не начислены.
	// Лимит таких расходов рассчитывается особо.
	СуммаРезерва = РезервыПоСомнительнымДолгам.СуммаРезерваНУ(Период, Организация);
	Результат.ДоляРезервовПоСомнительнымДолгамНУ = ОтносительноеОграничениеРезервовПоСомнительнымДолгам(СуммаРезерва, Период, Организация);
	
	Возврат Результат;
		
КонецФункции

// Определяет коэффициент распределения расходов по видам деятельности с разным порядком налогообложения.
//
// Параметры
//  Организации - СправочникСсылка.Организации или массив со значениями этого типа
//  НачалоПериода, 
//  КонецПериода - Дата - характеризует период, за который рассчитывается коэффициент. Период всегда кратен месяцу.
//                        Предполагается, что период лежит в пределах налогового периода,
//                        параметры учетной политики в течение которого неизменны.
//
// Возвращаемое значение:
//   Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияРасходовПоВидамДеятельности(Организации, Знач НачалоПериода, Знач КонецПериода = Неопределено) Экспорт
	
	// Период
	Если КонецПериода = Неопределено Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода  = КонецМесяца(КонецПериода);
	
	// База распределения
	ВключатьПрочиеДоходы = Ложь;
	
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		Организация = Организации;
	Иначе
		Если Организации.Количество() > 0 Тогда
			Организация = Организации[0];
		Иначе
			// Неверные параметры
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.Существует(Организация, КонецПериода, Истина) Тогда
		
		// Определить нельзя
		Возврат 0;
		
	Иначе
		
		Если УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, КонецПериода) Тогда
			Возврат 1;
		КонецЕсли;
		
		ВключатьПрочиеДоходы = 
			УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности(Организация, КонецПериода) = 
				Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные;
				
		// В качестве базы распределения используются суммы без НДС.
		// И данных бухгалтерского учета по прочим доходам сложно исключить суммы НДС, 
		// так как нет специального дебетового субсчета для сумм НДС.
		// Если организация уплачивает налог на прибыль, то прочие доходы без НДС 
		// можно определить по данным налогового учета - см. ЭтоПроводкаПоНачислениюНДС()
		ПрочиеДоходыПоДаннымНУ = ВключатьПрочиеДоходы 
			И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, КонецПериода)
			И УчетнаяПолитика.ПлательщикНДС(Организация, КонецПериода);
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Массив счетов, по которым рассчитывается выручка
	СчетаВыручки = Новый Массив;
	СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	СчетаВыручки = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаВыручки);   // разворачиваем до субсчетов
	ИсключаемыеКорсчетаВыручки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорсчетаВыручки, СчетаВыручки);
	ИсключаемыеКорсчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	
	
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонецПериода);
	Запрос.УстановитьПараметр("Организации",            Организации);
	Запрос.УстановитьПараметр("СчетаВыручки",           СчетаВыручки);
	Запрос.УстановитьПараметр("ИсключаемыеКорсчетаВыручки", ИсключаемыеКорсчетаВыручки);
	Запрос.УстановитьПараметр("ВключатьПрочиеДоходы",       ВключатьПрочиеДоходы);
	СчетаПрочиеДоходы = ?(ВключатьПрочиеДоходы,
							БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы),
							Новый Массив);
	Запрос.УстановитьПараметр("СчетаПрочиеДоходы", СчетаПрочиеДоходы);
	Запрос.УстановитьПараметр("ПрочиеДоходыПоДаннымНУ", ПрочиеДоходыПоДаннымНУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаВыручки),
	|			,
	|			Организация В (&Организации),
	|			НЕ КорСчет В (&ИсключаемыеКорсчетаВыручки),
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК ПрочиеДоходыИРасходы,
	|	ВЫБОР
	|		КОГДА &ПрочиеДоходыПоДаннымНУ
	|			ТОГДА -ХозрасчетныйОбороты.СуммаНУОборот
	|		ИНАЧЕ -ХозрасчетныйОбороты.СуммаОборот
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ПрочиеДоходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаПрочиеДоходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			&ВключатьПрочиеДоходы
	|				И Организация В (&Организации),
	|			НЕ КорСчет В (&СчетаПрочиеДоходы),
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочиеДоходыИРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Выручка.Всего), 0) КАК Всего,
	|	ЕСТЬNULL(СУММА(Выручка.ОсобыйПорядок), 0) КАК ОсобыйПорядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выручка.Сумма КАК Всего,
	|		ВЫБОР
	|			КОГДА ЕНВД.Счет ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ Выручка.Сумма
	|		КОНЕЦ КАК ОсобыйПорядок
	|	ИЗ
	|		Выручка КАК Выручка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК ЕНВД
	|			ПО Выручка.Счет = ЕНВД.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеДоходы.Сумма,
	|		ВЫБОР
	|			КОГДА ПрочиеДоходы.ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ПрочиеДоходы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ПрочиеДоходы КАК ПрочиеДоходы) КАК Выручка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // В выборке всегда ровно один элемент
	
	Если Выборка.Всего = 0 ИЛИ Выборка.ОсобыйПорядок = 0 Тогда
		// Если нет определенности, то считаем, что все расходы относятся к деятельности на основной системе обложения
		Возврат 0;
	Иначе
		Возврат Выборка.ОсобыйПорядок / Выборка.Всего;
	КонецЕсли;
	
КонецФункции // КоэффициентРаспределенияРасходовПоВидамДеятельности()

// Представление вида расхода и краткое описание базы нормирования.
// 
// Параметры:
//  ВидРасходов - ПеречислениеСсылка.ВидыРасходовНУ
// 
// Возвращаемое значение:
//  Строка - Представление нормируемого вида расходов
//
Функция ПредставлениеНормируемогоВидаРасходов(ВидРасходов) Экспорт
	
	Представление = "";
	Если ВидРасходов = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
		Представление = НСтр("ru = 'Расходы на рекламу,
		|не более 1% выручки от реализации (п.4 ст.264)'");
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
		Представление = НСтр("ru = 'Представительские расходы,
		|не более 4% от суммы расходов по оплате труда (п.2 ст.264)'");
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Тогда
		Представление = НСтр("ru = 'Расходы на добровольное страхование сотрудников,
		|не более 6% от суммы расходов по оплате труда (п.16 ст.255) с учетом периода действия договора (п. 3 ст. 318)'");
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Тогда
		Представление = НСтр("ru = 'Расходы на добровольное страхование жизни, пенсионное страхование,
		|не более 12% от суммы расходов по оплате труда (п.16 ст.255) с учетом периода действия договора (п. 3 ст. 318)'");
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Тогда
		Представление = НСтр("ru = 'Расходы на возмещение затрат работников по уплате процентов,
		|не более 3% от суммы расходов на оплату труда (п.24.1 ст.255)'");
	ИначеЕсли ВидРасходов = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
		Представление = НСтр("ru = 'Расходы на добровольное личное страхование на случай наступления смерти или утраты трудоспособности,
		|не более 15 000 руб. от суммы расходов по оплате труда на каждого застрахованного сотрудника (п.16 ст.255)'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(Период) Экспорт
	
	// Ст. 283 НК РФ в редакции от 31.07.2023 N 389-ФЗ
	// В отчетные (налоговые) периоды с 1 января 2017 года по 31 декабря 2026 года
	// налоговая база по налогу за текущий отчетный (налоговый) период... 
	// не может быть уменьшена на сумму убытков, полученных в предыдущих налоговых периодах,
	// более чем на 50 процентов.
	Если ПрименяетсяОграничениеНаПереносУбытковПрошлыхЛетПоДолеПрибыли(Период) Тогда
		Возврат 0.5;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// Определяет, попадает ли указанный период в интервал,
// на который установлено ограничение на перенос убытков прошлых лет в 50% прибыли текущего налогового периода (п. 2.1 ст. 283 НК РФ)
//
// Параметры
//  Период - Дата - период, который проверяется на вхождение в интервал, на который установлено ограничение
//
// Возвращаемое значение:
//   Булево – Истина - в указанном периоде применяется ограничение на перенос убытков прошлых лет.
//
Функция ПрименяетсяОграничениеНаПереносУбытковПрошлыхЛетПоДолеПрибыли(Период) Экспорт 
	
	// П. 2.1 ст. 283 НК РФ в редакции от 31.07.2023 N 389-ФЗ
	Возврат (НачалоГода(Период) >= '2017-01-01'
		И НачалоГода(Период) <= '2026-01-01');
	// В данном случае речь заведомо не о первом налоговом периоде, поэтому особенности определения первого налогового периода не учитываем
	
КонецФункции	

#КонецОбласти

Функция ТекстЗапросаСоздатьВременнуюТаблицуДолиСпециальныеРежимы() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДолиСписанияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ) КАК Месяц,
	|	МИНИМУМ(ДолиСписанияКосвенныхРасходов.ДоляЕНВД) КАК Доля
	|ПОМЕСТИТЬ ДолиСпециальныеРежимы
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
	|ГДЕ
	|	ДолиСписанияКосвенныхРасходов.Организация В(&Организации)
	|	И ДолиСписанияКосвенныхРасходов.Активность
	|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДолиСписанияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
КонецФункции

Процедура СоздатьДолиЕНВД(МенеджерВременныхТаблиц, НачалоПериода, КонецПериода, Организации) Экспорт
	
	// Оставлена для совместимости: следует использовать только в том коде, в котором еще не удалось избавиться от внутреннего соединения.
	// См. также ТекстЗапросаСоздатьВременнуюТаблицуДолиСпециальныеРежимы()
	
	Месяцы = Новый ТаблицаЗначений;
	Месяцы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	Пока ТекущийМесяц <= КонецПериода Цикл
		Месяцы.Добавить().Месяц = ТекущийМесяц;
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("Месяцы",        Месяцы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Месяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТ_Месяцы
	|ИЗ
	|	&Месяцы КАК Месяцы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолиЕНВД.ДоляЕНВД КАК Доля,
	|	НАЧАЛОПЕРИОДА(ДолиЕНВД.ПериодРасчета, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТ_ДолиСписанияКосвенныхРасходов
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|ГДЕ
	|	ДолиЕНВД.Организация В(&Организации)
	|	И ДолиЕНВД.Активность
	|	И ДолиЕНВД.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолиЕНВД.Доля КАК ДоляЕНВД,
	|	ДолиЕНВД.Месяц КАК МесяцЕНВД
	|ПОМЕСТИТЬ ДолиЕНВД
	|ИЗ
	|	ВТ_ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Месяцы.Месяц
	|ИЗ
	|	ВТ_Месяцы КАК Месяцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|		ПО Месяцы.Месяц = ДолиЕНВД.Месяц
	|ГДЕ
	|	ДолиЕНВД.Месяц ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Месяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДолиСписанияКосвенныхРасходов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НалоговыйПериод) Экспорт
	
	// Закон №81-ФЗ от 20 апреля 2014 года внес изменения в п. 2 ст. 279 НК РФ - отменил двухэтапный порядок 
	// включения в расходы убытка от реализации права требования.
	// Это изменение действует с 2015 года. 
	// До этой даты двухэтапный порядок применялся для реализации прав требования после наступления срока платежа.
	// Поэтому в декларации требовалось заполнять детальные сведения о таких убытках.
	ДатаНачалаЕдиновременногоВключенияУбыткаОтРеализацииПраваТребования = '2015-01-01';
	
	Возврат НалоговыйПериод >= ДатаНачалаЕдиновременногоВключенияУбыткаОтРеализацииПраваТребования;
	
КонецФункции	

Процедура ЗаполнитьОтчетПрибыльФормаОтчета2010Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке. Инициализируется в процедуре добавления записи
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",           ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",           ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	СоздатьДолиЕНВД(
		Запрос.МенеджерВременныхТаблиц, 
		Запрос.Параметры.ДатаНач, 
		Запрос.Параметры.ДатаКон, 
		Запрос.Параметры.СписокОрганизаций);
	
	Запрос.УстановитьПараметр("СчетаПрочиеДоходыИРасходы",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрочиеДоходыИРасходы));
	
	МассивНеЕНВД = Новый Массив;
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("МассивНеЕНВД",  МассивНеЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДебетовыйОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КредитовыйОборот
	|ПОМЕСТИТЬ ТаблицаПрочиеДоходыРасходыНеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	Запрос.Выполнить();	
	
	// таблица итогов по всем счетам без аналитики
	Запрос.УстановитьПараметр("Счет41",  ПС.Товары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК КО,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет ИЕРАРХИЯ";	
	
	БухИтоги = Запрос.Выполнить().Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с разбивкой по виду затрат
	Запрос.УстановитьПараметр("Счет",  ПолучитьМассивСчетовУчетаРасходов());
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходыНеЕНВД);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаУчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_КорСчетаУчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаУчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаУчетаРасходов),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &ТранспортныеРасходы,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_КорСчетаУчетаРасходов.Счет
	|				ИЗ
	|					ВТ_КорСчетаУчетаРасходов),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ";
	
	БухИтогиКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	// прочие доходы и расходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.ДебетовыйОборот) КАК ДО,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.КредитовыйОборот) КАК КО
	|ИЗ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД КАК ТаблицаПрочиеДоходыРасходыНеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов";
	
	БухИтоги91 = Запрос.Выполнить().Выгрузить();
	
	// из расходов по реализации амортизируемого имущества вычитаем перенос на расходы убытков от реализации
	РеализацияАмортизируемогоИмущества = Новый Массив;
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("РеализацияАмортизируемогоИмущества", РеализацияАмортизируемогоИмущества);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&РеализацияАмортизируемогоИмущества),
	|			Корсчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	
	БухИтогиПереносУбытковПоОСиНМА =Запрос.Выполнить().Выгрузить();
	
	// внереализационные доходы и расходы
	Запрос.УстановитьПараметр("ВидСубконто",  	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  	ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	
	БухИтоги917 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",  ПС.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	
	МассивЗапасовНУ = Новый Массив;
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
	МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
	МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
	МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.Материалы);
	МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
	МассивЗапасовНУ.Добавить(ПС.Товары);
	МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
	МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",  МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаЗапасовНУ
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаЗапасовНУ.Счет
	|				ИЗ
	|					ВТ_СчетаЗапасовНУ),
	|			) КАК ХозрасчетныйОбороты";   	
	
	БухИтоги911_Излишки = Запрос.Выполнить().Выгрузить().Итог("КО");
	
	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
	СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
	СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ВидРБП КАК Вид
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокРБП = Новый ТаблицаЗначений;
	СписокРБП.Колонки.Добавить("Счет");
	СписокРБП.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Вид");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокРБП = СписокРБП.Добавить();
		СтрокаСписокРБП.Счет = ВыборкаВидовЗатрат.Вид;
		СтрокаСписокРБП.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокРБП.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 1
	
	СтраницаЛист02_Прил1 = Контейнер.Лист02_Прил1[0].Данные[0].Значение;
	
	Счет9101 = ПС.ПрочиеДоходы;
	Счет9102 = ПС.ПрочиеРасходы;

	Запрос.УстановитьПараметр("Счета9001", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ВыручкаНеЕНВД));
	Запрос.УстановитьПараметр("НоменклутурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатурныеГруппыПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ НоменклатурныеГруппыПродукции
	|ИЗ
	|	РегистрСведений.НоменклатурныеГруппыРеализацииПродукцииУслуг КАК НоменклатурныеГруппыПродукции
	|ГДЕ
	|	НоменклатурныеГруппыПродукции.Организация В(&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК СуммаДохода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета9001),
	|			&НоменклутурныеГруппы,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						НоменклатурныеГруппыПродукции.НоменклатурнаяГруппа
	|					ИЗ
	|						НоменклатурныеГруппыПродукции),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	ТаблицаДоходПродукция = Запрос.Выполнить().Выгрузить();
	
	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства
	СтраницаЛист02_Прил1.П002010001103 =  ТаблицаДоходПродукция.Итог("СуммаДохода");
	
	// Строка 012 - выручка от реализации покупных товаров
	СтраницаЛист02_Прил1.П002010001203 = БухИтогиНайти("КО", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД, БухИтоги) - ТаблицаДоходПродукция.Итог("СуммаДохода");
	
	// Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	СтраницаЛист02_Прил1.П002010001303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	
	// Строка 014 - выручка от реализации прочего имущества
	СтраницаЛист02_Прил1.П002010001403 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка
	СтраницаЛист02_Прил1.П002010002003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	
	// Строка 100 - Внереализационные доходы всего
	СтраницаЛист02_Прил1.П002010010003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("КО"));
	ВставитьРасшифровкуВнереализационных(ТаблицаРасшифровки, Запрос, "П002010010003", "КО", СписокПрочихДоходовИРасходов);
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	П002010010103 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_Прил1.П002010010103 = П002010010103;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010010103", "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002010010103, "Лист02_Прил1", ДополнительныеПараметры);
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_Прил1.П002010010203 = П002010010203;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010010203", "Строка 102 ""Доходы от ликвидации основных средств""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002010010203, "Лист02_Прил1", ДополнительныеПараметры);
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в статье 251 НК)
	П002010010303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав, БухИтоги917);
	СтраницаЛист02_Прил1.П002010010303 = П002010010303;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010010303", "Строка 103 ""Доходы от безвозмездного получения имущества""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002010010303, "Лист02_Прил1", ДополнительныеПараметры);
	
	// Строка 104 - в виде излишков
	П002010010403 = БухИтоги911_Излишки;
	СтраницаЛист02_Прил1.П002010010403 = П002010010403;
	
	// Строка 105 - в виде восстановления аморт.премии
	П002010010503 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии, БухИтоги917);
	СтраницаЛист02_Прил1.П002010010503 = П002010010503;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010010503", "Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002010010503, "Лист02_Прил1", ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 2
	
	СтраницаЛист02_Прил2 = Контейнер.Лист02_Прил2[0].Данные[0].Значение;
	
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос.УстановитьПараметр("СчетаСебестоимостьПродажНеЕНВД", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.СебестоимостьПродажНеЕНВД));

	Товары = Новый Массив;
	Товары.Добавить(ПС.Товары);
	Товары.Добавить(ПС.ТорговаяНаценка);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ТорговаяНаценка);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Массив = Новый Массив;
	Массив.Добавить(ПС.РасчетыСПоставщикамиИПодрядчиками);
	Массив.Добавить(ПС.РасчетыСПокупателямиИЗаказчиками);
	Массив.Добавить(ПС.РасчетыСРазнымиДебиторамиИКредиторами);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаТовары
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаПокупныеТоварыОтгруженные
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ПокупныеТоварыОтгруженные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ПоступлениеИВыбытиеИмуществаРаботУслугПрав)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&СчетаСебестоимостьПродажНеЕНВД), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаТовары.Счет
	|				ИЗ
	|					ВТ_СчетаТовары),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПокупныеТоварыОтгруженные.Счет
	|				ИЗ
	|					ВТ_СчетаПокупныеТоварыОтгруженные),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав.Счет
	|				ИЗ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги902 = Запрос.Выполнить().Выгрузить();
	
	СебестоимостьПродаж                        = БухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = БухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = БухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = БухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	СтраницаЛист02_Прил2.П002020001003 = П002020001003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020001003", "Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""", "+", "!ДО"+ПС.СебестоимостьПродаж.Код, СебестоимостьПродаж, "Лист02_Прил2", ДополнительныеПараметры);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020001003", "", "-", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код, - Товары, "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020001003", "", "-", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные.Код, - ПокупныеТоварыОтгруженные, "Лист02_Прил2");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК Сумма,
	|	ХозрасчетныйОбороты.КорСчет КАК КоррСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код КАК КоррСчетКод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав.Счет
	|				ИЗ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ Результат Цикл
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020001003", "", "-", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+Строка.КоррСчетКод, - Строка.Сумма, "Лист02_Прил2");
	КонецЦикла;
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос.УстановитьПараметр("Счета44",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыНаПродажу));
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажуНеЕНВД);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета44),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД),
	|			КорСчет = &Счет90,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	БухИтоги44 = Запрос.Выполнить().Выгрузить();
	П002020002003 = БухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	СтраницаЛист02_Прил2.П002020002003 = П002020002003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020002003", "Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""", "+", "!ОБ"+ПС.РасходыНаПродажу+" "+ПС.РасходыНаПродажу, БухИтоги44.Итог("СуммаОборотКт"), "Лист02_Прил2", ДополнительныеПараметры);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020002003", "", "+", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код, Товары, "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020002003", "", "+", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные, ПокупныеТоварыОтгруженные, "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020002003", "", "+", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.РасчетыСПокупателямиИЗаказчиками.Код, ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "Лист02_Прил2");
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	СтраницаЛист02_Прил2.П002020003003 = П002020003003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020003003", "Строка 030 ""Стоимость реализованных покупных товаров""", "+", "!ОБ"+ ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код, Товары, "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020003003", "", "+", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные.Код, ПокупныеТоварыОтгруженные, "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020003003", "", "+", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.РасчетыСПокупателямиИЗаказчиками.Код, ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "Лист02_Прил2");
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы = БухИтогиКосвЗатрат.Итог("КО");
	НалогиИСборыПрочие =  БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, БухИтоги91);
	ПрочиеКосвенныеРасходы = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, БухИтоги91) + БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, БухИтоги91);
	П002020004003 = КосвенныеРасходы + ПрочиеКосвенныеРасходы + НалогиИСборыПрочие;
	
	СтраницаЛист02_Прил2.П002020004003 = П002020004003;
	ВставитьРасшифровкуКосвенныхРасходов("Строка 040 ""Косвенные расходы""", ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020004003");
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004003", "", "+", "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код, ПрочиеКосвенныеРасходы, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004003", "", "+", "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код, НалогиИСборыПрочие, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК																	
	
	НалогиИСборы =  БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, БухИтогиКосвЗатрат);
	СтраницаЛист02_Прил2.П002020004103 = НалогиИСборы + НалогиИСборыПрочие;
	ВставитьРасшифровкуКосвенныхРасходов("Строка 041 ""Суммы налогов и сборов""", ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020004103", Перечисления.ВидыРасходовНУ.НалогиИСборы);
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004103", "", "+", "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код, НалогиИСборыПрочие, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 042 - Расходы на капитальные вложения размере не более 10%  
	П002020004203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, БухИтогиКосвЗатрат);	
	СтраницаЛист02_Прил2.П002020004203 = П002020004203;
	
	// Строка 050 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ПослеНаступленияСрокаПлатежа = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоНаступленияСрокаПлатежа    = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтоимостьИмущественныхПравОбслПроизводств = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91);
	СтоимостьВсехИмущественныхПрав = ОказаниеФинансовыхУслуг + ПослеНаступленияСрокаПлатежа + ДоНаступленияСрокаПлатежа + СтоимостьИмущественныхПравОбслПроизводств;
	
	П002020005003 = СтоимостьВсехИмущественныхПрав 
				  - ОказаниеФинансовыхУслуг
				  - ДоНаступленияСрокаПлатежа
				  - ПослеНаступленияСрокаПлатежа
				  - СтоимостьИмущественныхПравОбслПроизводств;
	СтраницаЛист02_Прил2.П002020005003 = П002020005003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005003", "Строка 050 ""Стоимость имущественных прав""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, СтоимостьВсехИмущественныхПрав, "Лист02_Прил2");
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005003", "", "-", "!ДО"+ПС.ПрочиеРасходы.Код, -ОказаниеФинансовыхУслуг, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005003", "", "-", "!ДО"+ПС.ПрочиеРасходы.Код, -ДоНаступленияСрокаПлатежа, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005003", "", "-", "!ДО"+ПС.ПрочиеРасходы.Код, -ПослеНаступленияСрокаПлатежа, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 054 - Расходы на НИОКР по перечню правительства
	П002020005403 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ, БухИтогиКосвЗатрат);
	СтраницаЛист02_Прил2.П002020005403 = П002020005403;
	
	// Строка 052 - Расходы на НИОКР 
	П002020005203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, БухИтогиКосвЗатрат) + П002020005403;
	СтраницаЛист02_Прил2.П002020005203 = П002020005203;
	
	ВставитьРасшифровкуКосвенныхРасходов("Строка 052 ""Расходы на НИОКР""",ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005203", Перечисления.ВидыРасходовНУ.НИОКР);
	ВставитьРасшифровкуКосвенныхРасходов("Строка 052 ""Расходы на НИОКР""",ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005203", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	ВставитьРасшифровкуКосвенныхРасходов("Строка 054 ""Расходы на НИОКР по перечню Правительства РФ""", ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005403", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	// Строка 059 - Стоимость имущественных прав
	П002020005903 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	СтраницаЛист02_Прил2.П002020005903 = П002020005903;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005903", "Строка 059 ""Стоимость имущественных прав""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002020005903, "Лист02_Прил2", ДополнительныеПараметры);
		
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,           
	//              связанные с его реализацией
	ПрочееИмущество = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	ОбъектыСтроит = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, БухИтоги91);
	П002020006003 = ПрочееИмущество + ОбъектыСтроит;
	СтраницаЛист02_Прил2.П002020006003 = П002020006003;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020006003", "Строка 060 ""Цена приобретения реализованного прочего имущества""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, ПрочееИмущество, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020006003", "", "+", "!ДО"+ПС.ПрочиеРасходы.Код, ОбъектыСтроит, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг
	П002020007003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	СтраницаЛист02_Прил2.П002020007003 = П002020007003;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020007003", "Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002020007003, "Лист02_Прил2", ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счета97", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыБудущихПериодов));
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&Счета97), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП";
	БухИтоги97 = Запрос.Выполнить().Выгрузить();
	БухИтоги97.Свернуть("Счет","КО");	
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности
	П002020009003 = БухИтогиНайти("КО", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, БухИтоги97);
	СтраницаЛист02_Прил2.П002020009003 = П002020009003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, СписокРБП));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020009003", "Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""", "+", "!КО"+ ПС.РасходыБудущихПериодов.Код, П002020009003, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	П002020010003 = БухИтогиНайти("КО",Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, БухИтоги97);
	СтраницаЛист02_Прил2.П002020010003 = П002020010003;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, СписокРБП));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020010003", "Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""", "+", "!КО"+ПС.РасходыБудущихПериодов.Код, П002020010003, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	Запрос.УстановитьПараметр("Счета02", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияОсновныхСредств));
	Запрос.УстановитьПараметр("Счета05", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияНематериальныхАктивов));
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК АмортизацияОсновныхСредств,
	|	0 КАК АмортизацияНематериальныхАктивов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И НЕ ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|			,
	|			&ВидСубконто) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И НЕ ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|			,
	|			&ВидСубконто) КАК ХозрасчетныйОбороты";
	БухИтогиАмортизация = Запрос.Выполнить().Выгрузить();
	
	АмортизацияОсновныхСредств       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств");
	АмортизацияНематериальныхАктивов = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов");	
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	СпособАмортизации = ?(МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный, "2","1");
	Если СпособАмортизации = "1" Тогда
		
		// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		СтраницаЛист02_Прил2.П002020013103 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013103", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО"+ПС.АмортизацияОсновныхСредств.Код, АмортизацияОсновныхСредств, "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013103", "", "+", "!КО"+ПС.АмортизацияНематериальныхАктивов.Код, АмортизацияНематериальныхАктивов, "Лист02_Прил2");
		
		// Строка 132 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_Прил2.П002020013203 = АмортизацияНематериальныхАктивов;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013203", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО"+ПС.АмортизацияНематериальныхАктивов.Код, АмортизацияОсновныхСредств, "Лист02_Прил2");
	Иначе
		// Строка 133 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		СтраницаЛист02_Прил2.П002020013303 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013303", "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО"+ПС.АмортизацияОсновныхСредств.Код, АмортизацияОсновныхСредств, "Лист02_Прил2");
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013303", "", "+", "!КО"+ПС.АмортизацияОсновныхСредств.Код, АмортизацияНематериальныхАктивов, "Лист02_Прил2");
		// Строка 134 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_Прил2.П002020013403 = АмортизацияНематериальныхАктивов;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020013403", "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО"+ПС.АмортизацияОсновныхСредств.Код, АмортизацияНематериальныхАктивов, "Лист02_Прил2");
	КонецЕсли;
	
	// Строка 135 - Способ амортизации
	СтраницаЛист02_Прил2.П002020013503 = СпособАмортизации;
	
	// Строка 201 - Расходы в виде процентов по долговым обязательствам
	П002020020103_1 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, БухИтоги917);
	П002020020103_2 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, БухИтоги917);
	СтраницаЛист02_Прил2.П002020020103 = П002020020103_1 + П002020020103_2;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020103", "Строка 201 ""Расходы в виде процентов по долговым обязательствам""", "+", "!КО"+Счет9102.Код, П002020020103_1, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020103", "", "+", "!КО"+Счет9102.Код, П002020020103_2, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	П002020030103 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_Прил2.П002020030103 = П002020030103;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030103", "Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""", "+", "!ДО"+Счет9102.Код, П002020030103, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	П002020030203 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, БухИтоги917);
	СтраницаЛист02_Прил2.П002020030203 = П002020030203;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030203", "Строка 302 ""Суммы безнадежных долгов""", "+", "!ДО"+Счет9102.Код, П002020030203, "Лист02_Прил2", ДополнительныеПараметры);
	
   // Строка 300 - Убытки, приравненные к внереализационным расходам всего
    ПрочиеУбытки = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам, БухИтоги917); 
	П002020030003 = ПрочиеУбытки + П002020030103 + П002020030203;
	СтраницаЛист02_Прил2.П002020030003 = П002020030003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "Строка 300 ""Убытки, приравненные к внереализационным расходам - всего""", "+", "!ДО"+Счет9102.Код, П002020030103, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "", "+", "!ДО"+Счет9102.Код, П002020030203, "Лист02_Прил2", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "", "+", "!ДО"+Счет9102.Код, ПрочиеУбытки, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 200 - Внереализационные расходы
	П002020020003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("ДО")) - П002020030103 - П002020030203 - ПрочиеУбытки;
	СтраницаЛист02_Прил2.П002020020003 = П002020020003;
	ВставитьРасшифровкуВнереализационных(ТаблицаРасшифровки, Запрос, "П002020020003", "ДО", СписокПрочихДоходовИРасходов);
	
	// Строка 204 - Расходы на ликвидацию ОС
	П002020020403 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_Прил2.П002020020403 = П002020020403;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020403", "Строка 204 ""Расходы на ликвидацию выводимых из эксплуатации основных средств, объектов незавершенного строительства и иного имущества""", "+", "!ДО"+Счет9102.Код, П002020020403, "Лист02_Прил2", ДополнительныеПараметры);
	
	// Строка 205 - штрафы, пени и иные санкции за нарушение договорных или долговых обязательств
	П002020020503 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, БухИтоги917);
	СтраницаЛист02_Прил2.П002020020503 = П002020020503;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020503", "Строка 205 ""штрафы, пени и иные санкции за нарушение договорных или долговых обязательств""", "+", "!ДО"+Счет9102.Код, П002020020503, "Лист02_Прил2", ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 3
	
	СтраницаЛист02_Прил3 = Контейнер.Лист02_Прил3[0].Данные[0].Значение;
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);
	ВыручкаОтРеализацииНМА = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	СтраницаЛист02_Прил3.П002030003003 = П002030003003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030003003", "Строка 030 ""Выручка от реализации амортизируемого имущества""", "+", "!КО"+Счет9101.Код, ВыручкаОтРеализацииОС, "Лист02_Прил3", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030003003", "", "+", "!КО"+Счет9101.Код, ВыручкаОтРеализацииНМА, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РасходыПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);  
	РасходыПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	ПереносУбытковПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтогиПереносУбытковПоОСиНМА);  
	ПереносУбытковПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтогиПереносУбытковПоОСиНМА);
	П002030004003 = РасходыПоОС - ПереносУбытковПоОС + РасходыПОНМА - ПереносУбытковПоНМА;
	СтраницаЛист02_Прил3.П002030004003 = П002030004003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, РасходыПоОС, "Лист02_Прил3", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "-", "!КО"+ПС.ПрочиеРасходы.Код, -ПереносУбытковПоОС, "Лист02_Прил3", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "+", "!КО"+ПС.ПрочиеРасходы.Код, РасходыПОНМА, "Лист02_Прил3", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "-", "!КО"+ПС.ПрочиеРасходы.Код, -ПереносУбытковПоНМА, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки)
	ПрибыльПоАмортИмуществу = ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, "Прибыль") + ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, "Прибыль");
	СтраницаЛист02_Прил3.П002030005003 = ПрибыльПоАмортИмуществу;
	
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль)
	УбыткиПоАмортИмуществу = ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, "Убыток") + ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, "Убыток");
	СтраницаЛист02_Прил3.П002030006003 = УбыткиПоАмортИмуществу;
	
	ДоходыОказаниеФинансовыхУслуг      = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ДоходыПослеНаступленияСрокаПлатежа = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоходыДоНаступленияСрокаПлатежа    = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	
	// Строка 070 - выручка от реализации права требования как реализации финансовых услуг
	П002030007003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_Прил3.П002030007003 = П002030007003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030007003", "Строка 070 ""Выручка от реализации права требования как реализации финансовых услуг""", "+", "!КО"+ПС.ПрочиеРасходы.Код, П002030007003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 080 - Стоимость реализованного права требования при  его реализации как финансовой услуги
	П002030008003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_Прил3.П002030008003 = П002030008003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030008003", "Строка 080 ""Стоимость реализованного права требования при  его реализации как финансовой услуги""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002030008003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	СтраницаЛист02_Прил3.П002030010003 = П002030010003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030010003", "Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002030010003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	СтраницаЛист02_Прил3.П002030011003 = П002030011003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030011003", "Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО"+ПС.ПрочиеДоходы.Код, П002030011003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030012003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_Прил3.П002030012003 = П002030012003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030012003", "Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002030012003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030013003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_Прил3.П002030013003 = П002030013003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030013003", "Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002030013003, "Лист02_Прил3", ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("КорСчет",      ПС.ПрочиеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			КорСчет = &КорСчет,
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги170 = Запрос.Выполнить().Выгрузить();
	
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
	//              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы			
	П002030018003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91); 
	СтраницаЛист02_Прил3.П002030018003 = П002030018003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030018003", "Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""", "+", "!КО"+ПС.ПрочиеРасходы.Код, П002030018003, "Лист02_Прил3", ДополнительныеПараметры);
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде
	П002030019003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91); 
	СтраницаЛист02_Прил3.П002030019003 = П002030019003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030019003", "Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""", "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002030019003, "Лист02_Прил3", ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 4
	
	СтраницаЛист02_Прил4 = Контейнер.Лист02_Прил4[0].Данные[0].Значение;
	
	Если Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 3 Или Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 12 Тогда
		Запрос.УстановитьПараметр("СчетаРасходыБудущихПериодов", 
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыБудущихПериодов));
		Запрос.УстановитьПараметр("СчетаПрибылиИУбыткиНеЕНВД", 
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрибылиИУбыткиНеЕНВД));
		Запрос.УстановитьПараметр("ВидРБП",       Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
		Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаНУОборотКт,
		|	ХозрасчетныйОбороты.Субконто1
		|ПОМЕСТИТЬ ОборотыКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП,
		|			КорСчет В (&СчетаПрибылиИУбыткиНеЕНВД),
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОборотыКт.СуммаНУОборотКт) КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыКт КАК ОборотыКт
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОборотыКт.Субконто1
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Субконто1";
		УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
		
		П1997 = 0;
		П1998 = 0;
		П1999 = 0;
		П2000 = 0;
		П2001 = 0;
		П2002 = 0;
		П2003 = 0;
		П2004 = 0;
		П2005 = 0;
		П2006 = 0;
		П2007 = 0;
		П2008 = 0;
		П2009 = 0;
		П2010 = 0;
		П2011 = 0;
		
		О1997 = 0;
		О1998 = 0;
		О1999 = 0;
		О2000 = 0;
		О2001 = 0;
		О2002 = 0;
		О2003 = 0;
		О2004 = 0;
		О2005 = 0;
		О2006 = 0;
		О2007 = 0;
		О2008 = 0;
		О2009 = 0;
		О2010 = 0;
		О2011 = 0;
		
		Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
			
			ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
			СуммаСписанногоУбытка   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
			СуммаНеСписанногоУбытка = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
			Если ГодУбытка = 1997 Тогда
				П1997 = СуммаСписанногоУбытка; РБП1997 = УбытокПрошлыхЛет.Субконто1;
				О1997 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 1998 Тогда
				П1998 = СуммаСписанногоУбытка; РБП1998 = УбытокПрошлыхЛет.Субконто1;
				О1998 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 1999 Тогда
				П1999 = СуммаСписанногоУбытка; РБП1999 = УбытокПрошлыхЛет.Субконто1;
				О1999 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2000 Тогда
				П2000 = СуммаСписанногоУбытка; РБП2000 = УбытокПрошлыхЛет.Субконто1;
				О2000 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2001 Тогда
				П2001 = СуммаСписанногоУбытка; РБП2001 = УбытокПрошлыхЛет.Субконто1;
				О2001 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2002 Тогда
				П2002 = СуммаСписанногоУбытка; РБП2002 = УбытокПрошлыхЛет.Субконто1;
				О2002 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2003 Тогда
				П2003 = СуммаСписанногоУбытка; РБП2003 = УбытокПрошлыхЛет.Субконто1;
				О2003 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2004 Тогда
				П2004 = СуммаСписанногоУбытка; РБП2004 = УбытокПрошлыхЛет.Субконто1;
				О2004 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2005 Тогда
				П2005 = СуммаСписанногоУбытка; РБП2005 = УбытокПрошлыхЛет.Субконто1;
				О2005 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2006 Тогда
				П2006 = СуммаСписанногоУбытка; РБП2006 = УбытокПрошлыхЛет.Субконто1;
				О2006 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2007 Тогда
				П2007 = СуммаСписанногоУбытка; РБП2007 = УбытокПрошлыхЛет.Субконто1;
				О2007 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2008 Тогда
				П2008 = СуммаСписанногоУбытка; РБП2008 = УбытокПрошлыхЛет.Субконто1;
				О2008 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2009 Тогда
				П2009 = СуммаСписанногоУбытка; РБП2009 = УбытокПрошлыхЛет.Субконто1;
				О2009 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2010 Тогда
				П2010 = СуммаСписанногоУбытка; РБП2010 = УбытокПрошлыхЛет.Субконто1;
				О2010 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2011 Тогда
				П2011 = СуммаСписанногоУбытка; РБП2011 = УбытокПрошлыхЛет.Субконто1;
				О2011 = СуммаНеСписанногоУбытка;
			КонецЕсли;
		КонецЦикла;
		
		// Строка 020 -     убытка, полученного до 1 января 2002 года
		СтраницаЛист02_Прил4.П002040002003 = П1997+П1998 + П1999 + П2000 + П2001;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040002003", "Сумма убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году - сальдо начальное по дебету счета 97", П1997, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1997));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040002003", "Сумма убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году - сальдо начальное по дебету счета 97", П1998, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1998));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040002003", "Сумма убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году - сальдо начальное по дебету счета 97", П1999, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1999));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040002003", "Сумма убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году - сальдо начальное по дебету счета 97", П2000, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2000));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040002003", "Сумма убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году - сальдо начальное по дебету счета 97", П2001, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2001));
		
		Если П2002 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040004001 = "2002";
			СтраницаЛист02_Прил4.П002040004003 = П2002;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040004003", "Сумма убытка, полученного в 2002 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2002, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2002));
		КонецЕсли;
		
		Если П2003 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040005001 = "2003";
			СтраницаЛист02_Прил4.П002040005003 = П2003;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040005003", "Сумма убытка, полученного в 2003 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2003, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2003));
		КонецЕсли;
		
		Если П2004 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040006001 = "2004";
			СтраницаЛист02_Прил4.П002040006003 = П2004;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040006003", "Сумма убытка, полученного в 2004 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2004, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2004));
		КонецЕсли;
		
		Если П2005 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040007001 = "2005";
			СтраницаЛист02_Прил4.П002040007003 = П2005;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040007003", "Сумма убытка, полученного в 2005 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2005, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2005));
		КонецЕсли;
		
		Если П2006 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040008001 = "2006";
			СтраницаЛист02_Прил4.П002040008003 = П2006;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040008003", "Сумма убытка, полученного в 2006 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2006, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2006));
		КонецЕсли;
		
		Если П2007 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040009001 = "2007";
			СтраницаЛист02_Прил4.П002040009003 = П2007;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040009003", "Сумма убытка, полученного в 2007 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2007, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2007));
		КонецЕсли;
		
		Если П2008 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040010001 = "2008";
			СтраницаЛист02_Прил4.П002040010003 = П2008;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040010003", "Сумма убытка, полученного в 2008 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2008, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2008));
		КонецЕсли;
		
		Если П2009 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040011001 = "2009";
			СтраницаЛист02_Прил4.П002040011003 = П2009;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040011003", "Сумма убытка, полученного в 2009 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2009, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2009));
		КонецЕсли;
		
		Если П2010 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040012001 = "2010";
			СтраницаЛист02_Прил4.П002040012003 = П2010;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040012003", "Сумма убытка, полученного в 2010 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2010, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2010));
		КонецЕсли;
		
		Если П2011 <> 0 Тогда
			СтраницаЛист02_Прил4.П002040013001 = "2011";
			СтраницаЛист02_Прил4.П002040013003 = П2011;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040013003", "Сумма убытка, полученного в 2011 году", "+", "!СНД"+ПС.РасходыБудущихПериодов.Код, П2011, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2011));
		КонецЕсли;
		
		// Строка 150 - Сумма убытка или части убытка, уменьшающего   
		//              налоговую базу за отчетный  (налоговый)  период
		СуммаПоСтроке050Листа02 = 0;
		СуммаПоСтроке140Листа02 = 0;
		СуммаПоСтроке120Листа05 = 0;
		СуммаПоСтроке120Листа06 = 0;
		СуммаПоСтроке230Листа07 = 0;
		СуммаПоСтроке110Листа08 = 0;
		СуммаПоСтроке590Листа09 = 0;
		
		П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		СтраницаЛист02_Прил4.П002040015003 = П002040015003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040015003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период", "+", "!КО"+ПС.РасходыБудущихПериодов.Код, П002040015003, "Лист02_Прил4");
		
		// Строка 160 -    сумма неперенесенного убытка	
		П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
		СтраницаЛист02_Прил4.П002040016003 = П002040016003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040016003", "неперенесенного убытка", "+", "!СКД"+ПС.РасходыБудущихПериодов.Код, П002040016003, "Лист02_Прил4");
		
		// Строка 170 -    сумма неперенесенного убытка, полученного до 1 января 2002 года	
		П002040017003 = О1997 + О1998 + О1999 + О2000 + О2001;
		СтраницаЛист02_Прил4.П002040017003 = П002040017003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О1997, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1997));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О1998, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1998));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О1999, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП1999));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О2000, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2000));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002040017003", "неперенесенного убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году", О2001, "Лист02_Прил4", ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, РБП2001));
		
		// Строка 180 -    сумма неперенесенного убытка, полученного после 1 января 2002 года	
		П002040018003 = П002040016003 - П002040017003;
		СтраницаЛист02_Прил4.П002040018003 = П002040018003;
	КонецЕсли;

	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 5
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьЛист2Приложение5ДекларацииПоПрибыли(Контейнер, ПараметрыОтчета, СписокОрганизаций, Контейнер.Лист02_Прил5);
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетПрибыльФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке. Инициализируется в процедуре добавления записи
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",           ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",           ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	СоздатьДолиЕНВД(
		Запрос.МенеджерВременныхТаблиц, 
		Запрос.Параметры.ДатаНач, 
		Запрос.Параметры.ДатаКон, 
		Запрос.Параметры.СписокОрганизаций);
	
	Запрос.УстановитьПараметр("СчетаПрочиеДоходыИРасходы",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрочиеДоходыИРасходы));
	
	МассивНеЕНВД = Новый Массив;
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("МассивНеЕНВД",  МассивНеЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДебетовыйОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КредитовыйОборот
	|ПОМЕСТИТЬ ТаблицаПрочиеДоходыРасходыНеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	Запрос.Выполнить();	
	
	// таблица итогов по всем счетам без аналитики
	Запрос.УстановитьПараметр("Счет41",  ПС.Товары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК КО,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет ИЕРАРХИЯ";	
	
	БухИтоги = Запрос.Выполнить().Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с разбивкой по виду затрат
	Запрос.УстановитьПараметр("Счет",  ПолучитьМассивСчетовУчетаРасходов());
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходыНеЕНВД);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаУчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_КорСчетаУчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаУчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаУчетаРасходов),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &ТранспортныеРасходы,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_КорСчетаУчетаРасходов.Счет
	|				ИЗ
	|					ВТ_КорСчетаУчетаРасходов),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ";
	
	БухИтогиКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	// прочие доходы и расходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.ДебетовыйОборот) КАК ДО,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.КредитовыйОборот) КАК КО
	|ИЗ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД КАК ТаблицаПрочиеДоходыРасходыНеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов";
	
	БухИтоги91 = Запрос.Выполнить().Выгрузить();
	
	// из расходов по реализации амортизируемого имущества вычитаем перенос на расходы убытков от реализации
	РеализацияАмортизируемогоИмущества = Новый Массив;
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("РеализацияАмортизируемогоИмущества", РеализацияАмортизируемогоИмущества);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&РеализацияАмортизируемогоИмущества),
	|			Корсчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период,Месяц) = ДолиЕНВД.МесяцЕНВД)
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	
	БухИтогиПереносУбытковПоОСиНМА =Запрос.Выполнить().Выгрузить();
	
	// внереализационные доходы и расходы
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период,Месяц) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	
	БухИтоги917 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",  ПС.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	
	МассивЗапасовНУ = Новый Массив;
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
	МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
	МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
	МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.Материалы);
	МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
	МассивЗапасовНУ.Добавить(ПС.Товары);
	МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
	МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",  МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаЗапасовНУ
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаЗапасовНУ.Счет
	|				ИЗ
	|					ВТ_СчетаЗапасовНУ),
	|			) КАК ХозрасчетныйОбороты";
	
	БухИтоги911_Излишки = Запрос.Выполнить().Выгрузить().Итог("КО");
	
	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
	СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
	СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ВидРБП КАК Вид
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокРБП = Новый ТаблицаЗначений;
	СписокРБП.Колонки.Добавить("Счет");
	СписокРБП.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Вид");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокРБП = СписокРБП.Добавить();
		СтрокаСписокРБП.Счет = ВыборкаВидовЗатрат.Вид;
		СтрокаСписокРБП.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокРБП.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 1
	
	СтраницаЛист02_1 = Контейнер.Лист02_1[0].Данные[0].Значение;
	
	Счет9101 = ПС.ПрочиеДоходы;
	Счет9102 = ПС.ПрочиеРасходы;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаВыручкаНеЕНВД", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ВыручкаНеЕНВД));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатурныеГруппыПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ НоменклатурныеГруппыПродукции
	|ИЗ
	|	РегистрСведений.НоменклатурныеГруппыРеализацииПродукцииУслуг КАК НоменклатурныеГруппыПродукции
	|ГДЕ
	|	НоменклатурныеГруппыПродукции.Организация В(&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК СуммаДохода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаВыручкаНеЕНВД),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И (Субконто1 В
	|						(ВЫБРАТЬ
	|							НоменклатурныеГруппыПродукции.НоменклатурнаяГруппа
	|						ИЗ
	|							НоменклатурныеГруппыПродукции)
	|					ИЛИ ВЫРАЗИТЬ(Субконто2 КАК Справочник.Номенклатура).Услуга),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	ТаблицаДоходПродукция = Запрос.Выполнить().Выгрузить();
	
	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства
	СтраницаЛист02_1.П002010001103 =  ТаблицаДоходПродукция.Итог("СуммаДохода");
	
	// Строка 012 - выручка от реализации покупных товаров
	СтраницаЛист02_1.П002010001203 = БухИтогиНайти("КО", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД, БухИтоги) - ТаблицаДоходПродукция.Итог("СуммаДохода");
	
	// Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	П002010001303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	П002030007003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_1.П002010001303 = П002010001303 + П002030007003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010001303",
							  "Строка 013 ""Выручка от реализации от реализации имущественных прав""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010001303,
							  "Лист02_1",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат", 
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010001303",
							  "Строка 013 ""Выручка от реализации от реализации имущественных прав""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002030007003,
							  "Лист02_1",
							  ДополнительныеПараметры);

	// Строка 014 - выручка от реализации прочего имущества
	Доходы_ПрочееИмущество = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	Доходы_ОбъектыСтроит = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, БухИтоги91);
	СтраницаЛист02_1.П002010001403 = Доходы_ПрочееИмущество + Доходы_ОбъектыСтроит;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010001403",
							  "Строка 014 ""Выручка от реализации прочего имущества""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  Доходы_ПрочееИмущество,
							  "Лист02_1",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010001403",
							  "",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  Доходы_ОбъектыСтроит,
							  "Лист02_1",
							  ДополнительныеПараметры);
								   
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка
	СтраницаЛист02_1.П002010002003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	
	// Строка 100 - Внереализационные доходы всего
	СтраницаЛист02_1.П002010010003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("КО"));
	ВставитьРасшифровкуВнереализационных(ТаблицаРасшифровки, Запрос, "П002010010003", "КО", СписокПрочихДоходовИРасходов);
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	П002010010103 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_1.П002010010103 = П002010010103;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
											Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет,
											СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010010103",
							  "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010010103,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_1.П002010010203 = П002010010203;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010010203",
							  "Строка 102 ""Доходы от ликвидации основных средств""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код, П002010010203,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в статье 251 НК)
	П002010010303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав, БухИтоги917);
	СтраницаЛист02_1.П002010010303 = П002010010303;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010010303",
							  "Строка 103 ""Доходы от безвозмездного получения имущества""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код, П002010010303,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 104 - в виде излишков
	П002010010403 = БухИтоги911_Излишки;
	СтраницаЛист02_1.П002010010403 = П002010010403;
	
	// Строка 105 - в виде восстановления аморт.премии
	П002010010503 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии, БухИтоги917);
	СтраницаЛист02_1.П002010010503 = П002010010503;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010010503",
							  "Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010010503,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 107 - в сумм корректировки прибыли до рыночных цен
	П002010010703 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен, БухИтоги917);
	СтраницаЛист02_1.П002010010703 = П002010010703;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002010010703",
							  "Строка 107 ""сумма корректировки прибыли до рыночных цен""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010010703,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 2
	
	СтраницаЛист02_2 = Контейнер.Лист02_2[0].Данные[0].Значение;
	
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос.УстановитьПараметр("СчетаСебестоимостьПродажНеЕНВД", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.СебестоимостьПродажНеЕНВД));
	
	Товары = Новый Массив;
	Товары.Добавить(ПС.Товары);
	Товары.Добавить(ПС.ТорговаяНаценка);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ТорговаяНаценка);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Массив = Новый Массив;
	Массив.Добавить(ПС.РасчетыСПоставщикамиИПодрядчиками);
	Массив.Добавить(ПС.РасчетыСПокупателямиИЗаказчиками);
	Массив.Добавить(ПС.РасчетыСРазнымиДебиторамиИКредиторами);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаТовары
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаПокупныеТоварыОтгруженные
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ПокупныеТоварыОтгруженные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ПоступлениеИВыбытиеИмуществаРаботУслугПрав)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&СчетаСебестоимостьПродажНеЕНВД), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаТовары.Счет
	|				ИЗ
	|					ВТ_СчетаТовары),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПокупныеТоварыОтгруженные.Счет
	|				ИЗ
	|					ВТ_СчетаПокупныеТоварыОтгруженные),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав.Счет
	|				ИЗ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги902 = Запрос.Выполнить().Выгрузить();
	
	СебестоимостьПродаж                        = БухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = БухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = БухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = БухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	СтраницаЛист02_2.П002020001003 = П002020001003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020001003",
							  "Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""",
							  "+",
							  "!ДО"+ПС.СебестоимостьПродаж.Код,
							  СебестоимостьПродаж,
							  "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020001003",
							  "",
							  "-",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код,
							  - Товары,
							  "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020001003",
							  "",
							  "-",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные.Код,
							  - ПокупныеТоварыОтгруженные,
							  "Лист02_2");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК Сумма,
	|	ХозрасчетныйОбороты.КорСчет КАК КоррСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код КАК КоррСчетКод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&СчетаСебестоимостьПродажНеЕНВД),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав.Счет
	|				ИЗ
	|					ВТ_СчетаПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код";
	ТаблицаПоступлениеИВыбытиеИмуществаРаботУслугПрав = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаПоступлениеИВыбытиеИмуществаРаботУслугПрав Цикл
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, 
			"П002020001003", 
			"", 
			"-", 
			"!ОБ"+ПС.СебестоимостьПродаж.Код+" "+Строка.КоррСчетКод, 
			- Строка.Сумма, 
			"Лист02_2");
	КонецЦикла;
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос.УстановитьПараметр("Счета44",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыНаПродажу));
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажуНеЕНВД);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета44),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД),
	|			КорСчет = &Счет90,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	
	БухИтоги44 = Запрос.Выполнить().Выгрузить();
	П002020002003 = БухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	СтраницаЛист02_2.П002020002003 = П002020002003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,
		БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020002003",
							  "Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""",
							  "+",
							  "!ОБ"+ПС.Продажи_РасходыНаПродажуНеЕНВД+" "+ПС.РасходыНаПродажу,
							  БухИтоги44.Итог("СуммаОборотКт"),
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020002003",
							  "",
							  "+",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код,
							  Товары,
							  "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020002003",
							  "",
							  "+",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные,
							  ПокупныеТоварыОтгруженные,
							  "Лист02_2");
	Для Каждого Строка Из ТаблицаПоступлениеИВыбытиеИмуществаРаботУслугПрав Цикл
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, 
			"П002020002003", 
			"", 
			"+", 
			"!ОБ"+ПС.СебестоимостьПродаж.Код+" "+Строка.КоррСчетКод, 
			Строка.Сумма, 
			"Лист02_2");
	КонецЦикла;
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	СтраницаЛист02_2.П002020003003 = П002020003003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020003003",
							  "Строка 030 ""Стоимость реализованных покупных товаров""",
							  "+",
							  "!ОБ"+ ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код,
							  Товары,
							  "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020003003",
							  "",
							  "+",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные.Код,
							  ПокупныеТоварыОтгруженные, 
							  "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020003003",
							  "",
							  "+",
							  "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.РасчетыСПокупателямиИЗаказчиками.Код,
							  ПоступлениеИВыбытиеИмуществаРаботУслугПрав,
							  "Лист02_2");
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы =       БухИтогиКосвЗатрат.Итог("КО");
	НалогиИСборыПрочие =     БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, БухИтоги91);
	ПрочиеКосвенныеРасходы = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, БухИтоги91)
						   + БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, БухИтоги91);
	П002020004003 = КосвенныеРасходы + ПрочиеКосвенныеРасходы + НалогиИСборыПрочие;
	
	СтраницаЛист02_2.П002020004003 = П002020004003;
	ВставитьРасшифровкуКосвенныхРасходов("Строка 040 ""Косвенные расходы""", ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020004003");
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020004003",
							  "",
							  "+",
							  "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
							  ПрочиеКосвенныеРасходы,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020004003",
							  "",
							  "+",
							  "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
							  НалогиИСборыПрочие,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК																	
	
	НалогиИСборы =  БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, БухИтогиКосвЗатрат);
	СтраницаЛист02_2.П002020004103 = НалогиИСборы + НалогиИСборыПрочие;
	ВставитьРасшифровкуКосвенныхРасходов("Строка 041 ""Суммы налогов и сборов""",
										 ТаблицаРасшифровки,
										 Запрос,
										 СписокСтатейЗатрат,
										 "П002020004103",
										 Перечисления.ВидыРасходовНУ.НалогиИСборы);
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020004103",
							  "",
							  "+",
							  "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
							  НалогиИСборыПрочие,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 042 - Расходы на капитальные вложения размере не более 10%  
	П002020004203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, БухИтогиКосвЗатрат);	
	СтраницаЛист02_2.П002020004203 = П002020004203;
	
	// Строка 050 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ПослеНаступленияСрокаПлатежа = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоНаступленияСрокаПлатежа    = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтоимостьИмущественныхПравОбслПроизводств = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91);
	СтоимостьВсехИмущественныхПрав = ОказаниеФинансовыхУслуг + ПослеНаступленияСрокаПлатежа + ДоНаступленияСрокаПлатежа + СтоимостьИмущественныхПравОбслПроизводств;
	
	П002020005003 = СтоимостьВсехИмущественныхПрав 
				  - ОказаниеФинансовыхУслуг
				  - ДоНаступленияСрокаПлатежа
				  - ПослеНаступленияСрокаПлатежа
				  - СтоимостьИмущественныхПравОбслПроизводств;
	СтраницаЛист02_2.П002020005003 = П002020005003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005003", 
							  "Строка 050 ""Стоимость имущественных прав""", "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  СтоимостьВсехИмущественныхПрав,
							  "Лист02_2");
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005003",
							  "",
							  "-",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  -ОказаниеФинансовыхУслуг,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005003",
							  "",
							  "-",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  -ДоНаступленияСрокаПлатежа,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005003",
							  "",
							  "-",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  -ПослеНаступленияСрокаПлатежа,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 054 - Расходы на НИОКР по перечню правительства
	П002020005403 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ, БухИтогиКосвЗатрат);
	СтраницаЛист02_2.П002020005403 = П002020005403;
	
	// Строка 052 - Расходы на НИОКР 
	П002020005203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, БухИтогиКосвЗатрат) + П002020005403;
	СтраницаЛист02_2.П002020005203 = П002020005203;
	
	ВставитьРасшифровкуКосвенныхРасходов("Строка 052 ""Расходы на НИОКР""",
										 ТаблицаРасшифровки,
										 Запрос,
										 СписокСтатейЗатрат,
										 "П002020005203",
										 Перечисления.ВидыРасходовНУ.НИОКР);
	ВставитьРасшифровкуКосвенныхРасходов("Строка 052 ""Расходы на НИОКР""",
									     ТаблицаРасшифровки,
										 Запрос,
										 СписокСтатейЗатрат,
										 "П002020005203",
										 Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	ВставитьРасшифровкуКосвенныхРасходов("Строка 054 ""Расходы на НИОКР по перечню Правительства РФ""",
										 ТаблицаРасшифровки,
										 Запрос,
										 СписокСтатейЗатрат,
										 "П002020005403",
										 Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	// Строка 059 - Стоимость имущественных прав
	П002020005903 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	П002030008003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_2.П002020005903 = П002020005903 + П002030008003;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005903",
							  "Строка 059 ""Стоимость имущественных прав""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002020005903,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020005903",
							  "Строка 059 ""Стоимость имущественных прав""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002030008003,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,           
	//              связанные с его реализацией
	ПрочееИмущество = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	ОбъектыСтроит = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, БухИтоги91);
	П002020006003 = ПрочееИмущество + ОбъектыСтроит;
	СтраницаЛист02_2.П002020006003 = П002020006003;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020006003",
							  "Строка 060 ""Цена приобретения реализованного прочего имущества""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  ПрочееИмущество,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020006003",
							  "",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  ОбъектыСтроит,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг
	П002020007003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	СтраницаЛист02_2.П002020007003 = П002020007003;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, 
							  "П002020007003",
							  "Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002020007003,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счета97",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыБудущихПериодов));
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&Счета97), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП";
	БухИтоги97 = Запрос.Выполнить().Выгрузить();
	БухИтоги97.Свернуть("Счет","КО");	
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности
	П002020009003 = БухИтогиНайти("КО", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, БухИтоги97);
	СтраницаЛист02_2.П002020009003 = П002020009003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств,
														  СписокРБП));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020009003",
							  "Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""",
							  "+",
							  "!КО"+ ПС.РасходыБудущихПериодов.Код,
							  П002020009003,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	П002020010003 = БухИтогиНайти("КО",Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, БухИтоги97);
	СтраницаЛист02_2.П002020010003 = П002020010003;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества,
														  СписокРБП));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020010003",
							  "Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""",
							  "+",
							  "!КО"+ПС.РасходыБудущихПериодов.Код,
							  П002020010003,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	Запрос.УстановитьПараметр("Счета02",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияОсновныхСредств));
	Запрос.УстановитьПараметр("Счета05",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияНематериальныхАктивов));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК АмортизацияОсновныхСредств,
	|	0 КАК АмортизацияНематериальныхАктивов,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ПОМЕСТИТЬ Амортизация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	0,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	0,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * (1 - ДолиЕНВД.ДоляЕНВД)),
	|	0,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).АмортизационнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * (1 - ДолиЕНВД.ДоляЕНВД)),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Амортизация.АмортизацияОсновныхСредств) КАК АмортизацияОсновныхСредств,
	|	СУММА(Амортизация.АмортизацияНематериальныхАктивов) КАК АмортизацияНематериальныхАктивов,
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто,
	|	СУММА(ВЫБОР
	|			КОГДА Амортизация.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|				ТОГДА Амортизация.АмортизацияОсновныхСредств
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияОсновныхСредств8_10,
	|	СУММА(ВЫБОР
	|			КОГДА Амортизация.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|				ТОГДА Амортизация.АмортизацияНематериальныхАктивов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияНематериальныхАктивов8_10,
	|	Амортизация.АмортизационнаяГруппа
	|ИЗ
	|	Амортизация КАК Амортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто,
	|	Амортизация.АмортизационнаяГруппа";
	
	БухИтогиАмортизация = Запрос.Выполнить().Выгрузить();
	
	АмортизацияОсновныхСредств       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств");
	АмортизацияНематериальныхАктивов = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов");
	АмортизацияОсновныхСредств8_10       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств8_10");
	АмортизацияНематериальныхАктивов8_10 = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов8_10");
	
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	СпособАмортизации = ?(МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный, "2","1");
	
	Если СпособАмортизации = "1" Тогда
		
		// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		СтраницаЛист02_2.П002020013103 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация ИЗ БухИтогиАмортизация Цикл
			ДополнительныеПараметры = 
			ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П002020013103",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П002020013103",
										  "",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		
		// Строка 132 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П002020013203 = АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация ИЗ БухИтогиАмортизация Цикл
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДополнительныеПараметры = 
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										 "П002020013203",
										 "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										 "+",
										 "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										 СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										 "Лист02_2",
										 ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЦикла;
		СтраницаЛист02_2.П002020013303 = 0;
		СтраницаЛист02_2.П002020013403 = 0;
	Иначе
		СтраницаЛист02_2.П002020013103 = АмортизацияОсновныхСредств8_10;
		СтраницаЛист02_2.П002020013203 = АмортизацияНематериальныхАктивов8_10;
		// Строка 133 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
		СтраницаЛист02_2.П002020013303 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов
										-АмортизацияОсновныхСредств8_10 - АмортизацияНематериальныхАктивов8_10;
		Для Каждого СтрокаБухИтогиАмортизация ИЗ БухИтогиАмортизация Цикл
			ДополнительныеПараметры = 
			ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств-СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П002020013303",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств-СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П002020013103",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П002020013303",
										  "",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов - СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2");
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П002020013103",
										  "",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		// Строка 134 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П002020013403 = АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация ИЗ БухИтогиАмортизация Цикл
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДополнительныеПараметры = 
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П002020013403",
										  "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
				Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда						  
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										 "П002020013203",
										 "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										 "+",
										 "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										 СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										 "Лист02_2",
										 ДополнительныеПараметры);
				 КонецЕсли;
			 КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Строка 135 - Способ амортизации
	СтраницаЛист02_2.П002020013503 = СпособАмортизации;
	
	// Строка 201 - Расходы в виде процентов по долговым обязательствам
	П002020020103_1 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, БухИтоги917);
	П002020020103_2 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, БухИтоги917);
	СтраницаЛист02_2.П002020020103 = П002020020103_1 + П002020020103_2;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							 "П002020020103",
							 "Строка 201 ""Расходы в виде процентов по долговым обязательствам""",
							 "+",
							 "!КО"+Счет9102.Код,
							 П002020020103_1,
							 "Лист02_2",
							 ДополнительныеПараметры);
	ДополнительныеПараметры =
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020020103",
							  "",
							  "+",
							  "!КО"+Счет9102.Код,
							  П002020020103_2,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	П002020030103 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_2.П002020030103 = П002020030103;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						      "П002020030103",
							  "Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020030103,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	П002020030203 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, БухИтоги917);
	СтраницаЛист02_2.П002020030203 = П002020030203;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020030203",
							  "Строка 302 ""Суммы безнадежных долгов""",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020030203,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
   // Строка 300 - Убытки, приравненные к внереализационным расходам всего
    ПрочиеУбытки = БухИтогиНайти("ДО",
	                             Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам,
								 БухИтоги917); 
	П002020030003 = ПрочиеУбытки + П002020030103 + П002020030203;
	СтраницаЛист02_2.П002020030003 = П002020030003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						      "П002020030003",
							  "Строка 300 ""Убытки, приравненные к внереализационным расходам - всего""",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020030103,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020030003",
							  "",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020030203,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат", 
														  Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "", "+", "!ДО"+Счет9102.Код, ПрочиеУбытки, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 200 - Внереализационные расходы
	П002020020003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("ДО")) - П002020030103 - П002020030203 - ПрочиеУбытки;
	СтраницаЛист02_2.П002020020003 = П002020020003;
	ВставитьРасшифровкуВнереализационных(ТаблицаРасшифровки, Запрос, "П002020020003", "ДО", СписокПрочихДоходовИРасходов);
	
	// Строка 204 - Расходы на ликвидацию ОС
	П002020020403 = БухИтогиНайти("ДО",
	                              Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств,
								  БухИтоги917);
	СтраницаЛист02_2.П002020020403 = П002020020403;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						      "П002020020403",
							  "Строка 204 ""Расходы на ликвидацию выводимых из эксплуатации основных средств, объектов незавершенного строительства и иного имущества""",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020020403,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	// Строка 205 - штрафы, пени и иные санкции за нарушение договорных или долговых обязательств
	П002020020503_1 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, БухИтоги917);
	П002020020503_2 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате, БухИтоги917);
	СтраницаЛист02_2.П002020020503 = П002020020503_1 + П002020020503_2;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						      "П002020020503",
							  "Строка 205 ""штрафы, пени и иные санкции за нарушение договорных или долговых обязательств""",
							  "+",
							  "!ДО"+Счет9102.Код, П002020020503_1,
							  "Лист02_2",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002020020503",
							  "",
							  "+",
							  "!ДО"+Счет9102.Код,
							  П002020020503_2,
							  "Лист02_2",
							  ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 3
	
	СтраницаЛист02_3 = Контейнер.Лист02_3[0].Данные[0].Значение;
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);
	ВыручкаОтРеализацииНМА = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	СтраницаЛист02_3.П002030003003 = П002030003003;
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030003003", "Строка 030 ""Выручка от реализации амортизируемого имущества""", "+", "!КО"+Счет9101.Код, ВыручкаОтРеализацииОС, "Лист02_3", ДополнительныеПараметры);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, БухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030003003", "", "+", "!КО"+Счет9101.Код, ВыручкаОтРеализацииНМА, "Лист02_3", ДополнительныеПараметры);
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РасходыПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);  
	РасходыПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	ПереносУбытковПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтогиПереносУбытковПоОСиНМА);  
	ПереносУбытковПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтогиПереносУбытковПоОСиНМА);
	П002030004003 = РасходыПоОС - ПереносУбытковПоОС + РасходыПОНМА - ПереносУбытковПоНМА;
	СтраницаЛист02_3.П002030004003 = П002030004003;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030004003",
							  "Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код, РасходыПоОС,
							  "Лист02_3",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030004003",
							  "",
							  "-",
							  "!КО"+ПС.ПрочиеРасходы.Код,
							  -ПереносУбытковПоОС,
							  "Лист02_3",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							 "П002030004003",
							 "",
							 "+",
							 "!КО"+ПС.ПрочиеРасходы.Код,
							 РасходыПОНМА,
							 "Лист02_3",
							 ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030004003",
							  "",
							  "-",
							  "!КО"+ПС.ПрочиеРасходы.Код,
							  -ПереносУбытковПоНМА,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки)
	ПрибыльПоАмортИмуществу = 
	ПрибылиИУбытки(Запрос,
				   ПС.ПрочиеДоходы,
				   ПС.ПрочиеРасходы,
				   Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств,
				   "Прибыль") + 
	ПрибылиИУбытки(Запрос,
				   ПС.ПрочиеДоходы,
				   ПС.ПрочиеРасходы,
				   Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов,
				   "Прибыль");
	СтраницаЛист02_3.П002030005003 = ПрибыльПоАмортИмуществу;
	
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль)
	УбыткиПоАмортИмуществу = 
	ПрибылиИУбытки(Запрос,
				   ПС.ПрочиеДоходы,
				   ПС.ПрочиеРасходы, 
				   Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств,
				   "Убыток") + 
	ПрибылиИУбытки(Запрос,
				   ПС.ПрочиеДоходы,
				   ПС.ПрочиеРасходы,
				   Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов,
				   "Убыток");
	СтраницаЛист02_3.П002030006003 = УбыткиПоАмортИмуществу;
	
	ДоходыОказаниеФинансовыхУслуг      = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ДоходыПослеНаступленияСрокаПлатежа = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоходыДоНаступленияСрокаПлатежа    = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	СтраницаЛист02_3.П002030010003 = П002030010003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030010003",
							  "Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002030010003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	СтраницаЛист02_3.П002030011003 = П002030011003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														   Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
														   СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030011003",
							  "Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002030011003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030012003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_3.П002030012003 = П002030012003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030012003",
							  "Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002030012003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030013003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_3.П002030013003 = П002030013003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
											БухИтогиНайти("СписокЗатрат", 
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030013003",
							  "Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002030013003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("КорСчет",      ПС.ПрочиеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			КорСчет = &КорСчет,
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги170 = Запрос.Выполнить().Выгрузить();
	
	// Строка 170 - убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода (включается в строку 200 Приложения № 2 к Листу 02)			
	П002030017003 = БухИтоги170.Итог("СуммаОборотДт");
	СтраницаЛист02_3.П002030017003 = П002030017003; 
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030017003",
							  "Строка 170 ""Убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода""",
							  "+",
							  "!ОБ"+ПС.ПрочиеРасходы.Код+" "+ПС.ПрочиеРасходы.Код,
							  П002030017003,
							  "Лист02_3");
		
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
	//              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы			
	П002030018003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91); 
	СтраницаЛист02_3.П002030018003 = П002030018003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						      "П002030018003",
							  "Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""",
							  "+",
							  "!КО"+ПС.ПрочиеРасходы.Код, П002030018003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде
	П002030019003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91); 
	СтраницаЛист02_3.П002030019003 = П002030019003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П002030019003",
							  "Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""",
							  "+",
							  "!ДО"+ПС.ПрочиеРасходы.Код,
							  П002030019003,
							  "Лист02_3",
							  ДополнительныеПараметры);
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 4
	
	СтраницаЛист02_4 = Контейнер.Лист02_4[0].Данные[0].Значение;
	
	Если Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 3 Или Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 12 Тогда
		Запрос.УстановитьПараметр("СчетаРасходыБудущихПериодов",         	
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыБудущихПериодов));
		Запрос.УстановитьПараметр("СчетаПрибылиИУбыткиНеЕНВД",         	
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрибылиИУбыткиНеЕНВД));
		Запрос.УстановитьПараметр("ВидРБП",       Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
		Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаНУОборотКт,
		|	ХозрасчетныйОбороты.Субконто1
		|ПОМЕСТИТЬ ОборотыКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП,
		|			КорСчет В (&СчетаПрибылиИУбыткиНеЕНВД),
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОборотыКт.СуммаНУОборотКт) КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыКт КАК ОборотыКт
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОборотыКт.Субконто1
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Субконто1";
		УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
		
		ТаблицаУбытков = Новый ТаблицаЗначений;
		ТаблицаУбытков.Колонки.Добавить("ГодУбыткаПредставление", Новый ОписаниеТипов("Строка"));
		ТаблицаУбытков.Колонки.Добавить("ГодУбытка", Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("Остаток",   Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("РБП",       Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"));
		
		ПоследнийГод = Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) - 1;
		СчетчикГодов = ПоследнийГод;
		
		Пока СчетчикГодов > ПоследнийГод - 10 Цикл
			СтрокаТаблицаУбытков = ТаблицаУбытков.Добавить();
			СтрокаТаблицаУбытков.ГодУбытка = СчетчикГодов;
			СчетчикГодов = СчетчикГодов - 1;
		КонецЦикла;
		
		Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
			
			ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;

			СтрокаТаблицаУбытков = ТаблицаУбытков.Найти(ГодУбытка, "ГодУбытка");
			
			Если СтрокаТаблицаУбытков = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицаУбытков.ГодУбыткаПредставление = СтрЗаменить(Строка(СтрокаТаблицаУбытков.ГодУбытка)," ", "");
			СтрокаТаблицаУбытков.Сумма   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
			СтрокаТаблицаУбытков.Остаток = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
			СтрокаТаблицаУбытков.РБП     = УбытокПрошлыхЛет.Субконто1;
		
		КонецЦикла;
		
		ТаблицаУбытков.Сортировать("ГодУбытка Возр");
		НомерПоказателя = 4;
		
		Для Каждого СтрокаТаблицаУбытков Из ТаблицаУбытков Цикл
            ПредставлениеПоказателя = Формат(НомерПоказателя, "ЧЦ=2; ЧВН=");
			СтраницаЛист02_4["П0020400" + ПредставлениеПоказателя + "001"] = СтрокаТаблицаУбытков.ГодУбыткаПредставление;
			СтраницаЛист02_4["П0020400" + ПредставлениеПоказателя + "003"] = СтрокаТаблицаУбытков.Сумма;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П0020400" + ПредставлениеПоказателя + "003", "Сумма убытка, полученного в " + СтрокаТаблицаУбытков.ГодУбыткаПредставление + " году",
				"+", "!СНД"+ПС.РасходыБудущихПериодов.Код, СтрокаТаблицаУбытков.Сумма, "Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, СтрокаТаблицаУбытков.РБП));
	        НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
		
		// Строка 150 - Сумма убытка или части убытка, уменьшающего   
		//              налоговую базу за отчетный  (налоговый)  период
		СуммаПоСтроке050Листа02 = 0;
		СуммаПоСтроке140Листа02 = 0;
		СуммаПоСтроке120Листа05 = 0;
		СуммаПоСтроке120Листа06 = 0;
		СуммаПоСтроке230Листа07 = 0;
		СуммаПоСтроке110Листа08 = 0;
		СуммаПоСтроке590Листа09 = 0;
		
		П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		СтраницаЛист02_4.П002040015003 = П002040015003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П002040015003",
								  "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период",
								  "+",
								  "!КО"+ПС.РасходыБудущихПериодов.Код,
								  П002040015003,
								  "Лист02_4");
		
		// Строка 160 -    сумма неперенесенного убытка	
		П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
		СтраницаЛист02_4.П002040016003 = П002040016003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П002040016003",
								  "неперенесенного убытка", "+", "!СКД"+ПС.РасходыБудущихПериодов.Код,
								  П002040016003,
								  "Лист02_4");
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 5
	
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьЛист2Приложение5ДекларацииПоПрибыли(Контейнер, ПараметрыОтчета, СписокОрганизаций, Контейнер.Лист02_5);

	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = 
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	
КонецПроцедуры

// Проверяет, могут ли по указанным статьям прочих расходов отражены суммы налогового учета.
//
// Параметры:
//  СтатьиРасходов - СправочникСсылка.ПрочиеДоходыИРасходы - проверяемая статья
//                 - Массив из СправочникСсылка.ПрочиеДоходыИРасходы - проверяемые объекты аналитики;
//                   Кроме статьей прочих доходов и расходов допускается передавать и другие значения субконто.
// 
// Возвращаемое значение:
//  Булево - Истина, если среди переданных статей есть такие, по которым запрещено отражать суммы налогового учета.
//
Функция ЗапрещеноОтражатьСуммыНалоговогоУчетаПоСтатьямПрочихРасходов(СтатьиРасходов) Экспорт
	
	// В отличие от статей затрат, не проверяется ВидДеятельностиДляНалоговогоУчетаЗатрат.
	//
	// В статьях затрат возможность отражения расходов в налоговом учете определяется видом затрат налогового учета -
	// комплексным полем, определяющим, в том числе, и допустимые для статьи виды деятельности.
	//
	// В статьях прочих расходов за это отвечает отдельный флаг, значение которого отображается пользователю
	// и имеет смысл, в том числе, и для статей для видов деятельности, облагаемых налогом в особом порядке.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьиРасходов", СтатьиРасходов);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Запрещено
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.Ссылка В(&СтатьиРасходов)
	|	И НЕ ПрочиеДоходыИРасходы.ПринятиеКНалоговомуУчету";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДекларацииПоПрибыли

Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
КонецПроцедуры

Функция ПолучитьМассивВнереализационныхРасходов()
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	
	Возврат Массив;
	
КонецФункции

Функция БухИтогиНайти(Колонка, Счет, ТаблицаПоиска)
	
	Строка = ТаблицаПоиска.Найти(Счет, "Счет");
	Если Строка = Неопределено Тогда
		Возврат 0;
	Иначе
		Значение = Строка[Колонка];
		Если Значение = Неопределено Или Значение = NULL Тогда
			Возврат 0;
		Иначе
			ВОзврат Значение;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьДополнительныеПараметрыСубконто(ВидСубконто1 = Неопределено, Субконто1 = Неопределено, ВидСубконто2 = Неопределено, Субконто2 = Неопределено, ВидСубконто3 = Неопределено, Субконто3 = Неопределено)
	ДополнительныеПараметры = Новый Структура;
	Если ВидСубконто1 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто, ЗначениеСубконто",ВидСубконто1, Субконто1));
	КонецЕсли;
	Если ВидСубконто2 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто, ЗначениеСубконто",ВидСубконто2, Субконто2));
	КонецЕсли;
	Если ВидСубконто3 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто, ЗначениеСубконто",ВидСубконто3, Субконто3));
	КонецЕсли;
	Возврат ДополнительныеПараметры;
КонецФункции

Процедура ВставитьРасшифровкуКосвенныхРасходов(НазваниеРасшифровки, ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, ИмяПоказателя, ВидРасходовНУ = Неопределено)
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	СчетаКосвенныхЗатрат = Новый Массив;
	СчетаКосвенныхЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаКосвенныхЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбслуживающиеПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.БракВПроизводстве);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходыНеЕНВД);
	
	ЗапросКосвЗатрат = Новый Запрос;
	ЗапросКосвЗатрат.УстановитьПараметр("ДатаНач", 				Запрос.Параметры.ДатаНач);	 
	ЗапросКосвЗатрат.УстановитьПараметр("ДатаКон", 				Запрос.Параметры.ДатаКон);
	ЗапросКосвЗатрат.УстановитьПараметр("СписокОрганизаций", 	Запрос.Параметры.СписокОрганизаций);
	ЗапросКосвЗатрат.УстановитьПараметр("Счет",         		СчетаКосвенныхЗатрат);
	ЗапросКосвЗатрат.УстановитьПараметр("КорСчет",      		КорСчета);
	ЗапросКосвЗатрат.УстановитьПараметр("ВидСубконто",			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ЗапросКосвЗатрат.УстановитьПараметр("ТранспортныеРасходы", 	Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	ЗапросКосвЗатрат.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаКосвенныхЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_КорСчетаКосвенныхЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОбороты.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаКосвенныхЗатрат.Счет
	|				ИЗ
	|					ВТ_СчетаКосвенныхЗатрат),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_КорСчетаКосвенныхЗатрат.Счет
	|				ИЗ
	|					ВТ_КорСчетаКосвенныхЗатрат),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ <> &ТранспортныеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Счет.Код,
	|	ХозрасчетныйОбороты.Субконто1";  	
	
	Если  ВидРасходовНУ <> Неопределено Тогда
		ЗапросКосвЗатрат.УстановитьПараметр("ВидРасходовНУ", ВидРасходовНУ);
		ЗапросКосвЗатрат.Текст = СтрЗаменить(ЗапросКосвЗатрат.Текст, 
			"ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ <> &ТранспортныеРасходы",
			"ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ = &ВидРасходовНУ"); 
	КонецЕсли;
	
	ВыборкаКосвЗатрат = ЗапросКосвЗатрат.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из ВыборкаКосвЗатрат Цикл
			ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, Выборка.Субконто1);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, НазваниеРасшифровки, "+", "!КО"+Выборка.СчетКод, Выборка.КО, "Лист02_Прил2", ДополнительныеПараметры);
	КонецЦикла;

КонецПроцедуры

Процедура ВставитьРасшифровкуВнереализационных(ТаблицаРасшифровки, Запрос, ИмяПоказателя, ВидСуммы, СписокПрочихДоходовИРасходов)
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос.УстановитьПараметр("Счет",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрочиеДоходыИРасходы));
	Запрос.УстановитьПараметр("ВидСубконто",  	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов", 	ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые",	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("ЕНВД",          	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов КАК ВидРасхода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|				И Не ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период,Месяц) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов";
	
	Если ВидСуммы = "КО" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаНУОборотДт", "СуммаНУОборотКт");
		Счет = ПС.ПрочиеДоходы.Код;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&ВидРасходов)", "(&ВидРасходов) И НЕ Субконто1.ВидПрочихДоходовИРасходов В (ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет),ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности),ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам))");
		Счет = ПС.ПрочиеРасходы.Код;
	КонецЕсли;
	
	ВидСубконтоПрочиеДоходыРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоПрочиеДоходыРасходы, БухИтогиНайти("СписокЗатрат", Выборка.ВидРасхода, СписокПрочихДоходовИРасходов));
		Если ВидСуммы = "КО" Тогда
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "Строка 100 ""Внереализационные доходы - всего""", "+", "!" + ВидСуммы+Счет, Выборка.Сумма, "Лист02_Прил1", ДополнительныеПараметры);
		Иначе
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "Строка 200 ""Внереализационные расходы - всего""", "+", "!" + ВидСуммы+Счет, Выборка.Сумма, "Лист02_Прил2", ДополнительныеПараметры);
		КонецЕсли;
	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РасчетТранспортныхРасходов

Функция ДоляТранспортныхРасходовТекущегоМесяца(Период, Организация)
	
	// Исходные данные для расчета:
	// - СуммаРасходов (транспортных)
	// - РеализацияТоваров
	// - СальдоТоваровКонечное
	
	// Получим их.
	
	// Для расчета коэффициента используем данные НУ (по налогу на прибыль).
	// Потому, что организация 
	// - должна их использовать для НУ (ст. 320 НК)
	// - может их использовать для БУ
	ИспользоватьДанныеНалоговогоУчета = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ИспользоватьДанныеНалоговогоУчета", ИспользоватьДанныеНалоговогоУчета);
	Запрос.УстановитьПараметр("СчетаРасходовНаПродажу",   БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыНаПродажу));    // 44
	Запрос.УстановитьПараметр("СчетаСебестоимостиПродаж", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж)); // 90.02
	
	СчетаТоваров = Новый Массив;
	СчетаТоваров.Добавить(ПланыСчетов.Хозрасчетный.Товары);                     // 41
	СчетаТоваров.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);            // 42
	СчетаТоваров.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);  // 45.01
	СчетаТоваров = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаТоваров);   // детализируем по субсчетам
	СчетаТарыПодТоваром = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя); // 41.03
	СчетаТоваров = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаТоваров, СчетаТарыПодТоваром); // удаляем счета тары
	Запрос.УстановитьПараметр("СчетаТоваров", СчетаТоваров);
	
	// Требования статьи 320 следующие:
	// Сумма прямых расходов в части транспортных расходов, 
	// относящаяся к остаткам нереализованных товаров, 
	// определяется по среднему проценту за текущий месяц 
	// с учетом переходящего остатка на начало месяца в следующем порядке:
	// 1) определяется сумма прямых расходов, 
	//    приходящихся на остаток нереализованных товаров на начало месяца и осуществленных в текущем месяце;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ СтатьиТранспортныхРасходов
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА &ИспользоватьДанныеНалоговогоУчета = ИСТИНА
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстаток + ХозрасчетныйОстаткиИОбороты.СуммаНУОборотДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток + ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|		КОНЕЦ) КАК СуммаРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В (&СчетаРасходовНаПродажу),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиТранспортныхРасходов.СтатьяЗатрат
	|					ИЗ
	|						СтатьиТранспортныхРасходов)) КАК ХозрасчетныйОстаткиИОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Не Выборка.Следующий()
	 Или Не ЗначениеЗаполнено(Выборка.СуммаРасходов) Тогда
		Возврат 0;
	КонецЕсли;
	СуммаРасходов = Выборка.СуммаРасходов;	
	
	// 2) определяется стоимость приобретения товаров, реализованных в текущем месяце,
	//    и стоимость приобретения остатка нереализованных товаров на конец месяца;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ИсходныеДанные.РеализацияТоваров) КАК РеализацияТоваров,
	|	СУММА(ИсходныеДанные.СальдоТоваровКонечное) КАК СальдоТоваровКонечное
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ИспользоватьДанныеНалоговогоУчета = ИСТИНА
	|				ТОГДА ХозрасчетныйОбороты.СуммаНУОборот
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборот
	|		КОНЕЦ КАК РеализацияТоваров,
	|		0 КАК СальдоТоваровКонечное
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаСебестоимостиПродаж),
	|				,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации),
	|				КорСчет В (&СчетаТоваров),
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА &ИспользоватьДанныеНалоговогоУчета = ИСТИНА
	|				ТОГДА ХозрасчетныйОстатки.СуммаНУОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
	|				Счет В (&СчетаТоваров),
	|				,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)) КАК ХозрасчетныйОстатки) КАК ИсходныеДанные";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
		
	РеализацияТоваров     = Выборка.РеализацияТоваров;
	СальдоТоваровКонечное = Выборка.СальдоТоваровКонечное;
	СтоимостьТоваров      = РеализацияТоваров + СальдоТоваровКонечное;
	
	Если РеализацияТоваров = 0 Или СтоимостьТоваров = 0 Тогда
		// В текущем месяце транспортные расходы принять нельзя - все расходы приходятся на остаток товаров
		Возврат 0;
	КонецЕсли;
	
	// 3) рассчитывается средний процент как отношение суммы прямых расходов (пункт 1 настоящей части)
	//    к стоимости товаров (пункт 2 настоящей части);
	
	ПроцентРасходов = Окр(СуммаРасходов / СтоимостьТоваров, 8);
	
	// 4) определяется сумма прямых расходов, относящаяся к остатку нереализованных товаров, 
	//    как произведение среднего процента и стоимости остатка товаров на конец месяца.
	СальдоРасходовКонечное = Окр(ПроцентРасходов * СальдоТоваровКонечное, 2);
	
	// <конец цитаты ст.320>
	// Функция должна вернуть не сальдо расходов, а долю расходов текущего месяца
	РасходыТекущегоПериода      = СуммаРасходов - СальдоРасходовКонечное;
	Возврат РасходыТекущегоПериода / СуммаРасходов;
	
КонецФункции

#КонецОбласти

#Область ВозвратыПрошлыхЛет

// Очистим суммы налогового учета в части сторно выручки и себестоимости продаж проводок, соответствующих возврату товаров прошлых лет.
// Функция возвращает данные об очищенных суммах с тем, чтобы дальше можно было добавить проводки,
// отражающие их во внереализационных доходах и расходах (убытках).
//
Функция СкорректироватьВыручкуСебестоимостьПоВозвратамТоваровПрошлыхЛет(Проводки, Период, Организация)
	
	// Скорректированные суммы сохраним - таким образом определим данные для формирования проводок
	ПрибылиУбытки = Новый Структура;
	ПрибылиУбытки.Вставить("Прибыли", НовыйДоходыРасходы());
	ПрибылиУбытки.Вставить("Убытки",  НовыйДоходыРасходы());
	
	СчетаВыручкиСебестоимости = СчетаВыручкиСебестоимости(Период , Организация);
	
	СвойстваСчетов = Новый Соответствие; // Локальный кеш. Эффективен, так как в проводках по возврату используется ограниченный набор счетов учета.
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если СчетаВыручкиСебестоимости.Выручка[Проводка.СчетКт] <> Неопределено Тогда
			СторонаСчета = "Кт";
			// Из письма Минфина от 25 июля 2016 года № 03-03-06/1/43372:
			// "Налогоплательщик отражает в составе внереализационных расходов сумму возвращенной покупателю оплаты за товар
			// как убытки прошлых налоговых периодов, выявленные в текущем."
			РазделДекларации = "Убытки";
		ИначеЕсли СчетаВыручкиСебестоимости.СебестоимостьПродаж[Проводка.СчетДт] <> Неопределено Тогда
			СторонаСчета = "Дт";
			// Из письма Минфина от 25 июля 2016 года № 03-03-06/1/43372:
			// "Одновременно в доходах налогоплательщик отражает стоимость возвращенного покупателем товара,
			// на которую был уменьшен доход от реализации данного товара, как доходы прошлых лет, выявленные в отчетном"
			РазделДекларации = "Прибыли";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаписьПрибылиУбытки = ПрибылиУбытки[РазделДекларации].Добавить();
		
		ЗаписьПрибылиУбытки.Счет          = Проводка["Счет"          + СторонаСчета];
		ЗаписьПрибылиУбытки.Подразделение = Проводка["Подразделение" + СторонаСчета];
		
		СубконтоДоходовРасходов = Проводка["Субконто" + СторонаСчета];
		
		СвойстваСчета = СвойстваСчетов[ЗаписьПрибылиУбытки.Счет];
		Если СвойстваСчета = Неопределено Тогда
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ЗаписьПрибылиУбытки.Счет);
			СвойстваСчетов.Вставить(ЗаписьПрибылиУбытки.Счет, СвойстваСчета);
		КонецЕсли;
		
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ИдентификаторСубконто = XMLСтрока(НомерСубконто);
			ИмяПоля          = "Субконто"    + ИдентификаторСубконто;
			ВидСубконто      = СвойстваСчета["ВидСубконто" + ИдентификаторСубконто];
			ЗначениеСубконто = СубконтоДоходовРасходов[ВидСубконто];
			ЗаписьПрибылиУбытки[ИмяПоля] = ЗначениеСубконто;
		КонецЦикла;
		
		ЗаписьПрибылиУбытки.Сумма = - Проводка["СуммаНУ" + СторонаСчета];
		
		// Непосредственно корректировка проводок
		Проводка["СуммаНУ" + СторонаСчета] = 0;
		
	КонецЦикла;
	
	Для Каждого ДанныеРазделаДекларации Из ПрибылиУбытки Цикл
		
		ПоляГруппировки = ПоляГруппировки(ДанныеРазделаДекларации.Значение, "Сумма");
		
		ДанныеРазделаДекларации.Значение.Свернуть(ПоляГруппировки, "Сумма");
		ДанныеРазделаДекларации.Значение.Сортировать(ПоляГруппировки, Новый СравнениеЗначений);
		
	КонецЦикла;
	
	Возврат ПрибылиУбытки;
	
КонецФункции

// Добавим проводки: отразим внереализационные доходы (расходы).
// При этом в качестве корреспонденций будем указывать, из каких проводок корректировки "обычных" расходов (доходов)
// были получены суммы.
//
Процедура ОтразитьПрибылиУбыткиПоВозвратамТоваровПрошлыхЛет(Проводки, ПрибылиУбытки, Период, Организация)
	
	СодержаниеОперации = Новый Структура;
	СодержаниеОперации.Вставить("Прибыли", "");
	СодержаниеОперации.Вставить("Убытки",  "");
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	СодержаниеОперации.Прибыли = НСтр(
		"ru = 'Себестоимость возвращенного товара отражена в составе внереализационных доходов прошлых лет'",
		КодЯзыка);
	СодержаниеОперации.Убытки  = НСтр(
		"ru = 'Возвращаемая покупателю оплата отражена в составе убытков прошлых налоговых периодов'",
		КодЯзыка);
		
	СтатьяПрибылиУбытки = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ВозвратТоваровПрошлыхЛет");
		
	Для Каждого ДанныеРазделаДекларации Из ПрибылиУбытки Цикл
		
		Если ДанныеРазделаДекларации.Ключ = "Прибыли" Тогда
			СчетПрибылиУбытки        = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			СторонаВнереализационные = "Кт";
			СторонаОбычные           = "Дт";
		Иначе
			СчетПрибылиУбытки        = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			СторонаВнереализационные = "Дт";
			СторонаОбычные           = "Кт";
		КонецЕсли;
		
		Для Каждого ШаблонПроводки Из ДанныеРазделаДекларации.Значение Цикл
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			
			Проводка.Содержание  = СодержаниеОперации[ДанныеРазделаДекларации.Ключ];
			
			Проводка["СуммаНУ" + СторонаВнереализационные] = ШаблонПроводки.Сумма;
			
			// Внереализационные доходы/расходы
			Проводка["Счет" + СторонаВнереализационные] = СчетПрибылиУбытки;
			Если СчетПрибылиУбытки.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + СторонаВнереализационные] = ШаблонПроводки.Подразделение;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				СчетПрибылиУбытки,
				Проводка["Субконто" + СторонаВнереализационные],
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
				СтатьяПрибылиУбытки);
			
			// "за счет" "обычных" доходов/расходов
			Проводка["Счет"          + СторонаОбычные] = ШаблонПроводки.Счет;
			Проводка["Подразделение" + СторонаОбычные] = ШаблонПроводки.Подразделение;
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ШаблонПроводки.Счет);
			Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				
				ИмяПоляСубконто  = "Субконто" + XMLСтрока(НомерСубконто);
				ЗначениеСубконто = ШаблонПроводки[ИмяПоляСубконто];
				
				БухгалтерскийУчет.УстановитьСубконто(
					ШаблонПроводки.Счет,
					Проводка["Субконто" + СторонаОбычные],
					НомерСубконто,
					ЗначениеСубконто);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйДоходыРасходы()
	
	ДоходыРасходы = Новый ТаблицаЗначений;
	
	ДоходыРасходы.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДоходыРасходы.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		ДоходыРасходы.Колонки.Добавить(
			"Субконто" + XMLСтрока(НомерСубконто),
			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	КонецЦикла;
	
	ДоходыРасходы.Колонки.Добавить("Сумма", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Возврат ДоходыРасходы;
	
КонецФункции

Функция ПоляГруппировки(ТаблицаЗначений, ПолеСуммирования)
	
	ПоляГруппировки = Новый Массив;
	
	Для Каждого ОписаниеКолонки Из ТаблицаЗначений.Колонки Цикл
		
		Если ОписаниеКолонки.Имя = ПолеСуммирования Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляГруппировки.Добавить(ОписаниеКолонки.Имя);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ПоляГруппировки, ",");

КонецФункции

#КонецОбласти

#Область НормируемыеРасходы

Функция ДолиСписанияНормируемыхРасходов(Период, Организация, ДоляСпециальныхРежимов, Протокол)
	
	// Речь идет о тех расходах, которые уже отражены на счетах затрат (20, 25, 44 и т.п.)
	
	Результат = Новый Соответствие;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОграниченияРасходов      = ОграниченияРасходов(Период, Организация, ДоляСпециальныхРежимов);
	ВидыНормируемыхРасходов  = ОграниченияРасходов.ВыгрузитьКолонку("ВидРасходов");
	СуммыНормируемыхРасходов = СуммыНормируемыхРасходов(Период, Организация, ВидыНормируемыхРасходов);
	
	// Применим ограничения к суммам
	Для Каждого ОписаниеРасхода Из СуммыНормируемыхРасходов Цикл
		
		Ограничение = ОграниченияРасходов.Найти(ОписаниеРасхода.ВидРасходов, "ВидРасходов");
		
		Если Ограничение = Неопределено Тогда
			// Это маловероятно, потому что для создания СуммыНормируемыхРасходов используются только те виды расходов,
			// что есть в ОграниченияРасходов
			Продолжить;
		КонецЕсли;
		
		// Расчет похож на справку-расчет, но иногда задом наперед
		ЗатратыЗаПериод                  = Макс(0, ОписаниеРасхода.ЗаПериод); // гр. 2 - за год, с начала года
		Расходы                          = Мин(Ограничение.ПредельныйРазмер, ЗатратыЗаПериод); // гр. 5 - уменьшают базу налога
		
		ЗатратыКРаспределению            = ОписаниеРасхода.НаНачалоМесяца + ОписаниеРасхода.ЗаМесяц; // то же, что гр.2 - гр.6
		ВключеноВРасходыНаНачалоМесяца   = ЗатратыЗаПериод - ЗатратыКРаспределению; // гр. 6
		РасходыТекущегоМесяца            = Расходы - ВключеноВРасходыНаНачалоМесяца; // гр. 7
		Доля                             = ?(ЗатратыКРаспределению = 0, 1, РасходыТекущегоМесяца / ЗатратыКРаспределению); // гр. 8
		Результат.Вставить(Ограничение.ВидРасходов, Доля);
		
		// Заполним протокол (для справки-расчета)
		Если Протокол.РасчетНормированияРасходов <> Неопределено Тогда
			
			Запись = Протокол.РасчетНормированияРасходов.Добавить();
			Запись.ВидОперации      = Ограничение.ВидРасходов;
			
			Запись.СуммаБазы        = Ограничение.База;
			Запись.ПредельныйРазмер = Ограничение.ПредельныйРазмер;
			
			Запись.ЗатратыГод       = ЗатратыЗаПериод;       // гр. 2
			Запись.РасходыГод       = Расходы;               // гр. 5
			Запись.РасходыМесяц     = РасходыТекущегоМесяца; // гр. 7
			
			// гр. 9 - затраты сверх лимита
			Запись.РазницыГод       = ЗатратыЗаПериод - Расходы;
			
			// гр. 11 - изменение затрат сверх лимита
			Запись.РазницыМесяц     = Запись.РазницыГод - ОписаниеРасхода.НаНачалоМесяца;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Ограничение.РасчетБазы, Протокол.РасчетБазыНормированияПоДоговорамСтрахования);
					
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОграниченияРасходов(Период, Организация, ДоляСпециальныхРежимов)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидРасходов",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ, ПеречислениеСсылка.ВидыРегламентныхОпераций")); // Для уже учтенных расходов - вид расходов, для не учтенных - вид операции
	Результат.Колонки.Добавить("База",             ОбщегоНазначения.ОписаниеТипаЧисло(18, 5));
	Результат.Колонки.Добавить("Норма",            Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПредельныйРазмер", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("РасчетБазы",       Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Индексы.Добавить("ВидРасходов");
	
	// Расходы могут быть ограничены:
	// - расходами на оплату труда
	//  -- либо суммой только оплаты труда
	//  -- либо суммой всех выплат в пользу сотрудников, включая страховки
	// - суммой выручки
	// - количеством застрахованных
	// При расчете нормы для договоров страхования учитывается срок их действия.
	
	РасходыНаОплатуТруда = РасходыНаОплатуТруда(Период, Организация, ДоляСпециальныхРежимов);
	ВыручкаОтРеализации  = ВыручкаОтРеализации(Период, Организация);
	ОплатаТрудаДляДоговоровСтрахования = ОплатаТрудаДляДоговоровСтрахования(Период, Организация, ДоляСпециальныхРежимов);
	ОграничениеРасходовНаСтрахованиеОтУтратыРаботоспособности =
		ОграничениеРасходовНаСтрахованиеОтУтратыРаботоспособности(Период, Организация);
	
	// п. 16, ст. 255 НК РФ 
	// Совокупная сумма взносов работодателей, уплачиваемых ... на накопительную часть трудовой пенсии,
	// по договорам долгосрочного страхования жизни работников, 
	// добровольного пенсионного страхования и (или) негосударственного пенсионного обеспечения работников, 
	// учитывается в целях налогообложения в размере, 
	// не превышающем 12 процентов от суммы расходов на оплату труда.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников;
	Ограничение.База           = ОплатаТрудаДляДоговоровСтрахования[Ограничение.ВидРасходов].База;
	Ограничение.РасчетБазы     = ОплатаТрудаДляДоговоровСтрахования[Ограничение.ВидРасходов].РасчетБазы;
	
	// п. 16, ст. 255 НК РФ
	// Добровольное личное страхование
	// Взносы по договорам добровольного личного страхования, предусматривающим оплату страховщиками медицинских расходов 
	// застрахованных работников ... включаются в состав расходов в размере, 
	// не превышающем 6 процентов от суммы расходов на оплату труда.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование;
	Ограничение.База           = ОплатаТрудаДляДоговоровСтрахования[Ограничение.ВидРасходов].База;
	Ограничение.РасчетБазы     = ОплатаТрудаДляДоговоровСтрахования[Ограничение.ВидРасходов].РасчетБазы;
	
	// п. 24.1, ст. 255 НК РФ
	// Расходы на возмещение затрат работников по уплате процентов по займам
	// расходы на возмещение затрат работников по уплате процентов по займам (кредитам) 
	// на приобретение и (или) строительство жилого помещения ... признаются в размере, 
	// не превышающем 3 процентов суммы расходов на оплату труда
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов;
	Ограничение.База           = РасходыНаОплатуТруда.ОплатаТруда;
	Ограничение.Норма          = НормаРасходов(Ограничение.ВидРасходов);
	
	// п. 2, ст. 264 НК РФ
	// Представительские расходы ... включаются в состав прочих расходов в размере, 
	// не превышающем 4 процента от расходов налогоплательщика на оплату труда.
	// Есть разъяснение, что в сумму этих расходов входит не только оплата труда, 
	// но и другие вознаграждения сотрудникам (страхование)
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы;
	Ограничение.База           = РасходыНаОплатуТруда.Вознаграждение;
	Ограничение.Норма          = НормаРасходов(Ограничение.ВидРасходов);
	
	// п. 4, ст. 264 НК РФ
	// Расходы на отдельные виды рекламы признаются в размере, не превышающем 1 процента выручки от реализации
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые;
	Ограничение.База           = ВыручкаОтРеализации;
	Ограничение.Норма          = НормаРасходов(Ограничение.ВидРасходов);
	
	// п. 16, ст. 255 НК РФ
	// Взносы по договорам добровольного личного страхования, 
	// предусматривающим выплаты исключительно в случаях смерти и (или) причинения вреда здоровью застрахованного лица, 
	// включаются в состав расходов в размере, не превышающем 15 000 рублей в год, 
	// рассчитанном как отношение общей суммы взносов, 
	// уплачиваемых по указанным договорам, к количеству застрахованных работников.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности;
	Ограничение.База           = ОграничениеРасходовНаСтрахованиеОтУтратыРаботоспособности.База;
	Ограничение.РасчетБазы     = ОграничениеРасходовНаСтрахованиеОтУтратыРаботоспособности.РасчетБазы;
	
	// Рассчитаем суммы лимитов
	Для Каждого Ограничение Из Результат Цикл
		Ограничение.ПредельныйРазмер = ПредельныйРазмерРасходов(Ограничение.База, Ограничение.Норма);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция РасходыНаОплатуТруда(Период, Организация, ДоляСпециальныхРежимов)
	
	Результат = Новый Структура;
	Результат.Вставить("Вознаграждение", 0); // Вся сумма вознаграждений, включая оплату труда и страхование
	Результат.Вставить("ОплатаТруда",    0); // Только оплата труда
	
	НачалоОтчетногоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоОтчетногоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Сумма распределяемых расходов рассчитывается так:
	// 1. За период с начала года до начала текущего месяца уже есть информация о расходах, отнесенных к основной системе налогообложения
	//    (оборот Дт 90.08 Кт 20, 23, 25..., потому что все распределяемые расходы - косвенные).
	// 2. За текущий месяц рассчитываем сумму расходов, учитываемых для исчисления налога на прибыль,
	//    исходя из оборота по Дт 20 и коэффициента распределения.
	// Сумму не распределяемых расходов определяем по оборотам Дт счетов затрат.
	// Во всех случаях исключаем "внутренние" обороты по распределению затрат (Дт счетов затрат Кт счетов затрат).
	
	СчетаРасходов   = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПолучитьМассивСчетовУчетаРасходов());
	
	ВидыРасходов = Новый Массив;
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда); // Ниже в запросе этот вид расходов обрабатываем особо
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",  НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  НачалоМесяца(Период) - 1);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организации",             Справочники.Организации.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("СчетаРасходов",           СчетаРасходов);
	Запрос.УстановитьПараметр("СчетаРезультата",         СчетаРезультата());
	Запрос.УстановитьПараметр("ВидыРасходов",            ВидыРасходов);
	Запрос.УстановитьПараметр("ДоляУчитываемыхРасходов", 1 - ДоляСпециальныхРежимов); // Применяется для распределяемых расходов
	
	Запрос.Текст = ТекстЗапросаОплатаТруда() + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Вознаграждение.Сумма), 0) КАК Вознаграждение,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НЕ СтатьиЗатрат.ОплатаТруда
	|					ТОГДА 0
	|				ИНАЧЕ Вознаграждение.Сумма
	|			КОНЕЦ), 0) КАК ОплатаТруда
	|ИЗ
	|	ВТ_Вознаграждение КАК Вознаграждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Вознаграждение.СтатьяЗатрат = СтатьиЗатрат.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(); // В выборке всегда 1 запись
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаОплатаТруда()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ОплатаТруда)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаТруда,
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Распределяемая
	|ПОМЕСТИТЬ ВТ_СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&ВидыРасходов)
	|	И СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вознаграждение.Период КАК Период,
	|	Вознаграждение.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СУММА(Вознаграждение.СуммаПринимаемые + Вознаграждение.СуммаРаспределяемые * &ДоляУчитываемыхРасходов) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Вознаграждение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОблагаетсяНалогомНаПрибыль.Субконто1 КАК СтатьяЗатрат,
	|		ОблагаетсяНалогомНаПрибыль.СуммаНУОборотДт КАК СуммаПринимаемые,
	|		0 КАК СуммаРаспределяемые,
	|		ОблагаетсяНалогомНаПрибыль.Период КАК Период
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецОтчетногоПериода,
	|				Месяц,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиЗатрат.Ссылка
	|						ИЗ
	|							ВТ_СтатьиЗатрат
	|						ГДЕ
	|							НЕ ВТ_СтатьиЗатрат.Распределяемая),
	|				,
	|				) КАК ОблагаетсяНалогомНаПрибыль
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОблагаетсяНалогомНаПрибыльЛишнее.Субконто1,
	|		-ОблагаетсяНалогомНаПрибыльЛишнее.СуммаНУОборотДт,
	|		0,
	|		ОблагаетсяНалогомНаПрибыльЛишнее.Период
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецОтчетногоПериода,
	|				Месяц,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации КАК Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиЗатрат.Ссылка
	|						ИЗ
	|							ВТ_СтатьиЗатрат
	|						ГДЕ
	|							НЕ ВТ_СтатьиЗатрат.Распределяемая),
	|				КорСчет В (&СчетаРасходов),
	|				) КАК ОблагаетсяНалогомНаПрибыльЛишнее
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределяемыеТекущийМесяц.Субконто1,
	|		0,
	|		РаспределяемыеТекущийМесяц.СуммаНУОборотДт,
	|		РаспределяемыеТекущийМесяц.Период
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				Месяц,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиЗатрат.Ссылка
	|						ИЗ
	|							ВТ_СтатьиЗатрат
	|						ГДЕ
	|							ВТ_СтатьиЗатрат.Распределяемая),
	|				,
	|				) КАК РаспределяемыеТекущийМесяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределяемыеТекущийМесяцЛишнее.Субконто1,
	|		0,
	|		-РаспределяемыеТекущийМесяцЛишнее.СуммаНУОборотДт,
	|		РаспределяемыеТекущийМесяцЛишнее.Период
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				Месяц,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации КАК Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиЗатрат.Ссылка
	|						ИЗ
	|							ВТ_СтатьиЗатрат
	|						ГДЕ
	|							ВТ_СтатьиЗатрат.Распределяемая),
	|				КорСчет В (&СчетаРасходов),
	|				) КАК РаспределяемыеТекущийМесяцЛишнее
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределенныеПредыдущиеМесяцы.Субконто1,
	|		РаспределенныеПредыдущиеМесяцы.СуммаНУОборотКт,
	|		0,
	|		РаспределенныеПредыдущиеМесяцы.Период
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецПредыдущегоМесяца,
	|				Месяц,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_СтатьиЗатрат.Ссылка
	|						ИЗ
	|							ВТ_СтатьиЗатрат
	|						ГДЕ
	|							ВТ_СтатьиЗатрат.Распределяемая),
	|				КорСчет В (&СчетаРезультата),
	|				) КАК РаспределенныеПредыдущиеМесяцы) КАК Вознаграждение
	|
	|СГРУППИРОВАТЬ ПО
	|	Вознаграждение.СтатьяЗатрат,
	|	Вознаграждение.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ВыручкаОтРеализации(Период, Организация)
	
	НачалоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоПериода = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Включаем в выручку часть расходов на счете 91
	ВидыПрочихДоходов = Новый Массив;
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ВидыПрочихДоходов", ВидыПрочихДоходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаВыручки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрочихДоходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка
	|ПОМЕСТИТЬ ВидыПрочихДоходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В(&ВидыПрочихДоходов)
	|	И ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Выручка.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выручка.СуммаНУОборотКт КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаВыручки.Счет
	|					ИЗ
	|						СчетаВыручки),
	|				,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации),
	|				,
	|				) КАК Выручка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеДоходы.СуммаНУОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаПрочихДоходов.Счет
	|					ИЗ
	|						СчетаПрочихДоходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВидыПрочихДоходов.Ссылка
	|						ИЗ
	|							ВидыПрочихДоходов),
	|				,
	|				) КАК ПрочиеДоходы) КАК Выручка";
	
	Выборка = Запрос.Выполнить().Выбрать(); // В выборке всегда 1 запись
	Выборка.Следующий();
	Возврат Выборка.Сумма;
	
КонецФункции

Функция ОграничениеРасходовНаСтрахованиеОтУтратыРаботоспособности(Период, Организация)
	
	// Речь о страховании на случай смерти или утраты работоспособности
	
	РезультатРасчета = НовыйРасчетБазыРасходовНаСтрахование();
	
	НачалоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоПериода = Неопределено Тогда
		Возврат РезультатРасчета;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", НачалоМесяца(Период) - 1);
	Запрос.УстановитьПараметр("Организации",   Справочники.Организации.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.УстановитьПараметр("СчетаРасходов", ПолучитьМассивСчетовУчетаРасходов());
	Запрос.УстановитьПараметр("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	
	ВидыКорСубконто = Новый Массив;
	ВидыКорСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	ВидыКорСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидыКорСубконто", ВидыКорСубконто);
	
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Период));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаСтраховыхПлатежей
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	И СтатьиЗатрат.ВидРасходовНУ = &ВидРасходовНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.РасходыБудущихПериодов) КАК РасходБудущихПериодов,
	|	ХозрасчетныйОбороты.Период КАК Период
	|ПОМЕСТИТЬ РасходыБудущихПериодов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатрат.Ссылка
	|					ИЗ
	|						СтатьиЗатрат),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					СчетаСтраховыхПлатежей.Счет
	|				ИЗ
	|					СчетаСтраховыхПлатежей),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Период В
	|				(ВЫБРАТЬ
	|					РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета
	|				ИЗ
	|					РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|				ГДЕ
	|					РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоПериода И &КонецПредыдущегоМесяца
	|					И РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ = &ВидРасходовНУ
	|					И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|					И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &ГоловнаяОрганизация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходБудущихПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.РасходБудущихПериодов КАК РасходБудущихПериодов,
	|	ВЫБОР
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|					И РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания < РасходыБудущихПериодов.Период
	|				ИЛИ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия >= РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|					И КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.Период
	|			ТОГДА РасходыБудущихПериодов.Период
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|			ТОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|		ИНАЧЕ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаНачалаДействия,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия ЕСТЬ NULL
	|					ИЛИ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия > КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаОкончанияСписания < КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ)
	|							ТОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаОкончанияСписания
	|						ИНАЧЕ КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ)
	|					КОНЕЦ
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия, ДЕНЬ, -1)
	|		КОНЕЦ) КАК ДатаОкончанияДействия,
	|	РасходыБудущихПериодов.Период КАК Период,
	|	КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.Количество КАК КоличествоЗастрахованных
	|ПОМЕСТИТЬ ПериодыДействияИзРегистра
	|ИЗ
	|	РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоЗастрахованныхОтНесчастныхСлучаев КАК КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала
	|		ПО (КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.РасходыНаСтрахование = РасходыБудущихПериодов.РасходБудущихПериодов)
	|			И (КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия <= КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоЗастрахованныхОтНесчастныхСлучаев КАК КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания
	|		ПО РасходыБудущихПериодов.РасходБудущихПериодов = КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.РасходыНаСтрахование
	|			И (КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|						И РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания < РасходыБудущихПериодов.Период
	|					ИЛИ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия >= РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|						И КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.Период
	|				ТОГДА РасходыБудущихПериодов.Период
	|			КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|				ТОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|			ИНАЧЕ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия
	|		КОНЕЦ <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыБудущихПериодов.РасходБудущихПериодов,
	|	КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.Количество,
	|	ВЫБОР
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|				И РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания < РасходыБудущихПериодов.Период
	|			ТОГДА РасходыБудущихПериодов.Период
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|			ТОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|		ИНАЧЕ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия
	|	КОНЕЦ,
	|	РасходыБудущихПериодов.Период,
	|	ВЫБОР
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|					И РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания < РасходыБудущихПериодов.Период
	|				ИЛИ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия >= РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|					И КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.Период
	|			ТОГДА РасходыБудущихПериодов.Период
	|		КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия < РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|			ТОГДА РасходыБудущихПериодов.РасходБудущихПериодов.ДатаНачалаСписания
	|		ИНАЧЕ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаНачала.ДатаНачалаДействия
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия ЕСТЬ NULL
	|					ИЛИ КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия > КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ)
	|				ТОГДА КОНЕЦПЕРИОДА(РасходыБудущихПериодов.Период, МЕСЯЦ)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(КоличествоЗастрахованныхОтНесчастныхСлучаевДатаОкончания.ДатаНачалаДействия, ДЕНЬ, -1)
	|		КОНЕЦ) >= РасходыБудущихПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыБудущихПериодов.РасходБудущихПериодов КАК РасходБудущихПериодов
	|ПОМЕСТИТЬ РасходыБудущихПериодовКоличествоПоПроводкам
	|ИЗ
	|	РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыДействияИзРегистра КАК ПериодыДействияИзРегистра
	|		ПО РасходыБудущихПериодов.РасходБудущихПериодов = ПериодыДействияИзРегистра.РасходБудущихПериодов
	|ГДЕ
	|	ПериодыДействияИзРегистра.РасходБудущихПериодов ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания >= НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания
	|		ИНАЧЕ ХозрасчетныйОбороты.Период
	|	КОНЕЦ КАК ДатаНачалаДействия,
	|	МАКСИМУМ(ХозрасчетныйОбороты.КорСубконто2) КАК РасходБудущихПериодов,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаОкончанияСписания >= КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаОкончанияСписания
	|	КОНЕЦ КАК ДатаОкончанияДействия,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК ЗастрахованныеЛица
	|ПОМЕСТИТЬ ДоговорыРаботникиОрганизацииИзПроводок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатрат.Ссылка
	|					ИЗ
	|						СтатьиЗатрат)
	|				И КорСубконто1 <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И КорСубконто2 В
	|					(ВЫБРАТЬ
	|						РасходыБудущихПериодовКоличествоПоПроводкам.РасходБудущихПериодов
	|					ИЗ
	|						РасходыБудущихПериодовКоличествоПоПроводкам),
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					СчетаСтраховыхПлатежей.Счет
	|				ИЗ
	|					СчетаСтраховыхПлатежей),
	|			&ВидыКорСубконто) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ ХозрасчетныйОбороты.Период В
	|				(ВЫБРАТЬ
	|					РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета
	|				ИЗ
	|					РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|				ГДЕ
	|					РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоПериода И &КонецПредыдущегоМесяца
	|					И РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ = &ВидРасходовНУ
	|					И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|					И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &ГоловнаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания >= НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания
	|		ИНАЧЕ ХозрасчетныйОбороты.Период
	|	КОНЕЦ,
	|	ХозрасчетныйОбороты.Период,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаОкончанияСписания >= КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ)
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто2 КАК Справочник.РасходыБудущихПериодов).ДатаОкончанияСписания
	|	КОНЕЦ,
	|	ХозрасчетныйОбороты.КорСубконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыРаботникиОрганизацииИзПроводок.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ДоговорыРаботникиОрганизацииИзПроводок.РасходБудущихПериодов КАК РасходБудущихПериодов,
	|	ДоговорыРаботникиОрганизацииИзПроводок.Период КАК Период,
	|	ДоговорыРаботникиОрганизацииИзПроводок.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ ПериодыДействияИзПроводок
	|ИЗ
	|	ДоговорыРаботникиОрганизацииИзПроводок КАК ДоговорыРаботникиОрганизацииИзПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДействияИзПроводок.РасходБудущихПериодов КАК РасходБудущихПериодов,
	|	ПериодыДействияИзПроводок.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	НАЧАЛОПЕРИОДА(ПериодыДействияИзПроводок.ДатаОкончанияДействия, ДЕНЬ) КАК ДатаОкончанияДействия,
	|	ПериодыДействияИзПроводок.Период КАК Период,
	|	0 КАК КоличествоЗастрахованных,
	|	ЛОЖЬ КАК СводноПоСотрудникам
	|ПОМЕСТИТЬ ПериодыДействияДоговоровСводно
	|ИЗ
	|	ПериодыДействияИзПроводок КАК ПериодыДействияИзПроводок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыДействияИзРегистра.РасходБудущихПериодов,
	|	ПериодыДействияИзРегистра.ДатаНачалаДействия,
	|	НАЧАЛОПЕРИОДА(ПериодыДействияИзРегистра.ДатаОкончанияДействия, ДЕНЬ),
	|	ПериодыДействияИзРегистра.Период,
	|	ПериодыДействияИзРегистра.КоличествоЗастрахованных,
	|	ИСТИНА
	|ИЗ
	|	ПериодыДействияИзРегистра КАК ПериодыДействияИзРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаНачалаДействия, ДЕНЬ, -1) КАК ДатаОкончанияДействияПромежуточный,
	|	ПериодыДействияДоговоровСводно.Период КАК Период
	|ПОМЕСТИТЬ ДатыОкончанияДействия
	|ИЗ
	|	ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаНачалаДействия, ДЕНЬ, -1) >= ПериодыДействияДоговоровСводно.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияДоговоровСводно.Период,
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаНачалаДействия, ДЕНЬ, -1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействияДоговоровСводно.ДатаОкончанияДействия,
	|	ПериодыДействияДоговоровСводно.Период
	|ИЗ
	|	ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаОкончанияДействия, ДЕНЬ, 1) КАК ДатаНачалаДействияПромежуточный,
	|	ПериодыДействияДоговоровСводно.Период КАК Период
	|ПОМЕСТИТЬ ДатыНачалаДействия
	|ИЗ
	|	ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаОкончанияДействия, ДЕНЬ, 1) <= КОНЕЦПЕРИОДА(ПериодыДействияДоговоровСводно.Период, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияДоговоровСводно.Период,
	|	ДОБАВИТЬКДАТЕ(ПериодыДействияДоговоровСводно.ДатаОкончанияДействия, ДЕНЬ, 1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействияДоговоровСводно.ДатаНачалаДействия,
	|	ПериодыДействияДоговоровСводно.Период
	|ИЗ
	|	ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаДействия.Период КАК Период,
	|	ДатыНачалаДействия.ДатаНачалаДействияПромежуточный КАК ДатаНачалаДействияПромежуточный,
	|	МИНИМУМ(ДатыОкончанияДействия.ДатаОкончанияДействияПромежуточный) КАК ДатаОкончанияДействияПромежуточный
	|ПОМЕСТИТЬ РазбивкаПоПериодам
	|ИЗ
	|	ДатыНачалаДействия КАК ДатыНачалаДействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОкончанияДействия КАК ДатыОкончанияДействия
	|		ПО ДатыНачалаДействия.ДатаНачалаДействияПромежуточный <= ДатыОкончанияДействия.ДатаОкончанияДействияПромежуточный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНачалаДействия.ДатаНачалаДействияПромежуточный,
	|	ДатыНачалаДействия.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПериодыДействияДоговоровСводно.РасходБудущихПериодов) КАК РасходыНаСтрахование,
	|	ПериодыДействияДоговоровСводно.Период КАК ПериодРасчета,
	|	ПериодыДействияДоговоровСводно.СводноПоСотрудникам КАК СводноПоСотрудникам,
	|	РАЗНОСТЬДАТ(РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный, РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный, ДЕНЬ) + 1 КАК КоличествоДнейСтрахования,
	|	РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный КАК ДатаНачалаДействия,
	|	РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный КАК ДатаОкончанияДействия,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД), КОНЕЦПЕРИОДА(&НачалоПериода, ГОД), ДЕНЬ) + 1 КАК ДнейВГоду,
	|	ИСТИНА КАК ЗаписыватьВПротокол,
	|	ДоговорыРаботникиОрганизацииИзПроводок.ЗастрахованныеЛица КАК ЗастрахованныеЛица
	|ПОМЕСТИТЬ РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводокРаботникиНесгруппированные
	|ИЗ
	|	ДоговорыРаботникиОрганизацииИзПроводок КАК ДоговорыРаботникиОрганизацииИзПроводок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазбивкаПоПериодам КАК РазбивкаПоПериодам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|			ПО (ПериодыДействияДоговоровСводно.Период = РазбивкаПоПериодам.Период)
	|				И (ПериодыДействияДоговоровСводно.ДатаНачалаДействия <= РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный)
	|				И РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный <= ПериодыДействияДоговоровСводно.ДатаОкончанияДействия
	|		ПО (РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный >= ДоговорыРаботникиОрганизацииИзПроводок.ДатаНачалаДействия)
	|			И (РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный <= ДоговорыРаботникиОрганизацииИзПроводок.ДатаОкончанияДействия)
	|			И (ПериодыДействияДоговоровСводно.РасходБудущихПериодов = ДоговорыРаботникиОрганизацииИзПроводок.РасходБудущихПериодов)
	|ГДЕ
	|	НЕ ПериодыДействияДоговоровСводно.СводноПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияДоговоровСводно.СводноПоСотрудникам,
	|	РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный,
	|	РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный,
	|	ПериодыДействияДоговоровСводно.Период,
	|	ДоговорыРаботникиОрганизацииИзПроводок.ЗастрахованныеЛица,
	|	РАЗНОСТЬДАТ(РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный, РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный, ДЕНЬ) + 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.РасходыНаСтрахование КАК РасходыНаСтрахование,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ПериодРасчета КАК ПериодРасчета,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.СводноПоСотрудникам КАК СводноПоСотрудникам,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.КоличествоДнейСтрахования КАК КоличествоДнейСтрахования,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДнейВГоду КАК ДнейВГоду,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ЗаписыватьВПротокол КАК ЗаписыватьВПротокол,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ЗастрахованныеЛица) КАК КоличествоЗастрахованных
	|ПОМЕСТИТЬ РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок
	|ИЗ
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводокРаботникиНесгруппированные КАК РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок
	|
	|СГРУППИРОВАТЬ ПО
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ПериодРасчета,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ЗаписыватьВПротокол,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаОкончанияДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.СводноПоСотрудникам,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.РасходыНаСтрахование,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаНачалаДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.КоличествоДнейСтрахования,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДнейВГоду
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДействияДоговоровСводно.РасходБудущихПериодов КАК РасходыНаСтрахование,
	|	ПериодыДействияДоговоровСводно.Период КАК ПериодРасчета,
	|	ПериодыДействияДоговоровСводно.КоличествоЗастрахованных КАК КоличествоЗастрахованных,
	|	ПериодыДействияДоговоровСводно.СводноПоСотрудникам КАК СводноПоСотрудникам,
	|	РАЗНОСТЬДАТ(РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный, РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный, ДЕНЬ) + 1 КАК КоличествоДнейСтрахования,
	|	РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный КАК ДатаНачалаДействия,
	|	РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный КАК ДатаОкончанияДействия,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД), КОНЕЦПЕРИОДА(&НачалоПериода, ГОД), ДЕНЬ) + 1 КАК ДнейВГоду,
	|	ИСТИНА КАК ЗаписыватьВПротокол
	|ИЗ
	|	РазбивкаПоПериодам КАК РазбивкаПоПериодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыДействияДоговоровСводно КАК ПериодыДействияДоговоровСводно
	|		ПО (ПериодыДействияДоговоровСводно.Период = РазбивкаПоПериодам.Период)
	|			И (ПериодыДействияДоговоровСводно.ДатаНачалаДействия <= РазбивкаПоПериодам.ДатаНачалаДействияПромежуточный)
	|			И РазбивкаПоПериодам.ДатаОкончанияДействияПромежуточный <= ПериодыДействияДоговоровСводно.ДатаОкончанияДействия
	|ГДЕ
	|	ПериодыДействияДоговоровСводно.СводноПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета,
	|	РасчетБазыНормированияПоДоговорамСтрахования.КоличествоЗастрахованных,
	|	РасчетБазыНормированияПоДоговорамСтрахования.СводноПоСотрудникам,
	|	РАЗНОСТЬДАТ(РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия, РасчетБазыНормированияПоДоговорамСтрахования.ДатаОкончанияДействия, ДЕНЬ) + 1,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаОкончанияДействия,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД), КОНЕЦПЕРИОДА(&НачалоПериода, ГОД), ДЕНЬ) + 1,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|ГДЕ
	|	РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоПериода И &КонецПредыдущегоМесяца
	|	И РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ = &ВидРасходовНУ
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &ГоловнаяОрганизация
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.РасходыНаСтрахование,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ПериодРасчета,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.КоличествоЗастрахованных,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.СводноПоСотрудникам,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.КоличествоДнейСтрахования,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаНачалаДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДатаОкончанияДействия,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ДнейВГоду,
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок.ЗаписыватьВПротокол
	|ИЗ
	|	РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок КАК РазбивкаПоПериодамКоличествоЗастрахованныхИзПроводок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаДействия
	|ИТОГИ
	|	СУММА(КоличествоЗастрахованных),
	|	МАКСИМУМ(КоличествоДнейСтрахования),
	|	МАКСИМУМ(ДнейВГоду),
	|	МАКСИМУМ(ЗаписыватьВПротокол)
	|ПО
	|	ДатаНачалаДействия,
	|	ДатаОкончанияДействия";
	
	Результат = Запрос.Выполнить();
	ВыборкаДатаНачала = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РасчетТекущегоПериода = ОбщегоНазначенияБП.ТаблицаЗначенийПоМетаданнымРегистра(
		Метаданные.РегистрыСведений.РасчетБазыНормированияПоДоговорамСтрахования, Истина);
	
	СуммаОграниченияОбщая = 0;
	БазаНормированияНаОдногоЗастрахованного =
		НормаРасходов(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		
	Пока ВыборкаДатаНачала.Следующий() Цикл
		ВыборкаДатаОкончания = ВыборкаДатаНачала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДатаОкончания.Следующий() Цикл
			
			СуммаОграниченияДляПериода = Окр(БазаНормированияНаОдногоЗастрахованного * ВыборкаДатаОкончания.КоличествоЗастрахованных 
				* ВыборкаДатаОкончания.КоличествоДнейСтрахования / ВыборкаДатаОкончания.ДнейВГоду, 2);
			СуммаОграниченияОбщая = СуммаОграниченияОбщая + СуммаОграниченияДляПериода;
			
			// В регистр сведений "РасчетБазыНормированияПоДоговорамСтрахования" записывается расчет
			// только для тех периодов, данных о которых нет в предыдущих периодах.
			Если ВыборкаДатаОкончания.ЗаписыватьВПротокол Тогда
				СуммыОграниченийПоРБП = Новый Массив;

				ВыборкаДетальная = ВыборкаДатаОкончания.Выбрать();
				Пока ВыборкаДетальная.Следующий() Цикл
					
					СуммаОграничения = БазаНормированияНаОдногоЗастрахованного * ВыборкаДетальная.КоличествоЗастрахованных
						* ВыборкаДетальная.КоличествоДнейСтрахования / ВыборкаДетальная.ДнейВГоду;
					СуммыОграниченийПоРБП.Добавить(СуммаОграничения);
				
					// Часть данных берется из расчета прошлых периодов, эти значения не нужно снова записывать в регистр.
					Запись = РасчетТекущегоПериода.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальная);
					Запись.КоличествоЗастрахованных = ВыборкаДетальная.КоличествоЗастрахованных;
					Запись.Организация = Организация;
					Запись.Период = Период;
					Запись.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности;

				КонецЦикла;

				РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОграниченияДляПериода,
					СуммыОграниченийПоРБП, 2);

				Если РаспределенныеСуммы <> Неопределено Тогда
					Индекс = РасчетТекущегоПериода.Количество() - РаспределенныеСуммы.Количество();
					Для Каждого РаспределеннаяСумма Из РаспределенныеСуммы Цикл
						РасчетТекущегоПериода[Индекс].СуммаБазы = РаспределеннаяСумма;
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатРасчета.База = СуммаОграниченияОбщая;
	РезультатРасчета.РасчетБазы = РасчетТекущегоПериода;
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция СуммыНормируемыхРасходов(Период, Организация, ВидыНормируемыхРасходов)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидРасходов",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	Результат.Колонки.Добавить("ЗаПериод",       БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("ЗаМесяц",        БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("НаНачалоМесяца", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	НачалоОтчетногоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоОтчетногоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// По статьям затрат, у которых указаны нормируемые виды расходов, не следует отражать расходы по деятельности,
	// для обложения налогами которой применяются специальные налоговые режимы
	
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",  НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  НачалоМесяца(Период) - 1);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонецМесяца(Период));
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	СчетаРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПолучитьМассивСчетовУчетаРасходов());   // детализируем до субсчетов
	Запрос.УстановитьПараметр("СчетаРасходов",           СчетаРасходов);
	Запрос.УстановитьПараметр("ВидыНормируемыхРасходов", ВидыНормируемыхРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходов
	|ПОМЕСТИТЬ СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&ВидыНормируемыхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Расходы.Счет,
	|	СУММА(Расходы.НаНачалоМесяца) КАК НаНачалоМесяца,
	|	СУММА(Расходы.ЗаПериод) КАК ЗаПериод,
	|	СУММА(Расходы.ЗаМесяц) КАК ЗаМесяц
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредыдущиеМесяцы.Счет КАК Счет,
	|		ПредыдущиеМесяцы.Субконто1 КАК СтатьяЗатрат,
	|		ПредыдущиеМесяцы.СуммаНУОборот КАК НаНачалоМесяца,
	|		ПредыдущиеМесяцы.СуммаНУОборотДт КАК ЗаПериод,
	|		0 КАК ЗаМесяц
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецПредыдущегоМесяца,
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиЗатрат.Ссылка
	|						ИЗ
	|							СтатьиЗатрат),
	|				,
	|				) КАК ПредыдущиеМесяцы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПредыдущиеМесяцыЛишнее.Счет,
	|		ПредыдущиеМесяцыЛишнее.Субконто1,
	|		0,
	|		-ПредыдущиеМесяцыЛишнее.СуммаНУОборотДт,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				ДОБАВИТЬКДАТЕ(&НачалоМесяца, СЕКУНДА, -1),
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации КАК Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиЗатрат.Ссылка
	|						ИЗ
	|							СтатьиЗатрат КАК СтатьиЗатрат),
	|				КорСчет В (&СчетаРасходов),
	|				) КАК ПредыдущиеМесяцыЛишнее
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущийМесяц.Счет,
	|		ТекущийМесяц.Субконто1,
	|		0,
	|		ТекущийМесяц.СуммаНУОборотДт,
	|		ТекущийМесяц.СуммаНУОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиЗатрат.Ссылка
	|						ИЗ
	|							СтатьиЗатрат),
	|				,
	|				) КАК ТекущийМесяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущийМесяцЛишнее.Счет,
	|		ТекущийМесяцЛишнее.Субконто1,
	|		0,
	|		-ТекущийМесяцЛишнее.СуммаНУОборотДт,
	|		-ТекущийМесяцЛишнее.СуммаНУОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации КАК Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиЗатрат.Ссылка
	|						ИЗ
	|							СтатьиЗатрат КАК СтатьиЗатрат),
	|				КорСчет В (&СчетаРасходов),
	|				) КАК ТекущийМесяцЛишнее) КАК Расходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.СтатьяЗатрат,
	|	Расходы.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов,
	|	СУММА(Расходы.НаНачалоМесяца) КАК НаНачалоМесяца,
	|	СУММА(Расходы.ЗаПериод) КАК ЗаПериод,
	|	СУММА(Расходы.ЗаМесяц) КАК ЗаМесяц
	|ИЗ
	|	Расходы КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Расходы.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиЗатрат.ВидРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
Конецфункции

// Определяет ограничение суммы резервов по сомнительным долгам в соответствии с п. 4 ст. 266 НК
// Ограничение определяется как "разрешенная" доля суммы резервов, определенной исходя из сумм сомнительной задолженности и сроков ее возникновения.
//
Функция ОтносительноеОграничениеРезервовПоСомнительнымДолгам(СуммаРезерва, Период, Организация)
	
	Если СуммаРезерва = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НачалоНалоговогоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	База  = ВыручкаОтРеализации(Период, Организация);
	// п. 4, ст. 266 НК РФ
	// С 2017 года при расчете резервов по сомнительным долгам за отчетные периоды ограничение в НУ равно большей из сумм:
	// - 10% выручки текущего отчетного периода
	// - 10% выручки предыдущего года 
	// При расчете за год ограничение по-прежнему 10% выручки отчетного года(405-ФЗ от 30.11.16)
	Если Период >= '2017-01-01' И КонецМесяца(Период) < КонецГода(Период) Тогда
		БазаПрошлогоГода = ВыручкаОтРеализации(НачалоНалоговогоПериода - 1, Организация);
		База = Макс(БазаПрошлогоГода, База);
	КонецЕсли;
	
	Норма = 0.10;
	Лимит = ПредельныйРазмерРасходов(База, Норма);
	Возврат Мин(СуммаРезерва, Лимит) / СуммаРезерва;
		
КонецФункции

Функция ОплатаТрудаДляДоговоровСтрахования(Период, Организация, ДоляСпециальныхРежимов)
	
	// Алгоритм основан на последовательном расчете сумм расходов, которые могут быть учтены
	// в пределах нормы. Для этого рассматриваемый период разбивается на интервалы, равные месяцу. Если в течение месяца
	// действуют несколько договоров, то этот интервал разбивается на более мелкие,
	// в каждом из которых состав договоров не меняется. Для каждого договора используется отдельная норма
	// в соответствии с периодом его действия. Если одновременно действуют несколько договоров, то
	// фиксируется, к каким договорам относится сумма, учтенная в налоговом учете в пределах нормы.
	//
	// Если в некотором интервале сумма расходов меньше нормы, то остаток нормы переносится на последующие
	// интервалы и может увеличивать норму для тех договоров, к периоду действия которых он относится,
	// поскольку норма и сумма расходов по договору определяется нарастающим итогом.
	// Механика зачета нормы прошлых периодов имитирует работу регистра накопления: таблица ОстаткиНормыПрошлыхПериодов
	// используется для получения текущих остатков и обновляется в процессе расчета,
	// таблица РасчетОстатковНормы, аналогично движениям регистра накопления, фиксирует "приход" и "расход" нормы.
	// В конце расчета таблица РасчетОстатковНормы будет свернута и записи с ненулевыми значениями ОстатокНормы будут
	// перенесены в основную таблицу расчета с последующей фиксацией в регистре накопления РасчетБазыНормированияПоДоговорамСтрахования.
	//
	// Если в предыдущих месяцах текущего года был выполнен расчет с записью в регистр сведений
	// РасчетБазыНормированияПоДоговорамСтрахования, то расчет производится со следующего месяца после последнего расчета,
	// а в качестве начальных сумм расчета используются данные регистра.
	//
	// Под "текущим периодом" подразумеваются периоды, для которых производится расчет и данные которых будут записаны
	// в результат расчета. Например, если только что был выполнен переход на версию, в которой реализована запись в регистр
	// РасчетБазыНормированияПоДоговорамСтрахования, и операция закрытия месяца была выполнена в старой версии программы
	// за период Январь-Май текущего года, то при закрытии Июня, расчет нормы будет выполняться за период Январь-Июнь
	// и этот период будет считаться текущим.
	//
	ПараметрыРасчета = НовыйПараметрыРасчетаБазыОплатаТрудаДляДоговоровСтрахования();
	
	ПараметрыРасчета.Контекст.Организация            = Организация;
	ПараметрыРасчета.Контекст.Период                 = Период;
	ПараметрыРасчета.Контекст.ДоляСпециальныхРежимов = ДоляСпециальныхРежимов;
	
	ЗаполнитьПараметрыРасчетаНачальнымиДанными(ПараметрыРасчета);

	Если ПараметрыРасчета.НачалоОтчетногоПериода = Неопределено Тогда
		Возврат ПараметрыРасчета.Результат;
	КонецЕсли;

	// За периоды, расчет по которым уже состоялся, данные расчета содержатся в регистре сведений РасчетБазыНормированияПоДоговорамСтрахования.
	// Если данных в регистре нет, сделаем расчет за эти месяцы заново, поскольку переход на новую версию расчета
	// мог быть выполнен не с начала года.
	СоздатьВременнуюТаблицуОплатаТрудаПоПериодам(ПараметрыРасчета);
	СоздатьВременнуюТаблицуИнтервалыДействияДоговоров(ПараметрыРасчета);
	
	// Норма рассчитывается накопительным итогом, поэтому остаток нормы прошлых периодов может
	// быть учтен в текущем периоде.
	ПараметрыРасчета.ОстаткиНормыПрошлыхПериодов = ОстаткиНормыПрошлыхПериодов(ПараметрыРасчета);
	// В процессе расчета будет накапливаться информация о сумме учтенных расходов, норме по договорам и т. д.
	// Если расчет выполняется не с начала года, то для расчета сумм текущего периода используем
	// последние записи прошлых периодов по каждому из договоров.
	ПараметрыРасчета.РасчетПрошлыхПериодов       = РасчетПрошлыхПериодов(ПараметрыРасчета);
	// Итоговая таблица, данные в которой заполняются в результате выполнения алгоритма, а затем 
	// записываются во вспомогательный регистр сведений РасчетБазыНормированияПоДоговорамСтрахования.
	ПараметрыРасчета.РасчетТекущегоПериода       = РасчетТекущегоПериода(ПараметрыРасчета);
	
	// В результате расчета нужно получить норму накопительным итогом с начала года.
	// Рассчитанную в прошлых периодах норму возьмем из регистра РасчетБазыНормированияПоДоговорамСтрахования.
	УчтеннаяНормаЗаПредыдущиеПериоды = УчтеннаяНормаЗаПредыдущиеПериоды(ПараметрыРасчета);
	
	Для Каждого ВидРасходовНУ Из ВидыРасходовНаСтрахованиеБазаОплатаТруда() Цикл
		
		УчтеннаяНормаЗаТекущийПериод = 0;
		
		ОстаткиНормыПрошлыхПериодов = ПараметрыРасчета.ОстаткиНормыПрошлыхПериодов[ВидРасходовНУ];
		РасчетПрошлыхПериодов       = ПараметрыРасчета.РасчетПрошлыхПериодов[ВидРасходовНУ];
		РасчетТекущегоПериода       = ПараметрыРасчета.РасчетТекущегоПериода[ВидРасходовНУ];
		
		РасчетОстатковНормы = НовыйРасчетОстатковНормы();
		
		// Суммы оплаты труда и суммы расходов в запросе получены в целом за период.
		// Они повторяются в строках, относящихся к одному договору/периоду.
		// Распределим их по строкам таблицы расчета.
		РаспределитьОбщиеСуммыПоИнтервалам(РасчетТекущегоПериода, ВидРасходовНУ);
		
		// ИтогиПоДоговорам содержит вспомогательные данные в разрезе договоров, используемые и изменяемые в процессе расчета.
		// Первоначально заполняется последними рассчитанными данными по каждому договору
		// (в случае если такой расчет выполнялся в предыдущих периодах).
		ИтогиПоДоговорам = Новый Соответствие;
		Для Каждого СтрокаПрошлогоПериода Из РасчетПрошлыхПериодов Цикл
			ИтогПоДоговору = НовыйИтогПоДоговору();
			ЗаполнитьЗначенияСвойств(ИтогПоДоговору, СтрокаПрошлогоПериода);
			ИтогиПоДоговорам.Вставить(СтрокаПрошлогоПериода.РасходыНаСтрахование, ИтогПоДоговору);
		КонецЦикла;
		
		// ДанныеТекущегоИнтервала используется для накопления списка договоров страхования,
		// действующих в рассматриваемом периоде, учтенной в НУ сумме за период,
		// т. к. сумма, учтенная в одном договоре периода влияет на сумму по другим договорам за этот период,
		// неиспользованной норме за период, а также для определениях момента перехода в новый временной интервал.
		// При переходе в новый временной интервал суммы неиспользованной нормы переносятся в таблицу остатков,
		// а данные коллекции очищаются. При переносе неиспользованной нормы в таблицу остатков требуется инфорация
		// о дате начала и окончания предыдущего интервала.
		ДанныеТекущегоИнтервала = НовыйДанныеТекущегоИнтервала();
		// Расчет происходит по периодам действия договоров, а внутри периодов - по договорам страхования, упорядоченным
		// по дате окончания действия договора.
		Для Каждого СтрокаТекущегоПериода Из РасчетТекущегоПериода Цикл
			
			// При переходе в другой интервал состав действующих договоров изменяется.
			Если ДанныеТекущегоИнтервала.ДатаНачалаДействия <> СтрокаТекущегоПериода.ДатаНачалаДействия Тогда
				ПеренестиВОстаткиНеиспользованнуюНорму(РасчетОстатковНормы, ОстаткиНормыПрошлыхПериодов, ДанныеТекущегоИнтервала);
				ДанныеТекущегоИнтервала = НовыйДанныеТекущегоИнтервала();
				ДанныеТекущегоИнтервала.НормаЗаПериод = СтрокаТекущегоПериода.НормаПоДоговору;
				ЗаполнитьЗначенияСвойств(ДанныеТекущегоИнтервала, СтрокаТекущегоПериода, "ДатаНачалаДействия, ДатаОкончанияДействия");
			КонецЕсли;
			
			ИтогПоДоговору = ИтогиПоДоговорам[СтрокаТекущегоПериода.РасходыНаСтрахование];
			
			ЗаполнитьИтогПоДоговору(ИтогПоДоговору, СтрокаТекущегоПериода, ДанныеТекущегоИнтервала.УчтеноВДругихДоговорах);

			УчтеноРанее    = ИтогПоДоговору.УчтеноНарастающийИтог;
			ОсталосьУчесть = Макс(ИтогПоДоговору.СуммаРасходовНарастающийИтог - УчтеноРанее, 0);
			
			УчестьОстаткиНормыПрошлыхПериодов(
				СтрокаТекущегоПериода, РасчетОстатковНормы, ОстаткиНормыПрошлыхПериодов, ИтогиПоДоговорам, ОсталосьУчесть);

			УчестьНормуТекущегоПериода(СтрокаТекущегоПериода, ИтогПоДоговору, ОсталосьУчесть, ДанныеТекущегоИнтервала);
			
			// Расходы, учтенные в норме одного договора на страхование, влияют на расчет других договоров,
			// действовавших в этом периоде
			УчестьВРасчетеДругихДоговоровПериода(ДанныеТекущегоИнтервала, ИтогиПоДоговорам, СтрокаТекущегоПериода);
			
			УчтеннаяНормаЗаТекущийПериод = УчтеннаяНормаЗаТекущийПериод + СтрокаТекущегоПериода.Учтено;
			
		КонецЦикла;

		ПеренестиВОстаткиНеиспользованнуюНорму(РасчетОстатковНормы, ОстаткиНормыПрошлыхПериодов, ДанныеТекущегоИнтервала);

		СохранитьОстаткиНормыВРасчетТекущегоПериода(РасчетТекущегоПериода, РасчетОстатковНормы, ВидРасходовНУ);
		
		// Получаем нарастающий итог нормы, в пределах которой можно учесть расходы.
		УчтеннаяНормаНарастающийИтог =
			УчтеннаяНормаЗаПредыдущиеПериоды[ВидРасходовНУ] + УчтеннаяНормаЗаТекущийПериод;

		РасчетБазыРасходовНаСтрахование = НовыйРасчетБазыРасходовНаСтрахование();
		РасчетБазыРасходовНаСтрахование.База       = УчтеннаяНормаНарастающийИтог;
		РасчетБазыРасходовНаСтрахование.РасчетБазы = РасчетТекущегоПериода;
		
		ПараметрыРасчета.Результат.Вставить(ВидРасходовНУ, РасчетБазыРасходовНаСтрахование);
		
	КонецЦикла;
	
	Возврат ПараметрыРасчета.Результат;
	
КонецФункции

Процедура УчестьВРасчетеДругихДоговоровПериода(ДанныеТекущегоИнтервала, ИтогиПоДоговорам, СтрокаТекущегоПериода)
	
	ДоговорыТекущегоИнтервала = ДанныеТекущегоИнтервала.Договоры;
	
	Для Каждого Договор Из ДоговорыТекущегоИнтервала Цикл
		ИтогПоДоговору = ИтогиПоДоговорам[Договор];
		Если ИтогПоДоговору <> Неопределено Тогда
			ИтогПоДоговору.УчтеноВДругихДоговорах = ИтогПоДоговору.УчтеноВДругихДоговорах + СтрокаТекущегоПериода.УчтеноВТекущемПериоде;
		КонецЕсли;
	КонецЦикла;
	
	ДоговорыТекущегоИнтервала.Добавить(СтрокаТекущегоПериода.РасходыНаСтрахование);

КонецПроцедуры

Процедура СохранитьОстаткиНормыВРасчетТекущегоПериода(РасчетТекущегоПериода, РасчетОстатковНормы, ВидРасходовНУ)
	
	РасчетОстатковНормы.Свернуть(
		"ПериодРасчета, ДатаНачалаДействия, ДатаОкончанияДействия, РасходыНаСтрахование",
		"ОстатокНормы, УчтеноВнеТекущегоПериода");
	
	Для Каждого СтрокаОстатков Из РасчетОстатковНормы Цикл
		
		Если СтрокаОстатков.ОстатокНормы = 0 И СтрокаОстатков.УчтеноВнеТекущегоПериода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ПериодРасчета, ДатаНачалаДействия, ДатаОкончанияДействия, РасходыНаСтрахование");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаОстатков);
		
		СтрокиОсновнойТаблицы = РасчетТекущегоПериода.НайтиСтроки(Отбор);
		
		Если СтрокиОсновнойТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокиОсновнойТаблицы[0], СтрокаОстатков);
		Иначе
			НоваяСтрока = РасчетТекущегоПериода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			НоваяСтрока.Период        = НачалоМесяца(СтрокаОстатков.ПериодРасчета);
			НоваяСтрока.ВидРасходовНУ = ВидРасходовНУ;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УчестьНормуТекущегоПериода(СтрокаТекущегоПериода, ИтогПоДоговору, ОсталосьУчесть, ДанныеТекущегоИнтервала)

	Если ОсталосьУчесть > 0 Тогда

		МожноУчесть = Макс(0, СтрокаТекущегоПериода.НормаПоДоговоруНарастающийИтог - СтрокаТекущегоПериода.УчтеноВДругихДоговорах
			- СтрокаТекущегоПериода.УчтеноНарастающийИтог);
		Учтено = Мин(МожноУчесть, ОсталосьУчесть);
		ДанныеТекущегоИнтервала.УчтеноВДругихДоговорах = ДанныеТекущегоИнтервала.УчтеноВДругихДоговорах + Учтено;
		
		СтрокаТекущегоПериода.УчтеноВТекущемПериоде = Учтено;
		СтрокаТекущегоПериода.Учтено                = СтрокаТекущегоПериода.Учтено + Учтено;
		СтрокаТекущегоПериода.УчтеноНарастающийИтог = СтрокаТекущегоПериода.УчтеноНарастающийИтог + Учтено;
		ИтогПоДоговору.УчтеноНарастающийИтог       = СтрокаТекущегоПериода.УчтеноНарастающийИтог;
		
		ДанныеТекущегоИнтервала.НормаЗаПериод = ДанныеТекущегоИнтервала.НормаЗаПериод - Учтено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИтогПоДоговору(ИтогПоДоговору, СтрокаТекущегоПериода, УчтеноВДругихДоговорах)
	
	СтрокаТекущегоПериода.СуммаРасходовНарастающийИтог 
		= ИтогПоДоговору.СуммаРасходовНарастающийИтог + СтрокаТекущегоПериода.СуммаРасходов;
	ИтогПоДоговору.СуммаРасходовНарастающийИтог = СтрокаТекущегоПериода.СуммаРасходовНарастающийИтог;

	СтрокаТекущегоПериода.НормаПоДоговоруНарастающийИтог =
		ИтогПоДоговору.НормаПоДоговоруНарастающийИтог + СтрокаТекущегоПериода.НормаПоДоговору;
	ИтогПоДоговору.НормаПоДоговоруНарастающийИтог = СтрокаТекущегоПериода.НормаПоДоговоруНарастающийИтог;

	СтрокаТекущегоПериода.УчтеноВДругихДоговорах = УчтеноВДругихДоговорах + ИтогПоДоговору.УчтеноВДругихДоговорах;
	ИтогПоДоговору.УчтеноВДругихДоговорах = СтрокаТекущегоПериода.УчтеноВДругихДоговорах;

	СтрокаТекущегоПериода.УчтеноНарастающийИтог = ИтогПоДоговору.УчтеноНарастающийИтог;
	
КонецПроцедуры

Процедура УчестьОстаткиНормыПрошлыхПериодов(СтрокаТекущегоПериода, РасчетОстатков, ОстаткиНормыПрошлыхПериодов, ИтогиПоДоговорам, ОсталосьУчесть)
	
	// В таблице ОстаткиНормыПрошлыхПериодов содержится актуальная информация об остатках нормы за рассчитанные ранее периоды
	// (как в результате закрытия месяца прошлых периодов, так и в результате текущего расчета)
	// в разрезе договоров и интервалов действия договоров. Если в одном интервале действуют несколько договоров, то запись для каждого договора
	// дублируется и отличается только значением в колонке РасходыНаСтрахование.
	// Таблица РасчетОстатков содержит данные по уменьшению и увеличению остатков нормы, накопленные в текущем расчете.
	// После завершения расчета будет свернута и записана в результат расчета за текущий период.

	Если ОсталосьУчесть <= 0 Тогда
		Возврат;
	КонецЕсли;
		
	СписаноИзОстатковПрошлыхПериодов = 0;
	РассчитанныеДанные = ИтогиПоДоговорам[СтрокаТекущегоПериода.РасходыНаСтрахование];

	ОтборСтрок = Новый Структура("РасходыНаСтрахование", СтрокаТекущегоПериода.РасходыНаСтрахование);
	ОстаткиПоДоговору = ОстаткиНормыПрошлыхПериодов.Скопировать(ОтборСтрок);
	// Сначала учитываем остатки за более ранние интервалы.
	ОстаткиПоДоговору.Сортировать("ДатаНачалаДействия");

	Для Каждого СтрокаОстатковПоДоговору Из ОстаткиПоДоговору Цикл
		
		СуммаНормыОстаток = СтрокаОстатковПоДоговору.СуммаНормыОстаток;
		СуммаКСписанию = Мин(СуммаНормыОстаток, ОсталосьУчесть);
		
		Если СуммаКСписанию <= 0 Тогда
			Прервать;
		КонецЕсли;
			
		СписаноИзОстатковПрошлыхПериодов = СписаноИзОстатковПрошлыхПериодов + СуммаКСписанию;
		
		// В случае если остаток нормы за период использован для зачета расходов по одному из договоров, он должен
		// быть исключен из остатков для остальных договоров, которые действовали в этом периоде.
		ОтборОстатковБазЗаПериодДействия = Новый Структура("ДатаНачалаДействия, ВидРасходовНУ");
		ЗаполнитьЗначенияСвойств(ОтборОстатковБазЗаПериодДействия, СтрокаОстатковПоДоговору);
		
		СтрокиОстатковЗаПериодДействия = ОстаткиНормыПрошлыхПериодов.НайтиСтроки(ОтборОстатковБазЗаПериодДействия);
		
		Для Каждого СтрокаОстатковЗаПериодДействия Из СтрокиОстатковЗаПериодДействия Цикл
				
			// Изменяем сумму остатка нормы для каждого договора, действовавшего в этом периоде.
			СтрокаОстатковЗаПериодДействия.СуммаНормыОстаток = СтрокаОстатковЗаПериодДействия.СуммаНормыОстаток - СуммаКСписанию;
				
			// Добавляем строку уменьшения остатка, которая запишется в регистр РасчетБазыНормированияПоДоговорамСтрахования.
			СтрокаРасчетаОстатков = РасчетОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасчетаОстатков, СтрокаОстатковЗаПериодДействия);
			СтрокаРасчетаОстатков.ОстатокНормы = - СуммаКСписанию;
			СтрокаРасчетаОстатков.ПериодРасчета = НачалоМесяца(СтрокаТекущегоПериода.ДатаНачалаДействия);
			
			// Отразим, что норма относится к расходам текущего договора.
			Если СтрокаРасчетаОстатков.РасходыНаСтрахование = СтрокаТекущегоПериода.РасходыНаСтрахование Тогда
				СтрокаРасчетаОстатков.УчтеноВнеТекущегоПериода = СуммаКСписанию;
			// Для остальных договоров отметим, что эта сумма учтена в другом договоре.
			ИначеЕсли ИтогиПоДоговорам[СтрокаРасчетаОстатков.РасходыНаСтрахование] <> Неопределено Тогда
				ДанныеДоговораУчаствующегоВОстатках = ИтогиПоДоговорам[СтрокаРасчетаОстатков.РасходыНаСтрахование];
				ДанныеДоговораУчаствующегоВОстатках.УчтеноВДругихДоговорах =
					ДанныеДоговораУчаствующегоВОстатках.УчтеноВДругихДоговорах + СуммаКСписанию;
			КонецЕсли;
				
			// При необходимости удаляем строку с нулевым остатком из расчетных данных, чтобы впоследствии повторно не выполнять
			// обход этих строк в других периодах.
			Если СтрокаОстатковЗаПериодДействия.СуммаНормыОстаток = 0 Тогда
				ОстаткиНормыПрошлыхПериодов.Удалить(СтрокаОстатковЗаПериодДействия);
			КонецЕсли;

		КонецЦикла;

		ОсталосьУчесть = ОсталосьУчесть - СуммаКСписанию;

	КонецЦикла;

	СтрокаТекущегоПериода.Учтено = СтрокаТекущегоПериода.Учтено + СписаноИзОстатковПрошлыхПериодов;
	СтрокаТекущегоПериода.УчтеноНарастающийИтог = СтрокаТекущегоПериода.УчтеноНарастающийИтог + СписаноИзОстатковПрошлыхПериодов;
	РассчитанныеДанные.УчтеноНарастающийИтог = СтрокаТекущегоПериода.УчтеноНарастающийИтог;

КонецПроцедуры

Процедура РаспределитьОбщиеСуммыПоИнтервалам(РасчетТекущегоПериода, ВидРасходовНУ)
	
	Колонки = "Период, ДатаНачалаДействия, НормаПоДоговору, СуммаБазы, КоличествоДней";
	ТаблицаПериодов = РасчетТекущегоПериода.Скопировать( , Колонки);
	ТаблицаПериодов.Свернуть(Колонки);
	ТаблицаПериодов.Индексы.Добавить("Период");

	ПериодыРасчета = ПериодыРасчета(ТаблицаПериодов);
	
	// Распределим сумму оплаты труда в каждом месяце между интервалами действия пропорционально количеству дней в интервале.
	РаспределитьБазу(РасчетТекущегоПериода, ТаблицаПериодов, ПериодыРасчета);
	
	// Распределим норму расходов в каждом месяце между интервалами действия пропорционально количеству дней в интервале.
	// Норма распределяется независимо от базы, чтобы при суммировании нормы по всем интервалам за месяц избежать
	// погрешности округления в формуле [Норма] = [База] * [Процент нормирования].
	РаспределитьНорму(РасчетТекущегоПериода, ВидРасходовНУ, ТаблицаПериодов, ПериодыРасчета);
	
	// Распределим сумму расходов в каждом месяце между интервалами действия пропорционально количеству дней в интервале.
	РаспределитьСуммуРасходов(РасчетТекущегоПериода, ПериодыРасчета);
	
КонецПроцедуры

Функция ПериодыРасчета(ТаблицаПериодов)
	
	ПериодыРасчета = ТаблицаПериодов.Скопировать( , "Период");
	ПериодыРасчета.Свернуть("Период");
	ПериодыРасчета.Колонки.Добавить("КоличествоДней",        ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ПериодыРасчета.Колонки.Добавить("КоличествоДнейВМесяце", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	
	Для Каждого ПериодРасчета Из ПериодыРасчета Цикл
		
		Отбор = Новый Структура("Период", ПериодРасчета.Период);
		ТаблицаКоличествоДней = ТаблицаПериодов.Скопировать(Отбор);
		
		КоличествоДней = ТаблицаКоличествоДней.Итог("КоличествоДней");
		КоличествоДнейВМесяце = День(КонецМесяца(ПериодРасчета.Период));
		
		ПериодРасчета.КоличествоДней = КоличествоДней;
		ПериодРасчета.КоличествоДнейВМесяце = КоличествоДнейВМесяце;
		
	КонецЦикла;
	
	Возврат ПериодыРасчета;

КонецФункции

Процедура РаспределитьБазу(РасчетТекущегоПериода, ТаблицаПериодов, ПериодыРасчета)

	Для Каждого ПериодРасчета Из ПериодыРасчета Цикл
		
		Отбор = Новый Структура("Период", ПериодРасчета.Период);
		// Если в некоторых интервалах месяца договоры страхования не действовали, такие интервалы отсутствуют в таблице,
		// но база оплаты труда должна распределиться также и на эти периоды.
		КоэффициентУменьшения = ПериодРасчета.КоличествоДней / ПериодРасчета.КоличествоДнейВМесяце;
		РаспределитьПоСтрокамТаблицыЗначений(ТаблицаПериодов, "СуммаБазы", "КоличествоДней", Отбор, КоэффициентУменьшения);

	КонецЦикла;
	
	// Заполним таблицу показателей распределенными значениями.
	Отбор = Новый Структура("ДатаНачалаДействия");
	ЗаполнитьРаспределенноеЗначениеВИсходнойТаблице(РасчетТекущегоПериода, ТаблицаПериодов, "СуммаБазы", Отбор);
	
КонецПроцедуры

Процедура РаспределитьНорму(РасчетТекущегоПериода, ВидРасходовНУ, ТаблицаПериодов, ПериодыРасчета)

	Для Каждого ПериодРасчета Из ПериодыРасчета Цикл
		
		Отбор = Новый Структура("Период", ПериодРасчета.Период);
		// Если в некоторых интервалах месяца договоры страхования не действовали, такие интервалы отсутствуют в таблице,
		// но база опаты труда должна распределиться также и на эти периоды.
		КоэффициентУменьшения =
			НормаРасходов(ВидРасходовНУ) * ПериодРасчета.КоличествоДней / ПериодРасчета.КоличествоДнейВМесяце;
		РаспределитьПоСтрокамТаблицыЗначений(ТаблицаПериодов, "НормаПоДоговору", "КоличествоДней", Отбор, КоэффициентУменьшения);

	КонецЦикла;
	
	// Заполним таблицу показателей распределенными значениями.
	Отбор = Новый Структура("ДатаНачалаДействия");
	ЗаполнитьРаспределенноеЗначениеВИсходнойТаблице(РасчетТекущегоПериода, ТаблицаПериодов, "НормаПоДоговору", Отбор);
	
КонецПроцедуры

Процедура РаспределитьСуммуРасходов(РасчетТекущегоПериода, ПериодыРасчета)

	ТаблицаДоговоров = РасчетТекущегоПериода.Скопировать( , "Период, ДатаНачалаДействия, РасходыНаСтрахование, СуммаРасходов, КоличествоДней");
	ТаблицаДоговоров.Индексы.Добавить("Период, РасходыНаСтрахование");
	Договоры = ТаблицаДоговоров.ВыгрузитьКолонку("РасходыНаСтрахование");
	Договоры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Договоры);

	Для Каждого ПериодРасчета Из ПериодыРасчета Цикл

		Для Каждого Договор Из Договоры Цикл
			Отбор = Новый Структура("Период, РасходыНаСтрахование", ПериодРасчета.Период, Договор);
			РаспределитьПоСтрокамТаблицыЗначений(ТаблицаДоговоров, "СуммаРасходов", "КоличествоДней", Отбор);
		КонецЦикла;

	КонецЦикла;

	Отбор = Новый Структура("ДатаНачалаДействия, РасходыНаСтрахование");
	ЗаполнитьРаспределенноеЗначениеВИсходнойТаблице(РасчетТекущегоПериода, ТаблицаДоговоров, "СуммаРасходов", Отбор);
	
КонецПроцедуры

Функция ОстаткиНормыПрошлыхПериодов(ПараметрыРасчета)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", ПараметрыРасчета.НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", ПараметрыРасчета.КонецПредыдущегоМесяца);
	Запрос.УстановитьПараметр("Организация",            ПараметрыРасчета.Контекст.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование КАК РасходыНаСтрахование,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ КАК ВидРасходовНУ,
	|	СУММА(РасчетБазыНормированияПоДоговорамСтрахования.ОстатокНормы) КАК СуммаНормыОстаток
	|ИЗ
	|	РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|ГДЕ
	|	РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоМесяца
	|	И РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия <= &КонецПредыдущегоМесяца
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ДатаОкончанияДействия,
	|	РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетБазыНормированияПоДоговорамСтрахования.ОстатокНормы) > 0";
	
	ОстаткиНормыПрошлыхПериодовОбщая = Запрос.Выполнить().Выгрузить();
	
	Индексы = Новый Массив;
	Индексы.Добавить("ДатаНачалаДействия");
	
	Возврат РазделенныеТаблицыПоВидамРасходов(ОстаткиНормыПрошлыхПериодовОбщая, "", Индексы);
	
КонецФункции

Функция РасчетТекущегоПериода(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПоДоговорамСтрахования.ВидРасходовНУ КАК ВидРасходовНУ,
	|	НАЧАЛОПЕРИОДА(ИнтервалыДействияДоговоров.ДатаНачала, МЕСЯЦ) КАК ПериодРасчета,
	|	РасходыПоДоговорамСтрахования.Период КАК Период,
	|	ИнтервалыДействияДоговоров.ДатаНачала КАК ДатаНачалаДействия,
	|	ИнтервалыДействияДоговоров.ДатаОкончания КАК ДатаОкончанияДействия,
	|	РасходыПоДоговорамСтрахования.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	РасходыПоДоговорамСтрахования.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ЕСТЬNULL(ОплатаТрудаПоПериодам.СуммаОплатыТруда, 0) КАК НормаПоДоговору,
	|	ЕСТЬNULL(ОплатаТрудаПоПериодам.СуммаОплатыТруда, 0) КАК СуммаБазы,
	|	ЕСТЬNULL(ОплатаТрудаПоПериодам.СуммаОплатыТруда, 0) КАК СуммаБазыЗаМесяц,
	|	РасходыПоДоговорамСтрахования.СуммаРасходов КАК СуммаРасходов,
	|	РасходыПоДоговорамСтрахования.ДоговорСтрахования КАК РасходыНаСтрахование,
	|	РАЗНОСТЬДАТ(ИнтервалыДействияДоговоров.ДатаНачала, ИнтервалыДействияДоговоров.ДатаОкончания, ДЕНЬ) + 1 КАК КоличествоДней,
	|	0 КАК Учтено,
	|	0 КАК УчтеноНарастающийИтог,
	|	0 КАК УчтеноВТекущемПериоде,
	|	0 КАК СуммаРасходовНарастающийИтог,
	|	0 КАК УчтеноВДругихДоговорах,
	|	0 КАК НормаПоДоговоруНарастающийИтог,
	|	0 КАК ОстатокНормы,
	|	0 КАК УчтеноВнеТекущегоПериода
	|ИЗ
	|	РасходыПоДоговорамСтрахования КАК РасходыПоДоговорамСтрахования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервалыДействияДоговоров КАК ИнтервалыДействияДоговоров
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОплатаТрудаПоПериодам КАК ОплатаТрудаПоПериодам
	|			ПО (ОплатаТрудаПоПериодам.Период = ИнтервалыДействияДоговоров.Период)
	|		ПО РасходыПоДоговорамСтрахования.Период = ИнтервалыДействияДоговоров.Период
	|			И РасходыПоДоговорамСтрахования.ДатаНачалаСписания <= ИнтервалыДействияДоговоров.ДатаНачала
	|			И (ИнтервалыДействияДоговоров.ДатаОкончания <= РасходыПоДоговорамСтрахования.ДатаОкончанияСписания)
	|			И РасходыПоДоговорамСтрахования.ВидРасходовНУ = ИнтервалыДействияДоговоров.ВидРасходовНУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныйРассчитанныйПериод КАК МаксимальныйРассчитанныйПериод
	|		ПО (ИнтервалыДействияДоговоров.ДатаНачала <= МаксимальныйРассчитанныйПериод.ДатаНачалаДействия)
	|			И РасходыПоДоговорамСтрахования.ДоговорСтрахования = МаксимальныйРассчитанныйПериод.РасходыНаСтрахование
	|			И (ИнтервалыДействияДоговоров.ВидРасходовНУ = МаксимальныйРассчитанныйПериод.ВидРасходовНУ)
	|ГДЕ
	|	МаксимальныйРассчитанныйПериод.РасходыНаСтрахование ЕСТЬ NULL";
	
	РасчетТекущегоПериодаОбщий = Запрос.Выполнить().Выгрузить();
	ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	
	РасчетТекущегоПериодаОбщий.Индексы.Добавить("ВидРасходовНУ");
	
	// Расчет выполняется последовательно по интервалам действия договоров. Внутри интервалов договоры упорядочены таким образом,
	// что сначала учитываются расходы договоров, у которых самый близкий срок окончания списания, затем договоры с более
	// поздним началом списания, чтобы увеличить вероятность того, что расходы договоров будут учтены в НУ. Если сроки действия
	// договоров совпадают, они упорядочиваются по ссылке, чтобы расшифровка расчета в отчете выдывала предсказуемый результат.
	Сортировка = "ПериодРасчета, ДатаНачалаДействия, ДатаОкончанияСписания, ДатаНачалаСписания Убыв, РасходыНаСтрахование";
	
	Индексы = Новый Массив;
	Индексы.Добавить("ПериодРасчета, ДатаНачалаДействия, ДатаОкончанияДействия, РасходыНаСтрахование");
	Индексы.Добавить("ДатаНачалаДействия, РасходыНаСтрахование");
	Индексы.Добавить("ДатаНачалаДействия");
	
	Возврат РазделенныеТаблицыПоВидамРасходов(РасчетТекущегоПериодаОбщий, Сортировка, Индексы);
	
КонецФункции

Функция РасчетПрошлыхПериодов(ПараметрыРасчета)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", ПараметрыРасчета.НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",           ПараметрыРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", ПараметрыРасчета.КонецПредыдущегоМесяца);
	Запрос.УстановитьПараметр("Организация",            ПараметрыРасчета.Контекст.Организация);
	
	// В регистре РасчетБазыНормированияПоДоговорамСтрахования в качестве значения УчтеноВДругихДоговорах хранится то значение,
	// которое было актуально на момент выполнения алгоритма расчета для текущего договора страхования. Сделано это для иллюстрации
	// хода выполнения расчета в таблице "Детальный расчет по договорам страхования" отчета "База нормируемых расходов".
	// На момент окончания расчета это значением может измениться, дополнительно в регистре оно не фиксируется.
	// Поэтому значение УчтеноВДругихДоговорах вычисляется отдельным запросом.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование КАК РасходыНаСтрахование,
	|	МАКСИМУМ(РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия) КАК ДатаНачалаДействия,
	|	РасходыПоДоговорамСтрахования.ВидРасходовНУ КАК ВидРасходовНУ
	|ПОМЕСТИТЬ МаксимальныйРассчитанныйПериод
	|ИЗ
	|	РасходыПоДоговорамСтрахования КАК РасходыПоДоговорамСтрахования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|		ПО РасходыПоДоговорамСтрахования.ДоговорСтрахования = РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование
	|			И РасходыПоДоговорамСтрахования.ВидРасходовНУ = РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.ОстатокНормы >= 0)
	|ГДЕ
	|	РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета >= &НачалоОтчетногоПериода
	|	И РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета < &НачалоМесяца
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоМесяца
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование,
	|	РасходыПоДоговорамСтрахования.ВидРасходовНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ,
	|	РасходыНаСтрахование,
	|	ДатаНачалаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтервалыДействияДоговоров.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ИнтервалыДействияДоговоров.ДатаНачала КАК ДатаНачала,
	|	ИнтервалыДействияДоговоров.ДатаОкончания КАК ДатаОкончания,
	|	РасходыПоДоговорамСтрахования.ДоговорСтрахования КАК ДоговорСтрахования
	|ПОМЕСТИТЬ ВТ_ИнтервалыПрошлыхПериодов
	|ИЗ
	|	ИнтервалыДействияДоговоров КАК ИнтервалыДействияДоговоров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыПоДоговорамСтрахования КАК РасходыПоДоговорамСтрахования
	|		ПО (РасходыПоДоговорамСтрахования.ВидРасходовНУ = ИнтервалыДействияДоговоров.ВидРасходовНУ)
	|			И (РасходыПоДоговорамСтрахования.ДатаНачалаСписания <= ИнтервалыДействияДоговоров.ДатаНачала)
	|			И ИнтервалыДействияДоговоров.ДатаОкончания <= РасходыПоДоговорамСтрахования.ДатаОкончанияСписания
	|ГДЕ
	|	ИнтервалыДействияДоговоров.ДатаОкончания < &НачалоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтервалыПрошлыхПериодов.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ИнтервалыПрошлыхПериодов.ДоговорСтрахования КАК РасходыНаСтрахование,
	|	СУММА(ВЫБОР
	|			КОГДА ИнтервалыПрошлыхПериодов.ДоговорСтрахования = РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование
	|				ТОГДА 0
	|			ИНАЧЕ РасчетБазыНормированияПоДоговорамСтрахования.УчтеноВТекущемПериоде + РасчетБазыНормированияПоДоговорамСтрахования.УчтеноВнеТекущегоПериода
	|		КОНЕЦ) КАК УчтеноВДругихДоговорах
	|ПОМЕСТИТЬ ВТ_ТаблицаУчтеноВДругихДоговорах
	|ИЗ
	|	РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалыПрошлыхПериодов КАК ИнтервалыПрошлыхПериодов
	|		ПО (ИнтервалыПрошлыхПериодов.ДатаНачала = РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия)
	|			И (ИнтервалыПрошлыхПериодов.ДатаОкончания = РасчетБазыНормированияПоДоговорамСтрахования.ДатаОкончанияДействия)
	|			И (ИнтервалыПрошлыхПериодов.ВидРасходовНУ = РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ)
	|ГДЕ
	|	РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоМесяца
	|	И (РасчетБазыНормированияПоДоговорамСтрахования.УчтеноВТекущемПериоде > 0
	|			ИЛИ РасчетБазыНормированияПоДоговорамСтрахования.УчтеноВнеТекущегоПериода > 0)
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация
	|	И РасчетБазыНормированияПоДоговорамСтрахования.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнтервалыПрошлыхПериодов.ВидРасходовНУ,
	|	ИнтервалыПрошлыхПериодов.ДоговорСтрахования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ,
	|	РасходыНаСтрахование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПоДоговорамСтрахования.ДоговорСтрахования КАК РасходыНаСтрахование,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.СуммаБазы, 0) КАК СуммаБазы,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.УчтеноВТекущемПериоде, 0) КАК УчтеноВТекущемПериоде,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.СуммаРасходов, 0) КАК СуммаРасходов,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.НормаПоДоговору, 0) КАК НормаПоДоговору,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.НормаПоДоговоруНарастающийИтог, 0) КАК НормаПоДоговоруНарастающийИтог,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.СуммаРасходовНарастающийИтог, 0) КАК СуммаРасходовНарастающийИтог,
	|	ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.УчтеноНарастающийИтог, 0) КАК УчтеноНарастающийИтог,
	|	ЕСТЬNULL(ТаблицаУчтеноВДругихДоговорах.УчтеноВДругихДоговорах, 0) КАК УчтеноВДругихДоговорах,
	|	РасходыПоДоговорамСтрахования.ВидРасходовНУ КАК ВидРасходовНУ
	|ИЗ
	|	РасходыПоДоговорамСтрахования КАК РасходыПоДоговорамСтрахования
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныйРассчитанныйПериод КАК МаксимальныйРассчитанныйПериод
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|			ПО МаксимальныйРассчитанныйПериод.РасходыНаСтрахование = РасчетБазыНормированияПоДоговорамСтрахования.РасходыНаСтрахование
	|				И (РасчетБазыНормированияПоДоговорамСтрахования.ДатаНачалаДействия = МаксимальныйРассчитанныйПериод.ДатаНачалаДействия)
	|				И (РасчетБазыНормированияПоДоговорамСтрахования.ОстатокНормы >= 0)
	|				И (РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоМесяца)
	|				И (РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация)
	|				И (РасчетБазыНормированияПоДоговорамСтрахования.Активность)
	|		ПО РасходыПоДоговорамСтрахования.ДоговорСтрахования = МаксимальныйРассчитанныйПериод.РасходыНаСтрахование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаУчтеноВДругихДоговорах КАК ТаблицаУчтеноВДругихДоговорах
	|		ПО РасходыПоДоговорамСтрахования.ДоговорСтрахования = ТаблицаУчтеноВДругихДоговорах.РасходыНаСтрахование
	|			И (ТаблицаУчтеноВДругихДоговорах.ВидРасходовНУ = РасходыПоДоговорамСтрахования.ВидРасходовНУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИнтервалыПрошлыхПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаУчтеноВДругихДоговорах";
	
	РасчетПрошлыхПериодовОбщий = Запрос.Выполнить().Выгрузить();
	
	Возврат РазделенныеТаблицыПоВидамРасходов(РасчетПрошлыхПериодовОбщий);
	
КонецФункции

// Разделяет таблицу значений по виду расходов и записывает в соответствие.
// 
// Параметры:
//  РазделяемаяТаблица - ТаблицаЗначений
//  Сортировка - Строка - Список имен колонок, по которым производится сортировка таблицы
//  Индексы - Неопределено
//            Массив из Строка - Список индексов, которые должены быть созданы у таблицы
// 
// Возвращаемое значение:
//   Соответствие Из ТаблицаЗначений
//  
Функция РазделенныеТаблицыПоВидамРасходов(РазделяемаяТаблица, Сортировка = "", Индексы = Неопределено)
	
	РазделенныеТаблицыПоВидамРасходов = Новый Соответствие();
	
	Для Каждого ВидРасходовНУ Из ВидыРасходовНаСтрахованиеБазаОплатаТруда() Цикл
		
		Отбор = Новый Структура("ВидРасходовНУ", ВидРасходовНУ);
		ЧастьТаблицы = РазделяемаяТаблица.Скопировать(Отбор);
		
		Если ЗначениеЗаполнено(Сортировка) Тогда
			ЧастьТаблицы.Сортировать(Сортировка, Новый СравнениеЗначений);
		КонецЕсли;
		
		Если Индексы <> Неопределено Тогда
			Для Каждого СтрокаИндекса Из Индексы Цикл
				ЧастьТаблицы.Индексы.Добавить(СтрокаИндекса);
			КонецЦикла;
		КонецЕсли;
		
		РазделенныеТаблицыПоВидамРасходов.Вставить(ВидРасходовНУ, ЧастьТаблицы);
	КонецЦикла;
	
	Возврат РазделенныеТаблицыПоВидамРасходов;
	
КонецФункции

Процедура СоздатьВременнуюТаблицуИнтервалыДействияДоговоров(ПараметрыРасчета)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",                          ПараметрыРасчета.Контекст.Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",               ПараметрыРасчета.НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",                         ПараметрыРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",                ПараметрыРасчета.КонецОтчетногоПериода);
	Запрос.УстановитьПараметр("ВидыНормируемыхРасходовНаСтрахование", ВидыРасходовНаСтрахованиеБазаОплатаТруда());
	Запрос.УстановитьПараметр("СчетаРасходов", БухгалтерскийУчет.СформироватьМассивСубсчетов(ПолучитьМассивСчетовУчетаРасходов()));
	
	// В запросе предусмотрено, что расходы на страхование могут быть отражены как автоматически рег. операцией
	// "Списание расходов будущих периодов", так и вручную, проводкой в корреспонденции со счетом расчетов с контрагентами.
	// Для этого данные получаются с помощью объединения запросов (временная таблица ВТ_РасходыПоДоговорам): в первом случае отбор данных осуществляется
	// по виду субконто "Расходы будущих периодов", во втором - "Договоры".
	// Если на счете 76.01.9 наряду с субконто "Расходы будущих периодов" будет добавлено еще и субконто "Договоры", то в результат запроса
	// сумма расходов на страхование может попасть дважды. Чтобы этого не произошло, в втором запросе объединения добавлен отбор на кор. счет.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_НормируемыеСтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&ВидыНормируемыхРасходовНаСтрахование)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыНаСтрахование.Период КАК Период,
	|	РасходыНаСтрахование.Субконто1 КАК СтатьяЗатрат,
	|	РасходыНаСтрахование.КорСубконто1 КАК ДоговорСтрахования,
	|	РасходыНаСтрахование.СуммаНУОборотДт КАК СуммаРасходов
	|ПОМЕСТИТЬ ВТ_РасходыПоДоговорам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоОтчетногоПериода,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			Счет В (&СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_НормируемыеСтатьиЗатрат.СтатьяЗатрат
	|					ИЗ
	|						ВТ_НормируемыеСтатьиЗатрат),
	|			НЕ КорСчет В (&СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)) КАК РасходыНаСтрахование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходыНаСтрахование.Период,
	|	РасходыНаСтрахование.Субконто1,
	|	РасходыНаСтрахование.КорСубконто1,
	|	РасходыНаСтрахование.СуммаНУОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоОтчетногоПериода,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			Счет В (&СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_НормируемыеСтатьиЗатрат.СтатьяЗатрат
	|					ИЗ
	|						ВТ_НормируемыеСтатьиЗатрат),
	|			НЕ КорСчет В (&СчетаРасходов)
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК РасходыНаСтрахование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	ДоговорСтрахования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыНаСтрахование.Период КАК Период,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	РасходыНаСтрахование.ДоговорСтрахования КАК ДоговорСтрахования,
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.ДатаНачалаСписания ЕСТЬ НЕ NULL 
	|			ТОГДА РасходыБудущихПериодов.ДатаНачалаСписания
	|		КОГДА ДоговорыКонтрагентов.Дата ЕСТЬ NULL
	|				ИЛИ ДоговорыКонтрагентов.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоОтчетногоПериода
	|		ИНАЧЕ ДоговорыКонтрагентов.Дата
	|	КОНЕЦ КАК ДатаНачалаСписания,
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.ДатаОкончанияСписания ЕСТЬ НЕ NULL 
	|			ТОГДА РасходыБудущихПериодов.ДатаОкончанияСписания
	|		КОГДА ДоговорыКонтрагентов.СрокДействия ЕСТЬ NULL
	|				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецОтчетногоПериода, ДЕНЬ)
	|		ИНАЧЕ ДоговорыКонтрагентов.СрокДействия
	|	КОНЕЦ КАК ДатаОкончанияСписания,
	|	СУММА(РасходыНаСтрахование.СуммаРасходов) КАК СуммаРасходов
	|ПОМЕСТИТЬ РасходыПоДоговорамСтрахования
	|ИЗ
	|	ВТ_РасходыПоДоговорам КАК РасходыНаСтрахование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО РасходыНаСтрахование.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|		ПО РасходыНаСтрахование.ДоговорСтрахования = РасходыБудущихПериодов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО РасходыНаСтрахование.ДоговорСтрахования = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РасходыБудущихПериодов.ДатаНачалаСписания ЕСТЬ НЕ NULL 
	|				ТОГДА РасходыБудущихПериодов.ДатаНачалаСписания
	|			КОГДА ДоговорыКонтрагентов.Дата ЕСТЬ NULL
	|					ИЛИ ДоговорыКонтрагентов.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &НачалоОтчетногоПериода
	|			ИНАЧЕ ДоговорыКонтрагентов.Дата
	|		КОНЕЦ < КОНЕЦПЕРИОДА(РасходыНаСтрахование.Период, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА РасходыБудущихПериодов.ДатаОкончанияСписания ЕСТЬ НЕ NULL 
	|				ТОГДА РасходыБудущихПериодов.ДатаОкончанияСписания
	|			КОГДА ДоговорыКонтрагентов.СрокДействия ЕСТЬ NULL
	|					ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(&КонецОтчетногоПериода, ДЕНЬ)
	|			ИНАЧЕ ДоговорыКонтрагентов.СрокДействия
	|		КОНЕЦ >= РасходыНаСтрахование.Период
	|	И (НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ РасходыБудущихПериодов.Ссылка ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.ДатаОкончанияСписания ЕСТЬ НЕ NULL 
	|			ТОГДА РасходыБудущихПериодов.ДатаОкончанияСписания
	|		КОГДА ДоговорыКонтрагентов.СрокДействия ЕСТЬ NULL
	|				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецОтчетногоПериода, ДЕНЬ)
	|		ИНАЧЕ ДоговорыКонтрагентов.СрокДействия
	|	КОНЕЦ,
	|	РасходыНаСтрахование.ДоговорСтрахования,
	|	СтатьиЗатрат.ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.ДатаНачалаСписания ЕСТЬ НЕ NULL 
	|			ТОГДА РасходыБудущихПериодов.ДатаНачалаСписания
	|		КОГДА ДоговорыКонтрагентов.Дата ЕСТЬ NULL
	|				ИЛИ ДоговорыКонтрагентов.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоОтчетногоПериода
	|		ИНАЧЕ ДоговорыКонтрагентов.Дата
	|	КОНЕЦ,
	|	РасходыНаСтрахование.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ,
	|	ДоговорСтрахования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПоДоговорамСтрахования.ВидРасходовНУ КАК ВидРасходовНУ,
	|	РасходыПоДоговорамСтрахования.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасходыПоДоговорамСтрахования.Период > РасходыПоДоговорамСтрахования.ДатаНачалаСписания
	|			ТОГДА РасходыПоДоговорамСтрахования.Период
	|		ИНАЧЕ РасходыПоДоговорамСтрахования.ДатаНачалаСписания
	|	КОНЕЦ КАК ДатаНачалаЗаПериод,
	|	ВЫБОР
	|		КОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(РасходыПоДоговорамСтрахования.Период, МЕСЯЦ), СЕКУНДА, 1) > РасходыПоДоговорамСтрахования.ДатаОкончанияСписания
	|			ТОГДА ДОБАВИТЬКДАТЕ(РасходыПоДоговорамСтрахования.ДатаОкончанияСписания, ДЕНЬ, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(РасходыПоДоговорамСтрахования.Период, МЕСЯЦ), СЕКУНДА, 1)
	|	КОНЕЦ КАК ДатаНачалаСледующегоЗаПериод
	|ПОМЕСТИТЬ ВТ_РасходыПоДоговорамСтрахованияПоПериодам
	|ИЗ
	|	РасходыПоДоговорамСтрахования КАК РасходыПоДоговорамСтрахования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоДоговорамСтрахованияПоПериодам.ВидРасходовНУ КАК ВидРасходовНУ,
	|	РасходыПоДоговорамСтрахованияПоПериодам.Период КАК Период,
	|	РасходыПоДоговорамСтрахованияПоПериодам.ДатаНачалаЗаПериод КАК ДатаИзменения
	|ПОМЕСТИТЬ ВТ_ДатыИзмененийНесгруппированные
	|ИЗ
	|	ВТ_РасходыПоДоговорамСтрахованияПоПериодам КАК РасходыПоДоговорамСтрахованияПоПериодам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПоДоговорамСтрахованияПоПериодам.ВидРасходовНУ,
	|	РасходыПоДоговорамСтрахованияПоПериодам.Период,
	|	РасходыПоДоговорамСтрахованияПоПериодам.ДатаНачалаСледующегоЗаПериод
	|ИЗ
	|	ВТ_РасходыПоДоговорамСтрахованияПоПериодам КАК РасходыПоДоговорамСтрахованияПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыИзмененийНесгруппированные.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ДатыИзмененийНесгруппированные.Период КАК Период,
	|	ДатыИзмененийНесгруппированные.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ ВТ_ДатыИзмененийСгруппированные
	|ИЗ
	|	ВТ_ДатыИзмененийНесгруппированные КАК ДатыИзмененийНесгруппированные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыИзмененийСгруппированные.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ДатыИзмененийСгруппированные.Период КАК Период,
	|	ДатыИзмененийСгруппированные.ДатаИзменения КАК ДатаНачала,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыИзмененийСгруппированныеОкончание.ДатаИзменения, СЕКУНДА, -1), ДЕНЬ)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ИнтервалыДействияДоговоров
	|ИЗ
	|	ВТ_ДатыИзмененийСгруппированные КАК ДатыИзмененийСгруппированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыИзмененийСгруппированные КАК ДатыИзмененийСгруппированныеОкончание
	|		ПО ДатыИзмененийСгруппированные.ВидРасходовНУ = ДатыИзмененийСгруппированныеОкончание.ВидРасходовНУ
	|			И ДатыИзмененийСгруппированные.Период = ДатыИзмененийСгруппированныеОкончание.Период
	|			И ДатыИзмененийСгруппированные.ДатаИзменения < ДатыИзмененийСгруппированныеОкончание.ДатаИзменения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыИзмененийСгруппированные.ВидРасходовНУ,
	|	ДатыИзмененийСгруппированные.ДатаИзменения,
	|	ДатыИзмененийСгруппированные.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НормируемыеСтатьиЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РасходыПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РасходыПоДоговорамСтрахованияПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДатыИзмененийНесгруппированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДатыИзмененийСгруппированные";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВременнуюТаблицуОплатаТрудаПоПериодам(ПараметрыРасчета)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",  ПараметрыРасчета.НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",   ПараметрыРасчета.КонецОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",            ПараметрыРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  ПараметрыРасчета.КонецПредыдущегоМесяца);
	Запрос.УстановитьПараметр("Организация",             ПараметрыРасчета.Контекст.Организация);
	Запрос.УстановитьПараметр("Организации",             Справочники.Организации.ВсяОрганизация(ПараметрыРасчета.Контекст.Организация));
	Запрос.УстановитьПараметр("ДоляУчитываемыхРасходов", 1 - ПараметрыРасчета.Контекст.ДоляСпециальныхРежимов); // Применяется для распределяемых расходов
	Запрос.УстановитьПараметр("ВидыРасходов",            Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("СчетаРасходов",           БухгалтерскийУчет.СформироватьМассивСубсчетов(ПолучитьМассивСчетовУчетаРасходов()));
	Запрос.УстановитьПараметр("СчетаРезультата",         СчетаРезультата());
	
	Запрос.Текст = ТекстЗапросаОплатаТруда() + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ОплатаТруда.Период КАК Период,
	|	СУММА(ОплатаТруда.Сумма) КАК СуммаОплатыТруда
	|ПОМЕСТИТЬ ВТ_ОплатаТруда
	|ИЗ
	|	ВТ_Вознаграждение КАК ОплатаТруда
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаТруда.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаТруда.СуммаОплатыТруда КАК СуммаОплатыТруда,
	|	ОплатаТруда.Период КАК Период
	|ПОМЕСТИТЬ ОплатаТрудаПоПериодам
	|ИЗ
	|	ВТ_ОплатаТруда КАК ОплатаТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|		ПО ОплатаТруда.Период = РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация)
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоМесяца)
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Активность)
	|ГДЕ
	|	РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Вознаграждение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОплатаТруда";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает структуру для хранения данных расчета базы оплаты труда для договоров страхования.
// 
// Возвращаемое значение:
//  Структура:
//    * Контекст - Структура:
//      ** Период - Дата
//      ** Организация - СправочникСсылка.Организации
//      ** ДоляСпециальныхРежимов - Число
//    * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//    * РасчетТекущегоПериода - Соответствие Из КлючИЗначение:
//      ** Ключ - ПеречислениеСсылка.ВидыРасходовНУ
//      ** Значение - ТаблицаЗначений
//    * РасчетПрошлыхПериодов - Соответствие Из КлючИЗначение:
//      ** Ключ - ПеречислениеСсылка.ВидыРасходовНУ
//      ** Значение - ТаблицаЗначений
//    * ОстаткиНормыПрошлыхПериодов - Соответствие Из КлючИЗначение:
//      ** Ключ - ПеречислениеСсылка.ВидыРасходовНУ
//      ** Значение - ТаблицаЗначений
//    * НачалоОтчетногоПериода - Дата
//    * НачалоМесяца - Дата
//    * КонецПредыдущегоМесяца - Дата
//    * КонецОтчетногоПериода - Дата
//    * Результат - Соответствие
//
Функция НовыйПараметрыРасчетаБазыОплатаТрудаДляДоговоровСтрахования()

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Контекст",                                НовыйКонтекстРасчетаБазыПоОплатеТруда());
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц",                 Новый МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("РасчетТекущегоПериода",                   Новый Соответствие);
	ПараметрыРасчета.Вставить("РасчетПрошлыхПериодов",                   Новый Соответствие());
	ПараметрыРасчета.Вставить("ОстаткиНормыПрошлыхПериодов",             Новый Соответствие());
	ПараметрыРасчета.Вставить("НачалоОтчетногоПериода",                  '0001-01-01');
	ПараметрыРасчета.Вставить("НачалоМесяца",                            '0001-01-01');
	ПараметрыРасчета.Вставить("КонецПредыдущегоМесяца",                  '0001-01-01');
	ПараметрыРасчета.Вставить("КонецОтчетногоПериода",                   '0001-01-01');
	// Результатом расчета для каждого ВидРасходовНУ будет являться структура, содержащая норму и результат расчета,
	// который будет записан в регистр РасчетБазыНормированияПоДоговорамСтрахования.
	ПараметрыРасчета.Вставить("Результат",                               Новый Соответствие());

	Возврат ПараметрыРасчета;
	
КонецФункции

// Создает структуру, в которой хранятся данные, используемые для расчета на отдельном интервале действия договоров страхования.
// 
// Возвращаемое значение:
//  Структура - Данные текущего интервала:
// * ДатаНачала - Дата
// * ДатаОкончания - Дата
// * УчтеноВДругихДоговорах - Число
// * НормаЗаПериод - Число
// * Договоры - Массив из СправочникСсылка.РасходыБудущихПериодов
//
Функция НовыйДанныеТекущегоИнтервала()

	ДанныеТекущегоИнтервала = Новый Структура;
	ДанныеТекущегоИнтервала.Вставить("ДатаНачалаДействия",     '0001-01-01');
	ДанныеТекущегоИнтервала.Вставить("ДатаОкончанияДействия",  '0001-01-01');
	ДанныеТекущегоИнтервала.Вставить("УчтеноВДругихДоговорах", 0);
	ДанныеТекущегоИнтервала.Вставить("НормаЗаПериод",          0);
	ДанныеТекущегоИнтервала.Вставить("Договоры",               Новый Массив);
	
	Возврат ДанныеТекущегоИнтервала;
	
КонецФункции

// Создает структуру, в которой хранятся промежуточные рассчитанные данные для каждого договора страхования.
// 
// Возвращаемое значение:
//  Структура - Новый рассчитанные данные по договору страхования:
// * СуммаРасходовНарастающийИтог - Число
// * НормаПоДоговоруНарастающийИтог - Число
// * УчтеноВДругихДоговорах - Число
// * УчтеноНарастающийИтог - Число
//
Функция НовыйИтогПоДоговору()

	ИтогПоДоговору = Новый Структура;
	
	ИтогПоДоговору.Вставить("СуммаРасходовНарастающийИтог",   0);
	ИтогПоДоговору.Вставить("НормаПоДоговоруНарастающийИтог", 0);
	ИтогПоДоговору.Вставить("УчтеноВДругихДоговорах",         0);
	ИтогПоДоговору.Вставить("УчтеноНарастающийИтог",          0);
	
	Возврат ИтогПоДоговору;
	
КонецФункции

// Создает структуру контекста расчета базы по оплате труда для расходов на страхование.
// 
// Возвращаемое значение:
//  Структура:
// * Период - Дата
// * Организация - СправочникСсылка.Организации
// * ДоляСпециальныхРежимов - Число
//
Функция НовыйКонтекстРасчетаБазыПоОплатеТруда()

	Контекст = Новый Структура;
	Контекст.Вставить("Период",                 '0001-01-01');
	Контекст.Вставить("Организация",            Справочники.Организации.ПустаяСсылка());
	Контекст.Вставить("ДоляСпециальныхРежимов", 0);
	
	Возврат Контекст;
	
КонецФункции

Функция НовыйРасчетОстатковНормы()
	
	РасчетОстатковНормы = Новый ТаблицаЗначений;
	РасчетОстатковНормы.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетОстатковНормы.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетОстатковНормы.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетОстатковНормы.Колонки.Добавить("РасходыНаСтрахование", Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов, СправочникСсылка.ДоговорыКонтрагентов"));
	РасчетОстатковНормы.Колонки.Добавить("ОстатокНормы", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РасчетОстатковНормы.Колонки.Добавить("УчтеноВнеТекущегоПериода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат РасчетОстатковНормы;
	
КонецФункции

// Конструктор результата расчета базы для вида расходов.
// 
// Возвращаемое значение:
//  Структура:
//   * База - Число
//   * РасчетБазы - ТаблицаЗначений - содержит данные расчета для записи в регистр сведений РасчетБазыНормированияПоДоговорамСтрахования.
//
Функция НовыйРасчетБазыРасходовНаСтрахование()

	РасчетБазы = ОбщегоНазначенияБП.ТаблицаЗначенийПоМетаданнымРегистра(
		Метаданные.РегистрыСведений.РасчетБазыНормированияПоДоговорамСтрахования, Истина);
	 
	РасчетБазыОплатаТрудаДляВидаСтрахования = Новый Структура();
	РасчетБазыОплатаТрудаДляВидаСтрахования.Вставить("База",       0);
	РасчетБазыОплатаТрудаДляВидаСтрахования.Вставить("РасчетБазы", РасчетБазы);
	
	Возврат РасчетБазыОплатаТрудаДляВидаСтрахования;
	
КонецФункции

Функция ВидыРасходовНаСтрахованиеБазаОплатаТруда()
	
	ВидыНормируемыхРасходовНаСтрахование = Новый Массив;
	ВидыНормируемыхРасходовНаСтрахование.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	ВидыНормируемыхРасходовНаСтрахование.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Возврат ВидыНормируемыхРасходовНаСтрахование;
	
КонецФункции

Функция УчтеннаяНормаЗаПредыдущиеПериоды(ПараметрыРасчета)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидыНормируемыхРасходовНаСтрахование", ВидыРасходовНаСтрахованиеБазаОплатаТруда());
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", ПараметрыРасчета.НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца", ПараметрыРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.Контекст.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРасходовНУ.Ссылка КАК ВидРасходовНУ,
	|	СУММА(ЕСТЬNULL(РасчетБазыНормированияПоДоговорамСтрахования.Учтено, 0)) КАК Учтено
	|ИЗ
	|	Перечисление.ВидыРасходовНУ КАК ВидыРасходовНУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетБазыНормированияПоДоговорамСтрахования КАК РасчетБазыНормированияПоДоговорамСтрахования
	|		ПО ВидыРасходовНУ.Ссылка = РасчетБазыНормированияПоДоговорамСтрахования.ВидРасходовНУ
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Организация = &Организация)
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.ПериодРасчета МЕЖДУ &НачалоОтчетногоПериода И &НачалоМесяца)
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Период МЕЖДУ &НачалоОтчетногоПериода И &НачалоМесяца)
	|			И (РасчетБазыНормированияПоДоговорамСтрахования.Активность)
	|ГДЕ
	|	ВидыРасходовНУ.Ссылка В(&ВидыНормируемыхРасходовНаСтрахование)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыРасходовНУ.Ссылка";
	
	РезультатСуммаБазыПрошлыхПериодов = Запрос.Выполнить();
	ВыборкаБазыПрошлыхПериодов = РезультатСуммаБазыПрошлыхПериодов.Выбрать();
	
	УчтеннаяНормаЗаПредыдущиеПериоды = Новый Соответствие();
	Пока ВыборкаБазыПрошлыхПериодов.Следующий() Цикл
		УчтеннаяНормаЗаПредыдущиеПериоды.Вставить(ВыборкаБазыПрошлыхПериодов.ВидРасходовНУ, ВыборкаБазыПрошлыхПериодов.Учтено);
	КонецЦикла;
	
	Возврат УчтеннаяНормаЗаПредыдущиеПериоды;
	
КонецФункции

Процедура ПеренестиВОстаткиНеиспользованнуюНорму(РасчетОстатковНормы, ОстаткиНормыПрошлыхПериодов, ДанныеТекущегоИнтервала)
	
	Если ДанныеТекущегоИнтервала.НормаЗаПериод > 0 И ДанныеТекущегоИнтервала.Договоры.Количество() > 0 Тогда
		
		Для Каждого Договор Из ДанныеТекущегоИнтервала.Договоры Цикл
			
			// Записываем в таблицу, которая используется для промежуточных расчетов.
			СтрокаОстатков = ОстаткиНормыПрошлыхПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДанныеТекущегоИнтервала);
			СтрокаОстатков.СуммаНормыОстаток = ДанныеТекущегоИнтервала.НормаЗаПериод;
			СтрокаОстатков.РасходыНаСтрахование = Договор;
						
			// Записываем в итоговый результат
			СтрокаРасчетаОстатков = РасчетОстатковНормы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасчетаОстатков, СтрокаОстатков);
			СтрокаРасчетаОстатков.ОстатокНормы = ДанныеТекущегоИнтервала.НормаЗаПериод;
			СтрокаРасчетаОстатков.ПериодРасчета = НачалоМесяца(ДанныеТекущегоИнтервала.ДатаНачалаДействия);
			
		КонецЦикла;
							
	КонецЕсли;
	
КонецПроцедуры

// Распределяет числовое значение, содержащееся в заданном столбце, по отобранным строкам таблицы значений
// пропорционально значениям одной из колонок.
// 
// Параметры:
//  ТаблицаДляРаспределения - ТаблицаЗначений - Обрабатываемая таблица
//  ИмяРаспределяемогоЗначения - Строка - Имя колонки, в которой содержится распределяемое значение. Предполагается,
//                                        что это значение одинаково во всех отобранных строках. Поэтому берется значение из
//                                        первой из отобранных строк.
//  ИмяКоэффициента - Строка - Имя колонки, которая содержит коэффициенты распределения.
//  Отбор - Структура
//  КоэффициентУменьшения - Число - Задается, если нужно распределить значение, скорректированное на определенный коэффициент (множитель).
//
Процедура РаспределитьПоСтрокамТаблицыЗначений(ТаблицаДляРаспределения, ИмяРаспределяемогоЗначения, ИмяКоэффициента, Отбор, КоэффициентУменьшения = 1)

	СтрокиТаблицы = ТаблицаДляРаспределения.НайтиСтроки(Отбор);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		
		Коэффициенты = Новый Массив;
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Коэффициенты.Добавить(СтрокаТаблицы[ИмяКоэффициента]);
		КонецЦикла;

		РаспределитьПропорциональноКоэффициентамПоСтрокамТаблицыЗначений(ИмяРаспределяемогоЗначения, СтрокиТаблицы, Коэффициенты, КоэффициентУменьшения);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПропорциональноКоэффициентамПоСтрокамТаблицыЗначений(
	ИмяКолонкиРаспределяемогоЗначения, РаспределяемыеСтроки, Коэффициенты, КоэффициентУменьшения = 1)

	Если РаспределяемыеСтроки[0][ИмяКолонкиРаспределяемогоЗначения] > 0 Тогда
		
		СуммаДляРаспределения = Окр(РаспределяемыеСтроки[0][ИмяКолонкиРаспределяемогоЗначения] * КоэффициентУменьшения, 2);
		
		РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СуммаДляРаспределения, Коэффициенты, 2);
			
		Для Индекс = 0 По РаспределяемыеСтроки.Количество() - 1 Цикл
			РаспределяемыеСтроки[Индекс][ИмяКолонкиРаспределяемогоЗначения] = РаспределенныеСуммы[Индекс];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРаспределенноеЗначениеВИсходнойТаблице(ИсходнаяТаблица, ТаблицаСРаспределеннымЗначением, КолонкаЗаполнения, Отбор)

	Для Каждого СтрокаТаблицы Из ТаблицаСРаспределеннымЗначением Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		ОтобранныеСтроки = ИсходнаяТаблица.НайтиСтроки(Отбор);
		Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
			ОтобраннаяСтрока[КолонкаЗаполнения] = СтрокаТаблицы[КолонкаЗаполнения];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет возвращаемый результат начальными данными.
// 
// Параметры:
//  ПараметрыРасчета - См. НовыйПараметрыРасчетаБазыОплатаТрудаДляДоговоровСтрахования
//
Процедура ЗаполнитьПараметрыРасчетаНачальнымиДанными(ПараметрыРасчета)
	
	Период                 = ПараметрыРасчета.Контекст.Период;
	Организация            = ПараметрыРасчета.Контекст.Организация;
	НачалоОтчетногоПериода = НачалоНалоговогоПериода(Период, Организация);
	
	ПараметрыРасчета.НачалоОтчетногоПериода = НачалоОтчетногоПериода;
	ПараметрыРасчета.НачалоМесяца           = НачалоМесяца(Период);
	ПараметрыРасчета.КонецПредыдущегоМесяца = НачалоМесяца(Период) - 1;
	ПараметрыРасчета.КонецОтчетногоПериода  = КонецМесяца(Период);
	
	Для Каждого ВидРасходов Из ВидыРасходовНаСтрахованиеБазаОплатаТруда() Цикл
		
		РасчетТекущегоПериода = ОбщегоНазначенияБП.ТаблицаЗначенийПоМетаданнымРегистра(
			Метаданные.РегистрыСведений.РасчетБазыНормированияПоДоговорамСтрахования,
			Истина);
		ПараметрыРасчета.РасчетТекущегоПериода.Вставить(ВидРасходов, РасчетТекущегоПериода);
		ПараметрыРасчета.Результат.Вставить(ВидРасходов, НовыйРасчетБазыРасходовНаСтрахование());
	КонецЦикла;
	
КонецПроцедуры

Функция СчетаРезультата()
	
	СчетаРезультата = Новый Массив;
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);           // 90.02.1
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);      // 90.07.1
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД); // 90.08.1
	СчетаРезультата = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРезультата);
	Возврат СчетаРезультата;
	
КонецФункции

#КонецОбласти

#КонецОбласти
