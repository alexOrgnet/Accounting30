#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.Номенклатура - Результат выбора.
//  ИсточникВыбора          - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СписокРеквизитов = "ЕдиницаИзмерения,КодТНВЭД";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОКПД2") Тогда
		СписокРеквизитов = СписокРеквизитов + ",КодОКПД2";
	КонецЕсли;
	
	СтруктураРеквизитов = СобытияФормЗЕРНОБПВызовСервера.РеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура, СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("КодОКПД2") И ЗначениеЗаполнено(СтруктураРеквизитов.КодОКПД2) Тогда
		
		ОКПД2Наименование = СобытияФормЗЕРНОБПВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураРеквизитов.КодОКПД2, "НаименованиеПолное");
		ТекущаяСтрока.ОКПД2 = СтруктураРеквизитов.КодОКПД2;
		ТекущаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(ОКПД2Наименование, СтруктураРеквизитов.КодОКПД2);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоЗЕРНО")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕдиницаИзмеренияКилограмм") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПриИзмененииКоличестваВКилограммах(Форма, ТекущаяСтрока, Форма.ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
		Иначе
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат;
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки подбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОсобенностьУчета = Новый Массив();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") И
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект,"ВидПродукции") Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ВидПродукции) Тогда
			ОсобенностьУчета.Добавить(СоответствиеВидовПродукцииЗерно(Форма.Объект.ВидПродукции));
		КонецЕсли;
	КонецЕсли;
	Если ОсобенностьУчета.Количество() = 0 Тогда
	    ОсобенностьУчета.Добавить("Зерно");
		ОсобенностьУчета.Добавить("ПродуктыПереработкиЗерна");
	КонецЕсли;
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора(Форма.Объект, "Товары");
	ПараметрыПодбора.ДопустимыеВидыПродукции = ОсобенностьУчета;
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат выбора в форму документа ЗЕРНО (например из формы подбора номенклатуры,
//   при использовании множественного выбора вместо закрытия формы подбора с общим результатом).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ВыбранноеЗначение - Произвольный - результат выбора.
//  ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, в которой произведен выбор.
Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		Форма.Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ИмяКолонкиНоменклатура - Строка - имя колонки с данными номенклатуры.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
//  ТекущиеДанные          - Произвольный - Контекст выбора серии
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, ТекущиеДанные = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Количество

// Выполняет действия при изменении подобранного количества (поле Количество) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении количества в килограммах (поле КоличествоЗЕРНО) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличестваВКилограммах(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Выполняется при начале выбора договора ИС. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения  - форма, в которой вызывается команда выбора договора.
//  ДанныеДоговора - Структура - данные договора хранения ЗЕРНО, для которого выбирается прикладной договор:
//  	Договор - ОпределеяемыйТип.ДоговорКонтрагентаИС - текущий договор.
//  	Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организацияя/контрагент с которым заключен договор.
//  	Организация - ОпределеяемыйТип.Организация - организация владелец договора.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ОповещениеПриЗавершении - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораДоговораОрганизацииКонтрагента(Владелец, ДанныеДоговора, СтандартнаяОбработка, ОповещениеПриЗавершении) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока", ДанныеДоговора.Договор);
	ПараметрыФормы.Вставить("Контрагент",    ДанныеДоговора.Контрагент);
	ПараметрыФормы.Вставить("Организация",   ДанныеДоговора.Организация);
	ПараметрыФормы.Вставить("РежимВыбора",   Истина);
	
	Если ТипЗнч(ДанныеДоговора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Владелец, Владелец,,, ОповещениеПриЗавершении);
	Иначе // Контрагент
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Владелец, Владелец,,, ОповещениеПриЗавершении);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подбор
Функция ПолучитьПараметрыПодбора(ОбъектФормы, ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(ОбъектФормы.Дата) = НачалоДня(ТекущаяДата()), Неопределено, ОбъектФормы.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, ОбъектФормы.Ссылка, НСтр("ru = 'Товары'"));
	
	СписокРеквизитов = "ПодразделениеОрганизации,Склад,ТипЦен";
	РеквизитыОснования = СобытияФормЗЕРНОБПВызовСервера.ПолучитьРеквизитыДокументаОснования(ОбъектФормы.ДокументОснование, СписокРеквизитов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены"	, Ложь);
	ПараметрыФормы.Вставить("ТипЦен"        	, РеквизитыОснования.ТипЦен);
	ПараметрыФормы.Вставить("ЕстьЦена"      	, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"	, Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  	, ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        	, СобытияФормЗЕРНОБПВызовСервера.ВалютаРегламентированногоУчета());
	ПараметрыФормы.Вставить("Склад"         	, РеквизитыОснования.Склад);
	ПараметрыФормы.Вставить("Заголовок"     	, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    	, ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    	, ИмяТаблицы);
	ПараметрыФормы.Вставить("Организация"   	, ОбъектФормы.Организация);
	ПараметрыФормы.Вставить("Подразделение" 	, РеквизитыОснования.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Услуги"        	, Ложь);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"	, Истина);
	
	ПараметрыФормы.Вставить("ДопустимыеВидыПродукции", "");
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОснования.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПокупке", Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Ложь);
		ПараметрыФормы.Вставить("Реализация"			, Истина);
		ПараметрыФормы.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;

	
	Возврат ПараметрыФормы;

КонецФункции

Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

Функция СоответствиеВидовПродукцииЗерно(ВидПродукцииЗерно)
	
	Если ВидПродукцииЗерно = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") 
		ИЛИ ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС")  Тогда
		ВидПродукции = "Зерно";
	ИначеЕсли ВидПродукцииЗерно = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") 
		ИЛИ ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС") Тогда
		ВидПродукции = "ПродуктыПереработкиЗерна";
	Иначе
		ВидПродукции = "";
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

#КонецОбласти