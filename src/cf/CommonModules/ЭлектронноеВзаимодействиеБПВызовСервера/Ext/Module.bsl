
////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеБПВызовСервера: вспомогательные процедуры и функции БЭД
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДиректБанк

Функция ВидимостьЭлементовДиректБанк(Организация, ДанныеБанкаСчета) Экспорт
	
	ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если ТипЗнч(ДанныеБанкаСчета) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеБанкаСчета, "Банк, ВалютаДенежныхСредств");
		Банк = ДанныеБанковскогоСчета.Банк;
		ВалютаДенежныхСредств = ДанныеБанковскогоСчета.ВалютаДенежныхСредств;
	Иначе
		
		Банк = ДанныеБанкаСчета;
		
	КонецЕсли;
	
	Результат = "НеПоказывать";
	Если ВалютаДенежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
		Или Не (ЗначениеЗаполнено(Банк) И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
	Если РегистрыСведений.СостоянияИнтеграцииАУСН.СостояниеИнтеграции(
		Организация, БанкПоКлассификатору) = Перечисления.СостоянияИнтеграцииАУСН.Подключено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		НастройкаОбмена = Неопределено;
		
	Иначе
		
		НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, Банк);
		
	КонецЕсли;
	
	РекомендуетсяПрямойОбменСБанком = Ложь;
	
	// Баннер директ-банка отображается у всех пользователей, который открыли элемент с баннером.
	// У этих пользователей может не быть доступа к банку и настройкам интеграции, поэтому
	// получать настройки интеграции нужно в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ВключенаИнтеграцияСБанком = ТипЗнч(Банк) = Тип("СправочникСсылка.Банки") И ЗначениеЗаполнено(Банк)
		И Справочники.НастройкиИнтеграцииСБанками.НастройкаИнтеграцииОрганизацииСБанком(Организация, Банк) <> Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ВключенаИнтеграцияСБанком
		И Не ЗначениеЗаполнено(НастройкаОбмена)
		И ОбменСБанками.ВозможенПрямойОбменСБанком(БИК, 1, РекомендуетсяПрямойОбменСБанком) Тогда
		
		Результат = "ПоказатьГиперссылку";
		ВидимостьРекламы = ХранилищеОбщихНастроек.Загрузить("ВидимостьРекламыДиректБанк", БИК);
		ВидимостьРекламы = ?(ВидимостьРекламы = Неопределено, Истина, ВидимостьРекламы);
		Если ВидимостьРекламы И РекомендуетсяПрямойОбменСБанком Тогда
			
			Результат = "ПоказатьБаннер";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Видимость) Экспорт
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	ХранилищеОбщихНастроек.Сохранить("ВидимостьРекламыДиректБанк", БИК, Видимость);
	
КонецПроцедуры

// Получает данные выписки банка в текстовом формате
Функция ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	Результат.Вставить("СсылкаНаХранилище", Неопределено);
	Результат.Вставить("МассивСчетов", Неопределено);
	
	Если НЕ Результат.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, Результат.СсылкаНаХранилище, Результат.МассивСчетов);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВыпискиБанкаВТекстовомФормате(Знач МассивВыписок) Экспорт
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

Функция НастройкиКлиентБанкаДляБанковскогоСчета(Знач Организация, Знач БанковскийСчет) Экспорт
	
	СтруктураНастроек = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	ЕстьПрямойОбмен = Ложь;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ЕстьПрямойОбмен = ЗначениеЗаполнено(СтруктураНастроек.СоглашениеПрямогоОбменаСБанками) Или
			СтруктураНастроек.ПодключенСервисАУСН;
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками", ЕстьПрямойОбмен);
	Иначе
		// Проверим есть ли в ИБ прямой обмен с банками.
		// Если есть, то следует спрашивать у пользователя,
		// по какому счету производится загрузка
		// Если прямого обмена нет, то предлагаем выбрать файл -
		// банковский счет определяем из файла.
		Если ЭлектронноеВзаимодействиеБП.ИспользуетсяПрямойОбменСБанком(Организация) Тогда
			ЕстьПрямойОбмен = Истина;
		Иначе
			ЕстьПрямойОбмен = РегистрыСведений.СостоянияИнтеграцииАУСН.БанковскийСчетПодключенКСервису(
				Организация, БанковскийСчет);
		КонецЕсли;
		
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками", ЕстьПрямойОбмен);
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Обработки.КлиентБанк.НастройкиЗагрузки());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Получает выписку банка в коллекцию ОбменСБанкомВФормате1С.НовыйДанныеИзБанка(),
// а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище тестовых данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Функция ПолучитьДанныеВыпискиБанкаВКоллекцию(Знач СообщениеОбмена) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	Результат.Вставить("СсылкаНаХранилищеВыписки", Неопределено);
	Результат.Вставить("МассивСчетов", Неопределено);
	
	Если Результат.ВидЭД <> Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПолучитьДанныеВыпискиБанка(СообщениеОбмена, Результат.СсылкаНаХранилищеВыписки, Результат.МассивСчетов);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВыписокБанкаВКоллекцию(Знач МассивВыписок) Экспорт
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ПолучитьДанныеВыпискиБанка(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

Функция АвтоматическоеПолучениеВыпискиДоступно(СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки
	|	И ПараметрыОбменСБанками.НастройкаОбмена.Организация В(&СписокОрганизаций)";
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция НастройкиОбменаАвтоматическоеПолучениеВыписки(Организация = Неопределено, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки
	|	И ПараметрыОбменСБанками.НастройкаОбмена.Ссылка ССЫЛКА Справочник.НастройкиОбменСБанками
	|	И НЕ ПараметрыОбменСБанками.НастройкаОбмена.ПометкаУдаления
	|	И НЕ ПараметрыОбменСБанками.НастройкаОбмена.Недействительна
	|	И ИСТИНА";
	
	ТекстДополнительногоОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстДополнительногоОтбора = ТекстДополнительногоОтбора + " И ПараметрыОбменСБанками.НастройкаОбмена.Организация = &Организация ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		ТекстДополнительногоОтбора = ТекстДополнительногоОтбора + "
			|	И (ПараметрыОбменСБанками.НастройкаОбмена.Банк = &Банк
			|			ИЛИ ПараметрыОбменСБанками.НастройкаОбмена.Банк.Код = &БИК)";
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
		Запрос.УстановитьПараметр("БИК",  БИК);
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Если ТекстДополнительногоОтбора <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", ТекстДополнительногоОтбора);
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	НастройкиОбмена = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НастройкаОбмена");
	
	Возврат НастройкиОбмена;
	
КонецФункции

Функция ТаблицаОшибокАвтоматическоеПолучениеВыписки(НастройкиОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОбменСБанками.ТекстОшибки КАК ТекстОшибки,
	|	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена,
	|	ПараметрыОбменСБанками.ДатаСинхронизации КАК ДатаСинхронизации
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки
	|	И ПараметрыОбменСБанками.НастройкаОбмена В(&НастройкиОбмена)
	|	И (ВЫРАЗИТЬ(ПараметрыОбменСБанками.ТекстОшибки КАК СТРОКА(10))) <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСинхронизации ВОЗР";
	Запрос.УстановитьПараметр("НастройкиОбмена", НастройкиОбмена);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаДатыСинхронизацииАвтоматическоеПолучениеВыписки(НастройкиОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПараметрыОбменСБанками.ДатаСинхронизации КАК ДатаСинхронизации
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки
	|	И ПараметрыОбменСБанками.НастройкаОбмена В(&НастройкиОбмена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСинхронизации УБЫВ";
	Запрос.УстановитьПараметр("НастройкиОбмена", НастройкиОбмена);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает визуальное представление электронного документа.
//
// Параметры:
//  ПараметрКоманды     - ДокументСсылка.СообщениеОбменСБанками
//                      - Массив из ДокументСсылка.СообщениеОбменСБанками - объекты печати;
//  ИдентификаторПечати - Строка - идентификатор печатной формы.
//  ДляПечати - Булево  - если документ формируется для печати, то он будет содержать разделители.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - визуальное преставление электронного документа;
//  Неопределено - некорректное содержимое электронного документа.
//
Функция ФайлДанныхЭД(ПараметрКоманды, ИдентификаторПечати = Неопределено, ДляПечати = Ложь) Экспорт
	
	Если НЕ ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ПараметрКоманды);
	Иначе
		МассивОбъектов = ПараметрКоманды;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого СообщениеОбмена ИЗ МассивОбъектов Цикл 
		
		ДобавитьТабличныйДокумент(ТабличныйДокумент, 
				Документы.СообщениеОбменСБанками.ФайлДанныхЭД(СообщениеОбмена, ИдентификаторПечати, ДляПечати));
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент; 
	
КонецФункции

Процедура ДобавитьТабличныйДокумент(ОбщийТабДок, ТабличныйДокумент)
		
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
	ОбластьЯчеек.СоздатьФорматСтрок();
	ОбщийТабДок.Вывести(ТабличныйДокумент);
	ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
	ОбщийТабДок.АвтоМасштаб = Истина;
	ОбщийТабДок.ОтображатьЗаголовки = Ложь;
	ОбщийТабДок.ОтображатьСетку = Ложь;
	ОбщийТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

Функция ИмеетсяВозможностьЗагрузкиДанныхИзФайла(ИмяФормыПриемника = "") Экспорт
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("ДобавлениеИзменениеДанныхБухгалтерии") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыПриемника) Тогда
		ЧастиИмени = СтрРазделить(ИмяФормыПриемника, ".");
		Если ЧастиИмени.Количество() > 1 Тогда
			Если ЧастиИмени[0] = "Документ" И ЧастиИмени[1] = "ПоступлениеТоваровУслуг" Тогда
				Возврат ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПоступлениеТоваровУслуг);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, КодСобытия);
	
КонецПроцедуры

Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты);
	
КонецФункции

Функция ЕстьПравоНастройкиЭДО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиЭДО);
	
КонецФункции

#КонецОбласти

#Область КонвертацияФайлаВФорматФНС

Функция ОбработатьТабличныйДокументСервер(АдресФайла, РасширениеФайла, ИдентификаторФормы) Экспорт

	ВременныйФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ВременныйФайл);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяВременногоФайла", ВременныйФайл);
	ПараметрыЗадания.Вставить("Расширение", РасширениеФайла);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы, "ЭлектронноеВзаимодействиеБП.ПолучитьДанныеВФорматеБЭД", 
		ПараметрыЗадания, НСтр("ru = 'Преобразование табличного документа в формат БЭД'"));			
		
	Возврат Результат; 	 
	
КонецФункции

Функция ОбработатьТабличныйДокументВСтруктуруСервер(ЗагруженныеФайлы, АдресХранилища) Экспорт

	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		
		ВременныйФайл = ПолучитьИмяВременногоФайла(ЗагруженныйФайл.РасширениеФайла);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЗагруженныйФайл.АдресФайла);
		ДвоичныеДанные.Записать(ВременныйФайл);
		ЗагруженныйФайл.Вставить("ВременныйФайл", ВременныйФайл);
			
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Преобразование табличного документа в структуру'");
	Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "ЭлектронноеВзаимодействиеБП.ПолучитьДанныеВСтруктуру", ЗагруженныеФайлы, АдресХранилища);  
		
	Возврат Результат; 	 
	
КонецФункции

Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Функция РазобратьПолученныеДанные(АдресХранилища, ИдентификаторФормы) Экспорт

	ПолученныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеЭД = Новый Структура;
	Если Не ПолученныеДанные.Свойство("ТекстОшибки") Тогда
		
		ДанныеЭД.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(ПолученныеДанные.ДвоичныеДанные, ИдентификаторФормы));	
		Если ПолученныеДанные.Свойство("НомерСчФ") Тогда
			
			ДанныеЭД.Вставить("НомерСФ", ПолученныеДанные.НомерСчФ);
			ДанныеЭД.Вставить("ДатаСФ", ПолученныеДанные.ДатаСчФ);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеЭД.Вставить("ТекстОшибки", ПолученныеДанные.ТекстОшибки);
		
	КонецЕсли;		
	
	Возврат ДанныеЭД;

КонецФункции // РазобратьПолученныеДанные()

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт

	Возврат ЭлектронноеВзаимодействиеБП.ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы);
		
КонецФункции  

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СоздатьДокументИзЭД(СтруктураЭД);
	
КонецФункции

Функция СоздатьДокументИзСтруктуры(ДанныеЭД) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СоздатьДокументИзСтруктуры(ДанныеЭД);
	
КонецФункции

Функция РазобратьПолученныеДанныеДокументИзСтруктуры(АдресХранилища, ИдентификаторФормы) Экспорт

	ПолученныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат = Новый Структура;
	
	Если НЕ ТипЗнч(ПолученныеДанные) = Тип("Массив") Тогда
		
		Результат.Вставить("ТекстОшибки",  НСтр("ru = 'Ошибка чтения файлов.'"));
		Возврат Результат;
		
	ИначеЕсли ПолученныеДанные.Количество() = 0 Тогда
		
		Результат.Вставить("ТекстОшибки",  НСтр("ru = 'Не прочитано ни одного файла.'"));
		
	ИначеЕсли ПолученныеДанные.Количество() = 1 Тогда
		
		Если ПолученныеДанные[0].Свойство("ТекстОшибки") Тогда
			Результат.Вставить("ТекстОшибки", ПолученныеДанные[0].ТекстОшибки);
		КонецЕсли;
				
		НастройкиСопоставления    = Новый Структура;
		НовыеКолонкиСопоставления = Новый Массив;
		ТипСтрока300              = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(300));
				
		ДополнительныеПараметрыПоиска = Новый Структура;
		ДополнительныеПараметрыПоиска.Вставить("НатуральныеКлючи", "Артикул");
		
		Если ПолученныеДанные[0].Свойство("ВидДокумента") Тогда
			
			Результат.Вставить("ВидДокумента", ПолученныеДанные[0].ВидДокумента);
			
			Если СтрНайти(ПолученныеДанные[0].ВидДокумента, "_WB") > 0 Тогда
				ДополнительныеПараметрыПоиска.Вставить("Маркетплейс", Перечисления.ВидыМаркетплейсов.Wildberries);
				
				ДополнительныйРеквизит = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыйДополнительныйРеквизитСопоставления();
				ДополнительныйРеквизит.Имя = "КодМагазина";
				ДополнительныйРеквизит.Представление = "Код маркетплейса";
				НовыеКолонкиСопоставления.Добавить(ДополнительныйРеквизит);
				
				ВидимостьКолонокСопоставления = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеНастройкиВидимостиКолонокСопоставления();
				ВидимостьКолонокСопоставления.Вставить("ЕдиницаИзмерения", Ложь);
				ВидимостьКолонокСопоставления.Вставить("Упаковка", Ложь);
				ВидимостьКолонокСопоставления.Вставить("СтавкаНДС", Ложь);
				НастройкиСопоставления.Вставить("ВидимостьКолонокСопоставления", ВидимостьКолонокСопоставления);
				
			ИначеЕсли СтрНайти(ПолученныеДанные[0].ВидДокумента, "_Ozon") > 0 Тогда
				ДополнительныеПараметрыПоиска.Вставить("Маркетплейс", Перечисления.ВидыМаркетплейсов.OZON);
				
				ДополнительныйРеквизит = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыйДополнительныйРеквизитСопоставления();
				ДополнительныйРеквизит.Имя = "КодМагазина";
				ДополнительныйРеквизит.Представление = "Код маркетплейса";
				НовыеКолонкиСопоставления.Добавить(ДополнительныйРеквизит);
				
				ВидимостьКолонокСопоставления = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеНастройкиВидимостиКолонокСопоставления();
				ВидимостьКолонокСопоставления.Вставить("ЕдиницаИзмерения", Ложь);
				ВидимостьКолонокСопоставления.Вставить("Упаковка", Ложь);
				ВидимостьКолонокСопоставления.Вставить("СтавкаНДС", Ложь);
				НастройкиСопоставления.Вставить("ВидимостьКолонокСопоставления", ВидимостьКолонокСопоставления);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НовыеКолонкиСопоставления.Количество() > 0 Тогда
			НастройкиСопоставления.Вставить("ДополнительныеРеквизитыСопоставления", НовыеКолонкиСопоставления);
		КонецЕсли;
		
		НастройкиСопоставления.Вставить("ДополнительныеПараметрыПоиска", ДополнительныеПараметрыПоиска);
		НастройкиСопоставления.Вставить("ОграничениеТипаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		НастройкиСопоставления.Вставить("ОтключитьПоискПоСловарю", Истина);
		НастройкиСопоставления.Вставить("ТочностьПоискаПоУмолчанию", 100);
		
		Результат.Вставить("НастройкиСопоставления", НастройкиСопоставления);
				
	КонецЕсли;
	
	Результат.Вставить("КоличествоФайлов", ПолученныеДанные.Количество());
		
	Возврат Результат;

КонецФункции // РазобратьПолученныеДанные()

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СписокНеСопоставленнойНоменклатуры(Знач Контрагент, Знач ДанныеФайлаРазбора) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СписокНеСопоставленнойНоменклатуры(Контрагент, ДанныеФайлаРазбора);
	
КонецФункции

Функция СписокНеСопоставленнойНоменклатурыПоСтруктуре(АдресХранилища, ИдентификаторФормы) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СписокНеСопоставленнойНоменклатурыПоСтруктуре(АдресХранилища, ИдентификаторФормы);
	
КонецФункции

Функция СоздатьЭлементыСправочникаПоДаннымКонтрагента(ДанныеДляСозданияЭлементовСправочника) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Создание элементов справочника по данным контрагентов'");
	
 	Возврат ДлительныеОперации.ВыполнитьВФоне("ЭлектронноеВзаимодействиеБП.СоздатьЭлементыСправочникаПоДаннымКонтрагентаВФоне",
		ДанныеДляСозданияЭлементовСправочника, ПараметрыВыполнения);

КонецФункции

Функция ДоступноСопоставлениеСоСправочникомОсновныеСредства() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	
КонецФункции

Функция ЗначенияЗаполненияНовогоЭлементаСправочника(ДанныеКонтрагента) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.ЗначенияЗаполненияНовогоЭлементаСправочника(ДанныеКонтрагента);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия,
														КодСобытия = 0,
														УровеньВажности = Неопределено,
														ОбъектМетаданных = Неопределено,
														ДанныеСсылка = Неопределено,
														РежимТранзакции = Неопределено)
	
	Уровень = "Общая подсистема";
	Если КодСобытия = 1 Тогда
		Уровень = "Обмен с банками";
	ИначеЕсли КодСобытия = 2 Тогда
		Уровень = "Обмен с контрагентами";
	ИначеЕсли КодСобытия = 3 Тогда
		Уровень = "Обмен с сайтами";
	ИначеЕсли КодСобытия = 4 Тогда
		Уровень = "Регламентные задания";
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие.%1'");
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Уровень);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

#Область ФормированиеВыписки

// см. Функцию ЭлектронноеВзаимодействиеБПВызовСервера.ПрочитанныеДанныеСервиса().
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище тестовых данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Процедура ПолучитьДанныеВыпискиБанка(Знач СообщениеОбмена,
										  СсылкаНаХранилище,
										  МассивСчетов = Неопределено)
	
	ПрочитанныеДанныеСервиса = ПрочитанныеДанныеСервиса(СообщениеОбмена, МассивСчетов);
	
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ПрочитанныеДанныеСервиса, Новый УникальныйИдентификатор());
	
КонецПроцедуры

Процедура ЗаполнитьШапкуВыписки(Организация, ДанныеВыписки, СтрокаТаблицыВыписок, МассивСчетов)
	
	Если ДанныеВыписки = Неопределено Тогда
		ДанныеВыписки = ОбменСБанкомВФормате1С.НовыйДанныеИзБанка();
	КонецЕсли;
	
	Индекс = 0;
	
	// Заголовок.1CClientBankExchange
	ДанныеВыписки.Заголовок.Вставить("ВерсияФормата", "1.03");
	ДанныеВыписки.Заголовок.Вставить("Кодировка", "Windows");
	
	МассивНомеровСчетов = Новый Массив;
	КоличествоВыписок = СтрокаТаблицыВыписок.Строки.Количество();
	Для ИндексВыписки = 0 По КоличествоВыписок - 1 Цикл
		Выписка = СтрокаТаблицыВыписок.Строки.Получить(ИндексВыписки);
		НомерСчета = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НомерСчета");
		МассивНомеровСчетов.Добавить(НомерСчета);
	КонецЦикла;
	
	ПерваяВыписка = СтрокаТаблицыВыписок.Строки.Получить(0);
	
	ДобавитьНеПустойПараметр(ДанныеВыписки.Заголовок, ПерваяВыписка, "Отправитель",
		"Выписки.НомерСтроки.Банк.Наименование");
	ДанныеВыписки.Заголовок.Вставить("Получатель");
	
	ДатаСоздания = ЗначениеРеквизитаВДереве(ПерваяВыписка,    "Выписки.НомерСтроки.ДатаФормирования");
	Если ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДанныеВыписки.Заголовок.Вставить("ДатаСоздания", Формат(ДатаСоздания, ФорматДатыРоссия()));
		ДанныеВыписки.Заголовок.Вставить("ВремяСоздания", Формат(ДатаСоздания, ФорматВремениРоссия()));
	КонецЕсли;
	
	ДатаНачала   = ЗначениеРеквизитаВДереве(ПерваяВыписка,    "Выписки.НомерСтроки.НачалоПериода");
	ДанныеВыписки.Заголовок.Вставить("ДатаНачала", Формат(ДатаНачала, ФорматДатыРоссия()));
	ПоследняяВыписка = СтрокаТаблицыВыписок.Строки.Получить(КоличествоВыписок - 1);
	ДатаКонца    = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.КонецПериода");
	ДанныеВыписки.Заголовок.Вставить("ДатаКонца", Формат(ДатаКонца, ФорматДатыРоссия()));
	
	ДополнительныеРеквизиты = Новый Структура("Владелец", Организация);
	
	МассивНомеровСчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНомеровСчетов);
	Для Каждого НомерСчета Из МассивНомеровСчетов Цикл
		СчетОрганизации = ОбщегоНазначенияБЭД.НайтиСсылку("БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
		МассивСчетов.Добавить(СчетОрганизации);
	КонецЦикла;
	
	// Остатки заполняем только в том случае, если это выписка по одному счету.
	Если МассивНомеровСчетов.Количество() = 1 Тогда
		ДанныеВыписки.Заголовок.Вставить("РасчСчет", НомерСчета);
		
		// СекцияРасчСчет
		ДанныеВыписки.Условия.РасчСчет.Добавить(НомерСчета);
		ДанныеВыписки.Условия.Вставить("ДатаНачала", Формат(ДатаНачала, ФорматДатыРоссия()));
		ДанныеВыписки.Условия.Вставить("ДатаКонца",  Формат(ДатаКонца,  ФорматДатыРоссия()));
		
		ЗаполнитьОстаткиИОбороты(ДанныеВыписки, СтрокаТаблицыВыписок, ПерваяВыписка, ПоследняяВыписка);
	Иначе
		ДанныеВыписки.Заголовок.Вставить("РасчСчет", МассивНомеровСчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиИОбороты(ДанныеВыписки, СтрокаТаблицыВыписок, ПерваяВыписка, ПоследняяВыписка)
	
	СтрокаОстатка = ДанныеВыписки.Остатки.Добавить();
	
	ЕстьОстатки = Ложь;
	НачальныйОстаток = ЗначениеРеквизитаВДереве(ПерваяВыписка, "Выписки.НомерСтроки.НачальныйОстаток");
	Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
		СтрокаОстатка.НачальныйОстаток = Формат(НачальныйОстаток, "ЧРД=.; ЧГ=");
		ЕстьОстатки = Истина;
	КонецЕсли;
	
	ВсегоПоступило = 0;
	ВсегоСписано = 0;
	
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		ТекВсегоПоступило = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотВходящихПлатежей");
		Если ЗначениеЗаполнено(ТекВсегоПоступило) Тогда
			ВсегоПоступило = ВсегоПоступило + ТекВсегоПоступило;
		КонецЕсли;
		ТекВсегоСписано = ЗначениеРеквизитаВДереве(Выписка,   "Выписки.НомерСтроки.ОборотИсходящихПлатежей");
		Если ЗначениеЗаполнено(ТекВсегоСписано) Тогда
			ВсегоСписано = ВсегоСписано + ТекВсегоСписано;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
		СтрокаОстатка.ВсегоПоступило = Формат(ВсегоПоступило, "ЧРД=.; ЧГ=");
		ЕстьОстатки = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВсегоСписано) Тогда
		СтрокаОстатка.ВсегоСписано = Формат(ВсегоСписано, "ЧРД=.; ЧГ=");
		ЕстьОстатки = Истина;
	КонецЕсли;
	
	КонечныйОстаток = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.КонечныйОстаток");
	Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
		СтрокаОстатка.КонечныйОстаток = Формат(КонечныйОстаток, "ЧРД=.; ЧГ=");
		ЕстьОстатки = Истина;
	КонецЕсли;
	
	Если ЕстьОстатки Тогда
		СтрокаОстатка.РасчСчет   = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.НомерСчета");
		СтрокаОстатка.ДатаНачала = ЗначениеРеквизитаВДереве(ПерваяВыписка,    "Выписки.НомерСтроки.НачалоПериода");
		СтрокаОстатка.ДатаКонца  = ЗначениеРеквизитаВДереве(ПоследняяВыписка, "Выписки.НомерСтроки.КонецПериода");
	Иначе
		ДанныеВыписки.Остатки.Удалить(СтрокаОстатка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДокумент(ДанныеВыписки, Операция, ОписаниеОбменаВФормате1С, Индекс)
	
	Документ = ДанныеВыписки.Документы.Добавить();
	
	СекцияДокумент = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидДокумента");
	Документ.Вид   = СекцияДокумент;
	
	ДобавитьНеПустойПараметр(Документ, Операция, "ИдентификаторДокумента",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ИдентификаторДокумента");
	
	Номер          = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	Документ.Номер = Номер;
	
	Дата           = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	Документ.Дата  = Дата;
	
	Сумма          = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	Документ.Сумма = Формат(Сумма, "ЧРД=.; ЧГ=");
	
	ДобавитьПлательщикаИПолучателя(Документ, Операция, ОписаниеОбменаВФормате1С);
	
	ДобавитьНеПустойПараметр(Документ, Операция, "ВидПлатежа",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ДобавитьНеПустойПараметр(Документ, Операция, "ВидОплаты",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
	ДобавитьНеПустойПараметр(Документ, Операция, "Код",
		"Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ДобавитьНеПустойПараметр(Документ, Операция, "КодНазПлатежа",
		"Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода");
	
	ДобавитьНазначениеПлатежа(Документ, Операция);
	
	ДобавитьБюджетныеРеквизиты(Документ, Операция);
	
	ДобавитьНеПустойПараметр(Документ, Операция, "Очередность",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Очередность");
	
	ДобавитьДанныеПлатежногоТребования(Документ, Операция);
	
	Документ.Идентификатор = Формат(Индекс, "ЧН=0; ЧГ=;");
	Индекс = Индекс + 1;
	
КонецПроцедуры

Процедура ДобавитьДанныеПлатежногоТребования(Документ, Операция)
	
	СтруктурированноеНазначениеПлатежа = Документ.СтруктурированноеНазначениеПлатежа;
	
	СрокАкцепта = ЗначениеРеквизитаВДереве(Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.СрокАкцепта");
	Если ЗначениеЗаполнено(СрокАкцепта) Тогда
		СтруктурированноеНазначениеПлатежа.Вставить("СрокАкцепта", Формат(СрокАкцепта, "ЧДЦ=0; ЧГ="));
	КонецЕсли;
	
	ДобавитьНеПустойПараметр(СтруктурированноеНазначениеПлатежа, Операция, "ДатаОтсылкиДок",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.ДатаОтсылки");
	
	УсловиеОплаты = ЗначениеРеквизитаВДереве(Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.УсловиеОплаты");
	МассивПодстрок = СтрРазделить(УсловиеОплаты, Символы.ПС + Символы.ВК, Ложь);
	Индекс = 1;
	Для Каждого Строка Из МассивПодстрок Цикл
		СтруктурированноеНазначениеПлатежа.Вставить("УсловиеОплаты" + Индекс, Строка);
		Индекс = Индекс + 1;
		Если Индекс > 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПлательщикаИПолучателя(Документ, Операция, ОписаниеОбменаВФормате1С)
	
	ДанныеЭД = Новый Структура;
	
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикСчет",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет", , Истина);
	
	НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
	
	ДатаОперации = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
	Если НаправлениеПлатежа = "1" Тогда
		ДанныеЭД.Вставить("ДатаСписано", ДатаОперации);
	КонецЕсли;
	
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "Плательщик",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.НаименованиеМеждународное", Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикИНН",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикКПП",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикРасчСчет",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикБанк1",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.НаименованиеМеждународное");
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикБанк2",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПлательщикБИК",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.SWIFT", Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция,
		"Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет", "ПлательщикКорсчет", , Истина);
	
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательСчет",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	
	Если НаправлениеПлатежа = "2" Тогда
		ДанныеЭД.Вставить("ДатаПоступило", ДатаОперации);
	КонецЕсли;
	
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "Получатель",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.НаименованиеМеждународное", Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательИНН",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательКПП",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательРасчСчет",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательБанк1",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.НаименованиеМеждународное", Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательБанк2",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город", , Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательБИК",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.SWIFT", Истина);
	ДобавитьНеПустойПараметр(ДанныеЭД, Операция, "ПолучательКорсчет",
		"Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет", , Истина);
	
	ЗаполнитьЗначенияСвойств(Документ, ДанныеЭД);
	
	Для Каждого Участник Из ОписаниеОбменаВФормате1С.Участники Цикл
		Для Каждого КлючИЗначение Из ДанныеЭД Цикл
			РазделДанных = Участник + "Реквизиты";
			ОтборПравила = Новый Структура;
			ОтборПравила.Вставить("Тег",          ВРег(КлючИЗначение.Ключ));
			ОтборПравила.Вставить("РазделДанных", РазделДанных);
			Правила = ОписаниеОбменаВФормате1С.ОписаниеФайлаОбмена.ПравилаРазмещенияДанныхОДокументах.НайтиСтроки(ОтборПравила);
			Если Правила.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = Правила[0].ИмяЭлемента;
			Если ОписаниеОбменаВФормате1С.РеквизитыУчастника.Найти(ИмяРеквизита) <> Неопределено Тогда
				Документ[РазделДанных].Вставить(ИмяРеквизита, ДанныеЭД[КлючИЗначение.Ключ]);
				Если ИмяРеквизита = "НаименованиеРасширенное" Тогда
					Документ[РазделДанных].Вставить("Наименование", ДанныеЭД[КлючИЗначение.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбменСБанкомВФормате1С.ИсправитьОшибкиУчастникаСчет(Документ, "Плательщик");
	ОбменСБанкомВФормате1С.ИсправитьОшибкиУчастникаСчет(Документ, "Получатель");
	
КонецПроцедуры

Процедура ДобавитьБюджетныеРеквизиты(Документ, Операция)
	
	РеквизитыПлатежаВБюджет = Документ.РеквизитыПлатежаВБюджет;
	
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "СтатусСоставителя",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.СтатусСоставителя");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательКБК",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательКБК");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ОКАТО",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ОКТМО");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательОснования",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательОснования");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательПериода",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательПериода");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательНомера",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательНомера");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательДаты",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательДаты");
	ДобавитьНеПустойПараметр(РеквизитыПлатежаВБюджет, Операция, "ПоказательТипа",
		"Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.КодВыплат");
	
КонецПроцедуры

Процедура ДобавитьНазначениеПлатежа(Документ, Операция)
	
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
	НазначениеПлатежаОднойСтрокой = СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, "");
	Документ.НазначениеПлатежа = НазначениеПлатежаОднойСтрокой;
	
КонецПроцедуры

Процедура ДобавитьНеПустойПараметр(Коллекция, ДеревоРазбора, ИмяПараметра, Путь, ПутьМеждународный = "", ОчиститьНули = Ложь)
	
	ЗначениеПараметра = ЗначениеРеквизитаВДереве(ДеревоРазбора, Путь);
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) И Не ПустаяСтрока(ПутьМеждународный) Тогда
		ЗначениеПараметра = ЗначениеРеквизитаВДереве(ДеревоРазбора, ПутьМеждународный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Если СтрНачинаетсяС(ВРег(ИмяПараметра), "НАЗНАЧЕНИЕПЛАТЕЖА") Тогда
			ЗначениеПараметра = ЗаменитьПереносыСтроки(ЗначениеПараметра);
		Иначе
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ВК, "");
		КонецЕсли;
		
		Если ТипЗнч(Коллекция) = Тип("Структура") И Не Коллекция.Свойство(ИмяПараметра) Тогда
			Коллекция.Вставить(ИмяПараметра);
		КонецЕсли;
		
		Если ОчиститьНули Тогда
			ОбменСБанкомВФормате1С.ОчиститьТолькоНулиВСтроке(ЗначениеПараметра);
		КонецЕсли;
		
		Коллекция[ИмяПараметра] = ЗначениеПараметра;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита)
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, Ложь);
	
КонецФункции

// Возвращает формат даты для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат даты для России
//
Функция ФорматДатыРоссия()
	
	Возврат "ДФ=dd.MM.yyyy";
	
КонецФункции

// Возвращает формат временем для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат времени для России
//
Функция ФорматВремениРоссия()
	
	Возврат "HH:mm:ss";
	
КонецФункции

Функция ЗаменитьПереносыСтроки(ТекстРеквизита)
	
	// Заменим совокупность символов переноса строки ПС+ВК на пробел.
	// Совокупность ПС+ВК принята в Windows, но платформой в Windows определяется как один символ ПС.
	// Но в других ОС, скорее всего, эта совокупность будет определяться как 2 разных символа.
	ТекстРеквизита = СтрЗаменить(ТекстРеквизита, Символы.ПС + Символы.ВК, " ");
	// Если предыдущая замена не сработала, то заменим какждый спецсимвол отдельно.
	// В разных ОС будет сформирован (и виден) какой-то один из них.
	ТекстРеквизита = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		Символы.ПС + Символы.ВК,
		ТекстРеквизита,
		"  ");
	
	Возврат ТекстРеквизита;
	
КонецФункции

// Получает выписку банка в коллекцию ОбменСБанкомВФормате1С.НовыйДанныеИзБанка(),
// а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Функция ПрочитанныеДанныеСервиса(Знач СообщениеОбмена, МассивСчетов = Неопределено) Экспорт
	
	ДанныеВыписки = ОбменСБанкомВФормате1С.НовыйДанныеИзБанка();
	ПрочитанныеДанныеСервиса = Новый Структура;
	ПрочитанныеДанныеСервиса.Вставить("ДанныеИзБанка", ДанныеВыписки);
	ПрочитанныеДанныеСервиса.Вставить("Протокол", ОбменСБанкомВФормате1С.НовыйПротоколЧтенияФайла());
	
	Если ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		МассивСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеОбмена);
	Иначе
		МассивСообщений = СообщениеОбмена;
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(МассивСообщений, ДеревоДанных);
	
	Если ДеревоДанных = Неопределено Тогда
		Возврат ПрочитанныеДанныеСервиса;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	
	СтрокаТаблицыВыписок = ДеревоДанных.Строки.Найти("Выписки", "ПолныйПуть");
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивСообщений.Получить(0), "Организация");
	ЗаполнитьШапкуВыписки(Организация, ПрочитанныеДанныеСервиса.ДанныеИзБанка, СтрокаТаблицыВыписок, МассивСчетов);
	
	// Реквизиты плательщика и получателя
	ОписаниеОбменаВФормате1С = Новый Структура("Участники, РеквизитыУчастника, ОписаниеФайлаОбмена");
	ОписаниеОбменаВФормате1С.Участники           = ОбменСБанкомВФормате1С.НовыйУчастники();
	ОписаниеОбменаВФормате1С.РеквизитыУчастника  = ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника();
	ОписаниеОбменаВФормате1С.ОписаниеФайлаОбмена = ОбменСБанкомВФормате1С.ОписаниеФайлаОбмена();
	
	Индекс = 0;
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		
		Если СтрокаОперацияВыписки.Значение = Неопределено Или СтрокаОперацияВыписки.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
			ДобавитьДокумент(ПрочитанныеДанныеСервиса.ДанныеИзБанка, Операция, ОписаниеОбменаВФормате1С, Индекс);
		КонецЦикла;
	КонецЦикла;
	
	ОбменСБанкомВФормате1С.ЗаписатьВПротокол(ПрочитанныеДанныеСервиса.Протокол, Истина, "ЭлектроннаяВыписка");
	
	Возврат ПрочитанныеДанныеСервиса;
	
КонецФункции

#КонецОбласти

// После обновления БЭД использовать ОбменСБанками.ПолучитьИдентификаторыЭДДокументов()
// Получает идентификаторы актуальных электронных документов для документов ИБ.
//
// Параметры:
//  МассивОбъектов - Массив - документы, для которых требуется получить статусы
//    * ДокументСсылка - ссылка на документ информационной базы
//
// Возвращаемое значение
//  Массив - актуальные электронные документы для документов ИБ из первого параметра
//    * Строка - идентификатор актуального электронного документа,
//    * Неопределено - нет актуального электронного документа для документа информационной базы.
//
Функция ПолучитьИдентификаторыЭДДокументов(МассивОбъектов) Экспорт
	
	МассивИдентификаторовЭД = Новый Массив;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат МассивИдентификаторовЭД;
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		ТаблицаДокументов.Добавить().Документ = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СсылкиНаДокументы.Документ КАК Документ,
	|	АВТОНОМЕРЗАПИСИ() КАК Автономер
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	&СсылкиНаДокументы КАК СсылкиНаДокументы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА СостоянияОбменСБанками.СообщениеОбмена ЕСТЬ NULL
	|				ИЛИ СостоянияОбменСБанками.СообщениеОбмена = ЗНАЧЕНИЕ(Документ.СообщениеОбменСБанками.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СостоянияОбменСБанками.СообщениеОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
	|			ТОГДА СостоянияОбменСБанками.СообщениеОбмена.Идентификатор
	|		ИНАЧЕ СостоянияОбменСБанками.СообщениеОбмена.ВнешнийИдентификатор
	|	КОНЕЦ КАК ИдентификаторЭД,
	|	Документы.Автономер КАК Автономер
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО Документы.Документ = СостоянияОбменСБанками.СсылкаНаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Автономер";
	
	Запрос.УстановитьПараметр("СсылкиНаДокументы", ТаблицаДокументов);
	
	МассивИдентификаторовЭД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЭД");
	
	Возврат МассивИдентификаторовЭД;
	
КонецФункции

#КонецОбласти
