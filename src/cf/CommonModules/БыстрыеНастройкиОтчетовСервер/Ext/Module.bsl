#Область ПрограммныйИнтерфейс

// Добавляет на переданную форму отчета поля быстрого отбора.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//   ГруппыНастроек - Структура - в качестве ключа передается вид настройки "Отбор" или "Оформление",
//   в качестве значения передается ссылка на группу формы, в которой размещаются элементы настройки.
//   ДанныеЗаполнения - Структура - содержит данные заполнения для добавляемых полей.
//
Процедура ПоказатьБыстрыеНастройкиНаСервере(Форма, ГруппыНастроек, ДанныеЗаполнения = Неопределено) Экспорт
	
	БыстрыеНастройки = БыстрыеНастройкиОтчета(Форма);
	Группа = Неопределено;
	
	Если ГруппыНастроек.Свойство("Отбор", Группа) Тогда
		ДобавитьЭлементыОтбораВГруппуБыстрыхНастроек(Форма, БыстрыеНастройки.Отбор, Группа, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ГруппыНастроек.Свойство("Оформление", Группа) Тогда
		УправлениеВидимостьюЭлементовОформления(Форма, БыстрыеНастройки.Оформление);
	КонецЕсли;
	
КонецПроцедуры

// Очищает отбор по имени реквизита
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//   ИмяРеквизита - Строка - Имя очищаемого поля отбора.
//
Процедура ОчиститьОтборНаСервере(Форма, ИмяРеквизита) Экспорт
	
	Отчет          = Форма.Отчет;
	ИмяПоляОтбора  = Форма.СоответствиеПолейОтчетаИРеквизитов[ИмяРеквизита];
	
	ПоляОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	НайденноеПолеОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из ПоляОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора) Тогда
			НайденноеПолеОтбора = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Очищать нечего
	Если НайденноеПолеОтбора = Неопределено 
		Или НайденноеПолеОтбора.ПравоеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеПолеОтбора.ПравоеЗначение = ПустоеЗначениеТипа(ТипЗнч(НайденноеПолеОтбора.ПравоеЗначение));
	НайденноеПолеОтбора.Использование = Ложь;
	
КонецПроцедуры

// Устанавливает значение отбора по имени реквизита
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//   ГруппаБыстрыхОтборов - Структура - в качестве ключа передается вид настройки "Отбор", в качестве
//   значения передается ссылка на группу формы, в которой размещаются элементы отбора.
//   ИмяРеквизита - Строка - Имя очищаемого поля отбора.
//   ДанныеЗаполнения - Структура - содержит данные заполнения для добавляемых полей.
//
Процедура УстановитьОтборПриИзмененииНаСервере(Форма, ГруппаБыстрыхОтборов, ИмяРеквизита, ДанныеЗаполнения = Неопределено) Экспорт

	Схема = ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	
	ВариантНастройки = ВариантНастройкиПоКлючу(Схема, Форма.КлючТекущегоВарианта);
	Если ВариантНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет              = Форма.Отчет;
	ИмяПоляОтбора      = Форма.СоответствиеПолейОтчетаИРеквизитов[ИмяРеквизита];
	ЗначениеОтбора     = Форма[ИмяРеквизита];
	ПолеКомпоновки     = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	
	ВидСравненияОтбора = ВидСравненияИзСхемыКомпоновки(ВариантНастройки, ПолеКомпоновки, ЗначениеОтбора);

	ПоляОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	НайденноеПолеБыстрогоОтбора = Неопределено;
	УдаляемыеПоля = Новый Массив;
	Для Каждого ЭлементОтбора Из ПоляОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Если НайденноеПолеБыстрогоОтбора = Неопределено Тогда
				НайденноеПолеБыстрогоОтбора = ЭлементОтбора;
			Иначе
				УдаляемыеПоля.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Отбор Из УдаляемыеПоля Цикл
		ПоляОтбора.Удалить(Отбор);
	КонецЦикла;
	
	Если НайденноеПолеБыстрогоОтбора = Неопределено Тогда
		НайденноеПолеБыстрогоОтбора = ПоляОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НайденноеПолеБыстрогоОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	КонецЕсли;

	НайденноеПолеБыстрогоОтбора.ВидСравнения = ВидСравненияОтбора;
	
	НайденноеПолеБыстрогоОтбора.Использование = ЗначениеЗаполнено(ЗначениеОтбора);
	НайденноеПолеБыстрогоОтбора.ПравоеЗначение = ЗначениеОтбора;
	ПоказатьБыстрыеНастройкиНаСервере(Форма, ГруппаБыстрыхОтборов, ДанныеЗаполнения);

КонецПроцедуры

// Возвращает структуру, содержащую в качестве ключа имя поля отбора, а в качестве данных заполнения список
// возможных значений
//
// Параметры:
//   ПоляОтбора - Массив - содержит имена полей отбора.
//   Организация - СправочникСсылка.Организация - организация, для которой формируется отчет.
//
// Возвращаемое значение:
// ДанныеЗаполнения - Структура
//
Функция ЗаполнитьДанныеЗаполнения(ПоляОтбора, Организация = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Для Каждого ИмяПоля Из ПоляОтбора Цикл
		Если ИмяПоля = "ВидДвижения" Тогда
			ДанныеЗаполнения.Вставить(ИмяПоля, ДанныеЗаполненияВидДвижения());
		ИначеЕсли ИмяПоля = "Размещение" Тогда
			ДанныеЗаполнения.Вставить(ИмяПоля, ДанныеЗаполненияРазмещение(Организация));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает представление интерфейса
//
// Возвращаемое значение:
// Строка - Представление интерфейса
//
Функция ПредставлениеИнтерфейса() Экспорт
	
	Если Константы.ИнтерфейсТакси.Получить() Тогда
		Возврат НСтр("ru = 'полный'");
	ИначеЕсли Константы.ИнтерфейсТаксиПростой.Получить() Тогда
		Возврат НСтр("ru = 'простой'");
	ИначеЕсли Константы.ИнтерфейсВерсии77.Получить() Тогда
		Возврат НСтр("ru = 'аналогичный 1С:Бухгалтерии 7.7'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Переключает настройки оформления
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//   ИмяПараметраОформления - Строка - Имя параметра оформления.
//
Процедура ПереключитьНастройкуОформления(Форма, ИмяПараметраОформления) Экспорт
	
	Отчет = Форма.Отчет;
	УсловноеОформление = Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	
	ИмяНастройки = "";
	РежимОкругленияСумм = ОкруглениеСуммДоЦелых();
	
	Если ИмяПараметраОформления = ПараметрОтрицательноеКрасным() Тогда
		ИмяНастройки = ОтрицательноеКрасным();
	ИначеЕсли ИмяПараметраОформления = ПараметрОкруглениеСумм() Тогда
		ИмяНастройки = Округлять();
		РежимОкругленияСумм = Форма[ИмяПараметраОформления];
	КонецЕсли;
	
	НастройкаНайдена = Ложь;
	Для Каждого ЭлементОформления Из УсловноеОформление Цикл
		
		Если СтрНайти(ВРег(ЭлементОформления.Представление), ВРег(ИмяНастройки)) <> 0 Тогда
			Если ИмяНастройки = Округлять() Тогда
				Использование = СтрНайти(ВРег(ЭлементОформления.Представление),
					ПредставлениеНастройки(РежимОкругленияСумм)) <> 0;
				ЭлементОформления.Использование = Использование;
				Если Использование Тогда
					НастройкаНайдена = Истина;
				КонецЕсли;
			Иначе
				ЭлементОформления.Использование = Форма[ИмяПараметраОформления];
				НастройкаНайдена = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НастройкаНайдена Тогда
		ДобавитьНастройкуОформления(Форма, ИмяПараметраОформления);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, выбрана ли настройка оформления, которая округляет суммы до тысяч.
//
// Параметры:
//   НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройка компоновки данных отчета.
//
// Возвращаемое значение:
// Булево - Истина, если используется настройка "Округлять до тысяч руб."
//
Функция РежимОкругленияСуммВТысячах(НастройкиКомпоновкиДанных) Экспорт
	
	Если НастройкиКомпоновкиДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РежимОкругленияДоТысяч = Ложь;
	Для Каждого Элемент Из НастройкиКомпоновкиДанных.УсловноеОформление.Элементы Цикл
		
		Если ЭтоНастройкаОкруглятьДоТысяч(Элемент.Представление)
			И Элемент.Использование Тогда
			РежимОкругленияДоТысяч = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РежимОкругленияДоТысяч
	
КонецФункции

// Вызывается из обработчика ПриСозданииНаСервере формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Отчет     = Форма.Отчет;
	Элементы = Форма.Элементы;

	Для Каждого ЭлементСписка Из Элементы.МакетОформления.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(Элементы.МакетОформленияБыстрыеНастройки.СписокВыбора.Добавить(), ЭлементСписка);
	КонецЦикла;

	Форма.СоответствиеПолейОтчетаИРеквизитов = Новый Структура;
	Отчет.ФормироватьОтчетПриИзмененииНастроек = Истина;
	
КонецПроцедуры

// Вставляет примечание об округлении в отчете
//
// Параметры:
//   ПараметрыОтчета - Структура - содержит параметры формируемого отчета.
//   Результат - ТабличныйДокумент - результат отчета.
//
Процедура ВывестиПримечанияОкругления(ПараметрыОтчета, Результат) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ВыводитьПримечанияОкругления", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьНачала = Результат.Области.Найти("НастройкиИОтбор");
	Если ОбластьНачала = Неопределено 
		И ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ОбластьНачала = Результат.Области.Найти("Заголовок");
	КонецЕсли;
	Если ОбластьНачала <> Неопределено Тогда
		НачалоТаблицы = ОбластьНачала.Низ + 1;
	Иначе
		НачалоТаблицы = 1;
	КонецЕсли;

	Если Результат.ФиксацияСверху > 0 Тогда
		Результат.ФиксацияСверху = Результат.ФиксацияСверху + 1;
	КонецЕсли;
	
	Примечания = ПолучитьОбщийМакет("ОбщиеОбластиФиксированныйМакет");
	
	ИмяОбласти = "ПримечаниеОкруглениеДоТысяч";
	
	Примечание = Примечания.Область(ИмяОбласти);
		
	Результат.ВставитьОбласть(Примечание,
		Результат.Область(СтрШаблон("R%1", Формат(НачалоТаблицы, "ЧГ=0"))),
		ТипСмещенияТабличногоДокумента.ПоГоризонтали,
		Истина);
	
КонецПроцедуры

// Проверяет, используется ли режим округления "До тысяч" и если да возвращает Истина
//
// Параметры:
//   ОкруглениеСумм - Строка - режим округления сумм в отчете.
//
// Возвращаемое значение:
// Булево - результат проверки режима округления
//
Функция ЭтоОкруглениеСуммДоТысяч(ОкруглениеСумм) Экспорт
	
	Возврат ОкруглениеСумм = ОкруглениеСуммДоТысяч();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция БыстрыеНастройкиОтчета(Форма)
	
	БыстрыеНастройки = Новый Структура;
	БыстрыеОтборы = БыстрыеОтборыОтчета(Форма);
	БыстроеОформление = БыстроеОформление(Форма);
	БыстрыеНастройки.Вставить("Отбор", БыстрыеОтборы);
	БыстрыеНастройки.Вставить("Оформление", БыстроеОформление);

	Возврат БыстрыеНастройки;
	
КонецФункции

Функция БыстрыеОтборыОтчета(Форма)
	
	Отчет                         = Форма.Отчет;
	НастройкиОтборы               = Отчет.КомпоновщикНастроек.Настройки.Отбор;
	ПредопределенныеБыстрыеОтборы = СписокБыстрыхОтборов(Форма.КлючТекущегоВарианта, Форма.СхемаКомпоновкиДанных);
	
	БыстрыеОтборы = Новый Массив;
	
	Для Каждого ЭлементБыстрогоОтбора Из ПредопределенныеБыстрыеОтборы Цикл
		
		НайденныйЭлементОтбора = НайтиЭлементОтбора(НастройкиОтборы, ЭлементБыстрогоОтбора);
		
		Если НайденныйЭлементОтбора = Неопределено Тогда
			НайденныйЭлементОтбора = НастройкиОтборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлементОтбора.ЛевоеЗначение = ЭлементБыстрогоОтбора;
			НайденныйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НайденныйЭлементОтбора.Использование = Ложь;
		КонецЕсли;
		БыстрыеОтборы.Добавить(НайденныйЭлементОтбора);
		
	КонецЦикла;

	Возврат БыстрыеОтборы;
	
КонецФункции

Процедура ДобавитьРеквизиты(Форма, Отбор)
	
	Отчет = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	ТипыЭлементовСписказначений = Новый Структура;
	РеквизитыФормы = РеквизитыФормы(Форма);
	
	ЗначениеОтборов = Новый Структура;
	
	Для Каждого Настройка Из Отбор Цикл
		
		Если ТипЗнч(Настройка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДобавитьРеквизиты(Форма, Настройка.Элементы);
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(Настройка.ЛевоеЗначение);
		ИмяРеквизита = СтрЗаменить(ИмяПоля, ".", "");
		
		ДоступноеПоле = ДоступноеПолеОтбора(Отчет, Настройка.ЛевоеЗначение);
		
		Если ДоступноеПоле <> Неопределено Тогда
			ТипРеквизита = ДоступноеПоле.ТипЗначения;
			ЗаголовокПоля = ДоступноеПоле.Заголовок;
		Иначе
			ЗаголовокПоля = Строка(Настройка.ЛевоеЗначение);
			ТипРеквизита = Новый ОписаниеТипов(Строка(ТипЗнч(Настройка.ПравоеЗначение)));
		КонецЕсли;
		
		НайденныйРеквизит = РеквизитыФормы.Найти(ИмяРеквизита);
		ДобавитьРеквизит = Ложь;
		Если НайденныйРеквизит <> Неопределено Тогда

			Если Настройка.Использование Тогда
				ЗначениеОтборов.Вставить(ИмяРеквизита, Настройка.ПравоеЗначение);
			Иначе
				Если ТипРеквизита.Типы().Количество() > 0 Тогда
					ЗначениеОтборов.Вставить(ИмяРеквизита, ПустоеЗначениеТипа(ТипРеквизита.Типы()[0]));
				КонецЕсли;
			КонецЕсли;
			
			Реквизиты = Форма.ПолучитьРеквизиты();
			Элемент = Элементы.Найти(ИмяРеквизита);
			Если Элемент <> Неопределено Тогда
				Элементы.Удалить(Элемент);
			КонецЕсли;
			
			Для Каждого Реквизит Из Реквизиты Цикл
				Если Реквизит.Имя = ИмяРеквизита И Реквизит.ТипЗначения <> ТипРеквизита Тогда
					УдаляемыеРеквизиты.Добавить(ИмяРеквизита); // Удалим реквизит со старым видом сравненеия
					ДобавитьРеквизит = РеквизитНеДобавлен(ИмяРеквизита, ДобавляемыеРеквизиты);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДобавитьРеквизит = РеквизитНеДобавлен(ИмяРеквизита, ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Если ДобавитьРеквизит Тогда
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита,, ЗаголовокПоля);
			Если Настройка.Использование Тогда
				ЗначениеОтборов.Вставить(ИмяРеквизита, Настройка.ПравоеЗначение);
			КонецЕсли;
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0
		Или УдаляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

	Для Каждого ЭлементСписказначенийФормы Из ТипыЭлементовСпискаЗначений Цикл
		Форма[ЭлементСписказначенийФормы.Ключ].ТипЗначения = ЭлементСписказначенийФормы.Значение;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(Форма, ЗначениеОтборов);

КонецПроцедуры

Функция ПустоеЗначениеТипа(ТипЗначения)
	Возврат ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗначения);
КонецФункции

Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Массив;
	
	Для Каждого Реквизиты Из Форма.ПолучитьРеквизиты() Цикл
		
		РеквизитыФормы.Добавить(Реквизиты.Имя);
		
	КонецЦикла;
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция ЭтоСложныйОтбор(Отборы, ПолеПоиска)
	
	КоличествоПолей = 0;

	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭтоСложныйОтбор = ЭтоСложныйОтбор(ЭлементОтбора.Элементы, ПолеПоиска);
			Иначе
				Продолжить;
			КонецЕсли;
			Если ЭтоСложныйОтбор Тогда
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеПоиска И ЭлементОтбора.Использование Тогда
			КоличествоПолей = КоличествоПолей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПолей > 1;
	
КонецФункции

Функция ДоступноеПолеОтбора(Отчет, ПолеОтбора)
	Возврат Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора);
КонецФункции

Функция ВариантНастройкиПоКлючу(Схема, КлючВарианта)

	ВариантНастройки = Неопределено;
	Для Каждого ВариантНастройкиИзСхемы Из Схема.ВариантыНастроек Цикл
		
		Если ВариантНастройкиИзСхемы.Имя = КлючВарианта Тогда
			ВариантНастройки = ВариантНастройкиИзСхемы;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ВариантНастройки;
	
КонецФункции 

Функция ВидСравненияИзСхемыКомпоновки(ВариантНастройки, ПолеКомпоновки, ЗначениеОтбора)
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	ОтборИзСхемы = ВариантНастройки.Настройки.Отбор.Элементы;
	НастройкаИзСхемы = Ложь;
	
	Если ЭтоГруппа(ЗначениеОтбора) Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
	Иначе
		Для Каждого ЭлементОтбораИзСхемы Из ОтборИзСхемы Цикл
			Если ЭлементОтбораИзСхемы.ЛевоеЗначение = ПолеКомпоновки Тогда
				ВидСравненияОтбора = ЭлементОтбораИзСхемы.ВидСравнения;
				НастройкаИзСхемы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НастройкаИзСхемы И ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ВидСравненияОтбора;
	
КонецФункции

Функция НовыйЭлемент(Форма, Настройка, ПараметрыЭлемента)
	
	Элементы             = Форма.Элементы;
	ДанныеЗаполненияПоля = Неопределено;
	Группа               = ПараметрыЭлемента.Группа;
	ДанныеЗаполнения     = ПараметрыЭлемента.ДанныеЗаполнения;
	ДоступноеПоле        = ПараметрыЭлемента.ДоступноеПоле;
	ОписаниеТипаЗначения = ПараметрыЭлемента.ОписаниеТипаЗначения;
	СвязьПоТипу          = ПараметрыЭлемента.СвязьПоТипу;
	ИмяПоля              = Строка(Настройка.ЛевоеЗначение);
	
	ИмяРеквизита = СтрЗаменить(ИмяПоля, ".", "");
	
	НовыйЭлемент = Элементы.Найти(ИмяРеквизита);
	
	Если НовыйЭлемент = Неопределено Тогда
		
		НовыйЭлемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ОграничениеТипа = ОписаниеТипаЗначения;
		НовыйЭлемент.ПутьКДанным = ИмяРеквизита;
		Если ЗначениеЗаполнено(СвязьПоТипу) И Не ПустаяСтрока(СвязьПоТипу.ПутьКДанным) Тогда
			НовыйЭлемент.СвязьПоТипу = Новый СвязьПоТипу(СвязьПоТипу.ПутьКДанным, СвязьПоТипу.ЭлементСвязи);
			Владелец = Форма[СвязьПоТипу.ПутьКДанным];
			Значение = Форма[ИмяРеквизита];
			Если ЗначениеЗаполнено(Владелец) И Владелец <> Значение.Владелец Тогда
				ОчиститьОтборНаСервере(Форма, ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_УстановитьОтборПриИзменении");
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.КнопкаОчистки = Истина;
		НовыйЭлемент.УстановитьДействие("Очистка", "Подключаемый_ОчисткаОтбора");
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		
		Форма.СоответствиеПолейОтчетаИРеквизитов.Вставить(ИмяРеквизита, ИмяПоля);
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ОписаниеТипаЗначения.Типы()[0]) Тогда
			НовыйЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы; 
		КонецЕсли;
		
		Если ДанныеЗаполнения <> Неопределено Тогда
			ДанныеЗаполнения.Свойство(ИмяПоля, ДанныеЗаполненияПоля);
		КонецЕсли;

		Если ДоступноеПоле.ДоступныеЗначения <> Неопределено И ДанныеЗаполненияПоля = Неопределено Тогда
			ДанныеЗаполненияПоля = Новый СписокЗначений;
			ДанныеЗаполненияПоля.ЗагрузитьЗначения(ДоступноеПоле.ДоступныеЗначения.ВыгрузитьЗначения());
		КонецЕсли;
		
		Если ДанныеЗаполненияПоля <> Неопределено 
			И ДанныеЗаполненияПоля.Количество() > 0  Тогда
			НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(ДанныеЗаполненияПоля.ВыгрузитьЗначения());
			НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДанныеЗаполненияВидДвижения()

	ВидДвиженияДоступныеЗначения = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Наименование КАК ВидДвижения
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|
		|СГРУППИРОВАТЬ ПО
		|	Хозрасчетный.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Розничная выручка""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Расчеты с подотчетными лицами (выдано)""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Расчеты с подотчетными лицами (возвращено)""
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДвижения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидДвиженияДоступныеЗначения.Добавить(Выборка.ВидДвижения);
	КонецЦикла;
	
	Возврат ВидДвиженияДоступныеЗначения;

КонецФункции

Функция ДанныеЗаполненияРазмещение(Организация)
	
	ПоВсемОрганизациям = Ложь;
	Если Организация.Пустая() Тогда
		ПоВсемОрганизациям = Истина;
	КонецЕсли;

	РазмещениеДоступныеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаКассыОрганизации
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаКассыОрганизации.Счет.Наименование КАК Размещение
		|ИЗ
		|	СчетаКассыОрганизации КАК СчетаКассыОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Наименование
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	(БанковскиеСчета.Владелец = &Организация
		|			ИЛИ &ПоВсемОрганизациям
		|				И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации)
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|	И НЕ ФизическиеЛица.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Наименование
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = НЕОПРЕДЕЛЕНО
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РазмещениеДоступныеЗначения.Добавить(Выборка.Размещение);
	КонецЦикла;

	Возврат РазмещениеДоступныеЗначения;
	
КонецФункции

Функция СписокБыстрыхОтборов(КлючВарианта, СхемаКомпоновкиДанных)
	
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ПоляОтбора = Неопределено;
	Для Каждого ВариантНастроек Из Схема.ВариантыНастроек Цикл
		Если ВариантНастроек.Имя = КлючВарианта Тогда
			ПоляОтбора = ВариантНастроек.Настройки.Отбор.Элементы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОтбора = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	БыстрыеОтборы = Новый Массив;
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		
		Если ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			Или ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			Или ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
			
			БыстрыеОтборы.Добавить(ПолеОтбора.ЛевоеЗначение);
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(БыстрыеОтборы);
	
КонецФункции

Функция ЭтоГруппа(ЗначениеОтбора)
		
		Возврат ЗначениеЗаполнено(ЗначениеОтбора)
			И (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора))
			И ЗначениеОтбора.ЭтоГруппа)
			Или ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора));
			
КонецФункции

Функция РеквизитНеДобавлен(ИмяРеквизита, ДобавляемыеРеквизиты)
	
	Для Каждого РеквизитФормы Из ДобавляемыеРеквизиты Цикл
		
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиЭлементОтбора(НастройкиОтборы, ЭлементБыстрогоОтбора)
	
	НайденныйЭлементОтбора = Неопределено;
	
	Для Каждого ЭлементОтбора Из НастройкиОтборы.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйЭлементОтбора = НайтиЭлементОтбора(ЭлементОтбора, ЭлементБыстрогоОтбора);
						
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ЭлементБыстрогоОтбора Тогда
			
			Если НайденныйЭлементОтбора = Неопределено Тогда
				НайденныйЭлементОтбора = ЭлементОтбора;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Возврат НайденныйЭлементОтбора;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВГруппуБыстрыхНастроек(Форма, Отбор, Группа, ДанныеЗаполнения)

	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	ДобавитьРеквизиты(Форма, Отбор);
	
	Для Каждого Настройка Из Отбор Цикл

		ДанныеЗаполненияПоля = Неопределено;
		Если ТипЗнч(Настройка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			Если Настройка.Использование Тогда
				ДобавитьЭлементыОтбораВГруппуБыстрыхНастроек(Форма, Настройка.Элементы, Группа, ДанныеЗаполнения);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(Настройка.ЛевоеЗначение);
		Если ДанныеЗаполнения <> Неопределено Тогда
			ДанныеЗаполнения.Свойство(ИмяПоля, ДанныеЗаполненияПоля);
		КонецЕсли;
		
		ЭтоСложныйОтбор = ЭтоСложныйОтбор(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Настройка.ЛевоеЗначение);
		
		ИмяРеквизита = СтрЗаменить(ИмяПоля, ".", "");
		
		ДоступноеПоле = ДоступноеПолеОтбора(Отчет, Настройка.ЛевоеЗначение);
		
		Если ДоступноеПоле <> Неопределено Тогда
			ОписаниеТипаЗначения = ДоступноеПоле.ТипЗначения;
			СвязьПоТипу = Новый Структура;
			СвязьПоТипу.Вставить("ПутьКДанным", Строка(ДоступноеПоле.СвязьПоТипу.Поле));
			СвязьПоТипу.Вставить("ЭлементСвязи", ДоступноеПоле.СвязьПоТипу.ЭлементСвязи);
		Иначе
			ОписаниеТипаЗначения = Новый ОписаниеТипов(Строка(ТипЗнч(Настройка.ПравоеЗначение)));
			СвязьПоТипу = Неопределено;
		КонецЕсли;
		
		Если ОписаниеТипаЗначения.Типы().Количество() > 0 Тогда
			ТипЗначения = ОписаниеТипаЗначения.Типы()[0];
		КонецЕсли;
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Группа", Группа);
		ПараметрыЭлемента.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ПараметрыЭлемента.Вставить("ОписаниеТипаЗначения", ОписаниеТипаЗначения);
		ПараметрыЭлемента.Вставить("ДоступноеПоле", ДоступноеПоле); 
		ПараметрыЭлемента.Вставить("СвязьПоТипу", СвязьПоТипу);
		
		НовыйЭлемент = НовыйЭлемент(Форма, Настройка, ПараметрыЭлемента);
		ЭтоПростойВидСравнения = Настройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			Или Настройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
			Или (ТипЗначения = Тип("Строка") И Настройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит);
			
		Если Не ЭтоПростойВидСравнения Или ЭтоСложныйОтбор Тогда
			НовыйЭлемент.ТолькоПросмотр = Настройка.Использование;
		Иначе
			НовыйЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если НовыйЭлемент.ТолькоПросмотр Тогда 
			НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветРамкиНедоступногоПоля;
			НовыйЭлемент.ЦветТекстаЗаголовка = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
			НовыйЭлемент.ПропускатьПриВводе = Истина;
		Иначе
			НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветРамки;
			НовыйЭлемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаПоля;
			НовыйЭлемент.ПропускатьПриВводе = Ложь;
		КонецЕсли;
		
		ВидСравненияСтрокой = Строка(Настройка.ВидСравнения);
		
		Подсказка = "";
		Если Настройка.Использование Тогда
			Если Не ЭтоПростойВидСравнения И Не ЭтоСложныйОтбор Тогда
				Подсказка = СтрШаблон(НСтр("ru = 'Используется сложный вид сравнения:
				|%1: <%2> %3
				|Воспользуйтесь полными настройками.'"), ДоступноеПоле.Заголовок, ВидСравненияСтрокой,
					Строка(Настройка.ПравоеЗначение));
				Форма[ИмяРеквизита] = ПустоеЗначениеТипа(ТипЗначения);
			ИначеЕсли ЭтоСложныйОтбор Тогда
				Подсказка = НСтр("ru = 'Применяется в нескольких условиях отбора'");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Подсказка) Тогда
			НовыйЭлемент.РасширеннаяПодсказка.Заголовок = Подсказка;
			Форма[ИмяРеквизита] = ПустоеЗначениеТипа(ТипЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция БыстроеОформление(Форма)
	
	Отчет                       = Форма.Отчет;
	НастройкиУсловноеОформление = Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	
	РеквизитыФормы = РеквизитыФормы(Форма);
	ОкруглениеДоступно = Истина;
	
	Если РеквизитыФормы.Найти(ПараметрОкруглениеСумм()) = Неопределено Тогда
		ОкруглениеДоступно = Ложь;
	КонецЕсли;
	
	Если ОкруглениеДоступно Тогда
		Форма.ОкруглениеСумм = ОкруглениеСуммДоЦелых();
	КонецЕсли;
	
	БыстрыеНастройкиОформления = Новый Структура;
	БыстрыеНастройкиОформления.Вставить(ПараметрОтрицательноеКрасным(), Ложь);
	БыстрыеНастройкиОформления.Вставить(ПараметрОкруглениеСумм(), Ложь);

	Схема = ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	УсловноеОформление = Неопределено;
	
	ВариантНастроек = ТекущийВариантНастроек(Схема, Форма.КлючТекущегоВарианта);
	Если ВариантНастроек <> Неопределено Тогда
		УсловноеОформление = ВариантНастроек.Настройки.УсловноеОформление.Элементы;
	КонецЕсли;
	
	Если УсловноеОформление = Неопределено Тогда
		Возврат БыстрыеНастройкиОформления;
	КонецЕсли;
	
	Для Каждого Оформление Из УсловноеОформление Цикл
		
		Если СтрНайти(ВРег(Оформление.Представление), ОтрицательноеКрасным()) <> 0 Тогда
			БыстрыеНастройкиОформления.Вставить(ПараметрОтрицательноеКрасным(), Истина);
		ИначеЕсли СтрНайти(ВРег(Оформление.Представление), Округлять()) <> 0 Тогда
			БыстрыеНастройкиОформления.Вставить(ПараметрОкруглениеСумм(), ОкруглениеДоступно);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Оформление Из НастройкиУсловноеОформление Цикл
		
		Если СтрНайти(ВРег(Оформление.Представление), ОтрицательноеКрасным()) <> 0
			И БыстрыеНастройкиОформления.ОтрицательноеКрасным Тогда
			
			Форма.ОтрицательноеКрасным = Оформление.Использование;
			
		ИначеЕсли ЭтоНастройкаОкругления(Оформление.Представление)
			И БыстрыеНастройкиОформления.ОкруглениеСумм Тогда
			
			Если ЭтоНастройкаНеОкруглять(Оформление.Представление)
				И Оформление.Использование Тогда
				Форма.ОкруглениеСумм = ОкруглениеСуммНеОкруглять();
			ИначеЕсли ЭтоНастройкаОкруглятьДоТысяч(Оформление.Представление)
				И Оформление.Использование Тогда
				Форма.ОкруглениеСумм = ОкруглениеСуммДоТысяч();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БыстрыеНастройкиОформления;
	
КонецФункции

Процедура УправлениеВидимостьюЭлементовОформления(Форма, Оформление)

	Элементы = Форма.Элементы;

	РеквизитыФормы = РеквизитыФормы(Форма);
	
	Если РеквизитыФормы.Найти(ПараметрОкруглениеСумм()) <> Неопределено Тогда
		Элементы.ОкруглениеСумм.Видимость = Оформление.ОкруглениеСумм;
	КонецЕсли;
	
	Если РеквизитыФормы.Найти(ПараметрОтрицательноеКрасным()) <> Неопределено Тогда
		Элементы.ОтрицательноеКрасным.Видимость = Оформление.ОтрицательноеКрасным;
	КонецЕсли;

КонецПроцедуры

Функция ТекущийВариантНастроек(Схема, КлючТекущегоВарианта)

	Для Каждого ВариантНастроек Из Схема.ВариантыНастроек Цикл
		Если ВариантНастроек.Имя = КлючТекущегоВарианта Тогда
			Возврат ВариантНастроек;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьНастройкуОформления(Форма, ИмяПараметраОформления)
	
	Отчет = Форма.Отчет;
	УсловноеОформление = Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	
	ИмяНастройки = ""; 
	РежимОкругленияСумм = ОкруглениеСуммДоЦелых();

	Если ИмяПараметраОформления = ПараметрОтрицательноеКрасным() Тогда
		ИмяНастройки = ОтрицательноеКрасным();
	ИначеЕсли ИмяПараметраОформления = ПараметрОкруглениеСумм() Тогда
		ИмяНастройки = Округлять();
		РежимОкругленияСумм = Форма[ИмяПараметраОформления];
	КонецЕсли;

	Схема = ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	УсловноеОформлениеИзВарианта = Неопределено;
	
	ВариантНастроек = ТекущийВариантНастроек(Схема, Форма.КлючТекущегоВарианта);
	Если ВариантНастроек <> Неопределено Тогда
		УсловноеОформлениеИзВарианта = ВариантНастроек.Настройки.УсловноеОформление.Элементы;
	КонецЕсли;
	
	Если УсловноеОформлениеИзВарианта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НастройкаОформленияИзВарианта Из УсловноеОформлениеИзВарианта Цикл
		
		Если СтрНайти(ВРег(НастройкаОформленияИзВарианта.Представление), ИмяНастройки) <> 0 Тогда
			Если (ИмяНастройки = Округлять() И СтрНайти(ВРег(НастройкаОформленияИзВарианта.Представление),
					ПредставлениеНастройки(РежимОкругленияСумм)) <> 0)
				Или ИмяНастройки = ОтрицательноеКрасным() Тогда
				
				ЭлементОформления = УсловноеОформление.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементОформления, НастройкаОформленияИзВарианта);
				
				Если ИмяНастройки = Округлять() Тогда
					ЭлементОформления.Использование = Истина;
				Иначе
					ЭлементОформления.Использование = Форма[ИмяПараметраОформления];
				КонецЕсли;
				
				Для Каждого ПараметрКомпоновки Из НастройкаОформленияИзВарианта.Оформление.Элементы Цикл
					
					Если ПараметрКомпоновки.Использование Тогда
						ПараметрОформления = ЭлементОформления.Оформление.НайтиЗначениеПараметра(ПараметрКомпоновки.Параметр);
						ПараметрОформления.Использование = Истина;
						ПараметрОформления.Значение = ПараметрКомпоновки.Значение;
					КонецЕсли;
					
				КонецЦикла;

				Для Каждого ПолеИзНастройки Из НастройкаОформленияИзВарианта.Поля.Элементы Цикл
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Использование = ПолеИзНастройки.Использование;
					ОформляемоеПоле.Поле = ПолеИзНастройки.Поле;
				КонецЦикла;

				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеНастройки(РежимОкругленияСумм)
	
	Если РежимОкругленияСумм = ОкруглениеСуммНеОкруглять() Тогда
		Возврат НСтр("ru='НЕ ОКРУГЛЯТЬ'");
	ИначеЕсли РежимОкругленияСумм = ОкруглениеСуммДоТысяч() Тогда
		Возврат НСтр("ru='ДО ТЫСЯЧ'");
	КонецЕсли;
	
	Возврат РежимОкругленияСумм;

КонецФункции

Функция ОтрицательноеКрасным()
	
	Возврат НСтр("ru='ОТРИЦАТЕЛЬНОЕ КРАСНЫМ'");
	
КонецФункции

Функция ПараметрОтрицательноеКрасным()
	
	Возврат "ОтрицательноеКрасным";
	
КонецФункции

Функция ПараметрОкруглениеСумм()
	
	Возврат "ОкруглениеСумм";
	
КонецФункции

Функция Округлять()

	Возврат НСтр("ru='ОКРУГЛЯТЬ'");
	
КонецФункции

Функция НеОкруглять()

	Возврат НСтр("ru='НЕ ОКРУГЛЯТЬ'");
	
КонецФункции 

Функция ОкруглениеСуммДоЦелых()
	
	Возврат "ДоЦелых";
	
КонецФункции

Функция ОкруглениеСуммДоТысяч()
	
	Возврат "ДоТысяч";
	
КонецФункции

Функция ОкруглениеСуммНеОкруглять()
	
	Возврат "НеОкруглять";
	
КонецФункции

Функция ЭтоНастройкаОкруглятьДоТысяч(ПредставлениеНастройки)
	
	Возврат СтрНайти(ВРег(ПредставлениеНастройки), НСтр("ru='ОКРУГЛЯТЬ ДО ТЫСЯЧ'")) <> 0;
	
КонецФункции

Функция ЭтоНастройкаНеОкруглять(ПредставлениеНастройки)
	
	Возврат СтрНайти(ВРег(ПредставлениеНастройки), НеОкруглять()) <> 0;
	
КонецФункции

Функция ЭтоНастройкаОкругления(ПредставлениеНастройки)
	
	Возврат СтрНайти(ВРег(ПредставлениеНастройки), Округлять()) <> 0;
	
КонецФункции

#КонецОбласти