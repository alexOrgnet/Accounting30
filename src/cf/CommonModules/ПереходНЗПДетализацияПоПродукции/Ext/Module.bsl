#Область ПрограммныйИнтерфейс

// Формируются новые и актуализируются ранее созданные документы, корректирующие начальные
// остатки по субконто "Продукция" при переходе на режим учета незавершенного
// производства "Ведется без инвентаризации" с детализацией учета затрат по "Продукции".
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организация, для которой создаются.
//  ДатаПерехода - Дата - месяц, в котором производится переход на новый вариант учета НЗП.
//  СчетаУчета	 - Массив из ПланСчетовСсылка.Хозрасчетный - список счетов учета, для которых выполняется переход.
//
Процедура СформироватьИАктуализироватьДокументыПерехода(Организация, ДатаПерехода, СчетаУчета) Экспорт
	
	Организации = Справочники.Организации.ВсяОрганизация(Организация);
			
	ДатыСдвигаГраницыАктуальности = Новый Соответствие;
	ДокументыПерехода = ДокументыПерехода(Организации, СчетаУчета, ДатаПерехода, ДатыСдвигаГраницыАктуальности);
	
	ОчиститьДвиженияДокументовПерехода(ДокументыПерехода);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьИАктуализироватьПоОстаткам(
		Организации, СчетаУчета, ДатаПерехода, ДокументыПерехода, МенеджерВременныхТаблиц, ДатыСдвигаГраницыАктуальности);
		
	СдвинутьГраницуАктуальностиНазад(ДатыСдвигаГраницыАктуальности);
	
	// Изменим дату ранее сформированных документов, по которым не потребовалась актуализация остатков.
	АктуализироватьДатуДокументов(ДокументыПерехода, ДатаПерехода);
	
	ДобавитьЗаписиВРегистрБезИзмененныхИСозданныхДокументов(ДатаПерехода, МенеджерВременныхТаблиц);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Из переданного в параметре списка счетов выбирает те, которые имеют оборотное субконто "Продукция"
// и возвращает массив кодов этих счетов.
//
// Параметры:
//  СчетаУчета	 - Массив из ПланСчетовСсылка.Хозрасчетный - список счетов.
//               - ПланСчетовСсылка.Хозрасчетный
// 
// Возвращаемое значение:
//  Массив из Строка - список кодов счетов с оборотным субконто "Продукция".
//
Функция КодыСчетовТолькоОборотыПоСубконтоПродукция(СчетаУчета) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Ссылка КАК Ссылка,
	|	Хозрасчетный.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаПроверкиУчетаПоОстаткам)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";

	Запрос.УстановитьПараметр("СчетаПроверкиУчетаПоОстаткам", СчетаУчета);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");

КонецФункции

// Возвращает Ложь, если установлена детализация учета затрат "Продукция", снят признак "Только обороты" по субконто "Продукция"
// и выполнены действия по переходу на учет НЗП с детализацией по продукции (есть записи в регистре).
//
// Параметры:
//  Настройки		                  - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат.
//  Счет			                  - ПланСчетовСсылка.Хозрасчетный - счет, для которого требуется проверка.
//  ВариантУчетаНЗП	                  - ПеречислениеСсылка.ВариантыУчетаНезавершенногоПроизводства - настройка 
//                                      НЗП для проверяемого счета.
//  УстанавливаетсяАналитикаПродукция - Булево - Истина, если устанавливается использование для субконто "Продукция",
//                                      но это изменение еще не сохранено в параметре Настройки.
// 
// Возвращаемое значение:
//  Булево
//
Функция ВозможенПереходНЗПДетализацияПоПродукции(Настройки, Счет, ВариантУчетаНЗП, УстанавливаетсяАналитикаПродукция = Ложь) Экспорт
	
	ВсяОрганизация = Справочники.Организации.ВсяОрганизация(Настройки.Контекст.Организация);
	// Детализация по продукции не включена.
	Аналитика = Настройки.Аналитика[Счет];
	Если Не УстанавливаетсяАналитикаПродукция
		И Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Остатки по продукции на счете уже включены, по текущей организации движений по кредиту с пустой продукцией не было.
	Если ОстаткиПоПродукцииВключеныКорректировкаНеТребуется(Счет, ВсяОрганизация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Переход был выполнен ранее.
	Если ВариантУчетаНЗП = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации
		И Не Справочники.НастройкиУчетаЗатрат.СчетаСубконтоПродукцияОборотное(Счет).Количество() > 0 Тогда
		Возврат Не ПереходВыполненРанее(Счет, ВсяОрганизация);
	КонецЕсли;
	
	// Оборотов по кредиту по пустой продукции нет, отрицательные остатки после перехода не появятся.
	Если Не ЕстьОборотыПоКредитуПоПустойПродукции(Счет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПереходВыполненРанее(Счет, ВсяОрганизация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если для счета установлен признак, разрешающий переход на учет НЗП с детализацией по продукции,
// но изменения еще не сохранены. Для определения используются признаки: на счете присутствует необходимая аналитика,
// отключены комбинированные настройки, но записей в регистре сведений ДокументыПереходаНЗПДетализацияПоПродукции еще нет.
// Если в процессе перехода на учет НЗП с детализацией по продукции не потребовалось создание документов ввода остаков по НЗП,
// запись в регистре все равно должна присутствовать с пустой ссылкой на ДокументПерехода (см. ДобавитьЗаписиВРегистрБезДокументов).
//
// Параметры:
//  Настройки	 - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат.
//  Счет		 - ПланСчетовСсылка.Хозрасчетный - счет, для которого требуется проверка.
// 
// Возвращаемое значение:
//  Булево
//
Функция РазрешенПереходНЗПДетализацияПоПродукции(Настройки, Счет) Экспорт
	
	Аналитика = Настройки.Аналитика[Счет];
	
	ВедетсяБезИнвентаризации =
		(Настройки.Закрытие[Счет].НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации);
	ОтключенаПродукция = (Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено);
	ВключенРежимСовместимости = (Настройки.КомбинированныеНастройкиНезавершенноеПроизводство.Найти(Счет) <> Неопределено);
	
	Если ВключенРежимСовместимости Или ОтключенаПродукция Или Не ВедетсяБезИнвентаризации Тогда
		Возврат Ложь;
	КонецЕсли;

	Если КодыСчетовТолькоОборотыПоСубконтоПродукция(Счет).Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Не ВыполненПереходНЗПДетализацияПоПродукции(Настройки.Контекст.Организация, Счет);
		
КонецФункции

// Определяет наличие записей в регистре сведений "ДокументыПереходаНЗПДетализацияПоПродукции" по указанным
// организации и счету, в возвращаемом параметре ИнформацияВыполненПереход содержит информацию
// о выполненном переходе для отображения в интерфейсе.
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации
//  Счет						 - ПланСчетовСсылка.Хозрасчетный
//  ИнформацияВыполненПереход	 - Структура, Неопределено - возвращаемый параметр.
// 
// Возвращаемое значение:
//  Булево
//
Функция ВыполненПереходНЗПДетализацияПоПродукции(Организация, Счет, ИнформацияВыполненПереход = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыПерехода.ДатаПерехода КАК ДатаПерехода
	|ИЗ
	|	РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
	|ГДЕ
	|	ДокументыПерехода.Организация В(&Организации)
	|	И ДокументыПерехода.СчетУчета = &СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПерехода";

	Запрос.УстановитьПараметр("СчетУчета", Счет);
	Запрос.УстановитьПараметр("Организации", Справочники.Организации.ВсяОрганизация(Организация));

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформацияВыполненПереход <> Неопределено Тогда
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ШаблонТекста = НСтр("ru = '%1 был выполнен переход на учет незавершенного производства с детализацией по продукции.
		|
		|<a href = ""Документы"">Документы ввода остатков НЗП в разрезе продукции</a>'");
		
		Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ШаблонТекста, Формат(Выборка.ДатаПерехода, "ДЛФ=DD"));
		
		ИнформацияВыполненПереход.Вставить("Заголовок",    Заголовок);
		ИнформацияВыполненПереход.Вставить("ДатаПерехода", Выборка.ДатаПерехода);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Информация об операциях, связанных с переходом на НЗП с детализацией по продукции.
//
// Параметры:
//  Настройки		 - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат
//  ДатаНастройки	 - Дата
// 
// Возвращаемое значение:
//  Структура - видимость и текст надписи:
//  * Заголовок - Строка
//  * Видимость - Булево
//
Функция НадписьФормаУчетнаяПолитика(Настройки, ДатаНастройки) Экспорт
	
	НадписьФормаУчетнаяПолитика = Новый Структура("Заголовок, Видимость", "", Ложь);
	
	СчетаПерехода = СчетаПереходНЗПДетализацияПоПродукции(Настройки);

	Если СчетаПерехода.Количество() = 0 Тогда
		Возврат НадписьФормаУчетнаяПолитика;
	КонецЕсли;

	КодыИзменяемыхСчетов = КодыСчетовТолькоОборотыПоСубконтоПродукция(СчетаПерехода);
	
	НомерРодительногоПадежа = 2;
	ПредставлениеМесяцГод = ПредставлениеМесяцГод(ДатаНастройки, НомерРодительногоПадежа);
	
	Если КодыИзменяемыхСчетов.Количество() = 0 Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'После изменения параметров учетной политики рекомендуется повторно выполнить закрытие месяца начиная с %1'"),
			ПредставлениеМесяцГод);
		
	Иначе
		
		ШаблонЗаголовка = НСтр("ru = '● Менять учетную политику рекомендуется с начала года; в ином случае при закрытии более ранних периодов потребуется
								|повторный ввод остатков НЗП в разрезе продукции.
								|● Настройка учетной политики приведет к изменению плана счетов: %1 будут учитываться остатки в разрезе %2.
								|● Изменение плана счетов может занять длительное время и затруднить работу других пользователей.
								|● После изменения учетной политики рекомендуется повторно выполнить закрытие месяца начиная с %3'");

		ШаблонПредставленияСчетов = "";
		Если КодыИзменяемыхСчетов.Количество() = 1 Тогда
			ШаблонПредставленияСчетов = НСтр("ru = 'на счете %1'");
		Иначе
			ШаблонПредставленияСчетов = НСтр("ru = 'на счетах %1'");
		КонецЕсли;
		
		ПредставлениеСчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставленияСчетов, ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(КодыИзменяемыхСчетов));

		ПредставлениеАналитики = Справочники.НастройкиУчетаЗатрат.ПредставлениеАналитикиСчета(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция, Настройки.ВыпускПродукции, "Родительный");
				
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				ПредставлениеСчетов,
				ПредставлениеАналитики,
				ПредставлениеМесяцГод);
				
	КонецЕсли;
			
	НадписьФормаУчетнаяПолитика.Заголовок = Заголовок;
	НадписьФормаУчетнаяПолитика.Видимость = Истина;
	
	Возврат НадписьФормаУчетнаяПолитика;

КонецФункции

// Возвращает представление даты в указанном падеже: месяц - прописью с большой буквы, год - числом,
// сокращение слова "год" - "г.".
//
// Параметры:
//  Дата		 - Дата
//  НомерПадежа	 - Число - порядковый номер падежа.
// 
// Возвращаемое значение:
//  Строка - 
//
// Пример:
//  ПредставлениеМесяцГод('20210101', 2) = "Января 2021 г."
//
Функция ПредставлениеМесяцГод(Дата, НомерПадежа) Экспорт
	
	Месяц = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Формат(Дата, "ДФ='MMММ'"), НомерПадежа);
	Год = Формат(Дата, "ДФ='yyyy'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 г.'"), Месяц, Год);

КонецФункции

// Счета учета, для которых нужно выполнить операцию перехода на учет незавершенного производства "Ведется без инвентаризации"
// с детализацией по продукции.
//
// Параметры:
//  Настройки - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный - список счетов.
//
Функция СчетаПереходНЗПДетализацияПоПродукции(Настройки) Экспорт

	КалькуляционныеСчета = Справочники.НастройкиУчетаЗатрат.СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости, Настройки);

	СчетаПерехода = Новый Массив;
	Организация = Настройки.Контекст.Организация;
	
	Для Каждого КалькуляционныйСчет Из КалькуляционныеСчета Цикл

		Если Настройки.Закрытие[КалькуляционныйСчет].НезавершенноеПроизводство
			<> Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда
			Продолжить;
		КонецЕсли;

		Если Настройки.КомбинированныеНастройкиНезавершенноеПроизводство.Найти(КалькуляционныйСчет) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Аналитика = Настройки.Аналитика[КалькуляционныйСчет];
		Если Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыполненПереходНЗПДетализацияПоПродукции(Организация, КалькуляционныйСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если остатки по субконто "Продукция" были включены ранее не с помощью механизма перехода, то такие счета пропускаем.
		Если Справочники.НастройкиУчетаЗатрат.СчетаСубконтоПродукцияОборотное(КалькуляционныйСчет).Количество() = 0
			И СчетаСубконтоПродукцияОстаточноеОтсутствуетПереходНЗППоПродукции(КалькуляционныйСчет, Организация).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаПерехода.Добавить(КалькуляционныйСчет);
		
	КонецЦикла;
	
	Возврат СчетаПерехода;
	
КонецФункции

// Счета в режиме совместимости НЗП - счета учета, для которых переход на учет НЗП с детализацией по продукции по выбранной организации
// еще не выполнялся или был выполнен позднее, чем рассматриваемый период. Если переход на учет НЗП по продукции для счета выполнен
// не с помощью штатного механизма (с помощью изменения учетной политики до появления механизма перехода или путем снятия признака
// "Только обороты" для субконто "Продукция" без изменения учетной политики), то для таких счетов режим совместимости не будет установлен.
// Использование штатного механизма определяется наличием записей в регистре сведений "ДокументыПереходаНЗПДетализацияПоПродукции"
// хотя бы для одной из организаций.
// Режим совместимости НЗП используется при выполнении регламентной операции "Закрытие счетов 20, 23, 25, 26, 28 и 29":
// для этих счетов игнорируется "развернутое" начальное сальдо по субконто "Продукция", а при способе учета незавершенного
// производства "Ведется без инвентаризации" субконто "Продукция" не включается в аналитику остатков.
// 
// Параметры:
//  Настройки - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаВРежимеСовместимостиНЗП(Настройки) Экспорт
	
	КалькуляционныеСчета = Новый Массив;
	Для Каждого ОписаниеЗакрытияСчета Из Настройки.Закрытие Цикл
		Если ОписаниеЗакрытияСчета.Значение.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
			КалькуляционныеСчета.Добавить(ОписаниеЗакрытияСчета.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Настройки.Контекст.Организация);
	Запрос.УстановитьПараметр("КалькуляционныеСчета", КалькуляционныеСчета);
	Запрос.УстановитьПараметр("Период", Настройки.Контекст.Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокументыПереходаПоЗаданнойОрганизации.ДатаПерехода) КАК ДатаПерехода,
	|	ДокументыПереходаПоВсемОрганизациям.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ДатыПерехода
	|ИЗ
	|	РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПереходаПоВсемОрганизациям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПереходаПоЗаданнойОрганизации
	|		ПО ДокументыПереходаПоВсемОрганизациям.СчетУчета = ДокументыПереходаПоЗаданнойОрганизации.СчетУчета
	|			И (ДокументыПереходаПоЗаданнойОрганизации.Организация = &Организация)
	|ГДЕ
	|	ДокументыПереходаПоВсемОрганизациям.СчетУчета В(&КалькуляционныеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПереходаПоВсемОрганизациям.СчетУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК СчетУчета,
	|	ДатыПерехода.ДатаПерехода КАК ДатаПерехода
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПерехода КАК ДатыПерехода
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = ДатыПерехода.СчетУчета
	|ГДЕ
	|	НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|	И (ДатыПерехода.ДатаПерехода ЕСТЬ NULL
	|			ИЛИ ДатыПерехода.ДатаПерехода > &Период)";
		
	УстановитьПривилегированныйРежим(Истина);
	
	СчетаУчета =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетУчета");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СчетаУчета;
	
КонецФункции

// Возвращает те счета из списка проверяемых, для которых не был выполнен переход на НЗП с детализацией по продукции.
// Также исключаются те счета, на которых остатки по субконто "Продукция" выполнен не с помощью штатного механизма
// (с помощью изменения учетной политики до появления механизма перехода или путем снятия признака
// "Только обороты" для субконто "Продукция" без изменения учетной политики).
//
// Параметры:
//  ПроверяемыеСчета - Массив из ПланСчетовСсылка.Хозрасчетный
//  Организация		 - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаСубконтоПродукцияОстаточноеОтсутствуетПереходНЗППоПродукции(ПроверяемыеСчета, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", ПроверяемыеСчета);
	Запрос.УстановитьПараметр("Организации", Справочники.Организации.ВсяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПереходаПоВсемОрганизациям
	|		ПО ДокументыПереходаПоВсемОрганизациям.СчетУчета = ХозрасчетныйВидыСубконто.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПереходаПоОрганизации
	|		ПО (ДокументыПереходаПоОрганизации.СчетУчета = ХозрасчетныйВидыСубконто.Ссылка)
	|			И (ДокументыПереходаПоОрганизации.Организация В (&Организации))
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Ссылка В(&Счета)
	|	И ДокументыПереходаПоОрганизации.Организация ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьОборотыПоКредитуПоПустойПродукции(Счет, Организации = Неопределено)
	
	// Здесь нас интересуют обороты по пустой продукции с точки зрения, не приведет ли включение остатков по продукции к отрицательным остаткам.
	// Это возникает, как правило, из-за движений, которые делает регламентная операция "Закрытие счетов 20, 23 , 25 , 26".
	// При этом нас интересуют только движения с неотрицательными суммами, поскольку движения с отрицательными
	// суммами с пустой продукцией - нормальная ситуация, даже если включены остатки по субконто "Продукция". Например, такие движения
	// могут являться сторно предварительных проводок, которые делает документ "Выпуск продукции" при использовании плановой себестоимости.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК Счет,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			,
		|			СчетКт = &Счет
		|				И &ОтборОрганизации
		|				И ВидСубконтоКт1 = &СубконтоПродукция
		|				И Субконто1 = &ЗначениеПоУмолчанию
		|				И Регистратор ССЫЛКА Документ.РегламентнаяОперация
		|				И СуммаНУКт >= 0
		|				И Сумма >= 0,
		|			,
		|			1) КАК ХозрасчетныйДвиженияССубконто";
	
	СубконтоПродукция = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
	ЗначениеПустойПродукции = БухгалтерскийУчет.ЗначениеПоУмолчаниюДляСубконто(Новый Структура("ВидСубконто", СубконтоПродукция));
		
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("СубконтоПродукция", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
	Запрос.УстановитьПараметр("ЗначениеПоУмолчанию", ЗначениеПустойПродукции);
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборОрганизации", "Организация В (&Организации)");
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.УстановитьПараметр("ОтборОрганизации", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьОборотыПоКредитуПоПустойПродукции = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьОборотыПоКредитуПоПустойПродукции;
	
КонецФункции

// Переход на детализацию по продукции для организации, указанной в параметре, считается выполненным в двух случаях:
// 1) есть записи в регистре сведений по организации;
// 2) пользователь самостоятельно включил остатки по субконто "Продукция" или переход был выполнен до появления механизма
// автоматического перехода (в этом случае не будет записей в регистре ни по одной организации информационной базы).
//
// Параметры:
//  Счет           - ПланСчетовСсылка.Хозрасчетный
//  ВсяОрганизация - Массив из СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Булево - Истина, если переход на учет НЗП по продукции был выполнен ранее.
//
Функция ПереходВыполненРанее(Счет, ВсяОрганизация)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыПерехода.СчетУчета КАК СчетУчета
		|ИЗ
		|	РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
		|ГДЕ
		|	ДокументыПерехода.Организация В(&Организации)
		|	И ДокументыПерехода.СчетУчета = &СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
		|		ПО (ДокументыПерехода.СчетУчета = ХозрасчетныйВидыСубконто.Ссылка)
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.Ссылка = &СчетУчета
		|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
		|	И ДокументыПерехода.СчетУчета ЕСТЬ NULL
		|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)";
	
	Запрос.УстановитьПараметр("СчетУчета", Счет);
	Запрос.УстановитьПараметр("Организации", ВсяОрганизация);
	
	УстановитьПривилегированныйРежим(Истина);
	ПереходВыполненРанее = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПереходВыполненРанее;
	
КонецФункции

Функция ДокументыПерехода(Организации, СчетаУчета, ДатаПерехода, ДатыСдвигаГраницыАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыПерехода.Организация КАК Организация,
	|	ДокументыПерехода.СчетУчета КАК СчетУчета,
	|	ДокументыПерехода.ДокументПерехода КАК ДокументПерехода,
	|	ОперацияБух.Дата КАК ДатаПерехода
	|ИЗ
	|	РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияБух КАК ОперацияБух
	|		ПО ДокументыПерехода.ДокументПерехода = ОперацияБух.Ссылка
	|ГДЕ
	|	ДокументыПерехода.Организация В(&Организации)
	|	И ДокументыПерехода.СчетУчета В(&СчетаУчета)";
	
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	Запрос.УстановитьПараметр("Организации", Организации);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДокументыПерехода = РезультатЗапроса.Выгрузить();
	ДокументыПерехода.Индексы.Добавить("Организация, СчетУчета");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДатыСдвигаГраницыАктуальности[Выборка.Организация] = Неопределено Тогда
			ДатыСдвигаГраницыАктуальности.Вставить(Выборка.Организация, ДатаПерехода);
		Иначе
			ДатыСдвигаГраницыАктуальности[Выборка.Организация] = Мин(ДатыСдвигаГраницыАктуальности[Выборка.Организация], ДатаПерехода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыПерехода;

КонецФункции

Процедура АктуализироватьДатуДокументов(ДокументыПерехода, ДатаПерехода)
	
	Для Каждого СтрокаДокументыПерехода Из ДокументыПерехода Цикл
		
		ДокументОбъект = СтрокаДокументыПерехода.ДокументПерехода.ПолучитьОбъект(); // ДокументОбъект.ОперацияБух
		Если ДокументОбъект <> Неопределено Тогда
			ДокументОбъект.Дата = ДатаПерехода;
			// Сдвиг границы актуальности производится в процедуре СдвинутьГраницуАктуальностиНазад()
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
			ДокументОбъект.СуммаОперации = 0;
			БухгалтерскийУчет.ПроверитьДатуЗапретаНаНачалоПериодаСледующегоЗаМежотчетным(ДокументОбъект);
			ДокументОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗаписиВРегистрБезИзмененныхИСозданныхДокументов(ДатаПерехода, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииСчетаУчета.Организация КАК Организация,
	|	ОрганизацииСчетаУчета.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(ДокументыПерехода.ДокументПерехода, ЗНАЧЕНИЕ(Документ.ОперацияБух.ПустаяСсылка)) КАК ДокументПерехода
	|ИЗ
	|	ОрганизацииСчетаУчета КАК ОрганизацииСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
	|		ПО ОрганизацииСчетаУчета.Организация = ДокументыПерехода.Организация
	|			И ОрганизацииСчетаУчета.СчетУчета = ДокументыПерехода.СчетУчета
	|ГДЕ
	|	ДокументыПерехода.ДатаПерехода <> &ДатаПерехода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрганизацииСчетаУчета.Организация,
	|	ОрганизацииСчетаУчета.СчетУчета,
	|	ЕСТЬNULL(ДокументыПерехода.ДокументПерехода, ЗНАЧЕНИЕ(Документ.ОперацияБух.ПустаяСсылка))
	|ИЗ
	|	ОрганизацииСчетаУчета КАК ОрганизацииСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПереходаНЗПДетализацияПоПродукции КАК ДокументыПерехода
	|		ПО ОрганизацииСчетаУчета.Организация = ДокументыПерехода.Организация
	|			И ОрганизацииСчетаУчета.СчетУчета = ДокументыПерехода.СчетУчета
	|ГДЕ
	|	ДокументыПерехода.ДатаПерехода ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДатаПерехода", ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписатьВРегистр(Выборка.Организация, Выборка.СчетУчета, ДатаПерехода, Выборка.ДокументПерехода);
		
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьИАктуализироватьПоОстаткам(
		Организации, СчетаУчета, ДатаПерехода, ДокументыПерехода, МенеджерВременныхТаблиц, ДатыСдвигаГраницыАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Хозрасчетный.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ ОрганизацииСчетаУчета
	|ИЗ
	|	Справочник.Организации КАК Организации,
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоНоменклатурнаяГруппа
	|		ПО (ВидыСубконтоНоменклатурнаяГруппа.Ссылка = Хозрасчетный.Ссылка)
	|			И (ВидыСубконтоНоменклатурнаяГруппа.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоПродукция
	|		ПО (ВидыСубконтоПродукция.Ссылка = Хозрасчетный.Ссылка)
	|			И (ВидыСубконтоПродукция.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция))
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|	И Хозрасчетный.Ссылка В(&СчетаУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ДОБАВИТЬКДАТЕ(&ДатаПерехода, СЕКУНДА, -1) КАК Период,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРОстаток
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаПерехода, Счет В (&СчетаУчета), , Организация В (&Организации)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаПерехода, СЕКУНДА, -1) КАК Период,
	|	ОрганизацииСчетаУчета.Организация КАК Организация,
	|	ОрганизацииСчетаУчета.СчетУчета КАК СчетДт,
	|	ОрганизацииСчетаУчета.СчетУчета КАК СчетКт,
	|	ХозрасчетныйОстатки.Валюта КАК ВалютаДт,
	|	ХозрасчетныйОстатки.Валюта КАК ВалютаКт,
	|	ХозрасчетныйОстатки.Подразделение КАК ПодразделениеДт,
	|	ХозрасчетныйОстатки.Подразделение КАК ПодразделениеКт,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУДт,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРДт,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРДт,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУКт,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРКт,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРКт
	|ИЗ
	|	ОрганизацииСчетаУчета КАК ОрганизацииСчетаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|		ПО ОрганизацииСчетаУчета.Организация = ХозрасчетныйОстатки.Организация
	|			И ОрганизацииСчетаУчета.СчетУчета = ХозрасчетныйОстатки.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ОрганизацииСчетаУчета.СчетУчета = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция))
	|			И (ВЫБОР
	|				КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|					ТОГДА ХозрасчетныйОстатки.Субконто1 <> &СубконтоПродукцияЗначениеПоУмолчанию
	|				КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	|					ТОГДА ХозрасчетныйОстатки.Субконто2 <> &СубконтоПродукцияЗначениеПоУмолчанию
	|				КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|					ТОГДА ХозрасчетныйОстатки.Субконто3 <> &СубконтоПродукцияЗначениеПоУмолчанию
	|			КОНЕЦ)
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Организация,
	|	СчетДт";
	
	Запрос.УстановитьПараметр("ДатаПерехода", ДатаПерехода);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	СубконтоПродукцияЗначениеПоУмолчанию = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция.ТипЗначения.ПривестиЗначение();
	Запрос.УстановитьПараметр("СубконтоПродукцияЗначениеПоУмолчанию", СубконтоПродукцияЗначениеПоУмолчанию);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаСчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСчет.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ВыборкаСчет.Организация);
			Отбор.Вставить("СчетУчета", ВыборкаСчет.СчетДт);
			
			СтрокиДокументыПерехода = ДокументыПерехода.НайтиСтроки(Отбор);
			
			Если СтрокиДокументыПерехода.Количество() > 0 Тогда
				СтрокаДокументыПерехода = СтрокиДокументыПерехода[0];
				ДокументПерехода = СтрокаДокументыПерехода.ДокументПерехода;
				
				ДокументОбъект = ДокументПерехода.ПолучитьОбъект();
				ДокументОбъект.ПометкаУдаления = Ложь;
				
				// Документы, у которых не будут сформированы движения, останутся в таблице "ДокументыПерехода",
				// они будут обработаны в процедуре АктуализироватьДатуДокументов():
				// для них будет изменена дата и реквизит "СуммаОперации"
				ДокументыПерехода.Удалить(СтрокаДокументыПерехода);

			Иначе
				ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();
				ДокументОбъект.Заполнить(Неопределено);
				
				Если ДатыСдвигаГраницыАктуальности[ВыборкаОрганизация.Организация] = Неопределено Тогда
					ДатыСдвигаГраницыАктуальности.Вставить(ВыборкаОрганизация.Организация, ДатаПерехода);
				Иначе
					ДатыСдвигаГраницыАктуальности[ВыборкаОрганизация.Организация] =
						Мин(ДатыСдвигаГраницыАктуальности[ВыборкаОрганизация.Организация], ДатаПерехода);
				КонецЕсли;
					
			КонецЕсли;
			
			ДокументОбъект.Организация = ВыборкаОрганизация.Организация;
			
			// Поскольку корректировка остатков должна быть сделана после "Закрытия месяца", сохраним актуальность выполнения операций
			// закрытия месяца в периоде, в который помещается документ корректировки остатков НЗП (это месяц, предствующий дате перехода).
			// Сдвиг границы актуальности регламентных операций необходим в месяце перехода (следующий месяц после даты документа),
			// он будет выполнен ниже, для каждой из организаций, в которой потребовалась корректировка остатков.
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
			ДокументОбъект.Содержание = НСтр("ru = 'Ввод остатков НЗП в разрезе продукции'");
			ДокументОбъект.Комментарий = НСтр("ru = 'Создан автоматически при переходе на НЗП с детализацией по продукции'");
			ДокументОбъект.Дата = ДатаПерехода - 1;
			ДокументОбъект.СуммаОперации = ВыборкаСчет.Сумма;
			
			Если НачалоДня(ДатаПерехода) = НачалоГода(ДатаПерехода) Тогда
				
				ДокументОбъект.МежотчетныйПериод = Истина;
				
				// Для документов межотчетного периода проверку даты запрета сдвигаем на один день,
				// поскольку созданные документы не меняют отчетность предыдущего периода.
				БухгалтерскийУчет.ПроверитьДатуЗапретаНаНачалоПериодаСледующегоЗаМежотчетным(ДокументОбъект);
				
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			Проводки = ДокументОбъект.Движения.Хозрасчетный;
			Если ДокументОбъект.МежотчетныйПериод Тогда
				Проводки.ДополнительныеСвойства.Вставить("УстанавливаемоеУточнениеПериода",
					БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода());
			КонецЕсли;
			Проводки.Записывать = Истина;
			
			Выборка = ВыборкаСчет.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Проводка = Проводки.Добавить();
				
				ЗаполнитьЗначенияСвойств(Проводка, Выборка);
				
				Для НомерСубконто = 1 По 3 Цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, Выборка["Субконто" + XMLСтрока(НомерСубконто)]);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, НомерСубконто, Выборка["Субконто" + XMLСтрока(НомерСубконто)]);
				КонецЦикла;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Продукция", СубконтоПродукцияЗначениеПоУмолчанию);
				
			КонецЦикла;
			
			Если ДокументОбъект.МежотчетныйПериод Тогда
				// Для движений документа из межотчетного периода проверка даты запрета также выполняется со сдвигом.
				БухгалтерскийУчет.ПроверитьДатуЗапретаНаНачалоПериодаСледующегоЗаМежотчетным(Проводки);
			КонецЕсли;
					
			ДокументОбъект.Движения.Записать();
			
			ЗаписатьВРегистр(ВыборкаСчет.Организация, ВыборкаСчет.СчетДт, ДатаПерехода, ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура СдвинутьГраницуАктуальностиНазад(Знач ДатыСдвигаГраницыАктуальности)
	
	Перем ДатаСдвигаГраницыАктуальности;
	
	Для Каждого ДатаСдвигаГраницыАктуальности Из ДатыСдвигаГраницыАктуальности Цикл
		
		РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
		ДатаСдвигаГраницыАктуальности.Ключ,
		ДатаСдвигаГраницыАктуальности.Значение,
		3,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26,
		Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьВРегистр(Организация, СчетУчета, Дата, Документ)
	
	ЗаписьДокументыПерехода = РегистрыСведений.ДокументыПереходаНЗПДетализацияПоПродукции.СоздатьМенеджерЗаписи();
	
	ЗаписьДокументыПерехода.Организация      = Организация;
	ЗаписьДокументыПерехода.СчетУчета        = СчетУчета;
	ЗаписьДокументыПерехода.ДатаПерехода     = Дата;
	ЗаписьДокументыПерехода.ДокументПерехода = Документ;
	
	ЗаписьДокументыПерехода.Записать();

КонецПроцедуры

Процедура ОчиститьДвиженияДокументовПерехода(ДокументыПерехода)
	
	Для Каждого СтрокаДокументыПерехода Из ДокументыПерехода Цикл
		
		ДокументОбъект = СтрокаДокументыПерехода.ДокументПерехода.ПолучитьОбъект(); // ДокументОбъект.ОперацияБух
		
		Если ДокументОбъект <> Неопределено Тогда
			
			Проводки = ДокументОбъект.Движения.Хозрасчетный;
			Проводки.Записывать = Истина;
			
			Если ДокументОбъект.МежотчетныйПериод Тогда
				БухгалтерскийУчет.ПроверитьДатуЗапретаНаНачалоПериодаСледующегоЗаМежотчетным(Проводки);
			КонецЕсли;
			
			Проводки.Записать();
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ОстаткиПоПродукцииВключеныКорректировкаНеТребуется(Счет, ВсяОрганизация)
	
	ЗапросСубконтоПродукцияОстаточное = Новый Запрос;
	ЗапросСубконтоПродукцияОстаточное.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
		|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
		|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты";
	
	ЗапросСубконтоПродукцияОстаточное.УстановитьПараметр("Счет", Счет);
	
	Если ЗапросСубконтоПродукцияОстаточное.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуетсяКорректировка = ЕстьОборотыПоКредитуПоПустойПродукции(Счет, ВсяОрганизация);
	
	Возврат Не ТребуетсяКорректировка;
	
КонецФункции

#КонецОбласти
