// @strict-types

#Область ПрограммныйИнтерфейс

#Область ХарактеристикиПрофиля

// см. РекламныйСервисПереопределяемый.ЗаполнитьРегионыПоказа
Процедура ЗаполнитьРегионыПоказа(Знач ВладельцыХарактеристики, Результат) Экспорт
	
	ВидыКонтактнойИнформации = Новый Массив; // СправочникСсылка.ВидыКонтактнойИнформации
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	
	//@skip-warning
	КонтактнаяИнформацияАдресов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыХарактеристики, , ВидыКонтактнойИнформации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПредставлений", Истина);
	
	Для Каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформацияАдресов Цикл
		
		СведениеОбАдресе = РаботаСАдресами.СведенияОбАдресе(СтрокаКонтактнойИнформации.Значение, ДополнительныеПараметры);
		Владелец = СтрокаКонтактнойИнформации.Объект; // ОпределяемыйТип.ВладелецХарактеристикиРекламы
		Регионы = Результат.Получить(Владелец); // Массив из Строка
		Если Регионы = Неопределено Тогда
			Регионы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведениеОбАдресе.КодРегиона); // Массив из Строка
			Результат.Вставить(Владелец, Регионы);
		Иначе
			Если Регионы.Найти(СведениеОбАдресе.КодРегиона) = Неопределено Тогда
				Регионы.Добавить(СведениеОбАдресе.КодРегиона);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ДатаРегистрацииПредприятия
Процедура ДатаРегистрацииПредприятия(ВладельцыХарактеристики, Результат) Экспорт
	
	ИмяРеквизита = "ДатаРегистрации";
	Результат = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВладельцыХарактеристики, ИмяРеквизита); // Дата
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ДатаРожденияИП
Процедура ДатаРожденияИП(ВладельцыХарактеристики, Результат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Организации.ИндивидуальныйПредприниматель = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Организации.Ссылка В (&Организации)";
	
	Запрос.УстановитьПараметр("Организации", ВладельцыХарактеристики);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаРождения = Выборка.ДатаРождения; // Дата
		Результат.Вставить(Выборка.Организация, ДатаРождения);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьОКОПФ
Процедура ЗаполнитьОКОПФ(ВладельцыХарактеристики, Результат) Экспорт
	
	ИмяРеквизита = "КодОКОПФ";
	Результат = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВладельцыХарактеристики, ИмяРеквизита); // Строка
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьКодыОКВЭД
Процедура ЗаполнитьКодыОКВЭД(ВладельцыХарактеристики, Результат) Экспорт
	
	ИмяРеквизита = "КодОКВЭД2";
	Результат = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВладельцыХарактеристики, ИмяРеквизита);
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияЧисленность
Процедура ЗаполнитьРазмерПредприятияЧисленность(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		СреднесписочнаяЧисленность = 
			УчетЗарплаты.СреднесписочнаяЧисленность(
				ВладелецХарактеристики, 
				ПараметрыПериода.НачалоПериода, 
				ПараметрыПериода.КонецПериода, 
				Истина);
		
		Результат.Вставить(ВладелецХарактеристики, СреднесписочнаяЧисленность.ЧисленностьРаботников);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьУчетКомандировок
Процедура ЗаполнитьУчетКомандировок(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчет.Организация КАК Организация,
	|	КОЛИЧЕСТВО(АвансовыйОтчет.Ссылка) КАК Количество
	|ПОМЕСТИТЬ ДокументыКомандировки
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АвансовыйОтчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАвансовыйОтчет.Командировка)
	|	И АвансовыйОтчет.Проведен
	|	И АвансовыйОтчет.Организация В (&Организации)
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АвансовыйОтчет.Ссылка)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Билеты КАК АвансовыйОтчетБилеты
	|		ПО АвансовыйОтчет.Ссылка = АвансовыйОтчетБилеты.Ссылка
	|		И (АвансовыйОтчетБилеты.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|		ПО АвансовыйОтчет.Ссылка = АвансовыйОтчетПрочее.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО (АвансовыйОтчетПрочее.Субконто1 = СтатьиЗатрат.Ссылка)
	|		И (СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.КомандировочныеРасходы))
	|ГДЕ
	|	(АвансовыйОтчет.Организация В (&Организации)
	|	И (НЕ АвансовыйОтчетБилеты.Ссылка ЕСТЬ NULL
	|	ИЛИ НЕ СтатьиЗатрат.Ссылка ЕСТЬ NULL)
	|	И АвансовыйОтчет.Проведен)
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКомандировки.Организация КАК Организация,
	|	СУММА(ЕСТЬNULL(ДокументыКомандировки.Количество, 0)) КАК КоличествоДокументов
	|ИЗ
	|	ДокументыКомандировки КАК ДокументыКомандировки
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКомандировки.Организация";
	
	Запрос.УстановитьПараметр("Организации",   ВладельцыХарактеристики);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыПериода.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоДокументов = Выборка.КоличествоДокументов; // Число
		Результат.Вставить(Выборка.Организация, КоличествоДокументов);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьСистемуНалогообложения
Процедура ЗаполнитьСистемуНалогообложения(
		Знач ВладельцыХарактеристики, Знач ДопустимыеЗначения, ПараметрыПериода, Результат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
		|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяНалогНаПрофессиональныйДоход КАК
		|		ПрименяетсяНалогНаПрофессиональныйДоход,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяАУСН КАК ПрименяетсяАУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН
		|ПОМЕСТИТЬ НастройкиСистемыНалогообложения
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&КонецПериода, Организация В (&Организации)) КАК
		|		НастройкиСистемыНалогообложенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиСистемыНалогообложения.Организация КАК Организация,
		|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
		|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход,
		|	НастройкиСистемыНалогообложения.ПрименяетсяАУСН КАК ПрименяетсяАУСН,
		|	НастройкиСистемыНалогообложения.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
		|	ЕСТЬNULL(Организации.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)) КАК
		|		ЮридическоеФизическоеЛицо
		|ИЗ
		|	НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО НастройкиСистемыНалогообложения.Организация = Организации.Ссылка";
	
	Запрос.УстановитьПараметр("Организации", ВладельцыХарактеристики);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыПериода.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Значения = Новый Массив;
		
		Значение = "";
		Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
			Если Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Значения.Добавить(ДопустимыеЗначения.ОСН_ЮР_ЛИЦА);
			Иначе
				Значения.Добавить(ДопустимыеЗначения.ОСН_ИП);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПрименяетсяАУСН Тогда
			
			Если Выборка.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
				Значения.Добавить(ДопустимыеЗначения.АУСН_ДОХОДЫ);
			ИначеЕсли Выборка.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
				Значения.Добавить(ДопустимыеЗначения.АУСН_ДОХОДЫ_МИНУС_РАСХОДЫ);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПрименяетсяУСНДоходы Тогда
			
			Значения.Добавить(ДопустимыеЗначения.УСН_ДОХОДЫ);
			
		ИначеЕсли Выборка.ПрименяетсяУСНДоходыМинусРасходы Тогда
			
			Значения.Добавить(ДопустимыеЗначения.УСН_ДОХОДЫ_МИНУС_РАСХОДЫ);
			
		ИначеЕсли Выборка.ПрименяетсяНалогНаПрофессиональныйДоход Тогда
			
			Значения.Добавить(ДопустимыеЗначения.САМОЗАНЯТЫЙ);
			
		КонецЕсли;
		
		Если Выборка.ПрименяетсяУСНПатент Тогда
			Значения.Добавить(ДопустимыеЗначения.ПАТЕНТ);
		КонецЕсли;
		
		Если Значения.Количество() > 0 Тогда
			Результат.Вставить(Выборка.Организация, Значения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияДоход
Процедура ЗаполнитьРазмерПредприятияДоход(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	СчетаВыручки = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка); // 90.01
	СчетаНДС     = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи_НДС); // 90.03
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация,
	|	СУММА(ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаВыручки)
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаНДС)
	|			ТОГДА -ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаДохода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода,, Счет В (&СчетаВыручки, &СчетаНДС),,
	|		Организация В (&Организации),,) КАК ХозрасчетныйОбороты
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация";
	
	Запрос.УстановитьПараметр("СчетаВыручки",  СчетаВыручки);
	Запрос.УстановитьПараметр("СчетаНДС",      СчетаНДС);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Организации",   ВладельцыХарактеристики);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СуммаДохода = Выборка.СуммаДохода; // Число
		Результат.Вставить(Выборка.Организация, СуммаДохода);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияОборотПоСчетам
Процедура ЗаполнитьРазмерПредприятияОборотПоСчетам(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	СчетаУчетаДенег = Новый Массив; // Массив из ПланСчетовСсылка
	СчетаУчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.Касса); // 50
	СчетаУчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); // 51
	СчетаУчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета); // 52
	СчетаУчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль); // 53
	СчетаУчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	
	СубсчетаУчетаДенег = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаДенег);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборота
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода,, СчетДт В (&СчетаУчетаДенег),,
	|	НЕ СчетКт В (&СчетаУчетаДенег),, Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.Организация";
	
	Запрос.УстановитьПараметр("СчетаУчетаДенег", СубсчетаУчетаДенег);
	Запрос.УстановитьПараметр("НачалоПериода",   ПараметрыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    ПараметрыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Организации",     ВладельцыХарактеристики);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СуммаОборота = Выборка.СуммаОборота; // Число
		Результат.Вставить(Выборка.Организация, СуммаОборота);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьОсновныеСредства
Процедура ЗаполнитьОсновныеСредства(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	СчетаУчета = Новый Массив; // Массив из ПланСчетовСсылка
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства); // 01
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // 02
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // 03
	СубсчетаУчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчета),, Организация В (&Организации)) КАК
	|		ХозрасчетныйОстатки
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация";
	
	Запрос.УстановитьПараметр("СчетаУчета",   СубсчетаУчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Организации",  ВладельцыХарактеристики);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СуммаОстаток = Выборка.СуммаОстаток; // Число
		Результат.Вставить(Выборка.Организация, СуммаОстаток);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ЗаполнитьКоличествоКредитныхДоговоров
Процедура ЗаполнитьКоличествоКредитныхДоговоров(Знач ВладельцыХарактеристики, ПараметрыПериода, Результат) Экспорт
	
	СчетаУчета = Новый Массив; // Массив из ПланСчетовСсылка
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); // 66
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам); // 67
	СубсчетаУчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОстатки.Субконто1) КАК КоличествоДоговоров
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчета),
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры), Организация В (&Организации)) КАК
	|		ХозрасчетныйОстатки
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Организация";
	
	Запрос.УстановитьПараметр("СчетаУчета",    СубсчетаУчета);
	Запрос.УстановитьПараметр("Период", ПараметрыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Организации",   ВладельцыХарактеристики);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоДоговоров = Выборка.КоличествоДоговоров; // Число
		Результат.Вставить(Выборка.Организация, КоличествоДоговоров);
		
	КонецЦикла;
	
КонецПроцедуры

// См. РекламныйСервисПереопределяемый.ЗаполнитьГруппаКонфигураций
Процедура ЗаполнитьГруппаКонфигураций(Знач ДопустимыеЗначения, Результат) Экспорт
	Результат = ДопустимыеЗначения.БП;
КонецПроцедуры

// См. РекламныйСервисПереопределяемый.ЗаполнитьТрафВРежимеСервиса
Процедура ЗаполнитьТрафВРежимеСервиса(Знач ДопустимыеЗначения, Результат) Экспорт
	
	// Заглушка
	Результат = ДопустимыеЗначения.БАЗОВЫЙ;
	ТарифыСервиса = ПрограммныйИнтерфейсСервиса.ТарифыСервиса();
	
	Отбор = ПрограммныйИнтерфейсСервиса.НовыйОтборПодписокНаТарифы();
	ПодпискиАбонента = ПрограммныйИнтерфейсСервиса.ПодпискиАбонента(Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Список разрешенных организаций.
// 
// Параметры:
//  Результат - Массив из СправочникСсылка.Организации - ссылки на разрешенные организации.
// 
Процедура СписокРазрешенныхОрганизаций(Результат) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь); // Массив
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ДоступныеОрганизации);
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ТекущийПрофильПотребителя
Процедура ТекущийПрофильПотребителя(Результат) Экспорт
	
	Пользователь = Метаданные.ОпределяемыеТипы.ПрофильПотребителяРекламы.Тип.ПривестиЗначение(); // ОпределяемыйТип.ПрофильПотребителяРекламы
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МодульПользователи = ОбщегоНазначения.ОбщийМодуль("Пользователи");
		Пользователь = МодульПользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат.Добавить(Пользователь);
	
КонецПроцедуры

// см. РекламныйСервисПереопределяемый.ИдентификаторПользователяИБПоПрофилюПотребителя
Функция ИдентификаторПользователяИБПоПрофилюПотребителя(Знач ПрофильПотребителяРекламы) Экспорт
	
	Идентификатор = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МодульПользователи = ОбщегоНазначения.ОбщийМодуль("Пользователи");
		ПользовательИнформационнойБазы = МодульПользователи.НайтиПоСсылке(ПрофильПотребителяРекламы);
		Если ПользовательИнформационнойБазы <> Неопределено Тогда
			Идентификатор = Строка(ПользовательИнформационнойБазы.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// см. РекламныйСервисПереопределяемый.ЗаполнитьВерсиюПП
Процедура ЗаполнитьВерсиюПП(Знач ДопустимыеЗначения, Результат) Экспорт
	
	Если ВариантыПриложений.ЭтоВерсияКОРП() Тогда
		Результат = ДопустимыеЗначения.КОРП;
	ИначеЕсли ВариантыПриложений.ЭтоВерсияПРОФ() Тогда
		Результат = ДопустимыеЗначения.ПРОФ;
	Иначе
		Результат = ДопустимыеЗначения.БАЗОВАЯ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти