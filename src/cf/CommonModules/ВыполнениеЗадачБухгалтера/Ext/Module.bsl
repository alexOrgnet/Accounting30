#Область ПрограммныйИнтерфейс

// Описывает действие, которое необходимо выполнить для события
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействия(Событие) Экспорт
	
	Если ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		Возврат ОписаниеДействияРегулярныйПлатеж(Событие);
		
	ИначеЕсли ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		
		Возврат ОписаниеДействияПомощникОплатыПатента(Событие);
		
	ИначеЕсли ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.ПравилаФинОтчетности") Тогда
		
		Возврат ОписаниеДействияФинОтчетность(Событие);
		
	Иначе
		
		Возврат ОписаниеДействияНалоговыйПлатеж(Событие);
		
	КонецЕсли
	
КонецФункции

Функция НовыйОписаниеПлатежа() Экспорт
	
	ОписаниеПлатежа = Новый Структура;
	ОписаниеПлатежа.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Вставить("СпособОплаты",               Перечисления.СпособыУплатыНалогов.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ИмяЗадачи",                  "");
	ОписаниеПлатежа.Вставить("Период",                     '00010101');
	ОписаниеПлатежа.Вставить("ПоказательПериода",          "");
	ОписаниеПлатежа.Вставить("Аванс",                      Ложь);
	ОписаниеПлатежа.Вставить("КБК",                        "");
	ОписаниеПлатежа.Вставить("ОКАТО",                      "");
	ОписаниеПлатежа.Вставить("КПППлательщика",             "");
	ОписаниеПлатежа.Вставить("Сумма",                      0);
	ОписаниеПлатежа.Вставить("Описание",                   "");
	ОписаниеПлатежа.Вставить("Декларация",                 Документы.РегламентированныйОтчет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ДатаДекларации",             '00010101');
	ОписаниеПлатежа.Вставить("КодНалоговогоОргана",        "");
	ОписаниеПлатежа.Вставить("ОплатаЗадолженности",        Ложь);
	ОписаниеПлатежа.Вставить("ОснованиеПлатежа",           "");
	
	Возврат ОписаниеПлатежа;
	
КонецФункции

// Функция-конструктор таблицы платежей
//
Функция НовыйТаблицаПлатежи() Экспорт
	
	Платежи = Новый ТаблицаЗначений;
	
	Платежи.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи.Колонки.Добавить("Период",       Новый ОписаниеТипов("Дата"));
	// По колонкам "КБК" и "ОКАТО" предполагается индекирование, получаем тип из метаданных
	Платежи.Колонки.Добавить("КБК",          Метаданные.Документы.ПлатежноеПоручение.Реквизиты.КодБК.Тип);
	Платежи.Колонки.Добавить("ОКАТО",        Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Платежи.Колонки.Добавить("Сумма",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// СуммаУведомления используется в тех случаях, когда таблица платежей является источником для таблицы расчетов.
	// В таблице расчетов этот показатель требуется в тех случаях, когда сумма уведомления может быть отлична от суммы налога
	// (например, уплата налога на имущество за год)
	Платежи.Колонки.Добавить("СуммаУведомления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Платежи.Колонки.Добавить("Аванс",        Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КодНалоговогоОргана",        Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Платежи.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("СрокУплаты",      Новый ОписаниеТипов("Дата"));
	
	Возврат Платежи;
	
КонецФункции

Функция ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа) Экспорт
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(ОписаниеПлатежа.Налог);
	
	ДатаПлатежа = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДействуетПереходНаЕНП = ПлатежиВБюджетКлиентСервер.ДействуетПереходНаЕНП(ДатаПлатежа);
	ЭтоЕНП = ПлатежиВБюджетКлиентСервер.ЭтоЕдиныйНалоговыйПлатеж(ОписаниеПлатежа.КБК);
	ЭтоНалоговыйПлатеж = ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(ОписаниеПлатежа.КБК);
	
	Если Не ЭтоЕНП И УчетнаяПолитика.ПлательщикЕНП(ОписаниеПлатежа.Организация, ДатаПлатежа) И ДействуетПереходНаЕНП Тогда
		НалогиНеВходящиеВНЕП = ЕдиныйНалоговыйСчетПовтИсп.МассивДоступныхВидовНалогов();
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеПлатежа.Налог, "ВидНалога");
		Если НалогиНеВходящиеВНЕП.Найти(ВидНалога) = Неопределено Тогда
			ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ЕдиныйНалоговыйПлатеж;
			ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог);
			ЭтоЕНП = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоУплатаЕНППоНовымРеквизитам = ЭтоЕНП И ДействуетПереходНаЕНП;
	
	Если ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
		Если ЭтоУплатаЕНППоНовымРеквизитам Тогда
			РеквизитыПолучателя = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
			ОписаниеПлатежа.КодНалоговогоОргана = РеквизитыПолучателя.Код;
		ИначеЕсли ЭтоНалоговыйПлатеж И ДатаПлатежа >= ПлатежиВБюджетКлиентСервер.ДатаСменыНаименованияМИДол() Тогда
			ВидИКод = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
				ОписаниеПлатежа.Налог, ОписаниеПлатежа.Организация, ДатаПлатежа);
			ОписаниеПлатежа.КодНалоговогоОргана = ВидИКод.Код;
		ИначеЕсли Не ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
			ВидИКод = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
				ОписаниеПлатежа.Налог, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
			// Если нужно заполнять получателя и не заполен Код налогового органа, попробуем получить его из сведений об организации.
			ОписаниеПлатежа.КодНалоговогоОргана = ВидИКод.Код;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыГоловнойОрганизации = ЕдиныйНалоговыйСчет.КППОКТМООрганизацииДляУплатыВБюджет(
		ОписаниеПлатежа.Организация, ОписаниеПлатежа.Налог, ДатаПлатежа);
	
	Если ПравилаЗаполнения.ЗаполнятьКодТерриторииПоРегистрации
		И ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(ОписаниеПлатежа.КБК)
			Или Не ЗначениеЗаполнено(ОписаниеПлатежа.ОКАТО) Тогда
		Если ДействуетПереходНаЕНП Тогда
			ОписаниеПлатежа.ОКАТО = РеквизитыГоловнойОрганизации.ОКТМО;
		ИначеЕсли ПустаяСтрока(ОписаниеПлатежа.ОКАТО) Тогда
			ОписаниеПлатежа.ОКАТО = Справочники.Организации.КодТерриторииМестаРегистрации(ОписаниеПлатежа.Организация);
		КонецЕсли;
	КонецЕсли;
	
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(ОписаниеПлатежа.ОКАТО, ДатаПлатежа);
	
	ДанныеПлатежногоДокумента = Новый Структура;
	// Контекст
	ДанныеПлатежногоДокумента.Вставить("Организация", ОписаниеПлатежа.Организация);
	Если НЕ ПустаяСтрока(ОписаниеПлатежа.КПППлательщика) Тогда
		Если ЭтоУплатаЕНППоНовымРеквизитам Тогда
			ДанныеПлатежногоДокумента.Вставить("КПППлательщика", РеквизитыГоловнойОрганизации.КПП);
		Иначе
			ДанныеПлатежногоДокумента.Вставить("КПППлательщика", ОписаниеПлатежа.КПППлательщика);
		КонецЕсли;
	КонецЕсли;
	ДанныеПлатежногоДокумента.Вставить("Налог", ОписаниеПлатежа.Налог);
	ДанныеПлатежногоДокумента.Вставить("ВидНалоговогоОбязательства", ОписаниеПлатежа.ВидНалоговогоОбязательства);
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		
		ДанныеПлатежногоДокумента.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
		ДанныеПлатежногоДокумента.Вставить("СчетКасса",   ПланыСчетов.Хозрасчетный.КассаОрганизации);
		ДанныеПлатежногоДокумента.Вставить("НалоговыйПериод", НачалоМесяца(ОписаниеПлатежа.Период));
		
		Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОписаниеПлатежа.Организация) Тогда
			ПредпринимательФИО = Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
			ДанныеПлатежногоДокумента.Вставить("Выдать", ПредпринимательФИО);
		КонецЕсли;
		
	Иначе
		ДанныеПлатежногоДокумента.Вставить("ПеречислениеВБюджет", Истина);
		ДанныеПлатежногоДокумента.Вставить("ВидОперации",         Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента.Вставить("ВалютаДокумента", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", ПлатежиВБюджетКлиентСервер.ВидПеречисления(ОписаниеПлатежа.КБК, ОписаниеПлатежа.Период));
	
	// Известны из декларации
	ДанныеПлатежногоДокумента.Вставить("СуммаДокумента",    ОписаниеПлатежа.Сумма);
	ПоказательДаты = ПлатежиВБюджетКлиентСервер.ПреобразоватьДатуКСтроке(ОписаниеПлатежа.ДатаДекларации);
	ДанныеПлатежногоДокумента.Вставить("ПоказательДаты",
		?(ЭтоЕНП, ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение(), ПоказательДаты));
	ДанныеПлатежногоДокумента.Вставить("ДокументОснование", ОписаниеПлатежа.Декларация);
	
	// Зависят от налога, но известны из декларации
	ДанныеПлатежногоДокумента.Вставить("КодБК",             ОписаниеПлатежа.КБК);
	ДанныеПлатежногоДокумента.Вставить("КодОКАТО",          ОписаниеПлатежа.ОКАТО);
	ДанныеПлатежногоДокумента.Вставить("ПоказательПериода", ?(ЭтоЕНП,
		ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение(), ОписаниеПлатежа.ПоказательПериода));
	
	Если ЗначениеЗаполнено(ОписаниеПлатежа.Налог) И ОписаниеПлатежа.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы 
		И ОписаниеПлатежа.ИмяЗадачи <> "Патент_Уплата" Тогда
		
		ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
			ОписаниеПлатежа.ПоказательПериода);
			
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период, ПредставлениеНалоговогоПериода);
			
	Иначе
		НазначениеПлатежа = ОписаниеПлатежа.Описание;
	КонецЕсли;
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ДанныеПлатежногоДокумента.Вставить("Основание", НазначениеПлатежа);
	Иначе
		ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	
	Если ОписаниеПлатежа.Аванс И Не ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ДатаПлатежа) Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательТипа", ПлатежиВБюджетКлиентСервер.ТипПлатежаАванс());
	КонецЕсли;
	
	Если ЭтоЕНП Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательОснования", ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение());
	ИначеЕсли ЗначениеЗаполнено(ОписаниеПлатежа.ОснованиеПлатежа) Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательОснования", ОписаниеПлатежа.ОснованиеПлатежа);
	КонецЕсли;
	
	// Зависят от налога, но не известны из декларации
	НастройкиУплатыНалога = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоКБК(
		ОписаниеПлатежа.Организация,
		ОписаниеПлатежа.КБК,
		ОписаниеПлатежа.ОКАТО);
	
	ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств",
		УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДанныеПлатежногоДокумента.ВидОперации));
	Если НастройкиУплатыНалога <> Неопределено И ОписаниеПлатежа.Налог = НастройкиУплатыНалога.Налог Тогда
		Если ЗначениеЗаполнено(НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств) Тогда
			ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств", НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НастройкиУплатыНалога.НазначениеПлатежа) Тогда
			Если НастройкиУплатыНалога.ВидПеречисленияВБюджет <> Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
				ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
			Иначе
				ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
					ДанныеПлатежногоДокумента.ПоказательПериода);
				Если НЕ ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда
					НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 %2'"),
						НастройкиУплатыНалога.НазначениеПлатежа,
						ПредставлениеНалоговогоПериода);
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
				Иначе
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", НастройкиУплатыНалога.ВидПеречисленияВБюджет);
		Если ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "Получатель", "Контрагент") Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СчетПолучателя", "СчетКонтрагента");
		КонецЕсли;
		
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СтатусСоставителя");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательТипа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ОчередностьПлатежа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательОснования");
		
		Если НастройкиУплатыНалога.Свойство("КодОКАТО") И ЗначениеЗаполнено(НастройкиУплатыНалога.КодОКАТО) 
			И (Не ДанныеПлатежногоДокумента.Свойство("КодОКАТО") Или Не ЗначениеЗаполнено(ДанныеПлатежногоДокумента.КодОКАТО))Тогда
			ДанныеПлатежногоДокумента.Вставить("КодОКАТО", НастройкиУплатыНалога.КодОКАТО);
		КонецЕсли;
		
		// ПоказательПериода точнее определяется из декларации, чем задан в настройке
		Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.Декларация)
			И ДанныеПлатежногоДокумента.Свойство("ПоказательПериода") И НЕ ЗначениеЗаполнено(ДанныеПлатежногоДокумента.ПоказательПериода) Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательПериода");
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
				НастройкиУплатыНалога.СчетУчета,
				ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.КБК,
				ОписаниеПлатежа.КодНалоговогоОргана,
				ОписаниеПлатежа.Период,
				ОписаниеПлатежа.ВидНалоговогоОбязательства);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
			ВидГосоргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(ДанныеПлатежногоДокумента.КодБК);
			ДанныеПлатежногоДокумента.Вставить("КодНалоговогоОргана", ОписаниеПлатежа.КодНалоговогоОргана);
			
			//определяем получателя по данным информационной базы
			НалоговыйОрган = Документы.ПлатежноеПоручение.ПолучательДляПлатежаГосударственномуОргануПоПравиламУплаты(ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.Период,
				ВидГосоргана,
				ОписаниеПлатежа.КодНалоговогоОргана,
				ОписаниеПлатежа.Налог);
			Если ЗначениеЗаполнено(НалоговыйОрган.Контрагент) Тогда
				ДанныеПлатежногоДокумента.Вставить("Контрагент",      НалоговыйОрган.Контрагент);
				ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", НалоговыйОрган.БанковскийСчет);
			Иначе
				//Определяем данные получателя из веб-сервиса
				Если ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
					Если УчетнаяПолитика.ПлательщикЕНП(ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период) Тогда
						ЕдиныйНалоговыйСчет.ПлатежныеРеквизитыЕдиногоНалоговогоСчета(Реквизиты.ПлатежныеРеквизиты);
						Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
							Реквизиты.ПлатежныеРеквизиты.БанковскийСчет = ЕдиныйНалоговыйСчет.ЕдиныйБанковскийСчетГосударственногоОргана(Реквизиты.Ссылка);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				Иначе
					Реквизиты = Неопределено;
				КонецЕсли;
				Если Реквизиты <> Неопределено
					И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					
					Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					Иначе
						ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОписаниеПлатежа.КБК);
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ОписаниеПлатежа.Период);
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
					СчетУчетаРасчетовСКонтрагентом,
					ОписаниеПлатежа.Организация,
					ОписаниеПлатежа.КБК,
					ОписаниеПлатежа.КодНалоговогоОргана,
					ОписаниеПлатежа.Период,
					ОписаниеПлатежа.ВидНалоговогоОбязательства);
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеПлатежа.ОплатаЗадолженности Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательОснования",
			ПлатежиВБюджетКлиентСервер.ОснованиеПлатежаДобровольноеПогашениеЗадолженности());
	КонецЕсли;
	
	Возврат ДанныеПлатежногоДокумента;
	
КонецФункции

Функция ТребованияНеВыполняемыеБРО() Экспорт
	
	НевыполнимыеТребования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторНалогаОтчета,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК ВладелецРеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРеквизитДопУпорядочивания,
	|	РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяТребования = Выборка.ИдентификаторНалогаОтчета + "." + Выборка.ИдентификаторПравила;
		Если Не ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ИмяТребования) Тогда
			НевыполнимыеТребования.Добавить(ИмяТребования);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НевыполнимыеТребования;
	
КонецФункции

Функция ПлатежиПоЗадачам(Организация, РабочаяДата, ГоризонтПланирования) Экспорт
	
	ЗадачиБухгалтера = ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования);
	
	Платежи = Новый Структура;
	
	Платежи.Вставить("РегулярныеПлатежи", РегулярныеПлатежи(ЗадачиБухгалтера.РегулярныеПлатежи));
	Платежи.Вставить("УплатаНалогов",     НалоговыеПлатежи(ЗадачиБухгалтера.УплатаНалогов));
	Платежи.Вставить("Зарплата",          ЗарплатныеПлатежи(ЗадачиБухгалтера.Зарплата));
	
	Возврат Платежи;
	
КонецФункции

Функция СрокВыполненияЗадачи(Организация, Правило, ТекущийПериод) Экспорт
	
	ПериодичностьПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность");
	
	НачалоОтчетногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		ПериодичностьПравила, ТекущийПериод);
	ОкончаниеОтчетногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			ПериодичностьПравила, ТекущийПериод);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Правило", Правило);
	Запрос.Параметры.Вставить("НачалоПериода", НачалоОтчетногоПериода);
	Запрос.Параметры.Вставить("ОкончаниеПериода", ОкончаниеОтчетногоПериода);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоПериода
	|	И ЗадачиБухгалтера.ПериодСобытия <= &ОкончаниеПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Срок;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Дополняет таблицу платежей по декларации платежными документами
// Добавляет в переданную таблицу "Платежи" колонки:
//   * ПлатежноеПоручение - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходныйКассовыйОрдер - ссылка на документ уплаты.
//   * СуммаОплачено - Число - сумма документа уплаты
//   * Оплачено - Булево - флаг, что документ уплаты в состоянии "Оплачено"
//
// Параметры:
//  Платежи - ТаблицаЗначений - см. НовыйТаблицаПлатежи()
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов, СправочникСсылка.Патенты - правило уплаты налога, подготовки отчета.
//  ПериодСобытия - Дата - период события
//  Организация - СправочникСсылка.Организации - организация
//  СведенияПоДекларации - Структура - для платежей по декларации, ключи:
//    * Ссылка - ссылка на регламентированный отчет
//    * ПоказательПериода - Строка
//
Процедура ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация, СведенияПоДекларации = Неопределено, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	ИмяЗадачи = Правило.Владелец.Код;
	ПлатежПоДекларации = ЗначениеЗаполнено(СведенияПоДекларации);
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Если Платежи.Колонки.Найти("Индекс") = Неопределено Тогда
		Платежи.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если Платежи.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		Платежи.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	КонецЕсли;
	Если Платежи.Колонки.Найти("СуммаОплачено") = Неопределено Тогда
		Платежи.Колонки.Добавить("СуммаОплачено", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если Платежи.Колонки.Найти("Оплачено") = Неопределено Тогда
		Платежи.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если Платежи.Колонки.Найти("Состояние") = Неопределено Тогда
		Платежи.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияБанковскихДокументов"));
	КонецЕсли;
	
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		СтрокаПлатежа.Индекс = Платежи.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("Платежи",       Платежи);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	Если ПлатежПоДекларации Тогда
		Запрос.УстановитьПараметр("Декларация",        СведенияПоДекларации.Ссылка);
		ПоказательПериодаОсобыйПорядок = Новый Массив;
		Если ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, ПериодСобытия, Правило.Периодичность) Тогда
			ПоказательПериодаОсобыйПорядок.Добавить(ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение());
		КонецЕсли;
		Запрос.УстановитьПараметр("ПоказательПериода", СведенияПоДекларации.ПоказательПериода);
		Запрос.УстановитьПараметр("ПоказательПериодаОсобыйПорядок", ПоказательПериодаОсобыйПорядок);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.Период КАК Период,
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.Индекс КАК ИндексПлатежа
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПлатежПоДекларации Тогда
		ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса);
	Иначе
		ДополнитьТекстЗапросаПлатежи(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	Отбор.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|	И &УсловиеОтбораПоРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка) КАК Состояние,
	|	ИСТИНА КАК Оплачено,
	|	Отбор.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И &УсловиеОтбораПоРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено)),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВТПлатежныеПоручения.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	Платежи.ОКАТО КАК ОКАТОДекларации,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.ОКАТО КАК ОКАТОПлатежа,
	|	ПлатежиПоПравилу.Состояние КАК Состояние,
	|	ПлатежиПоПравилу.Оплачено КАК Оплачено,
	|	ПлатежиПоПравилу.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|			И (&УсловиеПоПериоду)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежиПоПравилу.СуммаДокумента УБЫВ
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Если ПлатежПоДекларации И ИмяЗадачи = "НДС" Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// Поэтому дополнительно проверяем месяц платежного поручения.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду",
			"НАЧАЛОПЕРИОДА(Платежи.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПлатежиПоПравилу.Дата, МЕСЯЦ)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) 
		И ИмяЗадачи <> "НалогНаПрибыль" Тогда
		// Для платежных поручений по налогу на прибыль регистрация в налоговом органе всегда не заполнена, поэтому отбор не накладываем.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоРегистрации", "Отбор.РегистрацияВНалоговомОргане = (&РегистрацияВНалоговомОргане)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоРегистрации", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			Платеж = Платежи[Выборка.ИндексПлатежа];
			Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
			Платеж.СуммаОплачено      = Выборка.СуммаДокумента;
			Платеж.Оплачено           = Выборка.Оплачено;
			Платеж.Состояние          = Выборка.Состояние;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Колонки.Удалить("Индекс");
	
КонецПроцедуры

Функция ОписаниеДействияДекларация(Правило, ПериодСобытия, Организация, РегистрацияВНалоговомОргане, ДлительностьБазовогоПериода = Неопределено) Экспорт
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если СтрНайти(ПолноеИмяПравила, "_СнятиеСУчета") > 0 Тогда
		// Для задачи формирования декларации при снятии ИП с учета открываем форму за год
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.БазовыйПериод, ПериодСобытия);
	Иначе
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, ПериодСобытия);
	КонецЕсли;
	
	КонецПериода  = КонецДня(ПериодСобытия);
	Периодичность = ?(ЗначениеЗаполнено(ДлительностьБазовогоПериода), ДлительностьБазовогоПериода, Правило.Периодичность);
	
	ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		НачалоПериода,
		КонецПериода,
		Периодичность);
	
	Если ОписаниеФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
	ОписаниеДействия.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Возвращает способ уплаты налога для организации и ИП
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов - если возможно несколько способов уплаты,
//  то возвращает пустую ссылку
//
Функция СпособУплатыНалогаВзноса(Организация) Экспорт
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Если ЭтоЮрЛицо Тогда
		СпособУплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	Иначе
		Если Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(Организация) > 0 Тогда
			// Возможно несколько способов оплаты
			СпособУплаты = Перечисления.СпособыУплатыНалогов.ПустаяСсылка();
		Иначе
			СпособУплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособУплаты;
	
КонецФункции

// Определяет особые способы выполнения задачи в помощнике уплаты налога.
//
// При этом стандартными способами считаются
// - уплата налога на основании декларации или другого регулярного отчета
// - выполнение действий, не связанных с уплатой налога, таких как
//   -- представление отчета, не предусматривающего уплату, например, статотчетности
//   -- выплата зарплаты
//   -- регулярные платежи поставщикам.
//
// Остальные случаи - особые, имеют свое имя способа выполнения задачи.
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Строка - имя способа выполнения задачи
//
Функция СпособВыполненияЗадачи(ПараметрыЗадачи) Экспорт
	
	Правило = ПараметрыЗадачи.ПравилоУплаты;
	
	// Уплату патента определяем по типу правила.
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.Патенты") Тогда
		Возврат "УплатаПатента";
	КонецЕсли;
	
	Если Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторЗадачи = Правило.Владелец.Код;
	ПолноеИмяПравила = СтрШаблон("%1.%2", ИдентификаторЗадачи, Правило.Код);
	
	Если ИдентификаторЗадачи = "НДФЛ_Агент_Уплата" Тогда
		Возврат "УплатаНДФЛ"; // по данным о суммах, удержанных с физических лиц
	ИначеЕсли ИдентификаторЗадачи = "СтраховыеВзносы" Тогда
		// по данным о начисленной заработной плате
		Если Правило.Код = "2023_Уплата_Травматизм" Тогда
			Возврат "УплатаСтраховыхВзносовНаТравматизм"; 
		Иначе
			Возврат "УплатаСтраховыхВзносов";
		КонецЕсли;
	ИначеЕсли (ИдентификаторЗадачи = "НалогНаИмущество" ИЛИ ИдентификаторЗадачи = "ТранспортныйНалог" ИЛИ ИдентификаторЗадачи = "ЗемельныйНалог") 
		И (Не ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Или ПараметрыЗадачи.ПериодСобытия >= '20211231') Тогда
		// В соответствии с 63-ФЗ от 15.04.2019:
		//  - с 2020 года отменены налоговые расчеты по авансам по налогу на имущество.
		//  - с 2021 года (т.е. за налоговый период 2020 год и позже) отменены налоговые декларации по земельному и транспортному налогам.
		// Поэтому за периоды до 2020 года каждому правилу уплаты налога на имущество соответствует правило представления отчета,
		// а с 2020 года при уплате авансов по имуществу правило представления отчета отсутствует (декларация требуется только за год).
		// Также за период 2020 год и последующие налоговые периоды отсутстствуют правила представления декларации по транспортному и земельному налогу.
		// Таким образом, до уплаты налога за 2021 год (т.е. ПериодСобытия меньше 31.12.2021) ориентируемся на наличие 
		// правила по представлению отчета: при его наличии уплата выполняется строго по декларации (касается налога на имущество за 2020 год),
		// а если декларация не требуется, то налог уплачивается по данным расчета (транспортный и земельный налоги).
		
		// С 2022 года меняется срок уплаты налога на имущество: срок уплаты установлен значительно ранее срока подачи декларации. 
		// Таким образом, уплату налога на имущество больше не привязываем к декларации жестко (можно уплатить и по расчету, и по декларации).
		// Поэтому с 2022 года (т.е. за период 2021 года и далее) все имущественные налоги уплачиваются по одному алгоритму:
		// если за период требуется декларация, то можно уплатить налог как по расчету, так и по декларации,
		// а если декларация не требуется, то уплачиваем только по данным расчета.
		Возврат "УплатаИмущественныхНалогов";
	ИначеЕсли ИдентификаторЗадачи = "ТорговыйСбор" Тогда
		Возврат "УплатаТорговогоСбора"; // по данным уведомления об открытии торговой точки, представляемым единовременно
	ИначеЕсли ИдентификаторЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход() Тогда 
		Возврат "УплатаНалогаНаПрофессиональныйДоход"; // по данным уведомления
	ИначеЕсли ИдентификаторЗадачи = "СтраховыеВзносыАУСН" Тогда
		Возврат "УплатаСтраховыхВзносовНаТравматизм";
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_Декабрь"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_ЕдиныйПомощник"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2024_НДФЛ_Уплата_КонецМесяца" Тогда
		Возврат "УплатаНДФЛ_ЕНС";
	ИначеЕсли ИдентификаторЗадачи = "НДС" Тогда
		Возврат "УплатаНДС";
	ИначеЕсли ИдентификаторЗадачи = "УСН" Тогда
		Возврат "УплатаУСН"; 
	ИначеЕсли ИдентификаторЗадачи = "НДФЛ_Предприниматель" Тогда
		Возврат "УплатаНДФЛ_ИП";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Проверяет является ли правило уплатой/отчетом по страховым взносам
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Булево - признак того является ли правило платой/отчетом по страхвым взносам или нет
//
Функция ЭтоСтраховыеВзносы(Правило) Экспорт
	
	Если ТипЗнч(Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		Возврат Ложь;
	Иначе
		Возврат Правило.Владелец.Код = "СтраховыеВзносы";
	КонецЕсли;
	
КонецФункции

// Возвращает данные для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ПериодСобытия - Дата
//  Срок - Дата
//  ПоказательПериода - Строка
//  ДополнительныеПараметры - Структура - дополнительные параметры, если необходимо уточнение получения данных,
//                             при этом функция "ДанныеРеглОтчета" соответствующего регламентированного отчета
//                             должна поддерживать работу с этим параметром (пример см. в модуле менеджера
//                             отчета "РегламентированныйОтчетНДС"); необязательный параметр.
//
// Возвращаемое значение:
//  ДанныеДекларации - Структура - ключи см. ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога().
//    Для задач "НДС" дополняется ключами:
//       * СуммаНДСПоДекларации - Число - сумма НДС по декларации
//    Таблица в ключе "Платежи" дополнена колонками:
//       * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - ссылка на налог, соответствующий виду налога
//       * КодНалоговогоОргана - Строка - код налогового органа
//       * Наименование - Строка - представление налога
//
Функция ДанныеДляУплатыНалогаПоДекларации(Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	НачалоБазовогоПериода       = Показатели.НачалоБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ДанныеДекларации = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		КонецБазовогоПериода,
		ДополнительныеПараметры);
		
	Если ДанныеДекларации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Удалим строки, не относящиеся к заданному периоду
	КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
	
	ДанныеДекларации.Платежи.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ДанныеДекларации.Платежи.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеДекларации.Платежи.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	// Для НДС отдельно добавим итог по декларации
	Если ЭтоНДС Тогда
		ДанныеДекларации.Вставить("СуммаНДСПоДекларации", 0);   // 1 раздел декларации
		ДанныеДекларации.Вставить("СуммаНДСНАПоДекларации", 0); // 2 раздел декларации
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
		Если ЭтоНДС Тогда
			// Особенность НДС в том, что он уплачивается несколькими платежами.
			// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
			ПериодПлатежа = ПериодСобытия;
			Если Платеж.Агент Тогда
				ДанныеДекларации.СуммаНДСНАПоДекларации = ДанныеДекларации.СуммаНДСНАПоДекларации + Платеж.Сумма;
				// Платежи агентского НДС не обрабатываем.
				Продолжить;
			Иначе
				ДанныеДекларации.СуммаНДСПоДекларации = ДанныеДекларации.СуммаНДСПоДекларации + Платеж.Сумма;
			КонецЕсли;
		Иначе
			ПериодПлатежа = Платеж.Период;
		КонецЕсли;
		
		КБКЗаполнен = ЗначениеЗаполнено(Платеж.КБК);
		КодЗадачи = КодЗадачиПоПравилу(Правило);
		
		Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
		ИначеЕсли КБКЗаполнен И КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель() Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(
				Платеж.КБК, ,
				ПлатежиВБюджетКлиентСервер.СтатусПлательщикаНалоговИСборовИП());
		ИначеЕсли КБКЗаполнен Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		Иначе
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(КодЗадачи, Организация, ПериодСобытия);
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		КонецЕсли;
		
		Если Не КБКЗаполнен Тогда
			
			Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Платеж.Налог, , КонецПериода);
			
		КонецЕсли;
		
		Платеж.Наименование = Строка(Платеж.Налог);
		
		Платеж.КодНалоговогоОргана = ?(ДанныеДекларации.Свойство("КодНалоговогоОргана"),
			ДанныеДекларации.КодНалоговогоОргана, "");
		
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(Платеж.ОКАТО, Платеж.Период);
		
		ЧужойПериод = ПериодПлатежа < НачалоПериода Или ПериодПлатежа > КонецПериода;
		Если ЧужойПериод Тогда
			ДанныеДекларации.Платежи.Удалить(Платеж);
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, платежные документы уже созданы
	Если ДанныеДекларации.Платежи.Количество() > 0 Тогда
		СведенияПоДекларации = Новый Структура;
		СведенияПоДекларации.Вставить("Ссылка", ДанныеДекларации.Ссылка);
		СведенияПоДекларации.Вставить("ПоказательПериода", ПоказательПериода);
		
		Если ЭтоНДС Тогда
			Уплаты = ДанныеДекларации.Платежи.Скопировать(Новый Структура("Агент", Ложь));
		Иначе
			Уплаты = ДанныеДекларации.Платежи.Скопировать();
		КонецЕсли;
		
		ДополнитьНачисленияПлатежнымиДокументами(
			Уплаты, Правило, ПериодСобытия, Организация, СведенияПоДекларации, РегистрацияВНалоговомОргане);
			
		Если УчетнаяПолитика.ПлательщикЕНП(Организация, Срок) Тогда
			
			РеквизитыЕдиногоНалоговогоПлатежа =
				ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(Организация,
					Срок);
					
			КолонкаИсключение = "";
			Для Каждого Платеж Из Уплаты Цикл
				Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					КолонкаИсключение = "Наименование";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Платеж Из Уплаты Цикл
				Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
				Иначе
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа, , КолонкаИсключение);
				КонецЕсли;
			КонецЦикла;
			Уплаты.Свернуть("Аванс, Агент, ВидНалога, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование, ПлатежноеПоручение, Оплачено", "Сумма, СуммаОплачено");
		КонецЕсли;
		
		ДополнитьНачисленияПлатежнымиДокументами(
			Уплаты, Правило, ПериодСобытия, Организация, СведенияПоДекларации, РегистрацияВНалоговомОргане);
			
	Иначе
		Уплаты = ДанныеДекларации.Платежи.СкопироватьКолонки();
	КонецЕсли;
	
	ДанныеДекларации.Вставить("Уплаты", Уплаты);
	
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Если НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
				Платеж.Период = ПериодСобытия;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, по которым нет платежей
	Если НЕ ЭтоНДС // Для задач уплаты и отчетности по НДС всегда возвращаем список платежей
		И ДанныеДекларации.Уплаты.Количество() > 1 Тогда
		КоличествоСтрок = ДанныеДекларации.Уплаты.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = ДанныеДекларации.Уплаты[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				ДанныеДекларации.Уплаты.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

// Возвращает данные для уплаты страховых взносов
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//
// Возвращаемое значение:
//  Платежи - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия, ДанныеЕНП = Ложь, ВариантВыборкиСтраховыхВзносов = 0) Экспорт
	
	ВариантыВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов();
	 
	НачалоПериода               = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, КонецМесяца(ПериодСобытия)+1);
	НачалоПредыдущегоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	
	ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов(ПериодСобытия);
	СчетУчетаТравматизм = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
	Если ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.Травматизм Тогда
		СчетаСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетУчетаТравматизм);
		ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов.Скопировать(Новый Структура("СчетУчета", СчетУчетаТравматизм));
	Иначе
		СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
		Если ВариантВыборкиСтраховыхВзносов = ВариантыВыборкиСтраховыхВзносов.СтраховыеВзносы Тогда
			СтрокаТравматизм = СчетаСтраховыхВзносов.Найти(СчетУчетаТравматизм);
			Если СтрокаТравматизм <> Неопределено Тогда
				СчетаСтраховыхВзносов.Удалить(СтрокаТравматизм);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода", НачалоПредыдущегоПериода);
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов",    СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",              ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто",         ЗначенияСубконто);
	Запрос.УстановитьПараметр("НачалоПростогоУчета",      ЕдиныйНалоговыйСчет.НачалоПростогоУчета());
	
	// Данные, уже переданные в уведомлении (Дт 68.90 - Кт 69.хх)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СчетУчета КАК СчетУчета,
	|	СУММА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.Сумма) КАК Сумма,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодБК КАК КБК,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодПоОКТМО КАК ОКАТО,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Организация КАК Организация,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СчетУчета В(&СчетаСтраховыхВзносов)
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Проведен
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Организация = &Организация
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Дата < НАЧАЛОПЕРИОДА(&НачалоПростогоУчета, МЕСЯЦ)
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Дата МЕЖДУ &НачалоПредыдущегоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И НАЧАЛОПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.СрокУплаты < НАЧАЛОПЕРИОДА(&НачалоПростогоУчета, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.СчетУчета,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодБК,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.КодПоОКТМО,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Организация,
	|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Дата";
	
	ТаблицаПоУведомлениям = Запрос.Выполнить().Выгрузить();
	ТаблицаПоУведомлениям.Колонки.Добавить("ВидНалоговогоОбязательства");
	
	ВидыНалогов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПоУведомлениям, "Налог", Истина), "ВидНалога");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУведомлениям Цикл
		СтрокаТаблицы.ВидНалоговогоОбязательства =
			Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаТаблицы.КБК,
				ПериодСобытия,
				ВидыНалогов[СтрокаТаблицы.Налог]);
	КонецЦикла;
	
	// Остатки расчетов по взносам
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТаблицаВзносов = УчетЗарплаты.ИсчисленныеСтраховыеВзносыЗаПериод(Организация, НачалоПредыдущегоПериода, ВариантВыборкиСтраховыхВзносов);
		Запрос.УстановитьПараметр("ТаблицаВзносов", ТаблицаВзносов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаВзносов.СчетУчета КАК СчетУчета,
		|	ТаблицаВзносов.ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ТаблицаВзносов.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_ТаблицаВзносов
		|ИЗ
		|	&ТаблицаВзносов КАК ТаблицаВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаВзносов.СчетУчета КАК СчетУчета,
		|	ВТ_ТаблицаВзносов.ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ВТ_ТаблицаВзносов.Сумма КАК Сумма
		|ИЗ
		|	ВТ_ТаблицаВзносов КАК ВТ_ТаблицаВзносов
		|ГДЕ
		|	ВТ_ТаблицаВзносов.СчетУчета В (&СчетаСтраховыхВзносов)
		|	И ВТ_ТаблицаВзносов.ВидНалоговогоОбязательства В (&ЗначенияСубконто)";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПериодСобытия);
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	СтрокиКУдалению = Новый Массив;
	
	Платежи   = НовыйТаблицаПлатежи();
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Организация = Организация;
		Платеж.ОКАТО       = КодТерритории;
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		СтрокиПоУведомлениям = ТаблицаПоУведомлениям.НайтиСтроки(СтруктураПоиска);
		СуммаПоУведомлениям = 0;
		Для Каждого СтрокаПоУведомлению Из СтрокиПоУведомлениям Цикл
			Если НачалоМесяца(СтрокаПоУведомлению.Дата) = НачалоПредыдущегоПериода Тогда
				СуммаПоУведомлениям = СуммаПоУведомлениям + СтрокаПоУведомлению.Сумма;
			КонецЕсли;
			СтрокиКУдалению.Добавить(СтрокаПоУведомлению);
		КонецЦикла;
		
		Платеж.Сумма = Платеж.Сумма + СуммаПоУведомлениям;
		
		РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если РеквизитыПоСчету.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоУведомлениям.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУведомлениям Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого Платеж Из Платежи Цикл
		ШаблонНаименования    = НСтр("ru = '%1%2'");
		НаименованиеНалога    = Строка(Платеж.Налог);
		УточнениеНаименования = "";
		Если Платеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
		
		Если ДанныеЕНП И ВариантВыборкиСтраховыхВзносов <> ВариантыВыборкиСтраховыхВзносов.Травматизм Тогда
			НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
			Срок = СрокВыполненияЗадачи(Организация, Правило, ПериодСобытия);
			КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, Срок);
			
			ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
			
			РеквизитыЕдиногоНалоговогоПлатежа =
				ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
					Срок);
			
			Для Каждого Платеж Из Платежи Цикл
				Если НалогиУплачиваемыеОтдельно.Найти(Платеж.Налог) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не Платеж.Оплачено Тогда
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
					Платеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				КонецЕсли;
			КонецЦикла;
			Платежи.Свернуть("Аванс, ВидНалоговогоОбязательства, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование, ПлатежноеПоручение, Оплачено", "Сумма, СуммаОплачено");
			
			ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
			
			КоличествоСтрок = Платежи.Количество();
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Платеж = Платежи[КоличествоСтрок - НомерСтроки];
				Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					Платежи.Удалить(Платеж);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли
	КонецЕсли;
	
	Если Платежи.Колонки.Найти("НалоговыйПериод") = Неопределено Тогда
		Платежи.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

// Возвращает данные для уплаты имущественных налогов (транспортного и земельного налогов, налога на имущество)
// 
// Параметры:
//  ПараметрыЗадачи - СтрокаТаблицыЗначений,Структура:
//     * ИдентификаторЗадачи - Строка
//     * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * Действие - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
//     * Организация - СправочникСсылка.Организации
//     * ПериодСобытия - Дата
//     * Срок - Дата
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ДанныеЕНП - Булево - Данные ЕНП
//  ГруппироватьПоНалоговойБазе - Булево - Истина, если для данной задачи порядок уплаты налога различается в зависимости
//                                         от налоговой базы (имеет смысл только для налога на имущество);
//                                         Ложь, если порядок уплаты единый для всей суммы налога
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйТаблицаПлатежи()
//  
Функция ДанныеДляУплатыИмущественныхНалогов(ПараметрыЗадачи, ДанныеЕНП = Ложь, ГруппироватьПоНалоговойБазе = Ложь) Экспорт
	
	ИмяЗадачи     = ПараметрыЗадачи.ИдентификаторЗадачи;
	// Актуальный расчет налога всегда находится в интервале последнего квартала
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
						Перечисления.Периодичность.Квартал, ПараметрыЗадачи.ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
						Перечисления.Периодичность.Квартал, ПараметрыЗадачи.ПериодСобытия);
	ВидНалога     = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, ПараметрыЗадачи.Организация, КонецПериода);
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		ПараметрыЗадачи.Организация,
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    ПараметрыЗадачи.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("НалоговыйОрган", ПараметрыЗадачи.РегистрацияВНалоговомОргане);
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество()
		 И (ПараметрыЗадачи.ПериодСобытия < РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество()
		 	Или РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
		 			ПараметрыЗадачи.Организация, КонецПериода)) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетНалогаНаИмущество.ПериодРасчета КАК Период,
		|	РасчетНалогаНаИмущество.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	РасчетНалогаНаИмущество.КБК КАК КБК
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.Организация = &Организация
		|	И РасчетНалогаНаИмущество.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
		|СГРУППИРОВАТЬ ПО
		|	РасчетНалогаНаИмущество.ПериодРасчета,
		|	РасчетНалогаНаИмущество.КодПоОКТМО,
		|	РасчетНалогаНаИмущество.КБК,
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ИФНС.Код, """")
		|ИМЕЮЩИЕ
		|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) > 0";
	
	ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаИмущество() Тогда
		
		// В некоторых случаях (это определяется вне данного метода) в сумму уведомления
		// включается только налог по кадастровой стоимости (см. параметр ГруппироватьПоНалоговойБазе).
		// Но даже если требуется группировка по налоговой базе, то данные нужно выбрать только по тем
		// получателям платежа (подразумевается сочетание кода налогового органа, ОКТМО и КБК),
		// где не возникло переплаты с учетом авансов (общая сумма налога к уплате больше 0).
		// Для этого используем временную таблицу ФильтрПоПолучателямПлатежа - ее группировки не зависят
		// от группировок результирующей таблицы.
		// Не индексируем ФильтрПоПолучателямПлатежа, т.к. не ожидаем в ней большое количество записей.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета КАК ПериодРасчета,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоНалоговойБазе
		|			ТОГДА ""СреднегодоваяСтоимость""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НалоговаяБаза,
		|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодПоОКТМО КАК КодПоОКТМО,
		|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоНалоговойБазе
		|			ТОГДА 0
		|		ИНАЧЕ РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате
		|	КОНЕЦ КАК СуммаУведомления,
		|	ЕСТЬNULL(РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	ВЫБОР
		|		КОГДА РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КБК = """"
		|			ТОГДА &КБК
		|		ИНАЧЕ РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КБК
		|	КОНЕЦ КАК КБК
		|ПОМЕСТИТЬ ДанныеРасчета
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
		|ГДЕ
		|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.Организация = &Организация
		|	И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС = &НалоговыйОрган
		|	И (НЕ &ГруппироватьПоНалоговойБазе
		|			ИЛИ &Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоНалоговойБазе
		|			ТОГДА ""КадастроваяСтоимость""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодПоОКТМО,
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате,
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате,
		|	ЕСТЬNULL(РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС.Код, """"),
		|	&КБК
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
		|ГДЕ
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
		|	И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС = &НалоговыйОрган
		|	И (НЕ &ГруппироватьПоНалоговойБазе
		|			ИЛИ &Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРасчета.ПериодРасчета КАК ПериодРасчета,
		|	ДанныеРасчета.КодПоОКТМО КАК КодПоОКТМО,
		|	ДанныеРасчета.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ДанныеРасчета.КБК КАК КБК
		|ПОМЕСТИТЬ ФильтрПоПолучателямПлатежа
		|ИЗ
		|	ДанныеРасчета КАК ДанныеРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРасчета.ПериодРасчета,
		|	ДанныеРасчета.КодПоОКТМО,
		|	ДанныеРасчета.КБК,
		|	ДанныеРасчета.КодНалоговогоОргана
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеРасчета.СуммаНалогаКУплате) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРасчета.ПериодРасчета КАК Период,
		|	ДанныеРасчета.НалоговаяБаза КАК НалоговаяБаза,
		|	ДанныеРасчета.КодПоОКТМО КАК ОКАТО,
		|	СУММА(ДанныеРасчета.СуммаНалогаКУплате) КАК Сумма,
		|	СУММА(ДанныеРасчета.СуммаУведомления) КАК СуммаУведомления,
		|	ДанныеРасчета.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ДанныеРасчета.КБК КАК КБК
		|ИЗ
		|	ДанныеРасчета КАК ДанныеРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФильтрПоПолучателямПлатежа КАК Фильтр
		|		ПО ДанныеРасчета.ПериодРасчета = Фильтр.ПериодРасчета
		|			И ДанныеРасчета.КодПоОКТМО = Фильтр.КодПоОКТМО
		|			И ДанныеРасчета.КодНалоговогоОргана = Фильтр.КодНалоговогоОргана
		|			И ДанныеРасчета.КБК = Фильтр.КБК
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРасчета.ПериодРасчета,
		|	ДанныеРасчета.НалоговаяБаза,
		|	ДанныеРасчета.КодПоОКТМО,
		|	ДанныеРасчета.КБК,
		|	ДанныеРасчета.КодНалоговогоОргана";
		
		// Если КБК не указан явно в расчете налога (в настройках объектов), то берем КБК по имуществу,
		// не входящему в ЕСГС
		КБК = ?(
			ЗначениеЗаполнено(КБК),
			КБК,
			РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.КБКПоИмуществуНеВходящемуВЕСГС()
			);
		Запрос.УстановитьПараметр("КБК", КБК);
		Запрос.УстановитьПараметр("ГруппироватьПоНалоговойБазе", ГруппироватьПоНалоговойБазе);
		Запрос.УстановитьПараметр("Действие", ПараметрыЗадачи.Действие);
		
	ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиТранспортныйНалог() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетТранспортногоНалога.ПериодРасчета КАК Период,
		|	РасчетТранспортногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	"""" КАК КБК
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация = &Организация
		|	И РасчетТранспортногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетТранспортногоНалога.ИФНС = &НалоговыйОрган
		|СГРУППИРОВАТЬ ПО
		|	РасчетТранспортногоНалога.ПериодРасчета,
		|	РасчетТранспортногоНалога.КодПоОКТМО,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """")
		|ИМЕЮЩИЕ
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) > 0";
		
	ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог()
		 И ПараметрыЗадачи.ПериодСобытия < РасчетИмущественныхНалоговКлиентСервер.НачалоПримененияНовогоРасчетаЗемельногоНалога() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетЗемельногоНалога.ПериодРасчета КАК Период,
		|	РасчетЗемельногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалогаДо2020 КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетЗемельногоНалога.ИФНС = &НалоговыйОрган
		|СГРУППИРОВАТЬ ПО
		|	РасчетЗемельногоНалога.ПериодРасчета,
		|	РасчетЗемельногоНалога.КодПоОКТМО,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """")
		|ИМЕЮЩИЕ
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) > 0";
		
	ИначеЕсли ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЗемельныйНалог() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетЗемельногоНалога.ПериодРасчета КАК Период,
		|	РасчетЗемельногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетЗемельногоНалога.ИФНС = &НалоговыйОрган
		|СГРУППИРОВАТЬ ПО
		|	РасчетЗемельногоНалога.ПериодРасчета,
		|	РасчетЗемельногоНалога.КодПоОКТМО,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """")
		|ИМЕЮЩИЕ
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) > 0";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Платежи   = НовыйТаблицаПлатежи();
	
	Пока Выборка.Следующий() Цикл
		
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		
		Если Не ГруппироватьПоНалоговойБазе Тогда
			Платеж.СуммаУведомления = Платеж.Сумма;
		КонецЕсли;
		
		Платеж.КБК = ?(ЗначениеЗаполнено(Выборка.КБК), Выборка.КБК, КБК);
		
		Если ЗначениеЗаполнено(Налог) Тогда
			Платеж.Налог = Налог;
		ИначеЕсли ЗначениеЗаполнено(Платеж.КБК) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		КонецЕсли;
		
		Платеж.Наименование = Строка(Платеж.Налог);
		Если ГруппироватьПоНалоговойБазе Тогда
			ТекстШаблона = НСтр("ru='%1 %2'");
			Если Выборка.НалоговаяБаза = "СреднегодоваяСтоимость" Тогда
				Платеж.Наименование = СтрШаблон(
					ТекстШаблона,
					Платеж.Наименование,
					НСтр("ru='по среднегодовой стоимости'"));
			ИначеЕсли Выборка.НалоговаяБаза = "КадастроваяСтоимость" Тогда
				Платеж.Наименование = СтрШаблон(
					ТекстШаблона,
					Платеж.Наименование,
					НСтр("ru='по кадастровой стоимости'"));
			КонецЕсли;
		КонецЕсли;
		
		Платеж.КодНалоговогоОргана = ?(ЗначениеЗаполнено(Выборка.КодНалоговогоОргана),
			Выборка.КодНалоговогоОргана, КодНалоговогоОргана);
		Платеж.Аванс = Истина;
		
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(Платеж.ОКАТО, Платеж.Период);
	
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		
		ДополнитьНачисленияПлатежнымиДокументами(
			Платежи,
			ПараметрыЗадачи.Правило,
			ПараметрыЗадачи.ПериодСобытия,
			ПараметрыЗадачи.Организация,
			,
			ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
		Если ДанныеЕНП Тогда
			
			ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыЗадачи.Организация);
			
			РеквизитыЕдиногоНалоговогоПлатежа =
				ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(ГоловнаяОрганизация,
					ПараметрыЗадачи.Срок);
			
			Для Каждого Платеж Из Платежи Цикл
				Если Не Платеж.Оплачено Тогда
					ЗаполнитьЗначенияСвойств(Платеж, РеквизитыЕдиногоНалоговогоПлатежа);
				КонецЕсли;
			КонецЦикла;
			Платежи.Свернуть("Аванс, ВидНалоговогоОбязательства, КБК, КодНалоговогоОргана, Налог, ОКАТО, Период, Наименование, ПлатежноеПоручение, Оплачено", "Сумма, СуммаОплачено");
			
			ДополнитьНачисленияПлатежнымиДокументами(
				Платежи,
				ПараметрыЗадачи.Правило,
				ПараметрыЗадачи.ПериодСобытия,
				ПараметрыЗадачи.Организация,
				,
				ПараметрыЗадачи.РегистрацияВНалоговомОргане);
			
			КоличествоСтрок = Платежи.Количество();
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Платеж = Платежи[КоличествоСтрок - НомерСтроки];
				Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
					Платежи.Удалить(Платеж);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

// Возвращает данные о сформированных уведомлениях
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов, Массив
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ЭтоПериодПоНДФЛКонецМесяца - Булево, признак задачи НДФЛ по концу месяца
//
// Возвращаемое значение:
//  Уведомления - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУведомлений(Правила, Организация, ПериодСобытия, РегистрацияВНалоговомОргане = Неопределено, ЭтоПериодПоНДФЛКонецМесяца = Ложь) Экспорт
	
	ВидыКодыНалогов = РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтераДляУведомлений();
	
	ТаблицаУведомлений = НовыйТаблицаУведомлений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("Правила",                     Правила);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ВидыКодыНалогов",             ВидыКодыНалогов);
	Запрос.УстановитьПараметр("ЭтоПериодПоНДФЛКонецМесяца",  ЭтоПериодПоНДФЛКонецМесяца);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКодыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыКодыНалогов.КодЗадачи КАК КодНалога
	|ПОМЕСТИТЬ ВидыКодыНалогов
	|ИЗ
	|	&ВидыКодыНалогов КАК ВидыКодыНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Налог
	|ПОМЕСТИТЬ НалогиУведомления
	|ИЗ
	|	ВидыКодыНалогов КАК ВидыКодыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ВидыКодыНалогов.КодНалога = ЗадачиБухгалтера.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Владелец = ЗадачиБухгалтера.Ссылка)
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В (&Правила))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО (ВидыНалоговИПлатежейВБюджет.ВидНалога = ВидыКодыНалогов.ВидНалога)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка КАК Уведомление,
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата КАК Дата,
	|	СУММА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.Сумма) КАК Сумма
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
	|		ПО УведомлениеОбИсчисленныхСуммахНалогов.Ссылка = УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка
	|			И (ВЫБОР
	|				КОГДА &ЭтоПериодПоНДФЛКонецМесяца
	|					ТОГДА НАЧАЛОПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, ДЕНЬ)
	|							И УведомлениеОбИсчисленныхСуммахНалоговНалоги.КонецПериода = &ПериодСобытия
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.КонецПериода, МЕСЯЦ), ДЕНЬ) = &ПериодСобытия
	|						И НАЧАЛОПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, ДЕНЬ)
	|			КОНЕЦ)
	|			И (&УсловиеРегистрацияВНалоговомОрганеУведомления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалогиУведомления КАК НалогиУведомления
	|		ПО (НалогиУведомления.Налог = УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог)
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалогов.Организация = &Организация
	|	И НЕ УведомлениеОбИсчисленныхСуммахНалогов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка,
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	ОперацияПоЕдиномуНалоговомуСчету.Дата,
	|	ОперацияПоЕдиномуНалоговомуСчету.СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоЕдиномуНалоговомуСчету КАК ОперацияПоЕдиномуНалоговомуСчету
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = ОперацияПоЕдиномуНалоговомуСчету.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.Правило В(&Правила)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Дата,
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.Правило В(&Правила)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	УведомлениеОбИсчисленныхСуммахНалогов.Дата,
	|	УведомлениеОбИсчисленныхСуммахНалогов.СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = УведомлениеОбИсчисленныхСуммахНалогов.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация = &Организация
	|	И ЗадачиБухгалтераУведомления.Правило В(&Правила)
	|	И ЗадачиБухгалтераУведомления.ПериодСобытия = &ПериодСобытия
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОрганеУведомления", "УведомлениеОбИсчисленныхСуммахНалоговНалоги.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтераУведомления.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОрганеУведомления", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаУведомлений.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТаблицаУведомлений;
	
КонецФункции

// Возвращает список правил, уведомления по которым сдавать не обязательно.
// Например, правило с типом Уведомление по задаче "СтраховыеВзносы_Предприниматель",
// не относится к уведомлениям ЕНС и не обязательно для выполнения.
// 
// Возвращаемое значение:
//   - Массив - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - список правил, уведомления по которым не обязательны.
//
Функция ПравилаПоНеобязательнымУведомлениям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКодовЗадачНеобязательныхУведомлений", КодыЗадачПоНеобязательнымУведомлениям());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Ссылка = ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
	|ГДЕ
	|	ЗадачиБухгалтера.Код В(&СписокКодовЗадачНеобязательныхУведомлений)"; 
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает список кодов задач, уведомления по которым сдавать не обязательно.
// Например, по задаче "СтраховыеВзносы_Предприниматель",
// уведомление сдавать не нужно, нужно сдавать заявление. Хотя подчиненные правила все равно имеют тип Уведомление.
// В эту функцию нужно добавлять все задачи, у которых есть правила с действием "Уведомление", но которые не относятся
// у уведомлению по уплате налогов для ЕНС.
// 
// Возвращаемое значение:
//   - Массив - Строка - список кодов задач, уведомления по которым не требуются.
//
Функция КодыЗадачПоНеобязательнымУведомлениям() Экспорт
	
	СписокКодовЗадачНеобязательныхУведомлений = Новый Массив;
	// По страховым взносам за ИП можно подавать заявление ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.
	// Правила по этому заявлению имеют действие Уведомление, но их подавать, в отличие от уведомлений ЕНС не обязательно.
	СписокКодовЗадачНеобязательныхУведомлений.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	Возврат СписокКодовЗадачНеобязательныхУведомлений;
	
КонецФункции

// Возвращает показатель периода для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  ПериодСобытия - Дата
//  Срок - Дата
//
// Возвращаемое значение:
//  ПоказательПериода - Строка
//
Функция ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли Правило.Владелец.Код = "НДФЛ_Предприниматель" Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	КонецЕсли;
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Возврат ПоказательПериода;
	
КонецФункции

// Записывает в журнал регистрации факт попытки пользователем выполнения действия.
//
// Параметры:
//	ТекстКомментария - Строка - Текст комментария записи журнала регистрации.
//
Процедура ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария) Экспорт

	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ТекстКомментария);

КонецПроцедуры

// Возвращает массив правил уплаты авансовых платежей по НДФЛ с доходов от предпринимательской деятельности ИП на ОСНО.
//
// Возвращаемое значение:
//   Массив - массив элементов с типом "СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов".
//
Функция ПравилаУплатыАвансовПоНДФЛ() Экспорт
	
	ИдентификаторыПравил = Новый Массив;
	ИдентификаторыПравил.Добавить("2013_ИП_Аванс_1Полугодие");
	ИдентификаторыПравил.Добавить("2013_ИП_Аванс_2Полугодие");
	ИдентификаторыПравил.Добавить("2022_ЕНП_УведомлениеИП_УплатаАвансов");
	
	МассивПравил = Новый Массив;
	
	Для Каждого Идентификатор Из ИдентификаторыПравил Цикл
		
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Предприниматель", Идентификатор);
		Если Правило <> Неопределено Тогда
			МассивПравил.Добавить(Правило);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПравил;
	
КонецФункции

Функция ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(Организация, Период = Неопределено) Экспорт
	
	Правила = Новый Структура;
	Правила.Вставить("Задача", "НДФЛ_Предприниматель");
	
	Если ЗначениеЗаполнено(ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаЗакрытияОрганизации(Организация)) Тогда
		Правила.Вставить("Отчет", "2013_ИП_Декларация_СнятиеСУчета");
		Правила.Вставить("Уплата", "2013_ИП_Налог_СнятиеСУчета");
	Иначе
		Правила.Вставить("Отчет", "2013_ИП_Декларация");
		Правила.Вставить("Уплата", "2013_ИП_Налог");
	КонецЕсли;
	
	Возврат Правила;
	
КонецФункции

Функция ИдентификаторПравилаСтраховыеВзносыИПСДоходов() Экспорт
	
	Возврат "2013_Уплата_СДоходов";
	
КонецФункции

// Возвращает порядок уплаты налога или взноса
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация
//   Период - Дата - период уплаты
//   ВидНалога - ПеречислениеСсылка.ВидыНалогов - налог, для которого необходимо определить порядок уплаты
//
// Возвращаемое значение:
//   Структура
//     * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * Срок - Дата
//
Функция ПорядокУплатыНалога(Организация, Период, ВидНалога) Экспорт
	
	Перем СвойстваЗадачи;
	
	ПорядокУплаты = Новый Структура;
	ПорядокУплаты.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПорядокУплаты.Вставить("Срок", Дата(1, 1, 1));
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Период) Тогда
		
		СвойстваЗадачи = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
			Организация, ВидНалога, Период);
	КонецЕсли;
	
	Если СвойстваЗадачи <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПорядокУплаты, СвойстваЗадачи);
	КонецЕсли;
	
	Возврат ПорядокУплаты;
	
КонецФункции

// Определяет возможность отправки отчета средствами конфигурации.
//
// Параметры:
//  КодЗадачи             - Строка - идентификатор задачи (код)
//  Код                   - Строка - идентификатор правила (код)
//  ИсполнителиТребований - Соответствие - возвращаемое РеглОтчетыИсполнителиТребований().
//                           Следует передавать, если функция используется многократно (в цикле).
// 
// Возвращаемое значение:
//  Булево - Истина, если отправка отчета в конфигурации невозможна.
//
Функция ОтправкаОтчетаОграничена(КодЗадачи, Код, ИсполнителиТребований = Неопределено) Экспорт
	
	Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(КодЗадачи, Код);
	ИмяОтчета  = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование, ИсполнителиТребований);
	Если Не ЗначениеЗаполнено(ИмяОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не ИнтерфейсыВзаимодействияБРОКлиентСервер.ВозможнаОтправкаЭлектронногоДокумента(ИмяОтчета);
	
КонецФункции

// Возвращает список статусов, соответствующих выполненным задачам.
//
// Возвращаемое значение:
//   Массив - массив статусов.
//
Функция СтатусыВыполненныхЗадач() Экспорт
	
	СтатусыВыполненныхЗадач = Новый Массив;
	СтатусыВыполненныхЗадач.Добавить("Сдано");
	СтатусыВыполненныхЗадач.Добавить("Оплачено");
	СтатусыВыполненныхЗадач.Добавить("Выплачено");
	
	Возврат СтатусыВыполненныхЗадач;
	
КонецФункции

// Возвращает описание действия помощника уплаты НДФЛ прошлых периодов.
//
// Параметры:
//   Структура:
//     * Организация   - СправочникСсылка.Организации - Организация, для которой действует событие
//     * ПериодСобытия - Дата - Период действия события
//     * Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Действующее правило обработки события
//
// Возвращаемое значение:
//   Структура:
//     * ПараметрыФормы - Структура - Параметры формы
//     * ИмяФормы
//
Функция ОписаниеДействияПомощникОплатыНДФЛПрошлыхПериодов(Событие) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	ПараметрыФормы.Вставить("Период",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",     Событие.Правило);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникЗаполнения3НДФЛ.Форма.УплатаНалогаПрошлыхЛет");
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Определяет краткое представление налога в родительном падеже
//
// Параметры:
//  КодЗадачи - Строка - идентификатор задачи (код)
// 
// Возвращаемое значение:
//  Строка - представление. Если передан неизвестный код, то возвращается пустая строка
//
Функция ПредставлениеНалогаРодительныйПадеж(КодЗадачи) Экспорт
	
	Если КодЗадачи = "НДФЛ_Предприниматель" Тогда
		Возврат НСтр("ru = 'НДФЛ'");
	ИначеЕсли КодЗадачи = "НалогНаПрибыль" Тогда
		Возврат НСтр("ru = 'налога на прибыль'");
	ИначеЕсли КодЗадачи = "НДС" Тогда
		Возврат НСтр("ru = 'НДС'");
	ИначеЕсли КодЗадачи = "УСН" Тогда
		Возврат НСтр("ru = 'УСН'");
	ИначеЕсли КодЗадачи = "АУСН" Тогда
		Возврат НСтр("ru = 'АУСН'");
	ИначеЕсли КодЗадачи = "НалогНаПрофессиональныйДоход" Тогда
		Возврат НСтр("ru = 'налога на профессиональный доход'");
	ИначеЕсли КодЗадачи = "ЕНВД" Тогда
		Возврат НСтр("ru = 'ЕНВД'");
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент() Тогда
		Возврат НСтр("ru = 'налога по патенту'");
	ИначеЕсли КодЗадачи = "НалогНаИмущество" Тогда
		Возврат НСтр("ru = 'налога на имущество'");
	ИначеЕсли КодЗадачи = "ТорговыйСбор" Тогда
		Возврат НСтр("ru = 'торгового сбора'");
	ИначеЕсли КодЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
		Возврат НСтр("ru = 'фиксированных страховых взносов'");
	ИначеЕсли КодЗадачи = "СтраховыеВзносы" Тогда
		Возврат НСтр("ru = 'страховых взносов'");
	ИначеЕсли КодЗадачи = "ТранспортныйНалог" Тогда
		Возврат НСтр("ru = 'транспортного налога'");
	ИначеЕсли КодЗадачи = "ЗемельныйНалог" Тогда
		Возврат НСтр("ru = 'земельного налога'");
	ИначеЕсли КодЗадачи = "Акцизы" Тогда
		Возврат НСтр("ru = 'акцизов'");
	ИначеЕсли КодЗадачи = "ВодныйНалог" Тогда
		Возврат НСтр("ru = 'водного налога'");
	ИначеЕсли КодЗадачи = "НалогНаИгорныйБизнес" Тогда
		Возврат НСтр("ru = 'налога на игорный бизнес'");
	ИначеЕсли КодЗадачи = "ЕСХН" Тогда
		Возврат НСтр("ru = 'ЕСХН'");
	ИначеЕсли КодЗадачи = "НДПИ" Тогда
		Возврат НСтр("ru = 'НДПИ'");
	ИначеЕсли КодЗадачи = "ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду" Тогда
		Возврат НСтр("ru = 'экологических платежей'");
	ИначеЕсли КодЗадачи = "ЭкологическийСбор" Тогда
		Возврат НСтр("ru = 'экологического сбора'");
	Иначе
		Возврат НСтр("ru = 'налога'");
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное представление налога.
//
// Параметры:
//   ИдентификаторЗадачи - Строка - идентификатор задачи (код)
//   ИдентификаторПравила - Строка - идентификатор правила задачи (код)
//   ПолноеПредставлениеНалога - Строка - полное представление налога
// 
// Возвращаемое значение:
//   Строка - представление.
//
Функция СокращенноеПредставлениеНалога(ИдентификаторЗадачи, ИдентификаторПравила, ПолноеПредставлениеНалога) Экспорт
	
	Если ИдентификаторЗадачи = "СтраховыеВзносы" Тогда
		
		Если СтрНайти(ИдентификаторПравила, "УведомлениеУплатаСтраховыеВзносы") > 0 Тогда
			Возврат НСтр("ru='Страховые взносы, уведомление'");
		ИначеЕсли СтрНайти(ИдентификаторПравила, "ОтчетностьСтраховыеВзносы") > 0 Тогда
			Возврат НСтр("ru='Страховые взносы, отчет'");
		ИначеЕсли СтрНайти(ИдентификаторПравила, "ОтчетностьПерсСведенияОФизлицах") > 0 Тогда
			Возврат НСтр("ru='Перс. сведения'");
		ИначеЕсли СтрНайти(ИдентификаторПравила, "ОтчетностьПерсУчетТравматизм") > 0 Тогда
			Возврат НСтр("ru='Страховые взносы, ЕФС-1'");
		ИначеЕсли СтрНайти(ИдентификаторПравила, "ПодтверждениеВидаДеятельности") > 0 Тогда
			Возврат НСтр("ru='Подтв. вида деятельности'");
		КонецЕсли;

	ИначеЕсли ИдентификаторЗадачи = "НДФЛ_Агент" Тогда
		Возврат НСтр("ru='НДФЛ, отчет'");
		
	ИначеЕсли ИдентификаторЗадачи = "НДФЛ_Агент_Уведомление" Тогда
		Возврат НСтр("ru='НДФЛ, уведомление'");
		
	ИначеЕсли ИдентификаторЗадачи = "НДС" Тогда
		Если СтрНайти(ИдентификаторПравила, "СверкаНДС") > 0 Тогда
			Возврат "НДС, сверка";
		ИначеЕсли СтрНайти(ИдентификаторПравила, "Декларация") > 0 Тогда
			Возврат "НДС, декларация";
		КонецЕсли;
	
	ИначеЕсли ИдентификаторЗадачи = "ФинОтчетность" Тогда
		Возврат НСтр("ru='ФинОтчетность'");
		
	ИначеЕсли ИдентификаторЗадачи = "НДФЛ_Предприниматель" Тогда
		Возврат НСтр("ru='НДФЛ (ИП)'");
		
	ИначеЕсли ИдентификаторЗадачи = "УСН" Тогда
		Если СтрНайти(ИдентификаторПравила, "Уведомление") > 0 Тогда
			Возврат НСтр("ru='УСН, уведомление'");
		ИначеЕсли СтрНайти(ИдентификаторПравила, "Декларация") > 0 Тогда
			Возврат НСтр("ru='УСН, отчет'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеПредставлениеНалога;
	
КонецФункции

// Возвращает правило уплаты налога по правилу представления отчета.
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета
//  Организация - СправочникСсылка.Организации - отбор правил по организации
//  ПериодСобытия - Дата - отбор правил по периоду
//  ИгнорироватьИсключения - Булево - возможность отключить проверку исключительных ситуаций
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога или пустая ссылка,
//  если оплата не требуется
//
Функция ПравилоУплатыПоПравилуОтчета(ПравилоОтчета, Организация, ПериодСобытия, ИгнорироватьИсключения = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ИгнорироватьИсключения И Не ОтчетыИспользуютсяДляУплатыНалога(ПравилоОтчета) Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	РеквизитыПравилаОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОтчета, "Владелец.Код, Периодичность");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",                   РеквизитыПравилаОтчета.ВладелецКод);
	Запрос.УстановитьПараметр("Периодичность",               РеквизитыПравилаОтчета.Периодичность);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ВЫБОР
	|		КОГДА ЗадачиБухгалтера.Правило.Периодичность = &Периодичность
	|			ТОГДА 999
	|		ИНАЧЕ ЗадачиБухгалтера.Правило.Периодичность.Порядок
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИмяЗадачи
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Правило;
	
КонецФункции

// Возвращает правило представления отчета по правилу уплаты налога.
//
// Параметры:
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога
//  Организация   - СправочникСсылка.Организации - отбор правил по организации
//  ПериодОтчета  - Дата - дата, обозначающая период, по данным которого уплачивается налог
//  ИгнорироватьИсключения - Булево - возможность отключить проверку исключительных ситуаций
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета; 
//                                                              если не найдено, возвращается пустая ссылка
//
Функция ПравилоОтчетаПоПравилуУплаты(ПравилоУплаты, Организация, ПериодОтчета, ИгнорироватьИсключения = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ИгнорироватьИсключения И Не ОтчетыИспользуютсяДляУплатыНалога(ПравилоУплаты) Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	// Ищем задачу по представлению этого отчета, а из нее - подходящее правило
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача",                      ПравилоУплаты.Владелец);
	Запрос.УстановитьПараметр("ПериодОтчета",                ПериодОтчета);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаОтчета
	|		ПО ЗадачиБухгалтера.Правило = ПравилаОтчета.Ссылка
	|ГДЕ
	|	ПравилаОтчета.Владелец = &Задача
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодОтчета
	|	И ПравилаОтчета.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаЗадач = Результат.Выгрузить();
		ПравилоОтчета = ПодобратьРелевантноеПравилоОтчета(ТаблицаЗадач.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоОтчета;
	КонецЕсли;
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	// Задачи за базовый период еще могут быть не созданы
	ОтборПравил.ИмяЗадачи       = ПравилоУплаты.Владелец.Код;
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	// Принцип составления расписания: в течение периода обзора период должен завершиться.
	ОтборПравил.НачалоИнтервала = ПериодОтчета;
	ОтборПравил.КонецИнтервала  = КонецДня(ПериодОтчета) + 1;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Если ЗначениеЗаполнено(Расписание) Тогда
		Расписание.Сортировать("РегистрацияВНалоговомОргане, Правило", Новый СравнениеЗначений);
		ПравилоОтчета = ПодобратьРелевантноеПравилоОтчета(Расписание.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоОтчета;
	КонецЕсли;
	
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	
КонецФункции

// Возвращает правило подачи уведомления по правилу представления отчета.
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета
//  Организация - СправочникСсылка.Организации - отбор правил по организации
//  ПериодСобытия - Дата - отбор правил по периоду
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога или пустая ссылка,
//  если уведомление не требуется
//
Функция ПравилоУведомленияПоПравилуОтчета(ПравилоОтчета, Организация, ПериодСобытия, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",                   ПравилоОтчета.Владелец.Код);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИмяЗадачи
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И &УсловиеРегистрацияВНалоговомОргане";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Правило;
	
КонецФункции

// Возвращает правило представления уведомления по правилу уплаты.
//
// Параметры:
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога
//  Организация   - СправочникСсылка.Организации - отбор правил по организации
//  ПериодОтчета  - Дата - дата, обозначающая период, по данным которого уплачивается налог
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета; 
//                                                              если не найдено, возвращается пустая ссылка
//
Функция ПравилоУведомленияПоПравилуУплаты(ПравилоУплаты, Организация, ПериодОтчета, ИгнорироватьИсключения = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ИгнорироватьИсключения И Не ОтчетыИспользуютсяДляУплатыНалога(ПравилоУплаты) Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	// Ищем задачу по представлению этого отчета, а из нее - подходящее правило
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",                   ПравилоУплаты.Владелец.Код);
	Запрос.УстановитьПараметр("ПериодОтчета",                ПериодОтчета);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаОтчета
	|		ПО ЗадачиБухгалтера.Правило = ПравилаОтчета.Ссылка
	|ГДЕ
	|	(ПравилаОтчета.Владелец.Код = &ИмяЗадачи И &УсловиеЗадачаУведомлениеНДФЛ)
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодОтчета
	|	И ПравилаОтчета.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И &УсловиеРегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоУплаты);
	Если ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент_Уведомление");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУведомлениеНДФЛ", "ПравилаОтчета.Код = ""2023_НДФЛ_Уведомление""");
		
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_ЕдиныйПомощник" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент_Уведомление");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУведомлениеНДФЛ", "ПравилаОтчета.Код = ""2023_НДФЛ_Уведомление_ЕдиныйПомощник""");
		
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_Декабрь" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент_Уведомление");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУведомлениеНДФЛ", "ПравилаОтчета.Код = ""2023_НДФЛ_Уведомление_Декабрь""");
		
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2024_НДФЛ_Уплата_КонецМесяца" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент_Уведомление");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУведомлениеНДФЛ", "ПравилаОтчета.Код = ""2024_НДФЛ_Уведомление_КонецМесяца""");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУведомлениеНДФЛ", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаЗадач = Результат.Выгрузить();
		ПравилоУведомления= ПодобратьРелевантноеПравилоОтчета(ТаблицаЗадач.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоУведомления;
	КонецЕсли;
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	// Задачи за базовый период еще могут быть не созданы
	ОтборПравил.ИмяЗадачи       = ПравилоУплаты.Владелец.Код;
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
	// Принцип составления расписания: в течение периода обзора период должен завершиться.
	ОтборПравил.НачалоИнтервала = ПериодОтчета;
	ОтборПравил.КонецИнтервала  = КонецДня(ПериодОтчета) + 1;
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Если ЗначениеЗаполнено(Расписание) Тогда
		Расписание.Сортировать("РегистрацияВНалоговомОргане, Правило", Новый СравнениеЗначений);
		ПравилоУведомления = ПодобратьРелевантноеПравилоОтчета(Расписание.ВыгрузитьКолонку("Правило"), ПравилоУплаты);
		Возврат ПравилоУведомления;
	КонецЕсли;
	
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	
КонецФункции

// Возвращает правило уплаты налога по правилу уведомления.
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета
//  Организация - СправочникСсылка.Организации - отбор правил по организации
//  ПериодСобытия - Дата - отбор правил по периоду
//  ИгнорироватьИсключения - Булево - возможность отключить проверку исключительных ситуаций
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога или пустая ссылка,
//  если оплата не требуется
//
Функция ПравилоУплатыПоПравилуУведомления(ПравилоУведомления, Организация, ПериодСобытия, ИгнорироватьИсключения = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ИгнорироватьИсключения И Не ОтчетыИспользуютсяДляУплатыНалога(ПравилоУведомления) Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",                   ПравилоУведомления.Владелец.Код);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	(ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИмяЗадачи И &УсловиеЗадачаУплатаНДФЛ)
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|	И &УсловиеРегистрацияВНалоговомОргане
	|	";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистрацияВНалоговомОргане", "Истина");
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоУведомления);
	Если ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2023_НДФЛ_Уведомление" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУплатаНДФЛ", "ПравилаПредставленияОтчетовУплатыНалогов.Код = ""2023_НДФЛ_Уплата""");
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2023_НДФЛ_Уведомление_Декабрь" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУплатаНДФЛ", "ПравилаПредставленияОтчетовУплатыНалогов.Код = ""2023_НДФЛ_Уплата_Декабрь""");
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2023_НДФЛ_Уведомление_ЕдиныйПомощник" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУплатаНДФЛ", "ПравилаПредставленияОтчетовУплатыНалогов.Код = ""2023_НДФЛ_Уплата_ЕдиныйПомощник""");
	ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2024_НДФЛ_Уведомление_КонецМесяца" Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", "НДФЛ_Агент");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУплатаНДФЛ", "ПравилаПредставленияОтчетовУплатыНалогов.Код = ""2024_НДФЛ_Уплата_КонецМесяца""");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗадачаУплатаНДФЛ", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаЗадач = Результат.Выгрузить();
		Для Каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
			ПравилоУплаты = СтрокаТаблицы.Правило;
			Если Не ПравилоНалогаУплачиваемогоОтдельно(ПравилоУплаты) Тогда
				Возврат ПравилоУплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	
КонецФункции

// Определяет период отчета, по данным которого уплачивается налог.
// В общем случае налог может уплачиваться на основании отчета, представленного в другом (базовом, более раннем) периоде.
// 
// Параметры:
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога
//  Организация   - СправочникСсылка.Организации - отбор правил по организации
//  ПериодСобытия - Дата - дата, обозначающая период, за который уплачивается налог
//
// Возвращаемое значение:
//  Дата - последний день периода, по данным которого определена сумма налога
//         (более строго: по данным которого представляется отчет, содержащий данные о налоге, подлежащем уплате за ПериодСобытия)
//
Функция ПериодОтчетаПоПравилуУплаты(ПравилоУплаты, ПериодСобытия) Экспорт
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПравилоУплаты.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПравилоУплаты.Периодичность, ПериодСобытия);
	
	ПоказателиБазовогоПериода = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, ПравилоУплаты);
	Возврат НачалоДня(ПоказателиБазовогоПериода.КонецБазовогоПериода);// Периоды событий в информационной базе - без учета времени
	
КонецФункции

// Определяет набор связанных правил
//
// Параметры:
//  Параметры       - Структура
//
Процедура ОпределитьСвязанныеПравила(ПараметрыНабора) Экспорт
	
	ПараметрыНабора.ПравилоУплаты = ПараметрыНабора.Правило; // Ниже может быть уточнено
	
	РегистрацияВНалоговомОргане = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыНабора, "РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Если ТипЗнч(ПараметрыНабора.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		
		Если ПараметрыНабора.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		
			ПараметрыНабора.ПравилоУплаты      = ПараметрыНабора.Правило;
			ПараметрыНабора.ПериодОтчета       = ПериодОтчетаПоПравилуУплаты(
				ПараметрыНабора.ПравилоУплаты, ПараметрыНабора.ПериодСобытия);
			ПараметрыНабора.ПравилоОтчета      = ПравилоОтчетаПоПравилуУплаты(
				ПараметрыНабора.ПравилоУплаты, ПараметрыНабора.Организация, ПараметрыНабора.ПериодОтчета, , РегистрацияВНалоговомОргане);
			ПараметрыНабора.ПравилоУведомления = ПравилоУведомленияПоПравилуУплаты(
				ПараметрыНабора.ПравилоУплаты, ПараметрыНабора.Организация, ПараметрыНабора.ПериодСобытия, Истина, РегистрацияВНалоговомОргане);
		
		ИначеЕсли ПараметрыНабора.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
			ПараметрыНабора.ПравилоОтчета      = ПараметрыНабора.Правило;
			ПараметрыНабора.ПериодОтчета       = ПараметрыНабора.ПериодСобытия;
			ПараметрыНабора.ПравилоУплаты      = ПравилоУплатыПоПравилуОтчета(
				ПараметрыНабора.ПравилоОтчета, ПараметрыНабора.Организация, ПараметрыНабора.ПериодСобытия, , РегистрацияВНалоговомОргане);
			ПараметрыНабора.ПравилоУведомления = ПравилоУведомленияПоПравилуОтчета(
				ПараметрыНабора.ПравилоОтчета, ПараметрыНабора.Организация, ПараметрыНабора.ПериодСобытия, РегистрацияВНалоговомОргане);
		
		ИначеЕсли ПараметрыНабора.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
		
			ПараметрыНабора.ПравилоУведомления = ПараметрыНабора.Правило;
			ПараметрыНабора.ПериодОтчета       = ПараметрыНабора.ПериодСобытия;
			ПараметрыНабора.ПравилоОтчета      = ПравилоОтчетаПоПравилуУплаты(
				ПараметрыНабора.ПравилоУведомления, ПараметрыНабора.Организация, ПараметрыНабора.ПериодОтчета, Истина, РегистрацияВНалоговомОргане);
			ПараметрыНабора.ПравилоУплаты      = ПравилоУплатыПоПравилуУведомления(
				ПараметрыНабора.ПравилоУведомления, ПараметрыНабора.Организация, ПараметрыНабора.ПериодСобытия, Истина, РегистрацияВНалоговомОргане);
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыНабора.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		
		ПараметрыНабора.ПравилоУплаты      = ПараметрыНабора.Правило;
		ПараметрыНабора.ПравилоУведомления = ПараметрыНабора.Правило;
		ПараметрыНабора.ПравилоОтчета      = ПараметрыНабора.Правило;
		
	КонецЕсли;
	
КонецПроцедуры

// Готовит пустую структуру для определения связанных правил
//
// Возвращаемое значение:
//  Структура - структура параметров
//
Функция ПараметрыНабораПравил() Экспорт
	
	ПараметрыНабораПравил = Новый Структура;
	
	ПараметрыНабораПравил.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("Правило",                     Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("ПравилоОтчета",               Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("ПравилоУведомления",          Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("ПравилоУплаты",               Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПараметрыНабораПравил.Вставить("ПериодОтчета",                Дата('00010101'));
	ПараметрыНабораПравил.Вставить("ПериодСобытия",               Дата('00010101'));
	
	Возврат ПараметрыНабораПравил;
	
КонецФункции

// Завершает задачи по проверке банковских операций для организаций, находящихся на АУСН,
// после истечения возможного срока корректировки данных
//
// Возвращаемое значение:
//   Булево - Истина, если выполнено завершение задач проверки банковских операций
//
Функция ЗавершитьПроверкуБанковскихОперацийАУСН() Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	""Сдано"" Как Статус,
	|	ЗадачиБухгалтера.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ЗадачиБухгалтера.Статус КАК РучнойСтатус
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|Где
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И (ЗадачиБухгалтера.Срок < &Период)");
	
	Период = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Правило", ПравилоДействияКалендаряБухгалтера_АУСН(
		Период,
		Перечисления.ВидыДействийКалендаряБухгалтера.Отчет));
	
	ЗадачиКЗавершению = Запрос.Выполнить().Выбрать();
	Пока ЗадачиКЗавершению.Следующий() Цикл
		Результат = Истина;
		Если ЗадачиКЗавершению.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьНовыйСтатусЗадачи(ЗадачиКЗавершению, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает идентификатор правила подачи сведений о доходах и НДФЛ сотрудников при применении АУСН.
//
// Возвращаемое значение:
//   Строка - идентификатор правила
//
Функция ИдентификаторПравилаПередачаСведенийОСотрудникахАУСН() Экспорт
	
	Возврат "2022_НДФЛ_СведенияАУСН";
	
КонецФункции

Функция ПравилаУплатыАУСН() Экспорт
	
	Правила = Новый Структура;
	Правила.Вставить("Задача", "АУСН");
	Правила.Вставить("Уплата", "2021_Уплата");
	
	Возврат Правила;
	
КонецФункции

// Конструктор для таблицы уведомлений для ДанныеДляУведомлений
//
// Возвращаемое значение:
//   - ТаблицаЗначений - пустая таблица, заполняется в ВыполнениеЗадачБухгалтера.ДанныеДляУведомлений
// 
Функция НовыйТаблицаУведомлений() Экспорт
	
	ТаблицаУведомлений = Новый ТаблицаЗначений;
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности"));
	
	
	ТаблицаУведомлений.Колонки.Добавить("Уведомление", Новый ОписаниеТипов(МассивТиповДокументов));
	ТаблицаУведомлений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаУведомлений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат ТаблицаУведомлений;
	
КонецФункции

Функция ЭтоПравилоЕдиногоНалоговогоСчета(Правило)
	
	Если ТипЗнч(Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		Возврат Ложь;
	Иначе
		Возврат Правило.Владелец.Код = "ЕдиныйНалоговыйСчет";
	КонецЕсли;
	
КонецФункции

Функция НовыйПараметрыФормыПомощника() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыФормы.Вставить("ПериодСобытия",               Дата('00010101'));
	ПараметрыФормы.Вставить("Правило",                     Неопределено);
	ПараметрыФормы.Вставить("Срок",                        Дата('00010101'));
	ПараметрыФормы.Вставить("Описание",                    "");
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Ложь);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Ложь);
	ПараметрыФормы.Вставить("НачальныйСрок",               Дата('00010101'));
	ПараметрыФормы.Вставить("ВызовИзЕдиногоПомощника",     Ложь);
	ПараметрыФормы.Вставить("СуммаЗачетаЕНС",              Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПравилаЕдиногоНалоговогоПлатежа() Экспорт
	
	ПравилаЕдиногоНалоговогоПлатежа = Новый Массив;
	ПравилаЕдиногоНалоговогоПлатежа.Добавить(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("ЕдиныйНалоговыйСчет", "2023_ЕНС_Уведомление"));
	ПравилаЕдиногоНалоговогоПлатежа.Добавить(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("ЕдиныйНалоговыйСчет", "2023_ЕНС_Уплата"));
	
	Возврат ПравилаЕдиногоНалоговогоПлатежа;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеДействий

// Описывает действие, которое необходимо выполнить для налогового платежа
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействияНалоговыйПлатеж(Событие)
	
	Правило                     = Событие.Правило;
	ИмяЗадачи                   = Правило.Владелец.Код;
	Действие                    = Правило.Действие;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ВыполнитьЕдинымПомощником   =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Событие, "ВыполнитьЕдинымПомощником", Ложь)
		Или ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравила)
		Или ЭтоПравилоУплатыНДСИзЕАЭС(ПолноеИмяПравила);
	
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
		Или Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление Тогда
		
		Если ИмяЗадачи = "ЕдиныйНалоговыйСчет" Или ВыполнитьЕдинымПомощником Тогда
			
			Возврат ОписаниеДействияЕдиныйПомощникУплатыНалога(Событие);
			
		ИначеЕсли (ПолноеИмяПравила = "СтраховыеВзносы.2013_ОтчетностьПФР"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРБумажная"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРЭлектронная")
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияОтчетПФР(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2016_СведенияПФРЕжемесячные"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияПФРЕжемесячные" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжемесячные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковОрганизации"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковПредприниматели"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2023_СведенияСтажСотрудниковОрганизации"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2023_СведенияСтажСотрудниковПредприниматели" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжегодные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2013_Отчет_Допвзносы_Накопительная_ПФР" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияРеестрДСВ3(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2022_ЕНП_УведомлениеУплатаСтраховыеВзносы"
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			
			Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			
		ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ" 
			Или ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ_Неудержанный"
			Или ПолноеИмяПравила = "НДФЛ_Агент.2016_2НДФЛ_Неудержанный" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействия2НДФЛ(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2020_СведенияЭТКЕжемесячные"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2020_СведенияЭТКЕжедневные"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2023_СведенияЭТКЕжемесячные"
			Или  ПолноеИмяПравила = "СтраховыеВзносы.2023_СведенияЭТКЕжедневные" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияЭТКЕжемесячные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "КосвенныеНалогиТамСоюз.2010_Статформа" Тогда
			
			// Открываем форму списка заявлений о ввозе
			Возврат ОписаниеДействияЗаявленияОВвозе(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.СверкаНДС" Тогда
		
			// Открываем форму обработки "Сверка данных НДС"
			Возврат ОписаниеДействияСверкаНДС(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.2015_ЖурналСчетовФактур" Тогда
			
			// Открываем форму документа "Журнал счетов-фактур для передачи в электронном виде"
			Возврат ОписаниеДействияЖурналСчетовФактур(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.2022_ЕНП_УведомлениеНеплательщик"
			Или ПолноеИмяПравила = "НДС.2022_ЕНП_УведомлениеНеплательщикНалоговыйАгент" Тогда
		
			// Открываем форму списка уведомлений
			Возврат ОписаниеДействияУведомлениеОбИсчисленныхСуммахНалогов(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормФизлица"
			Или ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормЮрлица" Тогда
			
			// Проверить можно, сформировав уведомление на специальном сайте Росстата
			Возврат Новый Структура("Переход", "https://websbor.gks.ru/online/#!/gs/statistic-codes");
			
		ИначеЕсли ПолноеИмяПравила = "Патент.2020_ЗаявлениеНаПатент"
			Или ПолноеИмяПравила = "Патент.2021_ЗаявлениеНаПатент" Тогда
			
			Возврат ОписаниеДействияПомощникЗаявленияНаПолучениеПатента(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "УСН.2020_УведомлениеУСН" Тогда
			
			Возврат ОписаниеДействияУведомлениеУСН(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "АУСН.2021_Ознакомление"
			Или ПолноеИмяПравила = "АУСН.2022_Ознакомление"
			Или ПолноеИмяПравила = "АУСН.2022_Ознакомление_СнятиеСУчета" Тогда
			
			Возврат ОписаниеДействияНапоминаниеОПроверкеНалогаАУСН(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2022_НДФЛ_СведенияАУСН" Тогда
			
			Возврат ОписаниеДействияПередачаСведенийОСотрудникахАУСН(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			Если ЭтоОтчетПрошлогоПериода(Событие) Тогда
				// Открываем помощник прошлых периодов
				Возврат ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие);
			Иначе
				// Открываем форму обработки "Помощник расчета налога УСН"
				Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			КонецЕсли;
			
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие);
			
		ИначеЕсли ИмяЗадачи = "НДС" Тогда
			
			Возврат ОписаниеДействияПомощникРасчетаНДС(Событие);
			
		ИначеЕсли ИмяЗадачи = "ЛьготыПоТранспортномуЗемельномуНалогу" Тогда
			
			Возврат ОписаниеДействияЗаявлениеОЛьготеПоИмущественнымНалогам(
				Событие.Организация,
				Событие.ПериодСобытия,
				Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеЛьготаТранспортЗемля);
				
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Событие);
		
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы_Предприниматель.2023_ЕНП_ЗаявлениеЗачетВзносов" Тогда
			
			Возврат ОписаниеДействияЗаявлениеОЗачетеВзносовИП(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтатистическаяОтчетность" Тогда
			
			// Отчеты, для которых бро не предоставляет возможности использовать "универсальный помощник",
			// могут быть предоставлены Росстату с помощью "универсального отчета".
			// Покажем пользователю информацию про универсальный отчет.
			Возврат Новый Структура("Переход", "http://buh.ru/articles/faq/40735/");
			
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		
		Если ИмяЗадачи = "НДФЛ_Агент_Уплата" 
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
			Если ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Истина);
			Иначе
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			КонецЕсли;
			
		Иначе
			Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить()
				И ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат Новый Структура("Переход", "https://its.1c.ru/bmk/staff/advance");
			Иначе
				Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		
		Если ИмяЗадачи = "ЕдиныйНалоговыйСчет" Или ВыполнитьЕдинымПомощником Тогда
			
			Возврат ОписаниеДействияЕдиныйПомощникУплатыНалога(Событие);
		
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			Если Событие.ИдентификаторПравила = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ() Тогда
				Возврат ОписаниеДействияСтраховыеВзносыИПНаВНиМ(Событие);
			Иначе
				Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Событие);
			КонецЕсли;
		
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			Если ЭтоОплатаНалогаЗаПрошлыйПериод(Событие) Тогда
				Возврат ОписаниеДействияПомощникОплатыНалогаПрошлыхПериодов(Событие);
			Иначе
				// Открываем форму обработки "Помощник расчета налога УСН"
				Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			КонецЕсли;
			
		ИначеЕсли ПолноеИмяПравила = "АУСН.2021_Уплата_ФСС_НС"
			Или ПолноеИмяПравила = "СтраховыеВзносыАУСН.2022_Уплата_ФСС_НС_АУСН"
			Или ПолноеИмяПравила = "СтраховыеВзносыАУСН.2022_Уплата_ФСС_НС_АУСН_СнятиеСУчета" Тогда
			
			Возврат ОписаниеДействияУплатаФСС_НС_АУСН(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАУСН(Событие, ПолноеИмяПравила) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыАУСН(Событие);
			
		ИначеЕсли ИмяЗадачи = "АУСН" Тогда
			
			Возврат ОписаниеДействияУплатаНалогаАУСН(Событие);
		
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы"
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить()
			И НЕ ПолноеИмяПравила = "СтраховыеВзносы.2023_УплатаСтраховыеВзносы"
			И НЕ ПолноеИмяПравила = "СтраховыеВзносы.2023_УплатаСтраховыеВзносы_ЕдиныйПомощник" Тогда
			
			Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			
		ИначеЕсли ИмяЗадачи = "НДС" Тогда
			
			Возврат ОписаниеДействияПомощникРасчетаНДС(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыНПД(Правило, ИмяЗадачи) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНПД(Событие);
						
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		Иначе
			
			Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			
		КонецЕсли;
	
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Проверка Тогда
		
		Если ПолноеИмяПравила = "ТранспортныйНалог.СверкаРасчета" 
			 Или ПолноеИмяПравила = "ЗемельныйНалог.СверкаРасчета"
			 Или ПолноеИмяПравила = "НалогНаИмущество.СверкаРасчета" Тогда
			
			Возврат ОписаниеДействияСверкаИмущественныхНалогов(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "УСН.2022_ВводОстатковСменыОбъектаУСН" Тогда
			
			Возврат ОписаниеДействияВводОстатковПриСменеОбъектаУСН(Событие);
								
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж Тогда 
			
		Если ИмяЗадачи = "ОплатаУставногоКапитала" Тогда
			Возврат ОписаниеДействияОплатаУставногоКапитала(Событие.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Правило.Наименование) Тогда
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("Предупреждение", Правило.Наименование);
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Возврат Новый Структура; // Никакое действие не можем выполнить
	
КонецФункции

Функция ОписаниеДействияЗаявленияОВвозе(Событие)
	
	ОписаниеДействия = Новый Структура;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЗаявлениеОВвозеТоваров.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;

КонецФункции 

Функция ОписаниеДействияРегулярныйПлатеж(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	// В качестве шаблона для ввода новой платежки ищем последний введенный по текущему правилу документ.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		Событие.Организация, Событие.Правило, Событие.ПериодСобытия);
	Если ШаблонПравила = Неопределено Тогда
		
		Возврат ОписаниеДействия;
		
	ИначеЕсли ШаблонПравила.ПериодСобытия = Событие.ПериодСобытия Тогда
		
		// Если по правилу вводился документ в ПериодСобытия, то открываем его
		ПараметрыФормы.Вставить("Ключ", ШаблонПравила.ПлатежноеПоручение);
		
	Иначе
		
		// Если в периоде документ не вводился, вводим новый копированием последнего введенного по правилу платежного поручения
		ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонПравила.ПлатежноеПоручение);
		
		ПараметрыФормы.Вставить("Правило",       Событие.Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", Событие.ПериодСобытия);
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ПлатежноеПоручение.ФормаОбъекта");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФинОтчетность(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	Правило = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие.Правило,
		"Организация, Получатель, Периодичность, ИдентификаторКомплекта, КраткоеПредставлениеКомплекта");
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Событие.ПериодСобытия-1);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, Событие.ПериодСобытия-1);
	
	СуществующийДокумент = Документы.ФинОтчетВБанк.НайтиПоРеквизитам(Правило.Организация,
		Правило.Получатель, Правило.ИдентификаторКомплекта, КонецПериода);
	
	Если СуществующийДокумент <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", СуществующийДокумент);
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",                   Правило.Организация);
		ЗначенияЗаполнения.Вставить("Банк",                          Правило.Получатель);
		ЗначенияЗаполнения.Вставить("НачалоПериода",                 НачалоПериода);
		ЗначенияЗаполнения.Вставить("КонецПериода",                  КонецПериода);
		ЗначенияЗаполнения.Вставить("ИдентификаторКомплекта",        Правило.ИдентификаторКомплекта);
		ЗначенияЗаполнения.Вставить("КраткоеПредставлениеКомплекта", Правило.КраткоеПредставлениеКомплекта);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Правило", Событие.Правило);
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ФинОтчетность", Истина);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание) Экспорт
	
	ИмяФормыПлатежногоДокумента = Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты);
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ИдентификаторЗадачи  = "";
	ИдентификаторПравила = "";
	ПолноеИмяПравила     = "";
	
	Идентификаторы = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы <> Неопределено Тогда
		ИдентификаторЗадачи  = Идентификаторы.ИдентификаторЗадачи;
		ИдентификаторПравила = Идентификаторы.ИдентификаторПравила;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			ИдентификаторЗадачи, ИдентификаторПравила);
	КонецЕсли;
	
	ОКАТО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(ОКАТО, ПериодСобытия);
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = Правило.Владелец.Код;
	ОписаниеПлатежа.ОКАТО        = ОКАТО;
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(
		Правило,
		Организация,
		РегистрацияВНалоговомОргане,
		ПериодСобытия,
		Срок,
		ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// Декларации нет.
		// Надо предложить пользователю заполнить декларацию
		// Но быть готовым, что он не согласится и придется заполнять платежку без декларации.
		
		ШаблонТекста = НСтр("ru = 'Перед оформлением платежного документа рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|В этом случае сумма и реквизиты платежа будут взяты из отчета.'");
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ОписаниеДействия.Вставить("Вопрос",      СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста));
		ОписаниеДействия.Вставить("ВариантДа",   НСтр("ru = 'Подготовить отчет'"));
		ОписаниеДействия.Вставить("ВариантНет",  НСтр("ru = 'Оформить платежный документ'"));
		ОписаниеДействия.Вставить("ДействиеДа",  Новый Структура);
		ОписаниеДействия.Вставить("ДействиеНет", Новый Структура);
		
		// Откроем форму отчета
		ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
			ПолноеИмяПравила,
			Организация,
			РегистрацияВНалоговомОргане,
			НачалоНалоговогоПериода,
			КонецБазовогоПериода,
			ДлительностьБазовогоПериода);
		ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
		ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
		
		// Откроем пустой документ
		
		ОписаниеПлатежа.Период            = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.ДействиеНет.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		ОписаниеДействия.ДействиеНет.Вставить("ПараметрыФормы",
			Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило",
				ЗначенияЗаполнения,
				ПериодСобытия,
				Правило));
		
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Если ДанныеДекларации.Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По декларации ничего не надо платить.
		// Откроем пустую платежку
		
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
		ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Описание            = Описание;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли ДанныеДекларации.Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = ДанныеДекларации.Платежи[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным декларации
			
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Описание;
			ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
			ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
			ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
			ОписаниеПлатежа.Налог               = Платеж.Налог;
			ОписаниеПлатежа.КБК                 = Платеж.КБК;
			
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("Декларация",        ДанныеДекларации.Ссылка);
		ПараметрыФормы.Вставить("ДатаДекларации",    ДанныеДекларации.ДатаПодписи);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период));
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(ДанныеДекларации.Платежи));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияОтчетПФР(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Событие.Организация);
	ПараметрыФормы.Вставить("ОтчетныйПериод", НачалоКвартала(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, ПредставлениеОтчета)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
		|Подготовьте %1 в той программе, в которой начисляете зарплату'");
	
	ОписаниеДействия.Вставить(
		"Предупреждение",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеОтчета));
	
КонецПроцедуры

Функция ОписаниеДействияСведенияПФРЕжемесячные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",    Событие.Организация);
	Отбор.Вставить("ОтчетныйПериод", НачалоМесяца(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОЗастрахованныхЛицахСЗВ_М.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСведенияПФРЕжегодные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Новый Структура));
	
	ОписаниеДействия.ПараметрыФормы.Отбор.Вставить("Организация",    Событие.Организация);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРеестрДСВ3(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'реестр ДСВ-3'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.РеестрДСВ_3.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСведенияЭТКЕжемесячные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",    Событие.Организация);
	Отбор.Вставить("ОтчетныйПериод", НачалоМесяца(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействия2НДФЛ(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'справки 2-НДФЛ'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",     Событие.Организация);
	Отбор.Вставить("НалоговыйПериод", Год(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРасчетСтраховыхВзносовИП(Событие)
	
	ПомощникПубликуется = Ложь;
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Событие.Организация)
		И Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		
		ПериодСобытия = ТекущаяДатаСеанса();

		СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
			Событие.Организация, ПериодСобытия);
		Если СведенияОбОрганизации.РегистрацияВЭтомГоду 
			Или ЗначениеЗаполнено(СведенияОбОрганизации.СостояниеПомощника) Тогда
			
			ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма.ФормаВзносыИПНулевка";
		Иначе
			ИмяФормыПомощника = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды";
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правило", Событие.Правило);
		ПараметрыФормы.Вставить("АдресСведенийОбОрганизации",
			ПоместитьВоВременноеХранилище(СведенияОбОрганизации, Новый УникальныйИдентификатор));
	
	Иначе
		
		ПериодСобытия = КонецКвартала(Событие.ПериодСобытия);
		Если ЭтоОплатаНалогаЗаПрошлыйПериод(Событие)
			И УчетнаяПолитика.ПрименяетсяУСН(Событие.Организация, ТекущаяДатаСеанса()) Тогда
			
			ИмяФормыПомощника = "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды";
		Иначе
			// Конечное имя формы определяетя видом страховых взносов
			ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма";
			ПомощникПубликуется = Истина;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",      Событие.Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",    ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",          Событие.Правило);
		ПараметрыФормы.Вставить("Срок",             Событие.Срок);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		ПараметрыФормы.Вставить("Заголовок",        Событие.Наименование);
		ПараметрыФормы.Вставить("Периодичность",    Событие.Периодичность);
	
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ИмяФормыПомощника);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Если Событие.Периодичность = Перечисления.Периодичность.Квартал Тогда
		// Для каждого квартала должен быть свой идентификатор формы
		// Задачи для уплаты взноса и подачи заявления о зачете открывают одну и ту же форму
		Если ЗначениеЗаполнено(Событие.Задача) Тогда
			УИДЗадачи = Строка(Событие.Задача.УникальныйИдентификатор());
		Иначе
			// Если задача не найдена, то привязываем форму к организации
			УИДЗадачи = Строка(Событие.Организация.УникальныйИдентификатор());
		КонецЕсли;
		// Для того, чтобы можно было открыть конкретную форму или активировать уже открытую за конкретный квартал,
		// будем считать первый символ идентификатора задачи номером квартала
		ИдентификаторФормы = Новый УникальныйИдентификатор(СтрШаблон("%1%2",
			ОбщегоНазначенияБПКлиентСервер.НомерКвартала(ПериодСобытия),
			Прав(УИДЗадачи, СтрДлина(УИДЗадачи) - 1)));
	ИначеЕсли ЗначениеЗаполнено(Событие.Задача) Тогда
		ИдентификаторФормы = Событие.Задача.УникальныйИдентификатор();
	Иначе
		ИдентификаторФормы = Событие.Организация.УникальныйИдентификатор();
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если ПомощникПубликуется Тогда
		ОписаниеДействия.Вставить("ПубликуемыйИдентификатор", Обработки.РасчетСтраховыхВзносовИП.ПубликуемыйИдентификатор());
		
		ВходящиеНастройкиПубликуемыхДанных = Обработки.РасчетСтраховыхВзносовИП.ВходящиеНастройкиПубликуемыхДанных(
			Событие.Организация, ПериодСобытия);
		ОписаниеДействия.Вставить("ВходящиеНастройкиПубликуемыхДанных", ВходящиеНастройкиПубликуемыхДанных);
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов, Налог, ВидНалоговогоОбязательства = Неопределено, ПериодСобытия)
	
	Если ВидНалоговогоОбязательства = Неопределено Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	СчетУчетаВзносов = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	Если ЗначениеЗаполнено(СчетУчетаВзносов) Тогда
		НоваяСтрока = ТаблицаСчетовСтраховыхВзносов.Добавить();
		НоваяСтрока.Налог                      = Налог;
		НоваяСтрока.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		НоваяСтрока.СчетУчета                  = СчетУчетаВзносов;
		НоваяСтрока.КБК                        = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, ВидНалоговогоОбязательства, ПериодСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Вместо этой функции рекомендуется использовать функцию ВыполнениеЗадачБухгалтераПовтИспНаВызов.ПараметрыСтраховыхВзносов()
// Получает таблицу счетов и видов налогов для страховых взносов.
//
// Параметры:
//  ПериодСобытия - Дата - месяц, на который нужно получить параметры.
//
// Возвращаемое значение:
//   ТаблицаЗначений - информация о действующих страховых взносах.
//
Функция ПараметрыСтраховыхВзносов(ПериодСобытия) Экспорт
	
	ТаблицаСчетовСтраховыхВзносов = Новый ТаблицаЗначений;
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("СчетУчета",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("КБК",                        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("НазначениеПлатежа",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(210)));
	
	Если ПериодСобытия < УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов() Тогда
		// 69.01
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	
		// 69.02.7
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
			// 69.03.1
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
	КонецЕсли;
		
	// 69.11
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ),
		,
		ПериодСобытия);
	
	// 69.09
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносыЕдиныйТариф),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);

	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
		
	Если УчетЗарплаты.ИспользуетсяТрудЧленовЛетныхЭкипажей() Или УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		// 69.02.3
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуетсяТрудШахтеров() Или УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		// 69.02.4
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуютсяРаботыСДосрочнойПенсией() Или УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		// 69.02.5
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
		
		// 69.02.6
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.УдерживаютсяДобровольныеВзносыВПФР() Или УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		// 69.05.2
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если ПериодСобытия >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов()
		И (УчетЗарплаты.ИспользуетсяТрудИностранцевСОсобымиВзносами() Или УчетЗарплатыИКадровВоВнешнейПрограмме) Тогда
		// 69.02.7
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ОПС_ИностранныеРаботники, Истина, ПериодСобытия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
		
		// 69.03.1
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ОМС_ИностранныеРаботники, Истина, ПериодСобытия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		// 69.01
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ОСС_ИностранныеРаботники, Истина, ПериодСобытия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Возврат ТаблицаСчетовСтраховыхВзносов;
	
КонецФункции

Функция ПараметрыНДФЛ(Знач ПериодСобытия) Экспорт
	
	ТаблицаСчетовНДФЛ = Новый ТаблицаЗначений;
	ТаблицаСчетовНДФЛ.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаСчетовНДФЛ.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСчетовНДФЛ.Колонки.Добавить("СчетУчета",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСчетовНДФЛ.Колонки.Добавить("КБК",                        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСчетовНДФЛ.Колонки.Добавить("НазначениеПлатежа",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(210)));
	
	// 68.01.1
	ДополнитьМассивСчетовУчета(ТаблицаСчетовНДФЛ,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
		
	// 68.01.2
	ДополнитьМассивСчетовУчета(ТаблицаСчетовНДФЛ,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
	
	Возврат ТаблицаСчетовНДФЛ;
	
КонецФункции

Функция ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Аванс)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ОписаниеДействия", НСтр("ru = 'Выплата зарплаты и уплата НДФЛ'"));
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Описание",         Событие.Наименование);
	ПараметрыФормы.Вставить("Аванс",            Аванс);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУчетаЗарплаты.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСверкаНДС(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.СверкаДанныхУчетаНДС.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоПатенту(Организация, ДокументПатент, Сумма, СпособОплаты, ПериодСобытия, Срок) Экспорт
	
	Если ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(Организация, Срок) Тогда
		РеквизитыПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(Организация,
				КонецКвартала(Срок));
		ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		ОснованиеПлатежа    = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		КодПоОКТМО = РеквизитыПлатежа.ОКТМО;
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			РеквизитыПлатежа.Налог, РеквизитыПлатежа.ВидНалога, Организация);
		
	Иначе
		РеквизитыПлатежа = Документы.ОперацияСПатентом.РеквизитыНалоговогоПлатежа(ДокументПатент);
		ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПериодичностьГод();
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
		ОснованиеПлатежа  = "";
		КодПоОКТМО = РеквизитыПлатежа.ОКАТО;
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			РеквизитыПлатежа.Налог, РеквизитыПлатежа.ВидНалога, Организация)
				+ РеквизитыПлатежа.Описание;
		
	КонецЕсли;
	
	ПериодСобытияУплаты = ПериодСобытия;
	Налог               = РеквизитыПлатежа.Налог;
	КодНалоговогоОргана = РеквизитыПлатежа.КодНалоговогоОргана;
	ОКТМО               = КодПоОКТМО;
	КБК                 = РеквизитыПлатежа.КБК;
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	
	ОписаниеПлатежа.Организация         = Организация;
	ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи           = "Патент_Уплата";
	ОписаниеПлатежа.Описание            = НазначениеПлатежа;
	ОписаниеПлатежа.Период              = ПериодСобытияУплаты;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.КБК                 = КБК;
	ОписаниеПлатежа.Налог               = Налог;
	ОписаниеПлатежа.ОКАТО               = ОКТМО;
	ОписаниеПлатежа.Сумма               = Сумма;
	ОписаниеПлатежа.КодНалоговогоОргана = КодНалоговогоОргана;
	ОписаниеПлатежа.ОснованиеПлатежа    = ОснованиеПлатежа;
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
	ПараметрыФормы.Вставить("ПериодСобытия",      ПериодСобытияУплаты);
	ПараметрыФормы.Вставить("Правило",            ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПатент, "Патент"));
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникРасчетаУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНалогаУСН.Форма.Форма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("КонецПериода",                КонецКвартала(Событие.ПериодСобытия));
	ПараметрыФормы.Вставить("КонтекстныйВызов",            Истина);
	ПараметрыФормы.Вставить("Заголовок",                   Событие.Наименование);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Событие.Организация);
	
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
		Или Событие.ПериодСобытия > ГраницаОтчетностиПрошлыхПериодов Тогда
		
		// В том случае, если период события находится в периоде, когда пользователь уже работал в программе,
		// добавляем данные публикации ссылки на программный интерфейс помощника расчета налога УСН.
		
		ОписаниеДействия.Вставить("ПубликуемыйИдентификатор", Обработки.ПомощникРасчетаНалогаУСН.ПубликуемыйИдентификатор());
		
		ВходящиеНастройкиПубликуемыхДанных = Обработки.ПомощникРасчетаНалогаУСН.ВходящиеНастройкиПубликуемыхДанных(
			Событие.Организация, КонецКвартала(Событие.ПериодСобытия));
		ОписаниеДействия.Вставить("ВходящиеНастройкиПубликуемыхДанных", ВходящиеНастройкиПубликуемыхДанных);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникОплатыНалогаПрошлыхПериодов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежУСН(СтруктураРеквизитовУплатыНалога) Экспорт
	
	Организация         = СтруктураРеквизитовУплатыНалога.Организация;
	ПлательщикЕНП       = СтруктураРеквизитовУплатыНалога.ПлательщикЕНП;
	Сумма               = СтруктураРеквизитовУплатыНалога.Сумма;
	СпособОплаты        = СтруктураРеквизитовУплатыНалога.СпособУплатыНалога;
	ВидНалога           = СтруктураРеквизитовУплатыНалога.ВидНалога;
	ПериодСобытия       = СтруктураРеквизитовУплатыНалога.ПериодСобытия;
	ОплатаЗадолженности = СтруктураРеквизитовУплатыНалога.ОплатаЗадолженности;
	Правило             = СтруктураРеквизитовУплатыНалога.Правило;
	
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(ПериодСобытия));
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПлательщикЕНП Тогда
		ОплатаЗадолженности = Ложь;
	КонецЕсли;
	
	Если ПлательщикЕНП Тогда
		РеквизитыЕдиногоНалоговогоПлатежа =
			ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(Организация,
				КонецКвартала(ПорядокУплаты.Срок));
		Налог               = РеквизитыЕдиногоНалоговогоПлатежа.Налог;
		КодНалоговогоОргана = РеквизитыЕдиногоНалоговогоПлатежа.КодНалоговогоОргана;
		ОКТМО               = РеквизитыЕдиногоНалоговогоПлатежа.ОКТМО;
		КБК                 = РеквизитыЕдиногоНалоговогоПлатежа.КБК;
		ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	Иначе
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			Организация,
			Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
		ОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(ОКТМО, ПериодСобытия);
		КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецКвартала(ПериодСобытия));
		ПоказательПериода = ПоказательПериодаПлатежаПоПравилу(ПорядокУплаты.Периодичность, ПорядокУплаты.Срок, ПериодСобытия);
	КонецЕсли;
	
	Аванс = КонецГода(ПериодСобытия) <> КонецКвартала(ПериодСобытия);
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	
	ОписаниеПлатежа.Организация = Организация;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты));
	
	// Создадим платежку по данным операции
	ОписаниеПлатежа.Налог               = Налог;
	ОписаниеПлатежа.Период              = ПериодСобытия;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.Аванс               = Аванс;
	ОписаниеПлатежа.КБК                 = КБК;
	ОписаниеПлатежа.ОКАТО               = ОКТМО;
	ОписаниеПлатежа.Сумма               = Сумма;
	ОписаниеПлатежа.Описание            = ПорядокУплаты.Наименование;
	ОписаниеПлатежа.КодНалоговогоОргана = КодНалоговогоОргана;
	ОписаниеПлатежа.ОплатаЗадолженности = ОплатаЗадолженности;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
	Если Правило <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПериодСобытия", ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",       Правило);
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоОтчетПрошлогоПериода(Событие)
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(
		Событие.Организация);
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		Событие.Периодичность, Событие.ПериодСобытия);
	
	// Задача по событию, которое началось уже точно после начала ведения учета.
	Если НачалоПериодаСобытия > ГраницаОтчетностиПрошлыхПериодов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Срок события наступил до того, как пользователь начал вести учет.
	Если КонецДня(Событие.Срок) <= ГраницаОтчетностиПрошлыхПериодов Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Событие относится к прошлому периоду (НачалоПериодаСобытия > КонецПрошлогоПериода),
	// но его срок наступил после начала ведения учета.
	// Возможно, эта задача была создана помощником подготовки отчетности прошлых периодов.
	
	Возврат РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ЗадачаВведенаПомощникомПрошлыхПериодов(
		Событие.Организация, Событие.Правило, Событие.ПериодСобытия);
	
КонецФункции

Функция ЭтоОплатаНалогаЗаПрошлыйПериод(Событие)

	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(
		Событие.Организация);
		
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонецПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		Событие.Периодичность, Событие.ПериодСобытия);
		
	// Событие завершилось до начала ведения учета
	Если КонецПериодаСобытия <= КонецДня(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие) Экспорт
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПодготовкаОтчетностиПрошлыхПериодов.Форма.Форма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПоказательПериодаПлатежаПоПравилу(ПериодичностьПравила, Срок, ПериодСобытия)
	
	ПоказательПериода = "";
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(ПериодичностьПравила);
	
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(КонецКвартала(ПериодСобытия), ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Возврат ПоказательПериода;
	
КонецФункции

Функция ОписаниеДействияРасчетЕНВД(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	ПараметрыФормы.Вставить("Правило",     Событие.Правило);
	ПараметрыФормы.Вставить("Период",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ВызовИзСпискаЗадач", Истина);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникРасчетаЕНВД.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие)
	
	Если Событие.ПериодСобытия < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения()
		Или СтрНайти(НРег(Событие.ИдентификаторПравила), "_аванс_") <> 0 Тогда
		
		ОписаниеДействия = ОписаниеДействияПомощникУплатыНалога(Событие)
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Событие.Организация);
		ПараметрыФормы.Вставить("Период", НачалоГода(Событие.ПериодСобытия));
		ПараметрыФормы.Вставить("ДействиеКалендаряБухгалтера", Событие.Правило.Действие);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникЗаполнения3НДФЛ.Форма");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		ОписаниеДействия.Вставить("ИдентификаторФормы", Неопределено); // Не создавать уникальный идентификатор для корректной работы навигации помошника.
	
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникЗаполнения3НДФЛ.Форма.УплатаАвансовыхПлатежейНДФЛ");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникЗаявленияНаПолучениеПатента(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	Отбор.Вставить("ВидУведомления",
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
	
	Для Индекс = 0 По Уведомления.Количество() - 1 Цикл
		
		СтрокаУведомление = Уведомления[Индекс];
		Если СтрокаУведомление.Дата >= НачалоГода(Событие.ПериодСобытия) 
			И СтрокаУведомление.Дата <= КонецМесяца(Событие.Срок) Тогда
			
			СсылкаНаУведомление = СтрокаУведомление.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Ключ", СсылкаНаУведомление);
	ПараметрыФормы.Вставить("СоздатьНовоеЗаявление", Не ЗначениеЗаполнено(СсылкаНаУведомление));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУведомлениеУСН(Событие)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	Отбор.Вставить("ВидУведомления",
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
	
	СсылкаНаУведомление = Неопределено;
	Для Индекс = 0 По Уведомления.Количество() - 1 Цикл
		
		СтрокаУведомление = Уведомления[Индекс];
		Если СтрокаУведомление.Дата >= НачалоГода(Событие.ПериодСобытия) 
			И СтрокаУведомление.Дата <= КонецМесяца(Событие.Срок) Тогда
			
			СсылкаНаУведомление = СтрокаУведомление.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СсылкаНаУведомление) Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
		ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
		ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
		ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
		ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
		ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
		ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
		ПараметрыФормы.Вставить("Ключ", СсылкаНаУведомление);
		
		ОписаниеДействия = Новый Структура;
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	Иначе
		
		Возврат ОписаниеДействияДекларация(
			Событие.Правило,
			Событие.ПериодСобытия,
			Событие.Организация,
			Событие.РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыНалога(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	ПараметрыФормы.Вставить("НачальныйСрок",               Событие.НачальныйСрок);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалога.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСверкаИмущественныхНалогов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	Если ЗначениеЗаполнено(Событие.Задача) Тогда
		ПараметрыФормы.Вставить("Налог", Перечисления.ВидыИмущественныхНалогов.НалогПоЗадачеБухгалтера(Событие.Задача));
	Иначе
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие.Правило, "Владелец");
		ПараметрыФормы.Вставить("Налог", Перечисления.ВидыИмущественныхНалогов.НалогПоЗадачеБухгалтера(Задача));
	КонецЕсли;			
	ПараметрыФормы.Вставить("НалоговыйПериод", НачалоГода(Событие.ПериодСобытия));
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("Правило",         Событие.Правило);
	ПараметрыФормы.Вставить("Описание",        Событие.Наименование);
	
	ОписаниеДействия.Вставить("ИмяФормы",           "Документ.СверкаСФНСПоИмущественнымНалогам.Форма.ФормаЗадачи");
	ОписаниеДействия.Вставить("ИдентификаторФормы", Ложь); // уникальность - искать по ключевым параметрам
	ОписаниеДействия.Вставить("ПараметрыФормы",     ПараметрыФормы);
	
	Возврат ОписаниеДействия;	
	
КонецФункции

Функция ОписаниеДействияВводОстатковПриСменеОбъектаУСН(Событие)
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Событие.Организация);
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ВводОстатковПриИзмененииОбъектаУСН.Форма");
	ОписаниеДействия.Вставить("ИдентификаторФормы", Ложь); // уникальность - искать по ключевым параметрам
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
КонецФункции

Функция ОписаниеДействияУведомлениеОбИсчисленныхСуммахНалогов(Событие)
	
	ОписаниеДействия = Новый Структура;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.УведомлениеОбИсчисленныхСуммахНалогов.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;

КонецФункции 

Функция ОписаниеДействияЗаявлениеОЗачетеВзносовИП(Событие)
	ПериодСобытия = КонецКвартала(Событие.ПериодСобытия);
	
	ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Срок",             Событие.Срок);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("Заголовок",        Событие.Наименование);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ИмяФормыПомощника);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
КонецФункции

Функция ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило) Экспорт
	
	Показатели = Новый Структура;
	
	СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Правило);
	
	ДлительностьБазовогоПериода = Правило.Периодичность;
	
	Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
		// Базовый период и релевантный период совпадают
		НачалоБазовогоПериода = НачалоПериода;
		КонецБазовогоПериода  = КонецПериода;
	Иначе
		
		// Базовый и релевантный периоды не совпадают.
		// Базовый период включает в себя один или несколько релевантных.
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода,
			ДлительностьБазовогоПериода,
			Правило.СрокМесяцев);
		
		// авансы за первое полугодие 2013 платим по данным 2012 года. СрокМесяцев = 0, ОтставаниеБазовогоПериода = 0
		// прогноз на май даем в апреле по данным за март. СрокМесяцев = -2, ОтставаниеБазовогоПериода = 1 (или 0)
		// авансы в апреле платим по данным 1 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 0
		// авансы в феврале платим по данным 3 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 1
		ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
		
		БазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			НачалоПериода,
			ДлительностьБазовогоПериода,
			-ОпережениеРелевантногоПериода);
		
		НачалоБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДлительностьБазовогоПериода, БазовыйПериод);
		КонецБазовогоПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ДлительностьБазовогоПериода,  БазовыйПериод);
		
	КонецЕсли;
	
	Показатели.Вставить("ДлительностьБазовогоПериода", ДлительностьБазовогоПериода);
	Показатели.Вставить("НачалоБазовогоПериода", НачалоБазовогоПериода);
	Показатели.Вставить("КонецБазовогоПериода", КонецБазовогоПериода);
	
	Возврат Показатели;
	
КонецФункции

Функция ЗаполнитьПоДаннымНастройки(Настройка, ДанныеПлатежногоДокумента, ИмяИсходного, ИмяРеквизита = "")
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если Настройка.Свойство(ИмяИсходного) И ЗначениеЗаполнено(Настройка[ИмяИсходного]) Тогда
		ДанныеПлатежногоДокумента.Вставить(ИмяРеквизита, Настройка[ИмяИсходного]);
		РеквизитОбъектЗаполненИсходнымиДанными = Истина;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие)
	
	Если Событие.ИдентификаторЗадачи <> "НДФЛ_Предприниматель" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Событие.ПериодСобытия < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения()
		Или СтрНайти(НРег(Событие.ИдентификаторПравила), "_аванс_") <> 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие)
	
	ИдентификаторыПравил = Новый Массив;
	ИдентификаторыПравил.Добавить("2020_ИП_УплатаАвансов");
	ИдентификаторыПравил.Добавить("2022_ЕНП_Уведомление_ИП_УплатаАвансов");
	ИдентификаторыПравил.Добавить("2023_ЕНП_Уведомление_ИП_УплатаАвансов");
	ИдентификаторыПравил.Добавить("2023_Уведомление_ИП_УплатаАвансов_ЕдиныйПомощник");
	
	Если ЗначениеЗаполнено(Событие.ИдентификаторЗадачи)
		И Событие.ИдентификаторЗадачи <> ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель()
		Или Событие.ПериодСобытия < УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Событие.ИдентификаторПравила)
		И ИдентификаторыПравил.Найти(Событие.ИдентификаторПравила) = Неопределено Тогда
		
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Событие.ИдентификаторПравила)
		И ИдентификаторыПравил.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие.Правило, "Код")) = Неопределено Тогда
		
		Возврат Ложь
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомЕНВД(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ИмяЗадачи = "ЕНВД" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Возврат ПравилаВыполняемыеПомощникомРасчетаНалогаУСН().Найти(ПолноеИмяПравила) <> Неопределено;
	
КонецФункции

Функция ПравилаВыполняемыеПомощникомРасчетаНалогаУСН()
	
	Правила = Новый Массив;
	Правила.Добавить("УСН.2013_ДекларацияОрганизация");
	Правила.Добавить("УСН.2013_УплатаОрганизация");
	Правила.Добавить("УСН.2013_ДекларацияПредприниматель");
	Правила.Добавить("УСН.2013_УплатаПредприниматель");
	Правила.Добавить("УСН.2013_УплатаАвансов");
	Правила.Добавить("УСН.2022_ЕНП_УведомлениеАванс");
	Правила.Добавить("УСН.2023_ДекларацияОрганизация");
	Правила.Добавить("УСН.2023_УплатаОрганизация");
	Правила.Добавить("УСН.2023_ДекларацияПредприниматель");
	Правила.Добавить("УСН.2023_УплатаПредприниматель");
	Правила.Добавить("УСН.2023_УплатаАвансов");
	Правила.Добавить("УСН.2023_ЕНП_УведомлениеАванс");
	Правила.Добавить("УСН.2023_ДекларацияПредприниматель_СнятиеСУчета");
	Правила.Добавить("УСН.2023_УплатаПредприниматель_СнятиеСУчета");
	Правила.Добавить("УСН.2023_УплатаОрганизация_ЕдиныйПомощник");
	Правила.Добавить("УСН.2023_УплатаПредприниматель_ЕдиныйПомощник");
	Правила.Добавить("УСН.2023_УплатаАвансов_ЕдиныйПомощник");
	Правила.Добавить("УСН.2023_УведомлениеАванс_ЕдиныйПомощник");
	
	Возврат Новый ФиксированныйМассив(Правила);
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыНалогаАУСН(Правило, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Возврат (ПолноеИмяПравила = "АУСН.2021_Уплата");
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП() Тогда
		КодПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Код");
		Возврат КодПравила <> ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУчетаЗарплаты(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Возврат (ИмяЗадачи = "СтраховыеВзносы");
	
КонецФункции

Функция ПравилоМожетВыполнятьсяУниверсальнымПомощником(
		Правило, ИмяЗадачи = Неопределено, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ПолноеИмяПравила = "СтраховыеВзносы.2023_Уплата_Травматизм"
		Или ПолноеИмяПравила = "СтраховыеВзносыАУСН.2022_Уплата_ФСС_НС_АУСН" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяУниверсальнымПомощником(
		Правило, ИмяЗадачи = Неопределено, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ИмяЗадачи = "СтраховыеВзносы"
		Или ИмяЗадачи = "НДФЛ_Агент_Уплата"
		Или ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2022_ЕНП_УведомлениеНДФЛ"
		Или ЭтоПравилоУплатыИмущественногоНалога(ПолноеИмяПравила)
		Или ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата"
		Или ПолноеИмяПравила = "ТорговыйСбор.2022_ЕНП_УведомлениеУплата"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_Декабрь"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_ЕдиныйПомощник"
		Или ПолноеИмяПравила = "НДФЛ_Агент.2024_НДФЛ_Уплата_КонецМесяца"
		Или ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила)
		И Не ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) 
		Или ИмяЗадачи = "ЕдиныйНалоговыйСчет" Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход()
		И Не ПравилоВыполняетсяПомощникомУплатыНПД(Правило, ИмяЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПравилоУСНАвансовыйПлатеж(ПолноеИмяПравила) Экспорт
	
	Если ПолноеИмяПравила = "УСН.2013_УплатаОрганизация"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаАвансов"
		ИЛИ ПолноеИмяПравила = "УСН.2023_УплатаАвансов" Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоПравилоУплатыИмущественногоНалога(ПолноеИмяПравила)
	
	// Уплата налогов по указанным ниже правилам выполняется без декларации.
	// Но при этом используется универсальный помощник уплаты налога.
	ПравилаУплатыИмущественныхНалогов = Новый Массив;
	
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2021_Налог_Год");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2022_Аванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2022_Налог_Год");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2022_ЕНП_УведомлениеАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2022_ЕНП_УведомлениеНалог");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2023_Аванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("НалогНаИмущество.2023_ЕНП_УведомлениеАванс");
	
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2013_УплатаАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2020_УплатаГод");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2021_УплатаАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2022_УплатаГод");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2022_ЕНП_УведомлениеАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2022_ЕНП_УведомлениеНалог");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2023_УплатаАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ТранспортныйНалог.2023_ЕНП_УведомлениеАванс");
	
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2013_Аванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2015_Аванс"); 
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2020_Налог_Год");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2021_Аванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2022_Налог_Год");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2022_ЕНП_УведомлениеАванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2022_ЕНП_УведомлениеНалог");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2023_Аванс");
	ПравилаУплатыИмущественныхНалогов.Добавить("ЗемельныйНалог.2023_ЕНП_УведомлениеАванс");
	
	Возврат ПравилаУплатыИмущественныхНалогов.Найти(ПолноеИмяПравила) <> Неопределено;
	
КонецФункции

Функция ОписаниеДействияПомощникОплатыПатента(Событие) Экспорт
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",        Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Патент",             Событие.Правило);
	ПараметрыФормы.Вставить("Действие",           Событие.Действие);
	
	ПараметрыФормы.Вставить("Срок",               Событие.Срок);
	ПараметрыФормы.Вставить("ДокументПатент", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Событие, "ДокументПатент", УчетПСН.ДокументПатентПоДеятельностиИСроку(Событие.Правило, Событие.Срок)));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникОплатыПатента.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникРасчетаНДС(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Срок",             Событие.Срок);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ИсточникВызова",   "ОткрытиеПомощникаНДССписокЗадач");
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНДС.Форма.Форма");
	
	Если (Событие.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога 
		Или Событие.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление)
		И Не Событие.Правило.ВыполняетсяЕдинымПомощником Тогда
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНДС.Форма.ФормаОплата");
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыНПД(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("КонтекстныйВызов",            Истина);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНПД.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыНПД(Правило, Знач ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Возврат ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход()
		И ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетаНДС(Правило, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Возврат ПравилаВыполняемыеПомощникомРасчетаНДС().Найти(ПолноеИмяПравила) <> Неопределено;
	
КонецФункции

Функция ПравилаВыполняемыеПомощникомРасчетаНДС()
	
	Правила = Новый Массив;
	
	Правила.Добавить("НДС.2013_Декларация");
	Правила.Добавить("НДС.2013_Уплата1");
	Правила.Добавить("НДС.2013_Уплата2");
	Правила.Добавить("НДС.2013_Уплата3");
	Правила.Добавить("НДС.2015_Декларация");
	Правила.Добавить("НДС.2015_Уплата1");
	Правила.Добавить("НДС.2015_Уплата2");
	Правила.Добавить("НДС.2015_Уплата3");
	Правила.Добавить("НДС.2022_ЕНП_Уведомление1");
	Правила.Добавить("НДС.2022_ЕНП_Уведомление2");
	Правила.Добавить("НДС.2022_ЕНП_Уведомление3");
	Правила.Добавить("НДС.2023_Уплата1");
	Правила.Добавить("НДС.2023_Уплата2");
	Правила.Добавить("НДС.2023_Уплата3");
	
	Возврат Новый ФиксированныйМассив(Правила);
	
КонецФункции

Функция ОписаниеДействияЗаявлениеОЛьготеПоИмущественнымНалогам(Организация, Период, ВидУведомления) Экспорт 
		
	ЗаявленияОЛьготах = Документы.УведомлениеОСпецрежимахНалогообложения.АктуальныеУведомления(
		Организация,
		ВидУведомления);
		
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	Если ЗаявленияОЛьготах = Неопределено Тогда
		// Создаем новое заявление
		ОписаниеДействия.Вставить("ИмяФормы", ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьИмяФормыУведомленияПоУмолчанию(
			ВидУведомления,
			Период)); 
				
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
		ПараметрыФормы.Вставить("ЗаполнитьПриОткрытии", Истина);
	ИначеЕсли ЗаявленияОЛьготах.Количество() > 1 Тогда
		// Ранее уже было подговлено несколько заявлений - открываем список заявлений
		ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.РегламентированнаяОтчетность");
		
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Раздел", Перечисления.СтраницыЖурналаОтчетность.Уведомления);
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	Иначе	
		// Открываем единственное найденное заявление
		ОписаниеДействия.Вставить("ИмяФормы", "Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта");
		ПараметрыФормы.Вставить("Ключ", ЗаявленияОЛьготах[0]);
	КонецЕсли; 	
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияОплатаУставногоКапитала(Организация)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.ОплатаУставногоКапитала");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИдентификаторФормы", Организация.УникальныйИдентификатор());
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыАУСН(Событие, Знач ПолноеИмяПравила = Неопределено)
	
	Правило = Событие.Правило;
	
	Если Не ЭтоУплатаАУСН(Правило, ПолноеИмяПравила) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БанкСНастроеннойИнтеграцией = РегистрыСведений.СостоянияИнтеграцииАУСН.БанкИнтеграции(Событие.Организация);
	
	Если Не ЗначениеЗаполнено(БанкСНастроеннойИнтеграцией) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыАУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",         Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",       Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",             Событие.Правило);
	ПараметрыФормы.Вставить("КонтекстныйВызов",    Истина);
	ПараметрыФормы.Вставить("Срок",                Событие.Срок);
	ПараметрыФормы.Вставить("Описание",            Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС", Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи", Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникУплатыНалогаАУСН.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоУплатаАУСН(Правило, Знач ПолноеИмяПравила = Неопределено)
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ПолноеИмяПравила = "АУСН.2021_Уплата" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоНалогаУплачиваемогоОтдельно(
		Правило, ИмяЗадачи = Неопределено, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ПолноеИмяПравила = "СтраховыеВзносы.2023_Уплата_Травматизм" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилаТравматизм()
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
		ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы(), "2023_Уплата_Травматизм"));
	
	Возврат МассивПравил;
	
КонецФункции

// Возвращает описание действия по нажатию на ссылку оплаты ЕНС
//
// Параметры:
//  СтруктураРеквизитовУплатыНалога - Структура - см. НовыйСтруктураРеквизитовУплатыНалогаЕНС()
// 
// Возвращаемое значение:
//  Структура:
//        * ИмяФормы - Строка - имя открываемой формы
//        * ПараметрыФормы - Структура - параметры передаваемые для открытия формы
//
Функция ОписаниеДействияПлатежЕНС(СтруктураРеквизитовУплатыНалога) Экспорт
	
	Организация         = СтруктураРеквизитовУплатыНалога.Организация;
	Сумма               = СтруктураРеквизитовУплатыНалога.Сумма;
	СпособОплаты        = СтруктураРеквизитовУплатыНалога.СпособУплатыНалога;
	ПериодСобытия       = СтруктураРеквизитовУплатыНалога.ПериодСобытия;
	ОплатаЗадолженности = Ложь;

	РеквизитыЕдиногоНалоговогоПлатежа =
		ПомощникиПоУплатеНалоговИВзносов.РеквизитыЕдиногоНалоговогоПлатежа(Организация,
			КонецКвартала(ПериодСобытия));
	Налог               = РеквизитыЕдиногоНалоговогоПлатежа.Налог;
	КодНалоговогоОргана = РеквизитыЕдиногоНалоговогоПлатежа.КодНалоговогоОргана;
	ОКТМО               = РеквизитыЕдиногоНалоговогоПлатежа.ОКТМО;
	КБК                 = РеквизитыЕдиногоНалоговогоПлатежа.КБК;
	ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	
	ОписаниеПлатежа.Организация = Организация;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты));
	
	// Создадим платежку по данным операции
	ОписаниеПлатежа.Налог               = Налог;
	ОписаниеПлатежа.Период              = ПериодСобытия;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.КБК                 = КБК;
	ОписаниеПлатежа.ОКАТО               = ОКТМО;
	ОписаниеПлатежа.Сумма               = Сумма;
	ОписаниеПлатежа.КодНалоговогоОргана = КодНалоговогоОргана;
	ОписаниеПлатежа.ОплатаЗадолженности = ОплатаЗадолженности;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Конструктор структуры реквизитов оплаты ЕНС
// 
// Возвращаемое значение:
//  Структура:
//        * Организация - СправочникСсылка.Организации - ссылка на организацию
//        * Сумма - Число
//        * СпособУплатыНалога - ПеречислениеСсылка.СпособыУплатыНалогов
//        * ПериодСобытия - Дата
//
Функция НовыйСтруктураРеквизитовУплатыНалогаЕНС() Экспорт
	
	СтруктураРеквизитов = Новый Структура("Организация, Сумма, СпособУплатыНалога, ПериодСобытия");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ОписаниеДействияСтраховыеВзносыИПНаВНиМ(Событие)
	
	ОсталосьТекущихВзносовИП = УчетСтраховыхВзносовИП.СуммаФиксированныхВзносовНаВНиМ(
		Событие.Организация,
		Событие.ПериодСобытия);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодСобытия", Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",       Событие.Правило);
	
	ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС;
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	Если ОсталосьТекущихВзносовИП > 0 Тогда
		
		ОписаниеПлатежа = НовыйОписаниеПлатежа();
		
		ОписаниеПлатежа.Организация       = Событие.Организация;
		ОписаниеПлатежа.СпособОплаты      = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
		ОписаниеПлатежа.ИмяЗадачи         = Событие.ИдентификаторЗадачи;
		ОписаниеПлатежа.Период            = Событие.ПериодСобытия;
		ОписаниеПлатежа.КБК               = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог);
		ОписаниеПлатежа.Налог             = Налог;
		ОписаниеПлатежа.Сумма             = ОсталосьТекущихВзносовИП;
		ОписаниеПлатежа.ПоказательПериода = "0";
		
		ИмяФормыПлатежногоДокумента = "Документ.ПлатежноеПоручение.Форма.ФормаДокументаНалоговая";
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
		
	Иначе
		
		ИмяФормыПлатежногоДокумента = "Документ.ПлатежноеПоручение.ФормаСписка";
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("Организация", Событие.Организация);
		ПараметрыФормы.Отбор.Вставить("Налог", Налог);
		
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравила) Экспорт
	
	Возврат ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2023_НДФЛ_Уведомление_Декабрь" 
		Или ПолноеИмяПравила = "НДФЛ_Агент.2023_НДФЛ_Уплата_Декабрь";
	
КонецФункции

Функция ОписаниеДействияЕдиныйПомощникУплатыНалога(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = НовыйПараметрыФормыПомощника();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Событие);
	ПараметрыФормы.Описание = Событие.Наименование;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалога.Форма.ФормаЕдиная");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоПравилоНДФЛКонецМесяца(ПолноеИмяПравила) Экспорт
	
	Возврат ПолноеИмяПравила = "НДФЛ_Агент_Уведомление.2024_НДФЛ_Уведомление_КонецМесяца" 
		Или ПолноеИмяПравила = "НДФЛ_Агент.2024_НДФЛ_Уплата_КонецМесяца";
	
КонецФункции

Функция ЭтоПравилоУплатыНДСИзЕАЭС(ПолноеИмяПравила) Экспорт
	
	Возврат ПолноеИмяПравила = "КосвенныеНалогиТамСоюз.2010_Налог";
	
КонецФункции

Функция ЭтоЗадачаУплатыНДСИзЕАЭС(ИдентификаторЗадачи) Экспорт
	
	Возврат ИдентификаторЗадачи = "КосвенныеНалогиТамСоюз";
	
КонецФункции
	
Функция КодыПравилИсключенийВыполняемыхЕдинымПомощником() Экспорт
	
	ПравилаИсключения = Новый Массив;
	ПравилаИсключения.Добавить("2024_НДФЛ_Уведомление_КонецМесяца");
	ПравилаИсключения.Добавить("2024_НДФЛ_Уплата_КонецМесяца");
	ПравилаИсключения.Добавить("2010_Налог");
	
	Возврат ПравилаИсключения;
	
КонецФункции

Функция ЭтоПравилоУведомлениеПоНДФЛ(Правило) Экспорт
	
	ЭтоПравилоУведомлениеПоНДФЛ = Ложь;
	
	ИдентификаторыПравилаИЗадачи = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	Если ИдентификаторыПравилаИЗадачи <> Неопределено Тогда
		ЭтоПравилоУведомлениеПоНДФЛ = ИдентификаторыПравилаИЗадачи.ИдентификаторЗадачи = "НДФЛ_Агент_Уведомление";
	КонецЕсли;

	Возврат ЭтоПравилоУведомлениеПоНДФЛ;
	
КонецФункции

#КонецОбласти

#Область Статусы

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Документ, СтатусОтправки) Экспорт
	
	ПеренестиВАрхив = Ложь;
	
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан
		Или СтатусОтправки = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой() Тогда
		
		Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
			И ЗначениеЗаполнено(Документ)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
			
			// При интеграции с банками переносим задачи в архив автоматически
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
			ПеренестиВАрхив = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(ОрганизацияДокумента);
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЗадач = ЗадачиСвязанныеСОтчетом(Документ);
	Если ТаблицаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	// Если отчет отправлен через 1С-Отчетность и ему присвоен статус "Сдан",
	// то автоматически меняем статус у задач, связанных с отчетом, на "Сдано".
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		Для Каждого Задача Из ТаблицаЗадач Цикл
			Задача.Статус = "Сдано";
		КонецЦикла;
	КонецЕсли;
	
	ЕстьПросроченныеЗадачи = Ложь;
	Если ЗначениеЗаполнено(Документ) И ОбщегоНазначения.ЕстьРеквизитОбъекта("Вид", Документ.Метаданные()) Тогда
		ВидОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Вид");
	Иначе
		ВидОтчета = 0;
	КонецЕсли;
	ТекущийДень = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого Задача Из ТаблицаЗадач Цикл
		Если Задача.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьНовыйСтатусЗадачи(Задача, ПеренестиВАрхив);
		Если ВидОтчета = 0 И НачалоДня(Задача.Срок) < ТекущийДень Тогда
			ЕстьПросроченныеЗадачи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПросроченныеЗадачи Тогда
		ЗанестиСведенияОНарушенииСрокаПодачиРегламентированногоОтчета(Документ, ТекущийДень);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументСсылка, ПараметрыРасчетаСтатусов = Неопределено) Экспорт
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымДокумента(ДокументСсылка);
	
	Если РеквизитыПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиФинОтчетности(Документ, Статус) Экспорт
	
	Если Статус <> Перечисления.СтатусыОтправкиФинОтчетностиВБанки.Сдано Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Организация, Банк, ИдентификаторКомплекта, Дата");
	
	Правило = Справочники.ПравилаФинОтчетности.НайтиПоРеквизитам(РеквизитыДокумента.Организация,
		РеквизитыДокумента.Банк, РеквизитыДокумента.ИдентификаторКомплекта, РеквизитыДокумента.Дата);
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("ДатаДокумента", РеквизитыДокумента.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ФинОтчетность) КАК Действие,
	|	ЗадачиБухгалтера.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ЗадачиБухгалтера.Статус КАК РучнойСтатус,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.ПериодСобытия = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, МЕСЯЦ, 1), МЕСЯЦ)";
	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	
	Для каждого Задача Из ТаблицаЗадач Цикл
		Если Задача.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		Задача.Статус = "Сдано";
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов = Неопределено)
	
	ТаблицаЗадач = ЗадачиСвязанныеСПлатежом(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	Если ТаблицаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		Если Задача.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачУплатыПатента(Организация, ОтборПатент) Экспорт
	
	ТаблицаЗадач = ЗадачиУплатыПатента(Организация, ОтборПатент);
	
	ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		Если Задача.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатусЗадачи(Задача, ПеренестиВАрхив, СтатусУстановленВручную = Ложь, ПользовательУстановившийСтатус = Неопределено, Комментарий = "") Экспорт
	
	КлючиЗаписи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	ЗаполнитьЗначенияСвойств(КлючиЗаписи, Задача);
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(КлючиЗаписи);
	
	ПоляКлюча = Новый Массив;
	Для Каждого ОписаниеЭлементаКлюча Из КлючиЗаписи Цикл
		ПоляКлюча.Добавить(ОписаниеЭлементаКлюча.Значение);
	КонецЦикла;
	ПредставлениеЗадачи = СтрСоединить(ПоляКлюча, ";"); // Для записи в исключении
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		// Обработаем задачи, созданные после регистрации действий
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			// Обработаем задачи, созданные до регистрации действий
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
			МенеджерЗаписи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
			МенеджерЗаписи.Прочитать();
		КонецЕсли;
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Действие = КлючиЗаписи.Действие;
			МенеджерЗаписи.Статус = Задача.Статус;
			МенеджерЗаписи.СтатусУстановленВручную = СтатусУстановленВручную;
			МенеджерЗаписи.Комментарий = Комментарий;
			МенеджерЗаписи.ПользовательУстановившийСтатус = Справочники.Пользователи.ПустаяСсылка();
			Если ЗначениеЗаполнено(ПользовательУстановившийСтатус) Тогда
				МенеджерЗаписи.ПользовательУстановившийСтатус = ПользовательУстановившийСтатус;
			КонецЕсли;
			Если ПеренестиВАрхив Тогда
				МенеджерЗаписи.ВАрхиве = Истина;
			КонецЕсли;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	Исключение
		
		ШаблонОшибки = НСтр("ru = 'Не удалось обновить статус задачи.
							|Задача: %1
							|Подробное описание ошибки:
							|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеЗадачи, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , ПредставлениеЗадачи, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет статусы задач бухгалтера по подготовке отчетов.
// Переданной таблице добавляется колонка Статус.
//
//  Параметры:
//   ТаблицаЗадач - ТаблицаЗначений:
//     * Организация                 - СправочникСсылка.Организации
//     * ПериодСобытия               - Дата
//     * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//     * Действие                    - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
//     * Периодичность               - ПеречислениеСсылка.Периодичность
//
Процедура ДобавитьСтатусыЗадач(ТаблицаЗадач) Экспорт
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтатусыУстановленныеВручную(ТаблицаЗадач);
	
	Если ТаблицаЗадач.Колонки.Найти("Статус") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	ОтборПоДействиюОтчет         = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	ОтборПоДействиюУплата        = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
	ОтборПоДействиюРегПлатеж     = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж);
	ОтборПоДействиюЗарплата      = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата);
	ОтборПоДействиюФинОтчетность = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность);
	ОтборПоДействиюУведомление   = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление);
	
	ЗадачиПодготовкаОтчета = ТаблицаЗадач.Скопировать(ОтборПоДействиюОтчет);
	ЗадачиУплатаНалога     = ТаблицаЗадач.Скопировать(ОтборПоДействиюУплата);
	ЗадачиРегПлатежи       = ТаблицаЗадач.Скопировать(ОтборПоДействиюРегПлатеж);
	ЗадачиЗарплата         = ТаблицаЗадач.Скопировать(ОтборПоДействиюЗарплата);
	ЗадачиФинОтчетность    = ТаблицаЗадач.Скопировать(ОтборПоДействиюФинОтчетность);
	ЗадачиУведомление      = ТаблицаЗадач.Скопировать(ОтборПоДействиюУведомление);
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоПодготовкеОтчетов(ЗадачиПодготовкаОтчета) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоУплатеНалогов(ЗадачиУплатаНалога) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоПодготовкеРегПлатежей(ЗадачиРегПлатежи) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоВыплатеЗарплаты(ЗадачиЗарплата) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоФинОтчетности(ЗадачиФинОтчетность) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоУведомлениям(ЗадачиУведомление) Цикл
		
		КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли записанный в базу статус правильным, если статус неактуальный – записывает правильный статус.
//  Параметры:
//   ПараметрыЗадачи - Структура
//    * Организация
//    * Правило
//    * ПериодСобытия
//    * РегистрацияВНалоговомОргане
//   НовыйСтатус - Строка
//
Процедура ПроверитьАктуальностьСтатуса(ПараметрыЗадачи, НовыйСтатус) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыЗадачи.Организация)
		Или Не ЗначениеЗаполнено(ПараметрыЗадачи.Правило) Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		
		ИдентификаторыПравила =
			Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(ПараметрыЗадачи.Правило);
		
		КодЗадачи = ИдентификаторыПравила.ИдентификаторЗадачи;
		
	ИначеЕсли ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.Патенты")
		Или ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей")
		Или ТипЗнч(ПараметрыЗадачи.Правило) = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы") Тогда
		
		КодЗадачи = "";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	КодЗадачиВзносы = "СтраховыеВзносы";
	ПравилаТравматизм = ПравилаТравматизм();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 ПараметрыЗадачи.Организация);
	Запрос.УстановитьПараметр("Правило",                     ПараметрыЗадачи.Правило);
	Запрос.УстановитьПараметр("КодЗадачи",                   КодЗадачи);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПараметрыЗадачи.ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ПараметрыЗадачи.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодЗадачиВзносы",             КодЗадачиВзносы);
	Запрос.УстановитьПараметр("ПравилаТравматизм",           ПравилаТравматизм);
	Запрос.УстановитьПараметр("НовыйСтатус",                 НовыйСтатус);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Статус,
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И &УсловиеНаПравило
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И ЗадачиБухгалтера.Статус <> &НовыйСтатус";
	Если КодЗадачи = КодЗадачиВзносы И Не ПравилоНалогаУплачиваемогоОтдельно(ПараметрыЗадачи.Правило) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПравило",
			"ЗадачиБухгалтера.Правило.Владелец.Код = &КодЗадачиВзносы "
			+ "И ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)"
			+ "И Не ЗадачиБухгалтера.Правило В (&ПравилаТравматизм)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПравило", "ЗадачиБухгалтера.Правило = &Правило");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если КодЗадачи = КодЗадачиВзносы Тогда
		ПараметрыЗадачи.Правило = Выборка.Правило;
	КонецЕсли;
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ПараметрыЗадачи);
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		// Обработаем задачи, созданные после регистрации действий
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗадачи);
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			// Обработаем задачи, созданные до регистрации действий
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗадачи);
			МенеджерЗаписи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Действие = ПараметрыЗадачи.Действие;
		КонецЕсли;
		
		МенеджерЗаписи.Статус = НовыйСтатус;
		МенеджерЗаписи.Записать();
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	Исключение
		
		ТекстСобытия = НСтр("ru = 'Задачи бухгалтера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонОшибки = НСтр("ru = 'Не удалось обновить статус задачи ""%1"" по причине:
			|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСобытия, УровеньЖурналаРегистрации.Ошибка, , Выборка.Наименование, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЗадачиСвязанныеСОтчетом(Документ)
	
	СвойстваОтчета = ИнтерфейсыВзаимодействияБРО.СвойстваОтчета(Документ);
	
	ИсточникОтчета = СвойстваОтчета.ИсточникОтчета;
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетПрибыль"
		И ИнтерфейсыВзаимодействияБРО.ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения(Документ) Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	Если ЕдиныйНалоговыйСчет.ЭтоУведомлениеПоЕдиномуНалоговомуПлатежу(ИсточникОтчета) Тогда
		
		Возврат ЗадачиДляУведомления(Документ, СвойстваОтчета); 
		
	ИначеЕсли ЕдиныйНалоговыйСчет.ЭтоЗаявлениеОЗачетеНалогаПоЕдиномуНалоговомуПлатежу(ИсточникОтчета) Тогда
		
		Возврат ЗадачиДляЗаявленияОЗачетеНалога(Документ, СвойстваОтчета);
		
	Иначе
		Возврат ЗадачиДляОтчета(Документ, СвойстваОтчета);
	КонецЕсли;
	
КонецФункции

Функция ЗадачиДляОтчета(Документ, СвойстваОтчета)
	
	ИсточникОтчета = СвойстваОтчета.ИсточникОтчета;
	
	ВсеИдентификаторыТребований = СоответствияПравилИФормОтчетов();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами(), ВсеИдентификаторыТребований);
	
	ИдентификаторыТребованийПоОтчету = ВсеИдентификаторыТребований.Скопировать(
		Новый Структура("ФормаОтчета", ИсточникОтчета), "ИдентификаторПравила, ИдентификаторЗадачи");
	
	Если ИдентификаторыТребованийПоОтчету.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = СвойстваОтчета.Организация;
	ПериодСобытия = СвойстваОтчета.ДатаОкончанияОП;
	
	ДатаСобытия   = НачалоДня(СвойстваОтчета.ДатаСоздания);
	Если СвойстваОтчета.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		КодНалоговогоОргана = СвойстваОтчета.КодКонтролирующегоОргана;
	Иначе
		КодНалоговогоОргана = "";
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, "", КодНалоговогоОргана);
	
	ОтборНалоговыеОрганы = Новый Массив;
	ОтборНалоговыеОрганы.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ОтборНалоговыеОрганы.Добавить(РегистрацияВНалоговомОргане);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыТребованийПоОтчету", ИдентификаторыТребованийПоОтчету);
	Запрос.УстановитьПараметр("ВсеИдентификаторыТребований",      ВсеИдентификаторыТребований);
	Запрос.УстановитьПараметр("Организация",                      Организация);
	Запрос.УстановитьПараметр("ОтборНалоговыеОрганы",             ОтборНалоговыеОрганы);
	Запрос.УстановитьПараметр("ФормаОтчета",                      ИсточникОтчета);
	
	// Текст запроса может модифицироваться схемой запроса
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыТребований.ФормаОтчета КАК ФормаОтчета,
	|	ИдентификаторыТребований.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ВсеИдентификаторыТребований
	|ИЗ
	|	&ВсеИдентификаторыТребований КАК ИдентификаторыТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ИдентификаторыТребований
	|ИЗ
	|	&ИдентификаторыТребованийПоОтчету КАК ИдентификаторыТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ОтборПоЗадаче
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|ГДЕ
	|	ИдентификаторыТребований.ИдентификаторПравила = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыТребований.ИдентификаторЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаОбрабатываемыеДругимиОтчетами
	|ИЗ
	|	ВсеИдентификаторыТребований КАК ИдентификаторыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоЗадаче КАК ОтборПоЗадаче
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ОтборПоЗадаче.ИдентификаторЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|			И ИдентификаторыТребований.ИдентификаторПравила = ПравилаПредставленияОтчетовУплатыНалогов.Код
	|ГДЕ
	|	ИдентификаторыТребований.ФормаОтчета <> &ФормаОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|			И ИдентификаторыТребований.ИдентификаторПравила = ПравилаПредставленияОтчетовУплатыНалогов.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	ОтборПоЗадаче КАК ОтборПоЗадаче
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ОтборПоЗадаче.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В
	|				(ВЫБРАТЬ
	|					ПравилаОбрабатываемыеДругимиОтчетами.Правило
	|				ИЗ
	|					ПравилаОбрабатываемыеДругимиОтчетами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.Действие КАК Действие,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане В(&ОтборНалоговыеОрганы)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Условия = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].Операторы[0].Отбор;
	
	УсловиеПравил = 
	"ЗадачиБухгалтера.Правило В
	|	(ВЫБРАТЬ
	|		Правила.Правило
	|	ИЗ
	|		Правила)";
		
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		Условия.Добавить(УсловиеПравил);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		ВсеЗадачи = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Условия.Добавить(УсловиеПравил);
		
		// Добавляем отбор по периоду в последний запрос пакета
		Условия.Добавить("ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия");
		Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() И ТипЗнч(Документ) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда
			Условия.Удалить(Условия.Количество()-1);
			// Задача с периодичностью "День"
			Условия.Добавить("ЗадачиБухгалтера.Периодичность = &Периодичность");
			Запрос.УстановитьПараметр("Периодичность", Перечисления.Периодичность.День);
			// Период сдачи отчета 2 дня с учетом даты события
			Условия.Добавить("ЗадачиБухгалтера.Срок = &ПериодСобытия ИЛИ ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия");
			Запрос.УстановитьПараметр("ПериодСобытия", ДатаСобытия);
			
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
			
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		
		ВсеЗадачи = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	Возврат ВсеЗадачи;
	
КонецФункции

Функция ЗадачиДляЗаявленияОЗачетеНалога(Документ, СвойстваОтчета)
	
	ЗаявлениеОЗачетеНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Основание");
	ДанныеЗадачиПоЗаявлению = РегистрыСведений.ЗадачиБухгалтераУведомления.ДанныеЗадачиПоУведомлению(ЗаявлениеОЗачетеНалога);
	ПериодСобытия = ДанныеЗадачиПоЗаявлению.ПериодСобытия;
	ОтборПоПравилу = ДанныеЗадачиПоЗаявлению.Правило; 
	
	Если Не ЗначениеЗаполнено(ОтборПоПравилу) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СвойстваОтчета.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		КодНалоговогоОргана = СвойстваОтчета.КодКонтролирующегоОргана;
	Иначе
		КодНалоговогоОргана = "";
	КонецЕсли;
	
	Организация = СвойстваОтчета.Организация;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, "", КодНалоговогоОргана);
	
	ОтборНалоговыеОрганы = Новый Массив;
	ОтборНалоговыеОрганы.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ОтборНалоговыеОрганы.Добавить(РегистрацияВНалоговомОргане);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                      Организация);
	Запрос.УстановитьПараметр("ОтборНалоговыеОрганы",             ОтборНалоговыеОрганы);
	Запрос.УстановитьПараметр("ОтборПоПравилу", ОтборПоПравилу);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.Действие КАК Действие,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане В(&ОтборНалоговыеОрганы)
	|	И ЗадачиБухгалтера.Правило = &ОтборПоПравилу
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗадачиДляУведомления(Документ, СвойстваОтчета)
	
	УведомлениеОбИсчисленныхСуммахНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Основание");
	// При первой записи документа сначала записывается документ БРО с битой ссылкой на документ БП.
	// И эта функция вызывается через интерфейс БРО. Поэтому мы проверим, что ссылка существует, и если нет -
	// значит это первая запись документа. А статус будет установлен уже после записи документа из формы.
	Если Не ЗначениеЗаполнено(УведомлениеОбИсчисленныхСуммахНалога)
		Или Не ОбщегоНазначения.СсылкаСуществует(УведомлениеОбИсчисленныхСуммахНалога) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = СвойстваОтчета.Организация;
	ВидыКодыНалогов = РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтераДляУведомлений();
	
	// Если уведомление содержит НДФЛ за период с 23 числа предыдущего месяца по 9 число текущего месяца,
	// то менять статус задач по НДФЛ не следует, т.к. это промежуточное уведомление.
	Если УведомлениеСодержитПромежуточныйНДФЛ(УведомлениеОбИсчисленныхСуммахНалога) Тогда
		Отбор = Новый Структура("ВидНалога", Перечисления.ВидыНалогов.НДФЛ);
		Для Каждого СтрокаНДФЛ Из ВидыКодыНалогов.НайтиСтроки(Отбор) Цикл
			ВидыКодыНалогов.Удалить(СтрокаНДФЛ);
		КонецЦикла;
	КонецЕсли;
	
	ПравилаИсключения = Новый Массив;
	// Для налоговых агентов по НДФЛ, удержанному за период с 23 по 31 декабря (код отчетного периода 34/04), 
	// установлен особый срок подачи уведомления об исчисленных суммах налогов. 
	// Срок предоставления уведомления - не позднее последнего рабочего дня года.
	// Таким образом, в декабре подается 2 уведомления по НДФЛ. 
	// Исключим лишнее правило для задач, которые не относятся к периоду из уведомления.
	Если УведомлениеСодержитНДФЛЗаТринадцатыйПериод(УведомлениеОбИсчисленныхСуммахНалога) Тогда
		ПравилаИсключения.Добавить(ПравилоУведомленияПоНДФЛ());
	Иначе
		ПравилаИсключения.Добавить(ПравилоУведомленияПоНДФЛТринадцатыйПериод());
	КонецЕсли;
	// Для налоговых агентов по НДФЛ, удержанному за период с 23 по последнее число месяца,
	// установлен особый срок подачи уведомления об исчисленных суммах налогов.
	// Обработаем эти правила особым образом.
	ПравилаИсключения.Добавить(ПравилоУведомленияПоНДФЛКонецМесяца());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыКодыНалогов", ВидыКодыНалогов);
	Запрос.УстановитьПараметр("УведомлениеОбИсчисленныхСуммахНалога", УведомлениеОбИсчисленныхСуммахНалога);
	Запрос.УстановитьПараметр("ДатаНачалаЕНС", НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	Запрос.УстановитьПараметр("ПравилаИсключения",    ПравилаИсключения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКодыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыКодыНалогов.КодЗадачи КАК КодНалога
	|ПОМЕСТИТЬ ВидыКодыНалогов
	|ИЗ
	|	&ВидыКодыНалогов КАК ВидыКодыНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уведомления.Организация КАК Организация,
	|	УведомленияНалоги.Налог.ВидНалога КАК ВидНалога,
	|	УведомленияНалоги.НачалоПериода КАК НачалоПериода,
	|	УведомленияНалоги.КонецПериода КАК КонецПериода,
	|	УведомленияНалоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ УведомленияБезКодов
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК Уведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомленияНалоги
	|		ПО Уведомления.Ссылка = УведомленияНалоги.Ссылка
	|ГДЕ
	|	Уведомления.Ссылка = &УведомлениеОбИсчисленныхСуммахНалога
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомленияБезКодов.Организация КАК Организация,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило,
	|	ЗадачиБухгалтера.Код КАК КодЗадачи,
	|	УведомленияБезКодов.НачалоПериода КАК НачалоПериода,
	|	УведомленияБезКодов.КонецПериода КАК КонецПериода,
	|	УведомленияБезКодов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ Уведомления
	|ИЗ
	|	УведомленияБезКодов КАК УведомленияБезКодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКодыНалогов КАК ВидыКодыНалогов
	|		ПО УведомленияБезКодов.ВидНалога = ВидыКодыНалогов.ВидНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО (ВидыКодыНалогов.КодНалога = ЗадачиБухгалтера.Код)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Владелец = ЗадачиБухгалтера.Ссылка)
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &ДатаНачалаЕНС
	|				ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Организация,
	|	ЗадачиБухгалтераУведомления.Правило,
	|	ЗадачиБухгалтераУведомления.Правило.Владелец.Код,
	|	ЗадачиБухгалтераУведомления.ПериодСобытия,
	|	ЗадачиБухгалтераУведомления.ПериодСобытия,
	|	ЗадачиБухгалтераУведомления.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
	|		ПО ЗадачиБухгалтераУведомления.Уведомление = УведомлениеОбИсчисленныхСуммахНалогов.Ссылка
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Уведомление = &УведомлениеОбИсчисленныхСуммахНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.Действие КАК Действие,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Уведомления КАК Уведомления
	|		ПО ЗадачиБухгалтера.Организация = Уведомления.Организация
	|			И ЗадачиБухгалтера.Правило = Уведомления.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = Уведомления.КонецПериода
	|			И ЗадачиБухгалтера.РегистрацияВНалоговомОргане = Уведомления.РегистрацияВНалоговомОргане
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И НЕ ЗадачиБухгалтера.Правило В (&ПравилаИсключения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.Действие,
	|	ЗадачиБухгалтера.Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Уведомления КАК Уведомления
	|		ПО ЗадачиБухгалтера.Организация = Уведомления.Организация
	|			И ЗадачиБухгалтера.Правило = Уведомления.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = Уведомления.КонецПериода
	|			И (ЗадачиБухгалтера.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И НЕ ЗадачиБухгалтера.Правило В (&ПравилаИсключения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.Действие,
	|	ЗадачиБухгалтера.Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Уведомления КАК Уведомления
	|		ПО ЗадачиБухгалтера.Организация = Уведомления.Организация
	|			И ЗадачиБухгалтера.Правило = Уведомления.Правило
	|			И (ЗадачиБухгалтера.ПериодСобытия = Уведомления.КонецПериода
	|				И НАЧАЛОПЕРИОДА(Уведомления.НачалоПериода, МЕСЯЦ) <> Уведомления.НачалоПериода)
	|			И ЗадачиБухгалтера.РегистрацияВНалоговомОргане = Уведомления.РегистрацияВНалоговомОргане
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&ПравилаИсключения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.Действие,
	|	ЗадачиБухгалтера.Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Уведомления КАК Уведомления
	|		ПО ЗадачиБухгалтера.Организация = Уведомления.Организация
	|			И ЗадачиБухгалтера.Правило = Уведомления.Правило
	|			И (ЗадачиБухгалтера.ПериодСобытия = Уведомления.КонецПериода
	|				И НАЧАЛОПЕРИОДА(Уведомления.НачалоПериода, МЕСЯЦ) <> Уведомления.НачалоПериода)
	|			И (ЗадачиБухгалтера.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И ЗадачиБухгалтера.Правило В(&ПравилаИсключения)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗадачиСвязанныеСПлатежом(РеквизитыПлатежа, ПараметрыРасчетаСтатусов)
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиПодготовкиРегулярныхПлатежей(РеквизитыПлатежа),
		ТаблицаЗадач);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиУплатыНалога(РеквизитыПлатежа, ПараметрыРасчетаСтатусов),
		ТаблицаЗадач);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиВыплатыЗарплаты(РеквизитыПлатежа),
		ТаблицаЗадач);
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция СвязанныеЗадачиПодготовкиРегулярныхПлатежей(РеквизитыДокумента)
	
	Если ТипЗнч(РеквизитыДокумента.Ссылка) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегулярныеПлатежи.Организация КАК Организация,
	|	РегулярныеПлатежи.Правило КАК Правило,
	|	РегулярныеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж) КАК Действие
	|ИЗ
	|	РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|ГДЕ
	|	РегулярныеПлатежи.Организация = &Организация
	|	И РегулярныеПлатежи.ПлатежноеПоручение = &Ссылка
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СвязанныеЗадачиУплатыНалога(РеквизитыДокумента, ПараметрыРасчетаСтатусов)
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	
	ДокументОбрабатывается = ЭтоУплатаНалога(РеквизитыДокумента.ВидОперации)
		И РеквизитыДокумента.ВидНалога <> Перечисления.ВидыНалогов.НДФЛ
		И РеквизитыДокумента.ВидНалога <> Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины;
	
	Если Не ДокументОбрабатывается Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	ТекущаяЗадача = ТекущаяЗадачаНалоговогоПлатежа(РеквизитыДокумента);
	
	НоваяЗадача = НоваяЗадачаНалоговогоПлатежа(РеквизитыДокумента, ТекущаяЗадача, ПараметрыРасчетаСтатусов);
	
	ПропуститьОбновлениеСвязиДокументЗадача = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыРасчетаСтатусов, "ПропуститьОбновлениеСвязиДокументЗадача", Ложь);
	
	// Зарегистрируем новое состояние платежа в регистре исполнения задач ЗадачиБухгалтераНалоговыеПлатежи.
	
	Если НоваяЗадача <> Неопределено Тогда
		
		// Новое исполнение при записи заместит предыдущее.
		
		ОплатаЗадолженности = ЭтоПогашениеНалоговойЗадолженности(РеквизитыДокумента);
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			РеквизитыДокумента.Организация,
			РеквизитыДокумента.Ссылка,
			НоваяЗадача.Правило,
			НоваяЗадача.ПериодСобытия,
			ОплатаЗадолженности);
		
	ИначеЕсли ТекущаяЗадача <> Неопределено
		И ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыДокумента.ВидНалога)
		И Не ПропуститьОбновлениеСвязиДокументЗадача Тогда
		
		// Для указанного налога в указанный период задачи отсутствуют.
		// Если связанные задачи по налогу обновляются автоматически, старую запись исполнения необходимо удалить.
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.УдалитьЗапись(
			РеквизитыДокумента.Организация, РеквизитыДокумента.Ссылка);
		
	КонецЕсли;
	
	// Заполним таблицу задач, для которых необходимо обновить статусы
	
	Если ТекущаяЗадача <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач.Добавить(), ТекущаяЗадача);
	КонецЕсли;
	
	Если НоваяЗадача <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач.Добавить(), НоваяЗадача);
	КонецЕсли;
	
	// Особые ситуации
	
	// Задача по оплате патента регистрируется только из помощника оплаты патента.
	// Авторегистрация новой задачи на оплату патента не поддерживается.
	// Поэтому патент может содержаться только в правиле текущей задачи.
	ДополнитьЗадачиОплатыПатента(ТекущаяЗадача, ТаблицаЗадач);
	
	// При уплате фиксированных взносов может измениться статус и задачи на уплату "постоянной" части в пределах года,
	// и статус задачи на уплату взносов с доходов.
	ДополнитьЗадачиУплатыФиксированныхВзносов(ТаблицаЗадач);
	
	// При уплате добровольных взносов по временной нетрудоспособности может измениться статус в пределах года
	ДополнитьЗадачиУплатыДобровольныхВзносовИП(РеквизитыДокумента.Организация, КонецГода(РеквизитыДокумента.НалоговыйПериод), ТаблицаЗадач);
	
	// При оплате 1/3 НДС нужно актуализировать все задачи по оплате 1/3 в этом квартале.
	ДополнитьЗадачиОплатыНДС(ТекущаяЗадача, ТаблицаЗадач);
	
	ТаблицаЗадач.Свернуть(ИменаКолонокСтрокой(ТаблицаЗадач.Колонки));
	
	ЗаполнитьРегистрациюВНалоговомОргане(ТаблицаЗадач, РеквизитыДокумента);
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция СвязанныеЗадачиВыплатыЗарплаты(РеквизитыДокумента)
	
	ДокументОбрабатывается = ЭтоВыплатаЗарплаты(РеквизитыДокумента.ВидОперации)
		ИЛИ (ЭтоУплатаНалога(РеквизитыДокумента.ВидОперации)
			И (РеквизитыДокумента.ВидНалога = Перечисления.ВидыНалогов.НДФЛ
				ИЛИ РеквизитыДокумента.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины));
	
	Если Не ДокументОбрабатывается Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",        РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("ПравилоАванс",       ПравилоВыплатыЗарплатыАванс());
	Запрос.УстановитьПараметр("СпособВыплатыАванс", Справочники.СпособыВыплатыЗарплаты.Аванс());
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ПлатежнаяВедомость) Тогда
		
		Запрос.УстановитьПараметр("Ведомость", РеквизитыДокумента.ПлатежнаяВедомость);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиБухгалтера.Организация КАК Организация,
		|	ЗадачиБухгалтера.Правило КАК Правило,
		|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
		|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЗадачиБухгалтера.Правило.Действие КАК Действие
		|ИЗ
		|	Документ.%Ведомость% КАК ВедомостьНаВыплатуЗарплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|		ПО ВедомостьНаВыплатуЗарплаты.Организация = ЗадачиБухгалтера.Организация
		|			И КОНЕЦПЕРИОДА(ВедомостьНаВыплатуЗарплаты.ПериодРегистрации, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗадачиБухгалтера.ПериодСобытия, МЕСЯЦ)
		|			И &УсловиеАванс
		|			И (ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов)
		|			И (ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))
		|ГДЕ
		|	ВедомостьНаВыплатуЗарплаты.Ссылка = &Ведомость";
		
		ВедомостьМетаданные = РеквизитыДокумента.ПлатежнаяВедомость.Метаданные();
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Ведомость%", ВедомостьМетаданные.Имя);
		Если ВедомостьМетаданные.Реквизиты.Найти("СпособВыплаты") <> Неопределено Тогда
			
			ТекстЗамены = "(ВЫБОР
			|				КОГДА ВедомостьНаВыплатуЗарплаты.СпособВыплаты = &СпособВыплатыАванс
			|					ТОГДА ЗадачиБухгалтера.Правило = &ПравилоАванс
			|				ИНАЧЕ ЗадачиБухгалтера.Правило <> &ПравилоАванс
			|			КОНЕЦ)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАванс", ТекстЗамены);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАванс", "ИСТИНА");
		КонецЕсли;
		
		ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
		
	Иначе
		// Если ведомость не заполнена, то это уплата НДФЛ.
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыДокумента.ПоказательПериода);
		Периодичность   = ПериодичностьПоПоказателюПериода(ОписаниеПериода.Периодичность);
		ПериодСобытия   = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ОписаниеПериода.Дата));
		
		Запрос.УстановитьПараметр("ПериодСобытияЗарплата", ПериодСобытия);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиБухгалтера.Организация КАК Организация,
		|	ЗадачиБухгалтера.Правило КАК Правило,
		|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
		|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата) КАК Действие
		|ИЗ
		|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|ГДЕ
		|	ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
		|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытияЗарплата
		|	И ЗадачиБухгалтера.Организация = &Организация
		|	И ЗадачиБухгалтера.Правило <> &ПравилоАванс";
		
		ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
		
		// Убедимся, что документ уплаты НДФЛ добавлен в служебный регистр "ЗадачиБухгалтераНалоговыеПлатежи"
		Для Каждого Задача Из ТаблицаЗадач Цикл
			РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
				Задача.Организация, РеквизитыДокумента.Ссылка, Задача.Правило, Задача.ПериодСобытия);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Возвращает таблицу с параметрами задач по подготовке отчетов и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение: ТаблицаЗначений, копия переданной таблицы, дополненная колонкой Статус.
//  Колонки:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Статус                      - Строка
//
Функция СтатусыЗадачПоПодготовкеОтчетов(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	СостояниеОтчетностиСдано = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
	СтатусБРОСдано = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	
	Для Каждого ВыполнениеЗадачи Из ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиСоСтатусами) Цикл
		
		Статус = "";
		
		Если ВыполнениеЗадачи.СтатусУстановленВручную Тогда
			Статус = ВыполнениеЗадачи.РучнойСтатус;
		ИначеЕсли ВыполнениеЗадачи.Документы.Количество() > 0 Тогда
			Если ВыполнениеЗадачи.Периодичность = Перечисления.Периодичность.День Тогда
				// Все задачи дня должны быть выполнены
				Для Каждого Документ ИЗ ВыполнениеЗадачи.Документы Цикл
					Если Документ.СостояниеСдачиОтчетности = СостояниеОтчетностиСдано
						Или Документ.Статус = СтатусБРОСдано Тогда
							Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
					Иначе
						Статус = "";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Созданные отчеты отсортированы по убыванию даты подписи, определяем статус по самому последнему
				Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(ВыполнениеЗадачи.Документы[0].СостояниеСдачиОтчетности)
					Или РегламентированнаяОтчетностьВызовСервера.ОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ВыполнениеЗадачи.Документы[0].Ссылка) Тогда
					Статус = ВыполнениеЗадачи.Документы[0].Статус;
				Иначе
					Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(ВыполнениеЗадачи.Документы[0].Ссылка)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для Каждого Задача Из ЗадачиСоСтатусами.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по уплате налогов и статусами.
//
// Параметры:
//  КлючиЗадач - ТаблицаЗначений
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач()
//
Функция СтатусыЗадачПоУплатеНалогов(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗадач",      ТаблицаЗадач);
	Запрос.УстановитьПараметр("КодЗадачиВзносы",   ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы());
	Запрос.УстановитьПараметр("ПравилаТравматизм", ПравилаТравматизм());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗадач.Организация КАК Организация,
	|	ТаблицаЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаЗадач.Правило КАК Правило,
	|	ТаблицаЗадач.Действие КАК Действие,
	|	ТаблицаЗадач.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ТаблицаЗадач.ПользовательУстановившийСтатус КАК ПользовательУстановившийСтатус,
	|	ТаблицаЗадач.Комментарий КАК Комментарий,
	|	ТаблицаЗадач.РучнойСтатус КАК РучнойСтатус
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК ТаблицаЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.Организация КАК Организация,
	|	ТаблицаЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаЗадач.Правило КАК Правило,
	|	ТаблицаЗадач.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ТаблицаЗадач.ПользовательУстановившийСтатус КАК ПользовательУстановившийСтатус,
	|	ТаблицаЗадач.Комментарий КАК Комментарий,
	|	ТаблицаЗадач.РучнойСтатус КАК РучнойСтатус,
	|	ЕСТЬNULL(Правила.Периодичность, ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)) КАК Периодичность,
	|	ЕСТЬNULL(Правила.Ссылка.Владелец.Код, """") КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(Правила.Ссылка.Код, """") КАК ИдентификаторПравила,
	|	ЕСТЬNULL(Правила.Действие, ТаблицаЗадач.Действие) КАК Действие
	|ПОМЕСТИТЬ ЗадачиСИдентификаторами
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО ТаблицаЗадач.Правило = Правила.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиСИдентификаторами.Организация КАК Организация,
	|	ЗадачиСИдентификаторами.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиСИдентификаторами.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиСИдентификаторами.Правило КАК Правило,
	|	ЗадачиСИдентификаторами.Правило КАК ПравилоУплаты,
	|	ЕСТЬNULL(ЗадачиБухгалтера.Периодичность, ЗадачиСИдентификаторами.Периодичность) КАК Периодичность,
	|	ЕСТЬNULL(ЗадачиБухгалтера.Срок, ДАТАВРЕМЯ(1, 1, 1)) КАК Срок,
	|	ЗадачиСИдентификаторами.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ЗадачиСИдентификаторами.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ЗадачиСИдентификаторами.ИдентификаторЗадачи + ""."" + ЗадачиСИдентификаторами.ИдентификаторПравила КАК ПолноеИмяПравила,
	|	ЕСТЬNULL(ЗадачиБухгалтера.Действие, ЗадачиСИдентификаторами.Действие) КАК Действие,
	|	ЗадачиСИдентификаторами.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ЗадачиСИдентификаторами.ПользовательУстановившийСтатус КАК ПользовательУстановившийСтатус,
	|	ЗадачиСИдентификаторами.Комментарий КАК Комментарий,
	|	ЗадачиСИдентификаторами.РучнойСтатус КАК РучнойСтатус
	|ИЗ
	|	ЗадачиСИдентификаторами КАК ЗадачиСИдентификаторами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ЗадачиСИдентификаторами.Организация = ЗадачиБухгалтера.Организация
	|			И ЗадачиСИдентификаторами.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И ЗадачиСИдентификаторами.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И (ВЫБОР
	|				КОГДА ЗадачиСИдентификаторами.ИдентификаторЗадачи = &КодЗадачиВзносы
	|						И НЕ ЗадачиСИдентификаторами.Правило В (&ПравилаТравматизм)
	|					ТОГДА ЗадачиБухгалтера.Правило.Владелец.Код = &КодЗадачиВзносы
	|							И НЕ ЗадачиБухгалтера.Правило В (&ПравилаТравматизм)
	|							И ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|				ИНАЧЕ ЗадачиСИдентификаторами.Правило = ЗадачиБухгалтера.Правило
	|			КОНЕЦ)";
	
	ПараметрыЗадач = Новый Структура;
	
	ПараметрыЗадач.Вставить("СтраховыеВзносыИП",     Обработки.РасчетСтраховыхВзносовИП.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("ЕНВД",                  Обработки.ПомощникРасчетаЕНВД.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УСН",                   Обработки.ПомощникРасчетаНалогаУСН.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("НДФЛ_ИП",               Обработки.ПомощникЗаполнения3НДФЛ.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("Патент",                Обработки.ПомощникОплатыПатента.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УчетЗарплаты",          Обработки.ПомощникУчетаЗарплаты.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("НДС",                   Обработки.ПомощникРасчетаНДС.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УниверсальныйПомощник", Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("АУСН",                  НовыеПараметрыЗадачБухгалтера());
	ПараметрыЗадач.Вставить("ДобровольныеВзносыИП",  НовыеПараметрыЗадачБухгалтера());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Правило             = Выборка.Правило;
		ИдентификаторЗадачи = Выборка.ИдентификаторЗадачи;
		ПолноеИмяПравила    = Выборка.ПолноеИмяПравила;
		
		ГруппаПараметров = Неопределено;
		
		Если ТипЗнч(Правило) = Тип("СправочникСсылка.Патенты") Тогда
			
			ГруппаПараметров = "Патент";
			
		ИначеЕсли Выборка.ИдентификаторПравила = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ() Тогда
			
			ГруппаПараметров = "ДобровольныеВзносыИП";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Правило, ИдентификаторЗадачи) Тогда
			
			ГруппаПараметров = "СтраховыеВзносыИП";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЕНВД(Правило, ИдентификаторЗадачи) Тогда
			
			ГруппаПараметров = "ЕНВД";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "УСН";
		
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыНалогаАУСН(Правило, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "АУСН";
		
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Выборка)
			Или ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Выборка) Тогда
			
			ГруппаПараметров = "НДФЛ_ИП";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУчетаЗарплаты(Правило, ИдентификаторЗадачи) 
			И Не ПравилоМожетВыполнятьсяУниверсальнымПомощником(Правило, ИдентификаторЗадачи, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "УчетЗарплаты";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНДС(Правило, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "НДС";
			
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило, ИдентификаторЗадачи, ПолноеИмяПравила)
			Или ПравилоМожетВыполнятьсяУниверсальнымПомощником(Правило, ИдентификаторЗадачи, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "УниверсальныйПомощник";
			
		КонецЕсли;
		
		Если ГруппаПараметров <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыЗадач[ГруппаПараметров].Добавить(), Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Обработки.РасчетСтраховыхВзносовИП.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.СтраховыеВзносыИП);
	Обработки.ПомощникРасчетаНалогаУСН.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.УСН);
	Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.НДФЛ_ИП);
	Обработки.ПомощникРасчетаЕНВД.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.ЕНВД);
	Обработки.ПомощникОплатыПатента.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.Патент);
	Обработки.ПомощникУплатыНалога.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.УниверсальныйПомощник);
	Обработки.ПомощникУчетаЗарплаты.ЗаполнитьСтатусыЗадачУплатыВБюджет(ПараметрыЗадач.УчетЗарплаты);
	Обработки.ПомощникРасчетаНДС.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.НДС);
	ЗаполнитьСтатусыЗадачАУСН(ПараметрыЗадач.АУСН);
	ЗаполнитьСтатусыЗадачДобровольныеВзносыИП(ПараметрыЗадач.ДобровольныеВзносыИП);
	
	// Для определения статусов в алгоритмах универсального помощника используется имя ПравилоУплаты.
	// В остальных помощниках используется имя Правило.
	// При объединении всех задач необходимо переименовать колонку таблицы параметров помощника.
	ПараметрыЗадач.УниверсальныйПомощник.Колонки.ПравилоУплаты.Имя = "Правило";
	
	ЗадачиСоСтатусами = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Для Каждого ГруппаПараметровЗадач Из ПараметрыЗадач Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ГруппаПараметровЗадач.Значение, ЗадачиСоСтатусами);
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по уплате налогов и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач()
//
Функция СтатусыЗадачПоПодготовкеРегПлатежей(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	ВЫБОР
	|		КОГДА Задачи.СтатусУстановленВручную
	|			ТОГДА Задачи.РучнойСтатус
	|		ИНАЧЕ ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, """")
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|			ПО РегулярныеПлатежи.ПлатежноеПоручение = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|				И РегулярныеПлатежи.Организация = СостоянияБанковскихДокументов.Организация
	|		ПО Задачи.Организация = РегулярныеПлатежи.Организация
	|			И Задачи.Правило = РегулярныеПлатежи.Правило
	|			И Задачи.ПериодСобытия = РегулярныеПлатежи.ПериодСобытия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу с параметрами задач по выплате зарплаты и статусами.
//
// Параметры:
//  КлючиЗадач - ТаблицаЗначений
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//   * Статус
//
Функция СтатусыЗадачПоВыплатеЗарплаты(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	ПравилоАванс = ПравилоВыплатыЗарплатыАванс();
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	// Добавим колонки для корректного расчета статусов задач в помощнике. Будут удалены в конце процедуры.
	ЗадачиСоСтатусами.Колонки.Добавить("ПериодРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗадачиСоСтатусами.Колонки.Добавить("Аванс",             Новый ОписаниеТипов("Булево"));
	
	Для Каждого Задача Из ЗадачиСоСтатусами Цикл
		
		Задача.ПериодРегистрации = Задача.ПериодСобытия;
		Задача.Аванс             = (Задача.Правило = ПравилоАванс);
		
	КонецЦикла;
	
	Обработки.ПомощникУчетаЗарплаты.ЗаполнитьСтатусыЗадачВыплатыЗарплаты(ЗадачиСоСтатусами);
	
	// Удалим временные колонки
	ЗадачиСоСтатусами.Колонки.Удалить("ПериодРегистрации");
	ЗадачиСоСтатусами.Колонки.Удалить("Аванс");
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по ФинОтчетности и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаФинОтчетности
//
// Возвращаемое значение: ТаблицаЗначений, копия переданной таблицы, дополненная колонкой Статус.
//  Колонки:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаФинОтчетности
//   * Статус                      - Строка
//
Функция СтатусыЗадачПоФинОтчетности(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность;
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	Для Каждого ВыполнениеЗадачи Из ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиСоСтатусами) Цикл
		
		Статус = "";
		Если ВыполнениеЗадачи.СтатусУстановленВручную Тогда
			Статус = ВыполнениеЗадачи.РучнойСтатус;
		Иначе
			Правило = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыполнениеЗадачи.Правило,
				"Организация, Получатель, Периодичность, ИдентификаторКомплекта, КраткоеПредставлениеКомплекта");
			
			КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ВыполнениеЗадачи.ПериодСобытия-1);
			
			Отчет = Документы.ФинОтчетВБанк.НайтиПоРеквизитам(Правило.Организация,
				Правило.Получатель, Правило.ИдентификаторКомплекта, КонецПериода);
			
			Если ЗначениеЗаполнено(Отчет)
				И ФинОтчетностьВБанки.СтатусОтчета(Отчет) = Перечисления.СтатусыОтправкиФинОтчетностиВБанки.Сдано Тогда
				Статус = НСтр("ru = 'Сдано'");
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для каждого Задача Из ЗадачиСоСтатусами.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по подготовке уведомлений и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение: ТаблицаЗначений, копия переданной таблицы, дополненная колонкой Статус.
//  Колонки:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Статус                      - Строка
//
Функция СтатусыЗадачПоУведомлениям(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	КлючиЗадачи.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Уведомление;
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	СостояниеОтчетностиСдано = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
	СтатусБРОСдано = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	
	Для Каждого ВыполнениеЗадачи Из ВыполнениеЗадачПоПодготовкеУведомлений(ЗадачиСоСтатусами) Цикл
		
		Статус = "";
		Если ВыполнениеЗадачи.СтатусУстановленВручную Тогда
			Статус = ВыполнениеЗадачи.РучнойСтатус;
		ИначеЕсли ВыполнениеЗадачи.Документы.Количество() > 0 Тогда
			Если ВыполнениеЗадачи.Периодичность = Перечисления.Периодичность.День Тогда
				// Все задачи дня должны быть выполнены
				Для Каждого Документ ИЗ ВыполнениеЗадачи.Документы Цикл
					Если Документ.СостояниеСдачиОтчетности = СостояниеОтчетностиСдано
						Или Документ.Статус = СтатусБРОСдано Тогда
						Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
					Иначе
						Статус = "";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Созданные отчеты отсортированы по убыванию даты подписи, определяем статус по самому последнему
				Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(ВыполнениеЗадачи.Документы[0].СостояниеСдачиОтчетности)
					Или РегламентированнаяОтчетностьВызовСервера.ОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ВыполнениеЗадачи.Документы[0].Ссылка) Тогда
					Статус = ВыполнениеЗадачи.Документы[0].Статус;
				Иначе
					Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиУведомления(ВыполнениеЗадачи.Документы[0].Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для Каждого Задача Из ЗадачиСоСтатусами.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с документами, которыми выполняются задачи бухгалтера по подготовке уведомлений.
//  Параметры:
//   ТаблицаЗадач - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * Периодичность               - ПеречислениеСсылка.Периодичность
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   
//  ТолькоАктуальныеФормыОтчетов   - Булево - Если Истина, отбирать отчеты только по форме, действующей в отчетном периоде.
//
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * Индекс                      - Число
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Документы - ТаблицаЗначений:
//     * Документ                 - ДокументСсылка.РегламентированныйОтчет
//     * Дата                     - Дата документа
//     * Статус                   - Строка
//     * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
Функция ВыполнениеЗадачПоПодготовкеУведомлений(ТаблицаЗадач, ТолькоАктуальныеФормыОтчетов = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("СоответствияПравилИФормОтчетов", СоответствияПравилИФормОтчетов());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияПравилИФормОтчетов.ФормаОтчета КАК ФормаОтчета,
	|	СоответствияПравилИФормОтчетов.ИдентификаторПравила КАК ИдентификаторПравила,
	|	СоответствияПравилИФормОтчетов.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ СоответствияПравилИФормОтчетов
	|ИЗ
	|	&СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	ВЫРАЗИТЬ(Задачи.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК Правило,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.Статус КАК РучнойСтатус
	|ПОМЕСТИТЬ ЗадачиБезИдентификаторов
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.Правило.Код КАК ИдентификаторПравила,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус,
	|	ЗадачиБухгалтера.Код КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ПараметрыЗадач
	|ИЗ
	|	ЗадачиБезИдентификаторов КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Задачи.Правило.Владелец = ЗадачиБухгалтера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПоискПоПолномуИдентификатору.ФормаОтчета, ПоискПоИдентификаторуЗадачи.ФормаОтчета) КАК ИсточникОтчета,
	|	ПараметрыЗадач.Организация КАК Организация,
	|	ПараметрыЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыЗадач.Правило КАК Правило,
	|	ПараметрыЗадач.Периодичность КАК Периодичность,
	|	ПараметрыЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПараметрыЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ПараметрыЗадач.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ПараметрыЗадач.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ПараметрыЗадач.РучнойСтатус КАК РучнойСтатус
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	ПараметрыЗадач КАК ПараметрыЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоПолномуИдентификатору
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоПолномуИдентификатору.ИдентификаторЗадачи
	|			И ПараметрыЗадач.ИдентификаторПравила = ПоискПоПолномуИдентификатору.ИдентификаторПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоИдентификаторуЗадачи
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоИдентификаторуЗадачи.ИдентификаторЗадачи
	|			И (ПоискПоИдентификаторуЗадачи.ИдентификаторПравила = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задачи.ИсточникОтчета КАК ИсточникОтчета,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИСТИНА КАК ОбрабатываетсяБРО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление) КАК Действие,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус
	|ИЗ
	|	Задачи КАК Задачи
	|ГДЕ
	|	НЕ Задачи.ИсточникОтчета ЕСТЬ NULL";
	
	ВыполнениеЗадач = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Задача Из ВыполнениеЗадач Цикл
		Задача.ДатаОкончания = РелевантныйПериодСобытияДляОтчета(Задача);
	КонецЦикла;
	
	ЗаполнитьСсылкиНаРеглОтчеты(ВыполнениеЗадач);
	
	Возврат ВыполнениеЗадач;
	
КонецФункции

// Процедура получает ссылки на сохраненные регламентированные отчеты заданного вида.
// В переданную таблицу ПараметрыРеглОтчетов добавляется колонка Документы с колонками:
//  * Ссылка                   - ДокументСсылка.РегламетированныйОтчет - Ссылка на отчет.
//  * Дата                     - Дата - Дата подписи регламентированного отчета.
//  * Статус                   - Строка - Описание статуса сдачи отчета.
//  * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - Статус отправки через 1С-Отчетность.
//  * НаименованиеОтчета       - Строка - Пользовательское представление отчета.
//  * ФинансовыйПериод         - Строка - Пользовательское представление периода отчета.
//  * ВариантОтчета            - Строка - Описание варианта отчета (П - первичный, К/N - корректировочный).
//  * ПредставлениеКонтролирующегоОргана - Строка - Название контролирующего органа, в который предоставляется отчет.
//  * Комментарий                        - Строка - Пользовательский комментарий к отчету.
//
// Ссылки на регл. отчеты отсортированы в хронологическом порядке по убыванию.
//
//  Параметры:
//   * ПараметрыРеглОтчетов - ТаблицаЗначений - Определяет параметры отбора отчетов:
//   	** ИсточникОтчета      - Строка - Наименование регламентированного отчета (совпадает с именем объекта метаданных).
//   	** Организация         - СправочникСсылка.Организации - Организация отчета.
//   	** ДатаОкончания       - Дата (без времени) - Дата окончания отчетного периода (правая граница отчетного периода).
//   	** РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Налоговый орган.
//   	** Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Может не заполняться, но должна присутствовать в таблице.
//
Процедура ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыРеглОтчетов) Экспорт
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ПараметрыРеглОтчетов.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	ПараметрыРеглОтчетов.Колонки.Добавить("ВыбраннаяФорма", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		ПараметрыРеглОтчета.Индекс = ПараметрыРеглОтчетов.Индекс(ПараметрыРеглОтчета);
	КонецЦикла;
	
	ВидыКодыНалогов = РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтераДляУведомлений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыРеглОтчетов", ПараметрыРеглОтчетов);
	Запрос.УстановитьПараметр("ВидыКодыНалогов", ВидыКодыНалогов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыРеглОтчетов.ПериодСобытия КАК ПериодСобытия,
	|	ВЫРАЗИТЬ(ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК Справочник.РегистрацииВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ПараметрыРеглОтчетов.Правило КАК Правило
	|ПОМЕСТИТЬ ПараметрыРеглОтчетов
	|ИЗ
	|	&ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ИсточникОтчета,
	|	ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКодыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыКодыНалогов.КодЗадачи КАК КодЗадачи
	|ПОМЕСТИТЬ ВТ_ВидыКодыНалогов
	|ИЗ
	|	&ВидыКодыНалогов КАК ВидыКодыНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	УведомлениеОСпецрежимахНО.Ссылка КАК Ссылка,
	|	0 КАК Вид,
	|	УведомлениеОСпецрежимахНО.Дата КАК ДатаОтчета,
	|	УведомлениеОСпецрежимахНО.ДатаПодписи КАК Дата,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	ПараметрыРеглОтчетов.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	УведомлениеОСпецрежимахНО.ИмяФормы КАК ВыбраннаяФорма,
	|	ПараметрыРеглОтчетов.Правило КАК Правило,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СтатусОтправки, """""""") КАК Статус,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)) КАК СостояниеСдачиОтчетности,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Наименование, """") КАК НаименованиеОтчета,
	|	"""" КАК ФинансовыйПериод,
	|	0 КАК ВариантОтчета,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.ПредставлениеКонтролирующегоОргана, """") КАК ПредставлениеКонтролирующегоОргана,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Комментарий, """") КАК Комментарий
	|ПОМЕСТИТЬ ВТ_Ссылки
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ПО УведомлениеОСпецрежимахНО.Организация = ПараметрыРеглОтчетов.Организация
	|			И УведомлениеОСпецрежимахНО.ИмяОтчета = ПараметрыРеглОтчетов.ИсточникОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналУведомленийСтатусы
	|		ПО УведомлениеОСпецрежимахНО.Организация = ЖурналУведомленийСтатусы.Организация
	|			И УведомлениеОСпецрежимахНО.Ссылка = ЖурналУведомленийСтатусы.Ссылка
	|			И (ЖурналУведомленийСтатусы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Уведомления))
	|ГДЕ
	|	НЕ УведомлениеОСпецрежимахНО.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Налог,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПараметрыРеглОтчетов.Правило КАК Правило,
	|	ПараметрыРеглОтчетов.ПериодСобытия КАК ПериодСобытия
	|ПОМЕСТИТЬ ВТ_ЗадачиБухгалтераВидыНалогов
	|ИЗ
	|	ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО (ПравилаПредставленияОтчетовУплатыНалогов.Ссылка = ПараметрыРеглОтчетов.Правило)
	|			И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК СправочникЗадачиБухгалтера
	|		ПО (СправочникЗадачиБухгалтера.Ссылка = ПравилаПредставленияОтчетовУплатыНалогов.Владелец)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыКодыНалогов КАК ВТ_ВидыКодыНалогов
	|		ПО (ВТ_ВидыКодыНалогов.КодЗадачи = СправочникЗадачиБухгалтера.Код)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО (ВидыНалоговИПлатежейВБюджет.ВидНалога = ВТ_ВидыКодыНалогов.ВидНалога)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налог,
	|	ПериодСобытия,
	|	РегистрацияВНалоговомОргане,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Уведомления.Ссылка КАК Уведомление,
	|	Уведомления.Уведомление КАК УведомлениеБРО,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Организация КАК Организация,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Правило КАК Правило,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия КАК ПериодСобытия
	|ПОМЕСТИТЬ ЗадачиБухгалтераУведомления
	|ИЗ
	|	ВТ_ЗадачиБухгалтераВидыНалогов КАК ВТ_ЗадачиБухгалтераВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомленияНалоги
	|		ПО (УведомленияНалоги.Налог = ВТ_ЗадачиБухгалтераВидыНалогов.Налог)
	|			И (УведомленияНалоги.РегистрацияВНалоговомОргане = ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане)
	|			И (УведомленияНалоги.КонецПериода = ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК Уведомления
	|		ПО (Уведомления.Ссылка = УведомленияНалоги.Ссылка)
	|			И (Уведомления.Организация = ВТ_ЗадачиБухгалтераВидыНалогов.Организация)
	|			И (НЕ Уведомления.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Уведомления.Ссылка,
	|	Уведомления.Уведомление,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Организация,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Правило,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия
	|ИЗ
	|	ВТ_ЗадачиБухгалтераВидыНалогов КАК ВТ_ЗадачиБухгалтераВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомленияНалоги
	|		ПО (УведомленияНалоги.Налог = ВТ_ЗадачиБухгалтераВидыНалогов.Налог)
	|			И (ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|			И (УведомленияНалоги.КонецПериода = ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК Уведомления
	|		ПО (Уведомления.Ссылка = УведомленияНалоги.Ссылка)
	|			И (Уведомления.Организация = ВТ_ЗадачиБухгалтераВидыНалогов.Организация)
	|			И (НЕ Уведомления.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Уведомления.Уведомление,
	|	Уведомления.Уведомление.Уведомление,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Организация,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.Правило,
	|	ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия
	|ИЗ
	|	ВТ_ЗадачиБухгалтераВидыНалогов КАК ВТ_ЗадачиБухгалтераВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтераУведомления КАК Уведомления
	|		ПО (Уведомления.Организация = ВТ_ЗадачиБухгалтераВидыНалогов.Организация)
	|			И (Уведомления.РегистрацияВНалоговомОргане = ВТ_ЗадачиБухгалтераВидыНалогов.РегистрацияВНалоговомОргане)
	|			И (Уведомления.Правило = ВТ_ЗадачиБухгалтераВидыНалогов.Правило)
	|			И (Уведомления.ПериодСобытия = ВТ_ЗадачиБухгалтераВидыНалогов.ПериодСобытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Правило КАК Правило,
	|	ЗадачиБухгалтераУведомления.Уведомление КАК Уведомление,
	|	ЗадачиБухгалтераУведомления.ПериодСобытия КАК ПериодСобытия,
	|	ВТ_Ссылки.Индекс КАК Индекс,
	|	ВТ_Ссылки.Ссылка КАК Ссылка,
	|	ВТ_Ссылки.Вид КАК Вид,
	|	ВТ_Ссылки.ДатаОтчета КАК ДатаОтчета,
	|	ВТ_Ссылки.Дата КАК Дата,
	|	ВТ_Ссылки.ИсточникОтчета КАК ИсточникОтчета,
	|	ВТ_Ссылки.Организация КАК Организация,
	|	ВТ_Ссылки.ДатаНачала КАК ДатаНачала,
	|	ВТ_Ссылки.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_Ссылки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Ссылки.ВыбраннаяФорма КАК ВыбраннаяФорма,
	|	ВТ_Ссылки.Статус КАК Статус,
	|	ВТ_Ссылки.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ВТ_Ссылки.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ВТ_Ссылки.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ВТ_Ссылки.ВариантОтчета КАК ВариантОтчета,
	|	ВТ_Ссылки.ПредставлениеКонтролирующегоОргана КАК ПредставлениеКонтролирующегоОргана,
	|	ВТ_Ссылки.Комментарий КАК Комментарий
	|ИЗ
	|	ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
	|		ПО ЗадачиБухгалтераУведомления.Правило = ВТ_Ссылки.Правило
	|			И ЗадачиБухгалтераУведомления.Организация = ВТ_Ссылки.Организация
	|			И ЗадачиБухгалтераУведомления.УведомлениеБРО = ВТ_Ссылки.Ссылка
	|			И ЗадачиБухгалтераУведомления.ПериодСобытия = ВТ_Ссылки.ПериодСобытия
	|			И ЗадачиБухгалтераУведомления.РегистрацияВНалоговомОргане = ВТ_Ссылки.РегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераУведомления.Правило,
	|	ЗадачиБухгалтераУведомления.Уведомление,
	|	ЗадачиБухгалтераУведомления.ПериодСобытия,
	|	ВТ_Ссылки.Индекс,
	|	ВТ_Ссылки.Ссылка,
	|	ВТ_Ссылки.Вид,
	|	ВТ_Ссылки.ДатаОтчета,
	|	ВТ_Ссылки.Дата,
	|	ВТ_Ссылки.ИсточникОтчета,
	|	ВТ_Ссылки.Организация,
	|	ВТ_Ссылки.ДатаНачала,
	|	ВТ_Ссылки.ДатаОкончания,
	|	ВТ_Ссылки.РегистрацияВНалоговомОргане,
	|	ВТ_Ссылки.ВыбраннаяФорма,
	|	ВТ_Ссылки.Статус,
	|	ВТ_Ссылки.СостояниеСдачиОтчетности,
	|	ВТ_Ссылки.НаименованиеОтчета,
	|	ВТ_Ссылки.ФинансовыйПериод,
	|	ВТ_Ссылки.ВариантОтчета,
	|	ВТ_Ссылки.ПредставлениеКонтролирующегоОргана,
	|	ВТ_Ссылки.Комментарий
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераУведомления КАК ЗадачиБухгалтераУведомления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗадачиБухгалтераУведомления.Организация = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Организация
	|			И ЗадачиБухгалтераУведомления.Уведомление = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
	|		ПО ЗадачиБухгалтераУведомления.Правило = ВТ_Ссылки.Правило
	|			И ЗадачиБухгалтераУведомления.Организация = ВТ_Ссылки.Организация
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Уведомление = ВТ_Ссылки.Ссылка)
	|			И ЗадачиБухгалтераУведомления.ПериодСобытия = ВТ_Ссылки.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтераУведомления.Организация В
	|			(ВЫБРАТЬ
	|				ВТ_Ссылки.Организация
	|			ИЗ
	|				ВТ_Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс,
	|	ДатаОтчета УБЫВ,
	|	Вид УБЫВ";
	
	ПараметрыРеглОтчетов.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	МетаданныеЖурналОтчетовСтатусы = Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы;
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка", МетаданныеЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	ТаблицаДокументы.Колонки.Добавить("Дата",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	ТаблицаДокументы.Колонки.Добавить("ДатаНачала",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("ДатаОкончания",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("НаименованиеОтчета", МетаданныеЖурналОтчетовСтатусы.Реквизиты.НаименованиеОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("ФинансовыйПериод",   МетаданныеЖурналОтчетовСтатусы.Реквизиты.ФинансовыйПериод.Тип);
	ТаблицаДокументы.Колонки.Добавить("ВариантОтчета",      МетаданныеЖурналОтчетовСтатусы.Реквизиты.ВариантОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("РегистрацияВНалоговомОргане",        Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаДокументы.Колонки.Добавить("ПредставлениеКонтролирующегоОргана", МетаданныеЖурналОтчетовСтатусы.Реквизиты.ПредставлениеКонтролирующегоОргана.Тип);
	ТаблицаДокументы.Колонки.Добавить("Комментарий",                        МетаданныеЖурналОтчетовСтатусы.Реквизиты.Комментарий.Тип);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Поиск = Новый Структура("Индекс");
	
	Для каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		
		ПолноеИмяПравила = СтрШаблон("%1.%2", ПараметрыРеглОтчета.ИдентификаторЗадачи, ПараметрыРеглОтчета.ИдентификаторПравила);
		ЭтоПравилоТринадцатогоНДФЛ = ЭтоПравилоТринадцатогоНДФЛ(ПолноеИмяПравила);
		
		ПараметрыРеглОтчета.Документы = ТаблицаДокументы.СкопироватьКолонки();
		Поиск.Индекс = ПараметрыРеглОтчета.Индекс;
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(Поиск) Цикл
			УведомлениеСодержитНДФЛЗаТринадцатыйПериод = УведомлениеСодержитНДФЛЗаТринадцатыйПериод(Выборка.Уведомление);
			Если (ЭтоПравилоТринадцатогоНДФЛ И Не УведомлениеСодержитНДФЛЗаТринадцатыйПериод)
				Или (Не ЭтоПравилоТринадцатогоНДФЛ И УведомлениеСодержитНДФЛЗаТринадцатыйПериод) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыРеглОтчета.Документы.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание правил с указанием исполнителей, задачи по которым не обрабатываются интерфейсом БРО.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилВыполняющихсяНеРеглОтчетами() Экспорт
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПравилСведенияОЗастрахованныхЛицах(), Идентификаторы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПравилСправкиНДФЛ(), Идентификаторы);
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются документами
// СведенияОЗастрахованныхЛицахСЗВ_М, СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ и РеестрДСВ_3.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилСведенияОЗастрахованныхЛицах()
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОЗастрахованныхЛицахСЗВ_М";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2016_СведенияПФРЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОЗастрахованныхЛицахСЗВ_М";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОЗастрахованныхЛицахСЗВ_М";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияПФРЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОЗастрахованныхЛицахСЗВ_М";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияСтажСотрудниковОрганизации";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияСтажСотрудниковПредприниматели";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.РеестрДСВ_3";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2013_Отчет_Допвзносы_Накопительная_ПФР";
	НоваяСтрока.ИмяИсточника = "РеестрДСВ_3";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2020_СведенияЭТКЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2020_СведенияЭТКЕжедневные";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2023_СведенияЭТКЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2023_СведенияЭТКЕжедневные";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2023_СведенияСтажСотрудниковОрганизации";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2023_СведенияСтажСотрудниковПредприниматели";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются документом СправкиНДФЛДляПередачиВНалоговыйОрган.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилСправкиНДФЛ()
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2013_2НДФЛ";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность)";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2013_2НДФЛ_Неудержанный";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2016_2НДФЛ_Неудержанный";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает таблицу с документами, которыми выполняются задачи бухгалтера по подготовке отчетов.
//  Параметры:
//   ТаблицаЗадач - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * Периодичность               - ПеречислениеСсылка.Периодичность
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   
//  ТолькоАктуальныеФормыОтчетов   - Булево - Если Истина, отбирать отчеты только по форме, действующей в отчетном периоде.
//
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * Индекс                      - Число
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Документы - ТаблицаЗначений:
//     * Документ                 - ДокументСсылка.РегламентированныйОтчет
//     * Дата                     - Дата документа
//     * Статус                   - Строка
//     * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
Функция ВыполнениеЗадачПоПодготовкеОтчетов(ТаблицаЗадач, ТолькоАктуальныеФормыОтчетов = Ложь) Экспорт
	
	Если ТаблицаЗадач.Колонки.Найти("СтатусУстановленВручную") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("РучнойСтатус") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("ВАрхиве") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ВАрхиве", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("СоответствияПравилИФормОтчетов", СоответствияПравилИФормОтчетов());
	Запрос.УстановитьПараметр("ИдентификаторыПравилВыполняющихсяНеРеглОтчетами",
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияПравилИФормОтчетов.ФормаОтчета КАК ФормаОтчета,
	|	СоответствияПравилИФормОтчетов.ИдентификаторПравила КАК ИдентификаторПравила,
	|	СоответствияПравилИФормОтчетов.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ СоответствияПравилИФормОтчетов
	|ИЗ
	|	&СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПравил.ФормаОтчета КАК ФормаОтчета,
	|	ИдентификаторыПравил.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыПравил.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ИдентификаторыПравилНеОбрабатываемыхБРО
	|ИЗ
	|	&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами КАК ИдентификаторыПравил
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	ВЫРАЗИТЬ(Задачи.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК Правило,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус,
	|	Задачи.ВАрхиве КАК ВАрхиве
	|ПОМЕСТИТЬ ЗадачиБезИдентификаторов
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус,
	|	Задачи.ВАрхиве КАК ВАрхиве,
	|	Задачи.Правило.Код КАК ИдентификаторПравила,
	|	ЗадачиБухгалтера.Код КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ПараметрыЗадач
	|ИЗ
	|	ЗадачиБезИдентификаторов КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Задачи.Правило.Владелец = ЗадачиБухгалтера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПоискПоПолномуИдентификатору.ФормаОтчета, ПоискПоИдентификаторуЗадачи.ФормаОтчета) КАК ИсточникОтчета,
	|	ПараметрыЗадач.Организация КАК Организация,
	|	ПараметрыЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыЗадач.Правило КАК Правило,
	|	ПараметрыЗадач.Периодичность КАК Периодичность,
	|	ПараметрыЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПараметрыЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ПараметрыЗадач.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ПараметрыЗадач.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ПараметрыЗадач.РучнойСтатус КАК РучнойСтатус,
	|	ПараметрыЗадач.ВАрхиве КАК ВАрхиве
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	ПараметрыЗадач КАК ПараметрыЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоПолномуИдентификатору
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоПолномуИдентификатору.ИдентификаторЗадачи
	|			И ПараметрыЗадач.ИдентификаторПравила = ПоискПоПолномуИдентификатору.ИдентификаторПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоИдентификаторуЗадачи
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоИдентификаторуЗадачи.ИдентификаторЗадачи
	|			И (ПоискПоИдентификаторуЗадачи.ИдентификаторПравила = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.ИсточникОтчета КАК ИсточникОтчета,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус,
	|	Задачи.ВАрхиве КАК ВАрхиве,
	|	ИСТИНА КАК ОбрабатываетсяБРО
	|ИЗ
	|	Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила
	|ГДЕ
	|	НЕ Задачи.ИсточникОтчета ЕСТЬ NULL
	|	И ПравилаИсключения.ФормаОтчета ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИсключения.ФормаОтчета КАК ИсточникОтчета,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Задачи.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	Задачи.РучнойСтатус КАК РучнойСтатус,
	|	Задачи.ВАрхиве КАК ВАрхиве,
	|	ЛОЖЬ КАК ОбрабатываетсяБРО
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Задачи, обслуживаемые БРО, обрабатываем отдельно от остальных
	ВыполнениеЗадач = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	
	Для Каждого Задача Из ВыполнениеЗадач Цикл
		Задача.ДатаОкончания = РелевантныйПериодСобытияДляОтчета(Задача);
	КонецЦикла;
	
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ВыполнениеЗадач, ТолькоАктуальныеФормыОтчетов);
	
	// Обработаем задачи, не обслуживаемые БРО
	ЗадачиНеОбрабатываемыеБРО = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	ЗаполнитьВыполнениеЗадачНеОбрабатываемыхБРО(ЗадачиНеОбрабатываемыеБРО);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗадачиНеОбрабатываемыеБРО, ВыполнениеЗадач);
	
	Возврат ВыполнениеЗадач;
	
КонецФункции

// В переданной таблице заполняет колонку "Документы" информацией о документах, выполняющих задачи.
//
// Параметры:
//   ТаблицаЗадач - таблица значений:
//      * Индекс - Число - Индекс строк таблицы значений
//      * ИсточникОтчета - Строка - имя объекта метаданных - исполнителя задачи
//      * Организация - СправочникСсылка.Организации - организация
//      * ДатаОкончания - Дата - Дата события
//      * ОбрабатываетсяБРО - Булево - признак того, что задача выполняется объектами БРО
//      * Документы - Таблица значений, содержащая информацию о документах, выполняющих задачу:
//         * Ссылка - ДокументСсылка, СправочникСсылка - ссылка на объект, связанный с задачей
//         * Дата - Дата - Налоговый период документа
//         * Статус - Строка - строковый статус документа
//         * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - состояние сдачи отчетности через ЭДКО
//
Процедура ЗаполнитьВыполнениеЗадачНеОбрабатываемыхБРО(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Описание таблицы документов, заполняемой для каждой задачи.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	ТаблицаДокументы.Колонки.Добавить("Дата",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	ТаблицаЗадач.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ТаблицаЗадач.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	
	// Служебная колонка, удаляется в конце процедуры.
	// Предназначена для поиска отчетов, выполняющих задачу.
	ТаблицаЗадач.Колонки.Добавить("ИсполнительЗадачи", Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Если Не Задача.ОбрабатываетсяБРО Тогда
			Задача.Документы = ТаблицаДокументы.СкопироватьКолонки();
		КонецЕсли;
		
		Задача.Индекс = ТаблицаЗадач.Индекс(Задача);
		
		Если Не ПустаяСтрока(Задача.ИсточникОтчета)
			И Не Задача.ОбрабатываетсяБРО
			И Метаданные.НайтиПоПолномуИмени(Задача.ИсточникОтчета) <> Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Задача.ИсточникОтчета);
			Задача.ИсполнительЗадачи = МенеджерОбъекта.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ИдентификаторыПравилВыполняющихсяНеРеглОтчетами",
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами());
		
	// Готовим временную таблицу с обрабатываемыми задачами ЗадачиСИсключениями
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.ИсточникОтчета КАК ИсточникОтчета,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|ГДЕ
	|	НЕ Задачи.ОбрабатываетсяБРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПравил.ФормаОтчета КАК ИсточникОтчета,
	|	ИдентификаторыПравил.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ИдентификаторыПравил.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыПравил.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ИдентификаторыПравил.УсловиеПроверки КАК УсловиеПроверки
	|ПОМЕСТИТЬ ИдентификаторыПравилНеОбрабатываемыхБРО
	|ИЗ
	|	&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами КАК ИдентификаторыПравил
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	ПравилаИсключения.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ПравилаИсключения.УсловиеПроверки КАК УсловиеПроверки,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ ЗадачиСИсключениями
	|ИЗ
	|	Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИсточникОтчета = ПравилаИсключения.ИсточникОтчета
	|			И Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила";
	
	Запрос.Выполнить();
	
	// Получаем статусы отправки отчетов
	// Основной запрос - задачи со стандартным отчетным периодом ("Месяц", "Квартал", "Полугодие", "Год"...)
	ТекстРезультирующегоЗапроса =
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	Задачи.УсловиеПроверки КАК УсловиеПроверки,
	|	ЖурналОтчетовСтатусы.Ссылка КАК Ссылка,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ЖурналОтчетовСтатусы.ДатаОкончания КАК Дата,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность,
	|	ЖурналОтчетовСтатусы.ВариантОтчета КАК ВариантОтчета
	|ПОМЕСТИТЬ ЗадачиСоСтатусами
	|ИЗ
	|	ЗадачиСИсключениями КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО (ЖурналОтчетовСтатусы.Организация = Задачи.Организация)
	|			И (ЖурналОтчетовСтатусы.ДатаОкончания = Задачи.ДатаОкончания)
	|			И (Задачи.Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.День))
	|ГДЕ
	|	НЕ ЖурналОтчетовСтатусы.ПометкаУдаления";
	
	// Дополнительные запросы по задачам с периодичностью "День"
	ПодготовитьТаблицыПоЕжедневнымЗадачам(Запрос, ТекстРезультирующегоЗапроса);
	
	Запрос.Текст = ТекстРезультирующегоЗапроса;
	Запрос.Выполнить();
	
	// Итоговый запрос по статусам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиСоСтатусами.Индекс КАК Индекс,
	|	ЗадачиСоСтатусами.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ЗадачиСоСтатусами.УсловиеПроверки КАК УсловиеПроверки,
	|	ЗадачиСоСтатусами.Ссылка КАК Ссылка,
	|	ЗадачиСоСтатусами.Статус КАК Статус,
	|	ЗадачиСоСтатусами.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ЗадачиСоСтатусами.Дата КАК Дата,
	|	ЗадачиСоСтатусами.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиСоСтатусами.Периодичность КАК Периодичность,
	|	ЗадачиСоСтатусами.ВариантОтчета КАК ВариантОтчета
	|ИЗ
	|	ЗадачиСоСтатусами КАК ЗадачиСоСтатусами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	ВариантОтчета УБЫВ
	|ИТОГИ ПО
	|	Индекс";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВсеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(ВсеДокументы);
	НепроведенныеДокументы = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ВсеДокументы);
	
	ВыборкаИндекс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИндекс.Следующий() Цикл
		
		Задача = ТаблицаЗадач[ВыборкаИндекс.Индекс];
		Задача.Документы = ТаблицаДокументы.СкопироватьКолонки();
		
		Выборка = ВыборкаИндекс.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.СсылкаСуществует(Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НепроведенныеДокументы.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Ссылка) <> ТипЗнч(Задача.ИсполнительЗадачи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.СложноеУсловиеПроверки
				И Не СложноеУсловиеПроверкиВыполняется(Выборка.Ссылка, Выборка.УсловиеПроверки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Периодичность = Перечисления.Периодичность.День
				И Не УсловиеЗадачиПериодичностьДеньВыполняется(Выборка.Ссылка, Выборка.ПериодСобытия) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Задача.Документы.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Удалим служебные колонки.
	ТаблицаЗадач.Колонки.Удалить("ИсполнительЗадачи");
	
КонецПроцедуры

Процедура ПодготовитьТаблицыПоЕжедневнымЗадачам(Запрос, ТекстРезультирующегоЗапроса)
	
	// Во временной таблице обязательно должны присутствовать поля шаблона
	ШаблонОбъединения = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЖурналОтчетовСтатусы.Индекс,
		|	ВТ_ЖурналОтчетовСтатусы.СложноеУсловиеПроверки,
		|	ВТ_ЖурналОтчетовСтатусы.УсловиеПроверки,
		|	ВТ_ЖурналОтчетовСтатусы.Ссылка,
		|	ВТ_ЖурналОтчетовСтатусы.Статус,
		|	ВТ_ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности,
		|	ВТ_ЖурналОтчетовСтатусы.ДатаОкончания,
		|	ВТ_ЖурналОтчетовСтатусы.ПериодСобытия,
		|	ВТ_ЖурналОтчетовСтатусы.Периодичность,
		|	ВТ_ЖурналОтчетовСтатусы.ВариантОтчета
		|ИЗ
		|	ВТ_ЖурналОтчетовСтатусы КАК ВТ_ЖурналОтчетовСтатусы";
	
	МассивИменВременныхТаблиц = Новый Массив;
	
	ИмяТаблицы = "ВТ_ЖурналОтчетовСтатусыКадровыеМероприятия";
	УчетЗарплаты.ВТЗадачиПоКадровымМероприятиям(Запрос, ИмяТаблицы);
	МассивИменВременныхТаблиц.Добавить(ИмяТаблицы);
	
	Для Каждого ИмяВРеменнойТаблицы ИЗ МассивИменВременныхТаблиц Цикл
		ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + 
			СтрЗаменить(ШаблонОбъединения, "ВТ_ЖурналОтчетовСтатусы", ИмяВРеменнойТаблицы);
	КонецЦикла;
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + ";";
	
КонецПроцедуры

Функция СложноеУсловиеПроверкиВыполняется(СсылкаНаОбъект, УсловиеПроверки)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Или ПустаяСтрока(УсловиеПроверки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	ОператорЗапроса.Источники.Добавить(СсылкаНаОбъект.Метаданные().ПолноеИмя());
	
	ОператорЗапроса.ВыбираемыеПоля.Добавить("ИСТИНА");
	
	ОператорЗапроса.Отбор.Добавить("Ссылка = &Ссылка");
	ОператорЗапроса.Отбор.Добавить(УсловиеПроверки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция УсловиеЗадачиПериодичностьДеньВыполняется(СсылкаНаОбъект, ПериодСобытия)
	
	ДатаСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Дата");
	Если НачалоДня(ДатаСобытия) = НачалоДня(ПериодСобытия) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РелевантныйПериодСобытияДляОтчета(СвойстваЗадачи)
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
		СвойстваЗадачи.ИдентификаторЗадачи, СвойстваЗадачи.ИдентификаторПравила);
	
	Если ПолноеИмяПравила = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации"
		И ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		// Отчет всегда имеет периодичность год, но для вновь созданных организаций также предоставляется на 1 число месяца,
		// следующего за месяцем регистрации организации.
		Периодичность = Перечисления.Периодичность.Год;
		Возврат ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, СвойстваЗадачи.ПериодСобытия);
	Иначе
		Возврат СвойстваЗадачи.ПериодСобытия;
	КонецЕсли;
	
КонецФункции

Функция ТекущаяЗадачаНалоговогоПлатежа(РеквизитыДокумента)
	
	// Задача для документа уже может присутствовать в служебном регистре ЗадачиБухгалтераНалоговыеПлатежи.
	// Записи добавляются в регистр, когда платежные документы создаются из помощников
	// или регистрируются автоматически в качестве исполнителей налоговых платежей.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация КАК Организация,
	|	ЗадачиБухгалтераНалоговыеПлатежи.Правило КАК Правило,
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Задача = НоваяЗадачаСвязаннаяСПлатежом();
		ЗаполнитьЗначенияСвойств(Задача, Выборка);
		
		Возврат Задача;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НоваяЗадачаНалоговогоПлатежа(РеквизитыДокумента, ПредыдущаяЗадача, ПараметрыРасчетаСтатусов)
	
	// Если платеж еще не зарегистрирован в регистре ЗадачиБухгалтераНалоговыеПлатежи,
	// или для данного налога поддерживается обновление задач при любом изменении платежа -
	// определим свойства новой задачи, которую исполнит документ.
	
	ТребуетсяОбновитьЗадачу = (ПредыдущаяЗадача = Неопределено)
		Или (ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыДокумента.ВидНалога)
			И Не ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыДокумента));
	
	// Если задача выполняется из помощника, то она уже зарегистрирована в регистре ЗадачиБухгалтераНалоговыеПлатежи.
	// В таком случае не нужно искать новую задачу и регистрировать новую связь с документом.
	// Кроме того, если не изменились ключевые реквизиты, влияющие на связь между документом и задачей,
	// в таком случае тоже не нужно искать связанную с документом задачу.
	
	ПропуститьОбновлениеЗадачи = ПредыдущаяЗадача <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыРасчетаСтатусов, "ПропуститьОбновлениеСвязиДокументЗадача", Ложь);
	
	Если Не ТребуетсяОбновитьЗадачу Или ПропуститьОбновлениеЗадачи Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредыдущееПравило       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредыдущаяЗадача, "Правило", Неопределено);
	ПредыдущийПериодСобытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредыдущаяЗадача, "ПериодСобытия", Неопределено);
	
	НовыйПериодСобытия = ПериодСобытияПлатежа(РеквизитыДокумента, ПредыдущееПравило, ПредыдущийПериодСобытия);
	
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		РеквизитыДокумента.Организация, РеквизитыДокумента.ВидНалога, НовыйПериодСобытия);
	
	Если ПорядокУплаты = Неопределено Тогда
		// Для платежа с данными реквизитами исполняемая задача отсутствует.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяЗадача = НоваяЗадачаСвязаннаяСПлатежом();
	
	НоваяЗадача.Организация   = РеквизитыДокумента.Организация;
	НоваяЗадача.Правило       = ПорядокУплаты.Правило;
	НоваяЗадача.ПериодСобытия = ПорядокУплаты.ПериодСобытия;
	НоваяЗадача.Действие      = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
	
	Возврат НоваяЗадача;
	
КонецФункции

Функция ПериодСобытияПлатежа(РеквизитыДокумента, ПравилоДоИзменения, ПериодСобытияДоИзменения)
	
	Перем ДатаСобытия;
	
	Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(РеквизитыДокумента.ПоказательПериода) Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыДокумента.ПоказательПериода);
		
		ДатаСобытия   = ОписаниеПериода.Дата;
		Периодичность = ПериодичностьПоПоказателюПериода(ОписаниеПериода.Периодичность);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.НалоговыйПериод) Тогда
		
		ДатаСобытия   = РеквизитыДокумента.НалоговыйПериод;
		Периодичность = ПериодичностьУплатыНалогаВзноса(
			РеквизитыДокумента.ВидНалога,
			РеквизитыДокумента.Организация,
			РеквизитыДокумента.НалоговыйПериод);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносыВФСС(РеквизитыДокумента.ВидНалога)
		И УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата) Тогда
		
		// Добровольные взносы ИП в ФСС уплачиваются в течение страхового года.
		ДатаСобытия = РеквизитыДокумента.Дата;
		Периодичность = Перечисления.Периодичность.Год;
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоДобровольныйФиксированныйВзносВПФР(
		РеквизитыДокумента.ВидНалога) Тогда
		
		// Добровольные взносы ИП в ФСС уплачиваются в течение страхового года.
		ДатаСобытия = РеквизитыДокумента.Дата;
		Периодичность = Перечисления.Периодичность.Год;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(РеквизитыДокумента.ВидНалога) Тогда
		
		Если Не ЗначениеЗаполнено(ПериодСобытияДоИзменения) Тогда
			
			// Платеж создан не из помощника.
			// При ежеквартальной уплате в пределах года платеж регистрируется тем кварталом, в котором он создан.
			// Если же платеж оформлен в следующем году - он регистрируется в последнем квартале оплачиваемого страхового года.
			ДатаСобытия = Мин(КонецГода(ДатаСобытия), КонецКвартала(РеквизитыДокумента.Дата));
			
		ИначеЕсли (Год(ДатаСобытия) = Год(ПериодСобытияДоИзменения))
			И (ЗначениеЗаполнено(ПравилоДоИзменения)
				И ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(ПравилоДоИзменения)) Тогда
			
			// Платежи по фиксированным взносам могут уплачиваться ежеквартально - сведения о квартале хранятся в ЗадачиБухгалтераНалоговыеПлатежи.
			// Но показатель периода или налоговый период в документах содержат информацию только о страховом годе.
			// Поэтому в случае, если налог не менялся и страховой год в реквизитах платежа остался прежним,
			// период события для фиксированных взносов не обновляем.
			Возврат ПериодСобытияДоИзменения;
			
		КонецЕсли;
		
		Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
			РеквизитыДокумента.Организация, ДатаСобытия);
		
	КонецЕсли;
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(Периодичность, ДатаСобытия);
	
КонецФункции

Процедура ДополнитьЗадачиОплатыПатента(ЗадачаПлатежа, ТаблицаЗадач)
	
	Если ЗадачаПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// При изменении платежа по патенту в периоде действия вычета по онлайн-кассам
	// могут измениться статусы всех задач, связанных с данным патентом.
	
	Если ТипЗнч(ЗадачаПлатежа.Правило) = Тип("СправочникСсылка.Патенты")
		И УчетПСН.ПрименяетсяВычетПоОнлайнКассам(ЗадачаПлатежа.Организация, ЗадачаПлатежа.ПериодСобытия) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ЗадачиУплатыПатента(ЗадачаПлатежа.Организация, ЗадачаПлатежа.Правило),
			ТаблицаЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьЗадачиУплатыФиксированныхВзносов(ТаблицаЗадач)
	
	ПериодыУплатыВзносов = Новый ТаблицаЗначений;
	ПериодыУплатыВзносов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПериодыУплатыВзносов.Колонки.Добавить("СтраховойГод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ИдентификаторПравилаВзносыСДоходов = ИдентификаторПравилаСтраховыеВзносыИПСДоходов();
	
	СтраховыеПериоды = Новый Массив;
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Если ТипЗнч(Задача.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")
			И ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Задача.Правило)
			И Не Задача.Правило.Код = ИдентификаторПравилаВзносыСДоходов Тогда
			
			НоваяСтрока = ПериодыУплатыВзносов.Добавить();
			НоваяСтрока.Организация  = Задача.Организация;
			НоваяСтрока.СтраховойГод = КонецГода(Задача.ПериодСобытия); // Взносы с доходов уплачиваются всегда за полный год.
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПериодыУплатыВзносов.Свернуть(ИменаКолонокСтрокой(ПериодыУплатыВзносов.Колонки));
	
	ОтборПравила = Новый Структура;
	ОтборПравила.Вставить("Задача", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	ОтборПравила.Вставить("Уплата", ИдентификаторПравилаВзносыСДоходов);
	
	Для Каждого ПериодУплаты Из ПериодыУплатыВзносов Цикл
		
		Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			ПериодУплаты.Организация,
			ОтборПравила,
			ПериодУплаты.СтраховойГод,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Уплата", Неопределено);
		
		Если ПорядокУплаты <> Неопределено Тогда
			
			НоваяЗадача = ТаблицаЗадач.Добавить();
			
			НоваяЗадача.Организация   = ПериодУплаты.Организация;
			НоваяЗадача.Правило       = ПорядокУплаты.Правило;
			НоваяЗадача.ПериодСобытия = ПорядокУплаты.ПериодСобытия;
			НоваяЗадача.Действие      = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ТаблицаЗадач, РеквизитыДокумента)
	
	// Для задач уплаты местных налогов РегистрацияВНалоговомОргане должна быть заполнена.
	// Для других задач РегистрацияВНалоговомОргане должна быть пустой.
	// С такими значениями задачи записываются в регистр ЗадачиБухгалтера.
	// Соответственно, при поиске задач это нужно учесть.
	
	КодыЗадачМестныхНалогов = РегистрыСведений.ПорядокУплатыНалоговНаМестах.КодыНалоговПорядокКоторыхУстанавливаетсяНаМестах();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		ИдентификаторыПравила
			= Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Задача.Правило);
		
		Если ИдентификаторыПравила <> Неопределено
			И КодыЗадачМестныхНалогов.Найти(ИдентификаторыПравила.ИдентификаторЗадачи) <> Неопределено Тогда
			
			Задача.РегистрацияВНалоговомОргане =
				Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
					РеквизитыДокумента.Организация, РеквизитыДокумента.Контрагент, РеквизитыДокумента.КПППлательщика);
			
		Иначе
			
			Задача.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоУплатаНалога(ВидОперацииДокумента)
	
	Возврат ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.УплатаНалога;
	
КонецФункции

Функция ЭтоВыплатаЗарплаты(ВидОперацииДокумента)
	
	Возврат ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	
КонецФункции

Функция ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(ВидНалога)
	
	// Сейчас для большинства налогов действуют ограничения:
	//  - регистрируются в исполнении задач только платежи, содержащие бюджетные реквизиты (показатель периода и т.п.);
	//  - при изменении реквизитов платежа исполняемая задача и ее статус не обновляются.
	
	// В данной функции проверяются налоги-исключения, для которых ограничения сняты.
	
	ВидыНалоговСАвтообновлениемЗадач = ВидыНалоговСПоддержкойАвтообновленияСвязанныхЗадач();
	
	Возврат ВидыНалоговСАвтообновлениемЗадач.Найти(ВидНалога) <> Неопределено;
	
КонецФункции

Функция ВидыНалоговСПоддержкойАвтообновленияСвязанныхЗадач()
	
	// Для указанных налогов поддерживается обновление исполняемой задачи и ее статуса
	// при вводе и изменении любого платежа, кроме ручной операции.
	
	ВидыНалогов = Новый Массив;
	
	// УСН
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыНалогов,
		ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН());
	
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.АУСН"));
	
	// Фиксированные страховые взносы ИП
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыНалогов,
		ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговФиксированныеВзносы());
	
	// НДФЛ ИП
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП"));
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины"));
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС"));
	
	Возврат ВидыНалогов;
	
КонецФункции

Функция НоваяЗадачаСвязаннаяСПлатежом()
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	СтрокаЗадачи = ТаблицаЗадач.Добавить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаЗадачи);
	
КонецФункции

Функция НоваяТаблицаЗадачСвязанныхСПлатежами()
	
	ТаблицаЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Возвращает таблицу задач по оплате уставного капитала
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, задолженность перед которой необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * измерения регистра сведений ЗадачиБухгалтера - см. РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач
//   * Статус - см. РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса
//
Функция ЗадачиПоОплатеУставногоКапитала(Организация) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаОплатаУставногоКапитала
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.СтатусУстановленВручную КАК СтатусУстановленВручную,
	|	ЗадачиБухгалтера.Статус КАК РучнойСтатус
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В
	|			(ВЫБРАТЬ
	|				ПравилаОплатаУставногоКапитала.Ссылка
	|			ИЗ
	|				ПравилаОплатаУставногоКапитала КАК ПравилаОплатаУставногоКапитала)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", "ОплатаУставногоКапитала");
	
	ТаблицаЗадач = НовыеПараметрыЗадачБухгалтера();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяЗадача = ТаблицаЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Записывает новый статус по задачам оплаты уставного капитала
//
// Параметры:
//  ТаблицаЗадач - см. ВыполнениеЗадачБухгалтера.ЗадачиПоОплатеУставногоКапитала
//  НовыйСтатус - Строка - статус, который будет записан по задачам
//
Процедура ОбновитьСтатусОплатыУставногоКапитала(ТаблицаЗадач, НовыйСтатус) Экспорт 
	
	Если НовыйСтатус = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		Если Задача.СтатусУстановленВручную Тогда
			Продолжить;
		КонецЕсли;
		Если Задача.Статус <> НовыйСтатус Тогда 
			Задача.Статус = НовыйСтатус;
			ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьЗадачиУплатыДобровольныхВзносовИП(Организация, НалоговыйПериод, ТаблицаЗадач)
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПравилаВзносыВНИМ = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП_ВНиМ();
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация,
		Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС,
		НалоговыйПериод,
		Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
	
	ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Уплата", Неопределено);
	
	Если ПорядокУплаты <> Неопределено Тогда
		
		НоваяЗадача = ТаблицаЗадач.Добавить();
		
		НоваяЗадача.Организация   = Организация;
		НоваяЗадача.Правило       = ПорядокУплаты.Правило;
		НоваяЗадача.ПериодСобытия = НалоговыйПериод;
		НоваяЗадача.Действие      = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УведомлениеСодержитПромежуточныйНДФЛ(УведомлениеОбИсчисленныхСуммахНалога) Экспорт
	
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УведомлениеОбИсчисленныхСуммахНалога, "Дата");
	Если ДатаДокумента >= УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", УведомлениеОбИсчисленныхСуммахНалога);
	Запрос.УстановитьПараметр("ВидНалога", Перечисления.ВидыНалогов.НДФЛ);
	
	// Федеральный закон от 31.07.2023 № 389-ФЗ:
	// 12.2. В течение 2023 года налоговые агенты могут подавать уведомления об исчисленных суммах по налогу на доходы физических лиц, 
	// подлежащему перечислению в сроки, установленные пунктом 6 статьи 226, пунктом 9 статьи 226.1, пунктом 7 статьи 226.2 Налогового кодекса Российской Федерации, 
	// до истечения 12-го числа текущего месяца, указав в таком уведомлении сумму налога, 
	// удержанную в период с 23-го числа предыдущего месяца до 9-го числа текущего месяца. 
	Запрос.УстановитьПараметр("ДеньПодачиПромежуточногоУведомления", 12);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог
		|ИЗ
		|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
		|ГДЕ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка = &Ссылка
		|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог.ВидНалога = &ВидНалога
		|	И ДЕНЬ(УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка.Дата) <= &ДеньПодачиПромежуточногоУведомления";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Для налоговых агентов по НДФЛ, удержанному за период с 23 по 31 декабря (код отчетного периода 34/04), 
// установлен особый срок подачи уведомления об исчисленных суммах налогов. 
// Срок предоставления уведомления - не позднее последнего рабочего дня года.
// Таким образом, в декабре подается 2 уведомления по НДФЛ.
//
// Функция возвращает признак того, что уведомление содержит НДФЛ за указанный период с 23 по 31 декабря
//
// Параметры:
//  УведомлениеОбИсчисленныхСуммахНалога - ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов
//
// Возвращаемое значение:
//  Булево
//
Функция УведомлениеСодержитНДФЛЗаТринадцатыйПериод(УведомлениеОбИсчисленныхСуммахНалога) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", УведомлениеОбИсчисленныхСуммахНалога);
	Запрос.УстановитьПараметр("ВидНалога", Перечисления.ВидыНалогов.НДФЛ);
	Запрос.УстановитьПараметр("НачалоПериода", 23);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог
		|ИЗ
		|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
		|ГДЕ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка = &Ссылка
		|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог.ВидНалога = &ВидНалога
		|	И ДЕНЬ(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода) = &НачалоПериода
		|	И КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.КонецПериода, ГОД)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Для налоговых агентов по НДФЛ, удержанному за период с 23 по последний день месяца
// установлен особый срок подачи уведомления об исчисленных суммах налогов. 
// Срок предоставления уведомления - не позднее 5 чсла следующего месяца.
//
// Функция возвращает признак того, что уведомление содержит НДФЛ за указанный период с 23 числа по конц месяца.
//
// Параметры:
//  УведомлениеОбИсчисленныхСуммахНалога - ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов
//
// Возвращаемое значение:
//  Булево
//
Функция УведомлениеСодержитНДФЛЗаКонецМесяца(УведомлениеОбИсчисленныхСуммахНалога, Период = '39991201') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",        УведомлениеОбИсчисленныхСуммахНалога);
	Запрос.УстановитьПараметр("ВидНалога",     Перечисления.ВидыНалогов.НДФЛ);
	Запрос.УстановитьПараметр("НачалоПериода", 23);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог
		|ИЗ
		|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
		|ГДЕ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка = &Ссылка
		|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог.ВидНалога = &ВидНалога
		|	И ДЕНЬ(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода) = &НачалоПериода
		|	И КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.КонецПериода, ДЕНЬ)
		|	И &УсловиеПериод";
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод", "Истина");
	Иначе
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод", "КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)");
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Для налоговых агентов по НДФЛ, удержанному за период до 23 числа.
//
// Функция возвращает признак того, что уведомление содержит НДФЛ за указанный период по 23 число.
//
// Параметры:
//  УведомлениеОбИсчисленныхСуммахНалога - ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов
//
// Возвращаемое значение:
//  Булево
//
Функция УведомлениеСодержитНДФЛЗаНачалоМесяца(УведомлениеОбИсчисленныхСуммахНалога, Период = '39991201') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",        УведомлениеОбИсчисленныхСуммахНалога);
	Запрос.УстановитьПараметр("ВидНалога",     Перечисления.ВидыНалогов.НДФЛ);
	Запрос.УстановитьПараметр("НачалоПериода", 1);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог КАК Налог
		|ИЗ
		|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалоговНалоги
		|ГДЕ
		|	УведомлениеОбИсчисленныхСуммахНалоговНалоги.Ссылка = &Ссылка
		|	И УведомлениеОбИсчисленныхСуммахНалоговНалоги.Налог.ВидНалога = &ВидНалога
		|	И ДЕНЬ(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода) = &НачалоПериода
		|	И &УсловиеПериод";
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод", "Истина");
	Иначе
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод", "КОНЕЦПЕРИОДА(УведомлениеОбИсчисленныхСуммахНалоговНалоги.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)");
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗаполнитьСтатусыУстановленныеВручную(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("СтатусУстановленВручную") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("СтатусУстановленВручную", 
			Метаданные.РегистрыСведений.ЗадачиБухгалтера.Реквизиты.СтатусУстановленВручную.Тип);
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("РучнойСтатус") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("ПользовательУстановившийСтатус") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ПользовательУстановившийСтатус", 
			Метаданные.РегистрыСведений.ЗадачиБухгалтера.Реквизиты.ПользовательУстановившийСтатус.Тип);
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("Комментарий") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("Комментарий", 
			Метаданные.РегистрыСведений.ЗадачиБухгалтера.Реквизиты.Комментарий.Тип);
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("Индекс") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
		СтрокаТаблицы.Индекс = ТаблицаЗадач.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	ЕСТЬNULL(ЗадачиИзРегистра.СтатусУстановленВручную, ЛОЖЬ) КАК СтатусУстановленВручную,
	|	ЕСТЬNULL(ЗадачиИзРегистра.Статус, """") КАК РучнойСтатус,
	|	ЕСТЬNULL(ЗадачиИзРегистра.ПользовательУстановившийСтатус, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПользовательУстановившийСтатус,
	|	ЕСТЬNULL(ЗадачиИзРегистра.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиИзРегистра
	|		ПО Задачи.Организация = ЗадачиИзРегистра.Организация
	|			И Задачи.Правило = ЗадачиИзРегистра.Правило
	|			И Задачи.ПериодСобытия = ЗадачиИзРегистра.ПериодСобытия
	|			И Задачи.РегистрацияВНалоговомОргане = ЗадачиИзРегистра.РегистрацияВНалоговомОргане";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач[Выборка.Индекс], Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторыПравилУплатыЕжемесячныхПлатежейПоНДС()
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("2023_Уплата1");
	Идентификаторы.Добавить("2023_Уплата2");
	Идентификаторы.Добавить("2023_Уплата3");
	Идентификаторы.Добавить("2023_Уплата1_ЕдиныйПомощник");
	Идентификаторы.Добавить("2023_Уплата2_ЕдиныйПомощник");
	Идентификаторы.Добавить("2023_Уплата3_ЕдиныйПомощник");
	
	Возврат Идентификаторы;
	
КонецФункции

Процедура ДополнитьЗадачиОплатыНДС(ЗадачаПлатежа, ТаблицаЗадач)
	
	Если ЗадачаПлатежа = Неопределено 
		Или ЗадачаПлатежа.Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ЗадачаПлатежа.Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ЗадачаПлатежа.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ПериодСобытия", ЗадачаПлатежа.ПериодСобытия);
	Запрос.УстановитьПараметр("ИдентификаторыПлатежей", ИдентификаторыПравилУплатыЕжемесячныхПлатежейПоНДС());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Действие КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЗадачиБухгалтера.Правило) = ТИП(Справочник.ПравилаПредставленияОтчетовУплатыНалогов)
	|	И ЗадачиБухгалтера.Правило.Код В(&ИдентификаторыПлатежей)
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)";
	ЗадачиОплатыНДС = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗадачиОплатыНДС, ТаблицаЗадач);
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныйКалендарь

Функция ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования)
	
	Запрос = Новый Запрос;
	
	ИдентификаторыЗадачЗарплаты = Новый Массив;
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Уплата");
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Агент_Уплата");
	
	ИдентификаторыЗадачЗарплатыАванс = Новый Массив;
	ИдентификаторыЗадачЗарплатыАванс.Добавить("Аванс");
	
	ДоступныеОрганизации = Справочники.Организации.ДоступныеОрганизацииДляОтбора(Организация);
	
	Запрос.УстановитьПараметр("СписокОрганизаций",           ДоступныеОрганизации);
	Запрос.УстановитьПараметр("РабочаяДата",                 РабочаяДата);
	Запрос.УстановитьПараметр("ГоризонтПланирования",        ГоризонтПланирования);
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач",     СтатусыВыполненныхЗадач());
	Запрос.УстановитьПараметр("ИдентификаторыЗадачЗарплаты", ИдентификаторыЗадачЗарплаты);
	Запрос.УстановитьПараметр("ИдентификаторыЗадачЗарплатыАванс", ИдентификаторыЗадачЗарплатыАванс);
	Запрос.УстановитьПараметр("УчетЗарплатыСредствамиБухгалтерии", ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));
	Запрос.УстановитьПараметр("ПредыдущийМесяц", ДобавитьМесяц(НачалоМесяца(РабочаяДата), -1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ЗадачиИзСписка
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок МЕЖДУ &РабочаяДата И &ГоризонтПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач)
	|	И ЗадачиБухгалтера.Срок < &РабочаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание КАК Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС
	|ПОМЕСТИТЬ ПравилаУплатыНалогов
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|	И НЕ Правила.Код В (&ИдентификаторыЗадачЗарплаты)
	|	И НЕ Правила.ВыполняетсяЕдинымПомощником
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание КАК Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС,
	|	ЛОЖЬ КАК ЭтоАванс
	|ПОМЕСТИТЬ ПравилаВыплатыЗарплаты
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|	И Правила.Код В(&ИдентификаторыЗадачЗарплаты)
	|	И НЕ Правила.ВыполняетсяЕдинымПомощником
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец,
	|	Правила.Владелец.Наименование,
	|	Правила.Код,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	&УчетЗарплатыСредствамиБухгалтерии
	|	И НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|	И Правила.Код В(&ИдентификаторыЗадачЗарплатыАванс)
	|	И НЕ Правила.ВыполняетсяЕдинымПомощником
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Патенты.Владелец КАК Организация,
	|	Патенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Патенты
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец В(&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Организация КАК Организация,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Периодичность КАК Периодичность,
	|	РегулярныеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	РегулярныеПлатежи.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежи
	|ИЗ
	|	Справочник.ПравилаРегулярныхПлатежей КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО Правила.Ссылка = РегулярныеПлатежи.Правило
	|			И Правила.Организация = РегулярныеПлатежи.Организация
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Выполняется
	|	И Правила.Организация В(&СписокОрганизаций)
	|	И РегулярныеПлатежи.ПериодСобытия <= &ГоризонтПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиИзСписка.Организация КАК Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Правило КАК Правило,
	|	ЗадачиИзСписка.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиИзСписка.Периодичность КАК Периодичность,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ РегулярныеПлатежи.ПлатежноеПоручение
	|	КОНЕЦ КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежиСПлатежкой
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО (РегулярныеПлатежи.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежи.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежи.ПериодСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежиПодходитПериод
	|		ПО (РегулярныеПлатежиПодходитПериод.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежиПодходитПериод.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежиПодходитПериод.ПериодСобытия = ЗадачиИзСписка.ПериодСобытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегулярныеПлатежи.Организация КАК Организация,
	|	РегулярныеПлатежи.ДатаПлатежа КАК ДатаПлатежа,
	|	РегулярныеПлатежи.Просрочен КАК Просрочен,
	|	РегулярныеПлатежи.Правило КАК Правило,
	|	РегулярныеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	РегулярныеПлатежи.Периодичность КАК Периодичность,
	|	РегулярныеПлатежи.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	РегулярныеПлатежи.ПлатежноеПоручение КАК ПлатежноеПоручение,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Расшифровка,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	РегулярныеПлатежи.ПлатежноеПоручение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РегулярныеПлатежи.ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	""Регулярный платеж"" КАК Описание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУплатыНалогов.БанковскийПеревод) КАК СпособОплаты,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегулярныеПлатежиСПлатежкой КАК РегулярныеПлатежи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ЗадачиИзСписка.Организация КАК Организация,
	|	ЗадачиИзСписка.Срок КАК Срок,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование КАК Наименование,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило КАК Правило,
	|	ЗадачиИзСписка.Периодичность КАК Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Правила.Задача КАК Задача,
	|	Правила.НаименованиеЗадачиБухгалтера КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера КАК НаименованиеЗадачиБухгалтера,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС,
	|	ЗадачиИзСписка.НачалоВыполнения КАК НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаУплатыНалогов КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога),
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок < &РабочаяДата,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	NULL,
	|	""Патент"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗадачиИзСписка.НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Патенты КАК Патенты
	|		ПО ЗадачиИзСписка.Организация = Патенты.Организация
	|			И ЗадачиИзСписка.Правило = Патенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ВЫБОР
	|		КОГДА Правила.ЭтоАванс
	|			ТОГДА ЕСТЬNULL(ВыплаченныеАвансы.СуммаКВыплатеРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(НачисленныеСуммы.СуммаОборотКт, 0) - ЕСТЬNULL(ВыплаченныеАвансы.СуммаКВыплатеРасход, 0)
	|	КОНЕЦ КАК Сумма,
	|	ЗадачиИзСписка.Организация КАК Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило КАК Правило,
	|	ЗадачиИзСписка.Периодичность КАК Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Задача КАК Задача,
	|	ВЫБОР
	|		КОГДА Правила.ЭтоАванс
	|			ТОГДА ""Зарплата, аванс""
	|		ИНАЧЕ ""Зарплата""
	|	КОНЕЦ КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС,
	|	Правила.ЭтоАванс КАК ЭтоАванс
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВыплатыЗарплаты КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ПредыдущийМесяц, , Месяц, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда), , Организация В (&СписокОрганизаций), , ) КАК НачисленныеСуммы
	|		ПО ЗадачиИзСписка.Организация = НачисленныеСуммы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиИзСписка.ПериодСобытия, МЕСЯЦ) = НачисленныеСуммы.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплатеАвансом.Обороты(&ПредыдущийМесяц, , , Организация В (&СписокОрганизаций)) КАК ВыплаченныеАвансы
	|		ПО ЗадачиИзСписка.Организация = ВыплаченныеАвансы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиИзСписка.ПериодСобытия, МЕСЯЦ) = ВыплаченныеАвансы.ПериодВзаиморасчетов)
	|			И (&УчетЗарплатыСредствамиБухгалтерии)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗадачиБухгалтера = Новый Структура;
	
	ЗадачиБухгалтера.Вставить("РегулярныеПлатежи", РезультатЗапроса[6].Выгрузить());
	ЗадачиБухгалтера.Вставить("УплатаНалогов",     РезультатЗапроса[7].Выгрузить());
	ЗадачиБухгалтера.Вставить("Зарплата",          РезультатЗапроса[8].Выгрузить());
	
	Возврат ЗадачиБухгалтера;
	
КонецФункции

Функция РегулярныеПлатежи(ТаблицаЗадач)
	
	РегулярныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = РегулярныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
	КонецЦикла;
	
	Возврат РегулярныеПлатежи;
	
КонецФункции

Функция ЗарплатныеПлатежи(ТаблицаЗадач)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("СпособВыплатыЗарплата", Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию());
	Запрос.УстановитьПараметр("СпособВыплатыАванс", Справочники.СпособыВыплатыЗарплаты.Аванс());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Правило,
	|	Задачи.Организация,
	|	НАЧАЛОПЕРИОДА(Задачи.ПериодСобытия, МЕСЯЦ) КАК ПериодРегистрации,
	|	Задачи.ЭтоАванс
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Правило КАК Правило,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	Задачи.Организация,
	|	Задачи.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ Ведомости
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО Задачи.Организация = ВедомостьНаВыплатуЗарплатыВБанк.Организация
	|			И (Задачи.ПериодРегистрации = НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ))
	|			И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплатыЗарплата
	|ГДЕ
	|	НЕ Задачи.ЭтоАванс
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задачи.Правило КАК Правило,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	Задачи.Организация,
	|	Задачи.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО Задачи.Организация = ВедомостьНаВыплатуЗарплатыВБанк.Организация
	|			И (Задачи.ПериодРегистрации = НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ))
	|			И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплатыАванс
	|ГДЕ
	|	Задачи.ЭтоАванс
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Правило КАК Правило,
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации КАК Период
	|ИЗ
	|	Ведомости КАК Ведомости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (Ведомости.Ведомость = ПлатежноеПоручение.ДокументОснование
	|				ИЛИ Ведомости.Ведомость = ПлатежноеПоручение.ПлатежнаяВедомость)
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведомости.Правило,
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПериодыЕстьПлатежка = РезультатЗапроса.Выгрузить();
	
	ЗарплатныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = ЗарплатныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = РекомендацияПоНачислениюЗарплаты(Задача.Организация, Задача.ПериодСобытия, Задача.ЭтоАванс);
		КонецЕсли;
		
		Если Платеж.Сумма <> 0 И ПериодыЕстьПлатежка.Количество() <> 0 Тогда
			
			ПараметрыОтбора = Новый Структура("Правило, Организация, Период",
				Задача.Правило, Задача.Организация, НачалоМесяца(Задача.ПериодСобытия));
			
			Платеж.ЕстьПлатежныйДокумент = ПериодыЕстьПлатежка.НайтиСтроки(ПараметрыОтбора).Количество() <> 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗарплатныеПлатежи;
	
КонецФункции

Функция НалоговыеПлатежи(ТаблицаЗадач)
	
	НалоговыеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = НалоговыеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.Расшифровка = ВРег(Лев(Платеж.Расшифровка, 1)) + Сред(Платеж.Расшифровка, 2);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		Если Задача.Просрочен Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		ИмяЗадачи = Задача.ИдентификаторЗадачи;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Задача.Правило);
		
		Если ИмяЗадачи = "СтраховыеВзносы" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносов(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
			Или ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" 
			Или ПолноеИмяПравила = "ЗемельныйНалог.2015_Аванс" 
			Или ПолноеИмяПравила = "НалогНаИмущество.2013_Аванс" Тогда
			
			ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(Платеж, Задача);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносовИП(Платеж, Задача);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Задача.Правило) Тогда
			
			ДополнитьПлатежУплатаНалогаУСН(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата" Тогда
			
			ДополнитьПлатежУплатаТорговогоСбора(Платеж, Задача);
			
		ИначеЕсли ТипЗнч(Задача.Правило) = Тип("СправочникСсылка.Патенты") Тогда
			
			ДополнитьПлатежОплатаПатента(Платеж, Задача);
			
		ИначеЕсли СтрНачинаетсяС(ПолноеИмяПравила, "НДС.2015_Уплата") Тогда
			
			ДополнитьПлатежУплатаНДС(Платеж, Задача);
			
		ИначеЕсли ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила) Тогда
			
			ДополнитьПлатежПоДаннымДекларации(Платеж, Задача);
			
		КонецЕсли;
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = НСтр("ru = 'Нет данных для определения суммы платежа'");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НалоговыеПлатежи;
	
КонецФункции

Процедура ДополнитьПлатежПоДаннымДекларации(ПлатежПоЗадаче, Задача)
	
	Срок                        = Задача.ДатаПлатежа;
	Правило                     = Задача.Правило;
	Организация                 = Задача.Организация;
	ПериодСобытия               = Задача.ПериодСобытия;
	РегистрацияВНалоговомОргане = Задача.РегистрацияВНалоговомОргане;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// В примечании надо указать на то, что нет декларации.
		
		ШаблонТекста = НСтр("ru = 'Рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|Тогда будет возможно определить сумму платежа.'");
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ПлатежПоЗадаче.Примечание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
		Возврат;
		
	КонецЕсли;
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(ДанныеДекларации.Платежи);
	ПлатежПоЗадаче.Сумма = ДанныеДекларации.Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(ПлатежПоЗадаче, Задача)
	
	Срок          = Задача.Срок;
	Организация   = Задача.Организация;
	Правило       = Задача.Правило;
	ПериодСобытия = Задача.ПериодСобытия;
	
	Платежи = ДанныеДляУплатыИмущественныхНалогов(Задача);
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносов(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	ПериодСобытия = Задача.ПериодСобытия;
	Правило       = Задача.Правило;
	
	Если НЕ ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия) Тогда
		
		ПлатежПоЗадаче.Примечание = РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия);
		
		Возврат; // начислений нет.
	КонецЕсли;
	
	Платежи = ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия);
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма")
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносовИП(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	Период        = Задача.ПериодСобытия;
	Периодичность = Задача.Периодичность;
	ТекущаяДата   = ОбщегоНазначения.ТекущаяДатаПользователя();
		
	Если ЭтоОплатаНалогаЗаПрошлыйПериод(ПлатежПоЗадаче.ПараметрыКоманды)
		И УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДата) Тогда
		
		ПлатежПоЗадаче.Сумма = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ЗадолженностьПоНалогамВзносамЗаПрошлыйПериод(Задача);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Платежи
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.Дата >= &ДатаНачалаОбзора
		|	И ПлатежноеПоручение.Проведен
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.ВидОперации = &ВидОперации
		|	И ПлатежноеПоручение.СуммаДокумента > 0
		|	И ПОДСТРОКА(ПлатежноеПоручение.ПоказательПериода, 0, 5) = ""ГД.00""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
		|ИЗ
		|	ВТ_Платежи КАК ПлатежныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
		|		ПО ПлатежныйДокумент.Ссылка = ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
		|ГДЕ
		|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
		|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
		|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило");
		
		Запрос.УстановитьПараметр("Правило", Задача.Правило);
		Запрос.УстановитьПараметр("ПериодСобытия", Период);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
		Запрос.УстановитьПараметр("ДатаНачалаОбзора", Дата(Год(ТекущаяДата) - 3, 1, 1));
		
	Иначе
		
		// Фиксированная часть страховых взносов
		Взносы = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
			Организация, Период, Периодичность);
		
		// Страховые взносы, исчисленные с суммы доходов
		СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
			Организация, НачалоГода(Период), КонецКвартала(Период));
			
		СтраховыеВзносы = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
			Организация, Период, СтруктураДоходов, Ложь);
		
		ПлатежПоЗадаче.Сумма = Взносы.СуммаВзносаПФР + Взносы.СуммаВзносаФФОМС
			+ Взносы.СуммаВзносаФСС + СтраховыеВзносы.СуммаВзносаПФРсДоходов + Взносы.СуммаВзносаЕдиныйТариф;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
		|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)";
		
		ВидыНалогов = Новый Массив;
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела);
		
		Запрос.УстановитьПараметр("ВидыНалогов", ВидыНалогов);
		Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
		
	КонецЕсли;
		
	Если ПлатежПоЗадаче.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск платежного поручения
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаНалогаУСН(ПлатежПоЗадаче, Задача)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация = Задача.Организация;
	ПараметрыПроверки.Период      = КонецКвартала(Задача.ПериодСобытия);
	ПараметрыПроверки.АктуализироватьВесьПериод = Истина;
	
	РезультатПроверки = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		
		Показатели = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Задача.Организация, Задача.ПериодСобытия);
		
		ПлатежПоЗадаче.Сумма = Показатели.НалогКУплате;
		
		ДокументыУплатыНалога = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогов(
			Задача.Организация, Задача.ПериодСобытия, Задача.Правило);
		
		ЕстьПлатежноеПоручение = Ложь;
		Для Каждого Платеж Из ДокументыУплатыНалога Цикл
			Если ТипЗнч(Платеж.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				ЕстьПлатежноеПоручение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежноеПоручение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаТорговогоСбора(ПлатежПоЗадаче, Задача)
	
	ТаблицаТорговыйСбор = ТорговыйСбор.СуммаТорговогоСбора(
	Задача.Организация, НачалоКвартала(Задача.ПериодСобытия), КонецКвартала(Задача.ПериодСобытия));
	
	ПлатежПоЗадаче.Сумма = ТаблицаТорговыйСбор.Итог("Сумма");
	
	// Поиск платежного поручения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
	|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)";
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	
	Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
	Запрос.УстановитьПараметр("Организация",      Задача.Организация);
	Запрос.УстановитьПараметр("ВидыНалогов",      ВидыНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежОплатаПатента(ПлатежПоЗадаче, Задача)
	
	ДокументПатент = УчетПСН.ДокументПатентПоДеятельностиИСроку(Задача.Правило, Задача.Срок);
	
	ДанныеПатента = Обработки.ПомощникОплатыПатента.ПоказателиПатента(ДокументПатент, Задача.Срок);
	
	// Поиск платежного поручения
	ДокументыУплатыНалога = Обработки.ПомощникОплатыПатента.ДокументыУплатыПатента(
		Задача.Организация,
		Задача.Правило,
		Задача.ПериодСобытия,
		ДанныеПатента.ВидНалога);
	
	ДанныеПоУменьшениюНалога = РегистрыСведений.УменьшениеНалогаПоПатенту.СведенияУменьшениеНалогаЗаГод(
		ДанныеПатента.Организация, ДанныеПатента.ДатаНачала, ДокументПатент);
	УменьшениеНалога = ДанныеПоУменьшениюНалога[ДокументПатент];
	Если ТипЗнч(УменьшениеНалога) = Тип("Структура") Тогда
		РасходыУменьшающиеНалог = УменьшениеНалога.Сумма;
	Иначе
		РасходыУменьшающиеНалог = 0;
	КонецЕсли;
	СуммаКОплате = ДанныеПатента.ТекущийПлатеж + ДанныеПатента.ПредыдущийПлатеж - РасходыУменьшающиеНалог;
	Оплачено = ДокументыУплатыНалога.Скопировать(Новый Структура("Оплачено", Истина), "Сумма").Итог("Сумма");
	
	ПлатежПоЗадаче.Сумма = Макс(0, СуммаКОплате - Оплачено);
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = (ДокументыУплатыНалога.НайтиСтроки(Новый Структура("Оплачено", Ложь)).Количество() > 0);
	
	Если ПлатежПоЗадаче.Сумма = 0 И СуммаКОплате <> 0 Тогда
		ПлатежПоЗадаче.Примечание = НСтр("ru = 'Оплачено'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаНДС(ПлатежПоЗадаче, Задача)
	
	Срок                        = Задача.ДатаПлатежа;
	Правило                     = Задача.Правило;
	Организация                 = Задача.Организация;
	ПериодСобытия               = Задача.ПериодСобытия;
	РегистрацияВНалоговомОргане = Задача.РегистрацияВНалоговомОргане;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// В примечании надо указать на то, что нет декларации.
		
		ШаблонТекста = НСтр("ru = 'Рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|Тогда будет возможно определить сумму платежа.'");
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ПлатежПоЗадаче.Примечание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
		Возврат;
		
	КонецЕсли;
	
	ПлатежиЗаВыбранныйПериод = ДанныеДекларации.Платежи.СкопироватьКолонки();
	Для Каждого СтрокаПлатежа Из ДанныеДекларации.Платежи Цикл
		Если СтрокаПлатежа.Период > НачалоПериода И СтрокаПлатежа.Период <= КонецБазовогоПериода Тогда
			ЗаполнитьЗначенияСвойств(ПлатежиЗаВыбранныйПериод.Добавить(), СтрокаПлатежа);
		КонецЕсли;
	КонецЦикла;
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(ПлатежиЗаВыбранныйПериод);
	ПлатежПоЗадаче.Сумма = ПлатежиЗаВыбранныйПериод.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Функция ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия, ДокументЗарплаты = Неопределено, НесколькоДокументов = Ложь, ИмяДокумента = Неопределено) Экспорт
	
	ОперацияВыполнена = Ложь;
	
	Если ИмяДокумента = Неопределено Тогда
		ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодСобытия);
	Запрос.УстановитьПараметр("Документ",    ИмяДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НачислениеЗарплаты.Ссылка КАК Ссылка,
	|	НачислениеЗарплаты.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	&Документ = ""НачислениеЗарплаты""
	|	И НЕ НачислениеЗарплаты.ПометкаУдаления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВБухучете.Ссылка,
	|	ОтражениеЗарплатыВБухучете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВБухучете""
	|	И НЕ ОтражениеЗарплатыВБухучете.ПометкаУдаления
	|	И ОтражениеЗарплатыВБухучете.Организация = &Организация
	|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВУчете.Ссылка,
	|	ОтражениеЗарплатыВУчете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВУчете""
	|	И НЕ ОтражениеЗарплатыВУчете.ПометкаУдаления
	|	И ОтражениеЗарплатыВУчете.Организация = &Организация
	|	И ОтражениеЗарплатыВУчете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка,
	|	РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	&Документ = ""РегламентнаяОперация""
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеВзносовОтНесчастыхСлучаев)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Проведен Тогда
			ОперацияВыполнена = Истина;
		Иначе
			Если Выборка.Количество() = 1 Тогда
				ДокументЗарплаты = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() = 2 Тогда
				НесколькоДокументов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

Функция ЕстьПлатежныйДокумент(Платежи)
	
	Если Платежи.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеПлатежныеДокументы = Платежи.Скопировать(,"ПлатежноеПоручение");
	ВсеПлатежныеДокументы.Свернуть("ПлатежноеПоручение");
	
	Возврат ВсеПлатежныеДокументы.Количество() > 1 
		Или ВсеПлатежныеДокументы.Количество() = 1 И ЗначениеЗаполнено(ВсеПлатежныеДокументы[0].ПлатежноеПоручение);
	
КонецФункции

Функция РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия, ЭтоАванс = Ложь)
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Если ИмяДокумента = "НачислениеЗарплаты" Тогда
		// начисляем в БП
		Если ЭтоАванс Тогда
			Рекомендация = НСтр("ru = 'рассчитать аванс'")
		Иначе
			Рекомендация = НСтр("ru = 'начислить зарплату'");
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// загружаем из ЗУП 2.5
		
		Рекомендация = НСтр("ru = 'загрузить данные'");
		
	Иначе
		// вводим вручную
		Рекомендация = НСтр("ru = 'ввести данные'");
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = 'Рекомендуется [Рекомендация] за [Период]
		|Тогда будет возможно определить сумму платежа.'");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Рекомендация", Рекомендация);
	ПараметрыТекста.Вставить("Период",
		КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия)));
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Декларация) КАК СвязанныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежныйДокумент
	|		ПО СвязанныеДокументы.Ссылка = ПлатежныйДокумент.Ссылка
	|			И (ПлатежныйДокумент.ПоказательПериода В (&ПоказательПериода))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение,
	|	ЗадачиБухгалтераНалоговыеПлатежи.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежныйДокумент
	|		ПО ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение = ПлатежныйДокумент.Ссылка
	|			И (ПлатежныйДокумент.ПоказательПериода В (&ПоказательПериода, &ПоказательПериодаОсобыйПорядок))
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка,
	|	ЗадачиБухгалтераНалоговыеПлатежи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОписаниеДействияЖурналСчетовФактур(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Форма.ФормаДокумента");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
КонецФункции

Функция СобытиеЖурналаРегистрации()

	Возврат НСтр("ru = 'ЗадачиБухгалтера.ВыполнениеДействия'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Возвращает таблицу с соответствием форм регл отчетов и идентификаторами задач и правил подготовки отчетов.
// Возвращаемое значение:
//  ТаблицаЗначений
//   ФормаОтчета          - Строка
//   ИдентификаторПравила - Строка
//   ИдентификаторЗадачи  - Строка
//
Функция СоответствияПравилИФормОтчетов() Экспорт
	
	СоответствияПравилИФормОтчетов = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	Для Каждого ОтчетПравило Из ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований() Цикл
		
		НоваяСтрока = СоответствияПравилИФормОтчетов.Добавить();
		НоваяСтрока.ФормаОтчета = ОтчетПравило.Значение;
		
		ЭлементыИмени = СтрРазделить(ОтчетПравило.Ключ, ".");
		ЭлементыИмени.Добавить(""); // На случай отсутствия имени правила в ключе.
		
		НоваяСтрока.ИдентификаторЗадачи  = ЭлементыИмени[0];
		НоваяСтрока.ИдентификаторПравила = ЭлементыИмени[1];
		
		НоваяСтрока.ИмяИсточника = НоваяСтрока.ФормаОтчета;
		
	КонецЦикла;
	
	Возврат СоответствияПравилИФормОтчетов;
	
КонецФункции

Функция ТекущееПравилоЗадачи(ИдентификаторЗадачи, ПериодРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", ИдентификаторЗадачи);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ЗадачиУплатыПатента(Организация, ОтборПатент)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОтборПатент) = Тип("СправочникСсылка.Патенты") Тогда
		Патенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПатент);
	ИначеЕсли ТипЗнч(ОтборПатент) = Тип("Массив") Тогда
		Патенты = ОтборПатент;
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Патенты",     Патенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&Патенты)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает периодичность для периодичности из показателя периода платежного поручения.
//
// Параметры:
//  ПериодичностьИзПоказателяПериода - Строка
//
// Возвращаемое значение:
//  Периодичность - ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьПоПоказателюПериода(ПериодичностьИзПоказателяПериода) Экспорт
	
	Периодичность = Перечисления.Периодичность.ПустаяСсылка();
	
	Если ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал() Тогда
		
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьГод() Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц() Тогда
		
		Периодичность = Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьПолугодие() Тогда
		
		Периодичность = Перечисления.Периодичность.Полугодие;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		
		Периодичность = Перечисления.Периодичность.День;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

Функция ПравилоВыплатыЗарплатыАванс()
	
	ПравилоАванс = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторАванса", "Аванс");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторАванса
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПравилоАванс = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПравилоАванс;
	
КонецФункции

Функция НоваяТаблицаСоответствияПравилИФормОтчетов()
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	
	ТаблицаПравил.Колонки.Добавить("ФормаОтчета",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИдентификаторПравила", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИдентификаторЗадачи",  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИмяИсточника",         ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	// В некоторых случаях несколько задач может выполняться одним объектом.
	// При этом, принадлежность к конкретной задачи может зависеть от значений реквизитов объекта.
	// К примеру, правила НДФЛ_Агент.2013_2НДФЛ и НДФЛ_Агент.2016_2НДФЛ_Неудержанный
	// выполняются одним документом и разделяются значениями реквизита "ОснованиеДляПредставленияСправок" документа.
	// "УсловиеПроверки" описывает дополнительную проверку, которую можно выполнить запросом к данным объекта.
	ТаблицаПравил.Колонки.Добавить("СложноеУсловиеПроверки", Новый ОписаниеТипов("Булево"));
	ТаблицаПравил.Колонки.Добавить("УсловиеПроверки",        ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаПравил;
	
КонецФункции

Функция ПериодичностьУплатыНалогаВзноса(ВидНалога, Организация, Период)
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
		
		Возврат УчетУСН.ПериодичностьНалоговогоПлатежа(Период);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
		
		Возврат УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	ИначеЕсли УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(ВидНалога) Тогда
		
		Возврат НалоговыйУчет.ПериодичностьУплатыНалога(Период, Организация);
		
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.НДС Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	Иначе
		
		Возврат ПериодичностьУплатыНалогаПоУмолчанию();
		
	КонецЕсли;
	
КонецФункции

Функция ПериодичностьУплатыНалогаПоУмолчанию()
	
	Возврат Перечисления.Периодичность.Квартал;
	
КонецФункции

Функция ИменаКолонокСтрокой(КолонкиТаблицы)
	
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(ИменаКолонок, ",");
	
КонецФункции

Процедура ЗанестиСведенияОНарушенииСрокаПодачиРегламентированногоОтчета(Документ, ТекущийДень)
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтчетностьСНарушеннымСрокомПодачи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.РегламентированныйОтчет = Документ;
	МенеджерЗаписи.Дата = ТекущийДень;
	МенеджерЗаписи.Записать();
		
КонецПроцедуры

// Возвращает код задачи по правилу представления отчетов, уплаты налогов
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило, по которому вычисляется код задачи
//
// Возвращаемое значение:
//   Строка
//
Функция КодЗадачиПоПравилу(Правило)
	
	Идентификаторы = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Идентификаторы.ИдентификаторЗадачи;
	
КонецФункции

// Подбирает наиболее подходящее правило выполнения отчета
//
// Параметры:
//  ПравилаПодготовкиОтчета       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило отчета
//  ПравилоУплаты                 - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило отчета
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета 
//
Функция ПодобратьРелевантноеПравилоОтчета(ПравилаПодготовкиОтчета, ПравилоУплаты) Экспорт
	
	Если ПравилаПодготовкиОтчета.Количество() = 0 Тогда
		Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	Если ПравилаПодготовкиОтчета.Количество() = 1 Тогда
		Возврат ПравилаПодготовкиОтчета[0];
	КонецЕсли;
	
	ПолноеИмяПравилаУплаты = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоУплаты);
	ИсполнительПравилаУплаты = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравилаУплаты);
	
	УникальныеПравила = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПравилаПодготовкиОтчета);
	Для Каждого ПравилоОтчета Из УникальныеПравила Цикл
		
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПравилоОтчета);
		ИсполнительПравила = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
		
		Если ИсполнительПравила = ИсполнительПравилаУплаты Тогда
			Возврат ПравилоОтчета;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПравилаПодготовкиОтчета[0];
	
КонецФункции

Функция ОтчетыИспользуютсяДляУплатыНалога(Правило)
	
	// Как правило, налог уплачивается на основании отчета (декларации).
	// Здесь описаны исключения, когда представляемые отчеты заведомо не связаны с уплатой налога,
	// не содержат данных для уплаты налога.
	// Ситуации, когда никакие отчеты не представляются для уплаты налога, таким исключением не являются и здесь не описаны.
	
	Если ЭтоСтраховыеВзносы(Правило) Или ЭтоОтчетностьПоНДФЛ(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеДействияНапоминаниеОПроверкеНалогаАУСН(Событие)
	
	Перем БанковскиеСчетаДляСверки;
	
	Если Не СтрНачинаетсяС(Событие.ИдентификаторПравила, "2021") Тогда
		
		ЗапросСчетов = Новый Запрос;
		ЗапросСчетов.УстановитьПараметр("Организация", Событие.Организация);
		ЗапросСчетов.Текст =
		"ВЫБРАТЬ
		|	КлассификаторБанков.Ссылка КАК Счет,
		|	БанковскиеСчета.Представление КАК СчетПредставление,
		|	ВЫБОР
		|		КОГДА СостоянияИнтеграцииАУСН.Организация ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПодключенаИнтеграцияСБанком
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО БанковскиеСчета.Банк.Код = КлассификаторБанков.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
		|		ПО БанковскиеСчета.Владелец = СостоянияИнтеграцииАУСН.Организация
		|			И (КлассификаторБанков.Ссылка = СостоянияИнтеграцииАУСН.Банк)
		|			И (СостоянияИнтеграцииАУСН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Подключено))
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодключенаИнтеграцияСБанком";
		ВыборкаСчетов = ЗапросСчетов.Выполнить().Выбрать();
		
		БанковскиеСчетаДляСверки = Новый СписокЗначений;
		Пока ВыборкаСчетов.Следующий() Цикл
			БанковскиеСчетаДляСверки.Добавить(ВыборкаСчетов.Счет, ВыборкаСчетов.СчетПредставление, ВыборкаСчетов.ПодключенаИнтеграцияСБанком);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",              Событие.Организация);
	ПараметрыФормы.Вставить("Период",                   Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("СрокЗадачи",               Событие.Срок);
	Если БанковскиеСчетаДляСверки <> Неопределено Тогда
		ПараметрыФормы.Вставить("БанковскиеСчетаДляСверки", БанковскиеСчетаДляСверки);
	КонецЕсли;
	ПараметрыФормы.Вставить("КонтекстныйВызов",         Истина);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",  Истина);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "Отчет.БанковскиеОперацииАУСН.ФормаОбъекта");
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаНалогаАУСН(Событие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Срок", Событие.Срок);
	ПараметрыФормы.Вставить("Заголовок", Событие.Наименование);
	ПараметрыФормы.Вставить("ДатаНачала", Событие.НачальныйСрок);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.НапоминаниеОплатитьАУСН");
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПравилоДействияКалендаряБухгалтера_АУСН(Период, ВидДействия)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.Ссылка КАК Правило
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Действие = &ВидДействия
	|	И Правила.Владелец.Код = &КодЗадачи
	|	И НЕ Правила.ПометкаУдаления
	|	И Правила.НачалоДействия <= &Период
	|	И (Правила.КонецДействия > &Период
	|	Или Правила.КонецДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))");
	
	Запрос.УстановитьПараметр("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиАУСН());
	Запрос.УстановитьПараметр("ВидДействия", ВидДействия);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Правило;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьДополнительныеСвойстваОплатыАУСН(ДокументОбъект)

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		И УчетнаяПолитика.ПрименяетсяАУСН(ДокументОбъект.Организация, ДокументОбъект.НалоговыйПериод)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Налог, "ВидНалога") = Перечисления.ВидыНалогов.АУСН Тогда
		
		ПравилоАУСН = ПравилоДействияКалендаряБухгалтера_АУСН(
			ДокументОбъект.НалоговыйПериод,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		
		Если ЗначениеЗаполнено(ПравилоАУСН) Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПравилоУплатыНалогов", ПравилоАУСН);
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря", КонецМесяца(ДокументОбъект.НалоговыйПериод));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеДействияУплатаФСС_НС_АУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	СтраховыеВзносы_ФСС_НСиПЗ = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ,
		Истина);
		
	СуществующийДокумент = Неопределено;
	
	Запрос =Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Событие.Организация);
	Запрос.УстановитьПараметр("Правило",          Событие.Правило);
	Запрос.УстановитьПараметр("ПериодСобытия",    Событие.ПериодСобытия);
	Запрос.УстановитьПараметр("Налог",            СтраховыеВзносы_ФСС_НСиПЗ);
	Запрос.УстановитьПараметр("ВидОперации",      Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Платежи
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Проведен
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.ВидОперации = &ВидОперации
	|	И ПлатежноеПоручение.Налог = &Налог
	|	И ПлатежноеПоручение.СуммаДокумента > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ИЗ
	|	ВТ_Платежи КАК ПлатежныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|		ПО ПлатежныйДокумент.Ссылка = ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПлатежноеПоручение) Тогда
			СуществующийДокумент = Выборка.ПлатежноеПоручение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СуществующийДокумент <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", СуществующийДокумент);
		ПараметрыФормы.Вставить("Правило",              Событие.Правило);
		ПараметрыФормы.Вставить("ПериодСобытия",        Событие.ПериодСобытия);
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата", ОбщегоНазначения.ТекущаяДатаПользователя());
		ЗначенияЗаполнения.Вставить("Организация", Событие.Организация);
		ЗначенияЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
		ЗначенияЗаполнения.Вставить("Налог", СтраховыеВзносы_ФСС_НСиПЗ);
		ЗначенияЗаполнения.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ЗначенияЗаполнения.Вставить("СуммаДокумента", УчетЗарплаты.СтраховыеВзносы_ФСС_НСиПЗ(Событие.Организация, Событие.ПериодСобытия));
		ЗначенияЗаполнения.Вставить("НазначениеПлатежа",
			СтрШаблон(НСтр("ru = 'Взносы на страхование от несчастных случаев при Автоматизированной упрощенной системе налогообложения за %1'"),
				Формат(Событие.ПериодСобытия, "ДФ='MMMM yyyy ''года'''")));
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",   ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Правило",              Событие.Правило);
		ПараметрыФормы.Вставить("ПериодСобытия",        Событие.ПериодСобытия);
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Документ.ПлатежноеПоручение.Форма.ФормаДокумента");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ЗаполнитьСтатусыЗадачАУСН(ПараметрыЗадач)
	
	ВидНалога = Перечисления.ВидыНалогов.АУСН;
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
			ПараметрыЗадачи.Статус = ПараметрыЗадачи.РучнойСтатус;
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписаниеСРасчетногоСчета.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ГДЕ
		|	НЕ СписаниеСРасчетногоСчета.ПометкаУдаления
		|	И СписаниеСРасчетногоСчета.Проведен
		|	И СписаниеСРасчетногоСчета.Организация = &Организация
		|	И СписаниеСРасчетногоСчета.Налог.ВидНалога = &ВидНалога
		|	И СписаниеСРасчетногоСчета.НалоговыйПериод = &НалоговыйПериод");
		
		Запрос.УстановитьПараметр("Организация", ПараметрыЗадачи.Организация);
		Запрос.УстановитьПараметр("ВидНалога", ВидНалога);
		Запрос.УстановитьПараметр("НалоговыйПериод", НачалоМесяца(ПараметрыЗадачи.ПериодСобытия));
		
		РезультатЗапроса  = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ПараметрыЗадачи.Статус = "";
		Иначе
			ПараметрыЗадачи.Статус = "Оплачено";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеДействияПередачаСведенийОСотрудникахАУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыОткрытия = Обработки.ПомощникУчетаЗарплаты.ПараметрыОтчетаВыплатыСотрудникамАУСН(
		Событие.Организация,
		Событие.ПериодСобытия,
		Событие);
	
	ОписаниеДействия.Вставить("ИмяФормы", "Справочник.ВариантыОтчетов.ФормаОбъекта");
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыОткрытия);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ВариантыВыборкиСтраховыхВзносов() Экспорт
	
	ВариантыВыборкиСтраховыхВзносов = Новый Структура;
	ВариантыВыборкиСтраховыхВзносов.Вставить("СтраховыеВзносыТравматизм", 0);
	ВариантыВыборкиСтраховыхВзносов.Вставить("СтраховыеВзносы",           1);
	ВариантыВыборкиСтраховыхВзносов.Вставить("Травматизм",                2);
	
	Возврат ВариантыВыборкиСтраховыхВзносов;
	
КонецФункции

Функция ЭтоОтчетностьПоНДФЛ(Правило)
	
	Если Не ЗначениеЗаполнено(Правило)
		Или ТипЗнч(Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	МассивПравилОтчетностиПоНДФЛ = ПравилаОтчетности6НДФЛ();
	МассивПравилОтчетностиПоНДФЛ.Добавить("НДФЛ_Агент.2022_НДФЛ_СведенияАУСН");
	
	Возврат МассивПравилОтчетностиПоНДФЛ.Найти(ПолноеИмяПравила) <> Неопределено;
	
КонецФункции

Функция НовыеПараметрыЗадачБухгалтера()
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Срок",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("СтатусУстановленВручную", Новый ОписаниеТипов("Булево"));
	ПараметрыЗадач.Колонки.Добавить("РучнойСтатус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

Процедура ЗаполнитьСтатусыЗадачДобровольныеВзносыИП(ПараметрыЗадач)
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		Если ПараметрыЗадачи.СтатусУстановленВручную Тогда
			ПараметрыЗадачи.Статус = ПараметрыЗадачи.РучнойСтатус;
			Продолжить;
		КонецЕсли;
		
		СуммаКУплате = УчетСтраховыхВзносовИП.СуммаФиксированныхВзносовНаВНиМ(
			ПараметрыЗадачи.Организация,
			ПараметрыЗадачи.ПериодСобытия);
		
		Если СуммаКУплате = 0 Тогда
			ПараметрыЗадачи.Статус = "Оплачено";
		Иначе
			ПараметрыЗадачи.Статус = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилоУведомленияПоНДФЛ()
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Агент_Уведомление", "2023_НДФЛ_Уведомление");
КонецФункции

Функция ПравилоУведомленияПоНДФЛТринадцатыйПериод()
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Агент_Уведомление", "2023_НДФЛ_Уведомление_Декабрь");
КонецФункции

Функция ПравилаОтчетности6НДФЛ() Экспорт
	
	МассивПравил6НДФЛ = Новый Массив;
	МассивПравил6НДФЛ.Добавить("НДФЛ_Агент.2023_6НДФЛ_Квартал");
	МассивПравил6НДФЛ.Добавить("НДФЛ_Агент.2023_6НДФЛ_Год");
	
	Возврат МассивПравил6НДФЛ;
	
КонецФункции

Функция ПравилоУведомленияПоНДФЛКонецМесяца()
	Возврат Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Агент_Уведомление", "2024_НДФЛ_Уведомление_КонецМесяца");
КонецФункции

#КонецОбласти

#Область РегистрацияПлатежей

Процедура УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, Правило, ПериодСобытия, ПропуститьОбновлениеСтатуса = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если НЕ ДокументВыполняетЗадачу(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Правило) ИЛИ НЕ ЗначениеЗаполнено(ПериодСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПравилоУплатыНалогов",        Правило);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря",      ПериодСобытия);
	ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Если ПропуститьОбновлениеСтатуса Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеСтатусаЗадачи");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюПлатежа(ДокументОбъект) Экспорт
	
	Если Не ДокументВыполняетЗадачу(ДокументОбъект) Или ДокументОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоУплатыНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПравилоУплатыНалогов");
	
	ПериодСобытияКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПериодСобытияКалендаря");
	
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		// Правило и период задачи переданы из помощника, такой сценарий не требует читать реквизиты платежа до изменения.
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымДокумента(ДокументОбъект.Ссылка);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("РеквизитыПлатежаДоИзменения", РеквизитыПлатежа);
	
КонецПроцедуры

Процедура ПриЗаписиПлатежа(ДокументОбъект) Экспорт
	
	Если Не ДокументВыполняетЗадачу(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымОбъекта(ДокументОбъект);
	РеквизитыПлатежаДоИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "РеквизитыПлатежаДоИзменения");
	
	УстановитьДополнительныеСвойстваОплатыАУСН(ДокументОбъект);
	
	ПараметрыРасчетаСтатусов = Новый Структура;
	
	ЗарегистрироватьИсполнениеЗадачиПриЗаписиПлатежа(
		РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства, ПараметрыРасчетаСтатусов);
		
	Если ЗарегистрированоИсполнениеЗадачи(РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства)
		И Не ИзменилисьРеквизитыПлатежаВлияющиеНаСтатусЗадачи(РеквизитыПлатежаДоИзменения, РеквизитыПлатежа) Тогда
		ПараметрыРасчетаСтатусов.Вставить("ПропуститьОбновлениеСвязиДокументЗадача", Истина);
	КонецЕсли;
	
	Если ИзменятьСтатусыЗадачПриЗаписиПлатежа(РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства) Тогда
		ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИсполнениеЗадачиПриЗаписиПлатежа(РеквизитыПлатежа, ДополнительныеСвойства, ПараметрыРасчетаСтатусов)
	
	ПравилоУплатыНалогов =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПравилоУплатыНалогов");
	ПериодСобытияКалендаря =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПериодСобытияКалендаря");
	РегистрацияВНалоговомОргане =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РегистрацияВНалоговомОргане");
		
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		
		// Правило и период задачи переданы из помощника, можно сразу регистрировать документ.
		ПараметрыРасчетаСтатусов.Вставить("ПропуститьОбновлениеСвязиДокументЗадача", Истина);
		
		ОплатаЗадолженности = ЭтоПогашениеНалоговойЗадолженности(РеквизитыПлатежа);
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			РеквизитыПлатежа.Организация,
			РеквизитыПлатежа.Ссылка,
			ПравилоУплатыНалогов,
			ПериодСобытияКалендаря,
			ОплатаЗадолженности,
			РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗарегистрированоИсполнениеЗадачи(РеквизитыПлатежа, ДополнительныеСвойства)
	
	ПравилоУплатыНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПравилоУплатыНалогов");
	ПериодСобытияКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПериодСобытияКалендаря");
	
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		
		// Правило и период задачи переданы из помощника, значит документ уже зарегистрирован в регистре.
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат ТекущаяЗадачаНалоговогоПлатежа(РеквизитыПлатежа) <> Неопределено;
	
КонецФункции

Функция ИзменилисьРеквизитыПлатежаВлияющиеНаСтатусЗадачи(СтарыеРеквизитыПлатежа, НовыеРеквизитыПлатежа)
	
	Если Не ЗначениеЗаполнено(СтарыеРеквизитыПлатежа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачалоКвартала(СтарыеРеквизитыПлатежа.Дата) <> НачалоКвартала(НовыеРеквизитыПлатежа.Дата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтролируемыеРеквизиты = "Организация, ВидОперации, Налог, ВидНалога, 
		|ПоказательПериода, НалоговыйПериод, ПоказательОснования, ПлатежнаяВедомость";
	
	СтарыеДанные = Новый Структура(КонтролируемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтарыеДанные, СтарыеРеквизитыПлатежа);
	УдалитьПустыеЭлементыСтруктуры(СтарыеДанные);
	
	НовыеДанные = Новый Структура(КонтролируемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(НовыеДанные, НовыеРеквизитыПлатежа);
	УдалитьПустыеЭлементыСтруктуры(НовыеДанные);
	
	Возврат Не ОбщегоНазначения.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
	
КонецФункции

Процедура УдалитьПустыеЭлементыСтруктуры(СтруктураДляОбработки)
	
	ПустыеКлючи = Новый Массив;
	Для Каждого КлючЗначение Из СтруктураДляОбработки Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ПустыеКлючи.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из ПустыеКлючи Цикл
		СтруктураДляОбработки.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменятьСтатусыЗадачПриЗаписиПлатежа(РеквизитыПлатежа, ДополнительныеСвойства)
	
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеСтатусаЗадачи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РеквизитыПлатежа.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		
		Возврат Истина;
		
	ИначеЕсли РеквизитыПлатежа.ВидДокумента = "ПлатежноеПоручение" Тогда
		
		ОбновлятьСвязанныеЗадачи = ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыПлатежа.ВидНалога);
		
		Если ОбновлятьСвязанныеЗадачи Тогда
			ТекущееСостояние = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(РеквизитыПлатежа.Ссылка);
			НовоеСостояние   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Состояние");
			
			// Обновление задач имеет смысл только при изменении оплаченного документа без изменения его состояния.
			// Если состояние изменилось - обновление задач вызывается при записи нового состояния.
			ИзменяетсяОплаченныйДокумент = (НовоеСостояние = ТекущееСостояние)
				И ТекущееСостояние = Перечисления.СостоянияБанковскихДокументов.Оплачено;
		Иначе
			ИзменяетсяОплаченныйДокумент = Ложь;
		КонецЕсли;
		
		ПлатежноеПоручениеВведеноНаОснованииСписания = ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыПлатежа);
		
		Возврат ОбновлятьСвязанныеЗадачи И ИзменяетсяОплаченныйДокумент И НЕ ПлатежноеПоручениеВведеноНаОснованииСписания;
		
	ИначеЕсли РеквизитыПлатежа.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
		
		// Обновлять статусы требуется, если платится налог, для которого все платежи влияют на состояние задач,
		// и уплата произведена непосредственно списанием с расчетного счета без платежного поручения.
		
		ОбновлятьСвязанныеЗадачи = ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыПлатежа.ВидНалога);
		
		ЭтоСписаниеБезПлатежногоПоручения =
			(НЕ ЗначениеЗаполнено(РеквизитыПлатежа.ДокументОснование)
				ИЛИ ТипЗнч(РеквизитыПлатежа.ДокументОснование) <> Тип("ДокументСсылка.ПлатежноеПоручение"));
		
		Возврат ОбновлятьСвязанныеЗадачи И ЭтоСписаниеБезПлатежногоПоручения;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДокументВыполняетЗадачу(ДокументОбъект)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ВидОперации") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоУплатаНалога(ДокументОбъект.ВидОперации)
		ИЛИ ЭтоВыплатаЗарплаты(ДокументОбъект.ВидОперации);
	
КонецФункции

Функция ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыПлатежа)
	
	Возврат РеквизитыПлатежа.ВидДокумента = "ПлатежноеПоручение"
		И ЗначениеЗаполнено(РеквизитыПлатежа.ДокументОснование)
		И ТипЗнч(РеквизитыПлатежа.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
	
КонецФункции

Функция ЭтоПогашениеНалоговойЗадолженности(РеквизитыПлатежа)
	
	ПоказательОснования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПлатежа, "ПоказательОснования", "");
	
	Возврат ПлатежиВБюджетКлиентСервер.ЭтоДобровольноеПогашениеЗадолженности(ПоказательОснования);
	
КонецФункции

Функция РеквизитыПлатежаПоДаннымОбъекта(ДокументОбъект)
	
	РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
	
	ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, ДокументОбъект);
	
	// Особенные реквизиты, не содержащиеся в объекте непосредственно.
	
	РеквизитыПлатежа.ВидДокумента = ДокументОбъект.Метаданные().Имя;
	
	Если ЗначениеЗаполнено(РеквизитыПлатежа.Налог) Тогда
		РеквизитыПлатежа.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПлатежа.Налог, "ВидНалога");
	КонецЕсли;
	
	Возврат РеквизитыПлатежа;
	
КонецФункции

Функция РеквизитыПлатежаПоДаннымДокумента(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		Возврат РеквизитыПлатежногоПоручения(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Возврат РеквизитыРасходногоКассовогоОрдера(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Возврат РеквизитыСписанияСРасчетногоСчета(ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РеквизитыПлатежногоПоручения(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""ПлатежноеПоручение"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	ДокументУплаты.КПППлательщика КАК КПППлательщика,
	|	ДокументУплаты.ПоказательПериода КАК ПоказательПериода,
	|	ДокументУплаты.ПоказательОснования КАК ПоказательОснования,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыРасходногоКассовогоОрдера(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""РасходныйКассовыйОрдер"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	"""" КАК КПППлательщика,
	|	ДокументУплаты.ПоказательПериода КАК ПоказательПериода,
	|	ДокументУплаты.ПоказательОснования КАК ПоказательОснования,
	|	ДокументУплаты.НалоговыйПериод КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыСписанияСРасчетногоСчета(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""СписаниеСРасчетногоСчета"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	"""" КАК КПППлательщика,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательОснования,
	|	ДокументУплаты.НалоговыйПериод КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи()
	
	ОписаниеРеквизитов = Новый Структура;
	
	ОписаниеРеквизитов.Вставить("Ссылка", Неопределено);
	ОписаниеРеквизитов.Вставить("ВидДокумента", "");
	ОписаниеРеквизитов.Вставить("ДокументОснование", Неопределено);
	ОписаниеРеквизитов.Вставить("Дата", '00010101');
	ОписаниеРеквизитов.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("ВидОперации", Неопределено);
	ОписаниеРеквизитов.Вставить("Налог", Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("ВидНалога", Перечисления.ВидыНалогов.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("КПППлательщика", "");
	ОписаниеРеквизитов.Вставить("ПоказательПериода", "");
	ОписаниеРеквизитов.Вставить("НалоговыйПериод", '00010101');
	ОписаниеРеквизитов.Вставить("ПлатежнаяВедомость", Неопределено);
	ОписаниеРеквизитов.Вставить("ПоказательОснования", "");
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

#Область РегистрацияУведомлений

Процедура УстановитьСвойстваУведомленияПриРегистрации(ДокументОбъект, Правило, ПериодСобытия, ПропуститьОбновлениеСтатуса = Ложь, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Правило) ИЛИ НЕ ЗначениеЗаполнено(ПериодСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПравилоУведомления",          Правило);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря",      ПериодСобытия);
	
	Если Не ЭтоПравилоЕдиногоНалоговогоСчета(Правило) Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	КонецЕсли;
	
	Если ПропуститьОбновлениеСтатуса Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеСтатусаЗадачи");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиУведомления(ДокументОбъект) Экспорт
	
	РеквизитыУведомления = РеквизитыУведомленияПоДаннымОбъекта(ДокументОбъект);
	РеквизитыУведомленияДоИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "РеквизитыУведомленияДоИзменения");
	
	ПараметрыРасчетаСтатусов = Новый Структура;
	
	ЗарегистрироватьИсполнениеЗадачиПриЗаписиУведомления(
		РеквизитыУведомления, ДокументОбъект.ДополнительныеСвойства, ПараметрыРасчетаСтатусов);
	
КонецПроцедуры

Процедура ЗарегистрироватьИсполнениеЗадачиПриЗаписиУведомления(РеквизитыУведомления, ДополнительныеСвойства, ПараметрыРасчетаСтатусов)
	
	ПравилоУведомления =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПравилоУведомления");
	ПериодСобытияКалендаря =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПериодСобытияКалендаря");
	РегистрацияВНалоговомОргане =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РегистрацияВНалоговомОргане");
	
	Если ЗначениеЗаполнено(ПравилоУведомления) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		
		// Правило и период задачи переданы из помощника, можно сразу регистрировать документ.
		ПараметрыРасчетаСтатусов.Вставить("ПропуститьОбновлениеСвязиДокументЗадача", Истина);
		
		РегистрыСведений.ЗадачиБухгалтераУведомления.ДобавитьЗаписьПравила(
			РеквизитыУведомления.Организация,
			РеквизитыУведомления.Ссылка,
			ПравилоУведомления,
			ПериодСобытияКалендаря,
			РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыУведомленияПоДаннымОбъекта(ДокументОбъект)
	
	РеквизитыУведомления = НовыйРеквизитыУведомленияВлияющиеНаСтатусЗадачи();
	
	ЗаполнитьЗначенияСвойств(РеквизитыУведомления, ДокументОбъект);
	ЗаполнитьЗначенияСвойств(РеквизитыУведомления, ДокументОбъект.Налоги[0]);
	
	// Особенные реквизиты, не содержащиеся в объекте непосредственно.
	
	РеквизитыУведомления.ВидДокумента = ДокументОбъект.Метаданные().Имя;
	
	Если ЗначениеЗаполнено(РеквизитыУведомления.Налог) Тогда
		РеквизитыУведомления.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУведомления.Налог, "ВидНалога");
	КонецЕсли;
	
	Возврат РеквизитыУведомления;
	
КонецФункции

Функция НовыйРеквизитыУведомленияВлияющиеНаСтатусЗадачи()
	
	ОписаниеРеквизитов = Новый Структура;
	
	ОписаниеРеквизитов.Вставить("Ссылка", Неопределено);
	ОписаниеРеквизитов.Вставить("ВидДокумента", "");
	ОписаниеРеквизитов.Вставить("Дата",        '00010101');
	ОписаниеРеквизитов.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("Налог",       Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("ВидНалога",   Перечисления.ВидыНалогов.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("КПП",         "");
	ОписаниеРеквизитов.Вставить("КодБК",       "");
	ОписаниеРеквизитов.Вставить("КодПоОКТМО",  "");
	ОписаниеРеквизитов.Вставить("Уведомление", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти
