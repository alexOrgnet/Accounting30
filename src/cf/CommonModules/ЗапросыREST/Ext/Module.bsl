#Область ПрограммныйИнтерфейс

// Код состояния, обозначающий успешный запрос (rfc 7231: 200 OK)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСтандартногоСостояния() Экспорт
	
	Возврат 200;
	
КонецФункции

// Код состояния, обозначающий временное отсутсвие данных (rfc 7231: 204 No Content)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияОтсутствуетСодержимое() Экспорт
	
	Возврат 204;
	
КонецФункции

// Код состояния, обозначающий, что запрошенный ресурс был окончательно перемещён (rfc 7231: 301 Moved Permanently)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияРесурсОкончательноПеремещен() Экспорт
	
	Возврат 301;
	
КонецФункции

// Код состояния, обозначающий плохой запрос (rfc 7231: 400 Bad Request)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияПлохойЗапрос() Экспорт
	
	Возврат 400;
	
КонецФункции

// Код состояния, обозначающий ошибку аутентификации (rfc 7231: 401 Unauthirized)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНеАутентифицирован() Экспорт
	
	Возврат 401;
	
КонецФункции

// Код состояния, обозначающий отсутствие полномочий (rfc 7231: 403 Forbidden)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНеАвторизован() Экспорт
	
	Возврат 403;
	
КонецФункции

// Код состояния, обозначающий отсутствие данных (rfc 7231: 404 Not Found)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНетДанных() Экспорт
	
	Возврат 404;
	
КонецФункции

// Код состояния, обозначающий внутреннюю ошибку сервера (rfc 7231: 500 Internal Server Error)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияВнутренняяОшибкаСервера() Экспорт
	
	Возврат 500;
	
КонецФункции

// Конструктор коллекции, описывающей подключение к HTTP (REST) API.
// Используется для сокращения параметров в ВыполнитьМетодСервиса
// 
// Возвращаемое значение:
//  Структура
//
Функция НовыйПодключение() Экспорт
	
	Подключение = Новый Структура;
	
	Подключение.Вставить("АдресСервиса", "");
	Подключение.Вставить("ПространствоИмен", "");
	Подключение.Вставить("Логин", "");
	Подключение.Вставить("Пароль", "");
	Подключение.Вставить("Токен", ""); // токен аутентификации приложения, если не используется jwt-токен.
	Подключение.Вставить("ЗаголовкиАутентификации", Новый Соответствие);
	Подключение.Вставить("ИсточникЗапроса", ""); // имя механизма, который выполняет запрос, для записи в ЖР.
	
	Возврат Подключение;
	
КонецФункции

// Выполняет метод HTTP (REST) API.
//
// Параметры:
//  Подключение - Структура - см. НовыйПодключение.
//  Метод       - Строка - имя HTTP-метода (например, "POST", "GET", "MERGE").
//  Ресурс      - Строка - имя ресурса HTTP-сервиса.
//  Данные      - Структура - данные, передаваемые в теле запроса в виде json-объекта.
// 
// Возвращаемое значение:
//  Структура - см. НовыйОтветСервиса
//  Неопределено - вызов метода закончился неудачей. Информация записана в журнал
//
Функция ВыполнитьМетодСервиса(Подключение, Метод, Ресурс, Данные = Неопределено) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Подключение.АдресСервиса);
	
	Прокси               = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ЭлементыАдреса.Схема);
	Таймаут              = 20;
	ЗащищенноеСоединение = Неопределено;
	
	Если НРег(ЭлементыАдреса.Схема) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		ЭлементыАдреса.Хост,
		ЭлементыАдреса.Порт,
		Подключение.Логин,
		Подключение.Пароль,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение,
		Ложь); // Аутентификация ОС не используется

	ПутьНаСервере = Подключение.ПространствоИмен;
	Если ЗначениеЗаполнено(ЭлементыАдреса.ПутьНаСервере) Тогда
		ПутьНаСервере = СтрШаблон("%1/%2", ЭлементыАдреса.ПутьНаСервере, ПутьНаСервере);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ресурс) Тогда
		ПутьНаСервере = СтрШаблон("%1/%2", ПутьНаСервере, Ресурс);
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(ПутьНаСервере);
	
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("accept",       "application/json");
	
	КлючиЗаголовковАутентификации = Новый Массив;
	Если ЗначениеЗаполнено(Подключение.ЗаголовкиАутентификации) Тогда
		Для Каждого Заголовок Из Подключение.ЗаголовкиАутентификации Цикл
			КлючиЗаголовковАутентификации.Добавить(Заголовок.Ключ);
			Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		ТекстДанные = ?(ТипЗнч(Данные) = Тип("Строка"), Данные, ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Данные));
		Запрос.УстановитьТелоИзСтроки(ТекстДанные);
	КонецЕсли;
	
	ИмяСобытияЖурнала = Подключение.ИсточникЗапроса;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	Исключение
		
		// В нештатной ситуации записываем протокол вне зависимости от настроек
		ЗаписатьЗапрос(Соединение, Метод, Запрос, КлючиЗаголовковАутентификации, ИмяСобытияЖурнала);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Результат = НовыйОтветСервиса();
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.Текст        = Ответ.ПолучитьТелоКакСтроку();
	
	Если Не ПустаяСтрока(Результат.Текст) Тогда
		
		ОжидаетсяJSON = Ложь;
		ТипСодержимого = Ответ.Заголовки.Получить("Content-Type");
		ОжидаетсяJSON = (ТипЗнч(ТипСодержимого) = Тип("Строка") 
			И СтрНайти(ТипСодержимого, "application/json") > 0);
		
		Попытка
			Результат.Содержимое = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(Результат.Текст);
		Исключение
			
			// В нештатной ситуации записываем протокол вне зависимости от настроек
			ЗаписатьЗапрос(Соединение, Метод, Запрос, КлючиЗаголовковАутентификации, ИмяСобытияЖурнала);
			ЗаписатьОтвет(Ответ, Результат, ИмяСобытияЖурнала);
			
			// При инфраструктурных проблемах содержимое может не быть json-объектом:
			// это не является ошибкой само по себе, поэтому записывается предупреждение.
			УровеньЖурнала = УровеньЖурналаРегистрации.Примечание;
			Если ОжидаетсяJSON Тогда
				УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурнала,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗаписыватьПротокол() Тогда
		ЗаписатьЗапрос(Соединение, Метод, Запрос, КлючиЗаголовковАутентификации, ИмяСобытияЖурнала);
		ЗаписатьОтвет(Ответ, Результат, ИмяСобытияЖурнала);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйОтветСервиса()
	
	Ответ = Новый Структура;
	
	Ответ.Вставить("КодСостояния", КодСтандартногоСостояния());
	Ответ.Вставить("Текст",        "");
	Ответ.Вставить("Содержимое",   Новый Структура);
	
	Возврат Ответ;
	
КонецФункции

Функция URI(Соединение, Запрос, ЗаписыватьПароли)
	
	ЭлементыАдреса = Новый Массив;
	
	// Схема
	Если Соединение.Защищенное Тогда
		Схема = "https";
	Иначе
		Схема = "http";
	КонецЕсли;
	ЭлементыАдреса.Добавить(СтрШаблон("%1://", Схема));
	
	// Аутентификация
	Если ЗаписыватьПароли Тогда
		ЭлементыАдреса.Добавить(СтрШаблон("%1:%2@", Соединение.Пользователь, Соединение.Пароль));
	КонецЕсли;
	
	// Хост
	ЭлементыАдреса.Добавить(Соединение.Сервер);
	
	// Порт
	Если ЗначениеЗаполнено(Соединение.Порт) Тогда
		ЭлементыАдреса.Добавить(СтрШаблон(":%1", Соединение.Порт));
	КонецЕсли;
	
	// АдресРесурса
	Если Не ПустаяСтрока(Запрос.АдресРесурса) Тогда
		ЭлементыАдреса.Добавить(СтрШаблон("/%1", Запрос.АдресРесурса));
	КонецЕсли;
	
	Возврат СтрСоединить(ЭлементыАдреса);
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(Действие = "")
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'ЗапросыREST'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

#Область ЗаписьОтладочнойИнформации

Функция ЗаписыватьПротокол()
	
	Возврат ОбщегоНазначения.РежимОтладки();
	
КонецФункции

Функция ЗаписыватьПароли()
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаписатьЗапрос(Соединение, Метод, Запрос, ЗаголовкиПаролей, ИмяСобытияЖурнала)
	
	Протокол = Новый Массив;
	
	ЗаписыватьПароли = ЗаписыватьПароли();
	ЗаголовкиПаролей.Добавить("Authorization");
	
	Адрес = URI(Соединение, Запрос, ЗаписыватьПароли);
	
	Протокол.Добавить(СтрШаблон("%1 %2", Метод, Адрес));
	Для Каждого Заголовок Из Запрос.Заголовки Цикл
		Если Не ЗаписыватьПароли И ЗаголовкиПаролей.Найти(Заголовок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Протокол.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
	КонецЦикла;
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Протокол.Добавить("");
		Протокол.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИмяСобытияЖурнала),
		УровеньЖурналаРегистрации.Информация,
		,
		НСтр("ru = 'Запрос'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(Протокол, Символы.ПС));
	
КонецПроцедуры

Процедура ЗаписатьОтвет(Ответ, Результат, ИмяСобытияЖурнала)
	
	Протокол = Новый Массив;
	
	Протокол.Добавить(СтрШаблон("HTTP/1.1 %1", Результат.КодСостояния));
	Для Каждого Заголовок Из Ответ.Заголовки Цикл
		Протокол.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
	КонецЦикла;
	
	Если Не ПустаяСтрока(Результат.Текст) Тогда
		Протокол.Добавить("");
		Протокол.Добавить(Результат.Текст);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИмяСобытияЖурнала),
		УровеньЖурналаРегистрации.Информация,
		,
		НСтр("ru = 'Ответ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(Протокол, Символы.ПС));
	
	КонецПроцедуры

#КонецОбласти

#КонецОбласти
