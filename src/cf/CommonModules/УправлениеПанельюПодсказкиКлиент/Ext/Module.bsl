
#Область СлужебныйПрограммныйИнтерфейс

// Обработчик события обработки оповещения формы
//
// Параметры:
//   ИмяСобытия - Строка - Имя события. Может быть использовано для идентификации сообщений принимающими их формами
//   Параметр - Любое значение - Параметр сообщения. Могут быть переданы любые данные
//   Источник - Любое значение - Источник события
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	НаименованиеРаздела = УправлениеПанельюПодсказкиКлиентСервер.НаименованиеОткрытогоРаздела(Форма);
	
	Если ОбрабатыватьИзменениеОрганизации(ИмяСобытия, НаименованиеРаздела) Или ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		// Включена доп. функциональность - необходимо обновить подсказки по роликам и рекламе функций
		Элементы = Форма.Элементы;
		ОписаниеПодсказокРаздела = УправлениеПанельюПодсказкиВызовСервера.ОписаниеПодсказокРаздела(НаименованиеРаздела);
		
		ЭтоРазделСписка = УправлениеПанельюПодсказкиКлиентСервер.ЭтоРазделСписка(НаименованиеРаздела);
		
		Если ЭтоРазделСписка Тогда
			Элементы.ДополнительнаяФункциональность.Заголовок = ОписаниеПодсказокРаздела.ДополнительнаяФункциональность;
		КонецЕсли;
		
		МаксимальноеКоличествоСоветовВПанели = УправлениеПанельюПодсказкиКлиентСервер.МаксимальноеКоличествоСоветовВПанели();
		Для Индекс = 1 По МаксимальноеКоличествоСоветовВПанели Цикл
			ИмяЭлемента = СтрШаблон("СоветПоРаботе%1", Индекс);
			Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Элементы[ИмяЭлемента].Заголовок = ОписаниеПодсказокРаздела[ИмяЭлемента];
			Элементы[ИмяЭлемента].Видимость = ЗначениеЗаполнено(ОписаниеПодсказокРаздела[ИмяЭлемента]);
		КонецЦикла;
		
		// Видеоролики
		ЕстьВидео = Ложь;
		МаксимальноеКоличествоВидеороликов = УправлениеПанельюПодсказкиКлиентСервер.МаксимальноеКоличествоВидеороликовВПанели();
		Для ИндексВидео = 1 По МаксимальноеКоличествоВидеороликов Цикл
			ИмяЭлементаВидео = СтрШаблон("Видеоинструкция%1", ИндексВидео);
			ИмяГруппыЭлементаВидео = СтрШаблон("ГруппаВидеоинструкция%1", ИндексВидео);
			ЗначениеВидео = ОписаниеПодсказокРаздела[ИмяЭлементаВидео];
			Элементы[ИмяЭлементаВидео].Заголовок = ЗначениеВидео;
			Элементы[ИмяГруппыЭлементаВидео].Видимость = ЗначениеЗаполнено(ЗначениеВидео);
			Если ЗначениеЗаполнено(ЗначениеВидео) Тогда
				ЕстьВидео = Истина;	
			КонецЕсли;
		КонецЦикла;
		Элементы.НеЗнакомыСПрограммой.ОтображатьЗаголовок = ЕстьВидео;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия гиперссылки для форматированной строки НавигацияВПрограмме
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - Форма, в которой располагается навигационная ссылка
//   НавигационнаяСсылка  - Строка - Текст навигационной ссылки
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события
//
Процедура НавигацияВПрограммеОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "РасчетыСПоставщикамиИПокупателями" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.РасчетыСПокупателямиИПоставщиками.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	КонецЕсли;
	
	УправлениеПанельюПодсказкиКлиентСервер.ЗаписатьОперациюБизнесСтатистики(
		СтрШаблон("НавигацияВПрограмме.%1",  ПредставлениеНавигационнойСсылки(НавигационнаяСсылка)));
	
КонецПроцедуры

// Обработчик события нажатия гиперссылки для форматированной строки ДополнительнаяФункциональность
//
// Параметры:
//   Элементы             - ВсеЭлементыФормы - Элементы формы, в которой располагается навигационная ссылка
//   НавигационнаяСсылка  - Строка - Текст навигационной ссылки
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события
//
Процедура ДополнительнаяФункциональностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеПанельюПодсказкиКлиентСервер.ЗаписатьОперациюБизнесСтатистики("ДополнительнаяФункциональность");
	
	ПараметрыФормы = Новый Структура("ТекущаяСтраница", НавигационнаяСсылка);
	ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Обработчик события нажатия гиперссылки совета по работе с программой
//
// Параметры:
//   Элементы             - ВсеЭлементыФормы - Элементы формы, в которой располагается навигационная ссылка
//   НавигационнаяСсылка  - Строка - Текст навигационной ссылки
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события
//
Процедура СоветПоРаботеОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Организация", Форма.ОсновнаяОрганизация);
		ПараметрыВыполнения.Вставить("Банк", УправлениеПанельюПодсказкиВызовСервера.ЗначениеРеквизитаОбъекта(Форма.ОсновнойБанковскийСчет, "Банк"));
		
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ПредложениеПодключить1СДиректБанк", ПараметрыВыполнения);
		
	ИначеЕсли НавигационнаяСсылка = "БанковскиеВыписки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОтключитьОжиданиеПриОткрытииФорм", Истина);
		ОткрытьФорму("ЖурналДокументов.Деньги.Форма.БанковскиеВыписки", ПараметрыВыполнения, Форма,
			Форма.УникальныйИдентификатор, ,
			"e1cib/command/ЖурналДокументов.Деньги.Команда.БанковскиеВыписки");
		
	ИначеЕсли НавигационнаяСсылка = "СчетПокупателю" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "РеализацияТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "РеализацияУслуг" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "СчетПоставщику" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "ПоступлениеТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "ПоступлениеУслуг" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыВыполнения, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "ЗагрузитьТовары" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
			"Обработка.ЗагрузкаНоменклатурыИзФайла.Форма",
			Форма.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылка = "ЗагрузитьКонтрагенты" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
			"Обработка.ЗагрузкаКонтрагентовИзФайла.Форма",
			Форма.УникальныйИдентификатор);
			
	ИначеЕсли НавигационнаяСсылка = "НастроитьУчетПоДоговорам" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаУчетПоДоговорам");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеЗагрузитьИзФайла" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ЗагрузитьИзФайла");
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеИзменитьТовары" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ИзменитьТовары");
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьВнешняяТорговля" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаВнешняяТорговля");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьРасчеты" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаРасчеты");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьПроведениеДокументов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ПроведениеДокументов");
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьТорговля" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаТорговля");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеДобавитьИзСчета" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ДобавитьИзСчета");
		
	ИначеЕсли НавигационнаяСсылка = "ПолеСтатусДокумента" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("СтатусДокумента");
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеПодборТовары" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ПодборТовары");
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьЗапасы" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаЗапасы");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеТоварыСкопироватьСтроки" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ТоварыСкопироватьСтроки");
		
	ИначеЕсли НавигационнаяСсылка = "ДействиеТоварыВставитьСтроки" Тогда
		
		СтандартнаяОбработка = Ложь;
		Форма.ВыделитьЭлементПодсказкиНаФорме("ТоварыВставитьСтроки");
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьПланированиеПлатежей" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТекущаяСтраница", "ГруппаПланированиеПлатежей");
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма", ПараметрыФормы);
		
	КонецЕсли;
	
	УправлениеПанельюПодсказкиКлиентСервер.ЗаписатьОперациюБизнесСтатистики(
		СтрШаблон("СоветПоРаботе.%1", ПредставлениеНавигационнойСсылки(НавигационнаяСсылка)));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеНавигационнойСсылки(НавигационнаяСсылка)
	
	Результат = СтрЗаменить(НавигационнаяСсылка, "e1cib/app/", "");
	Результат = СтрЗаменить(Результат, "e1cib/command/", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОбрабатыватьИзменениеОрганизации(ИмяСобытия, НаименованиеРаздела)
	
	Если ИмяСобытия <> "Запись_Организации" Или Не ЗначениеЗаполнено(НаименованиеРаздела) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НаименованиеРаздела = УправлениеПанельюПодсказкиКлиентСервер.РазделДеньги()
		Или НаименованиеРаздела = УправлениеПанельюПодсказкиКлиентСервер.РазделДокументы();
	
КонецФункции

#КонецОбласти
