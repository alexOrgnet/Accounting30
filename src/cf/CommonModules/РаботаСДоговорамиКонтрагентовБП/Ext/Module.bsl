#Область ПрограммныйИнтерфейс

// Устанавливает договор контрагента по умолчанию с учетом условий отбора. 
// Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента, ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК Основной,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 1
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|			И ДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
	|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
	|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной УБЫВ,
	|	Приоритет УБЫВ";
	
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ТекстФильтра = "ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
	
	Если ВестиУчетПоДоговорам Тогда
		ТекстФильтра = ТекстФильтра + "
		| И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		| И ДоговорыКонтрагентов.ДоговорЗакрыт = ЛОЖЬ";
	КонецЕсли;
	
	Если СписокВидовДоговора <> Неопределено Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
		Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныеПараметры Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
				| И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НайденОдинДоговор = Выборка.Количество() = 1;
		// Если ведется учет по договорам, то выбираем либо основной, либо единственный договор
		Если ВестиУчетПоДоговорам Тогда
			Если Выборка.Основной Или НайденОдинДоговор Тогда
				НовыйДоговор = Выборка.Ссылка;
			КонецЕсли;
		// Если учет по договорам не ведется, то выбираем только основной договор
		ИначеЕсли Выборка.Основной Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДополнительныеПараметры.Вставить("ЕстьПодходящиеДоговора", Истина);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	ВидДоговораСовпадает = Истина;
	Если СписокВидовДоговора <> Неопределено И ЗначениеЗаполнено(РеквизитыДоговора.ВидДоговора) Тогда
		Если ТипЗнч(СписокВидовДоговора) = Тип("Массив") Тогда
			ВидДоговораСовпадает = СписокВидовДоговора.Найти(РеквизитыДоговора.ВидДоговора) <> Неопределено;
		ИначеЕсли ТипЗнч(СписокВидовДоговора) = Тип("СписокЗначений") Тогда
			ВидДоговораСовпадает = СписокВидовДоговора.НайтиПоЗначению(РеквизитыДоговора.ВидДоговора) <> Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаВВалютеСовпадает = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОплатаВВалюте") Тогда
			ОплатаВВалютеСовпадает = РеквизитыДоговора.ОплатаВВалюте = ДополнительныеПараметры.ОплатаВВалюте.ЗначениеОтбора;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ВалютаВзаиморасчетов") Тогда
			ОплатаВВалютеСовпадает = ОплатаВВалютеСовпадает
				И РеквизитыДоговора.ВалютаВзаиморасчетов = ДополнительныеПараметры.ВалютаВзаиморасчетов.ЗначениеОтбора;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйДоговор)
		И (Не ЗначениеЗаполнено(ДоговорКонтрагента)
			Или РеквизитыДоговора.Владелец <> ВладелецДоговора
			Или РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора
			Или Не ВидДоговораСовпадает
			Или Не ОплатаВВалютеСовпадает) Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет договор в объекте, в случае если не ведется учет по договорам
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, в котором необходимо заполнить договор
//
Процедура ЗаполнитьДоговорПередЗаписью(Объект) Экспорт

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = ДоговорКонтрагентаИзОбъекта(Объект)
	
КонецПроцедуры

// Заполняет договор в табличной части, в случае если не ведется учет по договорам
//
// Параметры:
// ТабличнаяЧасть - Табличная часть документа, в которой необходимо заполнить договор 
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, из которого берутся данные для заполнения договора
// 
Процедура ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ТабличнаяЧасть, Объект) Экспорт
	
	БезЗакрывающихДокументов = Ложь;
	ЕстьРеквизитБезЗакрывающихДокументов = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Объект, "БезЗакрывающихДокументов");
	Если ЕстьРеквизитБезЗакрывающихДокументов Тогда
		БезЗакрывающихДокументов = Объект.БезЗакрывающихДокументов;
	КонецЕсли;
	
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") И Не БезЗакрывающихДокументов;
	
	Если ВестиУчетПоДоговорам Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Владелец");
	
	ЕстьКонтрагентВСтроке = ЕстьКонтрагентВСтроке(Объект);
	Если НЕ ЕстьКонтрагентВСтроке Тогда;
		ПараметрыДоговора.Владелец = Объект.Контрагент;
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ЕстьКонтрагентВСтроке Тогда
			ПараметрыДоговора.Владелец = Строка.Контрагент;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") И БезЗакрывающихДокументов
			И ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			Продолжить;
		Иначе
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		Если МожноСоздатьДоговор(ПараметрыДоговора) И 
			НЕ УстановитьДоговорКонтрагента(
				ДоговорКонтрагента,
				ПараметрыДоговора.Владелец, 
				ПараметрыДоговора.Организация, 
				ПараметрыДоговора.ВидДоговора) Тогда
			
			ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
			ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
			
		КонецЕсли;
		Строка.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает договор в качестве основного в регистре сведений "Основные договоры контрагента"
// 
// Параметры:
// Договор - Договор, который необходимо установить как основной
//
Процедура УстановитьОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

// Если договор используется в качестве основного, удаляет запись из регистра сведений "Основные договоры контрагента"
// 
// Параметры:
//   Договор - Договор, который перестает быть основным
//
Процедура НеИспользоватьКакОсновнойДоговор(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, ВидДоговора, Владелец");
	
	МенеджерЗаписи = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = ПараметрыДоговора.Организация;
	МенеджерЗаписи.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	МенеджерЗаписи.Контрагент  = ПараметрыДоговора.Владелец;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.Договор = Договор Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что договор установлен в качестве основного в регистре сведений "Основные договоры контрагента"
//
// Параметры:
// Договор - Договор, который необходимо проверить
//
Функция ЭтоОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Прочитать();
	
	Возврат НоваяЗапись.Выбран() И НоваяЗапись.Договор = Договор;
	
КонецФункции

Функция ЕстьОсновнойДоговорКонтрагента(ВидыДоговоров, Организация, Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора В(&ВидыДоговоров)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция МожноСоздатьДоговор(ПараметрыДоговора)

	Возврат ЗначениеЗаполнено(ПараметрыДоговора.Владелец) И
		ЗначениеЗаполнено(ПараметрыДоговора.Организация) И 
		ТипЗнч(ПараметрыДоговора.Владелец) = Тип("СправочникСсылка.Контрагенты");

КонецФункции

// Возвращает договор, который найден или создан как основной
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка или Структура - Документ или структура - источник данных для договора
//			Структура должна содержать свойства:
//				- Контрагент - <СправочникСсылка.ДоговорыКонтрагентов>
//				- Организация - <СправочникСсылка.Организации>
// В случае передачи структуры вид созданного/найденного договора будет Прочее
//
Функция ДоговорКонтрагентаИзОбъекта(Объект) Экспорт

	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец",    Объект.Контрагент);
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если МожноСоздатьДоговор(ПараметрыДоговора) И 
		НЕ УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, 
			ПараметрыДоговора.Владелец, 
			ПараметрыДоговора.Организация, 
			ПараметрыДоговора.ВидДоговора) Тогда
			
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

// Определяет вид договора по умолчанию для заполнения в документах.
//
// Параметры:
//   Объект - ДокументОбъект, Структура - объект документа или структура реквизитов документа.
//   ТипОбъекта - Тип - тип значения объекта документа. Передается,
//                      если в качестве значения параметра Объект передается Структура.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыДоговоровКонтрагентов - вид договора по умолчанию.
Функция ВидДоговораПоОбъекту(Объект, ТипОбъекта = Неопределено) Экспорт
	
	Если ТипОбъекта = Неопределено Тогда
		ТипОбъекта = ТипЗнч(Объект);
	КонецЕсли;
	
	ПрефиксТипа = ?(Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта), "ДокументСсылка", "ДокументОбъект");
	
	// Типы документов, использующие вид договора - с покупателем
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.РеализацияОтгруженныхТоваров", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.АктОбОказанииПроизводственныхУслуг", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ОказаниеУслуг", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.СчетНаОплатуПокупателю", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ОтчетОРозничныхПродажах", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПередачаНМА", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПередачаОС", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ОплатаПлатежнойКартой", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.НачислениеПеней", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПередачаОСВАренду", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ВозвратОСОтАрендатора", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.РеализацияУслугПоПереработке", ПрефиксТипа)));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - с поставщиком
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеДопРасходов", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.АвансовыйОтчет", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ВыкупПредметовЛизинга", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.Доверенность", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ЗаявлениеОВвозеТоваров", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеИзПереработки", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПринятиеКУчетуОС", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеВАренду", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПрекращениеАренды", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.СчетНаОплатуПоставщика", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ИзменениеОтраженияРасходовПоАренднымПлатежамОС", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ОперацияСБилетом", ПрефиксТипа)));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - прочее
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеДенежныхДокументов", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ВыдачаДенежныхДокументов", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ГТДИмпорт", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ОтчетОператораСистемыПлатон", ПрефиксТипа)));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - с факторинговой компанией
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПередачаЗадолженностиНаФакторинг", ПрефиксТипа)));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;
	КонецЕсли;

	
	// Типы документов, вид договора в которых можно следует определять по виду операции
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеНаРасчетныйСчет", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПоступлениеТоваровУслуг", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.СписаниеСРасчетногоСчета", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ВозвратТоваровПоставщику", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПередачаТоваров", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПлатежноеПоручение", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ПриходныйКассовыйОрдер", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.РасходныйКассовыйОрдер", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.ВозвратТоваровОтПокупателя", ПрефиксТипа)));
	МассивТиповДокументов.Добавить(Тип(СтрШаблон("%1.РеализацияТоваровУслуг", ПрефиксТипа)));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		
		ВидОперации = Объект.ВидОперации;
		
		// Виды операций, в которых используется вид договора - с покупателем
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
		// Передача товаров
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
		// Возврат товаров от покупателя
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары);
		// Реализация товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Товары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с поставщиком
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование);
		// Передача товаров
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
		// Поступление товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Топливо);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга);
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - прочее
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с факторинговой компанией
		
		МассивВидовОпераций = Новый Массив;
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании);
		// Поступление товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с комиссионером
		
		МассивВидовОпераций = Новый Массив;
		// Возврат товаров от покупателя
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары);
		// Реализация товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПередачаТоваров);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с комитентом на закупку
		
		МассивВидовОпераций = Новый Массив;
		
		// Передача товаров
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим вид операции по умолчанию. Выше описаны все типовые случаи, в случае если они не подходят используем прочий вид договора.
	Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;

КонецФункции

// Проверяет наличие у контрагента хотя бы одного договора по данной организации
//
// Параметры:
// Организация - СправочникСсылка.Организации 
// Контрагент - СправочникСсылка.Контрагенты 
//
// Возвращаемое значение:
// Булево - Истина, если для переданных Контрагента и Организации нет ни одного договора
Функция КонтрагентБезДоговоров(Организация, Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация";
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой()
	
КонецФункции

// Проверяет возможность, уместность предложить в списке выбора создать договор.
// Создавать новый (первый) договор в этот момент уместно, если еще ни одного договора с этим контрагентом в программе не отражено.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации 
// 	Контрагент - СправочникСсылка.Контрагенты 
//
// Возвращаемое значение:
// 	Булево - Истина - можно предложить новый договор
//
Функция ПредлагатьНовыйДоговор(Организация, Контрагент) Экспорт
	
	Возврат ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.ДоговорыКонтрагентов)
		И КонтрагентБезДоговоров(Организация, Контрагент);
	
КонецФункции

// Записывает в регистр СтавкиНДСПоДокументу значение СпособаЗаполненияСтавкиНДС по документу.
// Определяет СпособЗаполненияСтавкиНДС по СуммеНДС в документе.
//
// Параметры:
//    ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор по которому надо записать значение.
//    ДокументСсылка - документ, из которого происходит вызов процедуры.
//    ЕстьСуммаНДС - булево - наличие НДС, необязательный параметр.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ДоговорКонтрагента, ДокументСсылка, ЕстьСуммаНДС = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СпособЗаполненияСтавкиНДС,Организация,Владелец");
	Если РеквизитыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Возврат;
	КонецЕсли;

	ЕстьНДС = ?(ЗначениеЗаполнено(ЕстьСуммаНДС), ЕстьСуммаНДС, ДокументСНДС(ДокументСсылка));

	Если ЕстьНДС Тогда
		НовыйСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	Иначе
		НовыйСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС;
	КонецЕсли;

	СохраняемыеПараметры = Новый Структура();
	СохраняемыеПараметры.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СохраняемыеПараметры.Вставить("Организация", РеквизитыДоговора.Организация);
	СохраняемыеПараметры.Вставить("Контрагент", РеквизитыДоговора.Владелец);
	СохраняемыеПараметры.Вставить("СпособЗаполненияСтавкиНДС", НовыйСпособЗаполненияСтавкиНДС);
	СохраняемыеПараметры.Вставить("СпособВыставленияДокументов");
	
	// Проверяем, что сейчас записано в регистре
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС,
	|	ПараметрыНДСПоДоговорам.СпособВыставленияДокументов КАК СпособВыставленияДокументов,
	|	ПараметрыНДСПоДоговорам.Организация КАК Организация,
	|	ПараметрыНДСПоДоговорам.Контрагент КАК Контрагент,
	|	ПараметрыНДСПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.ПараметрыНДСПоДоговорам КАК ПараметрыНДСПоДоговорам
	|ГДЕ
	|	ПараметрыНДСПоДоговорам.Организация = &Организация
	|	И ПараметрыНДСПоДоговорам.Контрагент = &Контрагент
	|	И ПараметрыНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Для Каждого ПараметрЗапроса Из СохраняемыеПараметры Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СпособЗаполненияСтавкиНДС = НовыйСпособЗаполненияСтавкиНДС Тогда
			Возврат;
		КонецЕсли;
		СохраняемыеПараметры.СпособВыставленияДокументов = Выборка.СпособВыставленияДокументов;
	КонецЕсли;

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыНДСПоДоговорам");
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	Блокировка.Заблокировать();

	Попытка
		МенеджерЗаписиПараметрыНДС = РегистрыСведений.ПараметрыНДСПоДоговорам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиПараметрыНДС, СохраняемыеПараметры);
		МенеджерЗаписиПараметрыНДС.Записать(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

// Записывает значение СпособЗаполненияСтавкиНДС по документам оплаты.
//
// Параметры:
// РасшифровкаПлатежа - таблица РасшифровкаПлатежа из документа оплаты
// ДокументСсылка - документ, из которого вызывается процедура.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(РасшифровкаПлатежа, ДокументСсылка) Экспорт
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
		ТаблицаДоговоров = ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа);
		Для каждого ТекСтрока Из ТаблицаДоговоров Цикл
		
			ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(
				ТекСтрока.ДоговорКонтрагента, Неопределено, ТекСтрока.СуммаНДС > 0);
		КонецЦикла;

КонецПроцедуры

// Определяет, что в переданном документе предъявлена сумма НДС.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - ссылка на документ
//
// Возвращаемое значение:
//     Булево - Истина - сумма НДС ненулевая, Ложь - нулевая
Функция ДокументСНДС(ДокументСсылка) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.СчетФактураПолученный.ЕстьФункцияНаличиеСуммыНДС(ДокументСсылка) Тогда
		Возврат Документы[ДокументСсылка.Метаданные().Имя].НаличиеСуммыНДС(ДокументСсылка);
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", ДокументСсылка.Метаданные()) Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ДокументСсылка.Ссылка);
		СчетаФактурыНеТребуются = Документы[ДокументСсылка.Метаданные().Имя].СчетаФактурыНеТребуются(МассивДокументов);
		Возврат СчетаФактурыНеТребуются.Количество() = 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Определяет порядок заполнения ставки НДС в документах приобретения при интерактивной работе пользователя.
// Подставлять ставку НДС из справочника "Номенклатура" или значение "Без НДС" (например, если поставщик не является плательщиком НДС).
//
// Параметры 
//    ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор, по которому нужно 
//    прочитать СпособЗаполненияСтавкиНДС.
//
// Возвращаемое значение:
//    СпособЗаполненияСтавкиНДС - Перечисления.СпособыЗаполненияСтавкиНДС - ИзКарточкиНоменклатуры либо БезНДС
Функция СпособЗаполненияСтавкиНДСПоДоговору(ДоговорКонтрагента) Экспорт
	
	СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	
	Если ДоговорКонтрагента.Пустая() Тогда
		Возврат СпособЗаполненияСтавкиНДС;
	КонецЕсли;

	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"СпособЗаполненияСтавкиНДС,Организация,Владелец");

	Если ПараметрыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Возврат ПараметрыДоговора.СпособЗаполненияСтавкиНДС; // Вернем значение из договора.
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыДоговора.Владелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МенеджерЗаписиПараметрыНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС
	|ИЗ
	|	РегистрСведений.ПараметрыНДСПоДоговорам КАК МенеджерЗаписиПараметрыНДСПоДоговорам
	|ГДЕ
	|	МенеджерЗаписиПараметрыНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И МенеджерЗаписиПараметрыНДСПоДоговорам.Организация = &Организация
	|	И МенеджерЗаписиПараметрыНДСПоДоговорам.Контрагент = &Контрагент";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособЗаполненияСтавкиНДС = Выборка.СпособЗаполненияСтавкиНДС;
	КонецЕсли;
	
	Возврат СпособЗаполненияСтавкиНДС;

КонецФункции

// Определяет параметры договора - способ заполнения ставки и выставления первичных документов
// 
// Параметры
//    ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - договор, по которому нужно определить параметры.
//
// Возвращаемое значение:
//    Структура 
//       * СпособЗаполненияСтавкиНДС - Перечисления.СпособыЗаполненияСтавкиНДС - ИзКарточкиНоменклатуры либо БезНДС
//       * ЭтоУниверсальныйДокумент - Булево - Истина, если по договору выставляется универсальный передаточный документ.
Функция ПараметрыДоговора(ДоговорКонтрагента) Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура();
	ЗначенияПоУмолчанию.Вставить("СпособЗаполненияСтавкиНДС", Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры);
	ЗначенияПоУмолчанию.Вставить("ЭтоУниверсальныйДокумент", Ложь);
	
	Если ДоговорКонтрагента.Пустая() Тогда
		Возврат ЗначенияПоУмолчанию;
	КонецЕсли;

	ЭтоУниверсальныйДокумент = Перечисления.СпособыВыставленияДокументов.УниверсальныйДокумент;
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"СпособЗаполненияСтавкиНДС,СпособВыставленияДокументов,Организация,Владелец");
	
	Настройки = Новый Структура();
	Настройки.Вставить("СпособЗаполненияСтавкиНДС", РеквизитыДоговора.СпособЗаполненияСтавкиНДС);
	Настройки.Вставить("ЭтоУниверсальныйДокумент",  РеквизитыДоговора.СпособВыставленияДокументов = ЭтоУниверсальныйДокумент);

	Если РеквизитыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически
	   И РеквизитыДоговора.СпособВыставленияДокументов <> Перечисления.СпособыВыставленияДокументов.Автоматически Тогда
		Возврат Настройки; // Вернем настройки из договора.
	КонецЕсли;
	
	Параметры = ОбщегоНазначения.СкопироватьРекурсивно(Настройки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента",       ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация",              РеквизитыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент",               РеквизитыДоговора.Владелец);
	Запрос.УстановитьПараметр("ЭтоУниверсальныйДокумент", ЭтоУниверсальныйДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС,
	|	ВЫБОР
	|		КОГДА ПараметрыНДСПоДоговорам.СпособВыставленияДокументов = &ЭтоУниверсальныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУниверсальныйДокумент
	|ИЗ
	|	РегистрСведений.ПараметрыНДСПоДоговорам КАК ПараметрыНДСПоДоговорам
	|ГДЕ
	|	ПараметрыНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ПараметрыНДСПоДоговорам.Организация = &Организация
	|	И ПараметрыНДСПоДоговорам.Контрагент = &Контрагент";
	
	СохраненныеЗначения = Запрос.Выполнить().Выбрать();
	
	Если СохраненныеЗначения.Следующий() Тогда
		УстановитьПараметрыПоНастройке(РеквизитыДоговора, Параметры, СохраненныеЗначения);
	Иначе
		УстановитьПараметрыПоНастройке(РеквизитыДоговора, Параметры, ЗначенияПоУмолчанию);
	КонецЕсли;

	Возврат Параметры;
	
КонецФункции

// Записывает параметры договора - способ заполнения ставки и выставления первичных документов
// 
// Параметры
//    ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - договор, по которому нужно записать параметры
//    СпособЗаполненияСтавкиНДС - Перечисления.СпособыЗаполненияСтавкиНДС - ИзКарточкиНоменклатуры либо БезНДС
//    ЭтоУниверсальныйДокумент - Булево - Истина, если по договору выставляется универсальный передаточный документ.
Процедура СохранитьПараметрыДоговора(ДоговорКонтрагента, ЭтоУниверсальныйДокумент, ДокументСсылка) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"СпособЗаполненияСтавкиНДС,СпособВыставленияДокументов,Организация,Владелец");
	Если РеквизитыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически
	   И РеквизитыДоговора.СпособВыставленияДокументов <> Перечисления.СпособыВыставленияДокументов.Автоматически Тогда
		Возврат;
	КонецЕсли;

	Если РеквизитыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		НовыйСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ПустаяСсылка();
	ИначеЕсли ДокументСНДС(ДокументСсылка) Тогда
		НовыйСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	Иначе
		НовыйСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если РеквизитыДоговора.СпособВыставленияДокументов <> Перечисления.СпособыВыставленияДокументов.Автоматически Тогда
		НовыйСпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.ПустаяСсылка();
	ИначеЕсли ЭтоУниверсальныйДокумент Тогда
		НовыйСпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.УниверсальныйДокумент;
	Иначе
		НовыйСпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.ПередаточныйДокументИСчетФактура;
	КонецЕсли;
	
	СохраняемыеПараметры = Новый Структура();
	СохраняемыеПараметры.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СохраняемыеПараметры.Вставить("Организация", РеквизитыДоговора.Организация);
	СохраняемыеПараметры.Вставить("Контрагент", РеквизитыДоговора.Владелец);
	СохраняемыеПараметры.Вставить("СпособЗаполненияСтавкиНДС", НовыйСпособЗаполненияСтавкиНДС);
	СохраняемыеПараметры.Вставить("СпособВыставленияДокументов", НовыйСпособВыставленияДокументов);
	
	// Проверяем, что сейчас записано в регистре
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНДСПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.ПараметрыНДСПоДоговорам КАК ПараметрыНДСПоДоговорам
	|ГДЕ
	|	ПараметрыНДСПоДоговорам.Организация = &Организация
	|	И ПараметрыНДСПоДоговорам.Контрагент = &Контрагент
	|	И ПараметрыНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ПараметрыНДСПоДоговорам.СпособЗаполненияСтавкиНДС = &СпособЗаполненияСтавкиНДС
	|	И ПараметрыНДСПоДоговорам.СпособВыставленияДокументов = &СпособВыставленияДокументов";
	Для Каждого ПараметрЗапроса Из СохраняемыеПараметры Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат; // Аналогичные значения сохранены ранее
	КонецЕсли;

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыНДСПоДоговорам");
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	Блокировка.Заблокировать();

	Попытка
		МенеджерЗаписиПараметрыНДС = РегистрыСведений.ПараметрыНДСПоДоговорам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиПараметрыНДС, СохраняемыеПараметры);
		МенеджерЗаписиПараметрыНДС.Записать(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Записывает способ выставления первичных документов по договору.
// 
// Параметры
//    ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - договор, по которому нужно записать параметр
//    ЭтоУниверсальныйДокумент - Булево - Истина, если по договору выставляется универсальный передаточный документ.
Процедура СохранитьСпособВыставленияДокументов(ДоговорКонтрагента, ЭтоУниверсальныйДокумент) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"СпособВыставленияДокументов,Организация,Владелец");
	Если РеквизитыДоговора.СпособВыставленияДокументов <> Перечисления.СпособыВыставленияДокументов.Автоматически Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоУниверсальныйДокумент Тогда
		НовыйСпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.УниверсальныйДокумент;
	Иначе
		НовыйСпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.ПередаточныйДокументИСчетФактура;
	КонецЕсли;
	
	СохраняемыеПараметры = Новый Структура();
	СохраняемыеПараметры.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СохраняемыеПараметры.Вставить("Организация", РеквизитыДоговора.Организация);
	СохраняемыеПараметры.Вставить("Контрагент", РеквизитыДоговора.Владелец);
	СохраняемыеПараметры.Вставить("СпособВыставленияДокументов", НовыйСпособВыставленияДокументов);
	СохраняемыеПараметры.Вставить("СпособЗаполненияСтавкиНДС");
	
	// Проверяем, что сейчас записано в регистре
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС,
	|	ПараметрыНДСПоДоговорам.СпособВыставленияДокументов КАК СпособВыставленияДокументов,
	|	ПараметрыНДСПоДоговорам.Организация КАК Организация,
	|	ПараметрыНДСПоДоговорам.Контрагент КАК Контрагент,
	|	ПараметрыНДСПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.ПараметрыНДСПоДоговорам КАК ПараметрыНДСПоДоговорам
	|ГДЕ
	|	ПараметрыНДСПоДоговорам.Организация = &Организация
	|	И ПараметрыНДСПоДоговорам.Контрагент = &Контрагент
	|	И ПараметрыНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента";
	Для Каждого ПараметрЗапроса Из СохраняемыеПараметры Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СпособВыставленияДокументов = НовыйСпособВыставленияДокументов Тогда
			Возврат;
		КонецЕсли;
		СохраняемыеПараметры.СпособЗаполненияСтавкиНДС = Выборка.СпособЗаполненияСтавкиНДС;
	КонецЕсли;

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыНДСПоДоговорам");
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	Блокировка.Заблокировать();

	Попытка
		МенеджерЗаписиПараметрыНДС = РегистрыСведений.ПараметрыНДСПоДоговорам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиПараметрыНДС, СохраняемыеПараметры);
		МенеджерЗаписиПараметрыНДС.Записать(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

// Определяет, используется ли нумерация договоров с контрагентами по виду договора
//
// Параметры:
//   ВидДоговора - ПеречислениеСсылка.ВидыДоговоровКонтрагентов - вид договора
//
// Возвращаемое значение:
//   Булево - Истина, если нумерация используется
Функция ИспользуетсяНумерацияПоВидуДоговора(ВидДоговора) Экспорт
	
	Возврат Константы.ИспользоватьНумерациюДоговоровСПокупателями.Получить()
		И ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры, обязательные для создания нового договора из документа
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа
//   ИмяРеквизитаДата = "Дата" - имя реквизита, содержащего дату документа, для заполнения даты договора
//   ИмяРеквизитаНомер - имя реквизита, содержащего номер документа, для заполнения номера договора
//
// Возвращаемое значение:
//   Структура - параметры договора
//    * Организация - СправочникСсылка.Организации - организация
//    * Владелец - СправочникСсылка.Контрагенты - контрагент
//    * ВидДоговора - ПеречислениеСсылка.ВидыДоговоровКонтрагентов - вид договора
//    * Дата - дата договора, если передается значение параметра ИмяРеквизитаДата
//    * Номер - номер договора, если передается значение параметра ИмяРеквизитаНомер
Функция ПараметрыСозданияНовогоДоговора(Форма, ИмяРеквизитаДата = "Дата", ИмяРеквизитаНомер = "") Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект, ТипЗнч(Объект.Ссылка)));
	Если Не ПустаяСтрока(ИмяРеквизитаДата) Тогда
		ПараметрыДоговора.Вставить("Дата", Объект[ИмяРеквизитаДата]);
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяРеквизитаНомер) Тогда
		ПараметрыДоговора.Вставить("Номер", Объект[ИмяРеквизитаНомер]);
	КонецЕсли;
	
	Возврат ПараметрыДоговора;
	
КонецФункции

// Устанавливает значение реквизита ПредлагатьНовыйДоговорСНумерацией формы документа
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура УстановитьПредлагатьНовыйДоговорСНумерацией(Форма) Экспорт
	
	Форма.ПредлагатьНовыйДоговорСНумерацией = Ложь;
	
	Объект = Форма.Объект;
	
	Если Форма.ВестиУчетПоДоговорам
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВидДоговора = ВидДоговораПоОбъекту(Объект, ТипЗнч(Объект.Ссылка));
		
		Форма.ПредлагатьНовыйДоговорСНумерацией = ИспользуетсяНумерацияПоВидуДоговора(ВидДоговора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьКонтрагентВСтроке(Объект)

	// Перечислим типы документов, в которых контрагент указывается в строке
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОказаниеУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОтчетОРозничныхПродажах"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Возврат ОписаниеТипов.СодержитТип(ТипЗнч(Объект));

КонецФункции

// Возвращает свернутую таблицу по двум параметрам: ДоговорКонтрагента и СуммаНДС.
//
// Параметры
// РасшифровкаПлатежа - РасшифровкаПлатежа документа.
//
// Возвращаемое значение:
// ТаблицаЗначений - свернутая таблица по договору.
Функция ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа)

	СводнаяРасшифровкаПлатежа = РасшифровкаПлатежа.Выгрузить(,"ДоговорКонтрагента,СуммаНДС");
	СводнаяРасшифровкаПлатежа.Свернуть("ДоговорКонтрагента", "СуммаНДС");
	
	Возврат СводнаяРасшифровкаПлатежа;
	
КонецФункции

Процедура УстановитьПараметрыПоНастройке(РеквизитыДоговора, Параметры, ПрименяемыеЗначения)
	
	Если РеквизитыДоговора.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Параметры.СпособЗаполненияСтавкиНДС = ПрименяемыеЗначения.СпособЗаполненияСтавкиНДС;
	КонецЕсли;
	
	Если РеквизитыДоговора.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически Тогда
		Параметры.ЭтоУниверсальныйДокумент = ПрименяемыеЗначения.ЭтоУниверсальныйДокумент;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
