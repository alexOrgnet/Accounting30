
#Область СлужебныйПрограммныйИнтерфейс

Функция РеквизитыПлатежаВБюджет() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_ПлатежноеПоручение() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("ПеречислениеВБюджет",                "ПеречислениеВБюджет");
	Реквизиты.Вставить("НазначениеПлатежа",                  "НазначениеПлатежа");
	Реквизиты.Вставить("ОчередностьПлатежа",                 "ОчередностьПлатежа");
	Реквизиты.Вставить("ПеречислениеПоИсполнительномуЛисту", "ПеречислениеПоИсполнительномуЛисту");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_РасходныйКассовыйОрдер() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("ПеречислениеВБюджет", "ПеречислениеВБюджет");
	Реквизиты.Вставить("НазначениеПлатежа",   "Основание");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_СписаниеСРасчетногоСчета() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("ПеречислениеВБюджет", "ПеречислениеВБюджет");
	Реквизиты.Вставить("НазначениеПлатежа",   "Основание");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоНДФЛ(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ"))
		или (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины"));
	
КонецФункции

Функция ЭтоНДФЛ_ДоходыСвышеПредельнойВеличины(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины"));
	
КонецФункции

Функция ЭтоНДФЛ_ИП(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыНалоговНДФЛ_ИП = Новый Массив;
	ВидыНалоговНДФЛ_ИП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП"));
	ВидыНалоговНДФЛ_ИП.Добавить(ПредопределенноеЗначение(
		"Перечисление.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины"));
	
	Возврат ВидыНалоговНДФЛ_ИП.Найти(ВидНалога) <> Неопределено;
	
КонецФункции

Функция ЭтоНДФЛ_ФизЛицо(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ФизЛицо"));
	
КонецФункции

Функция ЭтоФиксированныеВзносы(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидНалогаФиксированныеВзносы Из ВидыНалоговФиксированныеВзносы() Цикл
		Если ВидНалогаФиксированныеВзносы = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоФиксированныеВзносыВФСС(ВидНалога) Экспорт
	
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС");
	
КонецФункции

Функция ЭтоДобровольныйФиксированныйВзносВПФР(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные");
	
КонецФункции

Функция ЭтоОбязательныеСтраховыеВзносы(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносыЕдиныйТариф")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОПС_ИностранныеРаботники")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОМС_ИностранныеРаботники")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОСС_ИностранныеРаботники");
	
КонецФункции

Функция ЭтоСтраховыеВзносыФСС(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС")
		ИЛИ ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ");
	
КонецФункции

Функция НеактуальныеНалоги(Дата) Экспорт
	
	Налоги = Новый Соответствие();
	
	Если ПлатежиВБюджетКлиентСервер.ДействуетПереходНаЕНП(Дата) Тогда
		СтарыеВзносы = ВзносыНаПенсионноеСтрахованиеДо2023();
		ПериодИзмененияСтраховыхВзносов = ПериодИзмененияСтраховыхВзносов();
		НачалоПереходаНаЕНП = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаПенсионноеСтрахование() Цикл
			Если СтарыеВзносы.Найти(ВидВзноса) = Неопределено Тогда
				Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", НачалоПереходаНаЕНП));
			Иначе
				Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", ПериодИзмененияСтраховыхВзносов));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ВидВзноса Из СтарыеВидыВзносовНаСоциальноеСтрахование() Цикл
			Налоги.Вставить(ВидВзноса, Новый Структура("ДатаНеактуальности", ПериодИзмененияСтраховыхВзносов));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Налоги;
	
КонецФункции

Функция ЭтоВзносыНаПенсионноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидВзноса Из ВидыВзносовНаПенсионноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоВзносыНаСоциальноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВидВзноса Из ВидыВзносовНаСоциальноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоТорговыйСбор(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ТорговыйСбор"));
	
КонецФункции

Функция ЭтоЕдиныйНалоговыйПлатеж(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ЕдиныйНалоговыйПлатеж")
	
КонецФункции

Функция НовыеРеквизитыПлатежаВБюджет(Объект, ПеречислениеВБюджет = Истина) Экспорт
	
	РеквизитыПлатежаВБюджет = Новый Структура;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		РеквизитыДокумента = РеквизитыДокумента_ПлатежноеПоручение();
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		РеквизитыДокумента = РеквизитыДокумента_РасходныйКассовыйОрдер();
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		РеквизитыДокумента = РеквизитыДокумента_СписаниеСРасчетногоСчета();
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет.Вставить(Реквизит.Значение)
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, Объект);
	КонецЕсли;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

Функция НадписьРеквизитыПлатежейВБюджет(ДокументОбъект) Экспорт
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	Для Каждого Реквизит Из РеквизитыПлатежаВБюджет() Цикл
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = ДокументОбъект[Реквизит.Значение];
	КонецЦикла;
	
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	Возврат ПлатежиВБюджетКлиентСервер.КраткоеПредставление(РеквизитыПлатежаВБюджет, ДокументОбъект.Дата);
	
КонецФункции

Функция ВидыВзносовНаПенсионноеСтрахование()
	
	Взносы = СтарыеВидыВзносовНаПенсионноеСтрахование();
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОПС_ИностранныеРаботники"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОМС_ИностранныеРаботники"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ОСС_ИностранныеРаботники"));

	Возврат Взносы;
	
КонецФункции

Функция СтарыеВидыВзносовНаПенсионноеСтрахование()
	
	Взносы = ВзносыНаПенсионноеСтрахованиеДо2023();
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть")); // до 2014 года
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные"));
	
	Возврат Взносы;
	
КонецФункции

Функция СтарыеВидыВзносовНаСоциальноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Возврат Взносы;
	
КонецФункции

Функция ВидыВзносовНаСоциальноеСтрахование()
	
	Взносы = СтарыеВидыВзносовНаСоциальноеСтрахование();
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф"));
	
	Возврат Взносы;
	
КонецФункции

Функция ЭтоНалогУСН(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидНалогаУСН Из ВидыНалоговУСН() Цикл
		Если ВидНалогаУСН = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНалогАУСН(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.АУСН");
	
КонецФункции

Функция ПериодУплатыНалогаВыбираетПользователь(ВидНалога, ПрименяетсяУСНДоходы, УчетЗарплатыВПрограмме) Экспорт
	
	// При уплате некоторых налогов/взносов пользователь может изменять период, за который осуществляется платеж.
	// Доступность изменения периода зависит от конкретного налога, системы налогообложения и настроек программы.
	
	ПрименяетсяНДФЛ = УчетЗарплатыВПрограмме И ЭтоНДФЛ(ВидНалога) Или ЭтоНДФЛ_ИП(ВидНалога);
	
	Возврат ЭтоОбязательныеСтраховыеВзносы(ВидНалога)
		Или ПрименяетсяНДФЛ
		Или ЭтоНалогУСН(ВидНалога) Или ЭтоНалогАУСН(ВидНалога)
		Или ПрименяетсяУСНДоходы И ЭтоТорговыйСбор(ВидНалога);
	
КонецФункции

Функция ПредставлениеПериодаУплатыНалога(Период, ВидНалога) Экспорт
	
	Если ЭтоТорговыйСбор(ВидНалога) Тогда
		
		ПредставлениеПериода = Формат(Период, "Л=ru_RU; ДФ='q ''квартал'' yyyy'");
		
	ИначеЕсли ЭтоНалогУСН(ВидНалога) Или ЭтоНДФЛ_ИП(ВидНалога) Тогда
		
		ТекстПериода = ПредставлениеПериода(НачалоГода(Период), КонецКвартала(Период), "ФП=Истина");
		
		Если КонецКвартала(Период) = КонецГода(Период) Тогда
			ПредставлениеПериода = СокрЛП(СтрЗаменить(ТекстПериода, НСтр("ru = 'г.'"), НСтр("ru = 'год'")));
		Иначе
			ПредставлениеПериода = СокрЛП(СтрЗаменить(ТекстПериода, НСтр("ru = 'г.'"), ""));
		КонецЕсли;
		
	Иначе
		
		ПредставлениеПериода = Формат(Период, "ДФ='MMMM yyyy'"); // По умолчанию - месяц
		
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Функция ВидыНалоговУСН() Экспорт
	
	Налоги = Новый Массив;
	
	Налоги.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_Доходы"));
	Налоги.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_ДоходыМинусРасходы"));
	Налоги.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_МинимальныйНалог"));
	
	Возврат Налоги;
	
КонецФункции

Функция ВидыНалоговФиксированныеВзносы() Экспорт
	
	Взносы = Новый Массив;
	
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_СвышеПредела"));
	
	Возврат Взносы;
	
КонецФункции

// Возвращает виды взносов, которые не применяются с 2023 года, но требуются для закрытия прошлых периодов.
// Не включает взносы, применяемые ранее 2019 года.
//
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ВидыНалогов
//
Функция ВзносыНаПенсионноеСтрахованиеДо2023() Экспорт
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	
	Возврат Взносы;
	
КонецФункции

// Возвращает дату с которой не применяются некоторые виды пенсионных взносов,
// описанных в функции ВзносыНаПенсионноеСтрахованиеДо2023().
// См. также серверная функция УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов().
//
// Возвращаемое значение:
//   Дата - период, с которого действие взносов прекращается
//
Функция ПериодИзмененияСтраховыхВзносов() Экспорт
	
	Возврат '20230101';
	
КонецФункции

// Возвращает соответствие видов налога для КБК страховых взносов до 2023 года.
//
// Возвращаемое значение:
//   Соответствие
//
Функция СоответствиеКБКСтраховыхВзносов2022ГодаВ2023Году() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("18210202010060000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть"));
	
	Результат.Вставить("18210202101080000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС"));
	
	Результат.Вставить("18210202140060000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	
	Результат.Вставить("18210202103080000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	
	Результат.Вставить("18210202090070000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Результат.Вставить("18210201020010000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Результат.Вставить("39310202050070000160",
		ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ"));
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что переданный вид налога, уплачивается в СФР.
//
// Параметры:
//   ВидНалога - ПеречислениеСсылка.ВидыНалогов - вид налога, который нужно проверить
//
// Возвращаемое значение:
//   Булево - Истина - вид налога уплачивается в СФР, Ложь - не уплачивается
//
Функция ЭтоУплатаВСФР(ВидНалога) Экспорт
	
	Результат = ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_Добровольные")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
