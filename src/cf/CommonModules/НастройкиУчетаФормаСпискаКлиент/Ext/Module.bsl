
////////////////////////////////////////////////////////////////////////////////
// Формы списков настроек учета
// Общие клиентские методы для всех форм списков регистров настроек учета.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура - реализация метода ПередНачаломДобавления динамического списка формы списка регистра сведений
//
// Параметры:
//  Форма       - Управляемая форма (форма списка регистра)
//  Элемент     - ТаблицаФормы - таблица, для которой вызывается метод.
//  Отказ       - Булево - признак отказа от добавления объекта.
//  Копирование - Булево - определяет режим копирования.
//  Родитель    - для регистра сведений всегда Неопределено.
//  Группа      - Булево - признак добавления группы, для регистра сведений всегда Ложь.
Процедура СписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Если Копирование Тогда
		ТекущаяОрганизация = Форма.Элементы.Список.ТекущиеДанные.Организация;
	Иначе
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Форма.Список.КомпоновщикНастроек);
		ТекущаяОрганизация = ?(ЗначенияЗаполнения.Свойство("Организация"), ЗначенияЗаполнения.Организация, Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) 
		И ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(ТекущаяОрганизация) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Настройки учета обособленного подразделения не редактируются.
		|Необходимо изменять настройки учета головной организации.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - реализация метода ПередУдалением динамического списка формы списка регистра сведений
//
// Параметры:
//  Форма        - Управляемая форма (форма списка регистра)
//  Элемент      - ТаблицаФормы - таблица, для которой вызывается метод.
//  Отказ        - Булево - признак отказа от удаления объекта.
//
Процедура СписокПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыОповещения.Вставить("Период",      '00010101');
	Форма.ПараметрыОповещения = ПараметрыОповещения;
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(ТекущиеДанные.Организация) Тогда
			ПоказатьПредупреждение( , НСтр("ru='Настройки учета обособленного подразделения не редактируются.
				|Необходимо изменять настройки учета головной организации.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения.Организация = ТекущиеДанные.Организация;
		ПараметрыОповещения.Период      = ТекущиеДанные.Период;
		
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресХранилищаПереключениеОтложенногоПроведения") Тогда
		// Форма связана с настройками, влияющими на режим отложенного проведения.
		// Запомним состояние "до изменения".
		Форма.АдресХранилищаПереключениеОтложенногоПроведения = 
			НастройкиУчетаВызовСервера.ПодготовитьДанныеДляПереключенияОтложенногоПроведения(Форма.УникальныйИдентификатор, ТекущиеДанные.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - реализация метода ПослеУдаления динамического списка формы списка регистра сведений
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма списка регистра.
//  ИмяОповещения - Строка - имя оповещения, которое требуется послать открытым формам.
//
Процедура СписокПослеУдаления(Форма, ИмяОповещения = Неопределено) Экспорт
	
	ПараметрыОповещения = Форма.ПараметрыОповещения;
	Если ПараметрыОповещения = Неопределено
	 Или ТипЗнч(ПараметрыОповещения) <> Тип("Структура") Тогда
	 
		СписокПослеУдаленияЗавершение(Неопределено, ПараметрыОповещения);
		Возврат;
	 
	КонецЕсли;
	
	Если ИмяОповещения <> Неопределено Тогда
		Оповестить(ИмяОповещения, ПараметрыОповещения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОповещения.Организация) Тогда
		
		СписокПослеУдаленияЗавершение(Неопределено, ПараметрыОповещения);
		Возврат;
		
	КонецЕсли;
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СписокПослеУдаленияЗавершение", ЭтотОбъект, Форма);
	ПроведениеКлиент.НачатьОчисткуРегистраПроверенныхДокументов(ОповещениеОЗавершении, ПараметрыОповещения.Период, ПараметрыОповещения.Организация);
	
	ПараметрыОповещения.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
КонецПроцедуры

// Обработчик оповещения об окончании очистки регистра сведений ПроверенныеДокументы.
//
// Параметры:
//  Результат    - Структура - см. описание параметра ОповещениеОЗавершении в ДлительныеОперацииКлиент.ОжидатьЗавершение()
//  Форма        - ФормаКлиентскогоПриложения - форма списка регистра.
//
Процедура СписокПослеУдаленияЗавершение(Результат, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресХранилищаПереключениеОтложенногоПроведения") Тогда
		РезультатЗаданияПереключенияОтложенногоПроведения = НастройкиУчетаВызовСервера.ПроверитьОтложенноеПроведениеПослеИзмененияНастроек(
			Форма.УникальныйИдентификатор,
			Форма.АдресХранилищаПереключениеОтложенногоПроведения);
	КонецЕсли;
	
	ОбновитьИнтерфейс();

	Если РезультатЗаданияПереключенияОтложенногоПроведения <> Неопределено Тогда
		ПроведениеКлиент.ОжидатьПереключенияОтложенногоПроведения(РезультатЗаданияПереключенияОтложенногоПроведения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - реализация метода ОбработкаОповещения формы списка регистра сведений
//
// Параметры:
//  Форма      - Управляемая форма (форма списка регистра)
//  ИмяСобытия - Строка - имя события.
//  Параметр   - Произвольный - параметр сообщения.
//  Источник   - источник события.
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" И НЕ ЗначениеЗаполнено(Форма.ОтборОрганизация) Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Форма.Список, , Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
