#Область ПрограммныйИнтерфейс

// Определяет возможность ручной настройки отражения входящего платежа в доходах АУСН.
//
// Параметры:
//  ВидОперации  - ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств - вид операции входящего платежа.
//
// Возвращаемое значение:
//  Булево - если Истина, доходы могут настраиваться пользователем вручную.
//
Функция РучнаяНастройкаДоходов(ВидОперации) Экспорт
	
	Возврат УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(ВидОперации)
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодготовитьТаблицуПоступлениеДенежныхСредств(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаОплатыРеализацийСНДС, ТаблицаРазметкаАУСНБанка) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеДенежныхСредств(
		ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаОплатыРеализацийСНДС, ТаблицаРазметкаАУСНБанка);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРазметки = НоваяТаблицаРазметки();
	
	Если Реквизиты.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк Тогда
		Для Каждого ДанныеРазметкиБанка Из Параметры.РазметкаАУСНБанка Цикл
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				ДанныеРазметкиБанка.ПризнакНалоговойБазы,
				ДанныеРазметкиБанка.КатегорияОперации,
				ДанныеРазметкиБанка.Сумма,
				ДанныеРазметкиБанка.ВалютнаяСумма,
				Перечисления.ИсточникиРазметкиАУСН.Банк);
		КонецЦикла;
		
		Возврат ТаблицаРазметки;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КурсВалютыРегламентированногоУчета
		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Реквизиты.Период);
	
	// Достаточный признак, поскольку при расчетах в у.е. валюта документа - рубли
	РасчетыВВалюте = (Реквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	
	Если РасчетыВВалюте Тогда
		КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
	Иначе
		КурсДокумента = Неопределено;
	КонецЕсли;
	
	// Присвоение кодов разметки.
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		СуммыДокумента = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		Если Реквизиты.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
			
			// Платежи от физлиц регистрируются в ККТ, сведения о налоговой базе будут переданы из онлайн-кассы.
			// Зачисление на счет для избежания двойного налогообложения регистрируется как "Не налоговая база".
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза,
				КатегорияОперацииНеЗадана(),
				СуммыДокумента.Сумма,
				СуммыДокумента.ВалютнаяСумма);
			
		Иначе
			
			СуммыОплаченногоНДС = СуммыОплаченногоНДС(Параметры.Взаиморасчеты, Параметры.ОплатаРеализацийСНДС, РасчетыВВалюте);
		
			// Оплаченный НДС не является доходом, облагаемый доход регистрируется в разметке за вычетом НДС.
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.Приход,
				КатегорияОперацииНеЗадана(),
				СуммыДокумента.Сумма - СуммыОплаченногоНДС.СуммаНДСРуб,
				СуммыДокумента.ВалютнаяСумма - СуммыОплаченногоНДС.СуммаНДСВал);
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза,
				КатегорияОперацииНеЗадана(),
				СуммыОплаченногоНДС.СуммаНДСРуб,
				СуммыОплаченногоНДС.СуммаНДСВал);
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		
		СуммыДокумента = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки,
			Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.ВозвратРасхода,
			КатегорияОперацииНеЗадана(),
			СуммыДокумента.Сумма,
			СуммыДокумента.ВалютнаяСумма);
		
	ИначеЕсли УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(Реквизиты.ВидОперации)
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратНалога
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		СуммыДокумента = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		Если Реквизиты.ОтражениеВУСН = Перечисления.ОтражениеВУСН.ВозвратРасхода Тогда
			ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.ВозвратРасхода, КатегорияОперацииНеЗадана(),
				СуммыДокумента.Сумма, СуммыДокумента.ВалютнаяСумма);
		Иначе
		
			СуммаДоходаРуб = Реквизиты.СуммаДоходаУСН; // Сумма доходов всегда регистрируется в валюте регламентированного учета.
			Если РасчетыВВалюте Тогда
				СуммаДоходаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДоходаРуб,
					КурсВалютыРегламентированногоУчета, КурсДокумента);
			Иначе
				СуммаДоходаВал = 0;
			КонецЕсли;
		
			ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.Приход, КатегорияОперацииНеЗадана(),
				СуммаДоходаРуб, СуммаДоходаВал);
		
			НеоблагаемыйДоходВал = Макс(СуммыДокумента.ВалютнаяСумма - СуммаДоходаВал, 0);
			НеоблагаемыйДоходРуб = Макс(СуммыДокумента.Сумма - СуммаДоходаРуб, 0);
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
				НеоблагаемыйДоходРуб, НеоблагаемыйДоходВал); 
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		
		СуммыЗачисления = СуммыОперации(Реквизиты.СуммаДокумента,
			КурсДокумента, КурсВалютыРегламентированногоУчета);
		СуммыКомиссииБанка = СуммыОперации(Реквизиты.СуммаУслуг,
			КурсДокумента, КурсВалютыРегламентированногоУчета);
		СуммыВозвратов = СуммыОперации(Реквизиты.СуммаВозврата,
			КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		// Выручка до удержания возвратов и комиссии
		СуммаВыручки         = СуммыЗачисления.Сумма + СуммыКомиссииБанка.Сумма + СуммыВозвратов.Сумма;
		СуммаВыручкиВалютная = СуммыЗачисления.ВалютнаяСумма + СуммыКомиссииБанка.ВалютнаяСумма + СуммыВозвратов.ВалютнаяСумма;
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, Перечисления.КатегорииОперацийАУСН.ЭквайрингПриход,
			СуммаВыручки, СуммаВыручкиВалютная);
		
		// Сумма удержанного банком возврата
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, Перечисления.КатегорииОперацийАУСН.ЭквайрингВозврат,
			СуммыВозвратов.Сумма, СуммыВозвратов.ВалютнаяСумма);
		
		// Сумма удержанной банком комиссии
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход, Перечисления.КатегорииОперацийАУСН.КомиссияЗаЭквайринг,
			СуммыКомиссииБанка.Сумма, СуммыКомиссииБанка.ВалютнаяСумма);
		
	Иначе // Не облагаемое налогом поступление.
		
		НеоблагаемыеСуммы = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
			НеоблагаемыеСуммы.Сумма, НеоблагаемыеСуммы.ВалютнаяСумма);
		
	КонецЕсли;
	
	Возврат ТаблицаРазметки;
	
КонецФункции

Функция ПодготовитьТаблицуСписаниеДенежныхСредств(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаПеречислениеЗарплаты, ТаблицаРазметкаАУСНБанка) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеДенежныхСредств(
		ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаПеречислениеЗарплаты, ТаблицаРазметкаАУСНБанка);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не УчетнаяПолитика.ПрименяетсяАУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРазметки = НоваяТаблицаРазметки();
	
	Если Реквизиты.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк Тогда
		Для Каждого ДанныеРазметкиБанка Из Параметры.РазметкаАУСНБанка Цикл
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				ДанныеРазметкиБанка.ПризнакНалоговойБазы,
				ДанныеРазметкиБанка.КатегорияОперации,
				ДанныеРазметкиБанка.Сумма,
				ДанныеРазметкиБанка.ВалютнаяСумма,
				Перечисления.ИсточникиРазметкиАУСН.Банк);
		КонецЦикла;
		
		Возврат ТаблицаРазметки;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КурсВалютыРегламентированногоУчета
		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Реквизиты.Период);
	
	// Достаточный признак, поскольку при расчетах в у.е. валюта документа - рубли
	РасчетыВВалюте = (Реквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	
	Если РасчетыВВалюте Тогда
		КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
	Иначе
		КурсДокумента = Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И Не Реквизиты.БезЗакрывающихДокументов Тогда
		
		ЗаполнитьРазметкуОплатаПоставщику(ТаблицаРазметки, Реквизиты, Параметры.Взаиморасчеты);
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		
		СуммыВозврата = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		ЗаполнитьРазметкуВозвратПокупателю(ТаблицаРазметки, Реквизиты, СуммыВозврата);
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(Реквизиты.СчетУчета, Реквизиты.Организация, Реквизиты.Период);
		
		Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(ВидНалога)
			И Реквизиты.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ЗаполнитьРазметкуПеречислениеНДФЛ(ТаблицаРазметки, Реквизиты);
			
		Иначе
			
			АналитикаРазметки = АналитикаРазметкиНалоговогоПлатежа(Реквизиты.СчетУчета, Реквизиты.Субконто1,
				Реквизиты.Организация, Реквизиты.Период);
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
				АналитикаРазметки.ПризнакНалоговойБазы, АналитикаРазметки.КатегорияОперации,
				Реквизиты.СуммаДокумента, 0);
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		ЗаполнитьРазметкуПеречислениеЗарплаты(ТаблицаРазметки, Реквизиты, Параметры.ПеречислениеЗарплаты);
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПоИсполнительномуЛистуРаботника
		Или Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		
		СуммыДокумента = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход, Перечисления.КатегорииОперацийАУСН.ВыплатаФизическомуЛицу,
			Реквизиты.СуммаДокумента, 0);
		
	Иначе
		
		СуммаРасходаРуб = Реквизиты.СуммаРасходаУСН; // Сумма расходов всегда регистрируется в валюте регламентированного учета.
		Если РасчетыВВалюте Тогда
			СуммаРасходаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаРасходаРуб,
				КурсВалютыРегламентированногоУчета, КурсДокумента);
		Иначе
			СуммаРасходаВал = 0;
		КонецЕсли;
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход, КатегорияОперацииНеЗадана(),
			СуммаРасходаРуб, СуммаРасходаВал);
		
		СуммыДокумента = СуммыОперации(Реквизиты.СуммаДокумента, КурсДокумента, КурсВалютыРегламентированногоУчета);
		
		НеоблагаемыйРасходВал = Макс(СуммыДокумента.ВалютнаяСумма - СуммаРасходаВал, 0);
		НеоблагаемыйРасходРуб = Макс(СуммыДокумента.Сумма - СуммаРасходаРуб, 0);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
			НеоблагаемыйРасходРуб, НеоблагаемыйРасходВал);
		
	КонецЕсли;
	
	Возврат ТаблицаРазметки;
	
КонецФункции

Функция ПодготовитьТаблицуЗачетАвансаПоставщику(ТаблицаРеквизиты, ТаблицаРасходы, ТаблицаВзаиморасчеты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Или Не ЗначениеЗаполнено(ТаблицаРасходы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетАвансаПоставщику(ТаблицаРеквизиты, ТаблицаРасходы, ТаблицаВзаиморасчеты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	// Подготовим разбивку расходов на принимаемые и непринимаемые.
	
	НалогообложениеРасходов = Параметры.Расходы.Скопировать();
	НалогообложениеРасходов.Колонки.Добавить("СуммаНеучитываемая", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаТаблицы Из НалогообложениеРасходов Цикл
		Если СтрокаТаблицы.НалоговыйУчет <> Перечисления.ОтражениеВУСН.Принимаются Тогда
			СтрокаТаблицы.СуммаНеучитываемая = СтрокаТаблицы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	НалогообложениеРасходов.Свернуть("Контрагент, ДоговорКонтрагента", "Сумма, СуммаНеучитываемая");
	
	Если НалогообложениеРасходов.Итог("СуммаНеучитываемая") = 0 Тогда
		// Все расходы учитываются в НУ, незачем корректировать начальную разметку платежей поставщикам.
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРазметки = НоваяТаблицаРазметки();
	
	ОтборРасходов = Новый Структура("Контрагент, ДоговорКонтрагента");
	
	Для Каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл
		
		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор // Поступление без зачета аванса
			Или СтрокаВзаиморасчетов.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОперацияОтражаетсяВРазметке(
			СтрокаВзаиморасчетов.ДокументРасчетов, СтрокаВзаиморасчетов.ДатаДокументаРасчетов, Реквизиты.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрименяетсяРазметкаАУСНБанка = 
			СтрокаВзаиморасчетов.ДокументРасчетов.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк;
		Если ПрименяетсяРазметкаАУСНБанка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборРасходов, СтрокаВзаиморасчетов);
		НайденныеСтрокиРасходов = НалогообложениеРасходов.НайтиСтроки(ОтборРасходов);
		
		Если НайденныеСтрокиРасходов.Количество() = 0
			Или НайденныеСтрокиРасходов[0].СуммаНеучитываемая = 0
			Или НайденныеСтрокиРасходов[0].Сумма = 0 Тогда
			Продолжить; // Все расходы учитываются в НУ, незачем корректировать начальную разметку платежей. 
		КонецЕсли;
		
		ДоляНеучитываемыхРасходов = НайденныеСтрокиРасходов[0].СуммаНеучитываемая / НайденныеСтрокиРасходов[0].Сумма;
		
		СуммаКорректировкиВал = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетов * ДоляНеучитываемыхРасходов, 2);
		СуммаКорректировкиРуб = Окр(
			СуммаКорректировкиВал * (СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса / СтрокаВзаиморасчетов.СуммаВзаиморасчетов),
			2);
		
		// Сторно принимаемых расходов.
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки,
			СтрокаВзаиморасчетов.ДокументРасчетов,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход,
			КатегорияОперацииНеЗадана(),
			- СуммаКорректировкиРуб,
			?(СтрокаВзаиморасчетов.РасчетыВВалюте И Не СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах, - СуммаКорректировкиВал, 0));
		
		// Отражение непринимаемых расходов.
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки,
			СтрокаВзаиморасчетов.ДокументРасчетов,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза,
			КатегорияОперацииНеЗадана(),
			СуммаКорректировкиРуб,
			?(СтрокаВзаиморасчетов.РасчетыВВалюте И Не СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах, СуммаКорректировкиВал, 0));
		
	КонецЦикла;
	
	Возврат ТаблицаРазметки;
	
КонецФункции

Функция ПодготовитьТаблицуЗачетАвансаРеализацияСНДС(ТаблицаРеквизиты, ТаблицаВзаиморасчеты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетАвансаРеализацияСНДС(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не УчетнаяПолитика.ПрименяетсяАУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.СуммаНДСДокумента = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРаспределенияНДС = Параметры.Взаиморасчеты;
	Если Не ЭтоБанковскаяОперация(Реквизиты.Регистратор) Тогда
		// Расчеты по регистратору не участвуют в заполнении разметки АУСН если регистратор не является банковской операцией,
		// тем не менее НДС необходимо учесть полностью. Поэтому сумма НДС относящаяся к регистратору будет распределена на
		// другие документы взаиморасчетов.
		ОтборПоРегистратору = Новый Структура("ДокументРасчетов", Реквизиты.Регистратор);
		СтрокиРегистратораВоВзаиморасчетах = ТаблицаРаспределенияНДС.НайтиСтроки(ОтборПоРегистратору);
		Для Каждого СтрокаКУдалению Из СтрокиРегистратораВоВзаиморасчетах Цикл
			ТаблицаРаспределенияНДС.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	ТаблицаРаспределенияНДС.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Реквизиты.СуммаНДСДокумента,
		ТаблицаРаспределенияНДС, "СуммаНДС", "СуммаВзаиморасчетов");
	
	РазметкаАвансов = СуммыДоходовПоДокументам(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРаспределенияНДС, "ДокументРасчетов", Истина),
		Реквизиты);
	
	ТаблицаРазметки = НоваяТаблицаРазметки();
	
	Для Каждого СтрокаРасчетов Из ТаблицаРаспределенияНДС Цикл
		
		Если СтрокаРасчетов.СуммаНДС = 0 Или СтрокаРасчетов.СуммаВзаиморасчетов = 0
			Или Не ОперацияОтражаетсяВРазметке(СтрокаРасчетов.ДокументРасчетов, СтрокаРасчетов.ДатаДокументаРасчетов, Реквизиты.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		РазметкаАванса = РазметкаАвансов.Получить(СтрокаРасчетов.ДокументРасчетов);
		
		Если РазметкаАванса = Неопределено
			Или РазметкаАванса.Всего = 0
			Или РазметкаАванса.НалогооблагаемыйДоход = 0 Тогда
			// Аванс не отражен в разметке или отражен как необлагаемый доход - корректировать нечего.
			Продолжить;
		КонецЕсли;
		
		ДоляНалогооблагаемогоДохода = РазметкаАванса.НалогооблагаемыйДоход / РазметкаАванса.Всего;
		
		Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
			// Рублевая сумма НДС определяется по курсу зачтенных авансов, при отсутствии аванса - по курсу реализации.
			КурсПоСтроке = СтрокаРасчетов.СуммаРубПоКурсуАванса / СтрокаРасчетов.СуммаВзаиморасчетов;
		ИначеЕсли Реквизиты.РасчетыВВалюте Тогда
			// Рублевая сумма НДС определяется по курсу реализации независимо от зачтенных авансов.
			КурсПоСтроке = СтрокаРасчетов.СуммаРуб / СтрокаРасчетов.СуммаВзаиморасчетов;
		Иначе
			КурсПоСтроке = 1;
		КонецЕсли;
		
		СуммаНДСРуб = Окр(ДоляНалогооблагаемогоДохода * СтрокаРасчетов.СуммаНДС * КурсПоСтроке, 2);
		СуммаНДСВалютная = ?(Реквизиты.РасчетыВВалюте И Не Реквизиты.РасчетыВУсловныхЕдиницах,
			Окр(ДоляНалогооблагаемогоДохода * СтрокаРасчетов.СуммаНДС, 2),
			0);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, СтрокаРасчетов.ДокументРасчетов,
			Перечисления.ПризнакиНалоговойБазыАУСН.Приход, КатегорияОперацииНеЗадана(),
			-СуммаНДСРуб, -СуммаНДСВалютная);
		ДобавитьСтрокуРазметки(ТаблицаРазметки, СтрокаРасчетов.ДокументРасчетов,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
			СуммаНДСРуб, СуммаНДСВалютная);
		
	КонецЦикла;
	
	Возврат ТаблицаРазметки;
	
КонецФункции

Процедура СформироватьДвиженияРазметки(ТаблицаРеквизиты, ТаблицаРазметка, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаРазметка) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийРазметки(ТаблицаРеквизиты, ТаблицаРазметка);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого ЗаписьРазметки Из Параметры.Разметка Цикл
		
		Движение = Движения.РазметкаАУСН.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьРазметки);
		
	КонецЦикла;
	
	Движения.РазметкаАУСН.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоступлениеРасходов(ТаблицаРеквизиты, ТаблицаРасходы, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаРасходы) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийПоступлениеРасходов(ТаблицаРеквизиты, ТаблицаРасходы);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого Расход Из Параметры.Расходы Цикл
		
		Движение = Движения.РасходыАУСН.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, Расход);
		
	КонецЦикла;
	
	Движения.РасходыАУСН.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаПараметровПриПроведении

Функция ПодготовитьПараметрыПоступлениеДенежныхСредств(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаОплатыРеализацийСНДС, ТаблицаРазметкаАУСНБанка)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата> - период движений - дата документа
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка>
	+ "ВидОперации,"     // <ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств>
	+ "Контрагент,"      // <СправочникСсылка.Контрагенты>
	+ "СчетКонтрагента," // <СправочникСсылка.БанковскиеСчета>
	+ "ВалютаДокумента," // <СправочникСсылка.Валюты>
	+ "СуммаДокумента,"  // <Число> - Сумма в валюте документа
	+ "СуммаУслуг,"      // <Число> - Сумма комиссии банка в валюте документа (для поступлений по эквайрингу)
	+ "СуммаВозврата,"   // <Число> - Сумма возвратов, удержанная банком из зачисляемой выручки (для поступлений по эквайрингу)
	+ "СуммаДоходаУСН,"  // <Число> - Сумма дохода УСН в валюте регламентированного учета
	+ "ОтражениеВУСН,"   // <ПеречислениеСсылка.ОтражениеВУСН> - отражение в доходах АУСН
	+ "ИсточникРазметкиАУСН"; // <ПеречислениеСсылка.ИсточникиРазметкиАУСН>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты.
	
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"      // <ДокументСсылка>
	+ "ДатаДокументаРасчетов," // <Число>
	+ "СуммаВзаиморасчетов,"   // <Число>
	+ "СуммаРуб";              // <Число>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ОплатаРеализацийСНДС.
	
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"        // <ДокументСсылка>
	+ "СуммаБезНДС,"             // <Число>
	+ "НДС,"                     // <Число>
	+ "ВалютнаяСуммаРеализации," // <Число>
	+ "ВалютаРеализации,"        // <СправочникСсылка.Валюты>
	+ "КурсРеализации,"          // <Число>
	+ "КратностьРеализации";     // <Число>
	
	Параметры.Вставить("ОплатаРеализацийСНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыРеализацийСНДС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.РазметкаАУСНБанка
	
	СписокОбязательныхКолонок = ""
	+ "ПризнакНалоговойБазы," // <ПеречислениеСсылка.ПризнакиНалоговойБазыАУСН>
	+ "КатегорияОперации,"    // <ПеречислениеСсылка.КатегорииОперацийАУСН>
	+ "Сумма,"                // <Число>
	+ "ВалютнаяСумма";        // <Число>
	
	Параметры.Вставить("РазметкаАУСНБанка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРазметкаАУСНБанка, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеДенежныхСредств(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, ТаблицаПеречислениеЗарплаты, ТаблицаРазметкаАУСНБанка)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата> - период движений - дата документа
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка>
	+ "ВидОперации,"     // <ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств>
	+ "БезЗакрывающихДокументов," // <Булево>
	+ "ВалютаДокумента," // <СправочникСсылка.Валюты>
	+ "СчетУчета,"       // <СправочникСсылка.Валюты>
	+ "Субконто1,"       // <СправочникСсылка.Валюты>
	+ "НалоговыйПериод," // <Дата> - период, за который уплачивается налог
	+ "СуммаРасходаУСН," // <Число>
	+ "СуммаДокумента,"  // <Число>
	+ "ИсточникРазметкиАУСН"; // <ПеречислениеСсылка.ИсточникиРазметкиАУСН>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты.
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"            // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"    // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"      // <ДокументСсылка>
	+ "ДатаДокументаРасчетов," // <Число>
	+ "СуммаВзаиморасчетов,"   // <Число>
	+ "СуммаРуб";              // <Число>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо," // <СправочникСсылка.ФизическиеЛица>
	+ "Ведомость,"      // <ОпределяемыйТип.ВедомостьЗарплатаКадры>
	+ "СуммаКВыплате";  // <Число>
	
	Параметры.Вставить("ПеречислениеЗарплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеЗарплаты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.РазметкаАУСНБанка
	
	СписокОбязательныхКолонок = ""
	+ "ПризнакНалоговойБазы," // <ПеречислениеСсылка.ПризнакиНалоговойБазыАУСН>
	+ "КатегорияОперации,"    // <ПеречислениеСсылка.КатегорииОперацийАУСН>
	+ "Сумма,"                // <Число>
	+ "ВалютнаяСумма";        // <Число>
	
	Параметры.Вставить("РазметкаАУСНБанка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРазметкаАУСНБанка, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетАвансаПоставщику(ТаблицаРеквизиты, ТаблицаРасходы, ТаблицаВзаиморасчеты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата> - период движений - дата документа
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор";     // <ДокументСсылка>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Расходы.
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"         // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента," // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"   // <ДокументСсылка>
	+ "НалоговыйУчет,"      // <ПеречислениеСсылка.ОтражениеВУСН> - отражение расхода в налоговом учете
	+ "Сумма";              // <Число>
	
	Параметры.Вставить("Расходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты.
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"         // <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"    // <Число>
	+ "РасчетыВВалюте,"           // <Булево>
	+ "РасчетыВУсловныхЕдиницах," // <Булево>
	+ "СуммаВзаиморасчетов,"      // <Число>
	+ "СуммаРубПоКурсуАванса,"    // <Число>
	+ "СуммаРуб";                 // <Число>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетАвансаРеализацияСНДС(ТаблицаРеквизиты, ТаблицаВзаиморасчеты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата> - период движений - дата документа
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "ВалютаДокумента,"          // <СправочникСсылка.Валюты>
	+ "РасчетыВВалюте,"           // <Булево>
	+ "РасчетыВУсловныхЕдиницах," // <Булево>
	+ "СуммаДокумента,"           // <Число>
	+ "СуммаНДСДокумента";        // <Число>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты.
	
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"      // <ДокументСсылка>
	+ "ДатаДокументаРасчетов," // <Число>
	+ "СуммаВзаиморасчетов,"   // <Число>
	+ "СуммаРуб,"              // <Число>
	+ "СуммаРубПоКурсуАванса"; // <Число>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыДвиженийРазметки(ТаблицаРеквизиты, ТаблицаРазметка)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата> - период движений - дата документа
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Регистратор";              // <ДокументСсылка>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "БанковскаяОперация,"   // <ДокументСсылка>
	+ "ПризнакНалоговойБазы," // <ПеречислениеСсылка.ПризнакиНалоговойБазыАУСН>
	+ "КатегорияОперации,"    // <ПеречислениеСсылка.КатегорииОперацийАУСН>
	+ "Сумма,"                // <Число>
	+ "ВалютнаяСумма,"        // <Число>
	+ "Источник";             // <ПеречислениеСсылка.ИсточникиРазметкиАУСН>
	
	Параметры.Вставить("Разметка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРазметка, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыДвиженийПоступлениеРасходов(ТаблицаРеквизиты, ТаблицаРазметка)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты.
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"         // <СправочникСсылка.Контрагенты> - поставщик
	+ "ДоговорКонтрагента," // <СправочникСсылка.ДоговорыКонтрагентов> - договор с поставщиком
	+ "ДокументРасчетов,"   // <ДокументСсылка> - документ поставщика, регистрирующий расходы
	+ "НалоговыйУчет,"      // <ПеречислениеСсылка.ОтражениеВУСН> - отражение расхода в налоговом учете
	+ "Сумма";              // <Число>
	
	Параметры.Вставить("Расходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРазметка, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьСтрокуРазметки(ТаблицаРазметки, БанковскаяОперация, ПризнакНалоговойБазы, Категория, Сумма, ВалютнаяСумма, Источник = Неопределено)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРазметки.Добавить();
	
	НоваяСтрока.БанковскаяОперация = БанковскаяОперация;
	НоваяСтрока.ПризнакНалоговойБазы = ПризнакНалоговойБазы;
	НоваяСтрока.КатегорияОперации = Категория;
	НоваяСтрока.ВалютнаяСумма = ВалютнаяСумма;
	НоваяСтрока.Сумма = Сумма;
	НоваяСтрока.Источник = ?(Источник <> Неопределено, Источник, Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию());
	
КонецПроцедуры

Функция СуммыОперации(Сумма, КурсВалютыОперации, КурсВалютыРегламентированногоУчета)
	
	Результат = Новый Структура("ВалютнаяСумма, Сумма", 0, 0);
	
	Если КурсВалютыОперации <> Неопределено Тогда
		
		Результат.ВалютнаяСумма = Сумма;
		Результат.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			Сумма,
			КурсВалютыОперации,
			КурсВалютыРегламентированногоУчета);
		
	Иначе
		
		Результат.Сумма = Сумма;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияОтражаетсяВРазметке(ДокументОперации, ДатаДокумента, Организация)
	
	Возврат ЭтоБанковскаяОперация(ДокументОперации) И УчетнаяПолитика.ПрименяетсяАУСН(Организация, ДатаДокумента);
	
КонецФункции

Функция КатегорияОперацииНеЗадана()
	
	// Значение категории "по умолчанию" заполняется в разметке,
	// если для данного типа операции отсутствует категория в справочнике категорий, заданном в формате разметки.
	
	Возврат Перечисления.КатегорииОперацийАУСН.НеЗадана;
	
КонецФункции

Функция АналитикаРазметкиНалоговогоПлатежа(СчетУчета, ВидПлатежа, Организация, Период)
	
	АналитикаРазметки = НоваяАналитикаРазметки();
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(СчетУчета, Организация, Период);
	
	АналитикаРазметки.ПризнакНалоговойБазы = ПризнакНалоговойБазыУплатаНалога(ВидНалога, ВидПлатежа);
	АналитикаРазметки.КатегорияОперации = КатегорияОперацииУплатаНалога(ВидНалога, ВидПлатежа);
	
	Возврат АналитикаРазметки;
	
КонецФункции

Функция НоваяАналитикаРазметки()
	
	АналитикаРазметки = Новый Структура;
	
	АналитикаРазметки.Вставить("ПризнакНалоговойБазы");
	АналитикаРазметки.Вставить("КатегорияОперации");
	
	Возврат АналитикаРазметки;
	
КонецФункции

Функция ПризнакНалоговойБазыУплатаНалога(ВидНалога, ВидПлатежа)
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	ЭтоНалоговыйПлатеж = (ВидыНалоговыхПлатежей.Найти(ВидПлатежа) <> Неопределено);
	
	Если ЭтоНалоговыйПлатеж И НалогУчитываетсяВРасходах(ВидНалога) Тогда
		ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.Расход;
	Иначе
		ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза;
	КонецЕсли;
	
	Возврат ПризнакНалоговойБазы;
	
КонецФункции

Функция КатегорияОперацииУплатаНалога(ВидНалога, ВидПлатежа)
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	
	ЭтоНалоговыйПлатеж = (ВидыНалоговыхПлатежей.Найти(ВидПлатежа) <> Неопределено);
	ЭтоНалоговыеСанкции = Перечисления.ВидыПлатежейВГосБюджет.ЭтоПени(ВидПлатежа)
		Или Перечисления.ВидыПлатежейВГосБюджет.ЭтоШтраф(ВидПлатежа)
		Или Перечисления.ВидыПлатежейВГосБюджет.ЭтоПроценты(ВидПлатежа);
	
	// Собственная категория определена в протоколе только для некоторых видов налогов.
	
	Если ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж Тогда
		КатегорияОперации = Перечисления.КатегорииОперацийАУСН.ЕдиныйНалоговыйПлатеж;
	ИначеЕсли ЭтоНалоговыйПлатеж И ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор Тогда
		КатегорияОперации = Перечисления.КатегорииОперацийАУСН.УплатаТорговогоСбора;
	ИначеЕсли ЭтоНалоговыйПлатеж И ВидНалога = Перечисления.ВидыНалогов.АУСН Тогда
		КатегорияОперации = Перечисления.КатегорииОперацийАУСН.УплатаНалога;
	ИначеЕсли ЭтоНалоговыеСанкции И ВидНалога = Перечисления.ВидыНалогов.АУСН Тогда
		КатегорияОперации = Перечисления.КатегорииОперацийАУСН.НалоговыеСанкции;
	Иначе
		КатегорияОперации = КатегорияОперацииНеЗадана(); // Для всех остальных налогов.
	КонецЕсли;
	
	Возврат КатегорияОперации;
	
КонецФункции

Функция НалогУчитываетсяВРасходах(ВидНалога)
	
	УчитываемыеНалоги = Новый Массив;
	
	// НДФЛ налогового агента
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины);
	
	// НДС
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДС_ВвозимыеТовары);
	
	// Имущественные налоги
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.НалогНаИмущество);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ТранспортныйНалог);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ВнутригородскойОкруг);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскоеПоселение);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкруг);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородФедеральногоЗначения);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_МежселеннаяТерритория);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_МуниципальныйОкруг);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЗемельныйНалог_СельскоеПоселение);
	
	// Страховые взносы
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	УчитываемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия);
	
	Возврат УчитываемыеНалоги.Найти(ВидНалога) <> Неопределено;
	
КонецФункции

Функция СуммыОплаченногоНДС(Взаиморасчеты, ОплатаРеализацийСНДС, РасчетыВВалюте)
	
	Результат = Новый Структура("СуммаНДСРуб, СуммаНДСВал", 0, 0);
	
	Если Не ЗначениеЗаполнено(ОплатаРеализацийСНДС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОплатаРеализацийСНДС.Индексы.Добавить("ДокументРасчетов");
	
	Для Каждого СтрокаВзаиморасчетов Из Взаиморасчеты Цикл
		
		СтрокаОплатыНДС = ОплатаРеализацийСНДС.Найти(СтрокаВзаиморасчетов.ДокументРасчетов, "ДокументРасчетов");
		
		Если СтрокаОплатыНДС <> Неопределено Тогда
			
			// Рублевая суммма НДС реализаций в у.е., по которым ранее отражался частичный зачет аванса,
			// может быть отражена по разным курсам: часть по курсам зачтенных ранее авансов, часть по курсу реализации.
			// При постоплате необходимо исключить из доходов неоплаченный НДС по курсу реализации. Поэтому использовать
			// рублевую сумму НДС напрямую нельзя: необходимо вычислить валютную сумму оплаченного НДС и затем
			// пересчитать ее в рубли по курсу реализации.
			// 
			// Валютная сумма НДС не хранится в данных ИБ, поэтому ее можно определить только расчетным способом:
			// найти долю НДС в оплачиваемом документе и умножить сумму оплаты документа на эту долю.
			
			ДоляНДСПоДокументу = СтрокаОплатыНДС.НДС / (СтрокаОплатыНДС.НДС + СтрокаОплатыНДС.СуммаБезНДС);
			
			СуммаОплатыНДС    = СтрокаВзаиморасчетов.СуммаВзаиморасчетов * ДоляНДСПоДокументу;
			СуммаОплатыНДСРуб = СуммаОплатыНДС * СтрокаОплатыНДС.КурсРеализации / СтрокаОплатыНДС.КратностьРеализации;
			
			Результат.СуммаНДСРуб = Результат.СуммаНДСРуб + Окр(СуммаОплатыНДСРуб, 2);
			Если РасчетыВВалюте Тогда
				Результат.СуммаНДСВал = Результат.СуммаНДСВал + Окр(СуммаОплатыНДС, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРазметкуОплатаПоставщику(ТаблицаРазметки, Реквизиты, Взаиморасчеты)
	
	Если Не ЗначениеЗаполнено(Взаиморасчеты) Тогда
		Возврат;
	КонецЕсли;
	
	АналитикаВзаиморасчетов = Взаиморасчеты.Скопировать();
	АналитикаВзаиморасчетов.Свернуть(
		"Контрагент, ДоговорКонтрагента, ДокументРасчетов, ДатаДокументаРасчетов", "СуммаВзаиморасчетов, СуммаРуб");
	АналитикаВзаиморасчетов.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДокументОплаты", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("АналитикаВзаиморасчетов", АналитикаВзаиморасчетов);
	
	// Ограничение периода при запросе оборотов определяем по датам документов из таблицы взаиморасчетов.
	// Таблица отсортирована по дате документов, поэтому границы периода берем из первой и последней строки.
	Запрос.УстановитьПараметр("НачалоПериода", АналитикаВзаиморасчетов[0].ДатаДокументаРасчетов);
	Запрос.УстановитьПараметр("КонецПериода",
		АналитикаВзаиморасчетов[АналитикаВзаиморасчетов.Количество() - 1].ДатаДокументаРасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаВзаиморасчетов.Контрагент,
	|	АналитикаВзаиморасчетов.ДоговорКонтрагента,
	|	АналитикаВзаиморасчетов.ДокументРасчетов
	|ПОМЕСТИТЬ АналитикаВзаиморасчетов
	|ИЗ
	|	&АналитикаВзаиморасчетов КАК АналитикаВзаиморасчетов
	|ГДЕ
	|	АналитикаВзаиморасчетов.ДокументРасчетов <> &ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыАУСНОбороты.Контрагент,
	|	РасходыАУСНОбороты.ДоговорКонтрагента,
	|	РасходыАУСНОбороты.ДокументРасчетов,
	|	СУММА(РасходыАУСНОбороты.СуммаОборот) КАК Сумма,
	|	СУММА(ВЫБОР
	|		КОГДА РасходыАУСНОбороты.НалоговыйУчет <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются)
	|			ТОГДА РасходыАУСНОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаНеучитываемая
	|ИЗ
	|	РегистрНакопления.РасходыАУСН.Обороты(&НачалоПериода, &КонецПериода,, Организация = &Организация
	|	И (Контрагент, ДоговорКонтрагента, ДокументРасчетов) В
	|		(ВЫБРАТЬ
	|			АналитикаВзаиморасчетов.Контрагент,
	|			АналитикаВзаиморасчетов.ДоговорКонтрагента,
	|			АналитикаВзаиморасчетов.ДокументРасчетов
	|		ИЗ
	|			АналитикаВзаиморасчетов КАК АналитикаВзаиморасчетов)) КАК РасходыАУСНОбороты
	|СГРУППИРОВАТЬ ПО
	|	РасходыАУСНОбороты.Контрагент,
	|	РасходыАУСНОбороты.ДоговорКонтрагента,
	|	РасходыАУСНОбороты.ДокументРасчетов";
	
	РасходыПоДокументам = Запрос.Выполнить().Выгрузить();
	РасходыПоДокументам.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
	
	РасчетыВВалюте = (Реквизиты.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить());
	
	ОтборРасходов = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
	
	Для Каждого СтрокаВзаиморасчетов Из Взаиморасчеты Цикл
		
		Если СтрокаВзаиморасчетов.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Суммы в разметку
		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда
			
			// Аванс поставщику полностью отражается в расходах.
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки,
				Реквизиты.Регистратор,
				Перечисления.ПризнакиНалоговойБазыАУСН.Расход,
				КатегорияОперацииНеЗадана(),
				СтрокаВзаиморасчетов.СуммаРуб,
				?(РасчетыВВалюте, СтрокаВзаиморасчетов.СуммаВзаиморасчетов, 0));
			
		Иначе
			
			// Оплате ранее полученных документов поставщика. Используется концептуальное допущение налогового режима:
			// любой платеж поставщику отражается в разметке как расход, если явно не известно обратное.
			
			ЗаполнитьЗначенияСвойств(ОтборРасходов, СтрокаВзаиморасчетов);
			
			СтрокиРасходов = РасходыПоДокументам.НайтиСтроки(ОтборРасходов);
			Если СтрокиРасходов.Количество() > 0
				И (СтрокиРасходов[0].СуммаНеучитываемая <> 0 И СтрокиРасходов[0].Сумма <> 0) Тогда
				ДоляНеучитываемыхРасходов = СтрокиРасходов[0].СуммаНеучитываемая / СтрокиРасходов[0].Сумма;
			Иначе
				ДоляНеучитываемыхРасходов = 0;
			КонецЕсли;
			
			СуммаНеучитываемыхРасходовВал = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетов * ДоляНеучитываемыхРасходов, 2);
			СуммаНеучитываемыхРасходовРуб = Окр(
				СуммаНеучитываемыхРасходовВал * (СтрокаВзаиморасчетов.СуммаРуб / СтрокаВзаиморасчетов.СуммаВзаиморасчетов),
				2);
			СуммаУчитываемыхРасходовВал = СтрокаВзаиморасчетов.СуммаВзаиморасчетов - СуммаНеучитываемыхРасходовВал;
			СуммаУчитываемыхРасходовРуб = СтрокаВзаиморасчетов.СуммаРуб - СуммаНеучитываемыхРасходовРуб;
			
			// Непринимаемые расходы.
			Если СуммаНеучитываемыхРасходовВал > 0 Тогда
				
				ДобавитьСтрокуРазметки(ТаблицаРазметки,
					Реквизиты.Регистратор,
					Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза,
					КатегорияОперацииНеЗадана(),
					СуммаНеучитываемыхРасходовРуб,
					?(РасчетыВВалюте, СуммаНеучитываемыхРасходовВал, 0));
				
			КонецЕсли;
			
			// Принимаемые расходы.
			Если СуммаУчитываемыхРасходовВал > 0 Тогда
				
				ДобавитьСтрокуРазметки(ТаблицаРазметки,
					Реквизиты.Регистратор,
					Перечисления.ПризнакиНалоговойБазыАУСН.Расход,
					КатегорияОперацииНеЗадана(),
					СуммаУчитываемыхРасходовРуб,
					?(РасчетыВВалюте, СуммаУчитываемыхРасходовВал, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуммыДоходовПоДокументам(БанковскиеДокументы, Реквизиты)
	
	ДоходыПоДокументам = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(БанковскиеДокументы) Тогда
		Возврат ДоходыПоДокументам;
	КонецЕсли;
	
	// Исключим документы, не отражающиеся в разметке.
	ТипыОперацийРазметки = Метаданные.РегистрыНакопления.РазметкаАУСН.Измерения.БанковскаяОперация.Тип;
	
	БанковскиеОперации = Новый Массив;
	
	Для Каждого БанковскийДокумент Из БанковскиеДокументы Цикл
		Если ТипыОперацийРазметки.СодержитТип(ТипЗнч(БанковскийДокумент)) Тогда
			БанковскиеОперации.Добавить(БанковскийДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если БанковскиеОперации.Количество() = 0 Тогда
		Возврат ДоходыПоДокументам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("БанковскиеОперации", БанковскиеОперации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазметкаАУСН.БанковскаяОперация КАК БанковскаяОперация,
	|	СУММА(РазметкаАУСН.Сумма) КАК Всего,
	|	СУММА(ВЫБОР
	|			КОГДА РазметкаАУСН.ПризнакНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.ПризнакиНалоговойБазыАУСН.Приход)
	|				ТОГДА РазметкаАУСН.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогооблагаемыйДоход
	|ИЗ
	|	РегистрНакопления.РазметкаАУСН КАК РазметкаАУСН
	|ГДЕ
	|	РазметкаАУСН.Активность
	|	И РазметкаАУСН.Организация = &Организация
	|	И РазметкаАУСН.БанковскаяОперация В(&БанковскиеОперации)
	|	И РазметкаАУСН.Период <= &Период
	|	И РазметкаАУСН.Регистратор <> &Регистратор
	|	И РазметкаАУСН.Источник <> ЗНАЧЕНИЕ(Перечисление.ИсточникиРазметкиАУСН.Банк)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазметкаАУСН.БанковскаяОперация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СуммыДоходов = НовыйСуммыДоходов();
		ЗаполнитьЗначенияСвойств(СуммыДоходов, Выборка);
		
		ДоходыПоДокументам.Вставить(Выборка.БанковскаяОперация, СуммыДоходов);
		
	КонецЦикла;
	
	Возврат ДоходыПоДокументам;
	
КонецФункции

Функция НовыйСуммыДоходов()
	
	СуммыДоходов = Новый Структура;
	
	СуммыДоходов.Вставить("Всего", 0);
	СуммыДоходов.Вставить("НалогооблагаемыйДоход", 0);
	
	Возврат СуммыДоходов;
	
КонецФункции

Функция НоваяТаблицаРазметки()
	
	ТаблицаРазметки = Новый ТаблицаЗначений;
	
	ТаблицаРазметки.Колонки.Добавить("БанковскаяОперация", Метаданные.РегистрыНакопления.РазметкаАУСН.Измерения.БанковскаяОперация.Тип);
	ТаблицаРазметки.Колонки.Добавить("ПризнакНалоговойБазы", Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиНалоговойБазыАУСН"));
	ТаблицаРазметки.Колонки.Добавить("КатегорияОперации", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииОперацийАУСН"));
	ТаблицаРазметки.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаРазметки.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаРазметки.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиРазметкиАУСН"));
	
	Возврат ТаблицаРазметки;
	
КонецФункции

Процедура ЗаполнитьРазметкуПеречислениеЗарплаты(ТаблицаРазметки, Реквизиты, ПеречислениеЗарплаты)
	
	Если (ПеречислениеЗарплаты.Количество() = 0)
		Или ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		
		// Зарплата всегда выплачивается в рублях, поэтому валютные суммы разметки не рассчитываются.
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход, КатегорияОперацииНеЗадана(),
			Реквизиты.СуммаРасходаУСН, 0);
		
		НеоблагаемыйРасход = Макс(Реквизиты.СуммаДокумента - Реквизиты.СуммаРасходаУСН, 0);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
			НеоблагаемыйРасход, 0);
		
		Возврат;
		
	КонецЕсли;
	
	// Получим данные о начислениях в разрезе физлиц, подразделений и отражения в налоговом учете
	// по движениям ведомости.
	
	Начисления = УчетЗарплаты.ДанныеОтраженияВыплатПоВедомостямВАУСН(
		Реквизиты.Организация,
		КонецДня(Реквизиты.Период),
		ПеречислениеЗарплаты);
	
	УчетРасходов = Новый ТаблицаЗначений;
	УчетРасходов.Колонки.Добавить("ОтражениеРасходов", Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	УчетРасходов.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Распределяем выплаты физлицам по ведомостям пропорционально отражению начислений в расходах.
	
	ОтборНачислений = Новый Структура("Ведомость, ФизическоеЛицо");
	
	Для Каждого ВыплатаФизлицу Из ПеречислениеЗарплаты Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборНачислений, ВыплатаФизлицу);
		
		НачисленияПоВыплате = Начисления.Скопировать(ОтборНачислений);
		НачисленияПоВыплате.Свернуть("ФизическоеЛицо, ДокументОснование, ОтражениеРасходов", "Сумма");
		
		// Строки с отрицательной суммой - зачтенные начисления аванса (за первую половину месяца).
		// В БЗКБ применено допущение, что в начислении первой половины месяца не должно быть дополнительных видов доходов,
		// только основное начисление. Считаем, что основное начисление при АУСН всегда учитывается в расходах.
		// Непринимаемые отклонения регистрируются только в итоговом начислении за месяц.
		// Поэтому долю непринимаемых начислений определяем только по начислениям конца месяца, зачтенные непринимаемые
		// начисления аванса со знаком "минус" не учитываем.
		
		НачисленоВсегоЗаВычетомАванса = НачисленияПоВыплате.Итог("Сумма");
		
		Если НачисленоВсегоЗаВычетомАванса <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачисленоНеПринимается = 0;
		Для Каждого СтрокаНачисления Из НачисленияПоВыплате Цикл
			Если СтрокаНачисления.Сумма > 0
					И СтрокаНачисления.ОтражениеРасходов = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
				НачисленоНеПринимается = НачисленоНеПринимается + СтрокаНачисления.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		// Если сумма непринимаемых начислений больше, чем общая сумма за вычетом аванса, превышение не учитываем.
		// Оно должно было быть отражено при начислении аванса.
		НачисленоНеПринимается = Мин(НачисленоНеПринимается, НачисленоВсегоЗаВычетомАванса);
		
		ВыплаченоНеПринимается = Окр(ВыплатаФизлицу.СуммаКВыплате * НачисленоНеПринимается / НачисленоВсегоЗаВычетомАванса, 2);
		ВыплаченоПринимается   = ВыплатаФизлицу.СуммаКВыплате - ВыплаченоНеПринимается;
		
		УчтеннаяВыплата = УчетРасходов.Добавить();
		УчтеннаяВыплата.ОтражениеРасходов = Перечисления.ОтражениеВУСН.НеПринимаются;
		УчтеннаяВыплата.Сумма = ВыплаченоНеПринимается;
		
		УчтеннаяВыплата = УчетРасходов.Добавить();
		УчтеннаяВыплата.ОтражениеРасходов = Перечисления.ОтражениеВУСН.Принимаются;
		УчтеннаяВыплата.Сумма = ВыплаченоПринимается;
		
	КонецЦикла;
	
	УчетРасходов.Свернуть("ОтражениеРасходов", "Сумма");
	УчетРасходов.Сортировать("ОтражениеРасходов");
	
	Для каждого ИтоговыйРасход Из УчетРасходов Цикл
		
		Если ИтоговыйРасход.ОтражениеРасходов = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
			ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза;
		Иначе
			ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.Расход;
		КонецЕсли;
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			ПризнакНалоговойБазы, Перечисления.КатегорииОперацийАУСН.ВыплатаФизическомуЛицу,
			ИтоговыйРасход.Сумма, 0);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРазметкуПеречислениеНДФЛ(ТаблицаРазметки, Реквизиты)
	
	Если Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		
		УчетРасходов = УчетЗарплаты.ДанныеОтраженияНДФЛПеречисленногоВАУСН(
			Реквизиты.Организация,
			Реквизиты.Период,
			Реквизиты.Регистратор,
			Реквизиты.НалоговыйПериод,
			Реквизиты.СуммаДокумента);
		
		УчетРасходов.Свернуть("ОтражениеРасходов", "Сумма");
		УчетРасходов.Сортировать("ОтражениеРасходов");
		
		Для Каждого ИтоговыйРасход Из УчетРасходов Цикл
			
			Если ИтоговыйРасход.ОтражениеРасходов = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
				ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза;
			Иначе
				ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.Расход;
			КонецЕсли;
			
			ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
				ПризнакНалоговойБазы, КатегорияОперацииНеЗадана(),
				ИтоговыйРасход.Сумма, 0);
			
		КонецЦикла;
		
	Иначе // Учет зарплаты во внешней программе, сумма расхода задается пользователем в документе.
		
		ПринимаемыйРасход = Реквизиты.СуммаРасходаУСН;
		НепринимаемыйРасход = Макс(Реквизиты.СуммаДокумента - Реквизиты.СуммаРасходаУСН, 0);
		
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.Расход, КатегорияОперацииНеЗадана(),
			ПринимаемыйРасход, 0);
		ДобавитьСтрокуРазметки(ТаблицаРазметки, Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза, КатегорияОперацииНеЗадана(),
			НепринимаемыйРасход, 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРазметкуВозвратПокупателю(ТаблицаРазметки, Реквизиты, СуммыВозврата)
	
	СуммаУменьшенияДоходаАУСН = Реквизиты.СуммаРасходаУСН;
	СуммаНеНалоговаяБазаАУСН = СуммыВозврата.Сумма - СуммаУменьшенияДоходаАУСН;
	
	ДобавитьСтрокуРазметки(ТаблицаРазметки,
		Реквизиты.Регистратор,
		Перечисления.ПризнакиНалоговойБазыАУСН.ВозвратПрихода,
		КатегорияОперацииНеЗадана(),
		СуммаУменьшенияДоходаАУСН,
		СуммыВозврата.ВалютнаяСумма);
	
	Если СуммаНеНалоговаяБазаАУСН <> 0 Тогда
		ДобавитьСтрокуРазметки(ТаблицаРазметки,
			Реквизиты.Регистратор,
			Перечисления.ПризнакиНалоговойБазыАУСН.НеНалоговаяБаза,
			КатегорияОперацииНеЗадана(),
			СуммаНеНалоговаяБазаАУСН,
			СуммыВозврата.ВалютнаяСумма);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоБанковскаяОперация(ДокументОперации)
	
	ТипыОперацийРазметки = Метаданные.РегистрыНакопления.РазметкаАУСН.Измерения.БанковскаяОперация.Тип;
	
	Возврат ТипыОперацийРазметки.СодержитТип(ТипЗнч(ДокументОперации));
	
КонецФункции

#КонецОбласти
