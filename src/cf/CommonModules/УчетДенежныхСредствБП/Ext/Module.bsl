#Область ПрограммныйИнтерфейс

#Область РаботаСБанковскимиДокументами

// Форматирует сумму банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо отформатировать
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

// Форматирует сумму прописью банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописи;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

Функция НаименованиеПлательщикаПолучателяПоУмолчанию(ВладелецСчета, БанковскийСчет, ПеречислениеВБюджет = Ложь, Период = Неопределено, Знач СвойстваВладельца = Неопределено, Знач СвойстваБанковскогоСчета = Неопределено) Экспорт
	
	ЭтоОрганизация = ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации");
	Если СвойстваВладельца = Неопределено Тогда
		СвойстваВладельца = СвойстваВладельцаСчета(ВладелецСчета, Период);
	КонецЕсли;
	
	Если СвойстваБанковскогоСчета = Неопределено Тогда
		СвойстваБанковскогоСчета = СвойстваБанковскогоСчета(БанковскийСчет);
	КонецЕсли;
	
	Если ЭтоОрганизация И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ВладелецСчета) Тогда
		СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(ВладелецСчета, Период);
		Если ПеречислениеВБюджет Тогда
			// 383-П:
			// Ф.И.О.  и  правовой  статус [//Адрес регистрации//] [счет в банке-корреспонденте]
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВладелецСчета, Период);
			ЭтоИП = СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
			ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
			Если ЭтоИП И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдресИП) Тогда
				ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдресИП;
			КонецЕсли;
			
			Наименование = ПлатежиВБюджетКлиентСервер.НаименованиеПлательщикаФизическогоЛица(
				Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ВладелецСчета, Период),
				ЮридическийАдрес,
				Период, ЭтоИП);
		Иначе
			// 383-П:
			// для физических лиц - полностью фамилия, имя, отчество (если иное не вытекает из закона или национального обычая) (далее - Ф.И.О.);
			// для индивидуальных предпринимателей - Ф.И.О. и правовой статус;
			Наименование = СвойстваВладельца.НаименованиеДляПечатныхФорм;
		КонецЕсли;
	Иначе
		Наименование = СокрЛП(СвойстваВладельца.НаименованиеДляПечатныхФорм);
	КонецЕсли;

	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СокрЛП(СвойстваВладельца.Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СвойстваБанковскогоСчета.БанкДляРасчетов)
			И ЗначениеЗаполнено(СвойстваБанковскогоСчета.Банк) Тогда
			
		СвойстваБанка  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваБанковскогоСчета.Банк, "Наименование, Город");
		
		Наименование = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 р/с %2 в %3 %4'"),
			Наименование, СвойстваБанковскогоСчета.НомерСчета, СокрЛП(СвойстваБанка.Наименование), СвойстваБанка.Город));
			
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

// Формируется текст плательщика или получателя для печатной формы платежного документа
//
// Параметры
//  ТекстНаименования  	– <строка> – значение реквизита документа, если реквизит заполнен, он и выводится на печать
//  ВладелецСчета  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – владелец банковского счета
//  БанковскийСчет		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика или получателя
//  ПеречислениеВБюджет	– <Булево> – флаг перечисления в бюджет
//
// Возвращаемое значение:
//   <Строка>			– наименование плательщика или получателя, которое будет выводиться в печатной форме платежного документа
//
Функция СформироватьТекстНаименованияПлательщикаПолучателя(ТекстНаименования, ВладелецСчета, БанковскийСчет, ПеречислениеВБюджет = Ложь, Период = Неопределено) Экспорт
	
	ТекстРезультат = ТекстНаименования;
	Если ПустаяСтрока(ТекстРезультат) Тогда
		
		ЭтоОрганизация = ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации");
		
		СвойстваВладельца = СвойстваВладельцаСчета(ВладелецСчета, Период);
		
		СвойстваБанковскогоСчета = СвойстваБанковскогоСчета(БанковскийСчет);
		
		Если ЭтоОрганизация И ПеречислениеВБюджет
			И НЕ ПустаяСтрока(СвойстваВладельца.НаименованиеПлательщикаПриПеречисленииВБюджет) Тогда
			
			ТекстРезультат = СокрЛП(СвойстваВладельца.НаименованиеПлательщикаПриПеречисленииВБюджет);
			
		ИначеЕсли ПустаяСтрока(СвойстваБанковскогоСчета.ТекстКорреспондента) Тогда
			
			ТекстРезультат = НаименованиеПлательщикаПолучателяПоУмолчанию(
				ВладелецСчета,
				БанковскийСчет,
				ПеречислениеВБюджет,
				Период,
				СвойстваВладельца,
				СвойстваБанковскогоСчета);
			
		Иначе
			
			ТекстРезультат = СокрЛП(СвойстваБанковскогоСчета.ТекстКорреспондента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультат;
	
КонецФункции // СформироватьТекстНаименованияПлательщикаПолучателя

// Формирует значения по умолчанию реквизитов плательщика и получателя для банковских платежных документов
//
// Параметры
//  Плательщик  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – плательщик, владелец банковского счета
//  СчетПлательщика		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика
//  Получатель  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – получатель, владелец банковского счета
//  СчетПолучателя		– <СправочникСсылка.БанковскиеСчета> – банковский счет получателя
//  ПеречислениеВБюджет	– <Булево> – флаг перечисления в бюджет
//
// Возвращаемое значение:
//   <Структура>		– структура строковых реквизитов плательщика и получателя
//						  ключи структуры: 
//							ТекстПлательщика, ИННПлательщика, КПППлательщика, 
//							ТекстПолучателя, ИННПолучателя, КПППолучателя
//							НаименованиеБанкаПлательщика, НомерСчетаПлательщика, БикБанкаПлательщика, СчетБанкаПлательщика 
//							НаименованиеБанкаПолучателя, НомерСчетаПолучателя, БикБанкаПолучателя, СчетБанкаПолучателя
//
Функция СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(Плательщик, СчетПлательщика, Получатель, СчетПолучателя, ПеречислениеВБюджет = Ложь, Период = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Должник = Неопределено) Экспорт
	
	ЗначенияРеквизитов = Новый Структура;
	
	Если ЗначениеЗаполнено(Плательщик) Тогда
		СвойстваПлательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Плательщик,
			"ЮридическоеФизическоеЛицо, ИНН");
		Если ТипЗнч(Плательщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			СвойстваПлательщика.Вставить("КПП", Справочники.Контрагенты.КППНаДату(Плательщик, Период));
		ИначеЕсли ТипЗнч(Плательщик) = Тип("СправочникСсылка.Организации") Тогда
			ТолькоОсновнаяРегистрация = Не ПеречислениеВБюджет;
			СвойстваПлательщика.Вставить("КПП",
				Справочники.Организации.КППНаДату(Плательщик, Период, ТолькоОсновнаяРегистрация));
		Иначе
			СвойстваПлательщика.Вставить("КПП", ""); // физ.лицо или не поддерживаемый тип
		КонецЕсли;
	Иначе
		СвойстваПлательщика = Новый Структура("ЮридическоеФизическоеЛицо, ИНН, КПП",
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		СвойстваПлательщика.Вставить("КПП", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетПлательщика) Тогда
		СвойстваСчетаПлательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетПлательщика,
			"Владелец, Банк, НомерСчета, БанкДляРасчетов, ВсегдаУказыватьКПП");
	Иначе
		СвойстваСчетаПлательщика = Новый Структура("Владелец, Банк, НомерСчета, БанкДляРасчетов, ВсегдаУказыватьКПП",
			Неопределено, СчетПлательщика.Банк, "", СчетПлательщика.БанкДляРасчетов, Ложь);
	КонецЕсли;
	
	ПолучательНерезидент = Ложь;
	ПолучательГосударственныйОрган = Ложь;
	ПолучательВидГосударственногоОргана = Неопределено;
	Если ЗначениеЗаполнено(Получатель) Тогда
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СвойстваПолучателя = Новый Структура("ЮридическоеФизическоеЛицо, ИНН, КПП",
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Получатель.ИНН, "");
		Иначе
			СвойстваПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
				"ЮридическоеФизическоеЛицо, ИНН");
			Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				СвойстваПолучателя.Вставить("КПП", Справочники.Контрагенты.КППНаДату(Получатель, Период));
				РеквизитыПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
					"СтранаРегистрации, ГосударственныйОрган, ГоловнойКонтрагент, ВидГосударственногоОргана");
				ПолучательНерезидент = РеквизитыПолучателя.СтранаРегистрации <> Справочники.СтраныМира.Россия;
				ПолучательГосударственныйОрган = РеквизитыПолучателя.ГосударственныйОрган;
				ПолучательВидГосударственногоОргана = РеквизитыПолучателя.ВидГосударственногоОргана;
				Если Не ПолучательГосударственныйОрган Тогда
					ПолучательГосударственныйОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПолучателя.ГоловнойКонтрагент, "ГосударственныйОрган");
				КонецЕсли;
			Иначе
				СвойстваПолучателя.Вставить("КПП", Справочники.Организации.КППНаДату(Получатель, Период, Ложь));
			КонецЕсли;
		КонецЕсли;
	Иначе
		СвойстваПолучателя = Новый Структура("ЮридическоеФизическоеЛицо, ИНН, КПП",
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "", "");
	КонецЕсли;
	
	ПеречислениеПоИсполнительномуДокументу = Ложь;
	Если ЗначениеЗаполнено(Должник) Тогда
		ПеречислениеПоИсполнительномуДокументу = Истина;
		Если ПолучательГосударственныйОрган Тогда
			ИННДолжника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должник, "ИНН");
			Если ПустаяСтрока(ИННДолжника) Тогда
				СвойстваПлательщика.Вставить("ИНН", "0");
			Иначе
				СвойстваПлательщика.Вставить("ИНН", ИННДолжника);
			КонецЕсли;
			СвойстваПлательщика.Вставить("КПП", "0");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетПолучателя) Тогда
		СвойстваСчетаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетПолучателя,
			"Владелец, Банк, НомерСчета, БанкДляРасчетов, ВсегдаУказыватьКПП, ТекстНазначения");
	Иначе
		СвойстваСчетаПолучателя = Новый Структура("Владелец, Банк, НомерСчета, БанкДляРасчетов, ВсегдаУказыватьКПП, ТекстНазначения",
			Неопределено, СчетПолучателя.Банк, "", СчетПолучателя.БанкДляРасчетов, Ложь, "");
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = ПеречислениеВБюджет И ТипЗнч(Плательщик) = Тип("СправочникСсылка.Контрагенты");
	
	ОрганизацияПлательщик = Плательщик;
	Если УплатаНалогаЗаТретьихЛиц Тогда
		ПлательщикВБюджетИП = СвойстваПлательщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		ОрганизацияПлательщик = СвойстваСчетаПлательщика.Владелец;
	Иначе
		ПлательщикВБюджетИП = ТипЗнч(Плательщик) = Тип("СправочникСсылка.Организации") И
			СвойстваПлательщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ТекстПлательщика",
		СформироватьТекстНаименованияПлательщикаПолучателя(
			"",
			ОрганизацияПлательщик,
			СчетПлательщика,
			ПеречислениеВБюджет Или ПеречислениеПоИсполнительномуДокументу,
			Период));
	
	Если (ПеречислениеВБюджет И ПлательщикВБюджетИП И ПустаяСтрока(СвойстваПлательщика.ИНН))
		И Не ПеречислениеПоИсполнительномуДокументу Тогда
		// Если платеж в бюджет, то согласно Приказу Минфина РФ от 12.11.2013 N 107н если у ИП нет ИНН, проставляется "0"
		ЗначенияРеквизитов.Вставить("ИННПлательщика", "0");
	Иначе
		ЗначенияРеквизитов.Вставить("ИННПлательщика", СвойстваПлательщика.ИНН);
	КонецЕсли;
	
	ВсегдаУказыватьКПППлательщика = ПеречислениеВБюджет ИЛИ СвойстваСчетаПлательщика.ВсегдаУказыватьКПП И НЕ ПлательщикВБюджетИП;
	ЗначенияРеквизитов.Вставить("ВсегдаУказыватьКПППлательщика", ВсегдаУказыватьКПППлательщика);
	
	КПППлательщика = "";
	Если ВсегдаУказыватьКПППлательщика Тогда
		// Если платеж в бюджет, то согласно Приказу Минфина РФ от 12.11.2013 N 107н если это ИП, то в поле КПП проставляется "0"
		Если ПлательщикВБюджетИП Тогда
			КПППлательщика = "0";
		Иначе
			КПППлательщика = СвойстваПлательщика.КПП;
			
			Если ПеречислениеВБюджет
				И (ПолучательВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
					Или ПолучательВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС)
				И ТипЗнч(Плательщик) = Тип("СправочникСсылка.Организации") Тогда
				// В случае уплаты в фонды крупнейшего налогоплательщика в поле "КПП плательщика" указывается КПП по основной регистрации.
				ДатаПлатежа = Период;
				Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
					ДатаПлатежа = ОбщегоНазначения.ТекущаяДатаПользователя();
				КонецЕсли;
				КПППлательщика = Справочники.Организации.КППНаДату(Плательщик, ДатаПлатежа, Истина);
			ИначеЕсли ПеречислениеВБюджет
				И ПолучательВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган
				И ТипЗнч(Плательщик) = Тип("СправочникСсылка.Организации") Тогда
				// В случае уплаты ЕНП в поле "КПП плательщика" указывается КПП головной организации.
				ДатаПлатежа = Период;
				Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
					ДатаПлатежа = ОбщегоНазначения.ТекущаяДатаПользователя();
				КонецЕсли;
				ПлательщикЕНП = УчетнаяПолитика.ПлательщикЕНП(Плательщик, ДатаПлатежа);
				
				Если ПлательщикЕНП Тогда
					ПлательщикГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Плательщик);
					Если ПлательщикГоловнаяОрганизация <> Плательщик Тогда
						КПППлательщика = Справочники.Организации.КППНаДату(ПлательщикГоловнаяОрганизация, ДатаПлатежа, Ложь);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("КПППлательщика", КПППлательщика);
	
	ПереводНаДругойСчет = ЗначениеЗаполнено(СчетПлательщика)
		И (СвойстваСчетаПолучателя.Владелец = СвойстваСчетаПлательщика.Владелец);
	Если ПереводНаДругойСчет Тогда
		ВладелецСчетаПолучателя = Плательщик;
		СвойстваВладельцаСчетаПолучателя = СвойстваПлательщика;
	Иначе
		ВладелецСчетаПолучателя = Получатель;
		СвойстваВладельцаСчетаПолучателя = СвойстваПолучателя;
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ТекстПолучателя",
		СформироватьТекстНаименованияПлательщикаПолучателя(
			"",
			ВладелецСчетаПолучателя,
			СчетПолучателя,
			ПеречислениеВБюджет Или ПеречислениеПоИсполнительномуДокументу,
			Период));
	
	ПолучательФизЛицо = СвойстваВладельцаСчетаПолучателя.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Если ПолучательФизЛицо И ПустаяСтрока(СвойстваВладельцаСчетаПолучателя.ИНН) Тогда
		// У получателя - физического лица (или ИП) может не быть ИНН,
		// в этом случае действуем так, как рекомендуется поступать в Приказу Минфина РФ от 12.11.2013 N 107н
		// когда у ИП отсутствует ИНН. Проставляем "0" - в этом случае проверка на заполенность ИНН не будет срабатывать.
		ЗначенияРеквизитов.Вставить("ИННПолучателя", "0");
	ИначеЕсли ПолучательНерезидент И ПустаяСтрока(СвойстваВладельцаСчетаПолучателя.ИНН) Тогда
		ЗначенияРеквизитов.Вставить("ИННПолучателя", "0");
	Иначе
		ЗначенияРеквизитов.Вставить("ИННПолучателя", СвойстваВладельцаСчетаПолучателя.ИНН);
	КонецЕсли;
	
	ВсегдаУказыватьКПППолучателя = ПеречислениеВБюджет ИЛИ СвойстваСчетаПолучателя.ВсегдаУказыватьКПП;
	ЗначенияРеквизитов.Вставить("ВсегдаУказыватьКПППолучателя", ВсегдаУказыватьКПППолучателя);
	ЗначенияРеквизитов.Вставить("КПППолучателя",
		?(ВсегдаУказыватьКПППолучателя,
		?(НЕ ПустаяСтрока(СвойстваВладельцаСчетаПолучателя.КПП), СвойстваВладельцаСчетаПолучателя.КПП, "0"),
		""));
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СвойстваСчетаПлательщика.БанкДляРасчетов);
	БанкПлательщика = ?(НепрямыеРасчетыУПлательщика, СвойстваСчетаПлательщика.БанкДляРасчетов, СвойстваСчетаПлательщика.Банк);
	Если ЗначениеЗаполнено(БанкПлательщика) Тогда
		ЗначенияРеквизитов.Вставить("НаименованиеБанкаПлательщика",
			СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"),
				БанкПлательщика.Наименование, БанкПлательщика.Город)));
		ЗначенияРеквизитов.Вставить("НомерСчетаПлательщика",
			?(НепрямыеРасчетыУПлательщика, СвойстваСчетаПлательщика.Банк.КоррСчет, СвойстваСчетаПлательщика.НомерСчета));
		ЗначенияРеквизитов.Вставить("БикБанкаПлательщика",  БанкПлательщика.Код);
		ЗначенияРеквизитов.Вставить("СчетБанкаПлательщика", БанкПлательщика.КоррСчет);
	Иначе
		ЗначенияРеквизитов.Вставить("НаименованиеБанкаПлательщика", "");
		ЗначенияРеквизитов.Вставить("НомерСчетаПлательщика",        "");
		ЗначенияРеквизитов.Вставить("БикБанкаПлательщика",          "");
		ЗначенияРеквизитов.Вставить("СчетБанкаПлательщика",         "");
	КонецЕсли;
	
	НепрямыеРасчетыУПолучателя = ЗначениеЗаполнено(СвойстваСчетаПолучателя.БанкДляРасчетов);
	БанкПолучателя = ?(НепрямыеРасчетыУПолучателя, СвойстваСчетаПолучателя.БанкДляРасчетов, СвойстваСчетаПолучателя.Банк);
	
	Если ЗначениеЗаполнено(БанкПолучателя) Тогда
		СвойстваБанкаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкПолучателя,
			"Код, Наименование, КоррСчет, Город");
	Иначе
		СвойстваБанкаПолучателя = Новый Структура("Код, Наименование, КоррСчет, Город", "", "", "", "");
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПолучателя",
		СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			СвойстваБанкаПолучателя.Наименование, СвойстваБанкаПолучателя.Город)));
	ЗначенияРеквизитов.Вставить("НомерСчетаПолучателя",
		?(НепрямыеРасчетыУПолучателя, ?(ЗначениеЗаполнено(СвойстваСчетаПолучателя.Банк),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваСчетаПолучателя.Банк, "КоррСчет"), ""),
			СвойстваСчетаПолучателя.НомерСчета));
	ЗначенияРеквизитов.Вставить("БикБанкаПолучателя",     СвойстваБанкаПолучателя.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПолучателя",    СвойстваБанкаПолучателя.КоррСчет);
	ЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", СвойстваСчетаПолучателя.ТекстНазначения);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции //СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры:
//  Счет                    -  СправочникСсылка.БанковскиеСчета - текущее значение счета.
//  ВладелецСчета           –  СправочникСсылка.Контрагенты, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица - Контрагент (Организация, Физлицо),
//                             счет которого нужно получить.
//  Валюта                  –  СправочникСсылка.Валюты - валюта счета.
//  СовпадениеВалюты        –  Булево - признак совпадения нужной валюты с указанной, либо исключения ее из поиска.
//                             По умолчанию ищем счет с указанной валютой.
//  УчитыватьВалюту         –  Булево - признак необходмости учитывать валюту при поиске счета.
//                             По умолчанию при поиске учитываем валюту.
//  НомерСчета              –  Строка - Точный номер счета для поиска
//                             По умолчанию не учитывается.
//  ГосударственныйКонтракт –  СправочникСсылка.ГосКонтракты - номер гос. контракта
//                             По умолчанию не учитывается.
//  ЦифровойСчет            –  Булево - Признак цифрового счета
//                             По умолчанию не учитывается.
//
// ВозвращаемоеЗначение:
//  Булево – установлен / не установлен счет по умолчанию
//
Функция УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, СовпадениеВалюты = Истина, УчитыватьВалюту = Истина, НомерСчета = Неопределено, 
	ГосударственныйКонтракт = Неопределено, ЦифровойСчет = Ложь) Экспорт
	
	Если ТипЗнч(Счет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ВладелецСчета) Тогда
		ПолучитьНовыйСчет = Счет <> НовыйСчет;
		Счет = НовыйСчет;
		Возврат ПолучитьНовыйСчет;
	КонецЕсли;
	
	ПриведенныйНомерСчета = "";
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(БанковскиеПравила.МаксимальнаяДлинаНомераСчета());
		ПриведенныйНомерСчета = ТипСтрока.ПривестиЗначение(НомерСчета);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (&УчитыватьВалюту = ЛОЖЬ
	|			ИЛИ (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|					И &СовпадениеВалюты = ИСТИНА
	|				ИЛИ НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|					И &СовпадениеВалюты = ЛОЖЬ))
	|	И (&УчитыватьНомерСчета = ЛОЖЬ
	|			ИЛИ БанковскиеСчета.НомерСчета = &НомерСчета)
	|	И (&ГосударственныйКонтракт = НЕОПРЕДЕЛЕНО
	|			ИЛИ БанковскиеСчета.ГосударственныйКонтракт = &ГосударственныйКонтракт)
	|	И БанковскиеСчета.ЦифровойСчет = &ЦифровойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",       	 ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",              	 Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",    	 СовпадениеВалюты);
	Запрос.УстановитьПараметр("УчитыватьВалюту",     	 УчитыватьВалюту);
	Запрос.УстановитьПараметр("УчитыватьНомерСчета", 	 ЗначениеЗаполнено(ПриведенныйНомерСчета));
	Запрос.УстановитьПараметр("НомерСчета",          	 ПриведенныйНомерСчета);
	Запрос.УстановитьПараметр("ГосударственныйКонтракт", ГосударственныйКонтракт);
	Запрос.УстановитьПараметр("ЦифровойСчет",	         ЦифровойСчет);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	ИначеЕсли ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.ФизическиеЛица");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьНовыйСчет = Счет <> НовыйСчет;
	Если ПолучитьНовыйСчет Тогда
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Счет = НовыйСчет;
		Иначе
			СвойствоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Владелец, ВалютаДенежныхСредств, ЦифровойСчет");
			Если СвойствоСчета.Владелец <> ВладелецСчета
				Или СовпадениеВалюты И СвойствоСчета.ВалютаДенежныхСредств <> Валюта
				Или ЦифровойСчет <> СвойствоСчета.ЦифровойСчет Тогда
				Счет = НовыйСчет;
			Иначе
				ПолучитьНовыйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьНовыйСчет;
	
КонецФункции // УстановитьБанковскийСчет

// Устанавливает банковский счет по умолчанию для плательщиков ЕНП. Возвращает состояние установлен/не установлен
//
// Параметры:
//  Счет             - СправочникСсылка.БанковскиеСчета - текущее значение счета.
//  ВладелецСчета    – СправочникСсылка.Контрагенты, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица - Контрагент (Организация, Физлицо),
//                     счет которого нужно получить.
//  Валюта           – СправочникСсылка.Валюты - валюта счета.
//
// ВозвращаемоеЗначение:
//  Булево – установлен / не установлен счет по умолчанию
//
Функция УстановитьБанковскийСчетЕдиногоНалоговогоПлатежа(Счет, ВладелецСчета, Валюта) Экспорт
	
	Если ТипЗнч(Счет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецСчета) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияРеквизитовСчета = ЕдиныйНалоговыйСчет.ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	НомерСчета = ЗначенияРеквизитовСчета.РасчетныйСчет;
	Если НомерСчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетУстановлен = УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, Истина, Истина, НомерСчета);
	
	Если Не СчетУстановлен Тогда
		РаботаСБанкамиБП.СоздатьКазначейскийСчет(ВладелецСчета, ЗначенияРеквизитовСчета);
		СчетУстановлен = УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, Истина, Истина, НомерСчета);
	КонецЕсли;
	
	Возврат СчетУстановлен;
	
КонецФункции // УстановитьБанковскийСчет

Функция ОпределитьРегистрациюВНалоговомОргане(УчетныеДанные, Организация) Экспорт
	
	ТипРегистрацияВНалоговомОргане = Тип("СправочникСсылка.РегистрацииВНалоговомОргане");
	РегистрацияВНалоговомОргане = Организация.РегистрацияВНалоговомОргане;
	Для НомерСубконто = 1 По 3 Цикл
		ЗначениеСубконто = УчетныеДанные["Субконто" + НомерСубконто];
		Если ТипЗнч(ЗначениеСубконто) = ТипРегистрацияВНалоговомОргане Тогда
			РегистрацияВНалоговомОргане = ЗначениеСубконто;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

// Возвращает список программ типа "Клиент банка", имеющих сертификат 1С:Совместимо
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   <СписокЗначений>   - список наименований программ
//
Функция СписокСовместимыхПрограммКлиентовБанка(ВернутьВМассиве = Истина) Экспорт

	Если ВернутьВМассиве Тогда
		СписокКБ = Новый Массив;
	Иначе
		СписокКБ = Новый СписокЗначений;
	КонецЕсли; 
	
	СписокКБ.Добавить("DiasoftCLIENT 4x4 for Windows ЗАО ""Диасофт""");
	СписокКБ.Добавить("iBank 2 компании ""БИФИТ""");
	СписокКБ.Добавить("isFront - Система дистанционного управления финансами");
	СписокКБ.Добавить("LanVisit DOS 4.90 Ланит");
	СписокКБ.Добавить("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
	СписокКБ.Добавить("WinClient ЗАО ""МПИ-Банк""");
	СписокКБ.Добавить("Yugo-Vostok Online ОАО БАНК ""ЮГО-ВОСТОК""");
	СписокКБ.Добавить("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
	СписокКБ.Добавить("АРМ ""Электронный клиент"" от НОМОС-БАНК-Сибирь");
	СписокКБ.Добавить("ИНИСТ Банк-Клиент ЗАО ""ИНИСТ""");
	СписокКБ.Добавить("Клиент банка InterBank v.5.1 R-Style Software Lab");
	СписокКБ.Добавить("Клиент-банк ""BARS"" фирмы ""Оникс Капитал""");
	СписокКБ.Добавить("Клиент-банк АКБ ""Лефко-Банк""");
	СписокКБ.Добавить("Клиент-банк ""МИБ"" АКБ ""Московский Индустриальный банк""");
	СписокКБ.Добавить("Клиент-Банк ОАО ""Прио-Внешторгбанк""");	
	СписокКБ.Добавить("Клиент-Банк РФК");
	СписокКБ.Добавить("Клиент-ТЕЛЕБАНК ЗАО ""Степ Ап""");
	СписокКБ.Добавить("Комплекс обмена платежными документами ""Курьер"". ЗАО ""АстраСофт""");
	СписокКБ.Добавить("Система ""MailBank"" фирмы ""Системные технологии""");
	СписокКБ.Добавить("Система ""PSB On-Line"" ОАО ""ПРОМСВЯЗЬБАНК""");
	СписокКБ.Добавить("Система ""ВЕДАНА"" фирмы ""Анива""");
	СписокКБ.Добавить("Система ""ДБО BS-Client"" ООО ""Банк Софт Системс""");
	СписокКБ.Добавить("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
	СписокКБ.Добавить("Система ""Клиент-Банк"" ЗАО ""Банк ""Новый Символ""");
	СписокКБ.Добавить("Система ""Электронный Офис"" ЗАО ""Райффайзенбанк""");
	СписокКБ.Добавить("Система ""Электронный Офис"" ОАО ""ИМПЭКСБАНК""");
	СписокКБ.Добавить("Система Банк-Клиент АКБ ""София""");
	СписокКБ.Добавить("Система Клиент-Банк ""BClient""");
	СписокКБ.Добавить("Система клиент-банк ""TIVAL""");
	СписокКБ.Добавить("Система электронных расчетов QuickPay ЗАО ""АО Кворум""");
	СписокКБ.Добавить("ЦФТ - Интернет-банк (Faktura.ru) фирмы ""Центр финансовых технологий""");
	СписокКБ.Добавить("Электронный клиент АКБ ""Автобанк""");
	
	Возврат СписокКБ;
	
КонецФункции 

Функция ПолучитьСтавкуНДСПоДоговору(Знач Период, Знач ДоговорКонтрагента) Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.СтавкаНДСПоДоговору(Период, ДоговорКонтрагента);
	
КонецФункции

// Заполняет реквизиты платежного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыПлатежногоДокумента(ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтавкаНДС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДокументОбъект.Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
	   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		УстановитьБанковскийСчет(ДокументОбъект.СчетКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьДоговорКонтрагента(Знач ПараметрыПлатежа) Экспорт
	
	НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВидыДоговоров = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(ПараметрыПлатежа.ВидОперации);
	
	Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ОплатаВВалюте = Ложь;
	ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ОплатаВВалюте = Истина;
	Иначе
		ОплатаВВалюте = ПараметрыПлатежа.ОплатаВВалюте;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", ОплатаВВалюте));
	Если ОплатаВВалюте
		И ПараметрыПлатежа.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Отбор.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ВалютаДокумента));
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
	
	Возврат НовыйДоговор;
	
КонецФункции

Функция ЗаполнитьДоговорКонтрагента(Документ, ДанныеЗаполнения, ОплатаВВалюте) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ.Контрагент)
		Или Не ЗначениеЗаполнено(Документ.РасшифровкаПлатежа) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	СтрокаРасшифровки = Документ.РасшифровкаПлатежа[0];
	
	Если ЗначениеЗаполнено(Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваДоговора = Новый Структура;
	СвойстваДоговора.Вставить("ВидОперации");
	СвойстваДоговора.Вставить("Организация");
	СвойстваДоговора.Вставить("Контрагент");
	СвойстваДоговора.Вставить("ДоговорКонтрагента");
	СвойстваДоговора.Вставить("ОплатаВВалюте");
	СвойстваДоговора.Вставить("ВалютаДокумента");
	ЗаполнитьЗначенияСвойств(СвойстваДоговора, Документ);
	ЗаполнитьЗначенияСвойств(СвойстваДоговора, ДанныеЗаполнения);
	
	СвойстваДоговора.ОплатаВВалюте = ОплатаВВалюте;
	
	СтрокаРасшифровки.ДоговорКонтрагента = ПолучитьДоговорКонтрагента(СвойстваДоговора);
	
	Возврат ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента);
			
КонецФункции

Функция ПлатежГосОргану(ВидОперации, Контрагент) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		Возврат Истина;
	Иначе
		Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ВидОперации)
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			Возврат Ложь;
			
		ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ГоловнойКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент");
			Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
				ГосударственныйОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ГосударственныйОрган");
			Иначе
				ГосударственныйОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГосударственныйОрган");
			КонецЕсли;
			
			Возврат ГосударственныйОрган;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновленияНаНовуюВерсию

#Область Банки

// Очистим справочник Банки от неиспользуемых элементов
// 
Процедура ОчиститьБанкиОтНеиспользуемыхЭлементов() Экспорт
	
	// удалим элементы, на которые нет ссылок
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Банк КАК Банк
	|ПОМЕСТИТЬ ВТ_АктуальныеБанки
	|ИЗ
	|	(ВЫБРАТЬ
	|		БанковскиеСчета.Банк КАК Банк
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БанковскиеСчета.БанкДляРасчетов
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(УдалитьСоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Банки)
	|	ИЗ
	|		РегистрСведений.УдалитьСоответствияОбъектовИнформационныхБаз КАК УдалитьСоответствияОбъектовИнформационныхБаз
	|	ГДЕ
	|		УдалитьСоответствияОбъектовИнформационныхБаз.ТипИсточника = ""СправочникСсылка.Банки""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УдалитьЛицевыеСчетаРаботниковОрганизации.Банк
	|	ИЗ
	|		РегистрСведений.УдалитьЛицевыеСчетаРаботниковОрганизации КАК УдалитьЛицевыеСчетаРаботниковОрганизации) КАК ВложенныйЗапрос
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.Банк, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|	И ВложенныйЗапрос.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Банк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеБанки КАК ВТ_АктуальныеБанки
	|		ПО Банки.Ссылка = ВТ_АктуальныеБанки.Банк
	|ГДЕ
	|	НЕ Банки.Ссылка.ЭтоГруппа
	|	И ВТ_АктуальныеБанки.Банк ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивБанков.ВГраница() Цикл
		БанкОбъект = МассивБанков[инд].ПолучитьОбъект();
		БанкОбъект.ОбменДанными.Загрузка = Истина;
		БанкОБъект.Удалить();
	КонецЦикла;
	
	// удалим пусты группы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Банки.Родитель КАК Родитель
	|ПОМЕСТИТЬ ВТ_АктуальныеРегионы
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	НЕ Банки.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеРегионы КАК ВТ_АктуальныеРегионы
	|		ПО Банки.Ссылка = ВТ_АктуальныеРегионы.Родитель
	|ГДЕ
	|	Банки.ЭтоГруппа
	|	И ВТ_АктуальныеРегионы.Родитель ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивГруппБанков.ВГраница() Цикл
		РегионОбъект = МассивГруппБанков[инд].ПолучитьОбъект();
		РегионОбъект.ОбменДанными.Загрузка = Истина;
		РегионОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

// Процедура устанавливает Статью ДДС в банковски и кассовых документах
// из ТЧ РасшифровкаПлатежа в шапку документа, для "прочих" операций
// в которых ТЧ РасшифровкаПлатежа не используется
//
Процедура УстановитьВДокументахСтатьюДДСИзРасшифровкаПлатежа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ОчищатьРасшифровку,
	|	МАКСИМУМ(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога))
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПрочийПриход)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке))
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПрочийРасход)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога))
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ВыборкаДокументов.СтатьяДвиженияДенежныхСредств;
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			
			Если НЕ ВыборкаДокументов.ОчищатьРасшифровку Тогда
				НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаПлатежа = ДокументОбъект.СуммаДокумента;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ВыборкаДокументов.Ссылка,
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

//Возвращает значение Статьи движения денежных средств по умолчанию, в зависимости от контекста операции
//
// Параметры
//  КонтекстОперации    – <Строка>/<ПеречисленияСсылка> – Вид операции документа или строковая константа, однозначно идентифицирующая вид операции
//
// Возвращаемое значение:
//   <СправочникСсылка.СтатьиДвиженияДенежныхСредств>		– Ссылка на предопределенный элемент справочника или пустая ссылка
Функция СтатьяДДСПоУмолчанию(Знач КонтекстОперации) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств")
		ИЛИ НЕ ЗначениеЗаполнено(КонтекстОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	МенеджерСправочника = "Справочник.СтатьиДвиженияДенежныхСредств.";
	
	Если ТипЗнч(КонтекстОперации) = Тип("Строка") Тогда
		
		Если КонтекстОперации = "КомиссияБанка" Тогда
			СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "УслугиБанков");
		ИначеЕсли КонтекстОперации = "НалогНаПрибыль" Тогда
			СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "НалогНаПрибыль");
		ИначеЕсли КонтекстОперации = "УплатаПроцентов" Тогда
			СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "ВозвратПроцентовЗаймаПолученного");
		ИначеЕсли КонтекстОперации = "ПогашениеДолга" Тогда
			СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "ВозвратЗаймаПолученного");
		ИначеЕсли КонтекстОперации = "НедостачаДенежныхСредств" Тогда
			СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "НедостачаДенежныхСредств");
		КонецЕсли;
		
	ИначеЕсли Типзнч(КонтекстОперации) = Тип("ПеречислениеСсылка.ВидыОперацийОтчетОРозничныхПродажах") Тогда
		
		СтатьяДДС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(МенеджерСправочника + "РозничнаяВыручка");
		
	Иначе
		
		СтатьяДДС = УчетДенежныхСредствПовтИсп.ПолучитьСтатьюДДСПоВидуОперации(КонтекстОперации);
		
	КонецЕсли;

	Возврат СтатьяДДС;

КонецФункции

// Процедура очищает в банковски документах 
// ТЧ РасшифровкаПлатежа для отдельных операций
//
Процедура ОчиститьВДокументахРасшифровкуПлатежа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)";
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаДепонентов);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.УплатаНалога);
	
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ.
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			ВыборкаДокументов.Ссылка, 
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура копирует значение из реквизита объекта СуммаУслуг
// в реквизит ТЧ РасшифровкаПлатежа СуммаУслуг документа ПоступлениеНаРасчетныйСчет
//
Процедура УстановитьСуммуУслугВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг КАК СуммаУслуг
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг > 0
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам)";
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.РасшифровкаПлатежа[0].СуммаУслуг = ВыборкаДокументов.СуммаУслуг;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ.
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,
			ВыборкаДокументов.Ссылка, 
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура копирует значение из реквизита объекта КурсНаДатуПриобретенияРеализацииВалюты
// в реквизит ТЧ РасшифровкаПлатежа КурсНаДатуПриобретенияРеализацииВалюты документа ПоступлениеНаРасчетныйСчет
//
Процедура УстановитьКурсНаДатуПриобретенияРеализацииВалютыВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.КурсНаДатуПриобретенияРеализацииВалюты <> 0
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
				СтрокаРасшифровкиПлатежа.КурсНаДатуПриобретенияРеализацииВалюты
					= ВыборкаДокументов.КурсНаДатуПриобретенияРеализацииВалюты;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ.
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,
			ВыборкаДокументов.Ссылка, 
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьРКОПоВыплатеДепонентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = ВыборкаДокументов.ФизическоеЛицо;
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ФизическоеЛицо) Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьОчередностьПлатежаВРеквизитахДляУплатыВБюджет() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.ОчередностьПлатежа = 3 ИЛИ Запись.ОчередностьПлатежа = 4 ИЛИ Запись.ОчередностьПлатежа = 6 Тогда
			
			Запись.ОчередностьПлатежа = 5;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СправкиОБанковскихСчетах

Процедура ЗаполнитьСведенияОрублевыхСчетах(ПараметрыОтчета, Контейнер) Экспорт
	
	СведенияОСчетах = СведенияОСчетах(ПараметрыОтчета);
	
	Контейнер.ДанныеДопСтрок.Очистить();
	
	Индекс = 0;
	Для каждого Счет Из СведенияОСчетах Цикл
		
		Если ПустаяСтрока(Счет.НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Контейнер.ДанныеДопСтрок.Добавить();
		
		НомерСтроки = Индекс + 1;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101001"] = Формат(НомерСтроки, "");
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101002"] = Счет.ВидСчета;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101003"] = Счет.НомерСчета;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101004"] = Счет.БанкНаименование;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101005"] = АдресБанка(Счет);
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101006"] = Счет.ДатаОткрытия;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101007"] = Счет.ДатаЗакрытия;
		
		Индекс = Индекс + 1;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОСчетахвВиностраннойВалюте(ПараметрыОтчета, Контейнер) Экспорт
	
	СведенияОСчетах = СведенияОСчетах(ПараметрыОтчета, Истина);
	
	Контейнер.ДанныеДопСтрок.Очистить();
	
	Индекс = 0;
	Для каждого Счет Из СведенияОСчетах Цикл
		
		Если ПустаяСтрока(Счет.НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Контейнер.ДанныеДопСтрок.Добавить();
		
		НомерСтроки = Индекс + 1;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101001"] = Формат(НомерСтроки, "");
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101002"] = Счет.НомерСчета;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101003"] = Счет.БанкНаименование;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101004"] = АдресБанка(Счет, Истина);
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101005"] = Счет.НомерИДатаРазрешения;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101006"] = Счет.ДатаОткрытия;
		Контейнер.ДанныеДопСтрок[Индекс]["П010000101007"] = Счет.ДатаЗакрытия;
		
		Индекс = Индекс + 1;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПолучитьСведенияОПоказателяхСправкиОРублевыхСчетах(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101007", Истина, Ложь);
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Функция ПолучитьСведенияОПоказателяхСправкиОСчетахвВиностраннойВалюте(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000101007", Истина, Ложь);
	
	Возврат ПоказателиОтчета;
	
КонецФункции

#КонецОбласти

#Область ДвиженияДенежныхСредствЗаПределамиРФ

// Заполнение показателей отчета "Движение средств по счету в банке за пределами РФ".
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура, описывающая параметры формируемого отчета.
//                 Содержит свойства: Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета.
//  Контейнер  - Структура - структура с адресами во временном хранилище для помещения данных заполнения отчета.
//                 
Процедура ЗаполнитьРегламентированныйОтчетДвижениеСредствПоСчетуВБанкеЗаПределамиРФ(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке

	ПараметрыЗаполнения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОтчета);
	ПараметрыЗаполнения.Вставить("ЗнакиДробнойЧасти", 5); 
	СчетОрганизацииВИностранномБанке = ПараметрыОтчета.НастройкиАвтозаполнения.БанковскийСчет;
	ПараметрыЗаполнения.Вставить("СчетОрганизацииВИностранномБанке", СчетОрганизацииВИностранномБанке);
	
	ПараметрыЛиста2 = СведенияОБанковскомСчете(СчетОрганизацииВИностранномБанке,
		ПараметрыОтчета.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	ЗаполнитьЛист2(Контейнер.Лист2, ПараметрыЛиста2);
	
	ДанныеОтчета = ДанныеОтчетаОперацииПоСчетуВБанкеЗаПределамиРФ(ПараметрыЗаполнения);
	ЗаполнитьЛисты3_7(Контейнер.Листы3_7, ДанныеОтчета, ПараметрыЗаполнения, ТаблицаРасшифровки);
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Контейнер", Контейнер);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);

КонецПроцедуры

Функция ПолучитьСведенияОПоказателяхДвиженияхСредствЗаПределамиРФ(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л20000011", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л30000001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л30000002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л30000003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л30000004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л30000005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л4М100001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л4М100002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л5М100001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л5М100003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л6М100001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л6М100002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л7М100001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000Л7М100002", Истина, Истина);

	Возврат ПоказателиОтчета;
	
КонецФункции

#КонецОбласти

#Область ДоходыИностраннымОрганизациям

// Возвращает факт осуществления организацией выплаты иностранным контрагентам за период.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация.
//  НачалоПериода - Дата - дата начала периода.
//  КонецПериода  - Дата - дата окончания периода.
//                 
// Возвращаемое значение:
//  Булево - осуществлялась хотя бы одна выплата иностранным контрагентам или нет.
Функция ПроизводилисьВыплатыИностраннымКонтрагентам(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	Если ГоловнаяОрганизация <> Организация Тогда
	
		Возврат Ложь;	
	
	КонецЕсли;
	
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);

	ДатаНачалаПериодаОтчета = НалоговыйУчет.НачалоНалоговогоПериода(НачалоПериода, ГоловнаяОрганизация);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("Организации",	Организации);
	
	МассивСчетовДт = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками));

	МассивСчетовКт = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос.УстановитьПараметр("СчетаДт", МассивСчетовДт);
	Запрос.УстановитьПараметр("СчетаКт", МассивСчетовКт);

	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИностранныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоКонтрагенты
	|		ПО Хозрасчетный.Период = СубконтоКонтрагенты.Период
	|			И Хозрасчетный.Регистратор = СубконтоКонтрагенты.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоКонтрагенты.НомерСтроки
	|			И (Хозрасчетный.УточнениеПериода = 0)
	|			И (СубконтоКонтрагенты.УточнениеПериода = 0)
	|			И (СубконтоКонтрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (СубконтоКонтрагенты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ПО (СубконтоКонтрагенты.Значение = ВТ_ИностранныеКонтрагенты.Ссылка)
	|ГДЕ
	|	Хозрасчетный.СчетДт В(&СчетаДт)
	|	И Хозрасчетный.СчетКт В(&СчетаКт)
	|	И Хозрасчетный.Организация В(&Организации)
	|	И Хозрасчетный.Период >= &НачалоПериода
	|	И Хозрасчетный.Период <= &КонецПериода";

	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Не РезультатЗапроса.Пустой();

	Возврат Результат;

КонецФункции 

// Заполнение показателей отчета "Налоговый расчет о суммах выплаченных иностранным организациям доходов и удержанных налогов".
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура, описывающая параметры формируемого отчета.
//
//  Контейнер  - Структура - структура с адресами во временном хранилище для помещения данных заполнения отчета.
//                 
Процедура ЗаполнитьРегламентированныйОтчетДоходыИностраннымОрганизациям(ПараметрыОтчета, Контейнер) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	СтруктураДанных31 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Данные);
	СтруктураДанных32 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Данные);
	СтруктураДанных33 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки[0].Данные);

	СтруктураДанныхМНЧ31 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ32 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ33 = ОчиститьИСкопироватьСтруктуруДанных(
		Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	
	СтруктураДанных41 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Данные);
	СтруктураДанных42 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Строки[0].Строки[0].Данные);

	СтруктураДанныхМНЧ41 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ42 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	
	Пока Контейнер.Раздел31.Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел31.Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	
	
	Пока Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел41.Строки.Количество() > 1 Цикл
		Контейнер.Раздел41.Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел41.Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел41.Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	
	
	ДанныеОтчета = ДанныеОтчетаДоходыИностраннымОрганизациям(ПараметрыОтчета);

	ПредыдущиеКонтрагенты = Новый Соответствие;
	
	НомерСтрокиРаздела4 = 0;
	НомерСтрокиРаздела3 = 0;
	СуммаПоТоварам = 0;

	ЗаполнитьДоходыИноОргРаздел1(Контейнер.Раздел1.Строки[0]);
	ЗаполнитьДоходыИноОргРаздел2(Контейнер.Раздел2.Строки[0]);

	ДанныеКонтрагентов = Новый Соответствие;

	НомераСтрокМногоуровнегоРаздела = Новый Структура;
	НомераСтрокМногоуровнегоРаздела.Вставить("Раздел3", Новый Массив);
	НомераСтрокМногоуровнегоРаздела.Вставить("Раздел4", Новый Массив);
	
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	
	СоответствиеСчетовКт 		= Новый Соответствие;
	СоответствиеРегистраторов	= Новый Соответствие;
	СоответствиеКонтрагентов	= Новый Соответствие;
	СоответствиеДоговоров		= Новый Соответствие;
	
	Для каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
		
		ПредставлениеАдреса = ДанныеКонтрагентов[СтрокаДанныхОтчета.Контрагент];
		
		Если ПредставлениеАдреса = Неопределено Тогда
			ДанныеЮрАдреса = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
				СтрокаДанныхОтчета.Контрагент,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
				ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			ПредставлениеАдреса = ДанныеЮрАдреса.Представление;
			ДанныеКонтрагентов.Вставить(СтрокаДанныхОтчета.Контрагент, ПредставлениеАдреса); 
		КонецЕсли;

		ВидДохода = СтрокаДанныхОтчета.ВидДохода;

		Если Не ЗначениеЗаполнено(ВидДохода) Тогда
			
			ДокументРасчетов = СтрокаДанныхОтчета.ДокументРасчетов;
			
			Если ДокументРасчетов = СтрокаДанныхОтчета.Регистратор Тогда // это аванс
			
				ДокументРасчетов = СтрокаДанныхОтчета.ДокументРасчетовПоАвансу;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРасчетов) 
				И ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				И ТолькоТоварыВДокументеРасчетов(ДокументРасчетов) Тогда
				
				ВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.ДоходыТовары;	
				
			КонецЕсли;
		
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ВидДохода) Тогда

			ЭтоНеОблагаемыйВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.ЭтоНеОблагаемыйНалогомВидДохода(ВидДохода);
			ЭтоВидДоходаТовары = (ВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.ДоходыТовары);
			
		Иначе
			
			ЭтоНеОблагаемыйВидДохода = Истина;
			ЭтоВидДоходаТовары = Ложь;
			
		КонецЕсли;
		
		Если ЭтоВидДоходаТовары Тогда
			//Раздел 5
			
			СоответствиеСчетовКт.Вставить(СтрокаДанныхОтчета.СчетКт);
			СоответствиеРегистраторов.Вставить(СтрокаДанныхОтчета.Регистратор);
			СоответствиеКонтрагентов.Вставить(СтрокаДанныхОтчета.Контрагент);
			СоответствиеДоговоров.Вставить(СтрокаДанныхОтчета.Договор);
			
			СуммаПоТоварам = СуммаПоТоварам + СтрокаДанныхОтчета.Сумма;
			
		ИначеЕсли ЭтоНеОблагаемыйВидДохода Тогда
			//Раздел 4
			//Раздел 4.1 Контейнер.Раздел41.Строки[N]
			//Раздел 4.2 Контейнер.Раздел41.Строки[N].Строки[0].Строки[M]
			
			СтруктураДанныхКонтрагента = ПредыдущиеКонтрагенты["Раздел4"];
			Если СтруктураДанныхКонтрагента = Неопределено Тогда
				
				СтруктураДанныхКонтрагента = СоздатьСтруктуруДанныхКонтрагента(СтрокаДанныхОтчета.Контрагент, 1);
				
				ПредыдущиеКонтрагенты.Вставить("Раздел4", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела4 = 0;
				СтрокаРаздела41 = Контейнер.Раздел41.Строки[НомерСтрокиРаздела4]; 
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки[0];
				
				ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела41, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки, 
					НомераСтрокМногоуровнегоРаздела.Раздел4);
				
			ИначеЕсли СтруктураДанныхКонтрагента.Контрагент <> СтрокаДанныхОтчета.Контрагент Тогда 

				Контейнер.Раздел41.Строки.Добавить();
				
				СтруктураДанныхКонтрагента.УникальныйНомер = СтруктураДанныхКонтрагента.УникальныйНомер + 1;
				СтруктураДанныхКонтрагента.Контрагент = СтрокаДанныхОтчета.Контрагент;
				
				ПредыдущиеКонтрагенты.Вставить("Раздел4", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела4 = НомерСтрокиРаздела4 + 1;
				СтрокаРаздела41 = Контейнер.Раздел41.Строки[НомерСтрокиРаздела4]; 
				
				СтрокаРаздела41.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных41);
				СтрокаРаздела41.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ41);
				
				СтрокаРаздела41.Строки.Добавить();
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки.Добавить();
				
				СтрокаРаздела42.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных42);
				СтрокаРаздела42.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ42);
 					
				НомераСтрокМногоуровнегоРаздела.Раздел4[0] = НомераСтрокМногоуровнегоРаздела.Раздел4[0] + 1;
				НомераСтрокМногоуровнегоРаздела.Раздел4[2] = 1;

				ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела41, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4);
				
			Иначе
				
				СтрокаРаздела41.Строки.Добавить();
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки.Добавить();
				
				СтрокаРаздела42.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных42);
				СтрокаРаздела42.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ42);

				НомераСтрокМногоуровнегоРаздела.Раздел4[2] = НомераСтрокМногоуровнегоРаздела.Раздел4[2] + 1;
				
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки,
 					НомераСтрокМногоуровнегоРаздела.Раздел4);
	
			КонецЕсли;
			
		Иначе
			//Раздел 3
			//Раздел 3.1 Контейнер.Раздел31.Строки[N]
			//Раздел 3.2 Контейнер.Раздел31.Строки[N].Строки[0].Строки[M]
			//Раздел 3.3 Контейнер.Раздел31.Строки[N].Строки[0].Строки[M].Строки[0].Строки[K]

			СтруктураДанныхКонтрагента = ПредыдущиеКонтрагенты["Раздел3"];
			Если СтруктураДанныхКонтрагента = Неопределено Тогда
				
				СтруктураДанныхКонтрагента = СоздатьСтруктуруДанныхКонтрагента(СтрокаДанныхОтчета.Контрагент, 1);
				
				ПредыдущиеКонтрагенты.Вставить("Раздел3", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела3 = 0;
				СтрокаРаздела31 = Контейнер.Раздел31.Строки[НомерСтрокиРаздела3];
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки[0];
				
				ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела31, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3);
				
			ИначеЕсли СтруктураДанныхКонтрагента.Контрагент <> СтрокаДанныхОтчета.Контрагент Тогда 

				Контейнер.Раздел31.Строки.Добавить();
				
				СтруктураДанныхКонтрагента.УникальныйНомер = СтруктураДанныхКонтрагента.УникальныйНомер + 1;
				СтруктураДанныхКонтрагента.Контрагент = СтрокаДанныхОтчета.Контрагент;
				
				ПредыдущиеКонтрагенты.Вставить("Раздел3", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела3 = НомерСтрокиРаздела3 + 1;
				СтрокаРаздела31 = Контейнер.Раздел31.Строки[НомерСтрокиРаздела3]; 
				
				СтрокаРаздела31.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных31);
				СтрокаРаздела31.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ31);

				СтрокаРаздела31.Строки.Добавить();
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки.Добавить();

				СтрокаРаздела32.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных32);
				СтрокаРаздела32.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ32);
				
				СтрокаРаздела32.Строки.Добавить();
				СтрокаРаздела33 = СтрокаРаздела32.Строки[0].Строки.Добавить();
				
				СтрокаРаздела33.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных33);
				СтрокаРаздела33.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ33);

				НомераСтрокМногоуровнегоРаздела.Раздел3[0] = НомераСтрокМногоуровнегоРаздела.Раздел3[0] + 1;
				НомераСтрокМногоуровнегоРаздела.Раздел3[2] = 1;

				ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела31, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3);
				
			Иначе
				
				СтрокаРаздела31.Строки.Добавить();
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки.Добавить();

				СтрокаРаздела32.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных32);
				СтрокаРаздела32.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ32);
				
				СтрокаРаздела32.Строки.Добавить();
				СтрокаРаздела33 = СтрокаРаздела32.Строки[0].Строки.Добавить();

				СтрокаРаздела33.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных33);
				СтрокаРаздела33.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ33);
				
				НомераСтрокМногоуровнегоРаздела.Раздел3[2] = НомераСтрокМногоуровнегоРаздела.Раздел3[2] + 1;
				
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3);
				
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеПараметрыТовары = Новый Структура;
	ДополнительныеПараметрыТовары.Вставить("Действие", "ОтчетПоПроводкам");
	
	ДополнительныеПараметрыТовары.Вставить("СчетКт", МассивКлючейСоответствия(СоответствиеСчетовКт)); 
	ДополнительныеПараметрыТовары.Вставить("Регистратор", МассивКлючейСоответствия(СоответствиеРегистраторов)); 
	ДополнительныеПараметрыТовары.Вставить("СубконтоДт1", МассивКлючейСоответствия(СоответствиеКонтрагентов));
	ДополнительныеПараметрыТовары.Вставить("СубконтоДт2", МассивКлючейСоответствия(СоответствиеДоговоров)); 

	ЗаполнитьДоходыИноОргРаздел5(Контейнер.Раздел5.Строки[0], СуммаПоТоварам, ТаблицаРасшифровки, ДополнительныеПараметрыТовары);
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);

КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Функция ПолучитьСведенияОПоказателяхДоходыИностраннымОрганизациям(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410001004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410004003", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320001403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320001603", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320013003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420001403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420010003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000500001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000500002003", Истина, Ложь);
	
	Возврат ПоказателиОтчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоходыИностраннымОрганизациям

Функция ДанныеОтчетаДоходыИностраннымОрганизациям(ПараметрыОтчета)
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыОтчета.Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	ДатаНачалаПериодаОтчета = ОбщегоНазначенияБПВызовСервера.НачалоПоследнейЧастиОтчетногоПериодаПрибыль(ПараметрыОтчета.мДатаКонцаПериодаОтчета,
		ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",	ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организации",	Организации);

	МассивСчетовДт = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками));

	МассивСчетовКт = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос.УстановитьПараметр("СчетаДт", МассивСчетовДт);
	Запрос.УстановитьПараметр("СчетаКт", МассивСчетовКт);

	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.НаименованиеНерезидентаРус КАК НаименованиеНерезидентаРус,
	|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации,
	|	Контрагенты.СтранаРегистрации.Код КАК КодСтраны,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ПОМЕСТИТЬ ВТ_ИностранныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ПоступлениеТоваровУслуг.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПериодыДляАвансов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ПО ПоступлениеТоваровУслуг.Контрагент = ВТ_ИностранныеКонтрагенты.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата >= &НачалоПериода
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеТоваровУслуг.Ссылка) КАК ДокументРасчетовПоАвансу,
	|	МАКСИМУМ(ПоступлениеТоваровУслуг.Дата) КАК Дата,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ДокументыДляАвансов
	|ИЗ
	|	ВТ_ПериодыДляАвансов КАК ВТ_ПериодыДляАвансов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ВТ_ПериодыДляАвансов.Контрагент = ПоступлениеТоваровУслуг.Контрагент
	|			И ВТ_ПериодыДляАвансов.ДоговорКонтрагента = ПоступлениеТоваровУслуг.ДоговорКонтрагента
	|			И ВТ_ПериодыДляАвансов.Дата = ПоступлениеТоваровУслуг.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ)) КАК ДатаПлатежа,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	СубконтоКонтрагенты.Значение КАК Контрагент,
	|	МАКСИМУМ(ВТ_ИностранныеКонтрагенты.НаименованиеПолное) КАК КонтрагентНаименованиеПолное,
	|	МАКСИМУМ(ВТ_ИностранныеКонтрагенты.КодСтраны) КАК КодСтраны,
	|	МАКСИМУМ(ВТ_ИностранныеКонтрагенты.НалоговыйНомер) КАК НалоговыйНомер,
	|	МАКСИМУМ(ВТ_ИностранныеКонтрагенты.НаименованиеНерезидентаРус) КАК НаименованиеНерезидентаРус,
	|	СубконтоДоговоры.Значение КАК Договор,
	|	МАКСИМУМ(ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоходаИностранногоКонтрагента, ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка))) КАК ВидДохода,
	|	МАКСИМУМ(ЕСТЬNULL(ДоговорыКонтрагентов.УникальныйНомерВалютногоКонтроля, """")) КАК УникальныйНомерВалютногоКонтроля,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоходаИностранногоКонтрагента, ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИНАЧЕ СубконтоДокументы.Значение
	|	КОНЕЦ КАК ДокументРасчетов,
	|	МАКСИМУМ(ВТ_ДокументыДляАвансов.ДокументРасчетовПоАвансу) КАК ДокументРасчетовПоАвансу,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.ВалютнаяСуммаКт, Хозрасчетный.Сумма)) КАК ВалютнаяСумма,
	|	МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Курс, 0)) КАК КурсВалюты,
	|	МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Кратность, 0)) КАК КратностьВалюты,
	|	ЕСТЬNULL(СправочникВалюты.Код, ВалютаРеглУчета.Код) КАК КодВалюты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоКонтрагенты
	|		ПО Хозрасчетный.Период = СубконтоКонтрагенты.Период
	|			И Хозрасчетный.Регистратор = СубконтоКонтрагенты.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоКонтрагенты.НомерСтроки
	|			И (Хозрасчетный.УточнениеПериода = 0)
	|			И (СубконтоКонтрагенты.УточнениеПериода = 0)
	|			И (СубконтоКонтрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (СубконтоКонтрагенты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ПО (СубконтоКонтрагенты.Значение = ВТ_ИностранныеКонтрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоДоговоры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО СубконтоДоговоры.Значение = ДоговорыКонтрагентов.Ссылка
	|		ПО Хозрасчетный.Период = СубконтоДоговоры.Период
	|			И Хозрасчетный.Регистратор = СубконтоДоговоры.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоДоговоры.НомерСтроки
	|			И (Хозрасчетный.УточнениеПериода = 0)
	|			И (СубконтоДоговоры.УточнениеПериода = 0)
	|			И (СубконтоДоговоры.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И (СубконтоДоговоры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоДокументы
	|		ПО Хозрасчетный.Период = СубконтоДокументы.Период
	|			И Хозрасчетный.Регистратор = СубконтоДокументы.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоДокументы.НомерСтроки
	|			И (Хозрасчетный.УточнениеПериода = 0)
	|			И (СубконтоДокументы.УточнениеПериода = 0)
	|			И (СубконтоДокументы.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И (СубконтоДокументы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыДляАвансов КАК ВТ_ДокументыДляАвансов
	|		ПО (СубконтоКонтрагенты.Значение = ВТ_ДокументыДляАвансов.Контрагент)
	|			И (СубконтоДоговоры.Значение = ВТ_ДокументыДляАвансов.ДоговорКонтрагента)
	|			И Хозрасчетный.Период < ВТ_ДокументыДляАвансов.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправочникВалюты
	|		ПО Хозрасчетный.ВалютаКт = СправочникВалюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК ВалютаРеглУчета
	|		ПО (&ВалютаРеглУчета = ВалютаРеглУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Хозрасчетный.ВалютаКт = КурсыВалют.Валюта
	|			И (НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) = КурсыВалют.Период)
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.СчетДт В(&СчетаДт)
	|	И Хозрасчетный.СчетКт В(&СчетаКт)
	|	И Хозрасчетный.Организация В(&Организации)
	|	И Хозрасчетный.Период >= &НачалоПериода
	|	И Хозрасчетный.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетКт,
	|	СубконтоКонтрагенты.Значение,
	|	СубконтоДоговоры.Значение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоходаИностранногоКонтрагента, ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИНАЧЕ СубконтоДокументы.Значение
	|	КОНЕЦ,
	|	ЕСТЬNULL(СправочникВалюты.Код, ВалютаРеглУчета.Код)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДатаПлатежа
	|АВТОУПОРЯДОЧИВАНИЕ";

	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выгрузить();

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДоходыИноОргРаздел1(Раздел)
	
	Если Не ЗначениеЗаполнено(Раздел.ДанныеМногострочныхЧастей.П0001000.Строки[0].Данные.П000100002003) Тогда
		Раздел.ДанныеМногострочныхЧастей.П0001000.Строки[0].Данные.П000100002003 = "00000000000000000000";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел2(Раздел)
	
	Если Не ЗначениеЗаполнено(Раздел.ДанныеМногострочныхЧастей.П0002000.Строки[0].Данные.П000200001003) Тогда
		Раздел.ДанныеМногострочныхЧастей.П0002000.Строки[0].Данные.П000200001003 = 
			Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(
				Перечисления.ВидыДоходовИностранныхОрганизаций.ИныеДоходыНеОблагаемые);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки, 
	КоординатыСтраницыРаздела, ПредставлениеАдреса)

	СтрокаРаздела.Данные.П000310000103 = Формат(СтруктураДанныхКонтрагента.УникальныйНомер, "ЧЦ=12; ЧН=0; ЧВН=; ЧГ=");
	СтрокаРаздела.Данные.П000310001003 = "2";
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.НаименованиеНерезидентаРус) Тогда
		СтрокаРаздела.Данные.П000310002003 = СтрокаДанныхОтчета.НаименованиеНерезидентаРус;
	Иначе
		СтрокаРаздела.Данные.П000310002003 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) 
		И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) Тогда
	
		СтрокаРаздела.Данные.П000310002004 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	Иначе
		СтрокаРаздела.Данные.П000310002004 = СтроковыеФункции.СтрокаЛатиницей(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное);
	КонецЕсли;

	СтрокаРаздела.Данные.П000310003003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000310008003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000310004003 = ПредставлениеАдреса;
	СтрокаРаздела.Данные.П000310005003 = СтрокаДанныхОтчета.НалоговыйНомер;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Контрагент");
	ДополнительныеПараметры.Вставить("Контрагент", СтруктураДанныхКонтрагента.Контрагент); 
	
	ИтоговыйНомерСтраницы = "Раздел31";
	Если КоординатыСтраницыРаздела.Количество() > 0 Тогда
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(КоординатыСтраницыРаздела[0], "ЧН=0; ЧГ="));
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000310002003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
	КоординатыСтраницыРаздела, ПредставлениеАдреса)

	СтрокаРаздела.Данные.П000410000103 = Формат(СтруктураДанныхКонтрагента.УникальныйНомер, "ЧЦ=12; ЧН=0; ЧВН=; ЧГ=");
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.НаименованиеНерезидентаРус) Тогда
		СтрокаРаздела.Данные.П000410001003 = СтрокаДанныхОтчета.НаименованиеНерезидентаРус;
	Иначе
		СтрокаРаздела.Данные.П000410001003 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) 
		И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) Тогда
	
		СтрокаРаздела.Данные.П000410001004 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	Иначе
		СтрокаРаздела.Данные.П000410001004 = СтроковыеФункции.СтрокаЛатиницей(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное);
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000410002003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000410003003 = ПредставлениеАдреса;
	СтрокаРаздела.Данные.П000410004003 = СтрокаДанныхОтчета.НалоговыйНомер;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Контрагент");
	ДополнительныеПараметры.Вставить("Контрагент", СтруктураДанныхКонтрагента.Контрагент); 
	
	ИтоговыйНомерСтраницы = "Раздел41";
	Если КоординатыСтраницыРаздела.Количество() > 0 Тогда
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(КоординатыСтраницыРаздела[0], "ЧН=0; ЧГ="));
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000410001003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
	КоординатыСтраницыРаздела)

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля) Тогда
		СтрокаРаздела.Данные.П000320001403 = "1";
	Иначе
		СтрокаРаздела.Данные.П000320001403 = "0";
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000320001603 = СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля;
	СтрокаРаздела.Данные.П000320002003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(СтрокаДанныхОтчета.ВидДохода);
	
	Если СтрокаДанныхОтчета.КодВалюты = "643" Тогда
		СтрокаРаздела.Данные.П000320004003 = Окр(СтрокаДанныхОтчета.ВалютнаяСумма, 0);
		СтрокаРаздела.Данные.П000320012003 = 0;
	Иначе
		СтрокаРаздела.Данные.П000320004003 = СтрокаДанныхОтчета.ВалютнаяСумма;
		СтрокаРаздела.Данные.П000320012003 = Окр(СтрокаДанныхОтчета.КурсВалюты / 
			?(СтрокаДанныхОтчета.КратностьВалюты <> 0, СтрокаДанныхОтчета.КратностьВалюты, 1), 4);
	КонецЕсли;

	СтрокаРаздела.Данные.П000320005003 = СтрокаДанныхОтчета.КодВалюты;
	СтрокаРаздела.Данные.П000320006003 = СтрокаДанныхОтчета.ДатаПлатежа;
	СтрокаРаздела.Данные.П000320013003 = Окр(СтрокаДанныхОтчета.Сумма, 0);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ОтчетПоПроводкам");
	ДополнительныеПараметры.Вставить("СчетКт", СтрокаДанныхОтчета.СчетКт); 
	ДополнительныеПараметры.Вставить("Регистратор", СтрокаДанныхОтчета.Регистратор); 

	ДополнительныеПараметры.Вставить("СубконтоДт1", СтрокаДанныхОтчета.Контрагент);
	ДополнительныеПараметры.Вставить("СубконтоДт2", СтрокаДанныхОтчета.Договор);
	
	ИтоговыйНомерСтраницы = "Раздел32";
	Для каждого НомерСтраницы Из КоординатыСтраницыРаздела Цикл
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(НомерСтраницы, "ЧН=0; ЧГ="));
	КонецЦикла;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000320004003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДоходаВычисленный,
	ТаблицаРасшифровки, КоординатыСтраницыРаздела)

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля) Тогда
		СтрокаРаздела.Данные.П000420001403 = "1";
	Иначе
		СтрокаРаздела.Данные.П000420001403 = "0";
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000420002003 = СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля;
	
	Если ЗначениеЗаполнено(ВидДоходаВычисленный) Тогда
		СтрокаРаздела.Данные.П000420003003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(ВидДоходаВычисленный);
	Иначе	
		СтрокаРаздела.Данные.П000420003003 = "";
	КонецЕсли;
	
	Если СтрокаДанныхОтчета.КодВалюты = "643" Тогда
		СтрокаРаздела.Данные.П000420005003 = Окр(СтрокаДанныхОтчета.ВалютнаяСумма, 0);
		СтрокаРаздела.Данные.П000420008003 = 0;
	Иначе
		СтрокаРаздела.Данные.П000420005003 = СтрокаДанныхОтчета.ВалютнаяСумма;
		СтрокаРаздела.Данные.П000420008003 = Окр(СтрокаДанныхОтчета.КурсВалюты / 
			?(СтрокаДанныхОтчета.КратностьВалюты <> 0, СтрокаДанныхОтчета.КратностьВалюты, 1), 4);
	КонецЕсли;

	СтрокаРаздела.Данные.П000420006003 = СтрокаДанныхОтчета.КодВалюты;
	СтрокаРаздела.Данные.П000420007003 = СтрокаДанныхОтчета.ДатаПлатежа;
	СтрокаРаздела.Данные.П000420009003 = Окр(СтрокаДанныхОтчета.Сумма, 0);

	СтрокаРаздела.Данные.П000420010003 = "1";

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ОтчетПоПроводкам");
	ДополнительныеПараметры.Вставить("СчетКт", СтрокаДанныхОтчета.СчетКт); 
	ДополнительныеПараметры.Вставить("Регистратор", СтрокаДанныхОтчета.Регистратор); 
	
	ДополнительныеПараметры.Вставить("СубконтоДт1", СтрокаДанныхОтчета.Контрагент);
	ДополнительныеПараметры.Вставить("СубконтоДт2", СтрокаДанныхОтчета.Договор);
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ДокументРасчетов) Тогда
		ДополнительныеПараметры.Вставить("СубконтоДт3", СтрокаДанныхОтчета.ДокументРасчетов);
	КонецЕсли;
	
	ИтоговыйНомерСтраницы = "Раздел42";
	Для каждого НомерСтраницы Из КоординатыСтраницыРаздела Цикл
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(НомерСтраницы, "ЧН=0; ЧГ="));
	КонецЦикла;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000420005003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел5(Раздел, СуммаПоТоварам, ТаблицаРасшифровки, ДополнительныеПараметрыРасшифровки)
	
	Раздел.Данные.П000500002003 = Окр(СуммаПоТоварам, 0);
	
	Если Раздел.Данные.П000500002003 <> 0 Тогда
		Раздел.Данные.П000500001003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(
			Перечисления.ВидыДоходовИностранныхОрганизаций.ДоходыТовары);
			
		ИмяРаздела = "Раздел5";
		НомерСтраницы = "1";
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИмяРаздела, НомерСтраницы);
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
			"П000500002003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметрыРасшифровки);
	Иначе
		Раздел.Данные.П000500001003 = "";
	КонецЕсли;

КонецПроцедуры

Функция СоздатьСтруктуруДанныхКонтрагента(Контрагент, УникальныйНомер)

	Результат = Новый Структура("Контрагент,УникальныйНомер,ПредставлениеАдреса");
	Результат.Контрагент = Контрагент;
	Результат.УникальныйНомер = УникальныйНомер;

	Возврат Результат;

КонецФункции

Функция ТолькоТоварыВДокументеРасчетов(ДокументРасчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугОборудование.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОбъектыСтроительства
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
		|ГДЕ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугОсновныеСредства.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОсновныеСредства
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОсновныеСредства КАК ПоступлениеТоваровУслугОсновныеСредства
		|ГДЕ
		|	ПоступлениеТоваровУслугОсновныеСредства.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
		|		ПО ВТ_Товары.Ссылка = ВТ_Оборудование.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъектыСтроительства КАК ВТ_ОбъектыСтроительства
		|		ПО ВТ_Товары.Ссылка = ВТ_ОбъектыСтроительства.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Услуги КАК ВТ_Услуги
		|		ПО ВТ_Товары.Ссылка = ВТ_Услуги.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
		|		ПО ВТ_Товары.Ссылка = ВТ_АгентскиеУслуги.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновныеСредства КАК ВТ_ОсновныеСредства
		|		ПО ВТ_Товары.Ссылка = ВТ_ОсновныеСредства.Ссылка
		|ГДЕ
		|	ВТ_Услуги.Ссылка ЕСТЬ NULL
		|	И ВТ_АгентскиеУслуги.Ссылка ЕСТЬ NULL
		|	И ВТ_Оборудование.Ссылка ЕСТЬ NULL
		|	И ВТ_ОбъектыСтроительства.Ссылка ЕСТЬ NULL
		|	И ВТ_ОсновныеСредства.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция МассивКлючейСоответствия(Соответствие)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементСоответствия Из Соответствие Цикл
		Результат.Добавить(ЭлементСоответствия.Ключ);	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

Процедура ОчиститьСтруктуруДанных(СтруктураДанных)
	
	Для каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ТипЗначенияСтруктуры = ТипЗнч(ЭлементСтруктуры.Значение);
		
		СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗначенияСтруктуры));
	
	КонецЦикла;

КонецПроцедуры

Функция ОчиститьИСкопироватьСтруктуруДанных(СтруктураДанных)
	
	ОчиститьСтруктуруДанных(СтруктураДанных);
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных);

КонецФункции

Функция НаименованиеДляПечатныхФормФизическогоЛица(ФИОИП, НаименованиеПолное, ЗарегистрированВКачествеИП = Истина)
	
	Если ПустаяСтрока(ФИОИП.Фамилия) Тогда
		Возврат НаименованиеПолное;
	КонецЕсли;
	
	ШаблонНаименования = ?(ЗарегистрированВКачествеИП, НСтр("ru = 'ИП %1 %2 %3'"), НСтр("ru = '%1 %2 %3'"));
	НаименованиеДляПечатныхФорм = СтрШаблон(
		ШаблонНаименования,
		СокрЛП(ФИОИП.Фамилия),
		СокрЛП(ФИОИП.Имя),
		СокрЛП(ФИОИП.Отчество));
	
	Возврат НаименованиеДляПечатныхФорм;
	
КонецФункции

Функция СвойстваВладельцаСчета(ВладелецСчета, Период = Неопределено)
	
	СвойстваВладельца = Новый Структура;
	СвойстваВладельца.Вставить("Наименование", "");
	СвойстваВладельца.Вставить("НаименованиеПолное", "");
	СвойстваВладельца.Вставить("НаименованиеДляПечатныхФорм", "");
	СвойстваВладельца.Вставить("НаименованиеПлательщикаПриПеречисленииВБюджет", "");
	
	Если ЗначениеЗаполнено(ВладелецСчета) Тогда
		Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации") Тогда
			НаименованияОрганизации = Справочники.Организации.НаименованияНаДату(ВладелецСчета, Период);
			НаименованиеПлательщикаПриПеречисленииВБюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
															ВладелецСчета, "НаименованиеПлательщикаПриПеречисленииВБюджет");
			
			СвойстваВладельца.Наименование                = НаименованияОрганизации.СокращенноеНаименование;
			СвойстваВладельца.НаименованиеПолное          = НаименованияОрганизации.ПолноеНаименование;
			СвойстваВладельца.НаименованиеДляПечатныхФорм = НаименованияОрганизации.НаименованиеДляПечатныхФорм;
			СвойстваВладельца.НаименованиеПлательщикаПриПеречисленииВБюджет = НаименованиеПлательщикаПриПеречисленииВБюджет;
			Если Не Справочники.Организации.ЭтоЮрЛицо(ВладелецСчета) Тогда
				СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(ВладелецСчета, Период);
				ЭтоИП = СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель;
				СвойстваВладельца.НаименованиеДляПечатныхФорм =
					НаименованиеДляПечатныхФормФизическогоЛица(
						НаименованияОрганизации.ФИО, СвойстваВладельца.НаименованиеПолное, ЭтоИП);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСчета,
					"Наименование, ФИО");
			СвойстваВладельца.Наименование                = РеквизитыВладельца.Наименование;
			СвойстваВладельца.НаименованиеДляПечатныхФорм = РеквизитыВладельца.ФИО;
		ИначеЕсли ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаименованияКонтрагента = Справочники.Контрагенты.НаименованияНаДату(ВладелецСчета, Период);
			СвойстваВладельца.Наименование                = НаименованияКонтрагента.СокращенноеНаименование;
			СвойстваВладельца.НаименованиеДляПечатныхФорм = НаименованияКонтрагента.НаименованиеДляПечатныхФорм;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СвойстваВладельца;
	
КонецФункции

Функция СвойстваБанковскогоСчета(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет,
			"Банк, НомерСчета, БанкДляРасчетов, ТекстКорреспондента");
	Иначе
		Возврат Новый Структура("Банк, НомерСчета, БанкДляРасчетов, ТекстКорреспондента",
			БанковскийСчет.Банк, "", БанковскийСчет.БанкДляРасчетов, "");
	КонецЕсли;
	
КонецФункции

Функция АдресБанка(Счет, Валютный = Ложь)
	
	Адрес = Новый Массив;
	
	Если Валютный И НЕ ПустаяСтрока(Счет.БанкСтрана) Тогда
		Адрес.Добавить(Счет.БанкСтрана);
	КонецЕсли;
	
	Если ПустаяСтрока(Счет.БанкАдрес) ИЛИ СокрЛП(Счет.БанкАдрес) = "," Тогда
		Если НЕ ПустаяСтрока(Счет.БанкГород) Тогда
			Адрес.Добавить(Счет.БанкГород);
		КонецЕсли;
	Иначе
		Адрес.Добавить(Счет.БанкАдрес);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Счет.БанкТелефоны) Тогда
		Адрес.Добавить(Счет.БанкТелефоны);
	КонецЕсли;
	
	Возврат СтрСоединить(Адрес, ", ");
	
КонецФункции

Функция СведенияОСчетах(ПараметрыОтчета, Валютный = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета + 1)); // Из отчета период приходит на конец предыдущего дня.
	Запрос.УстановитьПараметр("Валютный",     Валютный);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.ВидСчета КАК ВидСчета,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Страна.Наименование, """") КАК БанкСтрана,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Адрес, """") КАК БанкАдрес,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Телефоны, """") КАК БанкТелефоны,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Город, """") КАК БанкГород,
	|	БанковскиеСчета.НомерИДатаРазрешения КАК НомерИДатаРазрешения,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.Валютный = &Валютный
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И (БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаОткрытия <= &ПериодОтчета)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия > &ПериодОтчета)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОтчетаОперацииПоСчетуВБанкеЗаПределамиРФ(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СчетОрганизацииВИностранномБанке", ПараметрыОтчета.СчетОрганизацииВИностранномБанке);
	Запрос.УстановитьПараметр("ДоговорыСУНК", МассивДоговоровСУНК(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ВидСубконтоБанковскиеСчета", 
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", 
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	МассивСчетов = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос.УстановитьПараметр("СчетаУчета", МассивСчетов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Валюта, &ВалютаРеглУчета) КАК Валюта,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Валюта ЕСТЬ NULL
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|		КОНЕЦ) КАК СуммаДт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Валюта ЕСТЬ NULL
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|		КОНЕЦ) КАК СуммаКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто2
	|		КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&СчетаУчета),
	|			&ВидСубконтоБанковскиеСчета,
	|			Субконто1 = &СчетОрганизацииВИностранномБанке
	|				И Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Валюта, &ВалютаРеглУчета),
	|	ХозрасчетныйОбороты.Регистратор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто2
	|		КОГДА ХозрасчетныйОбороты.КорСубконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Валюта, &ВалютаРеглУчета) КАК Валюта,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|			ТОГДА СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток)
	|		ИНАЧЕ СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток)
	|	КОНЕЦ КАК СуммаНачальныйОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|		КОНЕЦ) КАК Расход,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|			ТОГДА СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток)
	|		ИНАЧЕ СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток)
	|	КОНЕЦ КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет В (&СчетаУчета),
	|			&ВидСубконтоБанковскиеСчета,
	|			Субконто1 = &СчетОрганизацииВИностранномБанке
	|				И Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Обороты.Валюта КАК Валюта,
	|	ВТ_Обороты.Регистратор КАК Регистратор,
	|	ВТ_Обороты.СуммаДт КАК СуммаДт,
	|	ВТ_Обороты.СуммаКт КАК СуммаКт,
	|	ВЫБОР
	|		КОГДА ВТ_Обороты.Регистратор ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	|			ТОГДА ВЫРАЗИТЬ(ВТ_Обороты.Регистратор КАК Документ.ПоступлениеНаРасчетныйСчет).КодВалютнойОперации
	|		КОГДА ВТ_Обороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ВЫРАЗИТЬ(ВТ_Обороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).КодВалютнойОперации
	|		ИНАЧЕ """"""""
	|	КОНЕЦ КАК КодВалютнойОперации,
	|	ВТ_Обороты.Договор КАК Договор,
	|	ВЫРАЗИТЬ(ВТ_Обороты.Договор КАК Справочник.ДоговорыКонтрагентов).УникальныйНомерВалютногоКонтроля КАК УникальныйНомерВалютногоКонтроля
	|ПОМЕСТИТЬ ВТ_ОборотыПоВалютнымКодамИКонтрактам
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта КАК Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор КАК Регистратор,
	|	СУММА(ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаДт) КАК Сумма,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации КАК КодВалютнойОперации
	|ИЗ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам КАК ВТ_ОборотыПоВалютнымКодамИКонтрактам
	|ГДЕ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта КАК Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор КАК Регистратор,
	|	СУММА(ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаКт) КАК Сумма,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации КАК КодВалютнойОперации
	|ИЗ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам КАК ВТ_ОборотыПоВалютнымКодамИКонтрактам
	|ГДЕ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта КАК Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор КАК Регистратор,
	|	СУММА(ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаДт) КАК Сумма,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации КАК КодВалютнойОперации,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор КАК Договор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.УникальныйНомерВалютногоКонтроля КАК УникальныйНомерВалютногоКонтроля
	|ИЗ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам КАК ВТ_ОборотыПоВалютнымКодамИКонтрактам
	|ГДЕ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаДт > 0
	|	И ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор В(&ДоговорыСУНК)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.УникальныйНомерВалютногоКонтроля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта КАК Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор КАК Регистратор,
	|	СУММА(ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаКт) КАК Сумма,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации КАК КодВалютнойОперации,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор КАК Договор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.УникальныйНомерВалютногоКонтроля КАК УникальныйНомерВалютногоКонтроля
	|ИЗ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам КАК ВТ_ОборотыПоВалютнымКодамИКонтрактам
	|ГДЕ
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.СуммаКт > 0
	|	И ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор В(&ДоговорыСУНК)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Валюта,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Регистратор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.КодВалютнойОперации,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.Договор,
	|	ВТ_ОборотыПоВалютнымКодамИКонтрактам.УникальныйНомерВалютногоКонтроля";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОстаткахИОборотах = РезультатЗапроса[1].Выгрузить();
	ПриходДенежныхСредств = РезультатЗапроса[3].Выгрузить();
	РасходДенежныхСредств = РезультатЗапроса[4].Выгрузить();
	ПриходДенежныхСредствПоУНК = РезультатЗапроса[5].Выгрузить();
	РасходДенежныхСредствПоУНК = РезультатЗапроса[6].Выгрузить();

	// Структура отчета предполагает всегда наличие хотя бы одной строки
	ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.СчетОрганизацииВИностранномБанке,
		"ВалютаДенежныхСредств");  
	ЗаполнитьТаблицуПустымиЗначениями(ДанныеОбОстаткахИОборотах, ВалютаСчета);
	ЗаполнитьТаблицуПустымиЗначениями(ПриходДенежныхСредств, ВалютаСчета);
	ЗаполнитьТаблицуПустымиЗначениями(РасходДенежныхСредств, ВалютаСчета);
	ЗаполнитьТаблицуПустымиЗначениями(ПриходДенежныхСредствПоУНК, ВалютаСчета);
	ЗаполнитьТаблицуПустымиЗначениями(РасходДенежныхСредствПоУНК, ВалютаСчета);

	Результат = Новый Структура;
	Результат.Вставить("ДанныеОбОстаткахИОборотах", ДанныеОбОстаткахИОборотах);
	Результат.Вставить("ПриходДенежныхСредств", ПриходДенежныхСредств);
	Результат.Вставить("РасходДенежныхСредств", РасходДенежныхСредств);
	Результат.Вставить("ПриходДенежныхСредствПоУНК", ПриходДенежныхСредствПоУНК);
	Результат.Вставить("РасходДенежныхСредствПоУНК", РасходДенежныхСредствПоУНК);

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьТаблицуПустымиЗначениями(ТаблицаДанных, ВалютаСчета)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Валюта = ВалютаСчета;
		Если ТаблицаДанных.Колонки.Найти("СуммаНачальныйОстаток") <> Неопределено Тогда
			СтрокаДанных.СуммаНачальныйОстаток = 0;
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			СтрокаДанных.СуммаКонечныйОстаток = 0;
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("Приход") <> Неопределено Тогда
			СтрокаДанных.Приход = 0;
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("Расход") <> Неопределено Тогда
			СтрокаДанных.Расход = 0;
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("Сумма") <> Неопределено Тогда
			СтрокаДанных.Сумма = 0;
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("КодВалютнойОперации") <> Неопределено Тогда
			СтрокаДанных.КодВалютнойОперации = "";
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("УникальныйНомерВалютногоКонтроля") <> Неопределено Тогда
			СтрокаДанных.УникальныйНомерВалютногоКонтроля = "";
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("Регистратор") <> Неопределено Тогда
			СтрокаДанных.Регистратор = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка();
		КонецЕсли;
		Если ТаблицаДанных.Колонки.Найти("Договор") <> Неопределено Тогда
			СтрокаДанных.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция МассивДоговоровСУНК(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.УникальныйНомерВалютногоКонтроля <> """"
		|	И ДоговорыКонтрагентов.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

Функция СведенияОБанковскомСчете(СчетОрганизацииВИностранномБанке, АдресСообщения)
	
	ОшибкиВСведениях = Новый Массив;
	СведенияОБанковскомСчете = СтруктураДанныхОБанковскомСчете();
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетОрганизацииВИностранномБанке, 
		"НомерСчета, Банк, ДатаОткрытия, ДатаЗакрытия");
	ЗаполнитьЗначенияСвойств(СведенияОБанковскомСчете, РеквизитыСчета);
	
	Если ЗначениеЗаполнено(РеквизитыСчета.Банк) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСчета.Банк, "Наименование, Адрес, СВИФТБИК, Страна");
		ИмяРеквизита = НСтр("ru = 'Наименование банка'");
		СведенияОБанковскомСчете.НаименованиеБанка = ЗначениеПоПравиламЗаполнения(РеквизитыБанка.Наименование, ИмяРеквизита, ОшибкиВСведениях);
		ИмяРеквизита = НСтр("ru = 'Адрес банка'");
		СведенияОБанковскомСчете.Адрес = ЗначениеПоПравиламЗаполнения(РеквизитыБанка.Адрес, ИмяРеквизита, ОшибкиВСведениях);
		СведенияОБанковскомСчете.СВИФТБИК = РеквизитыБанка.СВИФТБИК;
		СведенияОБанковскомСчете.Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыБанка.Страна, "Код");
		
	КонецЕсли;
	
	Если ОшибкиВСведениях.Количество() > 0 Тогда
		ПоместитьВоВременноеХранилище(ОшибкиВСведениях, АдресСообщения);
	КонецЕсли;
	
	Возврат СведенияОБанковскомСчете;
	
КонецФункции

Функция ЗначениеПоПравиламЗаполнения(ЗначениеПоля, ИмяПоля, ОшибкиВСведениях)
	
	ДопустимыеСимволы = " 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^?";
	ЗначениеСоответствуетПравилам =
		СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ЗначениеПоля, Истина, ДопустимыеСимволы);
		
		Если ЗначениеСоответствуетПравилам Тогда  
			
		Возврат ЗначениеПоля; 
		
	Иначе 
		
		ШаблонСообщения = НСтр("ru = 'Сведения о счете: поле ""%1"" должно быть заполнено с использованием букв латинского алфавита, 
			|пробелов и символов %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяПоля, ДопустимыеСимволы);
		ОшибкиВСведениях.Добавить(ТекстСообщения);
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция СтруктураДанныхОБанковскомСчете()
	
	Результат = Новый Структура();
	
	// Поддерживается только банковский счет
	Результат.Вставить("ТипФинансовойОрганизации", "1");
	Результат.Вставить("НаименованиеБанка", "");
	Результат.Вставить("СВИФТБИК", "");
	Результат.Вставить("Адрес", "");
	Результат.Вставить("Страна", "");
	Результат.Вставить("НомерСчета", "");
	Результат.Вставить("ДатаОткрытия", Дата(1, 1, 1));
	Результат.Вставить("ДатаЗакрытия", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЛист2(Лист, ПараметрыЛиста2)
	
	СтрокиЛиста2 = Лист.Строки[0];
	СтруктураДанныхЛиста2 = СтрокиЛиста2.Данные;
	
	СтруктураДанныхЛиста2.Вставить("П000Л20000003", ПараметрыЛиста2.ТипФинансовойОрганизации);
	СтруктураДанныхЛиста2.Вставить("П000Л20000004", ПараметрыЛиста2.НаименованиеБанка);
	СтруктураДанныхЛиста2.Вставить("П000Л20000005", ПараметрыЛиста2.СВИФТБИК);
	СтруктураДанныхЛиста2.Вставить("П000Л20000007", ПараметрыЛиста2.Адрес);
	СтруктураДанныхЛиста2.Вставить("П000Л20000008", ПараметрыЛиста2.Страна);
	СтруктураДанныхЛиста2.Вставить("П000Л20000009", ПараметрыЛиста2.НомерСчета);
	СтруктураДанныхЛиста2.Вставить("П000Л20000010", ПараметрыЛиста2.ДатаОткрытия);
	СтруктураДанныхЛиста2.Вставить("П000Л20000011", ПараметрыЛиста2.ДатаЗакрытия);

КонецПроцедуры

Процедура ЗаполнитьЛисты3_7(Листы3_7, ДанныеОтчета, ПараметрыЗаполнения, ТаблицаРасшифровки)
	
	ДанныеОбОстаткахИОборотах = ДанныеОтчета.ДанныеОбОстаткахИОборотах;
	
	СоответствиеЯчеек = СоответствиеЯчеекИНомераЛиста();
	МассивНомеровЛистов = МассивНомеровЛистов();
	
	Листы3_7.Строки.Очистить();
	
	Для Каждого СтрокаДанных Из ДанныеОбОстаткахИОборотах Цикл
		
		НомерСтраницы = ДанныеОбОстаткахИОборотах.Индекс(СтрокаДанных) + 1;

		СтрокиЛистов3_7 = НоваяСтрокаЛиста(Листы3_7, МассивНомеровЛистов);
		ЗаполнитьДанныеЛиста3(СтрокиЛистов3_7, СтрокаДанных);
		
		ОчиститьМножественныеЧастиЛистов(СтрокиЛистов3_7, МассивНомеровЛистов);

		ОтборПоВалюте = Новый Структура("Валюта", СтрокаДанных.Валюта);
		ЗаполнитьЛисты4_7(ДанныеОтчета, ПараметрыЗаполнения, ТаблицаРасшифровки, НомерСтраницы, СтрокиЛистов3_7, ОтборПоВалюте, 0); // Зачислено
		ЗаполнитьЛисты4_7(ДанныеОтчета, ПараметрыЗаполнения, ТаблицаРасшифровки, НомерСтраницы, СтрокиЛистов3_7, ОтборПоВалюте, 2); // Списано
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЛисты4_7(ДанныеОтчета, ПараметрыЗаполнения, ТаблицаРасшифровки, НомерСтраницы, СтрокиЛистов3_7, ОтборПоВалюте, ИндексЛиста)
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ИндексЛиста = 0 Тогда
		
		ДвиженияДенежныхСредствРасшифровка = ДанныеОтчета.ПриходДенежныхСредств;
		ИмяПоказателя = "П000Л30000003";

	Иначе 
		
		ДвиженияДенежныхСредствРасшифровка = ДанныеОтчета.РасходДенежныхСредств;
		ИмяПоказателя = "П000Л30000004";

	КонецЕсли;
	
	// Заполнение расшифровки данных зачислено / списано листа 3 
	ОтборРасшифровки = Новый Структура("Валюта", ОтборПоВалюте.Валюта);
	ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки(ПараметрыЗаполнения, 
		ОтборРасшифровки, ДвиженияДенежныхСредствРасшифровка, ОтборПоВалюте.Валюта, ВалютаРеглУчета);
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		ИмяПоказателя, "", "", "", СтрокиЛистов3_7.Данные[ИмяПоказателя], НомерСтраницы, ДополнительныеПараметры);
		
	ДвиженияДенежныхСредств = ДвиженияДенежныхСредствРасшифровка.Скопировать();
	ДвиженияДенежныхСредств.Свернуть("Валюта, КодВалютнойОперации", "Сумма");

	МассивНомеровЛистов = МассивНомеровЛистов();
	СоответствиеСтрокиИНомера = Новый Соответствие();
	СоответствиеЯчеек = СоответствиеЯчеекИНомераЛиста();

	СтрокиДвиженийПоВалюте = ДвиженияДенежныхСредств.НайтиСтроки(ОтборПоВалюте);
	
	ДанныеПоКонтрактам = ДанныеПоКонтрактам(ДанныеОтчета);
		
	Для Каждого СтрокаДвижений Из СтрокиДвиженийПоВалюте Цикл
		
		КодВалютнойОперации = СтрокаДвижений.КодВалютнойОперации;
		ОтборРасшифровки = Новый Структура("Валюта, КодВалютнойОперации", 
			ОтборПоВалюте.Валюта, СтрокаДвижений.КодВалютнойОперации);
		ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки(ПараметрыЗаполнения, 
			ОтборРасшифровки, ДвиженияДенежныхСредствРасшифровка, ОтборПоВалюте.Валюта, ВалютаРеглУчета);
				
		НомерЛиста = МассивНомеровЛистов[ИндексЛиста];
		СтрокаЛиста = СтрокаТаблицыДвижений(СтрокиЛистов3_7, МассивНомеровЛистов, ИндексЛиста, КодВалютнойОперации, СтрокаДвижений.Сумма);
		
		ПолучитьСледующийНомерСтрокиДляЛиста(СоответствиеСтрокиИНомера, НомерЛиста);
		НомерСтроки = СоответствиеСтрокиИНомера.Получить(НомерЛиста);
		ИмяПоказателя = ИмяРасшифровываемойЯчейки(НомерСтроки, НомерЛиста, СоответствиеЯчеек[НомерЛиста]);
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "", "", "",
			СтрокаДвижений.Сумма, НомерСтраницы, ДополнительныеПараметры);
			
		ДанныеОсновныхЛистов3_7 = ДанныеОсновныхЛистов3_7(СтрокаЛиста, КодВалютнойОперации, ОтборПоВалюте.Валюта, НомерСтраницы, НомерСтроки, ИндексЛиста);
		ЗаполнитьДополнительныеЛисты(ДанныеОсновныхЛистов3_7, ДанныеПоКонтрактам, ТаблицаРасшифровки, ПараметрыЗаполнения, ВалютаРеглУчета);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПоКонтрактам(ДанныеОтчета)
		
	ПриходПоКонтрактамРасшифровка = ДанныеОтчета.ПриходДенежныхСредствПоУНК;
	РасходПоКонтрактамРасшифровка = ДанныеОтчета.РасходДенежныхСредствПоУНК;
	ПриходПоКонтрактам = ПриходПоКонтрактамРасшифровка.Скопировать();
	ПриходПоКонтрактам.Свернуть("Валюта, КодВалютнойОперации, Договор, УникальныйНомерВалютногоКонтроля", "Сумма");
	РасходПоКонтрактам = РасходПоКонтрактамРасшифровка.Скопировать();
	РасходПоКонтрактам.Свернуть("Валюта, КодВалютнойОперации, Договор, УникальныйНомерВалютногоКонтроля", "Сумма");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПриходПоКонтрактамРасшифровка", ПриходПоКонтрактамРасшифровка);
	СтруктураДанных.Вставить("ПриходПоКонтрактам", ПриходПоКонтрактам);
	СтруктураДанных.Вставить("РасходПоКонтрактамРасшифровка", РасходПоКонтрактамРасшифровка);
	СтруктураДанных.Вставить("РасходПоКонтрактам", РасходПоКонтрактам);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДополнительныеПараметрыРасшифровки(ПараметрыЗаполнения, ОтборРасшифровки, ДвиженияДенежныхСредствРасшифровка, Валюта, ВалютаРеглУчета)
	
	ДокументыРасшифровки = ДокументыРасшифровки(ДвиженияДенежныхСредствРасшифровка, ОтборРасшифровки);
		
	ОтборыИПоказатели = ПараметрыФормированияРасшифровки(ПараметрыЗаполнения.СчетОрганизацииВИностранномБанке, Валюта, ВалютаРеглУчета);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументыРасшифровки", ДокументыРасшифровки);
	ДополнительныеПараметры.Вставить("ОтборыИПоказатели", ОтборыИПоказатели);

	Возврат ДополнительныеПараметры; 
	
КонецФункции

Функция ДанныеОсновныхЛистов3_7(СтрокаЛиста, КодВалютнойОперации, Валюта, НомерСтраницы, НомерСтроки, ИндексЛиста)
	
	Результат = Новый Структура();
	Результат.Вставить("КодВалютнойОперации", КодВалютнойОперации);
	Результат.Вставить("Валюта", Валюта);
	Результат.Вставить("НомерСтраницы", НомерСтраницы);
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("СтрокаЛиста", СтрокаЛиста);
	Результат.Вставить("ИндексЛиста", ИндексЛиста);

	Возврат Результат;

КонецФункции

Функция СоответствиеЯчеекИНомераЛиста()
	
	// Постфикс номера ячейки суммы для разных листов
	// может быть различным
	Результат = Новый Соответствие();
	Результат.Вставить("4", "2");
	Результат.Вставить("5", "3");
	Результат.Вставить("6", "2");
	Результат.Вставить("7", "2");

	Возврат Результат;

КонецФункции

Функция МассивНомеровЛистов()
	
	МассивНомеровЛистов = Новый Массив();
	МассивНомеровЛистов.Добавить("4");
	МассивНомеровЛистов.Добавить("5");
	МассивНомеровЛистов.Добавить("6");
	МассивНомеровЛистов.Добавить("7"); 
	
	Возврат МассивНомеровЛистов;
	
КонецФункции

Процедура ПолучитьСледующийНомерСтрокиДляЛиста(СоответствиеСтрокиИНомера, НомерЛиста) 
	
	ЗначениеСоответствия = СоответствиеСтрокиИНомера.Получить(НомерЛиста);
	Если ЗначениеСоответствия = Неопределено Тогда
		СоответствиеСтрокиИНомера.Вставить(НомерЛиста, 1);
	Иначе 
		СоответствиеСтрокиИНомера[НомерЛиста] = ЗначениеСоответствия + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяСтрокаЛиста(Листы, МассивНомеров)

	НоваяСтрока = Листы.Строки.Добавить();
	НоваяСтрока.Данные = Новый Структура;
	НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
	
	Для Каждого Элемент Из МассивНомеров Цикл
		НоваяСтрока.ДанныеМногострочныхЧастей.Вставить("П000Л" + Элемент + "М1", НовоеДеревоДанных());
	КонецЦикла;
	
	Возврат НоваяСтрока;

КонецФункции

Функция НовоеДеревоДанных()

	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Данные");
	Результат.Колонки.Добавить("ДанныеМногострочныхЧастей");
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДанныеЛиста3(СтрокиЛистов, СтрокаДанных)
	
	СтруктураДанныхЛиста3 = СтрокиЛистов.Данные;
	СтруктураДанныхЛиста3.Вставить("П000Л30000001", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Валюта, "Код"));
	СтруктураДанныхЛиста3.Вставить("П000Л30000002", СтрокаДанных.СуммаНачальныйОстаток);
	СтруктураДанныхЛиста3.Вставить("П000Л30000003", СтрокаДанных.Приход);
	СтруктураДанныхЛиста3.Вставить("П000Л30000004", СтрокаДанных.Расход);
	СтруктураДанныхЛиста3.Вставить("П000Л30000005", СтрокаДанных.СуммаКонечныйОстаток); 
	
КонецПроцедуры

Процедура ОчиститьМножественныеЧастиЛистов(СтрокиЛистов, МассивНомеров)
	
	Для Каждого Элемент Из МассивНомеров Цикл
		ДеревоМнЧЛиста = МножественнаяЧастьЛиста(СтрокиЛистов, Элемент);
		ДеревоМнЧЛиста.Строки.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция МножественнаяЧастьЛиста(СтрокиЛистов, КодЛиста)

	Возврат СтрокиЛистов.ДанныеМногострочныхЧастей["П000Л" + КодЛиста + "М1"];
	
КонецФункции

Процедура ЗаполнитьДополнительныеЛисты(ДанныеОсновныхЛистов3_7, ДанныеПоКонтрактам, ТаблицаРасшифровки, ПараметрыЗаполнения, ВалютаРеглУчета)
		
	МассивНомеровЛистов = МассивНомеровЛистов(); 
	СоответствиеЯчеек = СоответствиеЯчеекИНомераЛиста();
	
	ИндексРодительскогоЛиста = ДанныеОсновныхЛистов3_7.ИндексЛиста;
	
	Если ИндексРодительскогоЛиста = 0 Тогда
		
		ДвиженияПоКонтрактамРасшифровка = ДанныеПоКонтрактам.ПриходПоКонтрактамРасшифровка;
		ДвиженияПоКонтрактам = ДанныеПоКонтрактам.ПриходПоКонтрактам;
		КлючРасшифровки = "СубконтоКт2";
		
	Иначе
		
		ДвиженияПоКонтрактамРасшифровка = ДанныеПоКонтрактам.РасходПоКонтрактамРасшифровка;
		ДвиженияПоКонтрактам = ДанныеПоКонтрактам.РасходПоКонтрактам;
		КлючРасшифровки = "СубконтоДт2";

	КонецЕсли; 
	
	Отбор = Новый Структура("Валюта, КодВалютнойОперации", ДанныеОсновныхЛистов3_7.Валюта, ДанныеОсновныхЛистов3_7.КодВалютнойОперации);
	СтрокиДвиженийПоКонтрактам = ДвиженияПоКонтрактам.НайтиСтроки(Отбор);
	СоответствиеСтрокиИНомера = Новый Соответствие();

	Для Каждого СтрокаДвижений Из СтрокиДвиженийПоКонтрактам Цикл
			
		НомерКонтракта = СтрокаДвижений.УникальныйНомерВалютногоКонтроля;
		ИндексЛиста = ИндексРодительскогоЛиста + 1;
		НомерЛиста = МассивНомеровЛистов[ИндексЛиста]; 
		
		СтрокаТаблицыДвиженийПоКонтрактам(ДанныеОсновныхЛистов3_7.СтрокаЛиста, НомерЛиста, НомерКонтракта, СтрокаДвижений.Сумма);
		
		ПолучитьСледующийНомерСтрокиДляЛиста(СоответствиеСтрокиИНомера, НомерЛиста);
		
		ОтборыИПоказатели = ПараметрыФормированияРасшифровки(ПараметрыЗаполнения.СчетОрганизацииВИностранномБанке, ДанныеОсновныхЛистов3_7.Валюта, ВалютаРеглУчета);
		ОтборыИПоказатели.Вставить(КлючРасшифровки, СтрокаДвижений.Договор);
		ОтборРасшифровки = Новый Структура("Валюта, КодВалютнойОперации, Договор", 
			СтрокаДвижений.Валюта, СтрокаДвижений.КодВалютнойОперации, СтрокаДвижений.Договор);
		ДокументыРасшифровки = ДокументыРасшифровки(ДвиженияПоКонтрактамРасшифровка, ОтборРасшифровки); 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДокументыРасшифровки", ДокументыРасшифровки);
		ДополнительныеПараметры.Вставить("ОтборыИПоказатели", ОтборыИПоказатели);
		
		НомерСтроки = "" + ДанныеОсновныхЛистов3_7.НомерСтроки + "_" + СоответствиеСтрокиИНомера.Получить(НомерЛиста);
		ИмяПоказателя = ИмяРасшифровываемойЯчейки(НомерСтроки, НомерЛиста, СоответствиеЯчеек[НомерЛиста]);
			
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "", "", "",
				СтрокаДвижений.Сумма, ДанныеОсновныхЛистов3_7.НомерСтраницы, ДополнительныеПараметры);

	КонецЦикла;
	
КонецПроцедуры
	
Функция СтрокаТаблицыДвижений(СтрокаЛиста, МассивНомеровЛистов, ИндексЛиста, КодВалютнойОперации, Сумма)
	
	НомерЛиста = МассивНомеровЛистов[ИндексЛиста];
	ДеревоМнЧЛиста = МножественнаяЧастьЛиста(СтрокаЛиста, НомерЛиста);
	
	НомерСвязанногоЛиста = МассивНомеровЛистов[ИндексЛиста + 1];
	МассивНомеров = Новый Массив();
	МассивНомеров.Добавить(НомерСвязанногоЛиста);
	
	НоваяСтрока = НоваяСтрокаЛиста(ДеревоМнЧЛиста, МассивНомеров);
	
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М100001", КодВалютнойОперации);
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М100002", Сумма);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция СтрокаТаблицыДвиженийПоКонтрактам(СтрокаЛиста, НомерЛиста, НомерКонтракта, Сумма)
	
	ДеревоМнЧЛиста = МножественнаяЧастьЛиста(СтрокаЛиста, НомерЛиста);

	НоваяСтрока = ДеревоМнЧЛиста.Строки.Добавить();
	НоваяСтрока.Данные = Новый Структура;
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М100001");
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М100002");

	НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
	
	// Строки по контрактам по составу различны для листов 5 и 7
	Постфикс = СоответствиеЯчеекИНомераЛиста().Получить(НомерЛиста);
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М100001", НомерКонтракта);
	НоваяСтрока.Данные.Вставить("П000Л" + НомерЛиста + "М10000" + Постфикс, Сумма);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПараметрыФормированияРасшифровки(СчетОрганизацииВИностранномБанке, Валюта, ВалютаРеглУчета)
		
	Результат = Новый Структура();
	Результат.Вставить("Отбор", СчетОрганизацииВИностранномБанке);
	Результат.Вставить("ПоказательБУ", ?(Валюта = ВалютаРеглУчета, Истина, Ложь));
	Результат.Вставить("ПоказательВалютнаяСумма", ?(Валюта = ВалютаРеглУчета, Ложь, Истина));
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыРасшифровки(ДвиженияДенежныхСредствРасшифровка, Отбор)
	
	ТаблицаДокументов = ДвиженияДенежныхСредствРасшифровка.Скопировать(Отбор);
	
	Возврат ТаблицаДокументов.ВыгрузитьКолонку("Регистратор");
	
КонецФункции

Функция ИмяРасшифровываемойЯчейки(НомерСтроки, НомерЛиста, НомерЯчейки)
	
	ИмяПоказателя = "";
	
	Если НомерСтроки <> Неопределено Тогда
		ИмяПоказателя = "П000Л" + НомерЛиста + "М10000" + НомерЯчейки + "_" + НомерСтроки;
	КонецЕсли; 
	
	Возврат ИмяПоказателя;
	
КонецФункции

#КонецОбласти
