#Область СлужебныйПрограммныйИнтерфейс

// Создает платеж по счету в платежной системе и возвращает платежную ссылку.
//
// Параметры:
//	- Счет - Ссылка - счет, по которому следует создать платеж
//
// Возвращаемое значение:
//	- Строка - Платежная ссылка
//
Функция СоздатьПлатежнуюСсылкуПоСчету(Счет) Экспорт
	
	Если НЕ ИспользоватьПлатежнуюСистемуЮKassa() Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет,
		"Номер, Дата, СуммаДокумента, СсылочныйИдентификатор, Организация, Контрагент");
	
	СвойстваСчета = РегистрыСведений.СчетНаОплатуПокупателюОплатаСервиса.СвойстваСчета(Счет);
	Если НЕ СвойстваСчета.Выбран() Тогда
		ВызватьИсключение ПредставлениеОшибки(НСтр("ru='Не заполнены свойства счета для биллинга'"));
	КонецЕсли;
	
	НомерСчета = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчета.Номер, Истина);
	ДатаСчета = Формат(ДанныеСчета.Дата, "ДФ=dd.MM.yyyy");
	СуммаСчета = ДанныеСчета.СуммаДокумента;
	СсылочныйИдентификатор = ДанныеСчета.СсылочныйИдентификатор;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеСчета.Организация, ДанныеСчета.Дата);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеСчета.Контрагент, ДанныеСчета.Дата);
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Описание = СтрШаблон(НСтр("ru='Оплата по счету %1 от %2 (%3)'"),
		НомерСчета,
		ДатаСчета,
		СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	
	МетаданныеПлатежа = Новый Структура;
	МетаданныеПлатежа.Вставить("id", ДанныеСчета.СсылочныйИдентификатор);
	
	ДанныеЧека = Новый Структура;
	ДанныеЧека.Вставить("ПочтаПокупателя", СвойстваСчета.ПочтаПокупателя);
	ДанныеЧека.Вставить("КодСистемыНалогообложения", КодСистемыНалогообложения(ДанныеСчета.Организация, ДанныеСчета.Дата));
	ДанныеЧека.Вставить("НаименованиеКонтрагента", СведенияОКонтрагенте.СокращенноеНаименование);
	ДанныеЧека.Вставить("ИННКонтрагента", СведенияОКонтрагенте.ИНН);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Счет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ (Товары.Сумма + Товары.СуммаНДС) / ВЫБОР
	|				КОГДА Товары.Количество = 0
	|					ТОГДА 1
	|				ИНАЧЕ Товары.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	ДанныеЧека.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	ДанныеПлатежа = СоздатьПлатеж(СуммаСчета, Описание, МетаданныеПлатежа, СсылочныйИдентификатор, ДанныеЧека);
	
	СвойстваСчета.ПлатежнаяСсылка = ДанныеПлатежа.Ссылка;
	СвойстваСчета.Записать(Истина);
	
	Возврат ДанныеПлатежа.Ссылка;
	
КонецФункции

// Начинает обработку оповещение о платеже:
// - немедленно возвращает ответ 200 OK;
// - запускает фоновое задание по обработке оповещения.
//
// Параметры:
//	HTTPСервисЗапрос - запрос с оповещением о платеже
//
// Возвращаемое значение:
//	Число - код состояния HTTP
//
Функция НачатьОбработкуОповещенияОПлатеже(Запрос) Экспорт
	
	ОплатаСервисаЖурналРегистрацииБП.ЛогироватьВыполнениеМетода(Запрос);
	
	Если НЕ ИспользоватьПлатежнуюСистемуЮKassa() Тогда
		Возврат ОплатаСервисаHTTPБП.КодОтветаНеНайдено();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Запрос.ПолучитьТелоКакСтроку());
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяФоновогоОбработчика());
	ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("ИмяПользователя", Константы.ИмяПользователяУчетнойСистемы.Получить());
	
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОплатаСервисаHTTPБП.КодОтветаОк();
	
КонецФункции

// Обрабатывает оповещение о платеже:
// - проверяет корректность формата оповещения;
// - проверяет оплаченность указанного в оповещении платежа;
// - делает выставленный счет оплаченным;
// - создает подписку по счету;
// - отправляет уведомления.
//
// Параметры:
//	ТелоЗапроса - Строка - тело запроса
//
Процедура ОбработатьОповещениеОПлатежеВФоне(ТелоЗапроса) Экспорт
	
	Попытка
		
		СвойстваТипаДата = "created_at, captured_at, expires_at";
		ДанныеОповещения = ОплатаСервисаJSONБП.Прочитать(ТелоЗапроса, СвойстваТипаДата);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Счет = Документы.СчетНаОплатуПокупателю.ПолучитьПоСсылочномуИдентификатору(ДанныеОповещения.object.metadata.id);
		
		ПроверитьОповещение(ДанныеОповещения);
		
		СвойстваСчета = РегистрыСведений.СчетНаОплатуПокупателюОплатаСервиса.СвойстваСчета(Счет);
		Если НЕ СвойстваСчета.Выбран() Тогда
			ВызватьИсключение ПредставлениеОшибки(НСтр("ru='Обработка платежа: Не заполнены свойства счета для биллинга'"));
		КонецЕсли;
		
		Документы.СчетНаОплатуПокупателю.СделатьОплаченным(Счет);
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПродавцуОбОплате(Счет, СвойстваСчета.КодПокупателя, ДанныеОповещения);
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Организация");
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПокупателюОбОплате(СвойстваСчета.ПочтаПокупателя, Организация);
		
		ОплатаСервисаПодпискиБП.СоздатьПодпискиПоСчету(Счет);
		
		ОплатаСервисаБП.ПриОплатеСчета(Счет);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОписаниеОшибки = ПредставлениеОшибки(СтрШаблон("%1: %2", Документы.СчетНаОплатуПокупателю.Представление(Счет),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПродавцуОбОшибкеПриОплате(Счет, ОписаниеОшибки, ТелоЗапроса);
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПокупателюОбОшибкеПриОплате(Счет);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПопытки
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков()
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(ИмяФоновогоОбработчика());
	
КонецПроцедуры

// Возвращает URL для приема оповещений о платежах от сервиса ЮKassa
//
// Возвращаемое значение:
//	Строка - URL
//
Функция URLДляПриемаОповещенийЮKassa() Экспорт
	
	Возврат ОплатаСервисаURLБП.Сформировать(ПолучитьНавигационнуюСсылкуИнформационнойБазы(),
		"hs/payment/notification/yookassa");
	
КонецФункции

#Область НастройкиПлатежнойСистемы

// Возвращает признак использования сервиса ЮKassa.
//
// Возвращаемое значение:
//	Булево - признак использования платежной системы
//
Функция ИспользоватьПлатежнуюСистемуЮKassa() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПлатежнуюСистемуЮKassa = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ИспользоватьПлатежнуюСистемуЮKassa"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИспользоватьПлатежнуюСистемуЮKassa = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьПлатежнуюСистемуЮKassa;
	
КонецФункции

// Возвращает идентификатор магазина в платежной системе ЮKassa.
//
// Возвращаемое значение:
//	Строка - идентификатор магазина
//
Функция ИдентификаторМагазинаЮKassa() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторМагазинаЮKassa = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ИдентификаторМагазинаЮKassa"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИдентификаторМагазинаЮKassa = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИдентификаторМагазинаЮKassa;
	
КонецФункции

// Возвращает секретный ключ в платежной системе ЮKassa.
//
// Возвращаемое значение:
//	Строка - секретный ключ
//
Функция СекретныйКлючЮKassa() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СекретныйКлючЮKassa = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"СекретныйКлючЮKassa"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СекретныйКлючЮKassa = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СекретныйКлючЮKassa;
	
КонецФункции

// Записывает идентификатор магазина в платежной системе ЮKassa в хранилище.
//
// Параметры:
//	ИдентификаторМагазинаЮKassa - Строка - идентификатор магазина
//
Процедура УстановитьИдентификаторМагазинаЮKassa(ИдентификаторМагазинаЮKassa) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		ИдентификаторМагазинаЮKassa,
		"ИдентификаторМагазинаЮKassa"
	);
	
КонецПроцедуры

// Записывает секретный ключ в платежной системе ЮKassa в хранилище
//
// Параметры:
//	СекретныйКлючЮKassa - Строка - секретный ключ
//
Процедура УстановитьСекретныйКлючЮKassa(СекретныйКлючЮKassa) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		СекретныйКлючЮKassa,
		"СекретныйКлючЮKassa"
	);
	
КонецПроцедуры

// Записывает признак использования платежной системы ЮKassa в хранилище.
//
// Параметры:
//	ИспользоватьПлатежнуюСистемуЮKassa - Булево - признак использования платежной системы
//
Процедура УстановитьПризнакИспользованияПлатежнойСистемыЮKassa(ИспользоватьПлатежнуюСистемуЮKassa) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		ИспользоватьПлатежнуюСистемуЮKassa,
		"ИспользоватьПлатежнуюСистемуЮKassa"
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьПлатеж(Сумма, Описание = "", Метаданные = Неопределено, СсылочныйИдентификатор = Неопределено, ДанныеЧека = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СсылочныйИдентификатор) Тогда
		СсылочныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Idempotence-Key", СсылочныйИдентификатор);
	
	ДанныеСуммы = Новый Структура;
	ДанныеСуммы.Вставить("value", Сумма);
	ДанныеСуммы.Вставить("currency", "RUB");
	
	ДанныеПодтверждения = Новый Структура;
	ДанныеПодтверждения.Вставить("type", "redirect");
	ДанныеПодтверждения.Вставить("return_url", URLЗавершенияПлатежа());
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("amount", ДанныеСуммы);
	СтруктураДанных.Вставить("confirmation", ДанныеПодтверждения);
	СтруктураДанных.Вставить("capture", Истина);
	
	Если ЗначениеЗаполнено(Метаданные) Тогда
		СтруктураДанных.Вставить("metadata", Метаданные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		СтруктураДанных.Вставить("description", Описание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЧека) Тогда
		СтруктураДанных.Вставить("receipt", Новый Структура);
		СтруктураДанных.receipt.Вставить("tax_system_code", ДанныеЧека.КодСистемыНалогообложения);
		СтруктураДанных.receipt.Вставить("email", ДанныеЧека.ПочтаПокупателя);
		СтруктураДанных.receipt.Вставить("customer", Новый Структура);
		СтруктураДанных.receipt.customer.Вставить("email", ДанныеЧека.ПочтаПокупателя);
		СтруктураДанных.receipt.customer.Вставить("full_name", ДанныеЧека.НаименованиеКонтрагента);
		СтруктураДанных.receipt.customer.Вставить("inn", ДанныеЧека.ИННКонтрагента);
		СтруктураДанных.receipt.Вставить("items", Новый Массив);
		Для каждого Товар Из ДанныеЧека.Товары Цикл
			ОписаниеТовара = Новый Структура;
			ОписаниеТовара.Вставить("description", Товар.Наименование);
			ОписаниеТовара.Вставить("quantity", Товар.Количество);
			ОписаниеТовара.Вставить("amount", Новый Структура);
			ОписаниеТовара.amount.Вставить("value", Товар.Цена);
			ОписаниеТовара.amount.Вставить("currency", "RUB");
			ОписаниеТовара.Вставить("vat_code", КодСтавкиНДС(Товар.СтавкаНДС));
			ОписаниеТовара.Вставить("payment_subject", "commodity");
			ОписаниеТовара.Вставить("payment_mode", "full_prepayment");
			СтруктураДанных.receipt.items.Добавить(ОписаниеТовара);
		КонецЦикла;
	КонецЕсли;
	
	ОплатаСервисаЖурналРегистрацииБП.ЗаписатьИнформацию(
		"Данные платежа:
		|" + ОплатаСервисаJSONБП.Записать(СтруктураДанных)
	);
	
	ОтветСервера = ОплатаСервисаHTTPБП.POST(URLПлатежнойСистемы(),
		Заголовки,
		СтруктураДанных,
		ИдентификаторМагазинаЮKassa(),
		СекретныйКлючЮKassa());
		
	Если ОтветСервера.КодСостояния <> 200 Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1 %2", ОтветСервера.КодСостояния, ОтветСервера.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	ДанныеОтвета = ОплатаСервисаJSONБП.Прочитать(ОтветСервера.ПолучитьТелоКакСтроку());
	
	ДанныеПлатежа = Новый Структура;
	ДанныеПлатежа.Вставить("Идентификатор", ДанныеОтвета.id);
	ДанныеПлатежа.Вставить("Ссылка", ДанныеОтвета.confirmation.confirmation_url);
	
	Возврат ДанныеПлатежа;
	
КонецФункции

Процедура ПроверитьОповещение(ДанныеОповещения)
	
	ДанныеПлатежа = ПолучитьДанныеПлатежа(ДанныеОповещения.object.id);
	
	Если ДанныеПлатежа.test И НЕ ВозможныТестовыеПлатежи() Тогда
		ВызватьИсключение ПредставлениеОшибки(НСтр("ru='Тестовый платеж'"));
	КонецЕсли;
	
	Если ДанныеПлатежа.id <> ДанныеОповещения.object.id Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2 <> %3",
			НСтр("ru='Различаются идентификаторы в оповещении и данных платежа'"),
			ДанныеОповещения.object.id,
			ДанныеПлатежа.id));
	КонецЕсли;
	
	Если ДанныеПлатежа.metadata.id <> ДанныеОповещения.object.metadata.id Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2 <> %3",
			НСтр("ru='Различаются ссылочные идентификаторы в оповещении и данных платежа'"),
			ДанныеОповещения.object.metadata.id,
			ДанныеПлатежа.metadata.id));
	КонецЕсли;
	
	Если НЕ ДанныеПлатежа.paid Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2",
			НСтр("ru='Платеж не подтвержден'"),
			ДанныеПлатежа.id));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПлатежа(ИдентификаторПлатежа)
	
	ОтветСервера = ОплатаСервисаHTTPБП.GET(ОплатаСервисаURLБП.Сформировать(URLПлатежнойСистемы(), ИдентификаторПлатежа),,
		ИдентификаторМагазинаЮKassa(),
		СекретныйКлючЮKassa());
	
	Если ОтветСервера.КодСостояния <> 200 Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1 %2", ОтветСервера.КодСостояния, ОтветСервера.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	ДанныеПлатежа = ОплатаСервисаJSONБП.Прочитать(ОтветСервера.ПолучитьТелоКакСтроку());
	
	Возврат ДанныеПлатежа;
	
КонецФункции

Функция URLПлатежнойСистемы()
	
	Возврат "https://api.yookassa.ru/v3/payments/";
	
КонецФункции

Функция URLЗавершенияПлатежа()
	
	Возврат "#";
	
КонецФункции

Функция ВладелецДанныхВХранилище()
	
	Возврат "ОплатаСервисаБП_ПлатежнаяСистемаЮKassa";
	
КонецФункции

Функция КодСистемыНалогообложения(Организация, Период)
	
	Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
		
		Если УчетнаяПолитика.ПатентУСН(Организация, Период) Тогда
			Возврат 6;
		КонецЕсли; 
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			Возврат 4;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период) Тогда
		Возврат 3;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		Возврат 2;
	КонецЕсли;
	
	Возврат 1; // Общая система налогообложения.
	
КонецФункции

Функция КодСтавкиНДС(СтавкаНДС) 
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат 2;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат 3;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Возврат 4;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат 4;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 5;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 6;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 6;
	Иначе
		Возврат 1; // Без НДС
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОшибки(ТекстОшибки)
	
	Возврат СтрШаблон("%1: %2", НСтр("ru='Платежная система ЮKassa'"), ТекстОшибки);
	
КонецФункции

Функция ВозможныТестовыеПлатежи()
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяФоновогоОбработчика()
	
	Возврат "ОплатаСервисаПлатежнаяСистемаЮKassaБП.ОбработатьОповещениеОПлатежеВФоне";
	
КонецФункции

#КонецОбласти
