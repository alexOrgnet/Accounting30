// Модуль реализует актуальные алгоритмы амортизации активов в бухгалтерском учете (сейчас - в соответствии с ФСБУ 6, ФСБУ 14).
// Предыдущая версия алгоритмов 
// - в УчетОС, она применялась при ПБУ6 и в переходный период
// - в УчетНМА, она применяется до даты обязательного применения ФСБУ 14.
//
// Основные методы реализованы как для ОС, так и для НМА.
// В такие передается ТипОбъектов.
// Отдельные методы пока реализованы только для ОС - в них ТипОбъектов не передается.
//
// Амортизация групповых единиц учета - отдельно, в УчетГрупповыхОС.
// Пересчет амортизации с начала года (БМЦ Р-6/2009-КпР) - АмортизацияАктивовПересчет.
// Также к учету стоимости основных средств относится часть модуля УчетОбесцененияАктивов.
//
// В модуле используется терминология ФСБУ 6, ФСБУ 14, ФСБУ 26,
// она может отличаться от используемой ранее, в том числе, от используемой в УчетОС.
// Те термины, которые не определены явно в ФСБУ, но подразумеваются в них,
// взяты из IAS 16 "Основные средства" (Приложение N 8 к приказу Минфина от 28.12.2015 N 217н)

#Область ПрограммныйИнтерфейс

// Рассчитывает амортизацию за месяц (часть месяца).
// Как правило, расчет выполняется регламентно, за месяц в целом.
// В этом случае в параметр Период следует передавать дату конца месяца.
// Исключением может быть, например, выбытие актива или пересмотр оценочных значений.
// В этих случаях рекомендуется в параметр Период передавать момент времени,
// а в период Отбор - выбывающие (анализируемые) основные средства (НМА)
//
// Параметры:
//  ТипОбъектов  - Тип (СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы) - тип объектов, амортизацию которых нужно рассчитать
//  Период       - Дата, МоментВремени - конец период расчета
//  Организация  - СправочникСсылка.Организация
//  Отбор        - Массив из СправочникСсылка.ОсновныеСредства,
//                 Массив из СправочникСсылка.НематериальныеАктивы - перечень объектов, по которым нужен расчет
//               - Неопределено - расчет нужен по всем основным средствам (НМА), имеющим балансовую стоимость
//  АлгоритмПериодаАмортизации - ПеречислениеСсылка.АлгоритмыПериодаАмортизации - решение, принятое в соответствии с п.33 ФСБУ 6 (п. 38 ФСБУ 14)
//                             - Неопределено - алгоритм определяется учетной политикой организации
//  КорректировкаНакопленнойАмортизации - АмортизацияАктивовПересчет.НовыйКорректировкаНакопленнойАмортизации - результаты пересчета предыдущих месяцев,
//                                        не записанные в информационную базу.
//                                        Набор основных средств в КорректировкаНакопленнойАмортизации
//                                        должен соответствовать Отбору.
//                                      - Неопределено - балансовая стоимость определяется данными регистра бухгалтерии на момент расчета.
// 
// Возвращаемое значение:
//  Структура, см. НовыйПроцессорРасчетаАмортизации - содержит результат расчета
//
Функция РассчитатьАмортизацию(ТипОбъектов, Период, Организация, Отбор = Неопределено, АлгоритмПериодаАмортизации = Неопределено, КорректировкаНакопленнойАмортизации = Неопределено) Экспорт
	
	Процессор = НовыйПроцессорРасчетаАмортизации(ТипОбъектов);
	ИнициализироватьПроцессорРасчетаАмортизации(
		Процессор,
		Период,
		Организация,
		АлгоритмПериодаАмортизации,
		КорректировкаНакопленнойАмортизации <> Неопределено);
	
	Если Процессор.КонецПериода < Процессор.НачалоМесяца Тогда
		Возврат Процессор;
	КонецЕсли;
	
	// Процедуры, начинающиеся с Создать, создают временные таблицы.
	// После слова Создать, как правило, следует имя создаваемой таблицы.
	// Создаваемые таблицы содержат все сведения об амортизируемых активах,
	// выбираемые из информационной базы, нужные для расчета.
	// Своего рода "список ингредиентов", которые дальше будут обработаны.
	
	СоздатьБалансоваяСтоимость(Процессор, Отбор, КорректировкаНакопленнойАмортизации); // Суммы на момент расчета
	СоздатьАктивы(Процессор);                     // Перечень амортизируемых активов, например, для отборов в запросах
	СоздатьАктуальныеСведенияАктивов(Процессор);  // Набор таблиц: элементы амортизации и иные сведения о том,
	                                              // как рассчитывать амортизацию по конкретным активам
	СоздатьНачалоОтсчетаСрока(Процессор);         // Реализует принятый в программе способ указания сроков
	СоздатьАмортизацияПредварительная(Процессор); // Суммы амортизации, начисленные в этом же месяце ранее
	СоздатьНеКорректироватьАвтоматически(Процессор); // Суммы амортизации, отраженные с указанием не корректировать их автоматически
	                                                 // (например, отраженные вручную или нетиповым алгоритмом закрытия месяца)
	СоздатьИспользованиеРесурса(Процессор);          // Для способа амортизации на основе объема ресурсов (продукции)
	
	СоздатьПотокЗатрат(Процессор);                     // Части балансовой стоимости, сложившиеся в этом месяце, в разрезе дат затрат.
	                                                   // По каждой из таких частей амортизация может считаться отдельно.
	СоздатьИспользованиеРесурсаПотокЗатрат(Процессор); // Детально про использование ресурса - в разрезе дат, когда были понесены затраты
	
	Если Не ЭтоНМА(Процессор.ТипОбъектов) Тогда
		КомпонентыАмортизацииОС.СоздатьКомпонентыАмортизации( // Постоянные части балансовой стоимости, амортизируемые отдельно
			Процессор.МенеджерВременныхТаблиц,
			Процессор.Период,
			Процессор.Организация,
			Процессор.ЗадерживатьАмортизацию);
	КонецЕсли;
	
	// Здесь начинается собственно обработка данных.
	// Сначала поместим все данные в иерархическую коллекцию.
	// Она содержит как данные об основном средстве или НМА (сводные), так и о частях стоимости, по которым амортизация считается отдельно.
	// Подробнее см. НовыйОценкаСтоимостиАмортизируемыхАктивов
	ЗаполнитьОценкаСтоимости(Процессор);
	
	// Коэффициент амортизации - это доля стоимости, приходящаяся на каждый месяц.
	// Он рассчитывается детально по каждой части стоимости.
	// Для разных объектов основных средств или НМА (далее - объектов) могут применяться разные формулы расчета.
	// См. также НовыйРасчетАмортизацииБазовый
	РассчитатьКоэффициентыАмортизации(Процессор.Амортизация);
	
	// Упрощенно, сумма амортизации - это балансовая стоимость * коэффициент амортизации
	РассчитатьСуммыАмортизации(Процессор.ОценкаСтоимости);
	
	// Рассчитаем остаток ресурса объектов на следующие месяцы,
	// чтобы при следующем расчете не определять их по косвенным признакам из исторических данных.
	РассчитатьИтогиРесурса(
		Процессор.Итоги.Ресурс,
		Процессор.Амортизация[Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции]);
	
	// Рассчитаем остаток стоимости компонентов на следующие месяцы,
	// чтобы при следующем расчете не определять их по косвенным признакам из исторических данных.
	Если Не ЭтоНМА(Процессор.ТипОбъектов) Тогда
		КомпонентыАмортизацииОС.РассчитатьИтоги(Процессор.Итоги, Процессор.МенеджерВременныхТаблиц, Процессор.Амортизация);
	КонецЕсли;
	
	Возврат Процессор;
	
КонецФункции

// Определяет счета (субсчета), на которых формируется балансовая стоимость основных средств (НМА).
// 
// Параметры:
//  ТипОбъектов  - Тип (СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы)
//  ВключатьСчетаГрупповогоУчета - Булево - Истина, если нужно включать счета группового учета
//  ВключатьСчетаЗатратНаРемонт - Булево - Истина, если нужно включать счета затрат на ремонт ОС
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаБалансовойСтоимости(ТипОбъектов, ВключатьСчетаГрупповогоУчета = Ложь, ВключатьСчетаЗатратНаРемонт = Ложь) Экспорт
	
	ПредопределенныеСчета = Новый Массив;
	ЗаполнитьПредопределенныеСчетаАктивов(ПредопределенныеСчета, ТипОбъектов);
	ЗаполнитьПредопределенныеСчетаАмортизации(ПредопределенныеСчета, ТипОбъектов);
	
	ВсеСчета = СчетаАмортизируемыхАктивов(ПредопределенныеСчета, ТипОбъектов);
	
	Если ЭтоНМА(ТипОбъектов) Или (ВключатьСчетаГрупповогоУчета И ВключатьСчетаЗатратНаРемонт) Тогда
		Возврат ВсеСчета;
	КонецЕсли;
	
	СчетаИсключения = Новый Массив;
	Если Не ВключатьСчетаГрупповогоУчета Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС);
	КонецЕсли;
	Если Не ВключатьСчетаЗатратНаРемонт Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС);
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеСчета, СчетаИсключения);
	
КонецФункции

// Определяет счета (субсчета), на которых формируются затраты на приобретение основных средств (НМА),
// или приравненная к ним величина первоначальной стоимости.
// 
// Параметры:
//  ТипОбъектов  - Тип (СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы)
//  ВключатьСчетаГрупповогоУчета - Булево - Истина, если нужно включать счета группового учета
//  ВключатьСчетаЗатратНаРемонт - Булево - Истина, если нужно включать счета затрат на ремонт ОС
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаАктивов(ТипОбъектов, ВключатьСчетаГрупповогоУчета = Ложь, ВключатьСчетаЗатратНаРемонт = Ложь) Экспорт
	
	ПредопределенныеСчета = Новый Массив;
	ЗаполнитьПредопределенныеСчетаАктивов(ПредопределенныеСчета, ТипОбъектов);
	
	ВсеСчета = СчетаАмортизируемыхАктивов(ПредопределенныеСчета, ТипОбъектов);
	
	Если ВключатьСчетаГрупповогоУчета И ВключатьСчетаЗатратНаРемонт Тогда
		Возврат ВсеСчета;
	КонецЕсли;
	
	СчетаИсключения = Новый Массив;
	Если Не ВключатьСчетаГрупповогоУчета Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	КонецЕсли;
	Если Не ВключатьСчетаЗатратНаРемонт Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеСчета, СчетаИсключения);
	
КонецФункции

// Определяет счета (субсчета), на которых формируется накопленная амортизация.
// 
// Параметры:
//  ТипОбъектов  - Тип (СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы)
//  ВключатьСчетаГрупповогоУчета - Булево - Истина, если нужно включать счета группового учета
//  ВключатьСчетаЗатратНаРемонт - Булево - Истина, если нужно включать счета затрат на ремонт ОС
//  ВключатьСчетаОбесценения     - Булево - Истина, если нужно включать счета накопленного обесценения
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаАмортизации(ТипОбъектов, ВключатьСчетаГрупповогоУчета = Ложь, ВключатьСчетаЗатратНаРемонт = Ложь, ВключатьСчетаОбесценения = Ложь) Экспорт
	
	ПредопределенныеСчета = Новый Массив;
	ЗаполнитьПредопределенныеСчетаАмортизации(ПредопределенныеСчета, ТипОбъектов);
	СчетаАмортизации = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчета);
	
	Если ВключатьСчетаОбесценения Тогда
		ВсеСчета = СчетаАмортизации;
	Иначе
		ПредопределенныеСчета = Новый Массив;
		ЗаполнитьПредопределенныеСчетаОбесценения(ПредопределенныеСчета, ТипОбъектов);
		СчетаОбесценения = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчета);
		
		ВсеСчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаАмортизации, СчетаОбесценения);
	КонецЕсли;
	
	Если ВключатьСчетаГрупповогоУчета И ВключатьСчетаЗатратНаРемонт Тогда
		Возврат ВсеСчета;
	КонецЕсли;
	
	СчетаИсключения = Новый Массив;
	Если Не ВключатьСчетаГрупповогоУчета Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС);
	КонецЕсли;
	Если Не ВключатьСчетаЗатратНаРемонт Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеСчета, СчетаИсключения);
	
КонецФункции

// Определяет балансовую стоимость основных средств
//
// Параметры:
//  Период       - Дата, МоментВремени - период, на начало которого выполняется расчет
//  Организация  - СправочникСсылка.Организация
//  Отбор        - Массив из СправочникСсылка.ОсновныеСредства - перечень объектов, по которым нужен расчет
//  АлгоритмПериодаАмортизации - ПеречислениеСсылка.АлгоритмыПериодаАмортизации - решение, принятое в соответствии с п.33 ФСБУ 6 (п. 38 ФСБУ 14)
// 
// Возвращаемое значение:
//  Соответствие - содержит балансовую стоимость:
//         * Ключ - СправочникСсылка.ОсновныеСредства - объект
//         * Значение - Число - балансовая стоимость
//
Функция БалансоваяСтоимость(Период, Организация, Отбор = Неопределено, АлгоритмПериодаАмортизации = Неопределено) Экспорт
	
	БалансоваяСтоимость = Новый Соответствие;
	
	Процессор = НовыйПроцессорРасчетаАмортизации(Тип("СправочникСсылка.ОсновныеСредства"));
	ИнициализироватьПроцессорРасчетаАмортизации(Процессор, Период, Организация, АлгоритмПериодаАмортизации);
	
	СоздатьБалансоваяСтоимость(Процессор, Отбор);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БалансоваяСтоимость.Объект КАК Объект,
	|	БалансоваяСтоимость.Сумма КАК Сумма
	|ИЗ
	|	БалансоваяСтоимость КАК БалансоваяСтоимость";
	
	Выборка = ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса).Выбрать();
	Пока Выборка.Следующий() Цикл
		БалансоваяСтоимость.Вставить(Выборка.Объект, Выборка.Сумма);
	КонецЦикла;
	
	Возврат БалансоваяСтоимость;
	
КонецФункции

// Определяет дату начала отсчета сроков полезного использования основных средств.
// В программе принято, что срок использования задается двумя значениями:
// - точкой отсчета (датой) - она называется "дата ввода в эксплуатацию"
// - целым числом месяцев - ожидаемым ресурсом объекта
//
// Параметры:
//  Период       - Дата, МоментВремени - период, на начало которого выполняется расчет
//  Организация  - СправочникСсылка.Организация
//  Отбор        - Массив из СправочникСсылка.ОсновныеСредства - перечень объектов, по которым нужен расчет
//  АлгоритмПериодаАмортизации - ПеречислениеСсылка.АлгоритмыПериодаАмортизации - решение, принятое в соответствии с п.33 ФСБУ 6 (п. 38 ФСБУ 14)
// 
// Возвращаемое значение:
//  Соответствие - содержит начало срока объектов:
//         * Ключ - СправочникСсылка.ОсновныеСредства - объект
//         * Значение - Дата (Дата) - начало отсчета
//
Функция НачалоОтсчетаСрока(Период, Организация, Отбор, АлгоритмПериодаАмортизации = Неопределено) Экспорт
	
	НачалоОтсчета = Новый Соответствие;
	
	Процессор = НовыйПроцессорРасчетаАмортизации(Тип("СправочникСсылка.ОсновныеСредства"));
	ИнициализироватьПроцессорРасчетаАмортизации(Процессор, Период, Организация, АлгоритмПериодаАмортизации);
	
	Запрос = Новый Запрос;
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Активы.Ссылка КАК Объект,
	|	0 КАК Порядок
	|ПОМЕСТИТЬ Активы
	|ИЗ
	|	Справочник.ОсновныеСредства КАК Активы
	|ГДЕ
	|	Активы.Ссылка В(&Отбор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	Запрос.Выполнить();
	
	СоздатьНачалоОтсчетаСрока(Процессор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачалоОтсчетаСрока.Объект КАК Объект,
	|	НачалоОтсчетаСрока.Дата КАК Дата
	|ИЗ
	|	НачалоОтсчетаСрока КАК НачалоОтсчетаСрока";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачалоОтсчета.Вставить(Выборка.Объект, Выборка.Дата);
	КонецЦикла;
	
	Возврат НачалоОтсчета;
	
КонецФункции

// Определяет разность в целом числе календарных месяцев
// (если календарные месяцы отличаются, то разность составляет 1 месяц).
// Например, разность 31 января и 1 февраля - это 1 месяц.
//
// Параметры:
//  КонецПериода  - Дата - уменьшаемое
//  НачалоПериода - Дата - вычитаемое
// 
// Возвращаемое значение:
//  Число - число месяцев
//
Функция РазностьМесяцев(КонецПериода, НачалоПериода) Экспорт
	
	НачалоПериодаГод   = Год(НачалоПериода);
	НачалоПериодаМесяц = Месяц(НачалоПериода);
	КонецПериодаГод    = Год(КонецПериода);
	КонецПериодаМесяц  = Месяц(КонецПериода);
	
	КоличествоМесяцевВГоду = 12;
	
	Возврат (КонецПериодаГод - НачалоПериодаГод) * 12 + КонецПериодаМесяц - НачалоПериодаМесяц;
	
КонецФункции

// Определяет продолжительность срока полезного использования в целых месяцах, как разность дат начала и конца срока.
//
// Длительность срока зависит от применяемого алгоритма исчисления периода амортизации.
// Если алгоритм учитывает дни (СДатыПризнания), то срок исчисляется в целых месяцах.
// Например, срок с 1 января по 31 марта составляет три целых месяца,
// а срок с 2 января по 31 марта - два.
// Если алгоритм предписывает задерживать амортизацию до следующего месяца,
// то в обоих примерах срок составит два месяца (февраль и март).
//
// Параметры:
//  НачалоСрока - Дата
//  КонецСрока  - Дата
//  АлгоритмПериодаАмортизации - ПеречислениеСсылка.АлгоритмыПериодаАмортизации - решение, принятое в соответствии с п.33 ФСБУ 6 (п. 38 ФСБУ 14)
// 
// Возвращаемое значение:
//  Соответствие - содержит начало срока объектов:
//         * Ключ - СправочникСсылка.ОсновныеСредства - объект
//         * Значение - Дата (Дата) - начало отсчета
//
Функция СрокЦелыхМесяцев(НачалоСрока, КонецСрока, АлгоритмПериодаАмортизации) Экспорт
	
	Срок = 0;
	
	Если АлгоритмПериодаАмортизации <> Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания Тогда
		Срок = РазностьМесяцев(КонецСрока, НачалоСрока);
	Иначе
		
		ПриблизительныйСрок = ОкругленнаяРазностьМесяцев(КонецСрока, НачалоСрока);
		
		// Корректируем с учетом конкретных дат так, чтобы не выйти за пределы срока
		Если НачалоДня(ДобавитьМесяц(НачалоСрока, ПриблизительныйСрок) - 1) > КонецСрока Тогда
			Срок = ПриблизительныйСрок - 1;
		Иначе
			Срок = ПриблизительныйСрок;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Срок;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в таблицу значений с данными расчета амортизации колонки,
// обеспечивающие определение срока полезного использования в виде даты окончания срока.
//
// Параметры:
//  Расчет - ТаблицаЗначений - конструируемая коллекция
//
Процедура ДобавитьКолонкиРасчетаСрокаПолезногоИспользования(Расчет) Экспорт
	
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	Расчет.Колонки.Добавить("КонецСрокаПолезногоИспользования", ТипДата);
	Расчет.Колонки.Добавить(
		"ОбщийРесурсМесяцев",
		Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.Ресурсы.СрокПолезногоИспользования.Тип);
	Расчет.Колонки.Добавить("НачалоОтсчетаРесурсМесяцев",      ТипДата);
		
КонецПроцедуры

// Определяет срок полезного использования, выраженный в виде даты окончания срока.
//
// Параметры:
//  Расчет                   - СтрокаТаблицыЗначений - см. ДобавитьКолонкиРасчетаСрокаПолезногоИспользования
//  СпособАмортизации        - ПеречислениеСсылка.СпособыНачисленияАмортизацииОС - применяемый способ амортизации
//  ЗадерживатьАмортизацию   - Булево - Истина, если организация решила начинать и заканчивать амортизацию
//                             с месяца, следующего за месяцем признания в учете (списания с учета)
//  КонецЗадержкиАмортизации - Дата - период, с которого организация отказалась задерживать амортизацию
//
Процедура УстановитьСрокПолезногоИспользования(Расчет, СпособАмортизации, ЗадерживатьАмортизацию, КонецЗадержкиАмортизации) Экспорт
	
	Если Не (СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
		Или СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗадерживатьАмортизацию Или Расчет.НачалоОтсчетаРесурсМесяцев < КонецЗадержкиАмортизации Тогда
		Расчет.НачалоОтсчетаРесурсМесяцев = КонецМесяца(Расчет.НачалоОтсчетаРесурсМесяцев) + 1;
	КонецЕсли;
		
	Расчет.КонецСрокаПолезногоИспользования = ДобавитьМесяц(
		Расчет.НачалоОтсчетаРесурсМесяцев,
		Расчет.ОбщийРесурсМесяцев) - 1;
		
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Проверяет, может ли потребоваться блокировка в пользовательском интерфейсе регламентной операции начисления амортизации
// на время выполнения обработчиков обновления данных подсистемы.
// Проверяются общие соображения, связанные с регламентной операцией.
// Прикладная обработка (собственно проверка обрабатываемых данных) должна быть выполнена вызывающим кодом, после вызова этого метода.
//
// Параметры:
//  РегламентнаяОперация - Неопределено - Возвращаемый параметр. В случае, если блокировка может потребоваться,
//                         возвращается ДокументСсылка.Регламентная операция - проверяемая операция.
//  ПроверяемыйОбъект - Структура - см. документацию к БСП раздел "Блокировка необработанных данных в пользовательском интерфейсе"
//
Процедура НачатьПроверкуБлокировкиНеобработанныхДанныхРасчетАмортизации(РегламентнаяОперация, ПроверяемыйОбъект) Экспорт
	
	// Реализуется только в документе (не в форме обработки Закрытие месяца),
	// так как в БСП 3.1.5 блокировка формы обработки фактически не поддерживается - 00-00425479
	
	Если ПроверяемыйОбъект.Метаданные <> Метаданные.Документы.РегламентнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверяемыйОбъект.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПроверяемыйОбъект.Отбор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РегламентнаяОперация = ПроверяемыйОбъект.Отбор;
	
КонецПроцедуры

#КонецОбласти

#Область ПБУ6

// Обеспечивают использование алгоритма, совместимого с ПБУ 6.
// То есть, расчет выполняется по правилам ФСБУ 6, но используется устаревший алгоритм.
// В будущем устаревший алгоритм планируется удалить - вместе с этим кодом.

// С помощью этого кода сейчас реализуется логика расчета амортизации по компонентам.
// Другие алгоритмы ФСБУ 6 продублированы в коде, совместимом с ФСБУ 6, а учет по компонентам - нет.

// Логика решения следующая:
// - исходные данные помещаются во временные таблицы по правилам модуля
// - вызывается НачатьРасчетАмортизацииКомпонентовПБУ6
// - для каждого основного средства вызывается НовыйКоннекторОсновногоСредстваПБУ6,
//   которая предоставляет коллекцию для заполнения сведениями о конкретном основном средстве.
//   Алгоритм ПБУ 6 заполняет эту коллекцию своими данными.
// - вызывается РассчитатьАмортизациюКомпонентовПБУ6, которая по заполненным сведениям выполняет расчет
//   компонентов этого основного средства
// - результат расчета помещается в коллекции алгоритма ПБУ 6

Процедура НачатьРасчетАмортизацииКомпонентовПБУ6(КомпонентыАмортизации, МенеджерВременныхТаблиц, Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка) КАК Объект,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	0 КАК Затраты,
	|	0 КАК ТекущаяСтоимостьЗатрат
	|ПОМЕСТИТЬ ПотокЗатрат
	|ГДЕ
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Период";
	
	Запрос.Выполнить();
	
	КомпонентыАмортизацииОС.СоздатьКомпонентыАмортизации(МенеджерВременныхТаблиц, Период, Организация, Истина);
	
	ДанныеКомпонентов = Неопределено;
	
	КомпонентыАмортизацииОС.НачатьРазбиение(ДанныеКомпонентов, МенеджерВременныхТаблиц, Истина, '0001-01-01');
	
	Если ДанныеКомпонентов <> Неопределено Тогда
		КомпонентыАмортизации = НовыйКоннекторОбщийПБУ6(ДанныеКомпонентов, Период);
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ПотокЗатрат";
	Запрос.Выполнить();

КонецПроцедуры

Функция НовыйКоннекторОсновногоСредстваПБУ6(КоннекторОбщий, ОсновноеСредство, СпособАмортизации) Экспорт
	
	РасчетАмортизации = КоннекторОбщий.ШаблонАмортизация[СпособАмортизации];
	Если РасчетАмортизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Коннектор = Новый Структура;
	Коннектор.Вставить("Общий",             КоннекторОбщий);
	Коннектор.Вставить("Оценка",            Неопределено);
	Коннектор.Вставить("ДанныеКомпонентов", Неопределено);
	
	КоннекторОбщий.ШаблонОценкаСтоимости.Очистить();
	
	Для Каждого ОписаниеРасчетаАмортизации Из КоннекторОбщий.ШаблонАмортизация Цикл
		ОписаниеРасчетаАмортизации.Значение.Очистить();
	КонецЦикла;
	
	Коннектор.Оценка = КоннекторОбщий.ШаблонОценкаСтоимости.Добавить();
	Коннектор.Оценка.Объект            = ОсновноеСредство;
	Коннектор.Оценка.СпособАмортизации = СпособАмортизации;
	
	ЗаписьРасчет = РасчетАмортизации.Добавить();
	ЗаписьРасчет.Объект = ОсновноеСредство;
	ЗаписьРасчет.Начало = КоннекторОбщий.НачалоМесяца;
	ЗаписьРасчет.Конец  = КоннекторОбщий.КонецМесяца;
	
	Коннектор.Оценка.РасчетАмортизации.Добавить(ЗаписьРасчет);
	
	Возврат Коннектор;
	
КонецФункции

Функция РассчитатьАмортизациюКомпонентовПБУ6(Коннектор) Экспорт
	
	ЗаписьРасчет = Коннектор.Оценка.РасчетАмортизации[0];
	
	Коннектор.Оценка.ПодлежитАмортизации    = Истина;
	Коннектор.Оценка.АмортизируемаяВеличина = Коннектор.Оценка.БалансоваяСтоимость - Коннектор.Оценка.ЛиквидационнаяСтоимость;
	ЗаполнитьЗначенияСвойств(ЗаписьРасчет, Коннектор.Оценка, "ЗатратыВсего, БалансоваяСтоимость, АмортизируемаяВеличина");
	
	КомпонентыАмортизацииОС.РазбитьРасчет(Коннектор.Оценка, Коннектор.Общий.ДанныеКомпонентов);
	
	Если Коннектор.Оценка.РасчетАмортизации.Количество() <= 1 Тогда
		// Компонентов нет
		Возврат Неопределено;
	КонецЕсли;
	
	РассчитатьКоэффициентыАмортизации(Коннектор.Общий.ШаблонАмортизация);
	
	РасчетАмортизации = Коннектор.Общий.ШаблонАмортизация[Коннектор.Оценка.СпособАмортизации];
	Коннектор.Оценка.РасчетАмортизации.Удалить(0); // Далее нужны данные только о компонентах
	РасчетАмортизации.Удалить(0);
	
	РассчитатьСуммыАмортизации(Коннектор.Общий.ШаблонОценкаСтоимости);
	
	// Сохраняем итоги
	Для Каждого РасчетАмортизацииКомпонента Из РасчетАмортизации Цикл
		Итог = РасчетАмортизацииКомпонента.БалансоваяСтоимость - РасчетАмортизацииКомпонента.Амортизация;
		Коннектор.Общий.Итоги.Вставить(РасчетАмортизацииКомпонента.Объект, Итог);
	КонецЦикла;
	
	Возврат РасчетАмортизации;
	
КонецФункции

Процедура ЗаполнитьРасчетСтоимостиКомпонентовАмортизацииПБУ6(Результат, КоннекторОбщий) Экспорт
	
	Если КоннекторОбщий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентыАмортизацииОС.ИнициализироватьКонтейнерИтогов(Результат);
	
	Если Не Результат.Свойство("СтоимостьКомпонентовАмортизации") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИтогКомпонента Из КоннекторОбщий.Итоги Цикл
		Запись = Результат.СтоимостьКомпонентовАмортизации.Добавить();
		Запись.КомпонентАмортизации = ИтогКомпонента.Ключ;
		Запись.Стоимость            = ИтогКомпонента.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Коллекции

// Конструктор управляющей коллекции, обеспечивающей обработку данных ("процессинг").
// Она позволяет сократить параметры методов, а также задает своего рода "словарь" -
// описывает набор сущностей, с которыми работает алгоритм.
//
// Коллекция содержит
// - контекст выполняемых действий
// - промежуточные обрабатываемые данные,
//   полученные из информационной базы и хранимые в течение расчета в МенеджерВременныхТаблиц
// - полезный результат обработки: рассчитанную амортизацию и сведения о ходе расчета
// - служебную информацию, такую как данные, кешируемые на время расчета.
//
// Параметры:
//  ТипОбъектов  - Тип (СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы) - тип объектов, амортизацию которых нужно рассчитать
//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйПроцессорРасчетаАмортизации(ТипОбъектов)
	
	Процессор = Новый Структура;
	
	Процессор.Вставить("ТипОбъектов",         Тип("СправочникСсылка.ОсновныеСредства"));
	Процессор.Вставить("ВидСубконтоОбъектов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Если ЭтоНМА(ТипОбъектов) Тогда
		Процессор.ТипОбъектов = ТипОбъектов;
		Процессор.ВидСубконтоОбъектов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
	КонецЕсли;
	
	// Контекст
	Процессор.Вставить("Период",       '0001-01-01'); // Конец месяца расчета для расчета за полный месяц; Момент времени - за неполный
	Процессор.Вставить("НачалоМесяца", '0001-01-01');
	Процессор.Вставить("КонецПериода", '0001-01-01'); // Конец периода (дня), за который начисляется амортизация
	Процессор.Вставить("КонецМесяца",  '0001-01-01');
	Процессор.Вставить("Организация",  Справочники.Организации.ПустаяСсылка());
	
	// Общие настройки
	// В соответствии с п. 33 ФСБУ 6 (п. 38 ФСБУ 14) организация может решить начинать и заканчивать амортизацию
	// с месяца, следующего за месяцем признания в учете (списания с учета).
	// ПБУ 6 и ПБУ 14 предусматривали только этот метод, поэтому предполагается,
	// что организация до какого-то отчетного периода будет прибегать к методу из ПБУ 6 ("задерживать амортизацию"),
	// а потом может прекратить это делать.
	Процессор.Вставить("ЗадерживатьАмортизацию",   Ложь);
	Процессор.Вставить("КонецЗадержкиАмортизации", '0001-01-01');
	
	Процессор.Вставить("ПерерасчетЗаГод", Ложь);
	
	// В режиме задержки амортизации предварительный расчет выполняется на всю сумму за месяц;
	// поэтому его наличие исключает регламентный расчет.
	Процессор.Вставить("ДопускаетсяКорректировкаАмортизации", Истина);
	
	// Даные расчета
	Процессор.Вставить("ОценкаСтоимости", НовыйОценкаСтоимостиАмортизируемыхАктивов(Процессор.ТипОбъектов));
	Процессор.Вставить("Амортизация",     НовыйРасчетАмортизации());
	Процессор.Вставить("Итоги",           Новый Структура);
	РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов.ИнициализироватьКонтейнерИтогов(Процессор.Итоги);
	КомпонентыАмортизацииОС.ИнициализироватьКонтейнерИтогов(Процессор.Итоги);
	
	// Промежуточные данные
	Процессор.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	// Кеш
	Процессор.Вставить("ДлинаМесяца",           0);
	Процессор.Вставить("ПериодСведений",        '0001-01-01');
	Процессор.Вставить("ПериодСведенийГраница", Новый Граница('0001-01-01', ВидГраницы.Исключая));
	Процессор.Вставить("ПериодГраница",         Новый Граница('0001-01-01', ВидГраницы.Исключая));
	
	Возврат Процессор;
	
КонецФункции

Процедура ИнициализироватьПроцессорРасчетаАмортизации(Процессор, Период, Организация, Знач АлгоритмПериодаАмортизации = Неопределено, ПерерасчетЗаГод = Ложь)
	
	Процессор.Организация = Организация;
	
	Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
		
		// Здесь Период - это момент времени перед проводимым документом,
		// он с точностью до регистратора.
		Процессор.Период = Период;
		ВидГраницыПериод = ВидГраницы.Исключая;
		ПериодДата       = Период.Дата;
		
		// Пункт 33 ФСБУ 6 "Начисление амортизации объекта основных средств
		// прекращается с момента его списания с бухгалтерского учета".
		// Аналогично - в п. 38 ФСБУ 14.
		// Поскольку оперируем целыми днями, то в день выбытия амортизация должна быть завершена.
		// Соответственно период расчета заканчивается предыдущим днем.
		// Другими словами, КонецПериода - это момент перед проводимым документом
		// с точностью до дня.
		Процессор.КонецПериода = НачалоДня(Период.Дата) - 1;
		
	Иначе // Дата
		
		Процессор.Период = КонецМесяца(Период);
		ВидГраницыПериод = ВидГраницы.Включая;
		ПериодДата       = Период;
		
		Процессор.КонецПериода = Период;
		
	КонецЕсли;
	
	Процессор.НачалоМесяца = НачалоМесяца(ПериодДата);
	Процессор.КонецМесяца  = КонецМесяца(ПериодДата);
	Процессор.ДлинаМесяца  = РазностьДней(Процессор.КонецМесяца, Процессор.НачалоМесяца);
	
	Процессор.ПериодГраница = Новый Граница(Период, ВидГраницыПериод);
	
	Если АлгоритмПериодаАмортизации = Неопределено Тогда
		АлгоритмПериодаАмортизации = УчетнаяПолитика.АлгоритмПериодаАмортизации(
			ПериодДата,
			Процессор.Организация);
	КонецЕсли;
	
	Процессор.ЗадерживатьАмортизацию = (АлгоритмПериодаАмортизации <> Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания);
	Если Процессор.ЗадерживатьАмортизацию Тогда
		// Рассчитываем за весь месяц
		Процессор.КонецПериода = Процессор.КонецМесяца;
	Иначе
		КонецЗадержкиАмортизации = Перечисления.АлгоритмыПериодаАмортизации.КонецЗадержкиАмортизации(ПериодДата, Организация);
		Если КонецЗадержкиАмортизации <> Неопределено Тогда
			Процессор.КонецЗадержкиАмортизации = КонецЗадержкиАмортизации;
		КонецЕсли;
	КонецЕсли;
	
	Если Процессор.ЗадерживатьАмортизацию Тогда
		Процессор.ПериодСведений        = Процессор.НачалоМесяца - 1;
		// Границу устанавливаем так, чтобы она включала предшествующий межотчетный период.
		Процессор.ПериодСведенийГраница = Новый Граница(Процессор.НачалоМесяца, ВидГраницы.Исключая);
	Иначе
		Процессор.ПериодСведений        = ПериодДата;
		Процессор.ПериодСведенийГраница = Новый Граница(Период, ВидГраницыПериод);
	КонецЕсли;
	
	Процессор.ПерерасчетЗаГод = ПерерасчетЗаГод;
	
	Процессор.ДопускаетсяКорректировкаАмортизации = Не Процессор.ЗадерживатьАмортизацию Или ПерерасчетЗаГод;
	
КонецПроцедуры

Функция НовыйОценкаСтоимостиАмортизируемыхАктивов(ТипОбъектов)
	
	// Иерархическая коллекция.
	// На первом уровне - данные об объектах основных средств, НМА (строки таблицы значений).
	// На втором - расчет их амортизации (ссылки на строки таблиц значений расчета амортизации)
	// Детализация второго уровня может быть больше за счет частей стоимости актива, амортизируемых раздельно, таких как
	// - величина затрат в месяце, за который выполняется расчет
	//   (каждая такая часть может амортизироваться отдельно в месяце затрат, если расчет выполняется с учетом календарных дней)
	// - компонентов амортизации
	//   (каждая такая часть амортизируется отдельно до погашения стоимости компонента).
	// Тип записей коллекции второго уровня определяется способом амортизации.
	
	Оценка = Новый ТаблицаЗначений;
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	ТипСуммаНеотрицательная = БухгалтерскийУчетКлиентСервер.ТипСуммаНеотрицательная();
	ОписаниеТиповОбъектов = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОбъектов));
	
	Оценка.Колонки.Добавить("Объект",                        ОписаниеТиповОбъектов);
	Оценка.Колонки.Добавить("ЗатратыВсего",                  ТипСуммаНеотрицательная);
	Оценка.Колонки.Добавить("БалансоваяСтоимость",           ТипСуммаНеотрицательная);
	Оценка.Колонки.Добавить("ПодлежитАмортизации",           Новый ОписаниеТипов("Булево"));
	Оценка.Колонки.Добавить("АмортизацияПрекращена",         Новый ОписаниеТипов("Булево"));
	Оценка.Колонки.Добавить("НеКорректироватьАвтоматически", Новый ОписаниеТипов("Булево"));
	Оценка.Колонки.Добавить("ЛиквидационнаяСтоимость",       ТипСуммаНеотрицательная);
	
	Если ЭтоНМА(ТипОбъектов) Тогда
		ТипЛокальныйСпособАмортизации = Тип("ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА");
	Иначе
		ТипЛокальныйСпособАмортизации = Тип("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС");
	КонецЕсли;
	ТипыЛокальныйСпособАмортизации = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ТипЛокальныйСпособАмортизации));
	
	// "Амортизируемая величина - первоначальная стоимость актива или другая сумма, принимаемая за первоначальную стоимость,
	// за вычетом его ликвидационной стоимости" IAS 16 п. 6
	Оценка.Колонки.Добавить("АмортизируемаяВеличина",     ТипСуммаНеотрицательная);
	Оценка.Колонки.Добавить("Амортизация",                ТипСуммаНеотрицательная); // за период расчета, результат расчета
	Оценка.Колонки.Добавить("АмортизацияПредварительная", ТипСумма); // за период расчета, отраженная до расчета
	Оценка.Колонки.Добавить("СуммаПроводки",              ТипСумма); // приводит предварительную к рассчитанной
	Оценка.Колонки.Добавить("СпособАмортизации",          Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	Оценка.Колонки.Добавить("СпособАмортизацииЛокальный", ТипыЛокальныйСпособАмортизации);
	Оценка.Колонки.Добавить("РасчетАмортизации",          Новый ОписаниеТипов("Массив"));
	// Использование массива ссылок на РасчетАмортизации в этой таблице позволяет:
	// - сохранять порядок записей в расчете
	// - сократить количество поисков по таблице с расчетом
	// - применять разнородные правила расчета для разных активов
	
	Возврат Оценка;
	
КонецФункции

Функция НовыйРасчетАмортизации()
	
	Возврат Новый Соответствие;
	// * Ключ - способ амортизации (ПеречислениеСсылка.СпособыНачисленияАмортизацииОС)
	// * Значение - ТаблицаЗначений, потомок НовыйРасчетАмортизацииБазовый, определяется способом амортизации
	
КонецФункции

Функция НовыйРасчетАмортизацииБазовый(ТипОбъектов)
	
	Расчет = Новый ТаблицаЗначений;
	
	ТипСуммаНеотрицательная = БухгалтерскийУчетКлиентСервер.ТипСуммаНеотрицательная();
	
	ТипыКомпонентовАмортизации = Новый Массив;
	ТипыКомпонентовАмортизации.Добавить(ТипОбъектов);
	Если Не ЭтоНМА(ТипОбъектов) Тогда
		КомпонентыАмортизацииОС.ДобавитьТипыКомпонентовАмортизации(ТипыКомпонентовАмортизации);
	КонецЕсли;
	
	Расчет.Колонки.Добавить("Объект", Новый ОписаниеТипов(ТипыКомпонентовАмортизации));
	
	ТипГраницаПериода = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	Расчет.Колонки.Добавить("Начало",     ТипГраницаПериода);
	Расчет.Колонки.Добавить("Конец",      ТипГраницаПериода);
	
	Расчет.Колонки.Добавить("ЗатратыВсего",           ТипСуммаНеотрицательная);
	Расчет.Колонки.Добавить("БалансоваяСтоимость",    ТипСуммаНеотрицательная);
	Расчет.Колонки.Добавить("АмортизируемаяВеличина", ТипСуммаНеотрицательная);
	
	// Требования стандартов по расчету суммы амортизации выражаются в расчете коэффициента амортизации.
	// Коэффициент амортизации показывает уменьшение ресурса (будущих экономических выгод) амортизируемого актива.
	// Сумма амортизации определяется как произведение амортизируемой величины и коэффициента амортизации.
	Расчет.Колонки.Добавить("КоэффициентАмортизации", Новый ОписаниеТипов("Число"));
	Расчет.Колонки.Добавить("Амортизация",            ТипСуммаНеотрицательная);
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйРасчетАмортизацииЛинейный(ТипОбъектов)
	
	Расчет = НовыйРасчетАмортизацииБазовый(ТипОбъектов);
	
	ДобавитьКолонкиРасчетаСрокаПолезногоИспользования(Расчет);
	
	ТипДробноеКоличествоПериодов = ТипДробноеКоличествоПериодов();
	
	Расчет.Колонки.Добавить("СрокИспользованияПрошедший",  ТипДробноеКоличествоПериодов); // за период расчета
	Расчет.Колонки.Добавить("СрокИспользованияОставшийся", ТипДробноеКоличествоПериодов); // с начала периода расчета
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйРасчетАмортизацииПропорциональноОбъемуПродукции(ТипОбъектов)
	
	Расчет = НовыйРасчетАмортизацииБазовый(ТипОбъектов);
	
	// "Ресурсом" здесь называем количество продукции (объема работ в натуральном выражении),
	// которое организация ожидает получить от использования объекта основных средств (НМА).
	// Разные объекты ОС или НМА могут обладать ресурсами разного вида - штуки продукции, тонны переработанного сырья и т.п.,
	// но для конкретного объекта для расчета амортизации используется один конкретный вид ресурса.
	
	ТипИспользованиеРесурса = Метаданные.РегистрыНакопления.ВыработкаОС.Ресурсы.Количество.Тип;
	Расчет.Колонки.Добавить("РесурсОбщий",               ТипИспользованиеРесурса);
	Расчет.Колонки.Добавить("РесурсИспользованныйРанее", ТипИспользованиеРесурса); // до начала периода расчета
	Расчет.Колонки.Добавить("РесурсОставшийся",          ТипИспользованиеРесурса); // на начало периода расчета: Общий - ИспользованныйРанее
	Расчет.Колонки.Добавить("РесурсИспользованный",      ТипИспользованиеРесурса); // за период расчета
	
	КомпонентыАмортизацииОС.ПодготовитьИтогРесурса(Расчет);
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйРасчетАмортизацииПоСуммеЧиселЛетИспользования(ТипОбъектов)
	
	Расчет = НовыйРасчетАмортизацииБазовый(ТипОбъектов);
	
	ДобавитьКолонкиРасчетаСрокаПолезногоИспользования(Расчет);
	
	РесурсыРегистраСведений = Метаданные.РегистрыСведений.РасчетАмортизации.Ресурсы;
	
	Расчет.Колонки.Добавить("СрокИспользованияОставшийся",       РесурсыРегистраСведений.ОстатокСрокаПолезногоИспользованияБУ.Тип); // с начала периода расчета
	Расчет.Колонки.Добавить("ОстатокЧислаЛетСрокаИспользования", РесурсыРегистраСведений.ЧислоЛетОставшихсяДоКонцаСПИ.Тип);
	Расчет.Колонки.Добавить("СуммаЧиселЛетСрокаИспользования",   РесурсыРегистраСведений.СуммаЧиселЛетСПИ.Тип); // оставшегося срока
	
	Возврат Расчет;
	
КонецФункции

Функция ТипДробноеКоличествоПериодов()
	Возврат Метаданные.РегистрыСведений.РасчетАмортизации.Ресурсы.ОстатокСрокаПолезногоИспользованияБУ.Тип;
КонецФункции

#КонецОбласти

#Область ИсходныеДанные

Процедура ЗаполнитьПредопределенныеСчетаАктивов(Счета, ТипОбъектов)
	
	// Из перечня следует исключать счета, на которых учитывается стоимость,
	// признание которой прекращается - см. СчетаПрекращенияПризнания
	// Для этого можно использовать СчетаАмортизируемыхАктивов
		
	Если ЭтоНМА(ТипОбъектов) Тогда
		
		Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
		
	Иначе
	
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСчетаАмортизации(Счета, ТипОбъектов)
	
	// Обесценение также учитывается на счете амортизации (на отдельном субсчете)
	// см. ЗаполнитьПредопределенныеСчетаОбесценения
	
	Если ЭтоНМА(ТипОбъектов) Тогда
		
		Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
		
	Иначе
		
		Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСчетаОбесценения(Счета, ТипОбъектов)
	
	Если ЭтоНМА(ТипОбъектов) Тогда
		// TBD: обесценение НМА еще не реализовано
	Иначе
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбесценениеОС_01);
	КонецЕсли;
	
КонецПроцедуры

Функция СчетаПрекращенияПризнания(ТипОбъектов)
	
	Счета = Новый Массив;
	
	Если ЭтоНМА(ТипОбъектов) Тогда
		// Счета прекращения признания еще не используются
	Иначе
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	КонецЕсли;
	
	Возврат Счета;
	
КонецФункции

Функция СчетаАмортизируемыхАктивов(ПредопределенныеСчета, ТипОбъектов)
	
	ВсеСчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчета);
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеСчета, СчетаПрекращенияПризнания(ТипОбъектов));
	
КонецФункции

Процедура СоздатьБалансоваяСтоимость(Процессор, Отбор, КорректировкаНакопленнойАмортизации = Неопределено)
	
	Запрос = Новый Запрос();
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	
	Запрос.УстановитьПараметр("Отбор",                    Истина);
	Запрос.УстановитьПараметр("СчетаАктивов",             СчетаАктивов(Процессор.ТипОбъектов));
	Запрос.УстановитьПараметр("СчетаБалансовойСтоимости", СчетаБалансовойСтоимости(Процессор.ТипОбъектов));
	// Текст запроса может быть модифицирован ниже - см. &Отбор, ПрименитьВнешниеКорректировкиНакопленнойАмортизации, замену имени таблицы в выражении для Объект
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(БалансоваяСтоимость.Субконто1 КАК Справочник.ОсновныеСредства), ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК Объект,
	|	СУММА(ВЫБОР
	|			КОГДА БалансоваяСтоимость.Счет В (&СчетаАктивов)
	|				ТОГДА БалансоваяСтоимость.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗатратыВсего,
	|	СУММА(БалансоваяСтоимость.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ БалансоваяСтоимость
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ПериодСведенийГраница,
	|			Счет В (&СчетаБалансовойСтоимости),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И &Отбор) КАК БалансоваяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВЫРАЗИТЬ(БалансоваяСтоимость.Субконто1 КАК Справочник.ОсновныеСредства), ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	СУММА(БалансоваяСтоимость.СуммаОстаток) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	
	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		// Модификацию выполняем для НМА, так как их статистически меньше
		ОператорЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(Запрос.Текст, "БалансоваяСтоимость");
		ИмяПоля = "Объект";
		Выражение = СхемыЗапросов.ВыражениеПоля(ОператорЗапроса, ИмяПоля);
		
		ИмяНеправильнойТаблицы = "Справочник.ОсновныеСредства";
		ИмяПравильнойТаблицы   = "Справочник.НематериальныеАктивы";
		
		Выражение = СтрЗаменить(Выражение, ИмяНеправильнойТаблицы, ИмяПравильнойТаблицы);
		СхемыЗапросов.УстановитьВыражение(ОператорЗапроса, ИмяПоля, Выражение);
		Запрос.Текст = ОператорЗапроса.Схема.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		
		// Модифицируем без применения схемы запроса для оптимизации -
		// модификация требуется при вызове из первичных документов,
		// а текст запроса несложный.
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "Субконто1 В (&Отбор)");
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;
	
	ПрименитьВнешниеКорректировкиНакопленнойАмортизации(Запрос, КорректировкаНакопленнойАмортизации);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПрименитьВнешниеКорректировкиНакопленнойАмортизации(Запрос, КорректировкаНакопленнойАмортизации)
	
	Если Не ЗначениеЗаполнено(КорректировкаНакопленнойАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Корректировка", КорректировкаНакопленнойАмортизации);
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Корректировка.Объект КАК Объект,
	|	Корректировка.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Корректировка
	|ИЗ
	|	&Корректировка КАК Корректировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БалансоваяСтоимость.Объект КАК Объект,
	|	СУММА(БалансоваяСтоимость.ЗатратыВсего) КАК ЗатратыВсего,
	|	СУММА(БалансоваяСтоимость.Сумма) КАК Сумма
	|ПОМЕСТИТЬ БалансоваяСтоимость
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Объект КАК Объект,
	|		ДанныеРегистра.ЗатратыВсего КАК ЗатратыВсего,
	|		ДанныеРегистра.Сумма КАК Сумма
	|	ИЗ
	|		&ВложенныйЗапрос КАК ДанныеРегистра
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Корректировка.Объект,
	|		0,
	|		Корректировка.Сумма
	|	ИЗ
	|		ВТ_Корректировка КАК Корректировка) КАК БалансоваяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансоваяСтоимость.Объект
	|
	|ИМЕЮЩИЕ
	|	СУММА(БалансоваяСтоимость.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Корректировка";
	
	// Текст вложенного запроса создадим на основе запроса без корректировки.
	РедакторИсходныйЗапрос = СхемыЗапросов.НайтиЗапросСозданияТаблицы(Запрос.Текст, "БалансоваяСтоимость");
	РедакторИсходныйЗапрос.Запрос.ТаблицаДляПомещения = "";
	Для Каждого Оператор Из РедакторИсходныйЗапрос.Запрос.Операторы Цикл
		// Отборы убираем, так как на момент перерасчета балансовая стоимость могла исчерпаться.
		Оператор.Отбор.Очистить();
	КонецЦикла;
	ТекстБалансоваяСтоимость = РедакторИсходныйЗапрос.Запрос.ПолучитьТекстЗапроса();
	
	// Установим текст вложенного запроса в шаблон.
	// Не используем схему запроса, так как при замене вложенного запроса она не обеспечивает
	// надежное сопоставление полей по именам.
	ТекстВложенногоЗапроса = СтрШаблон("(%1)", ТекстБалансоваяСтоимость);
	Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "&ВложенныйЗапрос", ТекстВложенногоЗапроса);
	
КонецПроцедуры

Процедура СоздатьАктивы(Процессор)
	
	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	БалансоваяСтоимость.Объект КАК Объект,
		|	НематериальныеАктивы.Код КАК Порядок
		|ПОМЕСТИТЬ Активы
		|ИЗ
		|	БалансоваяСтоимость КАК БалансоваяСтоимость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|		ПО БалансоваяСтоимость.Объект = НематериальныеАктивы.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	БалансоваяСтоимость.Объект КАК Объект,
		|	ОсновныеСредства.Код КАК Порядок
		|ПОМЕСТИТЬ Активы
		|ИЗ
		|	БалансоваяСтоимость КАК БалансоваяСтоимость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ПО БалансоваяСтоимость.Объект = ОсновныеСредства.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	КонецЕсли;
	
	ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса);
	
КонецПроцедуры

Процедура СоздатьНачалоОтсчетаСрока(Процессор)
	
	// В программе принято, что срок использования задается двумя значениями:
	// - точкой отсчета (датой) - она называется "дата ввода в эксплуатацию"
	// - целым числом месяцев - ожидаемым ресурсом объекта
	
	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	События.НематериальныйАктив КАК Объект,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(События.Период, ДЕНЬ)) КАК Дата
		|ПОМЕСТИТЬ НачалоОтсчетаСрока
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК События
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
		|		ПО События.НематериальныйАктив = Активы.Объект
		|ГДЕ
		|	События.Период <= &ПериодСведений
		|	И События.Организация = &Организация
		|	И События.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|
		|СГРУППИРОВАТЬ ПО
		|	События.НематериальныйАктив
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	События.ОсновноеСредство КАК Объект,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(События.ДатаСостояния, ДЕНЬ)) КАК Дата
		|ПОМЕСТИТЬ НачалоОтсчетаСрока
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК События
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
		|		ПО События.ОсновноеСредство = Активы.Объект
		|ГДЕ
		|	События.ДатаСостояния <= &ПериодСведений
		|	И События.Организация = &Организация
		|	И События.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|СГРУППИРОВАТЬ ПО
		|	События.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	КонецЕсли;
	
	ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса);
	
КонецПроцедуры

Процедура СоздатьАктуальныеСведенияАктивов(Процессор)
	
	// Собираются данные обо всех активах, имеющих балансовую стоимость, включая те, по которым амортизацию начислять не нужно.
	
	// Пояснения по отдельным формируемым временным таблицам:
	// - АмортизацияЗапрещена
	//        ФСБУ 6 и ФСБУ 14 запрещают амортизацию некоторых активов. Пример: земельные участки.
	// - АмортизацияПрекращена
	//        После выбытия объекта его амортизация прекращается, балансовая стоимость должна быть списана.
	
	ЛокальныеСпособыАмортизации = Неопределено;
	
	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		
		ЛокальныеСпособыАмортизации = ЛокальныеСпособыАмортизацииНМА();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Настройка.НематериальныйАктив КАК Объект
		|ПОМЕСТИТЬ АмортизацияЗапрещена
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлементыАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
		|				&ПериодСведенийГраница,
		|				Организация = &Организация
		|					И НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							Активы.Объект
		|						ИЗ
		|							Активы КАК Активы)) КАК ЭлементыАмортизации
		|		ПО Настройка.НематериальныйАктив = ЭлементыАмортизации.НематериальныйАктив
		|ГДЕ
		|	НЕ ВЫБОР
		|				КОГДА ЭлементыАмортизации.Период >= Настройка.Период
		|					ТОГДА ЭлементыАмортизации.НачислятьАмортизацию
		|				ИНАЧЕ Настройка.НачислятьАмортизацию
		|			КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройка.НематериальныйАктив КАК Объект
		|ПОМЕСТИТЬ АмортизацияПрекращена
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|ГДЕ
		|	Настройка.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройка.НематериальныйАктив КАК Объект,
		|	ВЫБОР
		|		КОГДА ЭлементыАмортизации.Период >= Настройка.Период
		|			ТОГДА ЭлементыАмортизации.СпособНачисленияАмортизации
		|		ИНАЧЕ Настройка.СпособНачисленияАмортизации
		|	КОНЕЦ КАК СпособАмортизации,
		|	ВЫБОР
		|		КОГДА ЭлементыАмортизации.Период >= Настройка.Период
		|			ТОГДА ЭлементыАмортизации.СрокПолезногоИспользования
		|		ИНАЧЕ Настройка.СрокПолезногоИспользования
		|	КОНЕЦ КАК ОбщийРесурсМесяцев,
		|	ВЫБОР
		|		КОГДА ЭлементыАмортизации.Период >= Настройка.Период
		|			ТОГДА ЭлементыАмортизации.ОбъемПродукцииРабот
		|		ИНАЧЕ Настройка.ОбъемПродукцииРаботДляВычисленияАмортизации
		|	КОНЕЦ КАК ОбщийРесурс,
		|	ВЫБОР
		|		КОГДА ЭлементыАмортизации.Период >= Настройка.Период
		|			ТОГДА ЭлементыАмортизации.ЛиквидационнаяСтоимость
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЛиквидационнаяСтоимость
		|ПОМЕСТИТЬ ВТ_ЭлементыАмортизации
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлементыАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
		|				&ПериодСведенийГраница,
		|				Организация = &Организация
		|					И НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							Активы.Объект
		|						ИЗ
		|							Активы КАК Активы)) КАК ЭлементыАмортизации
		|		ПО Настройка.НематериальныйАктив = ЭлементыАмортизации.НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Способы.Общий КАК Общий,
		|	Способы.Локальный КАК Локальный
		|ПОМЕСТИТЬ ВТ_СпособыАмортизацииНМА
		|ИЗ
		|	&ЛокальныеСпособыАмортизации КАК Способы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Локальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройка.Объект КАК Объект,
		|	ЕСТЬNULL(СпособыАмортизацииНМА.Общий, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособАмортизации,
		|	Настройка.СпособАмортизации КАК СпособАмортизацииЛокальный,
		|	Настройка.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	Настройка.ОбщийРесурсМесяцев КАК ОбщийРесурсМесяцев,
		|	Настройка.ОбщийРесурс КАК ОбщийРесурс
		|ПОМЕСТИТЬ ЭлементыАмортизации
		|ИЗ
		|	ВТ_ЭлементыАмортизации КАК Настройка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпособыАмортизацииНМА КАК СпособыАмортизацииНМА
		|		ПО Настройка.СпособАмортизации = СпособыАмортизацииНМА.Локальный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЭлементыАмортизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СпособыАмортизацииНМА";
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Настройка.ОсновноеСредство КАК Объект
		|ПОМЕСТИТЬ АмортизацияЗапрещена
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|ГДЕ
		|	НЕ Настройка.НачислятьАмортизацию
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройка.ОсновноеСредство КАК Объект
		|ПОМЕСТИТЬ АмортизацияПрекращена
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|ГДЕ
		|	Настройка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройка.ОсновноеСредство КАК Объект,
		|	Настройка.СпособНачисленияАмортизации КАК СпособАмортизации,
		|	Настройка.СпособНачисленияАмортизации КАК СпособАмортизацииЛокальный,
		|	Настройка.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	Настройка.СрокПолезногоИспользования КАК ОбщийРесурсМесяцев,
		|	Настройка.ОбъемПродукцииРабот КАК ОбщийРесурс
		|ПОМЕСТИТЬ ЭлементыАмортизации
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|			&ПериодСведенийГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Активы.Объект
		|					ИЗ
		|						Активы КАК Активы)) КАК Настройка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	Запрос.УстановитьПараметр("ЛокальныеСпособыАмортизации", ЛокальныеСпособыАмортизации);
	
	Если Процессор.ПерерасчетЗаГод Тогда
		Запрос.УстановитьПараметр(
			"ПериодСведенийГраница",
			Новый Граница(КонецГода(Процессор.КонецМесяца), ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьАмортизацияПредварительная(Процессор)
	
	СчетаАмортизации = СчетаАмортизации(Процессор.ТипОбъектов);
	
	// Отраженная в периоде амортизация может относиться к начисленной ранее,
	// но перенесенной с других объектов учета или счетов
	СчетаПеренос = Новый Массив;
	СчетаПеренос.Добавить(ПланыСчетов.Хозрасчетный.Вспомогательный);
	СчетаПеренос.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	
	СчетаАмортизацииПеренос = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаПеренос);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаАмортизацииПеренос, СчетаАмортизации);
	
	Запрос = Новый Запрос();
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	
	Запрос.УстановитьПараметр("СчетаАмортизации",        СчетаАмортизации);
	Запрос.УстановитьПараметр("СчетаАмортизацииПеренос", СчетаАмортизацииПеренос);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Амортизация.Объект КАК Объект,
	|	СУММА(Амортизация.Сумма) КАК Амортизация
	|ПОМЕСТИТЬ АмортизацияПредварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВсяАмортизация.Субконто1 КАК Объект,
	|		ВсяАмортизация.СуммаОборотКт КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецПериодаГраница,
	|				,
	|				Счет В (&СчетаАмортизации),
	|				&ВидСубконто,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							Активы.Объект
	|						ИЗ
	|							Активы),
	|				,
	|				) КАК ВсяАмортизация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленоРанее.Субконто1,
	|		-НачисленоРанее.СуммаОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецПериодаГраница,
	|				,
	|				Счет В (&СчетаАмортизации),
	|				&ВидСубконто,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							Активы.Объект
	|						ИЗ
	|							Активы),
	|				КорСчет В (&СчетаАмортизацииПеренос),
	|				) КАК НачисленоРанее) КАК Амортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	Амортизация.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьНеКорректироватьАвтоматически(Процессор)
	
	Запрос = Новый Запрос();
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаАмортизации(Процессор.ТипОбъектов));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Амортизация.СубконтоКт1 КАК Объект
	|ПОМЕСТИТЬ НеКорректироватьАвтоматически
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			НеКорректироватьСтоимостьАвтоматически
	|				И Организация = &Организация
	|				И СчетКт В (&СчетаАмортизации)
	|				И ВидСубконтоКт1 = &ВидСубконто
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ
	|						Активы.Объект
	|					ИЗ
	|						Активы)
	|				И Активность,
	|			,
	|			) КАК Амортизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьИспользованиеРесурса(Процессор)

	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИспользованиеРесурса.НематериальныйАктив КАК Объект,
		|	СУММА(ВЫБОР
		|			КОГДА ИспользованиеРесурса.Период >= &НачалоМесяца
		|				ТОГДА ИспользованиеРесурса.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ИспользованоЗаПериод,
		|	СУММА(ИспользованиеРесурса.КоличествоОборот) КАК ИспользованоВсего
		|ПОМЕСТИТЬ ИспользованиеРесурса
		|ИЗ
		|	РегистрНакопления.ВыработкаНМА.Обороты(
		|			,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			Организация = &Организация
		|				И НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						Отбор.Объект
		|					ИЗ
		|						ЭлементыАмортизации КАК Отбор
		|					ГДЕ
		|						Отбор.СпособАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции))) КАК ИспользованиеРесурса
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользованиеРесурса.НематериальныйАктив
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
		
	Иначе
		
		// Игнорируется измерение ПараметрВыработки регистра, как признак неоптимальной структуры хранения данных о ресурсах.
		// С одной стороны, предусмотрено, что объем ресурса в разные периоды времени
		// может быть не сопоставимым, измеряться в разных единицах.
		// С другой стороны, учет основан на хранении данных о несбывшихся прогнозах.
		// В результате не всегда однозначно понятно, на данные ресурса какого вида нужно ориентироваться.
		//
		// С учетом того, что при установлении элементов амортизации ни вид ни остаток ресурса не сохраняется,
		// при изменении вида ресурса, используемого для расчета амортизации, следует выполнять правила:
		// 1. Задавать остаток ресурса, а не общее значение. При этом общее значение будет безразмерным,
		//    определено "механически" суммированием значений в разных единицах измерения.
		// 2. Начиная с месяца перехода на новый вид ресурса регистрировать только данные об использовании ресурса нового вида
		//    (прекратить регистрировать использование ресурса старого вида).
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИспользованиеРесурса.ОсновноеСредство КАК Объект,
		|	СУММА(ВЫБОР
		|			КОГДА ИспользованиеРесурса.Период >= &НачалоМесяца
		|				ТОГДА ИспользованиеРесурса.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ИспользованоЗаПериод,
		|	СУММА(ИспользованиеРесурса.КоличествоОборот) КАК ИспользованоВсего
		|ПОМЕСТИТЬ ИспользованиеРесурса
		|ИЗ
		|	РегистрНакопления.ВыработкаОС.Обороты(
		|			,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Отбор.Объект
		|					ИЗ
		|						ЭлементыАмортизации КАК Отбор
		|					ГДЕ
		|						Отбор.СпособАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции))) КАК ИспользованиеРесурса
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользованиеРесурса.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	КонецЕсли;
	
	ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса);
	
КонецПроцедуры

Процедура СоздатьПотокЗатрат(Процессор)
	
	// Используется терминология, основанная на п. 5 и 9 ФСБУ 26.
	// В соответствии с ней организация несет затраты на приобретение, создание,
	// улучшение и (или) восстановление объектов основных средств (нематериальных активов).
	// 
	// Эти затраты капитализируются на счета основных средств (НМА) и затем погашаются
	// (включаются в расходы или стоимость иных активов) посредством амортизации.
	// 
	// Понесение затрат в разрезе моментов времени называем потоком затрат.
	// Поток затрат нужен, чтобы начать амортизацию с момента их капитализации
	// (приобретения, создания, улучшения, восстановления основных средств или нематериальных активов).
	
	Запрос = Новый Запрос;
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	Если Процессор.ЗадерживатьАмортизацию Тогда
		// Не используется, так как затраты в периоде расчета не учитываются
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка) КАК Объект,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	0 КАК Затраты,
		|	0 КАК ТекущаяСтоимостьЗатрат
		|ПОМЕСТИТЬ ПотокЗатрат
		|ГДЕ
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Период";
		// Пустая таблица индексируется, чтобы структура таблицы была идентичной,
		// вне зависимости, пустая она или нет.
	Иначе
		Запрос.УстановитьПараметр("СчетаАктивов", СчетаАктивов(Процессор.ТипОбъектов));
		// При прекращении признания балансовой стоимости части объекта,
		// величина понесенных затрат корректируется на начисленную амортизацию (и начисленное обесценение).
		// Другими словами, учитывается величина затрат, приведенная к текущему состоянию основного средства (НМА).
		// Поэтому учитываем обороты как по счетам активов, так и специфические обороты по счетам накопленной амортизации.
		Запрос.УстановитьПараметр("СчетаАмортизации", СчетаАмортизации(Процессор.ТипОбъектов));
		
		Запрос.УстановитьПараметр("СчетаПрекращенияПризнания", СчетаПрекращенияПризнания(Процессор.ТипОбъектов));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПотокЗатрат.Объект КАК Объект,
		|	ПотокЗатрат.Период КАК Период,
		|	СУММА(ПотокЗатрат.Затраты) КАК Затраты,
		|	СУММА(ПотокЗатрат.ТекущаяСтоимостьЗатрат) КАК ТекущаяСтоимостьЗатрат
		|ПОМЕСТИТЬ ПотокЗатрат
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Субконто1 КАК Объект,
		|		НАЧАЛОПЕРИОДА(Затраты.Период, ДЕНЬ) КАК Период,
		|		Затраты.СуммаОборот КАК Затраты,
		|		Затраты.СуммаОборот КАК ТекущаяСтоимостьЗатрат
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачалоМесяца,
		|				&КонецПериодаГраница,
		|				День,
		|				Счет В (&СчетаАктивов),
		|				&ВидСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							Активы.Объект
		|						ИЗ
		|							Активы),
		|				,
		|				) КАК Затраты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Амортизация.Субконто1,
		|		НАЧАЛОПЕРИОДА(Амортизация.Период, ДЕНЬ),
		|		0,
		|		Амортизация.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачалоМесяца,
		|				&КонецПериодаГраница,
		|				День,
		|				Счет В (&СчетаАмортизации),
		|				&ВидСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							Активы.Объект
		|						ИЗ
		|							Активы),
		|				КорСчет В (&СчетаПрекращенияПризнания),
		|				) КАК Амортизация) КАК ПотокЗатрат
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотокЗатрат.Объект,
		|	ПотокЗатрат.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Период";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьИспользованиеРесурсаПотокЗатрат(Процессор)
	
	Если ЭтоНМА(Процессор.ТипОбъектов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПотокЗатрат.Объект КАК Объект,
		|	ПотокЗатрат.Период КАК Период,
		|	СУММА(ИспользованиеРесурса.Количество) КАК Использовано
		|ПОМЕСТИТЬ ИспользованиеРесурсаПотокЗатрат
		|ИЗ
		|	РегистрНакопления.ВыработкаНМА КАК ИспользованиеРесурса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользованиеРесурса КАК ИспользованиеРесурсаСводно
		|		ПО ИспользованиеРесурса.НематериальныйАктив = ИспользованиеРесурсаСводно.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотокЗатрат КАК ПотокЗатрат
		|		ПО ИспользованиеРесурса.НематериальныйАктив = ПотокЗатрат.Объект
		|			И ИспользованиеРесурса.Период >= ПотокЗатрат.Период
		|ГДЕ
		|	ИспользованиеРесурса.Активность
		|	И ИспользованиеРесурса.Организация = &Организация
		|	И ИспользованиеРесурса.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотокЗатрат.Объект,
		|	ПотокЗатрат.Период";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПотокЗатрат.Объект КАК Объект,
		|	ПотокЗатрат.Период КАК Период,
		|	СУММА(ИспользованиеРесурса.Количество) КАК Использовано
		|ПОМЕСТИТЬ ИспользованиеРесурсаПотокЗатрат
		|ИЗ
		|	РегистрНакопления.ВыработкаОС КАК ИспользованиеРесурса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользованиеРесурса КАК ИспользованиеРесурсаСводно
		|		ПО ИспользованиеРесурса.ОсновноеСредство = ИспользованиеРесурсаСводно.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотокЗатрат КАК ПотокЗатрат
		|		ПО ИспользованиеРесурса.ОсновноеСредство = ПотокЗатрат.Объект
		|			И ИспользованиеРесурса.Период >= ПотокЗатрат.Период
		|ГДЕ
		|	ИспользованиеРесурса.Активность
		|	И ИспользованиеРесурса.Организация = &Организация
		|	И ИспользованиеРесурса.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотокЗатрат.Объект,
		|	ПотокЗатрат.Период";
	КонецЕсли;
	
	ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область Оценка

Процедура ЗаполнитьОценкаСтоимости(Процессор)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Активы.Объект КАК Объект,
	|	Активы.Порядок КАК Порядок,
	|	БалансоваяСтоимость.Сумма КАК БалансоваяСтоимость,
	|	БалансоваяСтоимость.ЗатратыВсего КАК ЗатратыВсего,
	|	ВЫБОР
	|		КОГДА АмортизацияЗапрещена.Объект ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодлежитАмортизации,
	|	ВЫБОР
	|		КОГДА АмортизацияПрекращена.Объект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК АмортизацияПрекращена,
	|	ЭлементыАмортизации.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ЭлементыАмортизации.СпособАмортизации КАК СпособАмортизации,
	|	ЭлементыАмортизации.СпособАмортизацииЛокальный КАК СпособАмортизацииЛокальный,
	|	ЭлементыАмортизации.ОбщийРесурсМесяцев КАК ОбщийРесурсМесяцев,
	|	НачалоОтсчета.Дата КАК НачалоОтсчетаРесурсМесяцев,
	|	ЭлементыАмортизации.ОбщийРесурс КАК РесурсОбщий,
	|	ИспользованиеРесурса.ИспользованоЗаПериод КАК РесурсИспользованный,
	|	ИспользованиеРесурса.ИспользованоВсего - ИспользованиеРесурса.ИспользованоЗаПериод КАК РесурсИспользованныйРанее,
	|	ЕСТЬNULL(АмортизацияПредварительная.Амортизация, 0) КАК АмортизацияПредварительная,
	|	НеКорректироватьАвтоматически.Объект ЕСТЬ НЕ NULL  КАК НеКорректироватьАвтоматически,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодЗатрат,
	|	0 КАК ЗатратыЗаПериод,
	|	0 КАК ТекущаяСтоимостьЗатратЗаПериод,
	|	0 КАК РесурсИспользованныйЗаПериод
	|ИЗ
	|	Активы КАК Активы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БалансоваяСтоимость КАК БалансоваяСтоимость
	|		ПО Активы.Объект = БалансоваяСтоимость.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияЗапрещена КАК АмортизацияЗапрещена
	|		ПО Активы.Объект = АмортизацияЗапрещена.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияПрекращена КАК АмортизацияПрекращена
	|		ПО Активы.Объект = АмортизацияПрекращена.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачалоОтсчетаСрока КАК НачалоОтсчета
	|		ПО Активы.Объект = НачалоОтсчета.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО Активы.Объект = ЭлементыАмортизации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияПредварительная КАК АмортизацияПредварительная
	|		ПО Активы.Объект = АмортизацияПредварительная.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеКорректироватьАвтоматически КАК НеКорректироватьАвтоматически
	|		ПО Активы.Объект = НеКорректироватьАвтоматически.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеРесурса КАК ИспользованиеРесурса
	|		ПО Активы.Объект = ИспользованиеРесурса.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Активы.Объект,
	|	Активы.Порядок,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ПотокЗатрат.Период,
	|	ПотокЗатрат.Затраты,
	|	ПотокЗатрат.ТекущаяСтоимостьЗатрат,
	|	ЕСТЬNULL(ИспользованиеРесурса.Использовано, 0)
	|ИЗ
	|	ПотокЗатрат КАК ПотокЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
	|		ПО ПотокЗатрат.Объект = Активы.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеРесурсаПотокЗатрат КАК ИспользованиеРесурса
	|		ПО ПотокЗатрат.Объект = ИспользованиеРесурса.Объект
	|			И ПотокЗатрат.Период = ИспользованиеРесурса.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Объект,
	|	ПериодЗатрат
	|ИТОГИ
	|	СУММА(БалансоваяСтоимость),
	|	СУММА(ЗатратыВсего),
	|	МАКСИМУМ(ПодлежитАмортизации),
	|	МАКСИМУМ(АмортизацияПрекращена),
	|	СУММА(ЛиквидационнаяСтоимость),
	|	МАКСИМУМ(СпособАмортизации),
	|	МАКСИМУМ(СпособАмортизацииЛокальный),
	|	СУММА(ОбщийРесурсМесяцев),
	|	МАКСИМУМ(НачалоОтсчетаРесурсМесяцев),
	|	СУММА(РесурсОбщий),
	|	СУММА(РесурсИспользованный),
	|	СУММА(РесурсИспользованныйРанее),
	|	СУММА(АмортизацияПредварительная),
	|	МАКСИМУМ(НеКорректироватьАвтоматически),
	|	МАКСИМУМ(ПериодЗатрат),
	|	СУММА(ЗатратыЗаПериод),
	|	СУММА(ТекущаяСтоимостьЗатратЗаПериод),
	|	СУММА(РесурсИспользованныйЗаПериод)
	|ПО
	|	Объект";
	
	КомпонентыАмортизации = Неопределено;
	Если Не ЭтоНМА(Процессор.ТипОбъектов) Тогда
		КомпонентыАмортизацииОС.НачатьРазбиение(
			КомпонентыАмортизации,
			Процессор.МенеджерВременныхТаблиц,
			Процессор.ЗадерживатьАмортизацию,
			Процессор.КонецЗадержкиАмортизации);
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса);
	ВыборкаЕдиницаУчета = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЕдиницаУчета.Следующий() Цикл
		
		Если Не Процессор.ДопускаетсяКорректировкаАмортизации
			И ВыборкаЕдиницаУчета.АмортизацияПредварительная > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Уровень 1: Оценка
		
		ЗаписьОценка = Процессор.ОценкаСтоимости.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЗаписьОценка, ВыборкаЕдиницаУчета);
		
		Если Не Процессор.ЗадерживатьАмортизацию Тогда
			// В этом режиме балансовая стоимость определена с учетом операций за период начисления,
			// в том числе - с учетом сумм предварительной амортизации за период.
			// Исключим ее влияние.
			// При задержке амортизации балансовая стоимость определена на начало периода
			// и суммы предварительной амортизации на нее влиять не могут.
			ЗаписьОценка.БалансоваяСтоимость = ЗаписьОценка.БалансоваяСтоимость + ЗаписьОценка.АмортизацияПредварительная;
		КонецЕсли;
		
		Если Не ЗаписьОценка.ПодлежитАмортизации Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьОценка.АмортизируемаяВеличина = ЗаписьОценка.БалансоваяСтоимость - ЗаписьОценка.ЛиквидационнаяСтоимость;
		
		ЗаписьОценка.СпособАмортизации = ПрименяемыйСпособАмортизации(ВыборкаЕдиницаУчета.СпособАмортизации);
		
		// Уровень 2: Расчет амортизации
		
		РасчетАмортизации = РасчетАмортизации(Процессор.Амортизация, ЗаписьОценка.СпособАмортизации, Процессор.ТипОбъектов);
		
		ЗаписьНачалоПериода = РасчетАмортизации.Добавить();
		ЗаписьОценка.РасчетАмортизации.Добавить(ЗаписьНачалоПериода);
		
		ЗаполнитьЗначенияСвойств(ЗаписьНачалоПериода, ВыборкаЕдиницаУчета);
		
		ЗаписьНачалоПериода.Начало = Процессор.НачалоМесяца;
		// Могут быть уточнены ниже, если есть затраты в периоде
		ЗаписьНачалоПериода.Конец               = Процессор.КонецПериода;
		ЗаписьНачалоПериода.БалансоваяСтоимость = ЗаписьОценка.БалансоваяСтоимость;
		
		УстановитьСрокПолезногоИспользования(
			ЗаписьНачалоПериода,
			ЗаписьОценка.СпособАмортизации,
			Процессор.ЗадерживатьАмортизацию,
			Процессор.КонецЗадержкиАмортизации);
			
		Если ЗаписьОценка.АмортизацияПрекращена Или ЗаписьОценка.АмортизируемаяВеличина <= 0 Тогда
			// Записи в расчете амортизации в этом случае позволяют показать справку-расчет, более привычную для пользователя
			Продолжить;
		КонецЕсли;
		
		// Уровень 3: Поток затрат в периоде
		Если ЗначениеЗаполнено(ВыборкаЕдиницаУчета.ПериодЗатрат) Тогда
			
			ЗатратыВсего        = ЗаписьОценка.ЗатратыВсего        - ВыборкаЕдиницаУчета.ЗатратыЗаПериод;
			БалансоваяСтоимость = ЗаписьОценка.БалансоваяСтоимость - ВыборкаЕдиницаУчета.ТекущаяСтоимостьЗатратЗаПериод;
			
			// Корректирующие величины - это амортизация и обесценение.
			// Они могут содержаться в потоке затрат, например, при передаче с баланса на баланс.
			КорректирующаяВеличина = Макс(0, - БалансоваяСтоимость);
			ЗаписьНачалоПериода.ЗатратыВсего        = ЗатратыВсего        + КорректирующаяВеличина;
			ЗаписьНачалоПериода.БалансоваяСтоимость = БалансоваяСтоимость + КорректирующаяВеличина;
			
			ВыборкаПотокЗатрат = ВыборкаЕдиницаУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ПредыдущаяЗапись = ЗаписьНачалоПериода;
			Пока ВыборкаПотокЗатрат.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаПотокЗатрат.ПериодЗатрат) Тогда
					// эта детальная запись не относится к потоку затрат
					Продолжить;
				КонецЕсли;
				
				Затраты = ВыборкаПотокЗатрат.ТекущаяСтоимостьЗатратЗаПериод;
				Если КорректирующаяВеличина > 0 И Затраты > 0 Тогда
					ПереносЗатрат = Мин(КорректирующаяВеличина, Затраты);
					КорректирующаяВеличина = КорректирующаяВеличина - ПереносЗатрат;
					Затраты = Затраты - ПереносЗатрат;
				КонецЕсли;
				
				Если ВыборкаПотокЗатрат.ПериодЗатрат = ЗаписьНачалоПериода.Начало Тогда
					ЗаписьНачалоПериода.ЗатратыВсего        = ЗаписьНачалоПериода.ЗатратыВсего        + Затраты;
					ЗаписьНачалоПериода.БалансоваяСтоимость = ЗаписьНачалоПериода.БалансоваяСтоимость + Затраты;
					Продолжить;
				КонецЕсли;
				
				ЗаписьЗатратыПериода = РасчетАмортизации.Добавить();
				ЗаписьОценка.РасчетАмортизации.Добавить(ЗаписьЗатратыПериода);
				
				ЗаполнитьЗначенияСвойств(ЗаписьЗатратыПериода, ПредыдущаяЗапись);
				
				ЗаписьЗатратыПериода.ЗатратыВсего        = ЗаписьЗатратыПериода.ЗатратыВсего        + Затраты;
				ЗаписьЗатратыПериода.БалансоваяСтоимость = ЗаписьЗатратыПериода.БалансоваяСтоимость + Затраты;
				
				ЗаписьЗатратыПериода.Начало = ВыборкаПотокЗатрат.ПериодЗатрат;
				ПредыдущаяЗапись.Конец = ЗаписьЗатратыПериода.Начало - 1;
				
				Если ЗаписьОценка.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					ЗаписьЗатратыПериода.РесурсИспользованный = ВыборкаПотокЗатрат.РесурсИспользованныйЗаПериод;
					ПредыдущаяЗапись.РесурсИспользованный = ПредыдущаяЗапись.РесурсИспользованный - ЗаписьЗатратыПериода.РесурсИспользованный;
					
				КонецЕсли;
				
				ПредыдущаяЗапись = ЗаписьЗатратыПериода;
				
			КонецЦикла;
			
			Если ЗаписьНачалоПериода.БалансоваяСтоимость = 0 Тогда
				ЗаписьОценка.РасчетАмортизации.Удалить(0);
				РасчетАмортизации.Удалить(ЗаписьНачалоПериода);
				ЗаписьНачалоПериода = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ЗаписьРасчетАмортизации Из ЗаписьОценка.РасчетАмортизации Цикл
			ЗаписьРасчетАмортизации.АмортизируемаяВеличина =
				ЗаписьРасчетАмортизации.БалансоваяСтоимость - ЗаписьОценка.ЛиквидационнаяСтоимость;
		КонецЦикла;
		
		Если ЗаписьОценка.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			ЗаполнитьСрокИспользованияПрошедший(ЗаписьОценка.РасчетАмортизации, Процессор);
		КонецЕсли;
		
		// Уровень 4: Постоянные компоненты амортизации
		КомпонентыАмортизацииОС.РазбитьРасчет(ЗаписьОценка, КомпонентыАмортизации);
		
	КонецЦикла;
	
	Процессор.ОценкаСтоимости.Индексы.Добавить("Объект");
	
КонецПроцедуры

Функция ПрименяемыйСпособАмортизации(СпособАмортизации)
	
	Если СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
		Или СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
		// специальные способы, поддержанные в программе
		Возврат СпособАмортизации;
	КонецЕсли;
	
	// значение по умолчанию
	Возврат Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
	
КонецФункции

Функция РасчетАмортизации(ВсеРасчеты, СпособАмортизации, ТипОбъектов)
	
	Расчет = ВсеРасчеты[СпособАмортизации];
	
	Если Расчет = Неопределено Тогда
		Если СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Расчет = НовыйРасчетАмортизацииПропорциональноОбъемуПродукции(ТипОбъектов);
		ИначеЕсли СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			Расчет = НовыйРасчетАмортизацииПоСуммеЧиселЛетИспользования(ТипОбъектов);
		Иначе
			Расчет = НовыйРасчетАмортизацииЛинейный(ТипОбъектов);
		КонецЕсли;
		ВсеРасчеты.Вставить(СпособАмортизации, Расчет);
	КонецЕсли;
	
	Возврат Расчет;
	
КонецФункции

// Рассчитывает суммы амортизации как произведение амортизируемой величины и коэффициента амортизации.
// В результате формируется амортизация за месяц по объекту в целом
// и новая балансовая стоимость (оценка) актива.
//
// Параметры:
//  Оценка - ТаблицаЗначений - см. НовыйОценкаСтоимостиАмортизируемыхАктивов
//
Процедура РассчитатьСуммыАмортизации(Оценка)
	
	Для Каждого ЗаписьОценка Из Оценка Цикл
		
		Если ЗаписьОценка.НеКорректироватьАвтоматически Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьОценка.АмортизируемаяВеличина <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьОценка.АмортизацияПрекращена Тогда
			
			ЗаписьОценка.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
			ЗаписьОценка.Амортизация       = ЗаписьОценка.АмортизируемаяВеличина;
			
		Иначе
			
			ЗаписьОценка.Амортизация = 0;
			АмортизируемаяВеличина = ЗаписьОценка.АмортизируемаяВеличина;
			
			Для Каждого ЗаписьАмортизация Из ЗаписьОценка.РасчетАмортизации Цикл
				
				Если ЗаписьАмортизация.АмортизируемаяВеличина <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьАмортизация.Амортизация = Мин(
					АмортизируемаяВеличина,
					ЗаписьАмортизация.АмортизируемаяВеличина,
					ЗаписьАмортизация.АмортизируемаяВеличина * ЗаписьАмортизация.КоэффициентАмортизации);
				
				ЗаписьОценка.Амортизация = ЗаписьОценка.Амортизация + ЗаписьАмортизация.Амортизация;
				АмортизируемаяВеличина = АмортизируемаяВеличина - ЗаписьАмортизация.Амортизация;
				
			КонецЦикла;
			
		КонецЕсли;
	
		ЗаписьОценка.СуммаПроводки = Макс(0, ЗаписьОценка.Амортизация - ЗаписьОценка.АмортизацияПредварительная);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СпособыАмортизации

// Используем терминологию ФСБУ 6, ФСБУ 14 - способ амортизации.
// При этом считаем, что "способ амортизации" - это синоним "метода амортизации" из IAS 16.

// Рассчитывает коэффициенты амортизации в переданных коллекциях.
// В коллекциях должен быть заполнен объем данных, описанный в вызываемых методах.
//
// Параметры:
//  РасчетАмортизации - Соответствие, см. НовыйРасчетАмортизации
//
Процедура РассчитатьКоэффициентыАмортизации(РасчетАмортизации)
	
	РассчитатьКоэффициентыАмортизацииЛинейный(
		РасчетАмортизации[Перечисления.СпособыНачисленияАмортизацииОС.Линейный]);
	РассчитатьКоэффициентыАмортизацииПропорциональноОбъемуПродукции(
		РасчетАмортизации[Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции]);
	РассчитатьКоэффициентыАмортизацииПоСуммеЧиселЛетИспользования(
		РасчетАмортизации[Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования]);
	
КонецПроцедуры

// Для основных средств и для нематериальных активов в ФСБУ предусмотрен одинаковый набор способов амортизации.
// Однако в программе для ОС и НМА - разные перечисления.
// Для удобства работы в алгоритмах применяются значения перечисления СпособыНачисленияАмортизацииОС - как для ОС, так и для НМА.
// При этом для НМА дополнительно сохраняется его "локальный" способ амортизации - из перечисления СпособыНачисленияАмортизацииНМА.
//
// Функция определяет соответствие общего способа (используемого для ОС и НМА) и локального (только НМА).
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции
//
Функция ЛокальныеСпособыАмортизацииНМА()
	
	ЛокальныеСпособы = Новый ТаблицаЗначений;
	ЛокальныеСпособы.Колонки.Добавить("Общий",     Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	ЛокальныеСпособы.Колонки.Добавить("Локальный", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА"));
	
	Для Каждого КлючИЗначение Из Перечисления.СпособыНачисленияАмортизацииНМА.ОбщиеСпособы() Цикл
		Запись = ЛокальныеСпособы.Добавить();
		Запись.Локальный = КлючИЗначение.Ключ;
		Запись.Общий     = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат ЛокальныеСпособы;
	
КонецФункции

#Область Линейный

// Рассчитывает коэффициенты амортизации линейным способом
//
// Параметры:
//  Расчет - ТаблицаЗначений, см. НовыйРасчетАмортизацииЛинейный.
//      В таблице должны быть заполнены колонки, указанные в описании КоэффициентАмортизацииЛинейный
//
Процедура РассчитатьКоэффициентыАмортизацииЛинейный(Расчет)
	
	Если Расчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Расчет Цикл
		
		Запись.КоэффициентАмортизации = КоэффициентАмортизацииЛинейный(Запись);
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает коэффициент амортизации линейным способом в соответствии с п. 35 ФСБУ 6 (п. 40 ФСБУ 14)
//
// Параметры:
//  Расчет - СтрокаТаблицыЗначений из НовыйРасчетАмортизацииЛинейный.
//    До вызова должны быть заполнены поля:
//       НачалоОтсчетаРесурсМесяцев, ОбщийРесурсМесяцев, КонецСрокаПолезногоИспользования, СрокИспользованияПрошедший, Конец
//    Заполняются поля:
//       СрокИспользованияОставшийся
// 
// Возвращаемое значение:
//  Число - коэффициент амортизации, см. комментарий в НовыйРасчетАмортизацииБазовый
//
Функция КоэффициентАмортизацииЛинейный(Расчет)
	
	// "35. Амортизация по основным средствам, срок полезного использования которых определяется периодом,
	// в течение которого их использование будет приносить экономические выгоды организации,
	// начисляется линейным способом или способом уменьшаемого остатка.
	//
	// Начисление амортизации линейным способом производится таким образом, чтобы подлежащая амортизации стоимость
	// объекта основных средств погашалась равномерно в течение всего срока полезного использования этого объекта.
	//
	// При этом сумма амортизации за отчетный период определяется как отношение
	// разности между балансовой и ликвидационной стоимостью объекта основных средств
	// к величине оставшегося срока полезного использования данного объекта."

	// Коэффициент амортизации для линейного способа -
	// это значение, обратное "величине оставшегося срока полезного использования".
	// Можно сказать, что "величина" нормирована (измеряется) в периодах,
	// за который рассчитывается амортизация конкретного объекта.
	// То есть, если рассчитываем за месяц и амортизация началась до начала месяца, то в месяцах;
	// если амортизация началась за 7 дней до окончания периода, то в неделях и т.п.
	// Оставшийся период - с начала расчета, поэтому его нормированная величина
	// - либо равна нулю (оставшийся срок не определен)
	// - либо равна 1 (оставшийся срок полностью лежит в периоде расчета)
	// - либо больше 1 (оставшийся срок выходит за пределы периода расчета).
	
	Если Расчет.СрокИспользованияПрошедший = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	// Для дробных периодов не используем daily depreciation method, чтобы избежать ситуации,
	// когда от месяца к месяцу величина амортизации изменяется, так как изменяется количество дней в месяце.
	//
	// Вместо этого используем straight-line depreciation method, в котором величина амортизации,
	// как правило, определяется в 1/12 годовой суммы амортизации.
	//
	// Это соответствует сути требований ФСБУ обеспечить равномерность на ежегодной основе.
	//
	// Для учета дня месяца, в котором произошло изменение затрат, используем подход, описанный в документации ERP:
	// https://its.1c.ru/db/erp25doc#bookmark:fixedassets:DepreciationCalculationManagerialAccounting
	// См. ЗаполнитьСрокИспользованияПрошедший
	//
	// В программе оцениваемый срок использования, как правило, задается и сохраняется
	// в виде целого числа месяцев с момента отсчета.
	// Поэтому для целей расчета коэффициента амортизации считаем срок выраженным целым числом месяцев
	// и вычисляем оставшийся срок использования исходя из даты отсчета:
	// рассчитываем его как Полный срок - Прошедший до начала периода.
	// При этом в общем случае прошедший до начала периода определяем как сумму
	// - целого числа месяцев, начиная со следующего за месяцем отсчета
	// - нецелого, исходя из числа дней в месяце отсчета.
	
	НачалоПериодаРасчета = НачалоМесяца(Расчет.Конец);
	Если Расчет.НачалоОтсчетаРесурсМесяцев >= НачалоПериодаРасчета Тогда
		СрокИспользованияДоНачалаПериода = 0;
	ИначеЕсли Расчет.НачалоОтсчетаРесурсМесяцев = НачалоМесяца(Расчет.НачалоОтсчетаРесурсМесяцев) Тогда
		СрокИспользованияДоНачалаПериода = РазностьМесяцев(НачалоПериодаРасчета, Расчет.НачалоОтсчетаРесурсМесяцев);
	Иначе
		КонецДробнойЧастиСрока = КонецМесяца(Расчет.НачалоОтсчетаРесурсМесяцев);
		НачалоЦелойЧастиСрока = КонецДробнойЧастиСрока + 1;
		ДробнаяЧастьСрока = РазностьДней(КонецДробнойЧастиСрока, Расчет.НачалоОтсчетаРесурсМесяцев) / День(КонецДробнойЧастиСрока);
		ЦелаяЧастьСрока   = РазностьМесяцев(НачалоПериодаРасчета, НачалоЦелойЧастиСрока);
		СрокИспользованияДоНачалаПериода = ЦелаяЧастьСрока + ДробнаяЧастьСрока;
	КонецЕсли;
	
	// Определим общий срок в месяцах с момента отсчета.
	// В общем случае он может оказаться не равен Расчет.ОбщийРесурсМесяцев, так как может быть ограничен конкретной датой.
	
	Если Расчет.КонецСрокаПолезногоИспользования < Расчет.НачалоОтсчетаРесурсМесяцев Тогда
		Расчет.СрокИспользованияОставшийся = 0;
		Возврат 1;
	КонецЕсли;
	
	ОбщийРесурсМесяцев = ОкругленнаяРазностьМесяцев(
		Расчет.КонецСрокаПолезногоИспользования,
		Расчет.НачалоОтсчетаРесурсМесяцев);
	
	// В расчете участвует балансовая величина на момент расчета, соответственно и "оставшийся срок" - на момент расчета,
	// а не на момент конца отчетного периода.
	Расчет.СрокИспользованияОставшийся = ОбщийРесурсМесяцев - СрокИспользованияДоНачалаПериода;
	
	Если Расчет.СрокИспользованияОставшийся <= 0 Тогда
		Расчет.СрокИспользованияОставшийся = 0;
		Возврат 1;
	КонецЕсли;
	
	Если Расчет.Конец >= Расчет.КонецСрокаПолезногоИспользования Тогда
		Расчет.СрокИспользованияОставшийся = Мин(1, Расчет.СрокИспользованияОставшийся);
		Возврат 1;
	КонецЕсли;
	
	Возврат Расчет.СрокИспользованияПрошедший / Расчет.СрокИспользованияОставшийся;
	
КонецФункции

Процедура ЗаполнитьСрокИспользованияПрошедший(Расчет, Процессор)
	
	// Считаем погрешность округления в данном случае несущественной
	
	Для Каждого Запись Из Расчет Цикл
		Если Запись.Начало = Процессор.НачалоМесяца И КонецДня(Запись.Конец) = КонецДня(Процессор.КонецМесяца) Тогда
			Запись.СрокИспользованияПрошедший = 1;
		Иначе
			Запись.СрокИспользованияПрошедший = РазностьДней(Запись.Конец, Запись.Начало) / Процессор.ДлинаМесяца;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПропорциональноОбъемуПродукции

// Рассчитывает коэффициенты амортизации способом пропорционально количеству продукции (объему работ в натуральном выражении).
//
// Параметры:
//  Расчет - ТаблицаЗначений, см. НовыйРасчетАмортизацииПропорциональноОбъемуПродукции.
//      В таблице должны быть заполнены колонки, указанные в описании КоэффициентАмортизацииПропорциональноОбъемуПродукции
//
Процедура РассчитатьКоэффициентыАмортизацииПропорциональноОбъемуПродукции(Расчет)
	
	Если Расчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Расчет Цикл
		
		Запись.КоэффициентАмортизации = КоэффициентАмортизацииПропорциональноОбъемуПродукции(Запись);
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает коэффициент амортизации линейным способом в соответствии с п. 36 ФСБУ 6 (п. 40 ФСБУ 14)
//
// Параметры:
//  Расчет - СтрокаТаблицыЗначений из НовыйРасчетАмортизацииПропорциональноОбъемуПродукции.
//    До вызова должны быть заполнены поля:
//       РесурсОбщий, РесурсИспользованныйРанее, РесурсИспользованный
//    Заполняются поля:
//       РесурсОставшийся
// 
// Возвращаемое значение:
//  Число - коэффициент амортизации, см. комментарий в НовыйРасчетАмортизацииБазовый
//
Функция КоэффициентАмортизацииПропорциональноОбъемуПродукции(Расчет)
	
	// ФСБУ 6
	// 36. ...сумма амортизации за отчетный период определяется как
	// произведение
	//     разности между балансовой и ликвидационной стоимостью объекта основных средств
	// на
	//     отношение
	//        показателя количества продукции (объема работ в натуральном выражении) в отчетном периоде
	//        к оставшемуся сроку полезного использования объекта основных средств.
	
	// Это "отношение" и есть коэффициент амортизации
	
	Расчет.РесурсОставшийся = Расчет.РесурсОбщий - Расчет.РесурсИспользованныйРанее;
	
	Если Расчет.РесурсИспользованный >= Расчет.РесурсОставшийся Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Расчет.РесурсИспользованный <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Расчет.РесурсИспользованный / Расчет.РесурсОставшийся;
	
КонецФункции

Процедура РассчитатьИтогиРесурса(Ресурс, Расчет)
	
	Если Расчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Итоги = Новый Соответствие;
	
	Для Каждого Запись Из Расчет Цикл
		
		Итог = Неопределено;
		КомпонентыАмортизацииОС.ОпределитьИтогРесурса(Итог, Запись);
		Если Итог = Неопределено Тогда
			Итог = Итоги[Запись.Объект];
		КонецЕсли;
		
		Если Итог = Неопределено Тогда
			Итог = Запись.РесурсОставшийся;
		КонецЕсли;
		
		Итог = Итог - Запись.РесурсИспользованный;
		
		Итоги.Вставить(Запись.Объект, Итог);
		
	КонецЦикла;
	
	// Помещаем в результирующую коллекцию в исходном порядке
	Для Каждого ЗаписьРасчета Из Расчет Цикл
		
		ЗначениеРесурса = Итоги[ЗаписьРасчета.Объект];
		Если ЗначениеРесурса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьИтога = Ресурс.Добавить();
		ЗаписьИтога.Объект = ЗаписьРасчета.Объект;
		ЗаписьИтога.Ресурс = ЗначениеРесурса;
		
		Итоги.Удалить(ЗаписьРасчета.Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоСуммеЧиселЛетИспользования

// Рассчитывает коэффициенты амортизации способом одним из вариантов способа уменьшаемого остатка - 
// по сумме чисел лет использования (Sum-of-the-Years' Digits, SOYD)
//
// Параметры:
//  Расчет - ТаблицаЗначений, см. НовыйРасчетАмортизацииПоСуммеЧиселЛетИспользования.
//    До вызова должны быть заполнены поля:
//       НачалоОтсчетаРесурсМесяцев, ОбщийРесурсМесяцев, КонецСрокаПолезногоИспользования, Конец
//    Заполняются поля:
//       СрокИспользованияОставшийся, ОстатокЧислаЛетСрокаИспользования, СуммаЧиселЛетСрокаИспользования
//
Процедура РассчитатьКоэффициентыАмортизацииПоСуммеЧиселЛетИспользования(Расчет)
	
	Если Расчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Расчет Цикл
		
		Запись.КоэффициентАмортизации = КоэффициентАмортизацииПоСуммеЧиселЛетИспользования(Запись);
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает коэффициент амортизации способом одним из вариантов способа уменьшаемого остатка - 
// по сумме чисел лет использования (Sum-of-the-Years' Digits, SOYD)
//
// Параметры:
//    До вызова должны быть заполнены поля:
//       КонецСрокаПолезногоИспользования, Конец
//    Заполняются поля:
//       СрокИспользованияОставшийся, ОстатокЧислаЛетСрокаИспользования, СуммаЧиселЛетСрокаИспользования
// 
// Возвращаемое значение:
//  Число - коэффициент амортизации, см. комментарий в НовыйРасчетАмортизацииБазовый
//
Функция КоэффициентАмортизацииПоСуммеЧиселЛетИспользования(Расчет)
	
	НачалоПериодаРасчета = НачалоМесяца(Расчет.Конец);
	Если НачалоПериодаРасчета > Расчет.КонецСрокаПолезногоИспользования Тогда
		Возврат 1;
	КонецЕсли;
	
	Расчет.СрокИспользованияОставшийся = ОкругленнаяРазностьМесяцев(
		Расчет.КонецСрокаПолезногоИспользования,
		НачалоПериодаРасчета);
	
	ДлинаГодаМесяцев = 12;
	ОстатокСрокаИспользованияЦелыхЛет     = Цел(Расчет.СрокИспользованияОставшийся / ДлинаГодаМесяцев);
	ОстатокСрокаИспользованияНецелогоГода = Расчет.СрокИспользованияОставшийся - ОстатокСрокаИспользованияЦелыхЛет * ДлинаГодаМесяцев;
	
	Расчет.ОстатокЧислаЛетСрокаИспользования = ОстатокСрокаИспользованияЦелыхЛет;
	Если ОстатокСрокаИспользованияНецелогоГода > 0 Тогда
		Расчет.ОстатокЧислаЛетСрокаИспользования = Расчет.ОстатокЧислаЛетСрокаИспользования + 1;
	КонецЕсли;
	
	Если Расчет.ОстатокЧислаЛетСрокаИспользования = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Расчет.СуммаЧиселЛетСрокаИспользования = СуммаНатуральныхЧисел(Расчет.ОстатокЧислаЛетСрокаИспользования);
	ГодоваяНормаАмортизации = Расчет.ОстатокЧислаЛетСрокаИспользования / Расчет.СуммаЧиселЛетСрокаИспользования;
	
	// Учтем, что в течение года использования амортизируемая величина погашается -
	// рассчитаем условный остаток годовой нормы
	УсловныйОстатокГода = ДлинаГодаМесяцев;
	ПрошедшаяЧастьГода = 0;
	Если ОстатокСрокаИспользованияНецелогоГода > 0 Тогда
		ПрошедшаяЧастьГода  = ДлинаГодаМесяцев - ОстатокСрокаИспользованияНецелогоГода;
		УсловныйОстатокГода = УсловныйОстатокГода - ПрошедшаяЧастьГода * ГодоваяНормаАмортизации;
	КонецЕсли;
	
	Если УсловныйОстатокГода = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат ГодоваяНормаАмортизации / УсловныйОстатокГода;
	
КонецФункции

Функция СуммаНатуральныхЧисел(МаксимальноеЧисло)
	
	Возврат (1 + МаксимальноеЧисло) * МаксимальноеЧисло / 2;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Вспомогательные

Функция ЭтоНМА(ТипОбъектов)
	
	Возврат ТипОбъектов = Тип("СправочникСсылка.НематериальныеАктивы");
	
КонецФункции

Процедура НастроитьЗапросПоУмолчанию(Запрос, Процессор)
	
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоМесяца",          Процессор.НачалоМесяца);
	Запрос.УстановитьПараметр("КонецМесяца",           Процессор.КонецМесяца);
	Запрос.УстановитьПараметр("КонецПериодаГраница",   Процессор.ПериодГраница);
	Запрос.УстановитьПараметр("ПериодГраница",         Процессор.ПериодГраница);
	Запрос.УстановитьПараметр("ПериодСведений",        Процессор.ПериодСведений);
	Запрос.УстановитьПараметр("ПериодСведенийГраница", Процессор.ПериодСведенийГраница);
	Запрос.УстановитьПараметр("Организация",           Процессор.Организация);
	Запрос.УстановитьПараметр("ВидСубконто",           Процессор.ВидСубконтоОбъектов);
	
КонецПроцедуры

Функция ВыполнитьЗапросПоУмолчанию(Процессор, ТекстЗапроса)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	НастроитьЗапросПоУмолчанию(Запрос, Процессор);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РазностьДней(КонецПериода, НачалоПериода)
	
	ДеньПослеКонцаПериода = КонецДня(КонецПериода) + 1;
	
	ДлинаСуток = 86400;
	Возврат (ДеньПослеКонцаПериода - НачалоПериода) / ДлинаСуток;
	
КонецФункции

Функция ОкругленнаяРазностьМесяцев(КонецСрока, НачалоСрока)
	
	// Округляем по правилам арифметики, тем самым нивелируем неопределенность определения сроков,
	// начинающихся или заканчивающихся в последний день месяца.
	// (Неопределенность возникает, если в первом и последнем месяцах срока разное количество дней.
	//  Например, 1 месяц с 29 февраля истекает 29 марта или 31 марта?)
	
	СрокДней = РазностьДней(КонецСрока, НачалоСрока);
	СредняяДлинаМесяца = 30.436875; // 365.2425 / 12, см. ст.2 Закона от 03.06.2011 N 107-ФЗ "Об исчислении времени"
	Возврат Окр(СрокДней / СредняяДлинаМесяца);
	
КонецФункции

#КонецОбласти

#Область ПБУ6

Функция НовыйКоннекторОбщийПБУ6(ДанныеКомпонентов, Период)
	
	Коннектор = Новый Структура;
	
	ТипОбъектов = Тип("СправочникСсылка.ОсновныеСредства");
	
	Коннектор.Вставить("ДанныеКомпонентов",       ДанныеКомпонентов);
	
	Коннектор.Вставить("НачалоМесяца",            НачалоМесяца(Период));
	Коннектор.Вставить("КонецМесяца",             КонецМесяца(Период));
	
	Коннектор.Вставить("ШаблонОценкаСтоимости",   НовыйОценкаСтоимостиАмортизируемыхАктивов(ТипОбъектов));
	Коннектор.Вставить("ШаблонАмортизация",       Новый Соответствие);
	
	Коннектор.ШаблонАмортизация.Вставить(
		Перечисления.СпособыНачисленияАмортизацииОС.Линейный,
		НовыйРасчетАмортизацииЛинейный(ТипОбъектов));
	Коннектор.ШаблонАмортизация.Вставить(
		Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции,
		НовыйРасчетАмортизацииПропорциональноОбъемуПродукции(ТипОбъектов));
	Коннектор.ШаблонАмортизация.Вставить(
		Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования,
		НовыйРасчетАмортизацииПоСуммеЧиселЛетИспользования(ТипОбъектов));
	
	Коннектор.Вставить("Итоги", Новый Соответствие); // Ключ - компонент; Значение - балансовая стоимость с учетом амортизации текущего месяца
	
	Возврат Коннектор;

КонецФункции

#КонецОбласти

#КонецОбласти
