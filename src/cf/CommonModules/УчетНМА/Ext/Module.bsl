
#Область ПрограммныйИнтерфейс

// Проверяет, применяется ли в конкретном периоде устаревший стандарт ПБУ 14
//
// Параметры:
//  Период - Дата
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево - Истина - применяется ПБУ 14, Ложь - применяется ФСБУ 14
//
Функция ПрименяетсяПБУ14(Период) Экспорт
	
	Возврат Период < НачалоОбязательногоПримененияФСБУ14();
	
КонецФункции

// Определяет дату начала обязательного применения ФСБУ 14/22 "Нематериальные активы"
// 
// Возвращаемое значение:
//  Дата
//
Функция НачалоОбязательногоПримененияФСБУ14() Экспорт
	Возврат '2024-01-01';
КонецФункции

// Получает данные и формирует проводки регламентной операции "Переход на ФСБУ 14".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура
//  Отказ - Булево
//  Движения - КоллекцияДвижений
//
Процедура ПереходНаФСБУ14(СтруктураШапкиДокумента, Отказ, Движения) Экспорт
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПереходНаФСБУ14(СтруктураШапкиДокумента, Отказ);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Если в обработке подготовки данных для перехода на ФСБУ 14 пользователем используется режим "Стоимость активов определяется: По иным данным",
	// то появляется возможность указать поля Обесценение и ОбесценениеДоступноеДляВосстановления.
	// До того момента, пока в программе не появится счет обесценения (субсчет счета 05), сумму амортизации и обесценения относим одной суммой на счет амортизации.
	// После того, как появится счет обесценения, в качестве суммы обесценения в проводке будет заполняться величина ОбесценениеДоступноеДляВосстановления,
	// а амортизация составит Амортизация + (Обесценение - ОбесценениеДоступноеДляВосстановления), где величина (Обесценение - ОбесценениеДоступноеДляВосстановления)
	// фактически является корректировкой обесценения.
	ПодготовитьДанныеПереходаНаФСБУ14(ПараметрыПроведения);
	
	ТаблицаИзменениеСтоимостиНМА = ТаблицаИзменениеСтоимостиНМА(ПараметрыПроведения);
	
	ТаблицаСтоимостиПереклассификацияНМА = ТаблицаСтоимостиПереклассификацияНМА(ПараметрыПроведения);
	
	// Формирование движений по регистрам сведений
	СформироватьДвиженияПервоначальныеСведенияНМАБухгалтерскийУчет(Движения, ПараметрыПроведения, ТаблицаСтоимостиПереклассификацияНМА);
	
	СформироватьДвиженияЭлементыАмортизацииНМАБухгалтерскийУчет(Движения, ПараметрыПроведения);
	
	СформироватьДвиженияСостоянияНМА(Движения, ПараметрыПроведения);
	
	СформироватьДвиженияСпособыОтраженияРасходов(Движения, ПараметрыПроведения);
	
	СформироватьДвиженияСчетаУчетаНМА(Движения, ПараметрыПроведения);
	
	// Формирование движений по регистру бухгалтерии
	СформироватьПроводкиПереходНаФСБУ14(Движения, ПараметрыПроведения.ТаблицаРеквизиты, ТаблицаИзменениеСтоимостиНМА, ТаблицаСтоимостиПереклассификацияНМА);
	
	Движения.Хозрасчетный.ЗаполнитьСуммыВременныхРазниц();
	
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("УстанавливаемоеУточнениеПериода",
		БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода());
	
КонецПроцедуры

// Формирует представление группы бухгалтерского учета в соответствии с ФСБУ 14.
// Сейчас в программе не реализовано деление объектов НМА на группы учета,
// поэтому выводим группы, соответствующие видам.
//
// Параметры:
//  ВидНематериальногоАктива - ПеречислениеСсылка.ВидыНематериальныхАктивов - актуальный вид нематериального актива, как задано в справочнике
//  ВидНМАПоПБУ14 - ПеречислениеСсылка.ВидыНМАПоПБУ14 - применявшийся ранее вид нематериального актива, как задано в справочнике
// 
// Возвращаемое значение:
//  Строка - представление вида НМА
//
Функция ПредставлениеГруппыУчета(ВидНематериальногоАктива, ВидНМАПоПБУ14 = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВидНематериальногоАктива) Тогда
		Возврат Строка(ВидНематериальногоАктива); // группой считается совокупность одного вида, п. 12 ФСБУ 14
	ИначеЕсли ВидНМАПоПБУ14 = Перечисления.ВидыНМАПоПБУ14.ИсключительноеПравоНаИзобретение
		Или ВидНМАПоПБУ14 = Перечисления.ВидыНМАПоПБУ14.ИсключительноеПравоНаСелекционныеДостижения
		Или ВидНМАПоПБУ14 = Перечисления.ВидыНМАПоПБУ14.ИмущественноеПравоНаТопологииИМС
		Или ВидНМАПоПБУ14 = Перечисления.ВидыНМАПоПБУ14.ИсключительноеПравоНаПрограммыДляЭВМ Тогда
		// Нет прямого соответствия между видами, приведенными в ФСБУ 14, и применявшимися ранее.
		// Поэтому не опираемся на применявшиеся ранее, а сгруппируем их более-менее произвольно
		Возврат НСтр("ru = 'Результаты интеллектуальной деятельности'");
	ИначеЕсли ВидНМАПоПБУ14 = Перечисления.ВидыНМАПоПБУ14.ИсключительноеПравоНаТоварныйЗнак Тогда
		Возврат НСтр("ru = 'Средства идивидуализации'");
	Иначе
		Возврат НСтр("ru = 'Иные объекты НМА'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Тип объектов, работа с которыми реализована в этом модуле - для АмортизацияАктивов
Функция ТипОбъектов()
	Возврат Тип("СправочникСсылка.НематериальныеАктивы");
КонецФункции

#Область ПереходНаФСБУ14

Процедура ПодготовитьДанныеПереходаНаФСБУ14(ПараметрыПроведения)
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	СчетаНМА = Обработки.ПомощникПереходаНаФСБУ14.СчетаУчетаНМА();
	
	Запрос.УстановитьПараметр("СчетаКапитальныхВложений", СчетаНМА.СчетаКапитальныхВложений);
	Запрос.УстановитьПараметр("СтандартныйСчетАмортизации", СтандартныйСчетАмортизации(СчетаНМА.СчетаАмортизации));
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("СтоимостьОпределяетсяПоДаннымУчета", Реквизиты.СтоимостьОпределяетсяПоДаннымУчета);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДанныеПерехода(НомераТаблиц)
		+ ТекстЗапросаПервоначальныеСведенияБУ(НомераТаблиц)
		+ ТекстЗапросаЭлементыАмортизации(НомераТаблиц)
		+ ТекстЗапросаСостоянияНМА(НомераТаблиц)
		+ ТекстЗапросаСпособыОтраженияРасходов(НомераТаблиц)
		+ ТекстЗапросаСчетаУчетаНМА(НомераТаблиц)
		+ ТекстЗапросаИзменениеСтоимости(НомераТаблиц)
		+ ТекстЗапросаПереклассификация(НомераТаблиц)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДанныеПерехода(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеПерехода", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("НематериальныеАктивыСгруппированные", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписокНМА.Организация КАК Организация,
	|	СписокНМА.ПозицияСписка КАК ПозицияСписка,
	|	СписокНМА.Амортизация КАК Амортизация,
	|	СписокНМА.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	СписокНМА.ДействиеПриПереходе КАК ДействиеПриПереходе,
	|	СписокНМА.Коэффициент КАК Коэффициент,
	|	СписокНМА.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	СписокНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СписокНМА.НеопределенныйСрокПолезногоИспользования КАК НеопределенныйСрокПолезногоИспользования,
	|	СписокНМА.Обесценение КАК Обесценение,
	|	СписокНМА.ОбесценениеДоступноеДляВосстановления КАК ОбесценениеДоступноеДляВосстановления,
	|	СписокНМА.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	СписокНМА.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	СписокНМА.ПодразделениеСписания КАК ПодразделениеСписания,
	|	СписокНМА.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	СписокНМА.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	СписокНМА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	СписокНМА.СубконтоСписания1 КАК СубконтоСписания1,
	|	СписокНМА.СубконтоСписания2 КАК СубконтоСписания2,
	|	СписокНМА.СубконтоСписания3 КАК СубконтоСписания3,
	|	ВЫБОР
	|		КОГДА СписокНМА.СчетАмортизации = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА &СтандартныйСчетАмортизации
	|		ИНАЧЕ СписокНМА.СчетАмортизации
	|	КОНЕЦ КАК СчетАмортизации,
	|	СписокНМА.СчетСписания КАК СчетСписания,
	|	СписокНМА.СчетУчета КАК СчетУчета,
	|	СписокНМА.СчетУчета В (&СчетаКапитальныхВложений) КАК ЭтоСчетКапитальныхВложений
	|ПОМЕСТИТЬ ВременнаяТаблицаДанныеПерехода
	|ИЗ
	|	РегистрСведений.НМАПриПереходеНаФСБУ14 КАК СписокНМА
	|ГДЕ
	|	СписокНМА.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	ПозицияСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеПерехода.ПозицияСписка) КАК ПозицияСписка,
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивыСгруппированные
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе В (ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.Пересмотрено), ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации))
	|	И НЕ ДанныеПерехода.ЭтоСчетКапитальныхВложений
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПерехода.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	ПозицияСписка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПервоначальныеСведенияБУ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаПервоначальныеСведенияБУ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПервоначальныеСведенияБУ", НомераТаблиц.Количество());
	// Элементы амортизации - срок полезного использования, способ начисления амортизации, предполагаемый объем продукции, коэффицциент ускорения -
	// записываются в регистр "Первоначальные сведения" для совместимости. Эти же сведения, а также ликвидационная стоимость будут
	// записаны также в регистр "Элементы амортизации НМА (бухгалтерский учет)".
	// Срок полезного использования отсчитывается от даты принятия к учету, который определяется по регистру сведений "Состояния НМА организаций",
	// Движения по этому регистру также запишутся при проведении рег. операции "Переход на ФСБУ 14" (см. ТекстЗапросаСостоянияНМА, СформироватьДвиженияСостоянияНМА)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.Иное) КАК СпособПоступления,
	|	НЕ ДанныеПерехода.НеопределенныйСрокПолезногоИспользования КАК НачислятьАмортизацию,
	|	ДанныеПерехода.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ДанныеПерехода.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ДанныеПерехода.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ДанныеПерехода.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ВременнаяТаблицаПервоначальныеСведенияБУ
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НематериальныеАктивыСгруппированные КАК НематериальныеАктивы
	|		ПО ДанныеПерехода.НематериальныйАктив = НематериальныеАктивы.НематериальныйАктив
	|			И ДанныеПерехода.ПозицияСписка = НематериальныеАктивы.ПозицияСписка
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)
	|	И НЕ ДанныеПерехода.ЭтоСчетКапитальныхВложений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеПерехода.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияБУ.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияБУ.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПервоначальныеСведенияБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияБУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияБУ.Коэффициент КАК Коэффициент
	|ИЗ
	|	ВременнаяТаблицаПервоначальныеСведенияБУ КАК ПервоначальныеСведенияБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|		ПО ПервоначальныеСведенияБУ.НематериальныйАктив = ДанныеПерехода.НематериальныйАктив
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияБУ.Коэффициент,
	|	ПервоначальныеСведенияБУ.НачислятьАмортизацию,
	|	ПервоначальныеСведенияБУ.НематериальныйАктив,
	|	ПервоначальныеСведенияБУ.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияБУ.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияБУ.СпособПоступления,
	|	ПервоначальныеСведенияБУ.СрокПолезногоИспользования";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЭлементыАмортизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ЭлементыАмортизации", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПерехода.ПозицияСписка КАК ПозицияСписка,
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
	|	ДанныеПерехода.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	НЕ ДанныеПерехода.НеопределенныйСрокПолезногоИспользования КАК НачислятьАмортизацию,
	|	ДанныеПерехода.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ДанныеПерехода.Коэффициент КАК Коэффициент,
	|	ДанныеПерехода.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ДанныеПерехода.СрокПолезногоИспользования КАК СрокПолезногоИспользования
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НематериальныеАктивыСгруппированные КАК НематериальныеАктивы
	|		ПО ДанныеПерехода.НематериальныйАктив = НематериальныеАктивы.НематериальныйАктив
	|			И ДанныеПерехода.ПозицияСписка = НематериальныеАктивы.ПозицияСписка
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе В (ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.Пересмотрено), ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации))
	|	И НЕ ДанныеПерехода.ЭтоСчетКапитальныхВложений";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСостоянияНМА(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНовыеСостоянияНМА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СостоянияНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
	|	ВЫБОР
	|		КОГДА ДанныеПерехода.ЭтоСчетКапитальныхВложений
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Поступил)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|	КОНЕЦ КАК Состояние,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеПерехода.ДатаПринятияКУчету <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДанныеПерехода.ДатаПринятияКУчету
	|			ИНАЧЕ &Период
	|		КОНЕЦ) КАК Период
	|ПОМЕСТИТЬ ВременнаяТаблицаНовыеСостоянияНМА
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПерехода.НематериальныйАктив,
	|	ВЫБОР
	|		КОГДА ДанныеПерехода.ЭтоСчетКапитальныхВложений
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Поступил)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНовыеСостоянияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ВременнаяТаблицаНовыеСостоянияНМА.Состояние КАК Состояние,
	|	ВременнаяТаблицаНовыеСостоянияНМА.Период КАК Период
	|ИЗ
	|	ВременнаяТаблицаНовыеСостоянияНМА КАК ВременнаяТаблицаНовыеСостоянияНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаНовыеСостоянияНМА.НематериальныйАктив КАК НематериальныйАктив
	|						ИЗ
	|							ВременнаяТаблицаНовыеСостоянияНМА КАК ВременнаяТаблицаНовыеСостоянияНМА)) КАК СостоянияНМАОрганизаций
	|		ПО ВременнаяТаблицаНовыеСостоянияНМА.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|ГДЕ
	|	ВременнаяТаблицаНовыеСостоянияНМА.Состояние <> ЕСТЬNULL(СостоянияНМАОрганизаций.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка))";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСпособыОтраженияРасходов(НомераТаблиц)
	
	НомераТаблиц.Вставить("СпособыОтраженияРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ДанныеПерехода.СпособОтраженияРасходов) КАК СпособОтраженияРасходов
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НематериальныеАктивыСгруппированные КАК НематериальныеАктивы
	|		ПО ДанныеПерехода.НематериальныйАктив = НематериальныеАктивы.НематериальныйАктив
	|			И ДанныеПерехода.ПозицияСписка = НематериальныеАктивы.ПозицияСписка
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)
	|	И НЕ ДанныеПерехода.СчетУчета В (&СчетаКапитальныхВложений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПерехода.НематериальныйАктив";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаНМА(НомераТаблиц)
	
	НомераТаблиц.Вставить("СчетаУчетаНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПерехода.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ДанныеПерехода.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(ДанныеПерехода.СчетАмортизации) КАК СчетНачисленияАмортизации
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК ДанныеПерехода
	|ГДЕ
	|	ДанныеПерехода.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)
	|	И НЕ ДанныеПерехода.СчетУчета В (&СчетаКапитальныхВложений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПерехода.НематериальныйАктив";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаИзменениеСтоимости(НомераТаблиц)
	
	НомераТаблиц.Вставить("ИзменениеСтоимостиНМА", НомераТаблиц.Количество());
	
	// НМА со статусом Пересмотрено и К списанию заполняются автоматически, при этом в алгоритме заполнения строки группируются
	// по полям НематериальныйАктив и ЭтоСчетКапитальныхВложений, что предотвращает задваивание записей в ТаблицаИзменениеСтоимостиНМА.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СохраненныеДанные.НематериальныйАктив КАК НематериальныйАктив,
	|	СохраненныеДанные.ДействиеПриПереходе КАК ДействиеПриПереходе,
	|	МАКСИМУМ(СохраненныеДанные.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(СохраненныеДанные.СчетАмортизации) КАК СчетАмортизации,
	|	СУММА(СохраненныеДанные.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(СохраненныеДанные.Амортизация) КАК Амортизация,
	|	СУММА(СохраненныеДанные.Обесценение) КАК Обесценение,
	|	СУММА(СохраненныеДанные.ОбесценениеДоступноеДляВосстановления) КАК ОбесценениеДоступноеДляВосстановления,
	|	СохраненныеДанные.ЭтоСчетКапитальныхВложений КАК ЭтоСчетКапитальныхВложений
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК СохраненныеДанные
	|ГДЕ
	|	СохраненныеДанные.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.Пересмотрено)
	|				И НЕ &СтоимостьОпределяетсяПоДаннымУчета
	|			ИЛИ СохраненныеДанные.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КСписанию)
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеДанные.ДействиеПриПереходе,
	|	СохраненныеДанные.НематериальныйАктив,
	|	СохраненныеДанные.ЭтоСчетКапитальныхВложений";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереклассификация(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПереклассификацияНМА", НомераТаблиц.Количество());
	// Возможна ситуация, когда один и тот же актив переклассифицируется в несколько различных НМА. В этом случае стоимость актива делится
	// между этими НМА. Если переход предусматривает указание сумм, то стоимость актива делится пропорционально указанным первоначальным стоимостям
	// новых НМА. В противном случае стоимость актива делится равномерно между указанными НМА.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СохраненныеДанные.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(СохраненныеДанные.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(СохраненныеДанные.СчетАмортизации) КАК СчетАмортизации,
	|	СохраненныеДанные.СчетСписания КАК СчетСписания,
	|	СохраненныеДанные.ПодразделениеСписания КАК ПодразделениеСписания,
	|	СохраненныеДанные.СубконтоСписания1 КАК СубконтоСписания1,
	|	СохраненныеДанные.СубконтоСписания2 КАК СубконтоСписания2,
	|	СохраненныеДанные.СубконтоСписания3 КАК СубконтоСписания3,
	|	СУММА(СохраненныеДанные.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(СохраненныеДанные.Амортизация) КАК Амортизация,
	|	СУММА(СохраненныеДанные.Обесценение) КАК Обесценение,
	|	СУММА(СохраненныеДанные.ОбесценениеДоступноеДляВосстановления) КАК ОбесценениеДоступноеДляВосстановления,
	|	СохраненныеДанные.ЭтоСчетКапитальныхВложений КАК ЭтоСчетКапитальныхВложений,
	|	СУММА(ВЫБОР
	|			КОГДА &СтоимостьОпределяетсяПоДаннымУчета
	|				ТОГДА 1
	|			ИНАЧЕ СохраненныеДанные.ПервоначальнаяСтоимость
	|		КОНЕЦ) КАК КоэффициентСтоимости
	|ИЗ
	|	ВременнаяТаблицаДанныеПерехода КАК СохраненныеДанные
	|ГДЕ
	|	СохраненныеДанные.ДействиеПриПереходе = ЗНАЧЕНИЕ(Перечисление.ДействияПриПереходеНаФСБУ14.КПереклассификации)
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеДанные.СчетСписания,
	|	СохраненныеДанные.ПодразделениеСписания,
	|	СохраненныеДанные.СубконтоСписания1,
	|	СохраненныеДанные.СубконтоСписания2,
	|	СохраненныеДанные.СубконтоСписания3,
	|	СохраненныеДанные.НематериальныйАктив,
	|	СохраненныеДанные.ЭтоСчетКапитальныхВложений";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура СформироватьДвиженияПервоначальныеСведенияНМАБухгалтерскийУчет(Движения, ПараметрыПроведения, ТаблицаСтоимости)
	
	Если Не ЗначениеЗаполнено(ПараметрыПроведения.ПервоначальныеСведенияБУ) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	ТаблицаСтоимости.Индексы.Добавить("НематериальныйАктив");
	
	Отбор = Новый Структура("НематериальныйАктив");
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.ПервоначальныеСведенияБУ Цикл
		
		Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Если Реквизиты.СтоимостьОпределяетсяПоДаннымУчета Тогда
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			СтрокиПервоначальнойСтоимости = ТаблицаСтоимости.НайтиСтроки(Отбор);
			Для Каждого СтрокаСтоимости Из СтрокиПервоначальнойСтоимости Цикл
				Движение.ПервоначальнаяСтоимость = Движение.ПервоначальнаяСтоимость + СтрокаСтоимости.СуммаСписания;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияЭлементыАмортизацииНМАБухгалтерскийУчет(Движения, ПараметрыПроведения)

	Если Не ЗначениеЗаполнено(ПараметрыПроведения.ЭлементыАмортизации) Тогда
		Возврат;
	КонецЕсли;
		
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.ЭлементыАмортизации Цикл
		
		Движение = Движения.ЭлементыАмортизацииНМАБухгалтерскийУчет.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;

	Движения.ЭлементыАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияСостоянияНМА(Движения, ПараметрыПроведения)
	
	Если Не ЗначениеЗаполнено(ПараметрыПроведения.СостоянияНМА) Тогда
		Возврат;
	КонецЕсли;
		
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.СостоянияНМА Цикл
		
		Движение = Движения.СостоянияНМАОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСпособыОтраженияРасходов(Движения, ПараметрыПроведения)

	Если Не ЗначениеЗаполнено(ПараметрыПроведения.СпособыОтраженияРасходов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.СпособыОтраженияРасходов Цикл
		
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;

	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияСчетаУчетаНМА(Движения, ПараметрыПроведения)

	Если Не ЗначениеЗаполнено(ПараметрыПроведения.СчетаУчетаНМА) Тогда
		Возврат;
	КонецЕсли;
		
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ПараметрыПроведения.СчетаУчетаНМА Цикл
		
		Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;

	Движения.СчетаБухгалтерскогоУчетаНМА.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиПереходНаФСБУ14(Движения, ТаблицаРеквизиты, ТаблицаИзменениеСтоимостиНМА, ТаблицаСтоимостиПереклассификацияНМА)
	
	Реквизиты = ТаблицаРеквизиты[0];

	СодержаниеПроводок = НСтр("ru='Переход на ФСБУ 14'", ОбщегоНазначения.КодОсновногоЯзыка());

	СчетПрибыль = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	
	Для Каждого СтрокаИзменениеСтоимости Из ТаблицаИзменениеСтоимостиНМА Цикл
		
		// Первоначальная стоимость
		Если СтрокаИзменениеСтоимости.ПервоначальнаяСтоимостьСписание - СтрокаИзменениеСтоимости.ПервоначальнаяСтоимость <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводок;

			СвойстваСчетаУчетаНМА = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаИзменениеСтоимости.СчетУчета);

			ИмяСубконтоНМА = "НематериальныеАктивы";
			Если СвойстваСчетаУчетаНМА.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы] = Неопределено Тогда
				ИмяСубконтоНМА = "РасходыНаНИОКР";
			КонецЕсли;

			Если СтрокаИзменениеСтоимости.ПервоначальнаяСтоимостьСписание - СтрокаИзменениеСтоимости.ПервоначальнаяСтоимость > 0 Тогда

				Проводка.СчетДт = СчетПрибыль;
				Проводка.СчетКт = СтрокаИзменениеСтоимости.СчетУчета;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаИзменениеСтоимости.Подразделение, СтрокаИзменениеСтоимости.Подразделение);

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ИмяСубконтоНМА,
					СтрокаИзменениеСтоимости.НематериальныйАктив);
					
				Проводка.Сумма = СтрокаИзменениеСтоимости.ПервоначальнаяСтоимостьСписание - СтрокаИзменениеСтоимости.ПервоначальнаяСтоимость;

			Иначе

				Проводка.СчетДт = СтрокаИзменениеСтоимости.СчетУчета;
				Проводка.СчетКт = СчетПрибыль;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаИзменениеСтоимости.Подразделение, СтрокаИзменениеСтоимости.Подразделение);

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ИмяСубконтоНМА,
					СтрокаИзменениеСтоимости.НематериальныйАктив);

				Проводка.Сумма = СтрокаИзменениеСтоимости.ПервоначальнаяСтоимость - СтрокаИзменениеСтоимости.ПервоначальнаяСтоимостьСписание;

			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаИзменениеСтоимости.АмортизацияСписание - СтрокаИзменениеСтоимости.Амортизация - СтрокаИзменениеСтоимости.Обесценение <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводок;

			// Пока не используется счет обесценения, общая сумма амортизации и обесценения относятся на счет амортизации.
			// После начала использования счета обесценения, суммой проводки по этому счету будет являться ОбесценениеДоступноеДляВосстановления,
			// а суммой амортизации значение Амортизация + (Обесценение - ОбесценениеДоступноеДляВосстановления).
			Если СтрокаИзменениеСтоимости.АмортизацияСписание - СтрокаИзменениеСтоимости.Амортизация - СтрокаИзменениеСтоимости.Обесценение > 0 Тогда

				Проводка.СчетДт = СтрокаИзменениеСтоимости.СчетАмортизации;
				Проводка.СчетКт = СчетПрибыль;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаИзменениеСтоимости.Подразделение, СтрокаИзменениеСтоимости.Подразделение);

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы",
					СтрокаИзменениеСтоимости.НематериальныйАктив);
				Проводка.Сумма =
					СтрокаИзменениеСтоимости.АмортизацияСписание - СтрокаИзменениеСтоимости.Амортизация - СтрокаИзменениеСтоимости.Обесценение; // см. комментарий перед условием

			Иначе

				Проводка.СчетДт = СчетПрибыль;
				Проводка.СчетКт = СтрокаИзменениеСтоимости.СчетАмортизации;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаИзменениеСтоимости.Подразделение, СтрокаИзменениеСтоимости.Подразделение);

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы",
					СтрокаИзменениеСтоимости.НематериальныйАктив);

				Проводка.Сумма =
					СтрокаИзменениеСтоимости.Амортизация + СтрокаИзменениеСтоимости.Обесценение - СтрокаИзменениеСтоимости.АмортизацияСписание; // см. комментарий перед условием

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаПереклассификация Из ТаблицаСтоимостиПереклассификацияНМА Цикл
		
		СуммаПереклассификацииПервоначальнойСтоимости =
			Мин(СтрокаПереклассификация.СуммаСписания, СтрокаПереклассификация.ПервоначальнаяСтоимость);
		
		// Перклассифицируем сумму актива в первоначальную стоимость НМА
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводок;

		СвойстваСчетаУчетаНМА = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПереклассификация.СчетУчета);
		
		ИмяСубконтоНМА = "НематериальныеАктивы";
		Если СвойстваСчетаУчетаНМА.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы]
			= Неопределено Тогда
			ИмяСубконтоНМА = "РасходыНаНИОКР";
		КонецЕсли;
		
		Проводка.СчетДт = СтрокаПереклассификация.СчетУчета;
		Проводка.СчетКт = СтрокаПереклассификация.СчетСписания;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка,
			СтрокаПереклассификация.ПодразделениеСписания,
			СтрокаПереклассификация.ПодразделениеСписания);

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ИмяСубконтоНМА,
			СтрокаПереклассификация.НематериальныйАктив);
		
		Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт,
				Проводка.СубконтоКт,
				НомерСубконто,
				СтрокаПереклассификация["СубконтоСписания" + XMLСтрока(НомерСубконто)]);	
		КонецЦикла;
		
		Проводка.Сумма = СуммаПереклассификацииПервоначальнойСтоимости;
		
		// Остаток стоимости спишем на нераспределенную прибыль
		Если СтрокаПереклассификация.СуммаСписания - СуммаПереклассификацииПервоначальнойСтоимости <> 0
			Или СтрокаПереклассификация.ПервоначальнаяСтоимость - СуммаПереклассификацииПервоначальнойСтоимости <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводок;
			
			Если СтрокаПереклассификация.СуммаСписания - СуммаПереклассификацииПервоначальнойСтоимости <> 0 Тогда
			
				Проводка.СчетДт = СчетПрибыль;
				Проводка.СчетКт = СтрокаПереклассификация.СчетСписания;
			
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка,
					СтрокаПереклассификация.ПодразделениеСписания,
					СтрокаПереклассификация.ПодразделениеСписания);
				
				Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт,
						Проводка.СубконтоКт,
						НомерСубконто,
						СтрокаПереклассификация["СубконтоСписания" + XMLСтрока(НомерСубконто)]);
				КонецЦикла;
			
				Проводка.Сумма = СтрокаПереклассификация.СуммаСписания - СуммаПереклассификацииПервоначальнойСтоимости;
			Иначе
				Проводка.СчетДт = СтрокаПереклассификация.СчетУчета;
				Проводка.СчетКт = СчетПрибыль;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка,
					СтрокаПереклассификация.ПодразделениеСписания,
					СтрокаПереклассификация.ПодразделениеСписания);
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ИмяСубконтоНМА,
					СтрокаПереклассификация.НематериальныйАктив);
			
				Проводка.Сумма = СтрокаПереклассификация.ПервоначальнаяСтоимость - СуммаПереклассификацииПервоначальнойСтоимости;
				
			КонецЕсли;
		КонецЕсли;
		
		// Амортизации и обесценение
		// Пока не используется счет обесценения, общая сумма амортизации и обесценения относятся на счет амортизации.
		// После начала использования счета обесценения, суммой проводки по этому счету будет являться ОбесценениеДоступноеДляВосстановления,
		// а суммой амортизации значение Амортизация + (Обесценение - ОбесценениеДоступноеДляВосстановления).
		Если СтрокаПереклассификация.Амортизация + СтрокаПереклассификация.Обесценение > 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводок;

			Проводка.СчетДт = СчетПрибыль;
			Проводка.СчетКт = СтрокаПереклассификация.СчетАмортизации;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка,
				СтрокаПереклассификация.ПодразделениеСписания,
				СтрокаПереклассификация.ПодразделениеСписания);

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы",
				СтрокаПереклассификация.НематериальныйАктив);

			Проводка.Сумма = СтрокаПереклассификация.Амортизация + СтрокаПереклассификация.Обесценение; // см. комментарий перед условием
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИзменениеСтоимостиНМА(ПараметрыПроведения)
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	ТаблицаСуммыСписанияИзменениеСтоимостиНМА = ПараметрыПроведения.ИзменениеСтоимостиНМА.СкопироватьКолонки();
	ТаблицаСуммыСписанияИзменениеСтоимостиНМА.Колонки.Добавить("ПервоначальнаяСтоимостьСписание", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаСуммыСписанияИзменениеСтоимостиНМА.Колонки.Добавить("АмортизацияСписание", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаСуммыСписанияИзменениеСтоимостиНМА.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзменениеСтоимостиНМА", ПараметрыПроведения.ИзменениеСтоимостиНМА);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(Реквизиты.Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоРасходыНаНИОКР", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	СчетаУчетаНМА = Обработки.ПомощникПереходаНаФСБУ14.СчетаУчетаНМА();

	Запрос.УстановитьПараметр("СчетаКапитальныхВложений", СчетаУчетаНМА.СчетаКапитальныхВложений);
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаУчетаНМА.СчетаАмортизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеСтоимости.НематериальныйАктив КАК НематериальныйАктив,
	|	ИзменениеСтоимости.ДействиеПриПереходе КАК ДействиеПриПереходе,
	|	ИзменениеСтоимости.СчетУчета КАК СчетУчета,
	|	ИзменениеСтоимости.СчетАмортизации КАК СчетАмортизации,
	|	ИзменениеСтоимости.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ИзменениеСтоимости.Амортизация КАК Амортизация,
	|	ИзменениеСтоимости.Обесценение КАК Обесценение,
	|	ИзменениеСтоимости.ОбесценениеДоступноеДляВосстановления КАК ОбесценениеДоступноеДляВосстановления
	|ПОМЕСТИТЬ ИзменениеСтоимости
	|ИЗ
	|	&ИзменениеСтоимостиНМА КАК ИзменениеСтоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ХозрасчетныйОстатки.Счет
	|		КОНЕЦ) КАК Счет,
	|	МАКСИМУМ(ХозрасчетныйОстатки.Подразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК НематериальныйАктив,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПервоначальнаяСтоимостьОстаток,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСчетКапитальныхВложений
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ИзменениеСтоимости.СчетУчета
	|				ИЗ
	|					ИзменениеСтоимости КАК ИзменениеСтоимости
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ИзменениеСтоимости.СчетАмортизации
	|				ИЗ
	|					ИзменениеСтоимости КАК ИзменениеСтоимости),
	|			&СубконтоНМА,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ИЗменениеСтоимости.НематериальныйАктив
	|					ИЗ
	|						ИзменениеСтоимости КАК ИзменениеСтоимости)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ХозрасчетныйОстатки.Счет
	|		КОНЕЦ),
	|	МАКСИМУМ(ХозрасчетныйОстатки.Подразделение),
	|	ХозрасчетныйОстатки.Субконто1,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйОстатки.Счет В (&СчетаАмортизации)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ИзменениеСтоимости.СчетУчета
	|				ИЗ
	|					ИзменениеСтоимости КАК ИзменениеСтоимости
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ИзменениеСтоимости.СчетАмортизации
	|				ИЗ
	|					ИзменениеСтоимости КАК ИзменениеСтоимости),
	|			&СубконтоРасходыНаНИОКР,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ИЗменениеСтоимости.НематериальныйАктив
	|					ИЗ
	|						ИзменениеСтоимости КАК ИЗменениеСтоимости)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаКапитальныхВложений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеСтоимости.НематериальныйАктив КАК НематериальныйАктив,
	|	ИзменениеСтоимости.ДействиеПриПереходе КАК ДействиеПриПереходе,
	|	ИзменениеСтоимости.СчетУчета КАК СчетУчета,
	|	ИзменениеСтоимости.СчетАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ИзменениеСтоимости.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ИзменениеСтоимости.Амортизация КАК Амортизация,
	|	ИзменениеСтоимости.Обесценение КАК Обесценение,
	|	ИзменениеСтоимости.ОбесценениеДоступноеДляВосстановления КАК ОбесценениеДоступноеДляВосстановления,
	|	Остатки.ПервоначальнаяСтоимостьОстаток КАК ПервоначальнаяСтоимостьСписание,
	|	Остатки.АмортизацияОстаток КАК АмортизацияСписание
	|ИЗ
	|	ИзменениеСтоимости КАК ИзменениеСтоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ИзменениеСтоимости.НематериальныйАктив = Остатки.НематериальныйАктив
	|			И ИзменениеСтоимости.СчетУчета = Остатки.Счет";
	
	ВыборкаОстатки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОстатки.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСуммыСписанияИзменениеСтоимостиНМА.Добавить(), ВыборкаОстатки);
	КонецЦикла;
	
	Возврат ТаблицаСуммыСписанияИзменениеСтоимостиНМА;
	
КонецФункции

Функция ТаблицаСтоимостиПереклассификацияНМА(ПараметрыПроведения)
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	ТаблицаПереклассификацияНМА = ПараметрыПроведения.ПереклассификацияНМА;
	
	ПоляАналитикиСписания = "СчетСписания, ПодразделениеСписания, СубконтоСписания1, СубконтоСписания2, СубконтоСписания3";
	
	ТаблицаСтоимостиПереклассификацияНМА = ТаблицаПереклассификацияНМА.Скопировать();
	ТаблицаСтоимостиПереклассификацияНМА.Колонки.Добавить("СуммаСписания", БухгалтерскийУчетКлиентСервер.ТипСуммаНеотрицательная());
	
	ТаблицаСтоимостиПереклассификацияНМА.Индексы.Добавить(ПоляАналитикиСписания);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаАналитики", ТаблицаПереклассификацияНМА);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(Реквизиты.Период, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитики.СчетСписания КАК СчетСписания,
	|	ТаблицаАналитики.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ТаблицаАналитики.СубконтоСписания1 КАК СубконтоСписания1,
	|	ТаблицаАналитики.СубконтоСписания2 КАК СубконтоСписания2,
	|	ТаблицаАналитики.СубконтоСписания3 КАК СубконтоСписания3
	|ПОМЕСТИТЬ ТаблицаАналитики
	|ИЗ
	|	&ТаблицаАналитики КАК ТаблицаАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетСписания,
	|	ПодразделениеСписания,
	|	СубконтоСписания1,
	|	СубконтоСписания2,
	|	СубконтоСписания3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.УчетПоПодразделениям
	|			ТОГДА ХозрасчетныйОстатки.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ХозрасчетныйОстатки.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ТаблицаАналитики.СчетСписания
	|				ИЗ
	|					ТаблицаАналитики КАК ТаблицаАналитики),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ХозрасчетныйОстатки.Счет = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ХозрасчетныйОстатки.Счет = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ХозрасчетныйОстатки.Счет = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитики.СчетСписания КАК СчетСписания,
	|	ТаблицаАналитики.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ТаблицаАналитики.СубконтоСписания1 КАК СубконтоСписания1,
	|	ТаблицаАналитики.СубконтоСписания2 КАК СубконтоСписания2,
	|	ТаблицаАналитики.СубконтоСписания3 КАК СубконтоСписания3,
	|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ТаблицаАналитики КАК ТаблицаАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ТаблицаАналитики.СчетСписания = Остатки.Счет
	|			И ТаблицаАналитики.ПодразделениеСписания = Остатки.Подразделение
	|			И ТаблицаАналитики.СубконтоСписания1 = Остатки.Субконто1
	|			И ТаблицаАналитики.СубконтоСписания2 = Остатки.Субконто2
	|			И ТаблицаАналитики.СубконтоСписания3 = Остатки.Субконто3
	|ГДЕ
	|	Остатки.СуммаОстаток > 0";

	РезультатОстатки = Запрос.Выполнить();
	
	ВыборкаОстатки = РезультатОстатки.Выбрать();
	
	Отбор = Новый Структура(ПоляАналитикиСписания);
	
	Пока ВыборкаОстатки.Следующий() Цикл
	
		ЗаполнитьЗначенияСвойств(Отбор, ВыборкаОстатки);
		
		НайденныеСтроки = ТаблицаСтоимостиПереклассификацияНМА.НайтиСтроки(Отбор);
		
		КоэффициентыРаспределения = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КоэффициентыРаспределения.Добавить(НайденнаяСтрока.КоэффициентСтоимости);
		КонецЦикла;
		
		РезультатРаспределенияСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(ВыборкаОстатки.СуммаОстаток, КоэффициентыРаспределения);

		ЗаполнитьРаспределенныеЗначения(НайденныеСтроки, "СуммаСписания", РезультатРаспределенияСуммы);
		
		Если Реквизиты.СтоимостьОпределяетсяПоДаннымУчета Тогда
			ЗаполнитьРаспределенныеЗначения(НайденныеСтроки, "ПервоначальнаяСтоимость", РезультатРаспределенияСуммы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтоимостиПереклассификацияНМА;
	
КонецФункции

Процедура ЗаполнитьРаспределенныеЗначения(НайденныеСтроки, ИмяПоля, РезультатРаспределения)
	Если РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Индекс = 0 По РезультатРаспределения.ВГраница() Цикл
		НайденныеСтроки[Индекс][ИмяПоля] = РезультатРаспределения[Индекс];
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// АМОРТИЗАЦИЯ НМА

Функция ПолучитьПустуюТаблицуАмортизацииНМА()
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета",                                Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ВыбраноПогашениеСтоимостиНУ",                Новый ОписаниеТипов("Булево"));// п. 9 ст. 262
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",                              БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                                ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)
	|				И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)";

	Возврат ТекстЗапроса;

КонецФункции

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru = '%1 для нематериального актива %2 (%3).'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.НематериальныйАктивПредставление, Выборка.Код);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.'");
		СсылкаСообщения = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаЖурналДокументыПоНМА();
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

Функция ПодготовитьРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты, РежимСправкиРасчета = Ложь) Экспорт
	
	Параметры = ПодготовитьПараметрыРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Возврат РассчитатьАмортизацию(
		Реквизиты.Период,
		Реквизиты.Организация,
		Реквизиты.Регистратор,
		Параметры.ТаблицаНМА.ВыгрузитьКолонку("НематериальныйАктив"),
		Реквизиты.ВыдаватьСообщения,
		РежимСправкиРасчета);
		
КонецФункции

Функция РассчитатьАмортизациюПБУ14(Период, Организация, Регистратор, Отбор, ВыдаватьСообщения, РежимСправкиРасчета)

	Результат = НовыйРезультатРасчетаАмортизации();
	
	ДатаРасчета = Период;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Организация, Период);
	
	Если Не ЗначениеЗаполнено(МетодНачисленияАмортизацииНУ) Тогда
		МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НачалоПериодаДата",            НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                       ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));
	Запрос.УстановитьПараметр("Регистратор",                  Регистратор);
	Запрос.УстановитьПараметр("МетодНачисленияАмортизацииНУ", МетодНачисленияАмортизацииНУ);
	
	// Получим список нематериальных активов для расчета амортизации
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе();
	Иначе
		ТаблицаНМА = Новый ТаблицаЗначений;
		ТаблицаНМА.Колонки.Добавить("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
		Для Каждого Объект Из Отбор Цикл
			ТаблицаНМА.Добавить().НематериальныйАктив = Объект;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице();
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент КАК Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособОтраженияРасходов,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент) КАК КоличествоКоэффициентов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииСпособы
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
	|			ИЗ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета
	|		ИНАЧЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив";
	Запрос.Выполнить();
	
	// С целью оптимизации производительности формируем массивы счетов (а не временные таблицы) для отборов в виртуальных таблицах.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	ЛОЖЬ КАК ЭтоСчетНачисленияАмортизации
	|ПОМЕСТИТЬ СписокСчетовНМА
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации,
	|	ИСТИНА
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСчетовНМА.СчетУчета КАК СчетУчета
	|ИЗ
	|	СписокСчетовНМА КАК СписокСчетовНМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСчетовНМА.СчетУчета КАК СчетУчета
	|ИЗ
	|	СписокСчетовНМА КАК СписокСчетовНМА
	|ГДЕ
	|	СписокСчетовНМА.ЭтоСчетНачисленияАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокСчетовНМА";
	Результаты = Запрос.ВыполнитьПакет();
	Запрос.УстановитьПараметр("СчетаБухгалтерскогоУчетаДляНМА", Результаты[1].Выгрузить().ВыгрузитьКолонку("СчетУчета"));
	Запрос.УстановитьПараметр("СчетаНачисленияАмортизацииНМА", Результаты[2].Выгрузить().ВыгрузитьКолонку("СчетУчета"));
	
	Если РежимСправкиРасчета Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка) КАК НематериальныйАктив,
		|	0 КАК СуммаОборотКт,
		|	0 КАК СуммаНУОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОбороты";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОбороты.Субконто1 КАК НематериальныйАктив,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
		|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет В (&СчетаНачисленияАмортизацииНМА),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						СписокНМА.НематериальныйАктив
		|					ИЗ
		|						СписокНМА КАК СписокНМА),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК СуммаНУНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК СуммаПРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт КАК СуммаВРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК СуммаНУНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК СуммаПРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт КАК СуммаВРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаНУКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт КАК СуммаПРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт КАК СуммаВРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК СуммаНУКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК СуммаПРКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт КАК СуммаВРКонечныйОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В (&СчетаБухгалтерскогоУчетаДляНМА),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаНМАОбороты.НематериальныйАктив КАК НематериальныйАктив,
	|	ВыработкаНМАОбороты.КоличествоОборот КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаНМАОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ВыработкаНМАОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК НематериальныйАктив
	|ПОМЕСТИТЬ НМАТолькоЛинейныйМетодНУ
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокНМА.НематериальныйАктив
	|			ИЗ
	|				СписокНМА КАК СписокНМА)
	|	И НематериальныеАктивы.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНМАНачалоПериода.Субконто1 КАК НематериальныйАктив,
	|	АмортизацияНМАНачалоПериода.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияНМАПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В (&СчетаНачисленияАмортизацииНМА),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ)) КАК АмортизацияНМАНачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМА.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	СписокНМА.НематериальныйАктив.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокНМА.НематериальныйАктив.Код КАК Код,
	|	СтоимостьНМА.Подразделение КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРНачальныйОстатокДт, 0) КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРНачальныйОстатокКт, 0) КАК АмортизацияПРНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК Количество,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииСпособы.КоличествоКоэффициентов, 0) КАК КоличествоКоэффициентов,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|				ИНАЧЕ &МетодНачисленияАмортизацииНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатацию,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияНМАПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокНМА КАК СписокНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСпособы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|		ПО (СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов = СпособыОтраженияРасходовПоАмортизацииСпособы.СпособОтраженияРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК СтоимостьНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМА.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК АмортизацияНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	|		ПО СписокНМА.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ПО СписокНМА.НематериальныйАктив = ХозрасчетныйОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	|		ПО СписокНМА.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНМАПриПереходеКЛинейномуМетоду КАК АмортизацияНМАПриПереходеКЛинейномуМетоду
	|		ПО СписокНМА.НематериальныйАктив = АмортизацияНМАПриПереходеКЛинейномуМетоду.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО СписокНМА.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|ГДЕ
	|	НЕ(ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ
	|				И ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ)";
	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
	
	// Чтобы во время выполнения дальнейшего алгоритма не использовались ненужные уже ресурсы (временные таблицы).
	МенеджерВременныхТаблиц.Закрыть();
	
	Пока ВыборкаПоНМА.Следующий() Цикл

		СуммаАмортизацииБУ                  = 0;
		СуммаАмортизацииНУ                  = 0;
		СуммаАмортизацииПР                  = 0;
		СуммаАмортизацииВР                  = 0;
		НормаАмортизации                    = 0;
		СтоимостьДляВычисленияАмортизацииНУ = 0;
		ОстаточнаяСтоимость                 = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан счет для начисления амортизации'"),
					Регистратор, Результат.Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ВыборкаПоНМА.НачислятьАмортизациюБУ Тогда

			Если ВыборкаПоНМА.АмортизацияОборот <> 0 Тогда
				Если ВыдаватьСообщения И Отбор.Количество() > 0 Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Амортизация в этом месяце уже начислялась '"),
						Регистратор, Результат.Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
				Если ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан способ амортизации '"),
						Регистратор, Результат.Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации = 0 Тогда
				Если ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Стоимость равна нулю '"),
						Регистратор, Результат.Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				Если ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Срок использования равен нулю '"),
						Регистратор, Результат.Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда
			
				СуммаАмортизации = 0;

				Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
		 
					СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
					СуммаАмортизации        = СуммаГодовойАмортизации / 12;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Объем продукции для вычисления не определен '"),
								Регистратор, Результат.Отказ);
						КонецЕсли; 
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0 ;
					Иначе
						СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

					ОстаточнаяСтоимость = Макс(0, ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток);
					ОставшийсяСрокПолезногоИспользования = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
														 - УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаПоНМА.Период, ДатаРасчета)
														 + 1;
					Коэффициент = ?(ВыборкаПоНМА.Коэффициент = 0, 1, ВыборкаПоНМА.Коэффициент);
					
					СуммаАмортизации = ?(ОставшийсяСрокПолезногоИспользования > 0,
										 ОстаточнаяСтоимость * (Коэффициент / ОставшийсяСрокПолезногоИспользования),
										 0);

				КонецЕсли;

				ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
				Если ВсегоОсталосьСписать - СуммаАмортизации < 0.01 
					И ВсегоОсталосьСписать - СуммаАмортизации > 0 Тогда 
					//погрешности при вычислениях
					СуммаАмортизации = ВсегоОсталосьСписать;
					
				КонецЕсли;
				
				БУНеОкругленная = Мин(СуммаАмортизации, ВсегоОсталосьСписать);
				Если ВыборкаПоНМА.СтоимостьНачальныйОстаток = 0 Тогда
					ПРНеОкругленная = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				Иначе
					ПРНеОкругленная = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток * (БУНеОкругленная / ВыборкаПоНМА.СтоимостьНачальныйОстаток);
				КонецЕсли;
				РазницаНеОкругленная = БУНеОкругленная - ПРНеОкругленная;
				
				СуммаАмортизацииБУ = Окр(БУНеОкругленная, 2);
				
				Если ВыборкаПоНМА.СтоимостьПРНачальныйОстаток = ВыборкаПоНМА.АмортизацияПРНачальныйОстаток Тогда 
					СуммаАмортизацииПР = 0;
				ИначеЕсли РазницаНеОкругленная < 0.005 И РазницаНеОкругленная > -0.005 Тогда 
					СуммаАмортизацииПР = СуммаАмортизацииБУ;
				Иначе
					СуммаАмортизацииПР = Окр(ПРНеОкругленная, 2);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если ВыборкаПоНМА.НачислятьАмортизациюНУ Тогда
				
				Если ВыборкаПоНМА.АмортизацияНУОборот <> 0 Тогда
					Если ВыдаватьСообщения И Отбор.Количество() > 0 Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Амортизация (НУ) в этом месяце уже начислялась '"),
							Регистратор, Результат.Отказ);
					КонецЕсли; 
					Пропустить = Истина; 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.МетодНачисленияАмортизации) Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан метод начисления амортизации (НУ) в настройках налога на прибыль '"),
							Регистратор, Результат.Отказ);
					КонецЕсли;
					Пропустить = Истина;                                                                                     
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНУНачальныйОстаток) Тогда
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И ВыборкаПоНМА.СрокПолезногоИспользования = 0 Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Срок использования (НУ) равен нулю '"),
							Регистратор, Результат.Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.АмортизационнаяГруппа) Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'В справочнике не указана амортизационная группа '"),
							Регистратор, Результат.Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					
					Если ВыборкаПоНМА.СчетУчета = ВыборкаПоНМА.СчетНачисленияАмортизации Тогда // НИОКР.
						СтоимостьДляВычисленияАмортизацииНУ = ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ;
					Иначе
						СтоимостьДляВычисленияАмортизацииНУ = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
					КонецЕсли; 
					
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоНМА.СрокПолезногоИспользования);
					
					СпециальныйКоэффициент = ?(ВыборкаПоНМА.СпециальныйКоэффициент = 0, 1, ВыборкаПоНМА.СпециальныйКоэффициент);
					
					Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
						
						СтоимостьДляВычисленияАмортизацииНУ = СтоимостьДляВычисленияАмортизацииНУ - ВыборкаПоНМА.АмортизацияПриПереходеКЛинейномуМетоду;
						ФактическийСрокПриПереходеКЛинейномуМетоду = Макс(ВыборкаПоНМА.ФактическийСрокПриПереходеКЛинейномуМетоду, 0);
						СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ФактическийСрокПриПереходеКЛинейномуМетоду;
						
						СуммаАмортизации = СтоимостьДляВычисленияАмортизацииНУ / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						
					ИначеЕсли ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
						
						НормаАмортизации = УправлениеВнеоборотнымиАктивами.ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоНМА.АмортизационнаяГруппа);
						
						Если НЕ (НормаАмортизации = Неопределено) Тогда
							
							СуммаАмортизации = (ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100 
							* СпециальныйКоэффициент;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
					Если ВсегоОсталосьСписать - СуммаАмортизации < 0.01 
						И ВсегоОсталосьСписать - СуммаАмортизации > 0 Тогда
						//погрешности при вычислениях
						СуммаАмортизации = ВсегоОсталосьСписать;
						
					КонецЕсли;
					
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;			
		
		Если СуммаАмортизацииБУ > 0
		 ИЛИ СуммаАмортизацииНУ > 0
		 ИЛИ СуммаАмортизацииПР <> 0
		 ИЛИ СуммаАмортизацииВР <> 0 Тогда
	
			СтрокаАмортизации = Результат.ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.ОбъектУчета               = ВыборкаПоНМА.НематериальныйАктив;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоНМА.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоНМА.СчетНачисленияАмортизации;
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.СуммаАмортизацииБУ        = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			СтрокаАмортизации.СуммаАмортизацииПР        = ?(ПоддержкаПБУ18, СуммаАмортизацииПР, 0);
			СтрокаАмортизации.СуммаАмортизацииВР        = ?(ПоддержкаПБУ18, СуммаАмортизацииВР, 0);
			СтрокаАмортизации.Подразделение             = ВыборкаПоНМА.ПодразделениеОрганизации;
			
			//Данные для справки-расчета
			СтрокаСправкаРасчет = Результат.СправкаРасчет.Добавить();
			
			ОстаточнаяСтоимостьБУ = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
			ОстаточнаяСтоимостьНУ = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
				
			ФактическийСрокИспользованияБУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоНМА.ДатаВводаВЭксплуатацию, ДатаРасчета) - 1;
			ФактическийСрокИспользованияНУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоНМА.ДатаВводаВЭксплуатацию, ДатаРасчета) - 1;
				
			ОстатокСрокаПолезногоИспользованияБУ = Макс(0, ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации - ФактическийСрокИспользованияБУ);
			ОстатокСрокаПолезногоИспользованияНУ = Макс(0, ВыборкаПоНМА.СрокПолезногоИспользования - ФактическийСрокИспользованияНУ);
			
			Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
				СтоимостьДляВычисленияАмортизацииБУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
			ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка;
				СтоимостьДляВычисленияАмортизацииБУ = ОстаточнаяСтоимость;
			ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции;
				СтоимостьДляВычисленияАмортизацииБУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
			
			СтрокаСправкаРасчет.ПериодРасчета                         = КонецМесяца(ДатаРасчета);
			СтрокаСправкаРасчет.Объект                                = ВыборкаПоНМА.НематериальныйАктив;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииБУ         = СпособНачисленияАмортизацииБУ;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииНУ         = ВыборкаПоНМА.МетодНачисленияАмортизации;
			СтрокаСправкаРасчет.АмортизационнаяГруппа                 = ВыборкаПоНМА.АмортизационнаяГруппа;
			СтрокаСправкаРасчет.ИнвентарныйНомер                      = ВыборкаПоНМА.Код;
			СтрокаСправкаРасчет.ДатаВводаВЭксплуатацию                = ВыборкаПоНМА.ДатаВводаВЭксплуатацию;
			СтрокаСправкаРасчет.НачислятьАмортизациюБУ                = ВыборкаПоНМА.НачислятьАмортизациюБУ;
			СтрокаСправкаРасчет.НачислятьАмортизациюНУ                = ВыборкаПоНМА.НачислятьАмортизациюНУ;
			СтрокаСправкаРасчет.НормаАмортизации                      = НормаАмортизации;
			СтрокаСправкаРасчет.СтоимостьБУ                           = ВыборкаПоНМА.СтоимостьНачальныйОстаток;
			СтрокаСправкаРасчет.СтоимостьНУ                           = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьБУ                 = ОстаточнаяСтоимостьБУ;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьНУ                 = ОстаточнаяСтоимостьНУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииБУ             = СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииНУ             = СтоимостьДляВычисленияАмортизацииНУ;
			СтрокаСправкаРасчет.СуммаАмортизацииБУ                    = СуммаАмортизацииБУ;
			СтрокаСправкаРасчет.СуммаАмортизацииНУ                    = СуммаАмортизацииНУ;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияБУ          = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияНУ          = ВыборкаПоНМА.СрокПолезногоИспользования;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияБУ  = ОстатокСрокаПолезногоИспользованияБУ;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияНУ  = ОстатокСрокаПолезногоИспользованияНУ;
			СтрокаСправкаРасчет.КоэффициентАмортизации                = ВыборкаПоНМА.Коэффициент;
			СтрокаСправкаРасчет.КоэффициентАмортизацииНУ              = ВыборкаПоНМА.СпециальныйКоэффициент;
			СтрокаСправкаРасчет.СпособыОтраженияРасходовПоАмортизации = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
			СтрокаСправкаРасчет.ОбъемПродукцииРабот                   = ВыборкаПоНМА.Количество;
			СтрокаСправкаРасчет.ОбъемПродукцииРаботДляАмортизации     = ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
			
			Если ПоддержкаПБУ18 Тогда
				
				СтоимостьВРНачальныйОстаток = ВыборкаПоНМА.СтоимостьНачальныйОстаток
					- ВыборкаПоНМА.СтоимостьНУНачальныйОстаток
					- ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
					
				ОстаточнаяСтоимостьПР = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток - ВыборкаПоНМА.АмортизацияПРНачальныйОстаток;
				ОстаточнаяСтоимостьВР = ОстаточнаяСтоимостьБУ - ОстаточнаяСтоимостьНУ - ОстаточнаяСтоимостьПР;
				
				СтрокаСправкаРасчет.СтоимостьПР               = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				СтрокаСправкаРасчет.СтоимостьВР               = СтоимостьВРНачальныйОстаток;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьПР     = ОстаточнаяСтоимостьПР;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьВР     = ОстаточнаяСтоимостьВР;
				СтрокаСправкаРасчет.СтоимостьДляАмортизацииПР = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				СтрокаСправкаРасчет.СуммаАмортизацииПР        = СуммаАмортизацииПР;
				СтрокаСправкаРасчет.СуммаАмортизацииВР        = СуммаАмортизацииВР;
			
			КонецЕсли;
	
		КонецЕсли;
			
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор,"       // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицыАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты);

	ПараметрыНачисленияАмортизации = Новый Структура;

	РасчетАмортизации = ПодготовитьРасчетАмортизацииНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты);
	ТаблицаАмортизации = РасчетАмортизации.ТаблицаАмортизации;

	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("СправкаРасчет", РасчетАмортизации.СправкаРасчет);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);
	
	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);

	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);
	
	Возврат ПараметрыНачисленияАмортизации;

КонецФункции

Функция ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ИмяСписка,"   // <Строка>
	+ "ВыдаватьСообщения," // <Булево>
	+ "Содержание";  // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

#Область РасчетАмортизации // С учетом ФСБУ 14, с 2024 года

Функция РассчитатьАмортизацию(Период, Организация, Регистратор, Отбор, ВыдаватьСообщения, РежимСправкиРасчета)

	Если ПрименяетсяПБУ14(Период) Тогда
		// Единый расчет в бухгалтерском и налоговом учете
		Возврат РассчитатьАмортизациюПБУ14(Период, Организация, Регистратор, Отбор, ВыдаватьСообщения, РежимСправкиРасчета);
	Иначе
		
		// Расчет, используемый с 2024 года - раздельный для бухгалтерского и налогового учета
		
		ОтборОбъектов = Отбор;
		
		ПериодРасчета = КонецМесяца(Период);
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
			// Отбор, как правило, не используется
			Если Не ЗначениеЗаполнено(ОтборОбъектов) Тогда
				ОтборОбъектов = Неопределено;
			КонецЕсли;
		Иначе
			// Выбытие актива
			ПериодРасчета = Новый МоментВремени(Период, Регистратор);
		КонецЕсли;
		
		РасчетБухгалтерскийУчет = АмортизацияАктивов.РассчитатьАмортизацию(
			ТипОбъектов(),
			ПериодРасчета,
			Организация,
			ОтборОбъектов);
		
		СчетаУчета = СчетаУчетаНМА();
		
		РасчетНалоговыйУчет = РассчитатьАмортизациюНалогНаПрибыль(ПериодРасчета, Организация, СчетаУчета, ОтборОбъектов);
		
		Возврат ОбъединитьРасчетАмортизации(РасчетБухгалтерскийУчет, РасчетНалоговыйУчет, ПериодРасчета, Организация, СчетаУчета);
		
	КонецЕсли;
	
КонецФункции

Функция НовыйРезультатРасчетаАмортизации()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТаблицаАмортизации", ПолучитьПустуюТаблицуАмортизацииНМА());
	Результат.Вставить("Отказ",              Ложь);
	Результат.Вставить("СправкаРасчет",      УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации"));
	Результат.СправкаРасчет.Колонки.Удалить("Период");
	
	Возврат Результат;
	
КонецФункции

Функция ОбъединитьРасчетАмортизации(РасчетБухгалтерскийУчет, РасчетНалоговыйУчет, Период, Организация, СчетаУчета)
	
	Результат = НовыйРезультатРасчетаАмортизации();
	
	// Получаем сведения для проводок и справки-расчета, не связанные с расчетом амортизации
	Объекты = РасчетБухгалтерскийУчет.ОценкаСтоимости.ВыгрузитьКолонку("Объект");
	Если РасчетНалоговыйУчет <> Неопределено Тогда
		ОбъектыНУ = РасчетНалоговыйУчет.ТаблицаАмортизации.ВыгрузитьКолонку("ОбъектУчета");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Объекты, ОбъектыНУ, Истина);
	КонецЕсли;
	
	Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
		// Расчет при выбытии - не должен захватывать движения документа выбытия
		ДатаРасчета = Период.Дата;
		ГраницаРасчета = Новый Граница(Период, ВидГраницы.Исключая);
	Иначе
		// Расчет за месяц - должен захватывать месяц целиком
		ДатаРасчета = Период;
		ГраницаРасчета = Новый Граница(ДатаРасчета, ВидГраницы.Включая);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объекты",     Объекты);
	Запрос.УстановитьПараметр("Период",      ГраницаРасчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчета",  СчетаУчета.Баланс);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК Объект,
	|	НематериальныеАктивы.Код КАК ИнвентарныйНомер,
	|	НематериальныеАктивы.АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&Объекты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчета.НематериальныйАктив КАК Объект,
	|	СчетаУчета.СчетУчета КАК СчетУчета,
	|	СчетаУчета.СчетНачисленияАмортизации КАК СчетАмортизации
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Объекты.Объект
	|					ИЗ
	|						Объекты КАК Объекты)) КАК СчетаУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	СчетАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Стоимость.Субконто1 КАК Объект,
	|	Стоимость.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Стоимость.Подразделение КАК Справочник.ПодразделенияОрганизаций), ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	Стоимость.СуммаОстаток КАК ОстатокБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУОстаток, 0) КАК ОстатокНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПРОстаток, 0) КАК ОстатокПР,
	|	ЕСТЬNULL(Стоимость.СуммаВРОстаток, 0) КАК ОстатокВР
	|ПОМЕСТИТЬ ОстаткиСтоимости
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчета), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы), Организация = &Организация) КАК Стоимость
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияСтоимости.Объект КАК Объект,
	|	МАКСИМУМ(ПодразделенияСтоимости.Подразделение) КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОбъектов
	|ИЗ
	|	СчетаУчета КАК СчетаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиСтоимости КАК ПодразделенияСтоимости
	|		ПО СчетаУчета.Объект = ПодразделенияСтоимости.Объект
	|			И СчетаУчета.СчетУчета = ПодразделенияСтоимости.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияСтоимости.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Объект КАК Объект,
	|	СУММА(Остатки.ОстатокБУ) КАК ОстатокБУ,
	|	СУММА(Остатки.ОстатокНУ) КАК ОстатокНУ,
	|	СУММА(Остатки.ОстатокПР) КАК ОстатокПР,
	|	СУММА(Остатки.ОстатокВР) КАК ОстатокВР
	|ПОМЕСТИТЬ ОстаткиРазниц
	|ИЗ
	|	ОстаткиСтоимости КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияАмортизации.НематериальныйАктив КАК Объект,
	|	НаправленияАмортизации.СпособОтраженияРасходов КАК Направление
	|ПОМЕСТИТЬ НаправленияАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Объекты.Объект
	|					ИЗ
	|						Объекты КАК Объекты)) КАК НаправленияАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Объект КАК Объект,
	|	Объекты.Объект КАК ОбъектУчета,
	|	Объекты.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	Объекты.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ЕСТЬNULL(СчетаУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(СчетаУчета.СчетАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетАмортизации,
	|	ЕСТЬNULL(НаправленияАмортизации.Направление, ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)) КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(ПодразделенияОбъектов.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ОстаткиРазниц.ОстатокБУ, 0) КАК ОстатокБУ,
	|	ЕСТЬNULL(ОстаткиРазниц.ОстатокНУ, 0) КАК ОстатокНУ,
	|	ЕСТЬNULL(ОстаткиРазниц.ОстатокПР, 0) КАК ОстатокПР,
	|	ЕСТЬNULL(ОстаткиРазниц.ОстатокВР, 0) КАК ОстатокВР
	|ИЗ
	|	Объекты КАК Объекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Объекты.Объект = СчетаУчета.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаправленияАмортизации КАК НаправленияАмортизации
	|		ПО Объекты.Объект = НаправленияАмортизации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОбъектов КАК ПодразделенияОбъектов
	|		ПО Объекты.Объект = ПодразделенияОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРазниц КАК ОстаткиРазниц
	|		ПО Объекты.Объект = ОстаткиРазниц.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентарныйНомер,
	|	Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтандартныйСчетАмортизации = СтандартныйСчетАмортизации(СчетаУчета.Амортизация);
	ВидИспользованияСумм = БухгалтерскийУчет.ИспользоватьСуммыНалогНаПрибыль(Организация, ДатаРасчета);
	ИспользоватьСуммыРазниц = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьБУ = РасчетБухгалтерскийУчет.ОценкаСтоимости.Найти(Выборка.Объект, "Объект");
		Если РасчетНалоговыйУчет = Неопределено Тогда
			ЗаписьПроводкиНУ = Неопределено;
			ЗаписьРасчетНУ   = Неопределено;
		Иначе
			ЗаписьПроводкиНУ = РасчетНалоговыйУчет.ТаблицаАмортизации.Найти(Выборка.Объект, "ОбъектУчета");
			ЗаписьРасчетНУ   = РасчетНалоговыйУчет.СправкаРасчет.Найти(Выборка.Объект, "Объект");
		КонецЕсли;
		
		ЗаписьПроводкиОбщая = Результат.ТаблицаАмортизации.Добавить();
		ЗаписьРасчетОбщая = Результат.СправкаРасчет.Добавить();
		
		// В первую очередь заполняем данные НУ, так как ее коллекции содержат заведомо незаполненные поля для БУ
		Если ЗаписьПроводкиНУ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЗаписьПроводкиОбщая, ЗаписьПроводкиНУ);
		КонецЕсли;
		
		Если ЗаписьРасчетНУ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЗаписьРасчетОбщая, ЗаписьРасчетНУ);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаписьПроводкиОбщая, Выборка);
		ЗаписьПроводкиОбщая.СчетНачисленияАмортизации = Выборка.СчетАмортизации;
		Если Не ЗначениеЗаполнено(ЗаписьПроводкиОбщая.СчетНачисленияАмортизации) Тогда
			ЗаписьПроводкиОбщая.СчетНачисленияАмортизации = СтандартныйСчетАмортизации;
		КонецЕсли;
		
		ЗаписьРасчетОбщая.СпособыОтраженияРасходовПоАмортизации = ЗаписьПроводкиОбщая.НаправлениеАмортизации;
		
		ЗаполнитьЗначенияСвойств(ЗаписьРасчетОбщая, Выборка);
		ЗаполнитьЗначенияСвойств(ЗаписьРасчетОбщая, ЗаписьПроводкиОбщая);
		ЗаписьРасчетОбщая.ПериодРасчета = КонецМесяца(ДатаРасчета);
		ЗаписьРасчетОбщая.Организация   = Организация;
		
		Если ЗаписьБУ = Неопределено Тогда
			ЗаписьРасчетОбщая.ОграничениеРаздела = Перечисления.РазделыРасчетаАмортизации.ТолькоНалоговыйУчет;
		Иначе
			
			ЗаписьПроводкиОбщая.СуммаАмортизацииБУ = ЗаписьБУ.СуммаПроводки;
			
			КоличествоЗаписейРасчета = ЗаписьБУ.РасчетАмортизации.Количество();
			Если КоличествоЗаписейРасчета = 1 Тогда
				ЗаполнитьЗаписьСправкиРасчетаАмортизации(ЗаписьРасчетОбщая, ЗаписьБУ, ЗаписьБУ.РасчетАмортизации[0]);
			ИначеЕсли КоличествоЗаписейРасчета = 0 Тогда
				ЗаполнитьЗаписьСправкиРасчетаАмортизации(ЗаписьРасчетОбщая, ЗаписьБУ, Неопределено);
			Иначе
				// Эта запись только для налогового учета
				ЗаписьРасчетОбщая.ОграничениеРаздела = Перечисления.РазделыРасчетаАмортизации.ТолькоНалоговыйУчет;
				// Для бухгалтерского создаем отдельные записи
				Для Каждого ЗаписьРасчетАмортизации Из ЗаписьБУ.РасчетАмортизации Цикл
					ЗаписьРасчетБухгалтерскийУчет = Результат.СправкаРасчет.Добавить();
					ЗаписьРасчетБухгалтерскийУчет.ПериодРасчета      = ЗаписьРасчетАмортизации.Начало;
					ЗаписьРасчетБухгалтерскийУчет.КонецПериодаЗатрат = ЗаписьРасчетАмортизации.Конец;
					ЗаписьРасчетБухгалтерскийУчет.ОграничениеРаздела = Перечисления.РазделыРасчетаАмортизации.ТолькоБухгалтерскийУчет;
					ЗаполнитьЗаписьСправкиРасчетаАмортизации(ЗаписьРасчетБухгалтерскийУчет, ЗаписьБУ, ЗаписьРасчетАмортизации);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьРазницыПБУ18(ЗаписьПроводкиОбщая, ЗаписьРасчетОбщая, Выборка, ИспользоватьСуммыРазниц);
			
	КонецЦикла;
	
	// В отдельных случаях требуется разделить проводки в БУ и НУ:
	// НМА, признаваемый в бухгалтерском учете, может, по выбору организации, погашаться в налоговом учете
	// в специальном порядке, установленном п. 9 ст. 262 - в программе в этом случае принято,
	// что накопленная амортизация не отражается в учете.
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВыбраноПогашениеСтоимостиНУ", Истина);
	ЗаписиПогашениеСтоимости = Результат.ТаблицаАмортизации.НайтиСтроки(Отбор);
	
	Для Каждого ЗаписьНУ Из ЗаписиПогашениеСтоимости Цикл
		
		Если ЗаписьНУ.СуммаАмортизацииБУ <> 0 И ЗаписьНУ.СуммаАмортизацииНУ <> 0 Тогда
			
			ИндексЗаписиБУ = Результат.ТаблицаАмортизации.Индекс(ЗаписьНУ); // БУ ставим перед НУ
			ЗаписьБУ = Результат.ТаблицаАмортизации.Вставить(ИндексЗаписиБУ);
			ЗаполнитьЗначенияСвойств(ЗаписьБУ, ЗаписьНУ, , "СуммаАмортизацииБУ,СуммаАмортизацииНУ,СуммаАмортизацииПР,СуммаАмортизацииВР");
			// ЗаписьНУ содержит два комплекта сумм: БУ и НУ.
			// Перенесем из нее суммы, которые не относятся к НУ (БУ и ПР), сопровождая это корректировкой ВР по формуле БУ = НУ+ПР+ВР
			ПереносимаяСумма = ЗаписьНУ.СуммаАмортизацииБУ;
			ЗаписьБУ.СуммаАмортизацииБУ = ЗаписьБУ.СуммаАмортизацииБУ + ПереносимаяСумма;
			ЗаписьБУ.СуммаАмортизацииВР = ЗаписьБУ.СуммаАмортизацииВР + ПереносимаяСумма;
			ЗаписьНУ.СуммаАмортизацииБУ = ЗаписьНУ.СуммаАмортизацииБУ - ПереносимаяСумма;
			ЗаписьНУ.СуммаАмортизацииВР = ЗаписьНУ.СуммаАмортизацииВР - ПереносимаяСумма;
			
			ПереносимаяСумма = ЗаписьНУ.СуммаАмортизацииПР;
			ЗаписьБУ.СуммаАмортизацииПР = ЗаписьБУ.СуммаАмортизацииПР + ПереносимаяСумма;
			ЗаписьБУ.СуммаАмортизацииВР = ЗаписьБУ.СуммаАмортизацииВР - ПереносимаяСумма;
			ЗаписьНУ.СуммаАмортизацииПР = ЗаписьНУ.СуммаАмортизацииПР - ПереносимаяСумма;
			ЗаписьНУ.СуммаАмортизацииВР = ЗаписьНУ.СуммаАмортизацииВР + ПереносимаяСумма;
			
		КонецЕсли;
		
		ЗаписьНУ.СчетНачисленияАмортизации = ЗаписьНУ.СчетУчета;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗаписьСправкиРасчетаАмортизации(СправкаРасчет, ОценкаСтоимости, РасчетАмортизации)
	
	СправкаРасчет.НачислятьАмортизациюБУ        = ОценкаСтоимости.ПодлежитАмортизации;
	СправкаРасчет.СпособНачисленияАмортизацииБУ = ОценкаСтоимости.СпособАмортизацииЛокальный;
	СправкаРасчет.ЛиквидационнаяСтоимость       = ОценкаСтоимости.ЛиквидационнаяСтоимость;
	
	Если РасчетАмортизации = Неопределено Тогда
		СправкаРасчет.СтоимостьБУ                   = ОценкаСтоимости.ЗатратыВсего;
		СправкаРасчет.ОстаточнаяСтоимостьБУ         = ОценкаСтоимости.БалансоваяСтоимость;
		СправкаРасчет.СтоимостьДляАмортизацииБУ     = ОценкаСтоимости.АмортизируемаяВеличина;
		СправкаРасчет.СуммаАмортизацииБУ            = ОценкаСтоимости.Амортизация;
		СправкаРасчет.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный; // справка-расчет требует заполнения поля
		Возврат;
	КонецЕсли;
	
	СправкаРасчет.СтоимостьБУ                   = РасчетАмортизации.ЗатратыВсего;
	СправкаРасчет.ОстаточнаяСтоимостьБУ         = РасчетАмортизации.БалансоваяСтоимость;
	СправкаРасчет.СтоимостьДляАмортизацииБУ     = РасчетАмортизации.АмортизируемаяВеличина;
	СправкаРасчет.СуммаАмортизацииБУ            = РасчетАмортизации.Амортизация;
	
	РегистрыСведений.РасчетАмортизации.УстановитьНеполныйПериодЗаписи(
		СправкаРасчет,
		РасчетАмортизации.Начало,
		РасчетАмортизации.Конец);
	
	Если ОценкаСтоимости.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
		СправкаРасчет.ДатаВводаВЭксплуатацию               = РасчетАмортизации.НачалоОтсчетаРесурсМесяцев;
		СправкаРасчет.ОстатокСрокаПолезногоИспользованияБУ = РасчетАмортизации.СрокИспользованияОставшийся;
		СправкаРасчет.СрокПолезногоИспользованияБУ         = РасчетАмортизации.ОбщийРесурсМесяцев;
	ИначеЕсли ОценкаСтоимости.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
		СправкаРасчет.ОстатокОбъемаПродукции            = РасчетАмортизации.РесурсОставшийся;
		СправкаРасчет.ОбъемПродукцииРаботДляАмортизации = РасчетАмортизации.РесурсОставшийся;
		СправкаРасчет.ОбъемПродукцииРабот               = РасчетАмортизации.РесурсИспользованный;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправкаРасчет.ДатаВводаВЭксплуатацию) 
		И РасчетАмортизации.Начало <> НачалоМесяца(РасчетАмортизации.Начало) Тогда
		// Даже если значение фактически не используется в расчете, попробуем его заполнить -
		// это нужно, так как в справке-расчете это поле участвует в группировке.
		СправкаРасчет.ДатаВводаВЭксплуатацию = РасчетАмортизации.Начало;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьРазницыПБУ18(ЗаписьПроводки, ЗаписьРасчет, ДанныеПостоянныхРазниц, ИспользоватьСуммыРазниц)
	
	Если Не ИспользоватьСуммыРазниц Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВнеоборотнымиАктивами.РассчитатьПостоянныеРазницы(
		ЗаписьРасчет,
		ЗаписьПроводки.СуммаАмортизацииБУ,
		ДанныеПостоянныхРазниц);
	ЗаполнитьЗначенияСвойств(ЗаписьПроводки, ЗаписьРасчет, "СуммаАмортизацииВР, СуммаАмортизацииПР");
	
КонецПроцедуры

Функция СтандартныйСчетАмортизации(СчетаАмортизации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Ссылка КАК Ссылка,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаАмортизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапретитьИспользоватьВПроводках,
	|	Порядок,
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
	КонецЕсли;
	
КонецФункции

Функция СчетаУчетаНМА()
	
	ТипОбъектов = ТипОбъектов();
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("Активы",      АмортизацияАктивов.СчетаАктивов(ТипОбъектов));
	СчетаУчета.Вставить("Амортизация", АмортизацияАктивов.СчетаАмортизации(ТипОбъектов));
	СчетаУчета.Вставить("Баланс",      Новый Массив);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета.Баланс, СчетаУчета.Активы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета.Баланс, СчетаУчета.Амортизация);
	
	Возврат СчетаУчета;
	
КонецФункции

#Область НалогНаПрибыль

Функция РассчитатьАмортизациюНалогНаПрибыль(Период, Организация, СчетаУчета, Отбор = Неопределено)
	
	Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
		ДатаРасчета = Период.Дата;
		КонецПериодаРасчета = Новый Граница(Период, ВидГраницы.Исключая);
	Иначе
		ДатаРасчета = Период;
		КонецПериодаРасчета = КонецМесяца(ДатаРасчета) + 1;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаРасчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = НовыйРезультатРасчетаАмортизации();
	// Поля ОбъектУчета, Объект в Результат - ключевые:
	// - обеспечивается их уникальность в таблице
	// - после заполнения по ним создаются индексы
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("НачалоПериода",       Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаРасчета",         ДатаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецПериодаРасчета);
	Запрос.УстановитьПараметр("СчетаАктивов",             СчетаУчета.Активы);
	Запрос.УстановитьПараметр("СчетаАмортизации",         СчетаУчета.Амортизация);
	Запрос.УстановитьПараметр("СчетаБалансовойСтоимости", СчетаУчета.Баланс);
	
	// Получим список нематериальных активов для расчета амортизации - переиспользуем код для ПБУ 14
	Если Отбор = Неопределено Тогда
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе();
	Иначе
		ТаблицаНМА = Новый ТаблицаЗначений;
		ТаблицаНМА.Колонки.Добавить("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
		Для Каждого Объект Из Отбор Цикл
			ТаблицаНМА.Добавить().НематериальныйАктив = Объект;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице();
	КонецЕсли;
	Запрос.Выполнить();
	
	// Амортизация линейным методом в налоговом учете ведется, как правило, исходя из первоначальной стоимости объекта
	// (суммы затрат на создание) и срока полезного использования, отсчитываемого от даты его создания.
	//
	// Однако, есть исключения.
	// Так, по основным средствам, которые ранее амортизировались нелинейным методом,
	// расчет ведется исходя из стоимости, сформировавшейся на дату перехода (формула в п. 1 ст. 257 НК РФ)
	// и срока от даты перехода на линейный метод (п. 13 ст. 259.2).
	//
	// При применении этих положений принимается во внимание, что до 2009 года нелинейным назывался
	// существенно другой метод амортизации (изменения внесены законами от 22.07.2008 № 158-ФЗ
	// и от 26.11.2008 № 224-ФЗ). Отсылки в коде к 2009 году связаны именно с этим.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сведения.НематериальныйАктив КАК Объект,
	|	Сведения.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимость,
	|	Сведения.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	Сведения.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	Сведения.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	Сведения.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009
	|ПОМЕСТИТЬ ПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК Сведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БалансоваяСтоимость.Субконто1 КАК Объект,
	|	СУММА(ВЫБОР
	|			КОГДА БалансоваяСтоимость.Счет В (&СчетаАктивов)
	|				ТОГДА ЕСТЬNULL(БалансоваяСтоимость.СуммаНУОстатокДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПервоначальнаяСтоимость,
	|	СУММА(ЕСТЬNULL(БалансоваяСтоимость.СуммаНУОстаток, 0)) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ СтоимостьНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаБалансовойСтоимости),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК БалансоваяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансоваяСтоимость.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БалансоваяСтоимость.Субконто1 КАК Объект,
	|	СУММА(ЕСТЬNULL(БалансоваяСтоимость.СуммаНУОстаток, 0)) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ СтоимостьКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаРасчета,
	|			Счет В (&СчетаБалансовойСтоимости),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК БалансоваяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансоваяСтоимость.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	События.НематериальныйАктив КАК Объект,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(События.Период, ДЕНЬ)) КАК Дата
	|ПОМЕСТИТЬ НачалоЭксплуатации
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК События
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокНМА КАК СписокНМА
	|		ПО События.НематериальныйАктив = СписокНМА.НематериальныйАктив
	|ГДЕ
	|	События.Период <= &ДатаРасчета
	|	И События.Организация = &Организация
	|	И События.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	События.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальныйКоэффициентАмортизации.НематериальныйАктив КАК Объект,
	|	СпециальныйКоэффициентАмортизации.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ СпециальныйКоэффициентАмортизации
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СпециальныйКоэффициентАмортизации
	|ГДЕ
	|	СпециальныйКоэффициентАмортизации.СпециальныйКоэффициент > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));
	
	ОбщийМетодНачисленияАмортизации = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Организация, ДатаРасчета);
	
	ДатаОтказаНелинейныйМетод = '0001-01-01';
	Если ОбщийМетодНачисленияАмортизации <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
		ДатаОтказаНелинейныйМетод = УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(
			ДатаРасчета,
			Организация,
			Истина);
	КонецЕсли;
	
	СоздатьКорректировкаПереходаНаЛинейныйМетод(
		МенеджерВременныхТаблиц,
		ДатаОтказаНелинейныйМетод,
		Организация,
		СчетаУчета.Амортизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокНМА.НематериальныйАктив КАК Объект,
	|	СписокНМА.НематериальныйАктив.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокНМА.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР) КАК ВыбраноПогашениеСтоимости,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьЗафиксированная,
	|	ПервоначальныеСведения.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	НачалоЭксплуатации.Дата КАК ДатаНачалаЭксплуатации,
	|	СтоимостьНачалоПериода.ПервоначальнаяСтоимость КАК СуммаЗатрат,
	|	СтоимостьНачалоПериода.ОстаточнаяСтоимость КАК ОстаточнаяСтоимостьНачалоМесяца,
	|	СтоимостьКонецПериода.ОстаточнаяСтоимость КАК ОстаточнаяСтоимостьКонецМесяца,
	|	ЕСТЬNULL(СпециальныйКоэффициентАмортизации.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(КорректировкаПереходаНаЛинейныйМетод.Амортизация, 0) КАК КорректировкаАмортизацииПереходНаЛинейныйМетод,
	|	ПервоначальныеСведения.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведения.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009
	|ИЗ
	|	СписокНМА КАК СписокНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведения.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтоимостьНачалоПериода КАК СтоимостьНачалоПериода
	|		ПО СписокНМА.НематериальныйАктив = СтоимостьНачалоПериода.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтоимостьКонецПериода КАК СтоимостьКонецПериода
	|		ПО СписокНМА.НематериальныйАктив = СтоимостьКонецПериода.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачалоЭксплуатации КАК НачалоЭксплуатации
	|		ПО СписокНМА.НематериальныйАктив = НачалоЭксплуатации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпециальныйКоэффициентАмортизации КАК СпециальныйКоэффициентАмортизации
	|		ПО СписокНМА.НематериальныйАктив = СпециальныйКоэффициентАмортизации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаПереходаНаЛинейныйМетод КАК КорректировкаПереходаНаЛинейныйМетод
	|		ПО СписокНМА.НематериальныйАктив = КорректировкаПереходаНаЛинейныйМетод.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонецМесяцаРасчета = КонецМесяца(ДатаРасчета);
	ПрошлыйПериод = НачалоМесяца(ДатаРасчета) - 1;
	
	Пока Выборка.Следующий() Цикл
		
		МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
		АмортизируемаяВеличина     = Выборка.СуммаЗатрат;
		СрокПолезногоИспользования = Выборка.СрокПолезногоИспользования;
		НачалоАмортизации          = КонецМесяца(Выборка.ДатаНачалаЭксплуатации) + 1; // п. 4 ст. 259 НК
		
		Если Выборка.ВыбраноПогашениеСтоимости Тогда
			// п. 9 ст. 262 - вместо амортизации предприятие может выбрать равномерное списание,
			// что по сути - амортизация линейным методом.
			// Однако, техника учета в этом случае отличается: 
			// на счетах учета хранится только остаточная стоимость, но не первоначальная.
			АмортизируемаяВеличина = Выборка.ПервоначальнаяСтоимостьЗафиксированная;
		Иначе
			МетодНачисленияАмортизации = ПрименяемыйМетодНачисленияАмортизации(
				ОбщийМетодНачисленияАмортизации,
				Выборка.АмортизационнаяГруппа);
				
			Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
				
				АмортизируемаяВеличина = Выборка.ОстаточнаяСтоимостьНачалоМесяца;
				
			ИначеЕсли ЗначениеЗаполнено(ДатаОтказаНелинейныйМетод) Тогда
				
				// Амортизируемую величину и срок корректируем, исключив период применения нелинейного метода
				Если ДатаОтказаНелинейныйМетод <= '2009-01-01' Тогда
					АмортизируемаяВеличина     = АмортизируемаяВеличина     - Выборка.АмортизацияДо2009;
					СрокПолезногоИспользования = СрокПолезногоИспользования - Выборка.ФактическийСрокИспользованияДо2009;
				Иначе
					АмортизируемаяВеличина = АмортизируемаяВеличина - Выборка.КорректировкаАмортизацииПереходНаЛинейныйМетод;
					Если ДатаОтказаНелинейныйМетод > НачалоАмортизации Тогда
						СрокПолезногоИспользования = СрокПолезногоИспользования
							- АмортизацияАктивов.РазностьМесяцев(ДатаОтказаНелинейныйМетод, НачалоАмортизации);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НормаАмортизации = 1;
		Если Не Выборка.НачислятьАмортизацию Тогда
			НормаАмортизации = 0;
		ИначеЕсли МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			// В программе учет амортизации нелинейным методом выполняется по каждому объекту,
			// однако так, чтобы результат по группе в целом соответствовал требованиям НК.
			НормаАмортизации = УправлениеВнеоборотнымиАктивами.ПолучитьНормуПоАмортизационнойГруппе(Выборка.АмортизационнаяГруппа);
			Если НормаАмортизации = Неопределено Тогда
				НормаАмортизации = 0;
			КонецЕсли;
		Иначе // Линейный
			СрокПолезногоИспользования = Макс(1, СрокПолезногоИспользования);
			НормаАмортизации = 1 / СрокПолезногоИспользования * 100; // п. 2 ст. 259.1 НК РФ
		КонецЕсли;
		
		СуммаАмортизации = АмортизируемаяВеличина * НормаАмортизации / 100;
		
		// Специальные коэффициенты предусмотрены ст. 259.3 НК РФ
		Если Выборка.СпециальныйКоэффициент <> 0 И Выборка.СпециальныйКоэффициент <> 1 Тогда
			СуммаАмортизации = СуммаАмортизации * Выборка.СпециальныйКоэффициент;
		КонецЕсли;
		
		СуммаАмортизации = Окр(СуммаАмортизации, БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
		СуммаАмортизации = Макс(0, Мин(СуммаАмортизации, Выборка.ОстаточнаяСтоимостьКонецМесяца));
		
		//Данные для справки-расчета
		Расчет = Результат.СправкаРасчет.Добавить();
		Расчет.ПериодРасчета = КонецМесяцаРасчета;
		Расчет.Объект        = Выборка.Объект;
		Расчет.НачислятьАмортизациюНУ        = Выборка.НачислятьАмортизацию;
		Расчет.СпособНачисленияАмортизацииНУ = МетодНачисленияАмортизации;
		Расчет.АмортизационнаяГруппа         = Выборка.АмортизационнаяГруппа;
		Расчет.ДатаВводаВЭксплуатацию        = Выборка.ДатаНачалаЭксплуатации;
		Расчет.СрокПолезногоИспользованияНУ  = СрокПолезногоИспользования;
		
		Расчет.СтоимостьНУ               = Выборка.СуммаЗатрат;
		Расчет.ОстаточнаяСтоимостьНУ     = Выборка.ОстаточнаяСтоимостьНачалоМесяца;
		Расчет.СтоимостьДляАмортизацииНУ = АмортизируемаяВеличина;
		Расчет.НормаАмортизации          = НормаАмортизации;
		Расчет.КоэффициентАмортизацииНУ  = Выборка.СпециальныйКоэффициент;
		Расчет.СуммаАмортизацииНУ        = СуммаАмортизации;
		
		РанееПрошедшийСрокАмортизации = АмортизацияАктивов.РазностьМесяцев(ПрошлыйПериод, Выборка.ДатаНачалаЭксплуатации); // до начала этого месяца
		Расчет.ОстатокСрокаПолезногоИспользованияНУ = Макс(0, Выборка.СрокПолезногоИспользования - РанееПрошедшийСрокАмортизации);
		
		// Данные для проводок
		Если СуммаАмортизации > 0 Тогда
			СтрокаАмортизации = Результат.ТаблицаАмортизации.Добавить();
			СтрокаАмортизации.ОбъектУчета        = Выборка.Объект;
			СтрокаАмортизации.СуммаАмортизацииНУ = СуммаАмортизации;
			Если Выборка.ВыбраноПогашениеСтоимости Тогда
				СтрокаАмортизации.ВыбраноПогашениеСтоимостиНУ = Истина;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.ТаблицаАмортизации.Индексы.Добавить("ОбъектУчета");
	Результат.СправкаРасчет.Индексы.Добавить("Объект");
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьКорректировкаПереходаНаЛинейныйМетод(МенеджерВременныхТаблиц, ДатаПерехода, Организация, СчетаАмортизации)
	
	Если Не ЗначениеЗаполнено(ДатаПерехода) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка) КАК Объект,
		|	0 КАК Амортизация
		|ПОМЕСТИТЬ КорректировкаПереходаНаЛинейныйМетод
		|ГДЕ
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ПереходЛинейныйМетод.Субконто1 КАК Справочник.НематериальныеАктивы), ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)) КАК Объект,
		|	СУММА(ЕСТЬNULL(ПереходЛинейныйМетод.СуммаНУОстатокКт, 0)) КАК Амортизация
		|ПОМЕСТИТЬ КорректировкаПереходаНаЛинейныйМетод
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаПерехода,
		|			Счет В (&СчетаАмортизации),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						СписокНМА.НематериальныйАктив
		|					ИЗ
		|						СписокНМА КАК СписокНМА)) КАК ПереходЛинейныйМетод
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ПереходЛинейныйМетод.Субконто1 КАК Справочник.НематериальныеАктивы), ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПерехода",     ДатаПерехода);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаАмортизации);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПрименяемыйМетодНачисленияАмортизации(ОбщийМетод, АмортизационнаяГруппа)
	
	Если ОбщийМетод <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
		Возврат Перечисления.МетодыНачисленияАмортизации.Линейный;
	КонецЕсли;
	
	Если АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа
		Или АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа
		Или АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа
		Или АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа Тогда
		
		// п. 3 ст. 259 НК РФ
		
		Возврат Перечисления.МетодыНачисленияАмортизации.Линейный;
		
	КонецЕсли;
	
	Возврат ОбщийМетод;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// ВЫБЫТИЕ НМА

Функция ПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ, ВыдаватьСообщения = Ложь) Экспорт
	
	// параметр ВыдаватьСообщения не используется, предполагается к удалению

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Проинициализируем структуру, чтобы в случае "досрочного" выхода в структуре были все таблицы, хоть и пустые
	ПараметрыВыбытия = ПолучитьИнициализированнуюСтруктуруПараметровВыбытия();

	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "ВыдаватьСообщения");
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииНМА();
	Иначе
		РасчетАмортизации = ПодготовитьРасчетАмортизацииНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты);
		ТаблицаАмортизации = РасчетАмортизации.ТаблицаАмортизации;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТабАмортизации", ТаблицаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТабАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТабАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТабАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТабАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТабАмортизации
	|ИЗ
	|	&ТабАмортизации КАК ТабАмортизации";
	Запрос.Выполнить();

	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	ПараметрыНачисленияАмортизации = Новый Структура;
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаЗатрат", ТаблицаЗатрат);
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("СправкаРасчет", РасчетАмортизации.СправкаРасчет);

	// Параметры для процедуры СформироватьДвиженияНачислениеАмортизации
	ПараметрыВыбытия.Вставить("НачислениеАмортизации", ПараметрыНачисленияАмортизации);
	
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНМА.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА СчетаУчетаНМА.СчетУчета
	|		ИНАЧЕ СчетаУчетаНМА.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаНМА
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчетаУчетаНМА
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() Тогда
		// Блокировка регистра бухгалтерии.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, КонецМесяца(Реквизиты.Период)));
		
		Запрос.Текст = "ВЫБРАТЬ РазличныеСчетаУчетаНМА.Счет ИЗ РазличныеСчетаУчетаНМА";
		ЭлементБлокировки.ИсточникДанных = Запрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		
		Блокировка.Заблокировать();
		
	КонецЕсли;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьНМА.Субконто1 КАК НематериальныйАктив,
	|	СтоимостьНМА.Счет КАК Счет,
	|	СтоимостьНМА.СуммаОстатокДт КАК СуммаОстатокДт,
	|	СтоимостьНМА.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьНМА.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьНМА.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьНМА.СуммаОстатокКт КАК СуммаОстатокКт,
	|	СтоимостьНМА.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьНМА.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьНМА.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	|	СтоимостьНМА.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ СтоимостьНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчетаУчетаНМА.Счет
	|				ИЗ
	|					РазличныеСчетаУчетаНМА КАК РазличныеСчетаУчетаНМА),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СтоимостьНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СтоимостьНМА.Подразделение КАК Подразделение,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНМА.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаОстатокДт, 0) КАК СтоимостьНМАБУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУОстатокДт, 0) КАК СтоимостьНМАНУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРОстатокДт, 0) КАК СтоимостьНМАПР,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаВРОстатокДт, 0) КАК СтоимостьНМАВР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияНМАБУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНМАНУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияНМАПР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияНМАВР
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаНМА КАК СчетаУчетаНМА
	|		ПО ТаблицаНМА.НематериальныйАктив = СчетаУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК СтоимостьНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетУчета = СтоимостьНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК АмортизацияНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетНачисленияАмортизации = АмортизацияНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО ТаблицаНМА.НематериальныйАктив = ТабАмортизации.ОбъектУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаПараметрыСписания = Запрос.Выполнить().Выгрузить();
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Содержание,"    // <Строка, 150>
	+ "ИмяСписка,"     // <Строка>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьИнициализированнуюСтруктуруПараметровВыбытия()

	ПараметрыВыбытия = Новый Структура;
	
	// НачислениеАмортизации, структура из двух таблиц: ТаблицаЗатрат и ТаблицаРеквизиты
	ПараметрыВыбытия.Вставить("НачислениеАмортизации",
		Новый Структура("ТаблицаЗатрат, ТаблицаРеквизиты, СправкаРасчет",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("ОбъектУчета, ПодразделениеЗатрат, Подразделение,
				|Субконто1, Субконто2, Субконто3, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СчетЗатрат, СчетАмортизации")), // ТаблицаЗатрат
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("Период, Организация, Содержание")),  // ТаблицаРеквизиты
			УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации")
		)
	);

	// ТаблицаПараметрыСписания, таблица значений
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", Новый ТаблицаЗначений); // Достаточно указать ТЗ без строк, колонки прописывать не нужно

	Возврат ПараметрыВыбытия;

КонецФункции

Процедура СформироватьДвиженияВыбытиеНМА(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыВыбытия.НачислениеАмортизации.СправкаРасчет,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		"РасчетАмортизации");
	
	ОтражатьВНалоговомУчете 		=	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл
		
		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		СчетУчетаСтоимости   = СтрокаТаблицы.СчетУчета;
		СчетУчетаАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
		
		// списание амортизации Д (Счет амортизации) К (счет учета)
		СуммаПроводки   = СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.АмортизацияНМАВР;

		Если ((СуммаПроводки <> 0) 
			  ИЛИ (СуммаПроводкиНУ <> 0)
			  ИЛИ (СуммаПроводкиПР <> 0)
			  ИЛИ (СуммаПроводкиВР <> 0))
			И НЕ (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// списание остаточной стоимости
		СуммаПроводки   = СтрокаТаблицы.СтоимостьНМАБУ - СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНМАНУ - СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.СтоимостьНМАПР - СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.СтоимостьНМАВР - СтрокаТаблицы.АмортизацияНМАВР;

		Если СуммаПроводки <> 0
		 ИЛИ СуммаПроводкиНУ <> 0 
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = Реквизиты.СчетСписания;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.КоличествоСубконто > 0 Тогда
				Если СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(Реквизиты.СубконтоСписания)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, Реквизиты.СубконтоСписания);
				КонецЕсли;
			КонецЕсли;
			Если СвойстваСчетаДт.Родитель = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.НематериальныйАктив);
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	// Вызов переопределяемой процедуры для возможности выполнения дополнительных действий при списании НМА.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеНМА(ПараметрыВыбытия.ТаблицаПараметрыСписания, ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Содержание,"                // <Строка, 150>
	+ "СчетСписания,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоСписания"           // 
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// ВЫРАБОТКА НМА

Процедура СформироватьДвиженияВыработкаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА);
	Движения.ВыработкаНМА.Загрузить(Параметры.ТаблицаНМА);
	Движения.ВыработкаНМА.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "Количество,"
	;
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Изменение способов отражения расходов по амортизации НМА

Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА);
	
	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Загрузить(Параметры.ТаблицаНМА);
	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "СпособОтраженияРасходов,"
	+ "НематериальныйАктив";
	
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Изменение специального коэфициента для НМА

Процедура СформироватьДвиженияИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА);
	
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Загрузить(Параметры.ТаблицаНМА);
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "СпециальныйКоэффициент";
	
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвиженияПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаНМА Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		Если СтрокаТаблицы.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаТаблицы.НематериальныйАктив);
		КонецЕсли;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт      = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма =  СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы> - поступающий НМА
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется НМА
	+ "ВидОбъектаУчета,"     // <ПеречислениеСсылка.ВидыОбъектовУчетаНМА> - вид объекта учета
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает НМА
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает НМА
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик НМА
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает НМА
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",  ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по состоянию НМА

Процедура СформироватьДвиженияСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты);

	Движения.СостоянияНМАОрганизаций.Загрузить(Параметры.СостоянияНМАОрганизаций);
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы СостоянияНМАОрганизаций:
	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"	// <СправочникСсылка.НематериальныйАктив>
	+ "Состояние"				// <ПеречислениеСсылка.ВидыСостоянийНМА>
	;
	
	СостоянияНМАОрганизаций = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	СостоянияНМАОрганизаций.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	СостоянияНМАОрганизаций.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("СостоянияНМАОрганизаций", СостоянияНМАОрганизаций);
	
	Возврат Параметры;
	
КонецФункции

// ПРИНЯТИЕ К УЧЕТУ НМА

// Регистрация состояний НМА

Процедура ПроверитьВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК КодНМА,
	|	СостоянияНМАОрганизацийСрезПоследних.Период,
	|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|		&Период,
	|		Организация = &Организация
	|		    И НематериальныйАктив В (&НематериальныеАктивы)
	|		    И Состояние = &Состояние
	|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("Состояние",            Реквизиты.Состояние);
	Запрос.УстановитьПараметр("НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	Запрос.УстановитьПараметр("ТекущийРегистратор",   Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Период",               Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для нематериального актива <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
				Выборка.КодНМА, Реквизиты.Организация, Реквизиты.Состояние, Выборка.Регистратор, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "Период,"              // <Дата>
	+ "ИмяСписка,"           // <Строка, 0>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "Состояние,"           // <ПеречислениеСсылка.СостоянияНМА> - состояние НМА, которое требуется установить
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проводки НМА по счетам

Процедура СформироватьДвиженияПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Сумма       = Реквизиты.СтоимостьБУ;
	
	Проводка.СчетДт          = Реквизиты.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
	КонецЕсли;
	
	Проводка.СчетКт          = Реквизиты.СчетУчетаВнеоборотногоАктива;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
	КонецЕсли;
	
	Если Реквизиты.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
		Проводка.Содержание = "Принят к учету НМА";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	Иначе
		Проводка.Содержание = "Приняты к учету расходы на НИОКР";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", Реквизиты.НематериальныйАктив);
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Реквизиты.СтоимостьНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = Реквизиты.СтоимостьПР;
				Проводка.СуммаВРДт = Реквизиты.СтоимостьВР;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = Реквизиты.СтоимостьНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = Реквизиты.СтоимостьПР;
				Проводка.СуммаВРКт = Реквизиты.СтоимостьВР;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		Для Каждого СтрокаСписания Из Параметры.ТаблицаСпособОтраженияРасходов Цикл
			
			Проводка             = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = 0;
			Проводка.Содержание = "Приняты к учету расходы на НИОКР";
			
			Проводка.СчетДт      = СтрокаСписания.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаСписания.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаСписания.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаСписания.Субконто3);

			Проводка.СчетКт      = Реквизиты.СчетУчетаВнеоборотногоАктива;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаСписания.Подразделение;
			КонецЕсли;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", Реквизиты.НематериальныйАктив);

			Проводка.СуммаНУДт = СтрокаСписания.СуммаНУДт;
			Проводка.СуммаНУКт = СтрокаСписания.СуммаНУКт;

			Если ПоддержкаПБУ18 Тогда
				
				Проводка.СуммаПРДт = СтрокаСписания.СуммаПРДт;
				Проводка.СуммаПРКт = СтрокаСписания.СуммаПРКт;
				Проводка.СуммаВРДт = СтрокаСписания.СуммаВРДт;
				Проводка.СуммаВРКт = СтрокаСписания.СуммаВРКт;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "НематериальныйАктив,"          // <СправочникСсылка.НематериальныеАктивы>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"              // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"              // <Ссылка на справочник подразделений>
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету НМА
	+ "СчетУчетаВнеоборотногоАктива," // <ПланСчетовСсылка.Хозрасчетный> - счет учета нематериального актива
	+ "СтоимостьБУ,"
	+ "СтоимостьНУ,"
	+ "СтоимостьПР,"
	+ "СтоимостьВР,"
	+ "ВидОбъектаУчета,"
	+ "ПорядокСписанияНИОКРНаРасходыНУ"
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                  // <Число>
	+ "СчетЗатрат,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение,"                // <Ссылка на справочник подразделений>
	+ "Субконто1,"                    //
	+ "Субконто2,"                    //
	+ "Субконто3,"                    //
	+ "Коэффициент,"                  // <Число>
	+ "ВидРасходовНУ,"                // <ПеречислениеСсылка.ВидыРасходовНУ>
	+ "СуммаНУДт,"                    // <Число>
	+ "СуммаПРДт,"                    // <Число>
	+ "СуммаВРДт,"                    // <Число>
	+ "СуммаНУКт,"                    // <Число>
	+ "СуммаПРКт,"                    // <Число>
	+ "СуммаВРКт"                    // <Число>
	;

	Параметры.Вставить("ТаблицаСпособОтраженияРасходов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСпособОтраженияРасходов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Отражение НМА в учете

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                    = Реквизиты.Период;
	Движение.НематериальныйАктив       = Реквизиты.НематериальныйАктив;
	Движение.Организация               = Реквизиты.Организация;
	Движение.СчетУчета                 = Реквизиты.СчетУчета;
	Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;

	Движения.СчетаБухгалтерскогоУчетаНМА.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"       // <СправочникСсылка.НематериальныеАктивы>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета";                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                  = Реквизиты.Период;
	Движение.НематериальныйАктив     = Реквизиты.НематериальныйАктив;
	Движение.Организация             = Реквизиты.Организация;
	Движение.СпособОтраженияРасходов = Реквизиты.СпособОтраженияРасходов;

	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"                           // <СправочникСсылка.НематериальныеАктивы
	+ "СпособОтраженияРасходов"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способы
		// отражения расходов по амортизации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Первоначальниые сведения НМА

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = Реквизиты.Период;
	Движение.НематериальныйАктив         = Реквизиты.НематериальныйАктив;
	Движение.Организация                 = Реквизиты.Организация;
	Движение.ПервоначальнаяСтоимость     = Реквизиты.СтоимостьБУ;
	Движение.НачислятьАмортизацию        = Реквизиты.НачислятьАмортизациюБУ;
	Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизацииБУ;
	Движение.СпособПоступления           = Реквизиты.СпособПоступления;
	Движение.СрокПолезногоИспользования  = Реквизиты.СрокПолезногоИспользованияБУ;
	Движение.Коэффициент                 = Реквизиты.КоэффициентБУ;
	Если Реквизиты.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = Реквизиты.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "НематериальныйАктив,"           
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "СтоимостьБУ,"           
	+ "НачислятьАмортизациюБУ,"           
	+ "СпособНачисленияАмортизацииБУ," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА> - способ начисления
		// амортизации НМА по бухгалтерскому учету
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"           
	+ "СрокПолезногоИспользованияБУ,"   
	+ "КоэффициентБУ,"   
	+ "СпособПоступления";           // <ПеречислениеСсылка.СпособыПоступленияАктивов> - способ поступления НМА

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
	Движение.Период                                        = Реквизиты.Период;
	Движение.Организация                                   = Реквизиты.Организация;
	Движение.НематериальныйАктив                           = Реквизиты.НематериальныйАктив;
	Движение.НачислятьАмортизацию                          = Реквизиты.НачислятьАмортизациюНУ;
	Движение.ПервоначальнаяСтоимостьНУ                     = Реквизиты.СтоимостьНУ;
	Движение.СрокПолезногоИспользования                    = Реквизиты.СрокПолезногоИспользованияНУ;
	Движение.ПорядокВключенияСтоимостиВСоставРасходов      = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов;
	Движение.СпособОтраженияРасходовПриВключенииВСтоимость = Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость;

	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                        // <Дата>
	+ "Организация,"                                   // <СправочникСсылка.Организации>
	+ "НачислятьАмортизациюНУ,"                        // <Булево>
	+ "СрокПолезногоИспользованияНУ,"                  // <Число, 4, 0> - срок полезного использования ОС для целей начисления
	                                                   // амортизации по налоговому учету
	+ "НематериальныйАктив,"                           // <СправочникСсылка.НематериальныхАктивов>
	+ "СтоимостьНУ,"                                   // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета
	+ "ПорядокВключенияСтоимостиВСоставРасходов,"      // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "СпособОтраженияРасходовПриВключенииВСтоимость"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		ТаблицаПервоначальныеСведенияНМАУСН = Параметры.ТаблицаПервоначальныеСведенияНМАУСН.Скопировать();
	Иначе
		ТаблицаПервоначальныеСведенияНМАУСН = Параметры.ТаблицаПервоначальныеСведенияНМАУСН.СкопироватьКолонки();
	КонецЕсли;

	Возврат ТаблицаПервоначальныеСведенияНМАУСН;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияНМА

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "СуммаУСН";            // <Число, 0, 0> - стоимость НМА по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияНМАУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Добавить();
	Движение.Период                     = Реквизиты.Период;
	Движение.НематериальныйАктив        = Реквизиты.НематериальныйАктив;
	Движение.Организация                = Реквизиты.Организация;
	Движение.ПервоначальнаяСтоимостьУСН = Реквизиты.СтоимостьУСН;
	Движение.СрокПолезногоИспользования = Реквизиты.СрокПолезногоИспользованияУСН;
	Движение.ДатаПриобретения           = Реквизиты.ДатаПриобретения;
	Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовУСН;
	
	Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Записывать = Истина;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОплатНМА Цикл
		
		Если СтрокаТаблицы.СуммаОплаты <> 0 Тогда
			
			Движение = Движения.ОплатыНМАДляУСН.Добавить();
			Движение.Период              = СтрокаТаблицы.ДатаОплаты;
			Движение.Организация         = Реквизиты.Организация;
			Движение.НематериальныйАктив = Реквизиты.НематериальныйАктив;
			Движение.ДатаОплаты          = СтрокаТаблицы.ДатаОплаты;
			Движение.СуммаОплаты         = СтрокаТаблицы.СуммаОплаты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ОплатыНМАДляУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН
	СписокОбязательныхКолонок = ""
	+ "ДатаОплаты,"
	+ "СуммаОплаты"; // <Число, 0, 0> - стоимость НМА по данным УСН

	Параметры.Вставить("ТаблицаОплатНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОплатНМАУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"                         // <СправочникСсылка.НематериальныхАктивов>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "СтоимостьУСН,"
	+ "ДатаПриобретения,"                            // <Дата> Дата приобретения ОС
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Параметры амортизации НМА (НУ)

Процедура СформироватьДвиженияНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
	Движение.Период                  = Реквизиты.Период;
	Движение.Организация             = Реквизиты.Организация;
	Движение.НематериальныйАктив     = Реквизиты.НематериальныйАктив;
	Движение.СпециальныйКоэффициент  = Реквизиты.СпециальныйКоэффициентНУ;

	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"      // <СправочникСсылка.НематериальныхАктивов>
	+ "СпециальныйКоэффициентНУ"; // <Число, 5, 2> - специальный коэффциент для начисления амортизации НМА (НУ)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Списание НМА на расходы (НУ) при принятии к учету

Функция ПодготовитьТаблицуСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияНМА.СкопироватьКолонки();
	Иначе
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияНМА;
	КонецЕсли;

	ТаблицаДляСписания.Колонки.НематериальныйАктив.Имя = "ОбъектУчета";
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СчетУчета, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.СтоимостьНУ.Имя = "СуммаАмортизацииНУ";
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));

	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = 
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаДляСписания, Параметры.Реквизиты, Отказ);

	Для каждого СтрокаНМА Из ТаблицаЗатратПоАмортизации Цикл
		СтрокаНМА.СуммаВР = СтрокаНМА.СуммаВР - СтрокаНМА.СуммаНУ;
	КонецЦикла;

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "СтоимостьНУ";         // <Число, 15, 2> - сумма, относимая на расходы (НУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"                // <Булево>
	+ "Подразделение,"                            // <Ссылка на справочник подразделений>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
	                                              // порядок включения стоимости НМА в состав расходов (НУ)
	+ "СпособыОтраженияРасходовПоАмортизации,"    // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
	                                              // отрадения расходов по списанию НМА (НУ)
	+ "Регистратор,"                              // <ДокументСсылка.*>
	+ "СчетУчета,"                                 // <ПланСчетовСсылка.Хозрасчетный> - счет на котором формируется стоимость НМА
	+ "ИмяСписка";                                // <Строка>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕДАЧА НМА

// Параметры выручки НМА

Процедура СформироватьДвиженияПоВыручкеНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги, Движения, Отказ) Экспорт

	Если ТаблицаРеализованныеТоварыУслуги[0].СуммаРуб = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги);
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаТаблицыНМА = Параметры.РеализованныеТоварыУслуги[0];
	
	ПрименениеПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Сумма        = СтрокаТаблицыНМА.СуммаБУ;
	Проводка.Содержание   = СтрокаТаблицыНМА.Содержание;
	
	Проводка.СчетДт      = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
	
	Если Реквизиты.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
		Проводка.ВалютаДт        = Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицыНМА.СуммаВзаиморасчетов;
		
	КонецЕсли;
	
	Проводка.СчетКт = СтрокаТаблицыНМА.СчетДоходов;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицыНМА.Субконто);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицыНМА.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", Реквизиты.НематериальныйАктив);
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.ПодразделениеОрганизации, Реквизиты.ПодразделениеОрганизации);
	
	Если Реквизиты.ОтражатьВНалоговомУчете Тогда
		
		СуммаНУДт = СтрокаТаблицыНМА.СуммаБУ;
		СуммаНУКт = СтрокаТаблицыНМА.СуммаБУ - СтрокаТаблицыНМА.СуммаНДСРуб;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , Проводка, ПрименениеПБУ18);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыручкиНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Регистратор,"         // <ДокументСсылка.*>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ОтражатьВНалоговомУчете,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "СчетРасходов,"
	+ "СчетУчетаНДСПоРеализации";

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СОСТОЯНИЕ НМА

//Получает документ и дату для указанного состояния нематериального актива по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Период УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

Функция ОбработатьПодборНематериальныхАктивов(Знач КоллекцияНМА, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаНМА = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	ИсходныеДанные = КоллекцияНМА.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("НематериальныйАктив");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияНМА.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		ЭлементКоллекции = КоллекцияНМА.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицы.НематериальныйАктив, "НематериальныйАктив");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции
