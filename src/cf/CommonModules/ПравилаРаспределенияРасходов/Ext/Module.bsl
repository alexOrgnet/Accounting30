#Область ПрограммныйИнтерфейс

// Создает структуру таблицы правил распределения
//
Функция НовыеПравилаРаспределения() Экспорт
	
	ПравилаРаспределения = Новый ТаблицаЗначений();
	// Для добавления элементов в коллекцию рекомендуется использовать ДобавитьПравилоРаспределения, СкопироватьПравилоРаспределения.
	// Порядок правил важен: каждое следующее правило распределяет то, что не распределили предыдущие.
	
	ПравилаРаспределения.Колонки.Добавить("ФункциональноеИмя", ТипИмени()); // Описывает смысл, функцию правила
	ПравилаРаспределения.Колонки.Добавить("Имя",               ТипИмени()); // Однозначно идентифицирует правило как запись в таблице правил
	// Соглашения по именам:
	// - должно быть уникальным в рамках коллекции. См. ОбеспечитьУникальныеИменаПравил()
	// - может содержать несколько элементов с разделителями
	// - рекомендуемый разделитель - "."
	// - первый элемент - функциональное имя правила.
	//   Остальные элементы не следует использовать для этой цели - они обеспечивают уникальность имен правил
	//   и могут использоваться при анализе поведения программы на реальных данных
	// - символ "#" может использоваться только для обеспечения уникальности имен правил в коллекции
	ПравилаРаспределения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	// Описания в актуальной версии не используются, оставлены для совместимости.
	// Описание настроек формируется в Справочник.НастройкиУчетаЗатрат
	ПравилаРаспределения.Колонки.Добавить("Описание",     Новый ОписаниеТипов("Строка"));
	
	// Содержание проводки следует задать только для тех правил распределения, 
	// которым не могут соответствовать предварительные проводки.
	// Например:
	// - проводка по списанию косвенных расходов НУ (Дт 90.08 Кт 20.01) не формируется до выполнения регламентной операции.
	//   Поэтому в ней можно указать содержание, соответствующее правилу распределения.
	// - проводка по выпуску продукции (Дт 43 Кт 20.01) формируется по правилу распределения. 
	//   В результате регламентной операции должны быть сформированы проводки по _корректировке_ предварительных сумм 
	//   (с соответствующим содержанием)
	// Принято допущение, что предварительные проводки могут соответствовать любому выпуску (про "Выпуск" см. ниже).
	// Поэтому содержание всех проводок по выпуску - стандартное, его не следует задавать.
	ПравилаРаспределения.Колонки.Добавить("СодержаниеПроводки", Новый ОписаниеТипов(Метаданные.РегистрыБухгалтерии.Хозрасчетный.Реквизиты.Содержание.Тип));
	
	// Следует отметить правила, которые приводят к появлению особых проводок и отражению в справках-расчетах (калькуляции себестоимости).
	// В результате такого правила обязательно должно заполняться поле Номенклатура.
	// Есть ограничение на применение правил Выпуск с действием, отличным от РаспределитьНаСубконто:
	// распределять можно только на вершины, заведомо существующие до начала распределения.
	ПравилаРаспределения.Колонки.Добавить("Выпуск",             Новый ОписаниеТипов("Булево"));
	
	// Идентификатор настройки, выполненной пользователем
	ПравилаРаспределения.Колонки.Добавить("Настройка",          Справочники.НастройкиУчетаЗатрат.ТипСсылкиНастройкиРаспределения());
	
	// Используются для отображения в справках-расчетах.
	ПравилаРаспределения.Колонки.Добавить("МетодРасчета",       Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	// Отбор расходов, для которых следует применить это правило
	// * Ключ     - имя поля
	// * Значение - условие отбора
	//    -- ОписаниеТипов - любое значение, кроме пустого значения этого типа (семантика: заполненное значение)
	//    -- Массив, ФиксированныйМассив
	//                     - любое значение из массива
	//    -- иное          - только это значение
	// Для счетов учета
	// - рекомендуется использовать значения, а не массивы значений - см. УстановленОтборРавенствоСчета(), ОтобранныеСчетаРасходов()
	// - допускается передавать счета-группы: правило распространяется на все подчиненные счета
	ПравилаРаспределения.Колонки.Добавить("ОтборРасходов",      Новый ОписаниеТипов("Структура"));
	// Перечень полей запроса - разрезов аналитики _источника_, важных для распределения
	ПравилаРаспределения.Колонки.Добавить("ПоляИсточника",     Новый ОписаниеТипов("Структура")); // Ключ - имя поля, Значение - путь к данным поля в базе распределения
	// Правило предусматривает выполнение одного из четырех действий:
	// - РаспределитьНаРасходы -  распределение сумм в соответствии с коэффициентами базы.
	//                            Аналитика приемника задана в виде полей, перечисленных в РазрезыРаспределения()
	//                            (НоменклатурнаяГруппа, СтатьяЗатрат и т.п.)
	//                            Аналитика приемника может определяться полями источника и полями базы (см. ПоляПриемника)
	// - РаспределитьНаСубконто - распределение сумм в соответствии с коэффициентами базы.
	//                            Аналитика приемника задана в виде полей, перечисленных в УчетЗатрат.РазрезыУчета() + поле Номенклатура.
	//                            Для счетов вне контура затрат она может быть дополнена полями источника, заданными в ПоляПриемника.
	//                            Для счетов в контуре затрат аналитика расходов должна быть явно задана в базе распределения
	//                            (в том числе, когда приемник относится к разделу Расходы).
	// - ВыделитьНалоговыйУчет  - перенос сумм налогового учета с образованием разниц.
	//                            Тип разниц (ВР, ПР) определяется базой распределения.
	//                            Аналитика приемника задана так же, как и в правиле РаспределитьНаРасходы.
	//                            Коэффициенты базы не используются.
	// - Зафиксировать          - ограничение распределения расходов.
	//                            Расходы, к которым применено это правило, не участвуют в обработке следующими правилами.
	//                            Коэффициенты базы не используются.
	//
	// В общем случае, расходы, к которым применено любое из правил, не участвуют в обработке другими правилами.
	// Исключение: расходы, к которым применено правило ВыделитьНалоговыйУчет могут быть в последствии обработаны другими правилами 
	// (с другими действиями). 
	// Обратное - неверно: после выполнения над расходами любого правила не имеет смысла выполнять над ними действие ВыделитьНалоговыйУчет.
	// Это нужно учитывать при определении порядка правил.
	// 
	// Такой подход позволяет сократит число ребер, по которым заведомо не будут двигаться суммы
	// (при оценке расходов для конкретной вершины сначала выделяется НУ, а потом выполняется распределение).
	
	ПравилаРаспределения.Колонки.Добавить("Действие",          Новый ОписаниеТипов("Строка"));
	// Перечень полей аналитики приемника, которые присутствуют в базе.
	// Для действия РаспределитьНаРасходы задается только ключ (имя поля аналитики),
	// для РаспределитьНаСубконто - еще и значение: вид субконто или имя измерения регистра.
	ПравилаРаспределения.Колонки.Добавить("ПоляПриемника",     Новый ОписаниеТипов("Структура"));
	
	// Несколько правил могут использовать одинаковую базу распределения - "таблицу с коэффициентами".
	// Если у нескольких правил указана одинаковая база распределения, 
	// то она будет рассчитана в соответствии с первым из этих правил.
	// "БазаРаспределения" описывает запрос, который помещает базу во временную таблицу.
	//
	// Свойства структуры:
	// 1. Имя - имя временной таблицы, в которую будет помещен результат.
	//    Должно быть уникальным для совокупности текста и параметров запроса
	//    Это можно обеспечить с помощью НастроитьТекстБазыРаспределения
	// 2. ТекстЗапроса - текст запроса, создающий временную таблицу.
	//    Может использовать временные таблицы, созданные следующими процедурами:
	//    РасчетСебестоимости.СоздатьСчетаЗатрат()
	//    РасчетСебестоимости.СоздатьПоступления()
	//    Результат запроса должен содержать поля источника и приемника (описанные выше),
	//    а также поле База с числовым неотрицательным значением коэффициентов базы распределения.
	//    Для сокращенного описания текста запроса рекомендуется использовать НастроитьТекстБазыРаспределения
	// 3. ПараметрыЗапроса - (опционально) - Структура, параметры запроса 
	//    Также можно использовать параметры, описанные в ОбщиеПараметрыБазРаспределения
	// 4. ВременныеТаблицы - (опционально) - Структура; Ключ - имя пакета, Значение - см. НовыйОписаниеПакетаВременныхТаблиц.
	//    Описание временных таблиц, которые используются в запросе базы распределения, дополнительно к описанным в модуле РасчетСебестоимости.
	//    Пакет может содержать описание создания одной или нескольких временных таблиц.
	//    Несколько правил могут использовать одни и те же временные таблицы, обращение к которым - по имени пакета.
	//    Пакет с одинаковым именем будет создан один раз.
	//    Для добавления запроса временных таблиц рекомендуется использовать ДобавитьПакетВременныхТаблиц.
	//    Об уничтожении таблиц заботиться не нужно: они будут уничтожены автоматически по окончании их использования.
	// 5. РасшифровкаРасчета - (опционально) - имя временной таблицы, в которую помещаются данные, необходимые
	//    для вывода в протокол расчета.
	// 6. (устарело) ПакетВременныхТаблиц, СоздатьВременныеТаблицы, ПараметрыВременныхТаблиц -
	//    использовались до появления ВременныеТаблицы
	//
	// Если в запросе, формирующем базу распределения, требуется получить "пустые" ссылки,
	// то 
	// - в полях составного типа должно быть Неопределено
	// - в остальных - типизированное значение.
	// Например, в поле базы распределения СтатьяЗатрат недопустимо помещать Неопределено,
	// а в поле Субконто1 недопустимо помещать ссылку на пустую статью затрат.
	// Для приведения типов можно использовать СхемыЗапросов.ВыражениеПриведениеТипа
	ПравилаРаспределения.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Структура"));
	
	ПравилаРаспределения.Индексы.Добавить("Имя");
	ПравилаРаспределения.Индексы.Добавить("ФункциональноеИмя");
	
	Возврат ПравилаРаспределения;
	
КонецФункции

Функция ТипИмени() Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	
КонецФункции

Процедура Заполнить(ПравилаРаспределения, РазрезыРаспределения, Настройки, РегламентнаяОперация) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройки.СчетаУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименятьПредопределенныеПравила = Истина;
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилРаспределенияРасходовНаПроизводство(
			ПравилаРаспределения,
			Настройки.Контекст.Период,
			Настройки.Контекст.Организация,
			ПрименятьПредопределенныеПравила);
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилРаспределенияРасходовНаПродажу(
			ПравилаРаспределения,
			Настройки.Контекст.Период,
			Настройки.Контекст.Организация,
			ПрименятьПредопределенныеПравила);
	КонецЕсли;
		
	Если ПрименятьПредопределенныеПравила Тогда
		
		Процессор = НовыйПроцессорЗаполненияПравилРаспределения(ПравилаРаспределения, Настройки, РазрезыРаспределения);
		
		ЗаполнитьПравилаРаспределенияПоНастройкамУчетаЗатрат(Процессор);
		
		ДобавитьПравилаНалоговогоУчета(
			Процессор.Правила,
			Процессор.ПравилаПоСчетам,
			Настройки,
			РазрезыРаспределения);
		
	КонецЕсли;
	
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавлениПравилРаспределенияРасходовНаПроизводство(
			ПравилаРаспределения,
			Настройки.Контекст.Период,
			Настройки.Контекст.Организация);
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавленииПравилРаспределенияРасходовНаПродажу(
			ПравилаРаспределения,
			Настройки.Контекст.Период,
			Настройки.Контекст.Организация);
	КонецЕсли;
	
	ОбеспечитьУникальныеИменаПравил(ПравилаРаспределения);
	
КонецПроцедуры

// Добавляет правило распределения по счету.
//
// Параметры:
//  Процессор         - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  ФункциональноеИмя - Строка - Смысловое имя правила (без ".", без требований к уникальности)
//  Действие          - Строка - "РаспределитьНаРасходы", "РаспределитьНаСубконто", "ВыделитьНалоговыйУчет", "Зафиксировать";
//                               см. комментарий в НовыеПравилаРаспределения()
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения, добавленное правило.
//
Функция ДобавитьПравилоРаспределения(Процессор, ФункциональноеИмя, Действие) Экспорт
	
	Правило = Процессор.Правила.Добавить();
	
	Процессор.ПравилаПоСчету.Добавить(Правило);
	
	УстановитьПравилоРаспределения(Правило, ФункциональноеИмя, Действие);
	
	Правило.ОтборРасходов.Вставить("Счет", Процессор.Счет);
	
	Возврат Правило;
	
КонецФункции

// Добавляет правило распределения по счету, копируя ранее созданное.
// Предполагается, что добавленное правило будет модифицировано.
//
// Параметры:
//  Процессор - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  Источник  - СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения, копируемое правило
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения, добавленное правило.
//
Функция СкопироватьПравилоРаспределения(Процессор, Источник) Экспорт
	
	Правило = Процессор.Правила.Добавить();
	Процессор.ПравилаПоСчету.Добавить(Правило);
	
	ЗаполнитьЗначенияСвойств(Правило, Источник);
	
	Правило.Наименование = СтрШаблон(НСтр("ru = '(Копия) %1'"), Правило.Наименование);
	
	// Предполагается, что копия будет модифицироваться. Подготовим коллекции к модификации
	МутабельныеСвойства = СтрРазделить("ОтборРасходов,ПоляИсточника,ПоляПриемника,БазаРаспределения", ",");
	Для Каждого ИмяСвойства Из МутабельныеСвойства Цикл
		Правило[ИмяСвойства] = ОбщегоНазначения.СкопироватьРекурсивно(Правило[ИмяСвойства]);
	КонецЦикла;
	
	Возврат Правило;
	
КонецФункции

// Параметры:
//  Правило           - СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения
//  ФункциональноеИмя - Строка - Смысловое имя правила (без ".", без требований к уникальности)
//  Действие          - Строка - "РаспределитьНаРасходы", "РаспределитьНаСубконто", "ВыделитьНалоговыйУчет", "Зафиксировать"
//                      - см. комментарий в НовыеПравилаРаспределения()
// 
Процедура УстановитьПравилоРаспределения(Правило, ФункциональноеИмя, Действие) Экспорт
	
	Правило.ФункциональноеИмя = ФункциональноеИмя;
	Правило.Имя               = ФункциональноеИмя;
	Правило.Действие          = Действие;
	
	Если Правило.Действие <> "Зафиксировать" Тогда
		Правило.БазаРаспределения.Вставить("Имя",                 "");
		Правило.БазаРаспределения.Вставить("ТекстЗапроса",        "");
		Правило.БазаРаспределения.Вставить("ПараметрыЗапроса",    Новый Структура);
		Правило.БазаРаспределения.Вставить("РасшифровкаРасчета",  "");
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Рекомендуется использовать ДобавитьПакетВременныхТаблиц.
// Устанавливает описание пакета временных таблиц, используемого в правиле распределения
//
// Параметры:
//  ОписаниеБазыРаспределения - Структура - см. поле БазаРаспределения в НовыеПравилаРаспределения
//  ИмяПакета                 - Строка - Имя пакета временных таблиц,
//                              которые используются для получения данных базы распределения.
//                              Несколько правил могут использовать одни и те же временные таблицы.
//                              Пакет с одинаковым именем будет создан один раз.
//
Процедура УстановитьПакетВременныхТаблиц(ОписаниеБазыРаспределения, ИмяПакета) Экспорт
	
	ОписаниеБазыРаспределения.Вставить("ПакетВременныхТаблиц",     ИмяПакета);
	ОписаниеБазыРаспределения.Вставить("СоздатьВременныеТаблицы",  ""); // Текст запроса
	ОписаниеБазыРаспределения.Вставить("ПараметрыВременныхТаблиц", Новый Структура);
	
КонецПроцедуры

// Добавляет в правило данные о пакете временных таблиц.
//
// Параметры:
//  ОписаниеБазыРаспределения - Структура - см. поле БазаРаспределения в НовыеПравилаРаспределения
//  ИмяПакета                 - Строка - Имя пакета временных таблиц,
//                              которые используются для получения данных базы распределения.
//                              Несколько правил могут использовать одни и те же временные таблицы.
//                              Пакет с одинаковым именем будет создан один раз.
//  ТекстЗапроса              - Строка - текст запроса, формирующий одну или несколько временных таблиц.
//                              Таблицы будут уничтожены автоматически по окончании их использования.
//  ПараметрыЗапроса          - Структура - параметры запроса, дополнительно к описанным в ОбщиеПараметрыБазРаспределения
//                            - Неопределено - дополнительных параметров в запросе нет.
// 
// Возвращаемое значение:
//  Структура - см. НовыйОписаниеПакетаВременныхТаблиц, добавленный пакет
//
Функция ДобавитьПакетВременныхТаблиц(ОписаниеБазыРаспределения, ИмяПакета, ТекстЗапроса = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	Пакет = НовыйОписаниеПакетаВременныхТаблиц();
	Пакет.Имя          = ИмяПакета;
	Пакет.ТекстЗапроса = ТекстЗапроса;
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Пакет.ПараметрыЗапроса, ПараметрыЗапроса, Истина);
	КонецЕсли;
	
	Если Не ОписаниеБазыРаспределения.Свойство("ВременныеТаблицы") Тогда
		ОписаниеБазыРаспределения.Вставить("ВременныеТаблицы", Новый Структура);
	КонецЕсли;
	
	ОписаниеБазыРаспределения.ВременныеТаблицы.Вставить(ИмяПакета, Пакет);
	
	Возврат Пакет;
	
КонецФункции

// Определяет описания пакетов временных таблиц, потребных для выполнения запроса базы распределения правила распределения.
//
// Параметры:
//  ОписаниеБазыРаспределения - Структура - см. поле БазаРаспределения в НовыеПравилаРаспределения
// 
// Возвращаемое значение:
//  Массив из НовыйОписаниеПакетаВременныхТаблиц - потребные пакеты
//
Функция ПакетыВременныхТаблицПравила(ОписаниеБазыРаспределения) Экспорт
	
	ПакетыВытеснение = Новый Соответствие;
	
	Если ОписаниеБазыРаспределения.Свойство("ВременныеТаблицы") Тогда
		Для Каждого ОписаниеПакета Из ОписаниеБазыРаспределения.ВременныеТаблицы Цикл
			ПакетыВытеснение.Вставить(ОписаниеПакета.Ключ, ОписаниеПакета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеБазыРаспределения.Свойство("ПакетВременныхТаблиц")
		И Не ПустаяСтрока(ОписаниеБазыРаспределения.ПакетВременныхТаблиц) Тогда
		Пакет = НовыйОписаниеПакетаВременныхТаблиц();
		ЗаполнитьЗначенияСвойств(Пакет, ОписаниеБазыРаспределения);
		ПакетыВытеснение.Вставить(ОписаниеБазыРаспределения.ПакетВременныхТаблиц, Пакет);
	КонецЕсли;
	
	Пакеты = Новый Массив;
	Для Каждого ОписаниеПакета Из ПакетыВытеснение Цикл
		Пакеты.Добавить(ОписаниеПакета.Значение);
	КонецЦикла;
	
	Возврат Пакеты;
	
КонецФункции

// Подготавливает текст запроса для использования в правиле:
// - Устанавливает имя временной таблицы
// - Устанавливает группировки для суммирования коэффициентов базы.
//   Если поле База не задано, то оно будет создано с константным коэффициентом 1.
// - Устанавливает индексы сообразно выбранным полям источника
//
// Использование метода позволяет писать более лаконичные, понятные тексты запросов.
//
// Параметры:
//  Правило      - СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения.
//                 Поле Имя описания базы распределения должно соответствовать имени создаваемой запросом таблицы.
//                 Допускается не указывать имя, если текст не содержит инструкции ПОМЕСТИТЬ.
//  ЗапросБазы   - Строка, СхемаЗапроса - шаблон текста запроса. 
//                 Пример для распределения результата работы вспомогательного подразделения:
//                 "ВЫБРАТЬ Потребители.Подразделение КАК Подразделение, Потребители.Объем КАК База Из Потребители"
//                 Пример для переноса затрат на выпускающие подразделения:
//                 "ВЫБРАТЬ СхемаВыпуска.Откуда КАК ПодразделениеИсточник, СхемаВыпуска.Куда КАК Подразделение Из СхемаВыпуска"
//               - Структура - см. СхемыЗапросов.НовыйТочкаЗапроса
//  ПоляИндекса  - Строка - перечень полей индекса, разделенный запятой.
//                 Имеет смысл задавать, если один и тот же запрос используется в нескольких правилах с разным набором полей источника.
//                 В этом случае может оказаться определить последовательность полей индекса, которая обеспечит эффективное соединение
//                 во всех правилах, используемых этот запрос.
//                 Если не указан, состав индекса определяется перечнем полей в одном из правил распределения, использующем этот запрос.
//
Процедура НастроитьТекстБазыРаспределения(Правило, ЗапросБазы, Знач ПоляИндекса = "") Экспорт
	
	Если Правило.Действие <> "РаспределитьНаРасходы"
		И Правило.Действие <> "РаспределитьНаСубконто" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗапросБазы) = Тип("Строка") Тогда
		СхемаЗапроса = СхемыЗапросов.Создать(ЗапросБазы);
	ИначеЕсли ТипЗнч(ЗапросБазы) = Тип("Структура") Тогда
		СхемаЗапроса = ЗапросБазы.Схема;
	Иначе
		СхемаЗапроса = ЗапросБазы;
	КонецЕсли;
	
	УстановитьИмяБазыРаспределения(Правило, СхемаЗапроса.ПолучитьТекстЗапроса());
	
	// Устаналиваем таблицу для помещения
	СхемыЗапросов.ПоместитьРезультаты(СхемаЗапроса, Правило.БазаРаспределения.Имя);
	
	Если ТипЗнч(ЗапросБазы) = Тип("Структура") И ЗапросБазы.Свойство("Запрос") Тогда
		СозданиеТаблицы = ЗапросБазы;
	Иначе
		СозданиеТаблицы = СхемыЗапросов.НайтиЗапросСозданияТаблицы(СхемаЗапроса, Правило.БазаРаспределения.Имя);
	КонецЕсли;
	
	// Настраиваем поле База
	НастроитьАгрегатноеПолеБазыРаспределения(Правило, СозданиеТаблицы);
	
	// Устанавливаем индексы
	Если Не ЗначениеЗаполнено(СозданиеТаблицы.Запрос.Индекс) Тогда
		
		ПоляИндекса = СтрРазделить(ПоляИндекса, ",", Ложь);
		Если Не ЗначениеЗаполнено(ПоляИндекса) Тогда
			Для Каждого ОписаниеПоля Из Правило.ПоляИсточника Цикл
				ПоляИндекса.Добавить(ОписаниеПоля.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Поле Из ПоляИндекса Цикл
			СозданиеТаблицы.Запрос.Индекс.Добавить(Поле);
		КонецЦикла;
		
	КонецЕсли;
	
	// Устанавливаем текст запроса
	Правило.БазаРаспределения.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ОбщиеПараметрыБазРаспределения(Период, Организация) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("НачалоПериода",       НачалоМесяца(Период));
	ПараметрыЗапроса.Вставить("КонецПериода",        КонецМесяца(Период));
	ПараметрыЗапроса.Вставить("Организация",         Организация);
	ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	ПараметрыЗапроса.Вставить("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	ПараметрыЗапроса.Вставить(
		"ТолькоОсновнаяСистемаНалогообложения",
		УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период));
	ПараметрыЗапроса.Вставить(
		"ТолькоОсобыйПорядокНалогообложения",
		УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период));
		
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура СоздатьКлассификаторыПравилРаспределения(МенеджерВременныхТаблиц, Правила) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	Правила.СодержаниеПроводки КАК СодержаниеПроводки
	|ПОМЕСТИТЬ СодержаниеПроводокРаспределенияРасходов
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.СодержаниеПроводки <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	ИСТИНА КАК Выпуск
	|ПОМЕСТИТЬ ПравилаРаспределенияРасходовВыпуск
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.Выпуск
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	Правила.МетодРасчета КАК МетодРасчета
	|ПОМЕСТИТЬ МетодыРаспределенияРасходов
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.МетодРасчета <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило";

	Запрос.Выполнить();
	
КонецПроцедуры

// Устарела. Следует использовать Справочники.НастройкиУчетаЗатрат.КраткоеОписаниеНастройки
// Готовит описание правил распределения расходов на естественном языке - как элемент текста учетной политики.
//
// Параметры:
//  Период      - Дата                         - период настроек
//  Организация - СправочникСсылка.Организации - организация, чьи настройки исследуются
// 
// Возвращаемое значение:
//  Массив из ФорматированнаяСтрока
//
Функция ОписаниеРаспределения(Период, Организация) Экспорт
	
	Возврат Справочники.НастройкиУчетаЗатрат.КраткоеОписаниеНастройки(Период, Организация);
	
КонецФункции

// Заполняет структуру ОтборРасходов, в результате чего значениями структуры будут описания типов, что
// соответствует любым значением, кроме пустого значения этого типа.
//
// Параметры:
//  ОтборРасходов - Структура:
//     * Ключ     - имя поля
//     * Значение - условие отбора
//  ДетализацияРасходов - ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные - определяет, по какому разрезу накладывается отбор
//  Процессор           - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//
Процедура УстановитьОтборРасходовТолькоЗаполненные(ОтборРасходов, ДетализацияРасходов, Процессор) Экспорт
	
	ОписаниеРазрезаРаспределения = Процессор.РазрезыРаспределения.Найти(ДетализацияРасходов, "Ключ");
	
	Если ОписаниеРазрезаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборРасходов.Вставить(ОписаниеРазрезаРаспределения.Имя, ОписаниеРазрезаРаспределения.ТипЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиУчетаЗатрат

// Конструктор коллекции, используемой в ходе заполнения правил распределения.
// Используется для хранения состояния, кеширования, "упаковки" параметров.
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - заполняемая коллекция, см. НовыеПравилаРаспределения
//  НастройкиУчетаЗатрат - Структура - источник данных, см. Справочники.НастройкиУчетаЗатрат.НовыйНастройкиУчетаЗатрат
//  РазрезыРаспределения - ТаблицаЗначений - см. РаспределениеРасходов.НовыйРазрезыРаспределения
// 
// Возвращаемое значение:
//  Структура - см. содержимое функции
//
Функция НовыйПроцессорЗаполненияПравилРаспределения(ПравилаРаспределения, НастройкиУчетаЗатрат, РазрезыРаспределения)
	
	Процессор = Новый Структура;
	
	Процессор.Вставить("Правила",              ПравилаРаспределения);
	Процессор.Вставить("Настройки",            НастройкиУчетаЗатрат);
	Процессор.Вставить("РазрезыРаспределения", РазрезыРаспределения);
	Процессор.Вставить("КодЯзыка",             Метаданные.ОсновнойЯзык.КодЯзыка); // Для строк, записываемых в информационную базу
	Процессор.Вставить(
		"ПрименяемыеВидыДеятельности",
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПрименяемыеВидыДеятельности(
			НастройкиУчетаЗатрат.Контекст.Период,
			НастройкиУчетаЗатрат.Контекст.Организация));
	Процессор.Вставить("ПравилаПоСчетам",      Новый Соответствие); // Ключ - счет, Значение - массив правил
	Процессор.Вставить("РазрезыРаспределенияСчетовПриемников", Новый Соответствие); // Ключ - Счет, Значение - ТаблицаЗначений, 
                                                                                    // см. РаспределениеРасходов.НовыйРазрезыРаспределения()
	Процессор.Вставить("КешПредставленийСчетов");
	
	// Устанавливаются в ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения
	Процессор.Вставить("Счет",           ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Процессор.Вставить("ПравилаПоСчету", Новый Массив);
	Процессор.Вставить("Закрытие"); // Настройки.Закрытие по Счет: НовыйНастройкиЗакрытияСчета
	Процессор.Вставить("Аналитика");// Настройки.Аналитика по Счет: Массив видов субконто, имен измерений регистра бухгалтерии
	Процессор.Вставить("АналитикаОстатков"); // Подмножество из Аналитика по субконто, на которых возможен учет остатков
	Процессор.Вставить("АналитикаНезавершенногоПроизводства", Новый Массив); // Подмножество из Аналитика по субконто, в разрезе которых ведется учет НЗП
	
	Процессор.Вставить("КлассСчетов", "");// для совместимости, см. УстановитьКлассСчетовДляСовместимости
	
	Возврат Процессор;
	
КонецФункции

Процедура ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения(Процессор, Счет)
	
	Процессор.Счет = Счет;
	
	Процессор.ПравилаПоСчету = Новый Массив;
	Процессор.ПравилаПоСчетам.Вставить(Счет, Процессор.ПравилаПоСчету);
	
	Процессор.Закрытие  = Процессор.Настройки.Закрытие[Счет];
	Процессор.Аналитика = Процессор.Настройки.Аналитика[Счет];
	
	Процессор.АналитикаОстатков = АналитикаОстатков(Процессор.Аналитика, Процессор.Закрытие.РежимСовместимостиНезавершенногоПроизводства, Счет);
	Процессор.АналитикаНезавершенногоПроизводства = Процессор.Настройки.АналитикаНезавершенногоПроизводства[Счет];
	УстановитьКлассСчетовДляСовместимости(Процессор.КлассСчетов, Счет);
	
КонецПроцедуры

Процедура ЗаполнитьПравилаРаспределенияПоНастройкамУчетаЗатрат(Процессор)
	
	Для Каждого СчетУчета Из Процессор.Настройки.СчетаУчета Цикл
		
		ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения(Процессор, СчетУчета);
		
		СтандартнаяОбработка = Истина;
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилПоСчету(Процессор, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		
		// СЧЕТ 40
		ДобавитьПравилоВыпускПоПлановойСтоимости(Процессор);
		ДобавитьПравилоУчетОтклоненийСтоимости(Процессор);
		
		// СЧЕТА 20, 23
		
		// Распределим затраты между незавершенным производством, введенным в разрезе продукции, и выпуском.
		ДобавитьПравилоНезавершенноеПроизводствоПоПродукцииМатериальныеЗатраты(Процессор);
		ДобавитьПравилоНезавершенноеПроизводствоПоПродукцииЗатратыНаОбработку(Процессор);
		ДобавитьПравилоЗафиксироватьНезавершенноеПроизводство(Процессор);
		
		// Сгруппируем затраты до той детализации, с которой калькулируется себестоимость
		ДобавитьПравилоСгруппироватьПрямыеРасходы(Процессор);
		
		// Обработаем косвенные затраты (учтенные на счетах 20, 23, но не соотнесенные c продукцией)
		// - сгруппируем, чтобы можно было рассчитать (учесть) стоимость незавершенного производства,
		//    определенную в стоимостном выражении по данным инвентаризации
		ДобавитьПравилоНезавершенноеПроизводствоПоИнвентаризацииСгруппировать(Процессор);
		
		// - распределим между наименованиями продукции
		Для Каждого НастройкаРаспределения Из Процессор.Закрытие.Распределение Цикл
			
			Если НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость
				Или НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
				
				// -- на выпуск
				// Результатом производства может быть как окончательно готовая (выпущенная) продукция, так и частично готовое незавершенное производство.
				// В процедуре ДобавитьПравилоВыделитьНезавершенноеПроизводство устанавливается правило, которое
				// разделяет затраты на незавершенное производство и затраты, относящиеся к выпуску.
				ДобавитьПравилоВыделитьНезавершенноеПроизводство(
					Процессор,
					НастройкаРаспределения.БазаРаспределения);
				ДобавитьПравилоЗафиксироватьНезавершенноеПроизводство(Процессор);
				ДобавитьПравилоПрямыеРасходыНаВыпуск(
					Процессор,
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,
					НастройкаРаспределения.БазаРаспределения);
				
			ИначеЕсли НастройкаРаспределения.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
				
				// -- внутри счетов затрат
				ДобавитьПравилоКосвенныеРасходыПоВыручкеОтРеализацииУслуг(Процессор, НастройкаРаспределения);
				
			Иначе
				
				// -- внутри счетов затрат
				ДобавитьПравилоКосвенныеРасходыПоПрямымРасходам(Процессор, НастройкаРаспределения);
				ДобавитьПравилоЗафиксироватьНезавершенноеПроизводство(Процессор);
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьПравилаЗатратыНаРемонтыОС(Процессор);
		
		// Соотнесем с результатами деятельности затраты, связанные с наименованиями продукции
		// (как прямые, так и те косвенные, что удалось распределить)
		// - в части результата, учитываемого как выпуск (в основном - продукции)
		Для Каждого НастройкаРаспределения Из Процессор.Закрытие.Распределение Цикл
			
			Если НастройкаРаспределения.БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость
				И НастройкаРаспределения.БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьПравилоПрямыеРасходыНаВыпуск(
				Процессор,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
				НастройкаРаспределения.БазаРаспределения);
		
		КонецЦикла;
		
		// - в части результата, учитываемого как выручка от реализации услуг
		ДобавитьПравилоПрямыеРасходыПоВыручкеОтРеализацииУслуг(Процессор, Истина);
		
		// Затраты, которые нельзя соотнести с результатами деятельности, в зависимости от применяемой модели учета, могут
		// - либо оставаться в составе запасов как НЗП
		ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризацииЗафиксировать(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
			
		// - либо в полном объеме относиться в расходы периода
		ДобавитьПравилоПрямыеРасходыПоВыручкеОтРеализацииУслуг(Процессор, Ложь);
		
		ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризацииСгруппировать(Процессор);
		ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризацииЗафиксировать(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
			
		ДобавитьПравилаСписатьВсеРасходыНаСебестоимостьОказанныхУслуг(Процессор, Истина);
		ДобавитьПравилаСписатьВсеРасходыНаСебестоимостьОказанныхУслуг(Процессор, Ложь);
		
		// СЧЕТА 25, 26, 28
		
		ДобавитьПравилаКосвенныеРасходыПоНастройке(Процессор);
		
		ДобавитьПравилаРаспределитьНаВсеПодразделения(Процессор);
		
		ДобавитьПравилаРаспределитьНаФинансовыйРезультат(Процессор);
		
		ДобавитьПравилаРаспределитьНаВсеНоменклатурныеГруппы(Процессор);
		
		ДобавитьПравилоДиректКостинг(Процессор);
		
		// РАСХОДЫ ОБСЛУЖИВАЮЩИХ ПРОИЗВОДСТВ И ХОЗЯЙСТВ, СЧЕТ 29
		
		РасходыОбслуживающихПроизводств.ДобавитьПравилоОбслуживающиеПроизводства(Процессор);
		
		// РАСХОДЫ НА ПРОДАЖУ, СЧЕТ 44
		
		// Распределим транспортные расходы
		ДобавитьПравилаТранспортныеРасходы(Процессор);
		
		// Спишем все остальные расходы на продажу
		ДобавитьПравилоРасходыНаПродажу(Процессор);
		
		// КАПИТАЛЬНЫЕ ВЛОЖЕНИЯ В РЕМОНТЫ ОСНОВНЫХ СРЕДСТВ, СЧЕТ 08.04.5
		// Правило добавляется однократно для первого используемого счета, даже если не настроено использование счета 08.04.5.
		УчетРемонтовОС.ДобавитьПравилоЗатратыКапитализируемыеРемонтыНаСтоимостьОС (Процессор);
		
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавленииПравилПоСчету(Процессор);
		
	КонецЦикла;
	
КонецПроцедуры

Функция АналитикаОстатков(Аналитика, РежимСовместимостиНЗП, Счет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("РежимСовместимостиНЗП", РежимСовместимостиНЗП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка = &Счет
	|	И (ВидыСубконто.ТолькоОбороты
	|	ИЛИ (&РежимСовместимостиНЗП
	|	И ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)))";
	
	ТолькоОбороты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидСубконто");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(Аналитика, ТолькоОбороты);
	
КонецФункции

Процедура УстановитьКлассСчетовДляСовместимости(КлассСчетов, Счет)
	
	// Свойство КлассСчетов использовалось в предыдущих версиях.
	// При кастомизации разработчики могли на него опираться, в частности в расширениях.
	// Поэтому оно оставлено для совместимости: его значение заполняется,
	// но не используется.
	// В новых разработках это свойство использовать не следует.
	// Следует опираться на Роль счета в НовыйПроцессорЗаполненияПравилРаспределения.Настройки
	// или НовыйПроцессорЗаполненияПравилРаспределения.Закрытие
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) Тогда
		КлассСчетов = "ПрямыеРасходы";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.БракВПроизводстве) Тогда
		КлассСчетов = "КосвенныеРасходы";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
		КлассСчетов = "РасходыНаПродажу";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства) Тогда
		КлассСчетов = "РасходыОбслуживающихПроизводств";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ВыпускПродукции) Тогда
		КлассСчетов = "ВыпускПродукции";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеПравилРаспределения

#Область КалькуляционныеСчета // 20, 23

Функция РазрезыКалькуляции(Процессор)
	
	РазрезыКалькуляции = РаспределениеРасходов.ИменаРазрезовРаспределения(
		УчетЗатрат.РазрезыКалькуляции(Процессор.Закрытие.Роль),
		Процессор.РазрезыРаспределения);
	
	РазрезыКалькуляции.Добавить("ВидДеятельности");
	
	Возврат РазрезыКалькуляции;
	
КонецФункции

// Разрезы аналитики, поддерживаемые в документе ИнвентаризацияНЗП
//
Функция РазрезыИнвентаризацияНЗП()
	
	РазрезыИнвентаризацияНЗП = Новый Массив;
	
	РазрезыИнвентаризацияНЗП.Добавить("ВидДеятельности");
	РазрезыИнвентаризацияНЗП.Добавить("Счет");
	РазрезыИнвентаризацияНЗП.Добавить("Подразделение");
	РазрезыИнвентаризацияНЗП.Добавить("НоменклатурнаяГруппа");
	
	Возврат РазрезыИнвентаризацияНЗП;
	
КонецФункции

Процедура ДобавитьПравилоСгруппироватьПрямыеРасходы(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости 
		И Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	// Собираем все расходы по аналитике выпуска
	Если ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		Правило = ДобавитьПравилоСгруппироватьРасходы(
			Процессор,
			"СгруппироватьПрямыеРасходы",
			РазрезыКалькуляции(Процессор),
			"РасходыКоличественнаяОценкаНЗП");
	Иначе
		Правило = ДобавитьПравилоСгруппироватьРасходы(
			Процессор,
			"СгруппироватьПрямыеРасходы",
			РазрезыКалькуляции(Процессор));
	КонецЕсли;
		
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило.Наименование = НСтр("ru = 'Сгруппировать прямые расходы с детализацией, необходимой для калькуляции себестоимости'");
	
КонецПроцедуры

Функция ПоляГруппировкиНезавершенногоПроизводстваБезИнвентаризации(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если Процессор.Закрытие.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда
		// Не поддерживается
		Возврат Новый Массив;
	КонецЕсли;
	
	ПоляГруппировки = Новый Массив;
	
	// Незавершенное производство учитывается на том же счете, где накапливаются затраты периода.
	// Поэтому группируем до тех разрезов, которые одновременно
	// - поддержаны в калькуляции
	// - позволяют отразить остаток на счете.
	
	Для Каждого ПолеКалькуляции Из РазрезыКалькуляции(Процессор) Цикл
		
		РазрезРаспределения = Процессор.РазрезыРаспределения.Найти(ПолеКалькуляции, "Имя");
		Если РазрезРаспределения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РазрезРаспределения.ВидСубконто)
			И Процессор.АналитикаОстатков.Найти(РазрезРаспределения.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляГруппировки.Добавить(ПолеКалькуляции);
		
	КонецЦикла;
	
	Возврат ПоляГруппировки;
	
КонецФункции

Процедура ДобавитьПравилаЗатратыНаРемонтыОС(Процессор)
	
	УчетРемонтовОС.ДобавитьПравилаКапитализируемыеРемонтыОС(Процессор);
	
	ДобавитьПравилоЗатратыТекущегоПериодаНаРемонтОС(Процессор);
	
КонецПроцедуры

Процедура ДобавитьПравилоЗатратыТекущегоПериодаНаРемонтОС(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	// Правило распределяет затраты на счета и аналитики, указанные в способе амортизации для основного средства,
	// за исключением статьи затрат: вместо нее используется предопределенная статья затрат "Ремонт основных средств".
	// Поскольку виды аналитики-приемника заранее не известны, используется правило с действием "РаспределитьНаСубконто".
	Правило = ДобавитьПравилоРаспределения(Процессор, "ЗатратыТекущегоПериодаНаРемонтОС", "РаспределитьНаСубконто");
	
	Правило.Наименование = НСтр("ru = 'Распределить затраты на ремонт основных средств'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Текущие затраты на ремонт ОС'");
	
	УстановитьОтборРасходовНеЗаполнено(Правило, "ЭтапРаспределения", Процессор);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ОсновноеСредство",     "ОсновноеСредствоИсточник");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетРемонтов", Процессор.Счет);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ВидСубконтоСтатьяЗатрат", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СтатьяЗатратРемонтыОС", Справочники.СтатьиЗатрат.ПредопределенныйЭлемент("РемонтОС"));
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА Расходы.Субконто1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА Расходы.Субконто2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА Расходы.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
	|	КОНЕЦ КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Расходы
	|ИЗ
	|	Поступления КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Расходы.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	Расходы.Счет = &СчетРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.СпособыОтраженияРасходовПоАмортизации КАК СпособОтражения,
	|	ПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ОсновныеСредства.ОсновноеСредство
	|					ИЗ
	|						ВТ_Расходы КАК ОсновныеСредства)) КАК ПараметрыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредствоИсточник,
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК Счет,
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйВидыСубконто.НомерСтроки, 0) = 1
	|			ТОГДА &СтатьяЗатратРемонтыОС
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйВидыСубконто.НомерСтроки, 0) = 2
	|			ТОГДА &СтатьяЗатратРемонтыОС
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйВидыСубконто.НомерСтроки, 0) = 3
	|			ТОГДА &СтатьяЗатратРемонтыОС
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент КАК База
	|ИЗ
	|	ВТ_ПараметрыАмортизации КАК ПараметрыАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|			ПО СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат = ХозрасчетныйВидыСубконто.Ссылка
	|				И (ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСтатьяЗатрат)
	|		ПО ПараметрыАмортизации.СпособОтражения = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПараметрыАмортизации";
	
	НастроитьТекстБазыРаспределения(Правило, ШаблонТекстаЗапроса);
	
КонецПроцедуры

// Добавляет правило распределения, группирующее расходы по заданным полям.
//
// Параметры:
//  Процессор         - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  ФункциональноеИмя - Строка    - Смысловое имя правила (без ".", без требований к уникальности).
//                                Должно соответствовать требованиям к именам временных таблиц:
//                                имя таблицы с базой распределения будет включать переданное имя правила.
//  ПоляГруппировки   - Массив из Строка - перечень имен полей из РаспределениеРасходов.РазрезыРаспределения(),
//                                         по которым нужно сгруппировать расходы
//  ЭтапРаспределения - Строка    - имя этапа распределения.
//                                  Позволяет отличить расходы с не полностью заполненной аналитикой до группировки и после.
//                                  Если параметр передан, то в результате группировки расходы будут перенесены в новое состояние,
//                                  в котором аналитика ЭтапРаспределения заполнена.
//
// Возвращаемое значение:
//  Неопределено          - правило с такой группировкой бессмысленно выполнять
//  СтрокаТаблицыЗначений - добавленное правило.
//                          После добавления правила следует установить наименование правила.
//
Функция ДобавитьПравилоСгруппироватьРасходы(Процессор, ФункциональноеИмя, ПоляГруппировки, ЭтапРаспределения = "")
	
	// Суть базы распределения - очистить все поля, кроме полей группировки
	ЛишняяАналитика = Новый Структура;
	
	Для Каждого ОписаниеРазреза Из Процессор.РазрезыРаспределения Цикл
		
		Если ПоляГруппировки.Найти(ОписаниеРазреза.Имя) <> Неопределено Тогда
			// Не лишняя
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРазреза.Имя = "ЗавершенаОбработкаНУ" Тогда
			// Для отметки, что обработка завершена, следует установить флаг
			ЗначениеПоУмолчанию = Истина;
		Иначе
			ЗначениеПоУмолчанию = ОписаниеРазреза.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		ЛишняяАналитика.Вставить(ОписаниеРазреза.Имя, ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	ПоляПриемника = Новый Структура; // как в Правиле
	
	Для Каждого ОписаниеРазреза Из ЛишняяАналитика Цикл
		ПоляПриемника.Вставить(ОписаниеРазреза.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПоляПриемника) Тогда
		// Такое правило бессмысленно
		Возврат Неопределено;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, ФункциональноеИмя, "РаспределитьНаРасходы");
	Правило.ПоляПриемника = ПоляПриемника;
	
	Если ЗначениеЗаполнено(ЭтапРаспределения) Тогда
		Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	КонецЕсли;
	
	// Установим текст запроса, выбирающий значения по умолчанию (пустые ссылки) для всей лишней аналитики.
	// Такая база распределения описывает частный ("вырожденный") случай распределения - "Перенос".
	// При этом механика распределения не переносит затраты "само-в-себя",
	// поэтому фактически правило подействует только на расходы,
	// в которых заполнены очищаемые поля.
	Запрос = СхемыЗапросов.НайтиЗапросРезультата(Новый СхемаЗапроса);
	
	Для Каждого ОписаниеРазреза Из ЛишняяАналитика Цикл
		СхемыЗапросов.УстановитьВыражение(Запрос, ОписаниеРазреза.Ключ, "&" + ОписаниеРазреза.Ключ);
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить(ОписаниеРазреза.Ключ, ОписаниеРазреза.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЭтапРаспределения) Тогда
		СхемыЗапросов.УстановитьВыражение(Запрос, "ЭтапРаспределения", "&ЭтапРаспределения");
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ЭтапРаспределения", ЭтапРаспределения);
	КонецЕсли;
	
	НастроитьТекстБазыРаспределения(Правило, Запрос);
	
	Возврат Правило;
	
КонецФункции

// Процедура используется для создания нескольких правил распределения
//
// Параметры:
//  Процессор       - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  ДетализацияРасходов - ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные - определяет расходы, к которым будет применено правило:
//       - Продукция - расходы, отраженные с детализацией до продукции
//                 распределяются на выпуск между различными складами, документами выпуска
//       - НоменклатурныеГруппы - расходы, отраженные с детализацией до номенклатурных групп,
//                 распределяются на выпуск между различными наименованиями продукции, а также - складами, документами выпуска
//  МетодРасчета             - ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов - метод расчета коэффициентов базы распределения:
//       - ОбъемВыпуска          - объем выпуска в количественных показателях
//       - ПлановаяСебестоимость - объем выпуска в стоимостных показателях (при наличии)
//
Процедура ДобавитьПравилоПрямыеРасходыНаВыпуск(Процессор, ДетализацияРасходов, МетодРасчета)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		
		// Проверим, что такой разрез аналитики используется.
		
		Если Процессор.Аналитика.Найти(ДетализацияРасходов) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		// Проверим, что настройки предполагают наличие данных для расчета.
		ИспользоватьПлановуюСебестоимость = Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьПлановуюСебестоимость(
			Процессор.Настройки.ВариантУчетаСтоимостиВыпуска);
		Если Не ИспользоватьПлановуюСебестоимость Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьСчетВыпускПродукции =
		Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСчетВыпускПродукции(
			Процессор.Настройки.ВариантУчетаСтоимостиВыпуска)
		И Не Перечисления.ВариантыУчетаСтоимостиВыпуска.ТранзитныйАлгоритмУчетаОтклоненийОтПлановойСебестоимости(
			Процессор.Настройки.ВариантУчетаСтоимостиВыпуска);
		
	Если ИспользоватьСчетВыпускПродукции Тогда
		Действие = "РаспределитьНаРасходы";  // На промежуточный счет 40
	Иначе
		Действие = "РаспределитьНаСубконто"; // В пункт прибытия
	КонецЕсли;
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		
		ИмяДетализацияРасходов = "ПоПродукции";
		Наименование           = НСтр("ru = 'Отнести расходы на выпуск продукции, услуг, работ'");
		
	Иначе
		
		ИмяДетализацияРасходов = "ПоНоменклатурнымГруппам";
		Наименование           = НСтр("ru = 'Распределить расходы на выпуск продукции, услуг, работ'");
		
	КонецЕсли;
	
	Имя = "Выпуск" + ИмяДетализацияРасходов + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета);
	// Например, ВыпускПоПродукцииОбъемВыпуска.
		
	Правило = ДобавитьПравилоРаспределения(Процессор, Имя, Действие);
		
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя;
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	
	ТекстЗапросаРасшифровкиРасчета = "";
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
		И ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		
		ДобавитьОписаниеТаблицыРезультатПроизводства(Правило.БазаРаспределения, МетодРасчета, Процессор.Счет);
		Правило.БазаРаспределения.РасшифровкаРасчета =
			ИмяТаблицыРасшифровкаРасчета("РасходыНаВыпуск_" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета), Процессор.Счет);
			
		// Для счетов количественной оценкой НЗП в базе содержится расшифровка расчета, поэтому каждой такой базе присваивается уникальное имя,
		// содержащее идентификатор счета.
		Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя + "_" + УникальноеПредставлениеСсылки(Процессор.Счет);
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("МетодРасчета", МетодРасчета);
		
		ТекстЗапросаРасшифровкиРасчета =
		"ВЫБРАТЬ
		|	РезультатПроизводства.ВидДеятельности КАК ВидДеятельности,
		|	РезультатПроизводства.Счет КАК Счет,
		|	РезультатПроизводства.Подразделение КАК Подразделение,
		|	РезультатПроизводства.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка) КАК СтатьяЗатрат,
		|	РезультатПроизводства.Продукция КАК Продукция,
		|	&МетодРасчета КАК ВидБазыРаспределения,
		|	СУММА(РезультатПроизводства.БазаЭквивалентныеЕдиницы) КАК БазаЭквивалентныеЕдиницы,
		|	СУММА(РезультатПроизводства.База) КАК БазаВыпуск
		|ПОМЕСТИТЬ ИмяТаблицыРасшифровкаРасчета
		|ИЗ
		|	ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат КАК РезультатПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатПроизводства.ВидДеятельности,
		|	РезультатПроизводства.НоменклатурнаяГруппа,
		|	РезультатПроизводства.Счет,
		|	РезультатПроизводства.Подразделение,
		|	РезультатПроизводства.Продукция
		|
		|ИМЕЮЩИЕ
		|	(СУММА(РезультатПроизводства.База) > 0
		|		ИЛИ СУММА(РезультатПроизводства.БазаЭквивалентныеЕдиницы) > 0)";
		
		ТекстЗапросаРасшифровкиРасчета = СтрЗаменить(
			ТекстЗапросаРасшифровкиРасчета,
			"ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат",
			ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат(МетодРасчета, Процессор.Счет));
		ТекстЗапросаРасшифровкиРасчета = СтрЗаменить(
			ТекстЗапросаРасшифровкиРасчета,
			"ИмяТаблицыРасшифровкаРасчета",
			Правило.БазаРаспределения.РасшифровкаРасчета);
		ТекстЗапросаРасшифровкиРасчета = ТекстЗапросаРасшифровкиРасчета + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Правило.Наименование = Наименование;
	
	Правило.Выпуск       = Истина;
	Правило.МетодРасчета = МетодРасчета;
	
	Если ИспользоватьСчетВыпускПродукции Тогда
		Правило.ПоляПриемника.Вставить("Счет");
		Правило.ПоляПриемника.Вставить("Продукция");
		Правило.ПоляПриемника.Вставить("ВидСтоимости");
		Правило.ПоляПриемника.Вставить("Номенклатура");// Для правил вида Выпуск
		// Для учета отклонений важно, чтобы в результате распределения расходов аналитика получилась такой же,
		// по которой отражена плановая (фиксированная) стоимость.
		// Представляя поток затрат в виде графа, можно сказать, что важно, чтобы вершина, в которой определяется фактическая стоимость,
		// была не позже вершины, из которой уходит плановая (фиксированная) стоимость.
		//
		// Поэтому здесь не применяется стандартное правило очистки аналитики налогового учета (ДобавитьПравилаУдалитьАналитикуНалоговогоУчета):
		// стандартное очищенное значение поля ЗавершенаОбработкаНУ == Истина, а ВидДеятельности обычно заполнен.
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		Правило.ПоляПриемника.Вставить("ЗавершенаОбработкаНУ");
		Правило.ПоляПриемника.Вставить("НалоговыйУчет");
		Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
		Правило.ПоляПриемника.Вставить("КорСчет");
		// На счете 40 может отсутствовать учет по подразделениям.
		// Такой режим мог быть установлен в предыдущих версиях программы.
		// Если при этом на счете 20 он включен, это может приводить к тому, 
		// что аналитика результата распределения будет отличаться от той, по которой отражена плановая стоимость.
		Если ОтключенУчетПоПодразделениямВыпускПродукции() Тогда
			Правило.ПоляПриемника.Вставить("Подразделение");
		КонецЕсли;
	КонецЕсли;
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельностиИсточник");
	Правило.ПоляИсточника.Вставить("Счет",                 "СчетИсточник");
	Правило.ПоляИсточника.Вставить("Подразделение",        "ПодразделениеИсточник");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппаИсточник");
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Правило.ПоляИсточника.Вставить("Продукция",         "ПродукцияИсточник");
	КонецЕсли;
	
	// Исключаем перераспределение с одной продукции на другую
	Если ДетализацияРасходов <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		УстановитьОтборРасходовНеЗаполнено(Правило, "Продукция", Процессор);
	КонецЕсли;
	
	// Шаблон запроса собран из частей так, чтобы был удобен для модификации,
	// но никогда не выполняется в неизменном виде - всегда модифицируется.
	// Не все эти модификации удобны для примерения СхемыЗапроса, поэтому текст модифицируется комбинацией методов.
	// А именно:
	// - имя таблицы условное; ниже устанавливается имя таблицы, в которую помещаются данные
	// - параметр &ИмяПоля не используется; вместо него в поле База устанавливается источник данных в зависимости от МетодРасчета
	// - отбор применяется для МетодРасчета == ПлановаяСебестоимость (потому что он имеет ограничение в таблице ВыпускПродукцииУслуг),
	//   для другого метода отбор удаляется
	// - поле ПродукцияИсточник применяется для ДетализацияРасходов == Продукция;
	//   для другого метода поле удаляется.
	Если ИспользоватьСчетВыпускПродукции Тогда
		
		// Используется ВидСтоимости == Плановая - см. РасчетСебестоимости.ЗаполнитьВидСтоимостиВыпускПродукции
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	Выпуск.ВидДеятельности КАК ВидДеятельностиИсточник,
		|	Выпуск.СчетИсточник КАК СчетИсточник,
		|	Выпуск.ПодразделениеИсточник КАК ПодразделениеИсточник,
		|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппаИсточник,
		|	Выпуск.ПродукцияИсточник КАК ПродукцияИсточник,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции) КАК Счет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая) КАК ВидСтоимости,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	Выпуск.Номенклатура КАК Продукция,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	ЛОЖЬ КАК ЗавершенаОбработкаНУ,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка) КАК ВидДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
		|	&ИмяПоля КАК База
		|ПОМЕСТИТЬ БазаРаспределения
		|ИЗ
		|	ВыпускПродукцииУслуг КАК Выпуск
		|ГДЕ
		|	Выпуск.РазрешеноИспользоватьПлановуюСтоимость
		|	И НЕ Выпуск.НезавершенноеПроизводство";
		
	Иначе
		
		// Поля приемника представлены в виде полного набора субконто
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	Выпуск.ВидДеятельности КАК ВидДеятельностиИсточник,
		|	Выпуск.СчетИсточник КАК СчетИсточник,
		|	Выпуск.ПодразделениеИсточник КАК ПодразделениеИсточник,
		|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппаИсточник,
		|	Выпуск.ПродукцияИсточник КАК ПродукцияИсточник,
		|	Выпуск.Счет КАК Счет,
		|	Выпуск.Подразделение КАК Подразделение,
		|	Выпуск.Субконто1 КАК Субконто1,
		|	Выпуск.Субконто2 КАК Субконто2,
		|	Выпуск.Субконто3 КАК Субконто3,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	&ИмяПоля КАК База
		|ПОМЕСТИТЬ БазаРаспределения
		|ИЗ
		|	ВыпускПродукцииУслуг КАК Выпуск
		|ГДЕ
		|	Выпуск.РазрешеноИспользоватьПлановуюСтоимость
		|	И НЕ Выпуск.НезавершенноеПроизводство";
		
	КонецЕсли;
	
	// Имя поля устанавливаем через замену, остальные модификации - схемой запроса.
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоля", "Выпуск.ПлановаяСтоимость");
	Иначе
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоля", "Выпуск.Количество");
	КонецЕсли;
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0]; // пакет из одного запроса
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0]; // запрос без объединений
	
	ОписаниеЗапроса.ТаблицаДляПомещения = Правило.БазаРаспределения.Имя;
		
	Если МетодРасчета <> Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ОператорЗапроса.Отбор.Очистить();
	КонецЕсли;
		
	Если ДетализацияРасходов <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		// без ПродукцияИсточник
		КолонкаПродукция = ОписаниеЗапроса.Колонки.Найти("ПродукцияИсточник");
		ИндексКолонкиПродукция = ОписаниеЗапроса.Колонки.Индекс(КолонкаПродукция);
		ОписаниеЗапроса.Колонки.Удалить(ИндексКолонкиПродукция);
	КонецЕсли;
	
	Правило.БазаРаспределения.ТекстЗапроса = ТекстЗапросаРасшифровкиРасчета + СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоПоИнвентаризацииСгруппировать(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости
		И Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процессор.Закрытие.НезавершенноеПроизводство)
		Или Процессор.Закрытие.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется Тогда
		// См. Справочники.НастройкиУчетаЗатрат.ИспользованиеДокументаИнвентаризацияНезавершенногоПроизводства
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		Возврат;
	КонецЕсли;
	
	// Суммы, определенные по результатам инвентаризации незавершенного производства
	// и указанные в документе "Инвентаризация НЗП", остаются на счете, не участвуют в дальнейшем распределении.
	// Для того, чтобы определить эту сумму, соберем (сгруппируем) релевантные затраты до той детализации,
	// что может быть задана в документе.
	
	ПоляГруппировки = РазрезыИнвентаризацияНЗП();
	Если Не ЗначениеЗаполнено(ПоляГруппировки) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоСгруппироватьРасходы(
		Процессор,
		"НезавершенноеПроизводствоПоИнвентаризацииСгруппировать",
		ПоляГруппировки);
		
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) <> Неопределено Тогда
		// Работаем только с затратами, не связанными с наименованиями продукции.
		// Это нужно, чтобы избежать дальнейшего распределения сгруппированных затрат между наименованиями продукции.
		УстановитьОтборРасходовНеЗаполнено(Правило, "Продукция", Процессор);
	КонецЕсли;
	
	Правило.Наименование = НСтр("ru = 'Сгруппировать затраты для оценки незавершенного производства по результатам инвентаризации'");
	
КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоПоПродукцииМатериальныеЗатраты(Процессор)
	
	// Правило делит затраты, отнесенные на продукцию, между незавершенным производством и выпуском.
	// При этом стоимость материалов делится пропорционально выпуску и количеству в документе НЗП, а стоимость
	// других затат - пропорционально выпуску и сумме степеней готовности.
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "НезавершенноеПроизводствоПоПродукцииМатериальныеЗатраты", "РаспределитьНаРасходы");

	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_НезавершенноеПроизводствоПоПродукцииМатериальныеЗатраты";
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ИмяЭтапаПрямыеРасходы", ИмяЭтапаПрямыеРасходы());
	
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	Правило.ПоляИсточника.Вставить("Счет", "Счет");
	Правило.ПоляИсточника.Вставить("Подразделение", "Подразделение");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	Правило.ПоляИсточника.Вставить("Продукция", "Продукция");
		
	УстановитьОтборРасходовТолькоЗаполненные(
		Правило.ОтборРасходов,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
		Процессор);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.МатериальныеРасходы)";
	
	СписокСтатейЗатратМатериальныеРасходы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяЗатрат");
	Правило.ОтборРасходов.Вставить("СтатьяЗатрат", СписокСтатейЗатратМатериальныеРасходы);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетИсточник КАК Счет,
	|	ВыпускПродукцииУслуг.ПодразделениеИсточник КАК Подразделение,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция КАК Продукция,
	|	ВЫБОР
	|		КОГДА ВыпускПродукцииУслуг.НезавершенноеПроизводство
	|			ТОГДА ""НезавершенноеПроизводство""
	|		ИНАЧЕ &ИмяЭтапаПрямыеРасходы
	|	КОНЕЦ КАК ЭтапРаспределения,
	|	ВЫБОР
	|		КОГДА ВыпускПродукцииУслуг.НезавершенноеПроизводство
	|			ТОГДА ВыпускПродукцииУслуг.КоличествоНезавершенноеПроизводство
	|		ИНАЧЕ ВыпускПродукцииУслуг.Количество
	|	КОНЕЦ КАК База
	|ИЗ
	|	ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг";
		
	Правило.Наименование = НСтр("ru = 'Распределить прямые материальные затраты между НЗП и выпуском'");
	
	НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
		
КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоПоПродукцииЗатратыНаОбработку(Процессор)
	
	// Правило делит затраты, отнесенные на продукцию, между незавершенным производством и выпуском.
	// При этом стоимость материалов делится пропорционально выпуску и количеству в документе НЗП, а стоимость
	// других затат - пропорционально выпуску и сумме степеней готовности.
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "НезавершенноеПроизводствоПоПродукцииЗатратыНаОбработку", "РаспределитьНаРасходы");
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	
	// Имя таблицы должно быть уникальным для совокупности текста и параметров запроса
	Правило.БазаРаспределения.Имя = "БазаРаспределения_НезавершенноеПроизводствоПоПродукцииЗатратыНаОбработку";
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ИмяЭтапаПрямыеРасходы", ИмяЭтапаПрямыеРасходы());
	
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	Правило.ПоляИсточника.Вставить("Счет", "Счет");
	Правило.ПоляИсточника.Вставить("Подразделение", "Подразделение");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	Правило.ПоляИсточника.Вставить("Продукция", "Продукция");
		
	УстановитьОтборРасходовТолькоЗаполненные(
		Правило.ОтборРасходов,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
		Процессор);
		
	УстановитьОтборРасходовНеЗаполнено(Правило, "ЭтапРаспределения", Процессор);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетИсточник КАК Счет,
	|	ВыпускПродукцииУслуг.ПодразделениеИсточник КАК Подразделение,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция КАК Продукция,
	|	ВЫБОР
	|		КОГДА ВыпускПродукцииУслуг.НезавершенноеПроизводство
	|			ТОГДА ""НезавершенноеПроизводство""
	|		ИНАЧЕ &ИмяЭтапаПрямыеРасходы
	|	КОНЕЦ КАК ЭтапРаспределения,
	|	ВыпускПродукцииУслуг.КоличествоЭквивалентныеЕдиницы КАК База
	|ИЗ
	|	ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг";
		
	Правило.Наименование = НСтр("ru = 'Распределить прямые затраты на обработку между НЗП и выпуском'");
	
	НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
		
КонецПроцедуры

Процедура ДобавитьПравилоВыделитьНезавершенноеПроизводство(Процессор, МетодРасчета)
	
	Если Не ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		// См. Справочники.НастройкиУчетаЗатрат.ИспользованиеДокументаИнвентаризацияНезавершенногоПроизводства
		Возврат;
	КонецЕсли;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		// Проверим, что настройки предполагают наличие данных для расчета.
		ИспользоватьПлановуюСебестоимость = Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьПлановуюСебестоимость(
			Процессор.Настройки.ВариантУчетаСтоимостиВыпуска);
		Если Не ИспользоватьПлановуюСебестоимость Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Имя = "ВыделитьНезавершенноеПроизводствоПоПродукцииВыпуск_" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета);
	
	Действие = "РаспределитьНаРасходы";
	
	Правило = ДобавитьПравилоРаспределения(Процессор, Имя, Действие);
	
	Правило.Наименование = НСтр("ru = 'Разделить косвенные затраты между выпуском и незавершенным производством'");
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Имя;
	
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	Правило.ПоляИсточника.Вставить("ВидДеятельности", "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("Счет", "Счет");
	Правило.ПоляИсточника.Вставить("Подразделение", "Подразделение");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Счет", Процессор.Счет);
	
	УстановитьОтборРасходовНеЗаполнено(Правило, "Продукция", Процессор);
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	ДобавитьОписаниеТаблицыРезультатПроизводства(Правило.БазаРаспределения, МетодРасчета, Процессор.Счет);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РезультатПроизводства.ВидДеятельности КАК ВидДеятельности,
		|	РезультатПроизводства.Счет КАК Счет,
		|	РезультатПроизводства.Подразделение КАК Подразделение,
		|	РезультатПроизводства.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РезультатПроизводства.ЭтапРаспределения КАК ЭтапРаспределения,
		|	РезультатПроизводства.БазаЭквивалентныеЕдиницы КАК База
		|ИЗ
		|	ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат КАК РезультатПроизводства";
		
	ИмяТаблицыРасшифровки = ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат(МетодРасчета, Процессор.Счет);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат", ИмяТаблицыРасшифровки);
	
	НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
	
КонецПроцедуры

Функция ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Знач Процессор)
	
	Возврат Процессор.Закрытие.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяПоРезультатамИнвентаризации
	И Процессор.АналитикаНезавершенногоПроизводства.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) <> Неопределено;

КонецФункции

// Использует данные временной таблицы ВыпускПродукцииУслуг, поэтому вызову этого метода должен предшествовать метод
// ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг()
//
Процедура ДобавитьОписаниеТаблицыРезультатПроизводства(ОписаниеБазы, МетодРасчета, Счет)
	
	ИмяТаблицыРасшифровки = ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат(МетодРасчета, Счет);
	
	ОписаниеВременныхТаблиц = ДобавитьПакетВременныхТаблиц(ОписаниеБазы, ИмяТаблицыРасшифровки);
	ОписаниеВременныхТаблиц.ПараметрыЗапроса.Вставить("Счет", Счет);
	
	// Часть косвенных затрат будет оставлена в незавершенном производстве (этап "НезавершенноеПроизводство"),
	// а часть будет распределена на выпущенную продукцию (этап "ВыпускКосвенныеЗатраты").
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	Выпуск.ВидДеятельности КАК ВидДеятельности,
	|	Выпуск.СчетИсточник КАК Счет,
	|	Выпуск.ПодразделениеИсточник КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппа,
	|	Выпуск.Продукция КАК Продукция,
	|	ВЫБОР
	|		КОГДА Выпуск.НезавершенноеПроизводство
	|			ТОГДА ""НезавершенноеПроизводство""
	|		ИНАЧЕ ""ВыпускКосвенныеЗатраты""
	|	КОНЕЦ КАК ЭтапРаспределения,
	|	&ИмяПоляВыпуск КАК База,
	|	&ИмяПоляЭквивалентныеЕдиницы КАК БазаЭквивалентныеЕдиницы
	|ПОМЕСТИТЬ ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат
	|ИЗ
	|	ВыпускПродукцииУслуг КАК Выпуск
	|ГДЕ
	|	Выпуск.СчетИсточник = &Счет";
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоляВыпуск", "Выпуск.ПлановаяСтоимость");
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоляЭквивалентныеЕдиницы", "Выпуск.ПлановаяСтоимостьЭквивалентныеЕдиницы");
	Иначе
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоляВыпуск", "Выпуск.Количество");
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоляЭквивалентныеЕдиницы", "Выпуск.КоличествоЭквивалентныеЕдиницы");
	КонецЕсли;
	
	ОписаниеВременныхТаблиц.ТекстЗапроса = СтрЗаменить(
		ШаблонЗапроса,
		"ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат",
		ИмяТаблицыРасшифровки);
	
КонецПроцедуры

Функция ИмяТаблицыРезультатПроизводстваДляСчетаЗатрат(МетодРасчета, Счет)
	
	Возврат "РезультатПроизводства_" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета) + УникальноеПредставлениеСсылки(Счет);

КонецФункции

Функция ИмяТаблицыРасшифровкаРасчета(Знач ИмяТаблицы, Знач СчетУчета)
	
	Возврат "РасшифровкаРасчета_" + ИмяТаблицы + "_" + УникальноеПредставлениеСсылки(СчетУчета);

КонецФункции

Процедура ДобавитьПравилоЗафиксироватьНезавершенноеПроизводство(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процессор.Закрытие.НезавершенноеПроизводство)
	 И Процессор.Закрытие.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.НеВедется Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(
		Процессор,
		"НезавершенноеПроизводствоПоПродукцииЗафиксировать",
		"Зафиксировать");
	Правило.ОтборРасходов.Вставить("ЭтапРаспределения", "НезавершенноеПроизводство");
	Правило.Наименование = НСтр("ru = 'Зафиксировать затраты незавершенного производства'");
	
КонецПроцедуры

Процедура ДобавитьПравилоКосвенныеРасходыПоВыручкеОтРеализацииУслуг(Процессор, НастройкаРаспределения)
	
	// Это правило обеспечивает распределение на калькуляционном счете (20).
	// Для распределения косвенных затрат с распределительного счета (25)
	// на калькуляционный счет см. ДобавитьПравилоМетодВыручкаТолькоУслуги
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что распределение в принципе может иметь смысл - такой разрез аналитики используется
	Если Процессор.Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "КосвенныеРасходыПоВыручкеОтРеализацииУслуг", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Распределить затраты, отнесенные на номенклатурные группы без указания наименований услуг, пропорционально выручке от их реализации'");
	Правило.МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг;
	
	// Отбор источника
	УстановитьОтборРасходовНеЗаполнено(Правило, "Продукция", Процессор);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа"); // выше упомянуто в описании настройки
	
	// Поля приемника - представлены в виде аналитики распределения
	Правило.ПоляПриемника.Вставить("Продукция");
	
	// База распределения
	ДобавитьОписаниеВременнойТаблицыВыручкаОтРеализацииУслуг(Правило.БазаРаспределения);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Выручка.ВидДеятельности КАК ВидДеятельности,
	|	Выручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выручка.Услуга КАК Продукция,
	|	Выручка.База КАК База
	|ИЗ
	|	ВыручкаОтРеализацииУслуг КАК Выручка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Выручка.Услуга = Номенклатура.Ссылка";
	
	НастроитьТекстБазыРаспределения(Правило, ШаблонТекстаЗапроса);
	
КонецПроцедуры

Процедура ДобавитьПравилоКосвенныеРасходыПоПрямымРасходам(Процессор, НастройкаРаспределения)

	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости 
		И Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		// Организация не использует калькуляционные счета.
		Возврат;
	КонецЕсли;
	
	// Для калькуляционных счетов себестоимости продукции затраты в разрезе номенклатурных групп распределяются на продукцию,
	// а для счетов ремонта ОС затраты в разрезе видов ремонтов распределяются на основные средства.
	НаправлениеРаспределения = Новый Структура;
	НаправлениеРаспределения.Вставить("Источник");
	НаправлениеРаспределения.Вставить("Приемник");

	Если Процессор.Закрытие.Роль = Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		НаправлениеРаспределения.Источник = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
		НаправлениеРаспределения.Приемник = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
		НаименованиеПравила = НСтр(
			"ru = 'Распределить затраты, отнесенные на номенклатурные группы без указания продукции, пропорционально прямым затраты'");
	Иначе
		НаправлениеРаспределения.Источник = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРемонтовОС;
		НаправлениеРаспределения.Приемник = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
		НаименованиеПравила = НСтр(
			"ru = 'Распределить затраты, отнесенные на виды ремонтов без указания основного средства, пропорционально прямым затраты'");
	КонецЕсли;
	
	// Проверим, что данные о прямых расходах на аналитику-приемник в принципе могут быть отражены -
	// такой разрез аналитики используется
	Если Процессор.Аналитика.Найти(НаправлениеРаспределения.Приемник) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РазрезРаспределенияИсточник = Процессор.РазрезыРаспределения.Найти(НаправлениеРаспределения.Источник, "Ключ");
	РазрезРаспределенияПриемник = Процессор.РазрезыРаспределения.Найти(НаправлениеРаспределения.Приемник, "Ключ");

	Если РазрезРаспределенияИсточник = Неопределено Или РазрезРаспределенияПриемник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// "НоменклатурнаяГруппа" или "ВидРемонтаОС"
	ИмяРазрезаИсточник = РазрезРаспределенияИсточник.Имя;
	// "Продукция" или "ОсновноеСредство"
	ИмяРазрезаПриемник = РазрезРаспределенияПриемник.Имя;

	МетодРасчета = НастройкаРаспределения.БазаРаспределения;
	Если Не ЗначениеЗаполнено(МетодРасчета) Тогда
		МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "КосвенныеРасходыПоПрямымРасходам", "РаспределитьНаРасходы");

	Правило.Наименование = НаименованиеПравила;

	Правило.МетодРасчета = МетодРасчета;
	
	// Отбор источника
	УстановитьОтборРасходовНеЗаполнено(Правило, ИмяРазрезаПриемник, Процессор);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",  "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("Счет",             "Счет");
	Правило.ПоляИсточника.Вставить("Подразделение",    "Подразделение");        // выше упомянуто в описании настройки
	Правило.ПоляИсточника.Вставить(ИмяРазрезаИсточник, ИмяРазрезаИсточник); // выше упомянуто в описании настройки
	
	// Поля приемника - представлены в виде аналитики распределения
	Правило.ПоляПриемника.Вставить(ИмяРазрезаПриемник);
	
	// База распределения
	ОтборБазы = Справочники.НастройкиУчетаЗатрат.ОтборБазыРаспределения(
		МетодРасчета,
		НастройкаРаспределения.Модификатор);
	ОписаниеВременнойТаблицы = ДобавитьОписаниеВременнойТаблицыСтоимостьРасходов(
		Правило.БазаРаспределения,
		МетодРасчета,
		ОтборБазы);
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетПрямыхРасходов", Процессор.Счет);
	
	Если Не ИспользуетсяКоличественнаяОценкаНезавершенногоПроизводства(Процессор) Тогда
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Расходы.Счет КАК Счет,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.ВидДеятельности КАК ВидДеятельности,
		|	Расходы.База КАК База
		|ИЗ
		|	ПакетВременныхТаблиц КАК Расходы
		|ГДЕ
		|	Расходы.Счет = &СчетПрямыхРасходов";
		
		ТочкаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "Расходы");
		
		ТочкаЗапроса.Таблица.ДоступныеПоля.Добавить(ИмяРазрезаИсточник);
		ТочкаЗапроса.Таблица.ДоступныеПоля.Добавить(ИмяРазрезаПриемник);
		
		Источник = ТочкаЗапроса.Оператор.Источники.Добавить(
			РазрезРаспределенияПриемник.ЗначениеПоУмолчанию.Метаданные().ПолноеИмя(), "СправочникПриемник" + ИмяРазрезаПриемник);
		
		ТочкаЗапроса.Источник.Соединения.Добавить(Источник, "Расходы." + ИмяРазрезаПриемник + " = " + "СправочникПриемник" + ИмяРазрезаПриемник + ".Ссылка");
		ТочкаЗапроса.Источник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;

		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, ИмяРазрезаИсточник, "Расходы." + ИмяРазрезаИсточник);
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, ИмяРазрезаПриемник, "Расходы." + ИмяРазрезаПриемник);
	
		ШаблонТекстаЗапроса = ТочкаЗапроса.Схема.ПолучитьТекстЗапроса();

	Иначе
		// В описании временной таблицы ВыпускПродукцииУслуг содержится временная таблица РезультатПроизводства.
		ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
		
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("МетодРасчета", МетодРасчета);
		Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	Расходы.Счет КАК Счет,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Расходы.СтатьяЗатрат КАК СтатьяЗатрат,
		|	Расходы.Продукция КАК Продукция,
		|	Расходы.ВидДеятельности КАК ВидДеятельности,
		|	СУММА(ВЫБОР
		|			КОГДА Расходы.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.МатериальныеРасходы)
		|				ТОГДА ВЫБОР
		|						КОГДА РезультатПроизводства.Количество + РезультатПроизводства.КоличествоНезавершенноеПроизводство = 0
		|							ТОГДА 0
		|						ИНАЧЕ РезультатПроизводства.Количество * (Расходы.База + Расходы.БазаНачальноеСальдо) / (РезультатПроизводства.Количество + РезультатПроизводства.КоличествоНезавершенноеПроизводство)
		|					КОНЕЦ
		|			КОГДА РезультатПроизводства.КоличествоЭквивалентныеЕдиницы = 0
		|				ТОГДА 0
		|			ИНАЧЕ РезультатПроизводства.Количество * (Расходы.База + Расходы.БазаНачальноеСальдо) / РезультатПроизводства.КоличествоЭквивалентныеЕдиницы
		|		КОНЕЦ) КАК БазаВыпуск,
		|	&МетодРасчета КАК ВидБазыРаспределения,
		|	СУММА(Расходы.База + Расходы.БазаНачальноеСальдо) КАК БазаЭквивалентныеЕдиницы,
		|	СУММА(ВЫБОР
		|			КОГДА Расходы.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.МатериальныеРасходы)
		|				ТОГДА ВЫБОР
		|						КОГДА РезультатПроизводства.Количество + РезультатПроизводства.КоличествоНезавершенноеПроизводство = 0
		|							ТОГДА 0
		|						ИНАЧЕ РезультатПроизводства.КоличествоЭквивалентныеЕдиницыНЗП * (Расходы.База + Расходы.БазаНачальноеСальдо) / (РезультатПроизводства.Количество + РезультатПроизводства.КоличествоНезавершенноеПроизводство)
		|					КОНЕЦ
		|			КОГДА РезультатПроизводства.Количество + РезультатПроизводства.КоличествоЭквивалентныеЕдиницыНЗП = 0
		|				ТОГДА 0
		|			ИНАЧЕ РезультатПроизводства.КоличествоЭквивалентныеЕдиницыНЗП * (Расходы.База + Расходы.БазаНачальноеСальдо) / (РезультатПроизводства.Количество + РезультатПроизводства.КоличествоЭквивалентныеЕдиницыНЗП)
		|		КОНЕЦ) КАК БазаНезавершенноеПроизводство
		|ПОМЕСТИТЬ ИмяТаблицыРасшифровкаРасчета
		|ИЗ
		|	ПакетВременныхТаблиц КАК Расходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО Расходы.Продукция = Номенклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РезультатПроизводства КАК РезультатПроизводства
		|		ПО Расходы.Счет = РезультатПроизводства.СчетИсточник
		|			И Расходы.Подразделение = РезультатПроизводства.ПодразделениеИсточник
		|			И Расходы.НоменклатурнаяГруппа = РезультатПроизводства.НоменклатурнаяГруппа
		|			И Расходы.Продукция = РезультатПроизводства.Продукция
		|ГДЕ
		|	Расходы.Счет = &СчетПрямыхРасходов
		|
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Подразделение,
		|	Расходы.СтатьяЗатрат,
		|	Расходы.ВидДеятельности,
		|	Расходы.НоменклатурнаяГруппа,
		|	Расходы.Счет,
		|	Расходы.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Счет КАК Счет,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Расходы.Продукция КАК Продукция,
		|	Расходы.ВидДеятельности КАК ВидДеятельности,
		|	""РасходыКоличественнаяОценкаНЗП"" КАК ЭтапРаспределения,
		|	СУММА(Расходы.БазаВыпуск) КАК База
		|ИЗ
		|	ИмяТаблицыРасшифровкаРасчета КАК Расходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Счет,
		|	Расходы.Продукция,
		|	Расходы.НоменклатурнаяГруппа,
		|	Расходы.Подразделение,
		|	Расходы.ВидДеятельности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расходы.Счет,
		|	Расходы.Подразделение,
		|	Расходы.НоменклатурнаяГруппа,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	Расходы.ВидДеятельности,
		|	""НезавершенноеПроизводство"",
		|	СУММА(Расходы.БазаНезавершенноеПроизводство)
		|ИЗ
		|	ИмяТаблицыРасшифровкаРасчета КАК Расходы
		|ГДЕ
		|	Расходы.Счет = &СчетПрямыхРасходов
		|
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Счет,
		|	Расходы.ВидДеятельности,
		|	Расходы.НоменклатурнаяГруппа,
		|	Расходы.Подразделение";
		
		ИмяТаблицыРасшифровкаРасчета = ИмяТаблицыРасшифровкаРасчета(ОписаниеВременнойТаблицы.Имя, Процессор.Счет);
		Правило.БазаРаспределения.РасшифровкаРасчета = ИмяТаблицыРасшифровкаРасчета;
		
		ШаблонТекстаЗапроса = СтрЗаменить(
			ШаблонТекстаЗапроса,
			"ИмяТаблицыРасшифровкаРасчета",
			ИмяТаблицыРасшифровкаРасчета);
			
	КонецЕсли;
		
	ТекстБазыРаспределения = СтрЗаменить(
		ШаблонТекстаЗапроса,
		"ПакетВременныхТаблиц",
		ОписаниеВременнойТаблицы.Имя);
		
	НастроитьТекстБазыРаспределения(Правило, ТекстБазыРаспределения);

КонецПроцедуры

Процедура ДобавитьПравилоПрямыеРасходыПоВыручкеОтРеализацииУслуг(Процессор, КалькулироватьУслуги)
	
	// Прямые расходы, связанные с оказанием услуг, отнести на результат с учетом наименований услуг
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		// Организация не использует счет 20
		Возврат;
	КонецЕсли;
	
	// Проверим, что данные о прямых расходах на услуги в принципе могут быть отражены - 
	// такой разрез аналитики используется
	Если КалькулироватьУслуги
		И Процессор.Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Исключим режим совместимости с ред. 2
	Если Процессор.Закрытие.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации
		И Процессор.Настройки.НакапливатьЗатратыДоВыпуска Тогда
		Возврат;
	КонецЕсли;
	
	// Затраты, отнесенные к позициям услуг, по которым отражена выручка, включаются в себестоимость услуг:
	// списываются на счет финансового результата
	Если КалькулироватьУслуги Тогда
		ИмяПравила    = "КалькуляцияУслуг";
		Представление = НСтр("ru = 'Включить в себестоимость оказанных услуг расходы, напрямую связанные с получением выручки'");
	Иначе
		ИмяПравила    = "ОказанныеУслуги";
		Представление = НСтр("ru = 'Списать расходы на производство на результат текущего периода по данным о выручке от реализации услуг'");
	КонецЕсли;
	Правило = ДобавитьПравилоРаспределения(Процессор, ИмяПравила, "РаспределитьНаСубконто");
	Правило.Наименование = Представление;
	Правило.Выпуск = Истина;
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности"); // Может быть отключен, если фактически не используется
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	Если КалькулироватьУслуги Тогда
		Правило.ПоляИсточника.Вставить("Продукция", "Номенклатура");
	КонецЕсли;
	
	// Поля приемника
	Правило.ПоляПриемника.Вставить("Подразделение",        "Подразделение");
	Правило.ПоляПриемника.Вставить("НоменклатурнаяГруппа", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Если КалькулироватьУслуги Тогда
		Правило.ПоляПриемника.Вставить("Продукция", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсобыйПорядокНалогообложения.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РеализацияУслуг.СчетРасходов КАК Счет,
	|	РеализацияУслуг.Подразделение КАК Подразделение,
	|	РеализацияУслуг.Услуга КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	РеализацияУслуг.СуммаОборот КАК База
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетРасходов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК РеализацияУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК ОсобыйПорядокНалогообложения
	|		ПО РеализацияУслуг.СчетРасходов = ОсобыйПорядокНалогообложения.Счет
	|ГДЕ
	|	РеализацияУслуг.СуммаОборот > 0";
	
	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросРезультата(ШаблонТекстаЗапроса);
	
	Если Не КалькулироватьУслуги Тогда
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Номенклатура", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;
	
	ОтключитьВидыДеятельности(Правило, ТочкаЗапроса.Запрос, Процессор);
	
	НастроитьТекстБазыРаспределения(Правило, ТочкаЗапроса);
	
КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризацииСгруппировать(Процессор)
	
	// Затраты могут остаться в незавершенном производстве, если отсутствует выпуск продукции и оказание услуг.
	// После группировки они фиксируются с помощью НезавершенноеПроизводствоБезИнвентаризацииЗафиксировать
	
	ПоляГруппировки = ПоляГруппировкиНезавершенногоПроизводстваБезИнвентаризации(Процессор);
	Если Не ЗначениеЗаполнено(ПоляГруппировки) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоСгруппироватьРасходы(
		Процессор,
		"НезавершенноеПроизводствоБезИнвентаризацииСгруппировать",
		ПоляГруппировки,
		"НезавершенноеПроизводство");
		
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило.Наименование = НСтр("ru = 'Сгруппировать затраты для оценки незавершенного производства без инвентаризации'");
	
КонецПроцедуры


Процедура ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризацииЗафиксировать(Процессор, ДетализацияРасходов)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.НезавершенноеПроизводство <> Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.АналитикаОстатков.Найти(ДетализацияРасходов) = Неопределено Тогда
		// Незавершенное производство учитываем на счетах затрат по субконто остатков
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(
		Процессор,
		"НезавершенноеПроизводствоБезИнвентаризацииЗафиксировать",
		"Зафиксировать");
	Правило.Наименование = НСтр("ru = 'При отсутствии данных о выпуске продукции, оказании услуг, затраты включаются в стоимость незавершенного производства'");
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		
		// Оценка может быть дана только идентифицированным позициям.
		// Поэтому включим в отбор только заполненные значения продукции
		УстановитьОтборРасходовТолькоЗаполненные(Правило.ОтборРасходов, ДетализацияРасходов, Процессор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилаСписатьВсеРасходыНаСебестоимостьОказанныхУслуг(Процессор, ТолькоПрямые)
	
	// Затраты включаются в себестоимость продаж: ежемесячно списываются на финансовый результат
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости
		И Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		// Для других ролей - см. ДобавитьПравилоДиректКостинг
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.НезавершенноеПроизводство = Перечисления.ВариантыУчетаНезавершенногоПроизводства.ВедетсяБезИнвентаризации Тогда
		Возврат;
	КонецЕсли;
	
	СчетаРезультата = ПредопределенныеСчетаФинансовогоРезультата(Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж);
	
	Если Не ЗначениеЗаполнено(СчетаРезультата.Группа) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидДеятельности Из Процессор.ПрименяемыеВидыДеятельности Цикл
		
		СчетРезультата = СчетаРезультата.ВидыДеятельности[ВидДеятельности];
		
		Если СчетРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Правило = ДобавитьПравилоРаспределения(Процессор, "СписаниеРасходовНаУслуги", "РаспределитьНаСубконто");
		Правило.Наименование = НСтр("ru = 'Списать затраты, связанные с оказанием услуг, на результат текущего периода'");
		Правило.Выпуск       = Истина;
	
		// Поля источника
		Если Процессор.ПрименяемыеВидыДеятельности.Количество() > 1 Тогда
			Правило.ОтборРасходов.Вставить("ВидДеятельности", ВидДеятельности);
		КонецЕсли;
		
		Если ТолькоПрямые Тогда
			УстановитьОтборРасходовТолькоЗаполненные(
				Правило.ОтборРасходов,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
				Процессор);
		КонецЕсли;
		
		// Расходы относим на субконто, взяв из аналитики источника сведения о сути выполненных работ
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетРезультата", СчетРезультата);
		
		Правило.ПоляПриемника.Вставить("Подразделение",        "Подразделение");
		Правило.ПоляПриемника.Вставить("НоменклатурнаяГруппа", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Правило.ПоляПриемника.Вставить("Продукция",            ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
				
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&СчетРезультата КАК Счет,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура";
		
		НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтключенУчетПоПодразделениямВыпускПродукции()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыСчетов.Хозрасчетный.ВыпускПродукции, "УчетПоПодразделениям") <> Истина;
	
КонецФункции

#Область ВыпускПродукции // 40

Процедура ДобавитьПравилоВыпускПоПлановойСтоимости(Процессор)
	
	// п. 27.б ФСБУ 5
	// "готовую продукцию ... допускается оценивать ... в сумме плановых (нормативных) затрат.
	//  Разница ... относится на уменьшение (увеличение) суммы расходов ...
	//  в отчетном периоде, в котором указанная разница была выявлена."
	
	// Это правило относит остаток на счете ВыпускПродукции (то есть, упомянутую разницу
	// между фактической и плановой стоимостью) на счет 90.02 (в расходы периода).
	// В результате готовая продукция оценивается в сумме плановых (нормативных) затрат.
	
	// В налоговом учете разница должна включаться в стоимость продукции,
	// за это отвечает правило ОтклоненияСебестоимостиФактическаяСебестоимость
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.ВыпускПродукции Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Настройки.ВариантУчетаСтоимостиВыпуска <> Перечисления.ВариантыУчетаСтоимостиВыпуска.ПлановаяСтоимость Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "ОтклоненияСебестоимости", "РаспределитьНаСубконто");
	
	Правило.Наименование = НСтр("ru = 'Разница между фактической и плановой стоимостью включается в расходы периода'");
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("Подразделение",        "Подразделение");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	Правило.ПоляИсточника.Вставить("Продукция",            "Продукция");
	ОграничитьПоляИсточникаАналитикойНаСчете(
		Правило.ПоляИсточника,
		ПланыСчетов.Хозрасчетный.ВыпускПродукции,
		Процессор.РазрезыРаспределения);
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ОтклоненияСебестоимости";
	Правило.БазаРаспределения.ТекстЗапроса =
	// Текст запроса модифицируется схемой запроса: устанавливаются значения аналитики Субконто1..Субконто3
	"ВЫБРАТЬ
	|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппа,
	|	Выпуск.Номенклатура КАК Продукция,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД) КАК Счет,
	|	Выпуск.ПодразделениеИсточник КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ОтклоненияСебестоимости
	|ИЗ
	|	ВыпускПродукцииУслуг КАК Выпуск
	|ГДЕ
	|	Выпуск.РазрешеноИспользоватьПлановуюСтоимость";
	
	ПоляАналитики = Новый Соответствие;
	ПоляАналитики.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, "НоменклатурнаяГруппа");
	ПоляАналитики.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,         "Продукция");
	ПоляАналитики.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,            "Продукция");
	
	ОценкаПродукцииПоПлановойСтоимости.НастроитьАналитикуПоСчетуТекстаЗапроса(Правило.БазаРаспределения.ТекстЗапроса, "Выпуск", ПоляАналитики);
	
КонецПроцедуры

Процедура ДобавитьПравилоУчетОтклоненийСтоимости(Процессор)
	
	// п. 9 ФСБУ 5 "Запасы признаются в бухгалтерском учете по фактической себестоимости"
	
	// Инструкция по применению плана счетов: 
	// Счет 40 "Выпуск продукции (работ, услуг)" предназначен для ... выявления отклонений фактической производственной себестоимости
	// этой продукции, работ, услуг от нормативной (плановой) себестоимости
	
	// Применяется методика использования счета 40 исключительно для выявления отклонений -
	// разницы между фактической и плановой стоимостью.
	// Она отражается обособленно на счете 40 ""Выпуск продукции"".
	// Затем включается в стоимость готовой продукции. В итоге продукция оценивается по фактической стоимости.
	
	// Это правило включает остаток на счете ВыпускПродукции (то есть, упомянутую разницу) в стоимость продукции
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.ВыпускПродукции Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Настройки.ВариантУчетаСтоимостиВыпуска <> Перечисления.ВариантыУчетаСтоимостиВыпуска.ОтклоненияСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	ТранзитныйАлгоритм = Перечисления.ВариантыУчетаСтоимостиВыпуска.ТранзитныйАлгоритмУчетаОтклоненийОтПлановойСебестоимости(
			Процессор.Настройки.ВариантУчетаСтоимостиВыпуска);
	Если ТранзитныйАлгоритм Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "ОтклоненияСебестоимостиФактическаяСебестоимость", "РаспределитьНаСубконто");
	
	Правило.Наименование = НСтр("ru = 'Разница между фактической и плановой стоимостью включается в себестоимость продукции'");
	
	УстановитьПравилоВыпускПродукцииПоФактическойСтоимости(Правило, Процессор.РазрезыРаспределения);
	
КонецПроцедуры

Процедура УстановитьПравилоВыпускПродукцииПоФактическойСтоимости(Правило, РазрезыРаспределения, Знач ФункциональноеИмя = "")
	
	Если ПустаяСтрока(ФункциональноеИмя) Тогда
		ФункциональноеИмя = Правило.ФункциональноеИмя;
	КонецЕсли;
	
	УстановитьПравилоРаспределения(Правило, ФункциональноеИмя, "РаспределитьНаСубконто");
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
	
	// Поля источника - аналитика на счете ВыпускПродукции
	Правило.ПоляИсточника.Вставить("Продукция",            "Продукция");
	Правило.ПоляИсточника.Вставить("Подразделение",        "ПодразделениеИсточник");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппаИсточник");
	ОграничитьПоляИсточникаАналитикойНаСчете(
		Правило.ПоляИсточника,
		ПланыСчетов.Хозрасчетный.ВыпускПродукции,
		РазрезыРаспределения);
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыпускПродукцииПоФактическойСтоимости";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Выпуск.ПодразделениеИсточник КАК ПодразделениеИсточник,
	|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппаИсточник,
	|	Выпуск.Номенклатура КАК Продукция,
	|	Выпуск.Счет КАК Счет,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.Субконто1 КАК Субконто1,
	|	Выпуск.Субконто2 КАК Субконто2,
	|	Выпуск.Субконто3 КАК Субконто3,
	|	Выпуск.Номенклатура КАК Номенклатура,
	|	Выпуск.ПлановаяСтоимость КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ВыпускПродукцииПоФактическойСтоимости
	|ИЗ
	|	ВыпускПродукцииУслуг КАК Выпуск
	|ГДЕ
	|	Выпуск.РазрешеноИспользоватьПлановуюСтоимость";
	
КонецПроцедуры

Процедура ОграничитьПоляИсточникаАналитикойНаСчете(ПоляИсточника, Счет, РазрезыРаспределения)
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	ДляУдаления = Новый Массив;
	Для Каждого ОписаниеПоля Из ПоляИсточника Цикл
		
		РазрезАналитики = РаспределениеРасходов.РазрезРаспределения(ОписаниеПоля.Ключ, РазрезыРаспределения);
		
		ЕстьУчетНаСчете = Ложь;
		Если РазрезАналитики = "Подразделение" Тогда
			ЕстьУчетНаСчете = СвойстваСчета.УчетПоПодразделениям;
		ИначеЕсли ТипЗнч(РазрезАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
			ЕстьУчетНаСчете = (СвойстваСчета.ИдентификаторыСубконто[РазрезАналитики] <> Неопределено);
		КонецЕсли;
		
		Если ЕстьУчетНаСчете Тогда
			Продолжить;
		КонецЕсли;
		
		ДляУдаления.Добавить(ОписаниеПоля.Ключ);
		
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ДляУдаления Цикл
		ПоляИсточника.Удалить(ИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СчетаКосвенныхРасходов // 25, 26

Функция ПредопределенныеСчетаФинансовогоРезультата(РольСчета)
	
	СчетаРезультата = Новый Структура;
	СчетаРезультата.Вставить("Группа", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СчетаРезультата.Вставить("ВидыДеятельности", Новый Соответствие);
	
	Если РольСчета = Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж Тогда
		СчетаРезультата.Группа = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		СчетаРезультата.ВидыДеятельности.Вставить(
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения,
			ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
		СчетаРезультата.ВидыДеятельности.Вставить(
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения,
			ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	ИначеЕсли РольСчета = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		СчетаРезультата.Группа = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
		СчетаРезультата.ВидыДеятельности.Вставить(
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения,
			ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		СчетаРезультата.ВидыДеятельности.Вставить(
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения,
			ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	КонецЕсли;
	
	Возврат СчетаРезультата;
	
КонецФункции

Процедура ДобавитьПравилоДиректКостинг(Процессор)
	
	// Относит на счета финансового результата все, что не удалось распределить
	
	РольСчета = Процессор.Закрытие.Роль;
	Если Процессор.Настройки.ПрименяетсяПБУ5 И РольСчета = Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж Тогда
		// Для совместимости с предыдущей версией
		РольСчета = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы;
	КонецЕсли;
	
	СчетаРезультата = ПредопределенныеСчетаФинансовогоРезультата(РольСчета);
	
	Если Не ЗначениеЗаполнено(СчетаРезультата.Группа) Тогда
		Возврат;
	КонецЕсли;
	
	Если РольСчета = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		ИмяПравила = "ДиректКостинг"; // См. ЕдиныеПравилаНалоговогоУчета
	Иначе
		ИмяПравила = "УпрощенныйУчетРасходовБезРаспределения";
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, ИмяПравила, "РаспределитьНаСубконто");
	УстановитьПравилоСписатьРасходыТекущегоПериода(Правило, Правило.ФункциональноеИмя, СчетаРезультата);
	Правило.Наименование       = НСтр("ru = 'Списать расходы на результат текущего периода методом ""Директ-костинг""'");
	
	Если РольСчета = Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж Тогда
		Правило.СодержаниеПроводки = НСтр("ru = 'Признаны расходы периода'", Процессор.КодЯзыка);
	Иначе
		Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'", Процессор.КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилаРаспределитьНаФинансовыйРезультат(Процессор)
	
	Если Процессор.Настройки.ПрименяетсяПБУ5 Тогда
		Возврат;
	КонецЕсли;
	
	СчетаРезультата = ПредопределенныеСчетаФинансовогоРезультата(Процессор.Закрытие.Роль);
	
	Если Не ЗначениеЗаполнено(СчетаРезультата.Группа) Тогда
		Возврат;
	КонецЕсли;
	
	// Для каждого вида - отдельный набор правил
	Для Каждого ВидДеятельности Из Процессор.ПрименяемыеВидыДеятельности Цикл
		
		СчетРезультата = СчетаРезультата.ВидыДеятельности[ВидДеятельности];
		
		Если СчетРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Настройки упорядочены "от общего к частному", так как именно такой порядок естественнен для пользователя.
		// Фактически правила выполняются в обратном порядке - от частного к общему с тем, чтобы общие правила применялись только тогда,
		// когда не применяются частные.
		
		КоличествоНастроекРаспределения = Процессор.Закрытие.Распределение.Количество();
		Для НомерСКонца = 1 По КоличествоНастроекРаспределения Цикл
			
			НастройкаРаспределения = Процессор.Закрытие.Распределение[КоличествоНастроекРаспределения - НомерСКонца];
			ДобавитьПравилоРаспределитьНаФинансовыйРезультат(Процессор, НастройкаРаспределения, ВидДеятельности, СчетРезультата);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПравилоРаспределитьНаФинансовыйРезультат(Процессор, НастройкаРаспределения, ВидДеятельности, СчетРезультата)
	
	БазаРаспределения = НастройкаРаспределения.БазаРаспределения;
	Если Не ЗначениеЗаполнено(БазаРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	АналитикаРаспределения = Новый Соответствие;
	РасширеннаяАналитикаЗатрат.ЗаполнитьАналитикуРаспределенияНаФинансовыйРезультат(
		АналитикаРаспределения,
		СчетРезультата,
		Процессор.РазрезыРаспределения);
	Если Не ЗначениеЗаполнено(АналитикаРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.Роль = Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		ИмяПравила = "РаспределитьНаФинансовыйРезультат"; // См. ЕдиныеПравилаНалоговогоУчета
	Иначе
		ИмяПравила = "УпрощенныйУчетРасходовРаспределитьНаФинансовыйРезультат";
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, ИмяПравила, "РаспределитьНаСубконто");
	Правило.Наименование = СтрШаблон(НСтр("ru = 'Распределить расходы на результат текущего периода (%1)'"), БазаРаспределения);
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетРезультата, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы) Тогда
		Правило.СодержаниеПроводки = НСтр("ru = 'Признаны управленческие расходы'", Процессор.КодЯзыка);
	Иначе
		Правило.СодержаниеПроводки = НСтр("ru = 'Признаны расходы периода'", Процессор.КодЯзыка);
	КонецЕсли;
	
	Правило.ОтборРасходов.Вставить("ВидДеятельности", ВидДеятельности);
	
	Модификатор       = НастройкаРаспределения.Модификатор;
	ОтборРасходов     = Справочники.НастройкиУчетаЗатрат.ПоляОтбораДетальнойНастройкиРаспределения(НастройкаРаспределения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ДанныеБазы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	&СчетРезультата КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ДанныеБазы.База КАК База
	|ИЗ
	|	&ПакетВременныхТаблиц КАК ДанныеБазы";
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
	
		// Используется одинаковый запрос,
		// в качестве параметра передается метод расчета
		ОписаниеВременнойТаблицы = ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения);
		
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("МетодРасчета", БазаРаспределения);
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ДанныеБазы.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппа,
		|	&СчетРезультата КАК Счет,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &МетодРасчета = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска)
		|			ТОГДА ДанныеБазы.Количество
		|		ИНАЧЕ ДанныеБазы.ПлановаяСтоимость
		|	КОНЕЦ КАК База
		|ИЗ
		|	ВыпускПродукцииУслуг КАК ДанныеБазы";
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
	
		ОписаниеВременнойТаблицы = ДобавитьОписаниеВременнойТаблицыВыручкаОтРеализацииУслуг(Правило.БазаРаспределения);
		
	Иначе
		
		// Базы, основанные на величине затрат
		ОтборБазы = Справочники.НастройкиУчетаЗатрат.ОтборБазыРаспределения(БазаРаспределения, Модификатор);
		ОписаниеВременнойТаблицы = ДобавитьОписаниеВременнойТаблицыСтоимостьРасходов(
			Правило.БазаРаспределения,
			БазаРаспределения,
			ОтборБазы);
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПакетВременныхТаблиц", ОписаниеВременнойТаблицы.Имя);
	
	// Состав полей определяется
	// - составом субконто на счете - см. РасширеннаяАналитикаЗатрат.ЗаполнитьАналитикуРаспределенияНаФинансовыйРезультат
	// - составом полей, доступных в источнике данных (пакете временных таблиц , "ДанныеБазы")
	//
	// Для того, чтобы поля запроса источника данных были использованы,
	// они должны быть объявлены с именами из РаспределениеРасходов.РазрезыРаспределения.
	//
	// Если в источнике данных есть поле, подходящее для заполнения субконто на счете результата,
	// то затраты будут распределены в разрезе значений этого поля.
	
	ЗапросБазы = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "ДанныеБазы");
	Для Каждого ОписаниеВременнойТаблицы Из ПакетыВременныхТаблицПравила(Правило.БазаРаспределения) Цикл
		СхемыЗапросов.УстановитьДоступныеПоляВременнойТаблицы(ЗапросБазы, ОписаниеВременнойТаблицы.ТекстЗапроса);
	КонецЦикла;
	
	НастроитьСубконтоБазыРаспределения(
		ЗапросБазы,
		Правило.БазаРаспределения.ПараметрыЗапроса,
		СчетРезультата,
		АналитикаРаспределения);
		
	НастроитьТекстБазыРаспределения(Правило, ЗапросБазы);
	
КонецПроцедуры

Процедура ДобавитьПравилаРаспределитьНаВсеНоменклатурныеГруппы(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.СебестоимостьПродаж
		И Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.УправленческиеРасходы Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПравилаРаспределитьНаВсе(Процессор, "НоменклатурнаяГруппа");
	
КонецПроцедуры

Процедура ДобавитьПравилаРаспределитьНаВсеПодразделения(Процессор)
	
	Если Процессор.Настройки.ПрименяетсяПБУ5 Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПравилаРаспределитьНаВсе(Процессор, "Подразделение");
	
КонецПроцедуры

Процедура ДобавитьПравилаРаспределитьНаВсе(Процессор, ИмяПоля)
	
	Источники = Новый Массив;
	Для Каждого Правило Из Процессор.ПравилаПоСчету Цикл
		
		Если Не Правило.ПоляИсточника.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Источники.Добавить(Правило);
		
	КонецЦикла;
	
	Для Каждого Источник Из Источники Цикл
		
		Правило = СкопироватьПравилоРаспределения(Процессор, Источник);
		Если Не Правило.ПоляИсточника.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляЗапроса = Правило.ПоляИсточника[ИмяПоля];
		Правило.ПоляИсточника.Удалить(ИмяПоля);
		
		// Для оптимизации удалим из текста получение неактуального поля
		Если Не Правило.ПоляПриемника.Свойство(ИмяПоляЗапроса) Тогда
			УдалитьПолеЗапросаБазыРаспределения(Правило, ИмяПоляЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПравилаКосвенныеРасходыПоНастройке(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		Возврат;
	КонецЕсли;
	
	ВРазрезеПодразделений = РаспределятьКосвенныеРасходыВРазрезеПодразделений(Процессор);
	
	// Настройки упорядочены "от общего к частному", так как именно такой порядок естественнен для пользователя.
	// Фактически правила выполняются в обратном порядке - от частного к общему с тем, чтобы общие правила применялись только тогда,
	// когда не применяются частные.
	
	КоличествоНастроек = Процессор.Закрытие.Распределение.Количество();
	Для НомерСКонца = 1 По КоличествоНастроек Цикл
		
		НастройкаРаспределения = Процессор.Закрытие.Распределение[КоличествоНастроек - НомерСКонца];
		
		ОтборНастройки = Справочники.НастройкиУчетаЗатрат.ПоляОтбораДетальнойНастройкиРаспределения(НастройкаРаспределения);
		
		ДобавитьПравилоКосвенныеРасходыПоНастройке(
			Процессор,
			НастройкаРаспределения.БазаРаспределения,
			НастройкаРаспределения.Модификатор,
			ВРазрезеПодразделений,
			НастройкаРаспределения.Ссылка,
			ОтборНастройки);
			
	КонецЦикла;
	
КонецПроцедуры

Функция РаспределятьКосвенныеРасходыВРазрезеПодразделений(Процессор)
	
	Возврат БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Процессор.Счет,
		ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		
КонецФункции

Процедура ДобавитьПравилоКосвенныеРасходыПоНастройке(Процессор, БазаРаспределения, Модификатор, ВРазрезеПодразделений, Ссылка, Знач ОтборНастройки = Неопределено)
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска 
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		
		ДобавитьПравилоМетодОбъемВыпуска(
			Процессор,
			ОтборНастройки,
			БазаРаспределения,
			ВРазрезеПодразделений,
			Ссылка);
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты 
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		ОтборБазы = Справочники.НастройкиУчетаЗатрат.ОтборБазыРаспределения(БазаРаспределения, Модификатор);
		
		ДобавитьПравилоМетодСтоимостьРасходов(
			Процессор,
			ОтборНастройки,
			БазаРаспределения,
			ВРазрезеПодразделений,
			ОтборБазы,
			Ссылка);
			
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг Тогда
		
		ДобавитьПравилоМетодВыручкаТолькоУслуги(
			Процессор,
			ОтборНастройки,
			Модификатор.Счет,
			Модификатор.Подразделение,
			Ссылка);
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
		
		ДобавитьПравилоМетодВыручка(
			Процессор,
			ОтборНастройки,
			ВРазрезеПодразделений,
			Модификатор.Счет,
			Модификатор.Подразделение,
			Ссылка);
			
		// Если не удастся распределить по данным о затратах, то попробуем отнести все на услуги
		Если ЗначениеЗаполнено(Модификатор.Счет) Тогда
			
			ДобавитьПравилоМетодВыручкаТолькоУслуги(
				Процессор,
				ОтборНастройки,
				Модификатор.Счет,
				Модификатор.Подразделение,
				Ссылка);
			
		КонецЕсли;
			
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения Тогда
		
		ДобавитьПравилаСобственнаяБазаРаспределения(Процессор, ОтборНастройки, Модификатор, Ссылка);
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
		
		ДобавитьПравилоНеРаспределять(Процессор, ОтборНастройки, Ссылка);
		
	КонецЕсли;

КонецПроцедуры

#Область ПредопределенныеМетодыРасчетаБазыРаспределения // Предопределенные методы расчета базы распределения косвенных расходов

Функция РазрезыРаспределенияКосвенныхРасходов(ВРазрезеПодразделений)
	
	РазрезыРаспределения = Новый Структура;
	РазрезыРаспределения.Вставить("ВидДеятельности", "ВидДеятельности");
	Если ВРазрезеПодразделений Тогда
		РазрезыРаспределения.Вставить("Подразделение", "Подразделение");
	КонецЕсли;
	
	Возврат РазрезыРаспределения;
	
КонецФункции

Функция ПоляБазыКосвенныхРасходов(МетодРасчета)
	
	ПоляПриемника = Новый Структура;
	ПоляПриемника.Вставить("Счет");
	ПоляПриемника.Вставить("Подразделение");
	ПоляПриемника.Вставить("НоменклатурнаяГруппа");
	
	МетодРасчетаПрименимДляРемонтовОС =
		(Перечисления.БазыРаспределенияКосвенныхРасходов.ОграничениеРаспределенияЗатратНаРемонтОС().Найти(МетодРасчета) = Неопределено);
		
	Если МетодРасчетаПрименимДляРемонтовОС Тогда
		ПоляПриемника.Вставить("ВидРемонтаОС");
	КонецЕсли;
		
	Возврат ПоляПриемника;
	
КонецФункции

Функция ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка)
	
	// См. ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()
	
	Правило = ДобавитьПравилоРаспределения(
		Процессор,
		"Метод" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета),
		"РаспределитьНаРасходы");
		
	Правило.СодержаниеПроводки = НСтр("ru = 'Распределение ОПР и ОХР'", Процессор.КодЯзыка);
	
	Правило.Настройка     = Ссылка;
	Правило.МетодРасчета  = МетодРасчета;
	Если ЗначениеЗаполнено(ОтборРасходов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	КонецЕсли;
	
	Правило.ПоляИсточника = РазрезыРаспределенияКосвенныхРасходов(ВРазрезеПодразделений);
	Правило.ПоляПриемника = ПоляБазыКосвенныхРасходов(МетодРасчета);
	
	Возврат Правило;
	
КонецФункции

Процедура ДобавитьПравилоМетодОбъемВыпуска(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка)
	
	Правило = ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по базе, основанной на объеме выпуска'");
	
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения); 

	// Используется одинаковый запрос,
	// в качестве параметра передается метод расчета
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("МетодРасчета", МетодРасчета);
		
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Выпуск.ВидДеятельности КАК ВидДеятельности,
	|	Выпуск.СчетИсточник КАК Счет,
	|	Выпуск.ПодразделениеИсточник КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &МетодРасчета = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска)
	|			ТОГДА Выпуск.КоличествоЭквивалентныеЕдиницы
	|		ИНАЧЕ Выпуск.ПлановаяСтоимостьЭквивалентныеЕдиницы
	|	КОНЕЦ КАК База
	|ИЗ
	|	ВыпускПродукцииУслуг КАК Выпуск";
	
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	Индекс = "ВидДеятельности,Подразделение";
	
	НастроитьТекстБазыРаспределения(Правило, ШаблонТекстаЗапроса, Индекс);
	
КонецПроцедуры

Процедура ДобавитьПравилоМетодСтоимостьРасходов(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, ОтборБазы, Ссылка)
	
	Правило = ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка);
	// См. ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()
	Правило.Наименование = НСтр("ru = 'Распределить косвенные затраты по базе, основанной на величине прямых затрат'");
	
	ОписаниеВременнойТаблицы = ДобавитьОписаниеВременнойТаблицыСтоимостьРасходов(Правило.БазаРаспределения, МетодРасчета, ОтборБазы);
	
	// Имя таблицы должно быть уникальным для совокупности текста и параметров запроса
	Правило.БазаРаспределения.Имя = ИмяБазыРаспределенияСтоимостьРасходов(Правило, ОписаниеВременнойТаблицы.Имя);
	
	// Имя таблицы в тексте запроса далее будет заменено
	// Текст запроса также используется в ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ()
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрямыеРасходы.ВидДеятельности КАК ВидДеятельности,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.ВидРемонтаОС КАК ВидРемонтаОС,
	|	СУММА(ПрямыеРасходы.База) КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	ПакетВременныхТаблиц КАК ПрямыеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрямыеРасходы.Счет,
	|	ПрямыеРасходы.Подразделение,
	|	ПрямыеРасходы.ВидДеятельности,
	|	ПрямыеРасходы.НоменклатурнаяГруппа,
	|	ПрямыеРасходы.ВидРемонтаОС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПрямыеРасходы.База) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"ПакетВременныхТаблиц",
		ОписаниеВременнойТаблицы.Имя);
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"ИмяБазыРаспределения",
		Правило.БазаРаспределения.Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоМетодВыручка(Процессор, ОтборРасходов, ВРазрезеПодразделений, СчетПрямыхЗатрат, ПодразделениеЗатрат, Ссылка)
	
	// Цитата из методических материалов:
	// Выручка - распределение по номенклатурным группам, которые: 
	// - одновременно указаны в оборотах счетов 20,23 и в документах Реализация (акт, накладная, УПД) на закладке "Услуги" 
	//   (при условии, что в учетной политике на закладке "Производство" для услуг сторонним организациям выбран метод "По выручке"),
	// - одновременно указаны в оборотах счетов 20,23 и в оборотах счета 90.02 в корреспонденции со счетом 43 (реализация продукции), 
	//    указаны в документах Реализация (акт, накладная, УПД) на закладке "Услуги" при условии, что: 
	//     в учетной политике на закладке "Производство" для услуг сторонним организациям выбран метод "По выручке", 
	//     в регистре заполнены колонки "Счет прямых затрат", "Подразделение затрат".
	
	// Эта база уникальная для каждого правила, однако для ее создания используются одни и те же данные.
	// Для того, чтобы эти данные не получать многократно, сначала создается временная таблица ВыручкаПоАналитикеВыпуска, 
	// которая используется для всех правил с таким методом расчета
	
	ПараметрыВременныхТаблиц = Новый Структура;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ПараметрыВременныхТаблиц.Вставить("ВидыСубконто", ВидыСубконто);
	
	СоздатьВременныеТаблицы = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаВыручки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_НДС)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетВыручки,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТ_ВыручкаПродукцииБезНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВыручки.Счет
	|				ИЗ
	|					ВТ_СчетаВыручки),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	ВыручкаПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ВыручкаПродукции.СуммаБезНДС) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Выручка
	|ИЗ
	|	ВТ_ВыручкаПродукцииБезНДС КАК ВыручкаПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВыручкаПродукции.СчетВыручки = СчетаДоходовИРасходовЕНВД.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	ВыручкаПродукции.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОбороты.Субконто2 КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_ПрямыеРасходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					КалькуляционныеСчета.Счет
	|				ИЗ
	|					КалькуляционныеСчета),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					КалькуляционныеСчета.Счет
	|				ИЗ
	|					КалькуляционныеСчета),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.СчетЗатрат КАК Счет,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА ВыпускПродукции.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукции.СчетСписания КАК СчетСписания
	|ПОМЕСТИТЬ ВТ_ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка)) КАК ВыпускПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВыпускПродукции.СчетЗатрат = Хозрасчетный.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		ИНАЧЕ ЕСТЬNULL(СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|	КОНЕЦ КАК ВидДеятельности
	|ПОМЕСТИТЬ ВТ_АналитикаПрямыхРасходов
	|ИЗ
	|	ВТ_ПрямыеРасходы КАК ПрямыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО ПрямыеРасходы.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|ГДЕ
	|	(СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ИЛИ &ТолькоОсновнаяСистемаНалогообложения
	|			ИЛИ &ТолькоОсобыйПорядокНалогообложения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Счет,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ВыпускПродукции КАК ВыпускПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВыпускПродукции.СчетСписания = СчетаДоходовИРасходовЕНВД.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выручка.ВидДеятельности КАК ВидДеятельности,
	|	Выручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	Выручка.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВыручкаПоАналитикеВыпуска
	|ИЗ
	|	ВТ_Выручка КАК Выручка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикаПрямыхРасходов КАК ПрямыеРасходы
	|		ПО Выручка.ВидДеятельности = ПрямыеРасходы.ВидДеятельности
	|			И Выручка.НоменклатурнаяГруппа = ПрямыеРасходы.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаВыручки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыручкаПродукцииБезНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выручка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПрямыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыпускПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АналитикаПрямыхРасходов";
	
	Правило = ДобавитьПравилоМетодРасчета(
		Процессор,
		ОтборРасходов,
		Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка,
		ВРазрезеПодразделений,
		Ссылка);
		
	ДобавитьПакетВременныхТаблиц(Правило.БазаРаспределения, "Выручка", СоздатьВременныеТаблицы, ПараметрыВременныхТаблиц);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по данным о выручке'");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		АналитикаЗаданаНастройкой = ЗначениеЗаполнено(СчетПрямыхЗатрат) И ЗначениеЗаполнено(ПодразделениеЗатрат);// Не допускаем пустое подразделение затрат для 25 счета
	Иначе
		АналитикаЗаданаНастройкой = ЗначениеЗаполнено(СчетПрямыхЗатрат);
	КонецЕсли;
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("АналитикаЗаданаНастройкой", АналитикаЗаданаНастройкой);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетНастройки",             СчетПрямыхЗатрат);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ПодразделениеНастройки",    ПодразделениеЗатрат);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыручкаПоАналитикеВыпуска.ВидДеятельности КАК ВидДеятельности,
	|	ВыручкаПоАналитикеВыпуска.Подразделение КАК Подразделение,
	|	ВыручкаПоАналитикеВыпуска.Счет КАК Счет,
	|	ВыручкаПоАналитикеВыпуска.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыручкаПоАналитикеВыпуска.Сумма КАК База
	|ПОМЕСТИТЬ %ИмяБазыРаспределения%
	|ИЗ
	|	ВыручкаПоАналитикеВыпуска КАК ВыручкаПоАналитикеВыпуска
	|%ГДЕ%
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
		
	Если Не АналитикаЗаданаНастройкой Тогда
		Условие = "";
		Правило.БазаРаспределения.Имя = "БазаРаспределения_Выручка";
	Иначе
		
		// База уникальна для каждого сочетания счета и подразделения в настройке
		Правило.БазаРаспределения.Имя = "БазаРаспределения_Выручка_" 
			+ УникальноеПредставлениеСсылки(СчетПрямыхЗатрат)
			+ УникальноеПредставлениеСсылки(ПодразделениеЗатрат);
		
		Если ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
			// Настройка выполнена для счета и подразделения
			Условие =
			"ГДЕ
			|	ВыручкаПоАналитикеВыпуска.Счет = &СчетНастройки
			|	И ВыручкаПоАналитикеВыпуска.Подразделение = &ПодразделениеНастройки";
		Иначе 
			// Настройка выполнена только для счета
			Условие =
			"ГДЕ
			|	ВыручкаПоАналитикеВыпуска.Счет = &СчетНастройки";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ГДЕ%", Условие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяБазыРаспределения%", Правило.БазаРаспределения.Имя);
	Правило.БазаРаспределения.ТекстЗапроса = ТекстЗапроса;

КонецПроцедуры

Процедура ДобавитьПравилоМетодВыручкаТолькоУслуги(Процессор, ОтборРасходов, Знач СчетПрямыхЗатрат, Знач ПодразделениеЗатрат, Ссылка)
	
	// Это правило обеспечивает распределение с распределительного счета (25) на калькуляционные счета (20).
	// Для распределения косвенных затрат внутри калькуляционного счета
	// см. ДобавитьПравилоКосвенныеРасходыПоВыручкеОтРеализацииУслуг
	
	// Косвенные расходы распределяются на счет 20 между номенклатурными группами пропорционально выручке от реализации услуг.
	
	// Если в настройках задан счет затрат, то затраты будут отнесены на него.
	// Если не задан - то на первый калькуляционный счет (например, 20.01)
	ЗаполнитьПоУмолчаниюСчетПрямыхЗатрат(СчетПрямыхЗатрат, Процессор.Настройки);
	
	Правило = ДобавитьПравилоМетодРасчета(
		Процессор,
		ОтборРасходов,
		Перечисления.БазыРаспределенияКосвенныхРасходов.ВыручкаОтРеализацииУслуг,
		Ложь,// Не в разрезе подразделений
		Ссылка);
		
	// Эта база уникальная для каждого правила, однако для ее создания используются одни и те же данные.
	// Для того, чтобы эти данные не получать многократно, сначала создается временная таблица ВыручкаОтРеализацииУслуг,
	// которая используется для всех правил с таким методом расчета
	
	ДобавитьОписаниеВременнойТаблицыВыручкаОтРеализацииУслуг(Правило.БазаРаспределения);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по данным о выручке'");
	
	Если Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
		// Подразделение возьмем из источника, а не из базы
		Правило.ПоляПриемника.Удалить("Подразделение");
	КонецЕсли;
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Счет",          СчетПрямыхЗатрат);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Подразделение", ПодразделениеЗатрат);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Выручка.ВидДеятельности КАК ВидДеятельности,
	|	&Подразделение КАК Подразделение,
	|	&Счет КАК Счет,
	|	Выручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выручка.База КАК База
	|ИЗ
	|	ВыручкаОтРеализацииУслуг КАК Выручка";
	
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	Индекс = "ВидДеятельности,Подразделение";
	
	НастроитьТекстБазыРаспределения(Правило, ШаблонТекстаЗапроса, Индекс);
	
КонецПроцедуры

Процедура ЗаполнитьПоУмолчаниюСчетПрямыхЗатрат(СчетПрямыхЗатрат, НастройкиУчетаЗатрат)
	
	Если ЗначениеЗаполнено(СчетПрямыхЗатрат) Тогда
		Возврат;
	КонецЕсли;
		
	СчетПрямыхЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
	Для Каждого Счет Из НастройкиУчетаЗатрат.СчетаУчета Цикл
		
		ЗакрытиеСчета = НастройкиУчетаЗатрат.Закрытие[Счет];
		Если ЗакрытиеСчета.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСебестоимости Тогда
			Продолжить;
		КонецЕсли;
		
		СчетПрямыхЗатрат = Счет;
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПравилоНеРаспределять(Процессор, ОтборРасходов, Ссылка)
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "НеРаспределять", "Зафиксировать");
	Правило.Наименование = НСтр("ru = 'Не распределять расходы: следует распределить вручную'");
	
	Правило.Настройка     = Ссылка;
	Правило.МетодРасчета  = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется;
	Если ЗначениеЗаполнено(ОтборРасходов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилоМетодСобственнаяБазаРаспределения(Процессор, СчетУчета, Модификатор, ОтборРасходов, ПараметрыРаспределения)
	
	НастройкаАналитикиБазы = Модификатор.НастройкаАналитикиБазы;
	СтрокиАналитикиСчета = НастройкаАналитикиБазы.НайтиСтроки(Новый Структура("Счет", СчетУчета));

	// Из полученной ранее временной таблицы ТаблицаБазы выберем строки со счетом-приемником, который в текущий момент обрабатывается,
	// а также поля-аналитики, для которых указано использование в базе распределения по этому счету.
	// Текст запроса далее будет модифицирован: добавятся дополнительные поля-аналитики, которые присутствуют в базе распределения.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаБазы.Счет КАК Счет,
	|	ТаблицаБазы.Коэффициент КАК База
	|ИЗ
	|	&ТаблицаБазы КАК ТаблицаБазы
	|ГДЕ
	|	ТаблицаБазы.Счет = &СчетУчета";

	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ТаблицаБазы", ПараметрыРаспределения.ИмяВременнойТаблицыКоэффициентов);
	
	СхемаЗапроса = СхемыЗапросов.Создать(ШаблонТекстаЗапроса);
	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросРезультата(СхемаЗапроса);

	СхемыЗапросов.УстановитьДоступныеПоляВременнойТаблицы(
		СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, "ТаблицаБазы"), ПараметрыРаспределения.ТекстЗапросаТаблицыКоэффициентов);
		
	РазрезыРаспределения = Процессор.РазрезыРаспределенияСчетовПриемников[СчетУчета];
	Если РазрезыРаспределения = Неопределено Тогда
		РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределенияСчетовУчета(СчетУчета);
		Процессор.РазрезыРаспределенияСчетовПриемников.Вставить(СчетУчета, РазрезыРаспределения);
	КонецЕсли;
	
	ПоляПриемника = Новый Структура;
	ВидыАналитикиБазы = Новый Соответствие;
	Для Каждого СтрокаАналитики Из СтрокиАналитикиСчета Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаАналитики.ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидАналитики = СтрокаАналитики.ВидАналитики;
		
		РазрезРаспределения = РазрезыРаспределения.Найти(ВидАналитики, "Ключ");
		
		Если РазрезРаспределения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРазреза = РазрезРаспределения.Имя;
		ПоляПриемника.Вставить(ИмяРазреза);
		
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, ИмяРазреза, "ТаблицаБазы." + ИмяРазреза);
		
		ВидыАналитикиБазы.Вставить(ВидАналитики, Истина);
			
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	ЭтоСчетРасходов = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеСчетаРасходов()).Найти(СчетУчета) <> Неопределено;
	Если ЭтоСчетРасходов Тогда
		
		Правило = ДобавитьПравилоРаспределения(Процессор, "РаспределениеПропорциональноКоэффициентам", "РаспределитьНаРасходы");
		
		Правило.МетодРасчета  = Перечисления.БазыРаспределенияКосвенныхРасходов.СобственнаяБазаРаспределения;
		Правило.ПоляПриемника.Вставить("Счет");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ПоляПриемника, ПоляПриемника);
		
	Иначе
		
		Правило = ДобавитьПравилоРаспределения(Процессор, "РаспределениеПропорциональноКоэффициентам", "РаспределитьНаСубконто");
		
		НастроитьТекстБазыРаспределенияСобственнаяБазаПрочиеРасходы(ТекстЗапроса, Правило, СчетУчета, РазрезыРаспределения);
		УстановитьПоляПриемникаСобственнаяБазаПрочиеРасходы(Правило, Процессор, РазрезыРаспределения, ВидыАналитикиБазы);
		
	КонецЕсли;

	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по коэффициентам, заданным вручную'");

	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	
	ИдентификаторЭтапа = ПараметрыРаспределения.ИменаЭтаповРаспределения[СчетУчета];
	Правило.ОтборРасходов.Вставить("ЭтапРаспределения", ИдентификаторЭтапа);

	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетУчета", СчетУчета);

	НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
	
КонецПроцедуры

Процедура УстановитьПоляПриемникаСобственнаяБазаПрочиеРасходы(Правило, Процессор, РазрезыРаспределения, ВидыАналитикиБазы)
	
	Для Каждого Аналитика Из Процессор.Аналитика Цикл
		СтрокаРазреза = Процессор.РазрезыРаспределения.Найти(Аналитика, "Ключ");
		// Если аналитика есть на счете-источнике
		Если СтрокаРазреза <> Неопределено
			
			// - и на счете-приемнике,
			И РазрезыРаспределения.Найти(Аналитика, "Ключ") <> Неопределено
			
			// - при этом отсутствует в базе,
			И ВидыАналитикиБазы[Аналитика] = Неопределено Тогда
			
			// - то заполняться она должна из источника.
			ИмяАналитики = СтрокаРазреза.Имя;
			Правило.ПоляПриемника.Вставить(ИмяАналитики, Аналитика);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НастроитьТекстБазыРаспределенияСобственнаяБазаПрочиеРасходы(ТекстЗапроса, Правило, СчетУчета, РазрезыРаспределения)
	
	АналитикаРаспределения = Новый Соответствие;
	РасширеннаяАналитикаЗатрат.ЗаполнитьАналитикуРаспределенияСчета(
		АналитикаРаспределения, СчетУчета, РазрезыРаспределения, Новый Массив);
	
	ТочкаЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ТекстЗапроса, "ТаблицаБазы");
	НастроитьСубконтоБазыРаспределения(
		ТочкаЗапроса, Правило.БазаРаспределения.ПараметрыЗапроса, СчетУчета, АналитикаРаспределения);
	
	// Дополним запрос недостающими полями, необходимыми для правила с действием "РаспределитьНаСубконто.
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	Для НомерСубконто = СвойстваСчета.КоличествоСубконто + 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Субконто" + XMLСтрока(НомерСубконто), "НЕОПРЕДЕЛЕНО");
	КонецЦикла;
	
	Если ТочкаЗапроса.Запрос.Колонки.Найти("Подразделение") = Неопределено Тогда
		СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Подразделение", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	СхемыЗапросов.УстановитьВыражение(ТочкаЗапроса, "Номенклатура", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	
	// Получим итоговый текст запроса базы распределения.
	ТекстЗапроса = ТочкаЗапроса.Схема.ПолучитьТекстЗапроса();

КонецПроцедуры

#КонецОбласти

Процедура ДобавитьПравилаСобственнаяБазаРаспределения(Процессор, ОтборРасходов, Модификатор, Ссылка)

	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КосвенныеЗатраты Тогда
		Возврат;
	КонецЕсли;

	// Правило состоит из двух частей: в первой части выполняется распределение "само-в-себя", при этом заполняется ЭтапРаспределения,
	// каждый из которых соответствует счету-приемнику.
	// В результате применения этого правила проводки формироваться не будут, поле ЭтапРаспределения будет использоваться
	// во второй части правил для отбора с целью применения для каждого счета-приемника отдельного правила распределения, 
	// которое распределит затраты пропорционально коэффициентам по аналитикам, указанным в базе коэффициентов.
	// Конструктор НовыйПараметрыРаспределенияСобственнаяБаза() используется для создания коллекции, с помощью
	// которой передаются вспомогательные данные между связанными правилами.

	ПараметрыРаспределения = НовыйПараметрыРаспределенияСобственнаяБаза();
	
	РасширеннаяАналитикаЗатрат.ДобавитьПравилоРаспределитьПоКоэффициентамСчетовУчета(
		Процессор, ПараметрыРаспределения, Модификатор, ОтборРасходов);
	
	СчетаУчета = ПараметрыРаспределения.СчетаУчета;

	Для Каждого СчетУчета Из СчетаУчета Цикл
		
		ДобавитьПравилоМетодСобственнаяБазаРаспределения(Процессор, СчетУчета, Модификатор, ОтборРасходов, ПараметрыРаспределения);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РасходыНаПродажу // 44

Процедура ДобавитьПравилаТранспортныеРасходы(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.РасходыНаПродажу Тогда
		Возврат;
	КонецЕсли;
	
	// Если установлена настройка, при которой транспортные расходы в бухгалтерском учете списываются сразу в расходы
	// текущего периода, то алгоритм в бухгалтерском и налоговом учете будет отличаться: списание пропорционально
	// остаткам товара будет действовать только для налогового учета.
	
	Если Процессор.Закрытие.НеРаспределятьЗатратыНаДоставку Тогда
		
		Правило = ДобавитьПравилоРаспределения(Процессор, "ТранспортныеРасходыВыделитьНалоговыйУчет", "ВыделитьНалоговыйУчет");
		
		Правило.ОтборРасходов.Вставить("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		
		Правило.ПоляПриемника.Вставить("НалоговыйУчет");
		Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ТранспортныеРасходыНУ";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода) КАК НалоговыйУчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) КАК ТипРазниц,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы) КАК ВидРасходовНУ
		|ПОМЕСТИТЬ БазаРаспределения_ТранспортныеРасходыНУ";
		
	КонецЕсли;
	
	// Зафиксируем часть транспортных расходов (пропорционально остатку товара на складе):
	// - сначала разделим сумму расходов на относящиеся к остаткам реализованных и нереализованных товаров
	// - затем оградим их от списания
	// Стоимость доставки приобретенных товаров остается на счете в доле, соответствующей остатку нереализованных товаров
	
	// 1. Применим пропорцию
	Правило = ДобавитьПравилоРаспределения(Процессор, "РаспределитьТранспортныеРасходы", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Распределить транспортные расходы'");
	
	// Отбор источника
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	// Если транспортные расходы в бухгалтерском учете списываются сразу, применим правило только для налогового учета.
	Если Процессор.Закрытие.НеРаспределятьЗатратыНаДоставку Тогда
		Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода);
	КонецЕсли;
	
	// Поля приемника - представлены в виде аналитики распределения
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	
	// База распределения
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ТранспортныеРасходы";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДолиСписанияКосвенныхРасходов.ДоляТранспортныхРасходов КАК Доля
	|ПОМЕСТИТЬ ДоляТранспортныхРасходовТекущегоПериода
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
	|ГДЕ
	|	ДолиСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
	|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ДоляТранспортныхРасходовТекущегоПериода.Доля КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ТранспортныеРасходы
	|ИЗ
	|	ДоляТранспортныхРасходовТекущегоПериода КАК ДоляТранспортныхРасходовТекущегоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы),
	|	1 - ДоляТранспортныхРасходовТекущегоПериода.Доля
	|ИЗ
	|	ДоляТранспортныхРасходовТекущегоПериода КАК ДоляТранспортныхРасходовТекущегоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоляТранспортныхРасходовТекущегоПериода";
	
	// 2. Оградим от списания транспортные расходы, относящиеся к остаткам нереализованных товаров
	Правило = ДобавитьПравилоРаспределения(Процессор, "ТранспортныеРасходыБудущихПериодов", "Зафиксировать");
	Правило.Наименование = НСтр("ru = 'Не списывать транспортные расходы, относящиеся к остаткам нереализованных товаров'");
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
	
КонецПроцедуры

Процедура ДобавитьПравилоРасходыНаПродажу(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.РасходыНаПродажу Тогда
		Возврат;
	КонецЕсли;
	
	// Затраты включаются в себестоимость продаж: ежемесячно списываются на финансовый результат
	Правило = ДобавитьПравилоРаспределения(Процессор, "РасходыНаПродажу", "РаспределитьНаСубконто");
	Правило.Наименование       = НСтр("ru = 'Списать расходы на продажу на результат текущего периода'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'");
	
	// Для разных видов деятельности разные счета приемника
	Правило.ПоляИсточника.Вставить("ВидДеятельности", "ВидДеятельности");
	
	// Поля приемника представлены в виде субконто. В такой базе должны присутствовать все поля
	Правило.БазаРаспределения.Имя = "БазаРаспределения_СписатьРасходыНаПродажу";
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|	&ПустоеПодразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД) КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СписатьРасходыНаПродажу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|	&ПустоеПодразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	1";
	
КонецПроцедуры

#КонецОбласти

#Область НалоговыйУчет

Процедура ДобавитьПравилаНалоговогоУчета(ПравилаРаспределения, ГруппыОсновныхПравил, Настройки, РазрезыРаспределения)
	
	ОтборСчетов = ОтборСчетовНакопленияЗатратНалогНаПрибыль(ГруппыОсновныхПравил);
	
	ДобавитьПравилаВыпускПродукцииНалогНаПрибыль(ПравилаРаспределения, ГруппыОсновныхПравил, Настройки.Контекст, РазрезыРаспределения);
	
	ДобавитьПравилаСоставРасходовПоНалогуНаПрибыль(
		ПравилаРаспределения,
		ГруппыОсновныхПравил,
		Настройки,
		ОтборСчетов);
	
	ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения(
		ПравилаРаспределения,
		ОтборСчетов,
		Настройки.Контекст.Период,
		Настройки.Контекст.Организация);
	
	ДобавитьПравилоОпределитьВидРасходовНУ(ПравилаРаспределения, Настройки.Контекст.Период, Настройки.Контекст.Организация);
	
	ДобавитьПравилаУдалитьАналитикуНалоговогоУчета(ПравилаРаспределения, Настройки);
	
КонецПроцедуры

Функция ОтборСчетовНакопленияЗатратНалогНаПрибыль(ГруппыОсновныхПравил)
	
	Отбор = Новый Массив;
	Если ГруппыОсновныхПравил[ПланыСчетов.Хозрасчетный.ВыпускПродукции] = Неопределено Тогда
		Возврат Отбор;// Все счета
	КонецЕсли;
	
	Для Каждого ОписаниеСчета Из ГруппыОсновныхПравил Цикл
		Если ОписаниеСчета.Ключ = ПланыСчетов.Хозрасчетный.ВыпускПродукции Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Добавить(ОписаниеСчета.Ключ);
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

Процедура ДобавитьПравилоОпределитьВидРасходовНУ(ПравилаРаспределения, Период, Организация)
	
	// Для оптимизации производительности также может устанавливать свойство ВидДеятельности - 
	// в случаях, когда он один.
	//
	// Использование такой комбинации эффективно, поскольку правила определения вида расходов и вида деятельности
	// - выполняются в начале расчета
	// - затрагивают все или почти все комбинации расходов 
	// - каждое создает очередное поколение комбинаций расходов.
	// 
	// Таким образом, объединение в одном правиле позволяет существенно (до 1/3) сократить количество комбинаций расходов,
	// обрабатываемых всеми последующими правилами.
	//
	// См. также ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения
	
	// Применяется перед применением аналитики ВидРасходовНУ
	ПервоеПравилоВидРасходовНУ = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидРасходовНУ");
	
	Если ПервоеПравилоВидРасходовНУ = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	ПозицияПравила = ПравилаРаспределения.Индекс(ПервоеПравилоВидРасходовНУ);
	УстанавливатьВидДеятельности = Ложь;
	
	ТолькоОсновная = УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период);
	ТолькоОсобый   = УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период);
	Если ТолькоОсновная Или ТолькоОсобый Тогда
		
		// Для оптимизации целесообразно выполнить до правила, штатно устанавливающего ВидДеятельности
		ПервоеПравилоВидДеятельности = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидДеятельности");
		Если ПервоеПравилоВидДеятельности <> Неопределено Тогда
			
			УстанавливатьВидДеятельности = Истина;
			
			ПозицияВидДеятельности = ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности);
			ПозицияПравила = Мин(ПозицияПравила, ПозицияВидДеятельности);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Правило = ПравилаРаспределения.Вставить(ПозицияПравила);
	
	УстановитьПравилоРаспределения(Правило, "ОпределитьВидРасходовНУ", "РаспределитьНаРасходы");
	
	Правило.ОтборРасходов.Вставить("ЗавершенаОбработкаНУ", Ложь);
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ",        Перечисления.ВидыРасходовНУ.ПустаяСсылка());
	
	Правило.ПоляИсточника.Вставить("СтатьяЗатрат",         "СтатьяЗатрат");
	
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("ЗавершенаОбработкаНУ");
	Если УстанавливатьВидДеятельности Тогда
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
	КонецЕсли;
	
	Если ТолькоОсобый Тогда
		ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
	Иначе
		ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения; 
		// Фактически, значение параметра может не использоваться - см. УстанавливатьВидДеятельности
		// Однако, в запросе оно присутствует всегда, чтобы избежать модификации его текста
	КонецЕсли;
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ОпределитьВидРасходовНУ";
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ВидДеятельности", ВидДеятельности);
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ВидДеятельности КАК ВидДеятельности,
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ИСТИНА КАК ЗавершенаОбработкаНУ,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ОпределитьВидРасходовНУ
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ ЕСТЬ НЕ NULL ";
	
КонецПроцедуры

Процедура ДобавитьПравилаВыпускПродукцииНалогНаПрибыль(ПравилаРаспределения, ГруппыОсновныхПравил, Контекст, РазрезыРаспределения)
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Контекст.Организация, Контекст.Период) Тогда
		// Правила применяем только на основной системе налогообложения
		Возврат;
	КонецЕсли;
	
	// 40 -> 40(Прямые) -> Стоимость продукции
	ПравилаВыпускПродукции = ГруппыОсновныхПравил[ПланыСчетов.Хозрасчетный.ВыпускПродукции];
	Если ПравилаВыпускПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныеПравилаНалоговогоУчета = ЕдиныеПравилаНалоговогоУчета();
	
	ПервоеПравилоОсобенностиНалоговогоУчета = Неопределено;
	Для Каждого ПравилоДляОбработки Из ПравилаВыпускПродукции Цикл
		
		Если ЕдиныеПравилаНалоговогоУчета.Найти(ПравилоДляОбработки.ФункциональноеИмя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПервоеПравилоОсобенностиНалоговогоУчета = ПравилоДляОбработки;
		
		Прервать;
		
	КонецЦикла;
	
	Если ПервоеПравилоОсобенностиНалоговогоУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Выделим налоговый учет
	
	ПозицияПервогоПравила = ПравилаРаспределения.Индекс(ПравилоДляОбработки);
	
	Правило = ПравилаРаспределения.Вставить(ПозицияПервогоПравила);
	УстановитьПравилоРаспределения(Правило, "ВременныеРазницыОтклоненияВыпускПродукции", "ВыделитьНалоговыйУчет");
	Правило.Наименование = НСтр("ru = 'Отразить временные разницы, вызванные разным моментом признания расходами разницы между фактической и плановой стоимостью продукции'");
	
	Правило.ОтборРасходов.Вставить("Счет", ПланыСчетов.Хозрасчетный.ВыпускПродукции);
	
	// Покажем, что расходы относятся в налоговом учете к косвенным
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ВременныеРазницыОтклоненияВыпускПродукции";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_ВременныеРазницыОтклоненияВыпускПродукции";
	
	// В налоговом учете все прямые расходы включаются в стоимость продукции
	Правило = ПравилаРаспределения.Вставить(ПозицияПервогоПравила + 1);
	Правило.Наименование = НСтр("ru = 'Вся сумма прямых расходов включается в себестоимость продукции'");
	
	УстановитьПравилоВыпускПродукцииПоФактическойСтоимости(
		Правило,
		РазрезыРаспределения,
		"ОтклоненияСебестоимостиФактическаяСебестоимостьНалоговыйУчет");
	
	Правило.ОтборРасходов.Вставить("Счет", ПланыСчетов.Хозрасчетный.ВыпускПродукции);
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
	
КонецПроцедуры

Процедура ДобавитьПравилаСоставРасходовПоНалогуНаПрибыль(ПравилаРаспределения, ГруппыОсновныхПравил, Настройки, ОтборСчетов)
	
	Период      = Настройки.Контекст.Период;
	Организация = Настройки.Контекст.Организация;
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		// Правила применяем только на основной системе налогообложения
		Возврат;
	КонецЕсли;
	
	// 1. Правила непринимаемых и нормируемых - самые первые
	// (перед настраиваемыми в учетной политике правилами закрытия счетов)
	НачалоНабораПравил = ПравилаРаспределения.Количество();
	
	// Очистим сумму НУ, если расходы не учитываются в целях налогообложения
	ДобавитьПравилаРасходыНеУчитываемыеВЦеляхНалогообложения(ПравилаРаспределения, ОтборСчетов);
	
	// Разберемся со сверхнормативными расходами
	ДобавитьПравилаНормируемыеРасходыНалоговогоУчета(ПравилаРаспределения, ОтборСчетов, Период, Организация);
	
	// Сдвинем добавленные правила на первую позицию
	ПозицияНабораПравил = 0;
	Для Индекс = НачалоНабораПравил По ПравилаРаспределения.Количество() - 1 Цикл
		ПравилаРаспределения.Сдвинуть(Индекс, ПозицияНабораПравил - НачалоНабораПравил);
	КонецЦикла;
	
	// 2. Некоторые основные правила могут по-разному применяться в бухгалтерском и налоговом учете,
	//    если для целей бухгалтерского учета расходы включаются в стоимость, а для целей налогового - нет.
	//    Поэтому перед первым таким правилом, действующим на определенный счет, добавим набор правил,
	//    разделяющих прямые и косвенные расходы в соответствии с настройками пользователя.
	
	ЕдиныеПравилаНалоговогоУчета  = ЕдиныеПравилаНалоговогоУчета();
	ОписаниеПравилНалоговогоУчета = НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета();
	
	Для Каждого ГруппаПравил Из ГруппыОсновныхПравил Цикл
		
		Счет = ГруппаПравил.Ключ;
		
		Если ПрямыеРасходыОпределяютсяРезультатомРаспределения(Счет, Настройки) Тогда
			
			УчетРемонтовОС.ДобавитьПравилоВыделитьНалоговыйУчетКапитализируемыеРемонтыОС(ПравилаРаспределения, ГруппаПравил.Значение, Счет, Организация, Период);
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого ОсновноеПравило Из ГруппаПравил.Значение Цикл
			
			Если ЕдиныеПравилаНалоговогоУчета.Найти(ОсновноеПравило.ФункциональноеИмя) <> Неопределено Тогда
				// разделение на прямые и косвенные по настройкам не требуется
				Продолжить;
			КонецЕсли;
			
			ПрочитатьПравилаОпределенияПрямыхРасходовНалоговогоУчета(ОписаниеПравилНалоговогоУчета, Настройки.СчетаУчета, Период, Организация);
			
			// Добавим правила разделения расходов на прямые и косвенные
			НачалоНабораПравил = ПравилаРаспределения.Количество();
			
			// Разделим расходы на прямые и косвенные в налоговом учете
			ДобавитьПравилаПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, ОписаниеПравилНалоговогоУчета, Счет);
			
			// Спишем расходы, которые относятся на расходы текущего периода только в НУ
			ДобавитьПравилоКосвенныеРасходыНалоговогоУчета(ПравилаРаспределения, Счет);
			
			// Сдвинем добавленные правила - поместим их перед основным правилом, потребовавшим выделения косвенных расходов
			ПозицияНабораПравил = ПравилаРаспределения.Индекс(ОсновноеПравило);
			Для Индекс = НачалоНабораПравил По ПравилаРаспределения.Количество() - 1 Цикл
				ПравилаРаспределения.Сдвинуть(Индекс, ПозицияНабораПравил - НачалоНабораПравил);
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// 3. Применение базы, основанной на стоимости прямых расходов, может потребовать раздельного расчета базы
	//    для налогового учета, потому что понятие и оценка прямых расходов в бухгалтерском и налоговом учете могут отличаться
	ФормироватьСтоимостьПоПравиламБУ = ОписаниеПравилНалоговогоУчета.ФормироватьСтоимостьПоПравиламБУ;
	// Если стоимость формируется по правилам БУ, то данные регистра сведений МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	// не нужны, значение переменной ПериодНастройкиПрямыхРасходов равно Неопределено.
	Если Не ФормироватьСтоимостьПоПравиламБУ Тогда
		ПериодНастройкиПрямыхРасходов = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействующейНастройки(
			Период,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	Если ФормироватьСтоимостьПоПравиламБУ Или ПериодНастройкиПрямыхРасходов <> Неопределено Тогда
		ОсновнойВидНалоговыхРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Период, Организация);
		ДобавитьПравилаМетодСтоимостьРасходовНУ(
			ПравилаРаспределения,
			ОсновнойВидНалоговыхРазниц,
			ФормироватьСтоимостьПоПравиламБУ,
			ПериодНастройкиПрямыхРасходов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения(ПравилаРаспределения, ОтборСчетов, Период, Организация)
	
	// Применяется перед применением аналитики ВидДеятельности
	// Поскольку в процедуре добавляется несколько правил в эту позицию,
	// индекс требуется вычислять каждый раз перед добавлением правила
	ПервоеПравилоВидДеятельности = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидДеятельности");
	
	Если ПервоеПравилоВидДеятельности = Неопределено Тогда
		// Не важно
		Возврат;
	КонецЕсли;
	
	ТолькоОсновная = УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период);
	ТолькоОсобый   = УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период);
	
	Если ТолькоОсновная Или ТолькоОсобый Тогда
		
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельности", "РаспределитьНаРасходы");
		
		// Исключаем ситуации, когда расходы ошибочно отнесены к заведомо неверному "налоговому виду деятельности"
		// (системе налогообложения).
		// Также отмечаем, что распределение не нужно.
		// Все расходы относим к одному виду деятельности.
		// См. также ДобавитьПравилоОпределитьВидРасходовНУ
		Правило.Наименование = НСтр("ru = 'Отнести к единственному виду деятельности'");
		
		НеправильныеВидыДеятельности = Новый Массив;
		НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		Если ТолькоОсновная Тогда
			НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
			ПравильныйВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		Иначе
			НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
			ПравильныйВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
		КонецЕсли;
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", НеправильныеВидыДеятельности);
		
		УстановитьОтборСчетов(Правило, ОтборСчетов);
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельности";
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ВидДеятельности", ПравильныйВидДеятельности);
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ВидДеятельности КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельности";
		
	Иначе
		
		// 1. Определим виды деятельности косвенным способом.
		//
		// В системе нет четкого признака, по которым расходы можно отнести к тому или иному виду деятельности.
		// Для расходов текущего периода вид деятельности можно определить по статье расходов.
		//
		// Для расходов без указания статьи затрат (в НЗП) вид деятельности можно попробовать угадать:
		// - если по НГ есть расходы в текущем периоде и все эти расходы относятся к ЕНВД, то НЗП по этой НГ тоже относится к ЕНВД
		// - в остальных случаях НЗП относится к деятельности, не облагаемой ЕНВД
		
		// 1.1 Выделим связанные с особым порядком налогообложения (по статье затрат)
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиОсобыйПорядокНалогообложения", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - особый порядок налогообложения'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		
		УстановитьОтборСчетов(Правило, ОтборСчетов);
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		Правило.ПоляИсточника.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиОсобыйПорядокНалогообложения";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиОсобыйПорядокНалогообложения
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения), ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты))";
		
		// 1.2 Выделим связанные с особым порядком налогообложения (по расходам периода)
		
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиБезСтатьиЗатрат", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - без статьи затрат'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		Правило.ОтборРасходов.Вставить("СтатьяЗатрат",    Справочники.СтатьиЗатрат.ПустаяСсылка());
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляИсточника.Вставить("Счет",                 "Счет");
		Правило.ПоляИсточника.Вставить("Подразделение",        "Подразделение");
		Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиБезСтатьиЗатрат";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расходы.Счет КАК Счет,
		|	Расходы.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто1
		|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто2
		|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто3
		|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто1
		|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто2
		|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто3
		|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВТ_АналитикаПоступлений
		|ИЗ
		|	Поступления КАК Расходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
		|		ПО Расходы.Счет = СубконтоЗатрат.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикаПоступлений.Счет КАК Счет,
		|	АналитикаПоступлений.Подразделение КАК Подразделение,
		|	АналитикаПоступлений.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиБезСтатьиЗатрат
		|ИЗ
		|	ВТ_АналитикаПоступлений КАК АналитикаПоступлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|		ПО АналитикаПоступлений.СтатьяЗатрат = СтатьиЗатрат.Ссылка
		|			И (СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_АналитикаПоступлений";
		
		// 1.3 Все остальные отнесем к основной системе
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиОсновнаяСистемаНалогообложения", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - основная система налогообложения'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		УстановитьОтборСчетов(Правило, ОтборСчетов);
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиОсновнаяСистемаНалогообложения";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиОсновнаяСистемаНалогообложения";
		
		// 2. Внесем ясность в отношении распределяемых расходов - каждый расход отнесем к одному из двух видов деятельности
		// Распределяем расходы между видами деятельности пропорционально выручке
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельности", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Распределить между видами деятельности'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		УстановитьОтборСчетов(Правило, ОтборСчетов);
		
		Правило.Действие = "РаспределитьНаРасходы"; // Поля приемника представлены в виде аналитики распределения
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельности";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДолиСписанияКосвенныхРасходов.ДоляЕНВД КАК Доля
		|ПОМЕСТИТЬ ВТ_ДоляЕНВД
		|ИЗ
		|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
		|ГДЕ
		|	ДолиСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
		|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения) КАК ВидДеятельности,
		|	ДоляЕНВД.Доля КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельности
		|ИЗ
		|	ВТ_ДоляЕНВД КАК ДоляЕНВД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
		|	1 - ДоляЕНВД.Доля
		|ИЗ
		|	ВТ_ДоляЕНВД КАК ДоляЕНВД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоляЕНВД";
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет коллекцию правил распределения правилами, устраняющими детализацию,
// используемую преимущественно для задач налогового учета по налогу на прибыль - 
// ВидРасходовНУ, НалоговыйУчет, КорСчет, ЗавершенаОбработкаНУ.
//
// Эти разрезы могут использоваться и для других задач, поэтому ориентируемся не на настройки налогов,
// а на фактическое использование полей в правилах распределения:
// устанавливаем правила удаления аналитики сразу после тех правил, где эти поля используются в последний раз.
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - анализируемая и дополняемая коллекция, см. НовыеПравилаРаспределения
//  СчетаРасходов        - ФиксированныйМассив - счета, данные по которым должны обрабатываться правилами коллекции,
//                         см. УчетЗатрат.СчетаРасходов
//
Процедура ДобавитьПравилаУдалитьАналитикуНалоговогоУчета(ПравилаРаспределения, Настройки)
	
	КоллекцияПоследнееИспользование = ПоследнееИспользованиеАналитикиНалоговогоУчета(ПравилаРаспределения, Настройки.СчетаУчета);
	// Коллекция упорядочена по убыванию индексов правил последнего использования, поэтому правила удаления безопасно добавлять,
	// ориентируясь на этот индекс.
	
	Для Каждого ПоследнееИспользование Из КоллекцияПоследнееИспользование Цикл
		
		Если Не ЗначениеЗаполнено(ПоследнееИспользование.ИспользуемыеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоследнееИспользование.Счет = ПланыСчетов.Хозрасчетный.ВыпускПродукции
			Или ПрямыеРасходыОпределяютсяРезультатомРаспределения(ПоследнееИспользование.Счет, Настройки) Тогда
			Продолжить;
		КонецЕсли;
		
		Правило = ПравилаРаспределения.Вставить(ПоследнееИспользование.ПоследнееИспользование + 1); // За правилом с последним использованием
		УстановитьПравилоРаспределения(
			Правило,
			"УдалитьАналитикуНалоговогоУчета." + СтрСоединить(ПоследнееИспользование.ИспользуемыеПоля, ""),
			"РаспределитьНаРасходы");
			
		Правило.Наименование = НСтр("ru = 'Удалить (очистить) аналитику налогового учета по налогу на прибыль'");
		
		Правило.ОтборРасходов.Вставить("Счет", ПоследнееИспользование.Счет);
		
		// Поля приемника представлены в виде аналитики распределения
		Для Каждого ИмяПоля Из ПоследнееИспользование.ИспользуемыеПоля Цикл
			Правило.ПоляПриемника.Вставить(ИмяПоля);
		КонецЦикла;
		
		// База распределения - частный случай распределения - "Перенос".
		// При этом механика распределения не переносит затраты "само-в-себя",
		// поэтому фактически правило подействует только на расходы,
		// в которых заполнено любое из полей приемника.
		Правило.БазаРаспределения.Имя = "БазаРаспределения_УдалитьАналитикуНалоговогоУчета";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
		|	ИСТИНА КАК ЗавершенаОбработкаНУ,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_УдалитьАналитикуНалоговогоУчета";
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет последнее в коллекции правил распределения использование каждого разреза аналитики налогового учета по каждому счету (субсчету)
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - анализируемая коллекция, см. НовыеПравилаРаспределения
//  СчетаРасходов        - ФиксированныйМассив - счета, данные по которым должны обрабатываться правилами коллекции,
//                         см. УчетЗатрат.СчетаРасходов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - информация о последнем использовании
// * ПоследнееИспользование - Число - индекс правила, которое для конкретного счета использует разрез (разрезы) аналитики последним
// * ИспользуемыеПоля       - Массив - содержит имена разрезов аналитики
// * Счет                   - ПланСчетовСсылка.Хозрасчетный - счет расходов
//
Функция ПоследнееИспользованиеАналитикиНалоговогоУчета(ПравилаРаспределения, СчетаРасходов)
	
	// Определим, в какой момент нужно удалить каждое из полей.
	// Делаем это независимо для каждого счета.
	
	// При этом считаем использованием аналитики налогового учета любые движения с действием ВыделитьНалоговыйУчет,
	// даже если такая аналитика в них не упоминается явно,
	// поскольку для сокращения распределения с заведомо нулевыми суммами важно избежать распределений с иными действиями
	// между различными правилами с действием ВыделитьНалоговыйУчет (см. комментарий о порядке правил в НовыеПравилаРаспределения)
	
	ГруппыПравил = Новый Соответствие; // Ключ - счет или пустая ссылка; Значение - см. ШаблонАналитикаНалоговогоУчета
	
	ШаблонПоляНалоговогоУчета = Новый Структура; // Ключ - имя поля, Значение - индекс правила, в котором это поле используется последний раз
	ШаблонПоляНалоговогоУчета.Вставить("ВидРасходовНУ",        -1);
	ШаблонПоляНалоговогоУчета.Вставить("НалоговыйУчет",        -1);
	ШаблонПоляНалоговогоУчета.Вставить("КорСчет",              -1);
	ШаблонПоляНалоговогоУчета.Вставить("ЗавершенаОбработкаНУ", -1);
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Счета = ОтобранныеСчетаРасходов(Правило, СчетаРасходов);
		
		Для Каждого Счет Из Счета Цикл
			
			ИспользуемыеПоля = ГруппыПравил[Счет];
			Если ИспользуемыеПоля = Неопределено Тогда
				ИспользуемыеПоля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ШаблонПоляНалоговогоУчета);
				ГруппыПравил.Вставить(Счет, ИспользуемыеПоля);
			КонецЕсли;
			
			ИндексПравила = ПравилаРаспределения.Индекс(Правило);
			
			Если Правило.Действие = "ВыделитьНалоговыйУчет" Тогда
				Для Каждого ИспользованиеПоля Из ИспользуемыеПоля Цикл
					ИспользуемыеПоля[ИспользованиеПоля.Ключ] = ИндексПравила;
				КонецЦикла;
			Иначе
				Для Каждого ИспользованиеПоля Из ИспользуемыеПоля Цикл
					Если Не ИспользуетсяРазрезАналитики(Правило, ИспользованиеПоля.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ИспользуемыеПоля[ИспользованиеПоля.Ключ] = ИндексПравила;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сгруппируем потребные правила удаления: если несколько полей нужно удалить одновременно, то это будет одно правило.
	ПоследнееИспользование = Новый ТаблицаЗначений;
	ПоследнееИспользование.Колонки.Добавить("ПоследнееИспользование", Новый ОписаниеТипов("Число"));
	ПоследнееИспользование.Колонки.Добавить("ИспользуемыеПоля",       Новый ОписаниеТипов("Массив"));
	ПоследнееИспользование.Колонки.Добавить("Счет",                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПоследнееИспользование.Индексы.Добавить("ПоследнееИспользование,Счет");
	
	Для Каждого ОписаниеГруппыСчетов Из ГруппыПравил Цикл
		
		Отбор = Новый Структура("ПоследнееИспользование,Счет");
		Отбор.Счет = ОписаниеГруппыСчетов.Ключ;
			
		Для Каждого ИспользованиеПоля Из ОписаниеГруппыСчетов.Значение Цикл
			
			Отбор.ПоследнееИспользование = ИспользованиеПоля.Значение;
			ПравилоУдаления = ПоследнееИспользование.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(ПравилоУдаления) Тогда
				ПравилоУдаления = ПравилоУдаления[0];
			Иначе
				ПравилоУдаления = ПоследнееИспользование.Добавить();
				ЗаполнитьЗначенияСвойств(ПравилоУдаления, Отбор);
			КонецЕсли;
			
			Если ПравилоУдаления.ИспользуемыеПоля.Найти(ИспользованиеПоля.Ключ) = Неопределено Тогда
				ПравилоУдаления.ИспользуемыеПоля.Добавить(ИспользованиеПоля.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоследнееИспользование.Сортировать("ПоследнееИспользование УБЫВ, Счет УБЫВ");
	
	Возврат ПоследнееИспользование;
	
КонецФункции

Функция ОтобранныеСчетаРасходов(Правило, СчетаРасходов)
	
	Если Не Правило.ОтборРасходов.Свойство("Счет") Тогда
		Возврат СчетаРасходов;
	КонецЕсли;
		
	Счета = Новый Массив;
	Если ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Счета.Добавить(Правило.ОтборРасходов.Счет);
	ИначеЕсли ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("Массив")
		Или ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Счет Из Правило.ОтборРасходов.Счет Цикл
			Если Не ЗначениеЗаполнено(Счет) Тогда
				Продолжить;
			КонецЕсли;
			Счета.Добавить(Счет);
		КонецЦикла;
	КонецЕсли;
	Субсчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(Счета);
	
	// отфильтруем и упорядочим по СчетаРасходов
	Счета = Новый Массив;
	Для Каждого Счет Из СчетаРасходов Цикл
		Если Субсчета.Найти(Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Счета.Добавить(Счет);
	КонецЦикла;
		
	Возврат Счета;

КонецФункции

Процедура УстановитьОтборСчетов(Правило, ОтборСчетов)
	
	Если Не ЗначениеЗаполнено(ОтборСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Правило.ОтборРасходов.Вставить("Счет", ОтборСчетов);
	
КонецПроцедуры

// Расходы на некоторых счетах, могут классифицироваться как прямые
// и косвенные не на основании исходной аналитики, а по результату распределения. Например, при ремонте основных
// средств, участвующих в производстве продукции, расходы считаются прямыми. А расходы на ремонт основных средств,
// используемых для админстративных нужд, считаются косвенными.
// См. постановления суда:
// Постановление Арбитражного суда Северо-Западного округа от 15.04.2021 N Ф07-2962/2021 по делу N А05-15361/2019,
// Постановление Арбитражного суда Дальневосточного округа от 01.08.2017 N Ф03-2571/2017 по делу N А04-10568/2016, 
// Постановление Арбитражного суда Северо-Западного округа от 31.01.2022 N Ф07-18731/2021 по делу N А05-7733/2020, 
// Постановление Арбитражного суда Северо-Западного округа от 21.05.2021 N Ф07-4106/2021 по делу N А05-4011/2020 + ВС, 
// Постановление Арбитражного суда Северо-Западного округа от 30.08.2021 N Ф07-11217/2021 по делу N А05-4852/2020 + ВС
// 
// Параметры:
//   Счет - ПланСчетовСсылка.Хозрасчетный
//   Настройки - Структура - см. Справочники.НастройкиУчетаЗатрат.НовыйБазовыеНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//   Булево
//
Функция ПрямыеРасходыОпределяютсяРезультатомРаспределения(Счет, Настройки)
	
	СчетаРолиКалькуляцияРемонтовОС =
		Справочники.НастройкиУчетаЗатрат.СчетаРоли(Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС, Настройки);
		
	Возврат СчетаРолиКалькуляцияРемонтовОС.Найти(Счет) <> Неопределено;
	
КонецФункции

#Область НалогНаПрибыль

Функция ЕдиныеПравилаНалоговогоУчета()
	
	ЕдиныеПравила = Новый Массив;
	// Всегда прямые
	ЕдиныеПравила.Добавить("ТранспортныеРасходыВыделитьНалоговыйУчет");
	ЕдиныеПравила.Добавить("РаспределитьТранспортныеРасходы");
	ЕдиныеПравила.Добавить("ТранспортныеРасходыБудущихПериодов");

	// Всегда косвенные
	ЕдиныеПравила.Добавить("ДиректКостинг");
	ЕдиныеПравила.Добавить("РасходыНаПродажу");
	ЕдиныеПравила.Добавить("РаспределитьНаФинансовыйРезультат");
	
	РасходыОбслуживающихПроизводств.ДополнитьЕдиныеПравилаНалоговогоУчета(ЕдиныеПравила);
	
	// Счет ВыпускПродукции (40)
	ЕдиныеПравила.Добавить("ОтклоненияСебестоимостиФактическаяСебестоимость");
	
	Возврат ЕдиныеПравила;
	
КонецФункции

Процедура ДобавитьПравилаРасходыНеУчитываемыеВЦеляхНалогообложения(ПравилаРаспределения, ОтборСчетов)
	
	// Суммы не учитываемых расходов отложим отдельно и затем исключим из распределения.
	// В расходах, которые будут распределены, появятся постоянные разницы.
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "РасходыНеУчитываемыеВЦеляхНалогообложенияВыделить", "ВыделитьНалоговыйУчет");
	Правило.Наименование = НСтр("ru = 'Отразить постоянные разницы, вызванные тем, что часть расходов не учитывается в целях налогообложения'");
	
	Правило.ОтборРасходов = Новый Структура;
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ",   Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	
	УстановитьОтборСчетов(Правило, ОтборСчетов);
	
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_НеУчитываемыеВЦеляхНалогообложения";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.НеУчитываемыеВЦеляхНалогообложения) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_НеУчитываемыеВЦеляхНалогообложения";
	
	
	// Исключим суммы НУ из дальнейшего распределения
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "РасходыНеУчитываемыеВЦеляхНалогообложенияЗафиксировать", "Зафиксировать");
	Правило.Наименование = НСтр("ru = 'Исключить из распределения суммы расходов, не учитываемых в целях налогообложения'");
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.НеУчитываемыеВЦеляхНалогообложения);
	
КонецПроцедуры

Процедура ДобавитьПравилаНормируемыеРасходыНалоговогоУчета(ПравилаРаспределения, ОтборСчетов, Период, Организация)
	
	// Особенность распределения нормируемых расходов используется также 
	// в методе НалоговыйУчетОбособленныхПодразделений.ПодготовитьРасчетРаспределенияНалоговойБазы().
	
	// Выполним нормирование расходов
	
	// Нормирование описано четырьмя правилами:
	// 1. нормируемые расходы распределим между нормативными и сверхнормативными
	//    Нормативные расходы обработаем на общем основании (например, в ДобавитьПравилаПрямыеРасходыНалоговогоУчета()).
	//    Сверхнормативные расходы обработаем правилами 2 - 4
	// 2. выделим сверхнормативные расходы налогового учета: 
	//    у них отличается порядок отражения в учете, они относятся к расходам будущих периодов.
	//    В результате получатся постоянные разницы
	// 3. зафиксируем сверхнормативные расходы, чтобы они никуда не распределились
	//    (а в последнем месяце налогового периода - спишем со счетов затрат, потому что шансов включить их в будущем уже нет)
	// 4. избавимся от аналитики НалоговыйУчет, которая более не нужна
	
	// Схематически можно изобразить так
	//
	//	                                                                            X        Счет 84
	//	                                                                           /   или  /
	//	                                                     [БудущихПериодов] (3) 
	//	                                                   / 
	//	                                                  /ПР
	//	                                                 /
	//	                            [Сверхнормативные] (2)   (4)   
	//	                          /                             \
	//	                         /k=1-норма                      \k=1
	//                          /                                 \
	// [Указан ВидРасходовНУ](1)                                    [Не указан ВидРасходовНУ, НалоговыйУчет, КорСчет]
	//                          \                      
	//                           \k=норма         
	//                            \                 
	//                                 [Нормативные]
	//                                              
	//                                                            
	// Легенда:
	//  []    - расходы, их критерии
	//  (1)   - номер правила, см. выше
	//  / и \ - стрелки слева направо, результат применения правила
	//  k     - коэффициент базы распределения
	//  ПР    - правило с действием "ВыделитьНалоговыйУчет"
	//  X     - правило с действием "Зафиксировать"
	
	// (1) Разделим нормируемые расходы на расходы в пределах норм (нормативные) и сверх норм (сверхнормативные)
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "НормированиеРасходовНалоговогоУчета", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Нормировать расходы в налоговом учете'");
	
	УстановитьОтборСчетов(Правило, ОтборСчетов);
	
	// ВидРасходовНУ определяет, относятся расходы к нормируемым или нет.
	// Кроме того, для разных видов расходов - разные нормы.
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	
	Правило.ПоляПриемника.Вставить("НалоговыйУчет"); // В результате распределения расходы делятся на Нормативные и Сверхнормативные
	
	// Из-за особенностей хранения данных в регистре ДолиСписанияКосвенныхРасходов текст запроса конструируется кодом
	ПоляРегистраДолиРасходов = Новый Массив;
	ЗапросыДляОбъединения    = Новый Массив;
	Для Каждого ОписаниеПоля Из РегистрыСведений.ДолиСписанияКосвенныхРасходов.ИменаВидовНормируемыхРасходов() Цикл
		
		ПоляРегистраДолиРасходов.Добавить("ДолиРасходов." + ОписаниеПоля.Ключ);
		
		ТекстЗапроса = 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ."+ ОписаниеПоля.Значение +") КАК ВидРасходовНУ,
		|	ДолиРасходов."+ ОписаниеПоля.Ключ +" КАК Доля
		|ИЗ
		|	ДанныеРегистраДолиРасходов КАК ДолиРасходов
		|
		|";
		
		ЗапросыДляОбъединения.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = // Содержит заменяемые конструкции "// ПоляРегистраДолиРасходов" и "// ОБЪЕДИНИТЬ"
	"ВЫБРАТЬ
	|	// ПоляРегистраДолиРасходов
	|ПОМЕСТИТЬ ДанныеРегистраДолиРасходов
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиРасходов
	|ГДЕ
	|	ДолиРасходов.Организация = &ГоловнаяОрганизация
	|	И ДолиРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	0 КАК Доля
	|ПОМЕСТИТЬ НормыРасходов
	|ИЗ
	|	ДанныеРегистраДолиРасходов КАК ДолиРасходов
	|ГДЕ ЛОЖЬ
	|
	|// ОБЪЕДИНИТЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"// ПоляРегистраДолиРасходов", 
		СтрСоединить(ПоляРегистраДолиРасходов, "," + Символы.ПС));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"// ОБЪЕДИНИТЬ", 
		СтрСоединить(ЗапросыДляОбъединения, Символы.ПС));
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	НормыРасходов.ВидРасходовНУ КАК ВидРасходовНУОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.Нормативные) КАК НалоговыйУчет,
	|	НормыРасходов.Доля КАК База
	|ПОМЕСТИТЬ БазаРаспределения_НормированиеРасходовНалоговогоУчета
	|ИЗ
	|	НормыРасходов КАК НормыРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормыРасходов.ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные),
	|	1 - НормыРасходов.Доля
	|ИЗ
	|	НормыРасходов КАК НормыРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистраДолиРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НормыРасходов";
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_НормированиеРасходовНалоговогоУчета";
	Правило.БазаРаспределения.ТекстЗапроса = ТекстЗапроса;
	
	// (2) Выделим сверхнормативные расходы - образуются постоянные разницы
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "ВыделитьСверхнормативныеРасходы", "ВыделитьНалоговыйУчет");
	Правило.Наименование = НСтр("ru = 'Отразить постоянные разницы, вызванные сверхнормативными расходами в налоговом учете'");
	
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные);
	Правило.ПоляПриемника.Вставить("НалоговыйУчет"); // Назовем их "БудущихПериодов", см. правило (4)
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыделитьСверхнормативныеРасходы";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_ВыделитьСверхнормативныеРасходы";
	
	// (3) Оградим расходы будущих периодов от дальнейшего распределения
	НалоговыйПериод = НалоговыйУчет.БлижайшийНалоговыйПериод(Период, Организация);
	ЕстьВозможностьПризнатьРасходыВБудущем = (КонецМесяца(Период) <> НалоговыйПериод.Конец);
	Если ЕстьВозможностьПризнатьРасходыВБудущем Тогда
		
		Правило = ПравилаРаспределения.Добавить();
		УстановитьПравилоРаспределения(Правило, "СверхнормативныеРасходыНалоговогоУчета", "Зафиксировать");
		Правило.Наименование = НСтр("ru = 'Не распределять сверхнормативные расходы налогового учета'");
		Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
		
	Иначе
		
		Правило = ПравилаРаспределения.Добавить();
		УстановитьПравилоРаспределения(Правило, "СверхнормативныеРасходыНалоговогоУчетаЗаНалоговыйПериод", "РаспределитьНаСубконто");
		Правило.Наименование = НСтр("ru = 'Не распределять сверхнормативные расходы налогового учета'");
		Правило.СодержаниеПроводки = НСтр(
			"ru = 'Списаны расходы сверх ограничений, установленных главой 25 НК РФ'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ЗафиксироватьСверхнормативныеРасходы";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбытокПодлежащийПокрытию) КАК Счет,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ЗафиксироватьСверхнормативныеРасходы";
				
	КонецЕсли;
	
	// (4) Избавимся от аналитики, которая стала ненужной
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "СгруппироватьНормируемыеРасходы", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Сгруппировать расходы, избавившись от аналитики, которая больше не нужна'");
	
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные);
	
	// После выполнения правила значения не нужны
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("КорСчет");
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_СгруппироватьНормируемыеРасходы";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СгруппироватьНормируемыеРасходы";
	
КонецПроцедуры

// Конструктор коллекции, обеспечивающей чтение правил определения прямых расходов налогового учета.
// Описывает состояние (пытались читать или нет, прочитаны или нет, куда прочитаны)
// и предоставляет тексты, параметры запросов для использования в правилах распределения.
//
// Сами детальные правила помещаются в менеджер временных таблиц, используемый только для хранения настроек.
// Имя таблицы: ПравилаОпределенияПрямыхРасходовНалоговогоУчета.
//
// В общем случае в алгоритме правила читаются дважды: при подготовке правил распределения и при их выполнении,
// поскольку код создания правил распределения и их выполнения изолирован - не имеет разделяемых временных таблиц.
//
Функция НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета()
	
	Описание = Новый Структура;
	Описание.Вставить("ПравилаПрочитаны",                 Ложь);
	Описание.Вставить("ЕстьПрямыеРасходы",                Ложь);
	Описание.Вставить("ФормироватьСтоимостьПоПравиламБУ", Ложь);
	Описание.Вставить("МенеджерВременныхТаблиц"); // инициализируется при наличии прямых расходов, хранит таблицу ПравилаОпределенияПрямыхРасходовНалоговогоУчета
	
	// следующие свойства инициализируется при чтении правил (при их наличии)
	Описание.Вставить("СоздатьВременныеТаблицы",    ""); // текст создания временной таблицы ПравилаОпределенияПрямыхРасходовНалоговогоУчета
	Описание.Вставить("ПараметрыВременныхТаблиц",   Новый Структура);
	
	Возврат Описание;
	
КонецФункции

// Читает во временную таблицу настройки, если они не были прочитаны ранее.
// Дополнительно поставляет тексты запросов для чтения правил.
//
// Имя таблицы: ПравилаОпределенияПрямыхРасходовНалоговогоУчета.
//
// Параметры:
//  ОписаниеПравил - Структура - см. НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета; 
//                   объект, через который происходит чтение (Reader)
//  СчетаРасходов  - Массив - счета расходов, по которым нужно составить правила
//  Период         - Дата - период, за который должны действовать правила
//  Организация    - СправочникСсылка.Организации - организация (филиал), к которой применяются правила
//
Процедура ПрочитатьПравилаОпределенияПрямыхРасходовНалоговогоУчета(ОписаниеПравил, СчетаРасходов, Знач Период, Знач Организация)
	
	Если ОписаниеПравил.ПравилаПрочитаны Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПравил.ПравилаПрочитаны = Истина;
	
	ОписаниеПравил.ФормироватьСтоимостьПоПравиламБУ = УчетнаяПолитика.ФормироватьСтоимостьПоПравиламБУ(Организация, Период);
	Если ОписаниеПравил.ФормироватьСтоимостьПоПравиламБУ Тогда
		Возврат;
	КонецЕсли;
	
	// Настройки единые для организации в целом, включая филиалы
	Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Период = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействующейНастройки(Период, Организация);
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПравил.ЕстьПрямыеРасходы       = Истина;
	ОписаниеПравил.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Настройка может содержать счета-группы. Детализируем их до счетов, на которых ведется учет.
	// Счета учета расходов могут быть не заполнены. Детализируем их до всех счетов расходов.
	
	ИерархияСчетов = Новый ТаблицаЗначений;// Для помещения во временную таблицу
	ИерархияСчетов.Колонки.Добавить("СчетНастройки", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ИерархияСчетов.Колонки.Добавить("СчетРасходов",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройка.Счет КАК Счет
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Настройка
	|ГДЕ
	|	Настройка.Организация = &Организация
	|	И Настройка.ПериодДействия = &Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
			ПодчиненныеСчетаРасходов = СчетаРасходов;
		Иначе
			ПодчиненныеСчетаРасходов = Новый Массив;
			Для Каждого Счет Из БухгалтерскийУчетПовтИсп.СчетаВИерархии(Выборка.Счет) Цикл
				Если СчетаРасходов.Найти(Счет) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПодчиненныеСчетаРасходов.Добавить(Счет);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Счет Из ПодчиненныеСчетаРасходов Цикл
			Запись = ИерархияСчетов.Добавить();
			Запись.СчетНастройки = Выборка.Счет;
			Запись.СчетРасходов  = Счет;
		КонецЦикла;
		
	КонецЦикла;
	
	// Прочитаем полные данные настроек, дополненные счетами учета расходов.
	// Настройки сгруппируем так, чтобы в группе не содержалось столбцов,
	// в которых часть полей будет заполнена, а часть нет.
	
	// Текст и параметры запроса переиспользуются при создании баз распределения
	ОписаниеПравил.ПараметрыВременныхТаблиц.Вставить("ИерархияСчетов",             ИерархияСчетов);
	ОписаниеПравил.ПараметрыВременныхТаблиц.Вставить("ПериодДействующейНастройки", Период);
	// также используются параметры ГоловнаяОрганизация и ПустоеПодразделение,
	// определяемые одинаково для всех запросов временных таблиц баз распределения
	
	ОписаниеПравил.СоздатьВременныеТаблицы =
	"ВЫБРАТЬ
	|	ИерархияСчетов.СчетНастройки КАК СчетНастройки,
	|	ИерархияСчетов.СчетРасходов КАК СчетРасходов
	|ПОМЕСТИТЬ ВТ_ИерархияСчетов
	|ИЗ
	|	&ИерархияСчетов КАК ИерархияСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Настройка.Подразделение = &ПустоеПодразделение
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Настройка.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Настройка.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ИерархияСчетов.СчетРасходов КАК Счет,
	|	Настройка.ВидРасходовНУ КАК ВидРасходовНУ,
	|	Настройка.Подразделение КАК Подразделение,
	|	Настройка.КорСчет КАК КорСчет,
	|	Настройка.СтатьяЗатрат КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ПравилаОпределенияПрямыхРасходовНалоговогоУчета
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИерархияСчетов КАК ИерархияСчетов
	|		ПО Настройка.Счет = ИерархияСчетов.СчетНастройки
	|ГДЕ
	|	Настройка.Организация = &ГоловнаяОрганизация
	|	И Настройка.ПериодДействия = &ПериодДействующейНастройки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИерархияСчетов";
	
	Запрос = Новый Запрос(ОписаниеПравил.СоздатьВременныеТаблицы);
	Запрос.МенеджерВременныхТаблиц = ОписаниеПравил.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИерархияСчетов",             ИерархияСчетов);
	Запрос.УстановитьПараметр("ПериодДействующейНастройки", Период);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",        Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",        БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет набор правил распределения, обеспечивающих обработку прямых расходов налогового учета для конкретного счета расходов.
//
// Параметры:
//  ПравилаРаспределения    - ТаблицаЗначений - заполняемая коллекция, см. НовыеПравилаРаспределения()
//  НастройкиПрямыхРасходов - Структура - см. НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета
//  Счет                    - ПланСчетовСсылка.Хозрасчетный - счет расходов
//
Процедура ДобавитьПравилаПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Счет)
	
	// Расходы, у которых неизвестен ВидРасходовНУ - заведомо прямые.
	// Расходы, у которых известен ВидРасходовНУ относим к прямым, если это предусмотрено настройкой.

	Если НастройкиПрямыхРасходов.ФормироватьСтоимостьПоПравиламБУ Тогда
		ДобавитьПравилоПрямыеРасходыНалоговогоУчетаПоПравиламБУ(ПравилаРаспределения, НастройкиПрямыхРасходов, Счет);
	ИначеЕсли НастройкиПрямыхРасходов.ЕстьПрямыеРасходы Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = НастройкиПрямыхРасходов.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Правила.Группа КАК Группа
		|ИЗ
		|	ПравилаОпределенияПрямыхРасходовНалоговогоУчета КАК Правила
		|ГДЕ
		|	Правила.Счет = &Счет";
		
		// Для каждой группы создадим правило, которое отнесет расходы к прямым расходам налогового учета
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьПравилоПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Выборка.Группа, Счет);
		КонецЦикла;
		
	КонецЕсли;
	
	// Все остальные расходы, у которых заполнен ВидРасходовНУ, для целей налогового учета назовем косвенными
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(Правило, "ВременныеРазницыКосвенныеРасходы", "ВыделитьНалоговыйУчет");
	Правило.Наименование = НСтр("ru = 'Отразить временные разницы, вызванные разным моментом признания косвенных расходов налогового учета'");
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	
	РазрезыРаспределения = РаспределениеРасходов.ПредопределенныеРазрезыРаспределения();
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ", РазрезыРаспределения.ВидРасходовНУ); // все заполненные значения
	
	// Покажем, что расходы относятся в налоговом учете к косвенным
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	// После выполнения правила значения не нужны
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("КорСчет");
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыделитьКосвенныеРасходыНалоговогоУчета";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_ВыделитьКосвенныеРасходыНалоговогоУчета";
	
	// Нормирование косвенных расходов выполняется в ДобавитьПравилаНормируемыеРасходыНалоговогоУчета()
	// Списание косвенных расходов выполняется в ДобавитьПравилоКосвенныеРасходыНалоговогоУчета()
	
КонецПроцедуры

Процедура ДобавитьПравилоПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Группа, Счет)
	
	// Для каждой группы создадим правило, которое отнесет расходы к прямым расходам налогового учета
	
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(
		Правило,
		"ПрямыеРасходыНалоговогоУчетаПоНастройке",
		"РаспределитьНаРасходы");
	Правило.Имя = СтрШаблон("%1.%2", Правило.ФункциональноеИмя, XMLСтрока(Группа));
	Правило.Наименование = НСтр("ru = 'Идентифицировать прямые расходы налогового учета (согласно учетной политике налогового учета)'");
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	
	// Все правила такого вида используют один пакет временных таблиц
	ДобавитьПакетВременныхТаблиц(
		Правило.БазаРаспределения,
		"ПрямыеРасходыНалоговогоУчета",
		НастройкиПрямыхРасходов.СоздатьВременныеТаблицы,
		НастройкиПрямыхРасходов.ПараметрыВременныхТаблиц);
	
	// Отнесем расходы к прямым расходам налогового учета.
	// Для этого достаточно очистить ВидРасходовНУ, так как 
	// - все расходы с пустым видом считаются прямыми
	// - вид расходов НУ не используется после того, как установлено, что расходы - прямые.
	// Переносим и сумму БУ и сумму НУ, 
	// чтобы избавиться от ненужной после выполнения этого правила аналитики - ВидРасходовНУ и КорСчет
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ"); // Покажем, что эти расходы относятся к прямым
	Правило.ПоляПриемника.Вставить("КорСчет");       // После выполнения правила значения не нужны
	
	// Чтобы не делать много правил, отбор расходов зададим самой базой (см. текст запроса)
	// Связь с базой - по ВидРасходовНУ и по тем полям, которые заполнены.
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	// Счет заполнен всегда
	Правило.ПоляИсточника.Вставить("Счет", "СчетОтбор");
	// Пустые поля означают "все". Чтобы это поддержать, связь по этим полям не выполняем.
	// Заполненность полей определим по номеру группы - разложим его на степени двойки.
	ВсеПоля = Новый Массив; // Порядок - как в запросе временной таблицы
	ВсеПоля.Добавить("Подразделение"); // 2^0 = 1
	ВсеПоля.Добавить("КорСчет");       // 2^1 = 2
	ВсеПоля.Добавить("СтатьяЗатрат");  // 2^2 = 4
	
	// Из цикла по группам правил известна группа
	// ВидРасходов заполнен всегда
	КоличествоПолей = ВсеПоля.Количество();
	ПустыеПоля = РазложитьПоСтепенямДвойки(Группа, КоличествоПолей);
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		
		Если ПустыеПоля[Индекс] Тогда
			Продолжить;
		КонецЕсли;
		
		// Это поле используется, по нему нужна связь
		Поле       = ВсеПоля[Индекс];
		Правило.ПоляИсточника.Вставить(Поле, Поле + "Отбор");
		
	КонецЦикла;
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Группа", Группа);
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ПрямыеРасходыНалоговогоУчета_" + Группа;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Правила.Счет КАК СчетОтбор,
	|	Правила.Подразделение КАК ПодразделениеОтбор,
	|	Правила.ВидРасходовНУ КАК ВидРасходовНУОтбор,
	|	Правила.СтатьяЗатрат КАК СтатьяЗатратОтбор,
	|	Правила.КорСчет КАК КорСчетОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	1 КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	ПравилаОпределенияПрямыхРасходовНалоговогоУчета КАК Правила
	|ГДЕ
	|	Правила.Группа = &Группа";
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяБазыРаспределения", Правило.БазаРаспределения.Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоПрямыеРасходыНалоговогоУчетаПоПравиламБУ(ПравилаРаспределения, НастройкиПрямыхРасходов, Счет)
	
	// Создадим правило, которое отнесет расходы к прямым расходам налогового учета
	
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоРаспределения(
		Правило,
		"ПрямыеРасходыНалоговогоУчетаПоПравиламБУ",
		"РаспределитьНаРасходы");

	Правило.Наименование = НСтр("ru = 'Идентифицировать прямые расходы налогового учета (в соответствии с настройкой ""По правилам БУ"")'");
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	
	// Отнесем расходы к прямым расходам налогового учета.
	// Для этого достаточно очистить ВидРасходовНУ, так как 
	// - все расходы с пустым видом считаются прямыми
	// - вид расходов НУ не используется после того, как установлено, что расходы - прямые.
	// Переносим и сумму БУ и сумму НУ, 
	// чтобы избавиться от ненужной после выполнения этого правила аналитики - ВидРасходовНУ
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ"); // Покажем, что эти расходы относятся к прямым
	
	// Отбор расходов зададим самой базой (см. текст запроса)
	// Связь с базой - по ВидРасходовНУ
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ЗапрещенныеВидыРасходов", 
		РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ЗапрещенныеВидыРасходовНУ());
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРасходовНУ.Ссылка КАК ВидРасходовНУОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	1 КАК База
	|ИЗ
	|	Перечисление.ВидыРасходовНУ КАК ВидыРасходовНУ
	|ГДЕ
	|	НЕ ВидыРасходовНУ.Ссылка В (&ЗапрещенныеВидыРасходов)";
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ПрямыеРасходыНалоговогоУчета_ПоПравиламБУ";
	
	НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);
	
КонецПроцедуры

Процедура ДобавитьПравилоКосвенныеРасходыНалоговогоУчета(ПравилаРаспределения, Счет)
	
	// Спишем косвенные расходы налогового учета на счет расходов текущего периода
	
	Правило = ПравилаРаспределения.Добавить();
	УстановитьПравилоСписатьРасходыТекущегоПериода(Правило, "СписатьКосвенныеРасходы");
	
	Правило.Наименование       = НСтр("ru = 'Списать косвенные расходы налогового учета на результат текущего периода'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'");
	
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода);
	Если ЗначениеЗаполнено(Счет) Тогда
		Правило.ОтборРасходов.Вставить("Счет", Счет);
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()
	
	ИменаПравил = Новый Массив;
	
	ИменаПравил.Добавить("МетодМатериальныеЗатраты");
	ИменаПравил.Добавить("МетодОплатаТруда");
	ИменаПравил.Добавить("МетодПрямыеЗатраты");
	ИменаПравил.Добавить("МетодОтдельныеСтатьиПрямыхЗатрат");
	
	Возврат ИменаПравил;
	
КонецФункции

Процедура ДобавитьПравилаМетодСтоимостьРасходовНУ(ПравилаРаспределения, ОсновнойВидНалоговыхРазниц,
	ФормироватьСтоимостьПоПравиламБУ, ПериодНастройкиПрямыхРасходов)
	
	ОтличияБазыРаспределения = ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет();
	
	ОсновныеПравила = Новый Массив;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если ОтличияБазыРаспределения.Найти(Правило.ФункциональноеИмя) = Неопределено Тогда
			// разделение на прямые и косвенные по настройкам не требуется
			Продолжить;
		КонецЕсли;
		
		ОсновныеПравила.Добавить(Правило);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОсновныеПравила) Тогда
		Возврат;
	КонецЕсли;
	
	// Общие свойства правил, разделяющих бухгалтерский и налоговый учет
	ШаблонПредставления = НСтр("ru = 'Отразить %1 разницы, вызванные отличием базы распределения в бухгалтерском и налоговом учете'");
	Если ОсновнойВидНалоговыхРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
		ВидДвиженияРазделения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы;
		ПредставлениеРазниц   = НСтр("ru = 'постоянные'");
	Иначе
		ВидДвиженияРазделения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы;
		ПредставлениеРазниц   = НСтр("ru = 'временные'");
	КонецЕсли;
	ПредставленияПравилаРазделения = СтрШаблон(ШаблонПредставления, ПредставлениеРазниц);
		
	СкорректированныеОписанияБазРаспределения = Новый Соответствие;
	
	Для Каждого ОсновноеПравило Из ОсновныеПравила Цикл
		
		// Скорректируем данные базы распределения.
		// В базу распределения следует включать только расходы, прямые в соответствии со ст. 318 НК.
		
		ИмяОсновнойБазыРаспределения = ОсновноеПравило.БазаРаспределения.Имя;
		
		ОписаниеБазыРаспределения = СкорректированныеОписанияБазРаспределения[ИмяОсновнойБазыРаспределения];
		Если ОписаниеБазыРаспределения = Ложь Тогда
			Продолжить;
		ИначеЕсли ОписаниеБазыРаспределения = Неопределено Тогда
			ОписаниеБазыРаспределения = ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ(
				ОсновноеПравило, ПериодНастройкиПрямыхРасходов, ФормироватьСтоимостьПоПравиламБУ);
			Если ОписаниеБазыРаспределения = Неопределено Тогда
				СкорректированныеОписанияБазРаспределения.Вставить(ИмяОсновнойБазыРаспределения, Ложь);
				Продолжить;
			КонецЕсли;
			СкорректированныеОписанияБазРаспределения.Вставить(ИмяОсновнойБазыРаспределения, ОписаниеБазыРаспределения);
		КонецЕсли;
		
		// Правило налогового учета
		ПравилоНУ = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ОсновноеПравило));
		ЗаполнитьЗначенияСвойств(ПравилоНУ, ОсновноеПравило);
		ПравилоНУ.Имя           = ПравилоНУ.Имя + "НУ";
		ПравилоНУ.Наименование  = НСтр("ru = 'Распределить косвенные расходы по базе, основанной на величине прямых расходов в налоговом учете'");
		ПравилоНУ.ОтборРасходов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПравилоНУ.ОтборРасходов);
		ПравилоНУ.ОтборРасходов.Вставить(
			"НалоговыйУчет",
			Перечисления.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения);
		ПравилоНУ.ПоляПриемника = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПравилоНУ.ПоляПриемника);
		ПравилоНУ.ПоляПриемника.Вставить("НалоговыйУчет"); // Использован
		
		ПравилоНУ.БазаРаспределения = ОписаниеБазыРаспределения;
		
		// Правило, выделяющее налоговый учет
		ПравилоВыделитьНалоговыйУчет = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПравилоНУ));
		ЗаполнитьЗначенияСвойств(ПравилоВыделитьНалоговыйУчет, ОсновноеПравило, "СодержаниеПроводки, МетодРасчета, ОтборРасходов");
		ПравилоВыделитьНалоговыйУчет.Имя           = "ОтличаетсяБазаРаспределения";
		ПравилоВыделитьНалоговыйУчет.Наименование  = ПредставленияПравилаРазделения;
		ПравилоВыделитьНалоговыйУчет.Действие      = "ВыделитьНалоговыйУчет";
		ПравилоВыделитьНалоговыйУчет.ПоляПриемника.Вставить("НалоговыйУчет");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения) КАК НалоговыйУчет,
		|	&ВидДвижения КАК ТипРазниц
		|ПОМЕСТИТЬ БазаРаспределения_ОтличаетсяБазаРаспределения";
		
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("Имя",              "БазаРаспределения_ОтличаетсяБазаРаспределения");
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("ТекстЗапроса",     ТекстЗапроса);
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("ПараметрыЗапроса", Новый Структура("ВидДвижения", ВидДвиженияРазделения));
		
		// Модифицируем правило бухгалтерского учета - исключим его применение для налогового учета
		ОсновноеПравило.ОтборРасходов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОсновноеПравило.ОтборРасходов);
		ОсновноеПравило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка());
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ(ОсновноеПравило, ПериодНастройкиПрямыхРасходов, ФормироватьСтоимостьПоПравиламБУ)
	
	ИмяОсновнойБазыРаспределения = ОсновноеПравило.БазаРаспределения.Имя;
	ПараметрыОсновнойБазыРаспределения = ОбщегоНазначения.СкопироватьРекурсивно(ОсновноеПравило.БазаРаспределения.ПараметрыЗапроса);
	
	ИсточникиДанныхОсновнойБазыРаспределения = ПакетыВременныхТаблицПравила(ОсновноеПравило.БазаРаспределения);
	
	БазаРаспределения = Новый Структура; // См. БазаРаспределения в НовыеПравилаРаспределения
	БазаРаспределения.Вставить("Имя",              ИмяОсновнойБазыРаспределения + "НУ");
	БазаРаспределения.Вставить("ТекстЗапроса",     "");
	БазаРаспределения.Вставить("ПараметрыЗапроса", ПараметрыОсновнойБазыРаспределения);
	БазаРаспределения.Вставить("ВременныеТаблицы", Новый Соответствие);
	
	ТекстыЗапросовИсточникДанных = Новый Массив;
	Для Каждого ОписаниеИсточника Из ИсточникиДанныхОсновнойБазыРаспределения Цикл
		
		ДобавитьПакетВременныхТаблиц(
			БазаРаспределения,
			ОписаниеИсточника.Имя,
			ОписаниеИсточника.ТекстЗапроса,
			ОписаниеИсточника.ПараметрыЗапроса);
		
		ТекстыЗапросовИсточникДанных.Добавить(ОписаниеИсточника.ТекстЗапроса);
		
	КонецЦикла;
	
	// В налоговом учете используем скорректированную базу распределения.
	// При этом потребуется обращаться к временным таблицам основного правила.
	// Поэтому схему запроса инициализируем полным комплектом запросов основного правила,
	// затем модифицируем запросы базы распределения и удалим запросы основного правила.
	
	ВсеТекстыЗапросов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеТекстыЗапросов, ТекстыЗапросовИсточникДанных);
	ВсеТекстыЗапросов.Добавить(ОсновноеПравило.БазаРаспределения.ТекстЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СтрСоединить(ВсеТекстыЗапросов, ";"));
	РазмерОсновногоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	
	// Проверим выполнение соглашений об основном правиле
	// - исходные данные должны быть подготовлены в таблице с именем пакета общих данных
	// - запрос базы должен быть простой выборкой из таблицы исходных данных
	ЗапросБазыРаспределенияОсновногоПравила = ЗапросБазыРаспределенияОсновногоПравила(
		СхемаЗапроса,
		ОсновноеПравило,
		ИсточникиДанныхОсновнойБазыРаспределения);
	
	Если ЗапросБазыРаспределенияОсновногоПравила = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подготовим внутренние таблицы и основную таблицу базы
	Если ФормироватьСтоимостьПоПравиламБУ Тогда
		
		Оператор = СоздатьЗапросБазыРаспределенияМетодСтоимостьРасходовНУ(
			СхемаЗапроса,
			БазаРаспределения,
			ЗапросБазыРаспределенияОсновногоПравила.Запрос,
			ЗапросБазыРаспределенияОсновногоПравила.Источник.Имя);
		
		Оператор.Отбор.Добавить("НЕ ПрямыеРасходы.ВидРасходовНУ В (&ЗапрещенныеВидыНУ)");
		БазаРаспределения.ПараметрыЗапроса.Вставить(
			"ЗапрещенныеВидыНУ", 
			РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ЗапрещенныеВидыРасходовНУ());
		
	Иначе
		
		ВнутренниеТаблицы = Новый Массив;
		
		// ВТ_АналитикаРасходовНУ хранит наборы полей,
		// которые далее будут протестированы на вхождение в перечень прямых расходов
		
		ПоляОграниченияПрямыхРасходов = Новый Массив;
		ПоляОграниченияПрямыхРасходов.Добавить("ВидРасходовНУ");
		ПоляОграниченияПрямыхРасходов.Добавить("Подразделение");
		ПоляОграниченияПрямыхРасходов.Добавить("Счет");
		ПоляОграниченияПрямыхРасходов.Добавить("КорСчет");
		ПоляОграниченияПрямыхРасходов.Добавить("СтатьяЗатрат");
		
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_АналитикаРасходовНУ";
		ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
		
		Оператор = ОписаниеЗапроса.Операторы[0];
		Оператор.Источники.Добавить(ЗапросБазыРаспределенияОсновногоПравила.Источник.Имя, "Расходы");
		Оператор.ВыбиратьРазличные = Истина;
		Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
			Оператор.ВыбираемыеПоля.Добавить(ИмяПоля);
			ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
		КонецЦикла;
		
		// ВТ_ПравилаОпределенияПрямыхРасходовНУ хранит настройку списка прямых расходов
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_ПравилаОпределенияПрямыхРасходовНУ";
		ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
		
		Оператор = ОписаниеЗапроса.Операторы[0];
		Оператор.Источники.Добавить("РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ", "Настройка");
		Оператор.ВыбиратьРазличные = Истина;
		Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
			Оператор.ВыбираемыеПоля.Добавить(ИмяПоля);
			ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
		КонецЦикла;
		
		Оператор.Отбор.Добавить("Настройка.Организация = &ГоловнаяОрганизация");
		Оператор.Отбор.Добавить("Настройка.ПериодДействия = &ПериодНастройкиПрямыхРасходов");
		
		БазаРаспределения.ПараметрыЗапроса.Вставить("ПериодНастройкиПрямыхРасходов", ПериодНастройкиПрямыхРасходов);
		
		// ВТ_ПрямыеРасходыНУ хранит наборы полей, соответствующие списку прямых расходов
		
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_ПрямыеРасходыНУ";
		ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
		
		// В таблице ВТ_ПравилаОпределенияПрямыхРасходовНУ используется подход
		// "незаполненное поле означает <все возможные значения>".
		// Для того, чтобы применить такие правила, в общем случае следует выполнить 2^N запросов,
		// где N - это число таких полей (колонок, которые могут быть не заполнены).
		// В данном случае - 16 запросов (поле ВидРасходовНУ обязательное, не может быть незаполненным).
		
		ПоляВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ПоляОграниченияПрямыхРасходов);
		ПоляВсеЗначения.Удалить(ПоляВсеЗначения.Найти("ВидРасходовНУ"));
		
		ПараметрыПустыеЗначения = Новый Структура;
		ИзмеренияРегистра = Метаданные.РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Измерения;
		Для Каждого ИмяПоля Из ПоляВсеЗначения Цикл
			ИмяПараметра = "ПустоеЗначение" + ИмяПоля;
			ПараметрыПустыеЗначения.Вставить(ИмяПоля, ИмяПараметра);
			БазаРаспределения.ПараметрыЗапроса.Вставить(
				ИмяПараметра,
				ИзмеренияРегистра[ИмяПоля].Тип.ПривестиЗначение(Неопределено));
		КонецЦикла;
		
		КоличествоПолей = ПоляВсеЗначения.Количество();
		Для Комбинация = 0 По Pow(2, КоличествоПолей) - 1 Цикл
			
			Для НомерДополнительногоЗапроса = ОписаниеЗапроса.Операторы.Количество() По Комбинация Цикл
				ОписаниеЗапроса.Операторы.Добавить();
			КонецЦикла;
			
			Оператор = ОписаниеЗапроса.Операторы[Комбинация];
			Оператор.ВыбиратьРазличные = Истина;
			Оператор.ТипОбъединения    = ТипОбъединенияСхемыЗапроса.Объединить;
			
			ИсточникРасходы   = Оператор.Источники.Добавить("ВТ_АналитикаРасходовНУ",                "Расходы");
			ИсточникНастройка = Оператор.Источники.Добавить("ВТ_ПравилаОпределенияПрямыхРасходовНУ", "Настройка");
			
			Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
				Оператор.ВыбираемыеПоля.Добавить("Расходы." + ИмяПоля);
				ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
			КонецЦикла;
			
			// Условия соединения
			УсловияСоединения = Новый Массив;
			УсловияСоединения.Добавить("Расходы.ВидРасходовНУ = Настройка.ВидРасходовНУ");
			
			ЗначенияПолей = РазложитьПоСтепенямДвойки(Комбинация, КоличествоПолей);
			Для ИндексПоля = 0 По КоличествоПолей - 1 Цикл
				ИмяПоля = ПоляВсеЗначения[ИндексПоля];
				Если ЗначенияПолей[ИндексПоля] Тогда
					УсловиеСоединения = СтрШаблон("Расходы.%1 = Настройка.%1", ИмяПоля);
				Иначе
					УсловиеСоединения = СтрШаблон("Настройка.%1 = &%2", ИмяПоля, ПараметрыПустыеЗначения[ИмяПоля]);
				КонецЕсли;
				УсловияСоединения.Добавить(УсловиеСоединения);
			КонецЦикла;
			
			ИсточникРасходы.Соединения.Добавить(ИсточникНастройка, СтрСоединить(УсловияСоединения, " И "));
			ИсточникРасходы.Соединения[ИсточникРасходы.Соединения.Количество() - 1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			
		КонецЦикла;
		
		// К косвенным относятся только те, у которых заполнен ВидРасходовНУ - см. ДобавитьПравилаПрямыеРасходыНалоговогоУчета
		// Поэтому здесь к прямым отнесем и все те, у которых не заполнен
		Оператор = ОписаниеЗапроса.Операторы.Добавить();
		Оператор.ВыбиратьРазличные = Истина;
		Оператор.ТипОбъединения    = ТипОбъединенияСхемыЗапроса.Объединить;
		Оператор.Источники.Добавить("ВТ_АналитикаРасходовНУ", "Расходы");
		Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
			Оператор.ВыбираемыеПоля.Добавить("Расходы." + ИмяПоля);
		КонецЦикла;
		Оператор.Отбор.Добавить("Расходы.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)");
		
		Оператор = СоздатьЗапросБазыРаспределенияМетодСтоимостьРасходовНУ(
			СхемаЗапроса,
			БазаРаспределения,
			ЗапросБазыРаспределенияОсновногоПравила.Запрос,
			ЗапросБазыРаспределенияОсновногоПравила.Источник.Имя);
		
		ИсточникРасходы = Оператор.Источники.НайтиПоИмени(ЗапросБазыРаспределенияОсновногоПравила.Источник.Имя);
		
		// ... ограничим аналитикой прямых расходов налогового учета
		ИсточникОтбор = Оператор.Источники.Добавить("ВТ_ПрямыеРасходыНУ", "ПрямыеРасходыНУ");
		Условия = Новый Массив;
		Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
			Условия.Добавить(СтрШаблон("%1.%2 = ПрямыеРасходыНУ.%2", ИсточникРасходы.Источник.Псевдоним, ИмяПоля));
		КонецЦикла;
		ИсточникРасходы.Соединения.Добавить(ИсточникОтбор, СтрСоединить(Условия, " И "));
		ИсточникРасходы.Соединения[ИсточникРасходы.Соединения.Количество() - 1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		// Уничтожим внутренние таблицы
		Для Каждого ИмяТаблицы Из ВнутренниеТаблицы Цикл
			ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
			ОписаниеЗапроса.ИмяТаблицы = ИмяТаблицы;
		КонецЦикла;
	КонецЕсли;

	// Удалим запросы основного пакета
	// Делаем это с конца, чтобы избежать автоматического удаления запросов
	Для НомерСКонца = 1 По РазмерОсновногоПакетаЗапросов Цикл
		СхемаЗапроса.ПакетЗапросов.Удалить(РазмерОсновногоПакетаЗапросов - НомерСКонца);
	КонецЦикла;
	
	БазаРаспределения.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат БазаРаспределения;
	
КонецФункции

Функция СоздатьЗапросБазыРаспределенияМетодСтоимостьРасходовНУ(СхемаЗапроса, БазаРаспределения, ЗапросБазыРаспределения, ИмяВременнойТаблицы)
	
	// База распределения в НУ подобна основной базе
	// Получаем ее запрос модификацией запроса базы основного правила.
	ИндексОригинала = СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросБазыРаспределения);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.ДобавитьКопию(ИндексОригинала);
	
	// Добавленный запрос следует поместить в конец пакета.
	СхемаЗапроса.ПакетЗапросов.Переместить(ОписаниеЗапроса, СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	
	ОписаниеЗапроса.ТаблицаДляПомещения = БазаРаспределения.Имя;
	Оператор = ОписаниеЗапроса.Операторы[0];
	
	ИсточникРасходы    = Оператор.Источники.НайтиПоИмени(ИмяВременнойТаблицы);
	ПсевдонимИсточника = ИсточникРасходы.Источник.Псевдоним;
	
	// ... заменим поле базы
	ТекстВыраженияПоляБазы = СтрШаблон("СУММА(%1.БазаНУ)", ПсевдонимИсточника);
	
	// .... в выбранных полях
	КолонкаБаза = ОписаниеЗапроса.Колонки.Найти("База");
	ПолеБазаСтрокой = Строка(КолонкаБаза.Поля[0]);
	Оператор.ВыбираемыеПоля[ОписаниеЗапроса.Колонки.Индекс(КолонкаБаза)] = Новый ВыражениеСхемыЗапроса(ТекстВыраженияПоляБазы);
	
	// .... в отборе
	КоличествоЭлементовОтбора = Оператор.Отбор.Количество();
	Для НомерСКонца = 1 По КоличествоЭлементовОтбора Цикл
		Индекс = КоличествоЭлементовОтбора - НомерСКонца;
		Если СтрНайти(Оператор.Отбор[Индекс], ПолеБазаСтрокой) <> 0 Тогда
			Оператор.Отбор.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Оператор.Отбор.Добавить(СтрШаблон("%1 > 0", ТекстВыраженияПоляБазы));
	
	// ... добавим очистку поля НалоговыйУчет
	Оператор.ВыбираемыеПоля.Добавить("ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка)");
	ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = "НалоговыйУчет";

	Возврат Оператор;
	
КонецФункции

Функция ЗапросБазыРаспределенияОсновногоПравила(СхемаЗапроса, ОсновноеПравило, ПакетыВременныхТаблиц)
	
	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросСозданияТаблицы(СхемаЗапроса, ОсновноеПравило.БазаРаспределения.Имя);
	Если ТочкаЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеЗапроса = ТочкаЗапроса.Запрос;
	
	Если ОписаниеЗапроса.Операторы.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Источники = ОписаниеЗапроса.Операторы[0].Источники;
	Если Источники.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеЗапроса.Колонки.Найти("База") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Источник = Источники[0].Источник; // Предположительно, временная таблица из пакета временных таблиц
	Если ТипЗнч(Источник) <> Тип("ТаблицаСхемыЗапроса") И ТипЗнч(Источник) <> Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросСозданияТаблицы(СхемаЗапроса, Источник.ИмяТаблицы);
	Если ТочкаЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсточникДанныхБазы = Неопределено;
	Для Каждого ПакетВременныхТаблиц Из ПакетыВременныхТаблиц Цикл
		Если ПакетВременныхТаблиц.Имя = Источник.ИмяТаблицы Тогда
			ИсточникДанныхБазы = ПакетВременныхТаблиц;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИсточникДанныхБазы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросОсновногоПравила = Новый Структура;
	ЗапросОсновногоПравила.Вставить("Запрос",   ОписаниеЗапроса);
	ЗапросОсновногоПравила.Вставить("Источник", ИсточникДанныхБазы);
	
	Возврат ЗапросОсновногоПравила;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеМетоды

Процедура ОтключитьВидыДеятельности(Правило, ЗапросВыбора, Процессор)
	
	Если Процессор.ПрименяемыеВидыДеятельности.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Правило.ПоляИсточника.Удалить("ВидДеятельности");
	
	Колонка = ЗапросВыбора.Колонки.Найти("ВидДеятельности");
	Если Колонка <> Неопределено Тогда
		ЗапросВыбора.Колонки.Удалить(ЗапросВыбора.Колонки.Индекс(Колонка));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПравилоСписатьРасходыТекущегоПериода(Правило, ФункциональноеИмя, СчетаРезультата = Неопределено)
	
	Если СчетаРезультата = Неопределено Тогда
		СчетаРезультата = ПредопределенныеСчетаФинансовогоРезультата(Перечисления.РолиСчетовЗатрат.УправленческиеРасходы);
	КонецЕсли;
	
	УстановитьПравилоРаспределения(Правило, ФункциональноеИмя, "РаспределитьНаСубконто");
	
	// Для разных видов деятельности разные счета приемника
	Правило.ПоляИсточника.Вставить("ВидДеятельности", "ВидДеятельности");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить(
		"СчетОсновнаяСистемаНалогообложения",
		СчетаРезультата.ВидыДеятельности[Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения]);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить(
		"СчетОсобыйПорядокНалогообложения",
		СчетаРезультата.ВидыДеятельности[Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения]);
	
	// Поля приемника представлены в виде субконто. В такой базе должны присутствовать все поля
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|	&ПустоеПодразделение КАК Подразделение,
	|	&СчетОсновнаяСистемаНалогообложения КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|	&ПустоеПодразделение,
	|	&СчетОсобыйПорядокНалогообложения,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	1";
	
	НастроитьТекстБазыРаспределения(Правило, ШаблонТекстаЗапроса);
	
КонецПроцедуры

Функция УникальноеПредставлениеСсылки(Ссылка)
	Возврат СтрЗаменить(XMLСтрока(Ссылка.УникальныйИдентификатор()), "-", "");
КонецФункции

Функция РазложитьПоСтепенямДвойки(Знач Число, Размер)
	
	Результат = Новый Массив(Размер);
	
	Для НомерПоля = 1 По Размер Цикл
		
		// Обходим с конца
		Индекс     = Размер - НомерПоля;
		Множитель  = Pow(2, Индекс);
		
		Результат[Индекс] = (Число >= Множитель);
		
		Число = Число % Множитель;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяРазрезАналитики(Правило, ИмяПоля)
	
	Возврат Правило.ОтборРасходов.Свойство(ИмяПоля) Или Правило.ПоляИсточника.Свойство(ИмяПоля);
	
КонецФункции

Функция ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, ИмяРазрезаРаспределения)
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не ИспользуетсяРазрезАналитики(Правило, ИмяРазрезаРаспределения) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Правило;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйПараметрыРаспределенияСобственнаяБаза()
	
	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("СчетаУчета", Новый Массив); // Счета учета, используемые в базе распределения
	ПараметрыРаспределения.Вставить("ТекстЗапросаТаблицыКоэффициентов", "");
	ПараметрыРаспределения.Вставить("ИмяВременнойТаблицыКоэффициентов", "");
	ПараметрыРаспределения.Вставить("ИменаЭтаповРаспределения", Новый Соответствие);
	
	Возврат ПараметрыРаспределения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДополнениеТекстовЗапросов

Процедура УстановитьИмяБазыРаспределения(Правило, ШаблонТекстаЗапроса)
	
	Если Не ПустаяСтрока(Правило.БазаРаспределения.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыХеша = Новый Массив;
	ЭлементыХеша.Добавить(ШаблонТекстаЗапроса);
	ЭлементыХеша.Добавить(Правило.БазаРаспределения.ПараметрыЗапроса);
	ХешЗапроса = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЭлементыХеша);
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить("БазаРаспределения");
	ЭлементыИмени.Добавить(Правило.ФункциональноеИмя);
	ЭлементыИмени.Добавить(ХешЗапроса);
	
	Правило.БазаРаспределения.Имя = СтрСоединить(ЭлементыИмени, "_");
	
КонецПроцедуры

Процедура НастроитьАгрегатноеПолеБазыРаспределения(Правило, СозданиеТаблицы)
	
	ПустоеВыражениеБаза = Новый ВыражениеСхемыЗапроса("1"); // Распределяем на все записи базы равномерно
	КолонкаБаза = СхемыЗапросов.УстановитьВыражение(СозданиеТаблицы, "База", ПустоеВыражениеБаза, Ложь);
	
	СхемыЗапросов.УстановитьАгрегатнуюФункцию(СозданиеТаблицы, КолонкаБаза, "СУММА");
		
	Для Каждого Оператор Из СозданиеТаблицы.Запрос.Операторы Цикл
		
		ИндексОператора = СозданиеТаблицы.Запрос.Операторы.Индекс(Оператор);
		ВыражениеБаза = КолонкаБаза.Поля[ИндексОператора];
		
		// Установим отбор на значения коэффициентов
		ВыражениеОтбора = СтрШаблон("%1 > 0", ВыражениеБаза);
		Если Оператор.Отбор.Найти(ВыражениеОтбора) = Неопределено Тогда
			Оператор.Отбор.Добавить(ВыражениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьСубконтоБазыРаспределения(ЗапросБазыРаспределения, ПараметрыЗапроса, СчетРезультата, АналитикаРаспределения)
	
	// Используем счет в запросе базы распределения
	ПараметрыЗапроса.Вставить("СчетРезультата", СчетРезультата);
	СхемыЗапросов.УстановитьВыражение(ЗапросБазыРаспределения, "Счет", СтрШаблон("&%1", "СчетРезультата"));
	
	// Из счета берем состав аналитики
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРезультата);
	
	АналитикаСчета      = БухгалтерскийУчет.АналитикаСчета(СвойстваСчета);
	ЗначенияПоУмолчанию = БухгалтерскийУчет.ЗначенияПоУмолчаниюАналитикиСчета(АналитикаСчета, СвойстваСчета);
	
	Если Не ЗначениеЗаполнено(АналитикаСчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем тексты полей аналитики и параметры для них
	Для Каждого ОписаниеАналитики Из АналитикаСчета Цикл
		
		ИмяЗначенияПоУмолчанию = СтрШаблон("ЗначениеПоУмолчанию%1", ОписаниеАналитики.Значение);
		ВыражениеПоУмолчанию   = СтрШаблон("&%1", ИмяЗначенияПоУмолчанию);
		ПараметрыЗапроса.Вставить(ИмяЗначенияПоУмолчанию, ЗначенияПоУмолчанию[ОписаниеАналитики.Ключ]);
		
		ПолеИсточника = АналитикаРаспределения[ОписаниеАналитики.Ключ];
		Если ПолеИсточника = Неопределено // Поле не используется для распределения
			Или ЗапросБазыРаспределения.Таблица.ДоступныеПоля.Найти(ПолеИсточника.Имя) = Неопределено Тогда // В базе нет подходящих данных
			Выражение = ВыражениеПоУмолчанию;
		Иначе
			Выражение = СхемыЗапросов.ВыражениеПриведениеТипа(
				СтрШаблон("%1.%2", ЗапросБазыРаспределения.Таблица.Псевдоним, ПолеИсточника.Имя),
				ПолеИсточника.ТипЗначения,
				ВыражениеПоУмолчанию);
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеАналитики.Ключ) = Тип("Строка") Тогда
			ИмяПоляСубконто = ОписаниеАналитики.Значение;
		Иначе
			ИмяПоляСубконто = СтрШаблон("Субконто%1", ОписаниеАналитики.Значение);
		КонецЕсли;
		
		СхемыЗапросов.УстановитьВыражение(ЗапросБазыРаспределения, ИмяПоляСубконто, Выражение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПолеЗапросаБазыРаспределения(Правило, ИмяПоля)
	
	ТочкаЗапроса = СхемыЗапросов.НайтиЗапросСозданияТаблицы(
		Правило.БазаРаспределения.ТекстЗапроса,
		Правило.БазаРаспределения.Имя);
	Если ТочкаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Колонка = ТочкаЗапроса.Запрос.Колонки.Найти(ИмяПоля);
	Если Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексКолонки = ТочкаЗапроса.Запрос.Колонки.Индекс(Колонка);
	ТочкаЗапроса.Запрос.Колонки.Удалить(ИндексКолонки);
	
	// Так как меняется текст запроса, то меняем и имя таблицы
	Правило.БазаРаспределения.Имя = "";
	ТочкаЗапроса.Запрос.ТаблицаДляПомещения = "";
	
	НастроитьТекстБазыРаспределения(Правило, ТочкаЗапроса);
	
КонецПроцедуры

Функция НовыйОписаниеПакетаВременныхТаблиц()
	
	Описание = Новый Структура;
	
	Описание.Вставить("Имя",              "");
	Описание.Вставить("ТекстЗапроса",     "");
	Описание.Вставить("ПараметрыЗапроса", Новый Структура);
	
	Возврат Описание;
	
КонецФункции

Процедура УстановитьОтборРасходовНеЗаполнено(Правило, ИмяПоля, Процессор)
	
	ОписаниеПоля = Процессор.РазрезыРаспределения.Найти(ИмяПоля, "Имя");
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило.ОтборРасходов.Вставить(ИмяПоля, ОписаниеПоля.ЗначениеПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеДействияНадПравиламиРаспределения

Процедура ОбеспечитьУникальныеИменаПравил(ПравилаРаспределения)
	
	// Удалим служебный символ #
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если СтрНайти(Правило.Имя, "#") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Правило.Имя = СтрЗаменить(Правило.Имя, "#", "");
		
	КонецЦикла;
	
	// Сначала к имени правила с отбором по счету добавим номер (код) счета
	ИспользуемыеСчетаУчета               = Новый Массив;
	ПравилаУстановленОтборРавенствоСчета = Новый Массив;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не УстановленОтборРавенствоСчета(Правило.ОтборРасходов) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилаУстановленОтборРавенствоСчета.Добавить(Правило);
		ИспользуемыеСчетаУчета.Добавить(Правило.ОтборРасходов.Счет);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПравилаУстановленОтборРавенствоСчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИспользуемыеСчетаУчета", ИспользуемыеСчетаУчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Код КАК Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&ИспользуемыеСчетаУчета)";
		
		ИспользуемыеСчетаУчета = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИспользуемыеСчетаУчета.Вставить(Выборка.Ссылка, Выборка.Код);
		КонецЦикла;
		
		Для Каждого Правило Из ПравилаУстановленОтборРавенствоСчета Цикл
			КодСчета = ИспользуемыеСчетаУчета[Правило.ОтборРасходов.Счет];
			Если КодСчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Правило.Имя = Правило.Имя + "." + КодСчета;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если в результате остались правила с одинаковым именем, то устраним этот недостаток.
	ИндексИмен = Новый Соответствие;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если ИндексИмен[Правило.Имя] = Неопределено Тогда
			ИндексИмен.Вставить(Правило.Имя, Истина);
			Продолжить;
		КонецЕсли;
		
		// Дублирующееся имя. Дополним его индексом строки с разделителем "#"
		НовоеИмяПравила = Правило.Имя + "#" + XMLСтрока(ПравилаРаспределения.Индекс(Правило));
		
		Правило.Имя = НовоеИмяПравила;
		Если Правило.Имя <> НовоеИмяПравила Тогда
			
			// Имя получилось слишком длинным. Сократим
			КоличествоЛишнихСимволов = СтрДлина(НовоеИмяПравила) - СтрДлина(Правило.Имя);
			ПозицияКлючаУникальности = СтрНайти(НовоеИмяПравила, "#");
			Правило.Имя = Лев(НовоеИмяПравила, ПозицияКлючаУникальности - КоличествоЛишнихСимволов - 1)
				+ Сред(НовоеИмяПравила, ПозицияКлючаУникальности);
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция УстановленОтборРавенствоСчета(ОтборРасходов)
	
	Если Не ОтборРасходов.Свойство("Счет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(ОтборРасходов.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный");

КонецФункции

#КонецОбласти

#Область ОбщиеВременныеТаблицы

Функция ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(ОписаниеБазы)
	
	// Описание содержит временную таблицу ВыпускПродукцииУслуг, а также временную таблицу РезультатПроизводства,
	// полученную из ВыпускПродукцииУслуг суммированием по аналитикам Счет, Подразделение, НоменклатурнаяГруппа, Продукция.
	// Таблица ВыпускПродукцияУслуг содержит данные не только о выпущенной продукции, но и о той продукции,
	// выпуск которой произойдет в будущем (о незавершенном производстве). Хотя фактически таблица ВыпускПродукцииУслуг тоже является
	// своего рода показателем РезультатаПроизводства, для нее используется исторически сложившееся имя, поскольку с большой долей
	// вероятности эта таблица могла быть использована при кастомизации программы.
	
	// Выпуск продукции - это всегда ОсновнаяСистемаНалогообложения
	
	ПакетВременныхТаблиц = ДобавитьПакетВременныхТаблиц(ОписаниеБазы, "ВыпускПродукцииУслуг");

	ТипЦен = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ПакетВременныхТаблиц.ПараметрыЗапроса.Вставить("ТипЦен", ТипЦен);
	
	ПакетВременныхТаблиц.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
	|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслугОбороты.СчетСписания КАК СчетСписания,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК СубконтоСписания1,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК СубконтоСписания2,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК СубконтоСписания3,
	|	ВыпускПродукцииУслугОбороты.ПрямыеРасходыРаспределятьПоКоличеству КАК ПрямыеРасходыРаспределятьПоКоличеству,
	|	ВыпускПродукцииУслугОбороты.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоВыпуск,
	|	0 КАК КоличествоНезавершенноеПроизводство,
	|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоЭквивалентныеЕдиницы,
	|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот
	|ПОМЕСТИТЬ ВТ_ДанныеВыпуска
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставИнвентаризации.Продукция КАК Продукция,
	|	СоставИнвентаризации.Ссылка.СчетЗатрат КАК Счет,
	|	СоставИнвентаризации.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	СоставИнвентаризации.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(СоставИнвентаризации.Количество) КАК КоличествоНезавершенноеПроизводство,
	|	СУММА(ВЫБОР
	|			КОГДА СоставИнвентаризации.Ссылка.СтепеньГотовностиУказанаВШапке
	|				ТОГДА СоставИнвентаризации.Ссылка.СтепеньГотовности / 100
	|			ИНАЧЕ СоставИнвентаризации.СтепеньГотовности / 100
	|		КОНЕЦ * СоставИнвентаризации.Количество) КАК КоличествоЭквивалентныеЕдиницы
	|ПОМЕСТИТЬ ВТ_СоставИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.СоставПоПродукции КАК СоставИнвентаризации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаНезавершенноеПроизводствоПоПродукции КАК СчетаНЗП
	|		ПО СоставИнвентаризации.Ссылка.СчетЗатрат = СчетаНЗП.Счет
	|ГДЕ
	|	СоставИнвентаризации.Ссылка.Организация = &Организация
	|	И СоставИнвентаризации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СоставИнвентаризации.Ссылка.Проведен
	|	И СоставИнвентаризации.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИнвентаризацияНЗП.КоличественнаяОценка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставИнвентаризации.НоменклатурнаяГруппа,
	|	СоставИнвентаризации.Продукция,
	|	СоставИнвентаризации.Ссылка.СчетЗатрат,
	|	СоставИнвентаризации.Ссылка.ПодразделениеОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_СведенияОЦенах
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&КонецПериода,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ИнвентаризацияПоПродукции.Продукция КАК Номенклатура
	|					ИЗ
	|						ВТ_СоставИнвентаризации КАК ИнвентаризацияПоПродукции)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалюты
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&КонецПериода,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ЦеныНоменклатуры.Валюта
	|				ИЗ
	|					ВТ_СведенияОЦенах КАК ЦеныНоменклатуры)) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВыпуска.СчетЗатрат КАК СчетЗатрат,
	|	ДанныеВыпуска.Подразделение КАК Подразделение,
	|	ДанныеВыпуска.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДанныеВыпуска.Продукция КАК Продукция,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеВыпуска.КоличествоВыпуск) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеВыпуска.ПлановаяСтоимостьОборот) / СУММА(ДанныеВыпуска.КоличествоВыпуск)
	|	КОНЕЦ КАК ПлановаяСтоимостьВыпуска
	|ПОМЕСТИТЬ ВТ_ЦеныВыпуска
	|ИЗ
	|	ВТ_ДанныеВыпуска КАК ДанныеВыпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставИнвентаризации КАК СоставИнвентаризации
	|		ПО ДанныеВыпуска.СчетЗатрат = СоставИнвентаризации.Счет
	|			И ДанныеВыпуска.Подразделение = СоставИнвентаризации.Подразделение
	|			И ДанныеВыпуска.НоменклатурнаяГруппа = СоставИнвентаризации.НоменклатурнаяГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВыпуска.Продукция,
	|	ДанныеВыпуска.СчетЗатрат,
	|	ДанныеВыпуска.Подразделение,
	|	ДанныеВыпуска.НоменклатурнаяГруппа
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеВыпуска.КоличествоВыпуск) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеВыпуска.ПлановаяСтоимостьОборот) / СУММА(ДанныеВыпуска.КоличествоВыпуск)
	|	КОНЕЦ <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставИнвентаризации.Продукция КАК Продукция,
	|	СоставИнвентаризации.Счет КАК Счет,
	|	СоставИнвентаризации.Подразделение КАК Подразделение,
	|	СоставИнвентаризации.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СоставИнвентаризации.КоличествоНезавершенноеПроизводство КАК КоличествоНезавершенноеПроизводство,
	|	СоставИнвентаризации.КоличествоЭквивалентныеЕдиницы КАК КоличествоЭквивалентныеЕдиницы,
	|	ВЫБОР
	|		КОГДА НЕ ПлановыеЦеныВыпуска.ПлановаяСтоимостьВыпуска ЕСТЬ NULL
	|			ТОГДА ПлановыеЦеныВыпуска.ПлановаяСтоимостьВыпуска
	|		КОГДА КурсыВалюты.Курс ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(СведенияОЦенах.Цена, 0) * КурсыВалюты.Курс / КурсыВалюты.Кратность
	|	КОНЕЦ * СоставИнвентаризации.КоличествоЭквивалентныеЕдиницы КАК ПлановаяСтоимость
	|ПОМЕСТИТЬ ВТ_ИнвентаризацияПоПродукции
	|ИЗ
	|	ВТ_СоставИнвентаризации КАК СоставИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныВыпуска КАК ПлановыеЦеныВыпуска
	|		ПО СоставИнвентаризации.Подразделение = ПлановыеЦеныВыпуска.Подразделение
	|			И СоставИнвентаризации.Счет = ПлановыеЦеныВыпуска.СчетЗатрат
	|			И СоставИнвентаризации.НоменклатурнаяГруппа = ПлановыеЦеныВыпуска.НоменклатурнаяГруппа
	|			И СоставИнвентаризации.Продукция = ПлановыеЦеныВыпуска.Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОЦенах КАК СведенияОЦенах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыВалюты КАК КурсыВалюты
	|			ПО СведенияОЦенах.Валюта = КурсыВалюты.Валюта
	|		ПО СоставИнвентаризации.Продукция = СведенияОЦенах.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
	|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслугОбороты.СчетСписания КАК СчетСписания,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК СубконтоСписания1,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК СубконтоСписания2,
	|	ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК СубконтоСписания3,
	|	ВыпускПродукцииУслугОбороты.ПрямыеРасходыРаспределятьПоКоличеству КАК ПрямыеРасходыРаспределятьПоКоличеству,
	|	ВыпускПродукцииУслугОбороты.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслугОбороты.КоличествоВыпуск КАК КоличествоВыпуск,
	|	0 КАК КоличествоНезавершенноеПроизводство,
	|	ВыпускПродукцииУслугОбороты.КоличествоВыпуск КАК КоличествоЭквивалентныеЕдиницы,
	|	0 КАК КоличествоЭквивалентныеЕдиницыНЗП,
	|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимость,
	|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьЭквивалентныеЕдиницы,
	|	ЛОЖЬ КАК НезавершенноеПроизводство
	|ПОМЕСТИТЬ ВТ_РезультатПроизводства
	|ИЗ
	|	ВТ_ДанныеВыпуска КАК ВыпускПродукцииУслугОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставИнвентаризации.Продукция,
	|	СоставИнвентаризации.Счет,
	|	СоставИнвентаризации.Подразделение,
	|	СоставИнвентаризации.НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	СоставИнвентаризации.Подразделение,
	|	0,
	|	СоставИнвентаризации.КоличествоНезавершенноеПроизводство,
	|	СоставИнвентаризации.КоличествоЭквивалентныеЕдиницы,
	|	СоставИнвентаризации.КоличествоЭквивалентныеЕдиницы,
	|	0,
	|	СоставИнвентаризации.ПлановаяСтоимость,
	|	ИСТИНА
	|ИЗ
	|	ВТ_ИнвентаризацияПоПродукции КАК СоставИнвентаризации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПроизводства.СчетЗатрат КАК СчетИсточник,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА РезультатПроизводства.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеИсточник,
	|	РезультатПроизводства.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РезультатПроизводства.Продукция КАК Продукция,
	|	РезультатПроизводства.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаИсточник,
	|	РезультатПроизводства.Продукция КАК ПродукцияИсточник,
	|	РезультатПроизводства.СчетСписания КАК Счет,
	|	РезультатПроизводства.ПодразделениеСписания КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания1
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания2
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания3
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ РезультатПроизводства.Продукция
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(РезультатПроизводства.ПлановаяСтоимость) КАК ПлановаяСтоимость,
	|	СУММА(РезультатПроизводства.ПлановаяСтоимостьЭквивалентныеЕдиницы) КАК ПлановаяСтоимостьЭквивалентныеЕдиницы,
	|	СУММА(РезультатПроизводства.КоличествоВыпуск) КАК Количество,
	|	СУММА(РезультатПроизводства.КоличествоНезавершенноеПроизводство) КАК КоличествоНезавершенноеПроизводство,
	|	СУММА(РезультатПроизводства.КоличествоЭквивалентныеЕдиницы) КАК КоличествоЭквивалентныеЕдиницы,
	|	СУММА(РезультатПроизводства.КоличествоЭквивалентныеЕдиницыНЗП) КАК КоличествоЭквивалентныеЕдиницыНЗП,
	|	РезультатПроизводства.НезавершенноеПроизводство КАК НезавершенноеПроизводство,
	|	НЕ РезультатПроизводства.ПрямыеРасходыРаспределятьПоКоличеству КАК РазрешеноИспользоватьПлановуюСтоимость
	|ПОМЕСТИТЬ ВыпускПродукцииУслуг
	|ИЗ
	|	ВТ_РезультатПроизводства КАК РезультатПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО РезультатПроизводства.СчетСписания = СчетаЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО РезультатПроизводства.СчетСписания = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО РезультатПроизводства.СчетСписания = СчетаДоходовИРасходовЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО РезультатПроизводства.СчетСписания = СубконтоЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО РезультатПроизводства.СчетЗатрат = Хозрасчетный.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатПроизводства.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА РезультатПроизводства.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ,
	|	РезультатПроизводства.НоменклатурнаяГруппа,
	|	РезультатПроизводства.Продукция,
	|	РезультатПроизводства.СчетСписания,
	|	РезультатПроизводства.ПодразделениеСписания,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания1
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания2
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА РезультатПроизводства.СубконтоСписания3
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РезультатПроизводства.СубконтоСписания3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(РезультатПроизводства.СубконтоСписания3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ РезультатПроизводства.Продукция
	|	КОНЕЦ,
	|	НЕ РезультатПроизводства.ПрямыеРасходыРаспределятьПоКоличеству,
	|	РезультатПроизводства.НезавершенноеПроизводство,
	|	РезультатПроизводства.НоменклатурнаяГруппа,
	|	РезультатПроизводства.Продукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник,
	|	ПодразделениеИсточник,
	|	НоменклатурнаяГруппаИсточник,
	|	ПродукцияИсточник,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетИсточник КАК СчетИсточник,
	|	ВыпускПродукцииУслуг.ПодразделениеИсточник КАК ПодразделениеИсточник,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция КАК Продукция,
	|	СУММА(ВыпускПродукцииУслуг.Количество) КАК Количество,
	|	СУММА(ВыпускПродукцииУслуг.КоличествоНезавершенноеПроизводство) КАК КоличествоНезавершенноеПроизводство,
	|	СУММА(ВыпускПродукцииУслуг.КоличествоЭквивалентныеЕдиницы) КАК КоличествоЭквивалентныеЕдиницы,
	|	СУММА(ВыпускПродукцииУслуг.КоличествоЭквивалентныеЕдиницыНЗП) КАК КоличествоЭквивалентныеЕдиницыНЗП
	|ПОМЕСТИТЬ РезультатПроизводства
	|ИЗ
	|	ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетИсточник,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.ПодразделениеИсточник,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник,
	|	ПодразделениеИсточник,
	|	НоменклатурнаяГруппа,
	|	Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СоставИнвентаризации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СведенияОЦенах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КурсыВалюты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЦеныВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИнвентаризацияПоПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РезультатПроизводства";
	
	Возврат ПакетВременныхТаблиц;
	
КонецФункции

Функция ДобавитьОписаниеВременнойТаблицыСтоимостьРасходов(ОписаниеБазы, МетодРасчета, ОтборБазы)
	
	// Пакет описывает источник данных для баз распределения, основанных на величине затрат.
	
	// Для каждого уникального набора коэффициентов должен быть уникальный пакет (с уникальным именем)
	ЭлементыИмениТаблицы = Новый Массив;
	ЭлементыИмениТаблицы.Добавить("СтоимостьРасходов");
	ЭлементыИмениТаблицы.Добавить(ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета));
	Если ТипЗнч(ОтборБазы) = Тип("Массив") Тогда
		// Отбор определяет значения коэфициентов базы
		ЭлементыИмениТаблицы.Добавить(ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ОтборБазы));
	КонецЕсли;
	
	ИмяТаблицы = СтрСоединить(ЭлементыИмениТаблицы, "_");
	ОписаниеВременныхТаблиц = ДобавитьПакетВременныхТаблиц(ОписаниеБазы, ИмяТаблицы);
	
	// Используется одинаковый запрос (см. ниже)
	// Особенности каждого метода:
	ВидРасходов     = Перечисления.БазыРаспределенияКосвенныхРасходов.ВидРасходовОтборЗатрат(МетодРасчета);
	СтатьиЗатрат    = Неопределено;
	ВсеСтатьиЗатрат = Ложь;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		СтатьиЗатрат = ОтборБазы;
	ИначеЕсли Не ЗначениеЗаполнено(ВидРасходов) Тогда
		// Все прямые расходы
		ВсеСтатьиЗатрат = Истина;
	КонецЕсли;
	
	// Общее для всех методов
	ОписаниеВременныхТаблиц.ПараметрыЗапроса.Вставить("ВидРасходов",     ВидРасходов);
	ОписаниеВременныхТаблиц.ПараметрыЗапроса.Вставить("СтатьиЗатрат",    СтатьиЗатрат);
	ОписаниеВременныхТаблиц.ПараметрыЗапроса.Вставить("ВсеСтатьиЗатрат", ВсеСтатьиЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ОписаниеВременныхТаблиц.ПараметрыЗапроса.Вставить("ВидыСубконто", ВидыСубконто);
	
	// В отличие от большинства других правил, это правило для расчета базы использует "внешние данные" - 
	// временную таблицу Поступления, которая записана в менеджер временных таблиц 
	// до создания схемы распределения.
	// Потому что для этой базы нужны данные о расходах "извне" с детализацией до корсчета,
	// получать их ресурсоемко и мы их уже получили.
	//
	// Это правило предполагает, что в бухгалтерском и налоговом учете может использоваться разные базы распределения.
	// Поэтому поместим сразу во временные таблицы и данные налогового учета.
	// Создаваемая таблица используется также в ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ()
	//
	// Таблица содержит не только данные базы, но и данные для идентификации прямых расходов налогового учета
	// (например, СтатьяЗатрат)
	//
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.Ссылка В(&СтатьиЗатрат)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = &ВидРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Продукция,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРемонтовОС)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРемонтовОС)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРемонтовОС)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.ВидыРемонтовОС), ЗНАЧЕНИЕ(Справочник.ВидыРемонтовОС.ПустаяСсылка)) КАК ВидРемонтаОС,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.ОсновныеСредства), ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК ОсновноеСредство,
	|	Расходы.КорСчет КАК КорСчет,
	|	Расходы.Сумма КАК База,
	|	Расходы.СуммаНУ КАК БазаНУ,
	|	0 КАК БазаНачальноеСальдо,
	|	0 КАК БазаНачальноеСальдоНУ
	|ПОМЕСТИТЬ ВТ_ПрямыеРасходы
	|ИЗ
	|	Поступления КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО Расходы.Счет = КалькуляционныеСчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Расходы.Счет = СубконтоЗатрат.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЗНАЧЕНИЕ(Справочник.ВидыРемонтовОС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	0,
	|	0,
	|	Расходы.Сумма,
	|	Расходы.СуммаНУ
	|ИЗ
	|	НачальноеСальдоПрямыхРасходов КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО Расходы.Счет = КалькуляционныеСчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Расходы.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	Расходы.НезавершенноеПроизводствоПоПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ПрямыеРасходы.Продукция КАК Продукция,
	|	ПрямыеРасходы.ВидРемонтаОС КАК ВидРемонтаОС,
	|	ПрямыеРасходы.ОсновноеСредство КАК ОсновноеСредство,
	|	ПрямыеРасходы.КорСчет КАК КорСчет,
	|	ЕСТЬNULL(ПрямыеРасходы.СтатьяЗатрат.ВидРасходовНУ, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)) КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		ИНАЧЕ ЕСТЬNULL(ПрямыеРасходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|	КОНЕЦ КАК ВидДеятельности,
	|	СУММА(ПрямыеРасходы.База) КАК База,
	|	СУММА(ПрямыеРасходы.БазаНУ) КАК БазаНУ,
	|	СУММА(ПрямыеРасходы.БазаНачальноеСальдо) КАК БазаНачальноеСальдо,
	|	СУММА(ПрямыеРасходы.БазаНачальноеСальдоНУ) КАК БазаНачальноеСальдоНУ
	|ПОМЕСТИТЬ ИмяПакетаВременныхТаблиц
	|ИЗ
	|	ВТ_ПрямыеРасходы КАК ПрямыеРасходы
	|ГДЕ
	|	(&ВсеСтатьиЗатрат
	|			ИЛИ ПрямыеРасходы.СтатьяЗатрат В
	|				(ВЫБРАТЬ
	|					СтатьиЗатрат.СтатьяЗатрат
	|				ИЗ
	|					ВТ_СтатьиЗатрат КАК СтатьиЗатрат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрямыеРасходы.КорСчет,
	|	ПрямыеРасходы.Подразделение,
	|	ПрямыеРасходы.Счет,
	|	ПрямыеРасходы.Продукция,
	|	ПрямыеРасходы.СтатьяЗатрат,
	|	ПрямыеРасходы.НоменклатурнаяГруппа,
	|	ПрямыеРасходы.ВидРемонтаОС,
	|	ПрямыеРасходы.ОсновноеСредство,
	|	ЕСТЬNULL(ПрямыеРасходы.СтатьяЗатрат.ВидРасходовНУ, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		ИНАЧЕ ЕСТЬNULL(ПрямыеРасходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	ВидДеятельности,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПрямыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатрат";
	
	ОписаниеВременныхТаблиц.ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"ИмяПакетаВременныхТаблиц",
		ОписаниеВременныхТаблиц.Имя);
		
	Возврат ОписаниеВременныхТаблиц;
	
КонецФункции

Функция ДобавитьОписаниеВременнойТаблицыВыручкаОтРеализацииУслуг(ОписаниеБазы)
	
	ОписаниеВременныхТаблиц = ДобавитьПакетВременныхТаблиц(ОписаниеБазы, "ВыручкаОтРеализацииУслуг");
	ОписаниеВременныхТаблиц.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА ОсобыйПорядокНалогообложения.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РеализацияУслуг.Услуга КАК Услуга,
	|	СУММА(РеализацияУслуг.СуммаОборот) КАК База
	|ПОМЕСТИТЬ ВыручкаОтРеализацииУслуг
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетРасходов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК РеализацияУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК ОсобыйПорядокНалогообложения
	|		ПО РеализацияУслуг.СчетРасходов = ОсобыйПорядокНалогообложения.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА ОсобыйПорядокНалогообложения.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	РеализацияУслуг.НоменклатурнаяГруппа,
	|	РеализацияУслуг.Услуга
	|
	|ИМЕЮЩИЕ
	|	СУММА(РеализацияУслуг.СуммаОборот) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности";
	
	Возврат ОписаниеВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область ФиксированныеИмена

Функция ИмяБазыРаспределенияСтоимостьРасходов(Правило, ИмяИсточникаДанных)
	
	Возврат СтрШаблон(
		"БазаРаспределения_%1_%2",
		Правило.ФункциональноеИмя,
		ИмяИсточникаДанных);
	
КонецФункции
	
Функция ИмяЭтапаПрямыеРасходы()

	Возврат "ВыпускПрямыеРасходы";

КонецФункции

#КонецОбласти

#КонецОбласти
