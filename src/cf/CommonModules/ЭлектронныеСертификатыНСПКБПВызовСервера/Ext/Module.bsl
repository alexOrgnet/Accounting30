#Область ПрограммныйИнтерфейс

// Возвращает общие параметры подключения к сервису НСПК.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам АдресСервисаНСПК, КлючДоступаНСПК.
//
Функция ОбщиеПараметрыПодключенияНСПК() Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = Новый Структура();
	ОбщиеПараметрыПодключенияНСПК.Вставить("АдресСервисаНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК");
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры операции НСПК по кассе.
//
// Параметры:
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - Экв. терминал по которому проходит взаимодействие с НСПК
//  ИдентификаторКорзины - Строка - идентификатор корзины для операции возврата;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции.
//
// Возвращаемое значение:
//  Структура - ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК().
//
Функция ПараметрыОперацииНСПКПоКассеККМ(ОснованиеФискальнойОперации, ПодключаемоеОборудование, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = ОбщиеПараметрыПодключенияНСПК();
	ПараметрыПодключенияКассыНСПК = ПараметрыПодключенияКассыНСПК(ПодключаемоеОборудование);
	ПараметрыПодключенияОрганизацииНСПК = ПараметрыПодключенияОрганизацииНСПК(ОБщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "Организация"));
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК();
	ПараметрыОперации.АдресСервера = ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК;
	ПараметрыОперации.КлючДоступа = ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК;
	ПараметрыОперации.КлючКассы = ПараметрыПодключенияКассыНСПК.КлючКассыНСПК;
	ПараметрыОперации.ИдентификаторКассы = ПараметрыПодключенияКассыНСПК.ИдентификаторНСПК;
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзины;
	ПараметрыОперации.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыОперации.ОснованиеФискальнойОперации = ОснованиеФискальнойОперации;
	
	Возврат ПараметрыОперации;
КонецФункции

// Возвращает параметры подключения кассы к сервису НСПК.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам ИдентификаторНСПК, КлючКассыНСПК.
//
Функция ПараметрыПодключенияКассыНСПК(КассаККМ) Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = Новый Структура();
	ОбщиеПараметрыПодключенияНСПК.Вставить("ИдентификаторНСПК", "");
	ОбщиеПараметрыПодключенияНСПК.Вставить("КлючКассыНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьЗначенияСвойств(ОбщиеПараметрыПодключенияНСПК,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КассаККМ, "ИдентификаторНСПК, КлючКассыНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры подключения организации к сервису НСПК.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам КлючОрганизацииНСПК.
//
Функция ПараметрыПодключенияОрганизацииНСПК(Организация) Экспорт
	
	ПараметрыПодключенияОрганизацииНСПК = Новый Структура();
	ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК",
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "КлючОрганизацииНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПодключенияОрганизацииНСПК;
КонецФункции

// Возвращает результат передачи подтверждения операции ЭС НСПК.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК.
//
// Возвращаемое значение:
//  СуммаСертификатамиНСПК - Число - сумма, оплаченная сертификатом.
//
Функция СуммаСертификатамиНСПК(ЧекККМ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Оплата.Сумма), 0) КАК СуммаСертификатамиНСПК
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК Оплата
	|ГДЕ
	|	Оплата.Ссылка = &ЧекККМ
	|	И Оплата.ИдентификаторКорзины <> """"");
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СуммаСертификатамиНСПК = 0;
	Если Результат.Количество()>0 Тогда
		СуммаСертификатамиНСПК = Результат[0].СуммаСертификатамиНСПК;
	КонецЕсли;
	
	Возврат СуммаСертификатамиНСПК;
КонецФункции

// Возвращает предварительный список товаров, которые можно оплатить сертификатом
// в процессе выполнения получаются данные необходимые для печати чека, которые возвращаются
// через параметр  АдресХранилищаПараметрыПечатиЧека
//
// Параметры:
//  <ДокументСсылка>  - <ДокументСсылка> - документ по которому будет 
//                 печататься чек содержащий социально значимые товары
//  <АдресХранилищаПараметрыПечатиЧека>  - <Строка> - переменная куда будет
//                 записан адрес хранилища с данными для печати чека. Эти данные можно потом передать
//                  в процедуру ПечатьФискальныхДокументов.СобратьДанныеЧеков() для подготовки чека к печати
//  <ИдентификаторФормы>  - <УникальныйИдентификатор> - идентификатор формы из которой печатается чек
//  <СообщениеОбОшибке>   - <Строка> - сообщение об ошибке в процессе подготовки параметров печати чека
//
// Возвращаемое значение:
//   <Массив>   - Массив структур товарных позиций
//         см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции
//
Функция СписокТоваровОплатаСертификатом(ДокументСсылка, АдресХранилищаПараметрыПечатиЧека, ИдентификаторФормы, СообщениеОбОшибке) Экспорт
	СписокТоваровОплатаСертификатом = Новый Массив;
	
	ПараметрыПечатиЧека = ПечатьФискальныхДокументов.ПодготовитьПараметрыПечатиЧека(ДокументСсылка, Новый Структура(), СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат СписокТоваровОплатаСертификатом;
	КонецЕсли; 
	
	АдресХранилищаПараметрыПечатиЧека = ПоместитьВоВременноеХранилище(ПараметрыПечатиЧека, ИдентификаторФормы);
	
	Для каждого СтрокаЧека Из ПараметрыПечатиЧека.ОплачиваемаяНоменклатура Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЧека.КодВидаТРУ) Тогда
			Продолжить;
		КонецЕсли; 
		
		ТоварнаяПозиция = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции();
		
		ТоварнаяПозиция.НомерПозиции         = СписокТоваровОплатаСертификатом.Количество() + 1;
		ТоварнаяПозиция.НомерПозицииВозврата = "";
		ТоварнаяПозиция.Артикул              = СтрокаЧека.Артикул;
		ТоварнаяПозиция.КодТовараТРУ         = СтрокаЧека.КодВидаТРУ;
		ТоварнаяПозиция.Количество           = СтрокаЧека.Количество;
		ТоварнаяПозиция.Цена                 = СтрокаЧека.Цена;
		
		СписокТоваровОплатаСертификатом.Добавить(ТоварнаяПозиция);
	КонецЦикла; 
	
	Возврат СписокТоваровОплатаСертификатом;
КонецФункции

// Возвращает параметры операции НСПК для передачи данных фискального чека
// Параметры:
//  <ДокументСсылка>  - <ДокументСсылка> - документ по которому был 
//                 напечатан чек содержащий социально значимые товары
//  <ИдентификаторУстройстваЭТ>   - <СправочникСсылка.ПодключаемоеОборудование> - ссылка на оборудование 
//                 через которое происходит обмен с НСПК
//  <ОписаниеОшибки>   - <Строка>
//
// Возвращаемое значение:
//   <Структура>   - структура для выполнения операции НСПК
//         см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
Функция ПараметрыОперацииНСПКПередачаФискальныхДанных(ДокументСсылка, ИдентификаторУстройстваЭТ, ИдентификаторКорзины, ОписаниеОшибки) Экспорт
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(ДокументСсылка));
		
		ЗаписьЖурналаРегистрацииЭСНСПК(
			"Ошибка", ДокументСсылка, ОписаниеОшибки);
			
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыОперацииНСПКПоКассеККМ(
		ДанныеФискальнойОперации.ДокументОснование,
		ИдентификаторУстройстваЭТ,
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
		
	ПараметрыОперации.ОснованиеФискальнойОперации = ДанныеФискальнойОперации.ДокументОснование;
	ПараметрыОперации.НомерФискальногоНакопителя  = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыОперации.ФискальныйТипРасчета        = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыОперации.ФискальныйПризнакЧека       = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыОперации.ФискальныйЧекНомер          = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыОперации.ФискальныйЧекДатаВремя      = ДанныеФискальнойОперации.Дата;
	ПараметрыОперации.ФискальныйЧекСумма          = ДанныеФискальнойОперации.Сумма;
	ПараметрыОперации.ИдентификаторКорзины        = ИдентификаторКорзины;
	
	ПодразделениеОрганизации = ОБщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФискальнойОперации.ТорговыйОбъект, "ПодразделениеОрганизации");
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		АдресСтруктурой = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
			ПодразделениеОрганизации, Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций, ДанныеФискальнойОперации.Дата);
		ПараметрыОперации.ФискальныйМестоРасчетов = АдресСтруктурой.Представление;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОперации.ФискальныйМестоРасчетов) Тогда
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеФискальнойОперации.Организация, ДанныеФискальнойОперации.Дата);
		ПараметрыОперации.ФискальныйМестоРасчетов = СведенияОбОрганизации.ЮридическийАдрес;
	КонецЕсли; 
	
	Возврат ПараметрыОперации;
КонецФункции


Процедура ЗаписьЖурналаРегистрацииЭСНСПК(УровеньЖурнала, ДокументСсылка, СообщениеПользователю) Экспорт

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Подтверждение операции ЭС НСПК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации[УровеньЖурнала],
		,
		ДокументСсылка,
		СообщениеПользователю);

КонецПроцедуры
 

#КонецОбласти
