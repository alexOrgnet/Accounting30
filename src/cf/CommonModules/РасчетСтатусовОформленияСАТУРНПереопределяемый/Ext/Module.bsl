// Механизм расчета статусов оформления документов САТУРН.
//

#Область СлужебныйПрограммныйИнтерфейс

// Позволяет переопределить имена реквизитов документа-основания для документа САТУРН.
//
// Параметры:
//  МетаданныеДокументаОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа САТУРН>
//  МетаданныеДокументаСАТУРН - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыСАТУРНПоддерживающиеСтатусыОформления
//  Реквизиты  - Структура - имена реквизитов:
//  * Ключ  - служебное имя реквизита в САТУРН
//  * Значение - имя реквизита документа-основания, которое при необходимости надо переопределить
//  (см. РасчетСтатусовОформленияСАТУРН.СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументов).
Процедура ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления(Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаСАТУРН, Реквизиты) Экспорт
	
	ПриОпределенииРеквизитовОснованияДляСАТУРН(МетаданныеДокументаОснования, МетаданныеДокументаСАТУРН, Реквизиты);
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
//   Требования к тексту запроса:
//     Если данные из документа выбирать не требуется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//      * Ссылка - ОпределяемыйТип.Основание<Имя документа САТУРН> - ссылка на документ-основание
//      * ЭтоДвижениеПриход - Булево - вид движения ТМЦ (Истина - приход, Ложь - расход)
//      * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура
//      * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры
//      * Серия - ОпределяемыйТип.СерияНоменклатуры - серия номенклатуры
//      * Количество - Число - количество номенклатуры в ее основной единице измерения
//     В результат запроса нужно включать только продукцию, подконтрольную САТУРН (Пестициды, агрохимикаты, тукосмеси)
//     Для отбора документов-основания в запросе нужно использовать отбор "В (&МассивДокументов)"
//     Выбранные данные необходимо поместить во временную таблицу (См. РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента).
//
//Параметры:
//   МетаданныеДокументаОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа САТУРН>
//   МетаданныеДокументаСАТУРН - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыСАТУРНПоддерживающиеСтатусыОформления
//   ТекстЗапроса - Строка - текст запроса выборки данных, который надо переопределить
//   ДополнительныеПараметрыЗапроса - Структура - дополнительные параметры запроса, требуемые для выполнения запроса 
//       конкретного документа; при необходимости можно дополнить данную структуру
//     Ключ     - имя параметры
//     Значение - значение параметра.
//
Процедура ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления(Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаСАТУРН, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ПриОпределенииЗапросаДляСАТУРН(МетаданныеДокументаОснования, МетаданныеДокументаСАТУРН, ТекстЗапроса, ДополнительныеПараметрыЗапроса);

КонецПроцедуры

#КонецОбласти

#Область РачетСтатусовОформленияПрикладныхДокументов

//Позволяет переопределить имена реквизитов документа-основания для документа САТУРН.
//   См. РасчетСтатусовОформленияСАТУРНПереопределяемый.ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииРеквизитовОснованияДляСАТУРН(МетаданныеДокументаОснования, МетаданныеДокументаСАТУРН, Реквизиты) Экспорт
	
	// Зададим имена реквизитов по умолчанию.
	Реквизиты.Ответственный 					= "";
	Реквизиты.Контрагент                        = "Организация";
	//Если МетаданныеДокументаОснования.Имя = "ПеремещениеТоваров" Тогда
	//	Реквизиты.ТорговыйИлиПроизводственныйОбъект = "СкладОтправитель";	
	//Иначе
	//	Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Склад";
	//КонецЕсли;
	
КонецПроцедуры

//Позволяет переопределить текст запроса выборки данных из документов-оснований для расчета статуса оформления.
//   См. РасчетСтатусовОформленияСАТУРНПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииЗапросаДляСАТУРН(МетаданныеДокументаОснования, МетаданныеДокументаСАТУРН, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента();
	ТабличныеЧастиДокумента = Новый Массив;
	ОтборНоменклатуры = "СправочникНоменклатура.ПодконтрольнаяПродукцияСАТУРН";
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ОтчетПроизводстваЗаСмену Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.АктПримененияСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Сырье", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
		
		ИначеЕсли МетаданныеДокументаСАТУРН = Метаданные.Документы.ПроизводственнаяОперацияСАТУРН Тогда
			
			// Товары
			ТоварыПриход  = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Продукция", Неопределено);
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
						
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеТоваров Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.АктИнвентаризацииСАТУРН Тогда
			
			// Товары
			ТоварыПриход  = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеТоваров Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.АктИнвентаризацииСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования));
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		ИначеЕсли МетаданныеДокументаСАТУРН = Метаданные.Документы.АктПримененияСАТУРН Тогда
			
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования));
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
	
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
	
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеТоваровУслуг Тогда
		
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОРозничныхПродажах Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ТребованиеНакладная Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Материалы", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования));
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования));
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтПокупателя Тогда
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
			
			// Товары
			ТоварыРасход  = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", Неопределено);
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования));
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонОписанияПриходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Истина, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияРасходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Ложь, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияТабличнойЧастиДокумента(ВидДвиженияПриход, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы)
	
	ОписаниеТЧ = Новый Структура;
	// Вид движения
	ОписаниеТЧ.Вставить("ВидДвиженияПриход",             ВидДвиженияПриход);
	// ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиТовары",       ИмяТабличнойЧастиТовары);
	// ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиСерии",        ИмяТабличнойЧастиСерии);
	ОписаниеТЧ.Вставить("АвтоПоискСерий",                (ИмяТабличнойЧастиСерии = NULL));
	// Имена полей ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧТовары",   "ТаблицаТовары.Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧТовары", """""");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧТовары",          """""");
	ОписаниеТЧ.Вставить("ИмяПоляКоличествоТЧТовары",     "ТаблицаТовары.Количество");
	// Имена полей ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧСерии",    "ТаблицаСерии.Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧСерии",  "ТаблицаСерии.Характеристика");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧСерии",           "ТаблицаСерии.Серия");
	// Модификаторы текста запроса.
	ОписаниеТЧ.Вставить("ДопСоединения_Общие",           "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаТовары",   "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаСерии",    "");
	ОписаниеТЧ.Вставить("ДопОтборы_Общие",               "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаТовары",       "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаСерии",        "");
	// Номер таблицы по порядку.
	ОписаниеТЧ.Вставить("ПостфиксВременнойТаблицы",      ПостфиксВременнойТаблицы);
	
	Возврат ОписаниеТЧ;
	
КонецФункции

Функция ДокументПроведен()
	
	Возврат "ТаблицаДокумента.Проведен";
	
КонецФункции

Функция УсловиеВидимостиПоВидуОперации(МетаданныеДокументаОснования)
	
	УсловиеВидимости = "";
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		УсловиеВидимости = "ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)";
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтПокупателя Тогда
		УсловиеВидимости = "ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Товары)";
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		УсловиеВидимости = "ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами)";
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеТоваров Тогда
		УсловиеВидимости = "ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеТоваров.СписаниеСоСклада)";
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ТребованиеНакладная Тогда
		УсловиеВидимости = "ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов)";
	КонецЕсли;
	
	Возврат УсловиеВидимости;
		
КонецФункции

Функция ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ОписаниеТабличныхЧастей, ОтборНоменклатуры)
	
	Если ТипЗнч(ОписаниеТабличныхЧастей) <> Тип("Массив") Тогда
		// Передано описание единственной табличной части
		ТабличныеЧастиОснования = Новый Массив;
		ТабличныеЧастиОснования.Добавить(ОписаниеТабличныхЧастей);
	Иначе
		ТабличныеЧастиОснования = ОписаниеТабличныхЧастей;
	КонецЕсли;
	
	КоличествоТЧ = ТабличныеЧастиОснования.Количество();
	Если КоличествоТЧ = 0 Тогда
		УточнениеОшибки = НСтр("ru = 'Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления'");
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияИСКлиентСервер.ПредставлениеПодсистемы(), УточнениеОшибки); // Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления
	КонецЕсли;
	
	Для Каждого ОписаниеТЧ Из ТабличныеЧастиОснования Цикл
		
		ОписаниеТЧ.ИмяТабличнойЧастиСерии = Неопределено;
		
	КонецЦикла;
	
	ШаблонЗапросаБезСерий =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	%ИмяПоляСерияТЧТовары% КАК Серия,
	|	%ИмяПоляКоличествоТЧТовары% КАК Количество
	|%СозданиеВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаТовары%
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = %ИмяПоляНоменклатураТЧТовары%
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И %ОтборНоменклатуры%
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаТовары%
	|";
	
	МассивТекстовСуммированияЗапросов = Новый Массив;
	МассивТекстовОсновногоЗапроса = Новый Массив;
	
	Для НомерТаблицы = 0 По КоличествоТЧ - 1 Цикл
		
		ОписаниеТЧ = ТабличныеЧастиОснования[НомерТаблицы];
		
		ИмяТабличнойЧастиТовары = ?(ОписаниеТЧ.ИмяТабличнойЧастиТовары = "", "", "." + ОписаниеТЧ.ИмяТабличнойЧастиТовары);
		
		ТекстЗапросаПоТабличнойЧасти = ШаблонЗапросаБезСерий;
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяДокумента%", МетаданныеДокументаОснования.Имя);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%СозданиеВременнойТаблицы%",
			?(НомерТаблицы = 0, "ПОМЕСТИТЬ " + РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента(), ""));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ВидДвиженияПриход%",
			Формат(ОписаниеТЧ.ВидДвиженияПриход, "БЛ=Ложь; БИ=Истина"));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяТабличнойЧастиТовары%",       ИмяТабличнойЧастиТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНоменклатураТЧТовары%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляХарактеристикаТЧТовары%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляСерияТЧТовары%",          ОписаниеТЧ.ИмяПоляСерияТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляКоличествоТЧТовары%",     ОписаниеТЧ.ИмяПоляКоличествоТЧТовары);
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_Общие%",           ОписаниеТЧ.ДопСоединения_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_ТаблицаТовары%",   ОписаниеТЧ.ДопСоединения_ТаблицаТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_Общие%",               ОписаниеТЧ.ДопОтборы_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_ТаблицаТовары%",       ОписаниеТЧ.ДопОтборы_ТаблицаТовары);
		
		МассивТекстовОсновногоЗапроса.Добавить(ТекстЗапросаПоТабличнойЧасти);
		
	КонецЦикла;
	
	ШаблонОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	МассивТекстовСуммированияЗапросов.Добавить(СтрСоединить(МассивТекстовОсновногоЗапроса, ШаблонОбъединение));
	
	ОбщийЗапрос = СтрСоединить(МассивТекстовСуммированияЗапросов, ИнтеграцияИС.РазделительЗапросовВПакете());
	ОбщийЗапрос = СтрЗаменить(ОбщийЗапрос, "%ОтборНоменклатуры%", ОтборНоменклатуры);
	Возврат ОбщийЗапрос;
	
КонецФункции

#КонецОбласти
