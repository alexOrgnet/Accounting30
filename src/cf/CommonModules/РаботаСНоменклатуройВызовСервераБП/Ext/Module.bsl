////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПараметрыДоступностиСервиса(ПараметрыДоступности) Экспорт 
	 РаботаСНоменклатуройБП.ЗаполнитьПараметрыДоступностиСервиса(ПараметрыДоступности);
КонецПроцедуры

Функция СервисУспешноАктивирован() Экспорт 
	Возврат РаботаСНоменклатуройБП.СервисУспешноАктивирован()
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создание списка значений выбора при наборе текста в полях с типом Справочник.Номенклатура
//
// Параметры:
//  Параметры			 - 	Структура - создание см. ОкончаниеВводаТекста и АвтоПодбор в формах вызова.
//  ОкончаниеВводаТекста -  Булево	 - флаг вызова из процедуры ОкончаниеВводаТекста
//  БыстроеСозданиеДляНесколькихНоменклатурныхГрупп - Булево - признак, что номенклатуру нужно создавать и в том случае, если в базе включено несколько номенклатурных групп.
// 
// Возвращаемое значение:
//  ДанныеВыбора - СписокЗначений
//   *Если номенклатура с таким текстом найдена, то штатный перечень ПолучитьДанныеВыбора 
//   *Если не найдена - перечень ФорматированныхСтрок представлений видов номенклатур,
//    для выбора создания новой номенклатуры см. ДобавитьВДанныеВыбора. Функция создания
//    списка см. РаботаСНоменклатуройПовтИсп.ВидыНоменклатурыДляВыбора
Функция ДанныеВыбораНоменклатуры(Параметры, ОкончаниеВводаТекста = Ложь, БыстроеСозданиеДляНесколькихНоменклатурныхГрупп = Ложь) Экспорт
	
	ДанныеВыбора = Справочники.Номенклатура.ПолучитьДанныеВыбора(Параметры);
	
	Если ДанныеВыбора.Количество() = 0 
		И ЕстьВидыНоменклатуры()
		И (БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Или БыстроеСозданиеДляНесколькихНоменклатурныхГрупп)
		И Параметры.Свойство("ВидыНоменклатуры") Тогда
			
		ЕстьОтборПоУслуге = Параметры.Отбор.Свойство("Услуга");
		
		Если ЕстьОтборПоУслуге И Параметры.Отбор.Услуга Тогда
			ОсновнойВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга");
			Если Не ЗначениеЗаполнено(ОсновнойВидНоменклатуры) Тогда
				ОсновнойВидНоменклатуры = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(Истина);
			КонецЕсли;
		ИначеЕсли Параметры.Отбор.Свойство("ЭтоТопливо") И Параметры.Отбор.ЭтоТопливо Тогда
			ОсновнойВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыТопливо");
		ИначеЕсли Не ЕстьОтборПоУслуге И РаботаСНоменклатуройБП.УслугаПриоритетныйВидНоменклатуры() Тогда
			ОсновнойВидНоменклатуры = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(Истина);
		Иначе
			ОсновнойВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры");
		КонецЕсли;
		
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидНоменклатуры, "Наименование");
		ДобавитьВДанныеВыбора(ДанныеВыбора,
			ОсновнойВидНоменклатуры,
			Наименование,
			Параметры.СтрокаПоиска);
		
		ВидыНоменклатурыДляВыбора = РаботаСНоменклатуройПовтИспБП.ВидыНоменклатурыДляВыбора(
			ОсновнойВидНоменклатуры, Параметры.ВидыНоменклатуры);
			
		Для Каждого ВидНоменклатуры Из ВидыНоменклатурыДляВыбора Цикл
			
			ДобавитьВДанныеВыбора(ДанныеВыбора,
				ВидНоменклатуры.Значение,
				ВидНоменклатуры.Представление,
				Параметры.СтрокаПоиска);
			
		КонецЦикла;
			
		Если ОкончаниеВводаТекста Тогда
			// Добавляем вторую строку, чтобы в этом режиме не срабатывал автовыбор единственной строки.
			ДанныеВыбора.Добавить(""); 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция СоздатьНоменклатуруБыстро(Знач ВидНоменклатуры, Знач ПараметрыСоздания) Экспорт
	
	НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		НовыйОбъект.Заполнить(ПараметрыСоздания.ЗначенияЗаполнения);
	КонецЕсли;
	
	НовыйОбъект.ВидНоменклатуры = ВидНоменклатуры;
	НовыйОбъект.Наименование = ПараметрыСоздания.ДополнительныеПараметрыСоздания.Наименование;
	НовыйОбъект.НаименованиеПолное = НовыйОбъект.Наименование;
	
	Услуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга");
	НовыйОбъект.Услуга = Услуга;
	
	Если ПараметрыСоздания.ДополнительныеПараметрыСоздания.Свойство("КодЕдиницыИзмерения") Тогда
		НовыйОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(
			ПараметрыСоздания.ДополнительныеПараметрыСоздания.КодЕдиницыИзмерения);
	ИначеЕсли НЕ Услуга Тогда
		НовыйОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	КонецЕсли;
	
	НовыйОбъект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция ЕстьВидыНоменклатуры()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Функция возвращает ответ, нужно ли предлагать включить периодичность.
// 
// Параметры:
//    Номенклатура - Справочник.Номенклатура.
//    Содержание - Строка - Содержание услуги, которое ввел пользователь.
//    ПериодичностьУслуги - Перечисление.Периодичность.
//    Дата - Дата - Дата документа.
//
// Возвращаемое значение:
//    Булево
//
Функция ПредложитьВключитьПериодичностьУслуги(Знач Номенклатура, Знач Содержание, Знач ПериодичностьУслуги, Знач Дата) Экспорт

	// Предлагаем включить периодичность в случае, если:
	// 1. Периодичность не задана в номенклатуре.
	// 2. Автоматически подготовленное содержание услуги соответствует содержанию, которое ввел пользователь.
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Номенклатура, "ПериодичностьУслуги, Наименование, НаименованиеПолное");
	
	Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ПериодичностьУслуги) Тогда
		// Периодичность задана - не предлагаем.
		Возврат Ложь;
	КонецЕсли;
	
	НаименованиеНоменклатуры = ?(ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное), 
		РеквизитыНоменклатуры.Наименование,
		РеквизитыНоменклатуры.НаименованиеПолное);
		
	Если НЕ ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
		// Если наименование не заполнено, то не будем предлагать.
		Возврат Ложь;
	КонецЕсли;
	
	// Сравним содержание услуги пользователя и автоматически подготовленное содержание.
	АвтоматическоеСодержание = НРег(РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
		НаименованиеНоменклатуры,
		ПериодичностьУслуги,
		Дата,
		Ложь)); // Исключим год из автоматически подготовленного содержания, для смягчения поиска.
		
	АвтоматическоеСодержание = СокрЛП(АвтоматическоеСодержание);
	Содержание               = СокрЛП(НРег(Содержание));
	
	Если НЕ СтрНачинаетсяС(Содержание, АвтоматическоеСодержание) Тогда
		// Текст не совпадает - не предлагаем.
		Возврат Ложь;
	КонецЕсли;
	
	// Исключим случаи, когда не совпадает оставшаяся часть наименования.
	// Считаем, что в оставшейся части может быть информация о годе.
	// Так как вариантов написания года много, считаем что любые два слова - это обозначение года. Например, "2017 г."
	ОставшаясяСтрока = Сред(Содержание, СтрДлина(АвтоматическоеСодержание) + 1);
	МассивСлов = СтрРазделить(ОставшаясяСтрока, " ", Ложь);
	Если МассивСлов.Количество() > 2 Тогда
		// В оставшейся строке больше 2х слов - не предлагаем.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


// Создание представления строки выбора вида номенклатуры и добавление ее в список выбора.
//
// Параметры:
//  ДанныеВыбора	 - СписокЗначений	 - Итоговый список выбора видов номенклатур
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры	 - 
//  Наименование	 - Строка	 -  Наименование вида номенклатуры
//  СтрокаПоиска	 - Строка	 -  Набранный пользователем текст. Создаваемое наименование карточки номенклатуры
//
Процедура ДобавитьВДанныеВыбора(ДанныеВыбора, ВидНоменклатуры, Наименование, СтрокаПоиска)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	ШрифтКоманды    = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста);
	ШрифтПодСтроки  = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЦветПодстроки   = Новый Цвет(0, 175, 0);
	
	Представление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Создать: %1'"), Наименование) + " """, ШрифтКоманды),
				Новый ФорматированнаяСтрока(СокрЛП(СтрокаПоиска), ШрифтПодСтроки, ЦветПодстроки),
				Новый ФорматированнаяСтрока("""", ШрифтКоманды)
				);
				
	ДанныеВыбора.Добавить(ВидНоменклатуры, Представление);
	
КонецПроцедуры

// Выполняет поиск номенклатуры по штрихкоду
//
// Параметры:
//  Штрихкод - Строка - штрихкод.
//
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура
//
Функция НоменклатураПоШтрихкоду(Знач Штрихкод) Экспорт
	
	РезультатПоиска = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	Если РезультатПоиска.Количество() > 0 Тогда
		Результат = РезультатПоиска[0].Номенклатура;
	Иначе
		Результат = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти