// @strict-types


#Область ПрограммныйИнтерфейс

// Регистрирует обработчики поставляемых данных за день и за все время
//
// Параметры: 
//   Обработчики - ТаблицаЗначений - таблица для добавления обработчиков с колонками:
//     * ВидДанных - Строка - код вида данных, обрабатываемый обработчиком.
//     * КодОбработчика - Строка - будет использоваться при восстановлении обработки данных после сбоя.
//     * Обработчик - ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "ДанныеРекламногоСервиса";
	Обработчик.КодОбработчика = "ДанныеРекламногоСервиса";
	Обработчик.Обработчик = РекламныйСервисВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор:
//   * DataType - Строка
//   Загружать - Булево - Возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ДанныеРекламногоСервиса" Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор:
//   * DataType - Строка
//   ПутьКФайлу - Строка - Полное имя извлеченного файла, Файл будет автоматически удален после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "ДанныеРекламногоСервиса" Тогда
		ОбработатьНовыеДанныеРекламногоСервиса(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//
//@skip-warning ПустойМетод
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьНовыеДанныеРекламногоСервиса(Дескриптор, ПутьКФайлу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Реклама");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Справочники.Реклама.УдалитьРекламуПоДатеОкончания();
		
		Справочники.Реклама.ДобавитьОфлайнРекламу();
		
		ДобавитьОнлайнРекламу(ПутьКФайлу);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияЭлементРекламы(
			РекламныйСервисСлужебный.ИмяДействияОбновление());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Добавить онлайн рекламу.
// 
// Параметры:
//  ПутьКФайлу - Строка
//
Процедура ДобавитьОнлайнРекламу(ПутьКФайлу)
	
	Попытка
		
		ДанныеРекламногоСервиса = Новый Соответствие;
		
		ИмяСвойстваДанныхРекламыКонтент = РекламныйСервисСлужебный.ИмяСвойстваДанныхРекламыКонтент();
		ДанныеРекламногоСервиса.Вставить(ИмяСвойстваДанныхРекламыКонтент, "");
		
		ИмяСвойстваДанныхРекламыТаргеты = РекламныйСервисСлужебный.ИмяСвойстваДанныхРекламыТаргеты();
		ДанныеРекламногоСервиса.Вставить(ИмяСвойстваДанныхРекламыТаргеты, "");
		
		ПрочитатьДанныеРекламногоСервисаИзФайла(ДанныеРекламногоСервиса, ПутьКФайлу);
		
		ДанныеТаргетыРекламыИзДанныхСервиса = ДанныеРекламногоСервиса[ИмяСвойстваДанныхРекламыТаргеты]; // Строка
		ДанныеТаргетыРекламы = РекламныйСервисСлужебный.JSONВЗначение(ДанныеТаргетыРекламыИзДанныхСервиса); // Массив из Структура
		ТаргетыРекламы = Справочники.Реклама.ТаргетыОнлайнРекламыИзДанныхСервиса(ДанныеТаргетыРекламы);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Справочники.Реклама.ДобавитьОбновитьТаргетыОнлайнРекламы(ТаргетыРекламы);
		
		ДанныеЭлементыРекламыИзДанныхСервиса = ДанныеРекламногоСервиса[ИмяСвойстваДанныхРекламыКонтент]; // Строка
		ТаблицаЭлементыРекламы = Справочники.Реклама.НовыйТаблицаЭлементыРекламы();
		Справочники.Реклама.ЭлементыРекламыИзДанныхСервиса(ТаблицаЭлементыРекламы, ДанныеЭлементыРекламыИзДанныхСервиса);
		Справочники.Реклама.ДобавитьОбновитьКонтентОнлайнРекламы(ТаблицаЭлементыРекламы);
		
	Исключение
		
		ШаблонСобытия = НСтр("ru = '%1Загрузка онлайн рекламы'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтрШаблон(ШаблонСобытия, РекламныйСервисСлужебный.ИмяСобытияРекламногоСервиса());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьДанныеРекламногоСервисаИзФайла(ДанныеРекламногоСервиса, ПутьКФайлу)
	
	КаталогФайлов = РаспаковатьФайлы(ПутьКФайлу);
	Файлы = НайтиФайлы(КаталогФайлов, "*");
	Для Каждого Файл Из Файлы Цикл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
			ТекстДанных = ТекстовыйДокумент.ПолучитьТекст();
		Исключение
			Продолжить;
		КонецПопытки;
		
		ДанныеРекламногоСервиса[Файл.ИмяБезРасширения] = ТекстДанных;
		
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйФайл(КаталогФайлов);
	
КонецПроцедуры

Функция РаспаковатьФайлы(ПутьКФайлу)
	
	КаталогФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ПутьКФайлу);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZipФайла.Закрыть();
	
	Возврат КаталогФайлов;
	
КонецФункции

#КонецОбласти