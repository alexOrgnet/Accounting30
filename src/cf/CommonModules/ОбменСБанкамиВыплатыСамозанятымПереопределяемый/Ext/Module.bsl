////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен с банками. Выплаты самозанятым".
// Модуль предназначен для размещения переопределяемых процедур подсистемы.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПолучениеДанныхВыгружаемогоДокумента

// Возвращает данные в виде структуры по связанному документу ПлатежноеПоручение
//
// Параметры:
//		РеестрВыплатыСамозанятым - ДокументСсылка
//		ДанныеПлатежногоПоручения - Структура - структура задается функцией-конструктором ОбменСБанкамиВыплатыСамозанятымСлужебный.ДанныеПлатежногоПоручения()
//
Процедура ДанныеПлатежногоПорученияРеестраВыплатСамозанятым(РеестрВыплатыСамозанятым, ДанныеПлатежногоПоручения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РеестрВыплатСамозанятым", РеестрВыплатыСамозанятым);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручение.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручение.СчетОрганизации КАК СчетОрганизации,
	|	ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации.НомерСчета, "") КАК РасчетныйСчетОрганизации,
	|	ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации.Банк.Код, "") КАК БИК,
	|	ПлатежноеПоручение.Организация КАК Организация,
	|	ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Проведен
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым)
	|	И ПлатежноеПоручение.РеестрВыплатСамозанятым = &РеестрВыплатСамозанятым";
	ВыборкаРезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатЗапроса.Следующий() Тогда		
		ЗаполнитьЗначенияСвойств(ДанныеПлатежногоПоручения, ВыборкаРезультатЗапроса);		
		ДанныеПлатежногоПоручения.НомерПлатежногоПоручения = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ДанныеПлатежногоПоручения.НомерПлатежногоПоручения, 
			Истина, 
			Ложь);
		КонецЕсли;
	
КонецПроцедуры

// Получает данные документов из документа РеестрВыплатыСамозанятым и заполняет данные в структуре ДанныеДокументов 
//
// Параметры:
//		РеестрВыплатыСамозанятым - ДокументСсылка - ссылка на документ,
//										по которому требуется получить данные.
//		ДанныеДокумента - Структура - структура задается функцией-конструктором 
//										ОбменСБанкамиВыплатыСамозанятымСлужебный.ДанныеЗаполненияРеестрВыплатСамозанятым()
//		
Процедура ДанныеРеестраВыплатСамозанятым(РеестрВыплатыСамозанятым, ДанныеДокумента) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РеестрВыплатыСамозанятым", РеестрВыплатыСамозанятым);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.РеестрВыплатСамозанятым КАК РеестрВыплатСамозанятым,
	|	ПлатежноеПоручение.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручение.Дата КАК ДатаПлатежногоПоручения,
	|	ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации.НомерСчета, """") КАК РасчетныйСчетОрганизации,
	|	ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации.Банк.Код, """") КАК БИК
	|ПОМЕСТИТЬ ДанныеПлатежки
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Проведен
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым)
	|	И ПлатежноеПоручение.РеестрВыплатСамозанятым = &РеестрВыплатыСамозанятым
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежногоПоручения УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыплатыСамозанятым.Ссылка КАК Документ,
	|	ВыплатыСамозанятым.Номер КАК НомерРеестра,
	|	ВыплатыСамозанятым.Дата КАК ДатаРеестра,
	|	ВыплатыСамозанятым.Организация КАК Организация,
	|	ЕСТЬNULL(ВыплатыСамозанятым.Организация.НаименованиеПолное, """") КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(ВыплатыСамозанятым.Организация.ИНН, """") КАК ИНН,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПлатежки.РасчетныйСчетОрганизации, """") <> """"
	|			ТОГДА ЕСТЬNULL(ДанныеПлатежки.РасчетныйСчетОрганизации, """")
	|		ИНАЧЕ ЕСТЬNULL(ВыплатыСамозанятым.СчетОрганизации.НомерСчета, """")
	|	КОНЕЦ КАК РасчетныйСчетОрганизации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПлатежки.БИК, """") <> """"
	|			ТОГДА ЕСТЬNULL(ДанныеПлатежки.БИК, """")
	|		ИНАЧЕ ЕСТЬNULL(ВыплатыСамозанятым.СчетОрганизации.Банк.Код, """")
	|	КОНЕЦ КАК БИК,
	|	ВыплатыСамозанятым.Выплаты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК Нпп,
	|		Контрагент КАК ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.Контрагент.НаименованиеПолное, """") <> """"
	|				ТОГДА ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.Контрагент.НаименованиеПолное, """")
	|			ИНАЧЕ ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.Контрагент.Наименование, """")
	|		КОНЕЦ КАК ФИО,
	|		ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.Контрагент.ИНН, """") КАК ИНН,
	|		БанковскийСчет КАК БанковскийСчет,
	|		ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.БанковскийСчет.НомерСчета, """") КАК НомерСчета,
	|		ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.БанковскийСчет.Банк.Код, """") КАК БИК,
	|		Сумма КАК Сумма,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА ВыплатыСамозанятым.УслугаВТаблице
	|				ТОГДА ЕСТЬNULL(ВыплатыСамозанятым.Выплаты.Содержание, """")
	|			ИНАЧЕ ЕСТЬNULL(ВыплатыСамозанятым.Номенклатура.НаименованиеПолное, """")
	|		КОНЕЦ КАК НазначениеПлатежа
	|	) КАК Выплаты,
	|	ЕСТЬNULL(ДанныеПлатежки.НомерПлатежногоПоручения, """") КАК НомерПлатежногоПоручения,
	|	ЕСТЬNULL(ДанныеПлатежки.ДатаПлатежногоПоручения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежногоПоручения
	|ИЗ
	|	Документ.ВыплатыСамозанятым КАК ВыплатыСамозанятым
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПлатежки КАК ДанныеПлатежки
	|		ПО ВыплатыСамозанятым.Ссылка = ДанныеПлатежки.РеестрВыплатСамозанятым
	|ГДЕ
	|	ВыплатыСамозанятым.Ссылка = &РеестрВыплатыСамозанятым
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПлатежки";	
	
	РеквизитыПлатежногоДокумента = Неопределено;	
	РезультатыЗапроса = Запрос.Выполнить();		
	ВыборкаДокумента = РезультатыЗапроса.Выбрать();
	Пока ВыборкаДокумента.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокумента);						
		ДанныеДокумента.ИдПервичногоДокумента = Строка(ДанныеДокумента.Документ.УникальныйИдентификатор());
		НомерРеестра = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.НомерРеестра, Истина, Ложь);
		ДанныеДокумента.НомерРеестра = НомерРеестра;			
		ДанныеДокумента.ДатаФормирования = ТекущаяДатаСеанса();
		ВыборкаСтрокДокумента = ВыборкаДокумента.Выплаты.Выбрать();		
		ОбшаяСумма = 0;
		ОбщееКоличествоСтрок = 0;
		Пока ВыборкаСтрокДокумента.Следующий() Цикл
			
			ДанныеСтрокиДокумента = ДанныеДокумента.ФизЛица.Добавить();			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДокумента, ВыборкаСтрокДокумента);
			ОбшаяСумма = ОбшаяСумма + ВыборкаСтрокДокумента.Сумма;
			ОбщееКоличествоСтрок = ОбщееКоличествоСтрок + 1;						
			ФИОФизлица = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ВыборкаСтрокДокумента.ФИО));
			ДанныеСтрокиДокумента.Фамилия = ФИОФизлица.Фамилия;
			ДанныеСтрокиДокумента.Имя = ФИОФизлица.Имя;
			ДанныеСтрокиДокумента.Отчество = ФИОФизлица.Отчество;
			
		КонецЦикла;
		ДанныеДокумента.КоличествоЗаписей = ОбщееКоличествоСтрок;
		ДанныеДокумента.СуммаИтого = ОбшаяСумма;				
				
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанныхВЗагружаемыйДокумент

// Осуществляет загрузку информации по чекам самозанятых в документ Выплаты самозанятым
//
// Параметры:
//		ДанныеЗаполнения - Структура - данные для заполнения информации по чекам
//			- ОбщиеДанные - Структура - данные для заполнения обшей информации по чекам, 
//								определяется функцией-конструктором ОбменСБанкамиВыплатыСамозанятымСлужебный.ДанныеЗаполнения()
//			- МассивЧеков - Массив - массив из структур ДанныеЗаполненияЧекСамозанятого
//				* ДанныеЗаполненияЧекСамозанятого - Структура - данные для заполнения информации по чекам по каждому самозанятому, 
//						определяется функцией-конструктором ОбменСБанкамиВыплатыСамозанятымСлужебный.ДанныеЗаполнения()
//			- КонтрольныеСуммы - Структура - данные для контроля заполнения
//				* КоличествоЗаписей - Число - количество записей про выплаты самозанятым
//				* СуммаИтого - Число - итоговая сумма, выплаченная самозанятым банком
//		СсылкаНаДокумент - ДокументСсылка - документ, в котором происходит заполнение данных
//
Процедура ПриЗагрузкеРеестраЧековВыплатСамозанятым(ДанныеЗаполнения, СсылкаНаДокумент) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство("ИдПервичногоДокумента") 
		Или Не ЗначениеЗаполнено(ДанныеЗаполнения.ИдПервичногоДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан ИдПервичногоДокумента в загружаемом файле при загрузке реестра чеков.'");
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");		
		Возврат;
	КонецЕсли;
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ДанныеЗаполнения.ИдПервичногоДокумента) 
		Или ДанныеЗаполнения.ИдПервичногоДокумента = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		ТекстСообщения = НСтр("ru = 'Неверный ИдПервичногоДокумента в загружаемом файле (ожидается не пустой GUID) при загрузке реестра чеков.'");
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат;
	КонецЕсли;
	ИдДокумента = Новый УникальныйИдентификатор(ДанныеЗаполнения.ИдПервичногоДокумента);
	СсылкаНаДокумент = Документы.ВыплатыСамозанятым.ПолучитьСсылку(ИдДокумента);
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	Если ДокументОбъект = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить документ Выплаты самозанятым для изменения  при загрузке реестра чеков.'");
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат;
	КонецЕсли;
	Если ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяМакета", "ЗагрузкаИзФайла");
	Параметры.Вставить("ОбъектДляЗагрузки", СсылкаНаДокумент);
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Период", Неопределено);
	Параметры.Вставить("ПострочнаяОбработка", Истина);
	Параметры.Вставить("СопоставлятьКолонки", Истина);
	ТекстОшибки = "";
	ДанныеЗаполненияЧекиСамозанятых = ДанныеЗаполнения.ЧекиСамозанятых.Скопировать();
	КолонкаИНН = ДанныеЗаполненияЧекиСамозанятых.Колонки.Найти("ИНН");
	Если КолонкаИНН <> Неопределено Тогда
		ДанныеЗаполненияЧекиСамозанятых.Колонки.Удалить(КолонкаИНН);
	КонецЕсли;
	Документы.ВыплатыСамозанятым.СопоставитьЗагружаемыеДанныеПострочно(ДанныеЗаполненияЧекиСамозанятых, Параметры, ТекстОшибки);
	ВыплатыСамозанятым.ЗаполнитьЧекиСамозанятыхИзЗагруженныхДанных(ДокументОбъект, ДанныеЗаполненияЧекиСамозанятых);
	
	//Проверим чеки, если по всем чекам в реестре есть отказ, то нужно всему документу присвоить статус Отклонено
	КоличествоОтклонено = 0;
	Для Каждого СтрокаТЧ Из ДокументОбъект.Выплаты Цикл
		Если СтрокаТЧ.ПричинаОтказа <> Перечисления.ПричиныОтказаВЧекахВыплатСамозанятым.ПустаяСсылка() Тогда
			КоличествоОтклонено = КоличествоОтклонено + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоОтклонено = ДокументОбъект.Выплаты.Количество() Тогда
		НовыеСтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
		НовыеСтатусыДокумента.Статус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Отклонено;
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(СсылкаНаДокумент, НовыеСтатусыДокумента);
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		Операция = НСтр("ru = 'Загрузка чеков выплат самозанятым  при загрузке реестра чеков'");
		ПодробныйТекстОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка записи документаВыплаты самозанятым  при загрузке реестра чеков'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками"); 
	КонецПопытки;
	
	Если ДокументОбъект.Выплаты.Количество() <> ДанныеЗаполнения.КоличествоЗаписей Тогда
		ТекстСообщения = НСтр("ru = 'Количество строк в документе не совпадает с контрольными данными  при загрузке реестра чеков.'");
		Операция = НСтр("ru = 'Проверка контрольных сумм при загрузке чеков выплат самозанятым  при загрузке реестра чеков'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
	КонецЕсли;
	
	Если ДанныеЗаполнения.СуммаИтого <> Неопределено 
		И ДокументОбъект.Выплаты.Итог("Сумма") <> ДанныеЗаполнения.СуммаИтого Тогда
			ТекстСообщения = НСтр("ru = 'Сумма, зачисленная по документу, не совпадает с контрольными данными  при загрузке реестра чеков.'");
			Операция = НСтр("ru = 'Проверка контрольных сумм при загрузке чеков выплат самозанятым  при загрузке реестра чеков'");
			ПодробныйТекстОшибки = ТекстСообщения;
			ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
