
#Область ПрограммныйИнтерфейс

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ТипыУведомленийАУСН);
	
КонецПроцедуры

// Добавляем параметр "УведомленияОтФНСАУСН" в список параметров, получаемых на клиенте без серверного вызова.
//
// Параметры:
//  ВсеПараметры - Структура - см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента()
//
Процедура ДобавитьПараметрыЧата(ВсеПараметры) Экспорт
	
	Если Не Обсуждения.ОбсужденияДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСпискаОрганизаций = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|ГДЕ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяАУСН");
	ПодключенныеОрганизации = ЗапросСпискаОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Если ПодключенныеОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторБота = ПодготовитьБота();
	Если ИдентификаторБота = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВсехЧатов = Новый Соответствие;
	Для Каждого Организация Из ПодключенныеОрганизации Цикл
		
		ЧатФНС = ПодготовитьЧат(ИдентификаторБота, Организация);
		
		ПараметрыЧата = НовыйПараметрыЧата();
		ПараметрыЧата.Организация            = Организация;
		ПараметрыЧата.ИдентификаторПомощника = Строка(ИдентификаторБота);
		ПараметрыЧата.ИдентификаторЧата      = Строка(ЧатФНС.Идентификатор);
		
		ПараметрыВсехЧатов.Вставить(Строка(ЧатФНС.Идентификатор), ПараметрыЧата);
		
	КонецЦикла;
	
	ВсеПараметры.Вставить("УведомленияАУСНОтФНС", ПараметрыВсехЧатов);
	
КонецПроцедуры

// Читаем пакеты, загруженные регламентным заданием от банка, и распаковываем их в объекты хранения базы данных.
//
// Параметры:
//  Документ     - ВыборкаИзРезультатаЗапроса - см. РегистрыСведений.ДокументыАУСН.НайтиДокументы()
//  ДанныеДокумента - Структура, Неопределено - см. ИнтеграцияАУСН.РасшифроватьДанныеДокумента()
//  ПутьРаспаковкиФайлов - Строка - временный каталог, где хранятся приложенные к пакету файлы.
//
Процедура ОбработатьУведомлениеОтФНС(Документ, ДанныеДокумента, ПутьРаспаковкиФайлов) Экспорт
	
	ОтветСервиса = ДанныеДокумента.Ответ;
	Если ОтветСервиса.Свойства().Получить("NotificationsError") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ОтветСервиса.NotificationsError) Тогда
			ЗагружаемоеУведомление = Справочники.УведомленияАУСН.СоздатьЭлемент();
			ЗагружаемоеУведомление.Организация = Документ.Организация;
			ЗагружаемоеУведомление.ИдентификаторБанка = Документ.ИдентификаторБанка;
			ЗагружаемоеУведомление.Код = Новый УникальныйИдентификатор;
			Заголовок = НСтр("ru = 'При обращении в ФНС через сервис АУСН, банк получил следующие ошибки:'");
			Ошибки = Новый Массив;
			Ошибки.Добавить(Заголовок);
			Для Каждого ОписаниеОшибки Из ОтветСервиса.NotificationsError Цикл
				Для Каждого Содержание Из ОписаниеОшибки.ErrorDescription Цикл
					Ошибки.Добавить(ПреобразоватьВТегиФорматнойСтроки(Содержание.ErrorMessage));
				КонецЦикла;
			КонецЦикла;
			ЗагружаемоеУведомление.ТипОповещения = Справочники.ТипыУведомленийАУСН.ТипУведомленияПоУмолчанию();
			ЗагружаемоеУведомление.Наименование = Строка(ЗагружаемоеУведомление.ТипОповещения);
			ЗагружаемоеУведомление.ТекстВФорматеMarkdown = СтрСоединить(Ошибки, Символы.ПС);
			ЗагружаемоеУведомление.ТекстВФорматеPush = Заголовок;
			ЗагружаемоеУведомление.ПолученаОшибка = Истина;
			ЗагружаемоеУведомление.СтатусОповещения = Перечисления.СтатусыОповещенийАУСН.НеПрочитано; 
			ЗагружаемоеУведомление.ДатаСоздания = ТекущаяДата();
			ЗагружаемоеУведомление.ДатаОбновления = ТекущаяДата();
			ЗагружаемоеУведомление.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ОтветыОтФНС = ОтветСервиса.NotificationsResponse;
	Для Каждого УведомлениеФНС Из ОтветыОтФНС Цикл // возможно в данный пакет от банка вошли несколько ответов от ФНС к банку
		
		Уведомления = УведомлениеФНС.Notifications;
		Для Каждого УведомлениеОСобытии Из Уведомления Цикл // по конкретным событиям
			
			ЗагружаемоеУведомлениеСсылка = Справочники.УведомленияАУСН.НайтиПоКоду(УведомлениеОСобытии.MessageId);
			ЗаписыватьЭлемент = ЗагружаемоеУведомлениеСсылка.Пустая();
			Если ЗаписыватьЭлемент Тогда // новое уведомление
				
				ЗагружаемоеУведомление = Справочники.УведомленияАУСН.СоздатьЭлемент();
				ЗагружаемоеУведомление.Код = УведомлениеОСобытии.MessageId;
				ЗагружаемоеУведомление.Организация = Документ.Организация;
				ЗагружаемоеУведомление.ИдентификаторБанка = Документ.ИдентификаторБанка;
				
			Иначе // повторная загрузка ранее загруженного уведомления
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(ЗагружаемоеУведомлениеСсылка);
					
				Исключение
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось обновить ранее загруженное уведомление от ФНС.
                              |%1'"), ОписаниеОшибки());
					ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
					ЗаписьЖурналаРегистрации(ИмяСобытия,
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.УведомленияАУСН,
						ЗагружаемоеУведомлениеСсылка,
						ТекстОшибки);
						
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
				ЗагружаемоеУведомление = ЗагружаемоеУведомлениеСсылка.ПолучитьОбъект();
				Если ЗагружаемоеУведомление.Организация <> Документ.Организация Тогда
					
					ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
					ЗаписьЖурналаРегистрации(ИмяСобытия,
						УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.УведомленияАУСН,
						ЗагружаемоеУведомлениеСсылка,
						НСтр("ru = 'Поступило уведомление от ФНС с тем же идентификатором как и ранее полученное, но для другой организации'"));
					ЗагружаемоеУведомление.Организация = Документ.Организация;
					
				КонецЕсли;
				Если ЗагружаемоеУведомление.ПометкаУдаления Тогда
					ЗагружаемоеУведомление.ПометкаУдаления = Ложь;
					ЗаписыватьЭлемент = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ТипОповещения = Справочники.ТипыУведомленийАУСН.НайтиПоКоду(УведомлениеОСобытии.NotificationType);
			Если ТипОповещения.Пустая() Тогда
				ТипОповещения = Справочники.ТипыУведомленийАУСН.ТипУведомленияПоУмолчанию();
			КонецЕсли;
			Если ЗаписыватьЭлемент
			 Или ЗагружаемоеУведомление.ТипОповещения <> ТипОповещения Тогда
				ЗагружаемоеУведомление.ТипОповещения = ТипОповещения;
				ЗаписыватьЭлемент = Истина;
			КонецЕсли;
			
			ТекстВФорматеMarkdown = ПреобразоватьВТегиФорматнойСтроки(УведомлениеОСобытии.Message);
			Если ЗаписыватьЭлемент
			 Или ЗагружаемоеУведомление.ТекстВФорматеMarkdown <> ТекстВФорматеMarkdown Тогда
				ЗагружаемоеУведомление.ТекстВФорматеMarkdown = ТекстВФорматеMarkdown;
				ЗаписыватьЭлемент = Истина;
			КонецЕсли;
			
			ОбновитьРеквизитУведомления(ЗагружаемоеУведомление, "ДатаОбновления",    УведомлениеОСобытии, "LastUpdateDateTime", ЗаписыватьЭлемент);
			ОбновитьРеквизитУведомления(ЗагружаемоеУведомление, "ДатаСоздания",      УведомлениеОСобытии, "CreationDateTime",   ЗаписыватьЭлемент);
			ОбновитьРеквизитУведомления(ЗагружаемоеУведомление, "Наименование",      УведомлениеОСобытии, "Header",             ЗаписыватьЭлемент);
			ОбновитьРеквизитУведомления(ЗагружаемоеУведомление, "ТекстВФорматеPush", УведомлениеОСобытии, "ShortMessage",       ЗаписыватьЭлемент);
			
			Если Не ЗаписыватьЭлемент Тогда
				Если Не ЗагружаемоеУведомлениеСсылка.Пустая() Тогда
					РазблокироватьДанныеДляРедактирования(ЗагружаемоеУведомлениеСсылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ПроверитьРанееСозданныеФайлы = Не ЗагружаемоеУведомлениеСсылка.Пустая();
			
			Попытка
				
				ЗагружаемоеУведомление.СтатусОповещения = Перечисления.СтатусыОповещенийАУСН.НеПрочитано;
				ЗагружаемоеУведомление.Записать();
				Если Не ЗагружаемоеУведомлениеСсылка.Пустая() Тогда
					РазблокироватьДанныеДляРедактирования(ЗагружаемоеУведомлениеСсылка);
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				
				ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
				ЗаписьЖурналаРегистрации(ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.УведомленияАУСН,
					ЗагружаемоеУведомлениеСсылка,
					ТекстОшибки);
					
				Если Не ЗагружаемоеУведомлениеСсылка.Пустая() Тогда
					РазблокироватьДанныеДляРедактирования(ЗагружаемоеУведомлениеСсылка);
				КонецЕсли;
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
			ОбновитьПриложенныеФайлы(ЗагружаемоеУведомление, ПроверитьРанееСозданныеФайлы,
									УведомлениеОСобытии.AttachmentsMeta, ПутьРаспаковкиФайлов);
			
		КонецЦикла;
			
	КонецЦикла;
		
	УдалитьФайлы(ПутьРаспаковкиФайлов, "*");
		
КонецПроцедуры

// Отправляем уведомления через систему взаимодействия.
//
// Параметры:
//  ПараметрыЧата - Структура - см. НовыйПараметрыЧата()
//
Процедура ПоказатьОповещения(ПараметрыЧата) Экспорт

	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыЧата.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомленияАУСН.Код КАК Идентификатор,
	|	УведомленияАУСН.Наименование КАК Заголовок,
	|	УведомленияАУСН.ТекстВФорматеMarkdown КАК ТекстВФорматеMarkdown,
	|	УведомленияАУСН.ТекстВФорматеPush КАК ТекстВФорматеPush,
	|	УведомленияАУСН.ДатаОбновления КАК ДатаОбновления,
	|	УведомленияАУСН.ДатаСоздания КАК ДатаСоздания,
	|	УведомленияАУСН.ТипОповещения КАК ТипОповещенияСсылка,
	|	УведомленияАУСН.ТипОповещения.Код КАК ТипОповещения,
	|	УведомленияАУСН.СтатусОповещения КАК СтатусОповещенияСсылка,
	|	УведомленияАУСН.СтатусОповещения.Порядок КАК СтатусОповещения,
	|	УведомленияАУСН.Ссылка КАК Ссылка,
	|	УведомленияАУСН.ПолученаОшибка КАК ПолученаОшибка
	|ИЗ
	|	Справочник.УведомленияАУСН КАК УведомленияАУСН
	|ГДЕ
	|	УведомленияАУСН.СтатусОповещения = ЗНАЧЕНИЕ(Перечисление.СтатусыОповещенийАУСН.НеПрочитано)
	|	И УведомленияАУСН.Организация = &Организация
	|	И НЕ УведомленияАУСН.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбновления";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЧата = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ПараметрыЧата.ИдентификаторЧата);
	
	ПользовательБота = СистемаВзаимодействия.ПолучитьПользователя(
		Новый ИдентификаторПользователяСистемыВзаимодействия(ПараметрыЧата.ИдентификаторПомощника));
	ВыборкаОповещений = Результат.Выбрать();
	Пока ВыборкаОповещений.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ВыборкаОповещений.Ссылка);
		Исключение
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось подготовить для показа пользователю ранее загруженное уведомление от ФНС для %1.
                      |Header = %2
                      |MessageId = %3
                      |%4'"),
				ПараметрыЧата.Организация, ВыборкаОповещений.Заголовок, ВыборкаОповещений.Идентификатор, ОписаниеОшибки());
			
			ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.УведомленияАУСН,
				ВыборкаОповещений.Ссылка,
				ТекстОшибки);
				
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		РазмерДлинногоТекста = 1024; // большее количество символов считаем длинным текстом
		ДлинныйТекстУведомления = (СтрДлина(ВыборкаОповещений.ТекстВФорматеMarkdown) > РазмерДлинногоТекста);
		ТекстСообщения = ?(ДлинныйТекстУведомления, ВыборкаОповещений.ТекстВФорматеPush, ВыборкаОповещений.ТекстВФорматеMarkdown);
		
		// Задаем текст уведомления.
		Если ВыборкаОповещений.ПолученаОшибка Тогда
			ТекстСообщения = СтрШаблон("<b><span style=""color:РезультатПроблемаЦвет"">Не удалось получить информацию от ФНС</b>
										|%1", ТекстСообщения);
		Иначе
			ТекстСообщения = СтрШаблон("<b>%1</b>
										|%2",
							ВыборкаОповещений.Заголовок, ТекстСообщения);
		КонецЕсли;
		ТекстСообщения = СтроковыеФункции.ФорматированнаяСтрока(ТекстСообщения);
		
		ОтправляемоеСообщение = Обсуждения.ОписаниеСообщения(ТекстСообщения);
		
		// Добавляем данные файлов к сообщению.
		ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПриложенныеФайлы = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВыборкаОповещений.Ссылка, ПриложенныеФайлы);
		Для Каждого ПриложенныйФайл Из ПриложенныеФайлы Цикл		
			
			Попытка
				
				ОписаниеФайла = РаботаСФайлами.ДанныеФайла(ПриложенныйФайл, ПараметрыДанных);
				
			Исключение
				
				ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
				ЗаписьЖурналаРегистрации(ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.УведомленияАУСН,
					ВыборкаОповещений.Ссылка,
					ОписаниеОшибки());
				
			КонецПопытки;
			
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
			ОписаниеВложения = Обсуждения.ОписаниеВложения(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(), ОписаниеФайла.ИмяФайла);
			ДвоичныеДанныеФайла = Неопределено;
			УдалитьИзВременногоХранилища(ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
			ОписаниеВложения.ТипСодержимого = ТипСодержимогоПоРасширению(ОписаниеФайла.Расширение);
			ОтправляемоеСообщение.Вложения.Добавить(ОписаниеВложения);			
			
		КонецЦикла;
		
		// Сохраняем вместе с сообщением дополнительные свойства.
		ДанныеСообщения = НовыйДанныеСообщения();
		ЗаполнитьЗначенияСвойств(ДанныеСообщения, ВыборкаОповещений);
		ОтправляемоеСообщение.Данные = ДанныеСообщения; // при отправке сообщения будет сериализовано в JSON
		
		// Определяем доступные действия для сообщения.
		Если ДлинныйТекстУведомления Тогда
			// Основное действие.
			ОтправляемоеСообщение.Действия.Добавить("ОткрытьУведомление", НСтр("ru = 'Подробнее'"));
			
		КонецЕсли;
		
		// Дополнительное действие.
		ИмяДействия = "";
		Если ВыборкаОповещений.ТипОповещенияСсылка = Справочники.ТипыУведомленийАУСН.СнятиеСАУСН Тогда
			
			ИмяДействия = "СнятиеСАУСН";
			ОписаниеДействия = НСтр("ru = 'Изменить систему налогообложения'");
			
		ИначеЕсли ВыборкаОповещений.ТипОповещенияСсылка = Справочники.ТипыУведомленийАУСН.УведомлениеОРассчитанномНалоге Тогда
			
			ИмяДействия = "УведомлениеОРассчитанномНалоге";
			ОписаниеДействия = НСтр("ru = 'Просмотреть расчет налога'");
			
		КонецЕсли;
		Если Не ПустаяСтрока(ИмяДействия) Тогда
			ОтправляемоеСообщение.Действия.Добавить(ИмяДействия, ОписаниеДействия);
		КонецЕсли;
		
		Если ВыборкаОповещений.ПолученаОшибка Тогда
			ОтправляемоеСообщение.Действия.Добавить(
				РаботаСОповещениямиОСостоянииОбменаССервисамиКлиентСервер.ИмяДействияЛичныйКабинетБанка(),
				НСтр("ru = 'Сообщить об ошибке в техподдержку банка'"));
		КонецЕсли;
		
		Попытка
			
			Обсуждения.ОтправитьУведомление(ПользовательБота, ОтправляемоеСообщение, ИдентификаторЧата);
			
			УведомлениеОбъект = ВыборкаОповещений.Ссылка.ПолучитьОбъект();
			УведомлениеОбъект.СтатусОповещения = Перечисления.СтатусыОповещенийАУСН.Прочитано;
			УведомлениеОбъект.Записать();
			УведомлениеОбъект = Неопределено;
			
			РазблокироватьДанныеДляРедактирования(ВыборкаОповещений.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось вывести сообщение от ФНС для %1.
					 |Header = %2
                     |MessageId = %3
                     |%4'"),
				ПараметрыЧата.Организация, ВыборкаОповещений.Заголовок, ВыборкаОповещений.Идентификатор, ОписаниеОшибки());
			
			ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.УведомленияАУСН,
				ВыборкаОповещений.Ссылка,
				ОписаниеОшибки());
				
			РазблокироватьДанныеДляРедактирования(ВыборкаОповещений.Ссылка);
			ОтменитьТранзакцию();
		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяем тип содержимого по расширению файла.
//
// Параметры:
//  РасширениеИмениФайла - Строка - исходное имя файла для вывода в системе взаимодействия.
//
// Возвращаемое значение:
//   Строка      - MIME-тип согласно RFC. Значение по-умолчанию "application/octet-stream".
//
Функция ТипСодержимогоПоРасширению(Знач РасширениеИмениФайла) Экспорт
	
	Перем ТипСодержимого;
	
	РасширениеИмениФайла = НРег(РасширениеИмениФайла);
	Если РасширениеИмениФайла = "xml" Тогда
		ТипСодержимого = "application/xml";
	ИначеЕсли РасширениеИмениФайла = "pdf" Тогда
		ТипСодержимого = "application/pdf";
	ИначеЕсли РасширениеИмениФайла = "xlsx" Тогда
		ТипСодержимого = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";	
	ИначеЕсли РасширениеИмениФайла = "xlsm" Тогда
		ТипСодержимого = "application/vnd.ms-excel.sheet.macroEnabled.12";
	ИначеЕсли РасширениеИмениФайла = "xls" Тогда
		ТипСодержимого = "application/vnd.ms-excel";
	ИначеЕсли РасширениеИмениФайла = "ods" Тогда
		ТипСодержимого = "application/vnd.oasis.opendocument.spreadsheet";
	ИначеЕсли РасширениеИмениФайла = "odt" Тогда
		ТипСодержимого = "application/vnd.oasis.opendocument.text";
	ИначеЕсли РасширениеИмениФайла = "rtf" Тогда
		ТипСодержимого = "application/rtf";
	ИначеЕсли СтрНачинаетсяС(РасширениеИмениФайла, "doc") Тогда
		ТипСодержимого = "application/msword";
	ИначеЕсли РасширениеИмениФайла = "mxl" Тогда
		ТипСодержимого = "application/vnd.1c-mxl";
	ИначеЕсли РасширениеИмениФайла = "jpg"
	 Или РасширениеИмениФайла = "jpeg"
	 Или РасширениеИмениФайла = "jfif"
	 Или РасширениеИмениФайла = "jpe" Тогда
		ТипСодержимого = "image/jpeg";
	ИначеЕсли РасширениеИмениФайла = "png" Тогда
		ТипСодержимого = "image/png";
	ИначеЕсли СтрНачинаетсяС(РасширениеИмениФайла, "tif") Тогда
		ТипСодержимого = "image/tiff";
	ИначеЕсли РасширениеИмениФайла = "7z" Тогда
		ТипСодержимого = "application/x-7z-compressed";
	ИначеЕсли РасширениеИмениФайла = "gzip" Тогда
		ТипСодержимого = "application/gzip";
	ИначеЕсли СтрНайти(РасширениеИмениФайла, "zip") <> 0 Тогда
		ТипСодержимого = "application/zip";
	ИначеЕсли СтрНайти(РасширениеИмениФайла, "rar") <> 0 Тогда
		ТипСодержимого = "application/x-rar-compressed";
	ИначеЕсли СтрНайти(РасширениеИмениФайла, "htm") <> 0 Тогда
		ТипСодержимого = "text/html";
	Иначе
		ТипСодержимого = "application/octet-stream";
	КонецЕсли;
	
	Возврат ТипСодержимого;
	
КонецФункции

// Определяем картинку из имеющихся в конфигурации, которая подходит к файлу данного типа.
//
// Параметры:
//  ТипСодержимого - Строка - см. ТипСодержимогоПоРасширению()
//
// Возвращаемое значение:
//   Картинка     - подходящая к типу файла картинка.
//   Неопределено - если картинку подобрать не удалось.
//
Функция КартинкаПоТипуСодержимого(ТипСодержимого) Экспорт
	
	Перем КартинкаФайла;
	
	Если ТипСодержимого = "application/xml" Тогда
		КартинкаФайла = БиблиотекаКартинок.МетаданныеПакетыXDTO;
	ИначеЕсли ТипСодержимого = "application/pdf" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматPDF;
	ИначеЕсли ТипСодержимого = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматExcel2007;
	ИначеЕсли ТипСодержимого = "application/vnd.ms-excel"
		  Или ТипСодержимого = "application/vnd.ms-excel.sheet.macroEnabled.12" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматExcel;
	ИначеЕсли ТипСодержимого = "application/vnd.oasis.opendocument.spreadsheet" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	ИначеЕсли ТипСодержимого = "application/vnd.oasis.opendocument.text" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	ИначеЕсли ТипСодержимого = "application/msword"
		  Или ТипСодержимого = "application/rtf" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматWord;
	ИначеЕсли ТипСодержимого = "application/vnd.1c-mxl" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматMXL;
	ИначеЕсли ТипСодержимого = "image/jpeg" Тогда
		КартинкаФайла = БиблиотекаКартинок.ВставитьКартинкуJPG;
	ИначеЕсли ТипСодержимого = "image/png" Тогда
		КартинкаФайла = БиблиотекаКартинок.ВставитьКартинкуPNG;
	ИначеЕсли ТипСодержимого = "image/tiff" Тогда
		КартинкаФайла = БиблиотекаКартинок.МетаданныеОбщиеКартинки;
	ИначеЕсли ТипСодержимого = "application/x-7z-compressed"
		  Или ТипСодержимого = "application/gzip"
		  Или ТипСодержимого = "application/zip"
		  Или ТипСодержимого = "application/x-rar-compressed" Тогда
		КартинкаФайла = БиблиотекаКартинок.Папка;
	ИначеЕсли ТипСодержимого = "text/html" Тогда
		КартинкаФайла = БиблиотекаКартинок.ФорматHTML;
	КонецЕсли;
	
	Возврат КартинкаФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция ИмяПользовательИБПомощник(ПользовательскоеПредставление = Ложь)
	
	Если ПользовательскоеПредставление Тогда
		ИмяПомощника = НСтр("ru = 'Уведомления от ФНС'");
	Иначе
		ИмяПомощника = "ЧатБотУведомленияАУСНОтФНССлужебный";
	КонецЕсли;
	
	Возврат ИмяПомощника;
	
КонецФункции

Функция ДетализацияСобытияЖурналаРегистрацииУведомление()

	Возврат НСтр("ru = 'Уведомления от ФНС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция НовыйПараметрыЧата()
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ИдентификаторЧата", "");
	Результат.Вставить("ИдентификаторПомощника", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",         "00000000-0000-0000-0000-000000000000");
	Результат.Вставить("Заголовок",             НСтр("ru = 'Уведомление АУСН от ФНС'"));
	Результат.Вставить("ТекстВФорматеPush",     НСтр("ru = 'Текст уведомления отсутствует'"));
	Результат.Вставить("ДатаСоздания",          ТекущаяУниверсальнаяДата());
	Результат.Вставить("ДатаОбновления",        Результат.ДатаСоздания);
	
	// Код элемента справочника. Ссылка может быть получена как Справочники.ТипыУведомленийАУСН.НайтиПоКоду(ТипОповещения)
	Результат.Вставить("ТипОповещения", "");
	
	// Порядок в списке значений перечисления. Ссылка может быть получена как Перечисления.СтатусыОповещенийАУСН[СтатусОповещения] .
	Результат.Вставить("СтатусОповещения", 0);       
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПодготовитьБота()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяБотаПомощника = ИмяПользовательИБПомощник();
	Если Пользователи.НайтиПоИмени(ИмяБотаПомощника) = Неопределено Тогда
		// Пользователь ИБ для бота.
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя                       = ИмяБотаПомощника;
		ОписаниеПользователяИБ.ПолноеИмя                 = ИмяПользовательИБПомощник(Истина);
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль   = Истина;
		ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "";
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		
	КонецЕсли;
	
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИмяБотаПомощника);
	
	ИдентификаторБота = Неопределено;
	Попытка
		// Пользователь системы взаимодействия для бота.
		ИдентификаторБота = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(СвойстваПользователяИБ.УникальныйИдентификатор);
	Исключение
		// Обработка исключения не требуется
	КонецПопытки;
	
	Если ИдентификаторБота = Неопределено Тогда

		Попытка 
			ПользовательВзаимодействия = СистемаВзаимодействия.СоздатьПользователя(СвойстваПользователяИБ.ПользовательИБ);
			ПользовательВзаимодействия.Имя       = НСтр("ru='ФНС России'");
			ПользовательВзаимодействия.ПолноеИмя = НСтр("ru='ФНС России'");
			ПользовательВзаимодействия.Картинка  = БиблиотекаКартинок.ПлатформаСамозанятыеЛоготипФНС;
			ПользовательВзаимодействия.Записать();
			ИдентификаторБота = ПользовательВзаимодействия.Идентификатор;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при создании нового пользователя %1 системы взаимодействия:
                                          |%2'"),
							ИмяБотаПомощника,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
							
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
		КонецПопытки;

	КонецЕсли;
	
	Возврат ИдентификаторБота;
	
КонецФункции

Функция ПодготовитьЧат(ИдентификаторБота, Организация)
	
	СоставКлюча = Новый Массив;
	СоставКлюча.Добавить(ИмяПользовательИБПомощник());
	СоставКлюча.Добавить(Строка(Организация.УникальныйИдентификатор()));
	КлючЧата = СтрСоединить(СоставКлюча, "_");
	
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	ЗаголовокЧата = ?(ИспользуетсяНесколькоОрганизаций,
		СтрШаблон(НСтр("ru = 'ФНС России (%1)'"), Строка(Организация)),
		НСтр("ru = 'ФНС России'"));
	
	Отбор = Новый ОтборОбсужденийСистемыВзаимодействия;
	Отбор.Ключ = КлючЧата;
	Отбор.ТекущийПользовательЯвляетсяУчастником = Истина;
	ЧатыФНС = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
	Если ЧатыФНС.Количество() <> 0 Тогда // есть ранее созданный чат
		
		ЧатФНС = ЧатыФНС[0];
		Если ИспользуетсяНесколькоОрганизаций И ЧатФНС.Заголовок <> ЗаголовокЧата Тогда
			ЧатФНС.Заголовок = ЗаголовокЧата;
			ЧатФНС.Записать();
		КонецЕсли;
		Возврат ЧатФНС;
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Отбор.ТекущийПользовательЯвляетсяУчастником = Ложь;
	ЧатыФНС = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
	Если ЧатыФНС.Количество() <> 0 Тогда
		// Есть чат, но в нем нет нашего пользователя.
		ЧатФНС = ЧатыФНС[0];
		ЧатФНС.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
		Если Не ЧатФНС.Участники.Содержит(ИдентификаторБота) Тогда
			ЧатФНС.Участники.Добавить(ИдентификаторБота);
		КонецЕсли;
		
		// Удаляем заблокированных пользователей из чата.
		ЗаблокированныеПользователи = Новый Массив;
		Для Каждого ИдентификаторСВ Из ЧатФНС.Участники Цикл
			Если СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторСВ).Заблокирован Тогда
				ЗаблокированныеПользователи.Добавить(ИдентификаторСВ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИдентификаторСВ Из ЗаблокированныеПользователи Цикл
			ЧатФНС.Участники.Удалить(ИдентификаторСВ);
		КонецЦикла;
		
		Если ИспользуетсяНесколькоОрганизаций И ЧатФНС.Заголовок <> ЗаголовокЧата Тогда
			ЧатФНС.Заголовок = ЗаголовокЧата;
		КонецЕсли;
		
		ЧатФНС.Записать();
		Возврат ЧатФНС;
		
	КонецЕсли;
	
	// Нужно создать чат, добавив в него уполномоченных пользователей организации.
	ЗапросПользователей = Новый Запрос;
	ЗапросПользователей.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления";
	
	// Добавляем пользователей, имеющих доступ к бухгалтерии.
	УполномоченныеПользователи = Новый Массив;
	
	ВыборкаПользователей = ЗапросПользователей.Выполнить().Выбрать();
	Пока ВыборкаПользователей.Следующий() Цикл
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхБухгалтерии", ВыборкаПользователей.Ссылка) Тогда
			УполномоченныеПользователи.Добавить(ВыборкаПользователей.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	ПользователиОбсуждения = Обсуждения.ПользователиСистемыВзаимодействия(УполномоченныеПользователи);
	
	ЧатФНС = СистемаВзаимодействия.СоздатьОбсуждение();
	ЧатФНС.Ключ      = КлючЧата;
	ЧатФНС.Групповое = Истина;
	ЧатФНС.Заголовок = ЗаголовокЧата;
	ЧатФНС.Участники.Добавить(ИдентификаторБота);
	
	Для Каждого ПользовательОбсуждения Из ПользователиОбсуждения Цикл
		
		ПользовательСистемыВзаимодействия = ПользовательОбсуждения.Значение;
		Если Не ПользовательСистемыВзаимодействия.Заблокирован Тогда
			ЧатФНС.Участники.Добавить(ПользовательОбсуждения.Значение.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧатФНС.Записать();
	
	Возврат ЧатФНС;
	
КонецФункции

Процедура ОбновитьРеквизитУведомления(УведомлениеОбъект, ИмяРеквизита, УведомлениеXML, ИмяТега, ЗаписыватьОбъект)
	
	Если Не ЗаписыватьОбъект
	   И УведомлениеОбъект[ИмяРеквизита] = УведомлениеXML[ИмяТега] Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект[ИмяРеквизита] = УведомлениеXML[ИмяТега];
	ЗаписыватьОбъект = Истина;
	
КонецПроцедуры

Функция ПреобразоватьВТегиФорматнойСтроки(ТекстВФорматеMarkdown)
	
	ОтдельныеСтроки = СтрРазделить(ТекстВФорматеMarkdown, Символы.ПС, Истина);
	
	Для НомерСтроки = 0 По ОтдельныеСтроки.ВГраница() Цикл
		
		ОтдельнаяСтрока = ОтдельныеСтроки[НомерСтроки];
		
		// Жирный.
		НачалоТега = СтрНайти(ОтдельнаяСтрока, "**");
		Если НачалоТега <> 0 Тогда
			
			КонецТега = СтрНайти(ОтдельнаяСтрока, "**", , НачалоТега + 2);
			ОтдельнаяСтрока = СтрШаблон("%1<b>%2</b>%3",
				Лев(ОтдельнаяСтрока, НачалоТега - 1),
				Сред(ОтдельнаяСтрока, НачалоТега + 2, КонецТега - НачалоТега - 2),
				Сред(ОтдельнаяСтрока, КонецТега + 2));
			
		КонецЕсли;
		
		// Зачеркнутый.
		НачалоТега = СтрНайти(ОтдельнаяСтрока, "~~");
		Если НачалоТега <> 0 Тогда
			
			КонецТега = СтрНайти(ОтдельнаяСтрока, "~~", , НачалоТега + 2);
			ОтдельнаяСтрока = СтрШаблон("%1<span style=""font:ЗачеркнутыйШрифтБЭД"">%2</span>%3",
				Лев(ОтдельнаяСтрока, НачалоТега - 1),
				Сред(ОтдельнаяСтрока, НачалоТега + 2, КонецТега - НачалоТега - 2),
				Сред(ОтдельнаяСтрока, КонецТега + 2));
			
		КонецЕсли;
		
		// Курсив.
		НачалоТега = СтрНайти(ОтдельнаяСтрока, "*", , 2); // не в самом начале, т.к. не элемент списка
		Если НачалоТега <> 0 Тогда
			
			КонецТега = СтрНайти(ОтдельнаяСтрока, "*", , НачалоТега + 1);
			ОтдельнаяСтрока = СтрШаблон("%1<span style=""font:НаклонныйШрифтРаботаСНоменклатурой"">%2</span>%3",
				Лев(ОтдельнаяСтрока, НачалоТега - 1),
				Сред(ОтдельнаяСтрока, НачалоТега + 1, КонецТега - НачалоТега - 1),
				Сред(ОтдельнаяСтрока, КонецТега + 1));
			
		КонецЕсли;
		
		// Гиперссылка.
		НачалоТега = СтрНайти(ОтдельнаяСтрока, "](");
		Если НачалоТега <> 0 Тогда
			
			КонецТега = НачалоТега;
			НачалоТега = СтрНайти(ОтдельнаяСтрока, "[", НаправлениеПоиска.СКонца, КонецТега);
			ПредставлениеСсылки = Сред(ОтдельнаяСтрока, НачалоТега + 1, КонецТега - НачалоТега - 1);
			
			НачалоВырезания = НачалоТега;
			
			НачалоТега = КонецТега + 2;
			КонецТега = СтрНайти(ОтдельнаяСтрока, ")", НаправлениеПоиска.СНачала, НачалоТега);
			Если КонецТега = 0 Тогда
				КонецТега = СтрДлина(ОтдельнаяСтрока) + 1;
			КонецЕсли;
			ЗначениеСсылки = Сред(ОтдельнаяСтрока, НачалоТега, КонецТега - НачалоТега);
			
			КонецВырезация = КонецТега;
			
			ОтдельнаяСтрока = СтрШаблон("%1<a href=""%2"">%3</a>%4",
				Лев(ОтдельнаяСтрока, НачалоВырезания - 1),
				ЗначениеСсылки,
				ПредставлениеСсылки,
				Сред(ОтдельнаяСтрока, КонецВырезация + 1));
			
		КонецЕсли;
		
		ОтдельныеСтроки[НомерСтроки] = ОтдельнаяСтрока;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ОтдельныеСтроки, Символы.ПС);
	
КонецФункции

Процедура ОбновитьПриложенныеФайлы(УведомлениеОбъект, ПроверитьРанееСозданныеФайлы, ПриложенныеФайлыXML, ПутьРаспаковкиФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РанееСозданныеФайлы = Новый Соответствие;
	Если ПроверитьРанееСозданныеФайлы Тогда
		
		ФайлыУведомления = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(УведомлениеОбъект.Ссылка, ФайлыУведомления);
		ФайлыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ФайлыУведомления, "Наименование,Расширение");
		
		Для Каждого РанееСозданный Из ФайлыУведомления Цикл
			
			ОписаниеФайла = РанееСозданный.Значение;
			РанееСозданныеФайлы.Вставить(
				ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ОписаниеФайла.Наименование, ОписаниеФайла.Расширение),
				РанееСозданный.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПользовательБота = Пользователи.НайтиПоИмени(ИмяПользовательИБПомощник());
	Для Каждого ПриложенныйФайл Из ПриложенныеФайлыXML Цикл // по приложенным к уведомлению файлам
					
		ФайлНаДиске = Новый Файл(ПутьРаспаковкиФайлов + ПриложенныйФайл.Name);
		Если Не ФайлНаДиске.Существует() Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В архиве рядом с файлом-манифестом должны быть файлы, перечисленные в теге ""AttachmentsMeta"".
                                          |Файл с именем ""%1"" не найден.
                                          |Header = %2
                              			  |MessageId = %3'"),
							ПриложенныйФайл.Name,
							УведомлениеОбъект.Наименование,
							УведомлениеОбъект.Код);
							
			ИмяСобытия = ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(ДетализацияСобытияЖурналаРегистрацииУведомление());
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.УведомленияАУСН,
				УведомлениеОбъект.Ссылка,
				ТекстОшибки);
			Продолжить;
			
		КонецЕсли;
		
		АдресДанныхФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьРаспаковкиФайлов + ПриложенныйФайл.Name));
		
		РанееСозданный = ?(ПроверитьРанееСозданныеФайлы, РанееСозданныеФайлы[ПриложенныйФайл.Name], Неопределено);
		Если РанееСозданный = Неопределено Тогда // записываем новый
			
			ИнформацияОФайле = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура);
			ИнформацияОФайле.Автор                       = ПользовательБота;
			ИнформацияОФайле.ВладелецФайлов              = УведомлениеОбъект.Ссылка;
			ИнформацияОФайле.ВремяИзмененияУниверсальное = УведомлениеОбъект.ДатаОбновления;
			ИнформацияОФайле.Служебный                   = Истина;
			
			РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПриложенныйФайл.Name);
			Если ПустаяСтрока(РасширениеФайла) Тогда
				ИнформацияОФайле.ИмяБезРасширения = ПриложенныйФайл.Name;
				ИнформацияОФайле.РасширениеБезТочки = "";
			Иначе
				ИнформацияОФайле.ИмяБезРасширения = Лев(ПриложенныйФайл.Name, СтрДлина(ПриложенныйФайл.Name) - СтрДлина(РасширениеФайла) - 1);
				ИнформацияОФайле.РасширениеБезТочки = РасширениеФайла;
			КонецЕсли;
			
			Описание = СтрШаблон(НСтр("ru = 'Приложение к уведомлению АУСН от ФНС. Id = %1
                                       |Header = %2
                                       |MessageId = %3'"),
						ПриложенныйФайл.Id, УведомлениеОбъект.Наименование, УведомлениеОбъект.Код);
			
			РаботаСФайлами.ДобавитьФайл(ИнформацияОФайле, АдресДанныхФайла, , Описание)
			
		Иначе // обновляем ранее созданный
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресДанныхФайла);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   УведомлениеОбъект.ДатаОбновления);
			
			РаботаСФайлами.ОбновитьФайл(РанееСозданный, ИнформацияОФайле);
			
		КонецЕсли;
		УдалитьИзВременногоХранилища(АдресДанныхФайла);
					
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
