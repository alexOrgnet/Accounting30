
#Область КалендарьБухгалтера

// Возвращает данные для внешнего интерфейса календаря бухгалтера по налоговым платежам.
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
Функция ПубликуемыеНалоговыеСобытияКалендаряБухгалтера() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииКалендаряБухгалтера();
	
	ПубликуемыеЗадачи = ПубликуемыеЗадачиОрганизаций(ПубликуемыеОрганизации);
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		
		ПубликуемыеДанныеОрганизации = ДанныеСобытийКалендаряБухгалтераПоОрганизации(
			ПубликуемыеДанные, ДанныеОбОрганизации, ПубликуемыеЗадачи);
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеОрганизации);
		
		// Выполним быстрое обновление задач бухгалтера:
		//  - Если задачи актуальны, то обновление не будет запущено сейчас, а запланируется к выполнению позже.
		//  - Если задачи не актуальны, то обновление будет запущено сейчас в фоне.
		//    Результаты обновления можно будет получить при следующем запросе.
		УстановитьПривилегированныйРежим(Истина);
		КалендарьБухгалтера.ОбновитьЗадачи(ДанныеОбОрганизации.Организация, Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

// Возвращает данные с датами обновления календаря бухгалтера для внешнего 
// интерфейса календаря бухгалтера по налоговым платежам.
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
Функция ПубликуемыеДатыАктуальностиНалоговыхСобытийКалендаряБухгалтера() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииКалендаряБухгалтера();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		
		ПубликуемыеДанныеОрганизации = ДанныеДатыАктуальностиСобытийКалендаряБухгалтераПоОрганизации(
			ПубликуемыеДанные, ДанныеОбОрганизации);
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеОрганизации);
		
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

// Помещает задачу, соответствующую переданному хешу, в архив.
//
// Параметры:
//   Параметры - Структура - структура с ключами:
//      * Идентификатор - Строка - хеш-сумма задачи.
//      * Выполнено     - Булево - признак выполнения задачи.
//                                 Если Истина - задача помещается в архив, Ложь - помещается в список актуальных.
//
Процедура УстановитьСтатусЗадачи(Параметры) Экспорт
	
	КлючЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючЗадачиПоХешу(Параметры.Идентификатор);
	
	Если КлючЗадачи <> Неопределено Тогда
		РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(КлючЗадачи, Параметры.Выполнено);
	КонецЕсли;
	
КонецПроцедуры

// Формирует описание ссылки для вызова извне внешнего программного интерфейса (endpoint).
// Описание предназначено для передачи вызывающей стороне. Сериализуется в JSON.
//
// Параметры:
//   ИдентификаторЗадачи - Строка - идентификатор задачи.
//   Выполнено - Булево - статус задачи.
//
// Возвращаемое значение:
//   Структура, Неопределено - описание публикуемой ссылки или Неопределено, если описание сформировать не удалось.
//
Функция ОписаниеПубликуемойСсылкиВыполнениеЗадачи(ИдентификаторЗадачи, Выполнено) Экспорт
	
	Если ТипЗнч(ИдентификаторЗадачи) <> Тип("Строка") Или ПустаяСтрока(ИдентификаторЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСсылки = Новый Структура;
	
	ОписаниеСсылки.Вставить("Идентификатор", "tasks_status");
	ОписаниеСсылки.Вставить("Представление", НСтр("ru = 'Уже оплачено'"));
	ОписаниеСсылки.Вставить("АдресСервиса", "hs/api/v1/tasks/status");
	ОписаниеСсылки.Вставить("Параметры", Новый Структура);
	
	ОписаниеСсылки.Параметры.Вставить("id", ИдентификаторЗадачи);
	ОписаниеСсылки.Параметры.Вставить("done", Выполнено);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

#КонецОбласти

#Область МониторОсновныхПоказателей

// Возвращает данные для внешнего интерфейса монитора основных показателей.
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
Функция ПубликуемыеДанныеМонитора() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииМонитораОсновныхПоказателей();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		
		ПубликуемыеДанныеОрганизации = ДанныеМонитораОсновныхПоказателейПоОрганизации(
			ПубликуемыеДанные, ДанныеОбОрганизации);
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеОрганизации);
		
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

// Возвращает дату актуальности внешнего интерфейса монитора основных показателей.
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
Функция ПубликуемыеДатыОбновленияМонитора() Экспорт
	
	ПубликуемыеРазделыМонитора = Перечисления.РазделыМонитораРуководителя.ПубликуемыеРазделыМонитораРуководителя();
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииМонитораОсновныхПоказателей();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		
		ПубликуемыеДанныеОрганизации = ДанныеОбновленияМонитораОсновныхПоказателейПоОрганизации(
			ПубликуемыеДанные, ДанныеОбОрганизации);
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеОрганизации);
		
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

#КонецОбласти

#Область БанковскиеСчета

// Возвращает данные банковских счетов организаций для внешнего интерфейса
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
// Возвращаемое значение:
//   Структура - описание публикуемых банковских счетов.
//
Функция ПубликуемыеДанныеБанковскихСчетов() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииБанковскихСчетов();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		ПубликуемыеДанныеБанковскихСчетовОрганизации = НовыйПубликуемыеДанныеБанковскихСчетовОрганизации();
		ЗаполнитьПубликуемыеДанныеОбОрганизации(
			ПубликуемыеДанныеБанковскихСчетовОрганизации.organization, ДанныеОбОрганизации);
		ЗаполнитьЗначенияСвойств(ПубликуемыеДанныеБанковскихСчетовОрганизации,
			Справочники.БанковскиеСчета.ПубликуемыеДанные(ДанныеОбОрганизации.Организация),
			Справочники.БанковскиеСчета.ПубликуемыйИдентификатор());
		
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеБанковскихСчетовОрганизации);
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

#КонецОбласти

#Область ТарифыСтраховыхВзносовИП

// Возвращает данные применяемого тарифа страховых взносов в организации для внешнего интерфейса
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
// Возвращаемое значение:
//   Структура - описание применяемого тарифа страховых взносов.
//     * organizations - Массив - содержит данные применяемым тарифам в организациях
//        ** organization - Структура
//           *** inn - Строка - ИНН организации
//           *** kpp - Строка - КПП организации
//           *** name - Строка - Краткое наименование организации
//        ** tariff - Строка - Наименование тарифа
//        ** payment - Булево - Признак того, что предприниматель платит страховые взносы
//        ** date - Дата - Дата, с которой применяется текущий тариф
//
Функция ПубликуемыеДанныеТарифаСтраховыхВзносовИП() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииДляТарифовСтраховыхВзносовИП();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		ПубликуемыеДанныеТарифыСтраховыхВзносовИП = НовыйПубликуемыеДанныеТарифыСтраховыхВзносовИП();
		ЗаполнитьПубликуемыеДанныеОбОрганизации(
			ПубликуемыеДанныеТарифыСтраховыхВзносовИП.organization, ДанныеОбОрганизации);
		ЗаполнитьЗначенияСвойств(ПубликуемыеДанныеТарифыСтраховыхВзносовИП,
			РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.ПубликуемыеДанные(ДанныеОбОрганизации.Организация));
		
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеТарифыСтраховыхВзносовИП);
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции 

#КонецОбласти

#Область СтавкиУСН

// Возвращает данные о применяемых ставках УСН в организации для внешнего интерфейса
// По данным можно сформировать JSON с помощью ЗаписьJSON.ЗаписатьJSON
//
// Возвращаемое значение:
//   Структура - описание публикуемых банковских счетов.
//
Функция ПубликуемыеДанныеСтавокУСН() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииДляСтавокУСН();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		ПубликуемыеДанныеСтавокУСН = НовыйПубликуемыеДанныеСтавкиУСН();
		ЗаполнитьПубликуемыеДанныеОбОрганизации(
			ПубликуемыеДанныеСтавокУСН.organization, ДанныеОбОрганизации);
		ЗаполнитьЗначенияСвойств(ПубликуемыеДанныеСтавокУСН,
			РегистрыСведений.НастройкиУчетаУСН.ПубликуемыеДанные(ДанныеОбОрганизации.Организация));
		
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеСтавокУСН);
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

#КонецОбласти

#Область РегламентированнаяОтчетность

Функция ПубликуемыеДанныеСообщенияРегламентированнойОтчетности() Экспорт
	
	ПубликуемыеОрганизации = ПубликуемыеОрганизацииРегламентированнаяОтчетность();
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("organizations", Новый Массив);
	
	Для Каждого ДанныеОбОрганизации Из ПубликуемыеОрганизации Цикл
		ПубликуемыеДанныеПоОрганизации = НовыйПубликуемыеДанныеРегламентированнаяОтчетность();
		ЗаполнитьПубликуемыеДанныеОбОрганизации(ПубликуемыеДанныеПоОрганизации.organization, ДанныеОбОрганизации);
		ЗаполнитьЗначенияСвойств(ПубликуемыеДанныеПоОрганизации, 
			ПубликуемыеСообщенияРегламентированнойОтчетности(ДанныеОбОрганизации.Организация));
		
		ПубликуемыеДанные.organizations.Добавить(ПубликуемыеДанныеПоОрганизации);
	КонецЦикла;
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРегламентированнаяОтчетность

Функция ПубликуемыеОрганизацииРегламентированнаяОтчетность()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции

Функция НовыйПубликуемыеДанныеРегламентированнаяОтчетность()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить("status", "");
	ПубликуемыеДанныеОрганизации.Вставить("description", "");
	ПубликуемыеДанныеОрганизации.Вставить("link", "");
	ПубликуемыеДанныеОрганизации.Вставить("messages", Неопределено);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Функция ПубликуемыеСообщенияРегламентированнойОтчетности(Организация)
	
	ПубликуемыеДанные = НовыйПубликуемыеСообщенияРегламентированнойОтчетности();

	ПараметрыОтчетности = ПараметрыОтчетности(Организация);
	
	ОтчетностьПодключена = ПараметрыОтчетности.Отчетность_ОтчетностьПодключена;
	СостоянияОтчетности = БлокиИнформационнойПанели.СостоянияРегламентированнойОтчетности();
	ПользовательНачалИспользоватьОтчетность = ПараметрыОтчетности.ПользовательНачалИспользоватьОтчетность;

	ПубликуемыеДанные.status      = ПараметрыОтчетности.Состояние;
	ПубликуемыеДанные.description = Строка(ПараметрыОтчетности.Отчетность_ТекстБаннера);
	
	Если ОтчетностьПодключена
		Или ПараметрыОтчетности.Состояние = СостоянияОтчетности.Подключено Тогда
		// Отчетность уже подключена, но не отправлено ни одного отчета,
		// или заявление одобрено, но до конца отчетность еще не подключена.
		// Нужно показать, что все готово и можно отправлять отчеты.
		СообщенияОтчетности = ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ПолучитьНовыеСообщенияОтчетности(Организация);
		
		Если ПользовательНачалИспользоватьОтчетность Тогда
			Если ЕстьНовыеСообщения(СообщенияОтчетности) Тогда
				ПубликуемыеДанные.description = "";
			Иначе
				ПубликуемыеДанные.description = НСтр("ru = 'Новых сообщений нет'");
			КонецЕсли;
		КонецЕсли;
		
		ПубликуемыеДанные.messages = СообщенияРегламентированнойОтчетности(Организация, СообщенияОтчетности);
	КонецЕсли;
	
	ПубликуемыеДанные.link = СсылкаНаДействие(Организация, ПараметрыОтчетности);
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

Функция СсылкаНаДействие(Организация, ПараметрыОтчетности)
	
	СостоянияОтчетности = БлокиИнформационнойПанели.СостоянияРегламентированнойОтчетности();
	ОтчетностьПодключена = ПараметрыОтчетности.Отчетность_ОтчетностьПодключена;
	ПользовательНачалИспользоватьОтчетность = ПараметрыОтчетности.ПользовательНачалИспользоватьОтчетность;

	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	ПараметрыПубликации.Организация = Организация;
	
	Ссылка = "";
	
	Если ПараметрыОтчетности.Состояние = СостоянияОтчетности.ПодпискаОтсутствует Тогда
		
		Ссылка = ПараметрыОтчетности.Ссылка;
		
	ИначеЕсли ПараметрыОтчетности.Состояние = СостоянияОтчетности.Отключено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыПубликации.ПараметрыФормы = ПараметрыФормы;
		ПараметрыПубликации.ИмяФормы = "Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.Мастер_ОпределениеОткрываемойФормы";

	ИначеЕсли ОтчетностьПодключена
		Или ПараметрыОтчетности.Состояние = СостоянияОтчетности.Подключено Тогда
		
		СообщенияОтчетности = ЭлектронныйДокументооборотСКонтролирующимиОрганамиБП.ПолучитьНовыеСообщенияОтчетности(Организация);
		
		Если ПользовательНачалИспользоватьОтчетность Тогда
			ПараметрыФормы = Новый Структура("Раздел", Перечисления.СтраницыЖурналаОтчетность.Новое);
		Иначе
			ПараметрыФормы = Новый Структура("Раздел", Перечисления.СтраницыЖурналаОтчетность.Отчеты);
		КонецЕсли;

		ПараметрыПубликации.ИмяФормы = "ОбщаяФорма.РегламентированнаяОтчетность";
		
		ПараметрыПубликации.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ПараметрыОтчетности.Состояние  = СостоянияОтчетности.ЗаявлениеОтправлено
		Или ПараметрыОтчетности.Состояние = СостоянияОтчетности.ЗаявлениеОтклонено Тогда
		
		Ссылка = ПолучитьНавигационнуюСсылку(ПараметрыОтчетности.Отчетность_ЗаявлениеНаПодключение);
			
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Ссылка)
			И ЗначениеЗаполнено(ПараметрыПубликации.ИмяФормы) Тогда
		Ссылка = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ЕстьНовыеСообщения(СообщенияОтчетности)
	
	ТипыСообщений = СообщенияОтчетности.Скопировать(, "Приоритет");
	ТипыСообщений.Свернуть(" Приоритет");
	
	// Строки с приоритетом 0 не обрабатываются, удаляем их
	УдаляемыеСтроки = ТипыСообщений.НайтиСтроки(Новый Структура("Приоритет", 0));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТипыСообщений.Удалить(УдаляемаяСтрока);
	КонецЦикла;
		
	Возврат ТипыСообщений.Количество() > 0;
	
КонецФункции

Функция НовыйПубликуемыеСообщенияРегламентированнойОтчетности()
	
	ПубликуемыеДанные = Новый Структура;
	ПубликуемыеДанные.Вставить("status", "");
	ПубликуемыеДанные.Вставить("description", "");
	ПубликуемыеДанные.Вставить("link", "");
	ПубликуемыеДанные.Вставить("messages", Новый Массив);
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

Функция СообщенияРегламентированнойОтчетности(Организация, СообщенияОтчетности)
	
	Перем НовоеИмяКолонки;
	
	СообщенияОтчетности.Колонки.Добавить("ПриоритетПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	Для Каждого Сообщение Из СообщенияОтчетности Цикл
		Сообщение.ПриоритетПредставление = ПредставлениеПриоритетаСообщенийОтчетности(Сообщение.ТипСообщения);
	КонецЦикла;
	СообщенияОтчетности.Сортировать("Приоритет ВОЗР, ДатаСообщения УБЫВ");
	
	// Переименуем колонки.
	СловарьПеревода = ПереименованиеПолейОтчетности();
	ЛишниеКолонки = Новый Массив;
	Для Каждого Колонка Из СообщенияОтчетности.Колонки Цикл
		Если СловарьПеревода.Свойство(Колонка.Имя, НовоеИмяКолонки) Тогда
			Колонка.Имя = НовоеИмяКолонки;
		Иначе
			ЛишниеКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Все непереименованные колонки удалим, чтобы они не попали в ответ API.
	Для Каждого Колонка Из ЛишниеКолонки Цикл
		СообщенияОтчетности.Колонки.Удалить(Колонка);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СообщенияОтчетности);
	
КонецФункции

Функция ПредставлениеПриоритетаСообщенийОтчетности(ТипСообщений)
	
	Если ТипСообщений = "ОтклоненныйОтчет"
		Или ТипСообщений = "Требование" Тогда
		Возврат "Важное"; // Не локализуется.
	Иначе
		Возврат "Обычное"; // Не локализуется.
	КонецЕсли;
	
КонецФункции

Функция ПереименованиеПолейОтчетности()
	
	Словарь = Новый Структура;
	Словарь.Вставить("ТипСообщения", "type");
	Словарь.Вставить("Наименование", "text");
	Словарь.Вставить("ДатаСообщения", "date");
	Словарь.Вставить("ПриоритетПредставление", "priority");
	
	Возврат Словарь;
	
КонецФункции

Функция ПараметрыОтчетности(Организация)
	
	Параметры = БлокиИнформационнойПанели.НовыйПараметрыПолученияБаннераОтчетность();
	Параметры.Организация                       = Организация;
	Параметры.ВыводитьДополнительныйРазделитель = Ложь;
	Параметры.ВыводитьСсылкиВТекст              = Ложь;
	
	Возврат БлокиИнформационнойПанели.ПодготовленныеПараметрыОтчетности(Параметры);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБанковскиеСчета

Функция ПубликуемыеОрганизацииБанковскихСчетов()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"Справочник.БанковскиеСчета");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции

Функция НовыйПубликуемыеДанныеБанковскихСчетовОрганизации()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить(
		Справочники.БанковскиеСчета.ПубликуемыйИдентификатор(), Новый Структура);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииТарифыСтраховыхВзносовИП

Функция ПубликуемыеОрганизацииДляТарифовСтраховыхВзносовИП()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции 

Функция НовыйПубликуемыеДанныеТарифыСтраховыхВзносовИП()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить("tariff", "");
	ПубликуемыеДанныеОрганизации.Вставить("payment", Истина);
	ПубликуемыеДанныеОрганизации.Вставить("date", '00010101');

	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтавкиУСН

Функция ПубликуемыеОрганизацииДляСтавокУСН()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрыСведений.НастройкиУчетаУСН");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции 

Функция НовыйПубликуемыеДанныеСтавкиУСН()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить("rate", 6);
	ПубликуемыеДанныеОрганизации.Вставить("article", "");
	ПубликуемыеДанныеОрганизации.Вставить("paragraph", "");
	ПубликуемыеДанныеОрганизации.Вставить("subparagraph", "");
	ПубликуемыеДанныеОрганизации.Вставить("tax_holiday", Ложь);
	ПубликуемыеДанныеОрганизации.Вставить("date", '00010101');

	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКалендарьБухгалтера

Функция ПубликуемыеОрганизацииКалендаряБухгалтера()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрСведений.ЗадачиБухгалтера");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции

Функция ПубликуемыеЗадачиОрганизаций(ПубликуемыеОрганизации)
	
	ОтборЗадачПоВидам = КалендарьБухгалтера.НовыйНовыйОтборЗадачПоВидам();
	ОтборЗадачПоВидам.РегулярныеПлатежи              = Ложь;
	ОтборЗадачПоВидам.ПроверкиКонтролируеющихОрганов = Ложь;
	Организации = ПубликуемыеОрганизации.ВыгрузитьКолонку("Организация");
	
	ЗадачиОрганизаций = КалендарьБухгалтера.СобытияКалендаряБухгалтера(Организации, ОтборЗадачПоВидам);
	
	ПросроченныеЗадачи = КалендарьБухгалтера.КоличествоПросроченныхСобытийКалендаряБухгалтера(
		Организации, ОтборЗадачПоВидам);
	
	ПубликуемыеЗадачи = Новый Структура();
	ПубликуемыеЗадачи.Вставить("ЗадачиОрганизаций", ЗадачиОрганизаций);
	ПубликуемыеЗадачи.Вставить("ПросроченныеЗадачи", ПросроченныеЗадачи);
	Возврат ПубликуемыеЗадачи;
	
КонецФункции

Функция ДанныеСобытийКалендаряБухгалтераПоОрганизации(ПубликуемыеДанные, ДанныеОбОрганизации, ПубликуемыеЗадачи)
	
	ПубликуемыеДанныеОрганизации = НовыйПубликуемыеСобытияКалендаряБухгалтераПоОрганизации();
	
	ЗаполнитьПубликуемыеДанныеОбОрганизации(ПубликуемыеДанныеОрганизации.organization, ДанныеОбОрганизации);
	
	Если ПубликуемыеЗадачи.ПросроченныеЗадачи.Получить(ДанныеОбОрганизации.Организация) <> Неопределено Тогда
		ПубликуемыеДанныеОрганизации.expired  = ПубликуемыеЗадачи.ПросроченныеЗадачи.Получить(ДанныеОбОрганизации.Организация);
	КонецЕсли;
	
	ПубликуемыеДанныеОрганизации.last_update = 
		РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(ДанныеОбОрганизации.Организация);
	
	Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПубликуемыеДанныеОрганизации.ref =
			Обработки.МониторНалоговИОтчетности.НавигационнаяСсылкаДляОткрытияМонитораНалоговИОтчетов();
	КонецЕсли;
	
	ЗаполнитьСобытияКалендаряБухгалтераПоОрганизации(ПубликуемыеДанныеОрганизации, ПубликуемыеЗадачи.ЗадачиОрганизаций, ДанныеОбОрганизации.Организация);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Функция ДанныеДатыАктуальностиСобытийКалендаряБухгалтераПоОрганизации(ПубликуемыеДанные, ДанныеОбОрганизации)
	
	ПубликуемыеДанныеОрганизации = НовыйДатыАктуальностиСобытийКалендаряБухгалтераПоОрганизации();
	
	ЗаполнитьПубликуемыеДанныеОбОрганизации(ПубликуемыеДанныеОрганизации.organization, ДанныеОбОрганизации);
	
	ПубликуемыеДанныеОрганизации.last_update = 
		РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(ДанныеОбОрганизации.Организация);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Процедура ЗаполнитьСобытияКалендаряБухгалтераПоОрганизации(ПубликуемыеДанныеОрганизации, ЗадачиОрганизаций, Организация)
	
	ЗадачиОрганизации = ЗадачиОрганизаций.Получить(Организация);
	Если ЗадачиОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Задача Из ЗадачиОрганизации Цикл
		
		Для Каждого Подзадача Из Задача.Подзадачи Цикл
			
			Если Подзадача.ВАрхиве Тогда
				Продолжить;
			КонецЕсли;
			
			СобытиеКалендаряБухгалтера = НовыйСобытиеКалендаряБухгалтера();
			СобытиеКалендаряБухгалтера.id       = Подзадача.Идентификатор;
			СобытиеКалендаряБухгалтера.name     = Подзадача.Наименование;
			СобытиеКалендаряБухгалтера.deadline = Задача.ДатаЗадачи;
			
			ПубликуемыеДанныеОрганизации.tasks.Добавить(СобытиеКалендаряБухгалтера);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйДатыАктуальностиСобытийКалендаряБухгалтераПоОрганизации()
	
	ПубликуемыеДатыОбновленияМонитораОрганизации = Новый Структура;
	
	ПубликуемыеДатыОбновленияМонитораОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДатыОбновленияМонитораОрганизации.Вставить("last_update",  Дата(1,1,1));
	
	Возврат ПубликуемыеДатыОбновленияМонитораОрганизации;
	
КонецФункции

Функция НовыйПубликуемыеСобытияКалендаряБухгалтераПоОрганизации()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить("expired",      0);                           // Количество просроченных задач
	ПубликуемыеДанныеОрганизации.Вставить("last_update",  Дата(1,1,1));                 // Дата актуальности календаря бухгалтера.
	ПубликуемыеДанныеОрганизации.Вставить("ref",          "");                          // Ссылка на общую форму "Список задач".
	ПубликуемыеДанныеОрганизации.Вставить("tasks",        Новый Массив);                // Массив задач бухгалтера.
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Функция НовыйСобытиеКалендаряБухгалтера()
	
	СобытиеКалендаряБухгалтера = Новый Структура;
	
	СобытиеКалендаряБухгалтера.Вставить("id",       "");          // Идентификатор задачи.
	СобытиеКалендаряБухгалтера.Вставить("name",     "");          // Наименование задачи.
	СобытиеКалендаряБухгалтера.Вставить("deadline", Дата(1,1,1)); // Срок выполнения задачи.
	
	Возврат СобытиеКалендаряБухгалтера;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииМонитораОсновныхПоказателей

Функция ПубликуемыеОрганизацииМонитораОсновныхПоказателей()
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрСведений.ДанныеМонитораРуководителя");
	
	Возврат ДанныеОрганизаций(Организации);
	
КонецФункции

Функция ДанныеМонитораОсновныхПоказателейПоОрганизации(ПубликуемыеДанные, ДанныеОбОрганизации)
	
	ПубликуемыеРазделыМонитора = Перечисления.РазделыМонитораРуководителя.ПубликуемыеРазделыМонитораРуководителя();
	
	ПубликуемыеДанныеОрганизации = НовыйПубликуемыеДанныеМонитораПоОрганизации();
	
	ЗаполнитьПубликуемыеДанныеОбОрганизации(ПубликуемыеДанныеОрганизации.organization, ДанныеОбОрганизации);
	
	ЗаполнитьДатуОбновленияМонитораРуководителя(ПубликуемыеДанныеОрганизации, ПубликуемыеРазделыМонитора, ДанныеОбОрганизации.Организация);
	
	ЗаполнитьДанныеМонитораОрганизации(ПубликуемыеДанныеОрганизации, ПубликуемыеРазделыМонитора, ДанныеОбОрганизации.Организация);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Функция ДанныеОбновленияМонитораОсновныхПоказателейПоОрганизации(ПубликуемыеДанные, ДанныеОбОрганизации);
	
	ПубликуемыеРазделыМонитора = Перечисления.РазделыМонитораРуководителя.ПубликуемыеРазделыМонитораРуководителя();
	
	ПубликуемыеДанныеОрганизации = НовыйПубликуемыеДатыОбновленияМонитораПоОрганизации();
	
	ЗаполнитьПубликуемыеДанныеОбОрганизации(ПубликуемыеДанныеОрганизации.organization, ДанныеОбОрганизации);
	
	ЗаполнитьДатуОбновленияМонитораРуководителя(ПубликуемыеДанныеОрганизации, ПубликуемыеРазделыМонитора, ДанныеОбОрганизации.Организация);
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Процедура ЗаполнитьДатуОбновленияМонитораРуководителя(ПубликуемыеДанныеОрганизации, ПубликуемыеРазделыМонитора, Организация)
	
	ПубликуемыеДанныеОрганизации.last_update = 
		РегистрыСведений.ДанныеМонитораРуководителя.ДатаОбновленияМонитора(Организация, ПубликуемыеРазделыМонитора);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМонитораОрганизации(ПубликуемыеДанныеОрганизации, ПубликуемыеРазделыМонитора, Организация)
	
	// Публикуем данные, округленные до целых рублей.
	ВариантОкругления = 1;
	
	// Не публикуем Данные сравнения с прошлым периодом.
	ПоказыватьСравнениеСПрошлымГодом = Ложь;
	
	ПоказыватьПодразделы = Истина;
	
	ДанныеМонитора = МониторРуководителя.ПолучитьДанныеРазделовМонитора(
		Организация, ПубликуемыеРазделыМонитора, ВариантОкругления, ПоказыватьСравнениеСПрошлымГодом, ПоказыватьПодразделы);
	
	ДанныеМонитораПоРазделам = Новый Соответствие;
	
	ДанныеМонитора.Сортировать("РазделМонитора,Порядок");
	
	Для Каждого Строка Из ДанныеМонитора Цикл
		
		ИдентификаторРаздела = ИдентификаторРаздела(Строка.РазделМонитора, Строка.ПодразделМонитора);
		
		ДанныеРазделаМонитора = ДанныеМонитораПоРазделам.Получить(ИдентификаторРаздела.Идентификатор);
		Если ДанныеРазделаМонитора = Неопределено Тогда
			ДанныеРазделаМонитора = НовыйДанныеРазделаМонитора();
			
			ДанныеРазделаМонитора.id   = ИдентификаторРаздела.Идентификатор;
			ДанныеРазделаМонитора.name = ИдентификаторРаздела.Описание;
			
			РасшифровкаРаздела = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Строка.РазделМонитора);
			Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
				ДанныеРазделаМонитора.ref = РасшифровкаРаздела.СсылкаНаОтчет;
			КонецЕсли;
			
			ДанныеМонитораПоРазделам.Вставить(ИдентификаторРаздела.Идентификатор, ДанныеРазделаМонитора);
		КонецЕсли;
		
		ЗначенияПоказателей = НовыйЗначенияПоказателейРазделаМонитора();
		ЗначенияПоказателей.indicator = Строка.Представление;
		ЗначенияПоказателей.value = Строка.Сумма;
		
		ДанныеРазделаМонитора.indicators.Добавить(ЗначенияПоказателей);
		
	КонецЦикла;
	
	Для Каждого Раздел ИЗ ДанныеМонитораПоРазделам Цикл
		ПубликуемыеДанныеОрганизации.kpi.Добавить(Раздел.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторРаздела(Раздел, Подраздел)
	
	ИдентификаторРаздела = "";
	ОписаниеРаздела      = "";
	ИдентификаторПодраздела = "";
	
	Если ЗначениеЗаполнено(Раздел) Тогда
		ИндексРазделаМонитора = Перечисления.РазделыМонитораРуководителя.Индекс(Раздел);
		МетаданныеРазделаМонитора = Метаданные.Перечисления.РазделыМонитораРуководителя.ЗначенияПеречисления[ИндексРазделаМонитора];
		ИдентификаторРаздела = МетаданныеРазделаМонитора.Имя;
		ОписаниеРаздела      = МетаданныеРазделаМонитора.Синоним;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подраздел) Тогда
		ИндексПодразделаМонитора = Перечисления.ПодразделыМонитораРуководителя.Индекс(Подраздел);
		МетаданныеПодразделаМонитора = Метаданные.Перечисления.ПодразделыМонитораРуководителя.ЗначенияПеречисления[ИндексПодразделаМонитора];
		ИдентификаторПодраздела = МетаданныеПодразделаМонитора.Имя;
		Если ЗначениеЗаполнено(ОписаниеРаздела) Тогда
			ОписаниеРаздела = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
				ОписаниеРаздела, МетаданныеПодразделаМонитора.Синоним);
		Иначе
			ОписаниеРаздела = МетаданныеПодразделаМонитора.Синоним;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Идентификатор,Описание",
		ИдентификаторРаздела + ИдентификаторПодраздела, ОписаниеРаздела);
	
КонецФункции

Функция НовыйПубликуемыеДанныеМонитораПоОрганизации()
	
	ПубликуемыеДанныеОрганизации = Новый Структура;
	
	ПубликуемыеДанныеОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДанныеОрганизации.Вставить("last_update",  Дата(1,1,1));                 // Дата обновления данных монитора.
	ПубликуемыеДанныеОрганизации.Вставить("kpi",          Новый Массив);                // Массив данных монитора.
	
	Возврат ПубликуемыеДанныеОрганизации;
	
КонецФункции

Функция НовыйДанныеРазделаМонитора()
	
	ДанныеПоказателейРаздела = Новый Структура;
	
	ДанныеПоказателейРаздела.Вставить("id",         "");           // Идентификатор раздела.
	ДанныеПоказателейРаздела.Вставить("name",       "");           // Название раздела.
	ДанныеПоказателейРаздела.Вставить("ref",        "");           // Ссылка на отчет.
	ДанныеПоказателейРаздела.Вставить("indicators", Новый Массив); // Значения показателей раздела.
	
	Возврат ДанныеПоказателейРаздела;
	
КонецФункции

Функция НовыйЗначенияПоказателейРазделаМонитора()
	
	ЗначенияПоказателейМонитораПоРазделу = Новый Структура;
	
	ЗначенияПоказателейМонитораПоРазделу.Вставить("indicator", ""); // Идентификатор раздела.
	ЗначенияПоказателейМонитораПоРазделу.Вставить("value",     0);  // Название раздела.
	
	Возврат ЗначенияПоказателейМонитораПоРазделу;
	
КонецФункции

Функция НовыйПубликуемыеДатыОбновленияМонитораПоОрганизации()
	
	ПубликуемыеДатыОбновленияМонитораОрганизации = Новый Структура;
	
	ПубликуемыеДатыОбновленияМонитораОрганизации.Вставить("organization", НовыйРеквизитыОрганизации());
	ПубликуемыеДатыОбновленияМонитораОрганизации.Вставить("last_update",  Дата(1,1,1)); 
	
	Возврат ПубликуемыеДатыОбновленияМонитораОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЗаполненияСведенийОбОрганизации

Функция ДанныеОрганизаций(Организации)
	
	// Публикуем данные по всем организациям информационной базы.
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|	И Организации.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НовыйРеквизитыОрганизации()
	
	РеквизитыОрганизации = Новый Структура;
	
	РеквизитыОрганизации.Вставить("inn",  ""); // ИНН организации.
	РеквизитыОрганизации.Вставить("kpp",  ""); // КПП организации.
	РеквизитыОрганизации.Вставить("name", ""); // Краткое наименование организации.
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

Процедура ЗаполнитьПубликуемыеДанныеОбОрганизации(РеквизитыОрганизации, ДанныеОбОрганизации)
	
	РеквизитыОрганизации.inn  = ДанныеОбОрганизации.ИНН;
	РеквизитыОрганизации.kpp  = ДанныеОбОрганизации.КПП;
	РеквизитыОрганизации.name = ДанныеОбОрганизации.НаименованиеСокращенное;
	
КонецПроцедуры

#КонецОбласти