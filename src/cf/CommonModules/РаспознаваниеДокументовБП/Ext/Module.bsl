#Область ПрограммныйИнтерфейс

Функция СтавкаНДСПоРаспознанномуТексту(Ставка, ТекущееЗначение) Экспорт
	
	Если Ставка = "НДС20" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Ставка = "НДС18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли  Ставка = "НДС10" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Ставка = "НДС18_118" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли Ставка = "НДС10_110" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли Ставка = "НДС20_120" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли Ставка = "НДС0" Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли Ставка = "БезНДС" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат ТекущееЗначение;
	
КонецФункции

Функция ОпределитьСтавкуНДС(Всего, СуммаНДС) Экспорт
	
	Делитель = Всего - СуммаНДС;
	Если Делитель = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Ставка = Окр(СуммаНДС * 100 / Делитель);
	СтруктураСтавкиНДС = Новый Структура("Числом", Ставка);
	
	Если Ставка = 20 Тогда
		СтавкаСсылкой = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Ставка = 18 Тогда
		СтавкаСсылкой = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Ставка = 10 Тогда
		СтавкаСсылкой = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Ставка = 0 Тогда
		СтавкаСсылкой = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		СтавкаСсылкой = Неопределено;
	КонецЕсли;
	
	Если СтавкаСсылкой = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		СтруктураСтавкиНДС.Вставить("Ссылкой", СтавкаСсылкой);
		Возврат СтруктураСтавкиНДС;
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ПраваДоступа

// Настраивает в профиле групп доступа роли, предоставляющие право интеграции.
// Описывает соответствующие роли подсистемы.
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа() - описание профиля

Процедура РазрешитьИнтеграцию(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("РаспознаваниеДокументов");
	
КонецПроцедуры

Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.РаспознанныйДокумент, Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Строки, Очистить = Ложь) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Организация", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, РаспознаваниеДокументовСлужебный.ОсновныеРеквизиты(Объект)["Организация"], Справочники.Организации.ПустаяСсылка()));
	ДанныеОбъекта.Вставить("Контрагент", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, РаспознаваниеДокументовСлужебный.ОсновныеРеквизиты(Объект)["Контрагент"], Справочники.Контрагенты.ПустаяСсылка()));
	
	ДанныеОбъекта.Вставить("Дата", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ДатаДокумента", '20100101'));
	ДанныеОбъекта.Вставить("Склад", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Склад", Справочники.Склады.ПустаяСсылка()));
	ДанныеОбъекта.Вставить("ДоговорКонтрагента", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
	ДанныеОбъекта.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	
	ДанныеОбъекта.Вставить("ПодразделениеОрганизации", Неопределено);
	
	СтрокиТовары = Новый Массив;
	СтрокиУслуги = Новый Массив;
	
	Если ТипЗнч(Строки) = Тип("ДанныеФормыКоллекция") Тогда
		СписокНоменклатур = Строки.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ИначеЕсли ТипЗнч(Строки) = Тип("ТаблицаЗначений") Тогда
		СписокНоменклатур = Строки.ВыгрузитьКолонку("Номенклатура");
	ИначеЕсли ТипЗнч(Строки) = Тип("Массив") Тогда
		СписокНоменклатур = Новый Массив;
		Для Каждого СтрокаМассива из Строки Цикл
			Если ТипЗнч(СтрокаМассива) = Тип("ДанныеФормыЭлементКоллекции") И СтрокаМассива.Свойство("Номенклатура") тогда
				СписокНоменклатур.Добавить(СтрокаМассива.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокНоменклатур = Новый Массив;
	КонецЕсли;
	
	СписокУслугиПоНоменклатурам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокНоменклатур, "Услуга");
	
	Для каждого СтрокаТаблицы Из Строки Цикл
		Если Очистить Тогда
			ОчиститьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы);
		КонецЕсли;
		
		ЭтоУслуга = СписокУслугиПоНоменклатурам.Получить(СтрокаТаблицы.Номенклатура);
		Если ЭтоУслуга = Неопределено Тогда
			ЭтоУслуга = Ложь;
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			СтрокиУслуги.Добавить(СтрокаТаблицы);
		Иначе
			СтрокиТовары.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиТовары, "Товары", ДанныеОбъекта, Документы.РеализацияТоваровУслуг);
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиУслуги, "Услуги", ДанныеОбъекта, Документы.РеализацияТоваровУслуг);
	Иначе
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиТовары, "Товары", ДанныеОбъекта, Документы.ПоступлениеТоваровУслуг);
		СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиУслуги, "Услуги", ДанныеОбъекта, Документы.ПоступлениеТоваровУслуг);
	КонецЕсли;
	
	ЗаполнениеОтражениеВУСН(ДанныеОбъекта, Строки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПрограммныйИнтерфейс

Процедура ОчиститьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("СчетУчета", Неопределено);
	ДанныеЗаполнения.Вставить("СчетДоходов", Неопределено);
	ДанныеЗаполнения.Вставить("Субконто", Неопределено);
	ДанныеЗаполнения.Вставить("СчетРасходов", Неопределено);
	ДанныеЗаполнения.Вставить("СчетУчетаНДСПоРеализации", Неопределено);
	ДанныеЗаполнения.Вставить("ПереданныеСчетУчета", Неопределено);
	ДанныеЗаполнения.Вставить("СчетУчетаНДС", Неопределено);
	ДанныеЗаполнения.Вставить("СчетРасчетов", Неопределено);
	ДанныеЗаполнения.Вставить("СпособУчетаНДС", Неопределено);
	ДанныеЗаполнения.Вставить("ОтражениеВУСН", Неопределено);
	ДанныеЗаполнения.Вставить("СчетЗатрат", Неопределено);
	ДанныеЗаполнения.Вставить("ПодразделениеЗатрат", Неопределено);
	ДанныеЗаполнения.Вставить("Субконто1", Неопределено);
	ДанныеЗаполнения.Вставить("Субконто2", Неопределено);
	ДанныеЗаполнения.Вставить("Субконто3", Неопределено);
	ДанныеЗаполнения.Вставить("СчетЗатратНУ", Неопределено);
	ДанныеЗаполнения.Вставить("СубконтоНУ1", Неопределено);
	ДанныеЗаполнения.Вставить("СубконтоНУ2", Неопределено);
	ДанныеЗаполнения.Вставить("СубконтоНУ3", Неопределено);
	ДанныеЗаполнения.Вставить("Контрагент", Неопределено);
	ДанныеЗаполнения.Вставить("ДоговорКонтрагента", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения)
	
КонецПроцедуры

Процедура ЗаполнениеОтражениеВУСН(Объект, ТабличнаяЧасть)
	
	Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата) Тогда
		
		ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
		ВариантОтраженияУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
		
		// Заполняем отражение в УСН для ТЧ
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.ОтражениеВУСН = ВариантОтраженияУСН;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти