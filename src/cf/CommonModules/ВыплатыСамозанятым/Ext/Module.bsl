#Область ПрограммныйИнтерфейс

// Функция возвращает ссылку на скаченный файл чека самозанятого по переданной ссылке
//
// Параметры:
//  СсылкаНаЧек - Строка - URL на чек самозанятого на сайте ФНС
//  ЧекСамозанятого - СправочникСсылка.ВыплатыСамозанятымПрисоединенныеФайлы - Ссылка на присоединенный файл, чтобы можно было его обновить
//  Документ - ДокументСсылка.ВыплатыСамозанятым - Ссылка на документ, к которому присоединется файл
// 
// Возвращаемое значение:
//  СправочникСсылка.ВыплатыСамозанятымПрисоединенныеФайлы - Ссылка на присоединенный файл
//
Функция ЧекСамозанятогоИзИнтернета(СсылкаНаЧек, ЧекСамозанятого, Документ) Экспорт

	URL = СсылкаНаЧек;
	
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.Таймаут = 1260;
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(URL, ПараметрыПолучения);
	
	Если Результат.Статус Тогда
		ИмяФайла = СтрШаблон(НСтр("ru='№%1'"), НомерЧекаИзСсылки(СсылкаНаЧек));
		Если ЗначениеЗаполнено(ЧекСамозанятого) Тогда
			// Обновим существующий файл
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", Результат.Путь);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ИнформацияОФайле.Вставить("ИмяБезРасширения", ИмяФайла);
			ИнформацияОФайле.Вставить("Расширение", "jpg");
			ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
			РаботаСФайлами.ОбновитьФайл(ЧекСамозанятого, ИнформацияОФайле);
		Иначе
			// Добавим новый файл
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
			ПараметрыФайла.ВладелецФайлов = Документ;
			ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки = "jpg";
			ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
			ПараметрыФайла.Служебный = Ложь;
			ЧекСамозанятого = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Результат.Путь); 
		КонецЕсли;
		
		Возврат ЧекСамозанятого;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось скачать чек самозанятого.
			|Описание: %1
			|URL: %2'");
		Если Результат.Свойство("КодСостояния") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Код ошибки: %3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.СообщениеОбОшибке, URL, Результат.КодСостояния);
		Иначе
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.СообщениеОбОшибке, URL);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка чеков самозанятых из файла'"), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецЕсли;

КонецФункции

// Функция возвращает номер чека из ссылки на чек на сайте ФНС
//
// Параметры:
//  СсылкаНаЧек - Строка - URL на чек самозанятого на сайте ФНС
// 
// Возвращаемое значение:
//  Строка - Номер чека
//
Функция НомерЧекаИзСсылки(СсылкаНаЧек) Экспорт
	
	ЧастьСсылкиНаЧек = СтрЗаменить(СсылкаНаЧек, ВыплатыСамозанятымВызовСервераПовтИсп.АдресСервисаФНС(), "");
	МассивЧастейСсылки = СтрРазделить(ЧастьСсылкиНаЧек, "/");

	ИНН = ИННИзСсылкиНаЧек(МассивЧастейСсылки);
	
	НомерЧека = "";
	ПредыдущееЗначение = "";
	СоответствуетУсловиям = Ложь;
	// Номер чека идет после ИНН и перед "print"
	Для Каждого ЧастьСсылки Из МассивЧастейСсылки Цикл
		Если ЗначениеЗаполнено(НомерЧека) И ЧастьСсылки = "print" Тогда
			СоответствуетУсловиям = Истина;
		КонецЕсли;
		Если ПредыдущееЗначение = ИНН Тогда
			НомерЧека = ЧастьСсылки;
		КонецЕсли;
		ПредыдущееЗначение = ЧастьСсылки;
	КонецЦикла;
	Если Не СоответствуетУсловиям Тогда
		НомерЧека = "";
	КонецЕсли;
	
	Возврат НомерЧека;
	
КонецФункции

// Процедура заполняет табличную часть документа из файла в фоне
//
// Параметры:
//    Параметры - Структура - Структура параметров с обязательными ключами:
//                * ЗагруженныеДанные - ТаблицаЗначений - Таблица загруженных данных из файла
//                * РеестрВыплат - ДокументСсылка.ВыплатыСамозанятым - Документ, в который загружаем информацию
//    АдресХранилища - Строка
//
Процедура ЗаполнитьТабличнуюЧасть(Параметры, АдресХранилища) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Параметры.РеестрВыплат.ПолучитьОбъект();
	
	ЗаполнитьЧекиСамозанятыхИзЗагруженныхДанных(ДокументОбъект, Параметры.ЗагруженныеДанные);
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ТекстИсключенияЗаписи = НСтр("ru = 'Не удалось загрузить чеки самозанятых из файла. 
			|Возможно, документ открыт или редактируется другим пользователем'");
		ВызватьИсключение ТекстИсключенияЗаписи;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет сопоставление контрагентов по данным из файла и контрагентов из табличной части документа "Выплаты самозанятым".
//
// Параметры:
//   ДанныеИзФайла - ТаблицаЗначений - Таблица загруженных данных из файла.
//   ИсходныйМассивКонтрагентов - Массив - Контрагенты из табличной части документа "Выплаты самозанятым".
//
Процедура ОпределитьКонтрагентовПоДаннымФайла(ДанныеИзФайла, ИсходныйМассивКонтрагентов) Экспорт
	
	// Определим контрагентов по данным из файла
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйМассивКонтрагентов", ИсходныйМассивКонтрагентов);
	Запрос.УстановитьПараметр("ВТ_ДанныеИзФайла", ДанныеИзФайла);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.Наименование КАК Наименование
	|ПОМЕСТИТЬ ИсходныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&ИсходныйМассивКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИзФайла.ИНН КАК ИНН,
	|	ДанныеИзФайла.ПолноеНаименование КАК ПолноеНаименование
	|ПОМЕСТИТЬ ТаблицаДанныеИзФайла
	|ИЗ
	|	&ВТ_ДанныеИзФайла КАК ДанныеИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеИзФайла.ИНН КАК ИНН,
	|	ТаблицаДанныеИзФайла.ПолноеНаименование КАК ПолноеНаименование,
	|	ИсходныеКонтрагентыПоИНН.Ссылка КАК КонтрагентПоИНН,
	|	ИсходныеКонтрагентыПоПолномуНаименованию.Ссылка КАК КонтрагентПоПолномуНаименованию,
	|	ИсходныеКонтрагентыПоНаименованию.Ссылка КАК КонтрагентПоНаименованию
	|ИЗ
	|	ТаблицаДанныеИзФайла КАК ТаблицаДанныеИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеКонтрагенты КАК ИсходныеКонтрагентыПоИНН
	|		ПО ТаблицаДанныеИзФайла.ИНН = ИсходныеКонтрагентыПоИНН.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеКонтрагенты КАК ИсходныеКонтрагентыПоПолномуНаименованию
	|		ПО ТаблицаДанныеИзФайла.ПолноеНаименование = ИсходныеКонтрагентыПоПолномуНаименованию.НаименованиеПолное
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеКонтрагенты КАК ИсходныеКонтрагентыПоНаименованию
	|		ПО ТаблицаДанныеИзФайла.ПолноеНаименование = ИсходныеКонтрагентыПоНаименованию.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не (ЗначениеЗаполнено(Выборка.КонтрагентПоИНН) 
			Или ЗначениеЗаполнено(Выборка.КонтрагентПоПолномуНаименованию)
			Или ЗначениеЗаполнено(Выборка.КонтрагентПоНаименованию)) Тогда
			// Ничего не нашли
			Продолжить;
		КонецЕсли;
		
		СтрокиДанных = ДанныеИзФайла.НайтиСтроки(Новый Структура("ИНН, ПолноеНаименование", Выборка.ИНН, Выборка.ПолноеНаименование));
		// Строк может быть несколько
		Для Каждого СтрокаДанных Из СтрокиДанных Цикл
			Если ЗначениеЗаполнено(Выборка.КонтрагентПоИНН) Тогда
				СтрокаДанных.Контрагент = Выборка.КонтрагентПоИНН;
			ИначеЕсли ЗначениеЗаполнено(Выборка.КонтрагентПоПолномуНаименованию) Тогда
				СтрокаДанных.Контрагент = Выборка.КонтрагентПоПолномуНаименованию;
			Иначе
				СтрокаДанных.Контрагент = Выборка.КонтрагентПоНаименованию;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает ИНН контрагента из ссылки на чек самозанятого.
//
// Параметры:
//   МассивЧастейСсылки - Массив - Массив, полученный в результате разделения ссылки на чек по символу "/".
//
Функция ИННИзСсылкиНаЧек(МассивЧастейСсылки) Экспорт

	ИНН = "";
	Для Каждого ЧастьСсылки Из МассивЧастейСсылки Цикл
		Результат = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ЧастьСсылки, Ложь);
		Если Результат.СоответствуетТребованиям Тогда
			ИНН = ЧастьСсылки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИНН;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроведениеДокумента

Функция ПодготовитьПараметрыВыплатыСамозанятым(ТаблицаВыплатыСамозанятым, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Регистратор,"                   // <ДокументСсылка>
	+ "Содержание,"                    // <Строка>
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СчетБанк,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "РеестрВыплатСамозанятым,"       // <ДокументСсылка.ВыплатыСамозанятым> - реестр, по которому производится выплата
	+ "Организация";                   // <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатыСамозанятым
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Самозанятый,"                   // <СправочникСсылка.Контрагенты> - контрагент, которому производится выплата
	+ "Сумма";                         // <Число,15,2> - сумма выплаты в валюте документа
	
	Параметры.Вставить("ВыплатыСамозанятым", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплатыСамозанятым, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияВыплатыСамозанятым(ТаблицаВыплатыСамозанятым, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплатыСамозанятым) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатыСамозанятым(ТаблицаВыплатыСамозанятым, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаВыплаты Из Параметры.ВыплатыСамозанятым Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = Реквизиты.Содержание;
		Проводка.Сумма = СтрокаВыплаты.Сумма;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыССамозанятыми;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка["СубконтоДт"],
			"Контрагенты", СтрокаВыплаты.Самозанятый);
		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["СчетДт"]);
		Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыплаты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетБанк;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"БанковскиеСчета", Реквизиты.БанковскийСчет);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств);
		СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваКорСчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаВыплаты.Сумма, СтрокаВыплаты.Сумма, , , , , Проводка);
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьУстановитьСостояниеДокументаПриОплате(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"               // <ДокументСсылка>
		+ "Организация,"               // <СправочникСсылка.Организации>
		+ "РеестрВыплатСамозанятым,"   // <ДокументСсылка.ВыплатыСамозанятым> - реестр, по которому производятся выплаты
		+ "Сумма";                     // <Сумма> - Сумма оплаты
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьСостояниеДокументаПриОплате(ТаблицаРеквизитыВыплаты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитыВыплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьУстановитьСостояниеДокументаПриОплате(ТаблицаРеквизитыВыплаты);
	Реквизиты = Параметры.Реквизиты[0];
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизиты.РеестрВыплатСамозанятым);
	КоллекцияСтатусов = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(МассивДокументов);
	ТекущийСтатус = ?(КоллекцияСтатусов[Реквизиты.РеестрВыплатСамозанятым] <> Неопределено, 
		КоллекцияСтатусов[Реквизиты.РеестрВыплатСамозанятым].Статус,
		Неопределено);
	Если ТекущийСтатус <> Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЗагружены 
		И ТекущийСтатус <> Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧекиЧастичноЗагружены
		И ТекущийСтатус <> Перечисления.СтатусыДокументовВыплатыСамозанятым.Оплачено Тогда
		Если РеестрПолностьюОплачен(
			Реквизиты.РеестрВыплатСамозанятым, Реквизиты.Организация, Реквизиты.Сумма, Реквизиты.Регистратор) Тогда
				НовыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.Оплачено;
			Иначе
				НовыйСтатус = Перечисления.СтатусыДокументовВыплатыСамозанятым.ЧастичноОплачено;
			КонецЕсли;
			НовыеСтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
			НовыеСтатусыДокумента.Статус = НовыйСтатус;
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(
				Реквизиты.РеестрВыплатСамозанятым,
				НовыеСтатусыДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру ЗадолженностьСамозанятыхПоРеестру
//
// Параметры:
//   ТаблицаВыплаты - ТаблицаЗначений - описание см. в ПодготовитьПараметрыЗадолженностьСамозанятыхПоРеестру()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыЗадолженностьСамозанятыхПоРеестру()
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - флаг отказа от записи движений
//
Процедура СформироватьДвиженияЗадолженностиСамозанятыхПоРеестру(ТаблицаВыплаты, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаВыплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗадолженностьСамозанятыхПоРеестру(ТаблицаВыплаты, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движения.ЗадолженностьСамозанятыхПоРеестру.Записывать = Истина;
	
	Для Каждого СтрокаВыплаты Из Параметры.Выплаты Цикл
		Если СтрокаВыплаты.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовоеДвижение = Движения.ЗадолженностьСамозанятыхПоРеестру.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаВыплаты);
		ЗаполнитьЗначенияСвойств(НовоеДвижение, Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыЗадолженностьСамозанятыхПоРеестру(ТаблицаВыплаты, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Выплаты
	
	СписокОбязательныхКолонок = ""
	    + "ВидДвижения,"              // <ВидДвиженияНакопления> - Приход или Расход
		+ "РеестрВыплатыСамозанятым," // <ДокументСсылка.ВыплатыСамозанятым> - Реестр выплаты самозанятым
		+ "Самозанятый,"              // <СправочникСсылка.Контрагенты> - самозанятой, задолженность которому начисляется
		+ "СчетСамозанятого,"         // <СправочникСсылка.БанковскийСчет> - Банковский счет, по которому начисляем задолженность
		+ "Сумма";                    // <Число, 15, 2> - сумма оплаты в валюте счета включая НДС
		
	Параметры.Вставить("Выплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплаты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьЧекиСамозанятыхИзЗагруженныхДанных(Документ, ЗагруженныеДанные) Экспорт
	
	Для Каждого СтрокаДанных Из ЗагруженныеДанные Цикл
		
		Если СтрокаДанных.НомерСтрокиТабличнойЧасти = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВыплаты = Документ.Выплаты[СтрокаДанных.НомерСтрокиТабличнойЧасти - 1];
			
		СтрокаВыплаты.НомерЧека = НомерЧекаИзСсылки(СтрокаДанных.СсылкаНаЧек);
		СтрокаВыплаты.СсылкаНаЧек = СтрокаДанных.СсылкаНаЧек;
			
		СтрокаВыплаты.ЧекСамозанятого = ЧекСамозанятогоИзИнтернета(
		СтрокаДанных.СсылкаНаЧек, СтрокаВыплаты.ЧекСамозанятого, Документ.Ссылка);
		
		Если ЗагруженныеДанные.Колонки.Найти("Результат") <> Неопределено Тогда 
			
			Если НРег(СокрЛП(СтрокаДанных.Результат)) = НРег("НеЗачисленоНеКорректныеРеквизитыСчета") Тогда
				СтрокаВыплаты.ПричинаОтказа = Перечисления.ПричиныОтказаВЧекахВыплатСамозанятым.НеКорректныеРеквизитыСчета;
			ИначеЕсли НРег(СокрЛП(СтрокаДанных.Результат)) = НРег("НеЗачисленоПолучательНеЯвляетсяСамозанятым") Тогда
				СтрокаВыплаты.ПричинаОтказа = Перечисления.ПричиныОтказаВЧекахВыплатСамозанятым.ПолучательНеЯвляетсяСамозанятым;
			ИначеЕсли (НРег(СокрЛП(СтрокаДанных.Результат)) <> НРег("Зачислено"))
				И (НРег(СокрЛП(СтрокаДанных.Результат)) <> НРег("ЗачисленоСсылкаНеСформирована")) Тогда
				СтрокаВыплаты.ПричинаОтказа = Перечисления.ПричиныОтказаВЧекахВыплатСамозанятым.ПрочиеПричины;
			КонецЕсли;
			
		КонецЕсли;
		Если ЗагруженныеДанные.Колонки.Найти("РасшифровкаРезультата") <> Неопределено Тогда 
			
			СтрокаВыплаты.РасшифровкаРезультата = СтрокаДанных.РасшифровкаРезультата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеестрПолностьюОплачен(Реестр, Организация, Сумма, Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Реестр);
	Запрос.УстановитьПараметр("Период", Новый Граница(Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьСамозанятыхПоРееструОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ЗадолженностьСамозанятыхПоРеестру.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И РеестрВыплатыСамозанятым = &Ссылка) КАК ЗадолженностьСамозанятыхПоРееструОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РеестрПолностьюОплачен = Ложь;
	Если Выборка.Следующий() Тогда
		// При проведении еще не учтена сумма этого документа,
		// поэтому вычтем сумму документа из остатка
		Если Выборка.СуммаОстаток - Сумма <= 0 Тогда
			РеестрПолностьюОплачен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеестрПолностьюОплачен;
	
КонецФункции 

Функция ФИОСамозанятых() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ФИО КАК ФИО
	|ИЗ
	|	(ВЫБРАТЬ
	|		Контрагенты.Наименование КАК ФИО
	|	ИЗ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ГДЕ
	|		Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		И Контрагенты.Самозанятый
	|		И НЕ Контрагенты.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Контрагенты.НаименованиеПолное
	|	ИЗ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ГДЕ
	|		Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		И Контрагенты.Самозанятый
	|		И НЕ Контрагенты.ПометкаУдаления) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ФИО) Тогда
			Результат.Добавить(СокрЛП(Выборка.ФИО));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти