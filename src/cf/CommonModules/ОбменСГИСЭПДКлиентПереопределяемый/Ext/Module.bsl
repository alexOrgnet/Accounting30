
#Область ПрограммныйИнтерфейс

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭТрН(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭСВ(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭЗН(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭЗЗ(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭПЛ(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
// Обработчик заполнения документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
//  ДанныеЗаполнения - произвольный - данные для заполнения
Процедура ОбработкаЗаполненияНаФормеЭДФ(Форма, ДанныеЗаполнения) Экспорт
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Обработчик команды "Скопировать"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура СкопироватьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элемент = ТекущиеДанные.Ссылка;
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
		
		ИмяФормыОбъекта = ОбменСГИСЭПДВызовСервера.ПолноеИмяФормыОбъекта(Элемент);
		
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления"
// Если в конфигурации нет реализации собственного метода следует использовать метод модуля ОбменСГИСЭПДКлиент
//
//	Параметры:
//		Список - ТаблицаФормы - 
//		ТипСписка - Строка - тип документов списка.
//		ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое должно быть вызвано после завершения попытки пометки на удаление.
//
Процедура УстановитьПометкуУдаления(Список, ТипСписка = "", ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если ТипЗнч(Список.ВыделенныеСтроки) = Тип("Массив") Тогда
		Для каждого ВыделеннаяСтрока Из Список.ВыделенныеСтроки Цикл
			ДанныеСтроки = Список.ДанныеСтроки(ВыделеннаяСтрока);
			ОбменСГИСЭПДВызовСервера.УстановитьПометкуУдаления(ДанныеСтроки.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Список.Обновить();
	
КонецПроцедуры

// Процедура позволяет установить период через стандартный диалог выбора периода
// Если в конфигурации нет реализации собственного метода следует использовать метод модуля ОбменСГИСЭПДКлиент
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обработка в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Обработчик команды "Изменить"
// Если в конфигурации нет реализации собственного метода следует использовать метод модуля ОбменСГИСЭПДКлиент
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура завершения для РедактироватьПериод()
//
// Параметры:
//  Период - СтандартныйПериод - период полученный из диалога
//	ДополнительныеПараметры - Произвольный - дополнительные параметры описания оповещения
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
