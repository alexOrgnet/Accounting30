#Область СлужебныйПрограммныйИнтерфейс

// Возвращает код значения "Без гражданства" для списка выбора страны гражданства
//
// Возвращаемое значение:
//  Строка
//
Функция КодПустогоЗначенияВСпискеВыбораГражданства() Экспорт
	
	Возврат "000";
	
КонецФункции

// Возвращает значение вида документа "Разрешение на временное проживание" для списка выбора,
// содержащего виды документов, подходящие в качестве основания для проживания в РФ не гражданам РФ
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеРазрешенияНаВременноеПроживаниеВСпискеВыбора() Экспорт
	
	Возврат "0";
	
КонецФункции

// Возвращает значение вида документа "Вид на жительство" для списка выбора,
// содержащего виды документов, подходящие в качестве основания для проживания в РФ не гражданам РФ
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВидаНаЖительствоВСпискеВыбора() Экспорт
	
	Возврат "1";
	
КонецФункции

// Возвращает символы, которые допускается использоваться при вводе паспортных данных, как кириллицей, так и латиницей
//
// Возвращаемое значение:
//  Строка
//
Функция УниверсальныеСимволыВПаспортныхДанных() Экспорт
	
	Возврат """№()-., 0123456789";
	
КонецФункции

// Возвращает стуктуру, описывающую сведения о типовом уставе
//
// Возвращаемое значение:
//   Структура
//
Функция НовыйДанныеТиповогоУстава() Экспорт
	
	ДанныеУстава = Новый Структура;
	ДанныеУстава.Вставить("УставДобровольныйВыходИзОбщества", Ложь);
	ДанныеУстава.Вставить("УставНаследованиеБезСогласия", Ложь);
	ДанныеУстава.Вставить("УставОтсутствуетПреимущественноеПравоПриПродаже", Ложь);
	ДанныеУстава.Вставить("УставПродажаДолиТретьимЛицамБезСогласия", Ложь);
	ДанныеУстава.Вставить("УставПродажаДолиУчастникамБезСогласия", Ложь);
	ДанныеУстава.Вставить("УставРешенияПодтверждаютсяНотариально", Ложь);
	
	Возврат ДанныеУстава;
	
КонецФункции

// Возвращает представление типового устава
//
// Параметры:
//   НомерУстава - Число - Номер типового устава
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяТиповогоУстава(НомерУстава) Экспорт
	
	Возврат СтрШаблон(НСтр("ru='Типовой устав № %1'"), НомерУстава);
	
КонецФункции

// Возвращает номер типового устава по умолчанию
//
// Возвращаемое значение:
//   Строка
//
Функция НомерУставаПоУмолчанию() Экспорт
	
	Возврат 24;
	
КонецФункции

// Возвращает структуру возможных видов прикрепленных документов для сервиса регистрации изменений в ЕГРЮЛ/ЕГРИП
//
// Возвращаемое значение:
//   Структура
//
Функция ВидыПрикрепленныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Заявление", "Заявление");
	Результат.Вставить("Устав", "Устав");
	Результат.Вставить("Протокол", "Протокол");
	Результат.Вставить("Договор", "Договор");
	Результат.Вставить("Решение", "Решение");
	Результат.Вставить("ДокументПодтверждающийАдрес", "ДокументПодтверждающийАдрес");
	Результат.Вставить("ИнойДокумент", "ИнойДокумент");
	
	Результат.Вставить("Патент", "Патент");
	Результат.Вставить("УведомлениеОПереходеНаУСН", "УведомлениеОПереходеНаУСН");
	Результат.Вставить("ДокументПодтверждающийЛичность", "ДокументПодтверждающийЛичность");
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление подписанного контейнера, который хранится в прикрепленных файлах для Документ.УведомлениеОСпецрежимахНалогообложения
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеПодписанныеФайлы() Экспорт
	
	Возврат НСтр("ru = 'Подписанный контейнер'");
	
КонецФункции

// Возвращает признак необходимости уплаты госпошлины за регистрацию документов
//
// Параметры:
//   Период                            - Дата - Дата составления заявления о регистрации
//   СпособПодачиДокументов            - Строка - Способ подачи документов (См. РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов())
//   ИзмененияВУчредительныхДокументах - Булево - Признак, вносятся ли изменения в учредительные документы
//   НоваяОрганизация                  - Булево - Признак, создается ли новая организация
//
// Возвращаемое значение:
//   Булево
//
Функция УплачиваетсяГоспошлинаЗаРегистрацию(Период, СпособПодачиДокументов, ИзмененияВУчредительныхДокументах = Ложь, НоваяОрганизация = Истина) Экспорт
	
	// Госпошлина оплачивается при внесении изменений в учредительные документы или при постановке на учет новой организации или ИП
	Если Не ИзмененияВУчредительныхДокументах И Не НоваяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Письмо ФНС России от 18.07.2019 N ГД-4-19/14001
	//
	// 01.01.2019 г. государственная пошлина при государственной регистрации юридических лиц и индивидуальных предпринимателей
	// не уплачивается при направлении документов в регистрирующий орган заявителем в форме электронных документов:
	// - через сайт ФНС России или Единый портал государственных и муниципальных услуг;
	// - при направлении документов в регистрирующий орган через МФЦ или нотариуса.
	
	Если Период < '20190101' Тогда
		Возврат Истина;
	КонецЕсли;
	
	СпособыПодачиСПошлиной = Новый Массив;
	СпособыПодачиСПошлиной.Добавить(СпособыПодачиДокументов().ИФНСлично);
	СпособыПодачиСПошлиной.Добавить(СпособыПодачиДокументов().ИФНСпредставитель);
	СпособыПодачиСПошлиной.Добавить(СпособыПодачиДокументов().Почта);
	
	Возврат СпособыПодачиСПошлиной.Найти(СпособПодачиДокументов) <> Неопределено;
	
КонецФункции

// Возвращает признак того, что учредители общества/индивидуальный предприниматель выступают заявителями
// при государственной регистрации юридических лиц/индивидуальных предпринимателей
//
// Параметры:
//   Период - Дата - Период составления заявления о регистрации
//
// Возвращаемое значение:
//   Булево
//
Функция НотариусПодаетДокументыСамостоятельно(Период) Экспорт
	
	// Федеральный закон от 26.05.2021 N 143-ФЗ "О внесении изменений в Федеральный закон "О государственной регистрации юридических лиц и индивидуальных предпринимателей"
	// и статья 80 "Основы законодательства Российской Федерации о нотариате".
	// Начало действия документа - 25.08.2021
	
	// При заверении подписи заявителя нотариус обязан отправить документы о регистрации в регистрирующий орган.
	
	Возврат Период > '20210824';
	
КонецФункции

// Возвращает признак указания электронного способа подачи документов
//
// Параметры:
//   СпособПодачиДокументов - Строка - См. РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов()
//
// Возвращаемого значение:
//   Булево
//
Функция ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Экспорт
	
	СпособыПодачиДокументов = СпособыПодачиДокументов();
	
	Если СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСэлектронноОнлайн
		Или СпособПодачиДокументов = СпособыПодачиДокументов.ИФНСэлектронно Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает сумму государственной пошлины за регистрацию физ.лица в качестве ИП или юридического лица
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаГосударственнойПошлиныЗаРегистрацию(ЭтоЮрЛицо = Ложь) Экспорт
	
	Если ЭтоЮрЛицо Тогда
		Возврат СуммаПошлиныРегистрацияЮЛ();
	КонецЕсли;
	
	Возврат СуммаПошлиныРегистрацияИП();
	
КонецФункции

// Возвращает представление отсканированного файла:
// - если файлы не выбраны, то возвращает представление "Выбрать"
// - иначе по шаблону: количество страниц
//
// Параметры:
//   КоличествоФайлов - Число - Количество выбранных файлов
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеФайлаПоУмолчанию(КоличествоФайлов = 0) Экспорт
	
	Если Не ЗначениеЗаполнено(КоличествоФайлов) Тогда
		Возврат НСтр("ru = 'Выбрать'");
	КонецЕсли;
	
	Возврат СтрокаСЧислом(
		"Выбрать;%1 файл;;%1 файла;%1 файлов;%1 файла",
		КоличествоФайлов,
		ВидЧисловогоЗначения.Количественное,
		"L=ru");
	
	КонецФункции

// Устанавливает представление вида документа на форме при выборе отсканированных файлов
//
// Параметры:
//   Форма             - ФормаКлиентскогоПриложения
//   ВыбранныйФайл     - Строка - См. РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов()
//   КоличествоСтраниц - Число - Количество выбранных файлов
//   НомерДокумента    - Строка - Для вида документа "Иной документ" номер прочего документа
//
Процедура УстановитьПредставлениеОтсканированногоФайла(Форма, ВыбранныйФайл, КоличествоСтраниц = 0, НомерДокумента = 0) Экспорт
	
	ВидыДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
	ПредставлениеФайла = ПредставлениеФайлаПоУмолчанию(КоличествоСтраниц);
	Элементы = Форма.Элементы;
	
	Если ВыбранныйФайл = ВидыДокументов.ИнойДокумент Тогда
		
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			Элементы[СтрШаблон(СтрШаблон("ИнойДокумент%1", НомерДокумента))].Заголовок = ПредставлениеФайла;
		Иначе
			Для Каждого ТекущийЭлемент Из Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы Цикл
				
				Если Не ЭтоГруппаИногоДокумента(ТекущийЭлемент.Имя) Тогда
					Продолжить;
				КонецЕсли;
				
				НомерИногоДокумента = РегистрацияОрганизацииКлиентСервер.НомерИногоДокумента(ТекущийЭлемент.Имя);
				Элементы[СтрШаблон(СтрШаблон("ИнойДокумент%1", НомерИногоДокумента))].Заголовок = ПредставлениеФайла;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Элементы.Найти(СтрШаблон("Скан%1", ВыбранныйФайл)) <> Неопределено Тогда
		Форма[СтрШаблон("Скан%1", ВыбранныйФайл)] = ПредставлениеФайла;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Заявление"); // ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
	Результат.Вставить("ОтображатьИндивидуальныйУстав", Ложь);
	Результат.Вставить("ИзмененияТребуютУведомления", Ложь);
	Результат.Вставить("ЭтоЮрЛицо", Ложь);
	Результат.Вставить("ЕдинственныйУчредительФизическоеЛицо", Ложь);
	Результат.Вставить("ЕдинственныйУчредительЮридическоеЛицо", Ложь);
	Результат.Вставить("ДатаСоставления", '00010101');
	
	Результат.Вставить("ЕстьПатент", Ложь);
	Результат.Вставить("ЕстьУведомлениеОПереходеНаУСН", Ложь);
	Результат.Вставить("НуженДокументПодтверждающийАдрес", Ложь);
	Результат.Вставить("НуженДокументПодтверждающийЛичность", Ложь);
	Результат.Вставить("ТребуетсяСправкаОбОтсутствииСудимости", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Управляет свойствами элементов формы при подаче документов в электронном виде
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения
//   ПараметрыВыполнения - См. НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде()
//
Процедура УправлениеФормойПриПодачеДокументовВЭлектронномВиде(Форма, ПараметрыВыполнения) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПоддерживаетсяXMLФорматЗаявления = ПоддерживаетсяXMLФорматЗаявления(ПараметрыВыполнения.ДатаСоставления)
		И Форма.ФорматОтправкиДокументов = "XML";
	
	Если ПоддерживаетсяXMLФорматЗаявления Тогда
		Элементы.ЗаголовокПакетДокументов.Заголовок = НСтр("ru = 'Документы сформированы, проверьте корректность заполнения перед отправкой'");
		Если Не ПараметрыВыполнения.ЭтоЮрЛицо И ПараметрыВыполнения.НуженДокументПодтверждающийЛичность Тогда
			ПодписьСканыДокументов = НСтр("ru = 'Прикрепите необходимые документы'");
		Иначе
			ПодписьСканыДокументов = НСтр("ru = 'Прикрепите дополнительные документы'");
		КонецЕсли;
	Иначе
		Элементы.ЗаголовокПакетДокументов.Заголовок = Нстр("ru = 'Документы готовы. Распечатайте, подпишите и отсканируйте.'");
		ПодписьСканыДокументов = НСтр("ru = 'Сформируйте пакет документов для электронной регистрации'");
	КонецЕсли;
	
	Элементы.ПодписьДокументовЭЦПЗаголовокДекорация.Заголовок = ПодписьСканыДокументов;
	
	Элементы.ПодписьДокументовЭЦП.Видимость = Истина;
	Элементы.УплатаГоспошлины.Видимость = Ложь;
	
	Если ПараметрыВыполнения.ИзмененияТребуютУведомления Тогда
		Элементы.ПодписьДокументовЭЦПЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
		Элементы.РегистрацияИзмененийЭлектронноЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап4;
	Иначе
		Элементы.ПодписьДокументовЭЦПЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап2;
		Элементы.РегистрацияИзмененийЭлектронноЗаголовокКартинка.Картинка = БиблиотекаКартинок.РегистрацияЭтап3;
	КонецЕсли;
	
	Элементы.РегистрацияИзмененийЭлектронно.Видимость = Истина;
	ДокументыПодписаны = ЗначениеЗаполнено(Форма.ПодписанныеДокументы);
	
	Если ДокументыПодписаны Тогда
		
		Элементы.ПодписатьДокументы.Доступность = Ложь;
		Элементы.ПодписанныеДокументыЗначение.Заголовок =
			РегистрацияОрганизацииВызовСервера.НаименованиеПодписанногоКонтейнера(Форма.ПодписанныеДокументы);
		
		Элементы.РегистрирующийОрганКод.Доступность = Ложь;
		Элементы.РегистрирующийОрганСписок.Доступность = Ложь;
		Элементы.ДобавитьИнойДокумент.Доступность = Ложь;
		
	Иначе
		Элементы.ПодписатьДокументы.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.ПодписанныеДокументыЗначение.Заголовок = "";
		Элементы.РегистрирующийОрганКод.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.РегистрирующийОрганСписок.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.ДобавитьИнойДокумент.Доступность = Не Форма.ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ПояснениеСправкаОСудимости") <> Неопределено Тогда
		Элементы.ПояснениеСправкаОСудимости.Видимость = ПараметрыВыполнения.ТребуетсяСправкаОбОтсутствииСудимости;
	КонецЕсли;
	
	Если ПоддерживаетсяXMLФорматЗаявления Тогда
		УстановитьСвойстваЭлементовГруппы(Форма, "СканЗаявление", Ложь);
		УстановитьСвойстваЭлементовГруппы(Форма, "СканУведомлениеОПереходеНаУСН", Ложь);
		УстановитьСвойстваЭлементовГруппы(Форма, "СканПатент", Ложь);
	Иначе
		УстановитьСвойстваЭлементовГруппы(Форма, "СканЗаявление", Истина);
		УстановитьСвойстваЭлементовГруппы(Форма, "СканУведомлениеОПереходеНаУСН", ПараметрыВыполнения.ЕстьУведомлениеОПереходеНаУСН);
		УстановитьСвойстваЭлементовГруппы(Форма, "СканПатент", ПараметрыВыполнения.ЕстьПатент);
	КонецЕсли;
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканДокументПодтверждающийАдрес",
		ПараметрыВыполнения.НуженДокументПодтверждающийАдрес);
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканДокументПодтверждающийЛичность",
		ПараметрыВыполнения.НуженДокументПодтверждающийЛичность);
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканРешение",
		ПараметрыВыполнения.ЭтоЮрЛицо И ПараметрыВыполнения.ЕдинственныйУчредительФизическоеЛицо);
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканПротокол",
		ПараметрыВыполнения.ЭтоЮрЛицо И Не ПараметрыВыполнения.ЕдинственныйУчредительФизическоеЛицо);
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканДоговор",
		ПараметрыВыполнения.ЭтоЮрЛицо И Не ПараметрыВыполнения.ЕдинственныйУчредительФизическоеЛицо);
	
	УстановитьСвойстваЭлементовГруппы(Форма, "СканУстав",
		ПараметрыВыполнения.ЭтоЮрЛицо И ПараметрыВыполнения.ОтображатьИндивидуальныйУстав);
	
	Если Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
		
		Элементы.ЗаголовокФормированиеТранспортногоКонтейнера.Заголовок =
			НСтр("ru = 'Подпишите документы квалифицированной электронной подписью и отправьте в налоговый орган.'");
		
		Элементы.ГруппаОтправкаДокументовОнлайн.Видимость = Истина;
		Элементы.ГруппаФормированиеТранспортногоКонтейнера.Видимость = Ложь;
		Элементы.ПодписатьИОтправить.Доступность = Не ДокументыПодписаны И Не Форма.ТолькоПросмотр;
		
		ДанныеСостоянияОтправки = РегистрацияОрганизацииВызовСервера.ДанныеСостоянияОтправкиДокументов(
			ПараметрыВыполнения.Заявление,
			ДокументыПодписаны,
			Форма.НетСертификатаПодписи,
			Форма.ОшибкаПодписанияДокументов,
			ПараметрыВыполнения.ЭтоЮрЛицо);
		
		Если ЗначениеЗаполнено(ДанныеСостоянияОтправки.ТекстПодсказки) Тогда
			
			Элементы.Группа_СостояниеОтправкиВФНС.Видимость = Истина;
			Элементы.СтатусОтправкиДокументовКартинка.Картинка = ДанныеСостоянияОтправки.Картинка;
			Элементы.СтатусОтправкиНадпись.Заголовок = ДанныеСостоянияОтправки.ТекстПодсказки;
			Элементы.СостояниеОтправкиДополнение.Видимость = ЗначениеЗаполнено(ДанныеСостоянияОтправки.Дополнение);
			Элементы.СостояниеОтправкиДополнение.Заголовок = ДанныеСостоянияОтправки.Дополнение;
			
		Иначе
			Элементы.Группа_СостояниеОтправкиВФНС.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ЗаголовокФормированиеТранспортногоКонтейнера.Заголовок =
			НСтр("ru = 'Подпишите документы квалифицированной электронной подписью.'");
		
		Элементы.КартинкаОшибкаПодписиДокументов.Видимость = Форма.ОшибкаПодписанияДокументов;
		Элементы.ГруппаОтправкаДокументовОнлайн.Видимость = Ложь;
		Элементы.ГруппаФормированиеТранспортногоКонтейнера.Видимость = Истина;
		Элементы.Группа_РезультатПодписанияДокументов.Видимость = ДокументыПодписаны;
	КонецЕсли;
	
	Если Элементы.РегистрирующийОрганСписок.СписокВыбора.Количество() > 0 Тогда
		Элементы.РегистрирующийОрганСписок.Видимость = Истина;
		Элементы.РегистрирующийОрганКод.Видимость = Ложь;
	Иначе
		Элементы.РегистрирующийОрганСписок.Видимость = Ложь;
		Элементы.РегистрирующийОрганКод.Видимость = Истина;
	КонецЕсли;
	
	// Управление свойствами элементов для иных документов
	Если Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы.Количество() > 1 Тогда
		
		Для Каждого ТекущийИнойДокумент Из Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы Цикл
			
			Если Не ЭтоГруппаИногоДокумента(ТекущийИнойДокумент.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокумента = СтрЗаменить(ТекущийИнойДокумент.Имя, НаименованиеГруппыИногоДокумента(), "");
			КомандаОчистки = Элементы.Найти(СтрШаблон("%1%2", НаименованиеКомандыОчисткиИногоДокумента(), НомерДокумента));
			Если КомандаОчистки <> Неопределено Тогда
				КомандаОчистки.Доступность = Не ДокументыПодписаны;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовГруппы(Форма, ИмяЭлемента, ВидимостьГруппы)
	
	Элементы = Форма.Элементы;
	ЭлементФормы = Элементы.Найти(СтрШаблон("Группа%1", ИмяЭлемента));
	ВозможностьРедактирования = Не ЗначениеЗаполнено(Форма.ПодписанныеДокументы);
	
	Если ЭлементФормы <> Неопределено И ВидимостьГруппы Тогда
		ЭлементФормы.Видимость = Истина;
		Доступность = ВозможностьРедактирования И ДоступностьКнопкиОчисткиСканаДокумента(Форма[ИмяЭлемента]);
		Элементы[СтрШаблон("Очистить%1", ИмяЭлемента)].Доступность = Доступность;
	ИначеЕсли ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПрикрепленныйДокумент(Форма, ВидДокумента, НомерДокумента = 0, ПараметрыОтображения) Экспорт
	
	РегистрацияОрганизацииВызовСервера.УдалитьПрикрепленныеФайлы(ПараметрыОтображения.Заявление, ВидДокумента, НомерДокумента);
	УстановитьПредставлениеОтсканированногоФайла(Форма, ВидДокумента, , НомерДокумента);
	
	Если ЗначениеЗаполнено(Форма.ПодписанныеДокументы) Тогда
		
		РегистрацияОрганизацииВызовСервера.УдалитьПрикрепленныеФайлы(
			ПараметрыОтображения.Заявление,
			РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
		
		Форма.ПодписанныеДокументы = Неопределено;
		
	КонецЕсли;
	
	УправлениеФормойПриПодачеДокументовВЭлектронномВиде(Форма, ПараметрыОтображения);
	
КонецПроцедуры

// Возвращает идентификатор страницы для описания прикрепленного файла
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторСтраницыПрикрепленногоФайлаДокумента() Экспорт
	
	Возврат Нстр("ru = 'страница №'");
	
КонецФункции

Функция КодРегистрирующегоОрганаПоИмениФайла(ИмяФайла) Экспорт
	
	РегистрирующийОрганКод = "";
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		СоставИмениФайла = СтрРазделить(ИмяФайла, "_", Истина);
		Если СоставИмениФайла.Количество() > 2 Тогда
			РегистрирующийОрганКод = СоставИмениФайла[2];
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегистрирующийОрганКод;
	
КонецФункции

Функция НаименованиеГруппыИногоДокумента() Экспорт
	
	Возврат "ГруппаИнойДокумент";
	
КонецФункции

Функция ПредставлениеИногоДокумента() Экспорт
	
	Возврат "ИнойДокумент";
	
КонецФункции

Функция НаименованиеКомандыОчисткиИногоДокумента() Экспорт
	
	Возврат "ОчиститьОтсканированныйИнойДокумент";
	
КонецФункции

Функция ВидДокументаРегистрацияИП() Экспорт
	
	Возврат "ЗаявлениеПоФормеР21001";
	
КонецФункции

Функция ВидДокументаРегистрацияООО() Экспорт
	
	Возврат "ЗаявлениеПоФормеР11001";
	
КонецФункции

Функция УчредителиПоТипам(Форма) Экспорт
	
	НаименованияФизическихЛиц = Новый Массив;
	НаименованияЮридическихЛиц = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Форма.Учредители Цикл
		
		Если СтрокаТаблицы.Свойство("Учредитель") Тогда
			ИмяКолонки = "Учредитель";
		Иначе
			ИмяКолонки = "Наименование";
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
			НаименованияФизическихЛиц.Добавить(СтрокаТаблицы[ИмяКолонки]);
		ИначеЕсли СтрокаТаблицы.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			НаименованияЮридическихЛиц.Добавить(СтрокаТаблицы[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ЮридическиеЛица, ФизическиеЛица", НаименованияЮридическихЛиц, НаименованияФизическихЛиц);
	
КонецФункции

// Возвращает идентификатор Листа записи ЕГР
//
// Параметры:
//   ЮридическоеФизическоеЛицо - ПеречислениеСсылка.ЮридическоеФизическоеЛицо
//
// Возвращаемое значение:
//   Строка
//
Функция ТипФайлаЛистЗаписиЕГР(ЮридическоеФизическоеЛицо = Неопределено) Экспорт
	
	ЭтоЮрЛицо = ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
	Если ЭтоЮрЛицо Тогда
		ТипФайла = "ВыпискаЗапЕГРЮЛ";
	Иначе
		ТипФайла = "ВыпискаЗапЕГРИП";
	КонецЕсли;
	
	Возврат ТипФайла;
	
КонецФункции

// Возвращаем номер иного документа по наименованию группы иного документа
//
// Параметры:
//   ИмяГруппыДокумента - Строка - Наименование группы, в которой располагается иной документ
//
// Возвращаемое значение:
//   Число
//
Функция НомерИногоДокумента(ИмяГруппыДокумента) Экспорт
	
	НаименованиеГруппы = РегистрацияОрганизацииКлиентСервер.НаименованиеГруппыИногоДокумента();
	ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0));
	
	Возврат ТипЧисло.ПривестиЗначение(СтрЗаменить(ИмяГруппыДокумента, НаименованиеГруппы, ""));
	
КонецФункции

// Определяет, поддерживается ли отправка заявлений на регистрацию XML-формате в налоговом органе
//
// Параметры:
//   ДатаСоставления - Дата - Дата составления регламентированного уведомления
//
// Возвращаемое значение:
//   Булево
//
Функция ПоддерживаетсяXMLФорматЗаявления(ДатаСоставления) Экспорт
	
	// Приказ Федеральной налоговой службы от 28.12.2022 № ЕД-7-14/1267@
	Возврат ДатаСоставления >= '20230221';
	
КонецФункции

// Возвращает признак, возможно ли отправка заявления в XML-формате в в налоговый орган
//
// Параметры:
//   ДатаСоставления          - Дата - Дата составления регламентированного уведомления
//   СпособПодачиДокументов   - Строка - См. РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов()
//   ФорматОтправкиДокументов - Строка - TIF, XML
//
// Возвращаемое значение:
//   Булево
//
Функция ОтправлятьЗаявлениеВXMLФормате(ДатаСоставления, СпособПодачиДокументов, ФорматОтправкиДокументов) Экспорт
	
	Результат = Ложь;
	
	Если ПоддерживаетсяXMLФорматЗаявления(ДатаСоставления)
		И ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов)
		И ФорматОтправкиДокументов = "XML" Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает подсказку для сформированных из помощника документов
//
// Параметры:
//   СпособПодачиДокументов     - Строка - См. РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов()
//   ФорматОтправкиДокументов   - Строка - XML, TIF
//   ДатаСоставления            - Дата - Дата составления заявление для регистрации
//   ЭтоРегламентированнаяФорма - Булево - Признак регламентированной формы
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПодсказкиКСформированнымДокументам(СпособПодачиДокументов, ФорматОтправкиДокументов, ДатаСоставления = '00010101', ЭтоРегламентированнаяФорма = Ложь) Экспорт
	
	Если Не ЭтоЭлектронныйСпособПодачиДокументов(СпособПодачиДокументов) Тогда
		Возврат НСтр("ru = 'распечатайте 2 экземпляра'"); // Один в налоговую, второй себе
	КонецЕсли;
	
	Если ПоддерживаетсяXMLФорматЗаявления(ДатаСоставления) И ФорматОтправкиДокументов = "XML" Тогда
		
		Если ЭтоРегламентированнаяФорма Тогда
			Возврат НСтр("ru = 'распечатывать не нужно, будет отправлено в XML-формате'");
		Иначе
			// Если нельзя отправлять в XML-формате, тогда пользователю нужно документ распечатать, подписать и прикрепить скан документа
			Возврат НСтр("ru = 'распечатайте и подпишите документ'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область ПодтверждениеКонтактнойИнформации

// Возвращает идентификатор способа подтверждения номера мобильного телефона
//
// Возвращаемое значение:
//   Строка
//
Функция СпособПодтвержденияТелефон() Экспорт
	
	Возврат "Телефон";
	
КонецФункции

// Возвращает идентификатор способа подтверждения электронной почты
//
// Возвращаемое значение:
//   Строка
//
Функция СпособПодтвержденияЭлектроннаяПочта() Экспорт
	
	Возврат "Почта";
	
КонецФункции

// Возвращает длину кода для подтверждения контактной информации
//
// Возвращаемое значение:
//   Число
//
Функция ДлинаКодаПодтверждения() Экспорт
	
	Возврат 6;
	
КонецФункции

// Инициализирует и возвращает структуру дополнительных параметров контактной информации
//
// Параметры:
//   Телефон             - Строка - Значение контектной информации для мобильного телефона
//   Почта               - Строка - Значение контектной информации для электронной почты
//   ИмяРеквизитаТелефон - Строка - Имя реквизита формы, из которой происходит инициализация структуры
//   ИмяРеквизитаПочта   - Строка - Имя реквизита формы, из которой происходит инициализация структуры
//
// Возвращаемое значение:
//   Структура
//
Функция ДополнительныеПараметрыКонтактнойИнформации(Телефон, Почта, ИмяРеквизитаТелефон, ИмяРеквизитаПочта, ИмяЭлемента = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Телефон", Телефон);
	Результат.Вставить("Почта", Почта);
	Результат.Вставить("ИмяРеквизитаТелефон", ИмяРеквизитаТелефон);
	Результат.Вставить("ИмяРеквизитаПочта", ИмяРеквизитаПочта);
	Результат.Вставить("ИмяЭлементаФормы", ИмяЭлемента); // Спозиционировать курсор на выбранном элементе
	
	Возврат Результат;
	
КонецФункции

// Обработчик управления свойствами формы для группы подтверждения контактной информации
//
// Параметры:
// Форма                   - ФормаКлиентскогоПриложения - форма, из которой вызывается обработчик
// ДополнительныеПараметры - Структура - См. ДополнительныеПараметрыКонтактнойИнформации()
//
Процедура УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(Форма, ДополнительныеПараметры) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти(ДополнительныеПараметры.ИмяРеквизитаТелефон) <> Неопределено Тогда
		ЭлементТелефонЗаявителя = Элементы[ДополнительныеПараметры.ИмяРеквизитаТелефон];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти(ДополнительныеПараметры.ИмяРеквизитаПочта) <> Неопределено Тогда
		ЭлементПочтаЗаявителя = Элементы[ДополнительныеПараметры.ИмяРеквизитаПочта];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		
		КодПодтвержденияТелефонаЗапрошен = КодПодтвержденияЗапрошен(Форма, СпособПодтвержденияТелефон());
		
		Элементы.ГруппаОтправкаКодаПодтвержденияТелефона.Видимость =
			(Не КодПодтвержденияТелефонаЗапрошен И Не Форма.НомерТелефонаПодтвержден);
		
		Элементы.ГруппаНомерТелефонаВыслатьКод.Видимость =
			(КодПодтвержденияТелефонаЗапрошен И Не Форма.НомерТелефонаПодтвержден);
		
		КодПодтвержденияПочтыЗапрошен = КодПодтвержденияЗапрошен(Форма, СпособПодтвержденияЭлектроннаяПочта());
		
		Элементы.ГруппаОтправкаКодаПодтвержденияПочты.Видимость =
			(Не КодПодтвержденияПочтыЗапрошен И Не Форма.ЭлектроннаяПочтаПодтверждена);
		
		Элементы.ГруппаНомерПочтаВыслатьКод.Видимость =
			(КодПодтвержденияПочтыЗапрошен И Не Форма.ЭлектроннаяПочтаПодтверждена);
		
		Если Не ЗначениеЗаполнено(Форма.СрокПовторнойОтправкиКодаДляТелефона)
			Или Не ЗначениеЗаполнено(Форма.СрокДействияКодаПодтвержденияТелефона) Тогда
			
			Элементы.ТекстВыслатьПовторноКодПодтверждения.Видимость = Истина;
		Иначе
			Элементы.ТекстВыслатьПовторноКодПодтверждения.Видимость = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.СрокПовторнойОтправкиКодаДляПочты)
			Или Не ЗначениеЗаполнено(Форма.СрокДействияКодаПодтвержденияПочты) Тогда
			
			Элементы.ТекстВыслатьПовторноКодПодтвержденияПочта.Видимость = Истина;
		Иначе
			Элементы.ТекстВыслатьПовторноКодПодтвержденияПочта.Видимость = Ложь;
		КонецЕсли;
		
		ЭлементТелефонЗаявителя.РасширеннаяПодсказка.Заголовок =
			НСтр("ru = 'На указанный номер мобильного телефона придёт SMS для подтверждения'");
			
		ЭлементТелефонЗаявителя.Заголовок = НСтр("ru = 'Мобильный
			|телефон'");
		
		Элементы.ТекстПовторнаяОтправкаКодаТелефон.Видимость = ЗначениеЗаполнено(Форма.ТекстПовторнаяОтправкаКодаТелефон);
		Элементы.ТекстПовторнаяОтправкаКодаПочта.Видимость = ЗначениеЗаполнено(Форма.ТекстПовторнаяОтправкаКодаПочта);
		
		ЭлементТелефонЗаявителя.ОтметкаНезаполненного = Не Форма.НомерТелефонаПодтвержден;
		ЭлементПочтаЗаявителя.ОтметкаНезаполненного = Не Форма.ЭлектроннаяПочтаПодтверждена;
		Элементы.КартинкаТелефонПроверен.Видимость = Форма.НомерТелефонаПодтвержден;
		Элементы.КартинкаЭлектроннаяПочтаПроверена.Видимость = Форма.ЭлектроннаяПочтаПодтверждена;
		
		Элементы.СтатусОтправкиКодаПодтвержденияТелефона.Видимость = Форма.КодПодтвержденияТелефонаОтправляется;
		Элементы.ВыслатьСМССКодом.Доступность = Не Форма.КодПодтвержденияТелефонаОтправляется;
		
		Элементы.СтатусОтправкиКодаПодтвержденияПочты.Видимость = Форма.КодПодтвержденияПочтыОтправляется;
		Элементы.ВыслатьПисьмоНаПочту.Доступность = Не Форма.КодПодтвержденияПочтыОтправляется;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяЭлементаФормы) Тогда
			Форма.ТекущийЭлемент = Элементы[ДополнительныеПараметры.ИмяЭлементаФормы];
		ИначеЕсли КодПодтвержденияТелефонаЗапрошен И Не Форма.НомерТелефонаПодтвержден Тогда
			Если Элементы.КодПодтвержденияТелефона.Видимость Тогда
				Форма.ТекущийЭлемент = Элементы.КодПодтвержденияТелефона;
			Иначе
				// Если код отправлен, но срок истек, тогда курсор позиционируем на поле номера телефона
				Форма.ТекущийЭлемент = ЭлементТелефонЗаявителя;
			КонецЕсли;
		ИначеЕсли КодПодтвержденияПочтыЗапрошен И Не Форма.ЭлектроннаяПочтаПодтверждена Тогда
			Если Элементы.КодПодтвержденияПочты.Видимость Тогда
				Форма.ТекущийЭлемент = Элементы.КодПодтвержденияПочты;
			Иначе
				// Если код отправлен, но срок истек, тогда курсор позиционируем на поле электронной почты
				Форма.ТекущийЭлемент = ЭлементПочтаЗаявителя;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаФорматОтправкиДокументов.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаОтправкаКодаПодтвержденияТелефона.Видимость = Ложь;
		Элементы.ГруппаНомерТелефонаВыслатьКод.Видимость = Ложь;
		
		Элементы.ГруппаОтправкаКодаПодтвержденияПочты.Видимость = Ложь;
		Элементы.ГруппаНомерПочтаВыслатьКод.Видимость = Ложь;
		ЭлементТелефонЗаявителя.Заголовок = НСтр("ru = 'Телефон'");
		
		ЭлементТелефонЗаявителя.РасширеннаяПодсказка.Заголовок =
			РегистрацияОрганизацииВызовСервера.ТекстПодсказкиНомерТелефона(Форма.ИмяФормы);
		
		ЭлементТелефонЗаявителя.ОтметкаНезаполненного =
			Не ЗначениеЗаполнено(ДополнительныеПараметры.Телефон);
		
		ЭлементПочтаЗаявителя.ОтметкаНезаполненного =
			Не ЗначениеЗаполнено(ДополнительныеПараметры.Почта);
		
		Элементы.КартинкаТелефонПроверен.Видимость = Ложь;
		Элементы.КартинкаЭлектроннаяПочтаПроверена.Видимость = Ложь;
		
		Элементы.ГруппаФорматОтправкиДокументов.Видимость = Ложь;
		
	КонецЕсли;
	
	// Блокируем форму ввода номера телефона в отдельной форме -
	// для форм регистрации значение поля телефон преобразуется к нужному формату:
	// п.12 Требований Приказа ФНС России от 31.08.2020 N ЕД-7-14/617@
	ЭлементТелефонЗаявителя.КнопкаВыбора = Ложь;
	
КонецПроцедуры

Функция ИдентификаторыФормПомощниковРегистрации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СнятиеСУчета", "ФормаСнятияСУчета");
	Результат.Вставить("ВнесениеИзменений", "ВнесениеИзмененийЕГР");
	Результат.Вставить("РегистрацияООО", "РегистрацияООО");
	Результат.Вставить("РегистрацияИП", "РегистрацияИП");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Выполняет проверку выгрузки заявления и возвращает список ошибок
//
// Параметры:
//   Заявление - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Проверяемое заявление о регистрации в ЕГРЮЛ/ЕГРИП
//
// Возвращаемое значение:
//   Строка
//
Функция ОшибкаПроверкиВыгрузкиЗаявления(Заявление) Экспорт
	
	Результат = "";
	
	СписокОшибокПриПроверкеВыгрузки = РегистрацияОрганизацииВызовСервера.ОшибкиПроверкиВыгрузкиУведомления(Заявление);
	Если ЗначениеЗаполнено(СписокОшибокПриПроверкеВыгрузки)
		И ТипЗнч(СписокОшибокПриПроверкеВыгрузки) = Тип("СписокЗначений") Тогда
		
		СообщенияОбОшибке = Новый Массив;
		СообщенияОбОшибке.Добавить(НСтр("ru = 'При проверке заполненного заявления возникли ошибки.
		|Перейдите в форму регламентированного отчета, нажмите ""Проверить выгрузку"" и устраните ошибки'"));
		
		НомерОшибки = 1;
		// Выгрузка заявления содержит ошибки, необходимо пользователю поправить
		Для Каждого ТекущаяОшибка Из СписокОшибокПриПроверкеВыгрузки Цикл
			ИмяСтраницы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяОшибка.Значение, "ИмяСтраницы");
			ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяОшибка.Значение, "ОписаниеОшибки");
			Если ЗначениеЗаполнено(ИмяСтраницы) И ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				СообщенияОбОшибке.Добавить(СтрШаблон("%1. %2 - %3", НомерОшибки, ИмяСтраницы, ОписаниеОшибки));
				НомерОшибки = НомерОшибки + 1;
			КонецЕсли;
		КонецЦикла;
		
		Результат = СтрСоединить(СообщенияОбОшибке, Символы.ПС);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возращает количество дней рассмотрения заявления в процессе регистрации в ЕГР
// касается форм: Р11001, Р13014, Р21001, Р24001, Р26001
//
// Возвращаемые значения:
//   Число
//
Функция СрокРассмотренияЗаявления() Экспорт
	
	// п. 1 ст. 8 Федеральный закон от 08.08.2001 N 129-ФЗ
	Возврат 5;
	
КонецФункции

// Возвращает признак того, что уведомление подается на регистраци нового ИП или ООО
//
// Параметры:
//   ИмяОтчета - Строка - Имя регламентированного отчета, напр. РегламентированноеУведомлениеФормаР11001
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоРегистрацияНовогоБизнеса(ИмяОтчета) Экспорт
	
	Возврат ИмяОтчета = "РегламентированноеУведомлениеФормаР11001"
		Или ИмяОтчета = "РегламентированноеУведомлениеФормаР21001";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяПомощникаРегистрации() Экспорт
	
	Возврат "Регистрация";
	
КонецФункции

Функция ИмяПомощникаВнесенияИзменений() Экспорт
	
	Возврат "ВнесениеИзменений";
	
КонецФункции

Функция МинимальныйУставныйКапитал() Экспорт

	Возврат 10000;

КонецФункции

Функция ЭтоДолжностьРуководителя(Должность) Экспорт
	
	НаименованияРуководителя = Новый Массив;
	НаименованияРуководителя.Добавить(НСтр("ru='ГЕНЕРАЛЬНЫЙ ДИРЕКТОР'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	НаименованияРуководителя.Добавить(НСтр("ru='ДИРЕКТОР'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Возврат НаименованияРуководителя.Найти(ВРег(Должность)) <> Неопределено;
	
КонецФункции

Функция ОснованиеПолномочийПредставителя() Экспорт
	
	Возврат НСтр("ru = 'Устава'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Определяет вносятся ли изменения в учредительные документы
//
// Параметры:
//   Изменено - Структура - см. НоваяСтруктураИзменений()
//   АдресВУставеПолный - Булево - Истина, если в уставе указан полный юридический адрес
//   КодыОКВЭДпротиворечатУставу - Булево - Истина, если изменения кодов ОКВЭД необходимо внести в устав
//
// Возвращаемое значение:
//   Булево - Истина, если изменения вносятся в учредительные документы
//
Функция ИзмененияВносятсяВУчредительныеДокументы(Изменено, АдресВУставеПолный = Неопределено, КодыОКВЭДпротиворечатУставу = Неопределено, НовыйУстав = Ложь) Экспорт
	
	ИзмененияВносятся = Изменено.СокращенноеНаименование
		Или Изменено.ПолноеНаименование
		Или Изменено.Местоположение
		Или Изменено.УставныйКапитал
		Или НовыйУстав;
	
	Если АдресВУставеПолный <> Неопределено Тогда
		ИзмененияВносятся = ИзмененияВносятся Или (Изменено.ЮридическийАдрес И АдресВУставеПолный);
	КонецЕсли;
	
	Если КодыОКВЭДпротиворечатУставу <> Неопределено Тогда
		ИзмененияВносятся = ИзмененияВносятся Или ((Изменено.ОсновнойВидДеятельности Или Изменено.ВидыДеятельности) И КодыОКВЭДпротиворечатУставу);
	КонецЕсли;
	
	Возврат ИзмененияВносятся;
	
КонецФункции

// Определяет необходимость предварительно вносить в ЕГР сведения о том, что юридическим лицом принято решение об изменении реквизитов
//
// Параметры:
//   Изменено - Структура - см. НоваяСтруктураИзменений()
//   ЮрАдресИПропискаГлавногоСовпадают - Булево
//
// Возвращаемое значение:
//   Булево - Истина, если регистрация изменений выполняется в два этапа
//
Функция ИзмененияТребуютУведомления(Изменено, ЮрАдресИПропискаГлавногоСовпадают) Экспорт
	
	// Документы для государственной регистрации изменения адреса юридического лица, при котором изменяется место нахождения
	// юридического лица, не могут быть представлены в регистрирующий орган до истечения двадцати дней с момента внесения
	// в единый государственный реестр юридических лиц сведений о том, что юридическим лицом принято решение об изменении
	// адреса юридического лица, при котором изменяется место нахождения юридического лица.
	
	Возврат Изменено.Местоположение И НЕ ЮрАдресИПропискаГлавногоСовпадают;
	
КонецФункции

// Возвращает структуру изменений, вносимых в ЕГР для передачи в качестве параметра функциям
//
// Возвращаемое значение:
//   Структура - состав см. в коде функции
//
Функция НоваяСтруктураИзменений() Экспорт
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("СокращенноеНаименование", Ложь);
	СтруктураИзменений.Вставить("ПолноеНаименование", Ложь);
	СтруктураИзменений.Вставить("ЮридическийАдрес", Ложь);
	СтруктураИзменений.Вставить("Местоположение", Ложь);
	СтруктураИзменений.Вставить("Руководитель", Ложь);
	СтруктураИзменений.Вставить("Учредители", Ложь);
	СтруктураИзменений.Вставить("УставныйКапитал", Ложь);
	СтруктураИзменений.Вставить("ОсновнойВидДеятельности", Ложь);
	СтруктураИзменений.Вставить("ВидыДеятельности", Ложь);
	СтруктураИзменений.Вставить("Устав", Ложь);
	
	Возврат СтруктураИзменений;
	
КонецФункции

Функция НовыеПараметрыПомощникаВнесенияИзменений() Экспорт
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("Заявление", Неопределено);
	ПараметрыПомощника.Вставить("КонтекстныйВызов", Ложь);
	ПараметрыПомощника.Вставить("СоздатьПриОткрытии", Ложь);
	ПараметрыПомощника.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	Возврат ПараметрыПомощника;
	
КонецФункции

Функция ПоддерживаемыеПравовыеФормы() Экспорт
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Индивидуальные предприниматели");
	ПравовыеФормы.Добавить("Общества с ограниченной ответственностью");
	
	Возврат ПравовыеФормы;
	
КонецФункции

Функция ФинальныйСтатусЗаявленияВЕГР() Экспорт
	
	Возврат "Получены документы";
	
КонецФункции

Функция СпособыПодачиДокументов() Экспорт
	
	Способы = Новый Структура;
	
	Способы.Вставить("ИФНСлично", "ИФНСлично");
	Способы.Вставить("ИФНСпредставитель", "ИФНСпредставитель");
	Способы.Вставить("МФЦлично", "МФЦлично");
	Способы.Вставить("Почта", "Почта");
	Способы.Вставить("ИФНСэлектронно", "ИФНСэлектронно");
	Способы.Вставить("ИФНСэлектронноОнлайн", "ИФНСэлектронноОнлайн");
	
	Возврат Способы;
	
КонецФункции

// Возвращает доступные способы подачи документов для регистрации
//
// Параметры:
//   Период - Дата - Дата, на которую необходимо получить способы подачи документов
//
// Возвращаемое значение:
//   Структура
//
Функция ДоступныеСпособыПодачиДокументов(Период) Экспорт
	
	Способы = СпособыПодачиДокументов();
	
	Если НотариусПодаетДокументыСамостоятельно(Период) Тогда
		Способы.Удалить("Почта");
		Способы.Удалить("ИФНСпредставитель");
	КонецЕсли;
	
	Возврат Способы;
	
КонецФункции

Функция СпособРегистрацииПоСпособуПодачиДокументов(СпособПодачиДокументов) Экспорт
	
	Если ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СпособыРегистрации(), СпособПодачиДокументов, 1);
	Иначе
		Возврат СпособыРегистрации().ИФНСлично;
	КонецЕсли;
	
КонецФункции

Функция СпособыРегистрации()
	
	Способы = Новый Структура;
	
	Способы.Вставить("ИФНСлично", 1);
	Способы.Вставить("ИФНСпредставитель", 2);
	Способы.Вставить("МФЦлично", 1);
	Способы.Вставить("Почта", 3);
	
	Возврат Способы;
	
КонецФункции

// Возвращает сумму государственной пошлины за регистрацию физ.лица в качестве ИП
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныРегистрацияИП()
	
	Возврат 800;
	
КонецФункции

// Возвращает сумму государственной пошлины за регистрацию Юридического лица
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныРегистрацияЮЛ()
	
	Возврат 4000;
	
КонецФункции

// Возвращает сумму государственной пошлины за прекращение деятельности ИП
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныЗаПрекращениеДеятельностиИП() Экспорт
	
	Возврат 160;
	
КонецФункции

Функция ДоступностьКнопкиОчисткиСканаДокумента(ПредставлениеСкана)
	
	Возврат ЗначениеЗаполнено(ПредставлениеСкана)
		И ПредставлениеСкана <> РегистрацияОрганизацииКлиентСервер.ПредставлениеФайлаПоУмолчанию();
	
КонецФункции

// Проверяет, запрошен ли в указанной форме код подтверждения контактной информации
//   Форма               - ФормаКлиентскогоПриложения
//   СпособПодтверждения - Строка - См. СпособПодтвержденияТелефон(), СпособПодтвержденияЭлектроннаяПочта()
//
// Параметры:
//
// Возвращаемое значение:
//   Булево
//
Функция КодПодтвержденияЗапрошен(Форма, СпособПодтверждения)
	
	Если СпособПодтверждения = СпособПодтвержденияТелефон() Тогда
		Возврат ЗначениеЗаполнено(Форма.ИдентификаторКодаПодтвержденияТелефона);
	Иначе
		Возврат ЗначениеЗаполнено(Форма.ИдентификаторКодаПодтвержденияПочты);
	КонецЕсли;
	
КонецФункции

Функция ЭтоГруппаИногоДокумента(ИмяЭлемента)
	
	Возврат СтрНайти(ИмяЭлемента, НаименованиеГруппыИногоДокумента()) > 0;
	
КонецФункции

#КонецОбласти
