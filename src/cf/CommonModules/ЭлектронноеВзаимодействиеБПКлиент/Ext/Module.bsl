////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеБПКлиент: вспомогательные процедуры и функции БЭД
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭД

// Выполняет загрузку данных из файла
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана команда.
//
Процедура ЗагрузитьРеализациюТоваровИУслугИзФайла(Форма) Экспорт

	Если Не ЭлектронноеВзаимодействиеБПВызовСервера.ИмеетсяВозможностьЗагрузкиДанныхИзФайла(Форма.ИмяФормы) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для просмотра'"));
		Возврат;
		
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуРеализацииТоваровИУслугXMLИзФайла", ЭтотОбъект, 
		Новый Структура("Форма", Форма));	
		
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

// Выполняет загрузку данных из файла
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана команда.
//
Процедура ЗагрузитьОтчетКомиссионераИзФайла(Форма) Экспорт

	Если Не ЭлектронноеВзаимодействиеБПВызовСервера.ИмеетсяВозможностьЗагрузкиДанныхИзФайла() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для просмотра'"));
		Возврат;
		
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуОтчетаМаркетплейсаИзФайла", ЭтотОбъект, 
		Новый Структура("Форма,ВидОтчета", Форма, "ОтчетКомиссионера"));	
		
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

// Выполняет загрузку данных из файла
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана команда.
//
Процедура ЗагрузитьУведомлениеОВыкупеВайлдберризИзФайла(Форма) Экспорт

	Если Не ЭлектронноеВзаимодействиеБПВызовСервера.ИмеетсяВозможностьЗагрузкиДанныхИзФайла() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для просмотра'"));
		Возврат;
		
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуОтчетаМаркетплейсаИзФайла", ЭтотОбъект, 
		Новый Структура("Форма,ВидОтчета", Форма, "УведомлениеОВыкупе"));	
		
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

// Выполняет загрузку данных из файла
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана команда.
//
Процедура ЗагрузитьРеализациюТоваровИУслугИзЭлектроннойПочты(Форма) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.РеализацияТоваровИУслуг"));
	ДополнительныеПараметры.Вставить("ГлубинаПоиска", 7);
	ДополнительныеПараметры.Вставить("ИдентификаторФормыВладельца", Форма.УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуРеализацииТоваровИУслугXMLИзЭлектроннойПочты", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры,,,,, ОписаниеОповещения);

КонецПроцедуры

Процедура ЗагрузитьОтчетЯндексМаркетИзФайла(Форма) Экспорт

	Если Не ЭлектронноеВзаимодействиеБПВызовСервера.ИмеетсяВозможностьЗагрузкиДанныхИзФайла() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для просмотра'"));
		Возврат;
		
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуОтчетаМаркетплейсаИзФайла", ЭтотОбъект, 
		Новый Структура("Форма, ВидОтчета", Форма, "ОтчетЯндекса"));
		
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область КонвертацияФайлаВФорматФНС

Процедура ПродолжитьЗагрузкуРеализацииТоваровИУслугXMLИзЭлектроннойПочты(СтруктураЭД, ДополнительныеПараметры) Экспорт

	Если СтруктураЭД <> Неопределено Тогда
		
		ЗагрузитьЭД(СтруктураЭД);
		
	КонецЕсли;

КонецПроцедуры  

Процедура ПрочитатьЗагруженныеФайлы(ЗагруженныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ЗагруженныеФайлы <> Неопределено Тогда
		
		ОписаниеФайлов = ЗагруженныеФайлы[0];
		АдресФайла     = ОписаниеФайлов.Хранение;
		ПолноеИмяФайла = ОписаниеФайлов.Имя;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
	Если РасширениеФайла = "zip" Тогда
		
		// Для загрузки электронных документов в архиве zip использован механизм однократных сделок БЭД.
		СтруктураОбмена = Новый Структура();
		СтруктураОбмена.Вставить("НаправлениеЭД"          , ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
		СтруктураОбмена.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		СтруктураОбмена.Вставить("ИмяФайла"               , ПолноеИмяФайла);
		СтруктураОбмена.Вставить("АдресХранилищаФайла"    , АдресФайла);
		СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", "");
		СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок",  "");
		СтруктураОбмена.Вставить("СсылкаНаДокумент"       , Неопределено);
		
		ОписаниеФайла = Новый Структура;

		ОписаниеФайла.Вставить("ИмяФайла", ПолноеИмяФайла);
		ОписаниеФайла.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(АдресФайла));
		
		ОписаниеФайловДокументаПакета = ИнтерфейсДокументовЭДОВызовСервера.ОписаниеФайловДокументаПакета(ОписаниеФайла);
		
		Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета) Тогда
			СтруктураОбмена.Вставить("АдресХранилищаФайла", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ДвоичныеДанные, Форма.УникальныйИдентификатор));
			СтруктураОбмена.Вставить("ИмяФайла", ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ИмяФайла);	
			СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеФайлаДопДанных.ДвоичныеДанные, Форма.УникальныйИдентификатор));
			Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок) Тогда
				СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок", ПоместитьВоВременноеХранилище(
					ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок.ДвоичныеДанные, Форма.УникальныйИдентификатор));
			КонецЕсли;
		КонецЕсли;

		Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаПросмотрЭлектронногоДокумента", Параметры, ,
			СтруктураОбмена.УникальныйИдентификатор);
	Иначе
		ОбработатьТабличныйДокумент(АдресФайла, РасширениеФайла, Форма);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПрочитатьЗагруженныеФайлыВСтруктуру(ЗагруженныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ЗагруженныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОписанийФайлов = Новый Массив;
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
	    
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("АдресФайла", ЗагруженныйФайл.Адрес);
		ОписаниеФайла.Вставить("ПолноеИмяФайла", ЗагруженныйФайл.СсылкаНаФайл.Имя);
		ОписаниеФайла.Вставить("ИмяФайла", ЗагруженныйФайл.СсылкаНаФайл.Имя);
		ОписаниеФайла.Вставить("РасширениеФайла", ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ОписаниеФайла.ПолноеИмяФайла));
		
		МассивОписанийФайлов.Добавить(ОписаниеФайла);
			
	КонецЦикла;
	
	Форма      = ДополнительныеПараметры.Форма;
	ВидОтчета  = ДополнительныеПараметры.ВидОтчета;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	
	Результат = ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьТабличныйДокументВСтруктуруСервер(МассивОписанийФайлов, АдресХранилища);
	Форма.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Форма.АдресХранилища       = АдресХранилища;
	Если Не Результат.Статус = "Выполнено" Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
		Если ВидОтчета = "ОтчетЯндекса" Тогда
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеКонвертацииФайлаЯндекс", 1, Истина);
		Иначе
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеКонвертацииФайла", 1, Истина);
		КонецЕсли;
		Форма.ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(Форма, Форма.ИдентификаторЗадания);
				
	Иначе
		Если ВидОтчета = "ОтчетЯндекса" Тогда
		 	ОткрытьПомощникЗагрузкиОтчетаЯндекс(Форма.АдресХранилища, Форма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СозданиеПоступленияИзЭД

Процедура НачатьЗагрузкуЭД(АдресХранилища, ИдентификаторФормы, ЭтоАрхивЭД = Ложь) Экспорт
	
	Если Не ЭтоАрхивЭД Тогда
		
		ДанныеЭД = ЭлектронноеВзаимодействиеБПВызовСервера.РазобратьПолученныеДанные(АдресХранилища, ИдентификаторФормы);	
		Если ДанныеЭД.Свойство("ТекстОшибки") Тогда
				
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ДанныеЭД.ТекстОшибки;		
			Сообщение.ИдентификаторНазначения = ИдентификаторФормы;
			Сообщение.Сообщить();
			Возврат;
				
		КонецЕсли;
		
	Иначе
		
		ДанныеЭД = Новый Структура;
		ДанныеЭД.Вставить("АдресХранилища", АдресХранилища);
		
	КонецЕсли;
		
	АдресаФайловXML = Новый Массив;
	АдресаФайловXML.Добавить(ДанныеЭД.АдресХранилища);
	СтруктураЭД = ЭлектронноеВзаимодействиеБПВызовСервера.ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы);	
	Если ДанныеЭД.Свойство("НомерСФ") Тогда
		
		СтруктураЭД.Вставить("НомерСФ", ДанныеЭД.НомерСФ);
		СтруктураЭД.Вставить("ДатаСФ", ДанныеЭД.ДатаСФ);
		
	КонецЕсли;
	
	Если СтруктураЭД <> Неопределено Тогда
	
		ЗагрузитьЭД(СтруктураЭД);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуИзСтруктуры(АдресХранилища, ИдентификаторФормы) Экспорт
	
	ДанныеЭД = ЭлектронноеВзаимодействиеБПВызовСервера.РазобратьПолученныеДанныеДокументИзСтруктуры(АдресХранилища, ИдентификаторФормы);
	Если ДанныеЭД.Свойство("ТекстОшибки") Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеЭД.ТекстОшибки;		
		Сообщение.ИдентификаторНазначения = ИдентификаторФормы;
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресХранилища", АдресХранилища);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ДополнительныеПараметры.Вставить("ДанныеЭД", ДанныеЭД);
	
	Если ДанныеЭД.Свойство("НастройкиСопоставления") Тогда
		ДополнительныеПараметры.Вставить("НастройкиСопоставления", ДанныеЭД.НастройкиСопоставления);		
	КонецЕсли;
	
	Если ДанныеЭД.КоличествоФайлов = 1 Тогда
		
		НачатьСопоставлениеНоменклатуры(ДополнительныеПараметры);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОткрытьПомощникЗагрузкиОтчетаЯндекс(АдресХранилища, ИдентификаторФормы) Экспорт
	
	ДанныеЭД = ЭлектронноеВзаимодействиеБПВызовСервера.РазобратьПолученныеДанныеДокументИзСтруктуры(АдресХранилища, ИдентификаторФормы);
	Если ДанныеЭД.Свойство("ТекстОшибки") Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеЭД.ТекстОшибки;		
		Сообщение.ИдентификаторНазначения = ИдентификаторФормы;
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилища);
	
	ОткрытьФорму("Обработка.ЗагрузкаОтчетаЯндексМаркет.Форма", ПараметрыФормы, ИдентификаторФормы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет интерактивное проведение документов перед формированием ЭД.
// Если есть непроведенные документы, предлагает выполнить проведение. Спрашивает
// пользователя о продолжении, если какие-то из документов не провелись и имеются проведенные.
//
// Параметры:
//  ДокументыМассив - Массив - Ссылки на документы, которые требуется провести перед печатью.
//                             После выполнения функции из массива исключаются непроведенные документы.
//  ОбработкаПродолжения - ОписаниеОповещения - содержит описание процедуры,
//                         которая будет вызвана после завершения проверки документов.
//  ФормаИсточник - ФормаКлиентскогоПриложения - форма, из которой была вызвана команда.
//
Процедура ВыполнитьПроверкуПроведенияДокументов(ДокументыМассив, ОбработкаПродолжения, ФормаИсточник = Неопределено) Экспорт

	ОчиститьСообщения();
	
	ДокументыТребующиеПроведение = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ДокументыМассив);
	КоличествоНепроведенныхДокументов = ДокументыТребующиеПроведение.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести.
										|Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести.
										|Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ДокументыТребующиеПроведение", ДокументыТребующиеПроведение);
		ДополнительныеПараметры.Вставить("ФормаИсточник", ФормаИсточник);
		ДополнительныеПараметры.Вставить("ДокументыМассив", ДокументыМассив);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьПроверкуПроведенияДокументовПродолжить", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПроверкуПроведенияДокументовПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДокументыМассив = Неопределено;
	ОбработкаПродолжения = Неопределено;
	ДокументыТребующиеПроведение = Неопределено;
	Если Результат = КодВозвратаДиалога.Да
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДокументыМассив", ДокументыМассив)
		И ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОбработкаПродолжения)
		И ДополнительныеПараметры.Свойство("ДокументыТребующиеПроведение", ДокументыТребующиеПроведение) Тогда
		
		ФормаИсточник = Неопределено;
		ДополнительныеПараметры.Свойство("ФормаИсточник", ФормаИсточник);
		
		ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(ДокументыТребующиеПроведение);
		
		// Cообщаем о документах, которые не провелись.
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2 Формирование ЭД невозможно.'");
		НепроведенныеДокументы = Новый Массив;
		Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонСообщения,
																	Строка(ИнформацияОДокументе.Ссылка),
																	ИнформацияОДокументе.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнформацияОДокументе.Ссылка);
			НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
		КонецЦикла;
		
		КоличествоНепроведенныхДокументов = НепроведенныеДокументы.Количество();
		
		// Оповещаем открытые формы о том, что были проведены документы.
		ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыТребующиеПроведение,
																			НепроведенныеДокументы);
		ТипыПроведенныхДокументов = Новый Соответствие;
		Для Каждого ПроведенныйДокумент Из ПроведенныеДокументы Цикл
			ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
		КонецЦикла;
		Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
			ОповеститьОбИзменении(Тип.Ключ);
		КонецЦикла;
		
		Оповестить("ОбновитьДокументИБПослеЗаполнения", ПроведенныеДокументы);
		
		// Обновляем исходный массив документов.
		ДокументыМассив = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыМассив, НепроведенныеДокументы);
		ЕстьДокументыГотовыеДляФормированияЭД = ДокументыМассив.Количество() > 0;
		Если КоличествоНепроведенныхДокументов > 0 Тогда
			
			// Спрашиваем пользователя о необходимости продолжения печати при наличии непроведенных документов.
			ТекстВопроса = НСтр("ru = 'Не удалось провести один или несколько документов.'");
			КнопкиДиалога = Новый СписокЗначений;
			
			Если ЕстьДокументыГотовыеДляФормированияЭД Тогда
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru = 'Продолжить?'");
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
			Иначе
				КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
			ДопПараметры = Новый Структура("ОбработкаПродолжения, ДокументыМассив", ОбработкаПродолжения, ДокументыМассив);
			Обработчик = Новый ОписаниеОповещения("ВыполнитьПроверкуПроведенияДокументовЗавершить", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Обработчик, ТекстВопроса, КнопкиДиалога);
		Иначе
			ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
		КонецЕсли;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуПроведенияДокументовЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДокументыМассив = Неопределено;
	
	ОбработкаПродолжения = Неопределено;
	Если Результат = КодВозвратаДиалога.Пропустить
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДокументыМассив", ДокументыМассив)
		И ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОбработкаПродолжения) Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыЭДО

Процедура КомандыЭДО_ПриОткрытии(Форма) Экспорт

	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма = Форма;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд = Форма.Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);

КонецПроцедуры

Процедура КомандыЭДО_ФормаСпискаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт

	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = Форма;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд = Форма.Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);

КонецПроцедуры

Процедура КомандыЭДО_ФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт

	Элементы = Форма.Элементы;
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
	ПараметрыОповещенияЭДО.Форма                            = Форма;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);

КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ПриСозданииНоменклатурыПоДаннымКонтрагента().
Процедура ПриСозданииНоменклатурыПоДаннымКонтрагента(НаборНоменклатурыКонтрагентов, ОповещениеОЗавершении, Контекст, СтандартнаяОбработка) Экспорт
	
	Если НаборНоменклатурыКонтрагентов.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуУстановкиРеквизитовСправочника(НаборНоменклатурыКонтрагентов, Контекст, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьТипСправочникаПриСозданииЭлементаПоДаннымКонтрагента(Параметры, Владелец, Уникальность, ОповещениеОЗакрытии) Экспорт
	
	СписокВыбора = СписокВыбораТипаСправочникаДляСопоставления(Параметры);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначенияЗаполнения",  ЗначенияЗаполненияНовогоЭлементаСправочника(Параметры));
	ДополнительныеПараметры.Вставить("Владелец",            Владелец);
	ДополнительныеПараметры.Вставить("Уникальность",        Уникальность);
	ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
	Если СписокВыбора.Количество() = 1 Тогда
		ВыбратьТипСправочникаПриСозданииЭлементаПоДаннымКонтрагентаЗавершение(СписокВыбора[0], ДополнительныеПараметры);
	Иначе 
		ОповещенияПриВыбореТипаСправочника = Новый ОписаниеОповещения(
			"ВыбратьТипСправочникаПриСозданииЭлементаПоДаннымКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		СписокВыбора.ПоказатьВыборЭлемента(ОповещенияПриВыбореТипаСправочника, НСтр("ru = 'Выбор типа данных'"));		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияФайлаВФорматФНС

Процедура ПродолжитьЗагрузкуРеализацииТоваровИУслугXMLИзФайла(РасширениеПодключено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РасширениеПодключено = Истина Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр             = "(*.xlsx;*.xls;*.mxl;*.zip)|*.xlsx;*.xls;*.mxl;*.zip";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок          = НСтр("ru='Выберите файл электронного документа'");
		
		Форма = ДополнительныеПараметры.Форма;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьЗагруженныеФайлы", ЭтотОбъект, 
			Новый Структура("Форма", Форма));		
		НачатьПомещениеФайлов(ОписаниеОповещения, ДиалогОткрытияФайла, Истина, Форма.УникальныйИдентификатор); 
		
	Иначе 
		
		ТекстСообщения = НСтр("ru='Расширение для работы с файлами в веб-клиенте не подключено, загрузка поступления остановлена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьЗагрузкуОтчетаМаркетплейсаИзФайла(РасширениеПодключено,
	ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено = Истина Тогда
		
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов();
		ПараметрыДиалогаПомещенияФайлов.Фильтр             = "(*.xlsx;*.xls;*.mxl;*.zip)|*.xlsx;*.xls;*.mxl;*.zip";
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		
		Если ДополнительныеПараметры.ВидОтчета  = "УведомлениеОВыкупе" Тогда
			Заголовок = НСтр("ru='Выберите файл ""Уведомление о выкупе"" от Вайлдберриз'");
		ИначеЕсли ДополнительныеПараметры.ВидОтчета  = "ОтчетЯндекса" Тогда
			Заголовок = НСтр("ru='Выберите файл отчета по данным статистики от Яндекс'");
		Иначе
			Заголовок = НСтр("ru='Выберите файл детализации отчета о продажах'");
		КонецЕсли;
		
		ПараметрыДиалогаПомещенияФайлов.Заголовок          = Заголовок;
		
		Форма = ДополнительныеПараметры.Форма;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьЗагруженныеФайлыВСтруктуру", ЭтотОбъект, 
			Новый Структура("Форма,ВидОтчета", Форма, ДополнительныеПараметры.ВидОтчета));		
				
		НачатьПомещениеФайловНаСервер(ОписаниеОповещения, , , ПараметрыДиалогаПомещенияФайлов, Форма.УникальныйИдентификатор);
		
	Иначе 
		
		ТекстСообщения = НСтр("ru='Расширение для работы с файлами в веб-клиенте не подключено, загрузка документа остановлена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьТабличныйДокумент(АдресФайла, РасширениеФайла, Форма)
	
	Результат = ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьТабличныйДокументСервер(АдресФайла, РасширениеФайла, Форма.УникальныйИдентификатор);
	Форма.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Форма.АдресХранилища       = Результат.АдресХранилища;
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеКонвертацииФайла", 1, Истина);
		Форма.ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(Форма, Форма.ИдентификаторЗадания);
		
	Иначе
		
		НачатьЗагрузкуЭД(Форма.АдресХранилища, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПоступленияИзЭД

Процедура ЗагрузитьЭД(СтруктураЭД)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураЭД", СтруктураЭД);
	ОбработчикОповещения = Новый ОписаниеОповещения("СопоставитьПередЗаполнениемОповещение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СписокНеСопоставленнойНоменклатуры = ЭлектронноеВзаимодействиеБПВызовСервера.СписокНеСопоставленнойНоменклатуры(
		СтруктураЭД.Контрагент, СтруктураЭД.ДанныеФайлаРазбора);
		
	Если СписокНеСопоставленнойНоменклатуры.Количество() > 0 Тогда
		СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
			СписокНеСопоставленнойНоменклатуры,, ОбработчикОповещения);
	Иначе
		СоздатьДокументИзЭД(СтруктураЭД);
	КонецЕсли;

КонецПроцедуры

Процедура СопоставитьПередЗаполнениемОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	СоздатьДокументИзЭД(ДополнительныеПараметры.СтруктураЭД);
	
КонецПроцедуры

Процедура НачатьСопоставлениеНоменклатуры(ДополнительныеПараметры) Экспорт
	
	АдресХранилища     = ДополнительныеПараметры.АдресХранилища;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	ДанныеЭД           = ДополнительныеПараметры.ДанныеЭД;
	ДанныеЭД.Вставить("АдресХранилища", АдресХранилища);
	Если ДополнительныеПараметры.Свойство("НастройкиСопоставления") Тогда
		НастройкиСопоставления = ДополнительныеПараметры.НастройкиСопоставления;
	Иначе
		НастройкиСопоставления = Неопределено;
	КонецЕсли;
	
	СписокНеСопоставленнойНоменклатуры = ЭлектронноеВзаимодействиеБПВызовСервера.СписокНеСопоставленнойНоменклатурыПоСтруктуре(АдресХранилища, ИдентификаторФормы);
		
	Если СписокНеСопоставленнойНоменклатуры.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭД", ДанныеЭД);
		ОбработчикОповещения = Новый ОписаниеОповещения("СопоставитьПередЗаполнениемИзСтруктурыОповещение",
			ЭтотОбъект, ДополнительныеПараметры);	
		СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
			СписокНеСопоставленнойНоменклатуры, НастройкиСопоставления, ОбработчикОповещения);
	Иначе
		СоздатьДокументИзСтруктуры(ДанныеЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПередЗаполнениемИзСтруктурыОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	СоздатьДокументИзСтруктуры(ДополнительныеПараметры.ДанныеЭД);
	
КонецПроцедуры

Процедура СоздатьДокументИзЭД(СтруктураЭД)
	
	СсылкаДокумента = ЭлектронноеВзаимодействиеБПВызовСервера.СоздатьДокументИзЭД(СтруктураЭД);
	Если СтруктураЭД.Свойство("НомерСФ") Тогда
		ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
		ПараметрыСозданияСчетаФактуры.Основание = СсылкаДокумента;
		ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтруктураЭД.НомерСФ;
		ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтруктураЭД.ДатаСФ;
		УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);
	КонецЕсли;
	ПоказатьЗначение(, СсылкаДокумента);
	Оповестить("ЗагруженДокументПоступления");
	
КонецПроцедуры

Процедура СоздатьДокументИзСтруктуры(ДанныеЭД)
	
	СсылкаДокумента = ЭлектронноеВзаимодействиеБПВызовСервера.СоздатьДокументИзСтруктуры(ДанныеЭД);
	Если СсылкаДокумента <> Неопределено Тогда
		ОповеститьОбИзменении(СсылкаДокумента);
		ПоказатьЗначение(, СсылкаДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыКонтрагентов

Процедура ОткрытьФормуУстановкиРеквизитовСправочника(НаборНоменклатурыКонтрагентов, Контекст, ОповещениеОЗавершении)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НаборНоменклатурыКонтрагентов"   , НаборНоменклатурыКонтрагентов);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении"           , ОповещениеОЗавершении);
	
	ПараметрыФормы = Новый Структура;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ОграничениеТипаНоменклатуры") Тогда
		ПараметрыФормы.Вставить("ТипыНоменклатуры", Контекст.ОграничениеТипаНоменклатуры);		
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДополнительныеПараметрыПоиска") Тогда
		ДополнительныеПараметры.Вставить("ПараметрыСозданияНоменклатуры", Контекст.ДополнительныеПараметрыПоиска);		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыУстановкиЗначенийРеквизитовСправочника",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыНовыхЭлементовСправочника", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыУстановкиЗначенийРеквизитовСправочника(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСозданияЭлементовСправочника = Новый Структура;
	ДанныеДляСозданияЭлементовСправочника.Вставить("НаборНоменклатурыКонтрагентов",
		ДополнительныеПараметры.НаборНоменклатурыКонтрагентов);
	Если ДополнительныеПараметры.Свойство("ПараметрыСозданияНоменклатуры")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыСозданияНоменклатуры) Тогда
		Для Каждого ПараметрНоменклатуры Из ДополнительныеПараметры.ПараметрыСозданияНоменклатуры Цикл
			Результат.Вставить(ПараметрНоменклатуры.Ключ, ПараметрНоменклатуры.Значение);
		КонецЦикла;		
	КонецЕсли;
	ДанныеДляСозданияЭлементовСправочника.Вставить("ЗначенияРеквизитов", Результат);
	
	ДлительнаяОперация = ЭлектронноеВзаимодействиеБПВызовСервера.СоздатьЭлементыСправочникаПоДаннымКонтрагента(
		ДанныеДляСозданияЭлементовСправочника);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыУстановкиЗначенийРеквизитовСправочникаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыУстановкиЗначенийРеквизитовСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли НЕ Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Данные.Ошибки);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Данные.ДанныеСопоставления)

КонецПроцедуры

Функция СписокВыбораТипаСправочникаДляСопоставления(Параметры)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Тип("СправочникСсылка.Номенклатура"), "Номенклатура");
	Если ЭлектронноеВзаимодействиеБПВызовСервера.ДоступноСопоставлениеСоСправочникомОсновныеСредства() Тогда
		СписокВыбора.Добавить(Тип("СправочникСсылка.ОсновныеСредства")    , "Основные средства");
		СписокВыбора.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"), "Объекты строительства");
	КонецЕсли;
	
	Если Параметры.Свойство("ОграничениеТипаНоменклатуры") И
		ТипЗнч(Параметры.ОграничениеТипаНоменклатуры) = Тип("ОписаниеТипов") Тогда 
		
		ТипыНоменклатуры = Параметры.ОграничениеТипаНоменклатуры.Типы();
		Если ТипыНоменклатуры.Количество() > 0 Тогда
			ЭлементыКУдалению = Новый Массив;
			Для Каждого ТипНоменклатуры Из СписокВыбора Цикл
				Если ТипыНоменклатуры.Найти(ТипНоменклатуры.Значение) = Неопределено Тогда
					ЭлементыКУдалению.Добавить(ТипНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ТипНоменклатуры Из ЭлементыКУдалению Цикл
				СписокВыбора.Удалить(ТипНоменклатуры);
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
		
	Возврат СписокВыбора;
	
КонецФункции

Процедура ВыбратьТипСправочникаПриСозданииЭлементаПоДаннымКонтрагентаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДополнительныеПараметры.ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("Наименование", ДополнительныеПараметры.ЗначенияЗаполнения.Наименование);
	
	Если ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		ОткрытьФорму("Справочник.ОсновныеСредства.ФормаОбъекта",
			ПараметрыФормы,
			ДополнительныеПараметры.Владелец,
			ДополнительныеПараметры.Уникальность,,,
			ДополнительныеПараметры.ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		ОткрытьФорму("Справочник.ОбъектыСтроительства.ФормаОбъекта",
			ПараметрыФормы,
			ДополнительныеПараметры.Владелец,
			ДополнительныеПараметры.Уникальность,,,
			ДополнительныеПараметры.ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",
			ПараметрыФормы,
			ДополнительныеПараметры.Владелец,
			ДополнительныеПараметры.Уникальность,,,
			ДополнительныеПараметры.ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияЗаполненияНовогоЭлементаСправочника(ПараметрыКонтрагента)
	
	ЗначенияЗаполнения = Новый Структура;

	Если ПараметрыКонтрагента.Свойство("ДополнительныеПараметры")
			И ПараметрыКонтрагента.ДополнительныеПараметры.Свойство("СопоставлениеНоменклатурыКонтрагентов")
			И ПараметрыКонтрагента.ДополнительныеПараметры.СопоставлениеНоменклатурыКонтрагентов.Свойство("НоменклатураКонтрагента") Тогда
		ДанныеКонтрагента = ПараметрыКонтрагента.ДополнительныеПараметры.СопоставлениеНоменклатурыКонтрагентов.НоменклатураКонтрагента;
	    ЗначенияЗаполнения = ЭлектронноеВзаимодействиеБПВызовСервера.ЗначенияЗаполненияНовогоЭлементаСправочника(ДанныеКонтрагента);
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти




