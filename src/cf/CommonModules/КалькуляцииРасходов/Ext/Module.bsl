#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьКалькуляциюРасходов(Форма, ИмяТаблицы) Экспорт
	
	Если Не Форма.ИспользуетсяКалькуляцияРасходов Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Форма.КалькуляцияРасходов.Очистить();
	
	ВыборкаПоКлючу = ВыборкаКалькуляцииРасходовВДокументе(Объект.Ссылка);
	
	Пока ВыборкаПоКлючу.Следующий() Цикл
		РасходыНаЕдиницу = 0;
		Выборка = ВыборкаПоКлючу.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаКалькуляцияРасходов = Форма.КалькуляцияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКалькуляцияРасходов, Выборка);
			РасходыНаЕдиницу = РасходыНаЕдиницу + Выборка.КоличествоНаЕдиницу * Выборка.Цена;
		КонецЦикла;
		Отбор = Новый Структура();
		Отбор.Вставить("КлючКалькуляцииРасходов", ВыборкаПоКлючу.КлючКалькуляцииРасходов);
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.РасходыНаЕдиницу = Формат(РасходыНаЕдиницу, "ЧЦ=10; ЧДЦ=2");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКалькуляциюРасходовПоДокументуОснованию(Форма, ИмяТаблицы) Экспорт
	
	Если Не Форма.ИспользуетсяКалькуляцияРасходов Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Форма.КалькуляцияРасходов.Очистить();
	
	ВыборкаПоКлючу = ВыборкаКалькуляцииРасходовВДокументе(Объект.ДокументОснование);
	
	Пока ВыборкаПоКлючу.Следующий() Цикл
		РасходыНаЕдиницу = 0;
		КлючКалькуляцииРасходовОснования = ВыборкаПоКлючу.КлючКалькуляцииРасходов;
		НовыйКлючКалькуляцииРасходов = Новый УникальныйИдентификатор;
		Выборка = ВыборкаПоКлючу.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаКалькуляцияРасходов = Форма.КалькуляцияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКалькуляцияРасходов, Выборка);
			СтрокаКалькуляцияРасходов.СчетНаОплатуПокупателю = Объект.Ссылка;
			СтрокаКалькуляцияРасходов.КлючКалькуляцииРасходов = НовыйКлючКалькуляцииРасходов;
			РасходыНаЕдиницу = РасходыНаЕдиницу + Выборка.КоличествоНаЕдиницу * Выборка.Цена;
		КонецЦикла;
		ОтборТоваров = Новый Структура();
		ОтборТоваров.Вставить("КлючКалькуляцииРасходов", КлючКалькуляцииРасходовОснования);
		НайденныеСтрокиТоваров = Объект[ИмяТаблицы].НайтиСтроки(ОтборТоваров);
		Если ЗначениеЗаполнено(НайденныеСтрокиТоваров) Тогда
			НайденнаяСтрокаТоваров = НайденныеСтрокиТоваров[0];
			НайденнаяСтрокаТоваров.РасходыНаЕдиницу = Формат(РасходыНаЕдиницу, "ЧЦ=10; ЧДЦ=2");
			НайденнаяСтрокаТоваров.КлючКалькуляцииРасходов = НовыйКлючКалькуляцииРасходов;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПерезаполнитьКалькуляциюРасходов(Форма, АдресВременногоХранилища, КлючКалькуляцииРасходов, ИмяТаблицы, НомерСтрокиТаблицы) Экспорт
	
	Если Не Форма.ИспользуетсяКалькуляцияРасходов Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(КлючКалькуляцииРасходов) Тогда
		КлючКалькуляцииРасходов = Новый УникальныйИдентификатор;
	Иначе
		УдалитьСтарыеДанныеКалькуляцииРасходов(Форма, КлючКалькуляцииРасходов);
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	РасходНаЕдиницу = 0;
	Для Каждого СтрокаРасходы Из СтруктураВозврата.Расходы Цикл
		СтрокаКалькуляцияРасходов = Форма.КалькуляцияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКалькуляцияРасходов, СтрокаРасходы);
		СтрокаКалькуляцияРасходов.КлючКалькуляцииРасходов = КлючКалькуляцииРасходов;
		РасходНаЕдиницу = РасходНаЕдиницу + СтрокаРасходы.КоличествоНаЕдиницу * СтрокаРасходы.Цена;
	КонецЦикла;
	
	Отбор = Новый Структура();
	Отбор.Вставить("НомерСтроки", НомерСтрокиТаблицы);
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	НайденнаяСтрока.КлючКалькуляцииРасходов = КлючКалькуляцииРасходов;
	НайденнаяСтрока.РасходыНаЕдиницу        = Формат(РасходНаЕдиницу, "ЧЦ=10; ЧДЦ=2");
	НайденнаяСтрока.Количество              = СтруктураВозврата.КоличествоПродукции;
	НайденнаяСтрока.Цена                    = СтруктураВозврата.ЦенаПродукции;
	
КонецПроцедуры

Процедура УдалитьСтарыеДанныеКалькуляцииРасходов(Форма, КлючКалькуляцииРасходов) Экспорт
	
	ОтборКалькуляцияРасходов = Новый Структура();
	ОтборКалькуляцияРасходов.Вставить("КлючКалькуляцииРасходов", КлючКалькуляцииРасходов);
	НайденныеСтрокиКалькуляцияРасходов = Форма.КалькуляцияРасходов.НайтиСтроки(ОтборКалькуляцияРасходов);
	
	Для Каждого СтрокаКалькуляцияРасходов Из НайденныеСтрокиКалькуляцияРасходов Цикл
		ИндексСтрокиНаУдаление = Форма.КалькуляцияРасходов.Индекс(СтрокаКалькуляцияРасходов);
		Форма.КалькуляцияРасходов.Удалить(ИндексСтрокиНаУдаление);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьКалькуляциюРасходов(Форма, СтарыйКлючКалькуляцииРасходов, НовыйКлючКалькуляцииРасходов) Экспорт
	
	ОтборКалькуляцияРасходов = Новый Структура();
	ОтборКалькуляцияРасходов.Вставить("КлючКалькуляцииРасходов", СтарыйКлючКалькуляцииРасходов);
	НайденныеСтрокиКалькуляцияРасходов = Форма.КалькуляцияРасходов.НайтиСтроки(ОтборКалькуляцияРасходов);
	
	Для Каждого СтрокаКалькуляцияРасходов Из НайденныеСтрокиКалькуляцияРасходов Цикл
		НоваяСтрока = Форма.КалькуляцияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляцияРасходов);
		НоваяСтрока.КлючКалькуляцииРасходов = НовыйКлючКалькуляцииРасходов;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНесвязанныеКлючиКалькуляцииРасходов(Форма, ИмяТаблицы) Экспорт
	
	Объект = Форма.Объект;
	
	КлючиКалькуляцииРасходов = ОбщегоНазначения.ВыгрузитьКолонку(Объект[ИмяТаблицы], "КлючКалькуляцииРасходов", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(КлючиКалькуляцииРасходов);
	
	СтрокиКУдалению = Новый Массив;
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < Форма.КалькуляцияРасходов.Количество() Цикл
		СтрокаНабора = Форма.КалькуляцияРасходов[ИндексСтроки];
		Если КлючиКалькуляцииРасходов.Найти(СтрокаНабора.КлючКалькуляцииРасходов) = Неопределено Тогда
			Форма.КалькуляцияРасходов.Удалить(ИндексСтроки);
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервереДокумента(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.ИспользуетсяКалькуляцияРасходов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КалькуляцияРасходов", Форма.КалькуляцияРасходов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДокумента(ДокументОбъект, ИмяТаблицы) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКалькуляцияРасходов")
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю) Тогда
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("КалькуляцияРасходов") Тогда
			ЗаписатьКалькуляциюРасходов(ДокументОбъект, ДокументОбъект.ДополнительныеСвойства.КалькуляцияРасходов);
		Иначе
			УдалитьНесвязанныеЭлементыКалькуляцииРасходов(ДокументОбъект, ИмяТаблицы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма) Экспорт
	
	Форма.ИспользуетсяКалькуляцияРасходов = ПолучитьФункциональнуюОпцию("ИспользуетсяКалькуляцияРасходов")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма, ИмяТаблицы) Экспорт
	
	// Текст поля таблицы РасходНаЕдиницу
	
	ИмяПоля = СтрШаблон("%1РасходНаЕдиницу", ИмяТаблицы);
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ИмяПоля);
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		Элемент.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		СтрШаблон("Объект.%1.РасходыНаЕдиницу", ИмяТаблицы),
		ВидСравненияКомпоновкиДанных.Равно,
		"");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		СтрШаблон("Объект.%1.КлючКалькуляцииРасходов", ИмяТаблицы),
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",
		ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьКалькуляциюРасходов(ДокументОбъект, КалькуляцияРасходов)
	
	ПараметрыКалькуляции = Новый Структура;
	ПараметрыКалькуляции.Вставить("СчетНаОплатуПокупателю", ДокументОбъект.Ссылка);
	ПараметрыКалькуляции.Вставить("Организация",            ДокументОбъект.Организация);
	ПараметрыКалькуляции.Вставить("АдресРасходов",          ПоместитьВоВременноеХранилище(КалькуляцияРасходов.Выгрузить()));
	
	РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю.ЗаписатьКалькуляциюРасходов(ПараметрыКалькуляции);
	
КонецПроцедуры

Процедура УдалитьНесвязанныеЭлементыКалькуляцииРасходов(ДокументОбъект, ИмяТаблицы)
	
	ПараметрыКалькуляции = Новый Структура;
	ПараметрыКалькуляции.Вставить("СчетНаОплатуПокупателю",   ДокументОбъект.Ссылка);
	ПараметрыКалькуляции.Вставить("Организация",              ДокументОбъект.Организация);
	ПараметрыКалькуляции.Вставить("КлючиКалькуляцииРасходов", ДокументОбъект[ИмяТаблицы].ВыгрузитьКолонку("КлючКалькуляцииРасходов"));
	
	РегистрыСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю.УдалитьНесвязанныеЭлементыКалькуляцииРасходов(ПараметрыКалькуляции);
	
КонецПроцедуры

Функция ВыборкаКалькуляцииРасходовВДокументе(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.КлючКалькуляцииРасходов КАК КлючКалькуляцииРасходов,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.НомерСтрокиКалькуляции КАК НомерСтрокиКалькуляции,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.Номенклатура КАК Номенклатура,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.Количество КАК Количество,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.Цена КАК Цена,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.КоличествоНаЕдиницу КАК КоличествоНаЕдиницу,
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.КалькуляцияРасходовВСчетеНаОплатуПокупателю КАК КалькуляцияРасходовВСчетеНаОплатуПокупателю
	|ГДЕ
	|	КалькуляцияРасходовВСчетеНаОплатуПокупателю.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиКалькуляции
	|ИТОГИ ПО
	|	КлючКалькуляцииРасходов";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти