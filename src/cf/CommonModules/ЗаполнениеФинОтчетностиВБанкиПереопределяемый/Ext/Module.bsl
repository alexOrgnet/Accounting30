#Область ПрограммныйИнтерфейс

#Область ОтдельныйФункционал

// Устанавливает отбор по полю ПометкаУдаления на список.
// При использовании отдельного интерфейсного решения по работе с помеченными на удаление объектами.
//
// Параметры:
//   Форма       - ФормаКлиентскогоПриложения - форма, в которой производится настройка.
//
Процедура СкрытьПомеченныеНаУдаление(Форма) Экспорт

	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(Форма);
	
КонецПроцедуры

// Снимает пользовательский отбор по полю ПометкаУдаления со списка.
// При использовании отдельного интерфейсного решения по работе с помеченными на удаление объектами.
//
// Параметры:
//   Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - изменяемые настройки.
//
Процедура УдалитьОтборПометкаУдаления(Настройки) Экспорт

	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

// Вызывается после записи правила фин.отчетности.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - с какой организацией связано правило.
//
Процедура ПриЗаписиПравилФинОтчетности(Организация) Экспорт

	КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(Новый УникальныйИдентификатор, Организация, Ложь, Ложь, Истина);
	
КонецПроцедуры

// Изменяем статус напоминания пользователю.
//
// Предмет       - ДокументСсылка.ФинОтветВБанк - пакет отчетности, у которого обновляется статус.
// НовыйСтатус   - ПеречислениеСсылка.СтатусыОтправкиФинОтчетностиВБанки - приобретаемые напоминанием статус.
//
Процедура ЗарегистрироватьИзменениеСтатусаЗадачиФинОтчетности(Предмет, НовыйСтатус) Экспорт

	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиФинОтчетности(Предмет, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область СистемыНалогообложения

// Подготавливает временную таблицу, в которой перечислены системы налогообложения, которые применялись в организациях
// в течение периода.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации - организации, описания систем налогообложения которых нужно подготовить.
//   НачалоПериода - Дата - начало анализируемого периода.
//   КонецПериода - Дата - конец анализируемого периода.
//   ОписанияСистемНалогообложения - МенеджерВременныхТаблиц - после выполнения процедуры должен содержать
//                                    таблицу ВТ_НастройкиСистемыНалогообложения, имеющую следующие колонки:
//     * Период - Дата - начало действия параметров налогообложения.
//     * Субъект - СправочникСсылка.Организации - для кого действуют параметры.
//     * СистемаНалогообложения - ПеречислениеСсылка.СистемыНалогообложения - набор параметров налогообложения.
//     * ПрименяетсяУСНДоходы, ПрименяетсяУСНДоходыМинусРасходы, ПрименяетсяУСНПатент - Булево - флаги вариантов применения УСН.
//     * ПрименяетсяНалогНаПрофессиональныйДоход - флаг учетной политики для самозанятых.
//     * ПлательщикЕНВД, ПлательщикТорговогоСбора - дополнительные флаги учетной политики.
//
Процедура ПодготовитьОписанияСистемНалогообложения(Субъекты, НачалоПериода, КонецПериода, ОписанияСистемНалогообложения) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиБП.ПодготовитьОписанияСистемНалогообложения(
		Субъекты, НачалоПериода, КонецПериода, ОписанияСистемНалогообложения);

КонецПроцедуры

// Проверяет, являлся ли ИП плательщиком НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - проверяемая организация.
//   НачалоПериода - Дата - начало анализируемого периода.
//   КонецПериода - Дата - конец анализируемого периода.
//   ПлательщикНДФЛ - Булево - возвращаемый параметр. Если Истина, то у ИП было применение основной системы налогообложения.
//
Процедура ПроверкаПлательщикаНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода, ПлательщикНДФЛ) Экспорт
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода)
	
КонецПроцедуры

// Подготовливает список применявшихся патентов.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - проверяемая организация.
//   НачалоПериода - Дата - начало анализируемого периода.
//   КонецПериода - Дата - конец анализируемого периода.
//   ПатентыОрганизации - ТаблицаЗначений - возвращаемый параметр. Содержит колонки:
//    * Ссылка - СправочникСсылка.Патенты - ссылка на патент;
//    * Наименование - Строка(50) - наименование патента в программе;
//    * ДатаНачала - Дата - день начала срока действия патента;
//    * ДатаОкончания - Дата - день окончания срока действия патента;
//    * ПотенциальноВозможныйГодовойДоход - Число - потенциальный годовой доход по патенту.
//
Процедура ПатентыОрганизацииЗаПериод(Организация, НачалоПериода, КонецПериода, ПатентыОрганизации) Экспорт

	ПатентыОрганизации = ЗаполнениеФинОтчетностиВБанкиБП.ПатентыОрганизацииЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Признак применения организацией упрошенной системы налогообложения в течение хотя бы части указанного периода.
//
// Параметры:
//	Организация   - СправочникСсылка.Организации - организация, для которой необходимо определить применение УСН.
//  НачалоПериода - Дата - дата начала анализируемого периода.
//  КонецПериода - Дата - дата конца анализируемого периода.
//	ПрименяетсяУСН - Булево - возвращаемый параметр. Истина, если было применение УСН; иначе Ложь.
//
Процедура ПрименяетсяУСНЗаПериод(Организация, НачалоПериода, КонецПериода, ПрименяетсяУСН) Экспорт
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура возвращает признак - являлся ли индивидуальный предприниматель хотя бы часть периода работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  НачалоПериода - Дата - дата начала анализируемого периода.
//  КонецПериода - Дата - дата конца анализируемого периода.
//  ИПИспользуетТрудНаемныхРаботников - Булево - возвращаемые параметр. Истина - ИП являлся работодателем; иначе Ложь.
//
Процедура ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода, ИПИспользуетТрудНаемныхРаботников) Экспорт

	ИПИспользуетТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область СпискиОбъектов

// Подготавливает список из наименований банков для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации, СправочникСсылка.Контрагенты - владельцы счетов.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ПараметрыОтбора - Структура - содержит дополнительные параметры для подбора счетов.
//   БанкиОрганизации - ТаблицаЗначений - возвращаемый параметр. Список наименований счетов, имеющихся у субъектов.
//                        * НаименованиеБанка - Строка - представление счета.
//
Процедура ПодготовитьСписокБанков(Субъекты, НачалоПериода, КонецПериода, ПараметрыОтбора, БанкиОрганизации) Экспорт

	НаименованияБанков = ЗаполнениеФинОтчетностиВБанкиБП.Банки(
		Субъекты, НачалоПериода, КонецПериода, ПараметрыОтбора.ИсключаемыеБИК);
	Для Каждого НаименованиеБанка Из НаименованияБанков Цикл
		ЗаполнитьЗначенияСвойств(БанкиОрганизации.Добавить(), НаименованиеБанка);
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает список касс организации для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации, СправочникСсылка.Контрагенты - структурные подразделения, входящие в группу.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ПараметрыОтбора - Структура - содержит дополнительные параметры для подбора касс.
//   СписокКасс - ТаблицаЗначений - возвращаемый параметр. Список касс с их свойствами:
//     * Организация - СправочникСсылка.Организации - основная организация.
//     * ОрганизацияНаименование - Строка - наименование организации.
//     * Подразделение - СправочникСсылка - обособленное подразделение.
//     * ПодразделениеНаименование - Строка - наименование обособленного подразделения.
//     * ПлатежныйАгент - Булево - признак, что касса относится к платежному агенту.
//
Процедура ПодготовитьСписокКасс(Субъекты, НачалоПериода, КонецПериода, ПараметрыОтбора, КассыОрганизации) Экспорт

	Кассы = ЗаполнениеФинОтчетностиВБанкиБП.Кассы(Субъекты, НачалоПериода, КонецПериода, ПараметрыОтбора);
	Для Каждого Касса Из Кассы Цикл
		ЗаполнитьЗначенияСвойств(КассыОрганизации.Добавить(), Касса);
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает список налоговых органов, в которых зарегистрированы подразделения организации, для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации - структурные подразделения, входящие в группу.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ВидНалога   - Строка - имя налога, по которому формируется список налоговых органов, куда подаются декларации.
//							Может принимать значения "ЕНДВ" и "Имущество".
//   СписокНалоговыхОрганов - СписокЗначений - возвращаемые параметр:
//     * Значение - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган.
//     * Представление - Строка - наименование налогового органа.
//
Процедура ПодготовитьСписокНалоговыхОрганов(Субъекты, НачалоПериода, КонецПериода, ВидНалога, СписокНалоговыхОрганов) Экспорт
	
	СписокНалоговыхОрганов = ЗаполнениеФинОтчетностиВБанкиБП.НалоговыеОрганы(Субъекты, НачалоПериода, КонецПериода, ВидНалога);
	
КонецПроцедуры

// Проверяет, входит ли указанный документ в список документов, предназначенных для интерактивной работы пользователем.
//
// Параметры:
//   ПроверяемыеМетаданные - ОбъектМетаданных: Документ - анализируемые вид документа.
//   РегистрируемыйДокумент - Булево - возвращаемый параметр. Если Истина, то пользователи работают с документом.
//
Процедура ВходитВРегистрируемыеДокументы(ПроверяемыеМетаданные, РегистрируемыйДокумент) Экспорт
	
	РегистрируемыйДокумент = Метаданные.ЖурналыДокументов.ЖурналОпераций.РегистрируемыеДокументы.Содержит(ПроверяемыеМетаданные);
	
КонецПроцедуры

// По переданным реквизитам подбирает организацию. Если организацию подобрать не удалось, то контрагента.
//
// Параметры:
//  ИНН          - Строка - налоговый идентификатор.
//  КПП          - Строка - налоговый идентификатор организации.
//  СубъектСсылка - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - возвращаемый параметр. Приоритет у организации.
//
Процедура ПодобратьСубъектаПоИНН_КПП(ИНН, КПП, СубъектСсылка) Экспорт
	
	НайденныйСубъект = ЗаполнениеФинОтчетностиВБанкиБП.СсылкаНаОбъектПоИННКПП(ИНН, КПП);
	Если ЗначениеЗаполнено(НайденныйСубъект) Тогда
		СубъектСсылка = НайденныйСубъект;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значения основных реквизитов субъекта фин.отчетности.
//
// Параметры:
//  Субъект      - СправочникСсылка - см. реквизит Субъект в таб.части ЭкономическиеСубъекты документа ФинОтчетВБанк.
//  РеквизитыСубъекта - Структура - см. ЗаполнениеФинОтчетностиВБанки.СписокРеквизитовСубъекта()
//
Процедура ЗаполнитьРеквизитыСубъекта(Субъект, РеквизитыСубъекта) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиБП.ЗаполнитьРеквизитыСубъекта(Субъект, РеквизитыСубъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетыНаОсновеБСП

// Для переданного отчета подбирает вариант настроек по-умолчанию для включения в пакет отчетов.
//
// Параметры:
//  ИдентификаторОтчета - Строка - имя объекта метаданных-отчета в конфигурации.
//  ИмяВарианта  - Строка - возвращаемый параметр. Имя варианта отчета, всегда доступного в конфигурации.
// 
Процедура ИмяВариантаПоУмолчанию(ИдентификаторОтчета, ИмяВарианта) Экспорт


КонецПроцедуры

// Без открытия формы формирует табличный документ отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаВедомостьАмортизацииОС()
//  ПараметрыЗаполнения - Структура - см. модуль менеджера документа ФинОтчетВБанк, процедура ЗаполнитьОтчетыВФоне()
//  РезультатФормирования - возвращаемый параметр. См. БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета()
//
Процедура ПодготовитьОтчет(ПараметрыОтчета, ПараметрыЗаполнения, РезультатФормирования) Экспорт
	
	РезультатФормированияОтчета = ЗаполнениеФинОтчетностиВБанки.ПодготовитьОтчетБП(ПараметрыОтчета, ПараметрыЗаполнения);

	ЗаполнитьЗначенияСвойств(РезультатФормирования, РезультатФормированияОтчета);

КонецПроцедуры

// Вызывается из процедуры "НастроитьВариантыОтчета" в модуле объекта. Инициализирует настройки для подсистемы БСП.
//
// Параметры:
//  Настройки    - ТаблицаЗначений - см. параметр Настройки у ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
//  ОписаниеОтчета - СтрокаДереваЗначений - см. ВариантыОтчетов.ОписаниеОтчета()
//
Процедура НастроитьВариантыОтчетаОстаткиТоваровПоСрокамХранения(Настройки, ОписаниеОтчета) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиБП.НастроитьВариантыОтчетаОстаткиТоваровПоСрокамХранения(Настройки, ОписаниеОтчета);

КонецПроцедуры

// Формирует печатную форму "Кассовая книга".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКассоваяКнига()
//  ПараметрыЗаполнения - Структура - см. модуль менеджера документа ФинОтчетВБанк, процедура ЗаполнитьОтчетыВФоне()
//  РезультатФормирования - возвращаемый параметр. См. БухгалтерскиеОтчетыВызовСервера.РезультатФормированияОтчета()
//
Процедура ПодготовитьОтчетКассоваяКнига(ПараметрыОтчета, ПараметрыЗаполнения, РезультатФормирования) Экспорт
	
	ПодготовленныйПакет = ЗаполнениеФинОтчетностиВБанкиБП.СформироватьОтчетКассоваяКнига(ПараметрыОтчета);
	ЗаполнитьЗначенияСвойств(РезультатФормирования, ПодготовленныйПакет);
	
КонецПроцедуры

// Дополняет параметры формирования отчета "Книга доходов и расходов предпринимателя" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//  ПараметрыОтчетаОсновные - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Процедура ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(НастройкиОтчета, ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанкиБП.ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(НастройкиОтчета, ПараметрыОтчета);
	
КонецПроцедуры

// Запоняет параметры отчета "Книга доходов и расходов предпринимателя".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Процедура ЗаполнитьПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанкиБП.ЗаполнитьПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыОтчета);
	
КонецПроцедуры

// Дополняет параметры формирования отчета "Расшифровка задолженности" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Процедура ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета, ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанкиБП.ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета, ПараметрыОтчета);
	
КонецПроцедуры

// Действия, выполняемые в одноименном обработчике формы.
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - из какой формы вызывается обработчик.
//  Настройки     - ПользовательскиеНастройкиКомпоновкиДанных - обрабатываемые настройки.
//  ИспользуютсяСтандартныеНастройки - Булево - признак использования стандартных настроек.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки, ИспользуютсяСтандартныеНастройки) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервереВОтчетеРуководителю(Форма, Настройки);
	
КонецПроцедуры

// Действия, выполняемые при вызове из обработчика формы "ОбработкаВыбора".
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - из какой формы вызывается обработчик.
//	ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме.
//
Процедура ОбработкаВыбораНаСервере(Форма, ВыбранноеЗначение) Экспорт
	
	РассылкаОтчетовБП.ФормаОтчетаОбработкаВыбора(Форма, ВыбранноеЗначение);
	
КонецПроцедуры

// Действия, выполняемые в форме при формировании отчета.
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - из какой формы вызывается обработчик.
//
Процедура СформироватьОтчетНаСервере(Форма) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиБП.СформироватьОтчетНаСервере(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Баннеры

// Возвращает картинку для баннера с пояснением работы интерфейса заполнения комплекта отчетности.
//
// Параметры:
//  ИмяВарианта - Картинка - возвращаемый параметр. Картинка для баннера.
// 
Процедура КартинкаБаннерПояснениеНовогоИнтерфейса(Картинка) Экспорт
	
	Картинка = БиблиотекаКартинок.КотСПланшетом;

КонецПроцедуры

// Возвращает картинку для баннера с объяснением флага "Автозаполнение" при создании нового комплекта
// финансовой отчетности.
//
// Параметры:
//  ИмяВарианта - Картинка - возвращаемый параметр. Картинка для баннера.
// 
Процедура КартинкаБаннерАвтозаполнение(Картинка) Экспорт
	
	Картинка = БиблиотекаКартинок.ВажноеСообщениеУменьшенный;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает наборы субконто для выгрузки счета и его субсчетов.
//
// Параметры:
//   ОтправляемыйСчет - Строка - условный код счета, соответствующий метаданным;
//   ПараметрыСчета - ТаблицаЗначений:
//     * Счета - Массив - счет и его субсчета, заполняется отдельно по заполненному полю "Субконто";
//     * Субконто - Массив - набор аналитики для выгрузки счета и его субсчетов.
//
Процедура УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиБП.УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета);
	
КонецПроцедуры

#КонецОбласти
