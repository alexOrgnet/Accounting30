#Область СлужебныйПрограммныйИнтерфейс

// Проверяет в переданном списке учредителей наличие иностранных граждан
//
// Параметры:
//  Учредители - ДанныеФормыКоллекция - список учредителей
//
// Возвращаемое значение:
//  Булево - Истина, если среди учредителей (или их представителей) есть хоть один иностранный гражданин
//
Функция ЕстьУчредителиИлиПредставителиИностранныеГраждане(Учредители) Экспорт
	
	ПроверяемыеФизЛица = Новый Массив;
	Для Каждого ДанныеУчредителя Из Учредители Цикл
		Если ЗначениеЗаполнено(ДанныеУчредителя.ПредставительУчредителя) Тогда
			ПроверяемыеФизЛица.Добавить(ДанныеУчредителя.ПредставительУчредителя);
		Иначе
			ПроверяемыеФизЛица.Добавить(ДанныеУчредителя.Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(, ФизическоеЛицо В (&ФизическиеЛица)) КАК ГражданствоФизическихЛицСрезПоследних
		|ГДЕ
		|	ГражданствоФизическихЛицСрезПоследних.Страна <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|	И ГражданствоФизическихЛицСрезПоследних.Страна <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ПроверяемыеФизЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак использования типовых уставов при регистрации юридического лица
//
// Параметры:
//   ИмяФормы - Строка - имя формы регламентированного уведомления
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьТиповыеУставы(ИмяФормы = "") Экспорт
	
	Если ИмяФормы = "" Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
		ВыбраннаяФорма = РегистрацияОрганизацииВызовСервера.ФормаЗаявленияПоУмолчанию(
			ОбщегоНазначения.ТекущаяДатаПользователя(),
			"РегламентированноеУведомлениеФормаР11001");
	Иначе
		ВыбраннаяФорма = ИмяФормы;
	КонецЕсли;
	
	Если ВыбраннаяФорма = "Форма2014_1" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает формат отправки электронных документов в налоговую:
// - TIF - пользователь прикрепляет сканы документов
// - XML - система автоматически выгружает документы в xml-формате
//
// Возвращаемое значение:
//   Строка
//
Функция ФорматПодачиДокументовПоУмолчанию() Экспорт
	
	ДоступныеФорматы = ДоступныеФорматыОтправкиДокументов();
	Если ДоступныеФорматы.Количество() > 0 Тогда
		Возврат ДоступныеФорматы[0].Тип;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает доступные форматы отправки электронных документов в налоговую
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДоступныеФорматыОтправкиДокументов() Экспорт
	
	// При добавлении дополнительных строк в таблицу необходимо добавить соответствующие поля в формы:
	// - РегистрацияИП
	// - РегистрацияООО
	// - ВнесениеИзмененийЕГР
	
	ДоступныеФорматы = Новый ТаблицаЗначений;
	ДоступныеФорматы.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДоступныеФорматы.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДоступныеФорматы.Колонки.Добавить("Подсказка", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДоступныеФорматы.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	НоваяСтрока = ДоступныеФорматы.Добавить();
	НоваяСтрока.Тип = "TIF";
	НоваяСтрока.Наименование = НСтр("ru = 'В виде отсканированного документа'");
	НоваяСтрока.Подсказка = НСтр("ru = 'Классический формат. Потребуется принтер и сканер.'");
	НоваяСтрока.Порядок = 1;
	
	НоваяСтрока = ДоступныеФорматы.Добавить();
	НоваяСтрока.Тип = "XML";
	НоваяСтрока.Наименование = НСтр("ru = 'В XML-формате'");
	НоваяСтрока.Подсказка = НСтр("ru = 'Современный формат электронного представления.
		|Пока его поддерживают не все Налоговые инспекции.'");
	НоваяСтрока.Порядок = 2;
	
	ДоступныеФорматы.Сортировать("Порядок Возр");
	
	Возврат ДоступныеФорматы;
	
КонецФункции

// Возвращает свойства полей страны и гражданства, устанавливаемые для пользователя по умолчанию
//
// Возвращаемое значение:
//   Структура - см. НовыеЗначенияСвойствСтраныИГражданства()
//
Функция СвойстваСтраныИГражданстваПоУмолчанию() Экспорт
	
	Результат = НовыеЗначенияСвойствСтраныИГражданства();
	
	КодПоУмолчанию = "";
	НаименованиеПоУмолчанию = "";
	
	Россия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
	Если Россия <> Неопределено Тогда
		СвойстваРоссии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Россия, "Код, Наименование");
	КонецЕсли;
	
	Если СвойстваРоссии <> Неопределено Тогда
		КодПоУмолчанию = СвойстваРоссии.Код;
		НаименованиеПоУмолчанию = СвойстваРоссии.Наименование;
		Результат.КодРоссии = СвойстваРоссии.Код;
	КонецЕсли;
	
	Результат.СписокВыбораГражданства.Добавить(
		РегистрацияОрганизацииКлиентСервер.КодПустогоЗначенияВСпискеВыбораГражданства(),
		НСтр("ru = 'Без гражданства'"));
	Если ЗначениеЗаполнено(КодПоУмолчанию) Тогда
		Результат.СписокВыбораГражданства.Добавить(КодПоУмолчанию, НаименованиеПоУмолчанию);
	КонецЕсли;
	
	ТаблицаКлассификатора = РаботаСАдресами.ТаблицаКлассификатора();
	Для Каждого СтрокаКлассификатора Из ТаблицаКлассификатора Цикл
		Если СтрокаКлассификатора.Код <> КодПоУмолчанию Тогда
			Результат.СписокВыбораГражданства.Добавить(СтрокаКлассификатора.Код, СтрокаКлассификатора.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Гражданство = КодПоУмолчанию;
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСПрикрепленнымиФайлами

// Возвращает имя добавленного элемента для отображения нового иного файла
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения - Форма, в которой нужно добавить новый иной документ
//   НомерДокумента - Строка - Порядковый номер иного документа
//
// Возвращаемое значение:
//   Строка
//
Функция ДобавитьИнойДокумент(Форма, НомерДокумента = "") Экспорт
	
	Элементы = Форма.Элементы;
	НаименованиеГруппы = РегистрацияОрганизацииКлиентСервер.НаименованиеГруппыИногоДокумента();
	
	Если НомерДокумента = "" Тогда
		КоличествоЭлементов = Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы.Количество();
		Если КоличествоЭлементов <= 1 Тогда
			НомерДокумента = 1;
		Иначе
			ИмяПредыдущейГруппы = Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы[КоличествоЭлементов - 2].Имя;
			НомерДокумента = РегистрацияОрганизацииКлиентСервер.НомерИногоДокумента(ИмяПредыдущейГруппы) + 1;
		КонецЕсли;
	ИначеЕсли Элементы.Найти(СтрШаблон("%1%2", НаименованиеГруппы, НомерДокумента)) <> Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ГруппаЭлемент = Элементы.Добавить(
		СтрШаблон("%1%2", НаименованиеГруппы, НомерДокумента),
		Тип("ГруппаФормы"),
		Элементы.ГруппаИныеДокументы);
	
	Элементы.Переместить(ГруппаЭлемент, Элементы.ГруппаИныеДокументы, Элементы.ДобавитьИнойДокумент);
	
	ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлемент.Заголовок = СтрШаблон(НСтр("ru = 'Иной документ: %1'"), НомерДокумента);
	ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
	
	НадписьИнойДокумент = Элементы.Добавить(
		СтрШаблон("НадписьИнойДокумент%1", НомерДокумента),
		Тип("ДекорацияФормы"),
		ГруппаЭлемент);
	
	НадписьИнойДокумент.Вид = ВидДекорацииФормы.Надпись;
	НадписьИнойДокумент.РастягиватьПоГоризонтали = Истина;
	
	НадписьЭлемент = Элементы.Добавить(
		СтрШаблон("%1%2", РегистрацияОрганизацииКлиентСервер.ПредставлениеИногоДокумента(), НомерДокумента),
		Тип("ДекорацияФормы"),
		ГруппаЭлемент);
	
	НадписьЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НадписьЭлемент.Гиперссылка = Истина;
	НадписьЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	НадписьЭлемент.Заголовок = РегистрацияОрганизацииКлиентСервер.ПредставлениеФайлаПоУмолчанию();
	НадписьЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	НадписьЭлемент.Ширина = Элементы.СканЗаявление.Ширина;
	
	НадписьЭлемент.УстановитьДействие("Нажатие", "Подключаемый_СканИнойДокументНажатие");
	
	КомандаОчистить = Элементы.Добавить(
		СтрШаблон("%1%2", РегистрацияОрганизацииКлиентСервер.НаименованиеКомандыОчисткиИногоДокумента(), НомерДокумента),
		Тип("КнопкаФормы"),
		ГруппаЭлемент);
	
	КомандаОчистить.Вид = ВидКнопкиФормы.Гиперссылка;
	КомандаОчистить.ИмяКоманды = "ОчиститьОтсканированныйИнойДокумент";
	КомандаОчистить.ГоризонтальноеПоложениеВГруппе =  ГоризонтальноеПоложениеЭлемента.Право;
	
	УстановитьЗаголовокГруппыИныеДокументы(Элементы);
	
	Возврат НадписьЭлемент.Имя;
	
КонецФункции

// Удаляет иной документ
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения - Форма, в которой нужно добавить новый иной документ
//   НомерДокумента - Строка - Порядковый номер иного документа
//
Процедура ОчиститьПрикрепленныйИнойДокумент(Форма, НомерДокумента = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		
		УдалитьПоляФормыИногоДокумента(Элементы, НомерДокумента);
		
	Иначе
		
		КоличествоЭлементов = Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы.Количество();
		Индекс = 0;
		Пока КоличествоЭлементов > МинимальноеКоличествоЭлементовВГруппеИныеДокументы() Цикл
			
			ТекущийЭлемент = Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы[Индекс];
			НомерИногоДокумента = РегистрацияОрганизацииКлиентСервер.НомерИногоДокумента(ТекущийЭлемент.Имя);
			Если ЗначениеЗаполнено(НомерИногоДокумента) Тогда
				УдалитьПоляФормыИногоДокумента(Элементы, НомерИногоДокумента);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				Индекс = Индекс - 1;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппыИныеДокументы(Элементы);
	
КонецПроцедуры

// Устанавливает для элементов формы представление прикрепленных файлов
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - Форма, в которой нужно установить представление прикрепленных файлов
//   Заявление - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Владелец файлов
//
Процедура УстановитьПредставлениеПрикрепленныхФайлов(Форма, Заявление) Экспорт
	
	Если Не Форма.ПодачаДокументовВЭлектронномВидеДоступна Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеРеквизиты = Форма.ПолучитьРеквизиты();
	ВидыДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
	Для Каждого ТекущийВид Из ВидыДокументов Цикл
		
		ПрикрепленныеФайлы = РегистрацияОрганизацииВызовСервера.ТаблицаОтсканированныхСтраницДокумента(
			Заявление, ТекущийВид.Ключ);
		
		Если ТекущийВид.Значение = ВидыДокументов.ИнойДокумент Тогда
			
			НомерИногоДокумента = "";
			КоличествоСтраниц = 0;
			Для Каждого ТекущийИнойДокумент Из ПрикрепленныеФайлы Цикл
				
				Если ЗначениеЗаполнено(НомерИногоДокумента) И НомерИногоДокумента <> ТекущийИнойДокумент.НомерДокумента Тогда
					ДобавитьИнойДокумент(Форма, НомерИногоДокумента);
					РегистрацияОрганизацииКлиентСервер.УстановитьПредставлениеОтсканированногоФайла(
						Форма,
						ТекущийВид.Ключ,
						КоличествоСтраниц,
						НомерИногоДокумента);
					КоличествоСтраниц = 0;
				КонецЕсли;
				
				НомерИногоДокумента = ТекущийИнойДокумент.НомерДокумента;
				КоличествоСтраниц = КоличествоСтраниц + 1;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НомерИногоДокумента) И КоличествоСтраниц <> 0 Тогда
				ДобавитьИнойДокумент(Форма, НомерИногоДокумента);
				РегистрацияОрганизацииКлиентСервер.УстановитьПредставлениеОтсканированногоФайла(
					Форма,
					ТекущийВид.Ключ,
					КоличествоСтраниц,
					НомерИногоДокумента);
			КонецЕсли;
			
		ИначеЕсли ЭтоРеквизитФормы(ДоступныеРеквизиты, СтрШаблон("Скан%1", ТекущийВид.Ключ)) Тогда
			РегистрацияОрганизацииКлиентСервер.УстановитьПредставлениеОтсканированногоФайла(
				Форма,
				ТекущийВид.Ключ,
				ПрикрепленныеФайлы.Количество());
		КонецЕсли;
		
	КонецЦикла;
	
	ПодписанныеФайлы = РегистрацияОрганизацииВызовСервера.ТаблицаОтсканированныхСтраницДокумента(
		Заявление,
		РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
	
	Если ПодписанныеФайлы.Количество() > 0 Тогда
		Форма.ПодписанныеДокументы = ПодписанныеФайлы[0].Ссылка;
		РегистрирующийОрганКод = РегистрацияОрганизацииКлиентСервер.КодРегистрирующегоОрганаПоИмениФайла(ПодписанныеФайлы[0].ИмяФайла);
	Иначе
		Форма.ПодписанныеДокументы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет файл в прикрепленные файлы и возвращает ссылку на него.
//
// Параметры:
//   АдресВоВременномХранилище - Строка - адрес файла во временном хранилище
//   ИмяФайла                  - Строка - Полное имя файла
//   ВладелецФайла             - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы - ссылка на владельца файлов
//
// Возвращаемое значение:
//   СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы
//
Функция ПрикрепитьПрисоединенныйФайлПодписанногоДокумента(АдресВоВременномХранилище, ИмяФайла, ВладелецФайлов) Экспорт
	
	ДопРеквизиты = Новый Массив;
	ДопРеквизиты.Добавить("ПодписанЭП");
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	Если ЗначениеЗаполнено(РасширениеФайла) И СтрЗаканчиваетсяНа(ИмяФайла, РасширениеФайла) Тогда
		ИмяБезРасширения = Сред(ИмяФайла, 1, СтрДлина(ИмяФайла) - СтрДлина(РасширениеФайла) - 1);
	Иначе
		ИмяБезРасширения = ИмяФайла;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайлами.ПараметрыДобавленияФайла(ДопРеквизиты);
	СведенияОФайле.ВладелецФайлов = ВладелецФайлов;
	СведенияОФайле.Автор = Пользователи.ТекущийПользователь();
	СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
	СведенияОФайле.РасширениеБезТочки = РасширениеФайла;
	СведенияОФайле.ПодписанЭП = Истина;
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
		СведенияОФайле,
		АдресВоВременномХранилище, ,
		РегистрацияОрганизацииКлиентСервер.ПредставлениеПодписанныеФайлы());
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

Процедура ОбработатьРезультатПодписанияДокументов(Форма, РезультатПодписания, ПараметрыОтображения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодписания <> Неопределено
		И РезультатПодписания.Выполнено
		И ЭтоАдресВременногоХранилища(РезультатПодписания.Адрес) Тогда
		
		Форма.ПодписанныеДокументы = РегистрацияОрганизацииСервер.ПрикрепитьПрисоединенныйФайлПодписанногоДокумента(
			РезультатПодписания.Адрес,
			РезультатПодписания.ИмяПакета,
			ПараметрыОтображения.Заявление);
		
		Форма.ОшибкаПодписанияДокументов = Ложь;
		Форма.НетСертификатаПодписи = Ложь;
		Форма.Модифицированность = Ложь;
		
		Для Каждого ТекущийДокумент Из ДополнительныеПараметры Цикл
			Для Каждого ТекущаяСтраница Из ТекущийДокумент.АдресаФайлов Цикл
				УдалитьИзВременногоХранилища(ТекущаяСтраница);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Форма.ПодписанныеДокументы = Неопределено;
		Форма.ОшибкаПодписанияДокументов = (РезультатПодписания <> Неопределено);
		
		КлассификаторОшибок = ИнтерфейсыВзаимодействияБРОКлиентСервер.КлассификаторОшибокПакетаПоЕГРЮЛ();
		
		Если РезультатПодписания <> Неопределено
			И (РезультатПодписания.ТипОшибки = КлассификаторОшибок.ОтсутствуютСертификаты
			Или РезультатПодписания.ТипОшибки = КлассификаторОшибок.ОтсутствуютДействующиеСертификаты) Тогда
			
			Форма.НетСертификатаПодписи = Истина;
		Иначе
			Форма.НетСертификатаПодписи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(
		Форма,
		ПараметрыОтображения)
	
КонецПроцедуры

// Прикрепляет результат рассмотрения заявления к прикрепленным файлам организации
//
// Параметры:
//   Организация             - СправочникСсылка.Организации
//   Заявление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//   ТипФайла                - Строка - См. ДокументооборотРегистрацияВФНС.ВидыФайловОбменаСКонтролирующимОрганом()
//   Описание                - Строка - Описание прикрепленного файла
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
Процедура ПрикрепитьФайлКОрганизации(Организация, Заявление, ТипФайла, Описание, УникальныйИдентификатор) Экспорт
	
	ИдентификаторЛистаЗаписи = "ЛистЗаписиЕГР";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОрганизацииПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|ГДЕ
	|	ОрганизацииПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления
	|	И ОрганизацииПрисоединенныеФайлы.Наименование = &Наименование");
	
	Запрос.УстановитьПараметр("ВладелецФайла", Организация);
	Запрос.УстановитьПараметр("Наименование", ИдентификаторЛистаЗаписи);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		// Лист записи уже прикреплен
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РегистрацияОрганизацииВызовСервера.ДанныеФайлаОтФНСДляОткрытия(
		Заявление,
		ТипФайла,
		УникальныйИдентификатор);
	
	Если ДанныеФайла.ДанныеДляОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайлами.ПараметрыДобавленияФайла();
	СведенияОФайле.ВладелецФайлов = Организация;
	СведенияОФайле.Автор = Пользователи.ТекущийПользователь();;
	СведенияОФайле.ИмяБезРасширения = ИдентификаторЛистаЗаписи;
	СведенияОФайле.РасширениеБезТочки = ДанныеФайла.ДанныеДляОткрытия.Расширение;
	
	РаботаСФайлами.ДобавитьФайл(СведенияОФайле, ДанныеФайла.ДанныеДляОткрытия.СсылкаНаДвоичныеДанныеФайла, , Описание);
	
КонецПроцедуры

#КонецОбласти

// Возвращает результат проверки, подтверждены ли пользователем контактные данные
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - Форма, в которой нужно добавить новый иной документ
//   ДополнительныеПараметры - Структура - См. РегистрацияОрганизацииКлиентСервер.ДополнительныеПараметрыКонтактнойИнформации()
//
// Возвращаемое значение:
//   Булево
//
Функция КонтанктнаяИнформацияПодтверждена(Форма, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		
		Если Не Форма.НомерТелефонаПодтвержден Тогда
			ТекстСообщения = НСтр("ru = 'Подтвердите номер телефона'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ДополнительныеПараметры.ИмяРеквизитаТелефон, , Отказ);
		КонецЕсли;
		
		Если Не Форма.ЭлектроннаяПочтаПодтверждена Тогда
			ТекстСообщения = НСтр("ru = 'Подтвердите адрес электронной почты'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ДополнительныеПараметры.ИмяРеквизитаПочта, , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Устанавливает статус заявлению
//
// Параметры:
//   Документ - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Регламентированное уведомление Р11001, Р21001, Р13014, Р24001, Р26001
//   Статус   - Строка - сохраняемый статус, см. ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой(), СтатусВРаботеСтрокой(), СтатусПодготовленоСтрокой()
//
Процедура СохранитьСтатусОтправкиУведомления(Документ, Статус) Экспорт
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(Документ, Статус);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список возможных статусов при регистрации ООО/ИП или внесения изменений в ЕГРЮЛ\ЕГРИП
// Касается заявлений по формам: Р11001, Р21001, Р13014, Р24001, Р26001
//
// Возвращаемое значение:
//   Массив
//
Функция ФинальныеСтатусыЗаявлений() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(РегистрацияОрганизацииКлиентСервер.ФинальныйСтатусЗаявленияВЕГР()); // Получены документы - при ручной отправке документов
	Результат.Добавить(ДокументооборотРегистрацияВФНС.СтатусыЭтаповОтправки(Истина).Зарегистрировано); // Изменение зарегистрировано - при отправке онлайн
	Результат.Добавить(ДокументооборотРегистрацияВФНС.СтатусыЭтаповОтправки(Ложь).Зарегистрировано); // Зарегистрирован ИП/ООО при отправке онлайн
	
	Возврат Результат;
	
КонецФункции

// Возвращает список возможных статусов при ошибке регистрации ООО/ИП или внесения изменений в ЕГРЮЛ\ЕГРИП
// Касается заявлений по формам: Р11001, Р21001, Р13014, Р24001, Р26001
//
// Возвращаемое значение:
//   Массив
//
Функция СтатусыОшибки() Экспорт
	
	СтатусыЭтаповОтправки = ДокументооборотРегистрацияВФНС.СтатусыЭтаповОтправки();
	
	Результат = Новый Массив;
	Результат.Добавить(СтатусыЭтаповОтправки.НеПринято); // Не прошли формальные автоматические проверки, есть протокол с ошибками
	Результат.Добавить(СтатусыЭтаповОтправки.Отказано); // Выслано решение об отказе
	Результат.Добавить(СтатусыЭтаповОтправки.Приостановлено); // Выслано решение о приостановке регистрации
	
	Возврат Результат;
	
КонецФункции

// Возвращает список возможных статусов при формировании заявления на регистрацию ООО/ИП или внесении изменений в ЕГРЮЛ\ЕГРИП
// Касается заявлений по формам: Р11001, Р21001, Р13014, Р24001, Р26001
//
// Возвращаемое значение:
//   Массив
//
Функция СтатусыЗаявленияВРаботе() Экспорт
	
	СтатусыЭтаповОтправки = ДокументооборотРегистрацияВФНС.СтатусыЭтаповОтправки();
	
	Результат = Новый Массив;
	Результат.Добавить(ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
	Результат.Добавить(ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
	
	Возврат Результат;
	
КонецФункции

// Устанавливает свойство ТолькоПросмотр для всех подчиненных элементов формы
//
// Параметры:
//   КоллекцияЭлементов - ФормаКлиентскогоПриложения, ЭлементыФормы - Коллекция элементов, для которых нужно установить свойство ТолькоПросмотр
//
Процедура УстановитьПросмотрЭлементовФормы(КоллекцияЭлементов, ТолькоПросмотр) Экспорт
	
	КоллекцияЭлементов.ТолькоПросмотр = ТолькоПросмотр;
	
	// Кнопки перехода по шагам в помощнике
	КнопкиНавигацииФормы = Новый Массив;
	КнопкиНавигацииФормы.Добавить("ИзменитьРеквизиты");
	КнопкиНавигацииФормы.Добавить("СформироватьДокументыКнопка");
	КнопкиНавигацииФормы.Добавить("ИзменитьДанныеОрганизации");
	КнопкиНавигацииФормы.Добавить("СформироватьДокументы");
	КнопкиНавигацииФормы.Добавить("КомандаНазад");
	КнопкиНавигацииФормы.Добавить("КомандаДалее");
	
	Для Каждого ТекущийЭлемент Из КоллекцияЭлементов.ПодчиненныеЭлементы Цикл
		
		ТипЭлемента = ТипЗнч(ТекущийЭлемент);
		Если ТипЭлемента = Тип("ПолеФормы") Тогда
			ТекущийЭлемент.ТолькоПросмотр = ТолькоПросмотр;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") И ТекущийЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка Тогда
			// Кнопки Назад и Далее всегда доступны, остальные команды формы в режиме ТолькоПросмотр должны быть заблокированны
			Если КнопкиНавигацииФормы.Найти(ТекущийЭлемент.Имя) = Неопределено Тогда
				ТекущийЭлемент.Доступность = Не ТолькоПросмотр;
			Иначе
				ТекущийЭлемент.Доступность = Истина;
			КонецЕсли;
		ИначеЕсли ТипЭлемента = Тип("ГруппаФормы") Тогда
			УстановитьПросмотрЭлементовФормы(ТекущийЭлемент, ТолькоПросмотр);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того, возможно ли запустить помощник регистрации нового бизнеса
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенПомощникРегистрацииНовогоБизнеса() Экспорт
	
	// В помощнике регистрации нового ИП или ООО создается элемент справочника Организации:
	// если нет доступа к справочнику, то пользователь не сможет воспользоваться помощником
	Возврат ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	
КонецФункции

// Возвращает возможные страницы списка 1С-Отчетность, где могут располагаться заявления:
// Р11001 - регистрация ООО
// Р21001 - регистрация ИП
// Р13014 - внесение изменений в ЕГРЮЛ
// Р24001 - внесение изменений в ЕГРИП
// Р26001 - снятие ИП с учета
//
// Возвращаемое значение:
//   Массив
//
Функция СтраницыЖурналаОтправокДляЗаявленийЕГРЮЛ() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ);
	Результат.Добавить(Перечисления.СтраницыЖурналаОтчетность.Уведомления);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовокГруппыИныеДокументы(Элементы)
	
	// Заголовок для иных документов устанавливается в самой первой надписи
	
	МинимальноеКоличествоЭлементовВГруппе = МинимальноеКоличествоЭлементовВГруппеИныеДокументы();
	
	Если Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы.Количество() <= МинимальноеКоличествоЭлементовВГруппе Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяГруппа = Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы[0];
	ЭлементНадписи = Неопределено;
	
	Для Каждого ТекущийЭлемент Из ПерваяГруппа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекущийЭлемент) = Тип("ДекорацияФормы")
			И ТекущийЭлемент.Вид = ВидДекорацииФормы.Надпись
			И Не ТекущийЭлемент.Гиперссылка Тогда
			
			ЭлементНадписи = ТекущийЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементНадписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаИныеДокументы.ПодчиненныеЭлементы.Количество() - МинимальноеКоличествоЭлементовВГруппе > 1 Тогда
		ЭлементНадписи.Заголовок = НСтр("ru = 'Иные документы:'");
	Иначе
		ЭлементНадписи.Заголовок = НСтр("ru = 'Иной документ:'");
	КонецЕсли;
	
КонецПроцедуры

Функция МинимальноеКоличествоЭлементовВГруппеИныеДокументы()
	
	Возврат 1;
	
КонецФункции

Функция ЭтоРеквизитФормы(СписокРеквизитов, ИмяРеквизита)
	
	Для Каждого ТекущийРеквизит Из СписокРеквизитов Цикл
		Если ТекущийРеквизит.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции

Процедура УдалитьПоляФормыИногоДокумента(Элементы, НомерДокумента)
	
	НаименованиеГруппы = РегистрацияОрганизацииКлиентСервер.НаименованиеГруппыИногоДокумента();
	ГруппаЭлемент = Элементы.Найти(СтрШаблон("%1%2", НаименованиеГруппы, НомерДокумента));
	Если ГруппаЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекущийЭлемент Из ГруппаЭлемент.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(ТекущийЭлемент);
	КонецЦикла;
	
	Элементы.Удалить(ГруппаЭлемент);
	
КонецПроцедуры

Функция НовыеЗначенияСвойствСтраныИГражданства()
	
	Результат = Новый Структура;
	Результат.Вставить("КодРоссии", "");
	Результат.Вставить("Гражданство", "");
	Результат.Вставить("СписокВыбораГражданства", Новый СписокЗначений);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти