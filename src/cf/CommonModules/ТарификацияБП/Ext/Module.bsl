#Область ПрограммныйИнтерфейс

// Возвращает признак того, что сеанс запущен в режиме отладки тарификации
//
// Возвращаемое значение:
//   Булево - Истина, если установлен режим отладки
//
Функция РежимОтладки() Экспорт
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	
	ЭтоРежимОтладки = СтрНайти(ПараметрЗапускаПриложения, ПрефиксПараметраОтладки()) > 0;
	Если Не ЭтоРежимОтладки Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		ЭтоРежимОтладки = ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги(ИдентификаторУслугиРежимОтладкиТарифа());
	КонецЕсли;
	
	Возврат ЭтоРежимОтладки;
	
КонецФункции

// Возвращает идентификатор тарифа в режиме отладки
//
// Возвращаемое значение:
//  Строка - идентификатор тарифа в режиме отладки
Функция РежимОтладки_ИдентификаторТарифа() Экспорт
	
	ИдентификаторыТарифа = Новый Массив;
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	ОтдельныеПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПараметрЗапускаПриложения, " ");
	
	Для Каждого ТекущийПараметрЗапуска Из ОтдельныеПараметрыЗапуска Цикл 
		
		Если СтрНайти(ТекущийПараметрЗапуска, ПрефиксПараметраОтладки()) Тогда 
			ИдентификаторыТарифа.Добавить(ТекущийПараметрЗапуска);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИдентификаторыТарифа, " ");
	
КонецФункции

// Возвращает Истина, если в режиме сервиса разрешена регулярная деятельность.
//
Функция РазрешенУчетРегулярнойДеятельности() Экспорт
	
	// Этот метод может вызываться и при создании через OData, а OData не предоставляет доступ к общим константам.
	// Поэтому выполним этот метод в привилегированном режиме. В возвращаемых данных нет ничего секретного,
	// и особо управлять правами доступа на константу не стоит.
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.УчетРегулярнойДеятельностиОпределяетсяТарифом.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Возврат Ложь; // Позволяет вести отладку вне режима сервиса
		Иначе
			Возврат Истина; // Использование локальной версии предполагает учет регулярной деятельности
		КонецЕсли;
		
	Иначе
		
		Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслугиРегулярнаяДеятельность());
		
	КонецЕсли;
	
КонецФункции

// Устарела. Следует использовать ТарификацияБП.РазрешеноЮридическоеЛицо.
// Возвращает признак того, что тариф допускает ведение учета юр.лица
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетЮридическогоЛица() Экспорт
	
	Возврат РазрешенаУСН() Или РазрешенаАУСН() Или РазрешенаОбщаяСистемаНалогообложения();
	
КонецФункции

// Устарела. Следует использовать ТарификацияБП.РазрешенСамозанятый и ТарификацияБП.РазрешенИндивидуальныйПредприниматель.
// Возвращает признак того, что тариф допускает ведение учета ИП
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетФизическогоЛица() Экспорт
	
	Возврат РазрешенНалогНаПрофессиональныйДоход()
		Или РазрешенаПатентнаяСистемаНалогообложения()
		Или РазрешенаУСН()
		Или РазрешенаАУСН()
		Или РазрешенНДФЛИП();
	
КонецФункции

// Возвращает признак того, что тариф допускает учет зарплаты
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенУчетЗарплаты() Экспорт
	
	Если Не РазрешенДополнительныйФункционал() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем, чтобы был установлен лимит хотя бы на одного сотрудника 
	Возврат РезультатПроверкиУсловийТарификацииПоСотрудникам(1).УсловияВыполнены;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета юр.лица на ОСНО
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаОбщаяСистемаНалогообложения() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиОбщаяСистемаНалогообложения();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета ИП на ОСНО
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенНДФЛИП() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиНДФЛИП();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета организации на УСН
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаУСН() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиУСН();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета организации на Автоматизированной УСН
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаАУСН() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиАУСН();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета ИП на Патентной системе налогообложения
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенаПатентнаяСистемаНалогообложения() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиПатентнаяСистемаНалогообложения();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета организации на ЕНВД
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенЕНВД() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета плательщика Налога на профессиональный доход
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенНалогНаПрофессиональныйДоход() Экспорт
	
	Если Не ТарифицируютсяСистемыНалогообложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиНалогНаПрофессиональныйДоход();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает использование Полного интерфейса
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенПолныйИнтерфейс() Экспорт
	
	Если Не ТарифицируетсяФункциональность() Тогда
		// Ограничение доступности интерфейса в первую очередь связано с ограничением доступа к функциональности 
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиПолныйИнтерфейс();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает использование функционала отличного от Основного
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенДополнительныйФункционал() Экспорт
	
	Если Не ТарифицируетсяФункциональность() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиДополнительныйФункционал();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что функциональность ограничена ведением ЭТК
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Экспорт
	
	Если Не СервисЭлектронныхТрудовыхКнижек.СервисЭлектронныхТрудовыхКнижекДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Не РазрешенБухгалтерскийУчет() И РазрешенКадровыйУчет();
	
КонецФункции

// Возвращает признак того, что используется Интерфейс интеграции с банком
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенТолькоИнтерфейсИнтеграцииСБанком() Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат БезлимитнаяНегативнаяУслугаСервисаДоступна(
		ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком());
	
КонецФункции

// Возвращает признак того, что тариф предусматривает работу со всем функционалом бухгалтерского и налогового учета
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенБухгалтерскийУчет() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Возврат Ложь; // Позволяет вести отладку вне режима сервиса
		Иначе
			Возврат Истина; // Использование локальной версии предполагает учет регулярной деятельности
		КонецЕсли;
		
	Иначе
		
		Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслугиБухгалтерскийУчет());
		
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что тариф предусматривает возможность кадрового учета
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенКадровыйУчет() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Возврат Ложь; // Позволяет вести отладку вне режима сервиса
		Иначе
			Возврат Истина; // Использование локальной версии предполагает учет регулярной деятельности
		КонецЕсли;
		
	Иначе
		
		Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслугиКадровыйУчет());
		
	КонецЕсли;
	
КонецФункции

// Возвращает количество сотрудников, доступное на тарифе. Возвращает -1, если число сотрудников не ограничено
//
// Возвращаемое значение:
//   Число - Доступное количество сотрудников
//
Функция РазрешенноеКоличествоСотрудников() Экспорт
	
	ИдентификаторУслуги = ИдентификаторУслугиДоступноеКоличествоСотрудников();
	
	Если РежимОтладки() Тогда 
		Возврат РежимОтладки_ПараметрЛимитированнойУслуги(ИдентификаторУслуги);
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда 
		ОписаниеЛицензий = КоличествоЛицензийЛимитированнойУслуги(ИдентификаторУслуги);
		Возврат ОписаниеЛицензий.ДоступноЛицензий;
	КонецЕсли;
	
	Возврат -1;
	
КонецФункции

// Возвращает имена функциональных опций, доступных для определенных систем налогообложения
//
// Возвращаемое значение:
//   Массив из Строка - массив имен доступных функциональных опций. Доступность опции определяется по доступности СНО
//
Функция ФункциональностьДоступнаяСНО() Экспорт
	
	ДоступныеФункциональныеОпции = Новый Массив;
	
	Если РазрешенаОбщаяСистемаНалогообложения() Или РазрешенНДФЛИП() Или РазрешенаУСН() Тогда
		ДоступныеФункциональныеОпции.Добавить("ВестиУчетРасчетовСКонтрагентами");
	КонецЕсли;
	
	Возврат ДоступныеФункциональныеОпции;
	
КонецФункции

// Возвращает признак доступности документа по условиям тарифа
//
// Параметры:
//  ТипДокумента - Тип  - тип ссылки проверяемого документа, например Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
//  ПроверяемыйДокумент - ДокументСсылка, ДокументОбъект, Неопределено - ссылка на проверяемый документ или сам объект,
//                        принимает значение Неопределено, в случае если проверка вызывается,
//                        не для конкретного документа (например, в случае проверки формы списка)
//
// Возвращаемое значение:
//  Булево - Истина, если проверка на соблюдение условий тарифа успешно пройдена
//
Функция ДокументДоступенПоУсловиямТарифа(ТипДокумента, ПроверяемыйДокумент = Неопределено) Экспорт
	
	Если Не ТарифицируетсяФункциональность() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступныйВидОрганизации()
		Или ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяСистемаНалогообложения() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяФункциональность() Тогда
		Возврат Истина;
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ВозможнаВыборочнаяБлокировкаДокументовНедоступныхПоТарифу") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияДоступности = Обработки.ФункциональностьПрограммы.УсловияДоступностиДокументовПоТарифу();
	
	ОтборПоТипуДокумента = Новый Структура;
	ОтборПоТипуДокумента.Вставить("ТипОбъекта", ТипДокумента);
	
	НайденныеОграниченияДляДокумента = УсловияДоступности.НайтиСтроки(ОтборПоТипуДокумента);
	НедоступнаяФункциональность = Неопределено;
	ДокументДоступен = Истина;
	
	Для Каждого СтрокаОграничений Из НайденныеОграниченияДляДокумента Цикл
		Если НедоступнаяФункциональность = Неопределено Тогда
			НедоступнаяФункциональность = ТарификацияБППовтИсп.НедоступнаяФункциональность();
		КонецЕсли;
		Если НедоступнаяФункциональность.Получить(СтрокаОграничений.Функциональность) <> Неопределено Тогда
			Если Не ПроверкаДоступностиПройдена(СтрокаОграничений, ПроверяемыйДокумент) Тогда
				ДокументДоступен = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументДоступен;
	
КонецФункции

// Проверяет доступность открываемой формы согласно условиям тарифа.
// Если результат проверки отрицательный, то в параметры формы добавляется параметр "ТолькоПросмотр"
//
// Параметры:
//  ТипДокумента - Тип - тип ссылки проверямого документа, например, Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
//  Параметры - Структура - параметры открываемой формы
//
Процедура УстановитьДоступностьФормы(ТипДокумента, Параметры) Экспорт
	
	// Если у формы уже установлен параметр "ТолькоПросмотр" в значение Истина, то никаких дополнительных
	// действий не требуется
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТолькоПросмотр", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ", Неопределено);

	Если ДокументДоступенПоУсловиямТарифа(ТипДокумента, СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиУсловийТарифа();
	
	Если РезультатПроверки.ЕстьНедоступнаяСистемаНалогообложения
		Или РезультатПроверки.ЕстьНедоступнаяФункциональность
		Или РезультатПроверки.ЕстьНедоступныйВидОрганизации Тогда
		Параметры.Вставить("ТолькоПросмотр", Истина);
		ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.СообщениеНарушениеУсловийТарифа);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак возможности выборочной блокировки документов в случае использования
// недоступной функциональности
//
// Возвращаемое значение:
//  Булево - Истина, если возможна только выборочная блокировка недоступных документов. Ложь - если
//           требуется полная блокировка всех документов в базе
//
Функция ВозможнаВыборочнаяБлокировка() Экспорт
	
	Если Не РазрешенДополнительныйФункционал() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияДоступности = Обработки.ФункциональностьПрограммы.УсловияДоступностиДокументовПоТарифу();
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	НедоступнаяФункциональность = Обработки.ФункциональностьПрограммы.ВключеннаяНедоступнаяФункциональность(
		НедоступнаяФункциональность);
	ВыборочнаяБлокировкаВозможна = Истина;
	Для Каждого Функциональность Из НедоступнаяФункциональность Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Функциональность", Функциональность.Ключ);
		НайденныеСтроки = УсловияДоступности.НайтиСтроки(Отбор);
		Для Каждого СтрокаУсловия Из НайденныеСтроки Цикл
			Если Не ЗначениеЗаполнено(СтрокаУсловия.ТипОбъекта) Тогда
				ВыборочнаяБлокировкаВозможна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВыборочнаяБлокировкаВозможна Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыборочнаяБлокировкаВозможна;
	
КонецФункции

Процедура ПроверкаДоступностиФормыПоТарифуОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Ссылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ", Неопределено);
	Если Ссылка = Неопределено Тогда
		Ссылка = Источник.ПустаяСсылка()
	КонецЕсли;
	УстановитьДоступностьФормы(ТипЗнч(Ссылка), Параметры);
	
КонецПроцедуры

// Возвращает признак того, что тариф допускает использование валютного учета
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенВалютныйУчет() Экспорт
	
	Возврат Обработки.ФункциональностьПрограммы.РазрешеноИспользоватьФункциональностьВДоступномИнтерфейсе("ВестиУчетПоДоговорам");
	
КонецФункции

// Возвращает Истина, если тариф предусматривает начало работы с программой с подбора режима налогообложения.
//
// Возвращаемое значение:
//   Булево
//
Функция НачинатьРаботуСоСравненияРежимовНалогообложения() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Обработки.СравнениеРежимовНалогообложения.РежимОтладки();
		
	Иначе
		
		// Проверяем "негативную" услугу, чтобы услуга была недоступна, если она не тарифицируется.
		// см. комментарий в ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги
		Возврат БезлимитнаяНегативнаяУслугаСервисаДоступна(ИдентификаторУслугиНачинатьРаботуСоСравненияРежимовНалогообложения());
		
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если тариф предусматривает подготовку документов для регистрации ИП или организации.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьСервисРегистрации() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Обработки.РегистрацияОрганизации.РежимОтладкиСервисаРегистрации();
		
	Иначе
		
		// Проверяем "негативную" услугу, чтобы услуга была недоступна, если она не тарифицируется.
		// см. комментарий в ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги
		Возврат БезлимитнаяНегативнаяУслугаСервисаДоступна(ИдентификаторУслугиСервисРегистрации());
		
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если тариф предусматривает оказание услуг БухОбслуживания.
//
// Возвращаемое значение:
//   Булево
//
Функция ОказываютсяКонсультацииБухОбслуживание() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Обработки.РегистрацияОрганизации.РежимОтладкиСервисаРегистрации();
		
	Иначе
		
		// Проверяем "негативную" услугу, чтобы услуга была недоступна, если она не тарифицируется.
		// см. комментарий в ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги
		Возврат БезлимитнаяНегативнаяУслугаСервисаДоступна(ИдентификаторУслугиКонсультацииБухОбслуживание());
		
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета Самозанятого
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенСамозанятый() Экспорт
	
	Если Не ТарифицируютсяВидыОрганизаций() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиСамозанятый();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета Индивидуального предпринимателя
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешенИндивидуальныйПредприниматель() Экспорт
	
	Если Не ТарифицируютсяВидыОрганизаций() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиИндивидуальныйПредприниматель();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

// Возвращает признак того, что тариф допускает ведение учета Юридического лица
//
// Возвращаемое значение:
//   Булево - Истина, если разрешено
//
Функция РазрешеноЮридическоеЛицо() Экспорт
	
	Если Не ТарифицируютсяВидыОрганизаций() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиЮридическоеЛицо();
	
	Возврат БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьОписаниеТарифицируемыхУслуг(ПоставщикиУслуг) Экспорт
	
	НовыйПоставщик = Новый Структура;
	НовыйПоставщик.Вставить("Идентификатор", ИдентификаторПоставщикаУслугБухгалтерияПредприятия());
	НовыйПоставщик.Вставить("Наименование",  НСтр("ru = 'Конфигурация ""Бухгалтерия предприятия"", редакция 3.0'"));
	НовыйПоставщик.Вставить("Услуги",        Новый Массив);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРегулярнаяДеятельность());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность учитывать регулярную деятельность бизнеса и предоставлять ненулевую отчетность'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Только интерфейс интеграции с банком'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбособленныеПодразделения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Обособленные подразделения'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбратноеНачислениеНДС());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Обратное начисление НДС'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРасширенныйФункционал());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Расширенный функционал'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиВестиУчетПоОрганизациям());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Учет по нескольким организациям'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиГособоронзаказ());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Контракты государственного заказа'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиУведомленияОКонтролируемыхСделках());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Контролируемые сделки'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Уникальная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиБухгалтерскийУчет());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность вести бухгалтерский и налоговый учет и предоставлять отчетность'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиКадровыйУчет());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность вести кадровый учет и регистрировать записи трудовых книжек'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНачинатьРаботуСоСравненияРежимовНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Начинать работу с программой со сравнения режимов налогообложения'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиСервисРегистрации());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Сервис регистрации'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиКонсультацииБухОбслуживание());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Оказываются консультации партнерами 1С:БухОбслуживание'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОбщаяСистемаНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: ОСНО'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНДФЛИП());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: НДФЛ ИП'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиУСН());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: УСН'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиАУСН());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: АУСН'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиПатентнаяСистемаНалогообложения());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: Патент'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиНалогНаПрофессиональныйДоход());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Система налогообложения: Налог на профессиональный доход'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиПолныйИнтерфейс());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Функциональность: Полный интерфейс'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиДополнительныйФункционал());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Функциональность: Настраиваемая'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиДоступноеКоличествоСотрудников());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Количество сотрудников'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Лимитированная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРежимОтладкиТарифа());
	Услуга.Вставить("Наименование", НСтр("ru = 'Режим отладки тарифа'"));
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиСамозанятый());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Вид организации: Самозанятый'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиИндивидуальныйПредприниматель());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Вид организации: Индивидуальный предприниматель'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиЮридическоеЛицо());
	Услуга.Вставить("Наименование",  НСтр("ru = 'Вид организации: Юридическое лицо'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщик);
	
КонецПроцедуры

Процедура ДополнитьОписаниеТарифицируемыхУслуг1СОтчетность(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для каждого ЗначениеМассива Из ПоставщикиУслуг Цикл
		Если ЗначениеМассива.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ЗначениеМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслуги1СОтчетность());
	НоваяУслуга.Вставить("Наименование",  НСтр("ru = 'Лицензия для сдачи отчетности одного юридического лица'"));
	НоваяУслуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграничении(Форма) Экспорт
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаОсновное", "ТолькоПросмотр");
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты"
		ИЛИ Форма.ИмяФормы = "РегистрСведений.НастройкиСистемыНалогообложения.Форма.ФормаЗаписи" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаСпецрежим", "ТолькоПросмотр");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(Форма) Экспорт
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		
		Элементы = Форма.Элементы;
		Фон = РазместитьГруппуОграничениеТарифа(Элементы);
		
		КоличествоПредметов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОграничениеКоличестваОбъектов(),
			НСтр("ru = 'документа, документов, документов'"), Истина);
		ТекстПредупреждения = НСтр("ru='Можно ввести не больше %1 всех видов. На платном тарифе — сколько угодно.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, КоличествоПредметов);
		
		ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Фон, ТекстПредупреждения);
		
	ИначеЕсли РегламентированнаяОтчетностьБП.Используется1СОтчетность()
		И НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами() Тогда
		
		Элементы = Форма.Элементы;
		Фон = РазместитьГруппуОграничениеТарифа(Элементы);
		
		ТекстПредупреждения = НСтр("ru='Отправляйте отчетность через Интернет! Эта возможность доступна только на платном тарифе.'");
		
		ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Фон, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПроверкаТарифныхОграниченийДокументов.
// Если тарифные ограничения нарушены, будет вызвано исключение.
//	
Процедура ПроверкаТарифныхОграниченийДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПроверитьОграничениеОбъекта(Источник, Отказ);
	
КонецПроцедуры

Функция УстановитьРазрешенУчетРегулярнойДеятельности(РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	МенеджерКонстанты = Константы.РазрешенУчетРегулярнойДеятельности.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Прочитать();
	
	Если МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты, РегистрироватьНаУзлахПлановОбмена);
	
	УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(МенеджерКонстанты.Значение);
	
	Возврат Истина;
	
КонецФункции

// Устанавливает значения общих констант загрузке данных из сервиса
//
Процедура УстановитьЗначенияКонстантПоставкиПослеЗагрузкиДанных() Экспорт
	
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// При переходе в локальную версию значение общей константы не наследуется:
		// локальная версия не может иметь тарифных ограничений
		Константы.УчетРегулярнойДеятельностиОпределяетсяТарифом.Установить(Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
		УстановитьРазрешенУчетРегулярнойДеятельности(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбновленииДоступныхЛицензий(ИдентификаторУслуги) Экспорт
	
	// Непосредственно после загрузки данных в сервис информация о тарифах и лицензиях может отсутствовать
	// в области. Она будет будут загружена позже.
	// По мере загрузки следует обновить значения констант, которые могут зависеть от тарифов.
	
	Если ИдентификаторУслуги = ИдентификаторУслугиРегулярнаяДеятельность() Тогда
		ОбновитьПовторноИспользуемыеЗначения(); // Исключаем выбор значения из кеша
		УстановитьРазрешенУчетРегулярнойДеятельности(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Получает идентификатор актуального тарифа.
// В случае, если в текущем сеансе работы пользователь выбрал тариф,
// актуальным считается выбранный тариф.
// В противном случае актуальным считается тариф первой найденной платной подписки.
// При отсутствии платных подписок возвращается пустая строка.
//
// Возвращаемое значение:
//  Строка - идентификатор актуального тарифа, или пустая строка, если тариф тестовый.
//
Функция ИдентификаторАктуальногоТарифа() Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		// В сервисе ЭТК счета не выставляются
		Возврат "СервисЭлектронныхТрудовыхКнижек";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСеанса.ВыбранныйТариф) Тогда
		ОписаниеТарифа = ПрограммныйИнтерфейсСервиса.ТарифСервиса(ПараметрыСеанса.ВыбранныйТариф);
		Возврат ОписаниеТарифа.Наименование;
	Иначе
		ПодпискиАбонента = ПрограммныйИнтерфейсСервиса.ПодпискиАбонента();
		Для каждого Подписка Из ПодпискиАбонента Цикл
			Если Подписка.ДатаПодключения > ТекущаяДатаСеанса()
				ИЛИ Подписка.ДатаОтключения < ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеТарифа = ПрограммныйИнтерфейсСервиса.ТарифСервиса(Подписка.КодТарифа);
			Если ОписаниеТарифа.Платный Тогда
				Возврат ОписаниеТарифа.Наименование;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если в текущем сеансе работы пользователь выбрал тариф.
//
// Возвращаемое значение:
//  Булево - признак наличия выбранного тарифа
//
Функция ЕстьВыставленныйСчетНаОплатуСервиса() Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		// В сервисе ЭТК счета не выставляются
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ПараметрыСеанса.ВыбранныйТариф);
	
КонецФункции

// Проверяет возможность включения константы функциональности с учетом установленного тарифа.
//
// Параметры:
//   Имя - Строка - Имя включаемой константы функциональности
//   Значение - Булево - Значение включаемой константы функциональности
//   Отказ - Булево - Флаг отказа
//
Процедура КонстантаФункциональностиПередЗаписью(Имя, Значение, Отказ) Экспорт
	
	Если Не Значение Тогда
		// Проверяем только при включении
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если новое значение константы не отличается от старого значения, то проверка на соответствие
	// условиям тарифа выполняться не будет. Иногда функциональность устанавливается в значение Истина,
	// потому что она была включена ранее и отключение ее невозможно - в этом случае повторная запись со значением Истина
	// не должна приводить к ошибке при записи
	Если Константы[Имя].Получить() = Значение Тогда
		Возврат;
	КонецЕсли;

	Если Не Обработки.ФункциональностьПрограммы.РазрешеноИспользоватьФункциональностьВДоступномИнтерфейсе(Имя)
		И ФункциональностьДоступнаяСНО().Найти(Имя) = Неопределено Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр(
			"ru = 'Использование функции ""%1"" запрещено условиями текущего тарифа'"),
			Метаданные.Константы[Имя].Синоним);
	КонецЕсли;
	
КонецПроцедуры

// Для включения какой-либо функции иногда требуется определенная функциональность.
// Процедура проверяет возможность включения необходимой константы функциональности с учетом установленного тарифа.
// Например, для включения Валютного учета, необходимо включить Учет по договорам.
// Валютный учет не управляется непосредственно тарифными опциями, поэтому проверяем Учет по договорам.
//
// Параметры:
//   Имя - Строка - Имя включаемой константы
//   Значение - Булево - Значение включаемой константы
//   ИмяНеобходимойФункциональности - Строка - Имя константы необходимой тарифицируемой функциональности
//   Отказ - Булево - Флаг отказа
//
Процедура КонстантаЗависимойФункциональностиПередЗаписью(Имя, Значение, ИмяНеобходимойФункциональности, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Значение Или Константы[ИмяНеобходимойФункциональности].Получить() Тогда
		// Проверяем только при каскадном включении
		Возврат;
	КонецЕсли;
	
	// Если новое значение константы не отличается от старого значения, то проверка на соответствие
	// условиям тарифа выполняться не будет. Иногда функциональность устанавливается в значение Истина,
	// потому что она была включена ранее и отключение ее невозможно - в этом случае повторная запись со значением Истина
	// не должна приводить к ошибке при записи 
	Если Константы[Имя].Получить() = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Обработки.ФункциональностьПрограммы.РазрешеноИспользоватьФункциональностьВДоступномИнтерфейсе(ИмяНеобходимойФункциональности) 
		И ФункциональностьДоступнаяСНО().Найти(ИмяНеобходимойФункциональности) = Неопределено Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр(
			"ru = 'Использование функции ""%1"" необходимо для включения ""%2"", но запрещено условиями текущего тарифа'"),
			Метаданные.Константы[ИмяНеобходимойФункциональности].Синоним,
			Метаданные.Константы[Имя].Синоним);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонстантаИспользуемойСистемыНалогообложенияПриЗаписи(Имя, Значение, Отказ) Экспорт
	
	Если Значение Тогда
		ОпцияДоступна = Неопределено;
		Если ДоступностьИспользуемыхСистемНалогообложения().Свойство(Имя, ОпцияДоступна) И Не ОпцияДоступна Тогда
			Отказ = Истина;
			ВызватьИсключение НСтр(
				"ru = 'Использование выбранной системы налогообложения запрещено условиями текущего тарифа'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает сохраненные значения тарифицируемых опций с текущими значениями
// 
// Параметры:
//  АдресЗначенийТарифицируемыхОпций - Строка - Адрес значений во временном хранилище
//
// Возвращаемое значение:
//  Булево - Истина, если было изменено значение хотя бы одной опции
//
Функция ТарифицируемыеОпцииИзменены(АдресЗначенийТарифицируемыхОпций) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресЗначенийТарифицируемыхОпций) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияТарифицируемыхОпцийДоОплаты = ПолучитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
	Если ТипЗнч(ЗначенияТарифицируемыхОпцийДоОплаты) <> Тип("Структура") Тогда
		УдалитьИзВременногоХранилища(ЗначенияТарифицируемыхОпцийДоОплаты);
		Возврат Истина;
	КонецЕсли;
	
	ДействующиеЗначенияТарифицируемыхОпций = ЗначенияТарифицируемыхОпций();
	Если ОбщегоНазначения.КоллекцииИдентичны(ЗначенияТарифицируемыхОпцийДоОплаты, ДействующиеЗначенияТарифицируемыхОпций) Тогда
		Возврат Ложь;
	Иначе
		УдалитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает текущие значения тарифицируемых опций
// 
// Возвращаемое значение:
//  Структура
//
Функция ЗначенияТарифицируемыхОпций() Экспорт
	
	ЗначенияОпций = Новый Структура;
	
	ЗначенияОпций.Вставить(
		"РазрешенаОбщаяСистемаНалогообложения",
		РазрешенаОбщаяСистемаНалогообложения());
	
	ЗначенияОпций.Вставить(
		"РазрешенНДФЛИП",
		РазрешенНДФЛИП());
	
	ЗначенияОпций.Вставить(
		"РазрешенаУСН",
		РазрешенаУСН());
	
	ЗначенияОпций.Вставить(
		"РазрешенаАУСН",
		РазрешенаАУСН());
	
	ЗначенияОпций.Вставить(
		"РазрешенаПатентнаяСистемаНалогообложения",
		РазрешенаПатентнаяСистемаНалогообложения());
	
	ЗначенияОпций.Вставить(
		"РазрешенНалогНаПрофессиональныйДоход",
		РазрешенНалогНаПрофессиональныйДоход());
	
	ЗначенияОпций.Вставить(
		"РазрешенноеКоличествоСотрудников",
		РазрешенноеКоличествоСотрудников());
	
	ЗначенияОпций.Вставить(
		"РазрешенДополнительныйФункционал",
		РазрешенДополнительныйФункционал());
	
	ЗначенияОпций.Вставить(
		"РазрешенПолныйИнтерфейс",
		РазрешенПолныйИнтерфейс());
	
	ЗначенияОпций.Вставить(
		"РазрешенСамозанятый",
		РазрешенСамозанятый());
	
	ЗначенияОпций.Вставить(
		"РазрешенИндивидуальныйПредприниматель",
		РазрешенИндивидуальныйПредприниматель());
	
	ЗначенияОпций.Вставить(
		"РазрешеноЮридическоеЛицо",
		РазрешеноЮридическоеЛицо());
	
	Возврат ЗначенияОпций;
	
КонецФункции

// Возвращает результат проверки условия тарифного ограничения на число сотрудников
//
// Параметры:
//  КоличествоСотрудников - Число - текущее количество сотрудников организации
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам
//
Функция РезультатПроверкиУсловийТарификацииПоСотрудникам(КоличествоСотрудников) Экспорт
	
	РезультатПроверки = НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам();
	
	РезультатПроверки.ТекущееКоличествоСотрудников = КоличествоСотрудников;
	
	Если Не ТарифицируетсяЧислоСотрудников() Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РазрешенноеКоличествоСотрудников = РазрешенноеКоличествоСотрудников();
	Если РазрешенноеКоличествоСотрудников >= 0 Тогда
		РезультатПроверки.КоличествоСотрудниковПоТарифу = РазрешенноеКоличествоСотрудников;
		РезультатПроверки.УсловияВыполнены = КоличествоСотрудников <= РазрешенноеКоличествоСотрудников;  
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Формирует операторы схемы запросов, проверяющей наличие документов, недоступных по условиям тарифа
//
// Параметры:
//  ПакетЗапросов - ПакетЗапросовСхемыЗапроса - пакет запросов, для которого формируются операторы
//  СтрокаУсловия - СтрокаТаблицыЗначений - описание ограничений на объект, согласно условиям тарифа,
//                    см. Обработка.ФункциональностьПрограммы.НовыеУсловияДоступностиДокументовПоТарифу
//  ПараметрыЗапроса - Структура - содержит параметры запроса, который будет создан на основании полученной схемы
//
Процедура ДополнитьСхемуЗапросаДляПроверкиНаличияДокументов(ПакетЗапросов, СтрокаУсловия, ПараметрыЗапроса) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(СтрокаУсловия.ТипОбъекта);
	ПакетЗапросов.ВыбиратьРазрешенные = Истина;
	ПсевдонимТаблицы = "ДанныеДокумента";
	ПервыйОператор = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаУсловия.УсловияПроверки) Тогда
		ОператорЗапроса = ПакетЗапросов.Операторы[0];
		ОператорЗапроса.Источники.Добавить(ОбъектМетаданных.ПолноеИмя(), ПсевдонимТаблицы);
		ОператорЗапроса.ВыбираемыеПоля.Добавить("Представление(Ссылка)");
		ОператорЗапроса.ВыбираемыеПоля.Добавить("Ссылка");
		ОператорЗапроса.Отбор.Добавить("НЕ ПометкаУдаления = ИСТИНА");
	Иначе
		Для Каждого Условие Из СтрокаУсловия.УсловияПроверки Цикл
			Если Условие.ИмяОграничения = ИмяОграниченияНаЗаполненныеТабличныеЧасти() Тогда
				МаксимальныйИндекс = Условие.Значение.ВГраница();
				Для Индекс = 0 По МаксимальныйИндекс Цикл
					Если ПервыйОператор Тогда
						ОператорЗапроса = ПакетЗапросов.Операторы[0];
						ПервыйОператор = Ложь;
					Иначе
						ОператорЗапроса = ПакетЗапросов.Операторы.Добавить();
					КонецЕсли;
					
					ИмяТаблицы = Условие.Значение[Индекс];
					ОператорЗапроса.Источники.Добавить(СтрШаблон("%1.%2", ОбъектМетаданных.ПолноеИмя(), ИмяТаблицы));
					ОператорЗапроса.ВыбираемыеПоля.Добавить("Представление(Ссылка)");
					ОператорЗапроса.ВыбираемыеПоля.Добавить("Ссылка");
					ОператорЗапроса.Отбор.Добавить("НЕ Ссылка.ПометкаУдаления");
				КонецЦикла;
			ИначеЕсли Условие.ИмяОграничения = ИмяОграниченияПоРеквизитуТабличнойЧасти() Тогда
				МаксимальныйИндекс = Условие.Таблицы.ВГраница();
				Для Индекс = 0 По МаксимальныйИндекс Цикл
					Если ПервыйОператор Тогда
						ОператорЗапроса = ПакетЗапросов.Операторы[0];
						ПервыйОператор = Ложь;
					Иначе
						ОператорЗапроса = ПакетЗапросов.Операторы.Добавить();
					КонецЕсли;
					ИмяТаблицы = Условие.Таблицы[Индекс];
					ОператорЗапроса.Источники.Добавить(СтрШаблон("%1.%2", ОбъектМетаданных.ПолноеИмя(), ИмяТаблицы));
					ОператорЗапроса.ВыбираемыеПоля.Добавить("Представление(Ссылка)");
					ОператорЗапроса.ВыбираемыеПоля.Добавить("Ссылка");
					ОператорЗапроса.Отбор.Добавить("НЕ Ссылка.ПометкаУдаления");
					КоличествоПараметров = ПараметрыЗапроса.Количество();
					ИмяПараметра = СтрШаблон("Параметр%1", Формат(КоличествоПараметров + 1, "ЧГ="));
					ОператорЗапроса.Отбор.Добавить(СтрШаблон("%1 В (&%2)", Условие.Путь, ИмяПараметра));
					ПараметрыЗапроса.Вставить(ИмяПараметра, Условие.Значение);
				КонецЦикла;
			ИначеЕсли Условие.ИмяОграничения = ИмяОграниченияПоДочернемуРеквизиту() Тогда
				Если ПервыйОператор Тогда
					ОператорЗапроса = ПакетЗапросов.Операторы[0];
					ПервыйОператор = Ложь;
				Иначе
					ОператорЗапроса = ПакетЗапросов.Операторы.Добавить();
				КонецЕсли;
				ОператорЗапроса.Источники.Добавить(ОбъектМетаданных.ПолноеИмя(), ПсевдонимТаблицы);
				ОператорЗапроса.ВыбираемыеПоля.Добавить("Представление(Ссылка)");
				ОператорЗапроса.ВыбираемыеПоля.Добавить("Ссылка");
				ОператорЗапроса.Отбор.Добавить("НЕ ПометкаУдаления = ИСТИНА");
				КоличествоПараметров = ПараметрыЗапроса.Количество();
				ИмяПараметра = СтрШаблон("Параметр%1", Формат(КоличествоПараметров + 1, "ЧГ="));
				ТекстОтбора = СтрШаблон("%1.%2 В (&%3)", ПсевдонимТаблицы, Условие.Путь, ИмяПараметра);
				ОператорЗапроса.Отбор.Добавить(ТекстОтбора);
				ПараметрыЗапроса.Вставить(ИмяПараметра, Условие.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПакетЗапросов.Колонки[0].Псевдоним = "Представление";
	ПакетЗапросов.Колонки[1].Псевдоним = "Ссылка";
	
КонецПроцедуры

Функция ИмяОграниченияПоДочернемуРеквизиту() Экспорт
	
	Возврат "ПоЗначениюДочернегоРеквизита";
	
КонецФункции

Функция ИмяОграниченияНаЗаполненныеТабличныеЧасти() Экспорт
	
	Возврат "ПоНаличиюДанныхВТабличнойЧасти";
	
КонецФункции

Функция ИмяОграниченияПоРеквизитуТабличнойЧасти() Экспорт
	
	Возврат "ПоЗначениюРеквизитаТабличнойЧасти";
	
КонецФункции

Процедура УстановитьПриНеобходимостиЗначениеОпцииВыборочнаяБлокировка(ТребуемоеЗначение) Экспорт
	
	Если ПолучитьФункциональнуюОпцию(
		"ВозможнаВыборочнаяБлокировкаДокументовНедоступныхПоТарифу") <> ТребуемоеЗначение Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ВозможнаВыборочнаяБлокировкаДокументовНедоступныхПоТарифу.Установить(ТребуемоеЗначение);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификаторыТарифныхОпций

Функция ИдентификаторУслугиРегулярнаяДеятельность() Экспорт
	Возврат "РегулярнаяДеятельность";
КонецФункции

Функция ИдентификаторУслуги1СОтчетность() Экспорт
	Возврат "1C-reporting-1";
КонецФункции

Функция ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком() Экспорт
	
	Возврат "ТолькоИнтерфейсИнтеграцииСБанком";
	
КонецФункции

Функция ИдентификаторУслугиОбособленныеПодразделения() Экспорт
	Возврат "ОбособленныеПодразделения";
КонецФункции

Функция ИдентификаторУслугиОбратноеНачислениеНДС() Экспорт
	Возврат "ОбратноеНачислениеНДС";
КонецФункции

Функция ИдентификаторУслугиРасширенныйФункционал() Экспорт
	Возврат "РасширенныйФункционал";
КонецФункции

Функция ИдентификаторУслугиДополнительныйФункционал() Экспорт
	Возврат "ДополнительныйФункционал";
КонецФункции

Функция ИдентификаторУслугиВестиУчетПоОрганизациям() Экспорт
	Возврат "ВестиУчетПоОрганизациям";
КонецФункции

Функция ИдентификаторУслугиГособоронзаказ() Экспорт
	Возврат "Гособоронзаказ";
КонецФункции

Функция ИдентификаторУслугиУведомленияОКонтролируемыхСделках() Экспорт
	Возврат "УведомленияОКонтролируемыхСделках";
КонецФункции

Функция ИдентификаторУслугиУчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	Возврат "УчетЗарплатыИКадровВоВнешнейПрограмме";
КонецФункции

Функция ИдентификаторУслугиБухгалтерскийУчет() Экспорт
	
	Возврат "БухгалтерскийУчет";
	
КонецФункции

Функция ИдентификаторУслугиКадровыйУчет() Экспорт
	
	Возврат "КадровыйУчет";
	
КонецФункции

Функция ИдентификаторУслугиНачинатьРаботуСоСравненияРежимовНалогообложения() Экспорт
	
	Возврат "НачинатьРаботуСоСравненияРежимовНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиСервисРегистрации() Экспорт
	
	Возврат "СервисРегистрации";
	
КонецФункции

Функция ИдентификаторУслугиКонсультацииБухОбслуживание() Экспорт
	
	Возврат "КонсультацииБухОбслуживание";
	
КонецФункции

Функция ИдентификаторУслугиОбщаяСистемаНалогообложения()
	
	Возврат "ОбщаяСистемаНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиНДФЛИП()
	
	Возврат "НДФЛИП";
	
КонецФункции

Функция ИдентификаторУслугиУСН()
	
	Возврат "УСН";
	
КонецФункции

Функция ИдентификаторУслугиАУСН()
	
	Возврат "АУСН";
	
КонецФункции

Функция ИдентификаторУслугиПатентнаяСистемаНалогообложения()
	
	Возврат "ПатентнаяСистемаНалогообложения";
	
КонецФункции

Функция ИдентификаторУслугиНалогНаПрофессиональныйДоход()
	
	Возврат "НалогНаПрофессиональныйДоход";
	
КонецФункции

Функция ИдентификаторУслугиПолныйИнтерфейс()
	
	Возврат "ПолныйИнтерфейс";
	
КонецФункции

Функция ИдентификаторУслугиДоступноеКоличествоСотрудников()
	
	Возврат "КоличествоСотрудников";
	
КонецФункции

Функция ИдентификаторУслугиРежимОтладкиТарифа()
	
	Возврат "РежимОтладкиТарифа";
	
КонецФункции

Функция ИдентификаторУслугиСамозанятый()
	
	Возврат "Самозанятый";
	
КонецФункции

Функция ИдентификаторУслугиИндивидуальныйПредприниматель()
	
	Возврат "ИндивидуальныйПредприниматель";
	
КонецФункции

Функция ИдентификаторУслугиЮридическоеЛицо()
	
	Возврат "ЮридическоеЛицо";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТарифицируютсяСистемыНалогообложения()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или (РежимОтладки() И Не ЭтоЭТКВРазделенномРежиме());
	
КонецФункции

Функция ТарифицируетсяЧислоСотрудников()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или (РежимОтладки() И Не ЭтоЭТКВРазделенномРежиме());
	
КонецФункции

Функция ТарифицируетсяФункциональность()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или (РежимОтладки() И Не ЭтоЭТКВРазделенномРежиме());
	
КонецФункции

Функция ТарифицируютсяВидыОрганизаций()
	
	Возврат ЭтоБизнесСтартВРазделенномРежиме() Или (РежимОтладки() И Не ЭтоЭТКВРазделенномРежиме());
	
КонецФункции

Функция ЭтоБизнесСтартВРазделенномРежиме()
	
	Возврат ОбщегоНазначенияБП.ЭтоБизнесСтарт() // Это 1С:БизнесСтарт в сервисе
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() // Выполнен вход в область
		И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь); // Не администратор системы
	
КонецФункции

Функция ЭтоЭТКВРазделенномРежиме()
	
	Возврат ОбщегоНазначенияБП.ЭтоЭТК() // Это 1С:ЭТК в сервисе
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() // Выполнен вход в область
		И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь); // Не администратор системы
	
КонецФункции

Процедура УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(Разрешен)
	УчетКассовыхЧековПодотчетныхЛиц.УстановитьЗависимыеКонстантыРазрешенУчетРегулярнойДеятельности(Разрешен);
КонецПроцедуры

Функция ОграничениеКоличестваОбъектов()
	
	Если РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Тогда
		Возврат 0;
	Иначе
		Возврат 50;
	КонецЕсли;
	
КонецФункции

Функция ЦветФонаОграниченнойФункциональности()
	
	Возврат Новый Цвет(240, 240, 240);
	
КонецФункции

Процедура ПроверитьОграничениеОбъекта(Объект, Отказ)
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("НеПроверятьОграничения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.РегламентнаяОперация";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СлагаемоеНовогоОбъекта = ?(ЗначениеЗаполнено(Объект.Ссылка), 0, 1);
	
	Если Выборка.Следующий()
		И Выборка.КоличествоОбъектов + СлагаемоеНовогоОбъекта > ОграничениеКоличестваОбъектов() Тогда
		
		СообщениеДляЖурналаРегистрации = Новый Структура;
		СообщениеДляЖурналаРегистрации.Вставить("ИмяСобытия",          СобытиеЖурналаРегистрацииСообщение());
		СообщениеДляЖурналаРегистрации.Вставить("Комментарий",         Строка(Объект));
		СообщениеДляЖурналаРегистрации.Вставить("ПредставлениеУровня", "Информация");
		СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
		СообщенияДляЖурналаРегистрации.Добавить(СообщениеДляЖурналаРегистрации);
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
		Отказ = Истина;
		ВызватьИсключение ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(
			НСтр("ru='Достигнуто ограничение бесплатного тарифа.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НаложитьОграничениеНаГруппуФормы(Форма, ИмяГруппы, СпособОграничения)
	
	Элементы = Форма.Элементы;
	
	Элемент = Элементы[ИмяГруппы];
	
	Для каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ПодчиненныйЭлемент[СпособОграничения] = ?(СпособОграничения = "ТолькоПросмотр", Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	Элемент.ЦветФона = ЦветФонаОграниченнойФункциональности();
	
	ТекстПредупреждения = НСтр("ru='Эти возможности доступны на платном тарифе.'");
	ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Элемент, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьДекорациюПредупреждения(Элементы, ИмяЭлемента, Родитель, ТекстПредупреждения)
	
	Декорация =  Элементы.Найти(ИмяЭлемента);
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		
		// Декорация вставляется всегда перед первым элементом.
		Если Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ПервыйЭлементРодителя = Родитель.ПодчиненныеЭлементы[0];
		Иначе
			ПервыйЭлементРодителя = Неопределено;
		КонецЕсли;
		
		Декорация = Элементы.Вставить(
			ИмяЭлемента,
			Тип("ДекорацияФормы"),
			Родитель,
			ПервыйЭлементРодителя);
			
	КонецЕсли;
	
	Декорация.Заголовок = ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(ТекстПредупреждения);
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииСообщение()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Достигнуто ограничение по количеству объектов'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ТарификацияБПКлиентСервер.ГруппаСобытийЖурналаРегистрации());
	
КонецФункции

Функция НовыйРезультатПроверкиУсловийТарификацииПоСотрудникам()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("УсловияВыполнены", Истина);
	РезультатПроверки.Вставить("КоличествоСотрудниковПоТарифу", 0);
	РезультатПроверки.Вставить("ТекущееКоличествоСотрудников", 0);
	
	Возврат РезультатПроверки;
	
КонецФункции 

Функция РазместитьГруппуОграничениеТарифа(Элементы)
	
	Если Элементы.Найти("ГруппаБыстрыеОтборы") <> Неопределено Тогда
		Фон = Элементы.Вставить(
			"ГруппаОграничениеТарифа",
			Тип("ГруппаФормы"), ,
			ВерхнийРодительЭлементаФормы(Элементы.ГруппаБыстрыеОтборы));
	Иначе
		Фон = Элементы.Вставить(
			"ГруппаОграничениеТарифа",
			Тип("ГруппаФормы"), ,
			Элементы.Список);
	КонецЕсли;
	
	Фон.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	Фон.ЦветФона            = ЦветаСтиля.ЦветФонаНедоступногоСервиса;
	Фон.ОтображатьЗаголовок = Ложь;
	
	Возврат Фон;
	
КонецФункции

Функция ВерхнийРодительЭлементаФормы(ЭлементФормы)
	
	Если Тип(ЭлементФормы.Родитель) = Тип("ГруппаФормы") Тогда
		Возврат ВерхнийРодительЭлементаФормы(ЭлементФормы.Родитель);
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

Функция ПроверкаДоступностиПройдена(СтрокаОграничений, ПроверяемыйДокумент)
	
	ПроверяетсяСсылка = ОбщегоНазначения.ЗначениеСсылочногоТипа(ПроверяемыйДокумент);
	Если Не ЗначениеЗаполнено(СтрокаОграничений.УсловияПроверки) Тогда
		// Объект недоступен без дополнительных условий
		Возврат Ложь;
	ИначеЕсли ПроверяетсяСсылка И Не ЗначениеЗаполнено(ПроверяемыйДокумент) Или ПроверяемыйДокумент = Неопределено Тогда
		// Поскольку ссылка отсутствует, проверку условий пропускаем, т.к. в данном случае проверяется форма списка, либо
		// форма нового объекта, данные которого не заполнены
		Возврат Истина;
	КонецЕсли;
	
	Если ПроверяетсяСсылка Тогда
		Результат = ПройденаПроверкаДоступностиПоСсылке(СтрокаОграничений, ПроверяемыйДокумент);
	Иначе
		Результат = ПройденаПроверкаДоступностиОбъекта(СтрокаОграничений, ПроверяемыйДокумент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПройденаПроверкаДоступностиПоСсылке(СтрокаОграничений, Ссылка)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Ссылка", Ссылка);
	ДополнитьСхемуЗапросаДляПроверкиНаличияДокументов(ПакетЗапросов, СтрокаОграничений, ПараметрыЗапроса);
	Для Каждого Оператор Из ПакетЗапросов.Операторы Цикл
		Оператор.Отбор.Добавить("Ссылка = &Ссылка");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ЭлементПараметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ЭлементПараметр.Ключ, ЭлементПараметр.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПройденаПроверкаДоступностиОбъекта(СтрокаОграничений, ПроверяемыйДокумент)
	
	Результат = Истина;
	Для Каждого Условие Из СтрокаОграничений.УсловияПроверки Цикл
		Если Условие.ИмяОграничения = ИмяОграниченияПоДочернемуРеквизиту() Тогда
			Результат = РезультатПроверкиПоРеквизиту(ПроверяемыйДокумент, Условие);
		ИначеЕсли Условие.ИмяОграничения = ИмяОграниченияНаЗаполненныеТабличныеЧасти() Тогда
			Результат = РезультатПроверкиНаЗаполненнуюТабличнуюЧасть(ПроверяемыйДокумент, Условие);
		ИначеЕсли Условие.ИмяОграничения = ИмяОграниченияПоРеквизитуТабличнойЧасти() Тогда
			Результат = РезультатПроверкиПоРеквизитуТабличнойЧасти(ПроверяемыйДокумент, Условие);
		КонецЕсли;
		Если Не Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиПоРеквизиту(ПроверяемыйДокумент, Условие)
	
	СоставныеЧастиПути = СтрРазделить(Условие.Путь, ".");
	Если СоставныеЧастиПути.Количество() = 1 Тогда
		ПроверяемоеЗначение = ПроверяемыйДокумент[Условие.Путь];
	Иначе
		ЗначениеРеквизита = ПроверяемыйДокумент[СоставныеЧастиПути[0]];
		СоставныеЧастиПути.Удалить(0);
		Путь = СтрСоединить(СоставныеЧастиПути, ".");
		ПроверяемоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, Путь);
	КонецЕсли;
	РезультатПроверки = Условие.Значение.Найти(ПроверяемоеЗначение) = Неопределено;
	Возврат РезультатПроверки;
	
КонецФункции

Функция РезультатПроверкиНаЗаполненнуюТабличнуюЧасть(ПроверяемыйДокумент, Условие)
	
	ПроверкаПройденаУспешно = Истина;
	Для Каждого ИмяТаблицы Из Условие.Значение Цикл
		Если ЗначениеЗаполнено(ПроверяемыйДокумент[ИмяТаблицы]) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РезультатПроверкиПоРеквизитуТабличнойЧасти(ПроверяемыйДокумент, Условие)
	
	СоставныеЧастиПутиКРеквизиту = СтрРазделить(Условие.Путь, ".");
	ПроверяемыеЗначения = Новый Массив;
	Для Каждого ИмяТаблицы Из Условие.Таблицы Цикл
		ВыгруженныеЗначения = ПроверяемыйДокумент[ИмяТаблицы].ВыгрузитьКолонку(СоставныеЧастиПутиКРеквизиту[0]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеЗначения, ВыгруженныеЗначения, Истина);
	КонецЦикла;
	Если СоставныеЧастиПутиКРеквизиту.Количество() > 1 Тогда
		СоставныеЧастиПутиКРеквизиту.Удалить(0);
		Путь = СтрСоединить(СоставныеЧастиПутиКРеквизиту, ".");
		ПроверяемыеЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПроверяемыеЗначения, Путь, Истина);
	КонецЕсли;
	Для Каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
		Если Условие.Значение.Найти(ПроверяемоеЗначение.Значение) <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПереходНаПлатныйТариф

Процедура ПолучитьКонтактныйТелефонВФоне(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат");
	СтруктураРезультата.Вставить("Телефон", "");
	
	Прокси = ПроксиВебСервиса();
	
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Телефон = "";
	Результат = Неопределено;
	
	Попытка
		Результат = Прокси.GetContactPhone(РазделительСеанса, КлючОбласти, Телефон);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	СтруктураРезультата.Телефон   = Телефон;
	СтруктураРезультата.Результат = Результат;
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресРезультата);
	
КонецПроцедуры

Процедура ЗапросНаСменуТарифа(ПараметрыЗапроса, АдресРезультата = Неопределено) Экспорт
	
	Прокси = ПроксиВебСервиса();
	
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	
	Попытка
		
		Результат = Прокси.SwitchTariffReq(
			РазделительСеанса,
			КлючОбласти,
			ПараметрыЗапроса.Телефон,
			ПараметрыЗапроса.ИНН
			);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ТарификацияБП'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПроксиВебСервиса()
	
	Адрес        = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса() + "/ws/PrivateAPI?wsdl";
	Пользователь = РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	Пароль       = РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	
	Определения             = Новый WSОпределения(Адрес, Пользователь, Пароль);
	ПространствоИменСервиса = "http://www.1c.ru/1cFresh/PrivateAPI/1.0";
	Прокси                  = Новый WSПрокси(Определения, ПространствоИменСервиса, "PrivateAPI", "PrivateAPISoap");
	Прокси.Пользователь     = Пользователь;
	Прокси.Пароль           = Пароль;
	Возврат Прокси;
	
КонецФункции

#КонецОбласти

#Область Тарификация

Функция БезлимитнаяУслугаСервисаДоступна(ИдентификаторУслуги)
	
	Если РежимОтладки() Тогда 
		Возврат РежимОтладки_УслугаДоступна(ИдентификаторУслуги);
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда 
		Возврат ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторУслуги);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторУслуги)
	
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	
КонецФункции

Функция БезлимитнаяНегативнаяУслугаСервисаДоступна(ИдентификаторУслуги)
	
	Если РежимОтладки() Тогда 
		Возврат РежимОтладки_УслугаДоступна(ИдентификаторУслуги);
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда 
		Возврат ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги(ИдентификаторУслуги);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗарегистрированаЛицензияБезлимитнойНегативнойУслуги(ИдентификаторУслуги)
	
	// Для "позитивной" услуги (т.е. услуга, которая разрешает что-то, если она доступна у пользователя),
	// если она не тарифицируется в менедежере сервиса, то считается, что услуга доступна.
	// См.Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги.
	// Т.е. если "позитивная" услуга не тарифицируется, то считается, что она есть у всех пользователей.
	// Для "негативной" услуги (т.е. услуга, которая запрещает что-то, если она доступна у пользователя)
	// если она не тарифицируется, то нужно считать, что услуги нет и ничего не запрещать.
	// Т.к. БТС такое поведение не поддерживает, то нужно проверить тарифицируемость услуги самостоятельно,
	// и вернуть Ложь, если услуга не тарифицируется.
	
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Услуга = Тарификация.УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ПоставщикУслуг, Ложь);
	Если Услуга = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УслугаТарифицируется = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "Тарифицируется");
	Если Не УслугаТарифицируется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	
КонецФункции

Функция ИдентификаторПоставщикаУслугБухгалтерияПредприятия()
	
	Возврат "БухгалтерияПредприятия";
	
КонецФункции

Функция КоличествоЛицензийУслугиФункциональности(ИдентификаторУслуги) Экспорт
	
	Попытка
		ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
		Возврат Тарификация.КоличествоЛицензийУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги);
	Исключение
		// Записывать ошибку в журнал не требуется, она и так записывается в Тарификация.КоличествоЛицензийУникальнойУслуги.
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция КоличествоЛицензийЛимитированнойУслуги(ИдентификаторУслуги) Экспорт
	
	ИдентификаторПоставщика = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.КоличествоЛицензийЛимитированнойУслуги(ИдентификаторПоставщика, ИдентификаторУслуги);
	
КонецФункции

Функция ЗарегистрированаЛицензияУслугиФункциональности(ИдентификаторУслуги) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗарегистрированаЛицензияУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии);
	
КонецФункции

Функция ЗанятьЛицензиюУслугиФункциональности(ИдентификаторУслуги, УникальныйИдентификаторОперации) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ЗанятьЛицензиюУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии, УникальныйИдентификаторОперации);
	
КонецФункции

Функция ОсвободитьЛицензиюУслугиФункциональности(ИдентификаторУслуги, УникальныйИдентификаторОперации) Экспорт
	
	ИмяЛицензии = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
	ПоставщикУслуг = ИдентификаторПоставщикаУслугБухгалтерияПредприятия();
	Возврат Тарификация.ОсвободитьЛицензиюУникальнойУслуги(ПоставщикУслуг, ИдентификаторУслуги, ИмяЛицензии, УникальныйИдентификаторОперации);
	
КонецФункции

// Проверяет, доступна ли услуга функциональности в режиме сервиса
//
// Параметры:
//  ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе
// 
// Возвращаемое значение:
//  Булево - результат проверки (Истина = услуга доступна)
Функция УслугаФункциональностиСервисаДоступа(ИдентификаторУслуги) Экспорт
	
	Если РежимОтладки() Тогда 
		Возврат РежимОтладки_УслугаДоступна(ИдентификаторУслуги);
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда 
		Возврат ЗарегистрированаЛицензияУслугиФункциональности(ИдентификаторУслуги);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РежимОтладки_УслугаДоступна(ИмяУслуги)
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	МассивПараметров = СтрРазделить(ПараметрЗапускаПриложения, " ");
	
	Для Каждого ОписаниеТарифа Из РежимОтладки_ОписаниеТарифов() Цикл
		ИмяПараметра = ПрефиксПараметраОтладки() + ОписаниеТарифа.Ключ;
		Если МассивПараметров.Найти(ИмяПараметра) <> Неопределено 
			И ОписаниеТарифа.Значение.Свойство(ИмяУслуги) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РежимОтладки_ПараметрЛимитированнойУслуги(ИмяУслуги)
	
	ПараметрУслуги = 0;
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	МассивПараметров = СтрРазделить(ПараметрЗапускаПриложения, " ");
	
	Для Каждого ОписаниеТарифа Из РежимОтладки_ОписаниеТарифов() Цикл
		ИмяПараметра = ПрефиксПараметраОтладки() + ОписаниеТарифа.Ключ;
		Если МассивПараметров.Найти(ИмяПараметра) <> Неопределено Тогда 
			Если ОписаниеТарифа.Значение.Свойство(ИмяУслуги) Тогда 
				ЗначениеПараметра = ОписаниеТарифа.Значение[ИмяУслуги];
				Если ЗначениеПараметра = -1 Тогда 
					Возврат ЗначениеПараметра; // -1 - не ограничено
				КонецЕсли;
				ПараметрУслуги = Макс(ПараметрУслуги, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрУслуги;
	
КонецФункции

Функция РежимОтладки_ОписаниеТарифов()
	
	ШаблонОграниченийТарифов = Новый Структура;
	ШаблонОграниченийТарифов.Вставить(ИдентификаторУслугиБухгалтерскийУчет());
	ШаблонОграниченийТарифов.Вставить(ИдентификаторУслугиПатентнаяСистемаНалогообложения());
	ШаблонОграниченийТарифов.Вставить(ИдентификаторУслугиНалогНаПрофессиональныйДоход());
	ШаблонОграниченийТарифов.Вставить(ИдентификаторУслугиСамозанятый());
	ШаблонОграниченийТарифов.Вставить(ИдентификаторУслугиИндивидуальныйПредприниматель());
	
	ТарифЭТК = Новый Структура;
	ТарифЭТК.Вставить(ИдентификаторУслугиКадровыйУчет());
	
	ТарифИнтеграцияСБанком = Новый Структура;
	ТарифИнтеграцияСБанком.Вставить(ИдентификаторУслугиТолькоИнтерфейсИнтеграцииСБанком());
	ТарифИнтеграцияСБанком.Вставить(ИдентификаторУслугиУСН());
	ТарифИнтеграцияСБанком.Вставить(ИдентификаторУслугиИндивидуальныйПредприниматель());
	
	ТарифНулевка = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонОграниченийТарифов);
	ТарифНулевка.Вставить(ИдентификаторУслугиУСН());
	ТарифНулевка.Вставить(ИдентификаторУслугиОбщаяСистемаНалогообложения());
	ТарифНулевка.Вставить(ИдентификаторУслугиДополнительныйФункционал());
	ТарифНулевка.Вставить(ИдентификаторУслугиНДФЛИП());
	ТарифНулевка.Вставить(ИдентификаторУслугиЮридическоеЛицо());
	
	ТарифАУСН = Новый Структура;
	ТарифАУСН.Вставить(ИдентификаторУслугиБухгалтерскийУчет());
	ТарифАУСН.Вставить(ИдентификаторУслугиРегулярнаяДеятельность());
	ТарифАУСН.Вставить(ИдентификаторУслугиДополнительныйФункционал());
	ТарифАУСН.Вставить(ИдентификаторУслугиАУСН());
	ТарифАУСН.Вставить(ИдентификаторУслугиИндивидуальныйПредприниматель());
	ТарифАУСН.Вставить(ИдентификаторУслугиЮридическоеЛицо());
	
	ТарифСамозанятыеИПатентБезСотрудников = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонОграниченийТарифов);
	ТарифСамозанятыеИПатентБезСотрудников.Вставить(ИдентификаторУслугиРегулярнаяДеятельность());
	ТарифСамозанятыеИПатентБезСотрудников.Вставить(ИдентификаторУслугиАУСН());
	
	ТарифИПБезСотрудников = ОбщегоНазначения.СкопироватьРекурсивно(ТарифСамозанятыеИПатентБезСотрудников);
	ТарифИПБезСотрудников.Вставить(ИдентификаторУслугиУСН());
	ТарифИПБезСотрудников.Вставить(ИдентификаторУслугиДополнительныйФункционал());
	
	ТарифУСНИПатентССотрудниками = ОбщегоНазначения.СкопироватьРекурсивно(ТарифИПБезСотрудников);
	ТарифУСНИПатентССотрудниками.Вставить(ИдентификаторУслугиДоступноеКоличествоСотрудников(), 25);
	ТарифУСНИПатентССотрудниками.Вставить(ИдентификаторУслугиЮридическоеЛицо());
	
	ТарифОСН = ОбщегоНазначения.СкопироватьРекурсивно(ТарифУСНИПатентССотрудниками);
	ТарифОСН.Вставить(ИдентификаторУслугиОбщаяСистемаНалогообложения());
	ТарифОСН.Вставить(ИдентификаторУслугиНДФЛИП());
	
	ТарифБазовый = ОбщегоНазначения.СкопироватьРекурсивно(ТарифОСН);
	ТарифБазовый.Вставить(ИдентификаторУслугиПолныйИнтерфейс());
	ТарифБазовый.Вставить(ИдентификаторУслугиДоступноеКоличествоСотрудников(), -1);
	
	ТарифПроф = ОбщегоНазначения.СкопироватьРекурсивно(ТарифБазовый);
	ТарифПроф.Вставить(ИдентификаторУслугиВестиУчетПоОрганизациям());
	
	СоставТарифов = Новый Структура;
	СоставТарифов.Вставить("ЭТК", ТарифЭТК);
	СоставТарифов.Вставить("ИнтеграцияСБанком", ТарифИнтеграцияСБанком);
	СоставТарифов.Вставить("Нулевка", ТарифНулевка);
	СоставТарифов.Вставить("АУСН", ТарифАУСН);
	СоставТарифов.Вставить("СамозанятыеИПатентБезСотрудников", ТарифСамозанятыеИПатентБезСотрудников);
	СоставТарифов.Вставить("ИПБезСотрудников", ТарифИПБезСотрудников);
	СоставТарифов.Вставить("УСНИПатентССотрудниками", ТарифУСНИПатентССотрудниками);
	СоставТарифов.Вставить("ОСН", ТарифОСН);
	СоставТарифов.Вставить("Базовый", ТарифБазовый);
	СоставТарифов.Вставить("Проф", ТарифПроф);
	
	Возврат СоставТарифов;
	
КонецФункции

Функция ПрефиксПараметраОтладки()
	
	Возврат "ОтладкаТарифа";
	
КонецФункции

#КонецОбласти

#Область ТарификацияФункциональности

Функция УстановитьРазрешенныйРежимКомандногоИнтерфейса() Экспорт
	
	Если ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс() И Не РазрешенПолныйИнтерфейс() Тогда
		
		Если РазрешенТолькоИнтерфейсИнтеграцииСБанком() Тогда
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсИнтеграцииСБанком");
		ИначеЕсли РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек() Тогда
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсЭлектронныхТрудовыхКнижек");
		Иначе
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТаксиПростой");
		КонецЕсли;
		
		Обработки.ФункциональностьПрограммы.УстановитьФункциональностьПоОпцииРазрешенПолныйИнтерфейс();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФункциональностьОграничиваетсяТарифом() Экспорт
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		Или ОбщегоНазначения.РежимОтладки() Тогда
		
		// Этот метод может вызываться и при создании через OData, а OData не предоставляет доступ к общим константам.
		// Поэтому выполним этот метод в привилегированном режиме. В возвращаемых данных нет ничего секретного,
		// и особо управлять правами доступа на константу не стоит.
		УстановитьПривилегированныйРежим(Истина);
		Возврат Константы.ФункциональностьОграничиваетсяТарифом.Получить();
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДоступностьИспользуемыхСистемНалогообложения()
	
	ЗначенияОпций = Новый Структура;
	ЗначенияОпций.Вставить("ИспользуетсяЕНВД", РазрешенЕНВД());
	ЗначенияОпций.Вставить("ИспользуетсяНалогНаПрофессиональныйДоход", РазрешенНалогНаПрофессиональныйДоход());
	ЗначенияОпций.Вставить("ИспользуетсяНДФЛИП", РазрешенНДФЛИП());
	ЗначенияОпций.Вставить("ИспользуетсяОСНО", РазрешенаОбщаяСистемаНалогообложения());
	ЗначенияОпций.Вставить("ИспользуетсяУСН", РазрешенаУСН());
	ЗначенияОпций.Вставить("ИспользуетсяУСНПатент", РазрешенаПатентнаяСистемаНалогообложения());
	ЗначенияОпций.Вставить("ИспользуетсяАУСН", РазрешенаАУСН());
	
	Возврат ЗначенияОпций;
	
КонецФункции

Процедура ПроверитьТарифыОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументДоступенПоУсловиямТарифа(ТипЗнч(Источник.Ссылка), Источник) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиУсловийТарифа = РезультатПроверкиУсловийТарифа();
		
	Если РезультатПроверкиУсловийТарифа.ЕстьНедоступнаяФункциональность
		Или РезультатПроверкиУсловийТарифа.ЕстьНедоступнаяСистемаНалогообложения
		Или РезультатПроверкиУсловийТарифа.ЕстьНедоступныйВидОрганизации Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиУсловийТарифа.СообщениеНарушениеУсловийТарифа,
			Источник.Ссылка,
			,
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ТарификацияПроверкаОтменыПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	ОтменитьПроверку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Источник.ДополнительныеСвойства, "УдаляетсяНедоступнаяФункциональность", Ложь);
		
	Если ОтменитьПроверку = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументДоступенПоУсловиямТарифа(ТипЗнч(Источник.Ссылка), Источник) Тогда
		Возврат;
	КонецЕсли;
	 
	РезультатПроверкиУсловийТарифа = РезультатПроверкиУсловийТарифа();
		
	Если РезультатПроверкиУсловийТарифа.ЕстьНедоступнаяФункциональность
		Или РезультатПроверкиУсловийТарифа.ЕстьНедоступнаяСистемаНалогообложения
		Или РезультатПроверкиУсловийТарифа.ЕстьНедоступныйВидОрганизации Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиУсловийТарифа.СообщениеНарушениеУсловийТарифа,
			Источник.Ссылка,
			,
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиУсловийТарифа() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьНедоступнаяФункциональность", Ложь);
	РезультатПроверки.Вставить("ЕстьНедоступнаяСистемаНалогообложения", Ложь);
	РезультатПроверки.Вставить("ЕстьНедоступныйВидОрганизации", Ложь);
	РезультатПроверки.Вставить("СообщениеНарушениеУсловийТарифа", "");
	
	ЕстьНедоступнаяФункциональность = ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяФункциональность();
	ЕстьНедоступнаяСистемаНалогообложения =
		ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяСистемаНалогообложения();
	ЕстьНедоступныйВидОрганизации = 
		ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступныйВидОрганизации();
	
	ТекстСообщения = Новый Массив;
	
	Если ЕстьНедоступныйВидОрганизации Тогда
		
		ПредставлениеВидовОрганизаций = 
			Справочники.Организации.ПредставленияИспользуемыхВидовОрганизацийБезТарифа();
		
		ТекстСообщения.Добавить(СтрШаблон(
			НСтр("ru = 'На текущем тарифе учет %1 недоступен.'"), ПредставлениеВидовОрганизаций));
		ТекстСообщения.Добавить(" ");
		ТекстСообщения.Добавить(НСтр("ru = 'Возможность проведения документов заблокирована.'"));
		ТекстСообщения.Добавить(Символы.ПС);
		
		ПредставленияДоступныхИзменений = 
			Справочники.Организации.ПредставленияДоступныхИзмененийИспользуемыхВидовОрганизацийБезТарифа();
		
		Если Не ПустаяСтрока(ПредставленияДоступныхИзменений) Тогда
			ТекстСообщения.Добавить(НСтр("ru = 'Чтобы восстановить возможность проведения документов,'"));
			ТекстСообщения.Добавить(" ");
			ТекстСообщения.Добавить(ПредставленияДоступныхИзменений);
			ТекстСообщения.Добавить(".");
			ТекстСообщения.Добавить(Символы.ПС);
		КонецЕсли;
		
		ТекстСообщения.Добавить(СтрШаблон(
			НСтр("ru = 'Если вам нужен учет %1, перейдите на другой тариф.'"),
			ПредставлениеВидовОрганизаций));
		ТекстСообщения.Добавить(Символы.ПС);
		
	КонецЕсли;
	
	Если ЕстьНедоступнаяСистемаНалогообложения Тогда
		
		СистемыНалогообложения = 
			РегистрыСведений.НастройкиСистемыНалогообложения.ПредставлениеИспользуемыхСистемНалогообложения(ТекущаяДатаСеанса());
		Если СистемыНалогообложения.Количество() > 1 Тогда
			ТекстИсключения = СтрШаблон(НСтр("ru='Системы налогообложения %1 не входят в используемый тариф.
				|Изменить систему налогообложения и восстановить возможность проведения документов можно в ""Настройках налогов и отчетов"".'"),
				СтрСоединить(СистемыНалогообложения, ", "));
		Иначе
			ТекстИсключения = СтрШаблон(НСтр("ru='Система налогообложения %1 не входит в используемый тариф.
				|Изменить систему налогообложения и восстановить возможность проведения документов можно в ""Настройках налогов и отчетов"".'"),
				СтрСоединить(СистемыНалогообложения, ", "));
		КонецЕсли;
		ТекстСообщения.Добавить(ТекстИсключения);
		ТекстСообщения.Добавить(Символы.ПС);
	КонецЕсли;
		
	Если ЕстьНедоступнаяФункциональность Тогда
		
		ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
		НедоступнаяФункциональность = Обработки.ФункциональностьПрограммы.ВключеннаяНедоступнаяФункциональность(
			ОписаниеФункциональности);
			
		ТекстСообщения.Добавить(НСтр(
			"ru='В программе используется функциональность, которая не входит в ваш текущий тариф.
			|Чтобы включить проведение документов, обратитесь в обслуживающую организацию для подключения тарифа с опцией ""Полный интерфейс"".'"));
		Если Не ВозможнаВыборочнаяБлокировка() Тогда
			ТекстСообщения.Добавить(Символы.ПС);
			ТекстСообщения.Добавить(НСтр(
				"ru='Чтобы продолжить работу на текущем тарифе, отключите в разделе ""Настройки - Функциональность"" недоступную функциональность:'"));
		
			Для Каждого Функциональность Из НедоступнаяФункциональность Цикл
				СвойстваФункциональности = ОписаниеФункциональности.Найти(Функциональность.Ключ, "Имя");
				ТекстСообщения.Добавить(Символы.ПС);
				ТекстСообщения.Добавить(СтрШаблон(НСтр("ru = ' - %1'"), СвойстваФункциональности.Заголовок));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаСообщения = "";
	Если ТекстСообщения.Количество() > 0 Тогда
		СтрокаСообщения = СтрСоединить(ТекстСообщения);
	КонецЕсли;
	
	РезультатПроверки.ЕстьНедоступнаяФункциональность = ЕстьНедоступнаяФункциональность;
	РезультатПроверки.ЕстьНедоступнаяСистемаНалогообложения = ЕстьНедоступнаяСистемаНалогообложения;
	РезультатПроверки.ЕстьНедоступныйВидОрганизации = ЕстьНедоступныйВидОрганизации;
	РезультатПроверки.СообщениеНарушениеУсловийТарифа = СтрокаСообщения;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти
