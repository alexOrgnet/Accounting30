#Область ПрограммныйИнтерфейс

// Создает новый договор контрагента и устанавливает его основным договором контрагента
// Название договора "Без договора".
//
// Параметры:
// ПараметрыСоздания - Структура - Параметры заполнения нового договора.
//
// Возвращаемое значение:
// СправочникСсылка.ДоговорыКонтрагентов - ссылка на созданный элемент справочника ДоговорыКонтрагентов
// или неопределено, если не удалось создать элемент справочника
Функция СоздатьОсновнойДоговорКонтрагента(Знач ПараметрыСоздания) Экспорт
	
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		НовыйОбъект.Заполнить(ПараметрыСоздания.ЗначенияЗаполнения);
	КонецЕсли;
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора
		// записать предупреждение в журнал регистрации
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ДоговорыКонтрагентов, 
			НовыйОбъект.Ссылка,
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка);
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция ВестиУчетПоДоговорам() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");

КонецФункции

Функция СтавкаБезНДС(СтавкаНДС) Экспорт

	Возврат НЕ СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;

КонецФункции

// Возвращает единственный доступный вид операции документа по договору контрагента
//
// Параметры:
//   ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор
//   ТипДокумента - Тип - тип ссылки на документ
//
// Возвращаемое значение:
//   - ПеречислениеСсылка.ВидыОперацийРКО, ПеречислениеСсылка.ВидыОперацийПКО,
//     ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств,
//     ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств,
//     ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой,
//     ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг,
//     ПеречислениеСсылка.ВидыОперацийРеализацияТоваров,
//     ПеречислениеСсылка.ВидыОперацийВозвратТоваровПоставщику,
//     ПеречислениеСсылка.ВидыОперацийВозвратТоваровОтПокупателя,
//     ПеречислениеСсылка.ВидыОперацийПередачаТоваров - вид операции документа.
//   - Неопределено - если вид операции документа не найден или не единственный
Функция ВидОперацииПоДоговору(ДоговорКонтрагента, ТипДокумента) Экспорт
	
	СвойстваДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(СвойстваДоговора.ВидДоговора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыОпераций = ВидыОперацийДокумента(
		СвойстваДоговора.ВидДоговора, ТипДокумента);
		
	Если ВидыОпераций.Количество() = 1 Тогда
		Возврат ВидыОпераций[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает виды договоров контрагентов по виду операции документа.
//
// Параметры:
//   ВидОперации - ПеречислениеСсылка.ВидыОперацийРКО, ПеречислениеСсылка.ВидыОперацийПКО,
//                 ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств,
//                 ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств,
//                 ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой,
//                 ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг,
//                 ПеречислениеСсылка.ВидыОперацийРеализацияТоваров,
//                 ПеречислениеСсылка.ВидыОперацийВозвратТоваровПоставщику,
//                 ПеречислениеСсылка.ВидыОперацийВозвратТоваровОтПокупателя,
//                 ПеречислениеСсылка.ВидыОперацийПередачаТоваров.
//   ТипДокумента - Тип - тип ссылки на документ.
//   ТолькоРазрешенные - Булево - если Истина, то исключаются виды договоров, недоступные по функциональным опциям
//
// Возвращаемое значение:
//   Массив - массив видов договоров
Функция ВидыДоговоровДокумента(ВидОперации, Знач ТипДокумента = Неопределено, ТолькоРазрешенные = Истина) Экспорт
	
	ДоступныеВидыДоговоров = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат ДоступныеВидыДоговоров;
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Тогда
		ТипДокумента = ТипДокументаСДоговоромПоВидуОперации(ВидОперации);
	КонецЕсли;
	
	ВидыДоговоровДокумента = ВидыДоговоровПоВидамОпераций(ТипДокумента);
	ВидыДоговоровПоВидуОперации = ВидыДоговоровДокумента[ВидОперации];
	
	Если ВидыДоговоровПоВидуОперации = Неопределено Тогда
		Возврат ДоступныеВидыДоговоров;
	КонецЕсли;
	
	Если Не ТолькоРазрешенные Тогда
		Возврат ВидыДоговоровПоВидуОперации;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("Отбор, СтрокаПоиска", Новый Структура, "");
	ВидыДоговоров = Перечисления.ВидыДоговоровКонтрагентов.ПолучитьСписокДоступныхЗначений(ВидыДоговоровПоВидуОперации);
	ДоступныеВидыДоговоров = ВидыДоговоров.ВыгрузитьЗначения();
	
	Возврат ДоступныеВидыДоговоров;
	
КонецФункции

// Возвращает виды операций документа, отобранные по виду договора контрагента.
//
// Параметры:
//   ВидДоговора - ПеречислениеСсылка.ВидыДоговоровКонтрагентов - вид договора контрагента
//   ТипДокумента - Тип - тип ссылки на документ
//   ТолькоРазрешенные - Булево - если Истина, то исключаются виды операций, недоступные по функциональным опциям
//
// Возвращаемое значение:
//   Массив - массив видов операций
Функция ВидыОперацийДокумента(ВидДоговора, ТипДокумента, ТолькоРазрешенные = Истина) Экспорт
	
	ДоступныеВидыОпераций = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат ДоступныеВидыОпераций;
	КонецЕсли;
	
	ВидыДоговоровДокумента = ВидыДоговоровПоВидамОпераций(ТипДокумента);
	ВидыОперацийПоВидуДоговора = Новый Массив;
	
	Для Каждого ВидыДоговоровПоВидуОперации Из ВидыДоговоровДокумента Цикл
		Если ВидыДоговоровПоВидуОперации.Значение.Найти(ВидДоговора) <> Неопределено Тогда
			ВидыОперацийПоВидуДоговора.Добавить(ВидыДоговоровПоВидуОперации.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыОперацийПоВидуДоговора.Количество() = 0
		Или Не ТолькоРазрешенные Тогда
		Возврат ВидыОперацийПоВидуДоговора;
	КонецЕсли;
	
	ОбъектДокумента = Новый(ТипДокумента);
	ВидОперацииМенеджер = Перечисления[ОбъектДокумента.ВидОперации.Метаданные().Имя];
	ПараметрыВыбора = Новый Структура("Отбор, СтрокаПоиска", Новый Структура, "");
	ВидыОпераций = ВидОперацииМенеджер.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ВидОперации Из ВидыОпераций Цикл
		Если ВидыОперацийПоВидуДоговора.Найти(ВидОперации.Значение) <> Неопределено Тогда
			ДоступныеВидыОпераций.Добавить(ВидОперации.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеВидыОпераций;
	
КонецФункции

// Определяет документ с договором контрагента, зависимым от вида операции
//
// Параметры:
//   ТипДокумента - Тип - тип ссылки на документ
//
// Возвращаемое значение:
//   Булево - Истина, если документ содержит зависимые реквизиты ДоговорКонтрагента и ВидОперации
Функция ЭтоДокументСДоговоромПоВидуОперации(ТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыДокументов = ТипыДокументовСДоговоромПоВидуОперации();
	Возврат ТипыДокументов[ТипДокумента] <> Неопределено;
	
КонецФункции

// Создает договор контрагента с новым номером
//
// Параметры:
//   ПараметрыСоздания - Структура - параметры заполнения нового договора
//
// Возвращаемое значение:
//   - СправочникСсылка.ДоговорыКонтрагентов - ссылка на созданный договор
//   - Неопределено, если не удалось создать элемент справочника
Функция СоздатьДоговорКонтрагентаСНумерацией(Знач ПараметрыСоздания) Экспорт
	
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		НовыйОбъект.Заполнить(ПараметрыСоздания.ЗначенияЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйОбъект.СтавкаНДС) Тогда
		ЭтоПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(НовыйОбъект.Организация, ТекущаяДатаСеанса());
		
		НовыйОбъект.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
			?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ОбщегоНазначения.ТекущаяДатаПользователя()),
			ЭтоПлательщикНДС);
	КонецЕсли;
	
	Справочники.ДоговорыКонтрагентов.УстановитьНомерДоговораСПокупателем(НовыйОбъект);
	
	НовыйОбъект.Наименование = ПечатьДоговоровКлиентСервер.РеквизитыДоговораСтрокой(НовыйОбъект.Номер, НовыйОбъект.Дата);
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора
		// записать предупреждение в журнал регистрации
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ДоговорыКонтрагентов, 
			НовыйОбъект.Ссылка,
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидыДоговоровПоВидамОпераций(ТипДокумента = Неопределено)
	
	ВидыДоговоров = Новый Соответствие();
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ДополнитьВидыДоговоровРКО(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДополнитьВидыДоговоровПКО(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		Или ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ДополнитьВидыДоговоровСписаниеСРасчетногоСчета(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ДополнитьВидыДоговоровПоступлениеНаРасчетныйСчет(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		ДополнитьВидыДоговоровОплатаПлатежнойКартой(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДополнитьВидыДоговоровПоступлениеТоваровУслуг(ВидыДоговоров);
	КонецЕсли;
		
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДополнитьВидыДоговоровРеализацияТоваровУслуг(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ДополнитьВидыДоговоровВозвратТоваровПоставщику(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ДополнитьВидыДоговоровВозвратТоваровОтПокупателя(ВидыДоговоров);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ДополнитьВидыДоговоровПередачаТоваров(ВидыДоговоров);
	КонецЕсли;
	
	Возврат ВидыДоговоров;
	
КонецФункции

Процедура ДополнитьВидыДоговоровРКО(ВидыДоговоров)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику"), СПоставщиком);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю"), СПокупателем);
	
КонецПроцедуры

Процедура ДополнитьВидыДоговоровПКО(ВидыДоговоров)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя"), СПокупателем);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам"), Прочее);
	ВидыДоговоров.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика"), СПоставщиком);
	
КонецПроцедуры

Процедура ДополнитьВидыДоговоровСписаниеСРасчетногоСчета(ВидыДоговоров)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику"), СПоставщиком);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю"), СПокупателем);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц"), Прочее);

КонецПроцедуры

Процедура ДополнитьВидыДоговоровПоступлениеНаРасчетныйСчет(ВидыДоговоров)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	Факторинг = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя"), СПокупателем);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика"), СПоставщиком);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании"), Факторинг);

КонецПроцедуры

Процедура ДополнитьВидыДоговоровОплатаПлатежнойКартой(ВидыДоговоров)
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя"), СПокупателем);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю"), СПокупателем);

КонецПроцедуры

Процедура ДополнитьВидыДоговоровПоступлениеТоваровУслуг(ВидыДоговоров)
	
	ВПереработку = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	ПокупкаКомиссия = Новый Массив;
	ПокупкаКомиссия.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	ПокупкаКомиссия.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	ПокупкаКомиссия.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	ПокупкаКомиссия.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = Новый Массив;
	Прочее.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	Прочее.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Услуги = Новый Массив;
	Услуги.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	Услуги.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	Услуги.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	Услуги.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	ОС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	Факторинг = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"), ВПереработку);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"), ПокупкаКомиссия);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства"), ОС);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков"), ОС);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Топливо"), ОС);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"), Услуги);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга"), Факторинг);
	
КонецПроцедуры

Процедура ДополнитьВидыДоговоровРеализацияТоваровУслуг(ВидыДоговоров)
	
	Передача = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаТоваров"), Передача);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.СтроительныеРаботы"), Прочее);
	
КонецПроцедуры

Процедура ДополнитьВидыДоговоровВозвратТоваровПоставщику(ВидыДоговоров)
	
	ИзПереработки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	Прочее = Новый Массив;
	Прочее.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	Прочее.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	Прочее.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки"), ИзПереработки);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия"), Прочее);

КонецПроцедуры

Процедура ДополнитьВидыДоговоровВозвратТоваровОтПокупателя(ВидыДоговоров)
	
	Переданные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	
	Прочее = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары"), Переданные);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Товары"), Прочее);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары"), Прочее);

КонецПроцедуры

Процедура ДополнитьВидыДоговоровПередачаТоваров(ВидыДоговоров)
	
	БезвозмезднаяПередача = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	ИзПереработки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	ВПереработку = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	Комитенту = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача"), БезвозмезднаяПередача);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.ВПереработку"), ВПереработку);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.ИзПереработки"), ИзПереработки);
	ВидыДоговоров.Вставить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту"), Комитенту);

КонецПроцедуры

Функция ТипДокументаСДоговоромПоВидуОперации(ВидОперации)
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеРеквизита = ВидОперации.Метаданные();
	
	ТипыДокументов = ТипыДокументовСДоговоромПоВидуОперации();
	
	Для Каждого ВидОперацииПоТипуДокумента Из ТипыДокументов Цикл
		Если МетаданныеРеквизита = ВидОперацииПоТипуДокумента.Значение Тогда
			Возврат ВидОперацииПоТипуДокумента.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает соответствие типов документов с зависимыми реквизитами ДоговорКонтрагента и ВидОперации
//
// Возвращаемое значение:
//   Соответствие - соответствие КлючИЗначение, где
//                  КлючИЗначение.Ключ - тип документа,
//                  КлючИЗначение.Значение - метаданные вида операции
Функция ТипыДокументовСДоговоромПоВидуОперации()
	
	СписокДокументов = Новый Соответствие;
	СписокДокументов.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"), Метаданные.Перечисления.ВидыОперацийРКО);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), Метаданные.Перечисления.ВидыОперацийПКО);
	СписокДокументов.Вставить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"), Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"), Метаданные.Перечисления.ВидыОперацийПоступлениеДенежныхСредств);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ПлатежноеПоручение"), Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ОплатаПлатежнойКартой"), Метаданные.Перечисления.ВидыОперацийОплатаПлатежнойКартой);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг);
	СписокДокументов.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), Метаданные.Перечисления.ВидыОперацийРеализацияТоваров);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"), Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"), Метаданные.Перечисления.ВидыОперацийВозвратТоваровОтПокупателя);
	СписокДокументов.Вставить(Тип("ДокументСсылка.ПередачаТоваров"), Метаданные.Перечисления.ВидыОперацийПередачаТоваров);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ДанныеВыбораДоговора(Параметры, ОкончаниеВводаТекста = Ложь) Экспорт

	ДанныеВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьДанныеВыбора(Параметры);
	Если ДанныеВыбора.Количество() = 0 Тогда
		СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
		ЕстьЦифры = СтрРазделить(СтрокаПоиска, "0123456789", Истина).Количество() > 1;
		Если ЕстьЦифры Тогда
			ПредставлениеНового = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='Создать: Номер ""%1""'"), СтрокаПоиска);
		Иначе
			ПредставлениеНового = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='Создать: Наименование ""%1""'"), СтрокаПоиска);
		КонецЕсли;
		ДанныеВыбора.Добавить(СтрокаПоиска, ПредставлениеНового);
		
		Если ОкончаниеВводаТекста Тогда
			// Добавляем вторую строку, чтобы в этом режиме не срабатывал автовыбор единственной строки.
			ДанныеВыбора.Добавить("");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеВыбора;

КонецФункции 

#КонецОбласти