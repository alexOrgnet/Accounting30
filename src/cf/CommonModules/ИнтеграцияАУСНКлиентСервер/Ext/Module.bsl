#Область ПрограммныйИнтерфейс

// Возвращает список методов взаимодействия с сервисом.
//
// Возвращаемое значение:
//   Структура - где ключ - имя метода, значение - Структура: см. НовыйОписаниеМетода
//
Функция ИменаМетодовВзаимодействия() Экспорт
	
	ИменаМетодов = Новый Структура;
	ИменаМетодов.Вставить("СоздатьДокумент", "СоздатьДокумент");
	ИменаМетодов.Вставить("ОбновитьДокумент", "ОбновитьДокумент");
	ИменаМетодов.Вставить("УдалитьДокумент", "УдалитьДокумент");
	ИменаМетодов.Вставить("СтатусДокумента", "СтатусДокумента");
	ИменаМетодов.Вставить("ОбновитьСтатусДокумента", "ОбновитьСтатусДокумента");
	ИменаМетодов.Вставить("ОбновитьСтатусыДокументов", "ОбновитьСтатусыДокументов");
	ИменаМетодов.Вставить("НайтиДокументы", "НайтиДокументы");
	
	ИменаМетодов.Вставить("НайтиЗаявку", "НайтиЗаявку");
	ИменаМетодов.Вставить("ПодтвердитьЗаявку", "ПодтвердитьЗаявку");
	ИменаМетодов.Вставить("ОтклонитьЗаявку", "ОтклонитьЗаявку");
	
	ИменаМетодов.Вставить("СписокБанков", "СписокБанков");
	
	ИменаМетодов.Вставить("ОтключитьВсе", "ОтключитьВсе");
	ИменаМетодов.Вставить("ОтключитьОрганизацию", "ОтключитьОрганизацию");
	ИменаМетодов.Вставить("ОтключитьБанк", "ОтключитьБанк");
	
	ИменаМетодов.Вставить("СоздатьТокенАвторизации", "СоздатьТокенАвторизации");
	
	//@skip-check constructor-function-return-section
	Возврат ИменаМетодов;
	
КонецФункции

// Возвращает список параметров для вызова метода взаимодействия по его имени.
//
// Параметры:
//   МетодВзаимодействия - Строка - имя метода из списка методов ИнтеграцияАУСН.МетодыВзаимодействия()
//
// Возвращаемое значение:
//  Структура - ключом является имя параметра, значение - пустым значением нужного типа
//
Функция НовыеПараметрыМетодаВзаимодействия(МетодВзаимодействия) Экспорт
	
	ИменаМетодов = ИменаМетодовВзаимодействия();
	ТекущаяВерсия = ТекущаяВерсияРесурсов();
	ВсеВерсии = ВерсииРесурсов();
	
	// API для работы с документами
	
	Если МетодВзаимодействия = ИменаМетодов.СоздатьДокумент Тогда
		
		Возврат НовыеПараметры_СоздатьДокумент(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОбновитьДокумент Тогда
		
		Возврат НовыеПараметры_ОбновитьДокумент(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.УдалитьДокумент Тогда
		
		Возврат НовыеПараметры_УдалитьДокумент(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.СтатусДокумента Тогда
		
		Возврат НовыеПараметры_СтатусДокумента(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОбновитьСтатусДокумента Тогда
		
		Возврат НовыеПараметры_ОбновитьСтатусДокумента(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОбновитьСтатусыДокументов Тогда
		
		Возврат НовыеПараметры_ОбновитьСтатусыДокументов(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.НайтиДокументы Тогда
	
		Если ТекущаяВерсия = ВсеВерсии.Версия2 Тогда
			Возврат НовыеПараметры_НайтиДокументыВерсия2(МетодВзаимодействия);
		Иначе
			Возврат НовыеПараметры_НайтиДокументы(МетодВзаимодействия);
		КонецЕсли;
	
	// API для работы с заявками на подключение к сервису
	
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.НайтиЗаявку Тогда
		
		Возврат НовыеПараметры_НайтиЗаявку(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ПодтвердитьЗаявку Тогда
		
		Возврат НовыеПараметры_ПодтвердитьЗаявку(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОтклонитьЗаявку Тогда
		
		Возврат НовыеПараметры_ОтклонитьЗаявку(МетодВзаимодействия);
		
	// API для работы с информацией банков, подключенных к системе
	
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.СписокБанков Тогда
		
		Возврат НовыеПараметры(МетодВзаимодействия);
	
	// API для работы с информацией банков, подключенных к системе
	
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОтключитьОрганизацию Тогда
		
		Возврат НовыеПараметры(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.ОтключитьБанк Тогда
		
		Возврат НовыеПараметры(МетодВзаимодействия);
		
	ИначеЕсли МетодВзаимодействия = ИменаМетодов.СоздатьТокенАвторизации Тогда
		
		Возврат НовыеПараметры_СоздатьТокенАвторизации(МетодВзаимодействия);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия():
			|Метод взаимодействия %1 не определен", МетодВзаимодействия);
		
	КонецЕсли;
	
КонецФункции

// Конструктор типа данных Документ
// 
// Параметры:
//   Тип - ПеречислениеСсылка.ТипыДокументовАУСН - Тип документа
//   Данные - Строка - Данные документа
// 
// Возвращаемое значение:
//  Структура - Новый документ:
//    * Тип - ПеречислениеСсылка.ТипыДокументовАУСН - Тип документа
//    * Данные - Строка - Данные документа
//
Функция НовыйДокумент(Тип = Неопределено, Данные = "") Экспорт
	
	ПараметрыМетода = Новый Структура;
	Если Тип = Неопределено Тогда
		ПараметрыМетода.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыДокументовАУСН.ПустаяСсылка"));
	Иначе
		ПараметрыМетода.Вставить("Тип", Тип);
	КонецЕсли;
	ПараметрыМетода.Вставить("Данные", Данные);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыМетода;
	
КонецФункции

// Возвращает идентификатор сервиса
// 
// Возвращаемое значение:
//  Строка - Идентификатор сервиса
//
Функция ИдентификаторСервиса() Экспорт
	
	Возврат "АУСН";
	
КонецФункции

// Проверяет фамилию, имя или отчество физического лица на соответствие протоколу обмена сервиса АУСН с ФНС
//
// Параметры:
//  Значение - Строка - фамилия, имя или отчество физического лица
//  ТекстОшибки - Строка - в этот параметр передается текст ошибки, если переданное значение не прошло проверку
//
// Возвращаемое значение:
//  Булево - признак того, что переданное значение соответствует требованиям, указанным в протоколе обмена
//
Функция ФИОСоответствуетПротоколуОбмена(Значение, ТекстОшибки) Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	#Иначе
		КодЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		ТекстОшибки = НСтр("ru = 'Значение не заполнено'", КодЯзыка);
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Новый Массив;
	ПервыйСимвол = Лев(Значение, 1);
	Если (Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ПервыйСимвол)
		И Не СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ПервыйСимвол))
		Или Не ЗначениеЗаполнено(ПервыйСимвол) Тогда
		Ошибки.Добавить(НСтр("ru = 'В первом символе допускается только буква'", КодЯзыка));
	КонецЕсли;
	
	ПоследнийСимвол = Прав(Значение, 1);
	Если (Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ПоследнийСимвол, Истина, ".")
		И Не СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ПоследнийСимвол, Истина, ".")
		И Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследнийСимвол))
		Или Не ЗначениеЗаполнено(ПоследнийСимвол) Тогда
		Ошибки.Добавить(НСтр("ru = 'В последнем символе допускается только буква, арабская цифра или точка'", КодЯзыка));
	КонецЕсли;
	
	Спецсимволы = Новый Массив;
	Спецсимволы.Добавить(Символ(32)); // Пробел
	Спецсимволы.Добавить(Символ(39)); // Апостроф
	Спецсимволы.Добавить(Символ(45)); // Дефис
	Спецсимволы.Добавить(Символ(46)); // Точка
	Спецсимволы.Добавить(Символ(47)); // Прямой слэш
	
	СпецсимволыИЦифры = Новый Массив;
	Для Сч = 0 По 9 Цикл
		СпецсимволыИЦифры.Добавить(Формат(Сч, "ЧН=0"));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СпецсимволыИЦифры, Спецсимволы);
	
	ДопустимыеСимволы = СтрСоединить(СпецсимволыИЦифры);
	ПредшествующийСпецсимвол = Ложь;
	ДлинаЗначения = СтрДлина(Значение);
	
	Для ПорядковыйНомер = 1 По ДлинаЗначения Цикл
		ОчереднойСимвол = Сред(Значение, ПорядковыйНомер, 1);
		Если ПорядковыйНомер <> 1 И ПорядковыйНомер <> ДлинаЗначения
			И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ОчереднойСимвол, Истина, ДопустимыеСимволы)
			И Не СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(
				ОчереднойСимвол, Истина, ДопустимыеСимволы) Тогда
			Ошибки.Добавить(СтрШаблон(
				НСтр("ru = 'Значение содержит недопустимый символ: ""%1""'", КодЯзыка),
				ОчереднойСимвол));
		КонецЕсли;
		Если Спецсимволы.Найти(ОчереднойСимвол) = Неопределено Тогда
			ПредшествующийСпецсимвол = Ложь;
		Иначе
			Если ПредшествующийСпецсимвол Тогда
				Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Не допускается следование двух и более спецсимволов подряд: ""%1""'", КодЯзыка),
					Сред(Значение, ПорядковыйНомер - 1, 2)));
			КонецЕсли;
			ПредшествующийСпецсимвол = Истина;
		КонецЕсли;
	КонецЦикла;
	ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Возврат Не ЗначениеЗаполнено(Ошибки);
	
КонецФункции

Функция ИННСоответствуетПротоколуОбмена(Значение, ТекстОшибки) Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	#Иначе
		КодЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
	#КонецЕсли
	
	СодержаниеОшибки = Новый Массив;
	
	Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		Значение, Ложь, ТекстОшибки) Тогда
		СодержаниеОшибки.Добавить(ОбработанныйТекстОшибки(ТекстОшибки));
	КонецЕсли;
	
	ПервыеСимволы = Лев(Значение, 2);
	
	НедопустимыеСимволы = Новый Массив;
	НедопустимыеСимволы.Добавить("00");
	НедопустимыеСимволы.Добавить("96");
	НедопустимыеСимволы.Добавить("98");
	ИндексНайденногоСимвола = НедопустимыеСимволы.Найти(ПервыеСимволы);
	Если ИндексНайденногоСимвола <> Неопределено Тогда
		СодержаниеОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'ИНН не может начинаться со значения %1'", КодЯзыка),
				НедопустимыеСимволы[ИндексНайденногоСимвола]));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СодержаниеОшибки, Символы.ПС);
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// Возвращает список кодов видов документов, допустимых для обмена с ФНС через сервис АУСН
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция ДопустимыеВидыДокументовФизическихЛиц() Экспорт
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("21");
	ВидыДокументов.Добавить("03");
	ВидыДокументов.Добавить("07");
	ВидыДокументов.Добавить("08");
	ВидыДокументов.Добавить("10");
	ВидыДокументов.Добавить("11");
	ВидыДокументов.Добавить("12");
	ВидыДокументов.Добавить("13");
	ВидыДокументов.Добавить("14");
	ВидыДокументов.Добавить("15");
	ВидыДокументов.Добавить("18");
	ВидыДокументов.Добавить("23");
	ВидыДокументов.Добавить("24");
	ВидыДокументов.Добавить("91");
	
	Возврат ВидыДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция МетодыБезАвторизации() Экспорт
	
	ВсеМетоды = ИменаМетодовВзаимодействия();
	
	Результат = Новый Массив;
	Результат.Добавить(ВсеМетоды.СоздатьТокенАвторизации);
	Результат.Добавить(ВсеМетоды.СписокБанков);
	
	Возврат Результат;
	
КонецФункции

// Возвращает перечисление статусов выполнения методов взаимодействия.
// 
// Возвращаемое значение:
//    Структура - Статусы запросов:
//      * Выполняется - Строка
//      * Выполнено - Строка
//      * Ошибка - Строка
//      * Отменено - Строка
//
Функция СтатусыЗапросов() Экспорт
	
	СтатусыЗапросов = Новый Структура;
	СтатусыЗапросов.Вставить("Выполняется", "Выполняется");
	СтатусыЗапросов.Вставить("Выполнено", "Выполнено");
	СтатусыЗапросов.Вставить("Ошибка", "Ошибка");
	СтатусыЗапросов.Вставить("Отменено", "Отменено");
	
	Возврат СтатусыЗапросов;
	
КонецФункции

// Возвращает перечисление статусов заявок подключения к сервису.
// 
// Возвращаемое значение:
//    Структура - Статусы заявок подключения:
//      * Новая - Строка
//      * Принята - Строка
//      * Отклонена - Строка
//
Функция СтатусыЗаявокПодключения() Экспорт
	
	СтатусыЗапросов = Новый Структура;
	СтатусыЗапросов.Вставить("Новая", "NEW");
	СтатусыЗапросов.Вставить("Принята", "ACCEPTED");
	СтатусыЗапросов.Вставить("Отклонена", "DECLINED");
	
	Возврат СтатусыЗапросов;
	
КонецФункции

// Имя события для в журнала регистрации.
//
// Параметры:
//  Детализация  - Строка - уточнение события.
// 
// Возвращаемое значение:
//   Строка      - полное имя события.
// 
Функция ИмяСобытияЖурналаРегистрации(Детализация = "") Экспорт
	
	Результат = НСтр("ru = 'Интеграция с сервисом АУСН'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если ПустаяСтрока(Детализация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрШаблон(НСтр("ru = '%1.%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Результат, Детализация);
	Возврат Результат;
	
КонецФункции

Функция ТекущаяВерсияРесурсов() Экспорт
	
	Возврат ВерсииРесурсов().Версия2;
	
КонецФункции

Функция ВерсииРесурсов() Экспорт
	
	ВерсииРесурсов = Новый Структура;
	ВерсииРесурсов.Вставить("Версия1", "Версия1");
	ВерсииРесурсов.Вставить("Версия2", "Версия2");
	
	Возврат ВерсииРесурсов;
	
КонецФункции

Функция ПрефиксРеквизитаСведенийДокумента() Экспорт
	
	Возврат "СведенияДокумента_";
	
КонецФункции

Функция ПрефиксРеквизитаОткрытьФормуДокумента() Экспорт
	
	Возврат "ФормаДокумента_";
	
КонецФункции

Функция ПрефиксРеквизитаОткрытьФормуДвиженийРазметкаАУСН() Экспорт

	Возврат "РазметкаАУСН_";

КонецФункции

Функция ИмяСтатусаПринятФНС() Экспорт
	
	Возврат "OK";
	
КонецФункции

// Проверяет дату рождения физического лица на соответствие протоколу обмена сервиса АУСН с ФНС
//
// Параметры:
//  ДатаРождения - Дата
//  ТекстОшибки - Строка - в этот параметр передается текст ошибки, если переданное значение не прошло проверку
//  ГодПеречисленияВыплаты - Число, Неопределено - год, за который производится перечисление выплаты
//
// Возвращаемое значение:
//  Булево - признак того, что переданное значение соответствует требованиям, указанным в протоколе обмена
//
Функция ДатаРожденияСоответствуетПротоколуОбмена(ДатаРождения, ТекстОшибки, ГодПеречисленияВыплаты = Неопределено) Экспорт
	
	ТекстОшибки = "";
	КодЯзыка = КодОсновногоЯзыка();
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена дата рождения'", КодЯзыка);
	ИначеЕсли ДатаРождения < МинимальнаяГраницаДопустимогоВозрастаФизическогоЛица() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Дата рождения не может быть меньше %1'", КодЯзыка),
			Формат(МинимальнаяГраницаДопустимогоВозрастаФизическогоЛица(), "Л=ru_RU; ДЛФ=DD"));
	ИначеЕсли ЗначениеЗаполнено(ГодПеречисленияВыплаты) И Год(ДатаРождения) > ГодПеречисленияВыплаты Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Год, за который перечисляется выплата (%1 г.), не может быть меньше даты рождения'", КодЯзыка),
			Формат(ГодПеречисленияВыплаты, "ЧГ="));
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

Функция КодГражданстваСоответствуетПротоколуОбмена(КодГражданства, ТекстОшибки) Экспорт
	
	ТекстОшибки = "";
	КодЯзыка = КодОсновногоЯзыка();
	
	Если Не ЗначениеЗаполнено(КодГражданства) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен код страны гражданства'", КодЯзыка);
	ИначеЕсли Не ИнтеграцияАУСНВызовСервераПовтИсп.КодСтраныГражданстваНайденВКлассификаторе(КодГражданства) Тогда
		ТекстОшибки = НСтр("ru = 'Код страны гражданства не найден в классификаторе стран мира'", КодЯзыка);
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

Функция ПолФизическогоЛицаСоответствуетПротоколуОбмена(Пол, ТекстОшибки) Экспорт
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Пол) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан пол физического лица'", КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

Функция ПрефиксДвиженияРасчетНДФЛ() Экспорт
	
	Возврат "РасчетНДФЛ_АУСН";
	
КонецФункции

Функция СерияДокументаСоответствуетПротоколуОбмена(ВидДокумента, Знач Серия, ТекстОшибки) Экспорт
	
	СодержаниеОшибки = Новый Массив;
	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ")
		И Серия = НулеваяСерияПаспортаРФ() Тогда
		СодержаниеОшибки.Добавить(
			НСтр("ru = 'Серия паспорта РФ не может состоять из нулей'", КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если Не ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, Серия, ТекстОшибки) Тогда
		СодержаниеОшибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СодержаниеОшибки, Символы.ПС);
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

Функция НомерДокументаСоответствуетПротоколуОбмена(ВидДокумента, Знач Номер, ТекстОшибки) Экспорт
	
	СодержаниеОшибки = Новый Массив;
	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ")
		И Номер = НулевойНомерПаспортаРФ() Тогда
		СодержаниеОшибки.Добавить(
			НСтр("ru = 'Номер паспорта РФ не может состоять из нулей'", КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если Не ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, Номер, ТекстОшибки) Тогда
		СодержаниеОшибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СодержаниеОшибки, Символы.ПС);
	
	Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

Функция ИмяНастройкиПовторноеЧтениеДокументов() Экспорт
	
	Возврат "ДатаПопыткиПовторногоЧтения";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список параметров по умолчанию
//
// Возвращаемое значение:
//  Структура
//
Функция НовыеПараметры(МетодВзаимодействия)
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("МетодВзаимодействия", МетодВзаимодействия);
	
	Если МетодыБезАвторизации().Найти(МетодВзаимодействия) = Неопределено Тогда
		ПараметрыМетода.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ПараметрыМетода.Вставить("ИдентификаторБанка", ОбщегоНазначенияБПКлиентСервер.ОписаниеТипаИдентификатор());
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_СоздатьДокумент(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	ПараметрыМетода.Вставить("Документ", НовыйДокумент());
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_ОбновитьДокумент(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Идентификатор", "");
	ПараметрыМетода.Вставить("Документ", НовыйДокумент());
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_УдалитьДокумент(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Идентификатор", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_СтатусДокумента(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Идентификатор", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_ОбновитьСтатусДокумента(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Идентификатор", "");
	ПараметрыМетода.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументовАУСН.ПустаяСсылка"));
	ПараметрыМетода.Вставить("Ошибка", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_ОбновитьСтатусыДокументов(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Статусы", Новый Массив);
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_НайтиДокументы(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументовАУСН.ПустаяСсылка"));
	ПараметрыМетода.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыДокументовАУСН.ПустаяСсылка"));
	ПараметрыМетода.Вставить("ДатаНачала", Дата(1, 1, 1));
	ПараметрыМетода.Вставить("Метка", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_НайтиДокументыВерсия2(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("Статусы", Новый Массив); // Массив из ПеречислениеСсылка.СтатусыДокументовАУСН
	ПараметрыМетода.Вставить("Типы", Новый Массив); // Массив из ПеречислениеСсылка.ТипыДокументовАУСН
	ПараметрыМетода.Вставить("ДатаНачала", Дата(1, 1, 1));
	ПараметрыМетода.Вставить("Метка", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_ПодтвердитьЗаявку(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("КодЗаявки", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_ОтклонитьЗаявку(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("КодЗаявки", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_НайтиЗаявку(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("КодЗаявки", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция НовыеПараметры_СоздатьТокенАвторизации(МетодВзаимодействия)
	
	ПараметрыМетода = НовыеПараметры(МетодВзаимодействия);
	ПараметрыМетода.Вставить("ИдентификаторПриложения", "");
	ПараметрыМетода.Вставить("Тикет", "");
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция МинимальнаяГраницаДопустимогоВозрастаФизическогоЛица()
	
	Возврат '19000101';
	
КонецФункции

Функция ОбработанныйТекстОшибки(ТекстОшибки)
	
	Если Прав(ТекстОшибки, 1) = "." Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстОшибки, 1);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция КодОсновногоЯзыка()
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	#Иначе
		КодЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
	#КонецЕсли
	
	Возврат КодЯзыка;
	
КонецФункции

Функция НулеваяСерияПаспортаРФ()
	
	Возврат "00 00";
	
КонецФункции

Функция НулевойНомерПаспортаРФ()
	
	Возврат "000000";
	
КонецФункции

#КонецОбласти