
#Область ПрограммныйИнтерфейс

#Область НастройкиИнтеграции

// Определяет прикладные настройки интеграции с Системой быстрых платежей.
// См. СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииНастроекПодключения
//
Процедура ПриОпределенииНастроекПодключения(Настройки) Экспорт
	
	Настройки.c2b.ОбъектМетаданных = Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграции;
	
	// Шаблон заполнения документа РозничнаяПродажа
	НовыйШаблон = Настройки.c2b.ШаблоныНазначений.Добавить();
	НовыйШаблон.ОбъектМетаданных = Метаданные.Документы.РозничнаяПродажа.Имя;
	НовыйШаблон.Идентификатор = Метаданные.Документы.РозничнаяПродажа.Имя;
	НовыйШаблон.Наименование = Метаданные.Документы.РозничнаяПродажа.Синоним;
	
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Наименование организации'"),
			"[НаименованиеОрганизации]"));
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Дата чека'"),
			"[ДатаЧека]"));
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Сумма чека'"),
			"[СуммаЧека]"));
	
	// Шаблон заполнения документа СчетНаОплатуПокупателю
	НовыйШаблон = Настройки.c2b.ШаблоныНазначений.Добавить();
	НовыйШаблон.ОбъектМетаданных = Метаданные.Документы.СчетНаОплатуПокупателю.Имя;
	НовыйШаблон.Идентификатор = Метаданные.Документы.СчетНаОплатуПокупателю.Имя;
	НовыйШаблон.Наименование =  Метаданные.Документы.СчетНаОплатуПокупателю.Синоним;
	
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Наименование организации'"),
			"[НаименованиеОрганизации]"));
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Номер счета'"),
			"[НомерСчета]"));
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Дата счета'"),
			"[ДатаСчета]"));
	НовыйШаблон.Параметры.Добавить(
		Новый Структура(
			"Наименование, Идентификатор",
			НСтр("ru = 'Сумма счета'"),
			"[СуммаСчета]"));
	
КонецПроцедуры

// Определяет алгоритм записи настроек оплат в регистр сведений указанный в методе
// СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииНастроекПодключения.
// См. СистемаБыстрыхПлатежейПереопределяемый.ПриЗаписиНастроекПодключения
//
Процедура ПриЗаписиНастроекПодключения(ПараметрыОплаты, Отказ, СообщениеОбОшибке) Экспорт
	
	Организация = ПараметрыОплаты.c2b.Получить("Организация");
	ВидОплаты   = ПараметрыОплаты.c2b.Получить("ВидОплаты");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не заполнена Организация.'");
	ИначеЕсли Не ЗначениеЗаполнено(ВидОплаты) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не заполнено поле Вид оплаты.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоответствиеНастроекИнтеграции");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("ВидОплаты",   ВидОплаты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ЗначениеЗаполнено(ПараметрыОплаты.c2b.Получить("ТорговаяТочка")) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
			|	СоответствиеНастроекИнтеграции.ВидОплаты КАК ВидОплаты
			|ИЗ
			|	РегистрСведений.СоответствиеНастроекИнтеграции КАК СоответствиеНастроекИнтеграции
			|ГДЕ
			|	СоответствиеНастроекИнтеграции.ТорговаяТочка = &ТорговаяТочка";
			
			Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыОплаты.c2b.Получить("ТорговаяТочка"));
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Набор = РегистрыСведений.СоответствиеНастроекИнтеграции.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				Набор.Отбор.ВидОплаты.Установить(ВыборкаДетальныеЗаписи.ВидОплаты);
				Набор.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле
		|ИЗ
		|	РегистрСведений.СоответствиеНастроекИнтеграции КАК СоответствиеНастроекИнтеграции
		|ГДЕ
		|	СоответствиеНастроекИнтеграции.Организация = &Организация
		|	И СоответствиеНастроекИнтеграции.ВидОплаты = &ВидОплаты
		|	И СоответствиеНастроекИнтеграции.ТорговаяТочка <> &ТорговаяТочка";
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("ВидОплаты",     ВидОплаты);
		Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыОплаты.c2b.Получить("ТорговаяТочка"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ             = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Для организации и вида оплаты уже задана настройка интеграции.'");
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Запись = РегистрыСведений.СоответствиеНастроекИнтеграции.СоздатьМенеджерЗаписи();
		Запись.ТорговаяТочка = ПараметрыОплаты.c2b.Получить("ТорговаяТочка");
		Запись.Организация   = Организация;
		Запись.ВидОплаты     = ВидОплаты;
		
		Запись.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		Если Не Константы.ИспользоватьОплатуПоПлатежнымКартам.Получить() Тогда
			Константы.ИспользоватьОплатуПоПлатежнымКартам.Установить(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Настройка интеграции с платежными системами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграции,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Позволяет настроить элементы настройки приема оплат на формах подключения к Системе быстрых платежей.
// См. СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения
//
Процедура ПриНастройкеЭлементовФормыПодключения(НастройкиФормы, ДополнительныеПараметры) Экспорт
	
	НастройкиФормы.c2b.ЭлементыНастроекОплаты.ВидОплаты.Подсказка
		= НСтр("ru = 'Соглашение с банком, участником Системы быстрых платежей.
			         |В нем можно указать процент комиссии, взимаемой банком за совершение операций по СБП.'");
	НастройкиФормы.c2b.ЭлементыНастроекОплаты.ВидОплаты.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	ПараметрыБезналичныхОплат = Новый Массив;
	ТипыОплатБезналичныеОплаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыОплат.СБП);
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты",
		Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	
	НастройкаИзПомощника = ЗначениеЗаполнено(ДополнительныеПараметры);
	Если НастройкаИзПомощника Тогда
		Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Организация");
	Иначе
		Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НастройкиФормы.c2b.ЗначенияНастроекОплаты, "Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации = Справочники.ВидыОплатОрганизаций.ОрганизацииДляОтбораВидовОплат(Организация);
		ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация",
			Новый ФиксированныйМассив(Организации)));
	КонецЕсли;
	
	НастройкиФормы.c2b.ЭлементыНастроекОплаты.ВидОплаты.ПараметрыВыбора =
		Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);
	
	Если НастройкаИзПомощника Тогда
		НастройкиФормы.c2b.ЭлементыНастроекОплаты.Организация.ТолькоПросмотр = Истина;
		Наименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Наименование");
		Если ЗначениеЗаполнено(Наименование) Тогда
			НастройкиФормы.ОбщиеЭлементы.Наименование.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиФормы.ОбщиеЭлементы.Наименование.Подсказка
		= НСтр("ru = 'Наименование настройки для отображения в списках.'");
	НастройкиФормы.ОбщиеЭлементы.Наименование.ОтображениеПодсказки
		= ОтображениеПодсказки.ОтображатьСнизу;
	
	НастройкиФормы.ОбщиеЭлементы.ДекорацияДополнительнаяИнформация.Заголовок =
		СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'С дополнительной информацией можно ознакомиться на сайте <a href=""open:SBP"">Портал 1С:СБП</a>.'"));
	НастройкиФормы.ОбщиеЭлементы.ДекорацияДополнительнаяИнформация.Видимость = Истина;
	
КонецПроцедуры

// Позволяет предзаполнить настройки приема платежей на формах подключения к Системе быстрых платежей.
// См. СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения
//
Процедура ПриЗаполненииФормыНастройкиПодключения(Настройки, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.НастройкиОплаты.c2b.Организация = ДополнительныеПараметры.Организация;
	Банк = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Банк");
	
	Наименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Наименование");
	Если ЗначениеЗаполнено(Наименование) Тогда
		Настройки.ОбщиеНастройки.Наименование = Наименование;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'в %1 '");
	Если Настройки.НастройкиУчастникаСБП.ПлатежныйАгрегатор Тогда
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(Банк);
		ТекстЗаменыЧто = СтрШаблон(Шаблон, РеквизитыБанка.Наименование);
		ТекстЗаменыНа  = СтрШаблон(Шаблон, Настройки.НастройкиУчастникаСБП.Наименование);
		Настройки.ОбщиеНастройки.Наименование =
			СтрЗаменить(Настройки.ОбщиеНастройки.Наименование, ТекстЗаменыЧто, ТекстЗаменыНа);
	Иначе
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(Банк);
		НастройкиСБП = Неопределено;
		Если Настройки.НастройкиУчастникаСБП.БИК.Найти(РеквизитыБанка.Код) Тогда
			НастройкиСБП = СистемаБыстрыхПлатежей.ПараметрыПодключенияПоБИК(РеквизитыБанка.Код);
		КонецЕсли;
		
		Если НастройкиСБП = Неопределено Или Не НастройкиСБП.ИнтеграцияДоступнаСБПc2b Тогда
			ТекстЗамены = СтрШаблон(Шаблон, Настройки.НастройкиУчастникаСБП.Наименование);
			Настройки.ОбщиеНастройки.Наименование = СтрЗаменить(Настройки.ОбщиеНастройки.Наименование, ТекстЗамены, "");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.НастройкиУчастникаСБП.ИНН) Тогда
		Настройки.НастройкиОплаты.c2b.ВидОплаты =
			ПолучитьВидОплаты(ДополнительныеПараметры.Организация, Настройки.НастройкиУчастникаСБП, Истина);
	ИначеЕсли ЗначениеЗаполнено(Банк) Тогда
		Настройки.НастройкиОплаты.c2b.ВидОплаты = ПолучитьВидОплаты(ДополнительныеПараметры.Организация, Банк, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеОперации

// Загружает статусы оплаты СБП.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ПолучитьСтатусыОперацияC2B(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Неопределено;
	Настройки = РегистрыСведений.СоответствиеНастроекИнтеграции.ВсеНастройкиИнтеграции();
	Если ЗаблокироватьПолучениеСтатусов(Настройки) Тогда
		Результат = ПереводыСБПc2b.СтатусыОпераций();
		РазблокироватьПолучениеСтатусов(Настройки)
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Определяются данные для формирования запроса на оплату в платежную систему СБП.
// Все поля переменной ЗаказНаОплату обязательны для заполнения.
// См. ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаОплатуСБП
//
Процедура ПриФормированииСчетаНаОплатуСБП(Основание,
										  РеквизитыСчета,
										  НастройкаПодключения,
										  ДополнительныеПараметры) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Основание.Метаданные().Имя);
	НайденныеСтроки = РеквизитыСчета.ШаблоныНазначений.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ШаблонНазначения = НайденныеСтроки[0];
	Иначе
		ШаблонНазначения = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		РеквизитыСчетаНаОплатуПоСчетуПокупателю(Основание, РеквизитыСчета, ШаблонНазначения);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		РеквизитыСчетаНаОплатуПоРозничнойПродаже(Основание, РеквизитыСчета, ДополнительныеПараметры, ШаблонНазначения);
	КонецЕсли;
	
КонецПроцедуры

// Определяет алгоритм обработки операции, статус которых был получен регламентным заданием.
// См. ПереводыСБПc2bПереопределяемый.ПриЗагрузкеСтатусаОперации
//
Процедура ПриЗагрузкеСтатусаОперации(ДокументОперации,
									 НастройкаПодключения,
									 РезультатОбработки,
									 Обработан) Экспорт
	
	Если РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
		СоздатьОперациюПоПлатежнойКарте(ДокументОперации, НастройкаПодключения, РезультатОбработки);
	КонецЕсли;
	
	Обработан = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПодготовкиПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииОбъектовСКомандамиСБП
//
Процедура ПриОпределенииОбъектовСКомандамиСБП(ИменаОснованийПлатежа) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаОснованийПлатежа, ОснованияПлатежа(), Истина);
	
КонецПроцедуры

// Определяет возможность формирования платежной ссылки на основании данных документа операции.
// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииДоступностиПодключенияПоДокументуОперации
//
Процедура ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(ДокументОперации, Результат) Экспорт
	
	ТекстОшибки = "";
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации);
	
	Результат.ИнтеграцияДоступна = Истина;
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперации,
		"Организация, ВалютаДокумента, Контрагент.ЮридическоеФизическоеЛицо, ДоговорКонтрагента, СтруктурнаяЕдиница");
	
	Если Не ЗначениеЗаполнено(ДанныеОснования.СтруктурнаяЕдиница) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен банковский счет.'");
	КонецЕсли;
	
	ДанныеБанкСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОснования.СтруктурнаяЕдиница,
		"Банк, ВалютаДенежныхСредств");
	
	СчетВВалюте = ДанныеОснования.ВалютаДокумента
		<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если СчетВВалюте И ЗначениеЗаполнено(ДанныеОснования.ДоговорКонтрагента) Тогда
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
			ДанныеОснования.ДоговорКонтрагента);
		СчетВВалюте = ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеБанкСчета.ВалютаДенежныхСредств) И ДанныеБанкСчета.ВалютаДенежныхСредств
		<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		// Банковский счет должен быть однозначно рублевым, вне зависимости от вида договора.
		СчетВВалюте = Истина;
	КонецЕсли;
	
	Если СчетВВалюте Тогда
		ТекстОшибки = НСтр("ru = 'Валютные счета не оплачиваются через СБП.'");
	ИначеЕсли ДанныеОснования.КонтрагентЮридическоеФизическоеЛицо
			<> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ТекстОшибки = НСтр("ru = 'Оплата через СБП доступна только от физических лиц.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Результат.СообщениеОбОшибке = ТекстОшибки;
		Результат.ИнтеграцияДоступна = Ложь;
		Возврат;
	КонецЕсли;
	
	// Проверим возможность получения настройки подключения к СБП по данным основания платежа
	ПолучитьНастройку(Результат, ДанныеОснования, ДанныеБанкСчета);
	
КонецПроцедуры

// Определяет перечень возможных настроек интеграции на основании данных документа операции.
// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровПодключенияДокументаОперации
//
Процедура ПриОпределенииПараметровИнтеграцииДокументаОперации(ДокументОперации,
															  НастройкиПодключения,
															  ДополнительныеНастройки,
															  ПараметрыВопроса) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации);
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперации,
		"Организация, ВалютаДокумента, Контрагент.ЮридическоеФизическоеЛицо, ДоговорКонтрагента, СтруктурнаяЕдиница");
	
	ДанныеБанкСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОснования.СтруктурнаяЕдиница,
		"Банк, ВалютаДенежныхСредств");
	
	// Требуется только в качестве параметра,
	// сама проверка выполнена ранее, в ПриОпределенииДоступностиИнтеграцииПоДокументуОперации()
	РезультатПроверки = Новый Структура("СообщениеОбОшибке, ИнтеграцияДоступна", "", Ложь);
	
	// Получаем настройку подключения к СБП по данным основания платежа
	НастройкаСБП = ПолучитьНастройку(РезультатПроверки, ДанныеОснования, ДанныеБанкСчета);
	Если ЗначениеЗаполнено(НастройкаСБП) Тогда
		НастройкиПодключения.Добавить(НастройкаСБП);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССообщениями

// Заполняет параметры сообщения электронной почты, отправляемого без шаблона.
// См. ПереводыСБПc2bКлиентПереопределяемый.ПриЗаполненииПараметровСообщенияБезШаблонаСБП
//
Процедура ПриЗаполненииПараметровСообщенияБезШаблонаСБП(ПараметрыСообщения, ПараметрыОперации) Экспорт
	
	СведенияОСчете = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСообщения.Предмет,
		"Номер, Организация, Контрагент, СуммаДокумента, ВалютаДокумента");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОСчете.Организация);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОСчете.Контрагент);
	Подпись = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("Подпись");
	
	ФорматнаяСтрока = ?(СведенияОСчете.СуммаДокумента - Цел(СведенияОСчете.СуммаДокумента) > 0,
		"ЧЦ=15; ЧДЦ=2",
		"ЧЦ=15");
	
	ПредставлениеСуммы = СтрШаблон("%1 %2",
		Формат(СведенияОСчете.СуммаДокумента, ФорматнаяСтрока),
		СведенияОСчете.ВалютаДокумента);
	
	ПараметрыСообщения.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Оплата счета на сумму %1 (%2)'"),
		ПредставлениеСуммы,
		СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	
	ДанныеКартинки = Base64Строка(СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(
		ПараметрыОперации.ПлатежнаяСсылка, 200));
	
	ПараметрыСообщения.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '<html><body>
			|<p>Добрый день!</p>
			|<p>Вы сделали заказ на сумму %1 у %2.</p>
			|<p>Для оплаты счета № %3 перейдите по ссылке:</p>
			|<p><a href=""%4"">%4</a></p>
			|<p>Или отсканируйте QR-код</p>
			|<br>
			|<img src=""data:image/png;base64,%5""/>
			|<br>
			|<p>%6</p>
			|</body></html>'"),
		НормализоватьСтрокуДляHTML(ПредставлениеСуммы),
		НормализоватьСтрокуДляHTML(СведенияОбОрганизации.НаименованиеДляПечатныхФорм),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СведенияОСчете.Номер, Истина, Ложь),
		ПараметрыОперации.ПлатежнаяСсылка,
		СтрЗаменить(ДанныеКартинки, Символы.ВК + Символы.ПС, ""),
		Подпись);
	
КонецПроцедуры

// Заполняет список получателей сообщения с платежной ссылкой.
// См. ПереводыСБПc2bПереопределяемый.ПриФормированииСпискаПолучателейСообщенияСБП
//
Процедура ПриФормированииСпискаПолучателейСообщенияСБП(ДокументОперации, ВариантОтправки, Получатели) Экспорт
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОперации, "Контрагент");
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент);
		Получатели.Добавить(СведенияОКонтрагенте.Email);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Возвраты

// Определяются данные для формирования запроса на возврат в платежную систему СБП.
// Все поля переменной ЗаказНаВозврат обязательны для заполнения.
// См. ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаВозвратСБП
//
Процедура ПриФормированииДокументаНаВозвратСБП(ДокументВозврата,
											   ДокументНаВозврат,
											   НастройкаИнтеграции,
											   ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ДокументНаВозврат, ДополнительныеПараметры, "СуммаВозврата, ДатаВозврата");
		Возврат;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументВозврата,
		"Сумма, Дата");
	ДокументНаВозврат.ДатаВозврата  = РеквизитыДокумента.Дата;
	ДокументНаВозврат.СуммаВозврата = РеквизитыДокумента.Сумма;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НастройкаИнтеграцииСБППоБанку(Организация, Банк) Экспорт
	
	НастройкаИнтеграции = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат НастройкаИнтеграции;
	КонецЕсли;
	
	БИКБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	
	НастройкаИнтеграции = НастройкаИнтеграцииСБП(Организация, БИКБанка);
	
	Возврат НастройкаИнтеграции;
	
КонецФункции

Функция НастройкаИнтеграцииСБП(Организация, БИКБанка) Экспорт
	
	НастройкиИнтеграции = НастройкиИнтеграцииСБП(Организация, БИКБанка);
	
	Если НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b И ЗначениеЗаполнено(НастройкиИнтеграции.Настройка) Тогда
		НастройкаИнтеграции = НастройкиИнтеграции.Настройка;
	Иначе
		НастройкаИнтеграции = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка();
	КонецЕсли;
	
	Возврат НастройкаИнтеграции;
	
КонецФункции

Функция НастройкиИнтеграцииСБП(Организация, БИКБанка, ВключаяАгрегаторы = Ложь) Экспорт
	
	НастройкиИнтеграции = Новый Структура("ИнтеграцияДоступнаСБПc2b, Настройка");
	НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b = Ложь;
	
	Если Не ЗначениеЗаполнено(БИКБанка) Тогда
		Возврат НастройкиИнтеграции;
	КонецЕсли;
	
	ПолучитьНастройкуСБПсБанком(НастройкиИнтеграции, Организация, БИКБанка);
	
	Если Не ЗначениеЗаполнено(НастройкиИнтеграции.Настройка)
		И (Не НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b Или ВключаяАгрегаторы) Тогда
		// По выбранному счету к СБП настройки подключения c2b нет.
		// Поищем настройку подключения с платежными агрегаторами, к которым подключена организация.
		ЗаполнитьНастройкуСБПсАгрегатором(НастройкиИнтеграции, Организация, БИКБанка);
		
		Если Не ЗначениеЗаполнено(НастройкиИнтеграции.Настройка) И ВключаяАгрегаторы Тогда
			// Банк интеграцию c2b не поддерживает и нет настройки с агрегатором.
			// Сообщим об этом и предложим использовать агрегатор.
			НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

Функция QRКодСБП(ДанныеДокумента) Экспорт
	
	РезультатОперации = ПереводыСБПc2b.ДинамическаяСсылка(
		ДанныеДокумента.Документ,
		ДанныеДокумента.НастройкаИнтеграцииСБП);
	
	Если Не ЗначениеЗаполнено(РезультатОперации.ПлатежнаяСсылка) И ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		СообщениеОбОшибке = ?( ЗначениеЗаполнено(РезультатОперации.СообщениеОбОшибке),
			РезультатОперации.СообщениеОбОшибке, РезультатОперации.ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ИнтеграцияССБПБП.QRКодСБП'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.СчетНаОплатуПокупателю,
			ДанныеДокумента.Документ,
			СообщениеОбОшибке);
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать QR-код для СБП. Подробности в Журнале регистрации'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат "";
	КонецЕсли;
	
	ДанныеQRКода = СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(
		РезультатОперации.ПлатежнаяСсылка,
		150,
		2);
	
	Возврат ДанныеQRКода;
	
КонецФункции

#Область ПрикладныеОперации

#Область ВозвратыОтмены

// Производит возврат продажи платежной системе на основании чека продажи или идентификатора оплаты.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументВозврата);
	
	РезультатОперации = ПереводыСБПc2b.ВозвратОплаты(
		ПараметрыПроцедуры.ДокументВозврата,
		?(ЗначениеЗаполнено(ПараметрыПроцедуры.ДокументОплаты),
			ПараметрыПроцедуры.ДокументОплаты,
			ПараметрыПроцедуры.ИдентификаторОплаты),
		ПараметрыПроцедуры.НастройкаИнтеграции,
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПроцедуры, "УчастникСБП", Неопределено));
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит получение статуса возврата по документу.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура СтатусВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументВозврата);
	
	РезультатОперации = ПереводыСБПc2b.СтатусВозврата(
		ПараметрыПроцедуры.ДокументВозврата,
		ПараметрыПроцедуры.НастройкаПодключения);
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Подтверждает возврат в платежной системе.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//                   оплату в информационной базе;
//  НастройкаИнтеграции - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - см. ПереводыСБПc2b.ПодтвердитьВозврат.
//
Функция ПодтвердитьВозврат(ДокументВозврата, НастройкаИнтеграции) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ДокументВозврата);
	
	Возврат ПереводыСБПc2b.ПодтвердитьВозврат(
		ДокументВозврата,
		НастройкаИнтеграции);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РеквизитыСчетаНаОплатуПоРозничнойПродаже(РозничнаяПродажа, РеквизитыСчета, ДанныеДокумента, ШаблонНазначения)
	
	РеквизитыСчета.СуммаОплаты = ДанныеДокумента.СуммаДокумента;
	РеквизитыСчета.ДатаОплаты  = ДанныеДокумента.Дата;
	
	ОрганизацияНаименование = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		ДанныеДокумента.Организация).НаименованиеДляПечатныхФорм;
	
	Если ШаблонНазначения = Неопределено Тогда
		РеквизитыСчета.НазначениеПлатежа = СтрШаблон(НСтр("ru = 'Оплата %1 по чеку от %2. Сумма %3.'"),
			ОрганизацияНаименование,
			Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yy"),
			Формат(ДанныеДокумента.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	Иначе
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			ШаблонНазначения.НазначениеПлатежа,
			"[НаименованиеОрганизации]",
			ОрганизацияНаименование);
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			РеквизитыСчета.НазначениеПлатежа,
			"[ДатаЧека]",
			Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yy"));
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			РеквизитыСчета.НазначениеПлатежа,
			"[СуммаЧека]",
			Формат(ДанныеДокумента.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	КонецЕсли;
	
	РеквизитыСчета.ОтложенноеПолучениеСтатуса = Ложь;
	
КонецПроцедуры

Процедура РеквизитыСчетаНаОплатуПоСчетуПокупателю(СчетНаОплату, РеквизитыСчета, ШаблонНазначения)
	
	Если Не ЗначениеЗаполнено(СчетНаОплату) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату,
		"Организация, СуммаДокумента, Дата, Номер");
	
	СрокОплаты = СрокиОплатыДокументов.УстановленныйСрокОплаты(СчетНаОплату, ДанныеДокумента.Организация);
	ТекДата = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(СрокОплаты) Тогда
		СрокОплаты = КонецДня(СрокОплаты);
		Если ТекДата < СрокОплаты Тогда
			РеквизитыСчета.СрокЖизниQRКода = Окр((СрокОплаты - ТекДата) / 60); // в целых минутах
		Иначе
			РеквизитыСчета.СрокЖизниQRКода = Окр((СрокОплаты - ДанныеДокумента.Дата) / 60);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыСчета.СуммаОплаты = ДанныеДокумента.СуммаДокумента;
	РеквизитыСчета.ДатаОплаты  = ДанныеДокумента.Дата;
	
	ОрганизацияНаименование = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		ДанныеДокумента.Организация).НаименованиеДляПечатныхФорм;
	
	Если ШаблонНазначения = Неопределено Тогда
		РеквизитыСчета.НазначениеПлатежа = СтрШаблон(НСтр("ru = 'Оплата через СБП по счету № %1 от %2. Сумма %3.'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер, Истина, Ложь),
			Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"),
			Формат(ДанныеДокумента.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	Иначе
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			ШаблонНазначения.НазначениеПлатежа,
			"[НаименованиеОрганизации]",
			ОрганизацияНаименование);
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			РеквизитыСчета.НазначениеПлатежа,
			"[НомерСчета]",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер, Истина, Ложь));
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			РеквизитыСчета.НазначениеПлатежа,
			"[ДатаСчета]",
			Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"));
		РеквизитыСчета.НазначениеПлатежа = СтрЗаменить(
			РеквизитыСчета.НазначениеПлатежа,
			"[СуммаСчета]",
			Формат(ДанныеДокумента.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	КонецЕсли;
	
	РеквизитыСчета.ОтложенноеПолучениеСтатуса = Истина;
	
КонецПроцедуры

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований платежа через СБП.
//
// Возвращаемое значение:
//  Массив - имена (Строка) объектов метаданных оснований платежа.
//
Функция ОснованияПлатежа()
	
	ИменаОснованийПлатежа = Новый Массив;
	ИменаОснованийПлатежа.Добавить("Документ.СчетНаОплатуПокупателю");
	
	Возврат ИменаОснованийПлатежа;
	
КонецФункции

Функция ПолучитьНастройку(Результат, ДанныеОснования, ДанныеБанкСчета)
	
	НастройкаСБП = Неопределено;
	
	Организация = ДанныеОснования.Организация;
	Банк = ДанныеБанкСчета.Банк;
	ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Код, Наименование");
	БИКБанка = ДанныеБанка.Код;
	НаименованиеБанка = ДанныеБанка.Наименование;
	
	НастройкиИнтеграции = НастройкиИнтеграцииСБП(Организация, БИКБанка, Истина);
	
	Если Не НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b Тогда
		ШаблонСообщения = НСтр("ru = 'Оплата через СБП для %1 пока не поддерживается.
			|Рекомендуем использовать СБП через платежный агрегатор.'");
		Результат.СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, НаименованиеБанка);
		Результат.ИнтеграцияДоступна = Ложь;
	ИначеЕсли ЗначениеЗаполнено(НастройкиИнтеграции.Настройка) Тогда
		НастройкаСБП = НастройкиИнтеграции.Настройка;
	ИначеЕсли Не СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна() Тогда
		ТекстОшибки = НСтр("ru = 'Не настроено подключение к СБП. Обратитесь к адмнистратору.'");
		Результат.СообщениеОбОшибке = ТекстОшибки;
		Результат.ИнтеграцияДоступна = Ложь;
	КонецЕсли;
	
	Возврат НастройкаСБП;
	
КонецФункции

Процедура ЗаполнитьНастройкуСБПсАгрегатором(НастройкиИнтеграции, Организация, БИКБанка)
	
	// Получим все доступные, для текущего пользователя настройки, до установки привилегированного режима.
	ВсеНастройки = РегистрыСведений.СоответствиеНастроекИнтеграции.ВсеНастройкиИнтеграцииПоОрганизации(Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеНастройки, "Родитель");
	
	// Сначала найдем все существующие настройки интеграции с платежными агрегаторами - у таких систем нет БИК.
	НастройкиПлатежныхАгрегаторов = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеНастроек Цикл
		Настройки = СистемаБыстрыхПлатежей.НастройкиПодключения(КлючИЗначение.Ключ);
		Если Настройки.НастройкиСБПc2b.ПлатежныйАгрегатор
			И Не ЗначениеЗаполнено(Настройки.БИК) Или Настройки.БИК.Найти(БИКБанка) <> Неопределено Тогда
			НастройкиПлатежныхАгрегаторов.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НастройкаПлатежнойСистемы Из НастройкиПлатежныхАгрегаторов Цикл
		Настройка = РегистрыСведений.СоответствиеНастроекИнтеграции.НастройкиТорговойТочки(НастройкаПлатежнойСистемы);
		Если Настройка.Организация = Организация Тогда
			НастройкиИнтеграции.Настройка = НастройкаПлатежнойСистемы;
			НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b Тогда
		Возврат;
	КонецЕсли;
	
	// Банк не поддерживает интеграцию и нет ни одной настройки, но возможно подключение через платежных агрегаторов.
	НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b = Истина;
	
КонецПроцедуры

Функция ПолучитьНастройкуСБПсБанком(НастройкиИнтеграции, Организация, БИКБанка)
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиСБП = СистемаБыстрыхПлатежей.ПараметрыПодключенияПоБИК(БИКБанка);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(НастройкиИнтеграции, НастройкиСБП);
	Если НастройкиСБП.ИнтеграцияДоступнаСБПc2b Тогда
		Для Каждого Настройка Из НастройкиСБП.ПараметрыУчастникаСБП.НастройкаПодключения Цикл
			Если ПодключениеКСБПВыполнено(Организация, Настройка) Тогда
				НастройкиИнтеграции.Настройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

// Заменяет спецсимволы HTML на их ссылки-мнемоники.
//
// Параметры:
// Текст - Строка - Текст, который необходимо преобразовать для вставки в HTML
//
// Возвращаемое значение:
// Строка - текст, в котором спецсимволы HTML заменены на свои ссылки-мненмоники.
//
Функция НормализоватьСтрокуДляHTML(Значение)
	
	Значение = СтрЗаменить(Значение, "&", "&amp;");
	Значение = СтрЗаменить(Значение, "<", "&lt;");
	Значение = СтрЗаменить(Значение, ">", "&gt;");
	Значение = СтрЗаменить(Значение, """", "&quot;");
	Значение = СтрЗаменить(Значение, "'", "&apos;");
	
	Возврат Значение;
	
КонецФункции

// Проверяет документ операции, в случае ошибки вызывает исключение.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//                   оплату в информационной базе;
//
Процедура ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации)
	
	Если ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		Или Не ЗначениеЗаполнено(ДокументОперации) Тогда
		ВызватьИсключение НСтр("ru = 'Оплата в платежной системе для документа не поддерживается.'");
	КонецЕсли;
	
КонецПроцедуры

// Создает документ оплаты по счету, по которому пришло потверждение оплаты по СБП.
//
// Параметры:
//  Счет - ДокументыСсылка.СчетНаОплатуПокупателю - документ, по которому пришло подтверждение оплаты по СБП
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  РезультатОбработки - Структура - результат загрузки статуса операции:
//    * СтатусОперации - Строка - текущее состояние операции операции. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Отменена" - по ранее сформированная операция отменена НСПК;
//        - "Выполнена" - участник СБП подтвердил выполнение операции;
//        - "Ошибка" - не удалось выполнить проверку статуса операции из-за ошибки
//           или участник СБП вернул ошибку;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        * СуммаОперации - Число - фактическая суммы операции по документу;
///        * ИдентификаторОперации - Строка - идентификатор сформированной операции;
//    * СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки.
//
Процедура СоздатьОперациюПоПлатежнойКарте(Счет, НастройкаПодключения, РезультатОбработки)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат; // Загружаются платежи только по имеющимся в базе счетам.
	КонецЕсли;
	
	// БИП всегда приводит даты операций к UTC. Приведем дату обратно к локальному часовому поясу.
	ДатаОперацииВUTC = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		РезультатОбработки.ПараметрыОперации, "ДатаОперации");
	ДатаОперации  = ЛокальнаяДатаСоСмещениемПоЧасовомуПоясу(ДатаОперацииВUTC);
	СуммаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОбработки.ПараметрыОперации, "СуммаОперации");
	ИдентификаторПлатежа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		РезультатОбработки.ПараметрыОперации, "ИдентификаторОперации");
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		НастройкиПодключения = ПереводыСБПc2b.НастройкиПодключенияОперации(Счет);
		Если НастройкиПодключения.Количество() > 0 Тогда
			НастройкаПодключения = НастройкиПодключения[0];
		КонецЕсли;
	КонецЕсли;
	
	Настройки = РегистрыСведений.СоответствиеНастроекИнтеграции.НастройкиТорговойТочки(НастройкаПодключения);
	ВидОплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "ВидОплаты");
	
	ЭтоНовый = Ложь;
	ДокументОплатыСсылка = ДокументОплатыПоИдентификатору(ИдентификаторПлатежа);
	Если ЗначениеЗаполнено(ДокументОплатыСсылка) Тогда
		ДокументОплаты = ДокументОплатыСсылка.ПолучитьОбъект();
	Иначе
		ДокументОплаты = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет,
		"СуммаДокумента, ВалютаДокумента, Дата, Номер");
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПроверитьЗаполнениеСуммы = ДанныеСчета.СуммаДокумента <> СуммаОперации;
	Если ЗначениеЗаполнено(СуммаОперации) И ПроверитьЗаполнениеСуммы
		И ДанныеСчета.ВалютаДокумента = ВалютаРеглУчета Тогда
		ДанныеОплаты = Новый Структура;
		ДанныеОплаты.Вставить("Основание",     Счет);
		ДанныеОплаты.Вставить("СуммаОперации", СуммаОперации);
		ДокументОплаты.Заполнить(ДанныеОплаты);
	Иначе
		ДокументОплаты.Заполнить(Счет);
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если ЗначениеЗаполнено(ДатаОперации) Тогда
			ДокументОплаты.Дата = ДатаОперации;
		Иначе
			ДокументОплаты.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "СтруктурнаяЕдиница");
		Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
		ВидОплаты = ПолучитьВидОплаты(ДокументОплаты.Организация, Банк);
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидОплаты",      ВидОплаты);
	ДанныеЗаполнения.Вставить("СсылочныйНомер", ИдентификаторПлатежа);
	
	ЗаполнитьЗначенияСвойств(ДокументОплаты, ДанныеЗаполнения);
	
	ВидОплатыРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОплаты.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	ДокументОплаты.СчетКасса         = ВидОплатыРеквизиты.СчетУчетаРасчетов;
	ДокументОплаты.Эквайер           = ВидОплатыРеквизиты.Контрагент;
	ДокументОплаты.ДоговорЭквайринга = ВидОплатыРеквизиты.ДоговорКонтрагента;
	
	УстановитьДоговорКонтрагента(ДокументОплаты);
	
	Попытка
		ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ИнтеграцияССБПБП.СоздатьОперациюПоПлатежнойКарте'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИнтеграцияССБПБП,
			,
			НСтр("ru = 'Ошибка проведения документа ""Оплата платежной картой"" при загрузке операций из СБП'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			
		ДокументОплаты.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ДокументОплаты.Записать();
	КонецПопытки;
	
	Если ПроверитьЗаполнениеСуммы И ДанныеСчета.СуммаДокумента = ДокументОплаты.СуммаДокумента Тогда
		// Покупатель оплатил сумму, отличную от суммы счета, но заполнить документ оплаты этой суммой не вышло
		// и сейчас документ оплаты заполнен суммой счета, а не оплаченной суммой.
		// Это могло произойти по разным причинам, например:
		//  - не совпадение валюты оплаты и валюты счета на оплату
		//  - разными ставками НДС в счете на оплату
		МассивВалют = Новый Массив;
		МассивВалют.Добавить(ДанныеСчета.ВалютаДокумента);
		МассивВалют.Добавить(ДокументОплаты.ВалютаДокумента);
		НаименованияВалют = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВалют, "Наименование");
		СуммаСчетаПрописью =
			Формат(ДанныеСчета.СуммаДокумента, "ЧДЦ=2") + " " + НаименованияВалют[ДанныеСчета.ВалютаДокумента].Наименование;
		СуммаОперацииПрописью =
			Формат(СуммаОперации, "ЧДЦ=2") + " " + НаименованияВалют[ДокументОплаты.ВалютаДокумента].Наименование;
		ШаблонОшибки =
			НСтр("ru = 'Сумма оплаты %1 по операции СБП не совпадает с суммой %2 по счету №%3 от %4.
				|В документ установлена сумма из счета'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки,
			СуммаОперацииПрописью,
			СуммаСчетаПрописью,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчета.Номер, Истина, Ложь),
			Формат(ДанныеСчета.Дата, "ДЛФ=D"));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИнтеграцияССБПБП.СоздатьОперациюПоПлатежнойКарте'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ОплатаПлатежнойКартой,
			ДокументОплаты.Ссылка,
			ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоговорКонтрагента(Объект)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", Ложь));
	ВидыДоговоров = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(
		Объект.ВидОперации, ТипЗнч(Объект.Ссылка));
	
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ДоговорКонтрагента, "ВидДоговора");
		Если ВидыДоговоров.Найти(ВидДоговора) = Неопределено Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		СтрокаРасшифровки.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, ВидыДоговоров, ПараметрыПлатежа);
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтрокаРасшифровки.ДоговорКонтрагента = РаботаСБанкамиБП.ДоговорКонтрагентБанка(Объект.Организация, Объект.Контрагент, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на вид оплаты по расчетам с банком.
// Выбирается вид оплаты с контрагентом, ИНН которого соответствует ИНН банка-эквайера.
// Если подоходящий вид оплаты не найден, он создается с данными банка-эквайера,
// если включена соответствующая настройка.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация для поиска (создания) вида оплаты.
//  УчастникСБП - Структура, СправочникСсылка.Банки - Банк-эквайер или данные платежного агрегатора
//                                                    для поиска (создания) вида оплаты.
//  СоздаватьНовыеЭлементы - Булево - создавать Вид оплаты (и контрагента), если не найдены. По умолчанию Ложь.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыОплатОрганизаций - Вид оплаты.
//
Функция ПолучитьВидОплаты(Организация, УчастникСБП, СоздаватьНовыеЭлементы = Ложь)
	
	ДанныеБанка = РаботаСБанкамиБП.ПолучитьДанныеКонтрагентаБанка(УчастникСБП, СоздаватьНовыеЭлементы);
	Контрагент  = ДанныеБанка.Ссылка;
	Договор     = РаботаСБанкамиБП.ДоговорКонтрагентБанка(Организация, Контрагент, СоздаватьНовыеЭлементы);
	ВидОплаты   = НайтиВидОплаты(Организация, Контрагент);
	Если СоздаватьНовыеЭлементы И Не ЗначениеЗаполнено(ВидОплаты) Тогда
		ВидОплаты = СоздатьВидОплаты(Организация, Контрагент, Договор, ДанныеБанка.Наименование);
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция ДокументОплатыПоИдентификатору(ИдентификаторПлатежа)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылочныйНомер", ИдентификаторПлатежа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.СсылочныйНомер = &СсылочныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодключениеКСБПВыполнено(Организация, Настройка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Настройка",   Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграции КАК СоответствиеНастроекИнтеграции
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.Организация = &Организация
	|	И СоответствиеНастроекИнтеграции.ТорговаяТочка = &Настройка";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВидОплаты(Организация, Контрагент)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Контрагент = &Контрагент
	|	И ВидыОплатОрганизаций.Организация = &Организация
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Возвращаем найденный вид оплаты, только если он один.
	Если Выборка.Количество() > 1 Тогда
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьВидОплаты(Организация, Контрагент, Договор, Наименование)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ТипОплаты",   Перечисления.ТипыОплат.СБП);
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Контрагент",  Контрагент);
	
	ВидОплаты = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	ВидОплаты.Заполнить(ДанныеЗаполнения);
	ВидОплаты.ДоговорКонтрагента = Договор;
	ВидОплаты.Наименование = СтрШаблон(НСтр("ru = 'СБП с %1'"), Наименование);
	
	Попытка
		ВидОплаты.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ИнтеграцияССБПБП.НайтиИлиСоздатьВидОплаты'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИнтеграцияССБПБП,
			,
			НСтр("ru = 'Ошибка создания вида оплаты при настройке интеграции с СБП'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ВидОплаты.Ссылка;
	
КонецФункции

Функция ЗаблокироватьПолучениеСтатусов(Настройки)
	
	НастройкиЗаблокированы = Ложь;
	
	Попытка
		Для Каждого Настройка Из Настройки Цикл
			ЗаблокироватьДанныеДляРедактирования(Настройка);
			НастройкиЗаблокированы = Истина;
		КонецЦикла;
	Исключение
		НастройкиЗаблокированы = Ложь;
	КонецПопытки;
	
	Возврат НастройкиЗаблокированы;
	
КонецФункции

Процедура РазблокироватьПолучениеСтатусов(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		РазблокироватьДанныеДляРедактирования(Настройка);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует дату в UTC в дату локальную дату со смещением по часовому поясу.
//
// Параметры:
//  Значение - Дата - исходная дата.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ЛокальнаяДатаСоСмещениемПоЧасовомуПоясу(ДатаВUTC) Экспорт
	
	Возврат ДатаВUTC + СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), ДатаВUTC);
	
КонецФункции

#КонецОбласти
