////////////////////////////////////////////////////////////////////////////////
// БАЗОВАЯ ФУНКЦИОНАЛЬНОСТЬ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установка набора видимых подсистем командного интерфейса.
//
// Параметры:
//  Режим - Строка - ИнтерфейсТакси / ИнтерфейсТаксиПростой / ИнтерфейсВерсии77 - соответствует константе, которая будет установлена в Истину
//
Процедура УстановитьРежимКомандногоИнтерфейса(Режим) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка констант
	
	РежимИнтеграцииСБанком         = ВРег(Режим) = ВРег("ИнтерфейсИнтеграцииСБанком");
	РежимТакси                     = ВРег(Режим) = ВРег("ИнтерфейсТакси");
	РежимТаксиПростой              = Врег(Режим) = ВРег("ИнтерфейсТаксиПростой");
	Режим77                        = ВРег(Режим) = ВРег("ИнтерфейсВерсии77");
	РежимЭлектронныхТрудовыхКнижек = ВРег(Режим) = ВРег("ИнтерфейсЭлектронныхТрудовыхКнижек");
	
	Если НЕ РежимИнтеграцииСБанком
		И НЕ РежимТакси
		И НЕ Режим77
		И НЕ РежимТаксиПростой
		И НЕ РежимЭлектронныхТрудовыхКнижек Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РежимСоответствуетТекущему = РежимИнтеграцииСБанком = Константы.ИнтерфейсИнтеграцииСБанком.Получить()
		И РежимТакси = Константы.ИнтерфейсТакси.Получить()
		И Режим77 = Константы.ИнтерфейсВерсии77.Получить()
		И РежимТаксиПростой = Константы.ИнтерфейсТаксиПростой.Получить()
		И РежимЭлектронныхТрудовыхКнижек = Константы.ИнтерфейсЭлектронныхТрудовыхКнижек.Получить();
	
	Константы.ИнтерфейсИнтеграцииСБанком.Установить(РежимИнтеграцииСБанком);
	Константы.ИнтерфейсТакси.Установить(РежимТакси);
	Константы.ИнтерфейсВерсии77.Установить(Режим77);
	Константы.ИнтерфейсТаксиПростой.Установить(РежимТаксиПростой);
	Если НЕ РежимИнтеграцииСБанком Тогда
		Константы.ИнтерфейсЭлектронныхТрудовыхКнижек.Установить(РежимЭлектронныхТрудовыхКнижек);
	КонецЕсли;
	
	Константы.ВедетсяУчетОсновныхСредствПростойИнтерфейс.Установить(РежимТаксиПростой
		И Константы.ВедетсяУчетОсновныхСредств.Получить());
	
	УстановитьОпциюУстановкаМобильногоПриложения();
	УстановитьОпциюДополнительнаяИнформация();
	УстановитьОпциюОбращениеВТехническуюПоддержку();
	УстановитьФункциональнуюОпциюТехнологияСервисаВМоделиСервиса();
	УстановитьФункциональнуюОпциюТехнологияСервисаВЛокальномРежиме();
	
	УстановитьФункциональнуюОпциюПоказыватьНачалоРаботыВСервисе();
	
	МоиЗадачи.УстановитьФункциональнуюОпциюИнтерфейсаМоиЗадачи();
	
	ОтображатьПодсистемуУчетаЗарплатыИКадров = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И РежимТакси);
	Константы.ОтображатьПодсистемуСотрудники.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И РежимТаксиПростой);
	
	УстановитьДоступностьОплатыСервиса();
	
	ПомеченныеНаУдалениеСервер.УстановитьОтображениеПомеченныхНаУдаление();
	
	Если РежимТаксиПростой Тогда
		Константы.ИнтерфейсТаксиБазовый.Установить(Ложь);
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
		Константы.ОтображатьРазделыДокументыТоварыКонтрагенты.Установить(Истина);
	ИначеЕсли РежимИнтеграцииСБанком Тогда
		Константы.ИнтерфейсТаксиБазовый.Установить(Истина);
		Константы.ИспользоватьДокументыРеализации.Установить(Ложь);
		Константы.ВестиУчетРасчетовСКонтрагентами.Установить(Ложь);
		Константы.ОтображатьРазделыДокументыТоварыКонтрагенты.Установить(Ложь);
	ИначеЕсли РежимЭлектронныхТрудовыхКнижек Тогда
		СервисЭлектронныхТрудовыхКнижек.УстановитьРежимКомандногоИнтерфейса();
	Иначе
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
		Константы.ОтображатьРазделыДокументыТоварыКонтрагенты.Установить(Ложь);
		// Установим функциональность, которая должна быть включена в полном интерфейсе.
		ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
		ОтборФункциональности = Новый Структура("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Истина);
		ОбязательнаяФункциональность = ОписаниеФункциональности.Скопировать(ОтборФункциональности, "Имя");
		Для Каждого ИмяКонстанты Из ОбязательнаяФункциональность.ВыгрузитьКолонку("Имя") Цикл
			Константы[ИмяКонстанты].Установить(Истина);
		КонецЦикла;
		Константы.ИнтерфейсТаксиБазовый.Установить(Ложь);
	КонецЕсли;
	
	Константы.ОтображатьРазделТовары.Установить(РежимТаксиПростой И Константы.ВедетсяРозничнаяТорговля.Получить());
	
	УчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям");
	УстановитьОпциюВеденияУчетаПоОрганизациям(УчетПоОрганизациям);
	
	УстановитьОпциюПоказыватьИнформационнуюПанель();
	
	УстановитьНастройкиПользователейПоУмолчанию(РежимСоответствуетТекущему);
	
	УчетКассовыхЧековПодотчетныхЛиц.УстановитьОпциюУстановкаМобильногоПриложения();
	
	УставныйКапитал.УстановитьВидимостьКомандУставногоКапитала();
	
	УстановитьОпциюОтображатьКомандыГлавноеПродажиПокупки();
	
	СПАРКРискиБП.УстановитьОпциюОтображатьКоманды1СПАРКРиски();
	
КонецПроцедуры

Функция ИмяКонфигурацииБП() Экспорт
	
	ИмяКонфигурации = Метаданные.Имя;
	ОбщегоНазначенияБППереопределяемый.УстановитьИмяКонфигурацииБП(ИмяКонфигурации);
	Возврат ИмяКонфигурации;
	
КонецФункции

// Возвращает имя источника для обменов данными с другими программами.
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "БухгалтерияПредприятия";
	
КонецФункции

// Возвращает представление программы (конфигурации) в именительном падеже.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПрограммы() Экспорт
	
	Если Метаданные.Имя = "БухгалтерияПредприятияБазовая1" Тогда
		Возврат НСтр("ru = '1С:БизнесСтарт'");
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятияБазовая" Тогда
		Возврат НСтр("ru = '1С:Предприниматель'");
	Иначе
		Возврат НСтр("ru = '1С:Бухгалтерия'");
	КонецЕсли;
	
КонецФункции

// Возвращает представление программы (конфигурации) в винительном падеже.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПрограммыВинительныйПадеж() Экспорт
	
	Если Метаданные.Имя = "БухгалтерияПредприятияБазовая1" Тогда
		Возврат НСтр("ru = '1С:БизнесСтарт'");
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятияБазовая" Тогда
		Возврат НСтр("ru = '1С:Предприниматель'");
	Иначе
		Возврат НСтр("ru = '1С:Бухгалтерию'");
	КонецЕсли;
	
КонецФункции

// Возвращает представление программы (конфигурации) в предложном падеже.
// Используется в сервисе 1cfresh.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПрограммыПредложныйПадеж() Экспорт
	
	Если Метаданные.Имя = "БухгалтерияПредприятияБазовая1" Тогда
		Возврат НСтр("ru = '1С:БизнесСтарт'");
	ИначеЕсли Метаданные.Имя = "БухгалтерияПредприятияБазовая" Тогда
		Возврат НСтр("ru = '1С:Предприниматель'");
	Иначе
		Возврат НСтр("ru = '1С:Бухгалтерии'");
	КонецЕсли;
	
КонецФункции

// Подтверждает, что переданная организация входит в список доступных для пользователя.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - проверяемая организация. Может быть пустым значением.
//  ВключатьОбособленныеПодразделения - Булево - признак добавления в список доступных обособленных подразделений.
//	ПравоНаИзменение - Булево - Истина, если список будет использоваться в алгоритмах изменения данных.
//
// Возвращаемое значение:
//   Массив      - список из всех доступных, если было передано пустое значение;
//               - список из Организация и её доступных обособленных подразделений;
//               - пустой список, если организация недоступна для пользователя.
//
Функция СписокДоступныхОрганизаций(Организация, ВключатьОбособленныеПодразделения = Ложь, ПравоНаИзменение = Ложь) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если ЗначениеЗаполнено(Организация) Тогда // проверяем конкретную организацию
		
		Если ВключатьОбособленныеПодразделения
			И БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			
			СписокОбособленныхПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(Организация);
			ОбособленныеПодразделения = СписокОбособленныхПодразделений.ВыгрузитьЗначения();
			НедоступныеОрганизации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбособленныеПодразделения, ДоступныеОрганизации);
			СписокОрганизаций = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбособленныеПодразделения, НедоступныеОрганизации);
			
		Иначе
			
			СписокОрганизаций = Новый Массив;
			
		КонецЕсли;
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено
		   И СписокОрганизаций.Найти(Организация) = Неопределено Тогда
			СписокОрганизаций.Вставить(0, Организация);
		КонецЕсли;
		
		ДоступныеОрганизации = СписокОрганизаций;
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		// В неразделенном режиме не нужно устанавливать параметры работы клиента при запуске.
		Возврат;
	КонецЕсли;
	
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	ВариантИнтерфейса = ?(ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения"),
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения,
		ВариантИнтерфейсаКлиентскогоПриложения.Такси);
		
	// Помощник перехода с редации 2.0
	Обработки.ПомощникПереходаСРедакции20.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
	// Информация о необходимости обновить конфигурацию
	Параметры.Вставить("ПоказатьПредложитьОбновитьВерсиюПрограммы", ПредлагатьОбновитьВерсиюПрограммы(Параметры));
	
	// Предложение включить основной интерфейс
	ВариантПредложения = Неопределено;
	Параметры.Вставить("ПоказатьВключитьОсновнойИнтерфейс",
		ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения));
	Параметры.Вставить("ВариантПредложенияВключитьОсновнойИнтерфейс", ВариантПредложения);
	
	// Знакомство с редакцией 3.0
	ПоказатьЗнакомствоСРедакциейВ30 = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И ОбновлениеСПредыдущейРедакции.ИнформационнаяБазаОбновленаС20()
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыВ30", "Показывать", Истина);
	
	ИмяОбработкиЗнакомствоСРедакциейВ30 = "";
	Если ПоказатьЗнакомствоСРедакциейВ30 Тогда
		
		ИмяОбработкиЗнакомствоСРедакциейВ30 = "НачинаемРаботатьВ30";
		
		Если Не ПравоДоступа("Использование", Метаданные.Обработки[ИмяОбработкиЗнакомствоСРедакциейВ30]) Тогда
			ПоказатьЗнакомствоСРедакциейВ30 = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	ЭтоНачалоРаботы = ПолучитьФункциональнуюОпцию("НачалоРаботы");
	
	Параметры.Вставить("НачалоРаботы", ЭтоНачалоРаботы);
	
	// Для сервиса регистрации используется специальный набор форм при открытии.
	Если Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации() Тогда
		
		ПодготовитьСтруктуруНавигацииПомощникаРегистрации();
		
		РежимРаботы          = Обработки.НачалоРаботы.РежимРаботыВыборПользователя();
		ЗначенияРежимаРаботы = Обработки.НачалоРаботы.НовыйРежимРаботыПользователя();
		
		Если РежимРаботы = ЗначенияРежимаРаботы.БыстрыйСтарт Тогда
			// Если пользователь выбрал работу в программе, 
			// но не закончил этап Быстрый старт, то открываем его снова.
			Параметры.Вставить("ПоказыватьБыстрыйСтартПриРегистрации", ЭтоНачалоРаботы);
		ИначеЕсли РежимРаботы = ЗначенияРежимаРаботы.Регистрация Тогда
			// Если пользователь выбрал регистрацию,
			// но не закончил её, то открываем помощник на последнем шаге.
			Параметры.Вставить("ОткрытьПомощникРегистрации", ЭтоНачалоРаботы Или ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена"));
			Параметры.Вставить("НавигацияНомерШага",         Обработки.РегистрацияОрганизации.НомерШагаПомощника());
		ИначеЕсли РежимРаботы = ЗначенияРежимаРаботы.ВнесениеИзменений Тогда
			// Если пользователь выбрал регистрацию,
			// но не закончил её, то открываем помощник на последнем шаге.
			Параметры.Вставить("ОткрытьПомощникВнесенияИзменений", ЭтоНачалоРаботы);
			Параметры.Вставить("НавигацияНомерШага",         Обработки.РегистрацияОрганизации.НомерШагаПомощника());
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Вставить("ПоказатьЗнакомствоСРедакциейВ30",     ПоказатьЗнакомствоСРедакциейВ30);
	Параметры.Вставить("ИмяОбработкиЗнакомствоСРедакциейВ30", ИмяОбработкиЗнакомствоСРедакциейВ30);
	
	// Начало работы в сервисе
	ПоказатьНачалоРаботыВСервисе = 
		ОбщегоНазначения.РазделениеВключено()
		И РольДоступна("ПолныеПрава")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыПредпринимательВСервисе", "Показывать", Истина)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой")
		И НЕ ЭтоИнтерфейсИнтеграцииСБанком()
		И НЕ Константы.НачалоРаботы.Получить()
		И НЕ ИспользуетсяСервисЭлектронныхТрудовыхКнижек();
		
	Параметры.Вставить("ПоказатьНачалоРаботыВСервисе", ПоказатьНачалоРаботыВСервисе);
	
	// Путеводитель по демо-базе
	ИмяОбработкиПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе();
	ПоказатьПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе <> Неопределено;
	Параметры.Вставить("ПоказатьПутеводительПоДемоБазе",     ПоказатьПутеводительПоДемоБазе);
	Параметры.Вставить("ИмяОбработкиПутеводительПоДемоБазе", ИмяОбработкиПутеводительПоДемоБазе);
	
	// Свертка базы (продолжение работы)
	Параметры.Вставить("ПоказатьСвертку", ТребуетсяОткрытьСверткуБазы());
	
	// Включение раздельного учета НДС (продолжение работы после перехода с Простого интерфейса)
	Параметры.Вставить("ФормированиеОстатковПоНДС", ХранилищеОбщихНастроек.Загрузить("ФормированиеОстатковПоНДС") = Истина);
	Параметры.Вставить("Организация", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	Параметры.Вставить("ДатаНачалаВеденияРаздельногоУчетаНДС",  ХранилищеОбщихНастроек.Загрузить("ДатаНачалаВеденияРаздельногоУчетаНДС"));
	
	// Разрешение на открытие окон при запуске
	Параметры.Вставить("ОткрыватьДополнительныеОкнаПриЗапуске", ОткрыватьДополнительныеОкнаПриЗапуске());
	
	// Использование программы для учета компании, ведущей деятельность 
	// См. также ТарификацияБП.ПриОбновленииДоступныхЛицензий
	Если ТарификацияБП.УстановитьРазрешенУчетРегулярнойДеятельности(Истина) Тогда
		Параметры.Вставить("ОбновитьИнтерфейс", Истина);
	КонецЕсли;
	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И Не ИспользуетсяСервисЭлектронныхТрудовыхКнижек()
		И ПравоДоступа("Просмотр", Метаданные.Обработки.МониторНалоговИОтчетности) Тогда
		// В базе только разрешена сдача "нулевой" отчетности, показываем сразу монитор налогов и отчетов.
		Параметры.Вставить("ОткрытьМониторНалоговИОтчетности", Истина);
	КонецЕсли;
	
	Если ТарификацияБП.РежимОтладки() Тогда 
		Параметры.Вставить("ИдентификаторОтладкиТарифа", ТарификацияБП.РежимОтладки_ИдентификаторТарифа());
	КонецЕсли;
	
	СервисЭлектронныхТрудовыхКнижек.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	
	Параметры.Вставить("ПоказатьПомощникИсключенияИзПрослеживаемости", Обработки.ПомощникИсключенияНоменклатурыИзПрослеживаемости.ТребуетсяПоказатьФормуПомощника());
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() И Не ЭтоСеансАдминистратораСервиса() Тогда
		
		РазрешенТолькоИнтерфейсИнтеграцииСБанком = ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсИнтеграцииСБанком();
		
		Если ЭтоСтандартныйИнтерфейс() И РазрешенТолькоИнтерфейсИнтеграцииСБанком Тогда
			УстановитьРежимКомандногоИнтерфейса("ИнтерфейсИнтеграцииСБанком");
			Если ТарификацияБП.РежимОтладки() Тогда
				Справочники.НастройкиИнтеграцииСБанками.СоздатьЕслиОтсутствует();
			КонецЕсли;
			Параметры.Вставить("ТребуетсяПерезапуск", Истина);
		КонецЕсли;
		
		Если Константы.ИнтерфейсИнтеграцииСБанком.Получить() И Не РазрешенТолькоИнтерфейсИнтеграцииСБанком Тогда
			// У пользователя установлен интерфейс интеграции с банком, при этом его тариф разрешает
			// использовать не только интерфейс интеграции. Значит, можно переключить его в Простой интерфейс.
			НастройкиИнтерфейса = Обработки.НачалоРаботы.ПодходящиеНастройкиИнтерфейса("");
			УстановитьРежимКомандногоИнтерфейса(НастройкиИнтерфейса.ВариантИнтерфейса);
			УстановитьПривилегированныйРежим(Истина);
			Если НастройкиИнтерфейса.ВариантИнтерфейса = "ИнтерфейсТаксиПростой"
				И Не НастройкиИнтерфейса.БезЗакрывающихДокументов Тогда
				Константы.ВестиУчетРасчетовСКонтрагентами.Установить(Истина);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			Параметры.Вставить("ТребуетсяПерезапуск", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
		И СервисЭлектронныхТрудовыхКнижек.СервисЭлектронныхТрудовыхКнижекДоступен()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И Не Пользователи.ЭтоПолноправныйПользователь(Неопределено, Истина, Ложь) Тогда
		
		РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек = ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек();
		
		Если НЕ ЭтоНачалоРаботы Тогда
			Если ЭтоСтандартныйИнтерфейс() 
				И РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек 
				И Не ТарификацияБП.РежимОтладки() Тогда
				ТекстСообщенияБлокировки = НСтр("ru='Закончился действующий договор.
					|
					|По вопросам оплаты/продления доступа обратитесь к Вашей обслуживающей организации.'");
				Параметры.Вставить("ЗаблокироватьПриложение", ТекстСообщенияБлокировки);
			КонецЕсли;
		КонецЕсли;
		
		// У пользователя установлен интерфейс сервиса электронных трудовых, при этом его тариф разрешает
		// использовать не только интерфейс сервиса. Значит, можно переключить его в полный интерфейс.
		Если ИспользуетсяСервисЭлектронныхТрудовыхКнижек() И Не РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек Тогда
			// Устанавливаем вариант стандартного интерфейса в зависимости от системы налогообложения.
			НастройкиИнтерфейса = Обработки.НачалоРаботы.ПодходящиеНастройкиИнтерфейса("");
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса(НастройкиИнтерфейса.ВариантИнтерфейса);
			Если НастройкиИнтерфейса.ВариантИнтерфейса = "ИнтерфейсТаксиПростой"
				И НЕ НастройкиИнтерфейса.БезЗакрывающихДокументов Тогда
				Константы.ИспользоватьДокументыРеализации.Установить(Истина);
				Константы.ВестиУчетРасчетовСКонтрагентами.Установить(Истина);
			КонецЕсли;
			Параметры.Вставить("ОбновитьИнтерфейс", Истина);
		ИначеЕсли ИспользуетсяСервисЭлектронныхТрудовыхКнижек() И РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек Тогда
			ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсЭлектронныхТрудовыхКнижек");
			Параметры.Вставить("ОбновитьИнтерфейс", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Использование интеграции с платформой Самозанятые.
	Если ИнтеграцияСПлатформойСамозанятые.УстановитьДоступнаИнтеграция() Тогда
		Параметры.Вставить("ОбновитьИнтерфейс", Истина);
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.НачинатьРаботуСоСравненияРежимовНалогообложения() Тогда
		РежимРаботы          = Обработки.НачалоРаботы.РежимРаботыВыборПользователя();
		ЗначенияРежимаРаботы = Обработки.НачалоРаботы.НовыйРежимРаботыПользователя();
		
		Если РежимРаботы = ЗначенияРежимаРаботы.БыстрыйСтарт Тогда
			// Если пользователь выбрал работу в программе, 
			// но не закончил этап Быстрый старт, то открываем его снова.
			Параметры.Вставить("ПоказыватьБыстрыйСтартПриРегистрации", ПолучитьФункциональнуюОпцию("НачалоРаботы"));
			Параметры.Вставить("ПараметрыБыстрогоСтартаПриРегистрации", 
				Обработки.СравнениеРежимовНалогообложения.ПараметрыНачалаРаботы());
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСведенияОРекомендуемойВерсииПлатформы(Параметры);
	
	// Пользователь может быть переключен на простой интерфейс,
	// если по условиям тарифа полный интерфейс больше не доступен
	Если ТарификацияБП.УстановитьРазрешенныйРежимКомандногоИнтерфейса() Тогда
		Параметры.Вставить("ТребуетсяПерезапуск", Истина);
	КонецЕсли;
	
	РезультатОтключенияОпцийЗарплатаКадры =
		Обработки.ФункциональностьПрограммы.ОтключитьНедоступнуюФункциональностьЗарплатаКадры();
	
	Если РезультатОтключенияОпцийЗарплатаКадры.ПотребовалосьОтключениефункциональности
		И РезультатОтключенияОпцийЗарплатаКадры.ОтключениеВыполненоУспешно Тогда
		Параметры.Вставить("ТребуетсяПерезапуск", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ИспользуетсяСервисЭлектронныхТрудовыхКнижек()
		И ТарификацияБП.РазрешенУчетЗарплаты() И БухгалтерскийУчетПереопределяемый.ВедетсяУчетЗарплатыКадров() = 0
		И ПолучитьФункциональнуюОпцию("ВестиУчетЮридическогоЛица") Тогда
		Константы.ВедетсяУчетЗарплатыКадров.Установить(Истина);
		УчетЗарплаты.ВключитьПодсистемуУчетаЗарплатыИКадров(Ложь, Ложь);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступныйВидОрганизации() Тогда
		Параметры.Вставить("ИспользуетсяНедоступныйВидОрганизации", Истина);
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяСистемаНалогообложения() Тогда
		Параметры.Вставить("ИспользуетсяНедоступнаяСистемаНалогообложения", Истина);
	КонецЕсли;
	
	Если ТарификацияБПВызовСервераПовтИсп.ИспользуетсяНедоступнаяФункциональность() Тогда
		Параметры.Вставить("ИспользуетсяНедоступнаяФункциональность", Истина);
		Если (ОбщегоНазначенияБП.ЭтоБизнесСтарт() Или ТарификацияБП.РежимОтладки())
			И ТарификацияБП.ВозможнаВыборочнаяБлокировка() Тогда
			Параметры.Вставить("ВыборочнаяБлокировкаНедоступнойФункциональности", Истина);
			СкрытьПредупреждениеОНедоступныхДокументах = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПрограммы", "СкрытьПредупреждениеОНедоступныхДокументах", Ложь);
			Параметры.Вставить(
				"СкрытьПредупреждениеОНедоступныхДокументах",
				СкрытьПредупреждениеОНедоступныхДокументах);
			ТарификацияБП.УстановитьПриНеобходимостиЗначениеОпцииВыборочнаяБлокировка(Истина);
		Иначе
			ТарификацияБП.УстановитьПриНеобходимостиЗначениеОпцииВыборочнаяБлокировка(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыНачалаРаботы(Параметры);
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НадежностьБанков.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	ДанныеСервисаРегистрации.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	ПерсонализированныеПредложенияСервисов.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	Обработки.ОтправкаЗаявокВSmartway.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбщее.Измерения.Владелец);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПодчиненныхОбъектов
//
Процедура ПриОпределенииПодчиненныхОбъектов(ПодчиненныеОбъекты) Экспорт

	ПодчиненныйОбъект = ПодчиненныеОбъекты.Добавить();
	ПодчиненныйОбъект.ПодчиненныйОбъект = Метаданные.Справочники.КлючиАналитикиУчетаЗатрат;
	ПодчиненныйОбъект.ПоляСвязей = "Организация, СчетЗатрат, Подразделение, Субконто1, Субконто2, Субконто3";
	ПодчиненныйОбъект.ПриПоискеЗаменыСсылок = "Справочники.КлючиАналитикиУчетаЗатрат";
	ПодчиненныйОбъект.ВыполнятьАвтоматическийПоискЗаменСсылок = Истина;

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПослеЗаменыСсылок
//
Процедура ПослеЗаменыСсылок(Результат, ПараметрыВыполнения, ТаблицаПоиска) Экспорт

	Фильтр = Новый Структура("Метаданные", Метаданные.РегистрыСведений.АналитикаУчетаЗатрат);
	Если ТаблицаПоиска.НайтиСтроки(Фильтр).Количество() > 0 Тогда
		СписокКлючей = Новый Массив;
		ДубльОригиналАналитика = Новый Соответствие;
		Для Каждого ДубльОригинал Из ПараметрыВыполнения.УспешныеЗамены Цикл
		
			Если ТипЗнч(ДубльОригинал.Ключ) <> Тип("СправочникСсылка.КлючиАналитикиУчетаЗатрат") Тогда
				ДубльОригиналАналитика.Вставить(ДубльОригинал.Ключ, ДубльОригинал.Значение);
			Иначе
				СписокКлючей.Добавить(ДубльОригинал.Значение);
			КонецЕсли;
		
		КонецЦикла;
		Если ДубльОригиналАналитика.Количество() >0 Тогда
			ОбщегоНазначенияБП.ЗаменитьСсылки(ПараметрыВыполнения.УспешныеЗамены);
		КонецЕсли;
		Справочники.КлючиАналитикиУчетаЗатрат.ЗаменитьДублиКлючейАналитики(СписокКлючей);
	КонецЕсли;

КонецПроцедуры

Функция ЭтоИнтерфейсИнтеграцииСБанком() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком") И ИнтеграцияСБанкомДоступна();
	
КонецФункции

Функция ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Экспорт
	
	Возврат СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек()
		ИЛИ ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек();
	
КонецФункции

Функция ЭтоСтандартныйИнтерфейс() Экспорт
	
	Возврат Константы.ИнтерфейсТакси.Получить()
		ИЛИ Константы.ИнтерфейсТаксиПростой.Получить()
		ИЛИ Константы.ИнтерфейсВерсии77.Получить();
	
КонецФункции

Функция ИнтеграцияСБанкомДоступна() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() Или ТарификацияБП.РежимОтладки();
	
КонецФункции

Функция ЭтоПолныйИнтерфейс() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИнтерфейсТакси")
		ИЛИ ПолучитьФункциональнуюОпцию("ИнтерфейсБухгалтерия77");
	
КонецФункции

Функция ЭтоПростойИнтерфейс() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой");
	
КонецФункции

Процедура УстановитьДоступностьОплатыСервиса() Экспорт
	
	ОплатаДоступна = ОбщегоНазначения.РазделениеВключено()
		И ВРЕГ(Метаданные.Имя) = ВРЕГ("БухгалтерияПредприятияБазовая1")
		И Не ЭтоИнтерфейсИнтеграцииСБанком();
	
	Обработки.ОплатаСервисаБП.НастроитьИнтерфейсОплатыСервиса(ОплатаДоступна);
	
КонецПроцедуры

Функция ОбслуживающаяОрганизацияИспользуетУпрощенныйРежимПодключенияК1СОтчетности() Экспорт
	
	Возврат ЭтоБизнесСтарт() Или ЭтоЭТК();
	
КонецФункции

// Возвращает признак того, что это приложение "1С:БизнесСтарт" в сервисе
//
// Возвращаемое значение:
//   Булево - Истина, если это 1С:БизнесСтарт
//
Функция ЭтоБизнесСтарт() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено()
		И ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияБазовая1")
		И Не ТарификацияБП.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек();
	
КонецФункции

// Возвращает признак того, что это приложение "1С:Электронные трудовые книжки"
//
// Возвращаемое значение:
//   Булево - Истина, если это 1С:ЭТК
//
Функция ЭтоЭТК() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено()
		И ТарификацияБП.РазрешенТолькоИнтерфейсЭлектронныхТрудовыхКнижек();
	
КонецФункции

Функция ЭтоВитринаБизнесСтарта() Экспорт
	
	Возврат (Найти(ВРег(ПолучитьНавигационнуюСсылкуИнформационнойБазы()), "1CBIZ") > 0);
	
КонецФункции

// Уничтожает временные таблицы менеджера временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно уничтожить.
//  СписокТаблиц			 - Строка, Массив			 - имена временных таблиц для уничтожения, разделенные запятыми. Если параметр не установлен - все таблицы.
//  ИсключаяТаблицы			 - Строка, Массив			 - имена временных таблиц, которые нужно оставить, разделенные запятыми.
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СписокТаблиц = Неопределено, ИсключаяТаблицы = Неопределено) Экспорт
	
	Если ИсключаяТаблицы <> Неопределено Тогда
		МассивИсключаемыхТаблиц = ?(ТипЗнч(ИсключаяТаблицы) = Тип("Массив"), ИсключаяТаблицы, СтрРазделить(ИсключаяТаблицы, ","));
	Иначе
		МассивИсключаемыхТаблиц = Новый Массив();
	КонецЕсли;
	
	Если СписокТаблиц <> Неопределено Тогда
		МассивТаблиц = ?(ТипЗнч(СписокТаблиц) = Тип("Массив"), СписокТаблиц, СтрРазделить(СписокТаблиц, ","));
	Иначе
		МассивТаблиц = Новый Массив();
		Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если МассивИсключаемыхТаблиц.Найти(Таблица.ПолноеИмя) = Неопределено Тогда
				МассивТаблиц.Добавить(Таблица.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Формирует список временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно получить.
// 
// Возвращаемое значение:
//  Массив - Временные таблицы, находящиеся в менеджере.
//
Функция СписокВременныхТаблиц(МенеджерВременныхТаблиц) Экспорт

	СписокВременныхТаблиц = Новый Массив;
	
	Для каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		СписокВременныхТаблиц.Добавить(Таблица.ПолноеИмя);
	КонецЦикла; 
	
	Возврат СписокВременныхТаблиц;

КонецФункции

// Возвращает форматированную строку с подсвеченной частью в тексте
//
// Параметры:
//   ИсходнаяСтрока - Строка
//   СтрокаПоиска   - Строка
//
// Возвращаемое значение:
//   ФорматированнаяСтрока
//
Функция ПодсветитьСтрокуПоиска(ИсходнаяСтрока, СтрокаПоиска, ЦветУспешногоПоиска = Неопределено) Экспорт
	
	// Для каждой строки результата формируем представление, аналогично платформенному.
	ПредставлениеСтроки = Новый Массив;
	ОсновнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ВыделяемаяЧасть= СтрокаПоиска;
	ШрифтВыделения = Новый Шрифт(,,Истина);
	
	Если ЦветУспешногоПоиска = Неопределено Тогда
		ЦветВыделения = ЦветаСтиля.ЦветУспешногоПоиска;
	Иначе
		ЦветВыделения = ЦветУспешногоПоиска;
	КонецЕсли;
	
	// Находим и выделяем цветом часть строки, которая была введена пользователем.
	Поз = СтрНайти(ВРег(ОсновнаяСтрока), ВРег(СтрокаПоиска),, 1);
	ВыделяемаяПодстрока = Сред(ОсновнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
	ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
	
	// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
	Если Поз = 1 Тогда
		// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ОсновнаяСтрока, 
			СтрДлина(ОсновнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
	ИначеЕсли Поз = СтрДлина(ОсновнаяСтрока) Тогда
		// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ОсновнаяСтрока, Поз-1)));
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
	Иначе
		// Часть введенной пользователем строки находится в середине, значит оставшуюся строку нужно искать в начале и в конце.
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ОсновнаяСтрока, Поз-1)));
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Сред(ОсновнаяСтрока, Поз + СтрДлина(ВыделяемаяЧасть))));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеСтроки);
	
КонецФункции

// См. ИнтеграцияСТехнологиейСервиса.ПриОпределенииИсключенийНеразделенныхДанных.
Процедура ПриОпределенииИсключенийНеразделенныхДанных(Исключения) Экспорт
	
	// Намеренно отключаем проверку изменения неразделенного объекта из разделенного сеанса.
	Исключения.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбщее);
	
КонецПроцедуры

// Возвращает текущую дату сеанса на сервере.
//
// Возвращаемое значение:
//	Дата - текущая дата сеанаса на сервере.
//
Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	// Система взаимодействия может быть недоступна по разным причинам,
	// но при этом это не должно мешать запускать сеанс подключения к базе данных.
	Попытка
		ОповещенияПлатформыСамозанятые.ДобавитьПараметрыЧата(Параметры);
		УведомленияОтФНСАУСН.ДобавитьПараметрыЧата(Параметры);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Система взаимодействия'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает значение перечисления по его имени.
// Предназначена для использования в случаях, когда значение перечисления приходит из внешних систем
// и может отсутствовать в текущей конфигурации, из-за чего прямое обращение к нему по имени небезопасно.
//
// Параметры:
//	ИмяПеречисления - Строка - Имя перечисления в метаданных.
//	ИмяЗначения - Строка - Имя значения перечисления.
//
// Возвращаемое значение:
//	ПеречислениеСсылка или Неопределено, если значение не найдено.
//
Функция НайтиЗначениеПеречисления(ИмяПеречисления, Знач ИмяЗначения) Экспорт

	МетаданныеПеречисления = Метаданные.Перечисления.Найти(ИмяПеречисления);
	Если МетаданныеПеречисления = Неопределено Тогда
		// Нет такого перечисления.
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяЗначения = ВРег(ИмяЗначения);
	
	Если ИмяЗначения = "ПУСТАЯССЫЛКА" Тогда
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
	КонецЕсли;
	
	Для каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		Если ВРег(МетаданныеЗначения.Имя) = ИмяЗначения Тогда
			Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции 

#Область РаботаСХранилищемДанных

// Записывает данные в хранилище.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка
//
//  Данные  - Произвольный - Данные помещаемые хранилище. Неопределено - удаляет все данные.
//             Для удаления данных по ключу следует использовать процедуру УдалитьДанныеИзХранилища.
//  Ключ    - Строка       - Ключ сохраняемых настроек
//                           Ключ должен соответствовать правилам, установленным для идентификаторов:
//                           * Первым символом ключа должна быть буква или символ подчеркивания (_).
//                           * Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).
Процедура ЗаписатьДанныеВХранилище(Владелец, Данные, Ключ) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.'"));
	
	ХранилищеДанных = РегистрыСведений.ХранилищеДанных.СоздатьМенеджерЗаписи();
	ХранилищеДанных.Владелец = Владелец;
	ХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если ХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = ХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			ХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения = Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			ХранилищеДанных.Владелец = Владелец;
			ХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		ХранилищеДанных.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные из хранилища.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка
//  Ключи       - Строка - Содержит список имен сохраненных данных, указанных через запятую.
// 
// Возвращаемое значение:
//  Произвольный, Структура, Неопределено - Данные из хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределено.
//
Функция ПрочитатьДанныеИзХранилища(Владелец, Ключи) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.'"));
	
	Результат = Новый Структура(Ключи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанных.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ХранилищеДанных КАК ХранилищеДанных
	|ГДЕ
	|	ХранилищеДанных.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Удаляет данные из хранилища.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка
//  Ключи    - Строка - Содержит список имен удаляемых данных, указанных через запятую. 
//             Неопределено - удаляет все данные.
//
Процедура УдалитьДанныеИзХранилища(Владелец, Ключи = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.'"));
	
	ХранилищеДанных = РегистрыСведений.ХранилищеДанных.СоздатьМенеджерЗаписи();
	
	Отбор = Новый Структура("Владелец", Владелец);
	ХранилищеДанных.Владелец = Владелец;
	ХранилищеДанных.Прочитать();
	Если ТипЗнч(ХранилищеДанных.Данные) = Тип("ХранилищеЗначения") Тогда
		ДанныеДляСохранения = ХранилищеДанных.Данные.Получить();
		Если Ключи <> Неопределено И ТипЗнч(ДанныеДляСохранения) = Тип("Структура") Тогда
			СписокКлючей = СтрРазделить(Ключи, ",", Ложь);
			Если ХранилищеДанных.Выбран() И СписокКлючей.Количество() > 0 Тогда
				Для каждого КлючДляУдаления Из СписокКлючей Цикл
					Если ДанныеДляСохранения.Свойство(КлючДляУдаления) Тогда
						ДанныеДляСохранения.Удалить(КлючДляУдаления);
					КонецЕсли;
				КонецЦикла;
				ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
				ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
				ХранилищеДанных.Записать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеДанных.Удалить();
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияJSON

// Преобразует полученные данные в строку формата JSON.
// Для значений с типом, не поддерживаемым при сериализации, будет вызвана функция преобразования ПреобразованиеЗначенийJSON.
// Перед обработкой значений новых типов следует модифицировать функцию преобразования.
//
// Параметры:
//  Данные - Произвольный - данные для сериализации.
//
// Возвращаемое значение:
//   Строка - сериализованные данные в формате JSON.
//
Функция ЗначениеВСтрокуJSON(Значение, ПараметрыЗаписиJSON = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ПараметрыЗаписиJSON <> Неопределено Тогда
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Иначе
		ЗаписьJSON.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, , "ПреобразованиеЗначенийJSON", ОбщегоНазначенияБП);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция НовыйРеквизитыПлатежаУФЭБС() Экспорт
	
	// Входящие данные функци УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС()
	
	Возврат Новый Структура(
		// Обязательные поля структуры
		"ТекстПолучателя,
		|НомерСчетаПолучателя,
		|НаименованиеБанкаПолучателя,
		|БИКБанкаПолучателя,
		|СчетБанкаПолучателя,
		|ИндексПлатежногоДокумента,
		// Дополнительные поля структуры
		|СуммаЧислом,
		|НазначениеПлатежа,
		|ИННПолучателя,
		|ИННПлательщика,
		|СтатусСоставителя,
		|КПППолучателя,
		|КодБК,
		|КодОКТМО,
		|ПоказательОснования,
		|ПоказательПериода,
		|ПоказательНомера,
		|ПоказательДаты,
		|ПоказательТипа,
		// Прочие дополнительные поля
		|ФамилияПлательщика,
		|ИмяПлательщика,
		|ОтчествоПлательщика,
		|АдресПлательщика,
		|ИдентификаторНачисления,
		|Ссылка");
	
КонецФункции

// Преобразует (десериализует) переданную строку формата JSON в структуру.
// Имена свойств переданного объекта должны соответствовать требованиям к ключам структуры.
// При невозможности десериализации будет выдано исключение.
//
// Параметры:
//  Строка           - Строка - десериализуемое значение
//  СвойстваТипаДата - Строка, Массив из Строка, ФиксированныйМассив из Строка - имена свойств JSON,
//                     для которых нужно вызывать восстановление даты из строки в формате ISO 8601
// 
// Возвращаемое значение:
//  Структура - результат десериализации
//
Функция СтруктураИзСтрокиJSON(Строка, СвойстваТипаДата = Неопределено) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Возврат ПрочитатьJSON(ЧтениеJSON, , СвойстваТипаДата, ФорматДатыJSON.ISO);
	
КонецФункции

// Преобразует значение даты, сериализованное по ISO 8601, в значение типа Дата
//
// Параметры:
//  ДатаСтрокой - Строка - дата в формате ISO 8601
// 
// Возвращаемое значение:
//  Дата - десериализованная дата; при невозможности десериализовать - пустая дата
//
Функция ДесериализоватьДатуISO(ДатаСтрокой) Экспорт
	
	Попытка
		Дата = ПрочитатьДатуJSON(ДатаСтрокой, ФорматДатыJSON.ISO);
	Исключение
		Возврат '0001-01-01';
	КонецПопытки;
	
	Возврат Дата;
	
КонецФункции

#КонецОбласти

#Область ОчередьЗаданий

// Планирует отложенное выполнение метода с использованием подсистемы ОчередьЗаданий.
// Метод должен быть зарегистрирован в подсистеме ОчередьЗаданий -
// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
// Следует применять для событий, вызванных действиями пользователя:
// задания планируются в эксклюзивную очередь.
//
// Предполагается однократное выполнение в течение указанного интервала:
// если выполнение уже запланировано на более ранний срок, то повторно запланировано не будет.
//
// Параметры:
//  ИмяМетода - Строка
//  Интервал  - Число - число секунд, через который можно выполнять метод.
//
Процедура ЗапланироватьВыполнение(ИмяМетода, Интервал) Экспорт
	
	ОписаниеЗадания = Новый Структура;
	ОписаниеЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ОписаниеЗадания.Вставить("ИмяМетода",     ИмяМетода);
	ОписаниеЗадания.Вставить("Использование", Истина);
	
	ЗапланированныйМоментЗапуска = ТекущаяДатаСеанса() + Интервал;
	
	Для Каждого Задание Из ОчередьЗаданий.ПолучитьЗадания(ОписаниеЗадания) Цикл
		Если Задание.ЗапланированныйМоментЗапуска <= ЗапланированныйМоментЗапуска
			И Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеЗадания.Вставить("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска);
	ОписаниеЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	ОчередьЗаданий.ДобавитьЗадание(ОписаниеЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЧастоЗадаваемыеВопросы

// Возвращает таблицу новостей из ленты "Часто задаваемые вопросы"
// Новости отбираются по дате публикации и важности
//
// Параметры:
//   МаксимальноеКоличествоНовостей - Число - Максимальное количество новостей их ленты
//
// Возвращаемое значение:
//   ТаблицаЗначений
//     * Наименование  - Строка
//     * ТекстНовости  - Строка
//     * ССылкаНаРолик - ФорматированнаяСтрока
//
Функция ЛентаНовостейЧастоЗадаваемыеВопросы(МаксимальноеКоличествоНовостей) Экспорт
	
	ТаблицаНовостей = Новый ТаблицаЗначений;
	
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		
		ЛентаНовостей = ИнтернетПоддержкаПользователейБП.ЛентаНовостейЧастоЗадаваемыеВопросы();
		Если ЗначениеЗаполнено(ЛентаНовостей) Тогда
			
			ПараметрыЛенты = Новый Структура;
			ПараметрыЛенты.Вставить("ВариантОтбора", ИнтернетПоддержкаПользователейБП.ВариантОтбораПоЛентеНовостей());
			ПараметрыЛенты.Вставить("ЛентаНовостей", ЛентаНовостей);
			ПараметрыЛенты.Вставить("КоличествоНовостей", МаксимальноеКоличествоНовостей);
			ПараметрыЛенты.Вставить("ПорядокСортировки", ИнтернетПоддержкаПользователейБП.ПорядокЧастоЗадаваемыхВопросов());
			
			Справочники.Новости.ПолучитьСписокНовостей(
				ТаблицаНовостей,
				Пользователи.ТекущийПользователь(),
				ПараметрыЛенты,
				Новый Массив);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаНовостей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ТаблицаНовостей.Скопировать(, "Наименование, ТекстНовости");
	Результат.Колонки.Добавить("СсылкаНаРолик", Новый ОписаниеТипов("ФорматированнаяСтрока"));
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		ТекущаяСтрока.СсылкаНаРолик = СсылкаНаРолик(ТекущаяСтрока.ТекстНовости);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаРолик(ТекстНовости)
	
	ПозицияНачало = СтрНайти(ТекстНовости, "<a href");
	ПозицияКонец = СтрНайти(ТекстНовости, "</a>");
	
	Если ПозицияНачало = 0 Или ПозицияКонец = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Сред(ТекстНовости, ПозицияНачало, ПозицияКонец + 4));
	
КонецФункции

#КонецОбласти

#Область ГлобальныеПараметрыУчета

// Использование глобального механизма подразумевает, что именованные разрезы ("параметры учета") включаются или выключаются
// синхронно на некотором предопределенном наборе счетов (описанном в ПолучитьСоответствиеСубконтоПараметрамУчета).
// Его не следует применять для настройки аналитики на конкретном счете - в этом случае следует использовать напрямую методы плана счетов.

// Конструктор коллекции глобальных параметров учета.
// Коллекция заполняется текущими значениями, установленными для информационной базы (области).
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = Новый Структура;
	ПараметрыУчета.Вставить("ВестиПартионныйУчет",                                      Ложь);
	ПараметрыУчета.Вставить("СкладскойУчет",                                            0);
	ПараметрыУчета.Вставить("ИспользоватьОборотнуюНоменклатуру",                        Ложь);
	ПараметрыУчета.Вставить("РазделятьПоСтавкамНДС",                                    Ложь);
	ПараметрыУчета.Вставить("ВестиУчетПоСтатьямДДС",                                    Ложь);
	ПараметрыУчета.Вставить("ВестиУчетНДСПоСпособам",                                   Ложь);
	ПараметрыУчета.Вставить("ВестиРасчетыПоСтрахованиюОтНесчастныхСлучаевПоРаботникам", Ложь);
	
	//Работники
	ПараметрыУчета.Вставить("ВестиУчетПоРаботникам",
		?(БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно(), 0, 1));
	ПараметрыУчета.Вставить("УчетЗарплатыИКадровВоВнешнейПрограмме",
		БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме());
	ПараметрыУчета.Вставить("КадровыйУчет", БухгалтерскийУчетПереопределяемый.ВедетсяКадровыйУчет());
	ПараметрыУчета.Вставить("ВедетсяУчетЗарплатыКадров", БухгалтерскийУчетПереопределяемый.ВедетсяУчетЗарплатыКадров());
	
	// Элементы затрат
	Для Каждого ИмяПараметра Из ЭлементыЗатратНастройкаПараметровУчета.ПараметрыУчета() Цикл
		ПараметрыУчета.Вставить(ИмяПараметра, Ложь);
	КонецЦикла;
	ЭлементыЗатратНастройкаПараметровУчета.ПрочитатьЗначенияПараметровУчета(ПараметрыУчета);
	
	// Запасы
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Товары);
	ВестиСкладскойУчет = Ложь;
	ВестиСуммовойУчетПоСкладам = Ложь;
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		ВидСубконто = БУ["ВидСубконто" + НомерСубконто];
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			ВестиСкладскойУчет = Истина;
			ВестиСуммовойУчетПоСкладам = БУ["ВидСубконто" + НомерСубконто + "Суммовой"];
		КонецЕсли;

	КонецЦикла;
	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);
	
	//Розница
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		ВидСубконто = БУ["ВидСубконто" + НомерСубконто];
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			ПараметрыУчета.ИспользоватьОборотнуюНоменклатуру = Истина;
		ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
			ПараметрыУчета.РазделятьПоСтавкамНДС = Истина;
		КонецЕсли;

	КонецЦикла;
	
	//Раздельный учет НДС
	ПараметрыУчета.ВестиУчетНДСПоСпособам =
		ПараметрУчетаПоСубконтоСчета(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям, "СпособыУчетаНДС");

	//Денежные средства
	ПараметрыУчета.ВестиУчетПоСтатьямДДС =
		ПараметрУчетаПоСубконтоСчета(ПланыСчетов.Хозрасчетный.Касса, "СтатьиДвиженияДенежныхСредств");
	
	// Страхование от несчастных случаев
	ПараметрыУчета.ВестиРасчетыПоСтрахованиюОтНесчастныхСлучаевПоРаботникам =
		ПараметрУчетаПоСубконтоСчета(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников, "РаботникиОрганизаций");
		
	Возврат ПараметрыУчета;

КонецФункции


// Приводит аналитику плана счетов и некоторые другие глобальные свойства в соответствии с переданными глобальными параметрами учета.
// Порядок использования:
// 1. Прочитать все значения глобальных параметров
// 2. Изменить нужные
// 3. Вызвать этот метод
//
// Параметры:
//  ПараметрыУчета  - см. ОпределитьПараметрыУчета
//  ИзмененыПараметрыСубконто - неиспользуемый параметр; оставлен для совместимости
//  Отказ - неиспользуемый параметр; оставлен для совместимости
//
Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто = Ложь, Отказ = Ложь) Экспорт
	
	ПланДействий = ПолучитьДействияИзмененияСубконто(ПараметрыУчета);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПланыСчетов.Хозрасчетный.НастроитьСубконтоПоПлануДействий(ПланДействий);
		
		БухгалтерскийУчетПереопределяемый.УстановитьПараметрыУчетаРасчетовПоЗарплате(?(ПараметрыУчета.ВестиУчетПоРаботникам = 1, Ложь, Истина));
		БухгалтерскийУчетПереопределяемый.УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 1, Истина, Ложь));
		БухгалтерскийУчетПереопределяемый.УстановитьНастройкиКадровогоУчета(ПараметрыУчета.КадровыйУчет, ?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 0, Истина, Ложь));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			, // Метаданные
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Описывает план действий по приведению аналитики плана счетов в соответствии с переданными глобальными параметрами учета.
//
// Параметры:
//  ГлобальныеПараметрыУчета - см. ОпределитьПараметрыУчета
// 
// Возвращаемое значение:
//  см. ПланыСчетов.Хозрасчетный.НовыйПланДействийИзмененияСубконто
//
Функция ПолучитьДействияИзмененияСубконто(ГлобальныеПараметрыУчета) Экспорт
	
	ПараметрыУчета = НовыйСлужебныеПараметрыУчета(ГлобальныеПараметрыУчета);
	
	ТребованияУчета = ПланыСчетов.Хозрасчетный.НовыйТребованияАналитикиУчета();
	ЗаполнитьТребованияГлобальныеРазрезыУчета(ТребованияУчета, ПараметрыУчета);
	
	ПланДействий = ПланыСчетов.Хозрасчетный.НовыйПланДействийИзмененияСубконто();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПланДействийНастроитьСубконто(ПланДействий, ТребованияУчета, Истина);
	
	Возврат ПланДействий;

КонецФункции

// Определяет требования к настройке плана счетов исходя из свойств глобального механизма настройки разрезов учета.
//
// Параметры:
//  Требования - см. ПланыСчетов.Хозрасчетный.НовыйТребованияАналитикиУчета
//  ПараметрыУчета - см. НовыйСлужебныеПараметрыУчета
//
Процедура ЗаполнитьТребованияГлобальныеРазрезыУчета(Требования, ПараметрыУчета) Экспорт
	
	ОписаниеГлобальныхРазрезовУчета = ПолучитьСоответствиеСубконтоПараметрамУчета();
	
	Для Каждого ОписаниеРазделаУчета Из ОписаниеГлобальныхРазрезовУчета Цикл
		
		// Проверим, интересен ли этот раздел
		Если Не РазделУчетаИспользуетПараметрыУчета(ОписаниеРазделаУчета, ПараметрыУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаРаздела = СчетаРазделаУчета(ОписаниеРазделаУчета);
		
		Для Каждого Счет Из СчетаРаздела Цикл
			
			// Для отдельных счетов раздела параметры могут переопределяться константами
			ЗначенияРелевантныхПараметровУчета = ЗначенияРелевантныхПараметровУчета(ПараметрыУчета, ОписаниеРазделаУчета, Счет);
			
			Для Каждого ОписаниеСубконто Из ОписаниеРазделаУчета.Субконто Цикл
				
				// В свойстве "Параметр" хранится правило определения, нужно ли это субконто в счетах раздела
				ИспользованиеСубконто = ТребуетсяСвойствоПланаСчетов(
					ОписаниеСубконто.Параметр,
					ЗначенияРелевантныхПараметровУчета);
					
				Если ИспользованиеСубконто = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Требование = Требования.Добавить();
				Требование.Счет            = Счет;
				Требование.РазрезАналитики = ОписаниеСубконто.Вид;
				Требование.Запрещен        = (ИспользованиеСубконто < 0);
				
				Если Требование.Запрещен Тогда
					Продолжить;
				КонецЕсли;
				
				ИспользованиеТолькоОбороты = ТребуетсяСвойствоПланаСчетов(
					ОписаниеСубконто.ТолькоОбороты,
					ЗначенияРелевантныхПараметровУчета);
					
				ТернарноеНе = -1;
				Требование.УчетОстатков = ТернарноеНе * ИспользованиеТолькоОбороты;
				
				Для Каждого ПризнакУчета Из ПланыСчетов.Хозрасчетный.ВидыУчетаСубконто() Цикл
					Требование[ПризнакУчета] = ТребуетсяСвойствоПланаСчетов(
						ОписаниеСубконто[ПризнакУчета],
						ЗначенияРелевантныхПараметровУчета);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

// Записывает данные бизнес-статистики в Пульт и Бизнес-статистику 1С-Фреш.
//
// Параметры:
//   ИмяОперации - Строка - имя ключевой операции бизнес-статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации) Экспорт
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, 1);
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ ПРИ ЗАПУСКЕ

Функция ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения)

	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Интерфейс77 = Константы.ИнтерфейсВерсии77.Получить();
	
	Если НЕ Интерфейс77 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаСменыИнтерфейса = ХранилищеОбщихНастроек.Загрузить(ВРег("ДатаСменыИнтерфейса"));
	Если ЗначениеЗаполнено(ДатаСменыИнтерфейса) 
		И ТипЗнч(ДатаСменыИнтерфейса) = Тип("Дата") 
		И НачалоДня(ТекущаяДатаСеанса()) >= НачалоДня(ДатаСменыИнтерфейса) Тогда
		ДнейСПоследнегоПоказа = (НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(ДатаСменыИнтерфейса)) / (60*60*24);
	Иначе
		ДнейСПоследнегоПоказа = 99999;
	КонецЕсли; 
	
	НадоПредлагать = (Интерфейс77 И ДнейСПоследнегоПоказа >= 7);
	
	Если НадоПредлагать Тогда
		 ВариантПредложения = ?(ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси, 
		 	"ИзменитьКомандныйИнтерфейс", "ВключитьСтандартныйИнтерфейс");
	КонецЕсли;
	
	Возврат НадоПредлагать;

КонецФункции

Функция ПредлагатьОбновитьВерсиюПрограммы(Параметры)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ЭтоАдминистраторСистемы", Пользователи. ЭтоПолноправныйПользователь(, Истина));
	ДатаТекущейВерсии = Константы.ДатаТекущейВерсии.Получить();
	НадоПредлагать = ЗначениеЗаполнено(ДатаТекущейВерсии) 
		И ТекущаяДатаСеанса() > ДобавитьМесяц(ДатаТекущейВерсии, 3);
	Возврат НадоПредлагать;
	
КонецФункции

// Возвращает имя внешней обработки путеводителя по демо-базе или пустое значение, если путеводитель запускать не требуется
// 
Функция ИмяОбработкиПутеводительПоДемоБазе()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказыватьПриСтарте = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПутеводительПоДемоБазе", "Показывать", Истина);
	
	Если НЕ ПоказыватьПриСтарте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", "ПутеводительПоДемонстрационнойБазе");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Выборка.Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает значение: требуется ли запускать обработку "Свертка информационной базы" или нет.
// 
Функция ТребуетсяОткрытьСверткуБазы()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	ПоказыватьПриСтарте	= Ложь;
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		Если Статус <> Неопределено Тогда
			ПоказыватьПриСтарте	= Статус.ПоказыватьПриСтарте;
		КонецЕсли;
	Иначе
		ПоказыватьПриСтарте	= Ложь;
	КонецЕсли;
	
	Возврат ПоказыватьПриСтарте;
	
КонецФункции

Функция ОткрыватьДополнительныеОкнаПриЗапуске() Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		// Дополнительные окна предназначены только для регулярных пользователей
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организация.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организация";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСведенияОРекомендуемойВерсииПлатформы(Параметры)
	
	КонфигурацияМоделиСервиса = ОбщегоНазначения.РазделениеВключено()
		Или ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме");
	
	Если КонфигурацияМоделиСервиса Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(,Истина) Тогда
		
		РекомендуемаяВерсия = "8.3.8";
		РекомендуемаяВерсияДляПроверки = "8.3.8.0";
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		СообщитьОРекомендуемойВерсииПлатформы =
				ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияДляПроверки) < 0;
		
		Если СообщитьОРекомендуемойВерсииПлатформы Тогда
			Параметры.Вставить("СообщитьОРекомендуемойВерсииПлатформы", Ложь);
			Параметры.Вставить("РекомендуемаяВерсияПлатформы", РекомендуемаяВерсия);
			Параметры.Вставить("ТекстСообщенияОРекомендуемойВерсииПлатформы",
					НСтр("ru='Для работы с версией 3.0.44 конфигурации ""Бухгалтерии предприятия"" необходимо использовать версию платформы 8.3.8'"));
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНачалаРаботы(Параметры)
	
	ПоказыватьБыстрыйСтарт = ПолучитьФункциональнуюОпцию("НачалоРаботы") 
		И ОбщегоНазначенияБПВызовСервера.ПроверитьНаличиеДоступныхОрганизаций();
		
	Параметры.Вставить("ПоказыватьБыстрыйСтарт", ПоказыватьБыстрыйСтарт);
	
КонецПроцедуры

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//   ИмяПараметра           - строка с именем параметра сеанса.
//   УстановленныеПараметры - массив всех установленных параметров сеанса.
//
Процедура УстановитьСтатистикуОткрытияФорм(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СтатистикаОткрытияФорм" Тогда
		ПараметрыСеанса.СтатистикаОткрытияФорм = Новый ФиксированнаяСтруктура;
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры:
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено);
	
КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить заполнен ли реквизит в документе.
//
// Параметры:
//  ИмяРеквизита - Строка - Строковое имя искомого реквизита.
//  ДокументОбъект - ДокументОбъект - Объект, в котором проверяется заполненность реквизита.
//  МетаданныеДокумента - Метаданные - Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит с указанным именем не заполнен в документе.
//
Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

Функция ЕстьНезаполненныйРеквизитТабЧастиДокумента(ИмяРеквизита, СтрокаТабЧасти, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	Результат =
		ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

// Удаляет из списка проверяемых реквизитов табличные части, если хотя бы одна из них заполнена
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект - объект с табличными частями
//  ИменаТабличныхЧастей - Массив, Строка - Перечень имен проверяемых табличных частей
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
Процедура ИсключитьИзПроверкиОсновныеТабличныеЧасти(Объект, Знач ИменаТабличныхЧастей, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ТипЗнч(ИменаТабличныхЧастей) = Тип("Строка") Тогда
		ИменаТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТабличныхЧастей);
	КонецЕсли;
	
	ЕстьЗаписи = Ложь;
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		Если Объект[СокрЛП(ИмяТабличнойЧасти)].Количество() > 0 Тогда
			ЕстьЗаписи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаписи Тогда
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МассивНепроверяемыхРеквизитов.Добавить(СокрЛП(ИмяТабличнойЧасти));
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Удаляет из списка проверяемых реквизитов неиспользуемые табличные части и все их реквизиты
//
// Параметры:
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
//  НеИспользуемыеТабличныеЧасти - Массив - Перечень имен неиспользуемых табличных частей
Процедура ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти) Экспорт
	
	// Исключим из проверки сами списки
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти);
	
	// Исключим из проверки колонки списков
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Для Каждого ИмяТабличнойЧасти Из НеИспользуемыеТабличныеЧасти Цикл
		ПрефиксРеквизита = ИмяТабличнойЧасти + ".";
		ДлинаПрефикса = СтрДлина(ПрефиксРеквизита);
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если СтрДлина(ПроверяемыйРеквизит) > ДлинаПрефикса 
			   И Лев(ПроверяемыйРеквизит, ДлинаПрефикса) = ПрефиксРеквизита Тогда
			   МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеТабличныеЧасти(Объект, ИменаТабличныхЧастей) Экспорт
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
		
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличнаяЧасть.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение второго параметра в случае, если значение первого параметра NULL.
// В противном случае будет возвращено значение первого параметра
//
// Параметры:
//  ПроверяемоеЗначение  - произвольный тип - проверяемое значение
//  ВозвращаемоеЗначение - произвольный тип - возвращаемое значение, если значение ПроверяемоеЗначение есть NULL
//
// Возвращаемое значение:
//  ПроверяемоеЗначение - если его значение не NULL, ВозвращаемоеЗначение - в ином случае.
//
Функция ЕстьNull(Знач ПроверяемоеЗначение, ВозвращаемоеЗначение) Экспорт
	
	Если ПроверяемоеЗначение = Null Тогда
		Возврат ВозвращаемоеЗначение;
	Иначе
		Возврат ПроверяемоеЗначение;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Устарела. Необходимо использовать функцию БСП ОбщегоНазначения.ДатаПользователя().
//
// Возвращаемое значение:
//	Дата - рабочая дата пользователя.
//
Функция ПолучитьРабочуюДату() Экспорт
	
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецФункции

// Определяет конфигурации с основной функциональностью
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоВерсияСОсновнойФункциональностью() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() ИЛИ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// Возвращает признак использования функциональности.
//
// Параметры:
//  ИмяФункциональности - Строка - имя проверяемой функциональности.
//
// Возвращаемое значение:
//  Булево
//
Функция ПолучитьЗначениеФункциональности(Знач ИмяФункциональности) Экспорт
	
	ИмяФункциональности = Врег(ИмяФункциональности);
	Если ИмяФункциональности = ВРег("ПользовательУправляетСчетамиУчета") Тогда
		Результат = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоБазоваяВерсияКонфигурации") Тогда
		Результат = ВариантыПриложений.ЭтоБазоваяВерсия();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоПрофВерсияКонфигурации") Тогда
		Результат = ВариантыПриложений.ЭтоВерсияПРОФ();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоКорпВерсияКонфигурации") Тогда
		Результат = ВариантыПриложений.ЭтоВерсияКОРП();
	ИначеЕсли Метаданные.ФункциональныеОпции.Найти(ИмяФункциональности) <> Неопределено Тогда
		Результат = ПолучитьФункциональнуюОпцию(ИмяФункциональности);
	Иначе
		Результат = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Описание изменений системы'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			СтрШаблон("Не найдена функциональная опция %1", ИмяФункциональности));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Замена ссылок по информационной базе

// Принимает Соответствие между замещаемыми ссылками и заменителями и заменяет ссылки по информационной базе
Процедура ЗаменитьСсылки(ПарыЗамен) Экспорт
	ДвиженияССубконтоИмя = ?(Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский,
		".RecordsWithExtDimensions", ".ДвиженияССубконто");
	
	ЗаменяемыеСсылки = Новый Массив;
	Для Каждого Пара Из ПарыЗамен Цикл
		ЗаменяемыеСсылки.Добавить(Пара.Ключ);
	КонецЦикла;
	РезультатыПоиска = НайтиПоСсылкам(ЗаменяемыеСсылки);
	// (.Ссылка: исходная ссылка; .Данные: ссылающийся объект; .Метаданные: метаданные ссылающегося объекта)
	КешПолей = Новый Соответствие;
 	Для Каждого Результат Из РезультатыПоиска Цикл
		Замещаемое = Результат.Ссылка;
		// объект, ссылающийся сам на себя не трогаем!
		Если Замещаемое = Результат.Данные Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗамещаемого = ТипЗнч(Замещаемое);
		Заменитель = ПарыЗамен[Результат.Ссылка];		
		
		Если ЭтоСсылочныйОбъектМетаданных(Результат.Метаданные) Тогда
			// обработка самого объекта
			ОбъектДанных = Результат.Данные.ПолучитьОбъект();
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Ссылка, Ref");
			ЗаменитьЗначение(ОбъектДанных, ИменаПолей, Замещаемое, Заменитель);
			// обработка табчастей объекта
			Для Каждого Табчасть Из Результат.Метаданные.ТабличныеЧасти Цикл
				ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
				Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
					ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
				КонецЦикла;
			КонецЦикла;
			// обработка стандартных табчастей объекта
			Если Метаданные.ПланыСчетов.Содержит(Результат.Метаданные) Или Метаданные.ПланыВидовРасчета.Содержит(Результат.Метаданные) Тогда
				Для Каждого Табчасть Из Результат.Метаданные.СтандартныеТабличныеЧасти Цикл
					ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
					Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
						ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ЗаписатьДанные(ОбъектДанных);
			ОбъектДанных = Неопределено;
			// обработка движений документа
			Если Метаданные.Документы.Содержит(Результат.Метаданные) Тогда
				Для Каждого Движение Из Результат.Метаданные.Движения Цикл
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						ДопТаблица = ДвиженияССубконтоИмя;
						Регистр = РегистрыБухгалтерии[Движение.Имя];
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
							ЗаменыЗначенийСубконто = Новый Соответствие();
							Для Каждого Субконто ИЗ Запись.СубконтоДт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоДт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
							ЗаменыЗначенийСубконто.Очистить();
							Для Каждого Субконто ИЗ Запись.СубконтоКт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоКт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
						КонецЦикла;
						
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
						
					Иначе
						Если Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
							Регистр = РегистрыНакопления[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
							Регистр = РегистрыСведений[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
							Регистр = РегистрыРасчета[Движение.Имя];
						КонецЕсли;
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
						КонецЦикла;
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
					КонецЕсли;
				КонецЦикла;
				// обработка последовательностей, включающих документ
				Для Каждого Последовательность Из Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(Результат.Метаданные) Тогда
						ИменаПолей = ИменаПолейСТипом(Последовательность.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Последовательности[Последовательность.Имя], Новый Структура("Регистратор", Результат.Данные));
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель);
						КонецЦикла;
						ЗаписатьДанные(Набор);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		// константы
		ИначеЕсли Метаданные.Константы.Содержит(Результат.Метаданные) Тогда
			Константы[Результат.Метаданные.Имя].Установить(Заменитель);
		// регистры сведений (необъектные таблицы)
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(Результат.Метаданные) Тогда
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей);
			Отборы = ОтборыРегистраСведений(Результат.Метаданные, Результат.Данные);
			Набор = НаборЗаписей(РегистрыСведений[Результат.Метаданные.Имя], Отборы);
			
			Таблица = Набор.Выгрузить();
			Набор.Очистить();
			ЗаписатьДанные(Набор);

			ЗаменитьЗначение(Таблица[0], ИменаПолей, Замещаемое, Заменитель);
			Для Каждого ИмяПоля Из ИменаПолей Цикл
				Если Отборы.Свойство(ИмяПоля) И Отборы[ИмяПоля] = Замещаемое Тогда
					Набор.Отбор[ИмяПоля].Установить(Заменитель);
				КонецЕсли
			КонецЦикла;
			Набор.Загрузить(Таблица);
			ЗаписатьДанные(Набор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаПолейСТипом(ИмяТаблицы, ТипДанных, КешПолейТаблиц=Неопределено, СтрокаИсключений=Неопределено)
	ИменаПолей = Новый Массив;
	
	ТекстЗапроса = СтрЗаменить("ВЫБРАТЬ Т.* ИЗ ТаблицаВыборки КАК Т ГДЕ Ложь", "ТаблицаВыборки", ИмяТаблицы);
	Если Неопределено<>КешПолейТаблиц Тогда
		ПоляТаблицы = КешПолейТаблиц.Получить(ИмяТаблицы);
		Если Неопределено=ПоляТаблицы Тогда
			Запрос = Новый Запрос(ТекстЗапроса);
			ПоляТаблицы = Запрос.Выполнить().Колонки;
			КешПолейТаблиц.Вставить(ИмяТаблицы, ПоляТаблицы);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		ПоляТаблицы = Запрос.Выполнить().Колонки;
	КонецЕсли;
	
	Исключения = Новый Структура(СтрокаИсключений);
	Для Каждого Поле Из ПоляТаблицы Цикл
		Если Поле.ТипЗначения.СодержитТип(ТипДанных) И Не Исключения.Свойство(Поле.Имя) Тогда
			ИменаПолей.Добавить(Поле.Имя);
		КонецЕсли;
	КонецЦикла;
	
    Возврат ИменаПолей;
КонецФункции

Процедура ЗаменитьЗначение(Данные, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено=Ложь)
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Если Данные[ИмяПоля] = Замещаемое Тогда
			Данные[ИмяПоля] = Заменитель;
			ЗначениеЗаменено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьДанные(Данные, Принудительно=Ложь)
	Если Данные.Модифицированность() Или Принудительно Тогда
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ОтборыРегистраСведений(МетаданныеРегистра, Запись)
	Отборы = Новый Структура;
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Отборы.Вставить("Период", Запись.Период);
	КонецЕсли;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Отборы.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
	КонецЦикла;
	Возврат Отборы;
КонецФункции

Функция НаборЗаписей(МенеджерРегистра, Отборы)
	Набор = МенеджерРегистра.СоздатьНаборЗаписей();
	Для Каждого Отбор Из Отборы Цикл
		Набор.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
	КонецЦикла;
	Набор.Прочитать();
	Возврат Набор;
КонецФункции

Функция ЭтоСсылочныйОбъектМетаданных(ОбъектМетаданных)
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Перечисления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		//ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОХРАНЕНИЕМ И ОТПРАВКОЙ ДОКУМЕНТОВ ПО ЭЛ.ПОЧТЕ

// Процедура формирует имя сохраняемого файла путем формирования представления документа и удаления из него символов "точка"
Процедура УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм, ИмяФайлаПоВходящимНомерам)
	
	Если НЕ КоллекцияПечатныхФорм.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	Если ЗначениеЗаполнено(ПечатнаяФорма.ИмяФайлаПечатнойФормы) Тогда
		// Имя файла уже задано ранее, не меняем его.
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		ПредставлениеДокументаДляПечатнойФормы = СформироватьЗаголовокПервичногоДокумента(
			ОбъектПечати.Значение, ПечатнаяФорма.СинонимМакета, ИмяФайлаПоВходящимНомерам);
			
		ПредставлениеДокументаДляПечатнойФормы = СтрЗаменить(ПредставлениеДокументаДляПечатнойФормы, ".", "");
		ИмяФайлаПечатнойФормы.Вставить(ОбъектПечати.Значение, ПредставлениеДокументаДляПечатнойФормы);
		
	КонецЦикла;
	
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	
КонецПроцедуры

Функция СформироватьЗаголовокПервичногоДокумента(Документ, НазваниеДокумента, ИмяФайлаПоВходящимНомерам)
	
	РеквизитыДокумента = РегистрыСведений.ДанныеПервичныхДокументов.ДанныеПервичногоДокумента(Документ);
	
	НазваниеВЗаголовокДокумента = НазваниеДокумента;
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		Если ИмяФайлаПоВходящимНомерам = Ложь Тогда
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.НомерРегистратора, Истина, Ложь);
			ДатаДокумента = РеквизитыДокумента.ДатаРегистратора;
		Иначе
			ДатаДокумента  = ?(ЗначениеЗаполнено(РеквизитыДокумента.Дата),
				РеквизитыДокумента.Дата,
				РеквизитыДокумента.ДатаРегистратора);
				
			НомерНаПечать = РеквизитыДокумента.Номер;
			
			Если Не ЗначениеЗаполнено(РеквизитыДокумента.Номер) Тогда
				НомерНаПечать = НСтр("ru = 'бн'");
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НазваниеВЗаголовокДокумента) Тогда
			НазваниеВЗаголовокДокумента = Документ.Метаданные().Синоним;
		КонецЕсли;
		
	Иначе
		
		МетаданныеДокумента = Документ.Метаданные();
		
		ЕстьРеквизитНомер = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеДокумента.СтандартныеРеквизиты, "Номер");
		Если ЕстьРеквизитНомер Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер, Дата");
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь);
		Иначе
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата");
			НомерНаПечать = НСтр("ru = 'бн'");
		КонецЕсли;
		
		ДатаДокумента = РеквизитыДокумента.Дата;
		
		Если Не ЗначениеЗаполнено(НазваниеВЗаголовокДокумента) Тогда
			НазваниеВЗаголовокДокумента = МетаданныеДокумента.Синоним;
		КонецЕсли;
		
	КонецЕсли;

	ЗаголовокДокумента = СтрШаблон(
		НСтр("ru = '%1 № %2 от %3 г.'"),
		НазваниеВЗаголовокДокумента,
		НомерНаПечать,
		Формат(ДатаДокумента, "ДФ='дд ММММ гггг'"));

	Возврат ЗаголовокДокумента;
	
КонецФункции


// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати,
			ПараметрыВывода = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыВывода) = Тип("Структура") И ПараметрыВывода.Свойство("НеПереопределятьИмяФайла") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПоВходящимНомерам = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВывода, "ИмяФайлаПоВходящимНомерам", Ложь);
	
	УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм, ИмяФайлаПоВходящимНомерам);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАТУСОМ ДОКУМЕНТОВ

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Основной реквизит формы документа.
//
// Возвращаемое значение:
//	Число - Индекс картинки.
//
Функция СостояниеДокумента(Объект) Экспорт
	
	РучнаяКорректировка = Неопределено;
	
	Если Объект.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Объект.РучнаяКорректировка Тогда
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 10;
			ИначеЕсли НЕ Объект.Проведен Тогда
				СостояниеДокумента = 9;
			Иначе
				СостояниеДокумента = 8;
			КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 2;
			ИначеЕсли Объект.Проведен Тогда
				СостояниеДокумента = 1;
			Иначе
				СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ПометкаУдаления Тогда
			СостояниеДокумента = 2;
		ИначеЕсли Объект.Проведен Тогда
			СостояниеДокумента = 1;
		Иначе
			СостояниеДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

#КонецОбласти

#Область СобытияЖурналаРегистрации

Функция СобытиеЖурналаРегистрацииПараметрыУчета() Экспорт

	Возврат НСтр("ru = 'Настройка параметров учета'", ОбщегоНазначения.КодОсновногоЯзыка())

КонецФункции

Функция СобытиеЖурналаРегистрацииОшибкаЗаписиОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Ошибка записи объекта'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

// Выполняет проверку данных информационной базы (проводок и договоров) на наличие ссылок на валюты.
//
// Параметры:
//  ПроверятьВсеВалюты - Булево - если Ложь, то валюты с пометкой на удаление не проверяются. Иначе проверяются все.
//
// Возвращаемое значение:
//   Булево      - Ложь, если нигде в учете валюты не используются, даже если существуют элементы справочника.
//
Функция ИспользуетсяВалютныйУчет(ПроверятьВсеВалюты = Ложь) Экспорт
	
	// Если идут обмены с другими базами, то считаем, что валюты могут быть в любой момент использованы.
	Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	// Если нет ни одной валюты, то нет и валютного учета.
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета"
	+ ?(ПроверятьВсеВалюты, "", "
	|	И НЕ Валюты.ПометкаУдаления");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	СуществующиеВалюты = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Проверяем использование валюты хотя бы в одной активной проводке.
	Запрос.УстановитьПараметр("СуществующиеВалюты", СуществующиеВалюты);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ИспользоватьВалютныйУчет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.ВалютаДт В (&СуществующиеВалюты)
	|			ИЛИ Хозрасчетный.ВалютаКт В (&СуществующиеВалюты))
	|	И Хозрасчетный.Активность";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем использование валюты хотя бы в одном элементе из наиболее вероятных справочников.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗагрузкаКурсовВалют
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК МестоИспользованияВалюты
	|ГДЕ
	|	МестоИспользованияВалюты.ВалютаВзаиморасчетов В (&СуществующиеВалюты)
	|	И НЕ МестоИспользованияВалюты.ПометкаУдаления";
	
	МестаИспользованияВалюты = Новый Структура;
	МестаИспользованияВалюты.Вставить("ДоговорыКонтрагентов", "ВалютаВзаиморасчетов");
	МестаИспользованияВалюты.Вставить("БанковскиеСчета",      "ВалютаДенежныхСредств");
	МестаИспользованияВалюты.Вставить("ТипыЦенНоменклатуры",  "ВалютаЦены");
	
	Для Каждого МестоИспользования Из МестаИспользованияВалюты Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ДоговорыКонтрагентов", МестоИспользования.Ключ);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВалютаВзаиморасчетов", МестоИспользования.Значение);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;

	// Поиск использования валют по всей информационной базе.
	ПропускаемыеТаблицы = Новый Массив;
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.БанковскиеСчета);
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.ТипыЦенНоменклатуры);
	ПропускаемыеТаблицы.Добавить(Метаданные.РегистрыСведений.КурсыВалют);
	ПропускаемыеТаблицы.Добавить(Метаданные.РегистрыСведений.ДанныеМонитораРуководителя);
	ИспользованияВалют = НайтиПоСсылкам(СуществующиеВалюты, Новый Массив, Новый Массив, ПропускаемыеТаблицы);
	Если ИспользованияВалют.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	// Использований валюты не найдено.
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНАМИ ОБМЕНА

// Проверяет, используются ли планы обмена.
// Параметры:
//  ОтборРаспределеннаяИнформационнаяБаза - <Булево> - Если Истина, то проверяются
//  только распределенные информационные базы, если Ложь, то обмены с другими
//  программами.
Функция ИспользуютсяПланыОбмена(ОтборРаспределеннаяИнформационнаяБаза) Экспорт
      
     Результат = Ложь; 
      
     ПланыОбменаПодсистемы = Новый Массив; 
     ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы); 
	 
	 Для каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл 
		 
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза <> ОтборРаспределеннаяИнформационнаяБаза Тогда 
			Продолжить; 
		КонецЕсли; 
		   
		Запрос = Новый Запрос; 
		ТекстЗапроса =  
		"ВЫБРАТЬ 
		|     ПроверяемыйПланОбмена.Ссылка 
		|ИЗ 
		|     ПланОбмена.%1 КАК ПроверяемыйПланОбмена 
		|ГДЕ 
		|     ПроверяемыйПланОбмена.ПометкаУдаления = ЛОЖЬ И ПроверяемыйПланОбмена.ЭтотУзел = Ложь"; 

		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ПланОбмена.Имя); 
		Запрос.Текст = ТекстЗапроса; 
		РезультатЗапроса = Запрос.Выполнить(); 
		Если НЕ РезультатЗапроса.Пустой() Тогда 
		   Результат = Истина; 
		   Прервать; 
	   КонецЕсли; 
	   
     КонецЦикла; 
      
	Возврат Результат;    
	
КонецФункции

// Устанавливает значения общих констант загрузке данных из сервиса
//
Процедура УстановитьЗначенияКонстантПоставкиПослеЗагрузкиДанных() Экспорт
	
	УстановитьФункциональнуюОпциюПоказыватьНачалоРаботыВСервисе();
	
	Если Не ОбщегоНазначения.РазделениеВключено() И ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком") Тогда
		УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТакси");
		ХранилищеОбщихНастроек.Сохранить(ВРег("ДатаСменыИнтерфейса"),, ТекущаяДатаСеанса());
	КонецЕсли;
	
	УстановитьОпциюУстановкаМобильногоПриложения();
	УстановитьОпциюДополнительнаяИнформация();
	УстановитьОпциюОбращениеВТехническуюПоддержку();
	УстановитьФункциональнуюОпциюТехнологияСервисаВМоделиСервиса();
	УстановитьФункциональнуюОпциюТехнологияСервисаВЛокальномРежиме();
	
	УстановитьНастройкиПользователейПоУмолчанию(Ложь);
	
	УчетКассовыхЧековПодотчетныхЛиц.УстановитьОпциюУстановкаМобильногоПриложенияПослеЗагрузкиДанных();
	
КонецПроцедуры

// Возвращает массив сообщений пользователю, из которого исключены служебные сообщения БСП,
// используемые для отображения прогресса выполнения фонового задания.
//
// Параметры:
//	УдалятьПолученные - Булево - Если Истина, то сообщения будут удалены из очереди после получения.
//	ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - Идентификатор фонового задания,
//		сообшения из которого получать. Если не указан, то возвращает сообщения из основного сеанса.
//
// Возвращаемое значение:
//	ФиксированныйМассив - Массив сообщений пользователю.
//
Функция ПолучитьСообщенияПользователюБезСлужебных(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		СообщенияПользователю = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;

	Результат = Новый Массив;

	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		Если СтрНачинаетсяС(СообщениеПользователю.Текст, "{СтандартныеПодсистемы.ДлительныеОперации}") Тогда
			// Это служебное сообщение БСП, его исключаем.
			Продолжить;
		КонецЕсли;
		Результат.Добавить(СообщениеПользователю);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

Процедура УстановитьОпциюВеденияУчетаПоОрганизациям(УчетПоОрганизациям) Экспорт
	
	// Установка опции ведения учета по организациям вызывается
	// из формы установки интерфейса и при обновлении конфигурации.

	// В простом интерфейсе поддерживается работа только с одной организацией,
	// в этом случае обе константы ВестиУчетПоОрганизациям и НеВестиУчетПоОрганизациям 
	// сбрасываются в ЛОЖЬ.
	ИнтерфейсДопускаетУчетПоНесколькимОрганизациям = Константы.ИнтерфейсТакси.Получить()
		ИЛИ Константы.ИнтерфейсВерсии77.Получить();
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = УчетПоОрганизациям И ИнтерфейсДопускаетУчетПоНесколькимОрганизациям;
	ВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям.Записать();
	
	НеВестиУчетПоОрганизациям = Константы.НеВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	НеВестиУчетПоОрганизациям.Значение = НЕ УчетПоОрганизациям И ИнтерфейсДопускаетУчетПоНесколькимОрганизациям;
	НеВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	НеВестиУчетПоОрганизациям.Записать();
	
КонецПроцедуры

Процедура УстановитьОпциюУстановкаМобильногоПриложения() Экспорт
	
	Константы.УстановкаМобильногоПриложения.Установить(
		ОбщегоНазначения.РазделениеВключено()
		И ЭтоПолныйИнтерфейс());
	
	Константы.УстановкаМобильногоПриложенияПростойИнтерфейс.Установить(
		ОбщегоНазначения.РазделениеВключено()
		И ЭтоПростойИнтерфейс());
	
КонецПроцедуры

Процедура УстановитьОпциюПоказыватьИнформационнуюПанель() Экспорт
	
	ПоказыватьИнформационнуюПанель = Не Константы.НачалоРаботы.Получить()
		И НЕ ИспользуетсяСервисЭлектронныхТрудовыхКнижек();
	
	Константы.ПоказыватьИнформационнуюПанель.Установить(ПоказыватьИнформационнуюПанель);
	
КонецПроцедуры

Функция НастройкиСоставаИнтерфейсаКлиентскогоПриложения() Экспорт
	Перем ИмяВерхнегоЭлементаНастройки, ИмяНижнегоЭлементаНастройки;
	
	ИмяВерхнегоЭлементаНастройки = "ПанельОткрытых";
	ИмяНижнегоЭлементаНастройки = "ПанельРазделов";
	Если ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		
		ИмяВерхнегоЭлементаНастройки = "ПанельФункцийТекущегоРаздела";
		ИмяНижнегоЭлементаНастройки = "";
		
	ИначеЕсли ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
	 
		ИмяВерхнегоЭлементаНастройки = "ПанельФункцийТекущегоРаздела";
		ИмяНижнегоЭлементаНастройки = "ПанельОткрытых";
		
	КонецЕсли;
	
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	Верх = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения(ИмяВерхнегоЭлементаНастройки));
	НастройкиСостава.Верх.Добавить(Верх);
	
	Если Не ПустаяСтрока(ИмяНижнегоЭлементаНастройки) Тогда
		
		ОриентацияЭлементаНастройки = ?(ИмяНижнегоЭлементаНастройки = "ПанельРазделов", НастройкиСостава.Лево, НастройкиСостава.Низ);
		ОриентацияЭлементаНастройки.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения(ИмяНижнегоЭлементаНастройки));
		
	КонецЕсли;	
	
	Возврат НастройкиСостава;
	
КонецФункции

Функция ДомашняяСтраницаСервиса() Экспорт
	
	ДомашняяСтраница = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ИнформационныеСсылкиДляФорм.ДомашняяСтраница, "Наименование");
	Если ДомашняяСтраница = "Домашняя страница" Тогда
		ДомашняяСтраница = "";
	КонецЕсли;
	
	Возврат ДомашняяСтраница;
	
КонецФункции

Функция ВыбиратьВариантНачалаРаботы() Экспорт
	
	Возврат Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации()
	
КонецФункции

Процедура ПодготовитьСтруктуруНавигацииПомощникаРегистрации()
	
	// Если навигация определена, то используем её.
	Если Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощникаРегистрации() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗапускаПриложения = ВРег(ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска"));
	ПараметрЗапускаПомощника = "";
	Для Каждого КлючЗапуска Из Обработки.РегистрацияОрганизации.МассивКлючейЗапуска() Цикл
		Если СтрНайти(ПараметрЗапускаПриложения, КлючЗапуска) > 0 Тогда
			ПараметрЗапускаПомощника = КлючЗапуска;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрЗапускаПомощника) Тогда
		Обработки.РегистрацияОрганизации.ПодготовитьСтруктуруНавигацииПомощникаРегистрации(ПараметрЗапускаПомощника);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоМедленныйРежимРаботы() Экспорт
	
	ОперативнаяПамять 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ОперативнаяПамять");
	СтрокаСоединенияИБ 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("СтрокаСоединенияИнформационнойБазы");
	РекомендуемыйОбъем 	= ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	
	ИБФайловая = СтрНайти(ВРег(СтрокаСоединенияИБ), "FILE=") = 1;

	// Проверка объема доступной оперативной памяти.
	Если ИБФайловая Тогда
		Если ЗначениеЗаполнено(ОперативнаяПамять)
			И ОперативнаяПамять < РекомендуемыйОбъем Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		// В клиент-серверной базе данных проверим режим низкой скорости соединения.
		СкоростьТекущегоСоединения = ПолучитьСкоростьКлиентскогоСоединения();
		Возврат СкоростьТекущегоСоединения = СкоростьКлиентскогоСоединения.Низкая;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Раскладывает переданный список значений или массив на соотвествие по типам значений
//
// Параметры:
//  СписокОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип объекта метаданных.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[МетаданныеОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

// Раскладывает переданный список значений или массив на соотвествие по типам значений
//
// Параметры:
//  СписокОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип значения объекта.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамЗначенийОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		ТипЗначенияОбъекта = ТипЗнч(Объект);
		
		Если СтруктураТипов.Получить(ТипЗначенияОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(ТипЗначенияОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[ТипЗначенияОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

// Функция возвращает новую структуру параметров учета.
//
// Параметры:
//
// Возвращаемое значение:
//	Структура - Новая структура параметров учета.
//
Функция СтруктураПараметровУчета() Экспорт

	ПараметрыУчета = Новый Структура(
		"ВестиПартионныйУчет,
		|СкладскойУчет,
		|ИспользоватьОборотнуюНоменклатуру,
		|РазделятьПоСтавкамНДС,
		|ВестиУчетПоСтатьямДДС,
		|ВестиУчетПоРаботникам,
		|УчетЗарплатыИКадровВоВнешнейПрограмме,
		|КадровыйУчет,
		|ВестиУчетНДСПоСпособам");
		
	Для Каждого ИмяПараметра Из ЭлементыЗатратНастройкаПараметровУчета.ПараметрыУчета() Цикл
		ПараметрыУчета.Вставить(ИмяПараметра);
	КонецЦикла;

	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает для всех пользователей ИБ сведения о настройках начальной страницы.
// Для вызова необходимы права администратора.
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - Строка - Имя пользователя. Если в базе нет ни одного пользователя, то пустая строка.
//		* Значение - НастройкиНачальнойСтраницы, Неопределено - Настройки начальной страницы для пользователя.
//				Если у пользователя не индивидуальной настройки начальной страницы, то будет Неопределено.
//
Функция НастройкиНачальнойСтраницыПользователей() Экспорт

	Результат = Новый Соответствие;
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючОбъекта", "Общее/НастройкиНачальнойСтраницы");
	
	Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Пользователь, Выборка.Настройки);
	КонецЦикла;
	
	// Определим общее количество пользователей в базе.
	УстановитьПривилегированныйРежим(Истина);
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	УстановитьПривилегированныйРежим(Ложь);
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		Если Результат[ПользовательИБ.Имя] = Неопределено Тогда
			// У пользователя нет индивидуальной настройки, значит использует значение по умолчанию -
			// общая форма ИнформационнаяПанель на начальной странице.
			Результат.Вставить(ПользовательИБ.Имя, Неопределено);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Скрывает с начальной страницы для переданного пользователя все формы.
// Для вызова необходимы права администратора.
//
// Параметры:
//	ИмяПользователя - Строка - Имя пользователя, для которого скрыть настройки.
//
Процедура ОтключитьНачальнуюСтраницуПользователя(ИмяПользователя) Экспорт

	// Чтобы скрыть формы с начальной страницы, 
	// необходимо создать для них индивидуальную настройку начальной страницы с пустым списком имен форм.
	ПустойСоставФорм = Новый СоставФормНачальнойСтраницы;
	
	ПустаяНастройка = Новый НастройкиНачальнойСтраницы;
	ПустаяНастройка.УстановитьСоставФорм(ПустойСоставФорм);

	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.КлючОбъекта   = "Общее/НастройкиНачальнойСтраницы";
	ОписаниеНастроек.Пользователь  = ИмяПользователя;
	ОписаниеНастроек.Представление = НСтр("ru = 'Начальная страница'");

	ХранилищеСистемныхНастроек.Сохранить(
		ОписаниеНастроек.КлючОбъекта,
		,
		ПустаяНастройка,
		ОписаниеНастроек,
		ИмяПользователя);

КонецПроцедуры

// Анализирует наличие в списке колонок с дополнительной информацией, требующих соединения таблицы документов
// с таблицами регистров, и отключает их.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - содержит реквизит "Список" типа динамический список.
//
Процедура УстановитьВидимостьКолонокДополнительнойИнформации(Форма) Экспорт
	
	ОтображатьДополнительныеКолонки = ПолучитьФункциональнуюОпцию("ОтображатьДополнительныеКолонкиВСписках");
	
	СтруктураРеквизита = Новый Структура("ОтображатьСтатусыДокументов", ОтображатьДополнительныеКолонки);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРеквизита);
	
	Элементы = Форма.Элементы;
	
	// Регистр сведений "НаличиеПрисоединенныхФайлов".
	Если ЕстьКолонкаСписка("ЕстьФайлы", Форма) Тогда
		
		Элементы.ЕстьФайлы.Видимость = ОтображатьДополнительныеКолонки;
		
	КонецЕсли;
	
	// Регистр сведений "ДокументыСОшибкамиПроверкиКонтрагентов".
	Если ЕстьПолеДинамическогоСписка("СодержитНекорректныхКонтрагентов", Форма) Тогда
		
		Если ОтображатьДополнительныеКолонки
		   И ПроверкаКонтрагентов.ЕстьПравоНаИспользованиеПроверки()
		   И ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена() Тогда
			
			// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
			ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Форма.Список);
			// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Регистр сведений "СтатусыДокументов".
	// Статусы "Подписан", "ОригиналПолучен", "Оплата", "СтатусКП" берутся из одного источника, поэтому никогда не должны быть вместе.
	ЕстьПравоИзмененияСтатусовДокументов = Ложь;
	ЕстьПравоЧтенияСтатусовДокументов    = Ложь;
	ОтображатьКомандыСписка              = Ложь;
	Если ЕстьКолонкаСписка("Подписан", Форма) Тогда // используется только основной статус Подписан
		
		ПозицияТочки = СтрНайти(Форма.ИмяФормы, ".", НаправлениеПоиска.СНачала, 1, 2);
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(Форма.ИмяФормы, ПозицияТочки - 1));
		ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);
		ЕстьПравоЧтенияСтатусовДокументов = СтатусыДокументов.ПравоЧтенияСтатусовДокументов();
		
		ОтображатьПодписан = ОтображатьДополнительныеКолонки И ЕстьПравоЧтенияСтатусовДокументов;
		Элементы.КнопкаПодписанНеПодписан.Видимость                          = ОтображатьПодписан;
		Элементы.СписокКонтекстноеМенюУстановитьПодписанНеПодписан.Видимость = ОтображатьПодписан;
		Элементы.Подписан.Видимость                                          = ОтображатьПодписан;
		
	ИначеЕсли ЕстьКолонкаСписка("Оригинал", Форма) Тогда // используется только основной статус ОригиналПолучен
		
		ПозицияТочки = СтрНайти(Форма.ИмяФормы, ".", НаправлениеПоиска.СНачала, 1, 2);
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(Форма.ИмяФормы, ПозицияТочки - 1));
		ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);
		ЕстьПравоЧтенияСтатусовДокументов = СтатусыДокументов.ПравоЧтенияСтатусовДокументов();
		
		ОтображатьКомандыСписка = ЕстьПравоИзмененияСтатусовДокументов И ОтображатьДополнительныеКолонки;
		ОтображатьКомандыКонтекстногоМеню = ЕстьПравоИзмененияСтатусовДокументов;
		
		Элементы.УстановитьСтатусОригиналПолучен.Видимость   = ОтображатьКомандыСписка;
		Элементы.УстановитьСтатусОригиналНеПолучен.Видимость = ОтображатьКомандыСписка;
		Элементы.СписокКонтекстноеМенюУстановитьСтатусОригиналПолучен.Видимость   = ОтображатьКомандыКонтекстногоМеню;
		Элементы.СписокКонтекстноеМенюУстановитьСтатусОригиналНеПолучен.Видимость = ОтображатьКомандыКонтекстногоМеню;
		Элементы.ИзменитьСтатус.Видимость = ЕстьПравоИзмененияСтатусовДокументов И Не ОтображатьДополнительныеКолонки;
		Элементы.Оригинал.Видимость = ЕстьПравоЧтенияСтатусовДокументов И ОтображатьДополнительныеКолонки;
		
	ИначеЕсли ЕстьКолонкаСписка("Оплата", Форма) Тогда // используются и основной, и дополнительный статусы
		
		Элементы.Оплата.Видимость = ОтображатьДополнительныеКолонки;
		
		Если Элементы.Найти("ФормаИзменитьСтатус") <> Неопределено Тогда // только в формах списка
			
			ПозицияТочки = СтрНайти(Форма.ИмяФормы, ".", НаправлениеПоиска.СНачала, 1, 2);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(Форма.ИмяФормы, ПозицияТочки - 1));
			ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);
			
			Элементы.ФормаИзменитьСтатус.Видимость                 = ЕстьПравоИзмененияСтатусовДокументов;
			Элементы.СписокКонтекстноеМенюИзменитьСтатус.Видимость = ЕстьПравоИзмененияСтатусовДокументов;
			
		КонецЕсли;
		
		// Обрабатываем колонки дополнительного статуса.
		Если ЕстьКолонкаСписка("Отгрузка", Форма) Тогда // для покупателя
			
			Элементы.Отгрузка.Видимость = ОтображатьДополнительныеКолонки;
			Если ОтображатьДополнительныеКолонки Тогда
				СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(Форма.УсловноеОформление);
			КонецЕсли;
			
		ИначеЕсли ЕстьКолонкаСписка("Поступление", Форма) Тогда // для поставщика
			
			Элементы.Поступление.Видимость = ОтображатьДополнительныеКолонки;
			Если ОтображатьДополнительныеКолонки Тогда
				СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовНаОплатуПоставщика(Форма.Список.УсловноеОформление);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьКолонкаСписка("СтатусКП", Форма) Тогда // используется только основной статус СтатусКП
		
		Элементы.СтатусКП.Видимость = ОтображатьДополнительныеКолонки;
		Если Элементы.Найти("ФормаИзменитьСтатус") <> Неопределено Тогда // только в формах списка
			
			ОбъектМетаданных = Метаданные.Документы.КоммерческоеПредложение;
			ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);
			
			Элементы.ФормаИзменитьСтатус.Видимость                 = ЕстьПравоИзмененияСтатусовДокументов;
			Элементы.СписокКонтекстноеМенюИзменитьСтатус.Видимость = ЕстьПравоИзмененияСтатусовДокументов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// "Счет-фактура" в списках ПТУ и РТУ
	Если ЕстьКолонкаСписка("СчетФактура", Форма) Тогда
		
		// Для некоторых видов операций ПТУ отображать счета-фактуры нецелесообразно.
		ВидОперацииБезСчетаФактуры = Ложь;
		Если Форма.Параметры.Свойство("Отбор") Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПустаяСсылка();
			Форма.Параметры.Отбор.Свойство("ВидОперации", ВидОперации);
			ВидОперацииБезСчетаФактуры = 
				ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков;
		КонецЕсли;
		
		ОтображатьСчетФактуруВСписках = НЕ ВидОперацииБезСчетаФактуры
			И (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
			ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
			ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
			ИЛИ ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы")
			ИЛИ ПолучитьФункциональнуюОпцию("УплачиватьНДССпецРежимы")
			ИЛИ ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров"));
			
		Элементы.СчетФактура.Видимость = ОтображатьДополнительныеКолонки И ОтображатьСчетФактуруВСписках;
		Если ЕстьКолонкаСписка("ОригиналСчетаФактуры", Форма) Тогда
			Элементы.ОригиналСчетаФактуры.Видимость = ОтображатьДополнительныеКолонки И ОтображатьСчетФактуруВСписках;
		КонецЕсли;
		
		Если ОтображатьДополнительныеКолонки
			И ОтображатьСчетФактуруВСписках Тогда
			СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовФактур(Форма.Список.УсловноеОформление);
		КонецЕсли;
		
		// В некоторых списках дополнительно отображается статус оригинала счета-фактуры.
		Если ЕстьКолонкаСписка("ОригиналСчетаФактуры", Форма) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(Форма.ИмяФормы, ПозицияТочки - 1));
			ОтображатьКомандыСпискаДляСФ = ОтображатьКомандыСписка;
			ОтображатьКомандыКонтекстногоМенюДляСФ = ОтображатьКомандыКонтекстногоМеню;
			ЕстьПравоИзмененияСтатусовСФ = ЕстьПравоИзмененияСтатусовДокументов;
			Если ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг Тогда
				ЕстьПравоИзмененияСтатусовСФ = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(
					Метаданные.Документы.СчетФактураВыданный);
				ОтображатьКомандыСпискаДляСФ = ЕстьПравоИзмененияСтатусовСФ	И ОтображатьДополнительныеКолонки;
				ОтображатьКомандыКонтекстногоМенюДляСФ = ЕстьПравоИзмененияСтатусовСФ;
			ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ПоступлениеТоваровУслуг Тогда
				ЕстьПравоИзмененияСтатусовСФ = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(
					Метаданные.Документы.СчетФактураПолученный);
				ОтображатьКомандыСпискаДляСФ = ЕстьПравоИзмененияСтатусовСФ	И ОтображатьДополнительныеКолонки;
				ОтображатьКомандыКонтекстногоМенюДляСФ = ЕстьПравоИзмененияСтатусовСФ;
			КонецЕсли;
			
			// Подменю "Оригинал".
			Элементы.УстановитьСтатусОригиналСФПолучен.Видимость    = ОтображатьКомандыСпискаДляСФ И ОтображатьСчетФактуруВСписках;
			Элементы.УстановитьСтатусОригиналСФНеПолучен.Видимость  = ОтображатьКомандыСпискаДляСФ И ОтображатьСчетФактуруВСписках;
			Элементы.УстановитьСтатусВсеОригиналыПолучены.Видимость = ОтображатьКомандыСпискаДляСФ И ОтображатьСчетФактуруВСписках;
			// Контекстное меню.
			Элементы.СписокКонтекстноеМенюУстановитьСтатусОригиналСФПолучен.Видимость    = ОтображатьКомандыКонтекстногоМенюДляСФ
				И ОтображатьСчетФактуруВСписках И ОтображатьДополнительныеКолонки;
			Элементы.СписокКонтекстноеМенюУстановитьСтатусОригиналСФНеПолучен.Видимость  = ОтображатьКомандыКонтекстногоМенюДляСФ
				И ОтображатьСчетФактуруВСписках И ОтображатьДополнительныеКолонки;
			Элементы.СписокКонтекстноеМенюУстановитьСтатусВсеОригиналыПолучены.Видимость = ОтображатьКомандыКонтекстногоМенюДляСФ
				И ОтображатьСчетФактуруВСписках И ОтображатьДополнительныеКолонки;
			Элементы.ОригиналСчетаФактуры.Видимость = ЕстьПравоЧтенияСтатусовДокументов
				И ОтображатьДополнительныеКолонки
				И ОтображатьСчетФактуруВСписках;
		КонецЕсли;
			
	КонецЕсли;
	
	// Регистр сведений "СостоянияЭД".
	Если ЕстьКолонкаСписка("СостояниеВерсииЭД", Форма) Тогда
		
		Элементы.СостояниеВерсииЭД.Видимость = ОтображатьДополнительныеКолонки;
		
	КонецЕсли;
	
	// Регистр сведений "СрокиОплатыДокументов".
	Если ЕстьКолонкаСписка("СрокОплаты", Форма) Тогда
		
		Элементы.СрокОплаты.Видимость = ОтображатьДополнительныеКолонки;
		
		Если ОтображатьДополнительныеКолонки Тогда
			// Срок оплаты красным, если просрочен.
			ЭлементУО = Форма.Список.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокОплаты");
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
				"СрокОплаты", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ТекущаяДатаСеанса());
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
				"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
				"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Оплачен);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Регистр сведений "СостоянияБанковскихДокументов".
	Если ЕстьКолонкаСписка("Состояние", Форма) Тогда
		
		Элементы.Состояние.Видимость = ОтображатьДополнительныеКолонки;
		
	КонецЕсли;
	
	// Дополнительные колонки формы списка "Основные средства" в простом интерфейсе.
	
	Если ЕстьКолонкаСписка("ИнвентарныйНомер", Форма) Тогда
		Элементы.ИнвентарныйНомер.Видимость = ОтображатьДополнительныеКолонки;
	КонецЕсли;
	
	Если ЕстьКолонкаСписка("ПринятоКУчету", Форма) Тогда
		Элементы.ПринятоКУчету.Видимость = ОтображатьДополнительныеКолонки;
	КонецЕсли;
	
	Если ЕстьКолонкаСписка("ПереданоВАренду", Форма) Тогда
		Элементы.ПереданоВАренду.Видимость = ОтображатьДополнительныеКолонки;
	КонецЕсли;
	
	Если ЕстьКолонкаСписка("СнятоСУчета", Форма) Тогда
		Элементы.СнятоСУчета.Видимость = ОтображатьДополнительныеКолонки;
		
		ЭлементУО = Форма.Список.УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.СнятоСУчета",
			ВидСравненияКомпоновкиДанных.НеРавно,
			Дата(1,1,1));
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
		
	КонецЕсли;
	
	Если ЕстьКолонкаСписка("Местонахождение", Форма) Тогда
		Элементы.Местонахождение.Видимость = ОтображатьДополнительныеКолонки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиНачальнойСтраницы(НачальнаяСтраница) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	Если ПараметрыКлиента.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") = Истина Тогда
		// В БСП форма на рабочем столе уже подменена.
		// Поэтому запишем форму для начала работы в настройки, из которых БСП будет восстанавливать эту форму
		СохраняемыеНастройки = Новый ХранилищеЗначения(НачальнаяСтраница);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницыПередОчисткой", "", СохраняемыеНастройки);
	Иначе
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Рассчитывает итоги динамического списка по тексту запроса без учета оборов.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок
//   ИменаПолейИтогов - Строка - имена полей запроса разделенные запятыми без пробелов
//
// Возвращаемое значение:
//   Структура
//
Функция ИтогиДинамическогоСписка(ДинамическийСписок, ИменаПолейИтогов) Экспорт
	
	СтруктураИтогов = Новый Структура;
	
	МассивИменПолейИтогов = СтрРазделить(ИменаПолейИтогов, ",", Ложь);
	Если МассивИменПолейИтогов.Количество() = 0 Тогда
		Возврат СтруктураИтогов;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ДинамическийСписок.ТекстЗапроса);
	
	// Текстом запроса динамического списка будет последний запрос в пакете или
	// единственный, если не используются временные таблицы.
	ИндексЗапросаСписка = (СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[ИндексЗапросаСписка];
	
	// Удаляем поля, который не нужны для выборки итогов.
	УдалитьНеиспользуемыеПоляЗапроса(ЗапросСхемы, МассивИменПолейИтогов);
	
	// Сохраняем полученный текст запроса для использования в качестве источника нового запроса.
	ТекстЗапросаСписка = ЗапросСхемы.ПолучитьТекстЗапроса();
	СхемаЗапроса.ПакетЗапросов.Удалить(ИндексЗапросаСписка);
	
	// Создаем новый запрос.
	НовыйЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОператорЗапроса = НовыйЗапросСхемы.Операторы[0];
	
	// Добавляем источник - вложенный запрос, соответствующий тексту запроса.
	ИсточникЗапроса = ОператорЗапроса.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ВложенныйЗапрос");
	ИсточникЗапроса.Источник.Запрос.УстановитьТекстЗапроса(ТекстЗапросаСписка);
	
	// Добавляем поля итогов.
	Для Индекс = 0 По МассивИменПолейИтогов.ВГраница() Цикл
		ИмяПоля = СокрЛП(МассивИменПолейИтогов[Индекс]);
		ОператорЗапроса.ВыбираемыеПоля.Добавить(СтрШаблон("СУММА(ВложенныйЗапрос.%1)", ИмяПоля));
		НовыйЗапросСхемы.Колонки[Индекс].Псевдоним = ИмяПоля;
	КонецЦикла;
	
	// Выполняем запрос по полученной схеме, используя параметры динамического списка.
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ПараметраКомпоновки Из ДинамическийСписок.Параметры.Элементы Цикл
		Если ПараметраКомпоновки.Использование Тогда
			Запрос.УстановитьПараметр(Строка(ПараметраКомпоновки.Параметр), ПараметраКомпоновки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Индекс = 0 По МассивИменПолейИтогов.ВГраница() Цикл
			ИмяПоля = СокрЛП(МассивИменПолейИтогов[Индекс]);
			СтруктураИтогов.Вставить(ИмяПоля, Выборка[ИмяПоля]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура УдалитьНеиспользуемыеПоляЗапроса(ЗапросСхемы, МассивНужныхПолей)
	
	ИндексыНужныхПолей = Новый Массив;
	
	Для Каждого Колонка Из ЗапросСхемы.Колонки Цикл
		Если МассивНужныхПолей.Найти(Колонка.Псевдоним) <> Неопределено Тогда
			ИндексыНужныхПолей.Добавить(ЗапросСхемы.Колонки.Индекс(Колонка));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оператор Из ЗапросСхемы.Операторы Цикл
		КоличествоПолей = Оператор.ВыбираемыеПоля.Количество();
		Для НомерПоля = 1 По КоличествоПолей Цикл
			ИндексПоля = КоличествоПолей - НомерПоля;
			Если ИндексыНужныхПолей.Найти(ИндексПоля) = Неопределено Тогда
				Оператор.ВыбираемыеПоля.Удалить(ИндексПоля);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет выражение поля запроса в СхемаЗапроса по имени поля.
// См. также методы модуля СхемыЗапросов
//
// Параметры:
//  ОписаниеЗапроса	 - ЗапросВыбораСхемыЗапроса - описание запроса в схеме запроса
//  ОператорЗапроса	 - ОператорВыбратьСхемыЗапроса - описание оператора запроса в схеме запроса
//  ИмяПоля          - Строка - имя (псевдоним) поля, выражение которого следует определить
// 
// Возвращаемое значение:
//  ВыражениеСхемыЗапроса, ВложеннаяТаблицаСхемыЗапроса - выражение, определенное в операторе запроса для поля с переданным именем (псевдонимом)
//
Функция ВыражениеПоляЗапроса(ОписаниеЗапроса, ОператорЗапроса, ИмяПоля) Экспорт
	
	Поле = ОписаниеЗапроса.Колонки.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Запрос не содержит поле %1", ИмяПоля);
	КонецЕсли;
	
	Возврат ОператорЗапроса.ВыбираемыеПоля[ОписаниеЗапроса.Колонки.Индекс(Поле)];
	
КонецФункции

// Удаляет источник данных и все обращения к нему в переданном тексте запроса.
// См. также методы модуля СхемыЗапросов
//
// Параметры:
//  ТекстЗапроса  - Строка - обрабатываемый текст запроса.
//  ИмяТаблицы    - Строка - псеводоним удаляемого из запроса источника.
//
Процедура УдалитьИсточникЗапроса(ТекстЗапроса, ИмяТаблицы) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			
			УдаляемыйИсточник = ОператорЗапроса.Источники.НайтиПоПсевдониму(ИмяТаблицы);
			
			Если УдаляемыйИсточник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОператорЗапроса.Источники.Удалить(ОператорЗапроса.Источники.Индекс(УдаляемыйИсточник));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Определяет подразделение по данным о складе и организации.
//
// Параметры:
//  Склад  -  СправочникСсылка.Склад - место хранения МПЗ.
//  Организация  - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Подразделение  -  СправочникСсылка.Подразделение - подразделение, соответствующее
//   указанному месту хранения МПЗ.
//
Функция ПолучитьПодразделение(Организация, Склад) Экспорт

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Склад);
	Запрос.Текст = 
	
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Склады.ПодразделениеОрганизации,
	 |	Склады.ПодразделениеОрганизации.Владелец КАК ПодразделениеОрганизацииВладелец
	 |ИЗ
	 |	Справочник.Склады КАК Склады
	 |ГДЕ
	 |	Склады.Ссылка = &Ссылка";
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 Результат.Следующий();
	 
	 ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
	 ПодразделениеОрганизацииВладелец = Результат.ПодразделениеОрганизацииВладелец;
	
	Если ПодразделениеОрганизацииВладелец = Организация Тогда
		Возврат ПодразделениеОрганизации;
	Иначе
		Возврат БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	КонецЕсли;

КонецФункции

Процедура УстановитьОпциюДополнительнаяИнформация() Экспорт
	
	Константы.ДополнительнаяИнформация.Установить(
		НЕ ОбщегоНазначения.РазделениеВключено()
		И ЭтоПолныйИнтерфейс());
	
КонецПроцедуры

Процедура УстановитьОпциюОбращениеВТехническуюПоддержку() Экспорт
	
	Константы.ОбращениеВТехническуюПоддержку.Установить(
		НЕ ОбщегоНазначения.РазделениеВключено()
		И ЭтоПолныйИнтерфейс());
	
КонецПроцедуры

Процедура УстановитьФункциональнуюОпциюТехнологияСервисаВМоделиСервиса() Экспорт
	
	ТехнологияСервисаВМоделиСервисаПростойИнтерфейс =
		ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой")
		И ПолучитьФункциональнуюОпцию("ТехнологияСервисаВМоделиСервиса");
	
	Константы.ТехнологияСервисаВМоделиСервисаПростойИнтерфейс.Установить(ТехнологияСервисаВМоделиСервисаПростойИнтерфейс);
	
КонецПроцедуры

Процедура УстановитьФункциональнуюОпциюТехнологияСервисаВЛокальномРежиме() Экспорт
	
	ТехнологияСервисаВЛокальномРежимеПростойИнтерфейс =
		ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой")
		И ПолучитьФункциональнуюОпцию("ТехнологияСервисаВЛокальномРежиме");
	
	Константы.ТехнологияСервисаВЛокальномРежимеПростойИнтерфейс.Установить(ТехнологияСервисаВЛокальномРежимеПростойИнтерфейс);
	
КонецПроцедуры

Процедура УстановитьНастройкиПользователейПоУмолчанию(РежимСоответствуетТекущему)
	
	// Установка настроек по умолчанию всем пользователям
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	НовыйИнтерфейсПользователей = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
	Если ВсеПользователи.Количество() > 0 Тогда
		Для каждого ПользовательИБ Из ВсеПользователи Цикл
			УстановитьНачальныеНастройки = Истина;
			Если РежимСоответствуетТекущему Тогда
				// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
				НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", , , ПользовательИБ.Имя);
				Если НастройкиКлиента <> Неопределено Тогда
					ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
					УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
				КонецЕсли;
			КонецЕсли;
			Если УстановитьНачальныеНастройки Тогда
				ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьНачальныеНастройки = Истина;
		Если РежимСоответствуетТекущему Тогда
			// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
			НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", , , "");
			Если НастройкиКлиента <> Неопределено Тогда
				ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
				УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
			КонецЕсли;
		КонецЕсли;
		Если УстановитьНачальныеНастройки Тогда
			ПользователиСлужебный.УстановитьНачальныеНастройки("");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьКолонкаСписка(ИмяКолонки, Форма)
	
	Возврат ЕстьПолеДинамическогоСписка(ИмяКолонки, Форма)
		И ЕстьЭлементСписка(ИмяКолонки, Форма);
	
КонецФункции
	
Функция ЕстьЭлементСписка(Имя, Форма)
	
	Возврат Форма.Элементы.Найти(Имя) <> Неопределено;
	
КонецФункции

Функция ЕстьПолеДинамическогоСписка(Имя, Форма)
	
	Возврат Форма.Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(Имя) <> Неопределено;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьФункциональнуюОпциюПоказыватьНачалоРаботыВСервисе()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Константы.ПоказыватьНачалоРаботыВСервисе.Установить(Ложь);
	Иначе
		Константы.ПоказыватьНачалоРаботыВСервисе.Установить(ПолучитьФункциональнуюОпцию("ИнтерфейсТакси"));
	КонецЕсли;
	
КонецПроцедуры

// Функция преобразования значений неподдерживаемых типов при записи данных в JSON.
// см. функцию глобального контекста - ЗаписатьJSON
//
// Возвращаемое значение:
//   Строка
//
Функция ПреобразованиеЗначенийJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ФорматированнаяСтрока") Тогда
		Возврат Строка(Значение);
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;
	
КонецФункции

Функция ПараметрУчетаПоСубконтоСчета(СчетУчета, ИмяСубконто)
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
	
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		Если БУ["ВидСубконто" + НомерСубконто] = ВидСубконто Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

#Область ГлобальныеПараметрыУчета

// Коллекция глобальных параметров учета в виде, применяемом методами модуля
//
Функция НовыйСлужебныеПараметрыУчета(ГлобальныеПараметрыУчета)
	
	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ГлобальныеПараметрыУчета Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
		ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
	КонецЕсли;
	
	Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
		ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
	КонецЕсли;
	
	Возврат ПараметрыУчета;
	
КонецФункции

Функция РазделУчетаИспользуетПараметрыУчета(ОписаниеРазделаУчета, ПараметрыУчета)
	
	Для Каждого ОписаниеПараметра Из ОписаниеРазделаУчета.Параметры Цикл
		Если ПараметрыУчета.Свойство(ОписаниеПараметра.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеВидаСубконто Из ОписаниеРазделаУчета.Субконто Цикл
		
		Если ТипЗнч(ОписаниеВидаСубконто.Параметр) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыУчета.Свойство(ОписаниеВидаСубконто.Параметр) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СчетаРазделаУчета(ОписаниеРазделаУчета)
	
	ГруппыСчетов   = Новый Массив;
	ОдиночныеСчета = Новый Массив; // Непонятно, зачем они. Ведь если у счета будут подчиненные, то сам счет использоваться не должен
	
	Для Каждого ОписаниеСчета Из ОписаниеРазделаУчета.Счета Цикл
		Если ОписаниеСчета.СПодчиненными Тогда
			ГруппыСчетов.Добавить(ОписаниеСчета.Счет);
		Иначе
			ОдиночныеСчета.Добавить(ОписаниеСчета.Счет);
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОдиночныеСчета",    ОдиночныеСчета);
	Запрос.УстановитьПараметр("ГруппыСчетов",      ГруппыСчетов);
	Запрос.УстановитьПараметр("ИсключенияИзГрупп", ОписаниеРазделаУчета.ИсключенияИерархии);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Ссылка В ИЕРАРХИИ (&ГруппыСчетов)
	|				И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&ИсключенияИзГрупп)
	|			ИЛИ Хозрасчетный.Ссылка В (&ОдиночныеСчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Счет";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

Функция ЗначенияРелевантныхПараметровУчета(ПараметрыУчета, ОписаниеРазделаУчета, Счет)
	
	Значения = Новый Структура;
	
	Для Каждого ОписаниеПараметра Из ОписаниеРазделаУчета.Параметры Цикл
		
		ЗначениеПараметра = ПредопределенноеЗначениеПараметраДляСчета(ОписаниеПараметра.Исключения, Счет);
		Если ЗначениеПараметра <> Неопределено Тогда
			Значения.Вставить(ОписаниеПараметра.Имя, ЗначениеПараметра);
		ИначеЕсли ПараметрыУчета.Свойство(ОписаниеПараметра.Имя) Тогда
			Значения.Вставить(ОписаниеПараметра.Имя, ПараметрыУчета[ОписаниеПараметра.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

Функция ПредопределенноеЗначениеПараметраДляСчета(ПредопределенныеЗначенияПараметров, Счет)
	
	Для Каждого ОписаниеПредопределенногоЗначения Из ПредопределенныеЗначенияПараметров Цикл
		
		Если ОписаниеПредопределенногоЗначения.Счет <> Счет
			И Не (ОписаниеПредопределенногоЗначения.СПодчиненными
				И БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ОписаниеПредопределенногоЗначения.Счет)) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат ОписаниеПредопределенногоЗначения.Значение;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТребуетсяСвойствоПланаСчетов(Правило, ЗначенияРелевантныхПараметровУчета)
	
	Если Правило = Неопределено Тогда
		Возврат 0;
	ИначеЕсли Правило = Истина Тогда
		Возврат 1;
	ИначеЕсли Правило = Ложь Тогда
		Возврат -1;
	ИначеЕсли ЗначенияРелевантныхПараметровУчета.Свойство(Правило) Тогда
		ЗначениеПараметра = ЗначенияРелевантныхПараметровУчета[Правило];
		Если ЗначениеПараметра Тогда
			Возврат 1;
		Иначе
			Возврат -1;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоответствиеСубконтоПараметрамУчета()

	// Структура параметров

	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов
		// которые не должны обрабатываться при обработке подчиненных счетов
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета

	// Имя параметра или константа типа Булево
	// Неопределено - не менять
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета
	// Имя параметра учета
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); // Счета, для которых будут
		// использоваться константные значения вместо значений параметров.
		// В коллекции Исключения записи должны идти от более детальных к более общим.
		// Например, можно указать счета 10.03.2 и 10.03,
		// но нет смысла указывать эти счета в обратном порядке 10.03, 10.03.2 - запись для 10.03.2 не будет применена.

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	////////////////////////////////////////////////////////////////
	// Учет МПЗ
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Материалы;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВозвратнаяТараНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТопливоВБаке); // Для счета 10.03.2 аналитика по партиям и складам не ведётся
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = "ВестиПартионныйУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиПартионныйУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Истина;
		
		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ВозвратнаяТара;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ГСМ; // Для группы 10.03 общее субконто - Номенклатура
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСкладскойУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ВозвратнаяТараУПокупателя;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ГСМ; // Для группы 10.03 общее субконто - Номенклатура
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ГСМ; // Для группы 10.03 общее субконто - Номенклатура
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

	////////////////////////////////////////////////////////////////
	// Розничная торговля
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = "РазделятьПоСтавкамНДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Ложь;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "РазделятьПоСтавкамНДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Денежные средства
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Касса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОперационнаяКасса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЦифровойРубль;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Аккредитивы;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЧековыеКнижки;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.АккредитивыВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	СтрокаСубконто.Параметр = "ВестиУчетПоСтатьямДДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Истина;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоСтатьямДДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Зарплата

	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов;
	СтрокаСчета.СПодчиненными = Истина;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	СтрокаСубконто.Параметр = "ВестиУчетПоРаботникам";
	СтрокаСубконто.Количественный = "Количественный";
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Ложь;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоРаботникам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Удержания
	
	// Обязательная проверка возможности включения
	СчетРасчетыПоИсполнительнымДокументамРаботников = ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасчетыПоИсполнительнымДокументамРаботников);
	Если ДанныеСчета.КоличествоСубконто = 1 Тогда
		
		СтрокаРезультата = Результат.Добавить();

		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = СчетРасчетыПоИсполнительнымДокументамРаботников;
		СтрокаСчета.СПодчиненными = Ложь;

		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
		СтрокаСубконто.Параметр = "ВедетсяУчетЗарплатыКадров";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ИсполнительныеЛистыРаботников;
		СтрокаСубконто.Параметр = "ВедетсяУчетЗарплатыКадров";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;
		
		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВедетсяУчетЗарплатыКадров";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	// Раздельный учет НДС
	
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям;
	СтрокаСчета.СПодчиненными = Истина;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	СубСчета19СчетаСНетиповымиСубконто = БухгалтерскийУчет.СубСчета19СчетаСНетиповымиСубконто();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключенияИерархии, СубСчета19СчетаСНетиповымиСубконто);
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС;
	СтрокаСубконто.Параметр = "ВестиУчетНДСПоСпособам";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетНДСПоСпособам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
	
	// Разрезы учета отдельных подсистем
	
	ЭлементыЗатратНастройкаПараметровУчета.ДобавитьОписаниеРазрезовУчета(
		Результат,
		КолонкиСчетов,
		КолонкиСубконто,
		КолонкиПараметров,
		КолонкиИсключений);
	
	////////////////////////////////////////////////////////////////
	// Расчеты по страхованию от несчастных случаев
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников;
	СтрокаСчета.СПодчиненными = Ложь;
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	СтрокаСубконто.Параметр = "ВестиРасчетыПоСтрахованиюОтНесчастныхСлучаевПоРаботникам";
	СтрокаСубконто.Количественный = Неопределено;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиРасчетыПоСтрахованиюОтНесчастныхСлучаевПоРаботникам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
	
	Возврат Результат;

КонецФункции

#КонецОбласти

Функция ЭтоСеансАдминистратораСервиса()
	
	Возврат ОбщегоНазначения.РазделениеВключено()
		И Пользователи.ЭтоПолноправныйПользователь(Неопределено, Истина, Ложь);
	
КонецФункции

Процедура УстановитьОпциюОтображатьКомандыГлавноеПродажиПокупки() Экспорт
	
	ОтображатьКомандыГлавноеПродажиПокупки = Константы.ВестиУчетРасчетовСКонтрагентами.Получить()
		И ЭтоПростойИнтерфейс();
	
	Константы.ОтображатьКомандыГлавноеПродажиПокупки.Установить(ОтображатьКомандыГлавноеПродажиПокупки);
	
КонецПроцедуры

// Для передаваемых в массиве табличных частей заполняется идентификатор строки
// если ранее был не заполнен
//
// Параметры:
//   ДокументОбъект - документ, в котором надо заполнить идентификатор строки
//   ИменаТабличныхЧастей - массив имен табличных частей, для которых необходимо заполнить идентификатор строки
//
Процедура ЗаполнитьИдентификаторыСтрок(ДокументОбъект, ИменаТабличныхЧастей) Экспорт
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьКонстантуИнтерфейсТаксиБазовый() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой")
		Или ПолучитьФункциональнуюОпцию("ИнтерфейсИнтеграцииСБанком") Тогда
		Константы.ИнтерфейсТаксиБазовый.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииИспользуемыеИнтерфейсыВМоделиСервиса() Экспорт
	
	ИспользуетсяПолныйИнтерфейсВМоделиСервиса = (
		ОбщегоНазначения.РазделениеВключено()
		И ЭтоПолныйИнтерфейс());
	
	Константы.ИспользуетсяПолныйИнтерфейсВМоделиСервиса.Установить(ИспользуетсяПолныйИнтерфейсВМоделиСервиса);
	
КонецПроцедуры

#КонецОбласти

Функция МассивПустыхЗначенийРеквизита(МетаданныеРеквизита) Экспорт
	МассивПустыхЗначений = Новый Массив;
	
	МассивТипов = МетаданныеРеквизита.Тип.Типы();
	Для Каждого ТипЗначения Из МассивТипов Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначения);
		Если МетаданныеПоТипу <> Неопределено  Тогда
			МенеджерОбъекта =ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПоТипу.ПолноеИмя());
			МассивПустыхЗначений.Добавить(МенеджерОбъекта.ПустаяСсылка());
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивПустыхЗначений.Количество() > 1 Тогда
		МассивПустыхЗначений.Добавить(Неопределено);
	КонецЕсли;

	Возврат МассивПустыхЗначений;
КонецФункции 

Функция ДанныеБезУчетаРегистраСовпадают(Данные1, Данные2) Экспорт
	
	Если ТипЗнч(Данные1) <> ТипЗнч(Данные2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Данные1) = Тип("Структура")
	 ИЛИ ТипЗнч(Данные1) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из Данные1 Цикл
			СтароеЗначение = Неопределено;
			
			Если НЕ Данные2.Свойство(КлючИЗначение.Ключ, СтароеЗначение)
			 ИЛИ НЕ ДанныеБезУчетаРегистраСовпадают(КлючИЗначение.Значение, СтароеЗначение) Тогда
			
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Данные1) = Тип("Соответствие")
	      ИЛИ ТипЗнч(Данные1) = Тип("ФиксированноеСоответствие") Тогда
		
		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КлючиНовогоСоответствия = Новый Соответствие;
		
		Для каждого КлючИЗначение Из Данные1 Цикл
			КлючиНовогоСоответствия.Вставить(КлючИЗначение.Ключ, Истина);
			СтароеЗначение = Данные2.Получить(КлючИЗначение.Ключ);
			
			Если НЕ ДанныеБезУчетаРегистраСовпадают(КлючИЗначение.Значение, СтароеЗначение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из Данные2 Цикл
			Если КлючиНовогоСоответствия[КлючИЗначение.Ключ] = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Данные1) = Тип("Массив")
	      ИЛИ ТипЗнч(Данные1) = Тип("ФиксированныйМассив") Тогда
		
		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Данные1.Количество()-1;
		Пока Индекс >= 0 Цикл
			Если НЕ ДанныеБезУчетаРегистраСовпадают(Данные1.Получить(Индекс), Данные2.Получить(Индекс)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Данные1) = Тип("ТаблицаЗначений") Тогда
		
		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Данные1.Колонки.Количество() <> Данные2.Колонки.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого Колонка Из Данные1.Колонки Цикл
			Если Данные2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Индекс = Данные1.Количество()-1;
			Пока Индекс >= 0 Цикл
				Если НЕ ДанныеБезУчетаРегистраСовпадают(Данные1[Индекс][Колонка.Имя], Данные2[Индекс][Колонка.Имя]) Тогда
					Возврат Ложь;
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Данные1) = Тип("ХранилищеЗначения") Тогда
	
		Если НЕ ДанныеБезУчетаРегистраСовпадают(Данные1.Получить(), Данные2.Получить()) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Данные1) = Тип("Строка") Тогда
		
		Возврат НРег(СокрЛП(Данные1)) = НРег(СокрЛП(Данные2));
		
	КонецЕсли;
	
	Возврат Данные1 = Данные2;
	
КонецФункции

Функция ТаблицаЗначенийПоМетаданнымРегистра(МетаданныеРегистра, ДобавитьКолонкуПериод) Экспорт
	
	ТаблицаЗначенийРегистраНакопления = Новый ТаблицаЗначений;
	Если ДобавитьКолонкуПериод Тогда
		ТаблицаЗначенийРегистраНакопления.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	// Измерения
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ТаблицаЗначенийРегистраНакопления.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	
	// Ресурсы
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ТаблицаЗначенийРегистраНакопления.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	// Реквизиты
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ТаблицаЗначенийРегистраНакопления.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат ТаблицаЗначенийРегистраНакопления;
	
КонецФункции

#Область СлужебнаяЗаписьОбъектов

// Устанавливает признак пропуска бизнес-логики в ходе записи объекта для выполнения служебных действий:
// обновление данных в ходе обновления версии программы, загрузка данных, изменение активности движений.
//
// См. также ПропущенаБизнесЛогикаПриЗаписи
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект,
//           РегистрБухгалтерииНаборЗаписей, РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей,
//           КонстантаМенеджерЗначения - записываемый объект.
//
Процедура ПропуститьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	// Если свойство отсутствует, то бизнес-логика проверяется.
	Объект.ДополнительныеСвойства.Вставить("ПропуститьБизнесЛогикуПриЗаписи", Истина);
	
КонецПроцедуры

// Определяет, следует ли пропустить выполнение бизнес-логики при записи объекта.
// Пропуск бизнес-логики может потребоваться для выполнения служебных действий:
// обновление данных в ходе обновления версии программы, загрузка данных, изменение активности движений.
// Следует вызывать из обработчика ПередЗаписью.
//
// См. также ПропуститьБизнесЛогикуПриЗаписи
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект,
//           РегистрБухгалтерииНаборЗаписей, РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей,
//           КонстантаМенеджерЗначения - записываемый объект.
//
// Возвращаемое значение:
//  Булево - Истина, если бизнес-логику выполнять не следует.
//
Функция ПропущенаБизнесЛогикаПриЗаписи(Знач Объект) Экспорт
	
	// неявно, в загрузке данных
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат Истина;
	КонецЕсли;
	
	// явно, например, в обработчике обновления
	Возврат Объект.ДополнительныеСвойства.Свойство("ПропуститьБизнесЛогикуПриЗаписи")
		И Объект.ДополнительныеСвойства.ПропуститьБизнесЛогикуПриЗаписи;
	
КонецФункции

#КонецОбласти