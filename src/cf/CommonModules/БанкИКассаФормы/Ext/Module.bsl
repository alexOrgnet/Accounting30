#Область СлужебныеПроцедурыИФункции

// Устанавливает значение переключателя РасчетыПриОплате и его видимость
// в зависимости от настроенных опций и значения реквизита объекта БезЗакрывающихДокументов.
//
// Параметры:
//   Форма  - ФормаКлиентскогоПриложения - форма документа с поддержкой отражения без закрывающих документов.
//
Процедура ПодготовитьРасчетыПриОплате(Форма) Экспорт
	
	ИзменитьРасчетыПриОплате(Форма, Ложь);
	
КонецПроцедуры

// Устанавливает режим БезЗакрывающихДокументов, если допустимо текущими опциями,
// обновляет значение переключателя РасчетыПриОплате и его видимость.
//
// Параметры:
//   Форма  - ФормаКлиентскогоПриложения - форма документа с поддержкой отражения без закрывающих документов.
//
Процедура УстановитьРасчетыПриОплате(Форма) Экспорт
	
	ИзменитьРасчетыПриОплате(Форма, Истина);
	
КонецПроцедуры

Процедура ИзменитьРасчетыПриОплате(Форма, УстановитьБезЗакрывающихДокументов) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	УчетБезДокументовВозможен = УчетКассовымМетодом.УчетБезЗакрывающихДокументовВозможен(Объект.Организация, Объект.Дата);
	
	ЕстьРасчетыСПокупателями = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПокупателями(Объект.ВидОперации);
	ЕстьРасчетыСПоставщиками = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПоставщиками(Объект.ВидОперации);
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	ЕстьРозничнаяВыручка = УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(Объект.ВидОперации);
	ИспользоватьДокументыРозничнойТорговли = УчетДенежныхСредств.ИспользоватьЗакрывающиеДокументыРозничнойТорговли();
	
	Форма.РасчетыПриОплатеВидимость = УчетБезДокументовВозможен
		И ((ЕстьРасчетыСПокупателями Или ЕстьРасчетыСПоставщиками) И ВестиУчетРасчетовСКонтрагентами
		Или ЕстьРозничнаяВыручка И ИспользоватьДокументыРозничнойТорговли);
		
	Если УстановитьБезЗакрывающихДокументов Тогда
		Если УчетБезДокументовВозможен Тогда
			Если НЕ Форма.РасчетыПриОплатеВидимость Тогда
				Объект.БезЗакрывающихДокументов = (ЕстьРасчетыСПокупателями Или ЕстьРасчетыСПоставщиками) 
					И Не ВестиУчетРасчетовСКонтрагентами
					Или ЕстьРозничнаяВыручка И Не ИспользоватьДокументыРозничнойТорговли;
			КонецЕсли;
		Иначе
			Объект.БезЗакрывающихДокументов = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Форма.РасчетыПриОплате = ?(Объект.БезЗакрывающихДокументов, "БезДокументов", "ПоДокументам");
	
КонецПроцедуры

Процедура УстановитьЗаголовокДоговорСтатьяРасходов(Форма) Экспорт
	
	Объект = Форма.объект;
	Элементы = Форма.Элементы;
	
	Если Объект.БезЗакрывающихДокументов Тогда
		ТекстЗаголовка = НСтр("ru = 'Статья расходов'");
	ИначеЕсли Форма.ВестиУчетПоДоговорам Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор / Статья расходов'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Договор'");
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаГруппаДоговор.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура УстановитьЗаголовокДоговорСтатьяДоходов(Форма) Экспорт
	
	Объект = Форма.объект;
	Элементы = Форма.Элементы;
	
	Если Объект.БезЗакрывающихДокументов Тогда
		ТекстЗаголовка = НСтр("ru = 'Статья доходов'");
	ИначеЕсли Форма.ВестиУчетПоДоговорам Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор / Статья доходов'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Договор'");
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Статья доходов'");
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаГруппаДоговор.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеБезЗакрывающихДокументов(Форма, НачалоПутиКДанным) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Поля не отображаются в режиме БезЗакрывающихДокументов.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаДоговорКонтрагента", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСпособПогашенияЗадолженности", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСделка", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьКурс", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьСумма", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьСуммаВал", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаКурсВзаиморасчетов", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСуммаВзаиморасчетов", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСтавкаНДС", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСуммаНДС", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаОтражениеАвансаСчетУчета", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаОтражениеАвансаПредставление", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаДоходыУСН", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам", ЭлементУО, Элементы); 
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаПлатежныеКартыСчетУчетаРасчетовСКонтрагентом", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаВыручкиСтавкаНДС", ЭлементУО, Элементы);
	ДобавитьПолеВУсловноеОформление("РасшифровкаВыручкиСуммаНДС", ЭлементУО, Элементы);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДанным + "БезЗакрывающихДокументов",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаОтражениеДоходаПредставление
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаОтражениеДоходаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ОтражениеДоходаВидимость",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Процедура ДобавитьПолеВУсловноеОформление(ИмяПоля, ЭлементОформления, ВсеЭлементы)
	
	Если ВсеЭлементы.Найти(ИмяПоля) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, ИмяПоля);
	
КонецПроцедуры

Функция ФормаРасшифровкиПлатежа(Форма)
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

Процедура ЗаполнитьВариантыРасчетовПриОплате(СписокВыбора, ВидОперации) Экспорт
	
	Если УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(ВидОперации) Тогда
		ПредставлениеПоДокументам = НСтр("ru = 'По отчетам о продажах'");
	Иначе
		ПредставлениеПоДокументам = НСтр("ru = 'По актам и накладным'");
	КонецЕсли;
	ПредставлениеБезДокументов = НСтр("ru = 'Без закрывающих документов'");
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ПоДокументам", ПредставлениеПоДокументам);
	СписокВыбора.Добавить("БезДокументов", ПредставлениеБезДокументов);
	
КонецПроцедуры

Функция ЕстьОсновнойДоговор(ПараметрыПлатежа) Экспорт
	
	ЕстьОсновнойДоговор = РаботаСДоговорамиКонтрагентовБП.ЭтоОсновнойДоговорКонтрагента(ПараметрыПлатежа.ДоговорКонтрагента);
	
	Если Не ЕстьОсновнойДоговор Тогда
		ВидыДоговоров       = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(ПараметрыПлатежа.ВидОперации);
		ПараметрыДоговора   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПлатежа.ДоговорКонтрагента, "Организация, Владелец");
		ЕстьОсновнойДоговор = РаботаСДоговорамиКонтрагентовБП.ЕстьОсновнойДоговорКонтрагента(
			ВидыДоговоров, ПараметрыДоговора.Организация, ПараметрыДоговора.Владелец);
		
		Если Не ЕстьОсновнойДоговор Тогда
			НовыйДоговор = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
			ЕстьОсновнойДоговор = НовыйДоговор = ПараметрыПлатежа.ДоговорКонтрагента; // договор не основной, но единственный
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОсновнойДоговор;
	
КонецФункции

Функция СтатьяДДСДляОперацииНастроена(СтатьяДДС, КонтекстОперации) Экспорт
	
	ЭтоПредопределенный  = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДДС, "ИмяПредопределенныхДанных"));
	СтатьяДДСПоУмолчанию = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
	
	Возврат ЭтоПредопределенный Или ЗначениеЗаполнено(СтатьяДДСПоУмолчанию);
	
КонецФункции

Процедура УстановитьУсловноеОформлениеНПД(Форма) Экспорт
	
	// Условное оформление поля "номер чека" для чеков НПД
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ЧекНПДОжидаетОтправкиВФНС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "НомерЧека");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"ИспользуетсяНПД", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Условное оформление аннулированных чеков НПД
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ГруппаЭлементовОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементОформления.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаЭлементовОтбора, "Список.Состояние",
		ВидСравненияКомпоновкиДанных.Равно, Перечисления.СостоянияЧековНПД.Аннулирован);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаЭлементовОтбора, "Список.ПроизведенВозвратПоЧеку",
		ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"ИспользуетсяНПД", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.АннулированныеЧекиНПД);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "Список");

КонецПроцедуры

// Возвращает таблицу расшифровки платежа, которую нужно использовать
// при перезаполнении расшифровки платежа документа при изменении ключевых реквизитов
// - Организации, Контрагента, ВидОперации и т.п.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма банковского или кассового документа.
//   РасшифровкаПлатежа - ТабличнаяЧасть, ДанныеФормыКоллекция - коллекция расшифровки платежа.
//   Сворачивать - Булево - сворачивать все строки расшифровки платежа или нет.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//      УслугаНПД - СправочникСсылка.Номенклатура - ссылка на услугу НПД
//      СуммаПлатежа - Число
//
Функция ЭталонРасшифровкиПлатежа(Форма, РасшифровкаПлатежа, Сворачивать) Экспорт
	
	// При изменении ключевых реквизитов не всегда требуется очищать информацию об услугах НПД.
	// Поэтому перед перезаполнением Расшифровки платежа запомним указанные услуги НПД и восстановим их.
	Эталон = Новый ТаблицаЗначений;
	Эталон.Колонки.Добавить("УслугаНПД", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Эталон.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Если Сворачивать Тогда
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			ЗаполнитьЗначенияСвойств(Эталон.Добавить(), СтрокаПлатеж);
		КонецЦикла;
	Иначе
		СтрокаШаблон = Эталон.Добавить();
		СтрокаШаблон.СуммаПлатежа = Форма.Объект.СуммаДокумента;
	КонецЕсли;
	
	Возврат Эталон;
	
КонецФункции

// Устанавливает значение реквизита формы "КонтрагентЮрФизЛицо" по виду операции
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура ОпределитьКонтрагентЮрФизЛицо(Форма) Экспорт 
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтрагентЮрФизЛицо") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю
		Или ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	ИначеЕсли УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОрганизацияЮрФизЛицо") Тогда
		Форма.КонтрагентЮрФизЛицо  = Форма.ОрганизацияЮрФизЛицо;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносВУставныйКапитал
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВзносВУставныйКапитал
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект.Контрагент))
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ЮридическоеФизическоеЛицо", Объект.Контрагент.Метаданные()) Тогда
		Форма.КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	Иначе
		Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение реквизита формы "КонтрагентЮрФизЛицо" по умолчанию
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура УстановитьКонтрагентаЮрФизЛицоПоУмолчанию(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Если БанкИКассаФормыКлиентСервер.ВидимостьДоступностьКонтрагентаЮрФизЛицо(Форма) Тогда 
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьБаннерПредупрежденийПриЗагрузкеВыписки(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыДокумента = ЗагрузкаВыпискиПоБанковскомуСчету.НовыйПараметрыДокументаДляРаспознаванияОперации();
		ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Объект);
		
		ТекстСообщения = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ПредупреждениеДляДокумента(
			ПараметрыДокумента);
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Элементы.ГруппаПредупреждениеОбОшибкахЗагрузки.Видимость = Истина;
			Если РегистрыСведений.БанковскиеДокументыАУСН.ДокументЗагруженИзСервиса(Объект.Ссылка) Тогда
				Элементы.ПредупреждениеОбОшибкахЗагрузки.Заголовок =
					РаботаСОповещениямиОСостоянииОбменаССервисами.ЗаголовокБаннераПредупреждениеСервисАУСН(
						ТекстСообщения, Объект.Ссылка);
			Иначе
				Элементы.ПредупреждениеОбОшибкахЗагрузки.Заголовок = ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(Форма, Документ) Экспорт
	
	Форма.Элементы.ГруппаПредупреждениеОбОшибкахЗагрузки.Видимость = Ложь;
	Если РегистрыСведений.БанковскиеДокументыАУСН.ОперацияОтклоненаФНС(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.УдалитьПредупреждениеДляДокумента(Документ);
	
КонецПроцедуры

#Область ОтражениеДоходов

// Настраивает данные и элементы форм документов, поддерживающих выбор порядка отражения доходов в налоговом учете
// при учете доходов организации кассовым методом (например, для организаций на УСН или патенте):
// заполняет перечень возможных вариантов отражения доходов организации и списки выбора полей отражения доходов.
// Вызывается при начальной подготовке формы и при изменении данных объекта, влияющих на возможные варианты
// налогового учета доходов организации.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, в которой предусмотрен выбор отражения доходов в НУ.
//           Для настройки отражения доходов должна содержать реквизит формы с типом "СписокЗначений"
//           и с именем, указанным в БанкИКассаФормыКлиентСервер.ИмяРеквизитаВариантыОтраженияДоходов().
//           При несоответствии требованиям настройка не производится.
//  НастраиваемыеЭлементы  - Массив - имена элементов формы, в которых выполняется выбор порядка отражения дохода (или аванса).
//           Элементы с переданными именами должны иметь вид "ПолеВвода", включенное свойство "РежимВыбораИзСписка",
//              ссылаться на реквизиты формы с типом "Строка" и не должны быть связаны с данными объекта.
//
Процедура НастроитьВыборОтраженияДоходов(Форма, НастраиваемыеЭлементы) Экспорт
	
	Если Не БанкИКассаФормыКлиентСервер.ФормаПоддерживаетОтражениеДоходов(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим варианты отражения доходов и списки выбора перед проверкой их востребованности.
	// Если отражение авансов/доходов не потребуется, то незачем держать в форме лишние данные.
	
	ОчиститьОтражениеДоходов(Форма, НастраиваемыеЭлементы);
	
	ИспользоватьОтражениеАванса = ИспользоватьОтражениеАванса(Форма);
	ИспользоватьОтражениеДохода = ИспользоватьОтражениеДохода(Форма);
	ИспользоватьОтражениеДоходаПриРасчетахПоПлатежнымКартам = ИспользоватьОтражениеДоходаПриРасчетахПоПлатежнымКартам(Форма);
	
	Если ИспользоватьОтражениеАванса
		Или ИспользоватьОтражениеДохода
		Или ИспользоватьОтражениеДоходаПриРасчетахПоПлатежнымКартам Тогда
		ЗаполнитьОтражениеДоходов(Форма, НастраиваемыеЭлементы);
	КонецЕсли;
	
	ПоказыватьВыборОтраженияДоходов = ПоказыватьВыборОтраженияДоходов(Форма);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтражениеАвансаВидимость") Тогда
		Форма.ОтражениеАвансаВидимость = ИспользоватьОтражениеАванса И ПоказыватьВыборОтраженияДоходов;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтражениеДоходаВидимость") Тогда
		Форма.ОтражениеДоходаВидимость = ИспользоватьОтражениеДохода И ПоказыватьВыборОтраженияДоходов;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, "ОтражениеДоходаПоПлатежнымКартамВидимость") Тогда
		Форма.ОтражениеДоходаПоПлатежнымКартамВидимость = ИспользоватьОтражениеДоходаПриРасчетахПоПлатежнымКартам
			И ПоказыватьВыборОтраженияДоходов;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, "ОтражениеАвансаПодсказкаВидимость") Тогда
		Форма.ОтражениеАвансаПодсказкаВидимость = ИспользоватьОтражениеАванса
			И ЕстьЗадолженностьПоДеятельностиНаПатенте(Форма)
			И ПоказыватьВыборОтраженияДоходов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОтражениеДоходов(Форма, НастраиваемыеЭлементы)
	
	ФормаСписокВариантов = БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма);
	
	ФормаСписокВариантов.Очистить();
	
	Для Каждого ИмяЭлемента Из НастраиваемыеЭлементы Цикл
		БанкИКассаФормыКлиентСервер.ОбновитьСписокВыбораОтраженияДоходов(
			Форма.Элементы[ИмяЭлемента].СписокВыбора,
			ФормаСписокВариантов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеДоходов(Форма, НастраиваемыеЭлементы)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ФормаСписокВариантов = БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма);
	
	ДопустимыеВарианты = УчетКассовымМетодом.ДопустимыеВариантыОтраженияДоходов(Объект.Организация, Объект.Дата);
	
	Для Каждого Вариант Из ДопустимыеВарианты Цикл
		ФормаСписокВариантов.Добавить(Вариант.Значение, Вариант.Представление);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из НастраиваемыеЭлементы Цикл
		БанкИКассаФормыКлиентСервер.ОбновитьСписокВыбораОтраженияДоходов(
			Элементы[ИмяЭлемента].СписокВыбора,
			ФормаСписокВариантов);
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользоватьОтражениеАванса(Форма)
	
	Объект = Форма.Объект;
	
	ПрименяетсяУСН    = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименяетсяПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	
	Возврат (ПрименяетсяУСН Или ПрименяетсяПатент)
		И УчетДенежныхСредствКлиентСервер.ЕстьАвансыПолученные(Объект.ВидОперации);
	
КонецФункции

Функция ИспользоватьОтражениеДохода(Форма)
	
	Объект = Форма.Объект;
	
	ПрименяетсяУСН    = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименяетсяПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	
	Возврат Объект.БезЗакрывающихДокументов
		И (ПрименяетсяУСН Или ПрименяетсяПатент)
		И (УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПокупателями(Объект.ВидОперации)
			Или УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(Объект.ВидОперации));
	
КонецФункции

Функция ИспользоватьОтражениеДоходаПриРасчетахПоПлатежнымКартам(Форма)
	
	Объект = Форма.Объект;
	
	ПрименяетсяУСН    = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименяетсяПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);

	Возврат Не Объект.БезЗакрывающихДокументов
		И (ПрименяетсяУСН Или ПрименяетсяПатент)
		И УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоПлатежнымКартам(Объект.ВидОперации)
		И УчетПСН.УчитыватьЗадолженностьПоДеятельностиНаПатенте(Объект.Организация, Объект.Дата)
		И УчетПСН.ЕстьОстаткиРасчетовСПокупателямиПоДеятельностиНаПатенте(Объект.Организация, Объект.Дата);
	
КонецФункции

Функция ПоказыватьВыборОтраженияДоходов(Форма)
	
	Объект = Форма.Объект;
	
	ПрименяетсяТолькоПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
	// Если вариант отражения доходов/аванса единственный, поле заполнено отражением по умолчанию и скрыто.
	// Исключение - ИП на патенте без совмещения с другими режимами. У таких ИП поле отображается всегда,
	// чтобы пользователь мог создать из документа первый патент при их отсутствии.
	
	Возврат ПрименяетсяТолькоПатент
		Или БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма).Количество() > 1;
	
КонецФункции

Функция ЕстьЗадолженностьПоДеятельностиНаПатенте(Форма)
	
	Объект = Форма.Объект;
	
	Возврат УчетПСН.УчитыватьЗадолженностьПоДеятельностиНаПатенте(Объект.Организация, Объект.Дата)
		И УчетПСН.ЕстьОстаткиРасчетовСПокупателямиПоДеятельностиНаПатенте(Объект.Организация, Объект.Дата);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБаннераНПД

Функция ВидимостьБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, Объект.Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Налог)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога") <> Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		// Для организации на НПД, для которой нет возможности подключиться к платформе Самозанятых,
		// показываем баннер всегда.
		Возврат Истина;
	КонецЕсли;
	
	// Для организации на НПД, которая может подключится к платформе Самозанятых,
	// показываем баннер в том случае, если реквизиты не заполнены.
	Возврат Не ЗначениеЗаполнено(Объект.Контрагент) Или Не ЗначениеЗаполнено(Объект.СчетКонтрагента)
		Или Не ЗначениеЗаполнено(Объект.КодОКАТО);
	
КонецФункции

Функция ТекстБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД()
	
	ЧастиТекста = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		ЧастиТекста.Добавить(НСтр("ru = 'Автоматически заполнить платежный документ можно из помощника по уплате'"));
		ЧастиТекста.Добавить(" ");
		ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налога на профессиональный доход'"),
			, , , "ОткрытьПомощникНПД"));
	Иначе
		ЧастиТекста.Добавить(НСтр("ru = 'Укажите реквизиты платежа из уведомления сервиса'"));
		ЧастиТекста.Добавить(" ");
		ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Мой налог'"),
			, , , "ПерейтиВЛичныйКабинетНПД"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиТекста);
	
КонецФункции

Процедура ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("ПредупреждениеОЗаполненииРеквизитовПлатежаНПД") = Неопределено Тогда
		// Баннера на форме нет, ничего показывать не нужно.
		Возврат;
	КонецЕсли;
	
	ВидимостьБаннера = ВидимостьБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
	Если ВидимостьБаннера Тогда
		Элементы.ДекорацияПредупреждениеОЗаполненииРеквизитовПлатежаНПД.Заголовок = 
			ТекстБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД();
	КонецЕсли;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовПлатежаНПД.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБанком

Процедура ОпределитьСчетаБезИнтеграции(Форма) Экспорт
	
	Если Не Форма.ИнтеграцияСБанкамиПодключена Тогда
		Возврат;
	КонецЕсли;
	
	// В режиме интеграции, требуется загружать выписку только по тем счетам, с которыми не настроена интеграция,
	// т.к. по счетам итеграции выписка загружается автоматически.
	СчетаБезИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииБезИнтеграции(
		Форма.ОтборОрганизация);
	КоличествоСчетовБезИнтеграции = СчетаБезИнтеграции.Количество();
	
	Форма.ЕстьБанковскиеСчетаБезИнтеграции = КоличествоСчетовБезИнтеграции > 0;
	
	Форма.БанковскиеСчетаБезИнтеграции = Новый Структура;
	Форма.БанковскиеСчетаБезИнтеграции.Вставить("Счета", СчетаБезИнтеграции);
	
КонецПроцедуры

Процедура СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком(Форма) Экспорт
	
	Форма.ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком = Ложь;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком",
		Форма.БИКБанкаИнтеграции,
		Форма.ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком);
	
	ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(Форма);
	
КонецПроцедуры

Процедура ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаКонтекстнаяПодсказкаИнтеграцияСБанком.Видимость = Форма.ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком;
	
	Если Не Форма.ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком
		Или Не ЗначениеЗаполнено(Форма.НазваниеБанкаИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиБанера = Новый Массив;
	ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Интеграция с банком'"), Новый Шрифт(Новый Шрифт,, 14)));
	ЧастиБанера.Добавить(Символы.ПС);
	ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Операции из'")));
	ЧастиБанера.Добавить(" ");
	ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(Форма.НазваниеБанкаИнтеграции));
	ЧастиБанера.Добавить(" ");
	ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'загружаются автоматически.'")));
	ЧастиБанера.Добавить(Символы.ПС);
	ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Чтобы создавать документы и загружать выписки по счету в другом банке, укажите его в разделе'")));
	ЧастиБанера.Добавить(" ");
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Настройки'"),,,, "e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.НастройкиБазовый"));
	Иначе
		ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Настройки'"),,,, "e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.Настройки"));
	КонецЕсли;
	
	Элементы.ДекорацияТекстКонтекстнаяПодсказкаИнтеграцияСБанком.Заголовок = Новый ФорматированнаяСтрока(ЧастиБанера);
	
КонецПроцедуры

Процедура НастроитьФормуДокументаДляРежимаИнтеграцииСБанком(Форма) Экспорт
	
	// Упростить можно только однострочную форму
	Если БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма)
		Или Не БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИнтеграцияОрганизацииВключена =
		Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(Форма.Объект.Организация);
	
	Если Не Форма.ИнтеграцияОрганизацииВключена Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаПодвал.Видимость = Ложь;
	
	Элемент = ЭлементГруппаКомандКоманднойПанели(Форма, "ГруппаГлобальныеКоманды");
	ОтключитьВидимостьЭлемента(Элемент);
	
	Элемент = ЭлементГруппаКомандКоманднойПанели(Форма, "ГруппаВажныеКоманды");
	ОтключитьВидимостьЭлемента(Элемент);
	
	СкрытьКомандыЗаписиПроведенияНеЗакрывающиеФормуДокумента(Форма);
	
КонецПроцедуры

Процедура НастроитьФормуЖурналаДляРежимаИнтеграции(Форма, ИнтеграцияОрганизацииВключена) Экспорт
	
	// Упростить можно только однострочную форму
	Если Не ИнтеграцияОрганизацииВключена Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПометкаУдаления", Ложь,,, Истина);
	
	НастроитьКонтекстноеМеню(Форма);
	
	Элемент = ЭлементГруппаКомандКоманднойПанели(Форма, "ГруппаГлобальныеКоманды", Элементы.ГруппаКнопкиКоманднойПанели);
	ОтключитьВидимостьЭлемента(Элемент);
	
	ЭлементГруппаПроведение = ЭлементГруппаКомандКоманднойПанели(
		Форма, "ФормаПроведение", Элементы.ГруппаКнопкиКоманднойПанели);
	ЭлементОтменаПроведения = ЭлементВДереве(
		ЭлементГруппаПроведение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФормаОтменаПроведения"));
	ОтключитьВидимостьЭлемента(ЭлементОтменаПроведения);
	
	ЭлементГруппаВажныеКоманды = ЭлементГруппаКомандКоманднойПанели(
		Форма, "ГруппаВажныеКоманды", Элементы.ГруппаКнопкиКоманднойПанели);
	Если ЭлементГруппаВажныеКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементГруппаВажныеКоманды.ПодчиненныеЭлементы Цикл
		Если СтрЗаканчиваетсяНа(Элемент.Имя, "КлиентБанк") Тогда
			Если Элемент.Имя = "ЗагрузитьИзКлиентБанк" Тогда
				Элемент.Заголовок = НСтр("ru = 'Загрузить из другого банка'");
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ОтключитьВидимостьЭлемента(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкрытьКомандыЗаписиПроведенияНеЗакрывающиеФормуДокумента(Форма)
	
	Элемент = ЭлементГруппаКомандКоманднойПанели(Форма);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтрокиДереваРасположенияКоманды = Новый Массив;
	ЭлементыСтрокиДереваРасположенияКоманды.Добавить("ФормаЗаписать");
	ЭлементыСтрокиДереваРасположенияКоманды.Добавить("ФормаПроведение");
	Для Каждого ЭлементСтрокиДерева Из ЭлементыСтрокиДереваРасположенияКоманды Цикл
		ЭлементКоманды = Элемент.ПодчиненныеЭлементы.Найти(ЭлементСтрокиДерева);
		ОтключитьВидимостьЭлемента(ЭлементКоманды);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьВидимостьЭлемента(Элемент)
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Ложь;
	
КонецПроцедуры

Процедура НастроитьКонтекстноеМеню(Форма)
	
	Элемент = ЭлементВДереве(
		Форма.Элементы.Список.КонтекстноеМеню, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СписокКонтекстноеМенюГруппа"));
	
	ЭлементКУдалению = ЭлементВДереве(
		Элемент, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СписокКонтекстноеМенюИзменитьВыделенные"));
	ОтключитьВидимостьЭлемента(ЭлементКУдалению);
	
	ЭлементыДереваРасположенияКоманды = Новый Массив;
	ЭлементыДереваРасположенияКоманды.Добавить("СписокКонтекстноеМенюПроведение");
	ЭлементыДереваРасположенияКоманды.Добавить("СписокКонтекстноеМенюОтменаПроведения");
	
	ЭлементКУдалению = ЭлементВДереве(Элемент, ЭлементыДереваРасположенияКоманды);
	ОтключитьВидимостьЭлемента(ЭлементКУдалению);
	
КонецПроцедуры

Функция ЭлементГруппаКомандКоманднойПанели(Форма, ИмяГруппыКоманд = "", ГруппаКнопкиКоманднойПанели = Неопределено)
	
	Если ГруппаКнопкиКоманднойПанели <> Неопределено Тогда
		Элемент = ГруппаКнопкиКоманднойПанели;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КоманднаяПанель") Тогда
		Элемент = Форма.КоманднаяПанель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыДереваРасположенияКоманды = Новый Массив;
	Если ГруппаКнопкиКоманднойПанели = Неопределено Тогда
		ЭлементыДереваРасположенияКоманды.Добавить("ГруппаКнопкиКоманднойПанели");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяГруппыКоманд) Тогда
		ЭлементыДереваРасположенияКоманды.Добавить(ИмяГруппыКоманд);
	КонецЕсли;
	
	Элемент = ЭлементВДереве(Элемент, ЭлементыДереваРасположенияКоманды);
	
	Возврат Элемент;
	
КонецФункции

Функция ЭлементВДереве(ЭлементГруппаФормы, ЭлементыДереваРасположенияКоманды)
	
	Если ЭлементГруппаФормы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Элемент = ЭлементГруппаФормы;
	КонецЕсли;
	
	Для Каждого ЭлементСтрокиДерева Из ЭлементыДереваРасположенияКоманды Цикл
		Элемент = Элемент.ПодчиненныеЭлементы.Найти(ЭлементСтрокиДерева);
		Если Элемент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияАУСН

Процедура ПриСозданииНаСервереВРежимеИнтеграцииАУСН(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не Форма.ПрименяетсяАУСН Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ИсточникРазметкиАУСН) Тогда
		Объект.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДанныеДокумента = РегистрыСведений.БанковскиеДокументыАУСН.ДанныеДокумента(Объект.Ссылка);
		Если ДанныеДокумента <> Неопределено Тогда
			Форма.СтатусАУСН = ДанныеДокумента.СтатусОбменаАУСН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыИнтеграцииАУСН(Форма) Экспорт
	
	Если Не Форма.ПрименяетсяАУСН
		Или ФормаРасшифровкиПлатежа(Форма)
		Или БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	СервисПодключен = РегистрыСведений.СостоянияИнтеграцииАУСН.БанковскийСчетПодключенКСервису(
		Объект.Организация, Объект.СчетОрганизации);
	
	ВозможностьПодключенияКСервису = Ложь;
	Если СервисПодключен Тогда
		ВозможностьПодключенияКСервису = Истина;
	Иначе
		ПодключенныеБанки = РегистрыСведений.БанкиАУСН.ПодключенныеБанки();
		Если ПодключенныеБанки <> Неопределено Тогда
			БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "Банк.Код");
			БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
			ПараметрыПоиска = Новый Структура("Банк", БанкПоКлассификатору);
			ПодключенияБанка = ПодключенныеБанки.НайтиСтроки(ПараметрыПоиска);
			ВозможностьПодключенияКСервису = ПодключенияБанка.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПодключенСервисАУСН = СервисПодключен;
	Форма.ВозможностьПодключенияКСервисуАУСН = ВозможностьПодключенияКСервису;
	
КонецПроцедуры

Процедура НастроитьЭлементыИсточникаРазметкиАУСН(Форма, ЭлементыИсточника) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма)
		Или Не Форма.ПрименяетсяАУСН Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДоступенИсточникБанк = Объект.РазметкаАУСНБанка.Количество() > 0;
	
	Для Каждого ИмяЭлемента Из ЭлементыИсточника Цикл
		ЭлементИсточника = Элементы.Найти(ИмяЭлемента);
		Если ЭлементИсточника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементИсточникаПодсказка = Элементы[СтрШаблон("%1РасширеннаяПодсказка", ИмяЭлемента)];
		
		Если Не ДоступенИсточникБанк Тогда
			Если Форма.ПодключенСервисАУСН Тогда
				ТекстПодсказки = 
					НСтр("ru = 'По данным, указанным в документе, будет рассчитана сумма налога АУСН. 
						|Сведения об операции можно скорректировать в личном кабинете банка. 
						|В этом случае, сумма налога АУСН рассчитается по данным, загруженным из банка.'");
			Иначе
				НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "Банк.Наименование");
				Если Форма.ВозможностьПодключенияКСервисуАУСН Тогда
					ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
						НСтр("ru = 'Подключите <a href=""e1cib/app/Обработка.ПодключениеАУСН"">Сервис АУСН</a> и обменивайтесь с %1 автоматически.'"),
							НаименованиеБанка);
				Иначе
					ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
						НСтр("ru = '%1 не подключен к <a href=""e1cib/app/Обработка.ПодключениеАУСН"">Сервису АУСН</a>. Обратитесь в банк, чтобы обмениваться с ним автоматически.'"),
							НаименованиеБанка);
				КонецЕсли;
			КонецЕсли;
			ЭлементИсточника.ТолькоПросмотр = Истина;
			ЭлементИсточникаПодсказка.Заголовок = ТекстПодсказки;
			ЭлементИсточника.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
			ЭлементИсточника.РастягиватьПоГоризонтали = Ложь;
			ЭлементИсточника.Ширина = 14;
		Иначе
			ЭлементИсточника.ТолькоПросмотр = Ложь;
			ЭлементИсточникаПодсказка.Заголовок = 
				НСтр("ru = 'Источник, по данным которого будет рассчитана сумма налога АУСН'");
			ЭлементИсточника.ЦветРамки = Новый Цвет;
			ЭлементИсточника.РастягиватьПоГоризонтали = Неопределено;
			ЭлементИсточника.Ширина = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
