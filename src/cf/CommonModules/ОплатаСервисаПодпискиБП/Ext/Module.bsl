#Область СлужебныйПрограммныйИнтерфейс

// Создает подписки по счету.
//
// Параметры:
//	- Счет - ДокументСсылка.СчетНаОплатуПокупателю - счет, по которому нужно создать подписки
//
// Возвращаемое значение:
//	Массив структур - Данные подписки
//	- КодПодписки - Число - код созданной подписки в мендежере сервиса
//	- КодОбслуживающейОрганизации - Число - код обслуживающей организации, создающей подписку, в менеджере сервиса
//	- КодАбонента - Число - код абонента, которому создается подписка, в менеджере сервиса
//	- КодТарифа - Строка - код тарифа в менеджере сервиса
//	- НачалоПодписки - Дата - дата начала действия подписки
//	- КонецПодписки - Дата - дата окончания действия подписки
//
Функция СоздатьПодпискиПоСчету(Счет) Экспорт
	
	ДанныеПодписок = ПодпискиПоСчету(Счет);
	
	Для каждого ДанныеПодписки Из ДанныеПодписок Цикл
		Результат = СоздатьПодписку(ДанныеПодписки);
		ДанныеПодписки.Вставить("КодПодписки", Результат.Номер);
		
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПродавцуОПодписке(Счет, ДанныеПодписки);
		ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьПисьмоПокупателюОПодписке(Счет, ДанныеПодписки);
	КонецЦикла;
	
	Документы.СчетНаОплатуПокупателю.СделатьОтгруженным(Счет);
	
	Возврат ДанныеПодписок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодпискиПоСчету(Счет)
	
	Подписки = Новый Массив;
	
	СвойстваСчета = РегистрыСведений.СчетНаОплатуПокупателюОплатаСервиса.СвойстваСчета(Счет);
	Если НЕ СвойстваСчета.Выбран() Тогда
		ВызватьИсключение ПредставлениеОшибки(НСтр("ru='Не заполнены свойства счета для биллинга'"));
	КонецЕсли;
	
	КодПродавца = СвойстваСчета.КодПродавца;
	КодПокупателя = СвойстваСчета.КодПокупателя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Счет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2", НСтр("ru='Счет не содержит товарных позиций'"), Счет));
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КодТарифа = ОплатаСервисаБП.КодТарифа(Выборка.Артикул);
		КодПериодаДействия = ОплатаСервисаБП.КодПериодаДействия(Выборка.Артикул);
		Префикс = ОплатаСервисаБП.ПрефиксТарифа(Выборка.Артикул);
		
		Если НЕ ЗначениеЗаполнено(Префикс) Тогда
			ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2 (%3)", НСтр("ru='Не указан префикс тарифа'"), Выборка.Номенклатура, Счет));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КодТарифа) Тогда
			ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2 (%3)", НСтр("ru='Не указан код тарифа'"), Выборка.Номенклатура, Счет));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КодПериодаДействия) Тогда
			ВызватьИсключение ПредставлениеОшибки(СтрШаблон("%1: %2 (%3)", НСтр("ru='Не указан код периода действия'"), Выборка.Номенклатура, Счет));
		КонецЕсли;
		
		КонецПредыдущейПодписки = ОкончаниеПодпискиАбонента(КодПродавца, КодПокупателя);
		НачалоПодписки = Макс(НачалоДня(ТекущаяДата()), КонецПредыдущейПодписки + 1);
		
		Подписка = ПрограммныйИнтерфейсСервиса.НовыйШаблонПодпискиНаОсновнойТариф();
		Подписка.КодВедущегоАбонента = КодПродавца;
		Подписка.КодОбслуживаемогоАбонента = КодПокупателя;
		Если Префикс = ОплатаСервисаБП.ПрефиксТарифаПровайдера() Тогда
			Подписка.КодТарифаПровайдера = КодТарифа;
		КонецЕсли;
		Если Префикс = ОплатаСервисаБП.ПрефиксТарифаОбслуживающейОрганизации() Тогда
			Подписка.КодТарифаОбслуживающейОрганизации = КодТарифа;
		КонецЕсли;
		Подписка.КодПериодаДействия = КодПериодаДействия;
		Подписка.ДатаПодключения = НачалоПодписки;
		Подписки.Добавить(Подписка);
		
	КонецЦикла;
	
	Возврат Подписки;
	
КонецФункции

Функция СоздатьПодписку(ДанныеПодписки)
	
	СвойстваОтвета = ПрограммныйИнтерфейсСервиса.НовыйОсновныеСвойстваОтвета();
	Результат = ПрограммныйИнтерфейсСервиса.СоздатьПодпискуНаОсновнойТариф(ДанныеПодписки,, СвойстваОтвета);
	Если Результат = Неопределено Тогда
		ВызватьИсключение ПредставлениеОшибки(СтрШаблон("ru = 'Создание подписки: %1 %2'", СвойстваОтвета.КодОтвета, СвойстваОтвета.Сообщение));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДействующуюПродлевающуюПодписку(КодОбслуживающейОрганизации, КодАбонента) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Подписки = ПодпискиАбонента(КодОбслуживающейОрганизации, КодАбонента);
	
	Для каждого Подписка Из Подписки Цикл
		Если Подписка.ТипПодписки = Перечисления.ТипыПодписокСервиса.Продлевающая
			И Подписка.ДатаПодключения <= ТекущаяДата И Подписка.ДатаОтключения >= ТекущаяДата Тогда
			Возврат Подписка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОкончаниеПодпискиАбонента(КодОбслуживающейОрганизации, КодАбонента) Экспорт
	
	ОкончаниеПодписки = Дата(1, 1, 1);
	
	ОбслуживаемыеТарифы = АртикулыОбслуживаемыхТарифов();
	
	Подписки = ПодпискиАбонента(КодОбслуживающейОрганизации, КодАбонента);
	
	Для каждого Подписка Из Подписки Цикл
		
		// Учитываются только основные подписки
		Если Подписка.ТипПодписки <> Перечисления.ТипыПодписокСервиса.Основная Тогда
			Продолжить;
		КонецЕсли;
		
		// Учитываются только обслуживаемые организацией тарифы
		ШаблонАртикула = "%1-%2-%3";
		АртикулТарифаПровайдера = СтрШаблон(ШаблонАртикула,
			ОплатаСервисаБП.ПрефиксТарифаПровайдера(),
			СокрЛП(Подписка.КодПериодаДействия),
			СокрЛП(Подписка.КодТарифаПровайдера));
		АкртикулТарифаОбслуживающейОрганизации = СтрШаблон(ШаблонАртикула,
			ОплатаСервисаБП.ПрефиксТарифаОбслуживающейОрганизации(),
			СокрЛП(Подписка.КодПериодаДействия),
			СокрЛП(Подписка.КодТарифаОбслуживающейОрганизации));
		
		Если ОбслуживаемыеТарифы[АртикулТарифаПровайдера] = Неопределено
			И ОбслуживаемыеТарифы[АкртикулТарифаОбслуживающейОрганизации] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Подписка.ДатаОтключения > ОкончаниеПодписки Тогда
			ОкончаниеПодписки = Подписка.ДатаОтключения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОкончаниеПодписки;
	
КонецФункции

Функция ПодпискиАбонента(КодОбслуживающейОрганизации, КодАбонента)
	
	ОтборПодписок = ПрограммныйИнтерфейсСервиса.НовыйОтборПодписокНаТарифы();
	ОтборПодписок.КодОбслуживаемогоАбонента = КодАбонента;
	ОтборПодписок.ТолькоАктивные = Истина;
	
	Подписки = ПрограммныйИнтерфейсСервиса.ПодпискиНаТарифы(ОтборПодписок, КодОбслуживающейОрганизации);
	
	Возврат Подписки;
	
КонецФункции

Функция АртикулыОбслуживаемыхТарифов()
	
	АртикулыОбслуживаемыхТарифов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АртикулыОбслуживаемыхТарифов.Вставить(Выборка.Артикул, Истина);
	КонецЦикла;
	
	Возврат АртикулыОбслуживаемыхТарифов;
	
КонецФункции

Функция ПредставлениеОшибки(ТекстОшибки)
	
	Возврат СтрШаблон("%1: %2", НСтр("ru='Подписки'"), ТекстОшибки);
	
КонецФункции

#КонецОбласти