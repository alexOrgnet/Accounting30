
#Область ПрограммныйИнтерфейс

// Возвращает список приложений в облаке, доступных пользователю сервиса.
// 
// Параметры:
//   Логин - Строка - логин пользователя сервиса
//   Пароль - Строка - пароль пользователя сервиса
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПрограммныйИнтерфейсСервиса.Приложения()
//
Функция ДоступныеПриложения(Логин, Пароль) Экспорт
	
	Результат = Неопределено;
	Абоненты = ПрограммныйИнтерфейсСервиса.Абоненты();
	КодЭтогоПриложения = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Для Каждого Абонент Из Абоненты Цикл
		
		Приложения = ПриложенияАбонента(Абонент.Код, Логин, Пароль);
		Если Приложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Результат = Приложения.СкопироватьКолонки();
		КонецЕсли;
		Для Каждого Приложение Из Приложения Цикл
			
			Если Приложение.СостояниеПриложения <> Перечисления.СостоянияПриложений.Используется
				Или Приложение.Код = КодЭтогоПриложения Тогда
				
				Продолжить;
			КонецЕсли;
			
			// Получение доступных приложений выполняется синхронно, поэтому для большей отзывчивости интерфейса
			// возможность работы приложений с календарем отчетности на этом шаге не проверяется.
			// Проверка будет выполнена позже в методе ПодключитьНовыеПриложения(), который уже выполняется асинхронно.
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Приложение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает список организаций, данные по которым доступны пользователю.
// Некоторые организации могкт быть недоступны, если используется RLS.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//   Массив из элементов типа СправочникСсылка.Организации
//
Функция ДоступныеОрганизацииПользователя(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоступныеОрганизации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрБухгалтерии.Хозрасчетный",
		Ложь,
		Пользователь);
		
	Результат = Новый Массив;
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		ДанныеОрганизациии = Новый Структура("Наименование, Идентификатор",
			Организация.Наименование, XMLСтрока(Организация.УникальныйИдентификатор()));
		Результат.Добавить(ДанныеОрганизациии);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает у другого облачного приложения данные отчетной кампании.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, выполняющий запрос.
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения, которому направляется запрос
//   Параметры - Структура
//      *ДатаНачала - Дата - период, начиная с которого необходимо запросить данные
//      *ДатаКонца - Дата - конечный период, по который требуется запросить данные
//      *СобытияКалендаря - Строка - отбор по виду отчетов (все отчеты" или "только уведомления ЕНС")
//
// Возвращаемое значение:
//   см. возращаемые значения метода СообщенияОблачныхПриложений.ЗапроситьДанныеПриложения
//
Функция ЗапроситьДанныеОтчетнойКампании(Пользователь, Приложение, Параметры) Экспорт
	
	ПараметрыЗапроса = НовыйПараметрыЗапросаДанных();
	ПараметрыЗапроса.Отбор.Период.Начало = Параметры.ДатаНачала;
	ПараметрыЗапроса.Отбор.Период.Конец = Параметры.ДатаКонца;
	ПараметрыЗапроса.Отбор.СобытияКалендаря = Параметры.СобытияКалендаря;
	
	УстановитьПривилегированныйРежим(Истина);
	Организации = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Организации(Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Отбор = Новый Структура("ПриложениеСсылка, ВыводитьВКалендарь", Приложение, Ложь);
	СтрокиОрганизацииНеЗапрашивать = Организации.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиОрганизацииНеЗапрашивать Цикл
		ПараметрыЗапроса.Отбор.ИсключитьОрганизации.Добавить(Строка.ОрганизацияИдентификатор);
	КонецЦикла;
	
	Запрос = СообщенияОблачныхПриложений.ЗапроситьДанныеПриложения(
		Пользователь,
		Приложение,
		ИмяПрикладногоМеханизма(),
		ПараметрыЗапроса);
		
	Возврат Запрос;
КонецФункции

// Запрашивает у другого облачного приложения список доступных организаций.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, выполняющий запрос.
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения, которому направляется запрос
//
// Возвращаемое значение:
//   см. возращаемые значения метода СообщенияОблачныхПриложений.ЗапроситьДанныеПриложения
//
Функция ЗапроситьСписокОрганизаций(Пользователь, Приложение) Экспорт
	
	Запрос = СообщенияОблачныхПриложений.ЗапроситьДанныеПриложения(
		Пользователь,
		Приложение,
		ИмяПрикладногоМеханизма(),
		НовыйПараметрыЗапросаСпискаОрганизаций());
		
	Возврат Запрос;
КонецФункции

// Обрабатывает запрос от облачного приложения.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, отправивший запрос
//   Запрос - Строка - запрос в виде строки JSON
//
// Возвращаемое значение:
//   Структура
//      *ТипЗапроса - Строка - тип обработанного запроса
//      *Ответ - Структура,
//               для запроса с типом запроса данных отчетности (см. ТипЗапросаДанныеОтчетности()):
//               таблица значений, преобразованная в массив структур
//               см. СообщенияОтчетностиОблачныхПриложений.НовыйДанныеОтчетности,
//               для запроса с типом запроса списка организаций (см. ТипЗапросаСписокОрганизаций()):
//                  массив структур c ключами:
//                  *Наименование - Строка - наименование организации
//                  *Идентификатор - Строка - уникальный идентификатор организации
//   В случае ошибки : Cтруктура
//      *Ошибка - Строка - описание возникшей ошибки
//
Функция ОтветНаЗапросОблачногоПриложения(Пользователь, Запрос) Экспорт
	
	ДанныеЗапроса = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(Запрос);
	// Обязательно должен быть передан тип запроса.
	Если Не ДанныеЗапроса.Свойство("ТипЗапроса") Тогда
		Возврат Новый Структура("Ошибка", Нстр("ru = 'Не передан тип запроса'"));
	КонецЕсли;
	
	Если ДанныеЗапроса.ТипЗапроса = ТипЗапросаДанныеОтчетности() Тогда
		// Обработка запроса на получение данных отчетности.
		Возврат ОтветДанныеОтчетности(Пользователь, ДанныеЗапроса.Отбор);
		
	ИначеЕсли ДанныеЗапроса.ТипЗапроса = ТипЗапросаСписокОрганизаций() Тогда
		// Обработка запроса на получение списка организаций
		Возврат ОтветСписокОрганизаций(Пользователь);
		
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка", Нстр("ru = 'Неизвестный тип запроса'"));
КонецФункции

// Получает ответы от подключенных приложений, которым был ранее отправлен запрос
// на получение данных.
//
// Параметры:
//  Запросы - ТаблицаЗначений - отправленные ранее запросы другим облачным приложениям,
//            см. НовыйЗапросыОблачнымПриложениям().
//
// Возвращаемое значение:
//   Структура - 
//      *Ответы - ТаблицаЗначений
//         **Приложение - СправочникСсылка.ОблачныеПриложения - приложение, от которого получен ответ
//         **Данные - Строка- ответы приложений в виде строки JSON,
//      *ОжидающиеЗапросы - ТаблицаЗначений - запросы, по которым не удалось получить ответ,
//                          см. НовыйЗапросыОблачнымПриложениям()
//      *ОшибкиПриложений - Массив - список приложений, получение данных от которых более невозможно,
//                        опрашивать повторно их не следует.
//
Функция ПолучитьОтветыНаЗапросы(Запросы) Экспорт
	
	Ответы = Новый ТаблицаЗначений;
	Ответы.Колонки.Добавить("Приложение", Новый ОписаниеТипов("СправочникСсылка.ОблачныеПриложения"));
	Ответы.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	
	ОжидающиеЗапросы = НовыйЗапросыОблачнымПриложениям();
	ОшибкиПриложений = Новый Массив;
	Пользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Запрос Из Запросы Цикл
		
		ДанныеПриложения = СообщенияОблачныхПриложений.ПолучитьДанныеПриложения(
			Пользователь,
			Запрос.Приложение,
			ИмяПрикладногоМеханизма(),
			Запрос.ИдентификаторЗапроса);
			
		Если ДанныеПриложения = Неопределено Тогда
			// Не удалось получить данные, повторять запрос не следует.
			ОшибкиПриложений.Добавить(Запрос.Приложение);
			Продолжить;
			
		ИначеЕсли ДанныеПриложения = "" Тогда
			НоваяСтрока = ОжидающиеЗапросы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запрос);
			Продолжить;
		КонецЕсли;
		
		Ответ = Ответы.Добавить();
		Ответ.Приложение = Запрос.Приложение;
		Ответ.Данные = ДанныеПриложения;
		
	КонецЦикла;
	
	Возврат Новый Структура("Ответы,ОжидающиеЗапросы,ОшибкиПриложений", Ответы, ОжидающиеЗапросы, ОшибкиПриложений);
КонецФункции

// Подтверждает получение данных от другого облачного приложения по отправленному ранее запросу.
//
// Параметры:
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения, которому был отправлен запрос.
//   ИдентификаторЗапроса - Строка - идентификатор запроса, полученный методом
//                                   СообщенияОблачныхПриложений.ЗапроситьДанныеПриложения()
//
Процедура ОтметитьДанныеПолучены(Приложение, ИдентификаторЗапроса) Экспорт
	
	СообщенияОблачныхПриложений.ОтметитьДанныеПолучены(
		Пользователи.ТекущийПользователь(),
		Приложение,
		ИмяПрикладногоМеханизма(),
		ИдентификаторЗапроса);
		
КонецПроцедуры

// Возвращает параметры запуска фонового задания для подключения новых приложений.
//
// Возвращаемое значение:
//   - Структура:
//     * Пользователь - СправочникСсылка.Пользователи - пользователь, подключающий новые приложения.
//     * Логин - Строка - логин пользователя в сервисе.
//     * Пароль - Строка - пароль пользователя в сервисе.
//     * ПриложенияПользователя - ТаблицаЗначений - см. ПрограммныйИнтерфейсСервиса.Приложения()
//
Функция НовыйПараметрыПодключенияПриложений() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("ПриложенияПользователя");
	
	Возврат Параметры;
КонецФункции

// Подключает новые приложения пользователя к календарю отчетности.
// Метод выполняется асинхронно (в фоновом задании).
// 
// Параметры:
//   Параметры - Структура - см. НовыйПараметрыПодключенияПриложений().
//
// Возвращаемое значение:
//   ОшибкиПодключения - Массив - наименования приложений, которые не удалось подключить.
//
Функция ПодключитьНовыеПриложения(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПодключенныеПриложения = РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.Приложения(Параметры.Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОшибкиПодключения = Новый Массив;
	КоличествоПриложений = Параметры.ПриложенияПользователя.Количество();
	
	Счетчик = 0;
	Для Каждого Приложение Из Параметры.ПриложенияПользователя Цикл
		
		Счетчик = Счетчик + 1;
		ДоступноПодключение = СообщенияОблачныхПриложений.ПриложениеГотовоПриниматьЗапросы(
			Приложение.АдресПриложения,
			Параметры.Логин,
			Параметры.Пароль);
			
		ПроцентВыполнения = Окр(Счетчик / КоличествоПриложений * 100);
		ТекстИдетПодключение = НСтр("ru='Идет подключение приложений...'");
		ТекстОбработано = СтрШаблон(НСтр("ru='Обработано %1 из %2'"), Счетчик, КоличествоПриложений);
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,
			СтрШаблон("%1%2%3", ТекстИдетПодключение, Символы.ПС, ТекстОбработано));
		
		Если Не ДоступноПодключение Тогда
			Продолжить;
		КонецЕсли;
			
		Отбор = Новый Структура("Адрес", Приложение.АдресПриложения);
		НаденныеПриложения = ПодключенныеПриложения.НайтиСтроки(Отбор);
		Если НаденныеПриложения.Количество() > 0 Тогда
			// Переименуем подключенное приложение, если изменилось его имя.
			Если Приложение.Наименование <> НаденныеПриложения[0].Наименование Тогда
				УстановитьПривилегированныйРежим(Истина);
				Справочники.ОблачныеПриложения.Переименовать(НаденныеПриложения[0].ПриложениеСсылка, Приложение.Наименование);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Подключаем новое приложение.
		ДанныеПодключения = СообщенияОблачныхПриложений.ПодключитьОблачноеПриложение(
			Приложение.АдресПриложения,
			Параметры.Логин,
			Параметры.Пароль,
			Приложение.Наименование);
			
		Если ДанныеПодключения = Неопределено Тогда
			ОшибкиПодключения.Добавить(Приложение.Наименование);
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Организация Из ДанныеПодключения.ДоступныеОрганизации Цикл
			РегистрыСведений.ОрганизацииОтчетностиОблачныхПриложений.УстановитьСостояние(
				Параметры.Пользователь,
				Организация,
				Истина)
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Возврат ОшибкиПодключения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйДанныеОтчетности() Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250));
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипБулево = Новый ОписаниеТипов("Булево");
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("СправочникСсылка.Организации"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ОрганизацииОблачныхПриложений"));
	ТипОрганизация = Новый ОписаниеТипов(СписокТипов);
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ПравилаФинОтчетности"));
	ТипПравило = Новый ОписаниеТипов(СписокТипов);
	
	Данные = Новый ТаблицаЗначений();
	Данные.Колонки.Добавить("Приложение", Новый ОписаниеТипов("СправочникСсылка.ОблачныеПриложения"));
	Данные.Колонки.Добавить("Организация", ТипОрганизация);
	Данные.Колонки.Добавить("ИдентификаторОрганизации", ТипСтрока);
	Данные.Колонки.Добавить("РегистрацияФНС", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Данные.Колонки.Добавить("КодФНС", ТипСтрока);
	Данные.Колонки.Добавить("КодНалога", ТипСтрока);
	Данные.Колонки.Добавить("Правило", ТипПравило);
	Данные.Колонки.Добавить("ИдентификаторПравила", ТипСтрока);
	Данные.Колонки.Добавить("НаименованиеЗадачи", ТипСтрока);
	Данные.Колонки.Добавить("НаименованиеНалога", ТипСтрока);
	Данные.Колонки.Добавить("Срок", ТипДата);
	Данные.Колонки.Добавить("НачалоВыполнения", ТипДата);
	Данные.Колонки.Добавить("КонецПериода", ТипДата);
	Данные.Колонки.Добавить("ЭтоУведомление", ТипБулево);
	Данные.Колонки.Добавить("Статус", ТипСтрока);
	Данные.Колонки.Добавить("ВАрхиве", ТипБулево);
	Данные.Колонки.Добавить("ЕстьЗадача", ТипБулево);
	Данные.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", КвалификаторЧисла));
	
	Возврат Данные;
	
КонецФункции

Функция НовыйЗапросыОблачнымПриложениям() Экспорт

	Запросы = Новый ТаблицаЗначений;
	Запросы.Колонки.Добавить("Приложение", Новый ОписаниеТипов("СправочникСсылка.ОблачныеПриложения"));
	Запросы.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	Запросы.Колонки.Добавить("ТипЗапроса", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250)));
	
	Возврат Запросы;
КонецФункции

Функция ТипЗапросаДанныеОтчетности() Экспорт
	
	Возврат "ДанныеОтчетности";
	
КонецФункции

Функция ТипЗапросаСписокОрганизаций() Экспорт
	
	Возврат "СписокОрганизаций";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает список доступных приложений абонента.
// Используется вместо ПрограммныйИнтерфейсСервиса.Приложения(), т.к.
// метод Приложения() программного интерфейса сервиса возвращает только
// все приложения текущего абонента этого облачного приложения (как доступные
// текущему пользователю, так и недоступные).
//
Функция ПриложенияАбонента(КодАбонента, Логин, Пароль)
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/list";
	
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	СвойстваАвторизации = Новый Структура("type,account", "user", КодАбонента);
	ДанныеЗапроса.Вставить("auth", СвойстваАвторизации);
	
	Подключение = ЗапросыREST.НовыйПодключение();
	УстановитьПривилегированныйРежим(Истина);
	Подключение.АдресСервиса = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	Подключение.ПространствоИмен = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод);
	Подключение.Логин = Логин;
	Подключение.Пароль = Пароль;
	
	Результат = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "", ДанныеЗапроса);
	Если Результат = Неопределено Или Результат.КодСостояния = ЗапросыREST.КодСостоянияНеАутентифицирован() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Переименования = Служебный.ПереименованияПриложение();
	Возврат Служебный.МассивСтруктурВТаблицуЗначений(Результат.Содержимое.tenant, Переименования);

КонецФункции

Функция ОтветДанныеОтчетности(Пользователь, Отбор)
	
	ОрганизацииНеЗапрашивать = Новый Массив;
	Для Каждого НеЗапрашивать Из Отбор.ИсключитьОрганизации Цикл
		ИдентификаторОрганизации = Новый УникальныйИдентификатор(НеЗапрашивать);
		ОрганизацииНеЗапрашивать.Добавить(Справочники.Организации.ПолучитьСсылку(ИдентификаторОрганизации));
	КонецЦикла;
	
	Организации = ДоступныеОрганизации(Пользователь);
	
	Если Организации.Количество() Тогда
		Параметры = Обработки.КалендарьОтчетности.НовыйПараметрыОтчета();
		Параметры.Организации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Организации, ОрганизацииНеЗапрашивать);
		Параметры.СобытияКалендаря = Отбор.СобытияКалендаря;
		Параметры.ДатаНачала = ОбщегоНазначенияБП.ДесериализоватьДатуISO(Отбор.Период.Начало);
		Параметры.ДатаКонца = ОбщегоНазначенияБП.ДесериализоватьДатуISO(Отбор.Период.Конец);
		Параметры.Сегодня = НачалоДня(ОбщегоНазначенияБП.ТекущаяДатаНаСервере());
		
		ДанныеПриложения = Обработки.КалендарьОтчетности.ДанныеПриложения(Параметры);
		
		// Ссылочные типы не могут быть переданы в ответе в формате JSON.
		ДанныеПриложения.Колонки.Удалить("Организация");
		ДанныеПриложения.Колонки.Удалить("Правило");
		
		Ответ = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеПриложения);
	Иначе
		Ответ = Новый Массив;
	КонецЕсли;
	
	Возврат Новый Структура("ТипЗапроса, Ответ", ТипЗапросаДанныеОтчетности(), Ответ);
	
КонецФункции

Функция ОтветСписокОрганизаций(Пользователь)
	
	Организации = ДоступныеОрганизации(Пользователь);
	НаименованияОрганизаций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Организации, "Наименование");
	ДанныеОрганизаций = Новый Массив;
	
	Для Каждого Организация Из Организации Цикл
		ДанныеОрганизаций.Добавить(Новый Структура("Наименование, Идентификатор",
			НаименованияОрганизаций.Получить(Организация),
			XMLСтрока(Организация.УникальныйИдентификатор())));
	КонецЦикла;
	
	Ответ = Новый Структура("ТипЗапроса, Ответ", ТипЗапросаСписокОрганизаций(), ДанныеОрганизаций);
		
	Возврат Ответ;
КонецФункции

Функция ДоступныеОрганизации(Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыБухгалтерии.Хозрасчетный, ПользовательИБ) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Новый Массив;
	КонецЕсли;
	
	// Вызов метода ОрганизацииДанныеКоторыхДоступныПользователю() в общем случае не допускается в привилегированном
	// режиме. Это связано с возможностью обращения в запросе к таблице базы данных с ключевым словом РАЗРЕШЕННЫЕ,
	// если используется "производительный" режим RLS.
	//
	// В рамках реализации "Календаря отчетности" используется служебный пользователь, который требует для подготовки
	// данных поднятия привилегированного режима.
	//
	// Считаем допустимым поднятие привилегированного режима по причине:
	// 1. Скорая поддержка JWT-токенов на Fresh. Следовательно, отказ от служебного пользователя.
	// 2. На Fresh "производительный" режим RLS отключен, доступен только "стандартный" режим.
	
	Организации = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрБухгалтерии.Хозрасчетный",
		Ложь,
		Пользователь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Организации;
	
КонецФункции

Функция ИмяПрикладногоМеханизма()
	
	Возврат "reporting_cycles";
	
КонецФункции

Функция НовыйПараметрыЗапросаДанных()
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИсключитьОрганизации", Новый Массив);
	Отбор.Вставить("СобытияКалендаря", "");
	ОтборПериод = Новый Структура("Начало,Конец", '0001-01-01', '0001-01-01');
	Отбор.Вставить("Период", ОтборПериод);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипЗапроса", ТипЗапросаДанныеОтчетности());
	Параметры.Вставить("Отбор", Отбор);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыЗапросаСпискаОрганизаций()
	
	Возврат Новый Структура("ТипЗапроса", ТипЗапросаСписокОрганизаций());
	
КонецФункции

#КонецОбласти