////////////////////////////////////////////////////////////////////////////////
// СписаниеСРасчетногоСчетаФормыКлиентСервер: клиент-серверные процедуры и функции, 
// вызываемые из форм документа "Списание с расчетного счета".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Показывает предупреждение что надо напечатать чек коррекции, 
// если по документу уже был напечатан чек
Процедура ПоказатьПредупреждениеПечатьЧека(Форма) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьФискальныеОперацииПоДокументу") Тогда
		ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	КонецЕсли; 
КонецПроцедуры

Функция ДокументМожетБытьОформленВВалюте(ВидОперации) Экспорт
	
	Возврат ВидОперации   <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому");
	
КонецФункции

Функция ДокументМожетБытьОформленВЦифровыхРублях(ВидОперации) Экспорт
	
	Возврат ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.Депозит");
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Форма) Экспорт
	
	Объект = Форма.Объект;
	ВидОперации = Объект.ВидОперации;
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
	
КонецФункции

Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
КонецФункции

Функция ФормаРасшифровкиПлатежа(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

Функция ТекущиеПараметрыОбъекта(Форма) Экспорт
	Перем СтатьяДДС;
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента, Контрагент, СчетКонтрагента, СчетБанк,
		|СтатьяДвиженияДенежныхСредств, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("БезЗакрывающихДокументов", Объект.БезЗакрывающихДокументов);
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		ПараметрыОбъекта.Вставить("ДоговорКонтрагента",           Форма.РасшифровкаПлатежаДоговорКонтрагента);
	Иначе
		ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.ДоговорКонтрагента));
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ЦифровыеДеньги",                 Форма.ЦифровыеДеньги);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикНДС",                  Форма.ПлательщикНДС);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда") Тогда
		ПараметрыОбъекта.Вставить("ПлатежнаяВедомость", Объект.ПлатежнаяВедомость);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита") Тогда
		ПараметрыОбъекта.Вставить("ВидПлатежаПоКредитамЗаймам",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам));
	КонецЕсли;
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		СтатьяДДС = Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств;
		ПараметрыОбъекта.СтавкаНДС = Форма.РасшифровкаПлатежаСтавкаНДС;
	ИначеЕсли Форма.СвойстваПлатежа <> Неопределено Тогда
		СтатьяДДС = Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств;
		ПараметрыОбъекта.СтавкаНДС = Форма.СвойстваПлатежа.СтавкаНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		ПараметрыОбъекта.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОбъекта.СтатьяДвиженияДенежныхСредств) Тогда
		ПараметрыОбъекта.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Функция ПараметрыУстановкиСвойствСубконто(Форма, Постфикс = "") Экспорт
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоДт" + Постфикс,
		"ПодразделениеДт" + Постфикс,
		"СубконтоДт",
		"ПодразделениеДт",
		"СчетУчетаРасчетовСКонтрагентом");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Если Постфикс = "Прочие" Тогда
		Результат.ЗначенияПоУмолчанию.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных) Экспорт
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭлементПредупреждениеОЗаполненииРеквизитовСчета = Элементы.Найти("ПредупреждениеОЗаполненииРеквизитовСчета");
	Если ЭлементПредупреждениеОЗаполненииРеквизитовСчета <> Неопределено Тогда
		ЭлементПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
			ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
		Элементы.РасчетыПриОплате.Видимость = Форма.РасчетыПриОплатеВидимость;
	КонецЕсли;
	
	ЭтоНовый = Форма.Параметры.Ключ.Пустая();
	ЭтоФормаДокументаИнтеграцияСБанком = БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма);
	ЭтоФормаДокументаОднострочная = ФормаДокументаОднострочная(Форма);
	ЭтоУплатаНалога = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
	ЭтоУплатаФиксированныхВзносов  = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога);
	ЭтоУплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
	ЭтоУплатаЕдиногоНалоговогоПлатежа = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоЕдиныйНалоговыйПлатеж(Форма.ВидНалога);
	
	Если ЭтоФормаДокументаИнтеграцияСБанком
		И ЭтоУплатаНалога
		И Форма.Параметры.Свойство("ЗначенияЗаполнения")
		И Форма.Параметры.ЗначенияЗаполнения.Свойство("ВидОперации")
		И Форма.Параметры.ЗначенияЗаполнения.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		// Вид операции установлен из контекста
		Элементы.ВидОперации.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементУменьшаетДоход = Элементы.Найти("УменьшаетДоход");
	Если ЭлементУменьшаетДоход <> Неопределено Тогда
		ЭлементУменьшаетДоход.Видимость = Не ЭтоУплатаНалога;
	КонецЕсли;
	
	ЭлементНалог = Элементы.Найти("Налог");
	Если ЭлементНалог <> Неопределено Тогда
		ЭлементНалог.Видимость = ЭтоУплатаНалога;
		Если ЭтоУплатаНалога Тогда
			Если ЗначениеЗаполнено(Объект.Налог)
				И Форма.Параметры.Свойство("ВидыНалогов")
				И ЗначениеЗаполнено(Форма.Параметры.ВидыНалогов)
				И Форма.Параметры.ВидыНалогов.Количество() = 1 Тогда
				ЭлементНалог.Вид = ВидПоляФормы.ПолеНадписи;
			Иначе
				ЭлементНалог.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементВидНалоговогоОбязательства = Элементы.Найти("ВидНалоговогоОбязательства");
	Если ЭлементВидНалоговогоОбязательства <> Неопределено Тогда
		ЭлементВидНалоговогоОбязательства.Видимость = ЭтоУплатаНалога И Не ЭтоУплатаЕдиногоНалоговогоПлатежа;
		ЭлементВидНалоговогоОбязательства.Доступность = ЗначениеЗаполнено(Объект.Налог);
		ЭлементВидНалоговогоОбязательства.Ширина      = ?(ЭтоУплатаФиксированныхВзносов, 21, 18);
	КонецЕсли;
	
	ЭлементНалоговыйПериод = Элементы.Найти("НалоговыйПериод");
	Если ЭлементНалоговыйПериод <> Неопределено Тогда
		ЭлементНалоговыйПериод.Доступность = ЗначениеЗаполнено(Объект.Налог);
		ЭлементНалоговыйПериод.Видимость = ВидимостьНалоговогоПериода(Форма);
	КонецЕсли;
	
	ЭлементСтраховойПериод = Элементы.Найти("СтраховойПериод");
	Если ЭлементСтраховойПериод <> Неопределено Тогда
		ЭлементСтраховойПериод.Доступность = ЗначениеЗаполнено(Объект.Налог);
		ЭлементСтраховойПериод.Видимость = ЭтоУплатаФиксированныхВзносов;
	КонецЕсли;
	
	ЭлементРеестрУплатыНДФЛ = Элементы.Найти("РеестрУплатыНДФЛ");
	Если ЭлементРеестрУплатыНДФЛ <> Неопределено Тогда
		ЭлементРеестрУплатыНДФЛ.Видимость = Форма.ИспользоватьНачислениеЗарплаты И Форма.ЭтоУплатаНДФЛ;
	КонецЕсли;
	
	ЭлементНалогЗаОбособленноеПодразделение = Элементы.Найти("НалогЗаОбособленноеПодразделение");
	Если ЭлементНалогЗаОбособленноеПодразделение <> Неопределено Тогда
		ЭлементНалогЗаОбособленноеПодразделение.Видимость = Форма.ЭтоУплатаНДФЛ;
	КонецЕсли;
	
	ЭлементРегистрацияВНалоговомОргане = Элементы.Найти("РегистрацияВНалоговомОргане");
	Если ЭлементРегистрацияВНалоговомОргане <> Неопределено Тогда
		ЭлементРегистрацияВНалоговомОргане.Видимость      = Форма.ЭтоУплатаНДФЛ;
		ЭлементРегистрацияВНалоговомОргане.Доступность    = Форма.ЭтоУплатаНДФЛ И Форма.НалогЗаОбособленноеПодразделение;
	КонецЕсли;
	
	ВидимостьКонтрагента = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя");
	Если ЭтоФормаДокументаИнтеграцияСБанком Тогда
		ВидимостьКонтрагента = ВидимостьКонтрагента И Не ЭтоУплатаНалога;
	КонецЕсли;
	Элементы.Контрагент.Видимость   = ВидимостьКонтрагента;
	Элементы.Контрагент.Доступность = Не УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации);
	Элементы.СчетКонтрагента.Видимость = ВидимостьКонтрагента
		И Не УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации);
	Элементы.СчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание") Тогда
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контрагент.ОтметкаНезаполненного     = Ложь;
	Иначе
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Элементы.ВторойСчетОрганизации.АвтоОтметкаНезаполненного = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.Депозит") Тогда
		Элементы.ВторойСчетОрганизации.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ВторойСчетОрганизации.ОтметкаНезаполненного     = Ложь;
	КонецЕсли;
	
	ЭлементТипКонтрагента = Элементы.Найти("ТипКонтрагента");
	Если ЭлементТипКонтрагента <> Неопределено Тогда
		ЭлементТипКонтрагента.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов");
	КонецЕсли;
	Если ВидимостьКонтрагента Тогда
		Если Не БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов") Тогда
			Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
			Элементы.Контрагент.МаксимальнаяШирина = 24;
		Иначе
			Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементНалогоплательщик = Элементы.Найти("Налогоплательщик");
	Если ЭлементНалогоплательщик <> Неопределено Тогда
		ЭлементНалогоплательщик.Видимость = ЭтоУплатаНалогаЗаТретьихЛиц;
		Если ЭтоУплатаНалогаЗаТретьихЛиц Тогда
			Элементы.Контрагент.ПодсказкаВвода = НСтр("ru='Налоговый орган'");
		Иначе
			Элементы.Контрагент.ПодсказкаВвода = НСтр("ru='Введите ИНН или наименование'");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементГруппаПорядокОтраженияБУ = Элементы.Найти("ГруппаПорядокОтраженияБУ");
	Если ЭлементГруппаПорядокОтраженияБУ <> Неопределено Тогда
		Если Объект.СчетУчетаРасчетовСКонтрагентом =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению")
			Или Объект.СчетУчетаРасчетовСКонтрагентом =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСНалоговогоАгента")
			Или Объект.СчетУчетаРасчетовСКонтрагентом =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате") Тогда
			ОтображатьСчетаВнеЗависимостиОтНастроек = Истина;
		Иначе
			ОтображатьСчетаВнеЗависимостиОтНастроек = Ложь;
		КонецЕсли;
		ЭлементГруппаПорядокОтраженияБУ.Видимость = ЭтоУплатаНалога
			И (Форма.ПользовательУправляетСчетамиУчета Или ОтображатьСчетаВнеЗависимостиОтНастроек);
	КонецЕсли;
	
	Если ЭтоФормаДокументаОднострочная И ЕстьРасшифровкаПлатежа(Форма) Тогда
		// Отображение документа расчетов зависит от выбранного способа погашения задолженности
		ЭлементГруппаСделка = Элементы.Найти("ГруппаСделка");
		Если ЭлементГруппаСделка <> Неопределено Тогда
			ЭлементГруппаСделка.Видимость =
				Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
		КонецЕсли;
		ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом = Элементы.Найти("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
		Если ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
			ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Доступность =
				НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
					И Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать"));
		КонецЕсли;
		ЭлементРасшифровкаПлатежаСчетУчетаРасчетовПоАвансам = Элементы.Найти("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
		Если ЭлементРасшифровкаПлатежаСчетУчетаРасчетовПоАвансам <> Неопределено Тогда
			ЭлементРасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Доступность =
				НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
					И Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать"));
		КонецЕсли;
		
		ЭлементРасшифровкаПлатежаДоговорКонтрагента = Элементы.Найти("РасшифровкаПлатежаДоговорКонтрагента");
		Если ЭлементРасшифровкаПлатежаДоговорКонтрагента <> Неопределено Тогда
			ЭлементРасшифровкаПлатежаДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент);
		КонецЕсли;
		
		БанкИКассаФормыКлиентСервер.УстановитьВидимостьПолейГруппыБезЗакрывающихДокументов(Форма, "РасшифровкаПлатежа");
		
	ИначеЕсли УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации) Тогда
		ПереводНаДругойСчетУстановитьВидимостьДоступностьПодразделениеДт(Форма);
	КонецЕсли;
	
	ПлатежноеПоручениеЗаполнено = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПлатежноеПоручение")
		И ЗначениеЗаполнено(Форма.ПлатежноеПоручение);
		
	ЭтоЦифровыеДеньги = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЦифровыеДеньги") И Форма.ЦифровыеДеньги;
	
	МожноВводитьПлатежноеПоручение = Не ЭтоФормаДокументаИнтеграцияСБанком
		И ВидОперацииМожноВыбиратьВПлатежномПоручении(Объект.ВидОперации)
		И Не ЭтоЦифровыеДеньги
		// Если связанное платежное поручение есть или документ не проведен, то отображаем.
		// Если документ уже исполнен банком, а платежного поручения нет - не отображаем,
		// иначае платежное поручение будет создано с другим номером и датой, чем в банке.
		И (Не Объект.Проведен Или ПлатежноеПоручениеЗаполнено);
		
	ЭлементГиперссылкаПлатежноеПоручение = Элементы.Найти("ГиперссылкаПлатежноеПоручение");
	Если ЭлементГиперссылкаПлатежноеПоручение <> Неопределено Тогда
		ЭлементГиперссылкаПлатежноеПоручение.Гиперссылка = МожноВводитьПлатежноеПоручение;
	КонецЕсли;
	
	ЭлементКомандаПлатежноеПоручениеВводНаОсновании = ЭлементКомандаПлатежноеПоручениеВводНаОсновании(Форма);
	Если ЭлементКомандаПлатежноеПоручениеВводНаОсновании <> Неопределено Тогда
		ЭлементКомандаПлатежноеПоручениеВводНаОсновании.Видимость = МожноВводитьПлатежноеПоручение;
	КонецЕсли;
	
	ЭлементСтатьяДвиженияДенежныхСредств = Элементы.Найти("СтатьяДвиженияДенежныхСредств");
	Если ЭлементСтатьяДвиженияДенежныхСредств <> Неопределено Тогда
		ЭлементСтатьяДвиженияДенежныхСредств.Видимость = ВидимостьСтатьиДДСПоВидуОперации(Объект.ВидОперации);
	КонецЕсли;
	
	Если Не ЭтоФормаДокументаИнтеграцияСБанком И Не ФормаРасшифровкиПлатежа(Форма) Тогда
		
		Если Форма.ПлательщикНПД
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю") Тогда
			
			ЧекАннулирован = Ложь;
			
			Если ЗначениеЗаполнено(Форма.СведенияОЧекеНПД) Тогда
				
				ЧекАннулирован = Форма.СведенияОЧекеНПД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЧековНПД.Аннулирован");
				
			КонецЕсли;
			
			Элементы.ГруппаЧекНПД.Видимость = ЧекАннулирован Или Форма.ДоступнаИнтеграцияСПлатформойСамозанятые;
			
			Элементы.ОжиданиеДанных.Видимость = Ложь;
			Элементы.ДекорацияЧекНаВозврат.Видимость = ЧекАннулирован;
			Элементы.АннулироватьЧекНПД.Видимость = НЕ ЧекАннулирован;
			Элементы.АннулироватьЧекНПД.Доступность = Не Форма.ТолькоПросмотр;
			
			Если ЧекАннулирован Тогда
				
				Элементы.ДекорацияЧекНаВозврат.Заголовок = Форма.СведенияОЧекеНПД.ОписаниеЧека;
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаЧекНПД.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для видов операций "Перечисление зарплаты", "Перечисление зарплаты работнику"
	// сумму документа править нельзя, необходимо редактировать исходные ведомости на выплату.
	Элементы.СуммаДокумента.ТолькоПросмотр = Ложь;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
		Элементы.СуммаДокумента.ТолькоПросмотр = Не Форма.ВедетсяУчетРасчетовПоЗарплатеСводно И Не Форма.УчетЗарплатыИКадровВоВнешнейПрограмме;
	ИначеЕсли Не Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Объект.ВидОперации
		= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда") Тогда
		Элементы.СуммаДокумента.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому") Тогда
		// Для вида операции "Выплаты самозанятым" сумму документа править нельзя,
		// необходимо редактировать исходный реестр на выплату.
		Элементы.СуммаДокумента.ТолькоПросмотр = ЗначениеЗаполнено(Объект.РеестрВыплатСамозанятым) И Объект.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым");
		Элементы.ГруппаЧекиСамозанятых.Видимость =
			Не Объект.Ссылка.Пустая()
			И ЗначениеЗаполнено(Объект.РеестрВыплатСамозанятым)
			И Не ЗначениеЗаполнено(Форма.СтатусЗагрузкиЧеков);
		Элементы.СтатусЗагрузкиЧеков.ЦветТекста = Форма.ЦветТекстаСтатусЗагрузкиЧеков;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаСчетНаОплату = Элементы.Найти("РасшифровкаПлатежаСчетНаОплату");
	Если ЭлементРасшифровкаПлатежаСчетНаОплату <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику"));
	КонецЕсли;
	
	Элементы.ПредупреждениеОбУплатеНалогаПриЕНП.Видимость = ЭтоУплатаНалога
		И ЗначениеЗаполнено(Объект.Налог) И Не Форма.НалогУплачиваетсяОтдельно;
		
	Если Элементы.Налог.Вид = ВидПоляФормы.ПолеВвода Тогда
		НовыеПараметры = Новый Массив;
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ПрименяетсяОсобыйПорядокУплатыНалога", Форма.ПлательщикЕНП));
		Элементы.Налог.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	КонецЕсли;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

Процедура ПереводНаДругойСчетУстановитьВидимостьДоступностьПодразделениеДт(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементПодразделениеДтПеревод = Элементы.Найти("ПодразделениеДтПеревод");
	
	Если ЭлементПодразделениеДтПеревод <> Неопределено Тогда
		ЭтоПеревод =
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет");
		ЭлементПодразделениеДтПеревод.Видимость = ЭтоПеревод; // показываем для перевода, но не депозита
		Если ЭтоПеревод Тогда
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
			ЭлементПодразделениеДтПеревод.Доступность = ДанныеСчета.УчетПоПодразделениям;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПодразделениеДт(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		// При переводе на другой счет организации значение заполнения для ПодразделениеДт зависит от подразделения расчетного счета
		Возврат;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.Депозит") Тогда
		// При переводе на счет депозита значение заполнения для ПодразделениеДт зависит от подразделения расчетного счета,
		// но если расчетный счет не заполнен, то заполняем подразделение документа.
		Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации   = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов")
		Тогда
		Объект.ПодразделениеДт = Неопределено;
	Иначе
		Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидимостьСтатьиДДСПоВидуОперации(ВидОперации)
	
	Результат = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		Или УчетДенежныхСредствКлиентСервер.ПереводДенегВнутриКомпании(ВидОперации)
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка");
	
	Возврат Результат;
	
КонецФункции

Функция ВидОперацииМожноВыбиратьВПлатежномПоручении(ВидОперации)
	
	Результат =
		ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка");
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементКомандаПлатежноеПоручениеВводНаОсновании(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КоманднаяПанель") Тогда
		Элемент = Форма.КоманднаяПанель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыДереваРасположенияКоманды = Новый Массив;
	ЭлементыДереваРасположенияКоманды.Добавить("ГруппаКнопкиКоманднойПанели");
	ЭлементыДереваРасположенияКоманды.Добавить("ГруппаГлобальныеКоманды");
	ЭлементыДереваРасположенияКоманды.Добавить("ФормаСоздатьНаОсновании");
	ЭлементыДереваРасположенияКоманды.Добавить("ФормаДокументПлатежноеПоручениеСоздатьНаОсновании");
	
	Для Каждого ЭлементСтрокиДерева Из ЭлементыДереваРасположенияКоманды Цикл
		Элемент = Элемент.ПодчиненныеЭлементы.Найти(ЭлементСтрокиДерева);
		Если Элемент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаПлатежа

Функция ПустаяСтруктураСвойстваПлатежа() Экспорт
	
	СвойстваПлатежа = Новый Структура();
	СвойстваПлатежа.Вставить("ДоговорКонтрагента",             ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовСКонтрагентом", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовПоАвансам",     ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Ложь);
	СвойстваПлатежа.Вставить("СпособПогашенияЗадолженности",   ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("СтавкаНДС",                      ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("КурсВзаиморасчетов",             1);
	СвойстваПлатежа.Вставить("КратностьВзаиморасчетов",        1);
	СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств",  ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ВидПлатежаПоКредитамЗаймам",     ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ПорядокОтраженияДохода",         Неопределено);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция ТекущиеДанныеРасшифровкаПлатежа(Форма, ИдСтроки = -1) Экспорт
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		
		Результат = Новый Структура();
		
		// Реквизиты табличной части документа
		Результат.Вставить("ДоговорКонтрагента",             Форма.РасшифровкаПлатежаДоговорКонтрагента);
		Результат.Вставить("СпособПогашенияЗадолженности",   Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности);
		Результат.Вставить("Сделка",                         Форма.РасшифровкаПлатежаСделка);
		Результат.Вставить("СуммаПлатежа",                   Форма.Объект.СуммаДокумента);
		Результат.Вставить("КурсВзаиморасчетов",             Форма.РасшифровкаПлатежаКурсВзаиморасчетов);
		Результат.Вставить("КратностьВзаиморасчетов",        Форма.РасшифровкаПлатежаКратностьВзаиморасчетов);
		Результат.Вставить("СуммаВзаиморасчетов",            Форма.РасшифровкаПлатежаСуммаВзаиморасчетов);
		Результат.Вставить("СтавкаНДС",                      Форма.РасшифровкаПлатежаСтавкаНДС);
		Результат.Вставить("СуммаНДС",                       Форма.РасшифровкаПлатежаСуммаНДС);
		Результат.Вставить("СтатьяДвиженияДенежныхСредств",  Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
		Результат.Вставить("СчетУчетаРасчетовСКонтрагентом", Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом);
		Результат.Вставить("СчетУчетаРасчетовПоАвансам",     Форма.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам);
		Результат.Вставить("ОтражениеВУСН",                  Форма.РасшифровкаПлатежаОтражениеВУСН);
		Результат.Вставить("РасходыУСН",                     Форма.РасшифровкаПлатежаРасходыУСН);
		Результат.Вставить("НДСУСН",                         Форма.РасшифровкаПлатежаНДСУСН);
		Результат.Вставить("ВидПлатежаПоКредитамЗаймам",     Форма.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам);
		Результат.Вставить("СчетНаОплату",                   Форма.РасшифровкаПлатежаСчетНаОплату);
		Результат.Вставить("ПорядокОтраженияДохода",         Форма.РасшифровкаПлатежаПорядокОтраженияДохода);
		Результат.Вставить("ОтражениеДоходаПредставление",   Форма.РасшифровкаПлатежаОтражениеДоходаПредставление);
		
		// Временные реквизиты формы
		Результат.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов",     Форма.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов);
		Результат.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах);
		
	Иначе
		
		Если ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		#Если Клиент Или ВебКлиент Тогда
			Если ИдСтроки = -1 Тогда
				Результат = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			Иначе
				Результат = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
			КонецЕсли;
		#Иначе
			Результат = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, НовыеДанныеСтроки, ИдСтроки = -1, ЗаполнятьСуммуДокумента = Истина) Экспорт
	
	Если НовыеДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		
		Форма.РасшифровкаПлатежаДоговорКонтрагента             = НовыеДанныеСтроки.ДоговорКонтрагента;
		Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности   = НовыеДанныеСтроки.СпособПогашенияЗадолженности;
		Форма.РасшифровкаПлатежаСделка                         = НовыеДанныеСтроки.Сделка;
		Форма.РасшифровкаПлатежаСуммаПлатежа                   = НовыеДанныеСтроки.СуммаПлатежа;
		Если ЗаполнятьСуммуДокумента Тогда
			Форма.Объект.СуммаДокумента                        = НовыеДанныеСтроки.СуммаПлатежа;
		КонецЕсли;
		Форма.РасшифровкаПлатежаКурсВзаиморасчетов             = НовыеДанныеСтроки.КурсВзаиморасчетов;
		Форма.РасшифровкаПлатежаКратностьВзаиморасчетов        = НовыеДанныеСтроки.КратностьВзаиморасчетов;
		Форма.РасшифровкаПлатежаСуммаВзаиморасчетов            = НовыеДанныеСтроки.СуммаВзаиморасчетов;
		Форма.РасшифровкаПлатежаСтавкаНДС                      = НовыеДанныеСтроки.СтавкаНДС;
		Форма.РасшифровкаПлатежаСуммаНДС                       = НовыеДанныеСтроки.СуммаНДС;
		Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств  = НовыеДанныеСтроки.СтатьяДвиженияДенежныхСредств;
		Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом = НовыеДанныеСтроки.СчетУчетаРасчетовСКонтрагентом;
		Форма.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам     = НовыеДанныеСтроки.СчетУчетаРасчетовПоАвансам;
		Форма.РасшифровкаПлатежаОтражениеВУСН                  = НовыеДанныеСтроки.ОтражениеВУСН;
		Форма.РасшифровкаПлатежаРасходыУСН                     = НовыеДанныеСтроки.РасходыУСН;
		Форма.РасшифровкаПлатежаНДСУСН                         = НовыеДанныеСтроки.НДСУСН;
		Форма.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам     = НовыеДанныеСтроки.ВидПлатежаПоКредитамЗаймам;
		Форма.РасшифровкаПлатежаСчетНаОплату                   = НовыеДанныеСтроки.СчетНаОплату;
		Форма.РасшифровкаПлатежаПорядокОтраженияДохода         = НовыеДанныеСтроки.ПорядокОтраженияДохода;
		Форма.РасшифровкаПлатежаОтражениеДоходаПредставление   = НовыеДанныеСтроки.ОтражениеДоходаПредставление;
		
		Форма.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов     = НовыеДанныеСтроки.ДоговорКонтрагентаВалютаВзаиморасчетов;
		Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах = НовыеДанныеСтроки.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		
	Иначе
		
		Если ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		#Если Клиент Или ВебКлиент Тогда
			Если ИдСтроки = -1 Тогда
				ТекущиеДанные = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			Иначе
				ТекущиеДанные = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
			КонецЕсли;
		#Иначе
			ТекущиеДанные = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
		#КонецЕсли
		
		Если ТекущиеДанные <> НовыеДанныеСтроки Тогда
			// Если переданная коллекция отличается от текущей строкой табличного поля,
			// то переносим данные из нее в текущую строку.
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, НовыеДанныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж) Экспорт
	
	Если СтрокаПлатеж.Свойство("НадписьКурс") Тогда
		СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
		СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗаполняетсяОтражениеРасходовУСН(Форма)
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
		Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
			И Объект.БезЗакрывающихДокументов И Форма.ПрименяетсяАУСН) Тогда
		
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		
		ДанныеСтроки = УчетУСНКлиентСервер.НовыеДанныеСтрокиПлатежаДляОтраженияВУСН();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаПлатеж);
		СписаниеСРасчетногоСчетаФормыВызовСервера.ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеКурсыВалют(Форма, СтрокаПлатеж) Экспорт
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.КурсВзаиморасчетов), 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.КратностьВзаиморасчетов), 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИтоги(Форма) Экспорт
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ИтогоСуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИтогоВсегоНДС     = РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(ИтогоСуммаПлатежа, "ЧЦ=15; ЧДЦ=2");
	Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(ИтогоВсегоНДС,     "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе	
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС     = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

Процедура РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж) Экспорт
	
	ЗаполнитьПустыеКурсыВалют(Форма, СтрокаПлатеж);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Форма, ИдСтроки = -1) Экспорт
	
	СтрокаПлатеж = ТекущиеДанныеРасшифровкаПлатежа(Форма, ИдСтроки);
	РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж, ИдСтроки);
	
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(Форма) Экспорт
	
	Если (Не Форма.Модифицированность И ЗначениеЗаполнено(Форма.Объект.Ссылка)) Или Не ЕстьРасшифровкаПлатежа(Форма) Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	СтрокаПлатеж.ДоговорКонтрагента             = Форма.РасшифровкаПлатежаДоговорКонтрагента;
	СтрокаПлатеж.СпособПогашенияЗадолженности   = Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности;
	СтрокаПлатеж.Сделка                         = Форма.РасшифровкаПлатежаСделка;
	СтрокаПлатеж.СуммаПлатежа                   = Объект.СуммаДокумента;
	СтрокаПлатеж.КурсВзаиморасчетов             = Форма.РасшифровкаПлатежаКурсВзаиморасчетов;
	СтрокаПлатеж.КратностьВзаиморасчетов        = Форма.РасшифровкаПлатежаКратностьВзаиморасчетов;
	СтрокаПлатеж.СуммаВзаиморасчетов            = Форма.РасшифровкаПлатежаСуммаВзаиморасчетов;
	СтрокаПлатеж.СтавкаНДС                      = Форма.РасшифровкаПлатежаСтавкаНДС;
	СтрокаПлатеж.СуммаНДС                       = Форма.РасшифровкаПлатежаСуммаНДС;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств  = Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом;
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Форма.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам;
	СтрокаПлатеж.ОтражениеВУСН                  = Форма.РасшифровкаПлатежаОтражениеВУСН;
	СтрокаПлатеж.РасходыУСН                     = Форма.РасшифровкаПлатежаРасходыУСН;
	СтрокаПлатеж.НДСУСН                         = Форма.РасшифровкаПлатежаНДСУСН;
	СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам     = Форма.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам;
	СтрокаПлатеж.СчетНаОплату                   = Форма.РасшифровкаПлатежаСчетНаОплату;
	СтрокаПлатеж.ПорядокОтраженияДохода         = Форма.РасшифровкаПлатежаПорядокОтраженияДохода;
	
КонецПроцедуры

Процедура ЗаполнитьНадписиУСНВРасшифровке(СтрокаПлатеж) Экспорт
	
	Если СтрокаПлатеж.Свойство("НадписьСуммаРасходовУСН") Тогда
		СтрокаПлатеж.НадписьСуммаРасходовУСН = НСтр("ru = 'Сумма:'");
	КонецЕсли;
	Если СтрокаПлатеж.Свойство("НадписьСуммаНДСУСН") Тогда
		СтрокаПлатеж.НадписьСуммаНДСУСН = НСтр("ru = 'в т. ч. НДС:'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеДоходов

Функция ИменаЭлементовОтраженияДохода() Экспорт
	
	Имена = Новый Массив;
	
	Имена.Добавить("РасшифровкаПлатежаОтражениеДоходаПредставление");
	
	Возврат Имена;
	
КонецФункции

#КонецОбласти

#Область УплатаНалога

Функция ПредставлениеПериодаУплатыНалога(Период, ВидНалога) Экспорт
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ПредставлениеПериодаУплатыНалога(Период, ВидНалога);
	
КонецФункции

Функция ВидимостьНалоговогоПериода(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ПериодУплатыНалогаВыбираетПользователь(
		Форма.ВидНалога,
		Форма.ПрименениеУСНДоходы,
		Форма.ИспользоватьНачислениеЗарплаты);
	
КонецФункции

#КонецОбласти

#Область ПеречислениеЗаработнойПлаты

Процедура УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(Форма, ТекущаяВедомость) Экспорт
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеречислениеДепонентов

Процедура УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(Форма, ТекущаяВедомость) Экспорт
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УСН

Процедура ОбновитьИтогиУСН(Форма) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		Объект = Форма.Объект;
		Если НЕ ФормаДокументаОднострочная(Форма) ИЛИ Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			Объект.Графа7_УСН = Объект.РасшифровкаПлатежа.Итог("РасходыУСН");
			Объект.НДС_УСН    = Объект.РасшифровкаПлатежа.Итог("НДСУСН");
		Иначе
			Объект.Графа7_УСН = Форма.РасшифровкаПлатежаРасходыУСН;
			Объект.НДС_УСН    = Форма.РасшифровкаПлатежаНДСУСН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТекстРасходыУСН(Форма) Экспорт
	
	Если Не ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		Форма.ТекстРасходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект     = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаРасходыВсего = Объект.СуммаДокумента;
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СуммаРасходыВсего = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасходыВсего,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента, 1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	ТекстРасходы = "";
	
	СуммаРасходыНеПринимаемые = СуммаРасходыВсего - Объект.Графа7_УСН;
	Если СуммаРасходыВсего = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаРасходыНеПринимаемые = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Расходы принимаются полностью'");
	ИначеЕсли Объект.Графа7_УСН = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Принимаемые расходы отсутствуют'");
	Иначе
		ТекстРасходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые расходы: %1 %2'"),
			Формат(СуммаРасходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ТекстРасходыУСН = ТекстРасходы;
	
КонецПроцедуры

Функция ЗаполняетсяОтражениеРасходовУСН(Форма) Экспорт
	
	ПрименяетсяУСНДоходыМинусРасходы = Форма.ПрименениеУСН И Не Форма.ПрименениеУСНДоходы;
	ПрименяетсяАУСН = Форма.ПрименяетсяАУСН;
	
	Возврат ПрименяетсяУСНДоходыМинусРасходы Или ПрименяетсяАУСН;
	
КонецФункции

#КонецОбласти

#Область СчетаУчета

Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"СписаниеСРасчетногоСчета",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
		
	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// ЦифровыеДеньги
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ЦифровыеДеньги") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
	КонецЕсли;
	
	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
	КонецЕсли;
	
	// СчетБанк
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// СчетКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;
	
	// Налог
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
		Если ПараметрыЗаполнения.Заполнять = Ложь
			И Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			ПараметрыЗаполнения.Заполнять = Истина;
		КонецЕсли;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// СубконтоДт1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
		КонецЕсли;
		
		// СчетБанк
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
		КонецЕсли;
		
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
		// СчетКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
		КонецЕсли;
		
		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
		КонецЕсли;
		
		// Налог
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
		// СубконтоДт1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;
		
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

