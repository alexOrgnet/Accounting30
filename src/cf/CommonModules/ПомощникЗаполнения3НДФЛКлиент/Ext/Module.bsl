#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПоИНН

Процедура ЗаполнитьРеквизитыПоДаннымЕГР(ПолеПоискаИНННаименование, ОповещениеПослеЗаполнения) Экспорт
	
	ПолеПоискаИНННаименование = СокрЛП(ПолеПоискаИНННаименование);
	
	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ПолеПоискаИНННаименование)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН юридического лица'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоИНН = ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ПолеПоискаИНННаименование)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПолеПоискаИНННаименование);
	Если ЗаполнениеПоИНН Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(ПолеПоискаИНННаименование, ОповещениеПослеЗаполнения);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоНаименованию(ПолеПоискаИНННаименование, ОповещениеПослеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ИНН, ОповещениеПослеЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = ПомощникЗаполнения3НДФЛВызовСервера.ДанныеЗаполненияПоИНН(ИНН);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ДанныеДляЗаполнения.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ИННДляЗаполнения", ИНН);
			ДополнительныеПараметры.Вставить("ОповещениеПослеЗаполнения", ОповещениеПослеЗаполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ДанныеДляЗаполнения.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "kontragent");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
			
		Иначе
			ПоказатьПредупреждение(, ДанныеДляЗаполнения.ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗаполнения, ДанныеДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеРеквизитовПоНаименованию(НаименованиеОбъекта, ОповещениеПослеЗаполнения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", НаименованиеОбъекта);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОповещениеПослеЗаполнения", ОповещениеПослеЗаполнения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

// Обработчик выполнения при изменении варианта распределения вычета
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, для которой настраивается распределение вычета по доходам
//
Процедура ВариантРаспределенияВычетаПриИзменении(Форма) Экспорт
	
	РаспределитьВычетПоДоходам = ЗначениеЗаполнено(Форма.ВариантРаспределенияВычета);
	
	Если РаспределитьВычетПоДоходам Тогда
		// Распределяем сумму вычета в порядке указания доходов
		ПомощникЗаполнения3НДФЛКлиентСервер.РаспределитьСуммуВычета(Форма);
	Иначе
		// Если выбран вариант распределения суммы вычета на конректный доход, тогда
		// в таблице распределения всю сумму вычета ставим на первый доход
		Индекс = 0;
		Для Каждого ТекущаяСтрока Из Форма.РаспределениеПоДоходам Цикл
			
			Если Индекс > 0 Тогда
				ТекущаяСтрока.СуммаВычета = 0;
			Иначе
				ТекущаяСтрока.СуммаВычета = Форма.СуммаВычета;
			КонецЕсли;
			Индекс = Индекс + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выполнения при изменении вида дохода
//
// Параметры:
//   ВидДохода              - ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц - Вид дохода для распределения вычета
//   СуммаВычета            - Число - Сумма положенного вычета
//   РаспределениеПоДоходам - ДанныеФормыКоллекция - Таблица для распределения суммы вычета по указанным доходам
//
Процедура ВидДоходаВычетаПриИзменении(ВидДохода, СуммаВычета, РаспределениеПоДоходам) Экспорт
	
	Для Каждого ТекущаяСтрока Из РаспределениеПоДоходам Цикл
		Если ТекущаяСтрока.Доход = ВидДохода Тогда
			ТекущаяСтрока.СуммаВычета = СуммаВычета;
		Иначе
			ТекущаяСтрока.СуммаВычета = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик выполнения перед окончанием редактирования таблицы РаспределениеПоДоходам
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - Форма, для которой настраивается распределение вычета по доходам
//   ОтменаРедактирования - Булево - Признак отмены редактирования пользователем
//   Отказ                - Булево - Отказ применения данных редактирования
//
Процедура РаспределениеПоДоходамПередОкончаниемРедактирования(Форма, ОтменаРедактирования, Отказ) Экспорт
	
	Если ОтменаРедактирования И Форма.РаспределениеПоДоходам.Итог("СуммаВычета") > Форма.СуммаВычета Тогда
		Форма.Элементы.РаспределениеПоДоходам.ТекущиеДанные.СуммаВычета = 0;
		Возврат;
	ИначеЕсли ОтменаРедактирования Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаспределениеПоДоходам.Итог("СуммаВычета") > Форма.СуммаВычета Тогда
	
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Общая сумма вычета не должна превышать %1'"),
			Формат(Форма.СуммаВычета, "ЧДЦ=2; ЧФ='Ч руб.'"));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие между видом дохода и распределенной суммой вычета
//
// Параметры:
//   РаспределениеПоДоходам - ДанныеФормыКоллекция - Таблица для распределения суммы вычета по указанным доходам
//
// Возвращаемое значение:
//   Соответствие
//     * Ключ     - ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц - Вид дохода
//     * Значение - Число - Сумма вычета
//
Функция СоответствиеРаспределенияПоДоходам(РаспределениеПоДоходам) Экспорт

	Результат = Новый Соответствие;
	Для Каждого ТекущийДоход Из РаспределениеПоДоходам Цикл
		Результат.Вставить(ТекущийДоход.Доход, ТекущийДоход.СуммаВычета);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(Результат, ДопПараметры.ОповещениеПослеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(ДопПараметры.ИННДляЗаполнения, ДопПараметры.ОповещениеПослеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
