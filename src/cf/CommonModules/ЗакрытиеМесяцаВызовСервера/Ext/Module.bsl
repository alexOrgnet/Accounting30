
#Область ПрограммныйИнтерфейс

#Область АктуализацияДанных

// Возвращает свойства выполняемого фонового задания по актуализации.
// Если ни одного задания не найдено, возвращается значение Неопределено.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой будет производиться поиск фонового задания по актуализации.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы, из которой вызывается поиск фонового задания.
//  ИспользуетсяСтараяВерсияФоновыхЗаданийБСП - Булево - признак использования устаревшего механизма длительных операций.
//
// Возвращаемое значение:
//   Структура - описание фонового задания:
//              * УникальныйИдентификатор - Неопределено - фоновых заданий актуализации по указанной организации сейчас не выполняется.
//                                        - Строка - если задание выполняется, но свойства получить не удалось, возвращается пустая строка.
//                                                 - если задание выполняется, то идентификатор задания.
//              * Ключ         - Строка - ключ фонового задания.
//              * Наименование - Строка - наименование фонового задания.
//              * Организация  - СправочникСсылка.Организация - организация, по которой выполняется задание.
//              * Пользователь - СправочникСсылка.Пользователи - пользователь, запустивший задание.
//
Функция НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Знач Организация,
													 Знач УникальныйИдентификаторФормы,
													 ИспользуетсяСтараяВерсияФоновыхЗаданийБСП = Истина) Экспорт

	Если ИспользуетсяСтараяВерсияФоновыхЗаданийБСП Тогда
		Возврат НайтиФоновоеЗаданиеАктуализацииПоОрганизации_ИдентификаторЗадания(Организация, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ПользовательСеанса = Пользователи.ТекущийПользователь();
	
	СвойстваВыполняемогоЗадания = Новый Структура;
	СвойстваВыполняемогоЗадания.Вставить("УникальныйИдентификатор");
	СвойстваВыполняемогоЗадания.Вставить("Ключ",         "");
	СвойстваВыполняемогоЗадания.Вставить("Наименование", "");
	СвойстваВыполняемогоЗадания.Вставить("Организация",  Справочники.Организации.ПустаяСсылка());
	СвойстваВыполняемогоЗадания.Вставить("Пользователь", ПользовательСеанса);
	
	ОтборПоСостоянию = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборПоСостоянию);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Ключ = СтрРазделить(ФоновоеЗадание.Ключ, ":", Истина);
		// Ключ должен состоять из трех частей, разделенных двоеточием: имя фоновых заданий-актуализаций, GUID организации, GUID пользователя.
		
		Если Ключ.Количество() < 2
		 Или Ключ[0] <> ЗакрытиеМесяцаКлиентСервер.ПрефиксКлючаЗаданияАктуализации() Тогда
			// Это фоновое задание не выполняет актуализацию.
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторОрганизации = Ключ[1];
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УникальныйИдентификаторОрганизации) Тогда
			СвойстваВыполняемогоЗадания.Организация = Справочники.Организации.ПолучитьСсылку(
				Новый УникальныйИдентификатор(УникальныйИдентификаторОрганизации));
		КонецЕсли;
		Если СвойстваВыполняемогоЗадания.Организация <> Организация Тогда
			// Это фоновое задание по другой организации.
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторПользователя = ?(Ключ.Количество() > 2, Ключ[2], "");
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УникальныйИдентификаторПользователя) Тогда
			СвойстваВыполняемогоЗадания.Пользователь = Справочники.Пользователи.ПолучитьСсылку(
				Новый УникальныйИдентификатор(УникальныйИдентификаторПользователя));
		КонецЕсли;
		
		СвойстваВыполняемогоЗадания.УникальныйИдентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		СвойстваВыполняемогоЗадания.Ключ                    = ФоновоеЗадание.Ключ;
		СвойстваВыполняемогоЗадания.Наименование            = ФоновоеЗадание.Наименование;
		Если СвойстваВыполняемогоЗадания.Пользователь <> ПользовательСеанса Тогда
			// Возможно среди фоновых заданий актуализации есть и запущенное текущим пользователм, и запущенное другим.
			// Тогда ищем, пока не найдем задание другого пользователя.
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Если СвойстваВыполняемогоЗадания.УникальныйИдентификатор <> Неопределено
	 Или Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат СвойстваВыполняемогоЗадания;
	КонецЕсли;
	
	// Если не найдено ни одного задания в файловом режиме работы, это еще не значит, что никто не актуализирует данные.
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
		РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		// Организация доступна для актуализации.
		
	Исключение
		
		СвойстваВыполняемогоЗадания.УникальныйИдентификатор = "";
		// Работа с данной организацией недоступна, но конкретный идентификатор фонового задания мы не знаем.
		
	КонецПопытки;
	
	Возврат СвойстваВыполняемогоЗадания;
	
КонецФункции

// Запускает фоновое задание проверки актуальности.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности()
//
// Возвращаемое значение:
//   Структура   - см. ДлительныеОперации.ВыполнитьФункцию()
//
Функция ПроверитьАктуальность(Знач ПараметрыЗадания) Экспорт
	
	ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ПараметрыЗадания.УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка актуальности данных'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ОписаниеДлительнойОперации = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, "Обработки.ЗакрытиеМесяца.ПроверитьАктуальность", ПараметрыЗадания);

	Возврат ОписаниеДлительнойОперации;
	
КонецФункции

// Перепроводит документы и перевыполняет регламетные операции закрытия месяца до требуемого периода.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//  ВФоне            - Булево    - Признак, выполнять расчет в фоновом задании или непосредственно.
//                                 По умолчанию = Истина.
// Возвращаемое значение:
//   Структура   - для синхронных (без фонового задания) см. ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
//               - для асинхронных (с запуском фонового задания) см. ДлительныеОперации.ВыполнитьВФоне()
//
Функция АктуализироватьДанные(Знач ПараметрыЗадания, ВФоне = Истина) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("АдресРезультата",    "");
	РезультатВыполнения.Вставить("ЗаданиеВыполнено",   Истина);
	РезультатВыполнения.Вставить("ИдентификаторЗадания");
	
	АктуализацияДляРасчетаНалога = ПараметрыЗадания.АктуализацияДляРасчетаНалога;
	
	Если АктуализацияДляРасчетаНалога Тогда // востребована частичная актуализация
		
		АктуализацияДляРасчетаНалога = ВозможенПрямойРасчетНалога(ПараметрыЗадания);
		Если Не АктуализацияДляРасчетаНалога Тогда
			// Только сообщаем вариант актуализации (АктуализацияДляРасчетаНалога = Ложь), не выполняя её.
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
			РезультатВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(
				РезультатАктуализации, ПараметрыЗадания.УникальныйИдентификаторФормы);
			Возврат РезультатВыполнения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ВФоне Тогда
		// Сразу же выполняем актуализацию и возвращаем результат.
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыЗадания.УникальныйИдентификаторФормы);
		
		Если АктуализацияДляРасчетаНалога Тогда
			Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога(ПараметрыЗадания, АдресРезультата);
		Иначе
			Обработки.ЗакрытиеМесяца.АктуализироватьВФоне(ПараметрыЗадания, АдресРезультата);
		КонецЕсли;
		
		РезультатВыполнения.АдресРезультата = АдресРезультата;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	ТекПользователь = Пользователи.ТекущийПользователь();
		
	НаименованиеЗадания = НСтр("ru='Актуализация данных: %1 (%2)'");
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НаименованиеЗадания, ПараметрыЗадания.Организация, ТекПользователь);

	КлючЗадания = ЗакрытиеМесяцаКлиентСервер.КлючЗаданияАктуализации(ПараметрыЗадания, ТекПользователь);
	
	ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);

	ИмяЭкспортнойПроцедуры = ?(АктуализацияДляРасчетаНалога,
		"Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога", "Обработки.ЗакрытиеМесяца.АктуализироватьВФоне");

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыЗадания.УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
	// Если на файловой базе уже запущено любое другое фоновое задание, то новое встанет в очередь, а не будет запущено в основном потоке.
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(ИмяЭкспортнойПроцедуры, ПараметрыЗадания, ПараметрыВыполнения);
	
	// Для совместимости со старым программным интерфейсом. См. ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации()
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", РезультатВыполнения.Статус <> "Выполняется");
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет актуализацию данных перед публикацией отчетов и помощников через внешний программный интерфейс.
// Актуализация выполняется по "быстрому" алгоритму - проводятся только регламентные операции, влияющие на расчет налогов.
// В случае невозможности быстрой актуализации возвращается сообщение об ошибке.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой данные должны стать актуальными.
//  Период      - Дата - на какую дату данные должны стать актуальными.
//
Функция АктуализироватьДанныеПередПубликацией(Организация, Период, СообщениеОбОшибке) Экспорт
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация = Организация;
	ПараметрыАктуализации.Период      = Период;
	
	// Актуализация при публикации данных всегда выполняется по быстрому алгоритму.
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = Истина;
	
	Если НЕ ВозможенПрямойРасчетНалога(ПараметрыАктуализации) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Данные неактуальны. Требуется выполнить операции закрытия месяца в приложении 1С.'");
		Возврат Ложь;
	КонецЕсли;
	
	АдресХранилища = "";
	Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога(ПараметрыАктуализации, АдресХранилища);
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не РезультатВыполнения.Выполнено ИЛИ РезультатВыполнения.ВывестиИнформациюУведомлений Тогда
		
		ТекстОшибки = НСтр("ru = 'Данные неактуальны. При выполнении актуализации возникли ошибки.'");
		Если РезультатВыполнения.Свойство("ВидОперации") И РезультатВыполнения.Свойство("ПериодРегистрации") Тогда
			
			ТекстШаблона = НСтр("ru = '""%1"" за %2'");
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, РезультатВыполнения.ВидОперации, Формат(РезультатВыполнения.ПериодРегистрации, "ДФ='ММММ гггг'"));
			
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("РегламентнаяОперацияСОшибками") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(РезультатВыполнения.РегламентнаяОперацияСОшибками);
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("СообщенияПользователю") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрСоединить(РезультатВыполнения.СообщенияПользователю, Символы.ПС);
		КонецЕсли;
		
		СообщениеОбОшибке = ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатВыполнения.ВывестиИнформациюУведомлений Тогда
		
		ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(
			НСтр("ru = 'Ошибка актуализации данных для публикации'", ОбщегоНазначения.КодОсновногоЯзыка())); // Строка записывается в журнал
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Обработки.ЗакрытиеМесяца, ,
			ТекстОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения.Выполнено;
	
КонецФункции

#КонецОбласти

#Область РаботаСНастройками

Функция ПроверятьАктуальность() Экспорт
	
	Возврат Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	
КонецФункции

// Определяет, можно ли рассчитать налог, не закрывая месяц.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//                                Используются только поля Организация и Период. 
//
Функция ВозможенПрямойРасчетНалога(ПараметрыЗадания)
	
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Если КонецКвартала(ПараметрыЗадания.Период) > КорректныйПериод.КонецКорректногоПериода Тогда
		// ошибочно широкий интервал
		Возврат Ложь;
	КонецЕсли;
	
	ВариантУсловийПрямогоРасчета = 0;
	Если УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 1; // ИП на особой системе налогообложения
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 2; // ИП применяет УСН (доходы)
	КонецЕсли;
	Если ВариантУсловийПрямогоРасчета = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ИП на особой системе налогообложения (ЕНВД или патент)
	Если ВариантУсловийПрямогоРасчета = 1 Тогда
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности не было смены учётной политики.
		ИмяРесурса = "ПрименяетсяОсобыйПорядокНалогообложения";
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			ИмяРесурса,
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1             // были изменения в учетной политике
		   И (ВариантыУчета.Найти(Ложь) <> Неопределено  // был период без особой системы налогообложения
			// УСН + особая система налогообложения
			Или УчетнаяПолитика.ПрименяетсяУСНЗаПериод(ПараметрыЗадания.Организация, ГраницаАктуализации, ПараметрыЗадания.Период)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыЗадания.ГраницаАктуализацииНачало = ГраницаАктуализации;
		
		Возврат Истина;
		
	ИначеЕсли ВариантУсловийПрямогоРасчета = 2 Тогда // УСН (доходы)
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности всегда использовалась УСН.
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			"ПрименяетсяУСНДоходы",
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1                 // были изменения в учетной политике
		   И ВариантыУчета.Найти(Ложь) <> Неопределено Тогда // был период без УСН доходы
			Возврат Ложь;
		КонецЕсли;
		
		ПрямойРасчетНалога = УчетУСН.ДоходыЗаПериодНеЗависятОтПоследовательности(
			ПараметрыЗадания.Организация, ГраницаАктуализации, КонецМесяца(ПараметрыЗадания.Период));
		
		Если ПрямойРасчетНалога Тогда
			ПараметрыЗадания.ГраницаАктуализацииНачало = ГраницаАктуализации;
		КонецЕсли;
		
		Возврат ПрямойРасчетНалога;
				
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Проверяет состояние фонового задания по переданному идентификатору.
// При аварийном завершении задания вызывает исключение, возникшее в нем,
// либо исключение общего вида "Не удалось выполнить данную операцию. Подробности см. в Журнале регистрации".
// Не аварийным считается Выполняется, Выполнено или Отменено.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Строка - статус состояния выполнения задания.
// 
Функция СтатусФоновогоЗадания(Знач ИдентификаторЗадания) Экспорт
	
	Задание = Неопределено;
	Результат = ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания, Задание);
	
	Если Результат.Статус = "Выполняется"
		Или Результат.Статус = "Выполнено"
		Или Результат.Статус = "Отменено" Тогда
		Возврат Результат.Статус;
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Технические подробности:
			           |%2
			           |
			           |См. также журнал регистрации.'"),
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Технические подробности:
			           |Ошибка выполнения фонового задания %2 с идентификатором %3 по причине
			           |%4
			           |
			           |См. также журнал регистрации.'"),
			Результат.КраткоеПредставлениеОшибки,
			Задание.ИмяМетода,
			Строка(ИдентификаторЗадания),
			Результат.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ВызватьИсключение ТекстОшибки;

КонецФункции

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

// Читает сообщение от длительной операции о ее текущем состоянии.
//
// Параметры:
//  ОписаниеЗадания - Структура - см. параметр ДлительнаяОперация в ДлительныеОперацииКлиент.ПараметрыОжидания() ;
//                    Строка - Устарел. Для совместимости. Идентификатор задания.
//
// Возвращаемое значение:
//   Структура   - описывает информацию, полученную из фонового задания:
//                * ПрогрессОбновлен - Булево - Истина, если было прочтено значение прогресса; иначе Ложь.
//                * ЗаданиеВыполнено - Булево - Ложь, если существует фоновое задание с ИдентификаторЗадания.
//                * Процент - Число - все проценты выше 99 считаются "99%".
//                * Иные ключи структуры см. ДлительныеОперации.СообщитьПрогресс()
//
Функция ПрочитатьПрогресс(Знач ОписаниеЗадания) Экспорт
	
	ПрогрессЗадания = Новый Структура;
	ПрогрессЗадания.Вставить("ПрогрессОбновлен", Ложь);
	ПрогрессЗадания.Вставить("ЗаданиеВыполнено", Истина);
	ПрогрессЗадания.Вставить("Процент",          99);
	
	Если ТипЗнч(ОписаниеЗадания) = Тип("Строка")
	 Или ТипЗнч(ОписаниеЗадания) = Тип("УникальныйИдентификатор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
	
		// Различаем случаи, когда отсутствуют сообщения и когда завершено задание.
		Попытка
			ПрогрессЗадания.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ОписаниеЗадания);
		Исключение
			// Исключение при попытке проверить статус задания означает, что фоновое задание было удалено после отмены операции
			// закрытия месяца пользователем.
		КонецПопытки;
		
		Если ПрогрессЗадания.ЗаданиеВыполнено Тогда
			
			ПрогрессЗадания.ПрогрессОбновлен = Истина;			
			
		Иначе
			
			ПрочтенныйПрогрессЗадания = ДлительныеОперации.ПрочитатьПрогресс(ОписаниеЗадания);
			ПрогрессЗадания.ПрогрессОбновлен = (ПрочтенныйПрогрессЗадания <> Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		Если ОписаниеЗадания.Статус = "Выполняется" Тогда
			
			ПрогрессЗадания.ЗаданиеВыполнено = Ложь;
			ПрочтенныйПрогрессЗадания = ОписаниеЗадания.Прогресс;
			ПрогрессЗадания.ПрогрессОбновлен = (ПрочтенныйПрогрессЗадания <> Неопределено);
			
		Иначе
			
			ПрогрессЗадания.ПрогрессОбновлен = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПрогрессЗадания.ПрогрессОбновлен И Не ПрогрессЗадания.ЗаданиеВыполнено Тогда
	
		Для Каждого КлючПрогресса Из ПрочтенныйПрогрессЗадания Цикл
			ПрогрессЗадания.Вставить(КлючПрогресса.Ключ, КлючПрогресса.Значение);
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ПрогрессЗадания;
	
КонецФункции

#КонецОбласти

#Область СервисныеФункции

Функция ПолучитьПредупреждающийЦвет() Экспорт
	
	Возврат ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
	
КонецФункции

Функция ПоказатьПредупреждениеАктуализацияДанных(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций(Организация);
	
КонецФункции

Процедура ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания)

	Если Не ПараметрыЗадания.Свойство("АдресХранилищаДанныеРасшифровки")
	 Или Не ЭтоАдресВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки) Тогда
		Возврат;
	КонецЕсли;
		
	// В фоновое задание передаем не адрес временного хранилища, а само значение,
	// т.к. внутри фонового задания недоступны данные временного хранилища родительского сеанса.
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки);
	СжатыеДанныеРасшифровки = Новый ХранилищеЗначения(ДанныеРасшифровки, Новый СжатиеДанных(9));
	ПараметрыЗадания.Вставить("ДанныеРасшифровки", СжатыеДанныеРасшифровки);
	
	ПараметрыЗадания.Удалить("АдресХранилищаДанныеРасшифровки");
	
КонецПроцедуры

Функция НачалоНеактуальностиДляПрямогоРасчетаНалога(Организация, Период)
	
	// Определяем дату, до которой нам важно отсутствие взаимозависимостей учета.
	ГраницаАктуализации = КонецМесяца(Период);
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                               = Организация;
	ПараметрыПроверки.Период                                    = ГраницаАктуализации;
	ПараметрыПроверки.ТребуетсяПолнаяАктуализация               = Истина;
	ПараметрыПроверки.АктуализироватьВесьПериод                 = Истина;
	РезультатПроверкиАктуальности = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
	Если Не РезультатПроверкиАктуальности.ТребуетсяАктуализация Тогда
		ГраницаАктуализации = НачалоКвартала(ГраницаАктуализации);
	Иначе
		ГраницаАктуализации = НачалоКвартала(РезультатПроверкиАктуальности.ДатаАктуальности);
	КонецЕсли;
		
	Возврат ГраницаАктуализации;
	
КонецФункции

// Возвращает количество документов, которые требуется перепровести для актуализации данных.
// Параметры:
//  Организация - СправочникСсылка.Организации - организация по которой необходимо получить количество документов.
//  Период - Дата актуализации.
//
// Возвращаемое значение:
//   Число - количество документов для перепроведения.
//
Функция КоличествоДокументовДляПерепроведения(Организация, Период) Экспорт
	
	КоличествоДокументовДляПерепроведения = 0;
	Если Не ЗначениеЗаполнено(Период)
		ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат КоличествоДокументовДляПерепроведения;
	КонецЕсли;
	
	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(Организация, Период);
	Если МоментНарушения <> Неопределено 
		И МоментНарушения.Дата <= Период Тогда
		КоличествоДокументовДляПерепроведения = РаботаСПоследовательностями.ОценкаКоличестваДокументовДляПерепроведения(
			Организация,
			МоментНарушения.Дата,
			Период,
			МоментНарушения);
	КонецЕсли;
	
	Возврат КоличествоДокументовДляПерепроведения;
	
КонецФункции

// Получает порядок актуализации отчета описанный в общем макете "ТребованияКАктуальностиОтчетов"
// Параметры:
//  ИмяФормы - полное наименование формы отчета
//
// Возвращаемое значение:
//   Число - порядок актуализации:
//   0 - актуализация БУ;
//   1 - ссылка на НДС;
//   2 - актуализация БУ или ссылка на НДС;
//   3 - актуализация БУ и ссылка на НДС.
//
Функция ПорядокАктуализацииОтчета(ИмяФормы) Экспорт
	
	МакетТребованийКАктуализации = ПолучитьОбщийМакет("ТребованияКАктуальностиОтчетов");
	ТаблицаДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетТребованийКАктуализации.ПолучитьТекст());
	ТаблицаДанных.Индексы.Добавить("Отчет");
	
	ЧастиИмениФормы = СтрРазделить(ИмяФормы, ".");
	Имяобъекта = "";
	Если ЧастиИмениФормы.Количество() > 1 Тогда 
		Имяобъекта = ЧастиИмениФормы[1];
	Иначе
		Имяобъекта = ИмяФормы;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Отчет", Имяобъекта);
	
	СтрокиДанных = ТаблицаДанных.НайтиСтроки(Отбор);
	ПорядокАктуализации = 0;
	Если СтрокиДанных.Количество() = 1 Тогда
		ПорядокАктуализации = Число(СтрокиДанных[0].ПорядокАктуализации);
	КонецЕсли;
	
	Возврат ПорядокАктуализации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АктуализацияДанныхУстарело

// Возвращает свойства выполняемого фонового задания по актуализации.
// Если ни одного задания не найдено, возвращается значение Неопределено.
//
// Параметры:
//  Организация                  - СправочникСсылка.Организации - Организация, 
//                                 по которой будет производиться поиск фонового
//                                 задания по актуализации.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы, из
//                                 которой вызывается поиск фонового задания.
//
// Возвращаемое значение:
//   Неопределено - фоновых заданий актуализации по указанной организации сейчас не выполняется.
//   Структура - всегда содержит ключ УникальныйИдентификатор.
//               Если задание выполняется, но его свойства получить не удалось,
//               в значении ключа УникальныйИдентификатор возвращается пустая строка.
//               Другие ключи структуры:
//               * Ключ         - Строка - Ключ фонового задания.
//               * Наименование - Строка - Наименование фонового задания.
//               * Организация  - СправочникСсылка.Организация - Организация, 
//               по которой выполняется задание.
//               * Пользователь - СправочникСсылка.Пользователи - Пользователь,
//               запустивший задание.
//
Функция НайтиФоновоеЗаданиеАктуализацииПоОрганизации_ИдентификаторЗадания(Знач Организация, Знач УникальныйИдентификаторФормы)

	Результат = Неопределено;
	
	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Ключ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФоновоеЗадание.Ключ, ":");
		// Ключ должен состоять из трех частей, разделенных двоеточием: имя фоновых заданий-актуализаций, GUID организации, GUID пользователя.
		
		Если Ключ.Количество() < 2
		 Или Ключ[0] <> ЗакрытиеМесяцаКлиентСервер.ПрефиксКлючаЗаданияАктуализации() Тогда
			// Это фоновое задание не выполняет актуализацию.
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторОрганизации = Ключ[1];
		ОрганизацияЗадания = Справочники.Организации.ПустаяСсылка();
		Если ЗначениеЗаполнено(УникальныйИдентификаторОрганизации)
		   И СтрЧислоВхождений(УникальныйИдентификаторОрганизации, "-") = 4 Тогда
			ОрганизацияЗадания = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторОрганизации));
		КонецЕсли;
		Если ОрганизацияЗадания <> Организация Тогда
			// Это фоновое задание по другой организации.
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторПользователя = ?(Ключ.Количество() > 2, Ключ[2], "");
		Если ЗначениеЗаполнено(УникальныйИдентификаторПользователя)
		   И СтрЧислоВхождений(УникальныйИдентификаторПользователя, "-") = 4 Тогда
			ПользовательЗадания = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторПользователя));
		Иначе
			ПользовательЗадания = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		СвойстваВыполняемогоЗадания = Новый Структура("УникальныйИдентификатор, Ключ, Наименование");
		ЗаполнитьЗначенияСвойств(СвойстваВыполняемогоЗадания, ФоновоеЗадание);
		СвойстваВыполняемогоЗадания.Вставить("Организация", Организация);
		СвойстваВыполняемогоЗадания.Вставить("Пользователь", ПользовательЗадания);
		Результат = СвойстваВыполняемогоЗадания;
		Прервать;
			
	КонецЦикла;
	
	Если Результат <> Неопределено Или Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если не найдено ни одного задания в файловом режиме работы, это еще не значит, 
	// что никто не актуализирует данные.
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
		РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		
		// Организация доступна для актуализации.
		Возврат Неопределено;
		
	Исключение
		
		// Работа с данной организацией недоступна, но конкретный идентификатор фонового задания мы не знаем.
		Возврат Новый Структура("УникальныйИдентификатор", "");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти