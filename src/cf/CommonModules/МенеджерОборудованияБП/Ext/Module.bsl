
#Область ПрограммныйИнтерфейс

Процедура ЭкземплярОборудованияПриСозданииНаСервере(ТекущийОбъект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	
	ДобавитьОбщиеРеквизиты(ЭтаФорма, ТекущийОбъект);
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		ТекущийОбъект.РабочееМесто = Параметры.РабочееМесто;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипОборудования") Тогда
		
		ТекущийОбъект.ТипОборудования = Параметры.ТипОборудования;
		
		//Заполним список драйверов
		ЭтаФорма.Элементы.ДрайверОборудования.СписокВыбора.Очистить();
		
		СписокДрайверов = Новый СписокЗначений();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДрайверыОборудования.Ссылка,
		|	ДрайверыОборудования.Наименование,
		|	ДрайверыОборудования.ТипОборудования
		|ИЗ
		|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
		|ГДЕ
		|	(ДрайверыОборудования.ТипОборудования = &ТипОборудования)
		|	И НЕ ДрайверыОборудования.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО ДрайверыОборудования.Наименование";
		
		Запрос.УстановитьПараметр("ТипОборудования", Параметры.ТипОборудования);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭтаФорма.Элементы.ДрайверОборудования.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		КонецЦикла;
				
	КонецЕсли;
	
	ДобавитьРеквизитыККТ(ЭтаФорма, ТекущийОбъект);
	ДобавитьРеквизитыЭТ(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыОборудования = ПараметрыПодключаемогоОборудования(ТекущийОбъект.Ссылка);
	
	ТекущийОбъект.Организация = ПараметрыОборудования.Организация;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОборудования);
	
	Если ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода
		ИЛИ ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID Тогда
		ЭтаФорма.ОрганизацияВидимость = Ложь;
		ЭтаФорма.Элементы.Организация.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ПодсказкаВвода = НСтр("ru='Если оборудование используется в розничном магазине'");
		ЭтаФорма.Элементы.Склад.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ОтметкаНезаполненного = Ложь;		
	Иначе
		ЭтаФорма.ОрганизацияВидимость = Истина;
		ЭтаФорма.Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
		ЭтаФорма.Элементы.Склад.ПодсказкаВвода = НСтр("ru='Если оборудование используется в розничном магазине'");
		ЭтаФорма.Элементы.Склад.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ОтметкаНезаполненного = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкземплярОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

	ПараметрыОборудования = ПараметрыПодключаемогоОборудования(ТекущийОбъект.Ссылка);
	
	ТекущийОбъект.Организация                 = ПараметрыОборудования.Организация; 
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОборудования);
КонецПроцедуры

Процедура ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	Если ПараметрыЗаписи.Свойство("Организация") Тогда
		
		МенеджерЗаписи = РегистрыСведений.ОборудованиеПоОрганизациям.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Оборудование = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Организация  = ПараметрыЗаписи.Организация;
		
		Если ПараметрыЗаписи.Свойство("Склад") Тогда
			МенеджерЗаписи.Склад = ПараметрыЗаписи.Склад;
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("Отправляет1СSMS") Тогда
			МенеджерЗаписи.Отправляет1СSMS = ПараметрыЗаписи.Отправляет1СSMS;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("Отправляет1СEmail") Тогда
			МенеджерЗаписи.Отправляет1СEmail = ПараметрыЗаписи.Отправляет1СEmail;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("ЗаполнятьКонтактныеДанные") Тогда
			МенеджерЗаписи.ЗаполнятьКонтактныеДанные = ПараметрыЗаписи.ЗаполнятьКонтактныеДанные;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("ПечататьЧек") Тогда
			МенеджерЗаписи.ПечататьЧек = ПараметрыЗаписи.ПечататьЧек;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("ОтправлятьEMail") Тогда
			МенеджерЗаписи.ОтправлятьEMail = ПараметрыЗаписи.ОтправлятьEMail;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("ОтправлятьSMS") Тогда
			МенеджерЗаписи.ОтправлятьSMS = ПараметрыЗаписи.ОтправлятьSMS;
		КонецЕсли; 
		
		Если ПараметрыЗаписи.Свойство("ЭлектронныеСертификатыНСПК") Тогда
			МенеджерЗаписи.ЭлектронныеСертификатыНСПК = ПараметрыЗаписи.ЭлектронныеСертификатыНСПК;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК") Тогда
				
				ПараметрыПодключенияНСПК = ПараметрыЗаписи.ПараметрыПодключенияНСПК;
				
				УстановитьПривилегированныйРежим(Истина);
				
				// Общий параметр для ИБ
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ЭС_НСПК_МИР", ПараметрыПодключенияНСПК.АдресСервисаНСПК, "АдресСервисаНСПК");
				
				// Ключ доступа для конкретной организации
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыЗаписи.Организация, ПараметрыПодключенияНСПК.КлючОрганизацииНСПК, "КлючОрганизацииНСПК");
				
				// Идентификатор и ключ доступа для конкретной торговой точки
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПараметрыПодключенияНСПК.ИдентификаторНСПК, "ИдентификаторНСПК");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПараметрыПодключенияНСПК.КлючКассыНСПК,     "КлючКассыНСПК");
				
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
		КонецЕсли; 
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Если ТекущийОбъект.УстройствоИспользуется Тогда
		Если ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал 
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам")
			И ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьОплатуПоПлатежнымКартам) Тогда
			
			Константы.ИспользоватьОплатуПоПлатежнымКартам.Установить(Истина);
			ПараметрыЗаписи.Вставить("НужноОбновитьИнтерфейс", Истина);
			
		ИначеЕсли (ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков
			Или ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ
			Или ТекущийОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") 
			И ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьФискальныйРегистратор) Тогда
			
			Константы.ИспользоватьФискальныйРегистратор.Установить(Истина);
			ПараметрыЗаписи.Вставить("НужноОбновитьИнтерфейс", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкземплярФискальныеОперацииПриСозданииНаСервере(Запись, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	Элементы = ЭтаФорма.Элементы;
	
	ГруппаБаннер = Элементы.Вставить("ПредупреждениеОПробитомЧеке", Тип("ГруппаФормы"),ЭтаФорма, Элементы.Найти("ГруппаШапка"));
	
	ГруппаБаннер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннер.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаБаннер.ОтображатьЗаголовок = ЛОЖЬ;
	ГруппаБаннер.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	
	НадписьПробитьЧек = Элементы.Добавить("НадписьПробитьЧек", Тип("ДекорацияФормы"), ГруппаБаннер); 
	
	ШаблонСтроки = НСтр("ru = 'Для пробития чека коррекции перейдите в документ основание'");
	НадписьПробитьЧек.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Представление2;
	ГруппаБаннер.Видимость = НЕ ЭтаФорма.Параметры.Свойство("НеПоказыватьБаннер");
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Менеджер);
	Если МетаданныеОбъекта = Неопределено Тогда
		
		ЕстьРеквизитОрганизация = Ложь;
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		
		ЕстьРеквизитОрганизация =  НЕ (МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено) 
			ИЛИ НЕ (МетаданныеОбъекта.Ресурсы.Найти("Организация") = Неопределено)
			ИЛИ НЕ (МетаданныеОбъекта.Измерения.Найти("Организация") = Неопределено);
	Иначе
		
		ЕстьРеквизитОрганизация =  ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта);
		
	КонецЕсли;
	
	Если НЕ ЕстьРеквизитОрганизация  Тогда
		Возврат;
	КонецЕсли; 
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации 
	|	ПО СправочникОрганизации.Ссылка = ЭтотСписок.Организация
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|ЗначениеРазрешено(Организация, ПустаяСсылка КАК Истина)
	|ИЛИ ЗначениеРазрешено(СправочникОрганизации.ГоловнаяОрганизация, ПустаяСсылка КАК Истина)
	|";
	
КонецПроцедуры

// Возвращает возможность использования подключаемого оборудования в конфигурации
//
// Параметры:
//  ТипыПО - Массив из ПеречисленияСсылка.ТипыПодключаемогоОборудования - список оборудования которое надо проверить
//
// Возвращаемое значение:
//  Булево - возможность использования оборудования в конфигурации
Функция ИспользуетсяОборудование(ТипыПО) Экспорт
	СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОборудованияОтбор.ТипыПО = ТипыПО;
	
	Возврат МенеджерОборудованияБПВызовСервера.ИспользоватьПодключаемоеОборудование() 
		И МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор).Количество() > 0;
		
КонецФункции
	

#Область ОфлайнОборудование
Процедура ЭкземплярОфлайнОборудованияПриСозданииНаСервере(ТекущийОбъект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока");
	ТипСклад = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Склады")));
	ТипУзелОбмена = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("ПланОбменаСсылка.ОбменСПодключаемымОборудованиемOffline")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Склад", ТипСклад, , "Склад"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УзелОбмена", ТипУзелОбмена, , "УзелОбмена"));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элемент = ЭтаФорма.Элементы.Добавить("Склад", Тип("ПолеФормы"));
	Элемент.ПутьКДанным = "Склад";
	Элемент.Вид         = ВидПоляФормы.ПолеВвода;
	
	ПараметрыОборудования = ПараметрыПодключаемогоОборудования(ТекущийОбъект.Ссылка);
	
	ТекущийОбъект.Организация                 = ПараметрыОборудования.Организация;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОборудования);
	
	Если Параметры.Свойство("Склад") Тогда
		ЭтаФорма.Склад = Параметры.Склад;
	Иначе
		ЭтаФорма.Склад = ПараметрыОборудования.Склад;
	КонецЕсли; 
	
	ПолеТипОборудования = ЭтаФорма.Элементы.Найти("ТипОборудования");
	Если ПолеТипОборудования <> Неопределено И НЕ ПолеТипОборудования.ТолькоПросмотр Тогда
		ПолеТипОборудования.РежимВыбораИзСписка = Истина;
		ПолеТипОборудования.СписокВыбора.Очистить();
		ПолеТипОборудования.СписокВыбора.Добавить(Перечисления.ТипыОфлайнОборудования.ККМ);
	КонецЕсли;
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		ТекущийОбъект.РабочееМесто = Параметры.РабочееМесто;
	КонецЕсли;
	
	ЭтаФорма.Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
	ЭтаФорма.Элементы.Склад.ПодсказкаВвода = НСтр("ru='Если оборудование используется в розничном магазине'");
	ЭтаФорма.Элементы.Склад.АвтоОтметкаНезаполненного = Ложь;
	ЭтаФорма.Элементы.Склад.ОтметкаНезаполненного = Ложь;
	
КонецПроцедуры

Процедура ЭкземплярОфлайнОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

	ПараметрыОборудования = ПараметрыПодключаемогоОборудования(ТекущийОбъект.Ссылка);
	
	ТекущийОбъект.Организация                 = ПараметрыОборудования.Организация;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОборудования);
	
КонецПроцедуры

Процедура ЭкземплярОфлайнОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	Если ПараметрыЗаписи.Свойство("Организация") Тогда
		
		МенеджерЗаписи = РегистрыСведений.ОборудованиеПоОрганизациям.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Оборудование = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Организация  = ПараметрыЗаписи.Организация;
		
		Если ПараметрыЗаписи.Свойство("Склад") Тогда
			ТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаписи.Склад, "ТипЦенРозничнойТорговли");
			Если НЕ ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
				СообщениеПользователю = НСтр("ru = 'Для обмена с офлайн оборудованием необходимо указать тип цен для склада %1.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю, ПараметрыЗаписи.Склад), 
					ТекущийОбъект, ,"Склад", Отказ);
				Возврат;
			КонецЕсли; 
			МенеджерЗаписи.Склад = ПараметрыЗаписи.Склад;
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("УзелОбмена") 
			И ПараметрыЗаписи.Свойство("Склад") Тогда
			
			Если ЗначениеЗаполнено(ПараметрыЗаписи.УзелОбмена) Тогда
				МенеджерЗаписи.УзелОбмена = ПараметрыЗаписи.УзелОбмена;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаписи.Склад) Тогда
				УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.СоздатьУзел();
				УзелОбъект.УстановитьНовыйКод();
				УзелОбъект.Наименование = ТекущийОбъект.Наименование;
				УзелОбъект.Записать();
				
				МенеджерЗаписи.УзелОбмена = УзелОбъект.Ссылка;
				
				ПараметрыОбъекта = Новый Структура("УзелОбмена, Склад", УзелОбъект.Ссылка, ПараметрыЗаписи.Склад);
				ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
				
				ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.ОбновитьРегистрКодовНоменклатуры",
					ПараметрыОбъекта, ПараметрыВыполнения);
			КонецЕсли;
				
		КонецЕсли;
		
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля") 
		И ПравоДоступа("Изменение", Метаданные.Константы.ВедетсяРозничнаяТорговля) Тогда
		
		Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
		ПараметрыЗаписи.Вставить("НужноОбновитьИнтерфейс", Истина);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область РаботаСПерсональнымиДанными

Процедура ОбработкаЗаполненияПерсональныхДанных(ПерсональныеДанные, СубъектПерсональныхДанных, ТипПерсональныхДанных, НаДату) Экспорт
	
	Если ТипЗнч(СубъектПерсональныхДанных) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонтрагентСсылка", СубъектПерсональныхДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ИНН = ФизическиеЛица.ИНН
		|ГДЕ
		|	Контрагенты.Ссылка = &КонтрагентСсылка";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ФизическоеЛицо = Результат.ФизическоеЛицо;
		Иначе
			ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
	Иначе
		ФизическоеЛицо = СубъектПерсональныхДанных;
	КонецЕсли; 
	
	Если ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН Тогда
		ПерсональныеДанные.ИНН = ПокупательИНН(СубъектПерсональныхДанных);
	Иначе
		ПерсональныеДанные.ДатаРождения = ПокупательДатаРождения(ФизическоеЛицо);
		ПерсональныеДанные.ДанныеДокумента = ПокупательПаспортныеДанные(ФизическоеЛицо, НаДату);
	КонецЕсли;
	
	ПокупательГражданство = ПокупательГражданство(ФизическоеЛицо, НаДату);
	Если ПокупательГражданство.Пустая()
		ИЛИ ПокупательГражданство = Справочники.СтраныМира.Россия Тогда
		ПерсональныеДанные.ВидДокумента = Перечисления.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ;
	Иначе
		ГражданствоКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПокупательГражданство, "Код");
		
		ПерсональныеДанные.Гражданство = ГражданствоКод;
		ПерсональныеДанные.ВидДокумента = Перечисления.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортИностранногоГражданина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Функция НовыйПараметрыПроверкиЗаполнения() Экспорт
	ПараметрыОбъекта = Новый Структура;
	
	ПараметрыОбъекта.Вставить("ПечататьЧек",           Ложь);
	
	ПараметрыОбъекта.Вставить("ОтправлятьSMS",         Ложь);
	ПараметрыОбъекта.Вставить("НомерТелефона",         "");
	
	ПараметрыОбъекта.Вставить("ОтправлятьEmail",       Ложь);
	ПараметрыОбъекта.Вставить("АдресЭлектроннойПочты", "");
	
	Возврат ПараметрыОбъекта;
КонецФункции 

// ОбработкаПроверкиЗаполненияПечатьЧека - проверяет заполненность реквизитов на форме оборудования
// при необходимости выдается ошибка
//
// Параметры:
//  ПараметрыОбъекта  - Структура - параметры объекта для проверки
//                 см. МенеджерОборудованияБП.НовыйПараметрыПроверкиЗаполнения()
//  ПроверятьКонтактныеДанные  - Булево - флаг необходимости проверки корректности контактных данных
//  Отказ  - Булево- Истина, если в результате проверки выявляены ошибки
//
Процедура ОбработкаПроверкиЗаполненияПечатьЧека(ПараметрыОбъекта, ПроверятьКонтактныеДанные, Отказ) Экспорт
	
	// Чтобы можно было не печатать чек, он должен быть отправлен по email/sms 
	ЭлектронныйЧек = ПараметрыОбъекта.ОтправлятьSMS ИЛИ ПараметрыОбъекта.ОтправлятьEmail;
		
	Если НЕ ПараметрыОбъекта.ПечататьЧек И НЕ ЭлектронныйЧек Тогда
		ОписаниеОшибки = НСтр("ru = 'Печать чека обязательна, если он не отправляется в электронном виде по email/sms.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, ,"ПечататьЧек", , Отказ);
	ИначеЕсли ПроверятьКонтактныеДанные Тогда
		Если ПараметрыОбъекта.ОтправлятьEmail Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.АдресЭлектроннойПочты) Тогда
				ТекстСообщения = "";
				ВидСообщения   = "Заполнение";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Адрес электронной почты",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "АдресЭлектроннойПочты", , Отказ);
			ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПараметрыОбъекта.АдресЭлектроннойПочты) Тогда 
				ТекстСообщения = НСтр("ru = 'Неверный формат адреса электронной почты.'");
				ВидСообщения   = "Корректность";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Адрес электронной почты",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "АдресЭлектроннойПочты",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбъекта.ОтправлятьSMS Тогда
			НомерТелефонаБезПрефикса = ?(СтрНайти(ПараметрыОбъекта.НомерТелефона, "+") = 1, Сред(ПараметрыОбъекта.НомерТелефона, 2), ПараметрыОбъекта.НомерТелефона);
			Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.НомерТелефона) Тогда
				ТекстСообщения = "";
				ВидСообщения   = "Заполнение";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения, "Номер телефона",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерТелефона", , Отказ);
			ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефонаБезПрефикса) 
				ИЛИ НЕ ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефонаБезПрефикса) Тогда
				
				ТекстСообщения = НСтр("ru = 'Неверный формат номера телефона.'");
				ВидСообщения   = "Корректность";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения, "Номер телефона",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерТелефона",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция НовыйПараметрыОборудования() Экспорт
	ПараметрыОборудования = Новый Структура;
	
	ПараметрыОборудования.Вставить("Организация",               БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	ПараметрыОборудования.Вставить("Склад",                     БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад"));
	ПараметрыОборудования.Вставить("УзелОбмена",                НЕОПРЕДЕЛЕНО);
	ПараметрыОборудования.Вставить("Отправляет1СSMS",           0);
	ПараметрыОборудования.Вставить("Отправляет1СEmail",         0);
	ПараметрыОборудования.Вставить("ЗаполнятьКонтактныеДанные", Ложь);
	ПараметрыОборудования.Вставить("ПечататьЧек",               Истина);
	ПараметрыОборудования.Вставить("ОтправлятьEMail",           Ложь);
	ПараметрыОборудования.Вставить("ОтправлятьSMS",             Ложь);
	ПараметрыОборудования.Вставить("ЭлектронныеСертификатыНСПК", Ложь);
	
	Возврат ПараметрыОборудования;
КонецФункции

Функция ВедетсяОбъемноСортовойУчет() Экспорт
	ВедетсяОбъемноСортовойУчет = Ложь;
	ВидыПродукцииОбъемноСортовогоУчета = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииОбъемноСортовогоУчета();
	Для каждого ВидПродукции Из ВидыПродукцииОбъемноСортовогоУчета Цикл
		ВедетсяОбъемноСортовойУчет = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции);
		Если ВедетсяОбъемноСортовойУчет Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ВедетсяОбъемноСортовойУчет;
КонецФункции 
 

Функция ПараметрыПодключаемогоОборудования(ПодключаемоеОборудование) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборудованиеПоОрганизациям.Организация КАК Организация,
	|	ОборудованиеПоОрганизациям.Склад КАК Склад,
	|	ЕСТЬNULL(ОборудованиеПоОрганизациям.УзелОбмена.Ссылка, НЕОПРЕДЕЛЕНО) КАК УзелОбмена,
	|	ВЫБОР
	|		КОГДА ОборудованиеПоОрганизациям.Отправляет1СSMS
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отправляет1СSMS,
	|	ВЫБОР
	|		КОГДА ОборудованиеПоОрганизациям.Отправляет1СEmail
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отправляет1СEmail,
	|	ОборудованиеПоОрганизациям.ЗаполнятьКонтактныеДанные КАК ЗаполнятьКонтактныеДанные,
	|	ОборудованиеПоОрганизациям.ПечататьЧек
	|		ИЛИ (НЕ ОборудованиеПоОрганизациям.ОтправлятьEMail
	|			И НЕ ОборудованиеПоОрганизациям.ОтправлятьSMS) КАК ПечататьЧек,
	|	ОборудованиеПоОрганизациям.ОтправлятьEMail КАК ОтправлятьEMail,
	|	ОборудованиеПоОрганизациям.ЭлектронныеСертификатыНСПК КАК ЭлектронныеСертификатыНСПК,
	|	ОборудованиеПоОрганизациям.ОтправлятьSMS КАК ОтправлятьSMS
	|ИЗ
	|	РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|ГДЕ
	|	ОборудованиеПоОрганизациям.Оборудование = &ПодключаемоеОборудование";
	
	
	ПараметрыОборудования = НовыйПараметрыОборудования();
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОборудования, РезультатЗапроса);
		Если ПараметрыОборудования.ЭлектронныеСертификатыНСПК Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ПараметрыОборудования.Вставить("ИдентификаторНСПК", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПодключаемоеОборудование, "ИдентификаторНСПК")); 
			ПараметрыОборудования.Вставить("КлючКассыНСПК",     ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПодключаемоеОборудование, "КлючКассыНСПК")); 
			
			ПараметрыОборудования.Вставить("КлючОрганизацииНСПК", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыОборудования.Организация, "КлючОрганизацииНСПК")); 
			ПараметрыОборудования.Вставить("АдресСервисаНСПК",    ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК")); 
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ПараметрыОборудования;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыККТ(ЭтаФорма, Объект)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока");
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Отправляет1СSMS", ТипЧисло));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Отправляет1СEmail", ТипЧисло));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Отправляет1СSMS_Надпись", ТипСтрока));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Отправляет1СEmail_Надпись", ТипСтрока));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаполнятьКонтактныеДанные", ТипБулево, ,НСтр("ru = 'Заполнять электронную почту и телефон из данных контрагента'")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПечататьЧек", ТипБулево, ,НСтр("ru = 'Печатать чек'")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтправлятьEMail", ТипБулево, ,НСтр("ru = 'Отправить email'")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтправлятьSMS",   ТипБулево, ,НСтр("ru = 'Отправить SMS'")));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтаФорма.Отправляет1СEmail_Надпись = Новый ФорматированнаяСтрока("Настроить",,,,"НастроитьEmail");
	ЭтаФорма.Отправляет1СSMS_Надпись   = Новый ФорматированнаяСтрока("Настроить",,,,"НастроитьSMS");
	
	ГруппаОтправлятьЧеки = ЭтаФорма.Элементы.Добавить("ГруппаОтправлятьЧеки", Тип("ГруппаФормы"));
	ГруппаОтправлятьЧеки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтправлятьЧеки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтправлятьЧеки.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаОтправлятьЧеки.Заголовок = НСтр("ru = 'Отправка электронных чеков'");
	ГруппаОтправлятьЧеки.Видимость = (Объект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	ГруппаОсновное = ЭтаФорма.Элементы.Найти("Основное");
	Если ГруппаОсновное <> Неопределено Тогда
		ЭтаФорма.Элементы.Переместить(ГруппаОтправлятьЧеки, ГруппаОсновное);
	КонецЕсли; 
	
	ГруппаНастройкиОтправки = ЭтаФорма.Элементы.Добавить("ГруппаНастройкиОтправкиЧеки", Тип("ГруппаФормы"), ГруппаОтправлятьЧеки);
	ГруппаНастройкиОтправки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастройкиОтправки.ОтображатьЗаголовок = Ложь;
	ГруппаНастройкиОтправки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НоваяГруппа(ЭтаФорма, "Отправляет1СEmail", НСтр("ru = 'Отправка по электронной почте'"), ГруппаНастройкиОтправки);
	НоваяГруппа(ЭтаФорма, "Отправляет1СSMS",   НСтр("ru = 'Отправка по SMS'"),               ГруппаНастройкиОтправки);
	
	Элемент = ЭтаФорма.Элементы.Добавить("ЗаполнятьКонтактныеДанные", Тип("ПолеФормы"), ГруппаОтправлятьЧеки);
	Элемент.ПутьКДанным = "ЗаполнятьКонтактныеДанные";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	Элемент = ЭтаФорма.Элементы.Добавить("Разделитель3", Тип("ДекорацияФормы"), ГруппаОтправлятьЧеки);
	
	ГруппаЗначенияПоУмолчанию = ЭтаФорма.Элементы.Добавить("ГруппаЗначенияПоУмолчанию", Тип("ГруппаФормы"), ГруппаОтправлятьЧеки);
	ГруппаЗначенияПоУмолчанию.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗначенияПоУмолчанию.Заголовок = НСтр("ru = 'Настройки печати чека по умолчанию'");
	ГруппаЗначенияПоУмолчанию.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаЗначенияПоУмолчанию.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	Элемент = ЭтаФорма.Элементы.Добавить("ПечататьЧек", Тип("ПолеФормы"), ГруппаЗначенияПоУмолчанию);
	Элемент.ПутьКДанным = "ПечататьЧек";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	Элемент = ЭтаФорма.Элементы.Добавить("Разделитель1", Тип("ДекорацияФормы"), ГруппаЗначенияПоУмолчанию);
	Элемент.Ширина = 3;
	
	Элемент = ЭтаФорма.Элементы.Добавить("ОтправлятьEMail", Тип("ПолеФормы"), ГруппаЗначенияПоУмолчанию);
	Элемент.ПутьКДанным = "ОтправлятьEMail";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	Элемент = ЭтаФорма.Элементы.Добавить("Разделитель2", Тип("ДекорацияФормы"), ГруппаЗначенияПоУмолчанию);
	Элемент.Ширина = 3;
	
	Элемент = ЭтаФорма.Элементы.Добавить("ОтправлятьSMS", Тип("ПолеФормы"), ГруппаЗначенияПоУмолчанию);
	Элемент.ПутьКДанным = "ОтправлятьSMS";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	// по умолчанию для новых объектов ПечататьЧек = Истина
	ЭтаФорма.ПечататьЧек = Истина;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыЭТ(ЭтаФорма, Объект)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255));
	
	// Общие параметры
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресСервисаНСПК",    ТипСтрока, , "Адрес сервиса НСПК"));
	
	// Ключ доступа (в целом на организацию)
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КлючОрганизацииНСПК", ТипСтрока, , "Ключ организации (API-KEY)"));
	
	// Параметры для каждой торговой точки
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИдентификаторНСПК",   ТипСтрока, , "Идентификатор кассы (ID кассы)"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КлючКассыНСПК",       ТипСтрока, , "Ключ кассы (MAC-KEY)"));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	СтраницаОсновное = ЭтаФорма.Элементы.Найти("Основное");

	ГруппаСертификатыНСПК = ЭтаФорма.Элементы.Добавить("ГруппаЭлектронныеСертификатыНСПК", Тип("ГруппаФормы"), СтраницаОсновное);
	ГруппаСертификатыНСПК.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСертификатыНСПК.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСертификатыНСПК.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаСертификатыНСПК.Заголовок = НСтр("ru = 'Электронные сертификаты на социально значимые товары (491-ФЗ)'");
	ГруппаСертификатыНСПК.Видимость = (Объект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	
	Элемент = ЭтаФорма.Элементы.Добавить("АдресСервисаНСПК", Тип("ПолеФормы"), ГруппаСертификатыНСПК);
	Элемент.ПутьКДанным = "АдресСервисаНСПК";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	
	Элемент = ЭтаФорма.Элементы.Добавить("КлючОрганизацииНСПК", Тип("ПолеФормы"), ГруппаСертификатыНСПК);
	Элемент.ПутьКДанным = "КлючОрганизацииНСПК";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.РежимПароля = НЕ Пользователи.ЭтоПолноправныйПользователь();
	
	ГруппаПараметрыПодключения = ЭтаФорма.Элементы.Добавить("ГруппаПараметрыПодключения", Тип("ГруппаФормы"), ГруппаСертификатыНСПК);
	ГруппаПараметрыПодключения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыПодключения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПараметрыПодключения.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаПараметрыПодключения.Заголовок = НСтр("ru = 'Параметры подключения к кассе'");
	
	Элемент = ЭтаФорма.Элементы.Добавить("ИдентификаторНСПК", Тип("ПолеФормы"), ГруппаПараметрыПодключения);
	Элемент.ПутьКДанным = "ИдентификаторНСПК";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.РежимПароля = НЕ Пользователи.ЭтоПолноправныйПользователь();
	
	Элемент = ЭтаФорма.Элементы.Добавить("КлючКассыНСПК", Тип("ПолеФормы"), ГруппаПараметрыПодключения);
	Элемент.ПутьКДанным = "КлючКассыНСПК";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.РежимПароля = НЕ Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

Функция ИмяРеквизита()
	УИД = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");

	Возврат СтрШаблон("Элемент_%1", УИД);
КонецФункции 

Процедура НоваяГруппа(ЭтаФорма, ПутьКДанным, Заголовок, Родитель)
	Группа = ЭтаФорма.Элементы.Добавить(ИмяРеквизита(), Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Группа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
	Группа.Подсказка = Заголовок;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйПереключатель(ЭтаФорма, Группа, ПутьКДанным).СписокВыбора.Добавить(0, НСТр("ru = 'Через ОФД'"));
	
	ГруппаНастройка = ЭтаФорма.Элементы.Добавить(ИмяРеквизита(), Тип("ГруппаФормы"), Группа);
	ГруппаНастройка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастройка.ОтображатьЗаголовок = Ложь;
	ГруппаНастройка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НовыйПереключатель(ЭтаФорма, ГруппаНастройка, ПутьКДанным).СписокВыбора.Добавить(1, НСТр("ru = 'Из программы'"));
	
	НоваяДекорация(ЭтаФорма, ГруппаНастройка);
	
	ПолеНадписи = ЭтаФорма.Элементы.Добавить(ИмяРеквизита(), Тип("ПолеФормы"), ГруппаНастройка);
	ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписи.ПутьКДанным = СтрШаблон("%1_%2", ПутьКДанным, "Надпись");

КонецПроцедуры 

Процедура НоваяДекорация(ЭтаФорма, Родитель)

	ГруппаНастройка = ЭтаФорма.Элементы.Добавить(ИмяРеквизита(), Тип("ДекорацияФормы"), Родитель);

КонецПроцедуры 

Функция НовыйПереключатель(ЭтаФорма, Группа, ПутьКДанным)
	ИмяРеквизита = ИмяРеквизита();
	
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
	
	Возврат Элемент
КонецФункции 

#Область РаботаСПерсональнымиДанными


Функция ПокупательГражданство(ФизическоеЛицо, НаДату = Неопределено)
	
	ПокупательГражданство = Справочники.СтраныМира.ПустаяСсылка();
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	КодыМВД = Новый Массив;
	КодыМВД.Добавить("10");
	КодыМВД.Добавить("21");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВидыДокументовФизическихЛиц
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.КодМВД В(&КодыМВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.СтранаВыдачи КАК Страна
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, Физлицо = &ФизЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка";
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(НаДату));
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("КодыМВД", КодыМВД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПокупательГражданство = Выборка.Страна;
	КонецЕсли;
	
	Возврат ПокупательГражданство;
	
КонецФункции

Функция ПокупательДатаРождения(ФизическоеЛицо)
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ДатаРождения"));
	
КонецФункции

Функция ПокупательИНН(ФизическоеЛицо)
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ИНН"));
	
КонецФункции

Функция ПокупательПаспортныеДанные(ФизическоеЛицо, НаДату = Неопределено)
	
	ПокупательПерсональныеДанные = "";
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	КодыМВД = Новый Массив;
	КодыМВД.Добавить("10");
	КодыМВД.Добавить("21");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВидыДокументовФизическихЛиц
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.КодМВД В(&КодыМВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.Период КАК Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление,
	|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента КАК УдалитьВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.ФамилияЛатиницей КАК ФамилияЛатиницей,
	|	ДокументыФизическихЛицСрезПоследних.ИмяЛатиницей КАК ИмяЛатиницей,
	|	ДокументыФизическихЛицСрезПоследних.СтранаВыдачи КАК СтранаВыдачи
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, Физлицо = &ФизЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка";
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(НаДату));
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("КодыМВД", КодыМВД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПокупательПерсональныеДанные = СокрЛП(Выборка.Серия) + " " + СокрЛП(Выборка.Номер) + " " + СокрЛП(Выборка.КемВыдан)
			+ " " + Формат(Выборка.ДатаВыдачи, "ДФ=dd.MM.yyyy") + " " + Формат(Выборка.СрокДействия, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ПокупательПерсональныеДанные;
	
КонецФункции

#КонецОбласти 

Процедура ДобавитьОбщиеРеквизиты(ЭтаФорма, ТекущийОбъект)
	Элементы = ЭтаФорма.Элементы;

	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипСклад = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Склады")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Склад", ТипСклад, , "Склад"));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементСклад = Элементы.Добавить("Склад", Тип("ПолеФормы"));
	
	ЭлементСклад.ПутьКДанным            = "Склад";
	ЭлементСклад.Вид                    = ВидПоляФормы.ПолеВвода;
	ЭлементСклад.АвтоМаксимальнаяШирина = Ложь;
	
	ГруппаОсновное = Элементы.Найти("Основное");
	ЭлементОрганизация = Элементы.Найти("Организация");
	
	Если ГруппаОсновное <> Неопределено Тогда
		Элементы.Переместить(ЭлементСклад, ГруппаОсновное, ЭлементОрганизация);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 