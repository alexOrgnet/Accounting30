// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// См. РекламныйСервисКлиент.ПриОткрытии
Процедура ПриОткрытии(Форма) Экспорт
	
	ИмяГруппыРекламныйСервис = РекламныйСервисСлужебныйКлиентСервер.ИмяГруппыРекламныйСервис();
	Если РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(
		Форма, ИмяГруппыРекламныйСервис) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаПараметрРекламногоСервиса = РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаПараметрРекламногоСервиса();
	ПараметрРекламногоСервиса = Форма[ИмяРеквизитаПараметрРекламногоСервиса]; // см. РекламныйСервис.НовыйПараметрРекламногоСервиса
	
	Если ПараметрРекламногоСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("РасположениеРекламы", Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("ФоновоеЗадание", Тип("Структура"));
	ОжидаемыеТипыСвойств.Вставить("ПоказыватьРекламу", Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.ПриОткрытии", 
		"ПараметрРекламногоСервиса", 
		ПараметрРекламногоСервиса, 
		Тип("Структура"), 
		ОжидаемыеТипыСвойств);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.ПриОткрытии", "Форма", Форма, Тип("ФормаКлиентскогоПриложения"));
	
	Если ПараметрРекламногоСервиса.ФоновоеЗадание.Количество() Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьРекламныйНоситель", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель
Процедура ЗаполнитьРекламныйНоситель(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.ЗаполнитьРекламныйНоситель", "Форма", Форма, Тип("ФормаКлиентскогоПриложения"));
	
	ИмяРеквизитаПараметрРекламногоСервиса = РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаПараметрРекламногоСервиса();
	ПараметрРекламногоСервиса = Форма[ИмяРеквизитаПараметрРекламногоСервиса]; // см. РекламныйСервис.НовыйПараметрРекламногоСервиса
	
	ФоновоеЗадание = ПараметрРекламногоСервиса.ФоновоеЗадание;
	
	// Инициализация обработчик ожидания завершения.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ИмяПроцедурыОповещения = "ЗаполнитьИзображениеРекламыЗавершение";
	ОбработкаЗавершенияРекламы = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершенияРекламы, ПараметрыОжидания);
	
КонецПроцедуры

// См. РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу
Процедура ПоказатьКнопкуЗакрытьРекламу(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.ПоказатьКнопкуЗакрытьРекламу", 
		"Форма", 
		Форма, 
		Тип("ФормаКлиентскогоПриложения"));
	
	ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия();
	
	Счетчик = Форма[ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия]; // Число
	Если Счетчик > 0 Тогда
		
		Форма[ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия] = Счетчик - 1;
		Возврат;
		
	КонецЕсли;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПоказатьКнопкуЗакрытьРекламу");
	ИмяКопкиЗакрытияРекламы = РекламныйСервисСлужебныйКлиентСервер.ИмяКопкиЗакрытияРекламы();
	УстановитьВидимостьЭлементаФормыПоЗаголовку(Форма, ИмяКопкиЗакрытияРекламы, Истина);
	
КонецПроцедуры

// См. РекламныйСервисКлиент.МакетРекламныйСервисНажатие
Процедура МакетРекламныйСервисНажатие(Форма, Знач ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.МакетРекламныйСервисНажатие", 
		"Форма", 
		Форма, 
		Тип("ФормаКлиентскогоПриложения"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.МакетРекламныйСервисНажатие", 
		"ДанныеСобытия", 
		ДанныеСобытия, 
		Тип("ФиксированнаяСтруктура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебныйКлиент.МакетРекламныйСервисНажатие", 
		"СтандартнаяОбработка", 
		СтандартнаяОбработка, 
		Тип("Булево"));
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоказываемойРекламы = ДанныеПоказываемойРекламыИзДанныхСобытия(ДанныеСобытия);
	
	Если ДанныеПоказываемойРекламы.ИмяКласса = "pic_img" Тогда
		
		МакетРекламныйСервисНажатиеНаКартинку(ДанныеПоказываемойРекламы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РекламныйСервисКлиент.КомандаЗакрытьРекламу
Процедура КомандаЗакрытьРекламу(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"КомандаЗакрытьРекламу", "Форма", Форма, Тип("ФормаКлиентскогоПриложения"));
	
	ИмяГруппыРекламныйСервис = РекламныйСервисСлужебныйКлиентСервер.ИмяГруппыРекламныйСервис();
	УстановитьВидимостьЭлементаФормыПоЗаголовку(Форма, ИмяГруппыРекламныйСервис, Ложь);
	
	РекламныйСервисСлужебныйВызовСервера.КомандаЗакрытьРекламу();
	
КонецПроцедуры

// см. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ИмяПроцедуры = "ПослеНачалаРаботыСистемыОбработчик";
	ПодключитьОбработчикОжидания(ИмяПроцедуры, 120, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

// Новый параметр приложения список показанной рекламы.
// 
// Возвращаемое значение:
//  Структура:
// * ИмяФормы - Строка
// * СписокРекламы - Массив из Строка
//
Функция НовыйСписокПоказаннойРекламыФормы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФормы", "");
	Результат.Вставить("СписокРекламы", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Новый данные показываемой рекламы.
// 
// Возвращаемое значение:
//  Структура -  Новый данные показываемой рекламы:
// * ИдентификаторРекламы - Строка
// * ИмяКласса - Строка
// * АтрибутыРодителя - Массив из см. НовыйДанныеАтрибутаЭлеменетаПоказываемойРекламы
//
Функция НовыйДанныеПоказываемойРекламы()
	
	Результат = Новый Структура; // Element
	Результат.Вставить("ИдентификаторРекламы", ""); // Element.id
	Результат.Вставить("ИмяКласса", ""); // Element.className
	
	АтрибутыРодителя = Новый Массив;
	Результат.Вставить("АтрибутыРодителя", АтрибутыРодителя);
	
	Возврат Результат;
	
КонецФункции

// Новый данные атрибута элеменета показываемой рекламы.
// 
// Возвращаемое значение:
//  Структура -  Новый данные атрибута элеменета показываемой рекламы:
// * ИмяАтрибута - Строка
// * ЗначениеАтрибута - Строка
//
Функция НовыйДанныеАтрибутаЭлеменетаПоказываемойРекламы()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяАтрибута", ""); // Element.parentElement.attributes[0].name
	Результат.Вставить("ЗначениеАтрибута", ""); // Element.parentElement.attributes[0].value
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

// Данные показываемой рекламы из данных события.
// 
// Параметры:
//  ДанныеСобытия - ФиксированнаяСтруктура -  Данные события:
// * Anchor - Неопределено, ВнешнийОбъект - 
// * Element - Структура - :
// ** baseURI - Строка - 
// ** id - Строка - 
// ** className - Строка - 
// ** attributes - Массив из КлючИЗначение - :
// *** name - Строка - 
// *** value - Строка - 
// * Button - Неопределено, ВнешнийОбъект - 
// * Event - ВнешнийОбъект - 
// * Document - ВнешнийОбъект - 
// * Href - Неопределено, Строка - 
// 
// Возвращаемое значение:
//  Структура - см. НовыйДанныеПоказываемойРекламы
//
Функция ДанныеПоказываемойРекламыИзДанныхСобытия(ДанныеСобытия)
	
	Результат = НовыйДанныеПоказываемойРекламы();
	Результат.ИдентификаторРекламы = ДанныеСобытия.Element.id;
	Результат.ИмяКласса = ДанныеСобытия.Element.className;
	
	АтрибутыРодителя = ДанныеСобытия.Element.parentElement.attributes;
	
	Для Каждого Атрибут Из АтрибутыРодителя Цикл
		
		ИмяАтрибута = Атрибут.name;
		
		НовыйАтрибут = НовыйДанныеАтрибутаЭлеменетаПоказываемойРекламы();
		НовыйАтрибут.ИмяАтрибута = ИмяАтрибута;
		
		ЗначениеАтрибута  = Атрибут.value;
		НовыйАтрибут.ЗначениеАтрибута  = ЗначениеАтрибута;
		
		Результат.АтрибутыРодителя.Добавить(НовыйАтрибут);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МакетРекламныйСервисНажатие

// Макет рекламный сервис нажатие продолжение.
// 
// Параметры:
//  ДанныеПоказываемойРекламы - см. НовыйДанныеПоказываемойРекламы
//  Форма - ФормаКлиентскогоПриложения
//
Процедура МакетРекламныйСервисНажатиеНаКартинку(ДанныеПоказываемойРекламы, Форма)
	
	ИдентификаторРекламы = ДанныеПоказываемойРекламы.ИдентификаторРекламы;
	
	НавигационнаяСсылка = "";
	Для Каждого Атрибут Из ДанныеПоказываемойРекламы.АтрибутыРодителя Цикл
		Если Атрибут.ИмяАтрибута = "href" Тогда
			НавигационнаяСсылка = Атрибут.ЗначениеАтрибута; // Строка
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(НавигационнаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие стандартного браузера с адресом целевого действия, либо навигационной ссылки.
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
	
	// Выполнение дополнительных действий на сервере.
	ОбщегоНазначенияКлиентСервер.Проверить(
		Не ПустаяСтрока(ИдентификаторРекламы), 
		НСтр("ru = 'Идентификатор рекламного носителя пустой'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
		"РекламныйСервисКлиент.МакетРекламныйСервисНажатие");
	РекламныйСервисСлужебныйВызовСервера.МакетРекламныйСервисНажатие(ИдентификаторРекламы, Форма.ИмяФормы);
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьВидимостьЭлементаФормыПоЗаголовку(Форма, Знач Заголовок, Знач Значение)
	
	ЭлементФормы = РекламныйСервисСлужебныйКлиентСервер.НайтиЭлементФормы(Форма, Заголовок);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементФормы.Видимость = Значение;
	
КонецПроцедуры

// Заполнить изображение рекламы завершение.
// 
// Параметры:
//  Результат - Неопределено, Структура - структура со свойствами или Неопределено, если задание было отменено:
//     * Статус           - Строка - "Выполнено", если задание было успешно выполнено;
//	                                  "Ошибка", если задание завершено с ошибкой.
//     * АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//	                                  помещен (или уже помещен) результат работы процедуры.
//     * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//	                                     содержит адрес дополнительного временного хранилища,
//	                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//     * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//     * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//     * Сообщения        - ФиксированныйМассив из Строка
//	                      - Неопределено - массив объектов СообщениеПользователю, 
//                                         сформированных в процедуре-обработчике длительной операции.
//  ДополнительныеПараметры - Структура:
//   * Форма - ФормаКлиентскогоПриложения
//
Процедура ЗаполнитьИзображениеРекламыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата = Результат.АдресРезультата; // Строка
	
	// Проверка результата поиска.
	Если Не 
		(Результат.Статус = "Выполнено" 
		И ЗначениеЗаполнено(АдресРезультата) 
		И ЭтоАдресВременногоХранилища(АдресРезультата)) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	СписокПоказаннойРекламыФормы = НовыйСписокПоказаннойРекламыФормы();
	СписокПоказаннойРекламыФормы.ИмяФормы = Форма.ИмяФормы;
	
	ТекстHTML = РекламныйСервисСлужебныйВызовСервера.ПолучитьДанныеРезультатаЗафиксироватьПоказ(
		АдресРезультата, СписокПоказаннойРекламыФормы);
	
	Если Не ЗначениеЗаполнено(ТекстHTML) Тогда
		ИмяГруппыРекламныйСервис = РекламныйСервисСлужебныйКлиентСервер.ИмяГруппыРекламныйСервис();
		УстановитьВидимостьЭлементаФормыПоЗаголовку(Форма, ИмяГруппыРекламныйСервис, Ложь);
		Возврат;
	КонецЕсли;
	
	ИмяПоляHTMLДокумента = РекламныйСервисСлужебныйКлиентСервер.ИмяПоляHTMLДокумента();
	Форма[ИмяПоляHTMLДокумента] = ТекстHTML;
	
	ИмяРеквизитаПараметрРекламногоСервиса = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаПараметрРекламногоСервиса();
	ПараметрРекламногоСервиса = Форма[ИмяРеквизитаПараметрРекламногоСервиса]; // см. РекламныйСервис.НовыйПараметрРекламногоСервиса
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрРекламногоСервиса, "ФоновоеЗадание") Тогда
		
		ПараметрРекламногоСервиса.ФоновоеЗадание = Неопределено;
		
	КонецЕсли;
	
	ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия = 
		РекламныйСервисСлужебныйКлиентСервер.ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия();
	Форма[ИмяРеквизитаОбратногоОтсчетаКнопкиЗакрытия] = 10;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПоказатьКнопкуЗакрытьРекламу", 1, Ложь);
	
КонецПроцедуры

#КонецОбласти