#Область ПрограммныйИнтерфейс

// Подготавливает параметры печати чека и открывает форму ПечатьЧека
//
// Параметры:
//  <ДокументСсылка>  - <ДокументСсылка> - документ по которому печатается чек
//  <Форма>  - <УправляемаяФорма> - форма из которой вызывается команда печати чека
//  <ОписаниеОповещения>  - <ОписаниеОповещения> - описание оповещений после печати чека
//
Процедура НапечататьЧек(ДокументСсылка, Форма, ОписаниеОповещения) Экспорт
	ОчиститьСообщения();
	
	Результат           = НовыйРезультатПечатиЧека();
	ПараметрыПечатиЧека = НовыйПараметрыПечатиЧека();
	
	ПараметрыПечатиЧека.Вставить("Ссылка",                    ДокументСсылка);
	ПараметрыПечатиЧека.Вставить("Форма",                     Форма);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",        ОписаниеОповещения);
	
	Если ПроверитьВозможностьПечатиЧека(Форма) Тогда
		Если ПечатьФискальныхДокументовВызовСервера.ЧекПробитНаФискальномУстройстве(ДокументСсылка) Тогда
		
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Чек уже пробит на фискальном устройстве!'");
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
		ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ВыборФискальногоУстройстваЗавершение = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, ПараметрыПечатиЧека);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
			
			Если ПечатьФискальныхДокументовВызовСервера.ПоддерживаетсяПодключаемоеОборудование(ПоддерживаемыеТипыВО) Тогда
				МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ВыборФискальногоУстройстваЗавершение, ПоддерживаемыеТипыВО,
					НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
			КонецЕсли;
				
		Иначе
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			
			ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Вызывает метод групповой печати чеков
//
// Параметры:
//  <Форма>  - <УправляемаяФорма> - форма из которой вызывается команда печати чека
//  <ОписаниеОповещения>  - <ОписаниеОповещения> - описание оповещений после печати чека
//
Процедура НапечататьЧеки(Форма, ОписаниеОповещения) Экспорт
	
	ОчиститьСообщения();
	
	Объект = Форма.Объект;
	
	Результат           = НовыйРезультатПечатиЧека();
	ПараметрыПечатиЧека = НовыйПараметрыПечатиЧека();
	
	ПараметрыПечатиЧека.Вставить("Форма",                     Форма);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",        ОписаниеОповещения);
	ПараметрыОбработчика = Неопределено;
	Если ОписаниеОповещения.ДополнительныеПараметры.Свойство("ПараметрыОбработчика", ПараметрыОбработчика) Тогда
		ПараметрыПечатиЧека.Вставить("ПараметрыОбработчика", ПараметрыОбработчика);
	КонецЕсли;
	
	Если ПечатьФискальныхДокументовВызовСервера.ЧекиПробитыНаФискальномУстройстве(Объект.Ссылка, ПараметрыОбработчика) <> 0 Тогда
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Чеки уже пробиты на фискальном устройстве!'");
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	ИначеЕсли ПроверитьВозможностьПечатиЧеков(Форма, ПараметрыОбработчика) Тогда
			
			ПараметрыМетода= Новый Структура;
			ПараметрыМетода.Вставить("Ссылка",                  Объект.Ссылка);
			ПараметрыМетода.Вставить("ИдентификаторУстройства", "");
			ПараметрыМетода.Вставить("ВерсияФормата",           "1.0.5.0");
			ПараметрыМетода.Вставить("АдресУстановкиККТ",       "");
			ПараметрыМетода.Вставить("ПараметрыОбработчика",    ПараметрыОбработчика);
			
			ГрупповаяПечатьЧеков(ПараметрыМетода, Форма);
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ДанныеОбъекта контактными данными полученными из штрихкода
//
// Параметры:
//  <ДанныеОбъекта>  - <структура, Объект, УправляемаяФорма> 
//          - форма куда записываются разобранные значения
//  <Штрихкод>  - <Строка> - штрихкод содержащий контактные данные
//
Процедура ЗаполнитьКонтактнуюИнформациюПоШтрихкоду(ДанныеОбъекта, Знач Штрихкод) Экспорт
	Штрихкод = СокрЛП(Штрихкод);

	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Штрихкод) Тогда
		ДанныеОбъекта.АдресЭлектроннойПочты = Штрихкод;
		ДанныеОбъекта.ОтправлятьEmail       = Истина;
	Иначе
		ТелефонБезПрефикса = ?(Лев(Штрихкод, 1) = "+", Сред(Штрихкод, 2), Штрихкод);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТелефонБезПрефикса) 
			И ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(ТелефонБезПрефикса) Тогда
			
			ДанныеОбъекта.НомерТелефона = ТелефонБезПрефикса;
			ДанныеОбъекта.ОтправлятьSMS = Истина;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры 

// Приводит номер версии формата фискальных данных с произвольным числом разрядов 
// до стандартного представления версий вида X.X.X.X
// Параметры
//   Номер версии - Строка - строка вида X, X.X или X.X.X
// Результат
//   Строка формата - X.X.X.X
Функция ДополнитьНомерВерсииФФД(НомерВерсии) Экспорт
	Если НЕ ЗначениеЗаполнено(НомерВерсии) Тогда
		Возврат "1.0.0.0";
	ИначеЕсли НомерВерсии = "1.05" Тогда
		Возврат "1.0.5.0";
	КонецЕсли;
	
	НомерВерсииВМассив = СтрРазделить(НомерВерсии, ".");
	
	Для НомерРазряда = НомерВерсииВМассив.Количество() По 3 Цикл
		НомерВерсииВМассив.Добавить("0");
	КонецЦикла;
	
	Возврат СтрСоединить(НомерВерсииВМассив, ".");
КонецФункции

// Из номера версии ФД и ФН получает итоговый номер ФФД
//
// Параметры:
//  <ВерсияФН>  - <Строка> - Версия ФД ФН
//  <ВерсияККТ> - <Строка> - Версия ФД ККТ
//
// Возвращаемое значение:
//   <Структура>  
//     - <ВерсияККТ> - <Строка> - версия ФД ККТ
//     - <ВерсияФН> - <Строка> - версия ФД ФН
//     - <ВерсияККТ> - <Строка> - версия ФД для печати чека
//
Функция ВерсииФорматовФД(Знач ВерсияФН, Знач ВерсияККТ) Экспорт
	ВерсияККТ = ДополнитьНомерВерсииФФД(ВерсияККТ);
	ВерсияФН  = ДополнитьНомерВерсииФФД(ВерсияФН);
	
	// Определеляем максимальную версию ФФД поддерживаемую ФН
	ВерсияФН = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, "1.0.5.0") > 0, ВерсияФН, "1.0.5.0");
	
	// Итоговая версия определяется минимальной из версий поддерживаемых ФН и ККТ
	ВерсияФормата = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, ВерсияККТ) > 0, ВерсияККТ, ВерсияФН);
	
	СтруктураВерсий = Новый Структура;
	СтруктураВерсий.Вставить("ВерсияККТ", ВерсияККТ);
	СтруктураВерсий.Вставить("ВерсияФН",  ВерсияФН);
	СтруктураВерсий.Вставить("ВерсияФД",  ВерсияФормата);
	
	Возврат СтруктураВерсий;
КонецФункции

// Обработчик навигационной ссылки для открытия чеков
//
// Параметры:
//  <Форма>               - <УправляемаяФорма>
//  <НавигационнаяСсылка>  - <Строка>
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ПоказатьКассовыйЧек" Тогда
		КлючФискальнойОперации = ПечатьФискальныхДокументовВызовСервера.КлючФискальнойОперации(Форма.Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", Новый Структура("Ключ, НеПоказыватьБаннер", КлючФискальнойОперации));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция НовыйПараметрыПечатиЧека() Экспорт
	ПараметрыПечатиЧека = Новый Структура;
	
	ПараметрыПечатиЧека.Вставить("Форма",                    Неопределено);
	ПараметрыПечатиЧека.Вставить("ВерсияФормата",            "1.0.0.0");
	ПараметрыПечатиЧека.Вставить("ИдентификаторУстройства",  ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка"));
	ПараметрыПечатиЧека.Вставить("ТипУстройства",            Неопределено);
	ПараметрыПечатиЧека.Вставить("АдресУстановкиККТ",        Неопределено);
	ПараметрыПечатиЧека.Вставить("НомерСекции",              Неопределено);
	ПараметрыПечатиЧека.Вставить("ОписаниеОповещения",       Неопределено);
	ПараметрыПечатиЧека.Вставить("ПараметрыОплаты",          НовыйПараметрыОплаты());
	ПараметрыПечатиЧека.Вставить("ПараметрыОбработчика",     Новый Структура);
	ПараметрыПечатиЧека.Вставить("АдресХранилищаПечатьЧека", Новый УникальныйИдентификатор);
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

Функция НовыйРезультатПечатиЧека()
	Результат = Новый Структура;
	
	Результат.Вставить("Успешно",           Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("НомерЧекаККМ",      0);
	Результат.Вставить("ПараметрыОплаты",   НовыйПараметрыОплаты());
	
	Возврат Результат;
КонецФункции

Функция НовыйПараметрыОплаты()
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("СсылочныйНомер",      Неопределено);
	ПараметрыОплаты.Вставить("НомерПлатежнойКарты", Неопределено);
	ПараметрыОплаты.Вставить("НомерЧекаЭТ",         Неопределено);
	ПараметрыОплаты.Вставить("СуммаОперации",      0);
	
	Возврат ПараметрыОплаты;
КонецФункции

#КонецОбласти 

#Область ПечатьЧека

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧека(Форма)
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - сообщим пользователю, что печать не возможна.
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.")
		И (НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность) Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Операция возможна только после проведения документа'"));
		ПечататьЧек = Ложь;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;
КонецФункции 

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//	ПараметрыОбработчика - Структура
//     - поля структуры:
//        - ТипОбъекта            - Строка - имя типа объекта с телом обработчика
//        - ИмяОбъекта            - Строка - имя объекта с телом обработчика
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧеков(Форма, ПараметрыОбработчика = Неопределено)
	
	ПечататьЧек = ПроверитьВозможностьПечатиЧека(Форма);
	
	Если ПечататьЧек И ПараметрыОбработчика <> Неопределено Тогда
		
		ТекстПредупреждения = "";
		
		ОбъектСсылка = Форма.Объект.Ссылка;
		ПечатьФискальныхДокументовВызовСервера.ПроверитьВозможностьПечатиЧеков(ОбъектСсылка, ПараметрыОбработчика, ПечататьЧек, ТекстПредупреждения);
		
		Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение( , ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции

Процедура ВыборФискальногоУстройстваЗавершение(РезультатВыбораУстройства, ПараметрыПечатиЧека) Экспорт
	Если НЕ РезультатВыбораУстройства.Результат Тогда
		РезультатПечатиЧека = НовыйРезультатПечатиЧека();
		
		РезультатПечатиЧека.Успешно           = РезультатВыбораУстройства.Результат;
		РезультатПечатиЧека.СообщениеОбОшибке = РезультатВыбораУстройства.ОписаниеОшибки;
		
		ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, РезультатПечатиЧека);
		Возврат;
	КонецЕсли;
	
	ПараметрыПечатиЧека.Вставить("ИдентификаторУстройства", РезультатВыбораУстройства.ИдентификаторУстройства);
	
	ОписаниеОповешения = Новый ОписаниеОповещения("ПодключениеОборудованияЗавершение", ЭтотОбъект, ПараметрыПечатиЧека);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповешения, ПараметрыПечатиЧека.Форма.УникальныйИдентификатор, РезультатВыбораУстройства.ИдентификаторУстройства);
КонецПроцедуры

Процедура ПодключениеОборудованияЗавершение(РезультатПодключения, ПараметрыПечатиЧека) Экспорт
	Если НЕ РезультатПодключения.Результат Тогда
		РезультатПечатиЧека = НовыйРезультатПечатиЧека();
		
		РезультатПечатиЧека.Успешно           = РезультатПодключения.Результат;
		РезультатПечатиЧека.СообщениеОбОшибке = РезультатПодключения.ОписаниеОшибки;
		
		ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, РезультатПечатиЧека);
		Возврат;
	КонецЕсли;

	Форма  = ПараметрыПечатиЧека.Форма;
	
	РезультатПроверки = ПечатьФискальныхДокументовВызовСервера.ПроверитьНеобходимостьАктуализацииРасчетов(ПараметрыПечатиЧека.Ссылка, Форма.УникальныйИдентификатор);
	
	Если РезультатПроверки = Неопределено Тогда
		ВыполнитьАктуализациюРасчетовЗавершение(Новый Структура("Статус", "Выполнено"), ПараметрыПечатиЧека);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыПечатиЧека.Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьАктуализациюРасчетовЗавершение", ПечатьФискальныхДокументовКлиент, ПараметрыПечатиЧека);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПроверки.ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьАктуализациюРасчетовЗавершение(РезультатВыполненияОперации, ПараметрыПечатиЧека) Экспорт
	Если ТипЗнч(РезультатВыполненияОперации) <> Тип("Структура") 
		ИЛИ РезультатВыполненияОперации.Статус <> "Выполнено" Тогда
		
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		
		Если ТипЗнч(РезультатВыполненияОперации) = Тип("Структура") 
			И РезультатВыполненияОперации.Свойство("ПодробноеПредставлениеОшибки") Тогда
			
			Результат.СообщениеОбОшибке = РезультатВыполненияОперации.ПодробноеПредставлениеОшибки;
		Иначе
			Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось актуализировать расчеты.'");
		КонецЕсли; 
		
		ВыполнитьОбработкуОповещения(ПараметрыПечатиЧека.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ДанныеУстройства(ПараметрыПечатиЧека.ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	ПараметрыПечатиЧека.Вставить("ТипУстройства", ТипУстройства);
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, ПараметрыПечатиЧека);
		ДополнительныеПараметрыОперации = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеПараметровФискальногоУстройства(
			ОповещениеПриЗавершении, ПараметрыПечатиЧека.Форма.УникальныйИдентификатор, 
			ПараметрыПечатиЧека.ИдентификаторУстройства,,ДополнительныеПараметрыОперации);
			
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, ПараметрыПечатиЧека);
	КонецЕсли;
КонецПроцедуры 

Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		// Принтер чеков эмулирует все атрибуnы ФФД 1.1
		ВерсияФормата = ?(ДополнительныеПараметры.ТипУстройства = "ПринтерЧеков", "1.1.0.0", "1.0.0.0");
		ДополнительныеПараметры.ВерсияФормата = ВерсииФорматовФД(ВерсияФормата, ВерсияФормата);
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		Если НЕ ПечатьФискальныхДокументовВызовСервера.ОрганизацияККТСоотвествуетДокументу(ДополнительныеПараметры.Ссылка, ПараметрыФискальногоУстройства.ПараметрыККТ.ОрганизацияИНН) Тогда
			Результат = НовыйРезультатПечатиЧека();
			
			Результат.Успешно           = Ложь;
			Результат.СообщениеОбОшибке = НСтр("ru = 'ККТ зарегистрирована на организацию отличную от организации документа.'");
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.ВерсияФормата = ВерсииФорматовФД(ПараметрыФискальногоУстройства.ПараметрыККТ.ВерсияФФДФН, ПараметрыФискальногоУстройства.ПараметрыККТ.ВерсияФФДККТ);
		
		ПараметрыФискальногоУстройства.ПараметрыККТ.Свойство("АдресПроведенияРасчетов", ДополнительныеПараметры.АдресУстановкиККТ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаГотовностиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОписаниеОповещения, Форма.УникальныйИдентификатор, ДополнительныеПараметры.ИдентификаторУстройства);
		
		Возврат;
	КонецЕсли;
	
	ПроверкаГотовностиККТЗавершение(
		Новый Структура("Результат, ВыходныеПараметры, ОписаниеОшибки", НЕ ЗначениеЗаполнено(ОписаниеОшибки), Неопределено, ОписаниеОшибки), 
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаГотовностиККТЗавершение(РезультатПроверкиГотовности, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки, ВыходныеПараметры;
	
	Если РезультатПроверкиГотовности.Результат Тогда
		РезультатПроверкиГотовности.Свойство("ВыходныеПараметры", ВыходныеПараметры);
		
		СтатусПоследнейСмены = КассовыеСменыВызовСервера.СтатусПоследнейСмены(ДополнительныеПараметры.ИдентификаторУстройства);
		Если НЕ (СтатусПоследнейСмены.Открыта И СтатусПоследнейСмены.Активна) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Кассовая смена %1.'"), ?(СтатусПоследнейСмены.Открыта, "истекла", "не открыта"));
		КонецЕсли;
	Иначе
		ОписаниеОшибки = РезультатПроверкиГотовности.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = ТекстСообщения;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОборудованияДокумента = ПечатьФискальныхДокументовВызовСервера.ПодключаемоеОборудованиеДокумента(ДополнительныеПараметры.Ссылка);
	
	ДополнитьСтруктуру(ДополнительныеПараметры, ПараметрыОборудованияДокумента, 
		"ИдентификаторУстройстваЭТ, ЭтоВозврат, ЭтоЧекКоррекции");
	
	ДополнительныеПараметры.Вставить("ИдентификаторКорзины",       "");
	ДополнительныеПараметры.Вставить("СуммаСертификатамиНСПК",     0);
	
	// экв.терминал не используется
	Если НЕ ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) Тогда
		ОперацияПоПлатежнойКартеЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Форма  = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	ДополнительныеПараметры.Вставить("СуммаОперацииПлатежнаяКарта", Объект.СуммаДокумента);
	
	Если ВыходныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("НомерЧека", Формат(ВыходныеПараметры[1]+1 + 1, "ЧГ=0"));
	Иначе
		ДополнительныеПараметры.Вставить("НомерЧека", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина));
	КонецЕсли;
	
	// Для чека коррекции никаких операций с плат.оборудованием не делаем
	Если ДополнительныеПараметры.ЭтоЧекКоррекции Тогда
		ОткрытьФормуПечатьЧека(ДополнительныеПараметры);
		Возврат;
	КонецЕсли; 
	
	// Если плат.оборудование не поддерживает эл.сертификаты 491-ФЗ - переходим к оплате
	Если НЕ ПараметрыОборудованияДокумента.ЭлектронныеСертификатыНСПК Тогда
		ОперацияПоПлатежнойКарте(ДополнительныеПараметры);
		Возврат;
	КонецЕсли; 
	
	// поищем товары которые можно оплатить сертификатом
	СписокТоваровОплатаСертификатом = ЭлектронныеСертификатыНСПКБПВызовСервера.СписокТоваровОплатаСертификатом(ДополнительныеПараметры.Ссылка, 
		ДополнительныеПараметры.АдресХранилищаПечатьЧека, Форма.УникальныйИдентификатор, ОписаниеОшибки);
		
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подготовке параметров печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		Результат = НовыйРезультатПечатиЧека();
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = ТекстСообщения;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	// Товаров которые можно оплатить сертификатом нет - переходим к оплате
	Если СписокТоваровОплатаСертификатом.Количество() = 0 Тогда
		ОперацияПоПлатежнойКарте(ДополнительныеПараметры);
	Иначе
		ПроверитьОплатитьЭС(СписокТоваровОплатаСертификатом, ДополнительныеПараметры, ПараметрыОборудованияДокумента);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОплатитьЭС(СписокТоваровОплатаСертификатом, ДополнительныеПараметры, ПараметрыОборудованияДокумента)
	ДополнительныеПараметры.Вставить("ТоварныеПозиции", СписокТоваровОплатаСертификатом);
	
	Форма  = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	// Оповещение по окончанию всей проверки
	ОписаниеОповещенияПроверка = Новый ОписаниеОповещения("ОдобрениеПродажиВозвратаЭСНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОписаниеОповещенияПроверка);
	
	// Продажа по сертификату
	Если НЕ ДополнительныеПараметры.ЭтоВозврат Тогда
		ТекстВопроса = 
			НСтр("ru = 'Оплачиваемый документ содержит социально значимые товары, которые можно оплатить электронным сертификатом на карте МИР.'") 
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Для проверки возможности использования сертификата используйте карту МИР.'");
			
		СписокВариантов = Новый СписокЗначений;
		СписокВариантов.Добавить("ПроверитьСертификат", "Проверить сертификат");
		СписокВариантов.Добавить("БезСертификата",      "Продолжить без сертификата");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПроверкаСертификатаНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, СписокВариантов);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОборудованияДокумента.ИдентификаторКорзины) Тогда
		ПолучитьСоставКорзины(ПараметрыОборудованияДокумента.ИдентификаторКорзины, ДополнительныеПараметры);
	Иначе
		// Если продажа проводилась не в этой программе и BasketID в основании нет
		ПолучитьИдентификаторКорзины(ДополнительныеПараметры);
	КонецЕсли; 
КонецПроцедуры

Процедура ОперацияПоПлатежнойКарте(ПараметрыОперацииПоПлатежнойКарте)
	Форма  = ПараметрыОперацииПоПлатежнойКарте.Форма;
	
	Форма.Доступность = Ложь; // Блокировка интерфейса пользователя.

	ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ПараметрыОперацииПоПлатежнойКарте);
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	
	Объект = Форма.Объект;
	ПараметрыОплаты = ПараметрыОперацииПоПлатежнойКарте.ПараметрыОплаты;
	ПараметрыОплаты.Вставить("СуммаОперации", Объект.СуммаДокумента);
	
	ПараметрыОперации.ДокументОснование = ПараметрыОперацииПоПлатежнойКарте.Ссылка;
	ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
	Если ПараметрыОперацииПоПлатежнойКарте.СуммаСертификатамиНСПК > 0 Тогда
		ПараметрыОперации.ИдентификаторКорзины         = ПараметрыОперацииПоПлатежнойКарте.ИдентификаторКорзины;
		ПараметрыОперации.СуммаЭлектронногоСертификата = Мин(ПараметрыОперацииПоПлатежнойКарте.СуммаСертификатамиНСПК, Объект.СуммаДокумента);
		ПараметрыОперации.СуммаСобственныхСредств      = Объект.СуммаДокумента - ПараметрыОперации.СуммаЭлектронногоСертификата;
		
		ПараметрыОперации.ТипТранзакции  = "PayElectronicCertificate";
	КонецЕсли; 
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю") Тогда
		// Дата оплаты документа по которому происходит возврат (счет, реализация, оплата платежной картой)
		ПараметрыОплаты.Вставить("ДатаОплаты", Неопределено);
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ПечатьФискальныхДокументовВызовСервера.ЗаполнитьРеквизитыОперацииОснование(Объект.ДокументОснование, ПараметрыОплаты);
		КонецЕсли; 
		
		ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
		Если ПараметрыОперацииПоПлатежнойКарте.СуммаСертификатамиНСПК <> 0 Тогда
			ПараметрыОперации.ТипТранзакции  = "ReturnElectronicCertificate";
		ИначеЕсли ПараметрыОплаты.ДатаОплаты = Объект.Дата Тогда
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		КонецЕсли; 
		
		ПараметрыОперации.СсылочныйНомер = ПараметрыОплаты.СсылочныйНомер;
		ПараметрыОперации.НомерКарты     = ПараметрыОплаты.НомерПлатежнойКарты;
		ПараметрыОперации.НомерЧекаЭТ    = ПараметрыОплаты.НомерЧекаЭТ;
	КонецЕсли;
	
	ПараметрыОперации.СуммаОперации  = Объект.СуммаДокумента;
	ПараметрыОперации.НомерЧека      = ПараметрыОперацииПоПлатежнойКарте.НомерЧека;
	
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, Форма.УникальныйИдентификатор, 
		ПараметрыОперацииПоПлатежнойКарте.ИдентификаторУстройстваЭТ, ПараметрыОперации,,ПараметрыОперацииПоПлатежнойКарте.ИдентификаторУстройства);

КонецПроцедуры

Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Форма  = ДополнительныеПараметры.Форма;
	
	Форма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ПараметрыОплаты, РезультатВыполнения);
	
	Если РезультатВыполнения.Свойство("СуммаЭлектронногоСертификата") 
		И РезультатВыполнения.СуммаЭлектронногоСертификата > 0 Тогда
		
		ДополнительныеПараметры.ПараметрыОплаты.Вставить("ИдентификаторКорзины",   РезультатВыполнения.ИдентификаторКорзины);
		ДополнительныеПараметры.ПараметрыОплаты.Вставить("СуммаСертификатамиНСПК", РезультатВыполнения.СуммаЭлектронногоСертификата);
	КонецЕсли; 
	
	ОткрытьФормуПечатьЧека(ДополнительныеПараметры);
КонецПроцедуры

Процедура ОткрытьФормуПечатьЧека(ДополнительныеПараметры)
	// Печатаем фискальный чек
	Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		
		ДополнитьСтруктуру(ПараметрыФормы, ДополнительныеПараметры, 
			"Ссылка, ИдентификаторУстройства, ИдентификаторКорзины, СуммаСертификатамиНСПК, 
			|ВерсияФормата, АдресУстановкиККТ, ПараметрыОбработчика, АдресХранилищаПечатьЧека");
		
		Оповещение = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПечатьЧека.Форма.Форма", ПараметрыФормы, ДополнительныеПараметры.Форма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Результат = НовыйРезультатПечатиЧека();
	
	Форма  = ДополнительныеПараметры.Форма;
	
	Если РезультатВыполнения = Неопределено Тогда
		
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = НСТр("ru = 'Не удалось напечать чек'");
		
	ИначеЕсли РезультатВыполнения.Результат Тогда
		
		Результат.Успешно = Истина;
		
		Если НЕ РезультатВыполнения.Свойство("НомерЧекаККТ", Результат.НомерЧекаККМ) Тогда
			Результат.НомерЧекаККМ = "";
		КонецЕсли; 
		
		Результат.ПараметрыОплаты = ДополнительныеПараметры.ПараметрыОплаты;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
			
		Результат.Успешно           = Ложь;
		Результат.СообщениеОбОшибке = ТекстСообщения;
		
		// Откатим транзакцию по карте если что то пошло не так
		Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") 
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) Тогда
			
			ОтменаАвторизацииПараметры = Новый Структура;
			ОтменаАвторизацииПараметры .Вставить("Результат",         Результат);
			ОтменаАвторизацииПараметры .Вставить("ОписаниеОповещения", ДополнительныеПараметры.ОписаниеОповещения);
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОтменаАвторизацииЗавершение", ЭтотОбъект, ОтменаАвторизацииПараметры);
			
			ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерПлатежнойКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
			ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ПараметрыОплаты.СуммаДокумента;
			
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, Форма.УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ПараметрыОперации,,ДополнительныеПараметры.ИдентификаторУстройства);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если Результат.Успешно И ДополнительныеПараметры.СуммаСертификатамиНСПК > 0 Тогда
		ПередачаДанныхПослеПечатиЧекаЗавершение = Новый ОписаниеОповещения("ПередачаДанныхПослеПечатиЧекаЗавершение", ЭтотОбъект,
			Новый Структура("Результат, ОписаниеОповещения", Результат, ДополнительныеПараметры.ОписаниеОповещения));
		НачатьПередачуДанныхФискальногоЧека(ДополнительныеПараметры.Ссылка, 
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ, 
			ДополнительныеПараметры.ИдентификаторКорзины, ПередачаДанныхПослеПечатиЧекаЗавершение);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередачаДанныхПослеПечатиЧекаЗавершение(РезультатПередачиДанныхЧека, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатПередачиДанныхЧека.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПередачиДанныхЧека.ОписаниеОшибки+Символы.ПС+НСТр("ru = 'Вы можете повторить передачу чека  из меню ""Еще""'"));
	КонецЕсли;
	
	// Даже если чек передать не удалось, это можно сделать позже из "Еще" и успешного результата фискализации это не отменяет
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.Результат);
КонецПроцедуры


Процедура ОтменаАвторизацииЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции отмены авторизации произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.Результат);
КонецПроцедуры 

// Процедура завершает цикл проверки сертификата НСПК
Процедура ОдобрениеПродажиВозвратаЭСНСПКЗавершение(РезультатСогласования, ПараметрыОперацииПоПлатежнойКарте) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатСогласования, "ИдентификаторКорзины") <> Неопределено Тогда
		ДополнитьСтруктуру(ПараметрыОперацииПоПлатежнойКарте, РезультатСогласования, 
			"ИдентификаторКорзины,СуммаСертификатамиНСПК");
	КонецЕсли;
	
	ОперацияПоПлатежнойКарте(ПараметрыОперацииПоПлатежнойКарте);
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяПечатьЧеков

Процедура ГрупповаяПечатьЧеков(Параметры, Форма)

	ПараметрыФормированияЧека = НовыйПараметрыФормированияЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЧека, Параметры);
	
	ДлительнаяОперация = ПечатьФискальныхДокументовВызовСервера.ГрупповаяПечатьЧеков(ПараметрыФормированияЧека, Форма.УникальныйИдентификатор);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ГрупповаяПечатьЧеков", ЭтотОбъект, Параметры);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ГрупповаяПечатьЧеков(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация);
	Иначе
		ОжиданиеОтвета = Ложь;
		Если ОжиданиеОтвета Тогда
			ПодключитьОбработчикОжидания("ГрупповаяПечатьЧеков", 0.1, Истина);
		Иначе
			ПоказатьРезультатФормирвоанияГруппыЧеков(ДополнительныеПараметры.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыФормированияЧека()
	
	ПараметрыЧека = Новый Структура;
	ПараметрыЧека.Вставить("Ссылка");
	ПараметрыЧека.Вставить("ИдентификаторУстройства");
	ПараметрыЧека.Вставить("ВерсияФормата");
	ПараметрыЧека.Вставить("АдресУстановкиККТ");
	ПараметрыЧека.Вставить("ПараметрыОбработчика");
	
	Возврат ПараметрыЧека;
	
КонецФункции

Процедура ПоказатьОшибкуФормированияГруппыЧеков(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при подготовке группы чеков:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

Процедура ПоказатьРезультатФормирвоанияГруппыЧеков(ОбъектСсылка)
	
	ЗначенияОтборов = Новый Структура("ДокументОснование",ОбъектСсылка);
	ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
	
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка",
		ПараметрыФормы,
		,
		ОбъектСсылка,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры


#КонецОбласти

#Область ЭлектронныеСертификатыФЗ491

Процедура ДополнитьСтруктуру(Приемник, Источник, СписокСвойств)
	ЗначенияСвойств = Новый Структура(СписокСвойств);
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Источник, СписокСвойств);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Приемник, ЗначенияСвойств, Истина);
КонецПроцедуры

// Процедура окончания проверки
// Значение - Строка - вариант проверки сертификата
// ДополнительныеПараметры - структура - 
// - ИдентификаторУстройстваЭТ - идентификатор устройства к которому прикладывается карта
// - ТоварныеПозиции - список товаров для продажи (возврата)
// - ИдентификаторКорзины - для возврата - идентификатор корзины по которой производилась продажа. Можно не указывать
// - ЭтоВозврат - Булево
// - Форма  -  форма из которой производится проверка
// - ОповещениеПриЗавершении - оповещение при ершении процедуры проверки
Процедура ВопросПроверкаСертификатаНСПКЗавершение(Значение, ДополнительныеПараметры) Экспорт
	Если Значение = "ПроверитьСертификат" Тогда
		ПараметрыОперацииНСПК = ЭлектронныеСертификатыНСПКБПВызовСервера.ПараметрыОперацииНСПКПоКассеККМ(
			ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
			
		ПараметрыОперацииНСПК.ТоварныеПозиции = ДополнительныеПараметры.ТоварныеПозиции;
			
		ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперацииНСПК);
		ДополнительныеПараметры.Вставить("СледующаяОперация", "ПредварительноеОдобрениеИспользования");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПараметрыКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(
			ОписаниеОповещения, ДополнительныеПараметры.Форма.УникальныйИдентификатор, ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	КонецЕсли; 
КонецПроцедуры

Процедура ПолучитьИдентификаторКорзины(ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура("Ссылка, ИдентификаторУстройстваЭТ");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьИдентификаторКорзиныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВозвратСертификатыНСПК", 
		ПараметрыФормы, ДополнительныеПараметры.Форма, , , ,ОповещениеОЗавершении,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ПолучитьИдентификаторКорзиныЗавершение(ИдентификаторКорзины, ДополнительныеПараметры) Экспорт
	// Отказ ввода идентификатора корзины, делаем возврат без сертификата
	Если НЕ ЗначениеЗаполнено(ИдентификаторКорзины) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	ПолучитьСоставКорзины(ИдентификаторКорзины, ДополнительныеПараметры, Истина);
КонецПроцедуры

Процедура ПолучитьСоставКорзины(ИдентификаторКорзины, ДополнительныеПараметры, РучнойВводИдКорзины = Ложь) Экспорт

	ПараметрыОперацииНСПК = ЭлектронныеСертификатыНСПКБПВызовСервера.ПараметрыОперацииНСПКПоКассеККМ(
		ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ИдентификаторКорзины);
		
	ПараметрыОперацииНСПК.Вставить("ТоварныеПозиции",         ДополнительныеПараметры.ТоварныеПозиции);
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПараметрыОперации",         ПараметрыОперацииНСПК);
	ПараметрыОповещения.Вставить("ТоварныеПозиции",           ДополнительныеПараметры.ТоварныеПозиции);
	ПараметрыОповещения.Вставить("Форма",                     ДополнительныеПараметры.Форма);
	ПараметрыОповещения.Вставить("ИдентификаторУстройстваЭТ", ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
	ПараметрыОповещения.Вставить("ОповещениеПриЗавершении",   ДополнительныеПараметры.ОповещениеПриЗавершении);
	ПараметрыОповещения.Вставить("РучнойВводИдКорзины",       РучнойВводИдКорзины);
	ПараметрыОповещения.Вставить("СледующаяОперация",         "ПредварительноеОдобрениеВозврата");
		
	ПолучениеСоставаКорзиныЗавершение = Новый ОписаниеОповещения("ПолучениеСоставаКорзиныЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСоставаКорзины(ПолучениеСоставаКорзиныЗавершение, ПараметрыОперацииНСПК);

КонецПроцедуры

// Завершение операции получения состава корзины
// РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
Процедура ПолучениеСоставаКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ПредварительноеОдобрениеЗавершение(РезультатВыполнения, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	СуммаВозврата = 0;
	ПозицииДляВозврата = Новый Массив;
	Для каждого ТоварнаяПозицияПокупки Из РезультатВыполнения.ТоварныеПозиции Цикл
		Для каждого ТоварнаяПозицияВозврата Из ДополнительныеПараметры.ТоварныеПозиции Цикл
			Если СокрЛП(ТоварнаяПозицияПокупки.КодТовараТРУ) = СокрЛП(ТоварнаяПозицияВозврата.КодТовараТРУ) 
				И ТоварнаяПозицияПокупки.Цена = ТоварнаяПозицияВозврата.Цена 
				И ТоварнаяПозицияВозврата.Количество > 0 Тогда
				
				Для каждого Сертификат Из ТоварнаяПозицияПокупки.Сертификаты Цикл
					// Позиция возвращена ранее (в другом чеке)
					Если Сертификат.Количество = 0 Тогда
						Продолжить;
					КонецЕсли; 
				
					ПозицияДляВозврата = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции();
					
					ЗаполнитьЗначенияСвойств(ПозицияДляВозврата, ТоварнаяПозицияПокупки,,"Сертификаты");
					
					// Порядковый номер позиции в корзине возврата начиная с 1
					ПозицияДляВозврата.НомерПозиции = ПозицииДляВозврата.Количество() + 1;
					
					// Порядковый номер позиции в корзине покупки, которая содержит возвращаемый товар
					ПозицияДляВозврата.НомерПозицииВозврата = ТоварнаяПозицияПокупки.НомерПозиции;
					
					ПозицияДляВозврата.Количество           = Мин(Сертификат.Количество, ТоварнаяПозицияВозврата.Количество);
					
					Сертификат.Количество           = Сертификат.Количество - ПозицияДляВозврата.Количество;
					ТоварнаяПозицияВозврата.Количество  = ТоварнаяПозицияВозврата.Количество - ПозицияДляВозврата.Количество;
					
					СуммаВозврата = СуммаВозврата + ПозицияДляВозврата.Количество*ПозицияДляВозврата.Цена;
					ПозицииДляВозврата.Добавить(ПозицияДляВозврата);
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПозицииДляВозврата.Количество() > 0 Тогда 
		ДополнительныеПараметры.ПараметрыОперации.ТоварныеПозиции = ПозицииДляВозврата;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПараметрыКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, ДополнительныеПараметры.Форма.УникальныйИдентификатор, 
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "РучнойВводИдКорзины") = ИСТИНА Тогда
		СписокЗначенийВОпрос = Новый СписокЗначений;
		
		СписокЗначенийВОпрос.Добавить("Повторить",  НСтр("ru = 'Другой чек'"));
		СписокЗначенийВОпрос.Добавить("Продолжить", НСтр("ru = 'Без сертификата'"));
		СписокЗначенийВОпрос.Добавить("Отмена",     НСтр("ru = 'Отмена'"));
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПозицииДляВозвратаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОповещениеВопрос, НСтр("ru = 'Отсканированный чек не содержит возвращаемых товаров, либо цена возврата отличается от цены продажи.'")
			+Символы.ПС+НСтр("ru = 'Попробуйте другой чек или продолжите возврат без сертификата.'"), СписокЗначенийВОпрос);
	Иначе
		// Товар был продан по сертификату, но сейчас доступных к возврату сумм нет
		СписокЗначенийВОпрос = Новый СписокЗначений;
		
		СписокЗначенийВОпрос.Добавить("Продолжить", НСтр("ru = 'Вернуть на карту'"));
		СписокЗначенийВОпрос.Добавить("Отмена",     НСтр("ru = 'Отмена'"));
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПозицииДляВозвратаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		СообщениеПользователю = НСтр("ru = 'Использованные при продаже сертификаты недоступны к возврату. 
								|Возможно, они уже были возвращены ранее.'");
		ЭлектронныеСертификатыНСПКБПВызовСервера.ЗаписьЖурналаРегистрацииЭСНСПК("Информация", 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры.ПараметрыОперации,"ОснованиеФискальнойОперации"), СообщениеПользователю);

		ПоказатьВопрос(ОповещениеВопрос, СообщениеПользователю + Символы.ПС + Символы.ПС +НСтр("ru = 'Продолжить без сертификата и вернуть всю сумму на карту?'"), СписокЗначенийВОпрос);
	КонецЕсли; 
КонецПроцедуры

Процедура ПолучитьПараметрыКартыЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	// Отказ приложить карту - прерываем операцию
 	Если НЕ РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПредварительноеОдобрениеЗавершение", ЭтотОбъект, 
		Новый Структура("ОповещениеПриЗавершении", ДополнительныеПараметры.ОповещениеПриЗавершении));
		
	// Дополним параметры операции НСПК номером карты и ссылкой PAN
	ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
	ДополнитьСтруктуру(ПараметрыОперации, РезультатВыполнения, "ХешНомерКарты, СсылкаНаПлатежныйСчет");
	
	Если ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеИспользования" Тогда
		ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеИспользования(ОповещениеПриЗавершении, ПараметрыОперации);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ИдентификаторКорзины") <> Неопределено Тогда
		ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеВозврата(ОповещениеПриЗавершении, ПараметрыОперации);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВопросПозицииДляВозвратаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = "Продолжить" Тогда
		Результат = Новый Структура("ИдентификаторКорзины,СуммаСертификатамиНСПК", "", 0);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	ИначеЕсли Результат = "Повторить" Тогда
		ПолучитьИдентификаторКорзины(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура ПредварительноеОдобрениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	// Нет связи с НСПК, возврат не одобрен - прерываем операцию
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		
		Возврат;
	КонецЕсли; 
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИдентификаторКорзины",             Неопределено);
	РезультатПроверки.Вставить("СуммаСертификатамиНСПК",           0);
	
	Если РезультатВыполнения.Свойство("ИдентификаторКорзины") 
		И НЕ ПустаяСтрока(РезультатВыполнения.ИдентификаторКорзины) Тогда
		РезультатПроверки.ИдентификаторКорзины = РезультатВыполнения.ИдентификаторКорзины;
	КонецЕсли;
	Если РезультатВыполнения.Свойство("СуммаСертификатами") Тогда
		РезультатПроверки.СуммаСертификатамиНСПК = РезультатВыполнения.СуммаСертификатами;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатПроверки);
КонецПроцедуры

// Передает данные о пробитом чеке, содержащем оплату сертификатом, в НСПК
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ из которого пробивается чек, который необходимо отправить для подтверждения операции с ЭС НСПК;
//  ИдентификаторУстройстваЭТ - СправочникСсылка.ПодключаемоеОборудование - ссылка на эксземпляр ЭТ через который происходит запрос к НСПК
//  ИдентификаторКорзины - Строка - идентификатор корзины операции ЭС НСПК;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции ЭС НСПК.
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура - содержит:
//  **Результат - Булево;
//  **КодРезультата - Число;
//  **ОписаниеОшибки - Строка.
//
Процедура НачатьПередачуДанныхФискальногоЧека(ДокументСсылка, ИдентификаторУстройстваЭТ, ИдентификаторКорзины = "", ОповещениеПриЗавершении) Экспорт
	Перем ОписаниеОшибки;
	
	РезультатВыполнения = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПКБПВызовСервера.ПараметрыОперацииНСПКПередачаФискальныхДанных(
		ДокументСсылка, ИдентификаторУстройстваЭТ, ИдентификаторКорзины, ОписаниеОшибки);
	Если ПараметрыОперации = Неопределено Тогда
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли; 
	
	ПередачаДанныхФискальногоЧекаЗавершение = Новый ОписаниеОповещения("ПередачаДанныхФискальногоЧекаЗавершение", ЭтотОбъект, 
		Новый Структура("Ссылка, ИдентификаторКорзины, ОповещениеПриЗавершении", ДокументСсылка, ПараметрыОперации.ИдентификаторКорзины,  ОповещениеПриЗавершении));
	
	ЭлектронныеСертификатыНСПККлиент.НачатьПередачуДанныхФискальногоЧека(ПередачаДанныхФискальногоЧекаЗавершение , ПараметрыОперации);
КонецПроцедуры

Процедура ПередачаДанныхФискальногоЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	РезультатВыполнения = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	
	ЗаполнитьЗначенияСвойств(РезультатВыполнения, Результат);
	
	Если РезультатВыполнения.Результат Тогда
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'Подтверждение операции %1 успешно отправлено на сервер НСПК'"),
			ДополнительныеПараметры.ИдентификаторКорзины);
		УровеньЖурнала = "Информация";
	Иначе
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3'"),
			ДополнительныеПараметры.ИдентификаторКорзины,
			Строка(РезультатВыполнения.КодРезультата),
			РезультатВыполнения.ОписаниеОшибки);
		УровеньЖурнала = "Ошибка";
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ОписаниеОшибки", СообщениеПользователю);
	
	ЭлектронныеСертификатыНСПКБПВызовСервера.ЗаписьЖурналаРегистрацииЭСНСПК(УровеньЖурнала, ДополнительныеПараметры.Ссылка, СообщениеПользователю);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
