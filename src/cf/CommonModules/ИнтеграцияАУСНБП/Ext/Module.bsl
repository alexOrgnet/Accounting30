#Область СлужебныйПрограммныйИнтерфейс

Функция НайтиПоИдентификаторуАУСН(Выписки) Экспорт
	
	ИспользуемыеИдентификаторы = Новый Массив;
	Для Каждого Выписка Из Выписки Цикл
		Для Каждого Операция Из Выписка.Значение.Операции Цикл
			Если ЗначениеЗаполнено(Операция.ИдентификаторАУСН) Тогда
				ИспользуемыеИдентификаторы.Добавить(Операция.ИдентификаторАУСН);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Идентификатор В (&ИдентификаторыАУСН)";
	
	Запрос.УстановитьПараметр("ИдентификаторыАУСН", ИспользуемыеИдентификаторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НайденныеДокументы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НайденныеДокументы.Вставить(Выборка.Идентификатор, Выборка.Документ);
	КонецЦикла;
	
	Возврат НайденныеДокументы;
	
КонецФункции

Процедура ЗаполнитьДокументыАУСН(РаспознаннаяВыписка, Выписка, ДокументыАУСН) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументыАУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Операция Из Выписка.Операции Цикл
		Если ЗначениеЗаполнено(Операция.ИдентификаторАУСН) Тогда
			НайденныйДокумент = ДокументыАУСН.Получить(Операция.ИдентификаторАУСН);
			Если НайденныйДокумент <> Неопределено Тогда
				РаспознаннаяОперация = ЗагрузкаВыпискиПоБанковскомуСчету.НайтиПоИдентификатору(
					РаспознаннаяВыписка.Операции, Операция.Идентификатор);
				РаспознаннаяОперация.Ссылка = НайденныйДокумент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПолученныеБанковскиеВыписки(Документ, ДанныеДокумента, ДополнительныеПараметры) Экспорт
	
	БанковскиеДокументы = ЗагрузкаВыпискиПоБанковскомуСчету.ЗагрузитьВыпискуИзСервисаАУСН(
		Документ, ДанныеДокумента, ДополнительныеПараметры);
	Если БанковскиеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеВФорматеСервиса = БанковскиеДокументы.ДанныеВФорматеСервиса;
	БанковскиеОперации = БанковскиеДокументы.СозданныеДокументы.ВыгрузитьКолонку("Ссылка");
	НеобходимостьОтправкиРазметкиВБанк = ОтправлятьРазметкуАУСНВБанк(
		Документ.Тип, БанковскиеОперации, Документ.Организация);
	Для Каждого СтрокаДокумента Из БанковскиеДокументы.СозданныеДокументы Цикл
		ИдентификаторАУСН = СтрокаДокумента.ИдентификаторАУСН;
		ОтправитьВБанк = СтрокаДокумента.Успешно;
		Если ОтправитьВБанк И НеобходимостьОтправкиРазметкиВБанк <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура("Ссылка", СтрокаДокумента.Ссылка);
			ДанныеОтправки = НеобходимостьОтправкиРазметкиВБанк.НайтиСтроки(ПараметрыПоиска);
			Если ДанныеОтправки.Количество() > 0 Тогда
				ОтправитьВБанк = ДанныеОтправки[0].ОтправитьВБанк;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.БанковскиеДокументыАУСН.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Документ.Организация;
		МенеджерЗаписи.Документ = СтрокаДокумента.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Организация = Документ.Организация;
			МенеджерЗаписи.Документ = СтрокаДокумента.Ссылка;
		КонецЕсли;
		МенеджерЗаписи.Идентификатор = ИдентификаторАУСН;
		МенеджерЗаписи.ОтправитьВБанк = ОтправитьВБанк;
		МенеджерЗаписи.ИдентификаторПолучателя = БанковскиеДокументы.ИдентификаторПолучателя;
		МенеджерЗаписи.ДанныеВФорматеСервиса = Новый ХранилищеЗначения(ДанныеВФорматеСервиса[ИдентификаторАУСН]);
		МенеджерЗаписи.Записать();
	КонецЦикла; 
	ОбработатьОтветНаОтправленныеБанковскиеВыписки(Документ, ДанныеДокумента, ДополнительныеПараметры.ОписаниеОшибок);
	
	Если Не ДополнительныеПараметры.Свойство("БанковскиеВыписки") Тогда
		ДополнительныеПараметры.Вставить("БанковскиеВыписки", Новый Массив);
	КонецЕсли;
	
	БанкПоКлассификатору = БанковскиеДокументы.Банк;
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанкПоКлассификатору, "Код");
	Банк = РаботаСБанкамиБП.НайтиБанк(БИК);
	
	Выписка = Новый Структура;
	Выписка.Вставить("ДатаНачала", БанковскиеДокументы.ДатаНачала);
	Выписка.Вставить("ДатаОкончания", БанковскиеДокументы.ДатаОкончания);
	Выписка.Вставить("Организация", Документ.Организация);
	Выписка.Вставить("Банк", Банк);
	Выписка.Вставить("БанкПоКлассификатору", БанкПоКлассификатору);
	Выписка.Вставить("ИдентификаторБанка", Документ.ИдентификаторБанка);
	Выписка.Вставить("ЗагруженоДокументов", БанковскиеДокументы.СозданныеДокументы.Количество());

	ДополнительныеПараметры.БанковскиеВыписки.Добавить(Выписка);
	
КонецПроцедуры

Функция НастройкиИнтеграции(ВключенОтборОрганизация, ОтборОрганизация, ВключенОтборСчет = Ложь, ОтборСчет = Неопределено) Экспорт
	
	Настройки = НовыйНастройкиИнтеграции();
	Если ВключенОтборОрганизация Тогда
		Настройки.Организация = ОтборОрганизация;
	КонецЕсли;
	Если ВключенОтборСчет И ЗначениеЗаполнено(ОтборСчет) Тогда
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборСчет, "Банк.Код");
		Настройки.Банк = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
	КонецЕсли;
	Возврат Настройки;
	
КонецФункции

// Отключает автоматический обмен с ДиректБанком при подключении к сервису АУСН
//
// Параметры:
//  Записи - РегистрСведенийНаборЗаписей.СостоянияИнтеграцииАУСН
//
Процедура ОтключитьАвтообменДиректБанк(Записи) Экспорт
	
	ОтключаемыеЗначения = Новый ТаблицаЗначений;
	ОтключаемыеЗначения.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ОтключаемыеЗначения.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	
	СостояниеПодключено = Перечисления.СостоянияИнтеграцииАУСН.Подключено;
	
	Для Каждого Запись Из Записи Цикл
		Если Запись.Состояние = СостояниеПодключено Тогда
			Строка = ОтключаемыеЗначения.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Запись);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтключаемыеЗначения.Организация КАК Организация,
		|	ОтключаемыеЗначения.Банк КАК Банк
		|ПОМЕСТИТЬ ВТ_ОтключаемыеЗначения
		|ИЗ
		|	&ОтключаемыеЗначения КАК ОтключаемыеЗначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НастройкиОбмена
		|ИЗ
		|	ВТ_ОтключаемыеЗначения КАК ВТ_ОтключаемыеЗначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО ВТ_ОтключаемыеЗначения.Организация = НастройкиОбменСБанками.Организация
		|			И ВТ_ОтключаемыеЗначения.Банк.Код = НастройкиОбменСБанками.Банк.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
		|ИЗ
		|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
		|ГДЕ
		|	ПараметрыОбменСБанками.НастройкаОбмена В
		|			(ВЫБРАТЬ
		|				ВТ_НастройкиОбмена.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена)
		|	И ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки";
	
	Запрос.УстановитьПараметр("ОтключаемыеЗначения", ОтключаемыеЗначения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(Выборка.НастройкаОбмена);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.АвтоматическоеПолучениеВыписки = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьОтправкуВБанк(БанковскиеОперации, ОтправитьВБанк) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскиеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор,
		|	БанковскиеДокументыАУСН.ОтправитьВБанк КАК ОтправитьВБанк
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ В(&Документы)
		|	И БанковскиеДокументыАУСН.ОтправитьВБанк <> &ОтправитьВБанк";
	
	Запрос.УстановитьПараметр("Документы", БанковскиеОперации);
	Запрос.УстановитьПараметр("ОтправитьВБанк", ОтправитьВБанк);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.БанковскиеДокументыАУСН.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Выборка);
		Менеджер.Прочитать();
		Менеджер.ОтправитьВБанк = ОтправитьВБанк;
		Если Не ЗначениеЗаполнено(Менеджер.СтатусОбменаАУСН) Тогда
			Менеджер.СтатусОбменаАУСН = Перечисления.СтатусыОбменаАУСН.Отправлен;
		КонецЕсли;
		Менеджер.ДатаОбмена = ТекущаяДата();
		Менеджер.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйНастройкиИнтеграции()
	
	Настройки = Новый Структура;
	Настройки.Вставить("Организация", Неопределено);
	Настройки.Вставить("Банк", Неопределено);
	
	Возврат Настройки;
	
КонецФункции

Функция ОтправлятьРазметкуАУСНВБанк(ТипДокумента, БанковскиеОперации, Организация)
	
	Если Не Перечисления.ТипыДокументовАУСН.ЭтоДокументБанковскойВыпискиСРазметкой(ТипДокумента)
		Или БанковскиеОперации.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим, нужно ли отправлять разметку в банк, если загружена разметка из банка.
	// Для этого по каждой банковской операции сравниваем движения регистра РазметкаАУСН
	// с загруженной табличной частью РазметкаАУСНБанка.
	// Если в банковской операции Порядок расчета АУСН = "По данным банка", то получаем только те движения,
	// которые сформировались в результате проведения самой банковской операции или при ручной корректировке.
	// При этом, движения "По данным банка" в общем случае будут совпадать, за исключением, возможно,
	// случаев, когда в документе установлена "Ручная корректировка".
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка", Метаданные.РегистрыНакопления.РазметкаАУСН.Измерения.БанковскаяОперация.Тип);
	Результат.Колонки.Добавить("ОтправитьВБанк", Новый ОписаниеТипов("Булево"));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазметкаАУСНОбороты.БанковскаяОперация КАК БанковскаяОперация,
	|	РазметкаАУСНОбороты.ПризнакНалоговойБазы КАК ПризнакНалоговойБазы,
	|	РазметкаАУСНОбороты.КатегорияОперации КАК КатегорияОперации,
	|	РазметкаАУСНОбороты.СуммаОборот КАК СуммаОборот,
	|	РазметкаАУСНОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаОборот
	|ПОМЕСТИТЬ РазметкаАУСН
	|ИЗ
	|	РегистрНакопления.РазметкаАУСН.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И БанковскаяОперация В (&БанковскиеОперации)) КАК РазметкаАУСНОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазметкаАУСНБанка.Ссылка КАК Ссылка,
	|	РазметкаАУСНБанка.ПризнакНалоговойБазы КАК ПризнакНалоговойБазы,
	|	РазметкаАУСНБанка.КатегорияОперации КАК КатегорияОперации,
	|	РазметкаАУСНБанка.Сумма КАК Сумма,
	|	РазметкаАУСНБанка.ВалютнаяСумма КАК ВалютнаяСумма
	|ПОМЕСТИТЬ РазметкаАУСНБанка
	|ИЗ
	|	(ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО КАК Ссылка,
	|		ЗНАЧЕНИЕ(Перечисление.ПризнакиНалоговойБазыАУСН.ПустаяСсылка) КАК ПризнакНалоговойБазы,
	|		ЗНАЧЕНИЕ(Перечисление.КатегорииОперацийАУСН.ПустаяСсылка) КАК КатегорияОперации,
	|		0 КАК Сумма,
	|		0 КАК ВалютнаяСумма
	|	ГДЕ
	|		ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.Ссылка,
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.ПризнакНалоговойБазы,
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.КатегорияОперации,
	|		СУММА(ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.Сумма),
	|		СУММА(ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.ВалютнаяСумма)
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет.РазметкаАУСНБанка КАК ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.Ссылка В(&БанковскиеОперацииПоступление)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.ПризнакНалоговойБазы,
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.КатегорияОперации,
	|		ПоступлениеНаРасчетныйСчетРазметкаАУСНБанка.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.Ссылка,
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.ПризнакНалоговойБазы,
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.КатегорияОперации,
	|		СУММА(СписаниеСРасчетногоСчетаРазметкаАУСНБанка.Сумма),
	|		СУММА(СписаниеСРасчетногоСчетаРазметкаАУСНБанка.ВалютнаяСумма)
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета.РазметкаАУСНБанка КАК СписаниеСРасчетногоСчетаРазметкаАУСНБанка
	|	ГДЕ
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.Ссылка В(&БанковскиеОперацииСписание)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.ПризнакНалоговойБазы,
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.КатегорияОперации,
	|		СписаниеСРасчетногоСчетаРазметкаАУСНБанка.Ссылка) КАК РазметкаАУСНБанка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РазметкаАУСН.БанковскаяОперация, РазметкаАУСНБанка.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РазметкаАУСН.СуммаОборот ЕСТЬ NULL
	|					ИЛИ РазметкаАУСНБанка.Сумма ЕСТЬ NULL
	|					ИЛИ ЕСТЬNULL(РазметкаАУСН.СуммаОборот, 0) <> ЕСТЬNULL(РазметкаАУСНБанка.Сумма, 0)
	|					ИЛИ ЕСТЬNULL(РазметкаАУСН.ВалютнаяСуммаОборот, 0) <> ЕСТЬNULL(РазметкаАУСНБанка.ВалютнаяСумма, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОтправитьВБанк
	|ИЗ
	|	РазметкаАУСН КАК РазметкаАУСН
	|		ПОЛНОЕ СОЕДИНЕНИЕ РазметкаАУСНБанка КАК РазметкаАУСНБанка
	|		ПО РазметкаАУСН.ПризнакНалоговойБазы = РазметкаАУСНБанка.ПризнакНалоговойБазы
	|			И РазметкаАУСН.КатегорияОперации = РазметкаАУСНБанка.КатегорияОперации
	|			И РазметкаАУСН.БанковскаяОперация = РазметкаАУСНБанка.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(РазметкаАУСН.БанковскаяОперация, РазметкаАУСНБанка.Ссылка)";
	
	ПараметрыОпераций = РазложитьОперацииПоИсточникамРазметки(БанковскиеОперации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Для Каждого ТекущиеПараметры Из ПараметрыОпераций Цикл
		
		ВсеОперации = ТекущиеПараметры.Значение.Все;
		Если ВсеОперации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		Если ТекущиеПараметры.Ключ = "ПоРегистратору" Тогда
			
			ТаблицаРазметкаАУСНОбороты = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, "РазметкаАУСНОбороты");
			ТаблицаРазметкаАУСНОбороты.Таблица.Параметры[2].Выражение = Новый ВыражениеСхемыЗапроса("Регистратор");
			УсловиеПоРегистратору = 
			"(РазметкаАУСНОбороты.Регистратор = РазметкаАУСНОбороты.БанковскаяОперация
			|			ИЛИ ВЫБОР
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.ПоступлениеДопРасходов).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.ПоступлениеНаРасчетныйСчет).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНМА
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.ПоступлениеНМА).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.РеализацияОтгруженныхТоваров).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).РучнаяКорректировка
			|				КОГДА РазметкаАУСНОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|					ТОГДА ВЫРАЗИТЬ(РазметкаАУСНОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).РучнаяКорректировка
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)";
			ОтборПоРегистратору = Новый ВыражениеСхемыЗапроса(УсловиеПоРегистратору);
			ТаблицаРазметкаАУСНОбороты.Оператор.Отбор.Добавить(ОтборПоРегистратору);
		КонецЕсли;
		
		ВложенныйЗапросРазметкаАУСНБанка = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Источники[0].Источник.Запрос;
		
		ОперацииПоступления = ТекущиеПараметры.Значение.Поступления;
		ОперацииСписания = ТекущиеПараметры.Значение.Списания;
		
		ЕстьСписания = ОперацииСписания.Количество() > 0;
		ЕстьПоступления = ОперацииПоступления.Количество() > 0;
		
		Если Не ЕстьСписания Тогда
			ВложенныйЗапросРазметкаАУСНБанка.Операторы.Удалить(2);
		КонецЕсли;
		Если Не ЕстьПоступления Тогда
			ВложенныйЗапросРазметкаАУСНБанка.Операторы.Удалить(1);
		КонецЕсли;
		Если ЕстьСписания Или ЕстьПоступления Тогда
			ВложенныйЗапросРазметкаАУСНБанка.Операторы.Удалить(0);
		КонецЕсли;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
		Запрос.УстановитьПараметр("БанковскиеОперации", ВсеОперации);
		Запрос.УстановитьПараметр("БанковскиеОперацииПоступление", ОперацииПоступления);
		Запрос.УстановитьПараметр("БанковскиеОперацииСписание", ОперацииСписания);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаРезультата = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьОперацииПоИсточникамРазметки(БанковскиеОперации)
	
	ИсточникРазметкиОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(БанковскиеОперации, "ИсточникРазметкиАУСН");
	
	Результат = Новый Структура;
	Результат.Вставить("ПоРегистратору", НовыеПараметрыОперацийПоИсточникамРазметки());
	Результат.Вставить("ПоОперации", НовыеПараметрыОперацийПоИсточникамРазметки());
	
	ТипПоступления = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет");
	ТипСписания = Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
	
	Для Каждого ТекущийИсточникРазметки Из ИсточникРазметкиОпераций Цикл
		Если ТекущийИсточникРазметки.Значение = Перечисления.ИсточникиРазметкиАУСН.Банк Тогда
			ТекущиеПараметры = Результат.ПоРегистратору;
		Иначе
			ТекущиеПараметры = Результат.ПоОперации;
		КонецЕсли;
		ТекущиеПараметры.Все.Добавить(ТекущийИсточникРазметки.Ключ);
		
		ТипДокумента = ТипЗнч(ТекущийИсточникРазметки.Ключ);
		Если ТипДокумента = ТипПоступления Тогда
			ТекущиеПараметры.Поступления.Добавить(ТекущийИсточникРазметки.Ключ);
		ИначеЕсли ТипДокумента = ТипСписания Тогда
			ТекущиеПараметры.Списания.Добавить(ТекущийИсточникРазметки.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыОперацийПоИсточникамРазметки()
	
	Результат = Новый Структура;
	Результат.Вставить("Все", Новый Массив);
	Результат.Вставить("Поступления", Новый Массив);
	Результат.Вставить("Списания", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОтветНаОтправленныеБанковскиеВыписки(Документ, ДанныеДокумента, Ошибки)
	
	ОтветФНС = ДанныеДокумента.Ответ;
	Если Не ТипЗнч(ОтветФНС) = Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтатусОперации Из ОтветФНС.OperationStatuses Цикл
		ДанныеНаТекущийМомент = РегистрыСведений.БанковскиеДокументыАУСН.ДанныеДокумента( , СтатусОперации.Id);
		Если ВРег(СтатусОперации.StatusCode) = ВРег(ИнтеграцияАУСНКлиентСервер.ИмяСтатусаПринятФНС()) Тогда
			Если ДанныеНаТекущийМомент <> Неопределено
				И ДанныеНаТекущийМомент.СтатусОбменаАУСН = Перечисления.СтатусыОбменаАУСН.Отклонен Тогда
				// Удаляем запись с предупреждением о том, что операция была отклонена
				РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЗаписатьПредупреждение(
					ДанныеНаТекущийМомент.Организация,
					ДанныеНаТекущийМомент.Документ);
			КонецЕсли;
			РегистрыСведений.БанковскиеДокументыАУСН.ИзменитьСтатус(СтатусОперации.Id, Перечисления.СтатусыОбменаАУСН.Принят);
		Иначе
			КодыОшибок = Новый Массив;
			Если ДанныеНаТекущийМомент <> Неопределено Тогда
				РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЗаписатьПредупреждение(
					ДанныеНаТекущийМомент.Организация,
					ДанныеНаТекущийМомент.Документ,
					НСтр("ru = 'Банковская операция АУСН отклонена ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()));
			КонецЕсли;
			Для Каждого ОписаниеОшибки Из СтатусОперации.RefusalToAccept Цикл
				КодыОшибок.Добавить(ОписаниеОшибки.ReasonCode);
			КонецЦикла;
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку("UTF-8");
			ДанныеДокумента.Фабрика.ЗаписатьXML(ЗаписьXML, ОтветФНС, "PostExtendedStatementResponse");
			ОповещатьБанк = ВсеОшибкиОтносятсяКБанку(КодыОшибок);
			РегистрыСведений.БанковскиеДокументыАУСН.ИзменитьСтатус(
				СтатусОперации.Id, Перечисления.СтатусыОбменаАУСН.Отклонен, ОповещатьБанк, ЗаписьXML.Закрыть());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеОшибкиОтносятсяКБанку(КодыОшибок)
	
	Если Не ЗначениеЗаполнено(КодыОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОшибкиДляОповещенияБанка = Новый Массив;
	ОшибкиДляОповещенияБанка.Добавить("INTERNAL_ERROR");
	ОшибкиДляОповещенияБанка.Добавить("PARTNER_DENY");
	ОшибкиДляОповещенияБанка.Добавить("PERMISSION_NOT_GRANTED");
	ОшибкиДляОповещенияБанка.Добавить("TAXPAYER_NOT_FOUND");
	ОшибкиДляОповещенияБанка.Добавить("TAXPAYER_NOT_BOUND");
	
	Для Каждого КодОшибки Из КодыОшибок Цикл
		Если ОшибкиДляОповещенияБанка.Найти(ВРег(КодОшибки)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти