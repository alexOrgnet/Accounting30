
#Область ПрограммныйИнтерфейс

// Функция получает параметры устройства.
//
Функция ПолучитьПараметрыУстройства(Устройство, СообщениеОбОшибке = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборудованиеПоОрганизациям.УзелОбмена КАК УзелИнформационнойБазы,
	|	ОборудованиеПоОрганизациям.Организация КАК Организация,
	|	ОборудованиеПоОрганизациям.Склад КАК Склад,
	|	Склады.ТипЦенРозничнойТорговли КАК ТипЦен
	|ИЗ
	|	РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ОборудованиеПоОрганизациям.Склад = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОфлайнОборудование КАК СправочникОфлайнОборудование
	|		ПО ОборудованиеПоОрганизациям.Оборудование = СправочникОфлайнОборудование.Ссылка
	|ГДЕ
	|	ОборудованиеПоОрганизациям.Оборудование = &Устройство
	|	И (НЕ ОборудованиеПоОрганизациям.УзелОбмена.Ссылка ЕСТЬ NULL // Оборудованию вида ОФД не нужно выгружать номенклатуру
	|			ИЛИ ЕСТЬNULL(СправочникОфлайнОборудование.ТипОфлайнОборудования, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыОфлайнОборудования.ОФД))";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Не Выборка.Следующий() Тогда
		СообщениеОбОшибке = НСтр("ru = 'Оборудование не настроено. Выполните настройку в разделе ""Администрирование""'");
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы",         Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                          Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("Организация",                    Выборка.Организация);
	ВозвращаемоеЗначение.Вставить("ТипЦен",                         Выборка.ТипЦен);
	
	Возврат ВозвращаемоеЗначение;
КонецФункции

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции.
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыУстройства = ПолучитьПараметрыУстройства(Устройство);
	Если ПараметрыУстройства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = ПараметрыУстройства.УзелИнформационнойБазы.ПолучитьОбъект();
	
	УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
	УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
	УзелОбъект.Записать();
	
	ПараметрыОбъекта = Новый Структура("УзелОбмена, Склад", УзелОбъект.Ссылка, ПараметрыУстройства.Склад);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	
	ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.ОбновитьРегистрКодовНоменклатуры",
			ПараметрыОбъекта, ПараметрыВыполнения);
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции.
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыУстройства = ПолучитьПараметрыУстройства(Устройство);
	Если ПараметрыУстройства = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыУстройства.УзелИнформационнойБазы);
	
	УзелОбъект = ПараметрыУстройства.УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.ДатаВыгрузки      = ТекущаяДата();
	УзелОбъект.ВыгрузкаВыполнена = Истина;
	УзелОбъект.Записать();
	
КонецПроцедуры

Функция СведенияОСпискеНоменклатуры(СписокКодов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.Услуга КАК Услуга,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Код В(&СписокКодов)
	|	И НЕ СправочникНоменклатура.ЭтоГруппа";
	Результат = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		Результат.Вставить(СтрокаРезультата.Код, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаРезультата));
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции 

// Процедура вызывается при загрузке отчета о розничных продажах с устройства.
// Выполняет запись информации в узел плана обмена. Создает отчет о розничных продажах.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции.
//
// Возвращаемое значение:
//  Нет
//
Функция ПриЗагрузкеОтчетаОРозничныхПродажах(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСтавкиНДС = Новый Соответствие;
	СоответствиеСтавкиНДС.Вставить(МенеджерОфлайнОборудования.СтавкаБезНДС(), Перечисления.СтавкиНДС.БезНДС);
	СоответствиеСтавкиНДС.Вставить(МенеджерОфлайнОборудования.СтавкаНДС0(), Перечисления.СтавкиНДС.НДС0);
	СоответствиеСтавкиНДС.Вставить(МенеджерОфлайнОборудования.СтавкаНДС10(), Перечисления.СтавкиНДС.НДС10);
	СоответствиеСтавкиНДС.Вставить(МенеджерОфлайнОборудования.СтавкаНДС118(), Перечисления.СтавкиНДС.НДС18);
	СоответствиеСтавкиНДС.Вставить(МенеджерОфлайнОборудования.СтавкаНДС20(), Перечисления.СтавкиНДС.НДС20);
	
	МассивСозданныхДокументов = Новый Массив;
	
	ПараметрыУстройства = ПолучитьПараметрыУстройства(Устройство, СообщениеОбОшибке);
	Если ПараметрыУстройства = Неопределено Тогда
		Отказ = Истина;
		
		Возврат Неопределено;
	КонецЕсли; 
	
	ИдентификаторыДокументовПоСменам = Новый Соответствие;
	
	ТаблицаТоваров           = НовыйТаблицаТоваров();
	ТаблицаОплат             = НовыйТаблицаОплат();
	
	ТаблицаВидовОплат = ПолучитьТаблицуВидовОплат(Устройство);
	
	РеквизитыРегистра = Метаданные.РегистрыСведений.СопоставлениеНоменклатурыОФД.Измерения;
	
	НоменклатураЧеков = Новый ТаблицаЗначений;
	НоменклатураЧеков.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	НоменклатураЧеков.Колонки.Добавить("Наименование",  РеквизитыРегистра.НоменклатураНаименование.Тип);
	НоменклатураЧеков.Колонки.Добавить("Штрихкод",      РеквизитыРегистра.Штрихкод.Тип);
	
	НоменклатураЧеков.Индексы.Добавить("Наименование,Штрихкод");
	
	ЗначениеПоиска = Новый Структура;
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		
		// Для формирования ОРП используем данные только закрытых кассовых смен
		Если ЗначениеЗаполнено(ОтчетОПродажах.СтатусСмены) И ОтчетОПродажах.СтатусСмены <> Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаТоваров.Очистить();
		ТаблицаОплат.Очистить();
		НоменклатураЧеков.Очистить();
		
		Для Каждого ЧекиПродажи Из ОтчетОПродажах.Чеки Цикл
			// Перебираем товары из каждого чека
			Для Каждого СтрокаТЧ Из ЧекиПродажи.Товары Цикл
				Если ЧекиПродажи.ТипРасчета <> Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств 
					И ЧекиПродажи.ТипРасчета <> Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
					Продолжить;
				КонецЕсли; 
				
				НоменклатураСсылка = Неопределено;
				Если ЗначениеЗаполнено(СтрокаТЧ.УникальныйИдентификаторНоменклатуры) Тогда
					НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЧ.УникальныйИдентификаторНоменклатуры));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) 
					И ЗначениеЗаполнено(СтрокаТЧ.Наименование) Тогда
					
					ЗначениеПоиска.Вставить("Наименование", СокрЛП(СтрокаТЧ.Наименование));
					ЗначениеПоиска.Вставить("Штрихкод", СокрЛП(СтрокаТЧ.КодПредметаРасчета.Значение));
					
					НайденнаяНоменклатураЧеков = НоменклатураЧеков.НайтиСтроки(ЗначениеПоиска);
					Если НайденнаяНоменклатураЧеков.Количество() = 0  Тогда
						СтрокаНоменклатураЧеков = НоменклатураЧеков.Добавить();
						
						СтрокаНоменклатураЧеков.Идентификатор = Новый УникальныйИдентификатор;
						ЗаполнитьЗначенияСвойств(СтрокаНоменклатураЧеков, ЗначениеПоиска);
					Иначе
						СтрокаНоменклатураЧеков = НайденнаяНоменклатураЧеков[0];
					КонецЕсли;
					
					НоменклатураСсылка = СтрокаНоменклатураЧеков.Идентификатор;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				НоваяСтрока.ИдентификаторДокумента           = ЧекиПродажи.УникальныйИдентификатор;
				НоваяСтрока.ИдентификаторСвязанногоДокумента = ЧекиПродажи.УникальныйИдентификаторСвязанногоДокументаККМ;
				НоваяСтрока.ЭтоВозврат                       = (ЧекиПродажи.ТипРасчета =  Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
				НоваяСтрока.НомерФискальногоЧека             = Формат(ЧекиПродажи.НомерЧека, "ЧГ=0");
				
				НоваяСтрока.Код                              = СтрокаТЧ.Код;
				НоваяСтрока.Номенклатура                     = НоменклатураСсылка;
				НоваяСтрока.СтавкаНДС                        = СоответствиеСтавкиНДС[СтрокаТЧ.СтавкаНДС];
				НоваяСтрока.Количество                       = СтрокаТЧ.Количество;
				НоваяСтрока.Сумма                            = СтрокаТЧ.Сумма;
			КонецЦикла;
			
			Для каждого СтрокаОплаты Из ЧекиПродажи.Оплаты Цикл
				Если СтрокаОплаты.СуммаЭлектроннойОплаты > 0 Тогда
					ВидОплатыСсылка = ?(
						ЗначениеЗаполнено(СтрокаОплаты.УникальныйИдентификаторВидаЭлектроннойОплаты), 
						Справочники.ВидыОплатОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаОплаты.УникальныйИдентификаторВидаЭлектроннойОплаты)),
						Справочники.ВидыОплатОрганизаций.ПустаяСсылка());
						
					Если ВидОплатыСсылка.Пустая() Тогда
						Если ЗначениеЗаполнено(СтрокаОплаты.КодВидаЭлектроннойОплаты) Тогда
							СтрокаТаблицыОплаты = ТаблицаВидовОплат.Найти(Число(СтрокаОплаты.КодВидаЭлектроннойОплаты), "Код");
						Иначе
							СтрокаТаблицыОплаты = ТаблицаВидовОплат.Найти(Перечисления.ТипыОплат.ПлатежнаяКарта, "ТипОплаты");
						КонецЕсли;
						
						ВидОплатыСсылка = ?(
							СтрокаТаблицыОплаты <> Неопределено, 
							СтрокаТаблицыОплаты.Ссылка, 
							ВидОплатыСсылка);
					КонецЕсли; 
					
					НоваяСтрока = ТаблицаОплат.Добавить();
					НоваяСтрока.ИдентификаторДокумента = ЧекиПродажи.УникальныйИдентификатор;
					НоваяСтрока.ЭтоВозврат             = (ЧекиПродажи.ТипРасчета =  Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
					
					НоваяСтрока.ВидОплаты              = ВидОплатыСсылка;
					НоваяСтрока.Сумма                  = СтрокаОплаты.СуммаЭлектроннойОплаты;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		
		СопоставлениеНоменклатуры = РегистрыСведений.СопоставлениеНоменклатурыОФД.СопоставлениеНоменклатуры(НоменклатураЧеков);
		СопоставлениеНоменклатуры.Индексы.Добавить("Идентификатор");
		
		// Удаляем неподдерживаемый функционал - возвраты услуг.
		СведенияОСпискеНоменклатурыПоКоду   = СведенияОСпискеНоменклатуры(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Код", Истина));
		СведенияОСпискеНоменклатурыПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ОбщегоНазначения.ВыгрузитьКолонку(СопоставлениеНоменклатуры, "Номенклатура"), 
			"Ссылка, Услуга, ВидСтавкиНДС, ЭтоГруппа");
		
		ИдентификаторыДокументов    = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "ИдентификаторДокумента", Истина);
		ИтогиПродажПоДокументам     = ТаблицаТоваров.Скопировать(,"ИдентификаторДокумента, Сумма");
		ИтогиОплатПоДокументам      = ТаблицаОплат.Скопировать(,"ИдентификаторДокумента, Сумма");
		
		КоличествоСтрок = ТаблицаТоваров.Количество();
		Для Позиция = 1 По КоличествоСтрок Цикл
			СтрокаТовары = ТаблицаТоваров[КоличествоСтрок - Позиция];
			
			СведенияОНоменклатуре = Неопределено;
			Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("УникальныйИдентификатор") Тогда
				СтрокаСопоставлениеНоменклатуры = СопоставлениеНоменклатуры.Найти(СтрокаТовары.Номенклатура, "Идентификатор");
				Если СтрокаСопоставлениеНоменклатуры = Неопределено Тогда
					СведенияОНоменклатуре = Новый Структура;
					СведенияОНоменклатуре.Вставить("Ссылка",       СтрокаТовары.Номенклатура);
					СведенияОНоменклатуре.Вставить("Услуга",       Ложь);
					СведенияОНоменклатуре.Вставить("ВидСтавкиНДС", Перечисления.ВидыСтавокНДС.Общая);
					СведенияОНоменклатуре.Вставить("ЭтоГруппа",    Ложь);
				Иначе
					СведенияОНоменклатуре = СведенияОСпискеНоменклатурыПоСсылке[СтрокаСопоставлениеНоменклатуры.Номенклатура];
				КонецЕсли;
			ИначеЕсли СведенияОСпискеНоменклатурыПоКоду[СтрокаТовары.Код] <> Неопределено Тогда
				СведенияОНоменклатуре = СведенияОСпискеНоменклатурыПоКоду[СтрокаТовары.Код];
				СтрокаТовары.Номенклатура = СведенияОНоменклатуре.Ссылка;
			КонецЕсли; 
			
			Если СведенияОНоменклатуре = Неопределено 
				ИЛИ СведенияОНоменклатуре.ЭтоГруппа Тогда
				
				// Если ссылка битая или пришла группа - очистим значение номенклатуры чтобы не поломать документ
				СтрокаТовары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СтавкаНДС) Тогда
				СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(СведенияОНоменклатуре.ВидСтавкиНДС, ОтчетОПродажах.ДатаЗакрытияСмены);
			КонецЕсли; 
			
			// Для реализации и возврвта товаров ничего не делаем
			Если НЕ СтрокаТовары.ЭтоВозврат Тогда
				Продолжить;
			КонецЕсли;
			
			// При загрузке из ОФД ИдентификаторСвязанногоДокумента не заполняется и определить к какой смене относится возврат - возможности нет
			// поэтому считаем что все возвраты услуг относятся к текущей смене, так как в противном случае они все будут удалены из загрузки
			ЭтоВозвратТекущейСмены = (ИдентификаторыДокументов.Найти(СтрокаТовары.ИдентификаторСвязанногоДокумента) <> Неопределено) 
				ИЛИ (СтрокаТовары.ИдентификаторСвязанногоДокумента = Неопределено И СведенияОНоменклатуре.Услуга);
				
			Если ЭтоВозвратТекущейСмены Тогда
				СтрокаТовары.ДатаРеализации = ОтчетОПродажах.ДатаЗакрытияСмены;
			Иначе
				// Поищем связанный документ в уже загруженных кассовых сменах
				Для каждого ИдентификаторыСмены Из ИдентификаторыДокументовПоСменам Цикл
					Если ИдентификаторыСмены.Значение.Найти(СтрокаТовары.ИдентификаторСвязанногоДокумента) <> Неопределено Тогда
						СтрокаТовары.ДатаРеализации = ИдентификаторыСмены.Ключ;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если НЕ СведенияОНоменклатуре.Услуга Тогда
				Продолжить;
				
			ИначеЕсли ЭтоВозвратТекущейСмены Тогда
				// Возврат услуг текущей смены переносим в ТЧ Товары
				СтрокаТовары.ЭтоВозврат = Ложь;
				
				СтрокаТовары.Количество = СтрокаТовары.Количество;
				СтрокаТовары.Сумма      = СтрокаТовары.Сумма;
			Иначе
				// Возврат услуг из предыдущих смен не поддерживаем. Но перед тем как их удалить, удалим их оплаты.
				Отбор = Новый Структура("ИдентификаторДокумента", СтрокаТовары.ИдентификаторДокумента);
				СтрокиОплаты = ТаблицаОплат.НайтиСтроки(Отбор);
				
				ВсегоПродажПоДокументу = ИтогиПродажПоДокументам.Скопировать(Отбор).Итог("Сумма");
				ВсегоОплатПоДокументу  = ИтогиОплатПоДокументам.Скопировать(Отбор).Итог("Сумма");
				
				// Смешанные оплаты (например карта и сертификат) не поддерживаем. В этом случае не удаляем ничего.
				Если СтрокиОплаты.Количество() = 1 И (ВсегоПродажПоДокументу = ВсегоОплатПоДокументу) Тогда
					Если СтрокиОплаты[0].Сумма > СтрокаТовары.Сумма Тогда
						СтрокиОплаты[0].Сумма = СтрокиОплаты[0].Сумма - СтрокаТовары.Сумма;
					Иначе 
						ТаблицаОплат.Удалить(СтрокиОплаты[0]);
					КонецЕсли; 
				КонецЕсли;
				
				ТаблицаТоваров.Удалить(СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
		
		ИдентификаторыДокументовПоСменам.Вставить(ОтчетОПродажах.ДатаЗакрытияСмены, ИдентификаторыДокументов);
		
		ПродажиТоваров = ТаблицаТоваров.Скопировать(Новый Структура("ЭтоВозврат", Ложь), "Номенклатура, СтавкаНДС, Количество, Сумма");
		ПродажиТоваров.Свернуть("Номенклатура, СтавкаНДС", "Количество, Сумма");
		
		ВозвратТоваров = ТаблицаТоваров.Скопировать(Новый Структура("ЭтоВозврат", Истина), "Номенклатура, СтавкаНДС, НомерФискальногоЧека, ДатаРеализации, Количество, Сумма");
		
		УчетТоваров.ПроставитьСторноТаблицы(ВозвратТоваров, Новый Структура("Количество, Сумма"), -1);
		ВозвратТоваров.Свернуть("Номенклатура, СтавкаНДС, НомерФискальногоЧека, ДатаРеализации", "Количество, Сумма");
		
		ОплатаТоваров = ТаблицаОплат.Скопировать(Новый Структура("ЭтоВозврат", Ложь), "ВидОплаты, Сумма");
		ОплатаТоваров.Свернуть("ВидОплаты", "Сумма");
		
		ВозвратОплаты = ТаблицаОплат.Скопировать(Новый Структура("ЭтоВозврат", Истина), "ВидОплаты, Сумма");
		ВозвратОплаты.Свернуть("ВидОплаты", "Сумма");
		
		Комментарий = СформироватьКомментарий(Устройство);
		
		ТаблицыДанных = Новый Структура;
		ТаблицыДанных.Вставить("УникальныйИдентификатор",   ОтчетОПродажах.УникальныйИдентификатор);
		ТаблицыДанных.Вставить("ДатаЗакрытияСмены",         ОтчетОПродажах.ДатаЗакрытияСмены);
		ТаблицыДанных.Вставить("Товары",                    ПродажиТоваров);
		ТаблицыДанных.Вставить("Оплаты",                    ОплатаТоваров);
		ТаблицыДанных.Вставить("ВозвратыТоваров",           ВозвратТоваров);
		ТаблицыДанных.Вставить("ВозвратыОплат",             ВозвратОплаты);
		ТаблицыДанных.Вставить("НоменклатураЧеков",         НоменклатураЧеков);
		ТаблицыДанных.Вставить("СопоставлениеНоменклатуры", СопоставлениеНоменклатуры);
		
		СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, ПараметрыУстройства, ТаблицыДанных, Комментарий);
	КонецЦикла;
		
	Возврат МассивСозданныхДокументов;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсВыгрузкаТоваров

// Функция возвращает таблицу товаров с данными к выгрузке в устройство.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные.
//  Параметры - <Структура> - Параметры формирования данныъ.
//  ПолнаяВыгрузка - <Булево> - выгружать все товары.
//
// Возвращаемое значение:
//  <Массив> результаты запроса для заполнения .
//
Функция ТаблицыДанныхДляВыгрузки(Устройство, Параметры, ПолнаяВыгрузка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ЕСТЬNULL(СправочникНоменклатура.КодНоменклатурнойКлассификацииККТ.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаНоменклатурнойКлассификации,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ПродукцияМаркируемаяДляГИСМ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыМаркировкиККТ.ОбувныеТовары)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипМаркированнойПродукции,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияСсылка,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	СправочникНоменклатура.Услуга КАК Услуга,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ СведенияОбАлкогольнойПродукции.Номенклатура ЕСТЬ NULL КАК ЭтоАлкогольнаяПродукция,
	|	ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КоэффПересчетаДал, 0) * 10 КАК ЕмкостьТары,
	|	ВЫБОР ЕСТЬNULL(СведенияОбАлкогольнойПродукции.ВидЛицензии, НЕОПРЕДЕЛЕНО)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМаркируемаяАлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.Производитель.ИНН, """") КАК ПроизводительИНН,
	|	ЕСТЬNULL(СправочникНоменклатура.Производитель.КПП, """") КАК ПроизводительКПП,
	|	ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КодВида169, """") КАК КодВидаАлкогольнойПродукции
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|			И (КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|	И &СписокУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК Ссылка,
	|	ВТ_Товары.Код КАК Код,
	|	ВТ_Товары.Наименование КАК Наименование,
	|	ВТ_Товары.НаименованиеПолное КАК НаименованиеПолное,
	|	ВТ_Товары.Артикул КАК Артикул,
	|	ВТ_Товары.Родитель КАК Группа,
	|	ВТ_Товары.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ВТ_Товары.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации,
	|	ВТ_Товары.ТипМаркированнойПродукции КАК ТипМаркированнойПродукции,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ВТ_Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВТ_Товары.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
	|	ВТ_Товары.Услуга КАК Услуга,
	|	ВТ_Товары.ЭтоАлкогольнаяПродукция КАК ЭтоАлкогольнаяПродукция,
	|	ВТ_Товары.ЭтоМаркируемаяАлкогольнаяПродукция КАК ЭтоМаркируемаяАлкогольнаяПродукция,
	|	ВТ_Товары.ЕмкостьТары КАК ЕмкостьТары,
	|	ВТ_Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	ВТ_Товары.ПроизводительИНН КАК ПроизводительИНН,
	|	ВТ_Товары.ПроизводительКПП КАК ПроизводительКПП
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	НЕ ВТ_Товары.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВТ_Товары.Ссылка = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Товары.ЕдиницаИзмеренияСсылка КАК Ссылка,
	|	ВТ_Товары.ЕдиницаИзмеренияКод КАК Код,
	|	ВТ_Товары.ЕдиницаИзмеренияНаименование КАК Наименование
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппаНоменклатуры.Ссылка КАК Номенклатура,
	|	ГруппаНоменклатуры.Наименование КАК Наименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Код, НЕОПРЕДЕЛЕНО) КАК Код,
	|	ЛОЖЬ КАК ЭтоНовый,
	|	ИСТИНА КАК Используется
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ВТ_Товары.Родитель = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ГруппаНоменклатуры
	|		ПО ВТ_Товары.Родитель = ГруппаНоменклатуры.Ссылка
	|ГДЕ
	|	НЕ ГруппаНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код) КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline"; 
	
	СписокУсловий = Новый Массив;
	СписокУсловий.Добавить("НЕ СправочникНоменклатура.ЭтоГруппа");
	
	Если НЕ ПолнаяВыгрузка Тогда
		СписокУсловий.Добавить("КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы");
	Иначе
		СписокУсловий.Добавить("ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0");
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокУсловий", СтрСоединить(СписокУсловий, " И "));
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТипЦен",                 Параметры.ТипЦен);
	Запрос.УстановитьПараметр("ПериодЦен",              КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результаты = Новый Структура();
	Результаты.Вставить("ТаблицаТовары",             РезультатЗапроса[1].Выгрузить());
	Результаты.Вставить("ТаблицаШтрихкоды",          РезультатЗапроса[2].Выгрузить());
	Результаты.Вставить("ТаблицаЕдиницыИзмерения",   РезультатЗапроса[3].Выгрузить());
	Результаты.Вставить("ТаблицаГруппыНоменклатуры", РезультатЗапроса[4].Выгрузить());
	
	ВыборкаРеквизиты = РезультатЗапроса[5].Выбрать();
	Если ВыборкаРеквизиты.Следующий() 
		И ЗначениеЗаполнено(ВыборкаРеквизиты.Код) Тогда
		
		Результаты.Вставить("МаксимальныйКод", ВыборкаРеквизиты.Код);
	Иначе
		Результаты.Вставить("МаксимальныйКод", 0);
	КонецЕсли; 
	
	Возврат Результаты;
КонецФункции

Функция СтавкаНДСОфлайнОборудование(Знач СтавкаНДС)
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ТекущаяДата());
	КонецЕсли;
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда 
		Возврат МенеджерОфлайнОборудования.СтавкаНДС0();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда 
		Возврат МенеджерОфлайнОборудования.СтавкаНДС10();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда 
		Возврат МенеджерОфлайнОборудования.СтавкаНДС110();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Возврат МенеджерОфлайнОборудования.СтавкаНДС18();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат МенеджерОфлайнОборудования.СтавкаНДС118();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат МенеджерОфлайнОборудования.СтавкаНДС20();
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат МенеджерОфлайнОборудования.СтавкаНДС120();
	Иначе
		Возврат МенеджерОфлайнОборудования.СтавкаБезНДС();
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в ККМ Offline.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные.
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных.
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк.
//
Функция ПолучитьДанныеДляКассы(Устройство, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаЗагрузки = ОбщегоНазначения.РабочаяДатаПользователя();
	
	ДанныеДляКассы = ТаблицыДанныхДляВыгрузки(Устройство, Параметры, ПолнаяВыгрузка);
	ДанныеДляКассы.ТаблицаШтрихкоды.Индексы.Добавить("Номенклатура");
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляКассы.ТаблицаТовары, "Ссылка", Истина);
	СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, 
		Новый Структура("Дата, Организация", ДатаЗагрузки, Параметры.Организация), Ложь, Ложь); 
		
	
	ТаблицаГруппыНоменклатуры = ДанныеДляКассы.ТаблицаГруппыНоменклатуры;
	
	КодНовогоЭлементаТаблицыТовары = Число(ДанныеДляКассы.МаксимальныйКод)+1;
	
	Для каждого СтрокаТовара Из ДанныеДляКассы.ТаблицаТовары Цикл
		ЗаписьТовара = МенеджерОфлайнОборудования.ЗаписьТовараПрайсЛиста();
		
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТовара.Ссылка];
		
		ЗаписьТовара.Код                     = СтрокаТовара.Код;
		ЗаписьТовара.Цена                    = СтрокаТовара.Цена;
		ЗаписьТовара.Остаток                 = 0;
		ЗаписьТовара.УникальныйИдентификатор = СтрокаТовара.Ссылка.УникальныйИдентификатор();
		ЗаписьТовара.Наименование            = СтрокаТовара.Наименование;
		ЗаписьТовара.СтавкаНДС               = СтавкаНДСОфлайнОборудование(Перечисления.СтавкиНДС.СтавкаНДС(СтрокаТовара.ВидСтавкиНДС, ДатаЗагрузки));
		
		Если СведенияОНоменклатуре.МаркируемаяПродукция Тогда
			ЗаписьТовара.ЭтоМаркированнаяПродукция = Истина;
			ЗаписьТовара.ТипМаркированнойПродукции = СтрокаТовара.ТипМаркированнойПродукции;
			ЗаписьТовара.ВидМаркированнойПродукции = ИнтеграцияИСМПБП.ВидМаркированнойПродукцииБПО(СведенияОНоменклатуре.ВидПродукцииИС);
		КонецЕсли;
		
		ЗаписьТовара.КодВидаНоменклатурнойКлассификации = СтрокаТовара.КодВидаНоменклатурнойКлассификации;
		
		Если НЕ СтрокаТовара.Группа.Пустая() Тогда
			СтрокаГруппыНоменклатуры = ТаблицаГруппыНоменклатуры.Найти(СтрокаТовара.Группа, "Номенклатура");
			Если СтрокаГруппыНоменклатуры <> Неопределено Тогда
				Если СтрокаГруппыНоменклатуры.Код = Неопределено Тогда
					СтрокаГруппыНоменклатуры.Код      = КодНовогоЭлементаТаблицыТовары;
					СтрокаГруппыНоменклатуры.ЭтоНовый = Истина;
					
					КодНовогоЭлементаТаблицыТовары = КодНовогоЭлементаТаблицыТовары + 1;
				КонецЕсли;
				
				ЗаписьТовара.КодГруппы                     = СтрокаГруппыНоменклатуры.Код;
				ЗаписьТовара.УникальныйИдентификаторГруппы = СтрокаТовара.Группа.УникальныйИдентификатор();
			КонецЕсли; 
		КонецЕсли; 
		
		ЗаписьТовара.ПризнакПредметаРасчета = ПечатьФискальныхДокументов.РасчитатьПризнакПредметаРасчета(СведенияОНоменклатуре);
		
		ЗаписьТовара.Артикул                 = СтрокаТовара.Артикул;
		ЗаписьТовара.Описание                = СтрокаТовара.НаименованиеПолное;
		ЗаписьТовара.ЭтоВесовойТовар         = Ложь;
		ЗаписьТовара.НомерСекции             = 1;
		
		ЗаписьТовара.ЭтоАлкоголь = СтрокаТовара.ЭтоАлкогольнаяПродукция;
		Если СтрокаТовара.ЭтоАлкогольнаяПродукция Тогда
			ЗаписьТовара.АлкогольныеРеквизиты.Маркируемый = СтрокаТовара.ЭтоМаркируемаяАлкогольнаяПродукция;
			ЗаписьТовара.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции = СтрокаТовара.КодВидаАлкогольнойПродукции;
			ЗаписьТовара.АлкогольныеРеквизиты.ЕмкостьТары = СтрокаТовара.ЕмкостьТары;
			ЗаписьТовара.АлкогольныеРеквизиты.ИННПроизводителя = СтрокаТовара.ПроизводительИНН;
			ЗаписьТовара.АлкогольныеРеквизиты.КПППроизводителя = СтрокаТовара.ПроизводительКПП;
		КонецЕсли; 
		
		ЗаписьТовара.КодЕдиницыИзмерения                     = СтрокаТовара.ЕдиницаИзмеренияКод; 
		ЗаписьТовара.УникальныйИдентификаторЕдиницыИзмерения = СтрокаТовара.ЕдиницаИзмеренияСсылка.УникальныйИдентификатор();
		
		ТаблицаШтрихкоды = ДанныеДляКассы.ТаблицаШтрихкоды.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Ссылка));
		Для каждого СтрокаШтрихкода Из ТаблицаШтрихкоды Цикл
			// Штрихкод
			ЗаписьШтрихкода = МенеджерОфлайнОборудования.ЗаписьШтрихкодаПрайсЛиста();
			ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкода.Штрихкод;
			ЗаписьТовара.Штрихкоды.Добавить(ЗаписьШтрихкода);
		КонецЦикла;
		
		ПрайсЛист.Товары.Добавить(ЗаписьТовара);
	КонецЦикла;
	
	Для каждого СтрокаЕдиницаИзмерения Из ДанныеДляКассы.ТаблицаЕдиницыИзмерения Цикл
		ЗаписьЕИ = МенеджерОфлайнОборудования.ЗаписьЕдиницыИзмеренияПрайсЛиста();
		
		ЗаписьЕИ.Код                     = СтрокаЕдиницаИзмерения.Код;
		ЗаписьЕИ.Наименование            = СтрокаЕдиницаИзмерения.Наименование;
		ЗаписьЕИ.УникальныйИдентификатор = СтрокаЕдиницаИзмерения.Ссылка.УникальныйИдентификатор();
		ЗаписьЕИ.КодОКЕИ                 = СтрокаЕдиницаИзмерения.Код;
		
		ПрайсЛист.ЕдиницыИзмерения.Добавить(ЗаписьЕИ);
	КонецЦикла;
	
	ТаблицаНовыхЗаписейГруппыНоменклатура = ТаблицаГруппыНоменклатуры.Скопировать(
			Новый Структура("ЭтоНовый", Истина), 
			"Номенклатура, Код, Используется");
	
	НаборЗаписейКодыНоменклатуры = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
	НаборЗаписейКодыНоменклатуры.Загрузить(ТаблицаНовыхЗаписейГруппыНоменклатура);
	НаборЗаписейКодыНоменклатуры.Записать(Ложь);
	
	Для каждого СтрокаГруппыТоваров Из ТаблицаГруппыНоменклатуры Цикл
		ЗаписьГруппаТоваров = МенеджерОфлайнОборудования.ЗаписьГруппыТоваровПрайсЛиста();
		
		ЗаписьГруппаТоваров.Код                     = СтрокаГруппыТоваров.Код;
		ЗаписьГруппаТоваров.Наименование            = СтрокаГруппыТоваров.Наименование;
		ЗаписьГруппаТоваров.УникальныйИдентификатор = СтрокаГруппыТоваров.Номенклатура.УникальныйИдентификатор();
		
		ПрайсЛист.ГруппыТоваров.Добавить(ЗаписьГруппаТоваров);
	КонецЦикла; 
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсВыгрузкаНастроек

// Функция возвращает настройки для экземпляра оборудования.
//
Функция ПолучитьНастройкиДляККМОффлайн(Устройство, СтруктураНастроек) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса());
	
	СтруктураНастроек.НаименованиеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	СтруктураНастроек.ИНН                     = СведенияОбОрганизации.ИНН;
	СтруктураНастроек.КПП                     = СведенияОбОрганизации.КПП;
	СтруктураНастроек.АдресТочкиПродажи       = СведенияОбОрганизации.ЮридическийАдрес;
	
	Дата = ТекущаяДатаСеанса();
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата)
		Или УчетнаяПолитика.ПрименяетсяАУСНДоходы(Организация, Дата) Тогда
		СтруктураНастроек.СистемыНалогообложения.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата)
		Или УчетнаяПолитика.ПрименяетсяАУСНДоходыМинусРасходы(Организация, Дата) Тогда
		СтруктураНастроек.СистемыНалогообложения.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход);
	ИначеЕсли УчетнаяПолитика.СистемаНалогообложения(Организация, Дата) = Перечисления.СистемыНалогообложения.Общая Тогда 
		СтруктураНастроек.СистемыНалогообложения.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата) Тогда
		СтруктураНастроек.СистемыНалогообложения.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
	КонецЕсли; 
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата) Тогда
		СтруктураНастроек.СистемыНалогообложения.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.Патент);
	КонецЕсли; 
	
	ТаблицаВидовОплат = ПолучитьТаблицуВидовОплат(Устройство);
	ВидыОплаты = Новый Массив;
	
	Для Каждого СтрокаВидаОплаты Из ТаблицаВидовОплат Цикл
		
		ВидЭлектроннойОплаты = МенеджерОфлайнОборудования.ЗаписьВидЭлектроннойОплаты();
		ВидЭлектроннойОплаты.Код = СтрокаВидаОплаты.Код;
		ВидЭлектроннойОплаты.Наименование = СтрокаВидаОплаты.Наименование;
		Если СтрокаВидаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			ВидЭлектроннойОплаты.ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПлатежнаяКарта();
		ИначеЕсли СтрокаВидаОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда 
			ВидЭлектроннойОплаты.ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБанковскийКредит();
		ИначеЕсли СтрокаВидаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный 
			ИЛИ СтрокаВидаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний Тогда 
			ВидЭлектроннойОплаты.ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПодарочныйСертификат();
		КонецЕсли;
		
		ВидЭлектроннойОплаты.УникальныйИдентификатор = СтрокаВидаОплаты.Ссылка.УникальныйИдентификатор();
		
		СтруктураНастроек.ВидыЭлектроннойОплаты.Добавить(ВидЭлектроннойОплаты);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, ПараметрыУстройства, ТаблицыДанных, Комментарий = "")
	
	// пустой документ не сохраняем
	Если ТаблицыДанных.Товары.Количество() = 0 
		И ТаблицыДанных.Оплаты.Количество() = 0
		И ТаблицыДанных.ВозвратыТоваров.Количество() = 0
		И ТаблицыДанных.ВозвратыОплат.Количество() = 0 Тогда
	
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровДокумента = Новый Структура();
	СтруктураПараметровДокумента.Вставить("Организация", 	ПараметрыУстройства.Организация);
	СтруктураПараметровДокумента.Вставить("Склад", 			ПараметрыУстройства.Склад);
	СтруктураПараметровДокумента.Вставить("ВидОперации",	Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах);
	СтруктураПараметровДокумента.Вставить("Ответственный", 	Пользователи.ТекущийПользователь());
	
	СсылкаДокумента = ?(
		ЗначениеЗаполнено(ТаблицыДанных.УникальныйИдентификатор), 
		Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(ТаблицыДанных.УникальныйИдентификатор), 
		Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку());
	
	ОтчетОРозничныхПродажахОбъект =  СсылкаДокумента.ПолучитьОбъект();
	
	// Такого документа еще нет
	Если ОтчетОРозничныхПродажахОбъект = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажахОбъект.УстановитьСсылкуНового(СсылкаДокумента);
	Иначе
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		ОтчетОРозничныхПродажахОбъект.Возвраты.Очистить();
		ОтчетОРозничныхПродажахОбъект.Оплата.Очистить();
		ОтчетОРозничныхПродажахОбъект.ВозвратОплаты.Очистить();
	КонецЕсли; 
	
	ОтчетОРозничныхПродажахОбъект.Заполнить(СтруктураПараметровДокумента);
	ОтчетОРозничныхПродажахОбъект.Дата = ТаблицыДанных.ДатаЗакрытияСмены;
	ОтчетОРозничныхПродажахОбъект.Комментарий = Комментарий; 
	
	НоменклатураЧековДокументов = РегистрыСведений.НоменклатураДокументовОФД.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ЕстьНесопоставленнаяНоменклатура = Ложь;
	
	Для каждого СтрокаТовары Из ТаблицыДанных.Товары Цикл
		Если СтрокаТовары.Сумма = 0 
			И СтрокаТовары.Количество = 0 Тогда
			
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, "Номенклатура, СтавкаНДС, Количество, Сумма");
		Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("УникальныйИдентификатор") Тогда
			СвойстваНоменклатуры = ТаблицыДанных.НоменклатураЧеков.Найти(СтрокаТовары.Номенклатура, "Идентификатор");
			
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
			СтрокаНесопоставленнаяНоменклатура = НоменклатураЧековДокументов.Добавить();
			
			СтрокаНесопоставленнаяНОменклатура.ИдентификаторСтроки      = НоваяСтрока.ИдентификаторСтроки;
			СтрокаНесопоставленнаяНОменклатура.ТабличнаяЧасть           = "Товары";
			СтрокаНесопоставленнаяНОменклатура.НоменклатураНаименование = СвойстваНоменклатуры.Наименование;
			СтрокаНесопоставленнаяНОменклатура.Штрихкод                 = СвойстваНоменклатуры.Штрихкод;
			НайденнаяНоменклатура = ТаблицыДанных.СопоставлениеНоменклатуры.Найти(СтрокаТовары.Номенклатура, "Идентификатор");
			Если НайденнаяНоменклатура <> Неопределено Тогда
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура.Номенклатура;
			ИначеЕсли НЕ ЕстьНесопоставленнаяНоменклатура Тогда
				ЕстьНесопоставленнаяНоменклатура = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, НоваяСтрока.Сумма, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС);
	КонецЦикла; 
	
	Для каждого СтрокаВозвраты Из ТаблицыДанных.ВозвратыТоваров Цикл
		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Возвраты.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозвраты, "Номенклатура, СтавкаНДС, Количество, Сумма, НомерФискальногоЧека, ДатаРеализации");
		
		Если ТипЗнч(СтрокаВозвраты.Номенклатура) = Тип("УникальныйИдентификатор") Тогда
			СвойстваНоменклатуры = ТаблицыДанных.НоменклатураЧеков.Найти(СтрокаВозвраты.Номенклатура, "Идентификатор");
			
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
			СтрокаНесопоставленнаяНоменклатура = НоменклатураЧековДокументов.Добавить();
			
			СтрокаНесопоставленнаяНОменклатура.ИдентификаторСтроки      = НоваяСтрока.ИдентификаторСтроки;
			СтрокаНесопоставленнаяНОменклатура.ТабличнаяЧасть           = "Возвраты";
			СтрокаНесопоставленнаяНОменклатура.НоменклатураНаименование = СвойстваНоменклатуры.Наименование;
			СтрокаНесопоставленнаяНОменклатура.Штрихкод                 = СвойстваНоменклатуры.Штрихкод;
			НайденнаяНоменклатура = ТаблицыДанных.СопоставлениеНоменклатуры.Найти(СтрокаВозвраты.Номенклатура, "Идентификатор");
			Если НайденнаяНоменклатура <> Неопределено Тогда
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура.Номенклатура;
			ИначеЕсли НЕ ЕстьНесопоставленнаяНоменклатура Тогда
				ЕстьНесопоставленнаяНоменклатура = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, НоваяСтрока.Сумма, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС);
	КонецЦикла; 
	
	Для Каждого Оплата ИЗ ТаблицыДанных.Оплаты Цикл
		ОплатаПлатежнойКартой             = ОтчетОРозничныхПродажахОбъект.Оплата.Добавить();
		ОплатаПлатежнойКартой.СуммаОплаты = Оплата.Сумма;
		ОплатаПлатежнойКартой.ВидОплаты   = Оплата.ВидОплаты;
	КонецЦикла;
	
	Для Каждого Оплата ИЗ ТаблицыДанных.ВозвратыОплат Цикл
		ОплатаПлатежнойКартой             = ОтчетОРозничныхПродажахОбъект.ВозвратОплаты.Добавить();
		ОплатаПлатежнойКартой.СуммаОплаты = Оплата.Сумма;
		ОплатаПлатежнойКартой.ВидОплаты   = Оплата.ВидОплаты;
	КонецЦикла;
	
	ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
	
	Если ОтчетОРозничныхПродажахОбъект.Товары.Итог("СуммаНДС") <> 0 
		ИЛИ ОтчетОРозничныхПродажахОбъект.Возвраты.Итог("СуммаНДС") <> 0 Тогда
		
		ОтчетОРозничныхПродажахОбъект.ДокументБезНДС = Ложь;
	КонецЕсли; 
	
	ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("НеВыводитьСообщенияПроверкиЗаполнения");
	
	Если ЕстьНесопоставленнаяНоменклатура 
		ИЛИ Не ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
		
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Попытка
			// Проводим в попытке, чтобы при ошибке в процелуре проведения (например нет остатка товара) не останавливалась вся загрузка.
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ОтчетОРозничныхПродажахОбъект.Ссылка.Пустая() 
		И НоменклатураЧековДокументов.Количество() > 0 Тогда
		
		НоменклатураЧековДокументов.ЗаполнитьЗначения(ОтчетОРозничныхПродажахОбъект.Организация, "Организация");
		НоменклатураЧековДокументов.ЗаполнитьЗначения(ОтчетОРозничныхПродажахОбъект.Ссылка, "ДокументЗагрузки");
		
		НаборЗаписей = РегистрыСведений.НоменклатураДокументовОФД.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Установить(ОтчетОРозничныхПродажахОбъект.Организация);
		НаборЗаписей.Отбор.ДокументЗагрузки.Установить(ОтчетОРозничныхПродажахОбъект.Ссылка);
		
		НаборЗаписей.Загрузить(НоменклатураЧековДокументов);
		НаборЗаписей.Записать(); 
	КонецЕсли;
	
	// Для загрузки из ОФД план обмена не используется
	Если ЗначениеЗаполнено(ПараметрыУстройства.УзелИнформационнойБазы) Тогда
		УзелОбъект = ПараметрыУстройства.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
	КонецЕсли;
	
	МассивСозданныхДокументов.Добавить(ОтчетОРозничныхПродажахОбъект.Ссылка);
КонецПроцедуры

Функция СформироватьКомментарий(Устройство)
	
	СвойстваОборудования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Устройство, "ТипОфлайнОборудования, Наименование");
	
	Комментарий = СтрШаблон(НСтр("ru = 'Загружено из %1:%2'"), СвойстваОборудования.ТипОфлайнОборудования, СвойстваОборудования.Наименование);
	
	Возврат Комментарий;
	
КонецФункции

Функция НовыйТаблицаТоваров()
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	СписокТиповНоменклатура = Новый Массив;
	СписокТиповНоменклатура.Добавить(Тип("СправочникСсылка.Номенклатура"));
	СписокТиповНоменклатура.Добавить(Тип("УникальныйИдентификатор"));
	
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторДокумента",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСвязанногоДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки",              Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоВозврат",                       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ДатаРеализации",                   Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("Код",                              Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",                     Новый ОписаниеТипов(СписокТиповНоменклатура));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",                        Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Количество",                       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",                            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НомерФискальногоЧека",             Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаТоваров;
КонецФункции

Функция НовыйТаблицаОплат()
	ТаблицаОплат = Новый ТаблицаЗначений;
	
	ТаблицаОплат.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаОплат.Колонки.Добавить("ЭтоВозврат",             Новый ОписаниеТипов("Булево"));
	ТаблицаОплат.Колонки.Добавить("ВидОплаты",              Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
	ТаблицаОплат.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаОплат;
КонецФункции
 

Функция ПолучитьТаблицуВидовОплат(Устройство)
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыВидовОплатыКММ.ВидОплаты КАК Ссылка,
	|	КодыВидовОплатыКММ.ВидОплаты.Наименование КАК Наименование,
	|	КодыВидовОплатыКММ.Код КАК Код,
	|	КодыВидовОплатыКММ.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	РегистрСведений.КодыВидовОплатыКММ КАК КодыВидовОплатыКММ
	|ГДЕ
	|	КодыВидовОплатыКММ.ОфлайнОборудование = &Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("Оборудование", Устройство);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти
