#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Клиентский обработчик проверки заполнения форм ГосИС
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма
//   Отказ - Булево - Истина если проверка заполнения не пройдена
Процедура ПроверитьЗаполнение(Форма, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма           - УправляемаяФорма - форма записываемого объекта,
//  Отказ           - Булево           - признак отказа от записи,
//  ПараметрыЗаписи - Структура        - структура, содержащая параметры записи.
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если Форма.ИмяФормы = "РегистрСведений.НастройкиОбменаЕГАИС.Форма.ФормаЗаписи" Тогда
		ИнтеграцияЕГАИСБПВызовСервера.УстановитьНапоминаниеПоОрганизации(Форма.Запись.ИдентификаторФСРАР);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки в ИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИС") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВидПродукции = ИнтеграцияИСМПБПВызовСервера.ВидПродукцииИС(Форма.ГосударственныйКонтроль);
		//БгосИС 1.1.29.3
		Если Не ЗначениеЗаполнено(ВидПродукции) И Форма.ЭтоАлкогольнаяПродукция Тогда 
			ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		КонецЕсли;
		//
		Если ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции)
			Или ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			Или ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			
			ОповещениеОЗавершении 												= Новый ОписаниеОповещения("СвойстваМаркируемогоТовараЗавершение", Форма);
												
			ПараметрыОбработкиДействия 											= ИнтеграцияИСКлиент.ПараметрыОткрытияФормыНастройкиНоменклатуры();
			ПараметрыОбработкиДействия.ФормаВладелец 							= Форма.Объект;
			ПараметрыОбработкиДействия.Номенклатура 							= Форма.Объект.Ссылка;
			ПараметрыОбработкиДействия.ЕдиницаХранения 							= Форма.Объект.ЕдиницаИзмерения;
			ПараметрыОбработкиДействия.ВидПродукции 							= ВидПродукции; 
			ПараметрыОбработкиДействия.ДопустимоИспользованиеУпаковок 			= Ложь;
			ПараметрыОбработкиДействия.ДопустимыУпаковкиМеньшеЕдиницыХранения 	= Ложь;
			ПараметрыОбработкиДействия.КарточкаТовараСодержитВесовойПризнак 	= Неопределено;
			ПараметрыОбработкиДействия.ДопустимаНастройкаЛогистическойЕдиницы 	= Ложь;
			ПараметрыОбработкиДействия.УпаковкиВключены                     	= Ложь;
			
			Если НавигационнаяСсылкаФорматированнойСтроки = "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИСДляПросмотра" Тогда
				ПараметрыОбработкиДействия.РежимПросмотра = Истина;
			КонецЕсли;
			ИнтеграцияИСКлиент.ОбработкаДействияНастройкиНоменклатуры(ОповещениеОЗавершении, ПараметрыОбработкиДействия);
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоНоменклатуре(Форма, Форма.Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается во всех созданных формах при вызове метода Оповестить.
//
// Параметры:
//  Форма      - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия - Строка           - имя события,
//  Параметр   - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник   - Произвольный     - источник события.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзменениеСтатусаКонтрагентаИСМП" 
		И Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" 
		И Форма.КонтрагентБП = Параметр Тогда
	
		Форма.КонтрагентНадпись = ИнтеграцияИСМПБПВызовСервера.КонтрагентНадпись(Параметр, Форма.ВидМаркируемойПродукции);
	КонецЕсли; 
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчики событий обрабатываемых БГосИС в прикладных формах
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - оповещаемая форма,
//  ИмяСобытия              - Строка           - имя события,
//  Параметр                - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник                - Произвольный     - источник события.
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки
Процедура ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределенный сценарий обработки оповещения прикладных объектов об изменениях в библиотечных.
//   Вызывается для обновления гиперссылок в прикладных документах и при необходимости выполнить дополнительные действия.
//   Для переопределения обработчика установить Событие.Обработано = Истина, для дополнения не менять это значение.
// 
// Параметры:
//   МестоВызова - Структура - сведения о месте в котором требуется обработка:
//    * Форма  - ФормаКлиентскогоПриложения     - источник вызова
//    * Объект - ДанныеФормыСтруктура - основной реквизит формы
//   Событие     - Структура - сведения о событии:
//    * Имя        - Строка       - имя события формы
//    * Параметр   - Произвольный - параметр события формы
//    * Источник   - Произвольный - источник события формы
//    * Обработано - Булево       - признак что событие уже обработано
//
Процедура ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчики БГосИС элементов прикладных форм
//   Ограничения: не предполагает контекстный серверный вызов.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный - элемент-источник события "При изменении". Может быть любой идентификатор (примеры: поле ввода, строка).
//   ДополнительныеПараметры - Структура    - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая часть обработки события при изменении в формах списков.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма в которой возникло событие ПриИзменении.
//   Элемент - ТаблицаФормы - Элемент формы связанный со списком в котором возникло событие ПриИзменении.
Процедура СписокПриИзменении(Форма, Элемент) Экспорт

	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
// Обработчик переопределяемой команды формы.
//
// Параметры:
//  Форма   - УправляемаяФорма - форма объекта справочника или документа,
//  Команда - КомандаФормы     - команда формы.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет процедуру разбиения строки табличной части. Установить СтандартнаяОбработка = Ложь при реализации.
// 
// Параметры:
//  СтандартнаяОбработка - Булево - признак библиотечной обработки события
//  ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть объекта где происходит разбиение
//  ЭлементФормы   - ТаблицаФормы   - Элемент табличной части в пользовательском интерфейсе.
//  ПараметрыРазбиенияСтроки - См. ПараметрыРазбиенияСтроки
//  ОповещениеПослеРазбиения - ОписаниеОповещения - действия после разбиения (ожидаемый результат действия - новая строка)
Процедура РазбитьСтрокуТабличнойЧасти(СтандартнаяОбработка, ТабличнаяЧасть, ЭлементФормы, ПараметрыРазбиенияСтроки, ОповещениеПослеРазбиения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//   Результат - Структура - со свойствами Штрихкод, Количество
//   Параметр  - Массив    - входящие данные.
//
Процедура ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр) Экспорт
	
	ЗаполнитьЗначенияСвойств(
		Результат, 
		МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//   Результат - Массив - Массив структур со свойствами Штрихкод, Количество.
//   Параметр  - Массив - входящие данные.
//
Процедура ПреобразоватьДанныеСоСканераВМассив(Результат, Параметр) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Результат,
		МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
	
КонецПроцедуры

Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
	Иначе
		СобытияФормИСКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

// Вызывает процедуру обработки подбора, если произошло оповещение из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ИмяСобытия - Строка - имя события, о котором происходит оповещение,
//  Параметр - Произвольный - переданный в сообщение параметр,
//  Источник - ФормаКлиентскогоПриложения - форма, в которой произошло оповещение.
Процедура ОбработкаОповещенияПодборНоменклатуры(ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
Процедура ОбработкаВыбораПодборНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий формы.
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Номенклатура

// Выполняется при начале выбора номенклатуры. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец             - ФормаКлиентскогоПриложения  - Форма владелец (возможен владелец - элемент формы).
//  ВидыПродукции        - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции.
//  СтандартнаяОбработка - Булево - Использовать стандартную обработку события.
//  ОписаниеОповещения   - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//  Реквизиты            - Структура - параметры формы создания номенклатуры.
//
Процедура ПриНачалеВыбораНоменклатуры(Владелец, ВидыПродукции, СтандартнаяОбработка, ОписаниеОповещения = Неопределено, Знач Реквизиты = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ(Реквизиты = Неопределено) Тогда
		ДополнительныеПараметры = Реквизиты;
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Услуга", Ложь);
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		
	ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) Тогда
		ИмяРеквизита = ИнтеграцияИСМПБПВызовСервера.ИмяРеквизитаНоменклатурыПоВидуПродукцииИС(ВидыПродукции);
		ПараметрыОтбора.Вставить(ИмяРеквизита, Истина);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",    ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор",                   ПараметрыОтбора);
	ПараметрыФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Владелец,,,,ОписаниеОповещения);
	
КонецПроцедуры

// Выполняется при начале выбора упаковки номенклатуры. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец             - ФормаКлиентскогоПриложения  - Форма владелец (возможен владелец - элемент формы).
//  Номенклатура         - ОпределяемыйТип.Номенклатура - Номенклатура для отбора.
//  СтандартнаяОбработка - Булево - Использовать стандартную обработку события.
//  ОписаниеОповещения   - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//  Реквизиты            - Структура - параметры формы создания номенклатуры.
//
Процедура ПриНачалеВыбораУпаковки(Владелец, Номенклатура, СтандартнаяОбработка, ОписаниеОповещения=Неопределено, Знач Реквизиты = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Выполняется при выборе действия открытия формы для выбора элемента ссылочного типа в поле составного типа.
// Можно переопределить Параметры, например, ИмяФормы.
// Можно отключить стандартную обработку и определить свой обработчик выбора (не рекомендуется).
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения  - Форма из которой вызывается событие.
//  Элемент              - ПолеФормы - Поле формы для которого выполняется действие.
//  Параметры            - Структура - структура параметров из:
//   Вид      - Строка - вид метаданных, например, Справочник
//   Имя      - Строка - имя объекта метаданных, например, Организации
//   ИмяФормы - Строка - имя формы для выбора, например, ФормаВыбора.
//  СтандартнаяОбработка - Булево - Использовать стандартную обработку события.
//  ПараметрыОткрытияФормы - Структура - Параметры, которые будут переданы в открываемую форму.
//  ОписаниеОповещения     - ОписаниеОповещения - Описание оповещения о закрытии открываемой формы.
//
Процедура ПолеСоставногоТипаОткрытьФормуВыбора(Форма, Элемент, Параметры, СтандартнаяОбработка, ПараметрыОткрытияФормы, ОписаниеОповещения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Вызывает процедуру обработки выбора контрагента, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораКонтрагента(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Контрагенты") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеЭлементаФормыПоИмени(Элемент, Имя)
	
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("ТаблицаФормы") Тогда
		Результат = Неопределено;
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.Свойство(Имя, Результат);
		КонецЕсли;
		Возврат Результат;
	ИначеЕсли ТипЭлемента = Тип("ФормаКлиентскогоПриложения") Тогда
		Результат = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, Имя) Тогда
			Результат = Элемент[Имя];
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "Объект")
			И ТипЗнч(Элемент.Объект) = Тип("ДанныеФормыСтруктура") Тогда
			Элемент.Объект.Свойство(Имя, Результат);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Возврат ЗначениеЭлементаФормыПоИмени(Элемент.Родитель, Имя);
	
КонецФункции

#КонецОбласти
