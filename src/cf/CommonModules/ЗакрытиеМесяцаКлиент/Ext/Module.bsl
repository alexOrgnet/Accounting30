
#Область ПрограммныйИнтерфейс

#Область ПроверкаАктуальности

// Применяется при открытии формы, чтобы запускать проверку актуальности не сразу, а дать возможность форме открыться.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - где будет запускаться проверка актуальности.
//
Процедура ПодключитьПроверкуАктуальности(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.7, Истина);
	
КонецПроцедуры

// Запускает проверку актуальности данных, предварительно проверив условия для ее запуска.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - для чего требуется проверка актуальности.
//  Организация  - СправочникСсылка.Организации - учет по какой организации проверяется.
//  Период       - Дата - на какую дату нужны актуальные данные.
//
Процедура ПроверитьАктуальность(Форма, Организация, Период = Неопределено) Экспорт
	
	Если Не ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма) Тогда
		ПроверитьАктуальность_ИдентификаторЗадания(Форма, Организация, Период);
		Возврат;
	КонецЕсли;
	
	Если Не ЗакрытиеМесяцаВызовСервера.ПроверятьАктуальность() Тогда
		СкрытьПанельАктуализацииАвтоматически(Форма);
		Возврат;
	КонецЕсли;
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, Форма.УникальныйИдентификатор, Ложь);
	
	Если ВыполняемоеЗадание.УникальныйИдентификатор <> Неопределено Тогда
		// Не нужно проверять актуальность, т.к. запущена уже сама актуализация.
		Если Форма.ОписаниеЗаданияАктуализации <> Неопределено
		   И Форма.ОписаниеЗаданияАктуализации.ИдентификаторЗадания = ВыполняемоеЗадание.УникальныйИдентификатор Тогда
			// Актуализация запущена самой этой формой. Нужно лишь отобразить это состояние, если он не было отображено ранее.
			ВыполняемоеЗадание = Неопределено;
		КонецЕсли;
		
		ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);	
		Форма.Элементы.Актуализация.Видимость = Истина;
		
	Иначе
		// Проверим актуальность.
		ПроверитьАктуальностьДанных(Форма, Организация, Период);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на ссылку "Закрытие месяца" в отчете, открывает закрытие месяца на дату актуальности.
//
// Параметры:
//	НавигационнаяСсылка           - Строка - Строка навигационной ссылки, по которой произошло нажатие.
//	СтандартнаяОбработка          - Булево - Флаг стандартной обработки навигационной ссылки.
//	ФормаОтчета                   - ФормаКлиентскогоПриложения - Форма отчета, в котором проводилась проверка актуальности.
//	ПараметрыАктуализации         - Структура - Параметры, которые нужны для выполнения актуализации и возврата в отчет. 
//	                                Подробнее см. ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета().
//
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(НавигационнаяСсылка, СтандартнаяОбработка, ФормаОтчета, ПараметрыАктуализации) Экспорт
	
	Если СтрНайти(НавигационнаяСсылка, "ЗакрытиеМесяца") <> 0 Тогда

		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеМесяцаЗавершение", ФормаОтчета);
		ФормаЗакрытияМесяца = ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.Форма", ПараметрыАктуализации, , , , , Оповещение);
		ФормаОтчета.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеОтчетаОповещение", ФормаЗакрытияМесяца);
		
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ПомощникРасчетаНДС") <> 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыАктуализации.Вставить("ПериодСобытия", ПараметрыАктуализации.ДатаОкончанияАктуализации);
		ПараметрыАктуализации.Вставить("КонтекстныйВызов", Истина);
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеМесяцаЗавершение", ФормаОтчета);
		ФормаЗакрытияМесяца = ОткрытьФорму("Обработка.ПомощникРасчетаНДС.Форма.Форма", ПараметрыАктуализации, , , , , Оповещение);
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "АктуализацияДанныхРасчетНДС");
		
	КонецЕсли;
	
КонецПроцедуры

// Скрывает панель актуализации на форме.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - где расположена панель.
//  АвтоматическийВызов - Булево - Ложь, если скрытие в результате действия пользователя; Истина, если вызов из алгоритма.
//
Процедура СкрытьПанельАктуализации(Форма, АвтоматическийВызов = Ложь) Экспорт
	
	ЗакрытиеМесяцаКлиентСервер.СкрытьПанельАктуализации(Форма);
	
	Если НЕ АвтоматическийВызов Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "АктуализацияДанныхСкрыть");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

// Запускает актуализацию учета, предварительно проверив условия для ее запуска.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - для чего требуется актуальность.
//  Организация  - СправочникСсылка.Организации - учет по какой организации актуализируется.
//  Период       - Дата - на какую дату нужны актуальные данные.
//
Процедура Актуализировать(Форма, Организация, Период = Неопределено) Экспорт
	
	// Если настройки текущего отчета изменились после проверки актуальности в последний раз,
	// то запускать актуализацию не будем, т.к. возможно, что с новыми настройками актуализация должна
	// выполняться иным образом, чем со старыми.
	// Для проверки такой ситуации используем свойство ОтображениеСостояния табличного документа,
	// которое устанавливается при изменении настроек отчета.
	ПолеТабличногоДокумента = Форма.Элементы.Найти("Результат");
	Если ПолеТабличногоДокумента <> Неопределено 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ОтображениеСостояния.Видимость Тогда
			ПоказатьПредупреждение(, ОтображениеСостояния.Текст);
			СкрытьПанельАктуализации(Форма, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ИспользуетсяСтараяВерсияФоновыхЗаданийБСП = Не ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма);
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, Форма.УникальныйИдентификатор, ИспользуетсяСтараяВерсияФоновыхЗаданийБСП);
	
	Если ИспользуетсяСтараяВерсияФоновыхЗаданийБСП Тогда
		Актуализировать_ИдентификаторЗадания(ВыполняемоеЗадание, Форма, Организация, Период);
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);
	Если ВыполняемоеЗадание.УникальныйИдентификатор <> Неопределено Тогда
		Форма.Элементы.Актуализация.Видимость = Истина;
	КонецЕсли;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                               = Организация;
	ПараметрыАктуализации.Период                                    = Период;
	ПараметрыАктуализации.УникальныйИдентификаторФормы              = Форма.УникальныйИдентификатор;
	ПараметрыАктуализации.ПроверятьКонстантуАктуальностиДанныхУчета = Истина;
	Если Форма.ОписаниеЗаданияАктуализации <> Неопределено Тогда // задание дано этим отчетом
		
		ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(Форма.ОписаниеЗаданияАктуализации.ИдентификаторЗадания);
		
	ИначеЕсли ВыполняемоеЗадание.УникальныйИдентификатор <> Неопределено Тогда // задание дано другим окном или сеансом
		
		ПараметрыАктуализации.ИдентификаторЗадания = ВыполняемоеЗадание.УникальныйИдентификатор;
		
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет") Тогда // Актуальность может проверяться в форме обработки
		ОтборыРасчетыСКонтрагентами = БухгалтерскиеОтчетыКлиентСервер.ОпределитьПараметрыОтчетаРасчетыСКонтрагентами(Форма);
		ПараметрыАктуализации.ОтборыРасчетыСКонтрагентами = ОтборыРасчетыСКонтрагентами;
		ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(Форма, ОтборыРасчетыСКонтрагентами, ПараметрыАктуализации);
		УстановитьРежимАктуализацииВесьПериод(ПараметрыАктуализации);
	КонецЕсли;
	
	ОписаниеЗаданияАктуализации = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	Форма.ОписаниеЗаданияАктуализации = ОписаниеЗаданияАктуализации;
	Форма.ПрогрессорАктуализации = "0%.";
	
	ПараметрыКонтекста = Новый Структура;
	ПараметрыКонтекста.Вставить("Форма",       Форма);
	ПараметрыКонтекста.Вставить("Организация", Организация);
	ПараметрыКонтекста.Вставить("Период",      Период);
	
	ОповещениеОЗавершенииАктуализации = Новый ОписаниеОповещения("ОбработатьРезультатАктуализации", ЭтотОбъект, ПараметрыКонтекста);
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОбновитьПроцентПрогресса", ЭтотОбъект, ПараметрыКонтекста);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);  
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОписаниеЗаданияАктуализации, ОповещениеОЗавершенииАктуализации, ПараметрыОжидания);
	
КонецПроцедуры

// Прерывает актуализацию учета.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - где запускалась актуализация.
//  Организация  - СправочникСсылка.Организации - учет по какой организации актуализируется.
//  Период       - Дата - на какую дату нужны были актуальные данные.
//
Процедура ОтменитьАктуализацию(Форма, Организация, Период = Неопределено) Экспорт
	
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма) Тогда
		
		Если Форма.ОписаниеЗаданияАктуализации <> Неопределено Тогда
					
			ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(Форма.ОписаниеЗаданияАктуализации.ИдентификаторЗадания);
			Форма.ОписаниеЗаданияАктуализации = Неопределено;
			
		КонецЕсли;
		
	Иначе
	
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(Форма.ИдентификаторЗаданияАктуализации);
		Форма.ИдентификаторЗаданияАктуализации = Неопределено;
		
	КонецЕсли;
	
	ПроверитьАктуальностьДанных(Форма, Организация, Период);
	
	ПараметрыОповещения = Новый Структура("Организация", Организация);
	Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	
КонецПроцедуры

// Показывает описание ошибок, возникших в ходе актуализации.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, из которой вызвана актуализация.
//  РезультатАктуализации - Структура - результат выполнения фонового задания актуализации,
//                                      см. ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации().
//  ТекстПредупреждения   - Строка - текст выводимого предупреждения об ошибке; если не передан - будет показан текст по умолчанию.
//
Процедура ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации, Знач ТекстПредупреждения = "") Экспорт
	
	Если РезультатАктуализации.Выполнено
	   И Не РезультатАктуализации.ВывестиИнформациюУведомлений Тогда
		Возврат;
	КонецЕсли;
	
	// Ошибки восстановления последовательности.
	Если РезультатАктуализации.Свойство("АдресХранилищаСОшибками") Тогда
		
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(Форма, РезультатАктуализации.АдресХранилищаСОшибками);
		
	// Ошибки закрытия месяца.
	ИначеЕсли РезультатАктуализации.Свойство("РегламентнаяОперацияСОшибками") Тогда 
	
		ОткрытьФормуОшибок(РезультатАктуализации.РегламентнаяОперацияСОшибками);
		
	Иначе
		
		Если РезультатАктуализации.Свойство("СообщенияПользователю") Тогда
			Для каждого ТекстСообщения Из РезультатАктуализации.СообщенияПользователю Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		Если РезультатАктуализации.Свойство("ВидОперации") Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при выполнении операции ""%1"" за %2 г.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				РезультатАктуализации.ВидОперации,
				Формат(РезультатАктуализации.ПериодРегистрации, "ДФ='MMMM yyyy'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		ТекстПредупреждения = НСтр("ru='Актуализация не выполнена. Обнаружены ошибки.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

// Открывает форму ошибок регламентной операции.
//
// Параметры:
//  Ссылка	 - Ссылка на регламентную операцию с ошибками.
//
Процедура ОткрытьФормуОшибок(Ссылка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Ссылка);
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ИндикацияХодаВыполнения

// Конструктор для описания процесса длительной операции актуализации учета.
//
// Возвращаемое значение:
//   Структура   - значения по-умолчанию для описания операции.
//
Функция ОписаниеПроцессаДлительнойОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьАктуализациюРасчетовСКонтрагентами", Ложь);
	Результат.Вставить("ИспользоватьЗакрытиеМесяца", Ложь);
	Результат.Вставить("ИспользоватьПерепроведениеДокументов", Ложь);
	Результат.Вставить("ИспользоватьПереносГраницы", Ложь);
	Результат.Вставить("КоличествоМесяцев", 1);
	Результат.Вставить("КоличествоОрганизаций", 1);
	Результат.Вставить("Месяц", '0001-01-01');
	Результат.Вставить("Организация"); // СправочникСсылка.Организации
	
	Возврат Результат;
	
КонецФункции

// Открывает форму индикации хода длительной операции.
// 
// Параметры:
//  ВладелецФормы        - ФормаКлиентскогоПриложения - форма, из которой производится открытие. 
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания.
//  ОписаниеПроцесса     - Структура - см. ОписаниеПроцессаДлительнойОперации()
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения     - ссылка на открытую форму.
// 
Функция ОткрытьФормуДлительнойОперации(ВладелецФормы, ИдентификаторЗадания, ОписаниеПроцесса) Экспорт
	
	ПараметрыФормыИндикации = Новый Структура;
	ПараметрыФормыИндикации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормыИндикации, ОписаниеПроцесса, Ложь);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ИндикацияХодаПроцесса", ПараметрыФормыИндикации, ВладелецФормы);
	
	Возврат ФормаДлительнойОперации;
	
КонецФункции

// Подготоваливает оповещение, которое будет вызываться БСП после получения событий от фонового задания.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма с индикатором прогресса длительной операции.
//
Функция ОповещениеОПрогрессеВыполнения(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый ОписаниеОповещения("ОбновитьФормуДлительнойОперации", Форма);
	
КонецФункции

// Проверяет, был ли сделан очередной шаг длительной операции. Вызывается из обработчика ожидания.
// Выполняет малые продвижения, служащие для интерактивности, а не связанные с событиями фонового задания.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма с индикатором прогресса длительной операции.
//  ОписаниеФоновогоЗадания - Структура - см. ДлительныеОперации.ВыполнитьФункцию()
//
Процедура ПроверитьПрогрессЗадания(Форма, ОписаниеФоновогоЗадания) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПроверитьПрогрессЗадания(ОписаниеФоновогоЗадания);
	
КонецПроцедуры

// Закрывает форму индикации хода длительной операции.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма с индикатором прогресса длительной операции.
//
Процедура ЗакрытьФормуДлительнойОперации(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЗакрытьФормуДлительнойОперации();
	Форма = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область АктуализацияДанныхУстарело

Процедура ПроверитьВыполнениеАктуализацииОтчета(Форма, Организация, Период = Неопределено) Экспорт

	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(Форма.ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации_ИдентификаторЗадания(Форма, Организация, Период);
		Возврат;
	КонецЕсли;
		
	ОбновитьПроцентПрогресса_ИдентификаторЗадания(Форма);
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
		Форма.ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);

КонецПроцедуры

Процедура ПроверитьЗавершениеАктуализации(Форма, Организация, Период = Неопределено) Экспорт
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, Форма.УникальныйИдентификатор, Истина);
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
		ПроверитьАктуальностьДанных(Форма, Организация, Период);
	Иначе
		ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИндикацияХодаВыполненияУстарело

// Читает сообщение от фонового задания и обновляет индикатор у составной длительной операции.
//
// Параметры:
//  ФормаСоставнойДлительнойОперации - ФормаКлиентскогоПриложения - форма с прогресс-баром.
//
// Возвращаемое значение:
//   Неопределено - если фоновое задание не найдено.
//   Булево      - Истина, если сообщение от фонового задания было; иначе Ложь.
//
Функция ВыполненШагДлительнойОперации(Форма) Экспорт
	
	Если Форма = Неопределено Тогда // форма уже закрыта
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторЗадания = Форма.ИдентификаторЗадания;
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем долю (число от 0 до 1) шагов, которые сделаны.
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗадания);
	Если Не Прогресс.ПрогрессОбновлен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполненШаг = Неопределено;
	Если Прогресс.ЗаданиеВыполнено Тогда
		
		// фоновое задание не найдено
		
	ИначеЕсли Прогресс.Свойство("ДополнительныеПараметры")
		И ТипЗнч(Прогресс.ДополнительныеПараметры) = Тип("Структура") Тогда // Отражаем информацию о выполнении части операции
		
		ТекстСообщения = ?(Прогресс.Свойство("Текст"), Прогресс.Текст, "");
		
		Форма.ОбновитьСостояниеВыполнения(Прогресс.ДополнительныеПараметры, ТекстСообщения);

		ВыполненШаг = Истина;
		
	Иначе // немного продвигаем индикатор на один из условных этапов внутри шага
		
		Форма.ПродвинутьПрогрессБезСобытия();
		ВыполненШаг = Ложь;
		
	КонецЕсли;
	
	Возврат ВыполненШаг;
	
КонецФункции

#КонецОбласти

#Область СборСтатистики

// Устанавливает реквизиты, связанные со сбором статистики и при необходимости подключает процедуру сбора статистики.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Событие	 - Строка - Имя события.
//  Команда	 - Неопределено
//           - Строка - Имя выполняемой команды.
//
Процедура СобратьСтатистику(Форма, Событие, Команда = Неопределено) Экспорт
	
	Если Не Форма.СобиратьСтатистику Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСтатистику = Истина;
	Если Событие = "ФормаОткрытаДляАктивныхИзменений" Тогда
		Если Команда = Неопределено
			Или Команда = "ПомощникНачисленияРезервовПоОплатеТруда"
			Или Команда = "НачислениеЗарплаты"
			Или Команда = "НачислениеРезервовПоОплатеТруда"
			Или Команда = "ПомощникНДС"
			Или Команда = "Выполнить"
			Или Команда = "ОтменитьПосле"
			Или Команда = "Отменить"
			Или Команда = "Пропустить"
			Или Команда = "АвансыПокупателей" Тогда
			Форма.ФормаОткрытаДляАктивныхИзменений = Истина;
		Иначе
			ЗаписатьСтатистику = Ложь;
		КонецЕсли;
	ИначеЕсли Событие = "ВыбраноЗакрытиеТолькоТекущегоМесяца" Тогда
		Форма.ВыбраноЗакрытиеТолькоТекущегоМесяца = Истина;
	ИначеЕсли Событие = "ВыбраноЗакрытиеМесяца" Тогда
		Форма.ВыбраноЗакрытиеМесяца = Истина;
	ИначеЕсли Событие = "ВыбраноПерепроведениеДокументов" Тогда
		Форма.ВыбраноПерепроведениеДокументов = Истина;
	ИначеЕсли Событие = "ПоследовательныйПереходВСледующийПериод" Тогда
		Форма.ПоследовательныйПереходВСледующийПериод = Истина;
	ИначеЕсли Событие = "ПоследовательныйПереходВПредыдущийПериод" Тогда
		Форма.ПоследовательныйПереходВПредыдущийПериод = Истина;
	КонецЕсли;
	Если ЗаписатьСтатистику Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗаписатьСтатистику", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Формирует имя события и вызывает процедуры записи событий статистики.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура ЗаписатьСтатистику(Форма) Экспорт
	
	ИмяОперации = "";
	Если Форма.ПоследовательныйПереходВСледующийПериод Тогда
		ИмяОперации = "ПоследовательныйПереходВСледующийПериод";
		Форма.СобиратьСтатистику = Ложь;
	ИначеЕсли Форма.ПоследовательныйПереходВПредыдущийПериод Тогда
		ИмяОперации = "ПоследовательныйПереходВПредыдущийПериод";
		Форма.СобиратьСтатистику = Ложь;
	ИначеЕсли Форма.ВыбраноЗакрытиеМесяца Тогда
		ИмяОперации = "ВыбраноЗакрытиеМесяца";
		Форма.СобиратьСтатистику = Ложь;
	ИначеЕсли Форма.ВыбраноЗакрытиеТолькоТекущегоМесяца Тогда
		Если Не Форма.ЗаписанныеСобытия.ИзмененПериодВыбраноЗакрытиеМесяца Тогда
			ИмяОперации = "ИзмененПериодВыбраноЗакрытиеМесяца";
			Форма.ЗаписанныеСобытия.ИзмененПериодВыбраноЗакрытиеМесяца = Истина;
		КонецЕсли;
	ИначеЕсли Форма.ВыбраноПерепроведениеДокументов Тогда
		ИмяОперации = "ВыбраноПерепроведениеДокументов";
		Форма.СобиратьСтатистику = Ложь;
	ИначеЕсли Форма.ФормаОткрытаДляАктивныхИзменений
		И Не Форма.ЗаписанныеСобытия.ФормаОткрытаДляАктивныхИзменений Тогда
		ИмяОперации = "ФормаОткрытаДляАктивныхИзменений";
		Форма.ЗаписанныеСобытия.ФормаОткрытаДляАктивныхИзменений = Истина;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ИмяОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.ИмяСобытия(ИмяОперации);
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяСобытия);
	
	Если Форма.ФормаОткрытаДляАктивныхИзменений Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ФормаОткрытаДляАктивныхИзменений = Истина;
	Форма.ЗаписанныеСобытия.ФормаОткрытаДляАктивныхИзменений = Истина;
	
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.ИмяСобытия("ФормаОткрытаДляАктивныхИзменений");
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяСобытия);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьПроцентПрогресса(ДлительнаяОперация, ПараметрыКонтекста) Экспорт
	
	Если ТипЗнч(ДлительнаяОперация) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбновитьПроцентПрогресса_ИдентификаторЗадания(ДлительнаяОперация, ПараметрыКонтекста);
		Возврат;
	КонецЕсли;
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ДлительнаяОперация);
	Если Не Прогресс.ПрогрессОбновлен Тогда
		Возврат;
	КонецЕсли;
	
	// Все проценты выше 99 отображаются как "99%".
	ПараметрыКонтекста.Форма.ПрогрессорАктуализации = Формат(Прогресс.Процент, "ЧЦ=2; ЧН=0; ЧГ=0") + "%.";
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);

	Форма = ДополнительныеПараметры.Форма;
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма) Тогда
		Форма.ОписаниеЗаданияАктуализации = Неопределено;
	КонецЕсли;
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(РезультатПроверки) <> Тип("Структура") Тогда
		РезультатПроверки = Новый Структура;
	КонецЕсли;
	Если Не РезультатПроверки.Свойство("ТребуетсяАктуализация") Тогда
		РезультатПроверки.Вставить("ТребуетсяАктуализация", Ложь);
	КонецЕсли;
		
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		
		Если ДополнительныеПараметры.ПроверятьАктуальностьНДС Тогда
			ПроверитьАктуальностьНДС(ДополнительныеПараметры.Организация, Форма);
		Иначе
			Элементы.Актуализация.Видимость = Ложь;
			ИнформированиеОтрицательныеОстаткиКлиент.ЗапуститьПроверкуОтрицательныхОстатковВФоне(Форма);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
	МассивПодстрок = Новый Массив;
	ТекстДанныеУчетаНеАктуальны = НСтр("ru='Данные учета неактуальны с '");
	МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстДанныеУчетаНеАктуальны));
	МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Формат(Форма.ДатаАктуальности, "ДЛФ=D"), Новый Шрифт(,, Истина)));
	МассивПодстрок.Добавить(Новый ФорматированнаяСтрока("."));
	
	Если НЕ РезультатПроверки.АктуализацияДоступна Тогда
		Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
	Иначе
		Если РезультатПроверки.АктуализацияВозможна Тогда
			Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
			Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		Иначе
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru='Рекомендуется выполнить '")));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"),,,, "e1cib/app/Обработка.ЗакрытиеМесяца"));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' и сформировать отчет повторно.'")));
			Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
			Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		КонецЕсли;
	КонецЕсли;

	Элементы.Актуализировать.Видимость = РезультатПроверки.АктуализацияДоступна И РезультатПроверки.АктуализацияВозможна;
	Элементы.ТекстПриНеобходимостиАктуализации.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);

	СброситьСостояниеАктуализации(Элементы);
	Элементы.ТребуетсяАктуализация.Видимость = Истина;
	Элементы.Актуализация.Видимость = Истина;
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьПанельАктуализацииАвтоматически(Форма) Экспорт
	
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма) Тогда
		НужноСкрытьПанель = (Форма.ОписаниеЗаданияАктуализации = Неопределено);
	Иначе
		НужноСкрытьПанель = Не ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации);
	КонецЕсли;
	
	Если НужноСкрытьПанель Тогда
		СкрытьПанельАктуализации(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для элемента формы текст при обнаружении, что актуализации не может быть выполнена на текущей формы, когда
// актуализация уже запущена в другом сеансе или в другой форме.
//
// Параметры:
//  ВыполняемоеЗаданиеАктуализации - Структура - см. ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации()
//  НадписьНаФорме - Строка - текст баннера, отображаемого в панели формы.
//  НазваниеОбъектаНеактуальности - Строка - объект, чьи данные неактуальны.
//
Процедура УстановитьТекстПриОжиданииАктуализации(ВыполняемоеЗаданиеАктуализации, НадписьНаФорме, НазваниеОбъектаНеактуальности = "") Экспорт
	
	Если ПустаяСтрока(НазваниеОбъектаНеактуальности) Тогда
		НазваниеОбъектаНеактуальности = НСтр("ru = 'этого отчета'");
	КонецЕсли;
	
	Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		// Актуализация выполняется другим пользователем в файловом режиме.
		НазваниеСубъектаАктуализации = НСтр("ru='другим пользователем'");
		
	ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиент.ТекущийПользователь() Тогда
		// Актуализация выполняется другим пользователем в клиент-серверном режиме.
		НазваниеСубъектаАктуализации = СтрШаблон(НСтр("ru='пользователем %1'"), ВыполняемоеЗаданиеАктуализации.Пользователь);

	Иначе
		// Актуализация выполняется текущим пользователем в другом отчете.
		НазваниеСубъектаАктуализации = НСтр("ru='в другом отчете'");
		
	КонецЕсли;
	
	ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная %1, еще не закончилась. Данные %2 могут быть неактуальны.'");
	НадписьНаФорме = СтрШаблон(ТекстПриАктуализации, НазваниеСубъектаАктуализации, НазваниеОбъектаНеактуальности);
	
КонецПроцедуры

Процедура ОбработатьРезультатАктуализации(Результат, ПараметрыКонтекста) Экспорт
	
	Перем РезультатАктуализации;
	
	Форма = ПараметрыКонтекста.Форма;
	Если Результат = Неопределено
	 Или Результат.Статус = "Ошибка" Тогда
		// Ошибка на уровне фонового задания.
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		Если Результат <> Неопределено Тогда
			
			СообщенияПользователю = Новый Массив;
			СообщенияПользователю.Добавить(Результат.ПодробноеПредставлениеОшибки);
			Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
				СообщенияПользователю.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
			ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации, Результат.КраткоеПредставлениеОшибки);
			
		КонецЕсли;
		Форма.ОписаниеЗаданияАктуализации = Неопределено;
		
	Иначе
		// Ошибка в процессе выполнения актуализации.
		ОписаниеЗаданияАктуализации = Форма.ОписаниеЗаданияАктуализации;
		Если ОписаниеЗаданияАктуализации <> Неопределено
		   И ЭтоАдресВременногоХранилища(ОписаниеЗаданияАктуализации.АдресРезультата) Тогда
			РезультатАктуализации = ПолучитьИзВременногоХранилища(ОписаниеЗаданияАктуализации.АдресРезультата);
			УдалитьИзВременногоХранилища(ОписаниеЗаданияАктуализации.АдресРезультата);
		КонецЕсли;
		Форма.ОписаниеЗаданияАктуализации = Неопределено;
		
		Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
		 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
		КонецЕсли;

		ВывестиОшибки = Не РезультатАктуализации.Выполнено
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатАктуализации, "ВывестиИнформациюУведомлений", Ложь);
		Если ВывестиОшибки 
		   И Форма.Элементы.Найти("ТекстПриАктуализации") <> Неопределено
		   И СтрНайти(Форма.Элементы.ТекстПриАктуализации.Заголовок, НСтр("ru = 'еще не закончилась'")) <> 0 Тогда
			// Каждая форма должна содержать декорацию ТекстПриАктуализации. Если заголовок установлен кодом процедуры
			// УстановитьТекстПриОжиданииАктуализации() , то мы не должны дублировать сообщение из заголовка выводом окна ошибки.
			ВывестиОшибки = Ложь;
		КонецЕсли;
		Если ВывестиОшибки Тогда
			ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации);
		КонецЕсли;
		
	КонецЕсли;
	
	// Оповестим другие формы о событии актуализации.
	ПараметрыОповещения = Новый Структура("Организация", ПараметрыКонтекста.Организация);
	ИмяСобытия = "АктуализацияЗавершенаУспешно";
	Если РезультатАктуализации.Выполнено Тогда
		Если Не РезультатАктуализации.ПолнаяАктуализация Тогда
			// После повторного формирования будут актуальны те данные, которые отображаются в текущем отчете.
			// При полной актуализации были бы актуальны все данные.
			БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(
				Форма, ПараметрыКонтекста.Организация, РезультатАктуализации.ПределАктуализации, ИмяСобытия, ПараметрыОповещения, Форма);
			ИмяСобытия = "";
		КонецЕсли;
	Иначе 
		Форма.Элементы.Актуализация.Видимость = Истина;
		ИмяСобытия = "АктуализацияОтменена";
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяСобытия) Тогда
		Оповестить(ИмяСобытия, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияАктуализации(Форма, Организация, Период, ИмяСобытия, Параметр, Источник) Экспорт
	
	Элементы = Форма.Элементы;
	
	// В формах отчетов информация об актуальности данных выводится, 
	// только если поле Результат доступно для просмотра.
	Если Элементы.Найти("РезультатСхемы") <> Неопределено Тогда
		ВыводитьИнформацию = Истина;
	Иначе
		Попытка
			ВыводитьИнформацию = Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
		Исключение
			ВыводитьИнформацию = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ВыводитьИнформацию Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "АктуализацияЗавершенаУспешно" И Организация = Параметр.Организация Тогда
		
		СброситьСостояниеАктуализации(Элементы);
		
		ПорядокАктуализации = ЗакрытиеМесяцаВызовСервера.ПорядокАктуализацииОтчета(Форма.ИмяФормы);
		
		Если ПорядокАктуализации = 2 Тогда
			
			РеквизитыСтандартныхОтчетов = Новый Структура("Счет");
			Отчет = Форма.Отчет;
			ЗаполнитьЗначенияСвойств(РеквизитыСтандартныхОтчетов, Отчет);
			
			Если ЗначениеЗаполнено(РеквизитыСтандартныхОтчетов.Счет)
			   И УчетНДСВызовСервера.ЭтоСчетУчетаНДС(РеквизитыСтандартныхОтчетов.Счет) Тогда
				ПроверитьАктуальностьНДС(Организация, Форма);
			Иначе
				Элементы.ДанныеАктуализированы.Видимость = Истина;
				Элементы.Актуализация.Видимость = Истина;
			КонецЕсли;
			
		ИначеЕсли ПорядокАктуализации = 3 Тогда
			ПроверитьАктуальностьНДС(Организация, Форма);
		Иначе
			Элементы.ДанныеАктуализированы.Видимость = Истина;
			Элементы.Актуализация.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АктуализацияОтменена" И Организация = Параметр.Организация Тогда
		
		Если Элементы.Актуализация.Видимость Тогда
			ПроверитьАктуальность(Форма, Организация, Период);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАктуальностиУстарело

Процедура ПроверитьАктуальность_ИдентификаторЗадания(Форма, Организация, Период = Неопределено)
	
	Если НЕ ЗакрытиеМесяцаВызовСервера.ПроверятьАктуальность() Тогда
		СкрытьПанельАктуализацииАвтоматически(Форма);
		Возврат;
	КонецЕсли;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, Форма.УникальныйИдентификатор, Истина);
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		ПроверитьАктуальностьДанных(Форма, Организация, Период);
	Иначе
		Если Форма.ИдентификаторЗаданияАктуализации = ВыполняемоеЗадание.УникальныйИдентификатор Тогда // Задание дано этим отчетом.
			ОтобразитьСостояниеАктуализации(Форма);	
			ОбновитьПроцентПрогресса_ИдентификаторЗадания(Форма, Неопределено);
			Форма.Элементы.Актуализация.Видимость = Истина;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации", 1, Истина);
		Иначе // Задание дал другой отчет.
			ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);	
			Форма.Элементы.Актуализация.Видимость = Истина;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область АктуализацияДанныхУстарело

Процедура Актуализировать_ИдентификаторЗадания(ВыполняемоеЗадание, Форма, Организация, Период = Неопределено)
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		АктуализироватьДанные(Форма, Организация, Период);
	Иначе
		ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);	
		Форма.Элементы.Актуализация.Видимость = Истина;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьДанные(Форма, Организация, Период = Неопределено)
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации(Форма);
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                               = Организация;
	ПараметрыАктуализации.Период                                    = Период;
	ПараметрыАктуализации.ИдентификаторЗадания                      = Форма.ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы              = Форма.УникальныйИдентификатор;
	ПараметрыАктуализации.ПроверятьКонстантуАктуальностиДанныхУчета = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет") Тогда // Актуальность может проверяться в форме обработки
		ОтборыРасчетыСКонтрагентами = БухгалтерскиеОтчетыКлиентСервер.ОпределитьПараметрыОтчетаРасчетыСКонтрагентами(Форма);
		ПараметрыАктуализации.ОтборыРасчетыСКонтрагентами = ОтборыРасчетыСКонтрагентами;
		ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(Форма, ОтборыРасчетыСКонтрагентами, ПараметрыАктуализации);
		УстановитьРежимАктуализацииВесьПериод(ПараметрыАктуализации);
	КонецЕсли;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	Форма.АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.Статус <> "Выполняется" Тогда
		ОбработатьРезультатАктуализации_ИдентификаторЗадания(Форма, Организация, Период);
	Иначе
		Форма.ПрогрессорАктуализации = "0%.";
		Форма.ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации", 1, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПроцентПрогресса_ИдентификаторЗадания(Форма, Знач ИдентификаторЗадания = Неопределено)
	Перем Процент;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИдентификаторЗадания = Форма.ИдентификаторЗаданияАктуализации;
	КонецЕсли;
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗадания);
	Если Прогресс.Свойство("Процент", Процент)
	   И Процент <> 0 Тогда // все проценты выше 99 отображаются как "99%"
		Форма.ПрогрессорАктуализации = Формат(Процент, "ЧЦ=2; ЧН=0; ЧГ=0") + "%.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатАктуализации_ИдентификаторЗадания(Форма, Организация, Период = Неопределено)
	
	Перем РезультатАктуализации;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если ЭтоАдресВременногоХранилища(Форма.АдресХранилищаАктуализации) Тогда
		РезультатАктуализации = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаАктуализации);
		УдалитьИзВременногоХранилища(Форма.АдресХранилищаАктуализации);
	КонецЕсли;
	Форма.АдресХранилищаАктуализации = "";
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	КонецЕсли;

	Если РезультатАктуализации.Свойство("ВывестиИнформациюУведомлений")
		И РезультатАктуализации.ВывестиИнформациюУведомлений
	 Или Не РезультатАктуализации.Выполнено Тогда
		ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации);
	КонецЕсли;
	
	Форма.ИдентификаторЗаданияАктуализации = Неопределено;
	
	// Оповестим другие формы о событии актуализации.
	ПараметрыОповещения = Новый Структура("Организация", Организация);
	ИмяСобытия = "АктуализацияЗавершенаУспешно";
	Если РезультатАктуализации.Выполнено Тогда
		Если Не РезультатАктуализации.ПолнаяАктуализация Тогда
			// После повторного формирования будут актуальны те данные, которые отображаются в текущем отчете.
			// При полной актуализации были бы актуальны все данные.
			БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(
				Форма, Организация, РезультатАктуализации.ПределАктуализации, ИмяСобытия, ПараметрыОповещения, Форма);
			ИмяСобытия = "";
		КонецЕсли;
	Иначе 
		Форма.Элементы.Актуализация.Видимость = Истина;
		ИмяСобытия = "АктуализацияОтменена";
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяСобытия) Тогда
		Оповестить(ИмяСобытия, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = (ВыполняемоеЗаданиеАктуализации = Неопределено
		Или ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма)
		   И ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор = Неопределено);
	
	Элементы = Форма.Элементы;
	Элементы.РисПриАктуализации.Видимость     = ИдетАктуализация;
	Элементы.ПрогрессорАктуализации.Видимость = ИдетАктуализация;
	Элементы.ОтменитьАктуализацию.Видимость   = ИдетАктуализация;
	
	Если ИдетАктуализация Тогда
		
		ВертикальноеПоложениеТекста = ВертикальноеПоложениеЭлемента.Центр;
		ЦветФона = Новый Цвет;
		Элементы.ТекстПриАктуализации.Заголовок = НСтр("ru='Данные этого отчета могут измениться.'");
		
	Иначе // Актуализация выполняется в другом отчете или другим пользователем.
		// В фоновом задании запущено ожидание завершения ранее начатой актуализации.
		ВертикальноеПоложениеТекста = ВертикальноеПоложениеЭлемента.Низ;
		ЦветФона = ЗакрытиеМесяцаВызовСервера.ПолучитьПредупреждающийЦвет();
		УстановитьТекстПриОжиданииАктуализации(ВыполняемоеЗаданиеАктуализации, Элементы.ТекстПриАктуализации.Заголовок); 
		
	КонецЕсли;
	Элементы.ТекстПриАктуализации.ВертикальноеПоложение  = ВертикальноеПоложениеТекста;
	Элементы.СкрытьПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
	Элементы.ИдетАктуализация.ЦветФона                   = ЦветФона;
	
	СброситьСостояниеАктуализации(Элементы);
	Элементы.ИдетАктуализация.Видимость = Истина;
	
КонецПроцедуры

Процедура ПроверитьАктуальностьДанных(Форма, Организация, Период = Неопределено)
	
	Элементы = Форма.Элементы;
	
	СброситьСостояниеАктуализации(Элементы);
	Элементы.ИдетПроверкаАктуальности.Видимость = Истина;
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Организация;
	ПараметрыПроверки.Период                       = Период;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ПараметрыПроверки.ПроверятьКонстантуАктуальностиДанныхУчета = Истина;
	
	ПроверятьАктуальностьНДС = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет") Тогда
	// Актуальность может проверяться в форме обработки
	
		ПорядокАктуализации = ЗакрытиеМесяцаВызовСервера.ПорядокАктуализацииОтчета(Форма.ИмяФормы);
		
		Если ПорядокАктуализации = 1
		 Или ПорядокАктуализации = 2
			И Форма.Отчет.Свойство("Счет") И УчетНДСВызовСервера.ЭтоСчетУчетаНДС(Форма.Отчет.Счет) Тогда
			// Актуализация НДС
			ПроверитьАктуальностьНДС(Организация, Форма);
			Возврат;
			
		КонецЕсли;
		
		// Актуализация БУ и НДС
		ПроверятьАктуальностьНДС = (ПорядокАктуализации = 3);
		
		ОтборыРасчетыСКонтрагентами = БухгалтерскиеОтчетыКлиентСервер.ОпределитьПараметрыОтчетаРасчетыСКонтрагентами(Форма);
		ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(Форма, ОтборыРасчетыСКонтрагентами, ПараметрыПроверки);
		ПараметрыПроверки.ОтборыРасчетыСКонтрагентами = ОтборыРасчетыСКонтрагентами;
		УстановитьРежимАктуализацииВесьПериод(ПараметрыПроверки);
		
	КонецЕсли;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяОписаниеЗаданияАктуализации(Форма) Тогда
		Форма.ОписаниеЗаданияАктуализации = РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                    Форма);
	ДополнительныеПараметры.Вставить("Организация",              Организация);
	ДополнительныеПараметры.Вставить("ПроверятьАктуальностьНДС", ПроверятьАктуальностьНДС);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура СброситьСостояниеАктуализации(Элементы)
	
	Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
	Элементы.ТребуетсяАктуализация.Видимость    = Ложь;
	Элементы.ИдетАктуализация.Видимость         = Ложь;
	Элементы.ДанныеАктуализированы.Видимость    = Ложь;

КонецПроцедуры

Процедура ПроверитьАктуальностьНДС(Организация, Форма)
	
	ПараметрыОтчета = Форма.Отчет;
	Элементы        = Форма.Элементы;
	
	Если ПараметрыОтчета.Свойство("НачалоПериода")
		И ПараметрыОтчета.Свойство("КонецПериода") Тогда 
		ТребуетсяАктуализацияРасчетаНДС = УчетНДСВызовСервера.ТребуетсяАктуализацияРасчетаНДС(
			Организация, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	Иначе
		ТребуетсяАктуализацияРасчетаНДС = Ложь;
	КонецЕсли;
	
	Если ТребуетсяАктуализацияРасчетаНДС Тогда
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Данные учета НДС неактуальны.'")));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru='Рекомендуется выполнить '")));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='расчет НДС'"),,,, "e1cib/app/Обработка.ПомощникРасчетаНДС"));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' и сформировать отчет повторно.'")));
		
		Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки   = ОтображениеПодсказки.Нет;
		Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		
		Элементы.ТекстПриНеобходимостиАктуализации.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);
		
		СброситьСостояниеАктуализации(Элементы);
		
		Элементы.ТребуетсяАктуализация.Видимость = Истина;
		Элементы.Актуализация.Видимость          = Истина;
		Элементы.Актуализировать.Видимость       = Ложь;
		
	Иначе
		Элементы.Актуализация.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

// Установка режима актуализации на весь период, включая текущий месяц. Такой режим необходим при актуализации через некоторые отчеты.
// Обычно отчеты не имеет смысла формировать за период, включающий еще не закончившийся календарный месяц.
// Корректные данные в таких отчетах будут только после того, как в систему введены все документы.
// Поэтому и актуализация за текущий месяц не выполняется.
// Но для некоторых отчетов такого ограничения нет и для них имеет смысл выполнять актуализацию за весь период, включая не текущий (еще не закончившийся) календарный месяц.
//
// Параметры:
//  ПараметрыАктуализации	 - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации() 
//
Процедура УстановитьРежимАктуализацииВесьПериод(ПараметрыАктуализации)
	
	УчетРасходаМатериаловПоДаннымПродаж = РасчетВыпускаПоДаннымПродажВызовСервера.ПроданаВыпущеннаяПродукция(
		ПараметрыАктуализации.Организация, ПараметрыАктуализации.Период);
	Если Не УчетРасходаМатериаловПоДаннымПродаж Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАктуализации.АктуализироватьВесьПериод = Истина;
	
	// В режиме расхода материалов по данным продаж, регламентные операции списания 
	// проводят движения ТМЦ за весь месяц, поэтому необходимо провести расчет, включая
	// регламентные операции.
	Если ЗначениеЗаполнено(ПараметрыАктуализации.Период) Тогда
		ПараметрыАктуализации.Период = КонецМесяца(ПараметрыАктуализации.Период);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(Форма, ОтборыРасчетыСКонтрагентами, ПараметрыЗадания)

	Если ОтборыРасчетыСКонтрагентами.ЕстьВалюта Тогда
		// В настройках отчета включен показ валютной суммы, но фактически данных по валюте может и не быть,
		// поэтому передадим в фоновое задание проверки актуальности данные расшифровки отчета для дополнительного анализа.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДанныеРасшифровки") Тогда
			ПараметрыЗадания.Вставить("АдресХранилищаДанныеРасшифровки", Форма.ДанныеРасшифровки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
