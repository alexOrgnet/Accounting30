
#Область ПрограммныйИнтерфейс

#Область ОтправкаБезПодписания

// Возвращает структуру параметров для отправки заявки на открытие счета (без подписи).
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция ПараметрыОтправкиБезПодписания(СервисОбменаСБанками) Экспорт

	Результат = Новый Структура();
	// Входящие параметры, указываются вызывающей процедурой.
	Результат.Вставить("СервисОбменаСБанками", СервисОбменаСБанками);
	Результат.Вставить("ЗаявкаНаОткрытиеСчета", ПредопределенноеЗначение("Документ.ЗаявкаНаОткрытиеСчета.ПустаяСсылка"));
	Результат.Вставить("Организация",    ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("Банки",          Новый Массив); // Массив из элементов справочника БанкиУниверсальногоОбмена, в которые отправить заявку.
	Результат.Вставить("ПредставленияДополнительныхФайлов", Новый СписокЗначений); // краткие представления дополнительных файлов к заявке.
	Результат.Вставить("ДокументооборотыПолучателей"); // Ключ - банк, значение - документооборот для него.
	// Ссылка на перечисление ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета.
	Результат.Вставить("ТипТранзакции");
	
	// Значения, которые доступны только на клиенте (не могут передаваться на сервер).
	Результат.Вставить("ПараметрыНаКлиенте", Новый Структура());
	Результат.ПараметрыНаКлиенте.Вставить("ВладелецФормы");         // Форма-владелец
	Результат.ПараметрыНаКлиенте.Вставить("ОповещениеОЗавершении"); // Оповещение, которое необходимо вызвать после завершения всего процесса (необязательное).

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СообщенияПоЗаявкамНаОткрытиеСчета

Процедура ПослеНачалаРаботыСистемы() Экспорт
		
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаОткрытиеСчета", 15, Истина);
	
КонецПроцедуры    

Процедура ПослеОткрытияЖурналаДеньги() Экспорт
	
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОбОткрытииСчета", 15, Истина);     
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаОткрытиеСчета", 15, Истина);
	
КонецПроцедуры

Процедура ПерезапуститьПроверкуСообщенийОтБанков() Экспорт
	
	// Регл.задание по проверке ответов от банков первый раз запускается через 15 мин,
	// поэтому показ оповещения включим сначала через 20 мин, чтобы рег.задание успело отработать.
	
	ИнтервалВыполненияПроверки = 1200;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаОткрытиеСчета");
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаОткрытиеСчета",
		ИнтервалВыполненияПроверки, Истина);
	
	ОтключитьОбработчикОжидания("Подключаемый_ОповеститьОбОткрытииСчета");
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОбОткрытииСчета",
		ИнтервалВыполненияПроверки, Истина);

КонецПроцедуры

Процедура ПодключитьИнтернетПоддержкуПользователей() Экспорт

	// Открываем форму подключения ИПП не сразу, а через таймер,
	// чтобы можно было вызывать из другой формы в обработчике ПриОткрытии() с параметром Отказ.
	ПодключитьОбработчикОжидания("Подключаемый_НачатьПодключениеИнтернетПоддержкиИзЗаявкиНаОткрытиеСчета", 0.5, Истина);
	
КонецПроцедуры

Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		// Откроем основную форму новой заявки.
		ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.ФормаОбъекта");
	Иначе
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявок необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Выводит оповещения пользователю по массиву сообщений
//
// Параметры:
//  НовыеСообщенияОтБанков - Массив	- массив структур, содержащих описание нового состояния заявки на кредит
//										см. РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.НовыеСообщенияОтБанков()
//
Процедура ОповеститьОНовыхСообщенияхОтБанков(НовыеСообщенияОтБанков) Экспорт 
	
	Для	Каждого ОписаниеСообщения Из НовыеСообщенияОтБанков Цикл
		
		Картинка = БиблиотекаКартинок.СервисПоКредитамОдобрено;
		Пояснение = НСтр("ru='Новое сообщение от сервиса 1С: Заявки на открытие счета'");
		
		Если ОписаниеСообщения.ЕстьОшибки Тогда
			Картинка = БиблиотекаКартинок.ОшибкаОтправки;
			Пояснение = НСтр("ru='Ошибка при обмене данными по заявке'");
		ИначеЕсли ОписаниеСообщения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаОткрытиеСчета.Отказано") Тогда 	
			Пояснение = НСтр("ru='Отказ по заявке'");
			Картинка = БиблиотекаКартинок.СервисПоКредитамОтказано;
		ИначеЕсли ОписаниеСообщения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения") Тогда
			Пояснение = НСтр("ru='Подтверждение получения заявки'");
		КонецЕсли;	
				
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("ЗаявкаНаОткрытиеСчета", ОписаниеСообщения.ЗаявкаНаОткрытиеСчета);
		ЗначенияКлюча.Вставить("Организация", ОписаниеСообщения.Организация);
		ЗначенияКлюча.Вставить("Банк", ОписаниеСообщения.Банк);
		
		Действие = Новый ОписаниеОповещения("ОткрытьИнформациюПоЗаявке", ЗаявкиНаОткрытиеСчетаКлиент, ЗначенияКлюча);  
		
		ШаблонИдентификатораОповещения = "%1-%2-%3";
		ИдентификаторОповещения = СтрШаблон(
			ШаблонИдентификатораОповещения,
			ОписаниеСообщения.ЗаявкаНаОткрытиеСчета.УникальныйИдентификатор(),
			ОписаниеСообщения.Организация.УникальныйИдентификатор(),
			ОписаниеСообщения.Банк.УникальныйИдентификатор());
		
		ПоказатьОповещениеПользователя(
			ОписаниеСообщения.Банк,
			Действие,
			Пояснение,
			Картинка,
			СтатусОповещенияПользователя.Важное,
			ИдентификаторОповещения);
						
	КонецЦикла;
	
КонецПроцедуры

Процедура ОповеститьОбОткрытииНовыхСчетов(СообщенияОтБанковОбОткрытии) Экспорт 
	
	ИмяФормы = "РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.ПоказСообщенийОткрытиеСчета";

	Если НЕ ФормаСообщенийОткрытиеСчетаОткрыта(ИмяФормы) Тогда   
		
	    ПараметрыОткрытияФормы = Новый Структура("СообщенияОтБанков", СообщенияОтБанковОбОткрытии);
		ОткрытьФорму(ИмяФормы, ПараметрыОткрытияФормы);
		
	КонецЕсли;
								
КонецПроцедуры

Процедура ОткрытьИнформациюПоЗаявке(ЗначенияКлюча) Экспорт 
		
	ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаОткрытиеСчета.Форма.ИнформацияПоЗаявкеНаОткрытиеСчета", 
			Новый Структура("Ключ", ЗаявкиНаОткрытиеСчетаВызовСервера.КлючЗаписиСостоянияЗаявки(ЗначенияКлюча))); 
			
КонецПроцедуры

Функция ФормаСообщенийОткрытиеСчетаОткрыта(ИмяФормы)
	
	Окна = ПолучитьОкна();
	
	Если Окна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Формы = Новый Массив;
	Формы.Добавить(ИмяФормы);
		
	// Для формы, открытой в режиме "РежимОткрытияОкнаФормы.БлокироватьОкноВладельца",
	// не выполняется поиск по уникальному идентификатору, поэтому приходится искать самим.
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ТипЗнч(ОткрытоеОкно) = Тип("ОкноКлиентскогоПриложения") 
			И ОткрытоеОкно.Содержимое.Количество() = 1
			И (Формы.Найти(ОткрытоеОкно.Содержимое[0].ИмяФормы) <> Неопределено) Тогда
			
			Возврат ОткрытоеОкно.Содержимое[0].Открыта();
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Отправка

Процедура ОткрытьФормуОтправки(ПараметрыОтправки) Экспорт

	ПараметрыФормы = Новый Структура();

	// Передаем в форму все исходные параметры, кроме доступных только на клиенте.
	Для каждого КлючИЗначение Из ПараметрыОтправки Цикл
		Если КлючИЗначение.Ключ <> "ПараметрыНаКлиенте" Тогда
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтправкаЗавершение", ЭтотОбъект, ПараметрыОтправки);
	
	ОткрытьФорму("Документ.ЗаявкаНаОткрытиеСчета.Форма.Отправка",
		ПараметрыФормы,
		ПараметрыОтправки.ПараметрыНаКлиенте.ВладелецФормы,
		, , ,
		ОповещениеОЗавершении);

КонецПроцедуры

Процедура ОтправкаЗавершение(Результат, ПараметрыОтправки) Экспорт
	Перем Транзакции;
	
	Если НЕ ПроверитьРезультатВыполнения(Результат, ПараметрыОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Транзакции", Транзакции);
	ОповеститьОЗавершенииОтправки(Истина, ПараметрыОтправки, Транзакции);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отправка

Функция ПроверитьРезультатВыполнения(Результат, ПараметрыОтправки)

	Выполнено      = Ложь;
	ОписаниеОшибки = "";

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Выполнено") Тогда
			Выполнено      = Результат.Выполнено;
		КонецЕсли;
		Если Результат.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = Результат.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Покажем текст ошибки пользователю.
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Выполнено Тогда
		ОповеститьОЗавершенииОтправки(Ложь, ПараметрыОтправки);
	КонецЕсли;
	
	Возврат Выполнено;

КонецФункции

Процедура ОповеститьОЗавершенииОтправки(Выполнено, ПараметрыОтправки, Транзакции = Неопределено)
	
	Перем ОповещениеОЗавершении;
	
	Если Не (ЗначениеЗаполнено(ПараметрыОтправки)
		И ПараметрыОтправки.Свойство("ПараметрыНаКлиенте")
		И ПараметрыОтправки.ПараметрыНаКлиенте.Свойство("ОповещениеОЗавершении", ОповещениеОЗавершении)
		И ОповещениеОЗавершении <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено",  Выполнено);
	Результат.Вставить("Транзакции", Транзакции);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
