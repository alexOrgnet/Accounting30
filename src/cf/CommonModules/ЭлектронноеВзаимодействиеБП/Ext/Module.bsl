
#Область СлужебныйПрограммныйИнтерфейс

#Область КонвертацияФорматированногоДокументаВФорматRTF

// Преобразует форматированный документ 1С в документ формата RTF
Процедура КонвертироватьВФорматRTF(ФорматированныйДокумент, ИмяФайла) Экспорт
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	
	СоответствиеТегов = ПолучитьСоответствиеТегов(ФорматированныйДокумент);
	ЗаписьТекста.ЗаписатьСтроку(НачалоRTF(СоответствиеТегов));
	НомерСписка = 0;
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Если Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
			
			НомерСписка = НомерСписка + 1;
			
		Иначе
			
			НомерСписка = 0;
			
		КонецЕсли;
		ПараграфRTF = ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка);
		ЗаписьТекста.ЗаписатьСтроку(ПараграфRTF);
		
	КонецЦикла;
	ЗаписьТекста.ЗаписатьСтроку(КонецRTF());
	
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// Ищет ссылку на номенклатуру поставщика по идентификатору
//
// Параметры:
//  Идентификатор			 - Строка	 - идентификатор номенклатуры поставщика
//  Контрагент				 - СправочникСсылка.Контрагенты	 - ссылка на поставщика
//  ТипВозвращаемогоЗначения - Строка	 - возможные значения: "Номенклатура", "НоменклатураПоставщика"
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, СправочникСсылка.НоменклатураПоставщика - ссылка на справочник
//
Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура") Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Идентификатор = &Идентификатор
	|	И СпрНоменклатура.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
			Результат = Выборка.Номенклатура;
		Иначе
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда был найден всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива.
// Проверяется максимальная длина полного имени файла в 255 символов.
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив.
//  ПапкаРаспаковки - Строка - папка, в которую будут извлечены данные.
//  ИмяСоздаваемогоФайла - Строка - имя файла, который не может быть извлечен.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДокументПоддерживаетВнутреннийЭДО(Источник) Экспорт
	
	Результат = Ложь;
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваров")
			Или ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров")
			Или ТипИсточника = Тип("ДокументСсылка.АвансовыйОтчет")
			Или ТипИсточника = Тип("ДокументОбъект.АвансовыйОтчет")
			Или ТипИсточника = Тип("ДокументСсылка.ОперацияБух")
			Или ТипИсточника = Тип("ДокументОбъект.ОперацияБух")
			Или ТипИсточника = Тип("ДокументСсылка.ТребованиеНакладная")
			Или ТипИсточника = Тип("ДокументОбъект.ТребованиеНакладная")
			Или ТипИсточника = Тип("ДокументСсылка.ПутевойЛист")
			Или ТипИсточника = Тип("ДокументОбъект.ПутевойЛист")
			Или ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
			Или ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
			Или ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияРасчетовСКонтрагентами")
			Или ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияРасчетовСКонтрагентами") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаФайловXML);
	ДанныеДокумента = Неопределено;
	ФайлДанных = Неопределено;
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ТекстОшибки = ТаблицаДанных[0].ТекстОшибки;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;		
		ДанныеДокумента = ТаблицаДанных[0].ДанныеДокумента;
		ФайлДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных[0].ФайлДанных, ИдентификаторФормы);		
		
	КонецЕсли;		
	Если ДанныеДокумента = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;       	
	СтруктураЭД = ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных);
	
	Возврат СтруктураЭД;
	
КонецФункции 

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
	
	Попытка
		Результат = СоздатьОбъектИБ(СтруктураЭД.ДанныеДокумента, СтруктураЭД.Контрагент);
		ДокументПоступления = Неопределено;
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Для Каждого Документ Из Результат Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = Документ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(Результат) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ДокументПоступления = Результат;
			КонецЕсли;
		КонецЕсли;
		Возврат ДокументПоступления;
	Исключение
		ШаблонСообщения = НСтр("ru='%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

Функция ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных, НаименованиеКонтрагента = "") Экспорт
	
	ДеревоРазбора = ДанныеДокумента.ДеревоРазбора;
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	
	СсылкаКонтрагента = Неопределено;
	Если (СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав
		Или СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот
		Или СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
		Или СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.УПД)
		И СтрокаОбъекта.ЗначениеРеквизита <> Неопределено Тогда
		
		ПутьВДереве = ?(ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаОбъекта.ЗначениеРеквизита, "СведенияОПродавце.НомерСтроки.ТипУчастника"),
			"СведенияОПродавце.НомерСтроки.ТипУчастника", "СведенияОПродавце.ТипУчастника");
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, ПутьВДереве);
		Если ТипУчастника = "ЮЛ" Тогда
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, ПутьВДереве + ".ЮЛ.ИНН");
		Иначе
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, ПутьВДереве + ".ИП.ИНН");
		КонецЕсли;
		СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН);
	Иначе
		СсылкаКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина, ДеревоРазбора);	
		Если СсылкаКонтрагента = Неопределено Или СсылкаКонтрагента.Пустая() Тогда
			
			ИндексСтрокиКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);	
			СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
			ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "ИНН", Истина, ДеревоРазбора);
			КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "КПП", Истина, ДеревоРазбора);
			
			СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
			Если СсылкаКонтрагента = Неопределено Тогда
				
				СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН); // если не найден по ИНН и КПП, ищем только по ИНН
				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СсылкаКонтрагента) Тогда
				
				СсылкаКонтрагента = НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено, НаименованиеКонтрагента); // если не находим по ИНН, создаем нового контрагента
				
			КонецЕсли;
			СтрокаКонтрагента.СсылкаНаОбъект = СсылкаКонтрагента;
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДокумента.СтрокаОбъекта = СтрокаОбъекта;
	АдресДанныхДокумента = ПоместитьВоВременноеХранилище(ДанныеДокумента, ИдентификаторФормы);
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", СтрокаОбъекта.ВидЭД);
	СтруктураЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен);
	СтруктураЭД.Вставить("ДанныеФайлаРазбора", ФайлДанных);
	СтруктураЭД.Вставить("Контрагент"    , СсылкаКонтрагента);                                        
	СтруктураЭД.Вставить("НаправлениеЭД" , ОбменСКонтрагентами.НаправленияДокументов().Входящий);
	СтруктураЭД.Вставить("ВладелецФайла" , Неопределено);  
	СтруктураЭД.Вставить("ДанныеДокумента" , АдресДанныхДокумента);
	
	Возврат СтруктураЭД;  
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, НаименованиеКонтрагента = "") Экспорт
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);	
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент= Справочники.Контрагенты.СоздатьЭлемент();		
	Иначе
		Контрагент= СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	ДанныеКонтрагента       = СтрокаДляЗагрузки;
	ПолноеНаименование      = ДанныеКонтрагента.Строки.Найти("ПолноеНаименование", "Реквизит", Истина);
	ЮрФизЛицо               = ДанныеКонтрагента.Строки.Найти("ЮрФизЛицо", "Реквизит", Истина);	
	ЮрАдресСтруктурой       = ДанныеКонтрагента.Строки.Найти("АдресСтруктурой", "Реквизит", Истина);
	Телефон       			= ДанныеКонтрагента.Строки.Найти("Телефоны", "Реквизит", Истина);
	Контакты                = ДанныеКонтрагента.Строки.Найти("Контакты", "Реквизит", Истина); 	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		
		Контрагент.Наименование = НаименованиеКонтрагента;
		
	Иначе
		
		Контрагент.Наименование = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
		
	КонецЕсли;
	Контрагент.НаименованиеПолное = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП; 
	Контрагент.ЮридическоеФизическоеЛицо = ?(ЮрФизЛицо = Неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, ЮрФизЛицо.ЗначениеРеквизита);
	
	// Контактная информация
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
	Если ЮрАдресСтруктурой <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		
	КонецЕсли;
	
	Если Телефон <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, Телефон.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		
	КонецЕсли;
	
	Контрагент.Записать();
	
	// Банковский счет
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	ИДБанковскогоСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "БанковскийСчетКонтрагента", Истина);
	НайденныеСтроки = ДеревоРазбора.Строки.Найти(ИДБанковскогоСчета, "ИндексСтроки", Истина);
	Если НайденныеСтроки <> Неопределено Тогда
				
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "НомерСчета", Истина);
		Если ЗначениеЗаполнено(НомерСчета) Тогда	
		
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Владелец", Контрагент.Ссылка);
			
			БанковскийСчет = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
			Если БанковскийСчет = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
				БанковскийСчет.НомерСчета = НомерСчета;
			Иначе
				БанковскийСчет = БанковскийСчет.Получитьобъект();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
				
				ДанныеБанка = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "Банк", Истина, ДеревоРазбора);
				Если ДанныеБанка <> Неопределено Тогда
					
					БанкБИК = ДанныеБанка.Код;
					Если ЗначениеЗаполнено(БанкБИК) Тогда
						
						Банк = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("Банки", БанкБИК);
						Если Не ЗначениеЗаполнено(Банк) Тогда
							
							МассивБанковИзКлассификатора = Новый Массив;
							МассивБанковИзКлассификатора.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору(БанкБИК));
							РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
							Банк = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("Банки", БанкБИК);
							
						КонецЕсли;						
						БанковскийСчет.Банк = Банк;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643"); 
			БанковскийСчет.Наименование = Строка(Банк) + " (" + БанковскийСчет.НомерСчета  + ", руб.)";
			БанковскийСчет.Записать();
			                 
		КонецЕсли;
		
	КонецЕсли;		
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

Функция СоздатьДокументИзСтруктуры(ДанныеЭД) Экспорт
	
	АдресХранилища = ДанныеЭД.АдресХранилища;
	ВидДокумента = ДанныеЭД.ВидДокумента;
	
	Попытка
		Если ВидДокумента = ВидДокументаWBУведомлениеВыкупа()
			ИЛИ ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
			Возврат Документы.РеализацияТоваровУслуг.СоздатьДокументИзСтруктуры(АдресХранилища);
		Иначе
			Возврат Документы.ОтчетКомиссионераОПродажах.СоздатьДокументИзСтруктуры(АдресХранилища);
		КонецЕсли;
	Исключение
		ШаблонСообщения = НСтр("ru='%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СоздатьДокументыИзСтруктуры(СоздаваемыеДокументы, АдресХранилища) Экспорт
	
	НомерФайла = 1;
	Результат = Новый Массив;
	
	Для Каждого Документ Из СоздаваемыеДокументы Цикл
		
		Описание = Документ.Описание;
		Если ЗначениеЗаполнено(Описание) Тогда
			МассивПодстрок = СтрРазделить(Описание, Символы.ПС, Ложь);
			Если МассивПодстрок.Количество() > 0 Тогда
				Описание = МассивПодстрок[0];
			КонецЕсли;
		КонецЕсли;
		
		ТекстПрогресса = СтрШаблон(НСтр("ru = 'Создается %1 (%2 из %3)'"), Описание, НомерФайла, СоздаваемыеДокументы.Количество());
		ДлительныеОперации.СообщитьПрогресс(НомерФайла/СоздаваемыеДокументы.Количество(), ТекстПрогресса);
		
		РезультатПоСтроке = Новый Структура;
		РезультатПоСтроке.Вставить("Описание", Описание);
		
		Попытка
			Если Документ.ВидДокумента = ВидДокументаWBУведомлениеВыкупа() 
				ИЛИ Документ.ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
				СозданДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокументИзСтруктуры(Документ, ТекстПрогресса);
			ИначеЕсли Документ.ВидДокумента = ВидДокументаОтчетWBСписание()
				ИЛИ Документ.ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
				СозданДокумент = Документы.ОтчетКомиссионераОПродажах.СоздатьДокументСписанияИзСтруктуры(Документ, ТекстПрогресса);
			Иначе
				СозданДокумент = Документы.ОтчетКомиссионераОПродажах.СоздатьДокументИзСтруктуры(Документ, ТекстПрогресса);
			КонецЕсли;
			РезультатПоСтроке.Вставить("СозданДокумент", СозданДокумент);
		Исключение
			ШаблонСообщения = НСтр("ru='%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИнформацияОбОшибке().Описание);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			РезультатПоСтроке.Вставить("ТекстОшибки", ТекстСообщения);
		КонецПопытки;
		
		НомерФайла = НомерФайла + 1;
		Результат.Добавить(РезультатПоСтроке);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Процедура ПолучитьДанныеВФорматеБЭД(ПараметрыВызоваСервера, АдресХранилища) Экспорт
		
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;
	Результат = Новый Структура;
	ДанныеФайла = ЗагрузитьФайлВТаблицу(ИмяВременногоФайла);
	ДанныеДокумента = ПолучитьДанныеДокумента(ДанныеФайла.Лист1);
	Если ДанныеДокумента.Свойство("ТекстОшибки") Тогда
		Результат.Вставить("ТекстОшибки", ДанныеДокумента.ТекстОшибки);
	Иначе
		Если ДанныеДокумента.Свойство("НомерСчФ") Тогда
			Результат.Вставить("НомерСчФ", ДанныеДокумента.НомерСчФ);
			Результат.Вставить("ДатаСчФ", ДанныеДокумента.ДатаСчФ);
		КонецЕсли;
		ФайлЭД = ЗаписатьДанныеВXML(ДанныеДокумента);
		Если ФайлЭД = Неопределено Тогда
			Результат.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось получить данные из файла. Подробности см. в журнале регистрации.'"));
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлЭД);
			Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);
			УдалитьФайлы(ФайлЭД);
		КонецЕсли;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Формирует пакеты электронных документов для быстрого обмена.
//
// Параметры:
//  СериализуемыеОбъекты - Массив - ссылки на сериализуемые документы.
//
// Возвращаемое значение:
//  Массив - пакеты электронных документов.
//
Функция СериализоватьОбъекты(СериализуемыеОбъекты) Экспорт
	
	ПакетыЭД = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СериализуемыеОбъекты)
		ИЛИ ТипЗнч(СериализуемыеОбъекты) <> Тип("Массив") Тогда
		
		Возврат ПакетыЭД;
		
	КонецЕсли;
	
	// объекты всегда будут одного типа
	ТипСериализуемыхОбъектов = ТипЗнч(СериализуемыеОбъекты[0]);
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Попытка
			ПакетыЭД = Документы.РеализацияТоваровУслуг.СформироватьРеализациюТоваровИУслугВXML(СериализуемыеОбъекты);
		Исключение
			
		КонецПопытки
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Попытка
			
			ПакетыЭД = Документы.СчетНаОплатуПокупателю.СформироватьСчетаНаОплатуПокупателюВXML(СериализуемыеОбъекты);
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Отправка документов по электронной почте'");
			ТекстОшибки = НСтр("ru = 'Произошли ошибки при формировании электронного документа. Электронный документ для счета на оплату не создан'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("СправочникСсылка.Организации") Тогда
		ПакетыЭД = Справочники.Организации.СформироватьКарточкиОрганизацииВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

Процедура ДобавитьОписаниеПрочитанногоФайлаWBДетальный(РезультатЧтения, ДанныеДокумента, ПолноеИмяФайла)
	
	СуммаВыкупа = 0;
	СуммаПродаж = 0;
	СуммаВозвратов = 0;
	СуммаСписания = 0;
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТовара Из ДанныеДокумента.ТаблицаТоваров Цикл
		Если ОбменСМаркетплейс.ПродажаЧерезВыкупТовара(СтрокаТовара.КодСтраны, СтрокаТовара.НазваниеСтраны) Тогда
			Если Нрег(СтрокаТовара.ВидДвижения) = "продажа"
				ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "корректная продажа" Тогда
				СуммаВыкупа = СуммаВыкупа + СтрокаТовара.Сумма;
			КонецЕсли;
		ИначеЕсли Нрег(СтрокаТовара.ВидДвижения) = "продажа"
			ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "корректная продажа"
			ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "сторно возвратов"
			ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "компенсация подмененного товара" Тогда
			СуммаПродаж = СуммаПродаж + СтрокаТовара.Сумма;
		ИначеЕсли Нрег(СтрокаТовара.ВидДвижения) = "возврат"
			ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "сторно продаж" Тогда
			СуммаВозвратов = СуммаВозвратов + СтрокаТовара.Сумма;
		ИначеЕсли ОбменСМаркетплейс.СписаниеТовараМаркетплейсом(СтрокаТовара.ВидДвижения, СтрокаТовара.ТипДокумента) Тогда
			СуммаСписания = СуммаСписания + СтрокаТовара.Сумма;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаТовара);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовара Из СтрокиКУдалению Цикл
		ДанныеДокумента.ТаблицаТоваров.Удалить(СтрокаТовара);
	КонецЦикла;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	ОсновнаяОрганизация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Организация = ОсновнаяОрганизация;
	КонецЕсли;
		
	Описание = СтрШаблон(НСтр("ru='Отчет о продажах Wildberries от %1
		|Продажи: %2 Возвраты: %3'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаПродаж, "ЧДЦ=2; ЧН="), Формат(СуммаВозвратов, "ЧДЦ=2; ЧН="));
	
	Если СуммаВыкупа > 0 Тогда
		Описание = Описание + СтрШаблон(НСтр("ru=' Выкупы: %1'"), Формат(СуммаВыкупа, "ЧДЦ=2; ЧН="));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
	Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
	Результат.Вставить("ВидДокумента",    ДанныеДокумента.ВидДокумента);
	
	Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.Wildberries);
	Результат.Вставить("Организация",     Организация);
	Результат.Вставить("Дата",            ДанныеДокумента.Дата);
	Результат.Вставить("СуммаВыкупа",     СуммаВыкупа);
	Результат.Вставить("СуммаПродаж",     СуммаПродаж);
	Результат.Вставить("СуммаВозвратов",  СуммаВозвратов);
	Результат.Вставить("СуммаСписания",   СуммаСписания);
	Результат.Вставить("Загружать",       СуммаПродаж > 0 ИЛИ СуммаВозвратов > 0);
	Результат.Вставить("Описание", 		  Описание);
	ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);
	ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
	
	РезультатЧтения.Добавить(Результат);
	
	Если СуммаСписания > 0 Тогда
		
		Описание = СтрШаблон(НСтр("ru='Отчет о списании Wildberries от %1
			|Сумма компенсации: %2'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаСписания, "ЧДЦ=2; ЧН="));
		
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента",    ВидДокументаОтчетWBСписание());
		
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.Wildberries);
		Результат.Вставить("Организация",     Организация);
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаСписания",   СуммаСписания);
		Результат.Вставить("Загружать",       Истина);
		Результат.Вставить("Описание", 		  Описание);
		ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);
		ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
		
		РезультатЧтения.Добавить(Результат);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбменСКонтрагентами

Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Компании.Ссылка КАК Ссылка
	|ИЗ
	|	&Компании КАК Компании
	|ГДЕ
	|	Компании.ИНН = &ИНН
	|	И &УсловиеПоКПП
	|	И НЕ Компании.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Компании", "Справочник." + ТипОбъекта); 
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Компании.КПП = &КПП"); 
		Запрос.УстановитьПараметр("КПП", КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Истина"); 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаОрганизациюПоНаименованию(Наименование) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Компании.Ссылка КАК Ссылка,
	|	Компании.Наименование КАК Наименование,
	|	Компании.НаименованиеПолное КАК НаименованиеПолное,
	|	Компании.НаименованиеСокращенное КАК НаименованиеСокращенное
	|ИЗ
	|	Справочник.Организации КАК Компании
	|ГДЕ
	|	НЕ Компании.ПометкаУдаления";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПриведенноеНаименование = ПодготовитьСтроку(Наименование);
	Пока Выборка.Следующий() Цикл
		Если ПриведенноеНаименование = ПодготовитьСтроку(Выборка.НаименованиеПолное)
			Или ПриведенноеНаименование  = ПодготовитьСтроку(Выборка.Наименование)
			Или ПриведенноеНаименование  = ПодготовитьСтроку(Выборка.НаименованиеСокращенное) Тогда
			Результат = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

Функция СостояниеТребуетсяПодтверждениеПоДокументу(Документ)
	Перем СсылкаНаСообщениеОбмена;
	
	Состояние = "Подготовлено";
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	СоответствиеВладельцевИСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаПоВладельцам(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		СсылкаНаСообщениеОбмена = СоответствиеВладельцевИСообщенийОбмена.Получить(ТекЭл);
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СсылкаНаСообщениеОбмена) Тогда
		НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСообщениеОбмена, "НастройкаОбмена");
		РеквизитыНастройкиОбмена =
			Новый Структура("ПрограммаБанка, ИспользуетсяКриптография, ОтправлятьДокументыБезПодписиSMS");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
			НастройкаОбмена, РеквизитыНастройкиОбмена);
		Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
			И Не РеквизитыНастройкиОбмена.ИспользуетсяКриптография
			И РеквизитыНастройкиОбмена.ОтправлятьДокументыБезПодписиSMS Тогда
			Состояние = "Отправлено";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД, Документ = Неопределено) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			
			Возврат "Подготовлено";
			
		Иначе
			
			Состояние = СостояниеТребуетсяПодтверждениеПоДокументу(Документ);
			Возврат Состояние;
			
		КонецЕсли;
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждениеВБанке
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция - Проверяет наличие действующего прямого обмена для банковских счетов организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организации, банковские счета которого нужно проверить
// 
// Возвращаемое значение:
//  Булево - Истина, если есть действующая настройка обмена
//
Функция ИспользуетсяПрямойОбменСБанком(Организация = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Возврат ОбменСБанками.НастройкаОбмена(Организация) <> Неопределено;
		
	Иначе
		
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
			
			Если ОбменСБанками.НастройкаОбмена(ОрганизацияИзСписка) <> Неопределено Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИспользованияЭП

// Функция - проверяет ФО и наличие действующих настроек обмена с контрагентами
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с контрагентами через ЭДО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Функция - проверяет ФО и наличие действующих настроек обмена с банками
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменДиректБанк() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с банками через ДиректБанк
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанками.Недействительна";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СписокНеСопоставленнойНоменклатуры(Контрагент, ДанныеФайлаРазбора) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаРазбора);
	ДвоичныеДанныеЭД = Неопределено;
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		ДвоичныеДанныеЭД = ДанныеФайла.ДвоичныеДанные;
	Иначе
		ДвоичныеДанныеЭД = ДанныеФайла;
	КонецЕсли;
	
	Возврат ОбменСКонтрагентами.ДанныеНесопоставленнойНоменклатурыДокументаПоФайлу(ДвоичныеДанныеЭД, Контрагент);
	
КонецФункции

Процедура СоздатьЭлементыСправочникаПоДаннымКонтрагентаВФоне(Параметры, АдресХранилища) Экспорт
	
	СписокДляСопоставления = Новый Массив;
	
	Ошибки = Неопределено;
	Для Каждого НоменклатураКонтрагента Из Параметры.НаборНоменклатурыКонтрагентов Цикл
		НаборДляСопоставления = Новый Структура("НоменклатураКонтрагента, НоменклатураИБ");
		НаборДляСопоставления.НоменклатураКонтрагента = НоменклатураКонтрагента;
		ЗначенияРеквизитов = Параметры.ЗначенияРеквизитов;
		Если ЗначенияРеквизитов.ТипСправочника = Тип("СправочникСсылка.Номенклатура") Тогда
			НаборДляСопоставления.НоменклатураИБ = СоздатьЭлементСправочникаНоменклатура(
				НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки);
		ИначеЕсли ЗначенияРеквизитов.ТипСправочника = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			НаборДляСопоставления.НоменклатураИБ = СоздатьЭлементСправочникаОсновныеСредства(
				НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки);
		ИначеЕсли ЗначенияРеквизитов.ТипСправочника = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			НаборДляСопоставления.НоменклатураИБ = СоздатьЭлементСправочникаОбъектыСтроительства(
				НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки);
		КонецЕсли;
		СписокДляСопоставления.Добавить(НаборДляСопоставления);
	КонецЦикла;
	
	Результат = Новый Структура("ДанныеСопоставления, Ошибки", СписокДляСопоставления, Ошибки);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СписокНеСопоставленнойНоменклатурыПоСтруктуре(АдресХранилища, ИдентификаторФормы) Экспорт
	
	МассивНеСопоставленнойНоменклатуры = Новый Массив;
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеФайла = Неопределено;
	Если НЕ ТипЗнч(ДанныеХранилища) = Тип("Массив") Тогда
		Возврат МассивНеСопоставленнойНоменклатуры;
	ИначеЕсли ДанныеХранилища.Количество() > 0 Тогда
		ДанныеФайла = ДанныеХранилища[0];
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		Возврат МассивНеСопоставленнойНоменклатуры;
	КонецЕсли;                                          
	
	ЭтоWildberries = Ложь;
	Если ДанныеФайла.Свойство("ВидДокумента") Тогда
		ЭтоWildberries = (ДанныеФайла.ВидДокумента = ВидДокументаОтчетWB() 
			ИЛИ ДанныеФайла.ВидДокумента = ВидДокументаОтчетWBДетальный());
	КонецЕсли;
	
	Если ДанныеФайла.Свойство("ДанныеДокумента")
		И ДанныеФайла.ДанныеДокумента.Свойство("ТаблицаТоваров") Тогда
		
		Если ДанныеФайла.ДанныеДокумента.Плательщик.Свойство("Ссылка") Тогда
			СсылкаКонтрагента = ДанныеФайла.ДанныеДокумента.Плательщик.Ссылка;
		Иначе
			ИНН = "";
			КПП = "";
			Наименование = "";
			ДанныеФайла.ДанныеДокумента.Плательщик.Свойство("НаименованиеПолное", Наименование);
			ДанныеФайла.ДанныеДокумента.Плательщик.Свойство("ИНН", ИНН);
			ДанныеФайла.ДанныеДокумента.Плательщик.Свойство("КПП", КПП);
			
			СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
			Если СсылкаКонтрагента = Неопределено Тогда
				СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН); // если не найден по ИНН и КПП, ищем только по ИНН
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаКонтрагента) Тогда
			
			Контрагент                           = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование              = Наименование;
			Контрагент.НаименованиеПолное        = Наименование;
			Контрагент.ИНН                       = ИНН;
			Контрагент.КПП                       = КПП;
			Контрагент.ЮридическоеФизическоеЛицо = ?(СтрДлина(СокрЛП(ИНН)) = 12, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
			Контрагент.Записать();
			
			СсылкаКонтрагента = Контрагент.Ссылка;
		КонецЕсли;
		Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(СсылкаКонтрагента);
		
		МассивПоискаНоменклатуры      = Новый Массив;
		НаборНоменклатурыКонтрагентов = Новый Массив;
		СопоставлениеНоменклатуры     = Новый Соответствие;
		
		ТаблицаТоваров = ДанныеФайла.ДанныеДокумента.ТаблицаТоваров;
		КолонкиТаблицыТоваров = ТаблицаТоваров.Колонки;
		
		КолонкаНаимТов = КолонкиТаблицыТоваров.Найти("НаимТов");
		КолонкаНаименование = КолонкиТаблицыТоваров.Найти("Наименование");
		Если КолонкаНаимТов <> Неопределено
			И КолонкаНаименование = Неопределено Тогда
			КолонкаНаимТов.Имя = "Наименование";
		КонецЕсли;
		
		Если КолонкиТаблицыТоваров.Найти("КодМагазина") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("КодМагазина", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 	
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("Штрихкод") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 	
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("ИсторияИдентификаторов") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("ИД") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
		КонецЕсли;
				
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(Владелец,);
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, СтрокаТовара);
			
			Если Не ЗначениеЗаполнено(НоменклатураКонтрагента.Наименование)
				И Не ЗначениеЗаполнено(НоменклатураКонтрагента.Артикул)
				И ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
				
				НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(НоменклатураКонтрагента.Наименование, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(НоменклатураКонтрагента.Артикул, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(СтрокаТовара.Штрихкод, " ", "")));
			Иначе
				
				НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(НоменклатураКонтрагента.Наименование, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(НоменклатураКонтрагента.Артикул, " ", "") + "#"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.КодМагазина) Тогда
				Если ЭтоWildberries И ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
					НоменклатураКонтрагента.Идентификатор = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТовара.КодМагазина + "#" + СтрокаТовара.Штрихкод);
				Иначе
					НоменклатураКонтрагента.Идентификатор = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТовара.КодМагазина);
				КонецЕсли;
				НоменклатураКонтрагента.ИсторияИдентификаторов.Добавить(НатуральныйИД);
				СтрокаТовара.ИсторияИдентификаторов.Добавить(НатуральныйИД);
			Иначе
				НоменклатураКонтрагента.Идентификатор = НатуральныйИД;
			КонецЕсли;
			СтрокаТовара.ИД = НоменклатураКонтрагента.Идентификатор;
			
			НоменклатураКонтрагента.ШтрихкодКомбинации    = СтрокаТовара.Штрихкод;
			НоменклатураКонтрагента.ШтрихкодыНоменклатуры = СтрокаТовара.Штрихкод;
			НоменклатураКонтрагента.ИдентификаторНоменклатуры = НоменклатураКонтрагента.Идентификатор;
			
			НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
			МассивПоискаНоменклатуры.Добавить(НоменклатураКонтрагента);
			
		КонецЦикла;
				
		МассивНайденнойНоменклатуры   = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Новый Структура("НоменклатураКонтрагента", МассивПоискаНоменклатуры), Ложь);
		
		Для Каждого СтрокаНоменклатуры Из МассивНайденнойНоменклатуры Цикл
			Идентификатор = СтрокаНоменклатуры.НоменклатураКонтрагента.Идентификатор;
			Номенклатура  = СтрокаНоменклатуры.НоменклатураИБ.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				СопоставлениеНоменклатуры.Вставить(Идентификатор, Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, АдресХранилища);
		
		Для Каждого СтрокаНоменклатуры Из НаборНоменклатурыКонтрагентов Цикл
			Если НЕ ЗначениеЗаполнено(СопоставлениеНоменклатуры.Получить(СтрокаНоменклатуры.Идентификатор)) Тогда
				МассивНеСопоставленнойНоменклатуры.Добавить(СтрокаНоменклатуры);				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивНеСопоставленнойНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКлючевыхРеквизитовОбъекта

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента()
//
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт
	
	// Если для документа доступна только отправка печатных форм по ЭДО,
	// то не требуется отображать эти документы в Текущих делах ЭДО в разделе "Создать".
	Если ДоступнаТолькоОтправкаПечатныхФорм(Объект) Тогда
		ПодлежитОбменуЭД = Ложь;
		Возврат;
	КонецЕсли;
	
	// Для ЭПД никакие проверки не нужны
	Если ЭтоЭлектронныеПеревозочныеДокументы(Объект) Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлектронныйДокументСформирован = ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента);
	
	Если (Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Объект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
			И Не ЭлектронныйДокументСформирован)
			Или Не ОбменСКонтрагентамиБП.ДляВидаОперацииДокументаДоступенЭДО(Объект) Тогда
		ПодлежитОбменуЭД = Ложь;
	КонецЕсли;
	
	// Если документ не подлежит обмену, то проверять изменение ключевых реквизитов не требуется.
	Если ПодлежитОбменуЭД Тогда
		Если ЭлектронныйДокументСформирован Тогда
			ИзменилисьКлючевыеРеквизиты = ИзменилисьКлючевыеРеквизитыОбъекта(Объект);
			Если ИзменилисьКлючевыеРеквизиты Тогда
				ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ);
			КонецЕсли;
		Иначе
			ИзменилисьКлючевыеРеквизиты = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

Процедура КомандыЭДО_ФормаСпискаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

Процедура КомандыЭДО_ФормаЭлементаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	// Удаляем команды ДиректБанка из журнала "Документы" и из ЖурналОпераций
	// Необходимо дополнительно отключить видимость "ПодменюДиректБанк" в форме журнала
	Если НастройкиФормы.ИмяФормы = "ЖурналДокументов.Документы.Форма.ФормаСписка"
		Или НастройкиФормы.ИмяФормы = "ЖурналДокументов.ЖурналОпераций.Форма.ФормаСпискаМаркетплейсы" Тогда
		ПараметрыОтбора = Новый Структура("Вид", "ДиректБанк");
		УдаляемыеСтроки = Команды.НайтиСтроки(ПараметрыОтбора);
		Для каждого ЭлементКоллекции Из УдаляемыеСтроки Цикл
			Команды.Удалить(ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСБанками

Функция НетДокументовДиректБанкСбербанк(Организация, БанковскийСчет) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В параметрах функции передается разрешенная организация из отбора.
	// Функция возвращает технические данные (есть/нет документов) и не нарушает конфиденциальность.
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиБанковскогоСчета = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками)
		И НастройкиБанковскогоСчета.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации = &СчетОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписаниеСРасчетногоСчета.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Организация = &Организация
		|	И СписаниеСРасчетногоСчета.СчетОрганизации = &СчетОрганизации";
		
		Результат = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияФорматированногоДокументаВФорматRTF

Функция ПолучитьСоответствиеТегов(ФорматированныйДокумент)
	
	СоответствиеWebЦветов = Новый Соответствие;
	ЦветаWeb = ПолучитьОбщийМакет("WebЦветаRGB");
	ВысотаТаблицы = ЦветаWeb.ВысотаТаблицы;
	Для Н = 2 По ВысотаТаблицы Цикл
		
		Ключ = НРег(СокрЛП(ЦветаWeb.Область(Н, 1).Текст));
		Значение = СокрЛП(ЦветаWeb.Область(Н, 2).Текст);
		СоответствиеWebЦветов.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	СоответствиеТегов = Новый Соответствие;
	СоответствиеЦветовRGB = Новый Соответствие;
	
	// Получаем шрифты и цвета, используемые в документе
	СоответствиеТегов.Вставить("Arial", "\f0");
	СчетчикШрифтов = 1;
	СчетчикЦветов = 0;
	ТаблицаШрифтов = "{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}";
	ТаблицаЦветов = "";
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Для Каждого Элемент Из Параграф.Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				
				Шрифт = Элемент.Шрифт;
				Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
					
					Если СоответствиеТегов[Шрифт.Имя] = Неопределено Тогда
						
						СчетчикШрифтов = СчетчикШрифтов + 1;
						Ключ = Шрифт.Имя;
						Значение = "\f" + Формат(СчетчикШрифтов, "ЧГ=0");
						СоответствиеТегов.Вставить(Ключ, Значение);
						ТаблицаШрифтов = ТаблицаШрифтов + "{" + Значение + "\fnil\fcharset0 " + Ключ + ";}";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветТекста = Элемент.ЦветТекста;
				Если ЦветТекста.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветТекста.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветТекста] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветТекста);
						ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
						Если ТегЦвета = Неопределено Тогда
							
							СчетчикЦветов = СчетчикЦветов + 1;
							ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
							СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
							ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
							
						КонецЕсли;
						СоответствиеТегов.Вставить(ЦветТекста, ТегЦвета);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветФона = Элемент.ЦветФона;
				Если ЦветФона.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветФона.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветФона] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветФона);
						Если ЗначениеЗаполнено(ЦветRGB) Тогда
							
							ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
							Если ТегЦвета = Неопределено Тогда
								
								СчетчикЦветов = СчетчикЦветов + 1;
								ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
								СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
								ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
								
							КонецЕсли;
							СоответствиеТегов.Вставить(ЦветФона, ТегЦвета);
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	СоответствиеТегов.Вставить("ТаблицаШрифтов", ТаблицаШрифтов);
	СоответствиеТегов.Вставить("ТаблицаЦветов", ТаблицаЦветов);
	
	// Положение текста
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Лево,	 "\ql");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Право,	 "\qr");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Центр,	 "\qc");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.ПоШирине, "\qj");
	
	Возврат СоответствиеТегов;
	
КонецФункции

Функция ПолучитьЦветRGB(СоответствиеWebЦветов, Цвет)
	
	ЭтоВебЦвет = Цвет.Вид = ВидЦвета.WebЦвет;
	НазваниеЦвета = "";
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ЭлементДокумента = ФорматированныйДокумент.Добавить("Цвет");
		ЭлементДокумента.ЦветТекста = Цвет;
		ТекстHTML = "";
		ВложенияHTML = Неопределено;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
		НачПозицияЗначенияЦвета = СтрНайти(ТекстHTML, "color:");
		Если НачПозицияЗначенияЦвета > 0 Тогда
			
			КонПозицияЗначенияЦвета = СтрНайти(ТекстHTML, ";",, НачПозицияЗначенияЦвета);
			СтрЦвета = Сред(ТекстHTML, НачПозицияЗначенияЦвета, КонПозицияЗначенияЦвета - НачПозицияЗначенияЦвета);
			
			Если СтрНайти(СтрЦвета, "#") > 0 Тогда
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				Цвет16 = СокрЛП(Массив[1]);
				Красный = HexToDec(Лев(Цвет16, 2));
				Зеленый = HexToDec(Сред(Цвет16, 3, 2));
				Синий  = HexToDec(Сред(Цвет16, 5, 2));
				Результат = "\red" + Красный + "\green" + Зеленый + "\blue" + Синий + ";";
				
				Возврат Результат;
				
			Иначе
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				НазваниеЦвета = СокрЛП(Массив[1]);
				
			КонецЕсли;
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		
		Результат = "\red" + Цвет.Красный + "\green" + Цвет.Зеленый + "\blue" + Цвет.Синий + ";";
		
		Возврат Результат;
		
	КонецЕсли;
		
	Если ЭтоВебЦвет Тогда
		
		Если Не ЗначениеЗаполнено(НазваниеЦвета) Тогда
			
			НазваниеЦвета = НРег(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()",
				СтрРазделить(Строка(Цвет), "(")[1], ""));
				
		КонецЕсли;
		ЦветRGB = СоответствиеWebЦветов[НазваниеЦвета];
		Если ЦветRGB = Неопределено Тогда
			
			Возврат "";
			
		Иначе
			
			МассивRGB = СтрРазделить(ЦветRGB, " ", Ложь);
			Результат = "\red" + СокрЛП(МассивRGB[0]) + "\green" + СокрЛП(МассивRGB[1]) + "\blue" + СокрЛП(МассивRGB[2]) + ";";
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции

// Преобразуем шестнадцатеричное число в десятичное
Функция HexToDec(СтрокаHex)
	
	ДлинаСтроки = СтрДлина(СтрокаHex);
	ЧислоDec = 0;
	Для Н = 0 По ДлинаСтроки - 1 Цикл
		
		Множитель = Pow(16 , Н);
		СимволСтроки = НРег(Сред(СтрокаHex, ДлинаСтроки - Н, 1));
		Если СимволСтроки = "a" Тогда
			
			ЧислоDec = ЧислоDec + 10 * Множитель;
			
		ИначеЕсли СимволСтроки = "b" Тогда
			
			ЧислоDec = ЧислоDec + 11 * Множитель;
			
		ИначеЕсли СимволСтроки = "c" Тогда
			
			ЧислоDec = ЧислоDec + 12 * Множитель;
			
		ИначеЕсли СимволСтроки = "d" Тогда
			
			ЧислоDec = ЧислоDec + 13 * Множитель;
			
		ИначеЕсли СимволСтроки = "e" Тогда
			
			ЧислоDec = ЧислоDec + 14 * Множитель;
			
		ИначеЕсли СимволСтроки = "f" Тогда
			
			ЧислоDec = ЧислоDec + 15 * Множитель;
			
		Иначе
			
			ЧислоDec = ЧислоDec + СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СимволСтроки) * Множитель;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧислоDec;
	
КонецФункции

Функция НачалоRTF(СоответствиеТегов)
	
	Значение = "{\rtf1\ansi\ansicpg1251\deff0{\fonttbl" + СоответствиеТегов["ТаблицаШрифтов"] 
		+ "}" + Символы.ПС;
	
	ТаблицаЦветов = СоответствиеТегов["ТаблицаЦветов"];
	Если ЗначениеЗаполнено(ТаблицаЦветов) Тогда
		
		Значение = Значение + "{\colortbl;" + ТаблицаЦветов + "}" + Символы.ПС;
		
	КонецЕсли;
	
	Значение = Значение + "\viewkind4\uc1\sa200\lang9\paperw11906\paperh16838";
	
	Возврат Значение;
	
КонецФункции

Функция КонецRTF()
	
	Возврат "}";
	
КонецФункции

Функция ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка)
	
	Отступ = ?(Параграф.Отступ = 0, "", "\li" + Формат(Параграф.Отступ * 20, "ЧГ=0"));
	Если Параграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок Тогда
		
		ВидСписка = "{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent200{\pntxtb\'B7}}";
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
		
	ИначеЕсли Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
		
		ВидСписка = "{\pntext\f0 " + Формат(НомерСписка, "ЧГ=0") +".\tab}"
			+ "{\*\pn\pnlvlbody\pnf0\pnindent300\pnstart1\pndec{\pntxta.}}";
			
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
			
	Иначе
		
		ВидСписка = "";
		
	КонецЕсли;
	
	Данные = "\pard"
		+ СоответствиеТегов[Параграф.ГоризонтальноеПоложение]
		+ "\sl" + Формат(Параграф.МеждустрочныйИнтервал * 240, "ЧДЦ=0; ЧГ=0") + "\slmult1"
		+ Отступ
		+ ВидСписка;
		
	КоличествоЭлементов = Параграф.Элементы.Количество();
	Счетчик = 0;
	Для Каждого Элемент Из Параграф.Элементы Цикл
		
		Счетчик = Счетчик + 1;
		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
			
			Данные = Данные + ОбработатьТекст(Элемент, СоответствиеТегов);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			
			Если Счетчик < КоличествоЭлементов Тогда
				
				Данные = Данные + "\line";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Данные = Данные + "\par";
		
	Возврат Данные;
	
КонецФункции

Функция ОбработатьТекст(ЭлементТекст, СоответствиеТегов)

	Данные = ШрифтТекста(ЭлементТекст, СоответствиеТегов) + " ";
		
	Текст = ЭлементТекст.Текст;
	ДлинаСтроки = СтрДлина(Текст);
	Для Н = 1 По ДлинаСтроки Цикл
		
		Код = Формат(КодСимвола(Текст, Н), "ЧВН=; ЧГ=0");
		Данные = Данные + "\u" + Код + "?"; // символ в Unicode, если символ не распознан - вывод знака вопроса
		
	КонецЦикла;
	Данные = Данные + ШрифтТекста(ЭлементТекст, СоответствиеТегов, Истина);
	
	Возврат Данные;

КонецФункции

Функция ШрифтТекста(ЭлементТекста, СоответствиеТегов, ЗакрывающийТег = Ложь)
	
	Значение		 = "";
	Шрифт			 = ЭлементТекста.Шрифт;
	ЦветТекста		 = ЭлементТекста.ЦветТекста;
	ЦветФона		 = ЭлементТекста.ЦветФона;
	Если Не ЗакрывающийТег Тогда
		
		Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
			
			ТегШрифта = СоответствиеТегов[Шрифт.Имя];
			Значение = Значение + ?(ТегШрифта = Неопределено, "", ТегШрифта); // определяем шрифт
			
		Иначе
			
			Значение = Значение + "\f0"; // шрифт по умолчанию
			
		КонецЕсли;
		Если Шрифт.Размер <> Неопределено Тогда
			
			Значение = Значение + ?(Шрифт.Размер = -1 ИЛИ Шрифт.Размер = 0, "\fs20", "\fs" + Формат(Шрифт.Размер * 2, "ЧГ=0"));
			
		КонецЕсли;
		
	КонецЕсли;
	Если Шрифт.Полужирный <> Неопределено Тогда 
		
		Значение = Значение + ?(Шрифт.Полужирный, ?(ЗакрывающийТег, "\b0", "\b"), "");
		
	КонецЕсли;
	Если Шрифт.Наклонный <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Наклонный, ?(ЗакрывающийТег, "\i0", "\i"), "");
		
	КонецЕсли;
	Если Шрифт.Подчеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Подчеркивание, ?(ЗакрывающийТег, "\ulnone", "\ul"), "");
		
	КонецЕсли;
	Если Шрифт.Зачеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Зачеркивание, ?(ЗакрывающийТег, "\strike0", "\strike"), "");
		
	КонецЕсли;
	Если ЦветТекста.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветТекста.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветТекста];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\cf0", "\cf" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
	Если ЦветФона.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветФона.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветФона];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\highlight0", "\highlight" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Функция ПолучитьДанныеДокумента(ТаблицаДанных, ИмяТаблицы = "", ТекстПрогресса = "", ДелительПрогресса = 1)
	
	// Выясняем вид печатной формы
	МаксИндексКолонок = ТаблицаДанных.Колонки.Количество() - 1;
	КоличествоСтрок = ТаблицаДанных.Количество();
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ВидДокумента = ОпределитьВидДокументаПоИмениТаблицы(ИмяТаблицы);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		ВидДокумента = ОпределитьВидДокумента(ТаблицаДанных);
	КонецЕсли;
		
	// Получаем данные о товарах в соответствии с видом печатной формы		
	ДанныеДокумента = Неопределено;
	Если Не ПустаяСтрока(ВидДокумента) Тогда
	
		ДанныеДокумента = ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента, ТекстПрогресса, ДелительПрогресса);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось определить тип загружаемого документа, возможно, загрузка таких файлов пока не поддерживается.'");
		
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

// ТОРГ12

Функция ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок)
		
	ДанныеПоставщика = Новый Структура;
	ИскатьДанныеПоставщика = Ложь;	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеПоставщика И СтрНайти(ПодготовленноеЗначение, "инн") > 0 Тогда			
						
			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				Если Не ДанныеПоставщика.Свойство("ЮридическийАдрес") Тогда				
					
					// выделяем адрес из строки
					Адрес = ЗначениеЯчейки;
					Адрес = Сред(Адрес, СтрНайти(НРег(Адрес), "инн"));
					Адрес = Сред(Адрес, СтрНайти(Адрес, ",") + 1);
					ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "тел.:") - 1;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "факс:") - 1;
						
					КонецЕсли;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "р/с") - 1;
						
					КонецЕсли;	
					Если ПозицияКонцаАдреса <= 0 Тогда						
						
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));					
					
					Иначе 
						
						Адрес = СокрЛП(Лев(Адрес, ПозицияКонцаАдреса));
						Если Прав(Адрес, 1) = "," Тогда
							
							Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
							
						КонецЕсли;
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));
						
					КонецЕсли;	
				
				КонецЕсли;
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеПоставщика.Свойство("НаименованиеПолное") Тогда
					
					ДанныеПоставщика.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеПоставщика, ЧастьСтроки);
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Телефон") И СтрНайти(НРег(ЧастьСтроки), "тел.:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "тел.:", "");
					ДанныеПоставщика.Вставить("Телефон", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Факс") И СтрНайти(НРег(ЧастьСтроки), "факс:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "факс:", "");
					ДанныеПоставщика.Вставить("Факс", СокрЛП(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("РасчетныйСчет") И СтрНайти(НРег(ЧастьСтроки), "р/с") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("РасчетныйСчет", ЦифрыИзСтроки(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("БИК") И СтрНайти(НРег(ЧастьСтроки), "бик") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("БИК", ЦифрыИзСтроки(ЧастьСтроки));		
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = "поставщик" Тогда 
		
			ИскатьДанныеПоставщика = Истина;
		
		КонецЕсли;			
		
	КонецЦикла; 
	
	Возврат ДанныеПоставщика;

КонецФункции // ПолучитьДанныеПоставщика(СтрокаДанных, МаксИндекКолонок)()

Функция ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьДанныеКонтрагента = Ложь;		
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеКонтрагента И СтрНайти(НРег(ЗначениеЯчейки), "инн") > 0 Тогда	

			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
					
					ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, ЧастьСтроки);
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = НРег(КлючевоеСлово) Тогда 
		
			ИскатьДанныеКонтрагента = Истина;
		
		КонецЕсли;				
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, СтрокаИННКПП)

	Разделитель = "/";
	Если СтрНайти(СтрокаИННКПП, "\") > 0 Тогда
		
		Разделитель = "\";
		
	КонецЕсли;
	ИННКПП = СтрРазделить(СтрокаИННКПП, Разделитель);
	ДанныеКонтрагента.Вставить("ИНН", ЦифрыИзСтроки(ИННКПП[0]));
	Если ИННКПП.Количество() > 1 Тогда
		
		ДанныеКонтрагента.Вставить("КПП", ЦифрыИзСтроки(ИННКПП[1]));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента)
		
	НомерНайден = Ложь;
	ДатаНайдена = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если Не НомерНайден И СтрНайти(ПодготовленноеЗначение, "номердокумента") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(НомТН) Тогда
				
				ДанныеДокумента.Вставить("НомТН", Строка(НомТН));
				
			Иначе
				
				// Ищем номер ТН до колонки с датой составления
				Для НомерСтолбца = Н + 1 По МаксИндексКолонок Цикл
					
					НазваниеЯчейки = ПодготовитьСтроку(СтрокаДанных[НомерСтолбца]);
					Если ТипЗнч(НазваниеЯчейки) = Тип("Строка") И СтрНайти(НазваниеЯчейки, "датасоставления") > 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][НомерСтолбца]);
					Если ЗначениеЗаполнено(НомТН) Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				ДанныеДокумента.Вставить("НомТН", ?(ЗначениеЗаполнено(НомТН), НомТН, "0"));
				
			КонецЕсли;
			НомерНайден = Истина;
			
		ИначеЕсли Не ДатаНайдена И СтрНайти(ПодготовленноеЗначение, "датасоставления") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			ДатаТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(ДатаТН) Тогда
				
				ДанныеДокумента.Вставить("ДатаТН", Строка(ДатаТН));
				
			Иначе	
				
				ДанныеДокумента.Вставить("ДатаТН", "");
				
			КонецЕсли;	
			ДатаНайдена = Истина;
					
		КонецЕсли;						
		Если НомерНайден И ДатаНайдена Тогда
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры // ПолучитьНомерДатуДокумента()

Процедура ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номер";
	НоваяСтрокаЗаголовков.НомерКолонки		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";
	НоваяСтрокаЗаголовков.НомерКолонки		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "единицаизмерения";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количествомассанетто";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "суммабезучетандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "12";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммасучетомндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "15";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных	 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска	 	= "кодпоокеи";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";   	
	
КонецПроцедуры

// УПД

Процедура НомерДатаУПД(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	МассивДанных = СтрРазделить(ТекстСтроки, " ""N№", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	// Поиск номера счета-фактуры.
	ИндексДанных = МассивПоиск.Найти("счетфактура");
	Если ИндексДанных <> Неопределено
		И МассивДанных.ВГраница() > ИндексДанных + 1 Тогда

		ДанныеДокумента.Вставить("НомТН", МассивДанных[ИндексДанных + 1]);
		
		// Поиск даты счета-фактуры, после того как нашли номер СФ.
		ИндексДанных = МассивПоиск.Найти("от");
		Если ИндексДанных <> Неопределено
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			
			Дата = '00010101';
			
			День     = ПодготовитьСтроку(МассивДанных[ИндексДанных + 1]);
			МесяцСтр = НРег(?(МассивДанных.ВГраница() >= ИндексДанных + 2, МассивДанных[ИндексДанных + 2], ""));
			Год = ЦифрыИзСтроки(?(МассивДанных.ВГраница() >= ИндексДанных + 3, МассивДанных[ИндексДанных + 3], ""), Истина);
			
			Если СтрНайти(МесяцСтр, "январ") > 0 Тогда
				Месяц = 1;
			ИначеЕсли СтрНайти(МесяцСтр, "феврал") > 0 Тогда
				Месяц = 2;
			ИначеЕсли СтрНайти(МесяцСтр, "март") > 0 Тогда
				Месяц = 3;
			ИначеЕсли СтрНайти(МесяцСтр, "апрел") > 0 Тогда
				Месяц = 4;
			ИначеЕсли СтрНайти(МесяцСтр, "ма") > 0 Тогда
				Месяц = 5;
			ИначеЕсли СтрНайти(МесяцСтр, "июн") > 0 Тогда
				Месяц = 6;
			ИначеЕсли СтрНайти(МесяцСтр, "июл") > 0 Тогда
				Месяц = 7;
			ИначеЕсли СтрНайти(МесяцСтр, "август") > 0 Тогда
				Месяц = 8;
			ИначеЕсли СтрНайти(МесяцСтр, "сентябр") > 0 Тогда
				Месяц = 9;
			ИначеЕсли СтрНайти(МесяцСтр, "октябр") > 0 Тогда
				Месяц = 10;
			ИначеЕсли СтрНайти(МесяцСтр, "ноябр") > 0 Тогда
				Месяц = 11;
			ИначеЕсли СтрНайти(МесяцСтр, "декабр") > 0 Тогда
				Месяц = 12;
			ИначеЕсли ЗначениеЗаполнено(День) Тогда
				Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(День);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(День)
				И ЗначениеЗаполнено(Месяц)
				И ЗначениеЗаполнено(Год) Тогда
				
				Дата = Дата(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Год),
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Месяц),
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(День))
					
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ДатаСчФ", Дата);
			ДанныеДокумента.Вставить("ДатаТН", Формат(ДанныеДокумента.ДатаСчФ, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат ДанныеКонтрагента;
	КонецЕсли;
	
	ИндексСтрокиДанных = ТаблицаДанных.Индекс(СтрокаДанных);
	КоличествоСтрок  = ТаблицаДанных.Количество();
	
	// Данные контрагента
	ИндексДанныхКлючевогоСлова = ДанныеДляОбработки.МассивПоиск.Найти(КлючевоеСлово);
	Если ИндексДанныхКлючевогоСлова <> Неопределено
		И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанныхКлючевогоСлова + 1 Тогда
		
		// Наименование
		ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеДляОбработки.МассивДанных[ИндексДанныхКлючевогоСлова + 1]);
		
		// Адрес и ИНН
		Пока ИндексСтрокиДанных < КоличествоСтрок - 1 Цикл
			
			ИндексСтрокиДанных = ИндексСтрокиДанных + 1;
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(ТаблицаДанных[ИндексСтрокиДанных], МаксИндексКолонок);
			Если ДанныеДляОбработки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидКонтрагента = КлючевоеСлово;
			Если Не ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
				
				ИндексДанных = ПоискКлючевогоСловаВМассиве(ДанныеДляОбработки.МассивПоиск, "адрес", ВидКонтрагента);
				Если ИндексДанных <> Неопределено
						И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
					ДанныеКонтрагента.Вставить("ЮридическийАдрес", ДанныеДляОбработки.МассивДанных[ИндексДанных + 1]);
				КонецЕсли;
					
			ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") Тогда
				
				ИндексДанных = ПоискКлючевогоСловаВМассиве(ДанныеДляОбработки.МассивПоиск, "иннкпп", ВидКонтрагента);
				Если ИндексДанных <> Неопределено
						И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
						
					ИННКПП = ДанныеДляОбработки.МассивДанных[ИндексДанных + 1];
					МассивИННКПП = СтрРазделить(ИННКПП, "/\");
					Если МассивИННКПП.Количество() > 0 Тогда
						ДанныеКонтрагента.Вставить("ИНН", СокрЛП(МассивИННКПП[0]));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Прервать; // нашли адрес и ИНН, завершаем цикл
			КонецЕсли
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ПолучитьСтатусУПД(ДанныеДокумента, СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексДанныхКлючевогоСлова = ДанныеДляОбработки.МассивПоиск.Найти(КлючевоеСлово);
	Если ИндексДанныхКлючевогоСлова <> Неопределено
			И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанныхКлючевогоСлова + 1 Тогда
		ДанныеДокумента.Вставить("Статус", ДанныеДляОбработки.МассивДанных[ИндексДанныхКлючевогоСлова + 1]);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоУПДСоСтатусом_1(Статус)
	
	Возврат СтрНайти(Статус, "1") > 0;
	
КонецФункции

Функция ПоискКлючевогоСловаВМассиве(МассивДляПоиска, КлючевоеСлово, ВидКонтрагента)
	
	Результат = Неопределено;
	
	ИндексКлючевогоСловаВМассиве = Новый Массив;
	Для Индекс = 0 По МассивДляПоиска.ВГраница() Цикл
		ЗначениеЭлемента = МассивДляПоиска[Индекс];
		Если СтрНайти(ЗначениеЭлемента, КлючевоеСлово) > 0 Тогда
			ИндексКлючевогоСловаВМассиве.Добавить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексКлючевогоСловаВМассиве.Количество() = 1 Тогда
		// Данные контрагентов в УПД расположены в одной колонке.
		Результат = ИндексКлючевогоСловаВМассиве[0];
	ИначеЕсли ИндексКлючевогоСловаВМассиве.Количество() > 1 Тогда
		// Данные контрагентов в УПД расположены в 2 колонках, слева - Продавец, справа - Покупатель.
		Если НРег(ВидКонтрагента) = "продавец" Тогда
			Результат = ИндексКлючевогоСловаВМассиве[0];
		ИначеЕсли НРег(ВидКонтрагента) = "покупатель" Тогда
			Результат = ИндексКлючевогоСловаВМассиве[1];
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок)
	
	МассивДанных = Новый Массив;
	Для Н = 0 По МаксИндексКолонок Цикл
		ТекстСтроки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ТекстСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Учтем случай, когда заголовок данных и данные находятся в одной ячейке.
		ДанныеСтроки = СтрРазделить(ТекстСтроки, ":", Ложь);
		Для Каждого ЭлементМассива Из ДанныеСтроки Цикл
			МассивДанных.Добавить(ЭлементМассива);
		КонецЦикла;
	КонецЦикла;
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	Возврат Новый Структура("МассивДанных, МассивПоиск", МассивДанных, МассивПоиск);
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименованиетовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "условноеобозначение";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количество";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправбезналога";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправсналогом";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "налоговаяставка";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "7";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "б";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";  	
	
	// код страны происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цифровойкод";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НазваниеСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "краткоенаименование";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// ГТД (УПД старого формата).
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомерТД";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ПодготовитьСтроку("Номер таможенной декларации");
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// РНПТ или ГТД.
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СведенияПрослеживаемости";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ПодготовитьСтроку("Регистрационный номер декларации на товары");
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// Количество прослеживаемости.
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КоличествоПрослеживаемости";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ПодготовитьСтроку("Количество товара, подлежащего прослеживаемости");
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
КонецПроцедуры

// Общие

Функция ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента, ТекстПрогресса, ДелительПрогресса = 1)
		
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ВидДокумента", ВидДокумента);
	
	Если ДелительПрогресса = 0 Тогда
		ДелительПрогресса = 1;
	КонецЕсли;
	
	Если ВидДокумента = ВидДокументаОтчетWB() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 0;
		КоличествоСовпаденийНумерацииКолонок = 4;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровМаркетплейс();
	ИначеЕсли ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 0;
		КоличествоСовпаденийНумерацииКолонок = 0;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровМаркетплейс();
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
		КоличествоСовпаденийНумерацииКолонок = 4;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровМаркетплейс();
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
		КоличествоСовпаденийНумерацииКолонок = 0;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровМаркетплейс();		
	ИначеЕсли ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 0;
		КоличествоСовпаденийНумерацииКолонок = 0;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровУведомлениеОВыкупе();
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
		КоличествоСовпаденийЗаголовков = 4;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
		КоличествоСовпаденийНумерацииКолонок = 1;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровУведомлениеОВыкупе();
	ИначеЕсли ЭтоОтчетЯндекс(ВидДокумента) Тогда
		КоличествоСовпаденийЗаголовков = 6;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 0;
		КоличествоСовпаденийНумерацииКолонок = 0;
		ТаблицаТоваров = ПодготовитьТаблицуТоваровЯндекс();
	Иначе
		КоличествоСовпаденийЗаголовков = 5;
		КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
		КоличествоСовпаденийНумерацииКолонок = 5;
		ТаблицаТоваров = ПодготовитьТаблицуТоваров();
	КонецЕсли;
		
	НайденаСтрокаЗаголовкаТаблицы			 = Ложь;
	НайденаВтораяСтрокаЗаголовкаТаблицы		 = Ложь;
	НайденаСтрокаНумерацииКолонокТаблицы	 = Ложь;
	
	СчетчикСтрок = 0;
	ПроцентВыполнения = 0;
	НомерСтрокиТовара = 1;
	НомерТаблицы = 1;
	ДанныеШапкиПолучены = Ложь;
	
	ОбработкаСтрокаЧисло = 0;
	ТипЧисло             = Новый ОписаниеТипов("Число");
	РезультатЗапятая     = ТипЧисло.ПривестиЗначение("5,02");
	РезультатТочка       = ТипЧисло.ПривестиЗначение("5.02");
	Если РезультатЗапятая = 0
		И РезультатТочка <> 0 Тогда
		ОбработкаСтрокаЧисло = 1;
	ИначеЕсли РезультатТочка = 0
		И РезультатЗапятая <> 0 Тогда
		ОбработкаСтрокаЧисло = 2;
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Если Не ДанныеШапкиПолучены И ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
		
			ДанныеКонтрагента = ПолучитьРеквизитыWB();
			ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
		
			ДанныеШапкиПолучены = Истина;
		КонецЕсли;

		Если Не ДанныеШапкиПолучены Тогда
			
			Если ВидДокумента = ВидДокументаТОРГ12() Тогда
			
				Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Грузополучатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						
					КонецЕсли;
				
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Плательщик");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("НомТН") Тогда	
				
					ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента);			
					Если ДанныеДокумента.Свойство("НомТН") Тогда
						
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;	
			
			ИначеЕсли ВидДокумента = ВидДокументаУПД() Тогда // УПД
				
				Если Не ДанныеДокумента.Свойство("НомТН") Тогда
					
					НомерДатаУПД(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				Иначе
					
					Если Не ДанныеДокумента.Свойство("Статус") Тогда
						ПолучитьСтатусУПД(ДанныеДокумента, СтрокаДанных, МаксИндексКолонок, "статус");
					КонецЕсли;
					
					Если Не ДанныеДокумента.Свойство("Поставщик") Тогда
						ДанныеПродавца = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "продавец");
						Если ДанныеПродавца.Количество() > 0 Тогда
							ДанныеДокумента.Вставить("Поставщик", ДанныеПродавца);
						КонецЕсли;
					КонецЕсли;
					
					Если Не ДанныеДокумента.Свойство("Плательщик") Тогда
						ДанныеПокупателя = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "покупатель");
						Если ДанныеПокупателя.Количество() > 0 Тогда
							ДанныеДокумента.Вставить("Плательщик"     , ДанныеПокупателя);
							ДанныеДокумента.Вставить("Грузополучатель", ДанныеПокупателя);
						КонецЕсли;
					КонецЕсли;
					
					Если ДанныеДокумента.Свойство("Статус")
							И ДанныеДокумента.Свойство("Поставщик")
							И ДанныеДокумента.Свойство("Плательщик") Тогда
						ДанныеШапкиПолучены = Истина;
						Если ЭтоУПДСоСтатусом_1(ДанныеДокумента.Статус) Тогда
							// Будет создана счет-фактура к документу поступления.
							ДанныеДокумента.Вставить("НомерСчФ", ДанныеДокумента.НомТН);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon()
				ИЛИ ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
				
				Если Не ДанныеДокумента.Свойство("Номер") Тогда
					
					НомерОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Дата") Тогда
					
					ДатаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Договор") Тогда
					
					ДоговорОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Плательщик") Тогда
					ИмяПоляПлательщик = ?(ВидДокумента = ВидДокументаОтчетOzonВыкуп(), "Покупатель", "Плательщик");
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ИмяПоляПлательщик);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Получатель") Тогда
					ИмяПоляПолучатель = ?(ВидДокумента = ВидДокументаОтчетOzonВыкуп(), "Продавец", "Получатель");
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ИмяПоляПолучатель);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Получатель", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
					
				Если ДанныеДокумента.Свойство("Плательщик")
					И ДанныеДокумента.Свойство("Получатель") Тогда
					ДанныеШапкиПолучены = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
				
				Если Не ДанныеДокумента.Свойство("Дата") Тогда
					
					ДатаНомерОтчетОзонСписание(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Договор") Тогда
					
					ДоговорОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Плательщик") Тогда	
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Плательщик");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Получатель") Тогда	
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Получатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Получатель", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
					
				Если ДанныеДокумента.Свойство("Плательщик")
					И ДанныеДокумента.Свойство("Получатель") Тогда
					ДанныеШапкиПолучены = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
				
				Если Не ДанныеДокумента.Свойство("Номер") Тогда
					
					ДатаНомерWBУведомлениеВыкупа(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				Иначе
					
					Если Не ДанныеДокумента.Свойство("Получатель") Тогда	
						ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетWB(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "кому");
						Если ДанныеКонтрагента.Количество() > 0 Тогда
							ДанныеДокумента.Вставить("Получатель", ДанныеКонтрагента);
						КонецЕсли;
						
						//плательщик всегда один - Вайлдберриз
						ДанныеКонтрагента = ПолучитьРеквизитыWB();
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДанныеДокумента.Свойство("Дата")
					И ДанныеДокумента.Свойство("Номер")
					И ДанныеДокумента.Свойство("Плательщик")
					И ДанныеДокумента.Свойство("Получатель") Тогда
					ДанныеШапкиПолучены = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ВидДокумента = ВидДокументаОтчетWB() Тогда
				
				Если Не ДанныеДокумента.Свойство("Номер") Тогда
					
					ДатаНомерОтчетWB(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				Иначе
					
					Если Не ДанныеДокумента.Свойство("Плательщик") Тогда	
						ДанныеКонтрагента = ПолучитьРеквизитыWB();
						Если ДанныеКонтрагента.Количество() > 0 Тогда
							ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						КонецЕсли;
					КонецЕсли;
				
					Если Не ДанныеДокумента.Свойство("Получатель") Тогда	
						ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетWB(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Продавец");
						Если ДанныеКонтрагента.Количество() > 0 Тогда
							ДанныеДокумента.Вставить("Получатель", ДанныеКонтрагента);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДанныеДокумента.Свойство("Дата")
					И ДанныеДокумента.Свойство("Плательщик")
					И ДанныеДокумента.Свойство("Получатель") Тогда
					ДанныеШапкиПолучены = Истина;
					
				КонецЕсли;

			ИначеЕсли ЭтоОтчетЯндекс(ВидДокумента) Тогда
				
				Если Не ДанныеДокумента.Свойство("Договор") Тогда
					
					ДоговорОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Дата") Тогда
					
					ДатаОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Заказчик") Тогда	
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, "Заказчик (магазин)");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Заказчик", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ДанныеДокумента.Свойство("Исполнитель") Тогда	
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, "Исполнитель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						ДанныеДокумента.Вставить("Исполнитель", ДанныеКонтрагента);
					КонецЕсли;
				КонецЕсли;
					
				Если ДанныеДокумента.Свойство("Заказчик")
					И ДанныеДокумента.Свойство("Исполнитель") Тогда
					ДанныеШапкиПолучены = Истина;
				КонецЕсли;
							
			КонецЕсли;
			
		Иначе
			
			// поиск данных табличной части
			Если НЕ НайденаСтрокаЗаголовкаТаблицы Тогда
				
				ТаблицаЗаголовков = ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента, НомерТаблицы);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 1));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийЗаголовков Тогда
						
						НайденаСтрокаЗаголовкаТаблицы = Истина;
						Если ВидДокумента = ВидДокументаОтчетWB() Тогда
							НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;
						КонецЕсли;
						
						Если ВидДокумента = ВидДокументаОтчетWBДетальный()
							ИЛИ ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
							НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;
							НайденаСтрокаНумерацииКолонокТаблицы = Истина;
						КонецЕсли;
						
						Если ЭтоОтчетЯндекс(ВидДокумента) Тогда
							НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;
							НайденаСтрокаНумерацииКолонокТаблицы = Истина;
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЕсли;
				
			ИначеЕсли Не НайденаВтораяСтрокаЗаголовкаТаблицы Тогда	
				
				НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 2));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийВторойСтрокиЗаголовков Тогда
						
						НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;
						Если КоличествоСовпаденийНумерацииКолонок = 0 Тогда
						    НайденаСтрокаНумерацииКолонокТаблицы = Истина;
						КонецЕсли;
					КонецЕсли;
				
				КонецЕсли;
				
			// поиск нумерации колонок таблицы товаров	
			ИначеЕсли НЕ НайденаСтрокаНумерацииКолонокТаблицы Тогда
				
				ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков);
				МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("НумерацияКолонкиНайдена", Истина));
				Если МассивЗаголовков.Количество() >= КоличествоСовпаденийНумерацииКолонок Тогда
					
					НайденаСтрокаНумерацииКолонокТаблицы = Истина;
					
				КонецЕсли;
				
				// поиск товаров
			ИначеЕсли НайденаСтрокаЗаголовкаТаблицы И НайденаВтораяСтрокаЗаголовкаТаблицы И НайденаСтрокаНумерацииКолонокТаблицы Тогда	
				
				ПредыдущийНомерСтрок = НомерСтрокиТовара;
				РазобратьСтрокуТабличнойЧасти(ТаблицаДанных, СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров, ОбработкаСтрокаЧисло);
				
				//Если строка товара не найдена, проверим начало новой таблицы
				Если ПредыдущийНомерСтрок = НомерСтрокиТовара
						И ЭтоЗагрузкаИзМаркетплейса(ВидДокумента) Тогда
					Если НомерСтрокиТовара > 1 Тогда
						НовыйНомерТаблицы = НомерТаблицы + 1;
					КонецЕсли;
					
					Если НомерТаблицы <> НовыйНомерТаблицы Тогда
						НомерТаблицы = НовыйНомерТаблицы;
						НомерСтрокиТовара = 1;
						НайденаСтрокаЗаголовкаТаблицы = Ложь;
						НайденаВтораяСтрокаЗаголовкаТаблицы = Ложь;
						НайденаСтрокаНумерацииКолонокТаблицы = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если ПроцентВыполнения <> Окр(СчетчикСтрок/(КоличествоСтрок*ДелительПрогресса), 1) Тогда
			ПроцентВыполнения = Окр(СчетчикСтрок/(КоличествоСтрок*ДелительПрогресса), 1);
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения*100, ТекстПрогресса);
		КонецЕсли;
		
	КонецЦикла;
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
	ТекстОшибки = "";
	Если ДанныеДокумента.ВидДокумента = ВидДокументаТОРГ12() 
			И ДанныеДокумента.Свойство("Грузополучатель") 
			И ДанныеДокумента.Свойство("Поставщик") 
			И ДанныеДокумента.Свойство("Плательщик") 
			И ДанныеДокумента.Свойство("НомТН") Тогда
			
		ПроверитьДанныеПолучателя(ДанныеДокумента);
			
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
			
		Возврат ДанныеДокумента;
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаУПД() 
				И ДанныеДокумента.Свойство("НомТН")
				И ДанныеДокумента.Свойство("Грузополучатель")
				И ДанныеДокумента.Свойство("Плательщик")
				И ДанныеДокумента.Свойство("Поставщик") Тогда
				
		Если ПустаяСтрока(ДанныеДокумента.Поставщик.ИНН) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");
			
		КонецЕсли;  
		
		ПроверитьДанныеПолучателя(ДанныеДокумента);
		
		ИНН = "";
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
		
		Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
			ОпределитьПериодОтчетаWB(ДанныеДокумента);
		КонецЕсли;
		
		Возврат ДанныеДокумента;
		
	ИначеЕсли ЭтоОтчетЯндекс(ДанныеДокумента.ВидДокумента) Тогда
		
		Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
			ДанныеДокумента.Вставить("Дата", ТекущаяДата());
		КонецЕсли;
		
		Возврат ДанныеДокумента;
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
		
		Если ДанныеДокумента.Свойство("Получатель") Тогда
			
			СсылкаНаОрганизацию = Неопределено;
			
			Если ДанныеДокумента.Получатель.Свойство("НаименованиеПолное")
				И ЗначениеЗаполнено(ДанныеДокумента.Получатель.НаименованиеПолное) Тогда
				СсылкаНаОрганизацию = СсылкаНаОрганизациюПоНаименованию(ДанныеДокумента.Получатель.НаименованиеПолное);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
				ДанныеДокумента.Получатель.Вставить("Ссылка", СсылкаНаОрганизацию);
			Иначе
				//Пользователю будет предложен интерактивный выбор организации
				ДанныеДокумента.Удалить("Получатель");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось разобрать файл.'");
			Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ' Не найден номер документа'");
			КонецЕсли;
			Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ' Не найдена дата документа'");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
			ДанныеДокумента.Вставить("Дата", ТекущаяДата());
		КонецЕсли;
					
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаОтчетWB() 
		ИЛИ ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzon()
		ИЛИ ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzonВыкуп()
		ИЛИ ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
		
		Если ДанныеДокумента.Свойство("Плательщик")
			И ДанныеДокумента.Свойство("Получатель") Тогда
		
			ИНН = "";
			ДанныеДокумента.Получатель.Свойство("ИНН", ИНН);
						
			Если ЗначениеЗаполнено(ИНН) Тогда
			
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. В справочнике ""Организации"" нет получателя отчета.'");
				КонецЕсли;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН получателя.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось разобрать файл.'");
			Если НЕ ДанныеДокумента.Свойство("Плательщик") Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ' Не найдены реквизиты составителя отчета.'");
			КонецЕсли;
			Если НЕ ДанныеДокумента.Свойство("Получатель") Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ' Не найдены реквизиты получателя отчета.'");
			КонецЕсли;
			Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ' Не найдена дата отчета.'");
			КонецЕсли;			
		КонецЕсли;
		
		Если НЕ ДанныеДокумента.Свойство("Дата") Тогда
			ДанныеДокумента.Вставить("Дата", ТекущаяДата());
		КонецЕсли;
					
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;
		
	Иначе		
		
		Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Нет данных грузополучателя или не указан его ИНН'");
		
		ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");
			
		ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных плательщика или не указан его ИНН.'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл.'");
			
		КонецЕсли;
		
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДанныеПолучателя(ДанныеДокумента)
	
	Грузополучатель = ДанныеДокумента.Грузополучатель;
	Плательщик = ДанныеДокумента.Плательщик;
	ИННГрузополучателя = "";
	Если Не Грузополучатель.Свойство("ИНН", ИННГрузополучателя) Тогда
		
		Грузополучатель.Вставить("ИНН");
		
	КонецЕсли;
	ИННПлательщика = "";
	Если Не Плательщик.Свойство("ИНН", ИННПлательщика) Тогда
		
		Плательщик.Вставить("ИНН");
		
	КонецЕсли;
	Если ПустаяСтрока(Грузополучатель.ИНН) Тогда
		
		Грузополучатель.ИНН = ИННПлательщика;
		
	КонецЕсли;
	Если ПустаяСтрока(Плательщик.ИНН) Тогда
		
		Плательщик.ИНН = ИННГрузополучателя;
		
	КонецЕсли;	

КонецПроцедуры 

Функция УдалитьПереносыСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
		
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК Тогда 
				
			СимволСтроки = ?(СимволСтроки = Символы.ПС, " ", "");
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СокрЛП(СтрРезультат); 

КонецФункции// УдалитьПереносСтроки()

// Перевод текста в нижний регистр и удаление из нее крайних пробелов и других спец. символов.
Функция ПодготовитьСтроку(Знач Стр, УдалятьПробелы = Истина)
	
	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		Возврат Стр;
	КонецЕсли;
	
	Стр = СокрЛП(НРег(Стр));
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = "-"
			ИЛИ (УдалятьПробелы И СимволСтроки = " ")
			ИЛИ СимволСтроки = "№"
			ИЛИ СимволСтроки = """"
			ИЛИ СимволСтроки = ","
			ИЛИ СимволСтроки = "."
			ИЛИ СимволСтроки = ":"
			ИЛИ СимволСтроки = ";"
			ИЛИ СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК
			ИЛИ СимволСтроки = "/"
			ИЛИ СимволСтроки = "("
			ИЛИ СимволСтроки = ")"
			ИЛИ СимволСтроки = "\"
			ИЛИ СимволСтроки = "|" Тогда 
				
			Продолжить;
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ЦифрыИзСтроки(Знач Стр, ТолькоЛидирующиеЦифры = Ложь)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если КодСимвола(СимволСтроки) < 48 ИЛИ КодСимвола(СимволСтроки) > 57 Тогда
			Если ТолькоЛидирующиеЦифры Тогда
				Возврат СтрРезультат; // берем цифры только из начала строки
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;   

КонецФункции // ЦифрыИзСтроки()

Функция ПодготовитьТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов");
	ТаблицаТоваров.Колонки.Добавить("НаимТов");
	ТаблицаТоваров.Колонки.Добавить("Артикул");	
	ТаблицаТоваров.Колонки.Добавить("НаимЕдИзм");
	ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов");
	ТаблицаТоваров.Колонки.Добавить("Нетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СумБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СумУчНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаТоваров.Колонки.Добавить("КодСтраны");
	ТаблицаТоваров.Колонки.Добавить("НазваниеСтраны");
	ТаблицаТоваров.Колонки.Добавить("НомерТД");
	ТаблицаТоваров.Колонки.Добавить("СведенияПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("КоличествоПрослеживаемости");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента, НомерТаблицы)

	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ВидДокумента = ВидДокументаТОРГ12() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "номерпопорядку") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
		
		ИначеЕсли ВидДокумента = ВидДокументаУПД() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "наименованиетовара") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
			
		ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon()
			ИЛИ ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "реализовано") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "возвращеноклиентом") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
			
		ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "типкомпенсации") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
						
		ИначеЕсли ВидДокумента = ВидДокументаОтчетWB() или ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "вайлдберризреализовал") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
			
		ИначеЕсли ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "суммавыкупаруб") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
		
		ИначеЕсли ЭтоОтчетЯндекс(ВидДокумента) Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "названиетовара") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("НазваниеКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("КолонкаНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("НумерацияКолонкиНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗаголовков.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаЗаголовка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Если ВидДокумента = ВидДокументаТОРГ12() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаУПД() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетOzon(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетOzonСписание(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетOzonВыкуп(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаОтчетWB() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетWB(ТаблицаЗаголовков, НомерТаблицы);
		
	ИначеЕсли ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетWBДетальный(ТаблицаЗаголовков);
		
	ИначеЕсли ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковWBУведомлениеВыкупа(ТаблицаЗаголовков);
		
	ИначеЕсли ЭтоОтчетЯндекс(ВидДокумента) Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковОтчетЯндекс(ТаблицаЗаголовков, ВидДокумента);
		
	КонецЕсли;
	
	// индексы для поиска
	ТаблицаЗаголовков.Индексы.Добавить("НазваниеКолонки, КолонкаНайдена, НумерацияКолонкиНайдена, СтрокаЗаголовка");
			
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "КолонкаНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "НумерацияКолонкиНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(0, "ИндексКолонки");		
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = СтрокаДанных[Н];
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ?(ЗначениеЯчейки = "№", ЗначениеЯчейки, ПодготовитьСтроку(ЗначениеЯчейки));
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда
				
				Если ВидДокумента = ВидДокументаТОРГ12() И ЭлементМассива.НазваниеКолонки = "СтавкаНДС" Тогда
					
					Если ПодготовленноеЗначение = "ндс" Тогда // исключаю строки "СуммаСНДС" и "СуммаБезНДС"
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗаголовков;	

КонецФункции // ПодготовитьТаблицуПоиска()

Процедура НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента)
	
	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ПодготовленноеЗначение = "код" 
			ИЛИ СтрНайти(ПодготовленноеЗначение, "кодпоокеи") > 0
			ИЛИ СтрНайти(ПодготовленноеЗначение, "ценареализации") > 0
			ИЛИ СтрНайти(ПодготовленноеЗначение, "действительнаястоимостьтовара") > 0 Тогда
		
			ИскатьЗаголовки = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИндексРеализовано = 0;
	ИндексВозвращено = 0;
	Если ВидДокумента = ВидДокументаОтчетOzon() Тогда
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, НазваниеКолонки, СтрокаЗаголовка", Истина, "Реализовано", 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл
			ИндексРеализовано = ЭлементМассива.ИндексКолонки;
		КонецЦикла;
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, НазваниеКолонки, СтрокаЗаголовка", Истина, "Возвращено", 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл
			ИндексВозвращено = ЭлементМассива.ИндексКолонки;
		КонецЦикла;
	КонецЕсли;
		
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 2));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда

				Если ВидДокумента = ВидДокументаТОРГ12() И ЭлементМассива.НазваниеКолонки = "Артикул" Тогда
					
					Если ПодготовленноеЗначение = "код" Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon() 
					И (ЭлементМассива.НазваниеКолонки = "Цена" 
					ИЛИ ЭлементМассива.НазваниеКолонки = "Количество"
					ИЛИ ЭлементМассива.НазваниеКолонки = "Доплата") Тогда
				
				    Если Н >= ИндексРеализовано 
						И (Н < ИндексВозвращено ИЛИ ИндексВозвращено = 0) Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
				
				ИначеЕсли ВидДокумента = ВидДокументаОтчетOzon() 
					И (ЭлементМассива.НазваниеКолонки = "ЦенаВозврат" 
					ИЛИ ЭлементМассива.НазваниеКолонки = "КоличествоВозврат"
					ИЛИ ЭлементМассива.НазваниеКолонки = "ДоплатаВозврат") Тогда 
				
				     Если Н >= ИндексВозвращено Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков)

	Для Каждого СтрокаЗаголовков Из ТаблицаЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(Строка(СтрокаДанных[СтрокаЗаголовков.ИндексКолонки]));
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);		
		Если СтрокаЗаголовков.НомерКолонки = ПодготовленноеЗначение Тогда
			
			СтрокаЗаголовков.НумерацияКолонкиНайдена = Истина;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьСтрокуТабличнойЧасти(ТаблицаДанных, СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров, ОбработкаСтрокаЧисло = 0)

	ЗаголовокНомерПоПорядку = ТаблицаЗаголовков.Найти("НомТов", "НазваниеКолонки");
	КодМагазина = ТаблицаЗаголовков.Найти("КодМагазина", "НазваниеКолонки");
	Если ЗаголовокНомерПоПорядку <> Неопределено
		И ЗаголовокНомерПоПорядку.КолонкаНайдена Тогда
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНомерПоПорядку.ИндексКолонки]);
		ПодготовленноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
		Если ПодготовленноеЗначение <> НомерСтрокиТовара Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли КодМагазина <> Неопределено 
		И КодМагазина.КолонкаНайдена Тогда
		ЗаголовокНаименование = ТаблицаЗаголовков.Найти("НаимТов", "НазваниеКолонки");
		ЗначениеНаименование  = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНаименование.ИндексКолонки]);
		ЗначениеSKU           = УдалитьПереносыСтроки(СтрокаДанных[КодМагазина.ИндексКолонки]);
		Если ПустаяСтрока(ЗначениеНаименование) 
			И ПустаяСтрока(ЗначениеSKU) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЗаголовокНаименование = ТаблицаЗаголовков.Найти("НаимТов", "НазваниеКолонки");
		ЗаголовокАртикул      = ТаблицаЗаголовков.Найти("Артикул", "НазваниеКолонки");
		ЗаголовокВидДвижения  = ТаблицаЗаголовков.Найти("ВидДвижения", "НазваниеКолонки");
		ЗначениеНаименование  = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНаименование.ИндексКолонки]);
		ЗначениеАртикул       = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокАртикул.ИндексКолонки]);
		ЗначениеВидДвижения  = ?(ЗаголовокВидДвижения = Неопределено, "", УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокВидДвижения.ИндексКолонки]));
		Если (ПустаяСтрока(ЗначениеНаименование)
			ИЛИ ПустаяСтрока(ЗначениеАртикул))
			И ПустаяСтрока(ЗначениеВидДвижения) Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
	МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена", Истина));
	Для Каждого ЭлементЗаголовка Из МассивЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЭлементЗаголовка.ИндексКолонки]);
		Если ЭлементЗаголовка.НазваниеКолонки = "СведенияПрослеживаемости" Тогда
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ДанныеПрослеживаемости(
				ТаблицаДанных, ИндексСтроки, ТаблицаЗаголовков, НомерСтрокиТовара);
		ИначеЕсли ЭлементЗаголовка.НазваниеКолонки = "Артикул" Тогда
			Артикул = СокрЛП(Строка(ЗначениеЯчейки));
			АртикулДлина = СтрДлина(Артикул);
			Если АртикулДлина > 0 
				И АртикулДлина%2 = 0
				И Лев(Артикул, АртикулДлина/2) = Прав(Артикул, АртикулДлина/2) Тогда
				Артикул = Лев(Артикул, АртикулДлина/2);
			КонецЕсли;
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = Артикул;
		ИначеЕсли ЭлементЗаголовка.НазваниеКолонки = "ВидДвижения" Тогда
			
			ВидДвижения = СокрЛП(Строка(ЗначениеЯчейки));
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ВидДвижения;
			
		ИначеЕсли ЭлементЗаголовка.НазваниеКолонки = "КодМагазина" Тогда
			
			ЗначениеЯчейки = СокрЛП(Строка(ЗначениеЯчейки));
			Если ЗначениеЯчейки = "0" Тогда
				ЗначениеЯчейки = "";
			КонецЕсли;
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ЗначениеЯчейки;
			
		ИначеЕсли ЭлементЗаголовка.НазваниеКолонки = "ШтрихКод" Тогда
			
			ШтрихКод = СокрЛП(Строка(ЗначениеЯчейки));
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ШтрихКод;
			
		ИначеЕсли ЭлементЗаголовка.НазваниеКолонки = "Стоимость"
			ИЛИ ЭлементЗаголовка.НазваниеКолонки = "Уменьшение" Тогда
			
			Продолжить;
			
		Иначе
			Если ЭлементЗаголовка.ТипДанных = "Число" Тогда
				Если ОбработкаСтрокаЧисло = 1 Тогда
					ЗначениеЯчейки = СтрЗаменить(ЗначениеЯчейки, ",", ".");
				ИначеЕсли ОбработкаСтрокаЧисло = 2 Тогда
					ЗначениеЯчейки = СтрЗаменить(ЗначениеЯчейки, ".", ",");
				КонецЕсли;
				Если ЭлементЗаголовка.НазваниеКолонки = "СтавкаНДС" Тогда
					ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦифрыИзСтроки(ЗначениеЯчейки, Истина));
				Иначе
					ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
				КонецЕсли;
			ИначеЕсли ЭлементЗаголовка.ТипДанных = "Строка" Тогда
				ЗначениеЯчейки = Строка(ЗначениеЯчейки);
				Если ЭлементЗаголовка.НазваниеКолонки = "НаимЕдИзм" Тогда
					ЗначениеЯчейки = "";
				КонецЕсли;
				
			ИначеЕсли ЭлементЗаголовка.ТипДанных = "Дата" Тогда
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеЯчейки);
			КонецЕсли;
			НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ЗначениеЯчейки;
		КонецЕсли;
		
	КонецЦикла;
    НомерСтрокиТовара = НомерСтрокиТовара + 1;
	
КонецПроцедуры

Функция ДанныеПрослеживаемости(ТаблицаДанных, НачальныйИндексСтроки, ТаблицаЗаголовков, НомерСтрокиТовара)

	// Данные РНПТ находятся на разных строках табличного документа, поэтому выбираем их отдельно.
	ТаблицаРНПТ = Новый ТаблицаЗначений;
	ТаблицаРНПТ.Колонки.Добавить("РНПТ");
	ТаблицаРНПТ.Колонки.Добавить("Количество");
	
	ИндексРНПТ         = ТаблицаЗаголовков.Найти("СведенияПрослеживаемости", "НазваниеКолонки").ИндексКолонки;
	ИндексНомераСтроки = ТаблицаЗаголовков.Найти("НомТов", "НазваниеКолонки").ИндексКолонки;
	
	СтрокаКоличествоПрослеживаемости = ТаблицаЗаголовков.Найти("КоличествоПрослеживаемости", "НазваниеКолонки"); 
	ИндексКоличествоПрослеживаемости = ?(СтрокаКоличествоПрослеживаемости.КолонкаНайдена,
		СтрокаКоличествоПрослеживаемости.ИндексКолонки, Неопределено);
	
	Для Индекс = НачальныйИндексСтроки По ТаблицаДанных.Количество() - 1 Цикл
		СтрокаДанных = ТаблицаДанных[Индекс];
		РНПТ = УдалитьПереносыСтроки(СтрокаДанных[ИндексРНПТ]);
		НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
			УдалитьПереносыСтроки(СтрокаДанных[ИндексНомераСтроки]));
		Если НомерСтроки = НомерСтрокиТовара + 1 // началась следующая строка таблицы товаров
				Или Не ЗначениеЗаполнено(ЦифрыИзСтроки(РНПТ)) Тогда // закончилась таблица
			Прервать;
		КонецЕсли;
		СтрокаРНПТ = ТаблицаРНПТ.Добавить();
		СтрокаРНПТ.РНПТ = РНПТ;
		Если ИндексКоличествоПрослеживаемости <> Неопределено Тогда
			СтрокаРНПТ.Количество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				УдалитьПереносыСтроки(СтрокаДанных[ИндексКоличествоПрослеживаемости]));
		Иначе
			СтрокаРНПТ.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРНПТ;

КонецФункции

Функция ОпределитьВидДокумента(ТаблицаДанных)
	
	ВидДокумента      = "";
	МаксИндексКолонок = ТаблицаДанных.Колонки.Количество() - 1;
	
	Ключ1 = "";
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Для Н = 0 По МаксИндексКолонок Цикл
			
			ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
			Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
				Продолжить;
				
			КонецЕсли;
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, "унифицированнаяформаторг12") > 0 Тогда
				
				ВидДокумента = ВидДокументаТОРГ12();
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "универсальныйпередаточный") > 0 Тогда
				
				ВидДокумента = ВидДокументаУПД();
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "дляпродавцовнаплатформеozon") > 0 Тогда
				
				Если Ключ1 = "отчетокомпенсациях" Тогда
					ВидДокумента = ВидДокументаОтчетOzonСписание();
				ИначеЕсли Ключ1 = "отчетовыкупе" Тогда
					ВидДокумента = ВидДокументаОтчетOzonВыкуп();
				Иначе
					ВидДокумента = ВидДокументаОтчетOzon();
				КонецЕсли;
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "ореализациитоваровнасайтеwildberries") > 0 Тогда
				
				Ключ1 = "ОтчетWB";
				
			ИначеЕсли Ключ1 = "ОтчетWB" И СтрНайти(ПодготовленноеЗначение, "1реализованотоваразапериод") > 0 Тогда
				
				ВидДокумента = ВидДокументаОтчетWB();
				Прервать;
				
			ИначеЕсли Ключ1 <> "ОтчетWB" И СтрНайти(ПодготовленноеЗначение, "вайлдберризреализовалтоварпр") > 0 Тогда
				
				ВидДокумента = ВидДокументаОтчетWBДетальный();
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "уведомлениеовыкупе") > 0 Тогда
				
				ВидДокумента = ВидДокументаWBУведомлениеВыкупа();
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "отчетокомпенсациях") > 0 Тогда
				
				Ключ1 = "отчетокомпенсациях";
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "отчетовыкупленныхтоварах") > 0 Тогда
				
				Ключ1 = "отчетовыкупе";
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "отчетреализации") > 0 Тогда
				
				Ключ1 = "отчетреализации";
				
			КонецЕсли;
			
		КонецЦикла;
		Если Не ПустаяСтрока(ВидДокумента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидДокумента;

КонецФункции

#КонецОбласти

#Область ЗаписьДанныхДокументаВXML

Функция ЗаписатьДанныеВXML(ДанныеДокумента)
	
	ВременныйКаталог = ОбщегоНазначения.СоздатьВременныйКаталог();
	Ид = Строка(Новый УникальныйИдентификатор());
	Ошибки = Новый Массив;
	
	СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, Ошибки);	
	СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид);
	СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента);
	
	ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗипКонтейнер = Новый ЗаписьZipФайла();	
	ЗипКонтейнер.Открыть(ФайлАрхива);	
	ОбъектыДобавляемыеВАрхив = ВременныйКаталог + "*";
	ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив);
	ЗипКонтейнер.Записать();	
	
	ОбщегоНазначения.УдалитьВременныйКаталог(ВременныйКаталог);
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ФайлАрхива;
		
	КонецЕсли;
	
КонецФункции

// Выгружает электронный документ в файл.
//
// Параметры:
//  ЭД - ЗначениеXDTO, ОбъектXDTO, Неопределено - Записываемое значение.
//  ИмяФайла - Строка - путь к файлу, в который сохраняются данные;
//  УказаниеТипа - НазначениеТипаXML - вариант назначения типа элемента данных XDTO.
//  ТипКодировки - Строка - файл будет записан в соответствующей кодировке.
//
Процедура ВыгрузитьЭДВФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251", КонтекстОперации = Неопределено, УдалитьПространствоИмен = Ложь, ПространствоИмен = "") Экспорт
	
	ДанныеДокумента = ЭД;
	НазначениеТипа = ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное);
	Если УдалитьПространствоИмен Тогда
		
		Поток = Новый ПотокВПамяти();
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьПоток(Поток, ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ДанныеДокумента,,,, НазначениеТипа);
		НоваяЗаписьXML.Закрыть();
		
		ДанныеXML = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
		ПотокЧтения = ДанныеXML.ОткрытьПотокДляЧтения();
	
		Чтение = Новый ЧтениеТекста(ПотокЧтения, ТипКодировки);
		ТекстXML = Чтение.Прочитать();
		Чтение.Закрыть();
		
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ТекстXML);
		СтрокаФайл = Текст.ПолучитьСтроку(2);
		СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
		Текст.ЗаменитьСтроку(2, СтрокаФайл);
		ТекстXML = Текст.ПолучитьТекст();
		
		ПотокЗаписи = Новый ПотокВПамяти();
		
		Запись = Новый ЗаписьТекста(ПотокЗаписи, ТипКодировки);
		Запись.Записать(ТекстXML);
		Запись.Закрыть();
		
		ДанныеДокумента = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
		
		ДанныеДокумента.Записать(ИмяФайла);
		
	Иначе
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ДанныеДокумента, , , , НазначениеТипа);
		НоваяЗаписьXML.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Получение имени файла для выгрузки ФНС
//
// Параметры:
//  СтруктураИмени - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, Ошибки)
	
	Попытка
		
		ОшибкиЗаполненияСвойств = Новый Массив;
		
		ДанныеПоставщика = ДанныеДокумента.Поставщик;
		ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;
		ДатаСеанса = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
		
		ДатаТН = Формат(СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеДокумента.ДатаТН), "ДФ=dd.MM.yyyy");
		
		СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор");
		СтруктураФайла.Префикс = "DP_OTORG12";
		СтруктураФайла.ИДПолучателя = ДанныеГрузополучателя.ИНН + ?(ДанныеГрузополучателя.Свойство("КПП"),
			"_" + ДанныеГрузополучателя.КПП, "");
		СтруктураФайла.ИДОтправителя = ДанныеПоставщика.ИНН + ?(ДанныеПоставщика.Свойство("КПП"),
			"_" + ДанныеПоставщика.КПП, "");
		СтруктураФайла.ГГГГММДД = ДатаСеанса;
		СтруктураФайла.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		ИдФайла = ФНСИмяФайла(СтруктураФайла);
			
		ПространствоИменСхемы = "OTORG_5_01_02";
		Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ИдФайла,   Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8", , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);				
		
		СвУчДокОбор = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ИдОтпр = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдОтправителя);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ИдОтпр, Истина, Ошибки);
		ИдПок = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдПолучателя);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ИдПок, Истина, Ошибки);
		
		СвОЭДОтпр = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИменСхемы);
		НаимОрг = """ООО Такском""";
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = "7704211201";
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = "2AL";
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ",СвОЭДОтпр, , Ошибки);	
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
		
		Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаТН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ.мм.сс"), Истина, Ошибки);
		
		СвТНО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", "Товарная накладная", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", "0330212", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "ТОРГ-12", Истина, Ошибки);
		
		// поставщик	
		Поставщик = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПоставщика, ПространствоИменСхемы, ИдСв, Ошибки);
	    РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Поставщик, "ИдСв",  ИдСв, , Ошибки);		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик",  Поставщик, , Ошибки);	
		
		// грузополучатель	
		Грузополучатель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеГрузополучателя, ПространствоИменСхемы, ИдСв, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Грузополучатель, "ИдСв",  ИдСв, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч",  Грузополучатель, , Ошибки);	
		
		// плательщик
		ДанныеПлательщика = ДанныеДокумента.Плательщик;
		Плательщик = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПлательщика, ПространствоИменСхемы, ИдСв, Ошибки);
	    РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Плательщик, "ИдСв",  ИдСв, , Ошибки);		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик",  Плательщик, , Ошибки);	
		
		// Данные товарной накладной.
		ТН = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТН, "НомТН", ДанныеДокумента.НомТН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаТН, Истина, Ошибки);
		
		// Заполнение таблицы товаров.
		Таблица = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		СуммаБезНДСВсего = 0;
		СуммаСНДСВсего = 0;
		Для Каждого Товар Из ДанныеДокумента.ТаблицаТоваров Цикл
			
			СведТов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомТов, Истина, Ошибки);
			НаименованиеЕдиницыИзмерения = "шт";
			Если СтрДлина(Товар.ОКЕИ_Тов) = 3 Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ОКЕИ_Тов, , Ошибки);
				ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(Товар.ОКЕИ_Тов);
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					НаименованиеЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование");
				КонецЕсли;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", НаименованиеЕдиницыИзмерения, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "Нетто", Товар.Нетто, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СумБезНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", Товар.СтавкаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СумУчНДС - Товар.СумБезНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СумУчНДС, Истина, Ошибки);
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Товар.Артикул, Истина, Ошибки);
			КонецЕсли;
			
			МассивДопДанных = Новый Массив;
			ШаблонДопДанных = "<Реквизит Имя=""%1"" Значение=""%2""/>";
			Если ЗначениеЗаполнено(Товар.НомерТД)
					И ЗначениеЗаполнено(СтрЗаменить(Товар.НомерТД, "-", "")) Тогда
				МассивДопДанных.Добавить(СтрШаблон(ШаблонДопДанных, "НомерТД", Товар.НомерТД));
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодСтраны)
					И ЗначениеЗаполнено(СтрЗаменить(Товар.КодСтраны, "-", "")) Тогда
				МассивДопДанных.Добавить(СтрШаблон(ШаблонДопДанных, "КодСтраныПроисхождения", Товар.КодСтраны));
			КонецЕсли;
			
			ПодготовитьДанныеПрослеживаемоситДляXML(МассивДопДанных, Товар, ШаблонДопДанных);
			
			Если ЗначениеЗаполнено(МассивДопДанных) Тогда
				ДопДанные = "<Данные>" + СтрСоединить(МассивДопДанных) + "</Данные>";
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", ДопДанные,, Ошибки);
			КонецЕсли;
			
			СуммаБезНДСВсего = СуммаБезНДСВсего + Товар.СумБезНДС;
			СуммаСНДСВсего = СуммаСНДСВсего + Товар.СумУчНДС; 
			
			Таблица.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		// итого по таблице товаров
		ВсегоНакл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДСВсего, , Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаСНДСВсего - СуммаБезНДСВсего, , Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДСВсего, , Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, Ошибки);	
		
		ИнфПол = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
		СтрокаИнфПол = "<Данные><Реквизит Имя=""ЗагрузкаИзФайлаExcel"" Значение=""Истина""/></Данные>";
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, Истина, Ошибки);	
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, Ошибки);
		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
		Файл.Проверить();
		Если ЗначениеЗаполнено(Ошибки) Тогда
			
			ВызватьИсключение ПредставлениеОшибок(Ошибки);
			
		КонецЕсли;
		ВыгрузитьЭДвФайл(Файл, ВременныйКаталог + "doc.xml", Ложь, "windows-1251", , Истина, ПространствоИменСхемы);  	
		
	Исключение
		
		ТекстОшибки = ПредставлениеОшибок(Ошибки);
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
																					
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибки = ТекстСообщения;	
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодготовитьДанныеПрослеживаемоситДляXML(МассивДопДанных, СтрокаТовары, ШаблонДопДанных)
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.СведенияПрослеживаемости) Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = 0;
	Для Каждого СтрокаПрослеживаемости Из СтрокаТовары.СведенияПрослеживаемости Цикл
		Если Не ЗначениеЗаполнено(СтрокаПрослеживаемости.Количество) Тогда
			// Если не указано кол-во, то это ГТД.
			МассивДопДанных.Добавить(СтрШаблон(ШаблонДопДанных, "НомерТД", СтрокаПрослеживаемости.РНПТ));
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		СчетчикСтр = Формат(Счетчик, "ЧГ=0");
		МассивДопДанных.Добавить(
			СтрШаблон(ШаблонДопДанных, "РНПТ_" + СчетчикСтр, СтрокаПрослеживаемости.РНПТ));
		МассивДопДанных.Добавить(
			СтрШаблон(ШаблонДопДанных, "КолРНПТ_" + СчетчикСтр, СтрокаПрослеживаемости.Количество));
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОшибок(Ошибки)
	
	МассивПредставленийОшибки = Новый Массив;
	Для Каждого Ошибка Из Ошибки Цикл
		МассивПредставленийОшибки.Добавить(Ошибка.ТекстОшибки);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивПредставленийОшибки, Символы.ПС);

КонецФункции

Процедура ПодготовитьДанныеУчастника(ДанныеУчастника, ПространствоИменСхемы, ИдСв, ТекстОшибки)
	
	Если СтрДлина(ДанныеУчастника.ИНН) > 10 Тогда
		
		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		СвФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);		
		ДанныеИП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеУчастника.НаименованиеПолное, " ", Истина, Истина);
		Для Н = 0 По ДанныеИП.ВГраница() Цикл
			
			Если Н = 0 Тогда
				
				ФИО.Фамилия = ДанныеИП[Н];
				
			ИначеЕсли  Н = 1 Тогда
				
				ФИО.Имя = ДанныеИП[Н];
				
			ИначеЕсли  Н = 2 Тогда
				
				ФИО.Отчество = ДанныеИП[Н];
				
			КонецЕсли;
			
		КонецЦикла;  
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеУчастника.ИНН, , ТекстОшибки);			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);			
		
	Иначе
		
		СвЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", ДанныеУчастника.НаименованиеПолное, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ДанныеУчастника.ИНН, , ТекстОшибки);
		Если ДанныеУчастника.Свойство("КПП") Тогда
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", ДанныеУчастника.КПП, , ТекстОшибки);
			
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";	
	Попытка
		
		ОписаниеКонтейнера = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документооборот, "ID", Ид, , ТекстОшибки);
		
		ДокументыСхемы  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 		
		
		Файлы = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		ФайлДанных = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", "doc.xml", Истина, ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);				
			
		ФайлКарточки = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "card.xml", , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ВременныйКаталог + "meta.xml", Ложь);		
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);                                   		
																					
	КонецПопытки; 

КонецПроцедуры

Процедура СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента)

	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	ТекстОшибки = "";
	ДанныеПоставщика = ДанныеДокумента.Поставщик;
	ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;	
	Попытка
		
		Карточка = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ДанныеПоставщика.ИНН, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name", ДанныеПоставщика.НаименованиеПолное, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ДанныеПоставщика.ИНН, , ТекстОшибки);				
		Отправитель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
	
		АбонентПолучатель  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");								
		Получатель  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Получатель, "Abonent", АбонентПолучатель, , ТекстОшибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier", Ид, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Тип, "Name", "Consignment", , ТекстОшибки);		
			
		Описание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "Title", "ТОРГ-12 (титул продавца)", , ТекстОшибки);				
				
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ВыгрузитьЭДвФайл(Карточка, ВременныйКаталог + "card.xml", Ложь);
	
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование карточки такском'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);		
	
	КонецПопытки;	

КонецПроцедуры  

#КонецОбласти

#Область ПроверкаКлючевыхРеквизитовОбъекта

// Проверяет изменение ключевых реквизитов объекта
//
// Параметры:
//  Объект	 - ДокументОбъект - проверяемы документ объект
// 
// Возвращаемое значение:
//  Булево - Истина, если изменились ключевые реквизиты
//
Функция ИзменилисьКлючевыеРеквизитыОбъекта(Объект)

	КлючевыеРеквизиты = КлючевыеРеквизитыОбъекта(Объект);
	Если Не ЗначениеЗаполнено(КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция КлючевыеРеквизитыОбъекта(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	Результат = Новый Структура;
	Если ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент, Грузополучатель, Грузоотправитель");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары",          РеквизитыТЧ); 
		Результат.Вставить("Услуги",          РеквизитыТЧ);
		Результат.Вставить("АгентскиеУслуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаВознаграждения");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента, ИННПолучателя,"
			+ "ВалютаДокумента, КодБК, НазначениеПлатежа, ПеречислениеВБюджет, КодОКАТО");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПлатежноеТребование") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары",          РеквизитыТЧ); 
		Результат.Вставить("Услуги",          РеквизитыТЧ);
		Результат.Вставить("АгентскиеУслуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаВознаграждения";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктОРасхождениях") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Услуги", РеквизитыТЧ);
	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПередачаТоваров") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияУслугПоПереработке") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоУниверсальныйДокумент");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктСверкиВзаиморасчетов") Тогда
		
		Результат.Вставить("Шапка",
			"Дата, Номер, Организация, Контрагент, ВалютаДокумента, ЭтоЭлектронныйДокумент, ЭтоДокументКонтрагента,НомерВходящегоДокумента, ДатаВходящегоДокумента, ДатаНачала, ДатаОкончания, СОбособленнымиПодразделениями");
		
	ИначеЕсли ДокументПоддерживаетВнутреннийЭДО(Объект) Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты)

	Если Не ОбщегоНазначения.КоллекцииИдентичны(
		РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты),
		РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты)

	Для Каждого КлючЗначение Из КлючевыеРеквизиты Цикл
		
		Если КлючЗначение.Ключ = "Шапка" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.КоллекцииИдентичны(
			РеквизитыТабличнойЧастиДоИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение),
			РеквизитыТабличнойЧастиПослеИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение)) Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, КлючевыеРеквизиты.Шапка);

КонецФункции

Функция РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)
	
	Результат = Новый Структура;
	ИменаРеквизитов = СтрРазделить(КлючевыеРеквизиты.Шапка, ", ", Ложь);
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		Результат.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция РеквизитыТабличнойЧастиДоИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ КлючевыеРеквизитыТабличнойЧасти + " ИЗ "
	+ Объект.Метаданные().ПолноеИмя() + "." + ИмяТабличнойЧасти
	+ " КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РеквизитыТабличнойЧастиПослеИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)
	
	Возврат Объект[ИмяТабличнойЧасти].Выгрузить(, КлючевыеРеквизитыТабличнойЧасти);

КонецФункции

Процедура ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ)

	Если НЕ ЭтоБанковскийДокумент(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.ОшибкаПередачи
		И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.Отклонен Тогда
		
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента)

	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоБанковскийДокумент(Объект) Тогда
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.НеСформирован;
	Иначе
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияДокументовЭДО.НеСформирован;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЭтоБанковскийДокумент(Объект)

	ТипОбъекта = ТипЗнч(Объект);
	Возврат ТипОбъекта = Тип("ДокументОбъект.ПлатежноеПоручение")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПлатежноеТребование");
		
КонецФункции

Функция ДоступнаТолькоОтправкаПечатныхФорм(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	Возврат ТипОбъекта = Тип("ДокументОбъект.Доверенность")
		Или ТипОбъекта = Тип("ДокументОбъект.НачислениеПеней")
		Или ТипОбъекта = Тип("ДокументОбъект.ВыдачаДенежныхДокументов")
		Или ТипОбъекта = Тип("ДокументОбъект.КорректировкаДолга");
	
КонецФункции
	
Функция ЭтоЭлектронныеПеревозочныеДокументы(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Возврат ТипОбъекта = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронныйЗаказЗаявка")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронныйДоговорФрахтования")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронныйПутевойЛист");
		
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЗагрузитьФайлВТаблицу(ИмяВременногоФайла, ПоОбластям = Ложь)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);
	
	ПолучитьДанныеФайлаEXCEL(ИмяВременногоФайла, РезультатВыполнения, ПоОбластям);
	
	Возврат РезультатВыполнения;
	
КонецФункции

//Получает таблицы данных из файла Excel
//Параметры: 
//				-ИмяВремФайла Тип("Строка")- имя временного файла на сервере
//				-РезультатВыполнения Тип("Структура")
//				-ПоОбластям Тип("Булево")
//
//Возвращаемое значение: РезультатВыполнения Тип("Структура")
//						*ключ- Имя области(листа)
//						*Значение-Таблица значений данных области(листа)
//
Процедура ПолучитьДанныеФайлаEXCEL(ИмяВремФайла, РезультатВыполнения, ПоОбластям)
	
	Источник = Новый ТабличныйДокумент;
	Источник.Прочитать(ИмяВремФайла);
	
	Если ПоОбластям Тогда
		Для Каждого Область Из Источник.Области Цикл
			ТабличныйДокументОбласти = Новый ТабличныйДокумент;
			ТабличныйДокументОбласти.ВставитьОбласть(Область, ТабличныйДокументОбласти.Область(1, 1, 1, 1));
			ТаблицаОбласть = ПрочитатьТабличныйДокументВТаблицу(ТабличныйДокументОбласти);
			Если ТаблицаОбласть.Количество() > 0 Тогда
				РезультатВыполнения.Вставить(Область.Имя, ТаблицаОбласть);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаФайла = ПрочитатьТабличныйДокументВТаблицу(Источник);
		РезультатВыполнения.Вставить("Лист1", ТаблицаФайла);
	КонецЕсли;
	
КонецПроцедуры

//Читает данные табличного документа в таблицу значений
//Параметры: 
//			Источник Тип("ТабличныйДокумент")
//			МаксимальнаяШиринаТаблицы Тип("Число")
//
//Возвращаемое значение: ТаблицаИсточника Тип("ТаблицаЗначений")
//
Функция ПрочитатьТабличныйДокументВТаблицу(Источник)
	
	ТабДок = Новый ТабличныйДокумент;
	МаксимальнаяШиринаТаблицы = 500; // максимальное количество обрабатываемых колонок таблицы
	НомерПоследнейКолонки = ?(Источник.ШиринаТаблицы = 0, МаксимальнаяШиринаТаблицы, МИН(Источник.ШиринаТаблицы, МаксимальнаяШиринаТаблицы));
	
	Для К = 1 По НомерПоследнейКолонки Цикл
		АдресЯчейки = "R1" + "C" + Формат(К, "ЧГ=0");
		Ячейка = ТабДок.Область(АдресЯчейки);
		Ячейка.Текст = "К" + Формат(К, "ЧГ=0");
	КонецЦикла;

	ТабДок.Вывести(Источник);
		
	ОбластьТаб = ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);
	
	Построитель 				= Новый ПостроительЗапроса;
	Построитель.ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ОбластьТаб);
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выгрузить();
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция СоздатьОбъектИБ(ДанныеДокумента, Контрагент = Неопределено, ДокументПоступления = Неопределено)
	
	СтруктураРазбора = ПолучитьИзВременногоХранилища(ДанныеДокумента);
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	Если ТипЗнч(СтрокаОбъекта) <> Тип("СтрокаДереваЗначений") Тогда
		НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
		СтрокаОбъекта = НайденныеСтроки.Строки[0];
	КонецЕсли;
	Если СтрокаОбъекта.ВидЭД = ОбменСКонтрагентами.ТипыДокументов().ТоварнаяНакладная
		Или СтрокаОбъекта.ВидЭД =  ОбменСКонтрагентами.ТипыДокументов().АктВыполненныхРабот Тогда
		
		ЗаполнитьНоменклатуру(ДеревоРазбора, Контрагент);
	КонецЕсли;
	
	Если СтрокаОбъекта.ВидЭД = ОбменСКонтрагентами.ТипыДокументов().СчетФактура Тогда
		НоваяСтрока = СтрокаОбъекта.Строки.Добавить();
		НоваяСтрока.Реквизит = "ДокументыОснования";
		ДокументыОснования = НоваяСтрока.Строки.Добавить();
		ДокументыОснования.СсылкаНаОбъект = ДокументПоступления;
	КонецЕсли; 
	
	СсылкаНаОбъект = Неопределено;
	Если (СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав
		Или СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот
		Или СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная)
		И СтрокаОбъекта.ЗначениеРеквизита <> Неопределено Тогда
		ОбменСКонтрагентамиБП.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(СтрокаОбъекта.ЗначениеРеквизита, СсылкаНаОбъект);
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ТипыДокументовЭДО.УПД Тогда
		СозданныеОбъекты = Неопределено;
		ОбменСКонтрагентамиБП.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(СтрокаОбъекта.ЗначениеРеквизита, СозданныеОбъекты);
		СсылкаНаОбъект = СозданныеОбъекты;
	Иначе
		ОписаниеОшибки = "";
		ОбменСКонтрагентамиБП.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
				ДеревоРазбора,
				Новый Структура("СсылкаНаВладельца", Неопределено),
				СсылкаНаОбъект,
				ОписаниеОшибки);
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ЗаполнитьНоменклатуру(ДеревоРазбора, Владелец)

	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	МассивИдентификаторов = Новый Массив;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			МассивИдентификаторов.Добавить(СтрокаСписка.ИД);
			
		КонецЕсли;
		
	КонецЦикла;	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	НоменклатураПоставщиков.Идентификатор,
	                      |	НоменклатураПоставщиков.Номенклатура
	                      |ИЗ
	                      |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	                      |ГДЕ
	                      |	НоменклатураПоставщиков.Владелец = &Владелец
	                      |	И НоменклатураПоставщиков.Идентификатор В(&СписокИдентификаторов)");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("СписокИдентификаторов", МассивИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	ИдНоменклатура = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ИдНоменклатура.Вставить(Выборка.Идентификатор, Выборка.Номенклатура);
		
	КонецЦикла;
	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);						  
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		СтрокаСписка.СсылкаНаОбъект = ИдНоменклатура[СтрокаСписка.ИД];
		
	КонецЦикла;

КонецПроцедуры

Функция ВидДокументаУПД()
	
	Возврат "УПД";
	
КонецФункции

Функция ВидДокументаТОРГ12()
	
	Возврат "ТОРГ12";
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СоздатьЭлементСправочникаНоменклатура(НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки)
	
	Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	НоменклатураОбъект.Наименование         = НоменклатураКонтрагента.Наименование;
	НоменклатураОбъект.НаименованиеПолное   = НоменклатураКонтрагента.Наименование;
	НоменклатураОбъект.Артикул              = НоменклатураКонтрагента.Артикул;
	НоменклатураОбъект.ВидНоменклатуры      = ЗначенияРеквизитов.ВидНоменклатуры;
	НоменклатураОбъект.Родитель             = ЗначенияРеквизитов.Родитель;
	НоменклатураОбъект.НоменклатурнаяГруппа = ЗначенияРеквизитов.НоменклатурнаяГруппа;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.СтавкаНДС) Тогда
		СтавкаНДС = ОбменСКонтрагентамиБП.ПолучитьСтавкуНДСПеречислением(НоменклатураКонтрагента.СтавкаНДС);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = ЗначенияРеквизитов.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	
	ЕдиницаИзмерения = Неопределено;
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) И Не ЗначенияРеквизитов.ЭтоУслуга Тогда
		ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмеренияПоУмолчанию;
	КонецЕсли;
	НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
	НоменклатураОбъект.Услуга           = ЗначенияРеквизитов.ЭтоУслуга;
	
	Маркетплейс = Перечисления.ВидыМаркетплейсов.ПустаяСсылка();
	ИдентификаторМаркетплейса = "";
	ЗначенияРеквизитов.Свойство("Маркетплейс", Маркетплейс);
	НоменклатураКонтрагента.Свойство("КодМагазина", ИдентификаторМаркетплейса);
	
	Попытка
		НоменклатураОбъект.Записать();
		Результат.Номенклатура = НоменклатураОбъект.Ссылка;
		Результат.Упаковка = НоменклатураОбъект.ЕдиницаИзмерения;
		ЗаписатьШтрикходыНоменклатуры(НоменклатураОбъект.Ссылка, НоменклатураКонтрагента.ШтрихкодыНоменклатуры);
		Если НЕ Маркетплейс = Перечисления.ВидыМаркетплейсов.Wildberries Тогда
			РегистрыСведений.НоменклатураМаркетплейсов.ЗаписатьИдентификаторМаркетплейса(НоменклатураОбъект.Ссылка, Маркетплейс, ИдентификаторМаркетплейса);
		КонецЕсли;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать номенклатуру ""%1""
			|%2'");
		
		ОбработатьОшибкуЗаписиЭлементаСправочника(ШаблонСообщения, НоменклатураКонтрагента, Ошибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьШтрикходыНоменклатуры(Номенклатура, Штрихкоды)
	
	Если НЕ ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;

	МассивШтрихкодов = СтрРазделить(Штрихкоды, ",", Ложь);
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		МенеджерЗаписи              = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номенклатура = Номенклатура;
		МенеджерЗаписи.Штрихкод     = Штрихкод;
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры 

Функция СоздатьЭлементСправочникаОсновныеСредства(НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки)
	
	Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	
	ОсновноеСредствоОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
	
	ОсновноеСредствоОбъект.Наименование        = НоменклатураКонтрагента.Наименование;
	ОсновноеСредствоОбъект.НаименованиеПолное  = НоменклатураКонтрагента.Наименование;
	ОсновноеСредствоОбъект.ГруппаОС = ЗначенияРеквизитов.ГруппаОС;
	ОсновноеСредствоОбъект.НедвижимоеИмущество = УправлениеВнеоборотнымиАктивамиКлиентСервер.ЭтоНедвижимоеИмущество(
		ОсновноеСредствоОбъект.ГруппаОС);
	ОсновноеСредствоОбъект.Родитель            = ЗначенияРеквизитов.Родитель;
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	
	Попытка
		ОсновноеСредствоОбъект.Записать();
		Результат.Номенклатура = ОсновноеСредствоОбъект.Ссылка;
		Результат.Упаковка     = ЕдиницаИзмерения;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать ОС ""%1""
			|%2'");
		
		ОбработатьОшибкуЗаписиЭлементаСправочника(ШаблонСообщения, НоменклатураКонтрагента, Ошибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЭлементСправочникаОбъектыСтроительства(НоменклатураКонтрагента, ЗначенияРеквизитов, Ошибки)
	
	Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	
	ОбъектСтроительстваОбъект = Справочники.ОбъектыСтроительства.СоздатьЭлемент();
	
	ОбъектСтроительстваОбъект.Наименование = НоменклатураКонтрагента.Наименование;
	ОбъектСтроительстваОбъект.Родитель     = ЗначенияРеквизитов.Родитель;
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	
	Попытка
		ОбъектСтроительстваОбъект.Записать();
		Результат.Номенклатура = ОбъектСтроительстваОбъект.Ссылка;
		Результат.Упаковка     = ЕдиницаИзмерения;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать объект строительства ""%1""
			|%2'");
		
		ОбработатьОшибкуЗаписиЭлементаСправочника(ШаблонСообщения, НоменклатураКонтрагента, Ошибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкуЗаписиЭлементаСправочника(ШаблонСообщения, НоменклатураКонтрагента, Ошибки)
	
	ТекстСообщения = СтрШаблон(
			ШаблонСообщения, 
			НоменклатураКонтрагента.Наименование,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения,"");
	
	ТекстСообщения = СтрШаблон(
		ШаблонСообщения, 
		НоменклатураКонтрагента.Наименование,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	ОписаниеОшибки = ИнформацияОбОшибке();
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Создание номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.Номенклатура,, 
		ТекстСообщения);
	
КонецПроцедуры

Функция ЗначенияЗаполненияНовогоЭлементаСправочника(ДанныеКонтрагента) Экспорт
	
	ЗначенияЗаполнения = Новый Структура("Наименование, Артикул");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ДанныеКонтрагента);
	ЗначенияЗаполнения.Вставить("НаименованиеПолное", ЗначенияЗаполнения.Наименование);
	
	СтавкаНДС = Неопределено;
	Если ДанныеКонтрагента.Свойство("СтавкаНДС") И ЗначениеЗаполнено(ДанныеКонтрагента.СтавкаНДС) Тогда
		СтавкаНДС = ОбменСКонтрагентамиБП.ПолучитьСтавкуНДСПеречислением(ДанныеКонтрагента.СтавкаНДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		ЗначенияЗаполнения.Вставить("ВидСтавкиНДС", Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС));
	КонецЕсли;
	
	ЕдиницаИзмерения = Неопределено;
	Если ДанныеКонтрагента.Свойство("ЕдиницаИзмеренияКод") И ЗначениеЗаполнено(ДанныеКонтрагента.ЕдиницаИзмеренияКод) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(ДанныеКонтрагента.ЕдиницаИзмеренияКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЗначенияЗаполнения.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьЗначенияКонстантЭДОПриОбновлении() Экспорт
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОбменСКонтрагентами.УстановитьИспользованиеЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиПолученияКорректировокИВозвратов() Экспорт
	
	ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.СпособОбработки = "ОпределяетсяПрограммой";
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

Процедура УстановитьНастройкиПолученияАктовОбОказанииУслуг() Экспорт
	
	ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
		ОбменСКонтрагентами.ТипыДокументов().АктВыполненныхРабот);
	НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		// Если способ получения ЭД не был изменен пользователем, меняем на вариант "Определяется программой". 
		Если Запись.СпособОбработки = "ПоступлениеУслуг" Тогда
			Запись.СпособОбработки = "ОпределяетсяПрограммой";
		КонецЕсли;
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

Процедура ПеренестиДанныеЦифровыхПодписейВРегистрСведений(Параметры) Экспорт
	
	// При переходе с БП 2.0 необходимо перенести данные об электронных подписях электронных документов
	// из таблицы справочника СообщениеЭДОПрисоединенныеФайлы.УдалитьЭлектронныеПодписи в регистр сведений ЭлектронныеПодписи.
	
	Если Не ОбновлениеСПредыдущейРедакции.ИнформационнаяБазаОбновленаС20() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Ссылка КАК ПодписанныйОбъект,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.НомерСтроки КАК ПорядковыйНомер,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Комментарий КАК Комментарий,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Отпечаток КАК Отпечаток,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Подпись КАК Подпись,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Сертификат КАК Сертификат,
	|	СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы.УдалитьЭлектронныеПодписи КАК СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|		ПО СообщениеЭДОПрисоединенныеФайлыУдалитьЭлектронныеПодписи.Ссылка = ЭлектронныеПодписи.ПодписанныйОбъект
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер,
	|	ДатаПодписи
	|ИТОГИ ПО
	|	ПодписанныйОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	ВыборкаПоОбъектам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОбъектам.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		Попытка
			НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ВыборкаПоОбъектам.ПодписанныйОбъект);
			НаборЗаписей.Прочитать();
			
			// Объект мог быть обработан другим сеансом.
			Если НаборЗаписей.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаПоОбъектам.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ЭлектронноеВзаимодействиеБП.ПеренестиДанныеЦифровыхПодписейВРегистрСведений() не удалось обработать записи регистра по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ЭлектронныеПодписи, ВыборкаПоОбъектам.ПодписанныйОбъект, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В процедуре ЭлектронноеВзаимодействиеБП.ПеренестиДанныеЦифровыхПодписейВРегистрСведений() не удалось обработать данные в регистре ""Электронные подписи"": %1 случаях из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.РегистрыСведений.ЭлектронныеПодписи,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЭлектронноеВзаимодействиеБП.ПеренестиДанныеЦифровыхПодписейВРегистрСведений() обработала очередную порцию данных регистра ""Электронные подписи"": обработано наборов записей - %1'"), ОбъектовОбработано));
	КонецЕсли;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда
		Параметры.ОбработкаЗавершена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеИдентификаторыСопоставленияWB(ПараметрыОбработчика) Экспорт

	ПолноеИмяОбъекта  = "Справочник.НоменклатураКонтрагентов";
	МетаданныеОбъекта = Метаданные.Справочники.НоменклатураКонтрагентов;
	
	РеквизитыМаркетплейса = ПолучитьРеквизитыWB();
	ИНН = РеквизитыМаркетплейса.ИНН;
	КПП = РеквизитыМаркетплейса.КПП;
	
	Владелец = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
	Если Владелец = Неопределено Тогда
		Владелец = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН);
	КонецЕсли;		
	Если Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Штрихкод КАК Штрихкод,
	|	СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, ""#"") КАК ПозицияРазделителя,
	|	СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, НоменклатураКонтрагентов.Штрихкод) КАК ПозицияШтрихкода,
	|	НоменклатураКонтрагентов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗаписиСопоставления
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &Владелец
	|	И СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, "" "") = 0
	|	И НоменклатураКонтрагентов.Штрихкод <> """"
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиСопоставления.Номенклатура КАК Номенклатура,
	|	ЗаписиСопоставления.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ЗаписиСопоставления КАК ЗаписиСопоставления
	|ГДЕ
	|	(ЗаписиСопоставления.ПозицияРазделителя = 0
	|			ИЛИ ЗаписиСопоставления.ПозицияРазделителя > 1
	|				И ЗаписиСопоставления.ПозицияШтрихкода > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиСопоставления.Номенклатура,
	|	ЗаписиСопоставления.Штрихкод
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиСопоставления.Идентификатор) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ВТНоменклатура.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ВТНоменклатура.Штрихкод = НоменклатураКонтрагентов.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов2
	|		ПО (НоменклатураКонтрагентов2.Идентификатор = НоменклатураКонтрагентов.Идентификатор + ""#"" + НоменклатураКонтрагентов.Штрихкод)
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &Владелец
	|	И СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, НоменклатураКонтрагентов.Штрихкод) <> 1
	|	И СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, ""#"") = 0
	|	И СТРНАЙТИ(НоменклатураКонтрагентов.Идентификатор, "" "") = 0
	|	И НоменклатураКонтрагентов2.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
	ДополнительныеПараметры.ТребуетсяПоискСсылки = Истина;
	ДополнительныеПараметры.ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(Владелец);
			НоменклатураКонтрагента.Вставить("Штрихкод", "");
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Выборка.Ссылка, , "Владелец");
			
			НоменклатураКонтрагента.ШтрихкодыНоменклатуры = НоменклатураКонтрагента.Штрихкод;
			НоменклатураКонтрагента.ШтрихкодКомбинации = НоменклатураКонтрагента.Штрихкод;
			
			НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
			ЗаполнитьЗначенияСвойств(НоменклатураИБ, Выборка.Ссылка);
			
			//Удалим пробелы
			Идентификатор = СтрЗаменить(НоменклатураКонтрагента.Идентификатор, " ", "");
						
			ЭтоНеSKU = (СтрНайти(Идентификатор, "#") > 0) 								//Составной идентификатор
				ИЛИ (Идентификатор = НоменклатураКонтрагента.ШтрихкодыНоменклатуры);    //Это штрихкод
			
			Если ЭтоНеSKU Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(НоменклатураКонтрагента.ШтрихкодыНоменклатуры) Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			НоменклатураКонтрагента.Идентификатор = 
				СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(Идентификатор 
					+ "#" + НоменклатураКонтрагента.ШтрихкодыНоменклатуры);
					
			НоменклатураКонтрагента.ИдентификаторНоменклатуры = НоменклатураКонтрагента.Идентификатор;
			
			ТекстОшибки = "";
			Отказ = Ложь;
			СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(
				НоменклатураКонтрагента, НоменклатураИБ, Отказ, ТекстОшибки, ДополнительныеПараметры);
			
			ЗафиксироватьТранзакцию();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %Справочник% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке идентификаторов сопоставления номенклатуры Wildberries возникли ошибки: в %1 из %2 записей'"),
				ПроблемныхОбъектов,
				ПроблемныхОбъектов + ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектовОбработано > 0 Тогда
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идентификаторы сопоставления номенклатуры Wildberries: обработано %1 записей'"), ОбъектовОбработано));
	Иначе
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМаркетплейсами

Процедура ПолучитьДанныеВСтруктуру(ЗагруженныеФайлы, АдресХранилища) Экспорт
	
	РезультатЧтения = Новый Массив;
	ИндексыАрхивов = Новый Массив;
	ВременныеКаталоги = Новый Массив;
	
	//Разберем архивы
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		
		Если ЗагруженныйФайл.РасширениеФайла = "zip"
			ИЛИ ЗагруженныйФайл.РасширениеФайла = ".zip" Тогда
			
			ИмяКаталога = ОбщегоНазначения.СоздатьВременныйКаталог();
			ВременныеКаталоги.Добавить(ИмяКаталога);
			
			ЧтениеZIP = Новый ЧтениеZIPФайла(ЗагруженныйФайл.ВременныйФайл);
			ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
			ЧтениеZIP.Закрыть();
			
			РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xlsx");
			
			Для Каждого ФайлИзАрхива Из РаспакованныеФайлы Цикл
				
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("ИмяФайла", ЗагруженныйФайл.ИмяФайла);
				ОписаниеФайла.Вставить("РасширениеФайла", ФайлИзАрхива.Расширение);
				ОписаниеФайла.Вставить("ПолноеИмяФайла", ЗагруженныйФайл.ПолноеИмяФайла);
				ОписаниеФайла.Вставить("ВременныйФайл", ФайлИзАрхива.ПолноеИмя);
				
				ЗагруженныеФайлы.Добавить(ОписаниеФайла);
						
			КонецЦикла;
			
			Если РаспакованныеФайлы.Количество() > 0 Тогда 
				ИндексыАрхивов.Добавить(ЗагруженныеФайлы.Найти(ЗагруженныйФайл));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Удалим разобранные архивы
	Для Каждого ИндексАрхива Из ИндексыАрхивов Цикл
		Если НЕ ИндексАрхива = Неопределено Тогда
			ЗагруженныеФайлы.Удалить(ИндексАрхива);
		КонецЕсли;		
	КонецЦикла;
	
	НомерФайла = 1;
	
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		
		ТекстПрогресса = СтрШаблон(НСтр("ru = '%1 (%2 из %3)'"), ЗагруженныйФайл.ИмяФайла, НомерФайла, ЗагруженныеФайлы.Количество());
		
		Если ЗагруженныйФайл.РасширениеФайла = "zip"
			ИЛИ ЗагруженныйФайл.РасширениеФайла = ".zip" Тогда
			РезультатЧтенияФайла = Новый Структура;
			РезультатЧтенияФайла.Вставить("ЕстьОшибки", Истина);
			РезультатЧтенияФайла.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось загрузить отчет. В загружаемом архиве не найдено подходящих файлов.'"));
		Иначе
			РезультатЧтенияФайла = ЗагрузитьФайлВТаблицу(ЗагруженныйФайл.ВременныйФайл, Истина);
		КонецЕсли;
		
		Если РезультатЧтенияФайла.ЕстьОшибки Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("ПолноеИмяФайла", ЗагруженныйФайл.ПолноеИмяФайла);
		    Результат.Вставить("ТекстОшибки", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЧтенияФайла, "ТекстОшибки", НСтр("ru = 'Не удалось разобрать табличный документ'")));
			
			РезультатЧтения.Добавить(Результат);
						
		Иначе
			РезультатЧтенияФайла.Удалить("ЕстьОшибки");
			ДанныеПолучены = Ложь;
			ТекстОшибки = НСтр("ru = 'Не удалось определить тип загружаемого документа, возможно, загрузка таких файлов пока не поддерживается.'");
			
			Для Каждого Область Из РезультатЧтенияФайла Цикл
				
				ДанныеДокумента = ПолучитьДанныеДокумента(Область.Значение, Область.Ключ, ТекстПрогресса, РезультатЧтенияФайла.Количество());
				
				Если НЕ ДанныеДокумента.Свойство("ТекстОшибки") Тогда
					ДанныеПолучены = Истина;
					ДобавитьОписаниеПрочитанногоФайла(РезультатЧтения, ДанныеДокумента, ЗагруженныйФайл.ПолноеИмяФайла);
				Иначе
					ТекстОшибки = ДанныеДокумента.ТекстОшибки;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ДанныеПолучены Тогда
				Результат = Новый Структура;
				Результат.Вставить("ПолноеИмяФайла", ЗагруженныйФайл.ПолноеИмяФайла);
			
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				РезультатЧтения.Добавить(Результат);
			КонецЕсли;	
		КонецЕсли;
		
		НомерФайла = НомерФайла + 1;
		
		УдалитьФайлы(ЗагруженныйФайл.ВременныйФайл);
		
	КонецЦикла;
	
	//Удалим временные каталоги архивов
	Для Каждого ВременныйКаталог Из ВременныеКаталоги Цикл
		ОбщегоНазначения.УдалитьВременныйКаталог(ВременныйКаталог);
	КонецЦикла;
		
	ПоместитьВоВременноеХранилище(РезультатЧтения, АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьОписаниеПрочитанногоФайла(РезультатЧтения, ДанныеДокумента, ПолноеИмяФайла)
	
	Если ДанныеДокумента.ВидДокумента = ВидДокументаОтчетWBДетальный() Тогда
		
		ДобавитьОписаниеПрочитанногоФайлаWBДетальный(РезультатЧтения, ДанныеДокумента, ПолноеИмяФайла);		
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаWBУведомлениеВыкупа() Тогда
		
		СуммаВыкупа = ДанныеДокумента.ТаблицаТоваров.Итог("Сумма");
		Организация = ?(ДанныеДокумента.Свойство("Получатель"), ДанныеДокумента.Получатель.Ссылка, Справочники.Организации.ПустаяСсылка());
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОсновнаяОрганизация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
				Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		
		Контрагент = ?(ДанныеДокумента.Свойство("Получатель"), ДанныеДокумента.Получатель.Ссылка, Справочники.Организации.ПустаяСсылка());
		
		Описание = СтрШаблон(НСтр("ru='Уведомление о выкупе Wildberries от %1
			|Сумма выкупа: %2'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаВыкупа, "ЧДЦ=2; ЧН="));
	
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента",    ДанныеДокумента.ВидДокумента);
	
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.Wildberries);
		Результат.Вставить("Организация",     Организация);
		Результат.Вставить("Контрагент",      Контрагент);
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаВыкупа",     СуммаВыкупа);
		Результат.Вставить("Загружать",       СуммаВыкупа > 0);
		Результат.Вставить("Описание", 		  Описание);
		ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);
		ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
	
		РезультатЧтения.Добавить(Результат);
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzonВыкуп() Тогда
		
		СуммаВыкупа = ДанныеДокумента.ТаблицаТоваров.Итог("Сумма");
		Если ДанныеДокумента.Получатель.Свойство("Ссылка") Тогда
			Организация = ДанныеДокумента.Получатель.Ссылка;
		Иначе
			ИНН = "";
			КПП = "";
			ДанныеДокумента.Получатель.Свойство("ИНН", ИНН);
			ДанныеДокумента.Получатель.Свойство("КПП", КПП);
			
			Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП);
			Если Организация = Неопределено Тогда
				Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН);
			КонецЕсли;
			Если Организация = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОсновнаяОрганизация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
				Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		
		Описание = СтрШаблон(НСтр("ru='Отчет о выкупе Ozon от %1
			|Сумма выкупа: %2'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаВыкупа, "ЧДЦ=2; ЧН="));
	
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента",    ДанныеДокумента.ВидДокумента);
	
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.OZON);
		Результат.Вставить("Организация",     Организация);
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаВыкупа",     СуммаВыкупа);
		Результат.Вставить("Загружать",       СуммаВыкупа > 0);
		Результат.Вставить("Описание", 		  Описание);
		ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);
		ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
	
		РезультатЧтения.Добавить(Результат);
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzon() Тогда
		
		Если ДанныеДокумента.Получатель.Свойство("Ссылка") Тогда
			Организация = ДанныеДокумента.Получатель.Ссылка;
		Иначе
			ИНН = "";
			КПП = "";
			ДанныеДокумента.Получатель.Свойство("ИНН", ИНН);
			ДанныеДокумента.Получатель.Свойство("КПП", КПП);
			
			Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП);
			Если Организация = Неопределено Тогда
				Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН);
			КонецЕсли;
			Если Организация = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОсновнаяОрганизация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
				Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		
		СуммаПродаж    = ДанныеДокумента.ТаблицаТоваров.Итог("Сумма");
		СуммаВозвратов = ДанныеДокумента.ТаблицаТоваров.Итог("СуммаВозврат");
			
		Если УчитыватьДоплатуЗаСчетOzon(ДанныеДокумента.Дата) Тогда
			СуммаПродаж    = СуммаПродаж + ДанныеДокумента.ТаблицаТоваров.Итог("Доплата");
			СуммаВозвратов = СуммаВозвратов + ДанныеДокумента.ТаблицаТоваров.Итог("ДоплатаВозврат");
		КонецЕсли;
		
		Описание = СтрШаблон(НСтр("ru='Отчет о продажах Ozon от %1
			|Продажи: %2 Возвраты: %3'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаПродаж, "ЧДЦ=2; ЧН="), Формат(СуммаВозвратов, "ЧДЦ=2; ЧН="));
	
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента",    ДанныеДокумента.ВидДокумента);
	
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.OZON);
		Результат.Вставить("Организация",     Организация);
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаПродаж",     СуммаПродаж);
		Результат.Вставить("СуммаВозвратов",  СуммаВозвратов);
		Результат.Вставить("Загружать",       СуммаПродаж > 0 ИЛИ СуммаВозвратов > 0);
		Результат.Вставить("Описание", 		  Описание);
		ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);
		ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
	
		РезультатЧтения.Добавить(Результат);
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ВидДокументаОтчетOzonСписание() Тогда
		
		Если ДанныеДокумента.Получатель.Свойство("Ссылка") Тогда
			Организация = ДанныеДокумента.Получатель.Ссылка;
		Иначе
			ИНН = "";
			КПП = "";
			ДанныеДокумента.Получатель.Свойство("ИНН", ИНН);
			ДанныеДокумента.Получатель.Свойство("КПП", КПП);
			
			Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП);
			Если Организация = Неопределено Тогда
				Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИНН);
			КонецЕсли;
			Если Организация = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОсновнаяОрганизация = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
				Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		
		
		СуммаСписания = ДанныеДокумента.ТаблицаТоваров.Итог("Сумма");
				
		Описание = СтрШаблон(НСтр("ru='Отчет о списании Ozon от %1
			|Сумма компенсации: %2'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СуммаСписания, "ЧДЦ=2; ЧН="));
	
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента",    ДанныеДокумента.ВидДокумента);
	
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.OZON);
		Результат.Вставить("Организация",     Организация);
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаСписания",   СуммаСписания);
		Результат.Вставить("Загружать",       СуммаСписания > 0);
		Результат.Вставить("Описание", 		  Описание);
		ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(Результат);     
		ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(Результат);
	
		РезультатЧтения.Добавить(Результат);
		
	ИначеЕсли ЭтоОтчетЯндекс(ДанныеДокумента.ВидДокумента) Тогда
		
		СтраницаОтчета = "";
		СуммаПродаж    = ДанныеДокумента.ТаблицаТоваров.Итог("Сумма");
		
		Если ДанныеДокумента.ВидДокумента = "Яндекс_Отгружено" Тогда
			СтраницаОтчета = НСтр("ru='Товары, переданные в доставку'");
		ИначеЕсли ДанныеДокумента.ВидДокумента = "Яндекс_Доставлено" Тогда
			СтраницаОтчета = НСтр("ru='Доставленные товары'");
		ИначеЕсли ДанныеДокумента.ВидДокумента = "Яндекс_Невыкуплено" Тогда
			СтраницаОтчета = НСтр("ru='Невыкупленные товары'");
		ИначеЕсли ДанныеДокумента.ВидДокумента = "Яндекс_Возвращено" Тогда
			СтраницаОтчета = НСтр("ru='Возвращённые товары'");
		КонецЕсли;
		
		Описание = СтрШаблон(НСтр("ru='Отчет Яндекс от %1
			|%2: %3'"), Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"), Формат(СтраницаОтчета, "ЧДЦ=2; ЧН="), Формат(СуммаПродаж, "ЧДЦ=2; ЧН="));
				
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);
		
		Результат.Вставить("Маркетплейс",     Перечисления.ВидыМаркетплейсов.ЯндексМаркет);
		Результат.Вставить("Организация",     Справочники.Организации.ПустаяСсылка());
		Результат.Вставить("Дата",            ДанныеДокумента.Дата);
		Результат.Вставить("СуммаПродаж",     СуммаПродаж);
		Результат.Вставить("Загружать",       СуммаПродаж > 0);
		Результат.Вставить("Описание", 		  Описание);
		
		РезультатЧтения.Добавить(Результат);	
		
	Иначе 
		Результат = Новый Структура;
		Результат.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);
		
		Описание = СтрШаблон(НСтр("ru='Документ определен как %1'"), ДанныеДокумента.ВидДокумента);
		Результат.Вставить("Описание", Описание);
		
		РезультатЧтения.Добавить(Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКонтрагентаВОписаниеПрочитанногоФайла(СтруктураОписания, ИмяСвойства = "Плательщик")
	
	Если СтруктураОписания.Свойство("ДанныеДокумента") Тогда
		ДанныеДокумента = СтруктураОписания.ДанныеДокумента;
	Иначе
		Возврат;
	КонецЕсли;
	
	Контрагент = Неопределено;
	ИНН = "";
	КПП = "";
	Наименование = "";
	Если ДанныеДокумента.Свойство(ИмяСвойства) Тогда
		ДанныеДокумента[ИмяСвойства].Свойство("ИНН", ИНН);
		ДанныеДокумента[ИмяСвойства].Свойство("КПП", КПП);
		ДанныеДокумента[ИмяСвойства].Свойство("НаименованиеПолное", Наименование);
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ИНН))
		И СтруктураОписания.Свойство("Маркетплейс") Тогда
		Если СтруктураОписания.Маркетплейс = Перечисления.ВидыМаркетплейсов.Wildberries Тогда
			РеквизитыМаркетплейса = ПолучитьРеквизитыWB();
			ИНН = РеквизитыМаркетплейса.ИНН;
			КПП = РеквизитыМаркетплейса.КПП;
			Наименование = РеквизитыМаркетплейса.НаименованиеПолное;
		ИначеЕсли СтруктураОписания.Маркетплейс = Перечисления.ВидыМаркетплейсов.OZON Тогда
			РеквизитыМаркетплейса = ПолучитьРеквизитыOzon();
			ИНН = РеквизитыМаркетплейса.ИНН;
			КПП = РеквизитыМаркетплейса.КПП;
			Наименование = РеквизитыМаркетплейса.НаименованиеПолное;
		КонецЕсли;			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		Контрагент = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
		Если Контрагент = Неопределено Тогда
			Контрагент = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН);
		КонецЕсли;		
	КонецЕсли;
	Если Контрагент = Неопределено 
		И ЗначениеЗаполнено(Наименование) Тогда
		
		КонтрагентОбъект                           = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование              = Наименование;
		КонтрагентОбъект.НаименованиеПолное        = Наименование;
		КонтрагентОбъект.ИНН                       = ИНН;
		КонтрагентОбъект.КПП                       = КПП;
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = ?(СтрДлина(СокрЛП(ИНН)) = 12, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		КонтрагентОбъект.Записать();
			
		Контрагент = КонтрагентОбъект.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда	
		СтруктураОписания.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьюНоменклатуруВОписаниеПрочитанногоФайла(СтруктураОписания)
	
	Если СтруктураОписания.Свойство("ДанныеДокумента") Тогда
		ДанныеДокумента = СтруктураОписания.ДанныеДокумента;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавлятьШК = Ложь;
	Если СтруктураОписания.Свойство("ВидДокумента") Тогда
		ДобавлятьШК = (СтруктураОписания.ВидДокумента = ВидДокументаОтчетWB() 
			ИЛИ СтруктураОписания.ВидДокумента = ВидДокументаОтчетWBДетальный()
			ИЛИ СтруктураОписания.ВидДокумента = ВидДокументаОтчетWBСписание());
	КонецЕсли; 
	ЕстьСтавкаНДС = Ложь;
	Если СтруктураОписания.Свойство("ВидДокумента") Тогда
		ЕстьСтавкаНДС = (СтруктураОписания.ВидДокумента = ВидДокументаОтчетOzonВыкуп() 
			ИЛИ СтруктураОписания.ВидДокумента = ВидДокументаWBУведомлениеВыкупа());
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("ТаблицаТоваров") Тогда

		ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров;
		КолонкиТаблицыТоваров = ТаблицаТоваров.Колонки;
		
		КолонкаНаимТов = КолонкиТаблицыТоваров.Найти("НаимТов");
		КолонкаНаименование = КолонкиТаблицыТоваров.Найти("Наименование");
		Если КолонкаНаимТов <> Неопределено
			И КолонкаНаименование = Неопределено Тогда
			КолонкаНаимТов.Имя = "Наименование";
		КонецЕсли;
		
		Если КолонкиТаблицыТоваров.Найти("КодМагазина") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("КодМагазина", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 	
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("Штрихкод") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 	
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("ИсторияИдентификаторов") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("ИД") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
		КонецЕсли;
		Если КолонкиТаблицыТоваров.Найти("НатуральныйИД") = Неопределено Тогда
			КолонкиТаблицыТоваров.Добавить("НатуральныйИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
		КонецЕсли;
		
		ТаблицаНоменклатура = ТаблицаТоваров.СкопироватьКолонки();
				
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовара.Наименование)
				И Не ЗначениеЗаполнено(СтрокаТовара.Артикул)
				И ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
				
				НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(СтрокаТовара.Наименование, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(СтрокаТовара.Артикул, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(СтрокаТовара.Штрихкод, " ", "")));
			Иначе
				
				НатуральныйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(СтрокаТовара.Наименование, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(СтрокаТовара.Артикул, " ", "") + "#"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.КодМагазина) Тогда
				Если ДобавлятьШК И ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
					СтрокаТовара.ИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТовара.КодМагазина + "#" + СтрокаТовара.Штрихкод);
				Иначе
					СтрокаТовара.ИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(СтрокаТовара.КодМагазина);
				КонецЕсли;
				СтрокаТовара.ИсторияИдентификаторов.Добавить(НатуральныйИД);
				СтрокаТовара.НатуральныйИД = НатуральныйИД;
			Иначе
				СтрокаТовара.ИД = НатуральныйИД;
			КонецЕсли;
			
			СтрокаНоменклатура = ТаблицаНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, СтрокаТовара);
			
		КонецЦикла;
		
		Если ЕстьСтавкаНДС Тогда
			ТаблицаНоменклатура.Свернуть("Наименование, Артикул, Штрихкод, ИД, НатуральныйИД, КодМагазина, СтавкаНДС");
		Иначе
			ТаблицаНоменклатура.Свернуть("Наименование, Артикул, Штрихкод, ИД, НатуральныйИД, КодМагазина");
		КонецЕсли;
		
		СтруктураОписания.Вставить("ТаблицаНоменклатура", ТаблицаНоменклатура);
		
		НастройкиСопоставления    = Новый Структура;
		НовыеКолонкиСопоставления = Новый Массив;
		ТипСтрока300              = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(300));
				
		ДополнительныеПараметрыПоиска = Новый Структура;
		ДополнительныеПараметрыПоиска.Вставить("НатуральныеКлючи", "Артикул");
		
		Если СтруктураОписания.Свойство("Маркетплейс")
			И (СтруктураОписания.Маркетплейс = Перечисления.ВидыМаркетплейсов.Wildberries
			ИЛИ СтруктураОписания.Маркетплейс = Перечисления.ВидыМаркетплейсов.OZON) Тогда
			
			ДополнительныеПараметрыПоиска.Вставить("Маркетплейс", СтруктураОписания.Маркетплейс);
				
			ДополнительныйРеквизит = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыйДополнительныйРеквизитСопоставления();
			ДополнительныйРеквизит.Имя = "КодМагазина";
			ДополнительныйРеквизит.Представление = "Код маркетплейса";
			НовыеКолонкиСопоставления.Добавить(ДополнительныйРеквизит);
				
			ВидимостьКолонокСопоставления = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеНастройкиВидимостиКолонокСопоставления();
			ВидимостьКолонокСопоставления.Вставить("ЕдиницаИзмерения", Ложь);
			ВидимостьКолонокСопоставления.Вставить("Упаковка", Ложь);
			ВидимостьКолонокСопоставления.Вставить("СтавкаНДС", ЕстьСтавкаНДС);
			НастройкиСопоставления.Вставить("ВидимостьКолонокСопоставления", ВидимостьКолонокСопоставления);
			НастройкиСопоставления.Вставить("ДополнительныеРеквизитыСопоставления", НовыеКолонкиСопоставления);
		КонецЕсли;
		
		НастройкиСопоставления.Вставить("ДополнительныеПараметрыПоиска", ДополнительныеПараметрыПоиска);
		НастройкиСопоставления.Вставить("ОграничениеТипаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		НастройкиСопоставления.Вставить("ОтключитьПоискПоСловарю", Истина);
		НастройкиСопоставления.Вставить("ТочностьПоискаПоУмолчанию", 100);
		
		СтруктураОписания.Вставить("НастройкиСопоставленияНоменклатуры", НастройкиСопоставления);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗагрузкаИзМаркетплейса(ВидДокумента)
	
	Возврат (ВидДокумента = ВидДокументаОтчетWB()
		Или ВидДокумента = ВидДокументаОтчетWBДетальный()
		Или ВидДокумента = ВидДокументаОтчетOzon()
		Или ВидДокумента = ВидДокументаОтчетOzonСписание()
		Или ВидДокумента = ВидДокументаОтчетOzonВыкуп()
		Или ВидДокумента = ВидДокументаWBУведомлениеВыкупа());
	
КонецФункции

Функция ПодготовитьТаблицуТоваровМаркетплейс() Экспорт
	
	ТипСтрока =     Новый ОписаниеТипов("Строка");
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ТипСумма =      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТипДата = 		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("НаимТов", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("Артикул", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("ИД", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("КодМагазина", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("ВидДвижения", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("ТипДокумента", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("КодСтраны", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("НазваниеСтраны", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("Реализовано", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("Возвращено", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("Количество", ТипКоличество);
	ТаблицаТоваров.Колонки.Добавить("КоличествоВозврат", ТипКоличество);
	ТаблицаТоваров.Колонки.Добавить("Цена", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("ЦенаВозврат", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаВозврат", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("Доплата", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("ДоплатаВозврат", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("ДатаПродажи", ТипДата);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуТоваровУведомлениеОВыкупе()
	
	ТипСтрока =     Новый ОписаниеТипов("Строка");
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ТипСумма =      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("НаимТов", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("Артикул", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("ИД", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("КодМагазина", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("Количество", ТипКоличество);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ТипСумма);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#Область ОтчетOzon

Функция ВидДокументаОтчетOzon() Экспорт
	
	Возврат "Отчет_Ozon";
	
КонецФункции

Функция ВидДокументаОтчетOzonСписание() Экспорт
	
	Возврат "Отчет_Ozon_списание";
	
КонецФункции

Функция ВидДокументаОтчетOzonВыкуп() Экспорт
	
	Возврат "Отчет_Ozon_выкуп";
	
КонецФункции

Функция УчитыватьДоплатуЗаСчетOzon(Дата) Экспорт
	
	Возврат Дата < '20231001';
	
КонецФункции

Процедура НомерОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
			
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, "отчетреализации") > 0 
			ИЛИ СтрНайти(ПодготовленноеЗначение, "отчетовыкупленныхтоварах") > 0 Тогда
			ТекстСтроки = СтрЗаменить(ПодготовленноеЗначение, " ", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, Символы.НПП, "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "отчетреализации", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "отчетовыкупленныхтоварах", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСтроки) Тогда
		ДанныеДокумента.Вставить("Номер", ТекстСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
			
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, "реализациятоваровзапериод") > 0 Тогда
			ТекстСтроки = ЗначениеЯчейки;			
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	ТекстСтроки = СтрЗаменить(ТекстСтроки, Символы.НПП, " ");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "  ", " ");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("с");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		ДатаНач = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
		ДанныеДокумента.Вставить("ДатаНач", ДатаНач);
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("по");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
		ДанныеДокумента.Вставить("Дата", Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорОтчетОзон(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
			
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, "дляпродавцовнаплатформеozon") > 0 Тогда
			ТекстСтроки = ЗначениеЯчейки;
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("ozon");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		Номер = МассивДанных[ИндексДанных + 1];
		ДанныеДокумента.Вставить("Договор", Номер);
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("от");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
		ДанныеДокумента.Вставить("ДоговорДата", Дата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаОтчетОзон(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, НРег(КлючевоеСлово)) > 0 Тогда
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			//Наименование
			Если ТаблицаДанных.Количество() >= ИндексСтроки + 1 Тогда 
				НаименованиеПолное = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
				ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(НаименованиеПолное));
			КонецЕсли;
			//ИНН
			Если ТаблицаДанных.Количество() >= ИндексСтроки + 2 И МаксИндексКолонок >= Н+1 Тогда
				Для Н2 = Н+1 По МаксИндексКолонок Цикл
					ИНН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 2][Н2]);
					Если НЕ ПустаяСтрока(ИНН) Тогда
						ДанныеКонтрагента.Вставить("ИНН", СокрЛП(ИНН));
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//КПП
			Если ТаблицаДанных.Количество() >= ИндексСтроки + 3 И МаксИндексКолонок >= Н+1 Тогда
				Для Н2 = Н+1 По МаксИндексКолонок Цикл
					КПП = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 3][Н2]);
					Если НЕ ПустаяСтрока(КПП) Тогда
						ДанныеКонтрагента.Вставить("КПП", СокрЛП(КПП));
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;

КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетOzon(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтоварапродавца";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// код товара ozon
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодМагазина";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовараozon";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// штрих-код
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Штрихкод";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "штрихкодтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// начало блока "реализовано"
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Реализовано";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "реализовано";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ценареализации";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "реализованонасумму";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	
	// Доплата
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Доплата";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "доплатазасчетozon";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "12";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// Доплата с 11.2023
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Доплата";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "баллызаскидки";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "6";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
			
	// начало блока "Возвращено клиентом"
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Возвращено";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "возвращеноклиентом";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "14";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ЦенаВозврат";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ценареализации";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "14";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КоличествоВозврат";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "15";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СуммаВозврат";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "возвращенонасумму";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "16";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// Доплата
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ДоплатаВозврат";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "доплатазасчетozon";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "17";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// Доплата с 11.2023
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ДоплатаВозврат";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "баллызаскидки";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетOzonВыкуп(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтоварапродавца";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// код товара ozon
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодМагазина";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовараozon";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "итогокначислению";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ставкандс";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "8";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
КонецПроцедуры

Процедура ДатаНомерОтчетОзонСписание(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	// Поиск номера
	ИндексДанных = МассивПоиск.Найти("компенсациях");
	Если ИндексДанных <> Неопределено
		И МассивДанных.ВГраница() > ИндексДанных + 1 Тогда

		ДанныеДокумента.Вставить("Номер", МассивДанных[ИндексДанных + 1]);
		
		// Поиск даты
		ИндексДанных = МассивПоиск.Найти("от");
		Если ИндексДанных <> Неопределено
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
			ДанныеДокумента.Вставить("Дата", Дата);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетOzonСписание(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "артикул";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// код товара ozon
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодМагазина";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "sku";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// штрих-код
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Штрихкод";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "штрихкод";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Стоимость";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "действительнаястоимостьтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Уменьшение";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "уменьшенонасумму";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "итогокначислению";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	
КонецПроцедуры

Функция ПолучитьРеквизитыOzon() Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "ООО ""Интернет Решения""");
	ДанныеКонтрагента.Вставить("ИНН", "7704217370");
	ДанныеКонтрагента.Вставить("КПП", "997750001");
	
	Возврат ДанныеКонтрагента;

КонецФункции

#КонецОбласти

#Область ОтчетWildberries

Функция ВидДокументаОтчетWB()
	
	Возврат "Отчет_WB";
	
КонецФункции

Функция ВидДокументаОтчетWBДетальный() Экспорт
	
	Возврат "Отчет_WB_детальный";
	
КонецФункции

Функция ВидДокументаОтчетWBСписание() Экспорт
	
	Возврат "Отчет_WB_списание";
	
КонецФункции

Процедура ДатаНомерОтчетWB(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	// Поиск номера
	ИндексДанных = МассивПоиск.Найти("wildberries");
	Если ИндексДанных <> Неопределено
		И МассивДанных.ВГраница() > ИндексДанных + 1 Тогда

		ДанныеДокумента.Вставить("Номер", МассивДанных[ИндексДанных + 1]);
		
		// Поиск даты
		ИндексДанных = МассивПоиск.Найти("от");
		Если ИндексДанных <> Неопределено
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
			ДанныеДокумента.Вставить("Дата", Дата);
		Иначе
			ИндексДанных = МассивДанных.Найти("по");
			Если ИндексДанных <> Неопределено 
				И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
				Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
				ДанныеДокумента.Вставить("Дата", Дата);
			КонецЕсли;
		КонецЕсли;	
					
		ИндексДанных = МассивДанных.Найти("с");
		Если ИндексДанных <> Неопределено 
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			ДатаНач = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
			ДанныеДокумента.Вставить("ДатаНач", ДатаНач);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаОтчетWB(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, НРег(КлючевоеСлово)) > 0 Тогда
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			//Наименование
			Если МаксИндексКолонок >= Н+1 Тогда
				НаименованиеПолное = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки][Н+1]);
				Если НЕ ПустаяСтрока(НаименованиеПолное) Тогда
					ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(НаименованиеПолное));
					//Найдем ИНН/КПП
					Для Н2 = 1 По 5 Цикл
						Если ТаблицаДанных.Количество() >= ИндексСтроки + Н2 Тогда
							ЗначениеЯчейки = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + Н2][Н]);
							ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
							Если СтрНайти(ПодготовленноеЗначение, "иннкпп") > 0 Тогда
								ИННКПП = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + Н2][Н+1]);
								МассивДанных = СтрРазделить(ИННКПП, "/");
								Если МассивДанных.Количество() = 2 Тогда
									ДанныеКонтрагента.Вставить("ИНН", СокрЛП(МассивДанных[0]));
									ДанныеКонтрагента.Вставить("КПП", СокрЛП(МассивДанных[1]));
								ИначеЕсли МассивДанных.Количество() = 1 Тогда
									ДанныеКонтрагента.Вставить("ИНН", СокрЛП(МассивДанных[0]));
								КонецЕсли;
								Прервать;
							КонецЕсли;
						КонецЕсли;						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;

КонецФункции

Функция ПолучитьРеквизитыWB() Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "Общество с ограниченной ответственностью ""Вайлдберриз""");
	ДанныеКонтрагента.Вставить("ИНН", "7721546864");
	ДанныеКонтрагента.Вставить("КПП", "997750001");
	
	Возврат ДанныеКонтрагента;

КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетWB(ТаблицаЗаголовков, НомерТаблицы)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "№";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименование";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "артикул";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	Если НомерТаблицы = 1 Тогда
		// количество
		НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
		НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
		НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
		НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
		НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
		НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
		
		// сумма с ндс
		НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
		НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
		НоваяСтрокаЗаголовков.СтрокаПоиска 		= "реализовал";	
		НоваяСтрокаЗаголовков.НомерКолонки 		= "6";
		НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
		НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
		
	ИначеЕсли НомерТаблицы = 2 Тогда
		// количество
		НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
		НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КоличествоВозврат";
		НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
		НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
		НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
		НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
		
		// сумма с ндс
		НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
		НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СуммаВозврат";
		НоваяСтрокаЗаголовков.СтрокаПоиска 		= "реализовал";	
		НоваяСтрокаЗаголовков.НомерКолонки 		= "6";
		НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
		НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетWBДетальный(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= " ";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	НоваяСтрокаЗаголовков.КолонкаНайдена	= Истина;

	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "название";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	//код товара WB
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодМагазина";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодноменклатуры";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "артикулпоставщика";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НазваниеСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "страна";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "колво";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "реализовал";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	
	// тип документа (признак сторно)
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ТипДокумента";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "типдокумента";
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// вид движения (операции) Продажа/Возврат
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ВидДвижения";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "обоснованиедляоплаты";
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// вид движения Продажа/Возврат
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ШтрихКод";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "баркод";
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// дата продажи
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ДатаПродажи";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "датапродажи";
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Дата";
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТаблицуЗаголовковWBУведомлениеВыкупа(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименование";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "артикул";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количество";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммавыкупарубвклндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ставкандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "6";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
		// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СуммаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммандсруб";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "7";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	
КонецПроцедуры

Функция ВидДокументаWBУведомлениеВыкупа() Экспорт
	
	Возврат "WBУведомлениеВыкупа";
	
КонецФункции

Процедура ДатаНомерWBУведомлениеВыкупа(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	// Поиск номера
	ИндексДанных = МассивПоиск.Найти("выкупе");
	Если ИндексДанных <> Неопределено
		И МассивДанных.ВГраница() > ИндексДанных + 1 Тогда

		ДанныеДокумента.Вставить("Номер", МассивДанных[ИндексДанных + 1]);
		
		// Поиск даты
		ИндексДанных = МассивПоиск.Найти("от");
		Если ИндексДанных <> Неопределено
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивДанных[ИндексДанных + 1]);
			ДанныеДокумента.Вставить("Дата", Дата);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПериодОтчетаWB(ДанныеДокумента)
	
	Для Каждого СтрокаТовара Из ДанныеДокумента.ТаблицаТоваров Цикл 
		Если (Нрег(СтрокаТовара.ВидДвижения) = "продажа" ИЛИ Нрег(СтрокаТовара.ВидДвижения) = "логистика")
			И ЗначениеЗаполнено(СтрокаТовара.ДатаПродажи) Тогда
			ДанныеДокумента.Вставить("Дата", КонецНедели(СтрокаТовара.ДатаПродажи));
			Возврат;
		КонецЕсли;		
	КонецЦикла;	
	ДанныеДокумента.Вставить("Дата", ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетЯндекс

Функция ОпределитьВидДокументаПоИмениТаблицы(ИмяТаблицы)
	
	ВидДокумента = "";
	ПодготовленноеИмяТаблицы = СтрЗаменить(ПодготовитьСтроку(ИмяТаблицы), "_", "");
	
	Если ПодготовленноеИмяТаблицы = ПодготовитьСтроку("Товары, переданные в доставку") Тогда
		
		ВидДокумента = "Яндекс_Отгружено";
		
	ИначеЕсли ПодготовленноеИмяТаблицы = ПодготовитьСтроку("Доставленные товары") Тогда
		
		ВидДокумента = "Яндекс_Доставлено";
		
	ИначеЕсли ПодготовленноеИмяТаблицы = ПодготовитьСтроку("Невыкупленные товары") Тогда
		
		ВидДокумента = "Яндекс_Невыкуплено";
		
	ИначеЕсли ПодготовленноеИмяТаблицы = ПодготовитьСтроку("Возвращённые товары") Тогда
		
		ВидДокумента = "Яндекс_Возвращено";
		
	КонецЕсли;		
		
	Возврат ВидДокумента;
		
КонецФункции

Функция ЭтоОтчетЯндекс(ВидДокумента)
	
	Возврат СтрНайти(ВидДокумента, "Яндекс_") > 0;
	
КонецФункции

Функция ПодготовитьТаблицуТоваровЯндекс() Экспорт
	
	ТипСтрока =     Новый ОписаниеТипов("Строка");
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ТипСумма =      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НаимТов", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("Артикул", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("КодМагазина", ТипСтрока);
	
	ТаблицаТоваров.Колонки.Добавить("НомерЗаказа", ТипСтрока);
	ТаблицаТоваров.Колонки.Добавить("СтатусЗаказа", ТипСтрока);
	
	ТаблицаТоваров.Колонки.Добавить("ДатаПередачи", Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("ДатаДоставки", Новый ОписаниеТипов("Дата"));
	
	ТаблицаТоваров.Колонки.Добавить("Количество", ТипКоличество);
	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаТоваров.Колонки.Добавить("Цена", ТипСумма);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ТипСумма);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковОтчетЯндекс(ТаблицаЗаголовков, ВидДокумента)
	
	ИменаЗаголовков = ИменаЗаголовковЯндекс(ВидДокумента);
	
	// номер заказа
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомерЗаказа";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номерзаказа";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "название";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодМагазина";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "вашsku";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Количество";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ИменаЗаголовков.Количество;	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// статус заказа
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтатусЗаказа";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "статусзаказа";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// дата передачи в доставку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ДатаПередачи";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "датапередачитоваравдоставку";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Дата";
	
	// дата доставки
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ДатаДоставки";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "датадоставки";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Дата";
			
	// ставка НДС
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ставкандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ИменаЗаголовков.Цена;	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Сумма";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= ИменаЗаголовков.Сумма;	
	НоваяСтрокаЗаголовков.НомерКолонки 		= " ";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
КонецПроцедуры

Функция ИменаЗаголовковЯндекс(ВидДокумента)
	
	ИменаЗаголовков = Новый Структура;
	ИменаЗаголовков.Вставить("Количество", "количество");
	ИменаЗаголовков.Вставить("Цена", "цена");
	ИменаЗаголовков.Вставить("Сумма", "сумма");
	
	Если ВидДокумента = "Яндекс_Отгружено" Тогда
		
		ИменаЗаголовков.Количество = "количествопереданныхвдоставку";
		ИменаЗаголовков.Цена       = "ценасндссучётомвсехскидок";
		ИменаЗаголовков.Сумма      = "стоимостьвсехпереданныхвдоставкуштуксндссучётомвсехскидок";
		
	ИначеЕсли ВидДокумента = "Яндекс_Доставлено" Тогда
		
		ИменаЗаголовков.Количество = "доставлено";
		ИменаЗаголовков.Цена       = "ценасндссучётомвсехскидок";
		ИменаЗаголовков.Сумма      = "стоимостьвсехдоставленныхштуксндссучётомвсехскидок";
		
	ИначеЕсли ВидДокумента = "Яндекс_Невыкуплено" Тогда
		
		ИменаЗаголовков.Количество = "невыкуплено";
		ИменаЗаголовков.Цена       = "ценасндссучётомвсехскидок";
		ИменаЗаголовков.Сумма      = "стоимостьвсехневыкупленныхштуксндссучётомвсехскидок";
		
	ИначеЕсли ВидДокумента = "Яндекс_Возвращено" Тогда
		
		ИменаЗаголовков.Количество = "возвращено";
		ИменаЗаголовков.Цена       = "ценасндссучётомвсехскидок";
		ИменаЗаголовков.Сумма      = "стоимостьвсехвозвращённыхштуксндссучётомвсехскидок";
		
	КонецЕсли;
	
	Возврат ИменаЗаголовков
	
КонецФункции

Процедура ДоговорОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
			
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, "подоговору") > 0 Тогда
			ТекстСтроки = ЗначениеЯчейки;
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("договору");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		Номер = МассивДанных[ИндексДанных + 1];
		ДанныеДокумента.Вставить("Договор", Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
			
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, "запериод") > 0 Тогда
			ТекстСтроки = ЗначениеЯчейки;			
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	ТекстСтроки = СтрЗаменить(ТекстСтроки, Символы.НПП, " ");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "  ", " ");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексДанных = МассивДанных.Найти("по");
	Если ИндексДанных <> Неопределено 
		И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		
		Дата     = '00010101';
		Месяц    = 0;	
		День     = ПодготовитьСтроку(МассивДанных[ИндексДанных + 1]);
		МесяцСтр = НРег(?(МассивДанных.ВГраница() >= ИндексДанных + 2, МассивДанных[ИндексДанных + 2], ""));
		Год      = ЦифрыИзСтроки(?(МассивДанных.ВГраница() >= ИндексДанных + 3, МассивДанных[ИндексДанных + 3], ""), Истина);
				
		Если СтрНайти(МесяцСтр, "январ") > 0 Тогда
			Месяц = 1;
		ИначеЕсли СтрНайти(МесяцСтр, "феврал") > 0 Тогда
			Месяц = 2;
		ИначеЕсли СтрНайти(МесяцСтр, "март") > 0 Тогда
			Месяц = 3;
		ИначеЕсли СтрНайти(МесяцСтр, "апрел") > 0 Тогда
			Месяц = 4;
		ИначеЕсли СтрНайти(МесяцСтр, "ма") > 0 Тогда
			Месяц = 5;
		ИначеЕсли СтрНайти(МесяцСтр, "июн") > 0 Тогда
			Месяц = 6;
		ИначеЕсли СтрНайти(МесяцСтр, "июл") > 0 Тогда
			Месяц = 7;
		ИначеЕсли СтрНайти(МесяцСтр, "август") > 0 Тогда
			Месяц = 8;
		ИначеЕсли СтрНайти(МесяцСтр, "сентябр") > 0 Тогда
			Месяц = 9;
		ИначеЕсли СтрНайти(МесяцСтр, "октябр") > 0 Тогда
			Месяц = 10;
		ИначеЕсли СтрНайти(МесяцСтр, "ноябр") > 0 Тогда
			Месяц = 11;
		ИначеЕсли СтрНайти(МесяцСтр, "декабр") > 0 Тогда
			Месяц = 12;
		ИначеЕсли ЗначениеЗаполнено(День) Тогда
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(День);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(День)
			И ЗначениеЗаполнено(Месяц)
			И ЗначениеЗаполнено(Год) Тогда
			
			Дата = Дата(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Год), Месяц, СтроковыеФункцииКлиентСервер.СтрокаВЧисло(День));
			
		КонецЕсли;
		
		ДанныеДокумента.Вставить("Дата", Дата);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаОтчетЯндекс(СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			Продолжить;				
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если СтрНайти(ПодготовленноеЗначение, ПодготовитьСтроку(КлючевоеСлово)) > 0 Тогда
			//Наименование
			Если МаксИндексКолонок >= Н + 1 Тогда 
				НаименованиеПолное = УдалитьПереносыСтроки(СтрокаДанных[Н+1]);
				ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(НаименованиеПолное));
			КонецЕсли;
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;

КонецФункции

#КонецОбласти

// Функция-конструктор таблицы с информацией о товарах из электронного документа.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция НоваяТаблицаТоваровЭДО() Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	
	ТаблицаТоваров.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеКраткое", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(3000));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИсторияИдентификаторов");
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатурыФНС");
	ТаблицаТоваров.Колонки.Добавить("КодПоКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("КодТНВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("МаркируемыйТовар", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти
