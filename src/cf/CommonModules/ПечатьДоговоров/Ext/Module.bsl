////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для печати договоров.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру с параметрами печати.
//
// Возвращаемое значение:
//	Структура с ключами:
//		* ШаблонДоговора -  СправочникСсылка.ШаблоныДоговоров - шаблон печати
//		* СсылкаНаОбъект - СправочникСсылка.ДоговорыКонтрагентов
//				   		 - ДокументСсылка.СчетНаОплатуПокупателям 
//		    	   		 - ссылка на договор или документ, из которого вызвана печать текста договора
//		* ЭлектронныйФормат - Булево - формат печати
//
Функция СтруктураПараметровПечатиДоговора() Экспорт 
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ШаблонДоговора");
	ПараметрыЗаполнения.Вставить("СсылкаНаОбъект");
	ПараметрыЗаполнения.Вставить("ЭлектронныйФормат");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Подготавливает текст и вложения договора из шаблона внутри фонового задания.
// Заполнение самого форматированного документа по подготовленным данным необходимо производить
// на стороне вызывающего сеанса.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - см. СтруктураПараметровПечатиДоговора().
//	АдресХранилища - Строка - Адрес временного хранилища, в которое поместить
//							результат выполнения функции ЗаполнитьТекстДоговораПоШаблону().
//
Процедура ЗаполнитьТекстДоговораПоШаблонуВФоне(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	ЗаполнитьТекстДоговораПоШаблону(ПараметрыЗаполнения, ФорматированныйДокумент);
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстHTML");
	Результат.Вставить("Вложения");
	
	ФорматированныйДокумент.ПолучитьHTML(Результат.ТекстHTML, Результат.Вложения);
									
	ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9)), АдресХранилища);
	
КонецПроцедуры

// Процедура копирует текст договора из шаблона в форматированный документ
// и заменяет подставляемые параметры на их значения.
//
// Параметры:
//		ПараметрыЗаполнения - Структура - см. СтруктураПараметровПечатиДоговора()
//		ФорматированныйДокумент - ФорматированныйДокумент, которые необходимо заполнить
//
Процедура ЗаполнитьТекстДоговораПоШаблону(ПараметрыЗаполнения, ФорматированныйДокумент)

	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Если ТипЗнч(ПараметрыЗаполнения.СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			КлючеваяОперация = "ЗаполнениеДоговораИзСчетаПоШаблону";
		Иначе
			КлючеваяОперация = "ЗаполнениеДоговораПоШаблону";
		КонецЕсли;
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	СведенияОСделке = СведенияОСделке(ПараметрыЗаполнения.СсылкаНаОбъект, ПараметрыЗаполнения.ШаблонДоговора);

	Если СведенияОСделке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШаблона = Справочники.ШаблоныДоговоров.ДанныеШаблонаДоговора(ПараметрыЗаполнения.ШаблонДоговора);
	ТекстHTML = ДанныеШаблона.ТекстHTML;
	
	Если НЕ ЗначениеЗаполнено(ТекстHTML) Тогда
		Возврат;
	КонецЕсли;
	
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, ДанныеШаблона.Вложения);
	
	// Заменяем параметры по тексту на значения из базы.
	ЦветФонаЗаменяемогоПараметра = ЦветФонаЗаменяемогоПараметра();
	ЦветПоУмолчанию = ПечатьДоговоровКлиентСервер.ЦветФонаПоУмолчанию();
	
	ЭлементыКОбнулению = Новый Массив;
	
	ЗакладкаКонцаДокумента = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	
	ЗначенияСоставногоПараметра = Новый Массив;
	
	ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{");
	Пока ОбластьНачалоПараметра <> Неопределено Цикл
	
		ОбластьКонецПараметра = ФорматированныйДокумент.НайтиТекст("}", ОбластьНачалоПараметра.ЗакладкаНачала);
		Если ОбластьКонецПараметра = Неопределено Тогда
			// Для параметра не задана закрывающая скобка и он продолжается до конца текста, поэтому выходим из цикла.
			Прервать;
		КонецЕсли;
		
		МассивЭлементов = ФорматированныйДокумент.СформироватьЭлементы(
			ОбластьНачалоПараметра.ЗакладкаНачала, ОбластьКонецПараметра.ЗакладкаКонца);
			
		ЭлементыКОбнулению.Очистить();
		ПоследнийТекстовыйЭлемент = Неопределено;
			
		Сч = 0;
		ДлинаДобавленногоТекста = 0;
		Пока Сч < МассивЭлементов.Количество() Цикл
			
			ЭлементДокумента = МассивЭлементов[Сч];
		
			Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;

			ИмяПараметра = ЭлементДокумента.Текст;
			
			// Возможно, что из-за форматирования текст параметра разбился на несколько html-элементов
			// и надо собрать их в один
			Пока Сч < МассивЭлементов.Количество() - 1
				И Прав(ИмяПараметра, 1) <> "}" Цикл
				
				СледующийЭлементДокумента = МассивЭлементов[Сч + 1];
				Если ТипЗнч(СледующийЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
					Прервать;
				КонецЕсли;
				
				ИмяПараметра = ИмяПараметра + СледующийЭлементДокумента.Текст;
				Сч = Сч + 1;
				
				ЭлементыКОбнулению.Добавить(СледующийЭлементДокумента);
				
			КонецЦикла;
			
			Если Лев(ИмяПараметра, 1) = "{" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 2);
			КонецЕсли;
			Если Прав(ИмяПараметра, 1) = "}" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 1, СтрДлина(ИмяПараметра) - 1);
			КонецЕсли;
			
			Успешно = Истина;
			Если ЗначениеЗаполнено(ИмяПараметра) Тогда
				Значение = ЗначениеПараметра(ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра,
											 Успешно, ПараметрыЗаполнения.ЭлектронныйФормат);
				Если СтрНайти(Значение, "%1%") > 0 Тогда
					// Это составной параметр, вставляем его значение по частям
					
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста 
						+ ВставитьСоставноеЗначение(Значение, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокумента);
					ЗначенияСоставногоПараметра.Очистить();
					Значение = "";
				Иначе
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста +  СтрДлина(Значение);
				КонецЕсли;
				
				ЭлементДокумента.Текст = Значение;
			Иначе
				ЭлементДокумента.Текст = "";
			КонецЕсли;
			
			Для Каждого Элемент Из ЭлементыКОбнулению Цикл
				Элемент.Текст = "";
			КонецЦикла;
			
			Если Успешно Тогда
				// Заменяем цвет фона по умолчанию
				Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
					ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
					ПоследнийТекстовыйЭлемент = ЭлементДокумента;
				КонецЕсли;
				
				Для Каждого Элемент Из ЭлементыКОбнулению Цикл
					Если Элемент.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						Элемент.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = Элемент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;

		// При расположении подряд нескольких параметров между ними могут появляться 
		// пробелы или знаки препинания, закрашенные цветом ЦветФонаЗаменяемогоПараметра. 
		// Чтобы после замены всех соседних параметров эти пробелы не выделялсь, снимем у них фон.
		Если ПоследнийТекстовыйЭлемент <> Неопределено Тогда
			
			ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
			
			Пока ЕстьДанные Цикл
				ПозицияПоследнегоТекстовогоЭлемента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(
					ПоследнийТекстовыйЭлемент.ЗакладкаКонца);
				
				ПозицияКонцаДокумента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонцаДокумента);
				
				ПозицияПоследнегоТекстовогоЭлемента = Мин(ПозицияПоследнегоТекстовогоЭлемента + ДлинаДобавленногоТекста + 1, ПозицияКонцаДокумента);
				ЗакладкаПоПозиции = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияПоследнегоТекстовогоЭлемента);
				
				МассивЭлементов = ФорматированныйДокумент.ПолучитьЭлементы(ПоследнийТекстовыйЭлемент.ЗакладкаКонца, ЗакладкаПоПозиции);
				ПоследнийТекстовыйЭлемент = Неопределено;
				Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
					Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если СтрНайти(ЭлементДокумента.Текст, "{") > 0 Тогда
						// Начало нового параметра, дальше не обрабатываем
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = ЭлементДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоследнийТекстовыйЭлемент = Неопределено Тогда
					ЕстьДанные = Ложь;
				ИначеЕсли ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПоследнийТекстовыйЭлемент.ЗакладкаКонца) <= ПозицияПоследнегоТекстовогоЭлемента Тогда
					ЕстьДанные = Ложь;
				Иначе
					ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
		
		// Ищем следующий параметр
		ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{", ОбластьНачалоПараметра.ЗакладкаНачала);
		
	КонецЦикла;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

// Возвращает структуру со сведениями о сделке.
//
// Параметр:
//	СсылкаНаОбъект  - СправочникСсылка.ДоговорКонтрагента, ДокументСсылка.СчетНаОплатуПокупателю
//					- договор или счет на оплату, из которого вызвано заполнение текста договора.
//
// Возвращаемое значение:
//	Структура с ключами:
//		* СведенияОДоговоре -  структура сведений о договоре
//							- см. Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора()
//		* СведенияОКонтрагенте - структура сведений о контрагенте
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОбОрганизации - структура сведений об организации
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОСчетеНаОплату - структура сведений о счете на оплату (если передан он)
//							- см. Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора()
//
Функция СведенияОСделке(СсылкаНаОбъект, ШаблонДоговора) Экспорт

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СведенияОДоговоре = Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора(
		ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ШаблонДоговора) Тогда
		СведенияОДоговоре.ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонДоговора, "ИмяМакета");
	КонецЕсли;
		
	ДатаСреза = ?(ЗначениеЗаполнено(СведенияОДоговоре.Дата), СведенияОДоговоре.Дата, ТекущаяДатаСеанса());
	
	ЭтоСчетНаОплату = ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	
	Если ЭтоСчетНаОплату Тогда
		СведенияОСчетеНаОплату = Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаОбъект);
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		?(СведенияОСчетеНаОплату <> Неопределено, СведенияОСчетеНаОплату.Организация, СведенияОДоговоре.Организация),
		ДатаСреза, 
		?(СведенияОСчетеНаОплату <> Неопределено, СведенияОСчетеНаОплату.БанковскийСчет, Неопределено));
	
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДоговоре.Владелец, ДатаСреза);
	
	// Получим таблицу доп. свойств и реквизитов договора
	ТаблицаДопСвойств	= УправлениеСвойствами.ЗначенияСвойств(ДоговорКонтрагента, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОДоговоре.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СведенияОДоговоре.Организация, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОбОрганизации.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СведенияОДоговоре.Владелец, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОКонтрагенте.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	Если ЭтоСчетНаОплату Тогда
		ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СсылкаНаОбъект, Ложь, Истина);
		ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
		СведенияОСчетеНаОплату.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("СведенияОДоговоре", СведенияОДоговоре);
	Результат.Вставить("СведенияОКонтрагенте", СведенияОКонтрагенте);
	Результат.Вставить("СведенияОбОрганизации", СведенияОбОрганизации);
	Результат.Вставить("СведенияОСчетеНаОплату", СведенияОСчетеНаОплату);
	Результат.Вставить("КэшДанных", Новый Структура());

	Возврат Результат;

КонецФункции

Функция ЗначениеПараметра(Знач ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно, ЭлектронныйФормат = Ложь) Экспорт

	ИмяПараметра = ВРег(ИмяПараметра);
	КэшДанных = СведенияОСделке.КэшДанных;
	СведенияОДоговоре = СведенияОСделке.СведенияОДоговоре;
	СведенияОКонтрагенте = СведенияОСделке.СведенияОКонтрагенте;
	СведенияОбОрганизации = СведенияОСделке.СведенияОбОрганизации;
	СведенияОСчетеНаОплату = СведенияОСделке.СведенияОСчетеНаОплату;
	ТаблицаСоответствий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшДанных, "ТаблицаСоответствий");
	
	Если ТаблицаСоответствий = Неопределено Тогда
		
		ТаблицаСоответствий = ТаблицаСоответствийПараметровИТиповыхНаименований();
		КэшДанных.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
		
	КонецЕсли;
	
	Результат = Неопределено;
	Успешно = Истина;
	СтандартныйПараметр = Истина;
	
	Если ИмяПараметра = Врег("АдресЭлектроннойПочтыКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Email) Тогда
			Результат = СведенияОКонтрагенте.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("АдресЭлектроннойПочтыОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Email) Тогда
			Результат = СведенияОбОрганизации.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;

		ПрефиксНомерСчета = НСтр("ru = 'р/с'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) Тогда
			НомерСчета = СведенияОКонтрагенте.НомерСчета;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксНомерСчета, "НомерСчета", НомерСчета);
			ПрефиксНомерСчета = СокрЛП(ПрефиксНомерСчета);
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Банк) Тогда
			Банк = СведенияОКонтрагенте.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксБИК = НСтр("ru = 'БИК'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.БИК) Тогда
			БИК = СведенияОКонтрагенте.БИК;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксБИК, "БИК", БИК);
			ПрефиксБИК = СокрЛП(ПрефиксБИК);
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксКоррСчет = НСтр("ru = 'к/с'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.КоррСчет) Тогда
			КоррСчет = СведенияОКонтрагенте.КоррСчет;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксКоррСчет, "КоррСчет", КоррСчет);
			ПрефиксКоррСчет = СокрЛП(ПрефиксКоррСчет);
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
				
		Если ЭлектронныйФормат Тогда
			
			ИменаБанковскихРеквизитов = ИменаПараметровБанковскихРеквизитов(СведенияОКонтрагенте.БИК, "2");
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.НомерСчета, ЗначенияСоставногоПараметра,
				СведенияОКонтрагенте.НомерСчета, Результат, ТаблицаСоответствий);
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.НаимБанк, ЗначенияСоставногоПараметра,
				Банк, Результат, ТаблицаСоответствий);	  
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.БИК, ЗначенияСоставногоПараметра,
				СведенияОКонтрагенте.БИК, Результат, ТаблицаСоответствий);
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.КорСчет, ЗначенияСоставногоПараметра,
				СведенияОКонтрагенте.КоррСчет, Результат, ТаблицаСоответствий);
			
			Подстроки = Новый Массив;
			Подстроки.Добавить(ПрефиксНомерСчета);
			Подстроки.Добавить("%1%%2%%3%");
			Подстроки.Добавить(НСтр("ru = 'в банке'"));
			Подстроки.Добавить("%4%%5%%6%,");
			Подстроки.Добавить(ПрефиксБИК);
			Подстроки.Добавить("%7%%8%%9%,");
			Подстроки.Добавить(ПрефиксКоррСчет);
			Подстроки.Добавить("%10%%11%%12%");

			Результат = СтрСоединить(Подстроки, " ");

		Иначе
				
			// Формируем строку вида "р/с %1% в банке %2%, БИК %3%, к/с %4%"
			Подстроки = Новый Массив;
			Подстроки.Добавить(ПрефиксНомерСчета);
			Подстроки.Добавить("%1%"); 
			Подстроки.Добавить(НСтр("ru = 'в банке'"));
			Подстроки.Добавить("%2%,");
			Подстроки.Добавить(ПрефиксБИК);
			Подстроки.Добавить("%3%,"); 
			Подстроки.Добавить(ПрефиксКоррСчет);
			Подстроки.Добавить("%4%"); 

			Результат = СтрСоединить(Подстроки, " ");

			ЗначенияСоставногоПараметра.Добавить(НомерСчета);
			ЗначенияСоставногоПараметра.Добавить(Банк);
			ЗначенияСоставногоПараметра.Добавить(БИК);
			ЗначенияСоставногоПараметра.Добавить(КоррСчет); 
			
		КонецЕсли;	
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;

		ПрефиксНомерСчета = НСтр("ru = 'р/с'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) Тогда
			НомерСчета = СведенияОбОрганизации.НомерСчета;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксНомерСчета, "НомерСчета", НомерСчета);
			ПрефиксНомерСчета = СокрЛП(ПрефиксНомерСчета);    
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Банк = СведенияОбОрганизации.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксБИК = НСтр("ru = 'БИК'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.БИК) Тогда
			БИК = СведенияОбОрганизации.БИК;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксБИК, "БИК", БИК);
			ПрефиксБИК = СокрЛП(ПрефиксБИК);
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксКоррСчет = НСтр("ru = 'к/с'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчет) Тогда
			КоррСчет = СведенияОбОрганизации.КоррСчет;
			ОбщегоНазначенияБПВызовСервера.ПроверитьЗаменитьБанковскиеПрефиксы(ПрефиксКоррСчет, "КоррСчет", КоррСчет);
			ПрефиксКоррСчет = СокрЛП(ПрефиксКоррСчет);
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда        
			
			ИменаБанковскихРеквизитов = ИменаПараметровБанковскихРеквизитов(СведенияОбОрганизации.БИК, "1");
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.НомерСчета, ЗначенияСоставногоПараметра,
				СведенияОбОрганизации.НомерСчета, Результат, ТаблицаСоответствий);
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.НаимБанк, ЗначенияСоставногоПараметра,
				Банк, Результат, ТаблицаСоответствий);
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.БИК, ЗначенияСоставногоПараметра,
				СведенияОбОрганизации.БИК, Результат, ТаблицаСоответствий);
			СформироватьРезультатЭлектронногоФормата(ИменаБанковскихРеквизитов.КорСчет, ЗначенияСоставногоПараметра,
				СведенияОбОрганизации.КоррСчет, Результат, ТаблицаСоответствий);
			
			Подстроки = Новый Массив;
			Подстроки.Добавить(ПрефиксНомерСчета);
			Подстроки.Добавить("%1%%2%%3%");
			Подстроки.Добавить(НСтр("ru = 'в банке'"));
			Подстроки.Добавить("%4%%5%%6%,");
			Подстроки.Добавить(ПрефиксБИК);
			Подстроки.Добавить("%7%%8%%9%,");
			Подстроки.Добавить(ПрефиксКоррСчет);
			Подстроки.Добавить("%10%%11%%12%");

			Результат = СтрСоединить(Подстроки, " ");

		Иначе

			// Формируем строку вида "р/с %1% в банке %2%, БИК %3%, к/с %4%"
			Подстроки = Новый Массив;
			Подстроки.Добавить(ПрефиксНомерСчета);
			Подстроки.Добавить("%1%"); 
			Подстроки.Добавить(НСтр("ru = 'в банке'"));
			Подстроки.Добавить("%2%,");
			Подстроки.Добавить(ПрефиксБИК);
			Подстроки.Добавить("%3%,");
			Подстроки.Добавить(ПрефиксКоррСчет);
			Подстроки.Добавить("%4%");

			Результат = СтрСоединить(Подстроки, " ");

			ЗначенияСоставногоПараметра.Добавить(НомерСчета);
			ЗначенияСоставногоПараметра.Добавить(Банк);
			ЗначенияСоставногоПараметра.Добавить(БИК);
			ЗначенияСоставногоПараметра.Добавить(КоррСчет);
			
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ГородПоПочтовомуАдресуКонтрагента") Тогда
		
		ГородПоПочтовомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОКонтрагенте.ЗначениеJSONПочтовыйАдрес);
		
		Если ЗначениеЗаполнено(ГородПоПочтовомуАдресу) Тогда
			Результат = ГородПоПочтовомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ГородПоПочтовомуАдресуОрганизации") Тогда
		
		ГородПоПочтовомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОбОрганизации.ЗначениеJSONПочтовыйАдрес);
		
		Если ЗначениеЗаполнено(ГородПоПочтовомуАдресу) Тогда
			Результат = ГородПоПочтовомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ГородПоФактическомуАдресуКонтрагента") Тогда
		
		ГородПоФактическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОКонтрагенте.ЗначениеJSONФактическийАдрес);
		
		Если ЗначениеЗаполнено(ГородПоФактическомуАдресу) Тогда
			Результат = ГородПоФактическомуАдресу; 
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ГородПоФактическомуАдресуОрганизации") Тогда
		
		ГородПоФактическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОбОрганизации.ЗначениеJSONФактическийАдрес);
		
		Если ЗначениеЗаполнено(ГородПоФактическомуАдресу) Тогда
			Результат = ГородПоФактическомуАдресу; 
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуКонтрагента") Тогда
		
		ГородПоЮридическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОКонтрагенте.ЗначениеJSONЮридическийАдрес);
		
		Если ЗначениеЗаполнено(ГородПоЮридическомуАдресу) Тогда
			Результат = ГородПоЮридическомуАдресу;
			Если ЭлектронныйФормат Тогда
				ЗначениеПараметра = Результат;
				СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуОрганизации") Тогда
		
		ГородПоЮридическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
			СведенияОбОрганизации.ЗначениеJSONЮридическийАдрес);
		
		Если ЗначениеЗаполнено(ГородПоЮридическомуАдресу) Тогда
			Результат = ГородПоЮридическомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ДатаДоговора") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Дата) Тогда
			Результат = Формат(СведенияОДоговоре.Дата, "ДЛФ=DD");
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;                   
		КонецЕсли;                 
		
		Если ЭлектронныйФормат Тогда   	
			Результат = Формат(СведенияОДоговоре.Дата, "ДЛФ=D");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ДокументУдостоверяющийЛичностьКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Для юридических лиц параметр не применяется, может присутствовать в шаблоне
			// при использовании единого шаблона для юр.лиц и физ.лиц.
			Результат = "";
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ДокументУдостоверяющийЛичность) Тогда
			Результат = СведенияОКонтрагенте.ДокументУдостоверяющийЛичность;
		Иначе
			// Вставляем строку без переносов, чтобы сработало автоперенос в форматированном документе.
			Результат = НСтр("ru = 'Паспорт гражданина РФ, серия %1%, № %2% выдан: %3%, действует до: %4%, %5%, № подр. %6%'");
			ЗначенияСоставногоПараметра.Добавить("____"); 	// серия
			ЗначенияСоставногоПараметра.Добавить("______"); // номер
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // выдан
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // действует до
			ЗначенияСоставногоПараметра.Добавить("_________________________________"); // кем выдан
			ЗначенияСоставногоПараметра.Добавить("_______"); // № подразделения
			
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("ДолжностьРуководителяКонтрагента")) Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителяКонтрагента) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // для любого договора
			Результат = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				СведенияОДоговоре.ДолжностьРуководителяКонтрагента, Падеж, ПустойДоговор);
				
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("ДолжностьРуководителяОрганизации")) Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителя) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
					Строка(СведенияОДоговоре.ДолжностьРуководителя), Падеж, СведенияОДоговоре.ДолжностьРуководителя);
					
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ИНН_КППКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ИНН = СведенияОКонтрагенте.ИНН;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.КПП) Тогда
			КПП = СведенияОКонтрагенте.КПП;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			КПП = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = НСтр("ru = 'ИНН: %1%'");  
		Иначе
			Результат = НСтр("ru = 'ИНН / КПП: %1% / %2%'");
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда 
			СформироватьРезультатЭлектронногоФормата("ИННСт2", ЗначенияСоставногоПараметра,
				ИНН, Результат, ТаблицаСоответствий);
			Результат = НСтр("ru = 'ИНН: %1%%2%%3%'");
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СформироватьРезультатЭлектронногоФормата("КППСт2", ЗначенияСоставногоПараметра,
					КПП, Результат, ТаблицаСоответствий);
				Результат = НСтр("ru = 'ИНН / КПП: %1%%2%%3% / %4%%5%%6%'");
			КонецЕсли;
		Иначе
			ЗначенияСоставногоПараметра.Добавить(ИНН);
			ЗначенияСоставногоПараметра.Добавить(КПП);
		КонецЕсли;
				
	ИначеЕсли ИмяПараметра = Врег("ИНН_КППОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			ИНН = СведенияОбОрганизации.ИНН;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

		Если ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
			КПП = СведенияОбОрганизации.КПП;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			КПП = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = НСтр("ru = 'ИНН: %1%'");
		Иначе
			Результат = НСтр("ru = 'ИНН / КПП: %1% / %2%'");
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда 
			СформироватьРезультатЭлектронногоФормата("ИННСт1", ЗначенияСоставногоПараметра,
				ИНН, Результат, ТаблицаСоответствий);
			Результат = НСтр("ru = 'ИНН: %1%%2%%3%'");
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СформироватьРезультатЭлектронногоФормата("КППСт1", ЗначенияСоставногоПараметра,
					КПП, Результат, ТаблицаСоответствий);
				Результат = НСтр("ru = 'ИНН / КПП: %1%%2%%3% / %4%%5%%6%'");
			КонецЕсли;
		Иначе
			ЗначенияСоставногоПараметра.Добавить(ИНН);
			ЗначенияСоставногоПараметра.Добавить(КПП);
		КонецЕсли;   

	ИначеЕсли ИмяПараметра = Врег("НомерДоговора") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Номер) Тогда
			Результат = СведенияОДоговоре.Номер; 
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ОГРНКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОГРН) Тогда
			ОГРН = СведенияОКонтрагенте.ОГРН;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физлиц ОГРНИП может отсутствовать, если это не ИП, поэтому если не заполнено, то не показываем ничего.
			Результат = "";
		Иначе
			ОГРН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) Тогда
		
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Результат = НСтр("ru = 'ОГРНИП: %1%'");
			Иначе
				Результат = НСтр("ru = 'ОГРН: %1%'");
			КонецЕсли;
			
			Если ЭлектронныйФормат Тогда
				Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					СформироватьРезультатЭлектронногоФормата("ОГРНИПКонтрагента", ЗначенияСоставногоПараметра,
						ОГРН, Результат, ТаблицаСоответствий);
					Результат = НСтр("ru = 'ОГРНИП: %1%%2%%3%'");
				Иначе  
					СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
						ОГРН, Результат, ТаблицаСоответствий);
					Результат = НСтр("ru = 'ОГРН: %1%%2%%3%'");
				КонецЕсли;
			Иначе
				ЗначенияСоставногоПараметра.Добавить(ОГРН);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ОГРНОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			ОГРН = СведенияОбОрганизации.ОГРН;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физлиц ОГРНИП может отсутствовать, если это не ИП, поэтому если не заполнено, то не показываем ничего.
			Результат = "";
		Иначе
			ОГРН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) Тогда
		
			Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Результат = НСтр("ru = 'ОГРНИП: %1%'");
			Иначе
				Результат = НСтр("ru = 'ОГРН: %1%'");
			КонецЕсли;   
			
			Если ЭлектронныйФормат Тогда    
				Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					СформироватьРезультатЭлектронногоФормата("ОГРНИПОрганизации", ЗначенияСоставногоПараметра,
						ОГРН, Результат, ТаблицаСоответствий);
					Результат = НСтр("ru = 'ОГРНИП: %1%%2%%3%'");
				Иначе  
					СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
						ОГРН, Результат, ТаблицаСоответствий);
					Результат = НСтр("ru = 'ОГРН: %1%%2%%3%'");
				КонецЕсли;
			Иначе
				ЗначенияСоставногоПараметра.Добавить(ОГРН);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.ЗаРуководителяКонтрагентаПоПриказу) Тогда
			Результат = СведенияОДоговоре.ЗаРуководителяКонтрагентаПоПриказу;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.ЗаРуководителяПоПриказу) Тогда
			Результат = СведенияОДоговоре.ЗаРуководителяПоПриказу;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ПолноеНаименование) Тогда
			Результат = СведенияОбОрганизации.ПолноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.СокращенноеНаименование) Тогда
			Результат = СведенияОбОрганизации.СокращенноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.Представление) Тогда
			Результат = СведенияОбОрганизации.Представление;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда
			Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СтандартныйПараметр = Ложь;
				ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОФизлица);
  
				СформироватьРезультатЭлектронногоФормата("ФамилияСт1", ЗначенияСоставногоПараметра,
					ФИО.Фамилия, Результат, ТаблицаСоответствий);
				СформироватьРезультатЭлектронногоФормата("ИмяСт1", ЗначенияСоставногоПараметра,
					ФИО.Имя, Результат, ТаблицаСоответствий);
				СформироватьРезультатЭлектронногоФормата("ОтчествоСт1", ЗначенияСоставногоПараметра,
					ФИО.Отчество, Результат, ТаблицаСоответствий);
				Префикс = СтрЗаменить(СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ФИОФизлица, "");
				Подстроки = Новый Массив;
				Если ЗначениеЗаполнено(Префикс) Тогда
					Подстроки.Добавить(Префикс);
				КонецЕсли;
				Подстроки.Добавить("%1%%2%%3%");
				Подстроки.Добавить(" "); 
				Подстроки.Добавить("%4%%5%%6%");
				Подстроки.Добавить(" "); 
				Подстроки.Добавить("%7%%8%%9%");
				
				Результат = СтрСоединить(Подстроки, " ");

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ПолноеНаименование) Тогда
			Результат = СведенияОКонтрагенте.ПолноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.СокращенноеНаименование) Тогда
			Результат = СведенияОКонтрагенте.СокращенноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.Представление) Тогда
			Результат = СведенияОКонтрагенте.Представление;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда 
			
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				СтандартныйПараметр = Ложь;  
				
				ПолноеНаименование = СведенияОКонтрагенте.ПолноеНаименование;
				ВхождениеПрефикса = СтрНайти(Врег(СведенияОКонтрагенте.ПолноеНаименование), "ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ");
				
				Если  ВхождениеПрефикса > 0 Тогда
					ПолноеНаименование = Сред(ПолноеНаименование, ВхождениеПрефикса + 31);
					Префикс = Лев(СведенияОКонтрагенте.ПолноеНаименование, 30);
				КонецЕсли;
				
				ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПолноеНаименование);

				СформироватьРезультатЭлектронногоФормата("ФамилияСт2", ЗначенияСоставногоПараметра,
					ФИО.Фамилия, Результат, ТаблицаСоответствий);
				СформироватьРезультатЭлектронногоФормата("ИмяСт2", ЗначенияСоставногоПараметра,
					ФИО.Имя, Результат, ТаблицаСоответствий);
				СформироватьРезультатЭлектронногоФормата("ОтчествоСт2", ЗначенияСоставногоПараметра,
					ФИО.Отчество, Результат, ТаблицаСоответствий); 
				
				Подстроки = Новый Массив; 
				Если ЗначениеЗаполнено(Префикс) Тогда
					Подстроки.Добавить(Префикс);
				КонецЕсли;
				Подстроки.Добавить("%1%%2%%3%");
				Подстроки.Добавить(" "); 
				Подстроки.Добавить("%4%%5%%6%");
				Подстроки.Добавить(" "); 
				Подстроки.Добавить("%7%%8%%9%");
				
				Результат = СтрСоединить(Подстроки, " ");

			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ПочтовыйАдрес) Тогда
			Результат = СведенияОКонтрагенте.ПочтовыйАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.ПочтовыйАдрес) Тогда
			Результат = СведенияОбОрганизации.ПочтовыйАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ПредставительКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Результат = ЗначениеПараметраПредставительКонтрагента(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно, ЭлектронныйФормат);

	ИначеЕсли ИмяПараметра = Врег("ПредставительОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;

		Результат = ЗначениеПараметраПредставительОрганизации(СведенияОСделке, ЗначенияСоставногоПараметра,
			Успешно, ЭлектронныйФормат);
		
	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("РуководительКонтрагента")) Тогда

		Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительКонтрагента) Тогда

			РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.ПолРуководителяКонтрагента);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОДоговоре.РуководительКонтрагента,
				Падеж,
				ПустойДоговор,
				РуководительКонтрагентаПол);

		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может не быть руководителя, тогда выводим его самого
			ПолФизическогоЛица = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СокрП(СведенияОКонтрагенте.ПолноеНаименование));
			РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(ПолФизическогоЛица);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОКонтрагенте.ПолноеНаименование,
				Падеж,
				СведенияОДоговоре.Владелец,
				РуководительКонтрагентаПол);
			
		Иначе
			
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
			
		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда 
			
			ИменительныйПадеж = 1;
			РодительныйПадеж = 2;

			Если Падеж = ИменительныйПадеж Тогда
				НазваниеПараметра = "ФИОИпСт2";	
			ИначеЕсли Падеж = РодительныйПадеж Тогда
				НазваниеПараметра = "ФИОРпСт2";
			Иначе
				НазваниеПараметра = "ФИОСт2";
			КонецЕсли; 
			
			СтандартныйПараметр = Ложь;
			ЗначениеПараметра = Результат;
			СформироватьРезультатЭлектронногоФормата(НазваниеПараметра, ЗначенияСоставногоПараметра,
				ЗначениеПараметра, Результат, ТаблицаСоответствий);
			
		КонецЕсли;

	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("РуководительОрганизации")) Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Руководитель) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			РуководительПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.РуководительПол);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОДоговоре.РуководительФИО,
				Падеж,
				СведенияОДоговоре.Руководитель,
				РуководительПол);

		Иначе
			
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;

		КонецЕсли;
		
		Если ЭлектронныйФормат Тогда

			ИменительныйПадеж = 1;
			РодительныйПадеж = 2;

			Если Падеж = ИменительныйПадеж Тогда
				НазваниеПараметра = "ФИОИпСт1";
			ИначеЕсли Падеж = РодительныйПадеж Тогда
				НазваниеПараметра = "ФИОРпСт1";
			Иначе
				НазваниеПараметра = "ФИОСт2";
			КонецЕсли;

			СтандартныйПараметр = Ложь;
			ЗначениеПараметра = Результат;
			СформироватьРезультатЭлектронногоФормата(НазваниеПараметра, ЗначенияСоставногоПараметра,
				ЗначениеПараметра, Результат, ТаблицаСоответствий);
			
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СвидетельствоКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Реквизит в справочнике доступен только для ИП
			Результат = "";
		ИначеЕсли НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.ОГРН) Тогда
			// Физлицо может быть частным лицом (не ИП), в таком случае реквизиты свидетельства не выводим
			Результат = "";
		Иначе
			Если ЗначениеЗаполнено(СведенияОКонтрагенте.СвидетельствоСерияНомер) Тогда
				СвидетельствоСерияНомер = СведенияОКонтрагенте.СвидетельствоСерияНомер;
			Иначе
				СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
				Успешно = Ложь;
			КонецЕсли;

			Если ЗначениеЗаполнено(СведенияОКонтрагенте.СвидетельствоДатаВыдачи) Тогда
				ДатаВыдачиСтрокой = Формат(СведенияОКонтрагенте.СвидетельствоДатаВыдачи, "ДЛФ=DD");
			Иначе
				ДатаВыдачиСтрокой = НСтр("ru = '"" __ "" ______________ 20__ г.'");
				Успешно = Ложь;
			КонецЕсли;
			Результат = НСтр("ru = 'Свидетельство о государственной регистрации %1% от %2%'");
			ЗначенияСоставногоПараметра.Добавить(СвидетельствоСерияНомер);
			ЗначенияСоставногоПараметра.Добавить(ДатаВыдачиСтрокой);
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СвидетельствоОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Реквизит в справочнике доступен только для ИП
			Результат = "";
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоСерияНомер) Тогда
				СвидетельствоСерияНомер = СведенияОбОрганизации.СвидетельствоСерияНомер;
			Иначе
				СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
				Успешно = Ложь;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоДатаВыдачи) Тогда
				ДатаВыдачиСтрокой = Формат(СведенияОбОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=DD");
			Иначе
				ДатаВыдачиСтрокой = НСтр("ru = '"" __ "" ______________ 20__ г.'");
				Успешно = Ложь;
			КонецЕсли;
			Результат = НСтр("ru = 'Свидетельство о государственной регистрации %1% от %2%'");
			ЗначенияСоставногоПараметра.Добавить(СвидетельствоСерияНомер);
			ЗначенияСоставногоПараметра.Добавить(ДатаВыдачиСтрокой);
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СловоИменуемоеДляКонтрагента") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИндивидуальныйПредприниматель) Тогда
			ПолФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СведенияОКонтрагенте.ИндивидуальныйПредприниматель, "Пол");
			Если ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ОкончаниеМорфемы = "ый";
			ИначеЕсли ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОкончаниеМорфемы = "ай";
			Иначе
				ОкончаниеМорфемы = "ое (-ый, -ая)";
			КонецЕсли;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ПолФизическогоЛица = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СокрП(СведенияОКонтрагенте.ПолноеНаименование));
			Если ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ОкончаниеМорфемы = "ый";
			ИначеЕсли ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОкончаниеМорфемы = "ая";
			Иначе
				ОкончаниеМорфемы = "ое (-ый, -ая)";
			КонецЕсли;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОкончаниеМорфемы = "ое";
		Иначе
			ОкончаниеМорфемы = "ое (-ый, -ая)";
		КонецЕсли;
		
		Результат = "именуем" + ОкончаниеМорфемы;
		
	ИначеЕсли ИмяПараметра = Врег("СловоИменуемоеДляОрганизации") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИндивидуальныйПредприниматель) Тогда
			ПолФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СведенияОбОрганизации.ИндивидуальныйПредприниматель, "Пол");
			Если ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ОкончаниеМорфемы = "ый";
			ИначеЕсли ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОкончаниеМорфемы = "ая";
			Иначе
				ОкончаниеМорфемы = "ое (-ый, -ая)";
			КонецЕсли;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОкончаниеМорфемы = "ое";
		Иначе
			ОкончаниеМорфемы = "ое (-ый, -ая)";
		КонецЕсли;

		Результат = "именуем" + ОкончаниеМорфемы;
		
	ИначеЕсли ИмяПараметра = Врег("СрокДействияДоговора") Тогда

		Если ЗначениеЗаполнено(СведенияОДоговоре.СрокДействия) Тогда
			Если ЭлектронныйФормат Тогда     
				Результат = Формат(СведенияОДоговоре.СрокДействия, "ДЛФ=D");
			Иначе
				Результат = Формат(СведенияОДоговоре.СрокДействия, "ДЛФ=DD");
			КонецЕсли;
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;                   
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СрокОплатыПоДоговору") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.СрокОплаты) Тогда
			Результат = Формат(СведенияОДоговоре.СрокОплаты, "ЧГ=");
			Если ЭлектронныйФормат Тогда
				ЗначениеПараметра = Результат;
				СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
				СформироватьРезультатЭлектронногоФормата("КодЕдВрем", ЗначенияСоставногоПараметра,
					"359", Результат, ТаблицаСоответствий);
				Результат = "%1%%2%%3% %4%%5%%6%";
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 3);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("СуммаДокумента") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаСНДС) Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаСНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаСНДС) Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаСНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДС") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДСПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДС") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДСПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ТелефонКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Телефоны) Тогда
			Результат = СведенияОКонтрагенте.Телефоны;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ТелефонОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			Результат = СведенияОбОрганизации.Телефоны;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ФаксКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Факс) Тогда
			Результат = СведенияОКонтрагенте.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ФаксОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Факс) Тогда
			Результат = СведенияОбОрганизации.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ФактическийАдрес) Тогда
			Результат = СведенияОКонтрагенте.ФактическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.ФактическийАдрес) Тогда
			Результат = СведенияОбОрганизации.ФактическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ЮридическийАдрес) Тогда
			Результат = СведенияОКонтрагенте.ЮридическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Результат = СведенияОбОрганизации.ЮридическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяПараметра = ВРег("УсловиеОплаты") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДатаОплаты) Тогда
			Результат = СтрШаблон(НСтр("ru = 'не позднее %1'"), Формат(СведенияОДоговоре.ДатаОплаты, "ДЛФ=DD"));
		Иначе
			СрокОплатыПоУмолчанию = 3;
			СрокОплаты =
				?(ЗначениеЗаполнено(СведенияОДоговоре.СрокОплаты), СведенияОДоговоре.СрокОплаты, СрокОплатыПоУмолчанию);
			НадписьДни = ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'дня'"), НСтр("ru = 'дней'"), НСтр("ru = 'дней'"), СрокОплаты);
			Если СведенияОДоговоре.ИмяМакета = "ДоговорПодряда" Тогда
				Результат = НСтр("ru = 'в течение %1 %2 после подписания Сторонами акта сдачи-приемки Работ.'");
			ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорОказанияУслуг" Тогда
				Результат = НСтр("ru = 'не позднее %1 %2 до начала оказания Услуг Исполнителем.'");
			Иначе
				Результат = НСтр("ru = 'в течение %1 %2'");
			КонецЕсли;
			Результат = СтрШаблон(Результат, СрокОплаты, НадписьДни);
		КонецЕсли;
	ИначеЕсли ИмяПараметра = ВРег("ДатаОплатыПоДоговору") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДатаОплаты) Тогда
			Если ЭлектронныйФормат Тогда    
				Результат = Формат(СведенияОДоговоре.ДатаОплаты, "ДЛФ=D");
		Иначе
				Результат = Формат(СведенияОДоговоре.ДатаОплаты, "ДЛФ=DD");
			КонецЕсли;
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДоговора") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.Сумма) Тогда
			
			ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2";
	
			Результат = СокрЛ(Формат(СведенияОДоговоре.Сумма, ФорматнаяСтрока));
			Если ЭлектронныйФормат Тогда
				ЗначениеПараметра = Результат;
				СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
			КонецЕсли;
			Валюта = СведенияОДоговоре.ВалютаВзаиморасчетов;
			Если ЗначениеЗаполнено(Валюта) Тогда
				Результат = Результат + " " + СокрП(Валюта);
				Если ЭлектронныйФормат Тогда
					ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
					ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
					СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
						ЗначениеПараметра, Результат, ТаблицаСоответствий);
					Результат = НСтр("ru = '%1%%2%%3% %4% (Код валюты %5%%6%%7%)'");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДоговораПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.Сумма) Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОДоговоре.Сумма, СведенияОДоговоре.ВалютаВзаиморасчетов);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДоговораБезНДС") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОДоговоре.Сумма - СведенияОДоговоре.СуммаНДС <> 0 Тогда
			
			ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2";
	
			Результат = СокрЛ(Формат(СведенияОДоговоре.Сумма - СведенияОДоговоре.СуммаНДС, ФорматнаяСтрока));
			Если ЭлектронныйФормат Тогда
				ЗначениеПараметра = Результат;
				СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
			КонецЕсли;
            Валюта = СведенияОДоговоре.ВалютаВзаиморасчетов;
			Если ЗначениеЗаполнено(Валюта) Тогда
				Результат = Результат + " " + СокрП(Валюта);
				Если ЭлектронныйФормат Тогда
					ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
					ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
					СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
						ЗначениеПараметра, Результат, ТаблицаСоответствий);  
					Результат = НСтр("ru = '%1%%2%%3% %4% (Код валюты %5%%6%%7%)'");
				КонецЕсли;
			КонецЕсли;

		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДоговораБезНДСПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОДоговоре.Сумма - СведенияОДоговоре.СуммаНДС <> 0 Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОДоговоре.Сумма - СведенияОДоговоре.СуммаНДС, СведенияОДоговоре.ВалютаВзаиморасчетов);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДСДоговора") Тогда
		
		СтандартныйПараметр = Ложь;

		Если ЗначениеЗаполнено(СведенияОДоговоре.СтавкаНДС) Тогда 
			
			Если СведенияОДоговоре.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
				
				ФорматнаяСтрока = "ЧЦ=15; ЧДЦ=2; ЧН=0,00";
				Результат = СокрЛ(Формат(СведенияОДоговоре.СуммаНДС, ФорматнаяСтрока));
				Если ЭлектронныйФормат Тогда
					ЗначениеПараметра = Результат;
					СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
						ЗначениеПараметра, Результат, ТаблицаСоответствий);
				КонецЕсли;
				Валюта = СведенияОДоговоре.ВалютаВзаиморасчетов;
				Если ЗначениеЗаполнено(Валюта) Тогда
					Результат = Результат + " " + СокрП(Валюта);
					Если ЭлектронныйФормат Тогда
						ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
						ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
						СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
							ЗначениеПараметра, Результат, ТаблицаСоответствий);
						Результат = НСтр("ru = '%1%%2%%3% %4% (Код валюты %5%%6%%7%)'");
					КонецЕсли;
				КонецЕсли; 

			Иначе
				Результат = НСтр("ru = 'без налога (НДС)'");
			КонецЕсли;

		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДСДоговораПрописью") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.СтавкаНДС) Тогда
			Если СведенияОДоговоре.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
				Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
					СведенияОДоговоре.СуммаНДС, СведенияОДоговоре.ВалютаВзаиморасчетов);
			Иначе
				Результат = НСтр("ru = 'без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СтавкаНДСДоговора") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.СтавкаНДС) Тогда
			Если СведенияОДоговоре.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОДоговоре.СтавкаНДС);
				Результат = СтрШаблон(НСтр("ru = '%1%%'"), Формат(ПроцентНДС, "ЧДЦ=0; ЧН="));
			Иначе   
				Если ЭлектронныйФормат Тогда
					Результат = НСтр("ru = 'без НДС'");
				Иначе
					Результат = НСтр("ru = 'без налога (НДС)'");
				КонецЕсли;
			КонецЕсли;
		Иначе 
			СтандартныйПараметр = Ложь;

			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СтавкаНДСДоговораПрописью") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.СтавкаНДС) Тогда
			Если СведенияОДоговоре.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОДоговоре.СтавкаНДС);
				Результат = ЧислоПрописью(ПроцентНДС, "Л = ru_RU", НСтр("ru = 'процент,процента,процентов,м,,,,,0'"));
			Иначе
				Результат = НСтр("ru = 'без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаСНДСДоговораПрописью") Тогда
		
		СтандартныйПараметр = Ложь;

		Результат = ЗначениеПараметраСуммаСНДСДоговораПрописью(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);
		
	ИначеЕсли ИмяПараметра = ВРег("ПредметДоговора") Тогда
		
		СтандартныйПараметр = Ложь;

		Если СведенияОДоговоре.ИмяМакета = "ДоговорПодряда" Тогда
			
			Если СведенияОСчетеНаОплату <> Неопределено Тогда
				Условия = НСтр("ru = 'указаны в Приложении № ___, являющемся неотъемлемой частью настоящего Договора'");
				РезультатШаблон = НСтр("ru = 'работу, содержание и объем которой %1'");
			Иначе    
				Условия = "/техническим заданием, проектно-сметной документацией, утвержденной _____, иное/";
				РезультатШаблон = НСтр("ru = 'следующие работы в соответствии с %1 :____________'");
			КонецЕсли;
			Результат = СтрШаблон(РезультатШаблон, Условия);
			
		ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорОказанияУслуг" Тогда
			
			Если СведенияОСчетеНаОплату <> Неопределено Тогда 
				Условия = НСтр("ru = 'определены в Приложении № ___, являющемся неотъемлемой частью настоящего Договора'");
				РезультатШаблон = НСтр("ru = 'услуги (далее - Услуги), вид, содержание и объем которых %1'");
				Результат = СтрШаблон(РезультатШаблон, Условия);
			Иначе
				Результат = НСтр("ru = 'следующие услуги: ____________ (далее - Услуги)'");
			КонецЕсли;   
			
		ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорПоставки" Тогда
			
			Если СведенияОСчетеНаОплату <> Неопределено Тогда
				Условия = НСтр("ru = 'указаны в Приложении №___, являющемся неотъемлемой частью настоящего Договора'");
				РезультатШаблон = НСтр("ru = 'продукцию, вид, количество, ассортимент, комплектность, характеристики, цена и иные данные которой %1'");
				Результат = СтрШаблон(РезультатШаблон, Условия);
			Иначе
				Результат = НСтр("ru = 'продукцию в следующем ассортименте: ____________'");
			КонецЕсли;    
	
		Иначе
			Результат = НСтр("ru = 'продукцию / работы / услуги ____________'");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = ВРег("ИнформацияПоСтоимостиДоговора") Тогда   
								
		Если ЭлектронныйФормат Тогда
			
			СтандартныйПараметр = Ложь;

			Результат = ЗначениеПараметраСуммаСНДСДоговораЭлектронныйФормат(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);
			
		Иначе
			
			Если ЗначениеЗаполнено(СведенияОДоговоре.Сумма) Тогда
				ИнформацияОСтоимости = ЗначениеПараметраСуммаСНДСДоговораПрописью(СведенияОСделке,
					ЗначенияСоставногоПараметра, Успешно);
			Иначе  
				ИнформацияОСтоимости = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			КонецЕсли;

			РезультатШаблон = НСтр("ru = 'составляет %1'");

			Если СведенияОСчетеНаОплату <> Неопределено Тогда 
			
				Если СведенияОДоговоре.ИмяМакета = "ДоговорПодряда" Тогда
					ИнформацияОСтоимости = НСтр("ru = 'Приложении № ___, являющемся неотъемлемой частью настоящего Договора'");
					РезультатШаблон = НСтр("ru = 'определяется в соответствии со Сметой, содержащейся в %1'");
				ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорОказанияУслуг" Тогда
					ИнформацияОСтоимости = НСтр("ru = 'Приложению № ___, являющемуся неотъемлемой частью настоящего Договора'");
					РезультатШаблон = НСтр("ru = 'определяется согласно %1'");
				Иначе
					ИнформацияОСтоимости = НСтр("ru = 'Приложении № ___, являющемся неотъемлемой частью настоящего Договора'");
					РезультатШаблон = НСтр("ru = 'устанавливается в %1'");
				КонецЕсли;
				
			КонецЕсли;
			
			Результат = СтрШаблон(РезультатШаблон, ИнформацияОСтоимости);

		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = ВРег("ДополнительныеУсловия") Тогда
		
		СтандартныйПараметр = Ложь;
		
		Результат = НСтр("ru = 'характеристикам / требованиям ____________'");

		Если СведенияОДоговоре.ИмяМакета = "ДоговорПодряда" Тогда
			
			Если СведенияОСчетеНаОплату <> Неопределено Тогда
				Условия = НСтр("ru = 'Приложении № ___, являющемся неотъемлемой частью настоящего Договора'");
				РезультатШаблон = НСтр("ru = 'требованиями, содержащимися в %1'");
				Результат = СтрШаблон(РезультатШаблон, Условия);	
			Иначе  
				Результат = НСтр("ru = 'требованиями ____________'");
			КонецЕсли;  

		ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорПоставки" Тогда
			
			Если СведенияОСчетеНаОплату <> Неопределено Тогда
				Результат = НСтр("ru = 'характеристикам, указанным в Приложении № ___ к настоящему Договору'");
			КонецЕсли;
			
		КонецЕсли;

	Иначе
		// Пытаемся найти в таблицах доп. свойств
		СтрокаТаблицы = СведенияОДоговоре.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = СведенияОКонтрагенте.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = СведенияОбОрганизации.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		Если СтрокаТаблицы = Неопределено
			И СведенияОСчетеНаОплату <> Неопределено Тогда
			СтрокаТаблицы = СведенияОСчетеНаОплату.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Результат = ПредставлениеДопСвойства(СтрокаТаблицы);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	КонецЕсли;

	// Для некоторых параметров может быть пустая строка,
	// поэтому проверяем только на Неопределено.
	Если Результат = Неопределено Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
		Успешно = Ложь;
	КонецЕсли;
	
	Если ЭлектронныйФормат И СтандартныйПараметр Тогда
		ЗначениеПараметра = Результат;
		СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Вставляет в форматированный документ текст значения для составного параметра таким образом,
// чтобы оставить выделение только для частей параметра, а поясняющий текст возле них - без выделения.
//
// Параметры:
// 	СтрокаЗначения - Строка - текст значения для вставки. В тексте с помощью % выделены места, 
//							  в которые будут подставляться параметры.
//							  Например, "в лице %1% %2%, действующего(-ей) на основании %3".
//	ЗначенияСоставногоПараметра - Массив - значения отдельных частей параметра в том порядке, как они указаны в СтрокаЗначения.
//	ФорматированныйДокумент - ФорматированныйДокумент - документ, в котором производится замена.
//	ЭлементДокументаСПараметром - ТекстФорматированногоДокумента - элемент форматированного документа,
//								содержащий параметр, который сейчас заменяется на значение.
// 
Функция ВставитьСоставноеЗначение(СтрокаЗначения, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокументаСПараметром) Экспорт
	ДлинаДобавленногоТекста = 0;

	МассивПодстрок 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗначения, "%");
	ЗакладкаКонца 		= ЭлементДокументаСПараметром.ЗакладкаКонца;
	ЦветПоУмолчанию 	= ПечатьДоговоровКлиентСервер.ЦветФонаПоУмолчанию();

	Для Каждого Подстрока Из МассивПодстрок Цикл
	
		ЗаменяемыйТекст = Подстрока;
		СнятьВыделение 	= Истина;
		
		Если ЗначениеЗаполнено(ЗаменяемыйТекст)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(ЗаменяемыйТекст)) Тогда
			НомерПараметра = Число(СокрЛП(ЗаменяемыйТекст));
			Если НомерПараметра <= ЗначенияСоставногоПараметра.Количество() Тогда
				ЗаменяемыйТекст = ЗначенияСоставногоПараметра[НомерПараметра - 1];
				СнятьВыделение = Лев(ЗаменяемыйТекст, 1) <> "_";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке ""%1"" номер параметра %2 превышает количество элементов в массиве ЗначенияСоставногоПараметра'"),
					СтрокаЗначения,
					НомерПараметра);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ФорматированныйДокумент.Вставить(ЗакладкаКонца, ЗаменяемыйТекст, Тип("ТекстФорматированногоДокумента"));
		Если НовыйЭлемент <> Неопределено Тогда // В случае пустых строк элемент документ может не создаваться.
			ДлинаДобавленногоТекста = ДлинаДобавленногоТекста + СтрДлина(ЗаменяемыйТекст);

			// Оставляем исходный шрифт элемента
			Если НовыйЭлемент.Шрифт <> ЭлементДокументаСПараметром.Шрифт Тогда
				НовыйЭлемент.Шрифт = ЭлементДокументаСПараметром.Шрифт;
			КонецЕсли;

			Если СнятьВыделение Тогда
				НовыйЭлемент.ЦветФона 	= ЦветПоУмолчанию;
			Иначе
				НовыйЭлемент.ЦветФона 	= ЭлементДокументаСПараметром.ЦветФона;
			КонецЕсли;
			
			Если СтрНайти(НовыйЭлемент.Текст, "[#") > 0 Или СтрНайти(НовыйЭлемент.Текст, "#]") > 0 Тогда
				НовыйЭлемент.ЦветТекста = ЦветаСтиля.ЦветМеткиСерый;  
				// Для корректного отображения в HTML зададим абсолютное значение
				НовыйЭлемент.Шрифт =  Новый Шрифт(НовыйЭлемент.Шрифт, , 8, Ложь);
			КонецЕсли;
			// Запомним место вставки следующего элемента
			ЗакладкаКонца = НовыйЭлемент.ЗакладкаКонца;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДлинаДобавленногоТекста;

КонецФункции

Функция ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Результат = СсылкаНаОбъект;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентовПрисоединенныеФайлы") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВладелецФайла");
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
		Если МетаданныеОбъекта <> Неопределено Тогда
			Если МетаданныеОбъекта.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ФайлДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентовПрисоединенныеФайлы.ПустаяСсылка();

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ФайлДоговора");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЭлектронныйФорматДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Ложь;

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ЭлектронныйФормат");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НомерИДатаДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата",	'0001-01-01');

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Номер, Дата");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЦветФонаЗаменяемогоПараметра() Экспорт

	// Обращение к цвету фона через ЦветаСтиля.ФонЗаменяемогоПараметра 
	// возвращает цвет, которые не может быть сохранен в HTML (его составляющие RGB = -1).
	// Для возможности сохранения в HTML получаем абсолютный цвет.
	МетаданныеЭлементаСтиля = Метаданные.ЭлементыСтиля.ФонЗаменяемогоПараметра;
	
	Возврат Новый Цвет(МетаданныеЭлементаСтиля.Значение.Красный, 
						МетаданныеЭлементаСтиля.Значение.Зеленый,
						МетаданныеЭлементаСтиля.Значение.Синий);

КонецФункции

// Функция - Выгружает текст договора в xml формат по схеме ON_SODSD_1_999_02_01_01_01
//
// Параметры:
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов - выгружаемый договор.
//  ИдентификаторОсновногоФайла  - Строка - Идентификатор основго файла обмена.
// 
// Возвращаемое значение:
//  ИтоговыйФайл - ДвоичныеДанные, Структура - сведения для выгрузки
//
Функция ЭлектронныйФорматДоговорногоДокумента(ДоговорКонтрагента, ИдентификаторОсновногоФайла) Экспорт
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
						"Дата, Номер, Владелец, ФайлДоговора, Организация, ВидДоговора,
						|Сумма, СуммаВключаетНДС, СуммаНДС, СрокДействия, ВалютаВзаиморасчетов");
	
	ФорматВыгрузки = ФорматXML();
	Данные = ОписаниеДанныхЭлектронногоФормата();

	Если Не ЗначениеЗаполнено(РеквизитыДоговора.ФайлДоговора) Тогда
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Договор не содержит файл текста договора. Сформируйте его по кнопке Печать'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;
	КонецЕсли;
	
	ФорматированныйДокумент = ФорматированныйДокументИзФайла(РеквизитыДоговора.ФайлДоговора);
	
	Если ФорматированныйДокумент = Неопределено Тогда
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Договор не содержит файл текста договора. Сформируйте его по кнопке Печать'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;
	КонецЕсли;
	
	Контрагент = РеквизитыДоговора.Владелец;
	Организация = РеквизитыДоговора.Организация;

	ДатаСреза = ?(ЗначениеЗаполнено(РеквизитыДоговора.Дата), РеквизитыДоговора.Дата, ТекущаяДатаСеанса());

	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаСреза);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСреза);
	ЮридическоеФизическоеЛицоКонтрагента = СведенияОКонтрагенте.ЮридическоеФизическоеЛицо;
	ЮридическоеФизическоеЛицо = СведенияОбОрганизации.ЮридическоеФизическоеЛицо;

	Ошибки = Неопределено;
	
	ПараметрыДоговораЭДО = ТаблицаПараметровЭДО(ФорматированныйДокумент);
	
	ПереченьТиповыхЭлементов = ПереченьТиповыхНаименованийЭлементовДоговоров();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПараметрыДоговораЭДО", ПараметрыДоговораЭДО);
	СтруктураДанных.Вставить("СведенияОКонтрагенте", СведенияОКонтрагенте);
	СтруктураДанных.Вставить("СведенияОбОрганизации", СведенияОбОрганизации);
	СтруктураДанных.Вставить("РеквизитыДоговора", РеквизитыДоговора);
	
	Данные.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	Данные.ЮридическоеФизическоеЛицоКонтрагента = ЮридическоеФизическоеЛицоКонтрагента;
	Данные.НомерДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерДоговора");
	ДатаДоговора = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ДатаДоговора");
	Данные.ДатаДог = Формат(ДатаДоговора, "ДФ=dd.MM.yyyy");
	Данные.ИННСт1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт1");
	Данные.ИННСт2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт2");
	
	// Дополнительно проверим заполненность, на случай, если в форме проверка не осуществилась.
	ТаблицаПроверки = ТаблицаПроверкиРеквизитов(Данные, ФорматВыгрузки);
	Если ТаблицаПроверки.Количество() <> 0 Тогда
		
		// Текст сообщения краткий, так как сюда попадать при корректной работе не должно.
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Не заполнены обязательные для выгрузки реквизиты. Необходимо переформировать текст договора'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;

	КонецЕсли;

	ВерсияСхемыCML = "ON_SODSD_1_999_02_01_01_01";
	
	ТипФайл = СтрШаблон("{%1}.%2", ВерсияСхемыCML, "Файл");
	ТипСодержание = СтрШаблон("{%1}.%2", ВерсияСхемыCML, "Файл.Содержание");
	ТипФрагТиповой = СтрШаблон("{%1}.%2", ВерсияСхемыCML, "Файл.Содержание.ФрагТиповой");
	ТипФрагПроизв = СтрШаблон("{%1}.%2", ВерсияСхемыCML, "Файл.Содержание.ФрагПроизв");
	ТипСтильФрагТекст = СтрШаблон("{%1}.%2", ВерсияСхемыCML, "Файл.Содержание.ФрагПроизв.СтильФрагТекст");
	
	ВерсияПрограммы = ВРег(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40));
	Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипФайл, ВерсияСхемыCML);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторОсновногоФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.01", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ВерсияПрограммы, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПеречня", "1.01", Ложь, Ошибки);

	Содержание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипСодержание, ВерсияСхемыCML);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "КНД", "1175016", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "НаимДок", "Договор", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "НомДок", Данные.НомерДог, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ДатаДок", Данные.ДатаДог, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ДатаИнфСодСд", Формат(ДатаСреза, "ДФ=dd.MM.yyyy"),
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ВремИнфСодСд", Формат(ДатаСреза, "ДФ=ЧЧ.мм.сс"), 
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ПризнИн", "0", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ПорФормДок", "0", Истина, Ошибки);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ИННЮЛСт1", Данные.ИННСт1, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ИННФЛСт1", Данные.ИННСт1, Истина, Ошибки);
	КонецЕсли;

	Если ЮридическоеФизическоеЛицоКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ИННЮЛСт2", Данные.ИННСт2, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Содержание, "ИННФЛСт2", Данные.ИННСт2, Истина, Ошибки);
	КонецЕсли;
	
	ПараметрыДоговораЭДО.Сортировать("НомерФрагмента");
		
	Для Каждого СтрокаФрагмента Из ПараметрыДоговораЭДО Цикл
		
		СтрокаПеречня = ПереченьТиповыхЭлементов.Найти(НРег(СтрокаФрагмента.Параметр), "МеткаДоговора");
		Если СтрокаПеречня = Неопределено Тогда
			СтрокаФрагмента.ТиповойФрагмент = Ложь;
		КонецЕсли;
		
		// Если типовой фрагмент требует числовой тип, попытаемся преобразовать
		// в случае неуспешности запишем фрагмент как нетиповой
		Если СтрокаФрагмента.ТиповойФрагмент И СтрокаПеречня.Тип = "Число" Тогда

			Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаФрагмента.Значение);
			Если Значение = Неопределено Тогда
				СтрокаФрагмента.ТиповойФрагмент = Ложь;
			Иначе
				СтрокаФрагмента.Значение = Формат(Значение, "ЧГ=");	
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаФрагмента.ТиповойФрагмент Тогда
			
			Фрагмент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипФрагТиповой, ВерсияСхемыCML); 
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "НомФраг", СтрокаФрагмента.НомерФрагмента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "ЦифКЭлПер", СтрокаПеречня.Код, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "БукКЭлПер", СтрокаПеречня.Наименование, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "СодержФраг", СтрокаФрагмента.Значение, Истина, Ошибки);

		Иначе
			
			Фрагмент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипФрагПроизв, ВерсияСхемыCML);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "НомФраг", СтрокаФрагмента.НомерФрагмента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "СодержФраг", СтрокаФрагмента.Значение, Истина, Ошибки);
			
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаФрагмента.СсылБлок) Тогда   
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "СсылБлок", СтрокаФрагмента.СсылБлок, Истина, Ошибки);
		КонецЕсли;

		Выравнивание = КодВыравнивания(СтрокаФрагмента.Стиль.Параграф);
		ВидПараграфа = КодПараграфа(СтрокаФрагмента.Стиль.НовыйПараграф, СтрокаФрагмента.Стиль.Параграф);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "МакетВыравн", Выравнивание, Истина, Ошибки);
		Фрагмент.МакетФрагТекст.Добавить(ВидПараграфа);
		Стиль = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипСтильФрагТекст, ВерсияСхемыCML);
		
		Шрифт = СтрокаФрагмента.Стиль.Шрифт;
		МеждустрочныйИнтервал = СтрокаФрагмента.Стиль.Параграф.МеждустрочныйИнтервал;
		
		Если Шрифт.Полужирный Тогда
			ТипШрифта = "bold";
		Иначе
			ТипШрифта = "normal";
		КонецЕсли;
		
		Если Шрифт.Наклонный Тогда
			СтильШрифта = "italic";
		Иначе
			СтильШрифта = "normal";
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "font_family", Шрифт.Имя, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "font_weight", ТипШрифта, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "font_style", СтильШрифта, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "сolor", СтрокаФрагмента.Стиль.ЦветТекста, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "font_size", Формат(Шрифт.Размер, "ЧГ="), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Стиль, "line_height", Формат(МеждустрочныйИнтервал, "ЧГ="), Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Фрагмент, "СтильФрагТекст", Стиль, Истина, Ошибки);
		
		Если СтрокаФрагмента.ТиповойФрагмент Тогда
			Содержание.ФрагТиповой.Добавить(Фрагмент);
		Иначе
			Содержание.ФрагПроизв.Добавить(Фрагмент);
		КонецЕсли;
		
	КонецЦикла;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Содержание", Содержание, Истина, Ошибки);

	Файл.Проверить();
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда   

		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Файл, Ложь, "windows-1251", "Файл");
		ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ВерсияСхемыCML);

		Возврат ДвоичныеДанные; 
		
	Иначе
		
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Возникли ошибки при формировании электронного документа'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;

	КонецЕсли;

КонецФункции

// Функция - инициализирует структуру параметров заполнения электронного договорного документа
//
// Возвращаемое значение:
//  ПараметрыЗаполнения  - Структура:
//  * СодержаниеДоговора - ФорматированнныйДокумент
//  * НомерДоговора      - Строка
//  * ДатаДоговора 		 - Дата
//  * Контрагент         - СправочникСсылка.Контрагенты
//  * ОбъектПечати       - СправочникСсылка.ДоговорыКонтрагентов
//
Функция СтруктураПараметровЗаполнения() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СодержаниеДоговора", "");
	ПараметрыЗаполнения.Вставить("НомерДоговора", "");
	ПараметрыЗаполнения.Вставить("ДатаДоговора", ТекущаяДатаСеанса()); 
	ПараметрыЗаполнения.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ОбъектПечати", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Функция - Выгружает текст договора в xml формат по схеме ON_DOGDOC_1_999_01_01_01_01
//
// Параметр:
//  ДоговорСсылка  - СправочникСсылка.ДоговорыКонтрагентов 
//
// Возвращаемое значение:
//  Данные - структура сведений о файле - см. ОписаниеДанныхЭлектронногоФормата().
//
Функция ДанныеДоговорногоДокумента(ДоговорСсылка) Экспорт

	Данные = ОписаниеДанныхЭлектронногоФормата();
	ФорматВыгрузки = ФорматPDF();
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорСсылка,
						"Дата, Номер, Владелец, ФайлДоговора, Организация, ВидДоговора,
						|Сумма, СуммаВключаетНДС, СуммаНДС, СрокДействия, ВалютаВзаиморасчетов");
	ДатаСреза = ?(ЗначениеЗаполнено(РеквизитыДоговора.Дата), РеквизитыДоговора.Дата, ТекущаяДатаСеанса());
	Контрагент = РеквизитыДоговора.Владелец;  
	Организация = РеквизитыДоговора.Организация;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаСреза);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСреза);
	
	Если Не ЗначениеЗаполнено(РеквизитыДоговора.ФайлДоговора) Тогда
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Договор не содержит файл текста договора. Сформируйте его по кнопке Печать'");
		Данные.СодержаниеОшибок = ТекстОшибки;
	
		Возврат Данные;
	КонецЕсли;

	Если СведенияОКонтрагенте.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Не поддерживается выгрузка договоров с иностранными контрагентами'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;
	КонецЕсли;

	ФорматированныйДокумент = ФорматированныйДокументИзФайла(РеквизитыДоговора.ФайлДоговора);
	Если ФорматированныйДокумент <> Неопределено Тогда
		ПараметрыДоговораЭДО = ТаблицаПараметровЭДО(ФорматированныйДокумент, ФорматВыгрузки);
	КонецЕсли;
	
	ЮридическоеФизическоеЛицоКонтрагента = СведенияОКонтрагенте.ЮридическоеФизическоеЛицо;
	
	ЮридическоеФизическоеЛицо = СведенияОбОрганизации.ЮридическоеФизическоеЛицо;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПараметрыДоговораЭДО", ПараметрыДоговораЭДО);
	СтруктураДанных.Вставить("СведенияОКонтрагенте", СведенияОКонтрагенте);
	СтруктураДанных.Вставить("СведенияОбОрганизации", СведенияОбОрганизации);
	СтруктураДанных.Вставить("РеквизитыДоговора", РеквизитыДоговора);
	
	Данные.НомерДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерДоговора");
	Данные.ДатаДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ДатаДоговора");
	Данные.ИННСт1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт1");
	Данные.ИННСт2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт2");
	Данные.ОГРН_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ОГРН_1");
	Данные.ОГРН_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ОГРН_2");
	
	// Пытаемся получить по меткам реквизитов иностранного банка 
	// Если не найдены, получаем по меткам реквизитов российского банка
	Данные.БИК_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИКИнБанк_1");
	Если Не ЗначениеЗаполнено(Данные.БИК_1) Тогда
		Данные.БИК_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИК_1");
	КонецЕсли;
	Данные.БИК_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИКИнБанк_2");
	Если Не ЗначениеЗаполнено(Данные.БИК_2) Тогда
		Данные.БИК_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИК_2");
	КонецЕсли;
	Данные.КорСчет_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчетИнБанк_1");
	Если Не ЗначениеЗаполнено(Данные.КорСчет_1) Тогда
	Данные.КорСчет_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчет_1");
	КонецЕсли;
	Данные.КорСчет_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчетИнБанк_2");
	Если Не ЗначениеЗаполнено(Данные.КорСчет_2) Тогда
		Данные.КорСчет_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчет_2");
	КонецЕсли;
	Данные.НомерСчета_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомСчетаИнБанк_1");
	Если Не ЗначениеЗаполнено(Данные.НомерСчета_1) Тогда
		Данные.НомерСчета_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерСчета_1");
	КонецЕсли;
	Данные.НомерСчета_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомСчетаИнБанк_2");
	Если Не ЗначениеЗаполнено(Данные.НомерСчета_2) Тогда
		Данные.НомерСчета_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерСчета_2");
	КонецЕсли;
	Данные.НаимБанк_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимИнБанк_1");
	Если Не ЗначениеЗаполнено(Данные.НомерСчета_1) Тогда
		Данные.НаимБанк_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимБанк_1");
	КонецЕсли;
	Данные.НаимБанк_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимИнБанк_2");
	Если Не ЗначениеЗаполнено(Данные.НомерСчета_1) Тогда
		Данные.НаимБанк_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимБанк_2");
	КонецЕсли;
	Данные.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	Данные.ЮридическоеФизическоеЛицоКонтрагента = ЮридическоеФизическоеЛицоКонтрагента;

	// Дополнительно проверим заполненность, на случай, если в форме проверка не осуществилась.
	ТаблицаПроверки = ТаблицаПроверкиРеквизитов(Данные, ФорматВыгрузки);
	Если ТаблицаПроверки.Количество() <> 0 Тогда
		
		// Текст сообщения краткий, так как сюда попадать при корректной работе не должно.
		Данные.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Не заполнены обязательные для выгрузки реквизиты. Необходимо переформировать текст договора'");
		Данные.СодержаниеОшибок = ТекстОшибки;
		
		Возврат Данные;

	КонецЕсли;
	
	// Далее можно заполнить остальные реквизиты
	
	Данные.ВидДоговора = РеквизитыДоговора.ВидДоговора;
	Данные.Организация = Организация;
	Данные.Контрагент = Контрагент;
	Данные.СведенияОбОрганизации = СведенияОбОрганизации;
	Данные.СведенияОКонтрагенте = СведенияОКонтрагенте;
	
	Данные.КПП_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КПП_1");
	Данные.КПП_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КПП_2");
	Данные.АдрТекст_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "АдрТекст_1");
	Данные.АдрТекст_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "АдрТекст_2");
	Данные.Тлф_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "Тлф_1");
	Данные.Тлф_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "Тлф_2");
	Данные.ЭлПочта_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ЭлПочта_1");
	Данные.ЭлПочта_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ЭлПочта_2");
	Данные.СуммаВключаетНДС = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "СуммаВключаетНДС");
	Данные.СтТовУчНалВсегоДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "СтТовУчНалВсегоДог_КодОКВ");
	Данные.СумНалВсегоДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "СумНалВсегоДог_КодОКВ");
	Если Не ЗначениеЗаполнено(Данные.СумНалВсегоДог) Тогда
		Данные.СумНалВсегоДог = 0;
	КонецЕсли;
	Данные.СтТовБезНДСВсегоДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "СтТовБезНДСВсегоДог_КодОКВ");
	Если Не ЗначениеЗаполнено(Данные.СтТовБезНДСВсегоДог) Тогда
		Данные.СтТовБезНДСВсегоДог = 0;
	КонецЕсли;   
	Если Не ЗначениеЗаполнено(Данные.СтТовУчНалВсегоДог) Тогда
		Если Данные.СтТовБезНДСВсегоДог <> 0 Тогда
			СуммаПоДоговору = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Данные.СтТовБезНДСВсегоДог) +
				СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Данные.СумНалВсегоДог);
			Данные.СтТовУчНалВсегоДог = Формат(СуммаПоДоговору, "ЧГ=");
		Иначе
			Данные.СтТовУчНалВсегоДог = 0;
		КонецЕсли;
	КонецЕсли;

	Данные.КодОКВ = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КодОКВ");
	Данные.ДатаОкон = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ДатаОкон");

	Возврат Данные;
	
КонецФункции

// Функция возвращает Форматированный документ из двоичных данных файла договора
//
// Параметр:
//	ФайлДоговора - СправочникСсылка.ДоговорыКонтрагентовПрисоединенныеФайлы - файл договора  
//
// Возвращаемое значение:
//  ФорматированныйДокумент - ФорматированныйДокумент - полученный форматированный документ.
//
Функция ФорматированныйДокументИзФайла(ФайлДоговора) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;

	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлДоговора);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ПотокДвоичныхДанных = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	
	ТекстовыйДокументHTML = Новый ТекстовыйДокумент;
	ТекстовыйДокументHTML.Прочитать(ПотокДвоичныхДанных, КодировкаТекста.UTF8);

	ФорматированныйДокумент.УстановитьHTML(ТекстовыйДокументHTML.ПолучитьТекст(), Новый Структура());
	УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Возврат ФорматированныйДокумент;
	
КонецФункции

// Процедура читает данные по схеме ON_SODSD_1_999_02_01_01_01
//
//  ДанныеXDTO - ОбъектXDTO
//  ДокументУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                  прикреплен к электронному документу.  
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура ПрочитатьДоговорныйДокументXML(ДанныеXDTO, ДокументУчета, ОписаниеОшибки) Экспорт

	ТаблицаФрагментов = Новый ТаблицаЗначений;
	ТаблицаФрагментов.Колонки.Добавить("НомерФрагмента", Новый ОписаниеТипов("Строка"));
	ТаблицаФрагментов.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаФрагментов.Колонки.Добавить("СсылкаНаФрагмент", Новый ОписаниеТипов("Строка"));
	ТаблицаФрагментов.Колонки.Добавить("КодТиповогоФрагмента", Новый ОписаниеТипов("Строка"));
	ТаблицаФрагментов.Колонки.Добавить("НаименованиеТиповогоФрагмента", Новый ОписаниеТипов("Строка"));
	
	ДатаДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ДатаДок");
	ДатаДоговора = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаДоговора);
	НомерДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.НомДок");
	
	ИННСт2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ИННЮЛСт2");
	Если ИННСт2 = Неопределено Тогда 
		ИННСт2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ИННФЛСт2");
	КонецЕсли;
	
	ИННСт1 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ИННЮЛСт1");
	Если ИННСт1 = Неопределено Тогда 
		ИННСт1 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ИННФЛСт1");
	КонецЕсли;
	
	ПроизвольныеФрагменты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ФрагПроизв",, Истина);
	Если ПроизвольныеФрагменты = Неопределено Тогда
		ПроизвольныеФрагменты = Новый Массив;
	КонецЕсли;

	Для Каждого Фрагмент Из ПроизвольныеФрагменты Цикл
		ДобавитьСтрокуТаблицыФрагментов(ТаблицаФрагментов, Фрагмент);
	КонецЦикла;
	
	ТиповыеФрагменты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Содержание.ФрагТиповой",, Истина);
	Если ТиповыеФрагменты = Неопределено Тогда
		ТиповыеФрагменты = Новый Массив;
	КонецЕсли;

	Для Каждого Фрагмент Из ТиповыеФрагменты Цикл
		ДобавитьСтрокуТаблицыФрагментов(ТаблицаФрагментов, Фрагмент);
	КонецЦикла;
	
	СоответствиеПараметров = СоответствиеПараметровРеквизитам();
	
	КППСт1 = ЗначениеЭлементаСтороныДоговора(ТаблицаФрагментов, "ИННСт1", СоответствиеПараметров["КПП"]);
	КППСт2 = ЗначениеЭлементаСтороныДоговора(ТаблицаФрагментов, "ИННСт2", СоответствиеПараметров["КПП"]);

	Организация = Неопределено;
	Контрагент  = Неопределено;
	
	СтруктураПараметровПроверки = Новый Структура("ИННСт1, ИННСт2, КППСт1, КППСт2");
	СтруктураПараметровПроверки.ИННСт1 = ИННСт1;
	СтруктураПараметровПроверки.ИННСт2 = ИННСт2;
	СтруктураПараметровПроверки.КППСт1 = СтрЗаменить(КППСт1, "_", "");
	СтруктураПараметровПроверки.КППСт2 = СтрЗаменить(КППСт2, "_", "");
	
	СторонаКонтрагента = "1";
	ЕстьОшибки = ЕстьОшибкиПроверкиСодержимого(СтруктураПараметровПроверки, Организация, Контрагент, СторонаКонтрагента);
	ПараметрИННКонтрагента = "ИННСт" + СторонаКонтрагента;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ВалютаДоговора(ТаблицаФрагментов);  
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком; 
	СуммаБезНДС = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["СуммаБезНДС"]);
	СуммаНДС = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["СуммаНДС"]);
	Сумма = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["Сумма"]);
	СтавкаНДС = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["СтавкаНДС"]);
	СрокДействия = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["СрокДействия"]);
	СрокОплаты = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["СрокОплаты"]);
	ДатаОплаты = ЗначениеТиповогоФрагмента(ТаблицаФрагментов, СоответствиеПараметров["ДатаОплаты"]);
	РуководительКонтрагента = ЗначениеЭлементаСтороныДоговора(ТаблицаФрагментов, ПараметрИННКонтрагента,
		СоответствиеПараметров["РуководительКонтрагента"]);

	ПараметрыДоговора = ПараметрыДоговора();
	ПараметрыДоговора.Организация = Организация;
	ПараметрыДоговора.Владелец = Контрагент;
	ПараметрыДоговора.Валюта = Валюта;
	ПараметрыДоговора.Дата = ДатаДоговора;
	ПараметрыДоговора.Номер = НомерДоговора;
	ПараметрыДоговора.ВидДоговора = ВидДоговора;
	ПараметрыДоговора.Сумма = Сумма;
	ПараметрыДоговора.СуммаБезНДС = СуммаБезНДС;
	Если ЗначениеЗаполнено(Сумма) Тогда
		ПараметрыДоговора.СуммаВключаетНДС = Истина;
	Иначе
		ПараметрыДоговора.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	ПараметрыДоговора.СтавкаНДС = СтавкаНДС;
	ПараметрыДоговора.СуммаНДС = СуммаНДС;
	ПараметрыДоговора.СрокДействия = СрокДействия;
	ПараметрыДоговора.СрокОплаты = СрокОплаты;
	ПараметрыДоговора.ДатаОплаты = ДатаОплаты;
	ПараметрыДоговора.РуководительКонтрагента = РуководительКонтрагента;
	
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументУчета = НайтиДоговорПоПараметрам(ПараметрыДоговора);
	КонецЕсли;
	
	СоздатьОбновитьДоговорПоПараметрам(ПараметрыДоговора, ДокументУчета, ОписаниеОшибки);
	
КонецПроцедуры

// Функция возвращает найденную ссылку в справочнике Договоры контрагентов, 
// если договор найден по параметрам
//
// Параметр:
//	ПараметрыПоиска - Структура - см. ПараметрыДоговора()  
//
// Возвращаемое значение:
//  ДоговорСсылка  - СправочникСсылка.ДоговорыКонтрагентов - найденный договор
//
Функция НайтиДоговорПоПараметрам(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И &УсловиеПоДате
		|	И &УсловиеПоНомеру
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.ПометкаУдаления";
		
	Если ЗначениеЗаполнено(ПараметрыПоиска.Номер) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНомеру", "ДоговорыКонтрагентов.Номер = &Номер");
		Запрос.УстановитьПараметр("Номер", ПараметрыПоиска.Номер);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНомеру", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПоиска.Дата) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате", "ДоговорыКонтрагентов.Дата = &Дата");
		Запрос.УстановитьПараметр("Дата", ПараметрыПоиска.Дата);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате", "Истина");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Владелец", ПараметрыПоиска.Владелец);
	Запрос.УстановитьПараметр("Организация", ПараметрыПоиска.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоговоров = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДоговоров.Следующий() Тогда
		Возврат ВыборкаДоговоров.Договор;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

// Функция - Возвращет результат проверки обязательных реквизитов договорного документа
//
// Параметры:
//  ДоговорКонтрагента  - СправочникСсылка.ДоговорыКонтрагентов        
//  ФорматВыгрузки  - Строка - формат выгрузки    
//  ФорматированныйДокумент  - ФорматированныйДокумент - форматированный документ с текстом договора  
//
// Возвращаемое значение:
//  ТаблицаПроверкиРеквизитов - ТаблицаЗначений -таблица значений со сведениями об ошибках заполнения.
//
Функция ТаблицаПроверкиОбязательныхРеквизитов(ДоговорКонтрагента, ФорматВыгрузки, ФорматированныйДокумент = Неопределено) Экспорт
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
						"Дата, Номер, Владелец, ФайлДоговора, Организация, ВидДоговора,
						|Сумма, СуммаВключаетНДС, СуммаНДС, СрокДействия, ВалютаВзаиморасчетов");
	
	Если ФорматированныйДокумент = Неопределено Тогда 
		
		ФорматированныйДокумент = ФорматированныйДокументИзФайла(РеквизитыДоговора.ФайлДоговора);
		
	КонецЕсли;
	
	Контрагент = РеквизитыДоговора.Владелец; 
	Организация = РеквизитыДоговора.Организация;

	ДатаСреза = ?(ЗначениеЗаполнено(РеквизитыДоговора.Дата), РеквизитыДоговора.Дата, ТекущаяДатаСеанса());

	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаСреза);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСреза);
	ЮридическоеФизическоеЛицоКонтрагента = СведенияОКонтрагенте.ЮридическоеФизическоеЛицо;  
	ЮридическоеФизическоеЛицо = СведенияОбОрганизации.ЮридическоеФизическоеЛицо; 
	
	ПараметрыДоговораЭДО = ТаблицаПараметровЭДО(ФорматированныйДокумент);
	
	ОбязательныеРеквизиты = ОписаниеДанныхЭлектронногоФормата();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПараметрыДоговораЭДО", ПараметрыДоговораЭДО);
	СтруктураДанных.Вставить("СведенияОКонтрагенте", СведенияОКонтрагенте);
	СтруктураДанных.Вставить("СведенияОбОрганизации", СведенияОбОрганизации);
	СтруктураДанных.Вставить("РеквизитыДоговора", РеквизитыДоговора);
	
	ОбязательныеРеквизиты.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	ОбязательныеРеквизиты.ЮридическоеФизическоеЛицоКонтрагента = ЮридическоеФизическоеЛицоКонтрагента;
	ОбязательныеРеквизиты.НомерДог = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерДоговора");
	ДатаДоговора = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ДатаДоговора");
	ОбязательныеРеквизиты.ДатаДог = Формат(ДатаДоговора, "ДФ=dd.MM.yyyy");  
	ОбязательныеРеквизиты.ИННСт1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт1"); 
	ОбязательныеРеквизиты.ИННСт2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ИННСт2"); 
	
	Если ФорматВыгрузки = ФорматXML() Тогда 
		
		Возврат ТаблицаПроверкиРеквизитов(ОбязательныеРеквизиты, ФорматВыгрузки);
		
	Иначе
		
		ОбязательныеРеквизиты.ОГРН_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ОГРН_1");
		ОбязательныеРеквизиты.ОГРН_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "ОГРН_2");
		
		// Пытаемся получить по меткам реквизитов иностранного банка 
		// Если не найдены, получаем по меткам реквизитов российского банка
		ОбязательныеРеквизиты.БИК_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИКИнБанк_1");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.БИК_1) Тогда
			ОбязательныеРеквизиты.БИК_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИК_1");
		КонецЕсли;
		
		ОбязательныеРеквизиты.БИК_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИКИнБанк_2");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.БИК_2) Тогда
			ОбязательныеРеквизиты.БИК_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "БИК_2");
		КонецЕсли; 
		
		ОбязательныеРеквизиты.КорСчет_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчетИнБанк_1");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.КорСчет_1) Тогда
			ОбязательныеРеквизиты.КорСчет_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчет_1");
		КонецЕсли;  
		
		ОбязательныеРеквизиты.КорСчет_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчетИнБанк_2");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.КорСчет_2) Тогда
			ОбязательныеРеквизиты.КорСчет_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "КорСчет_2");
		КонецЕсли;  
		
		ОбязательныеРеквизиты.НомерСчета_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомСчетаИнБанк_1");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.НомерСчета_1) Тогда
			ОбязательныеРеквизиты.НомерСчета_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерСчета_1");
		КонецЕсли; 
		
		ОбязательныеРеквизиты.НомерСчета_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомСчетаИнБанк_2");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.НомерСчета_2) Тогда
			ОбязательныеРеквизиты.НомерСчета_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НомерСчета_2");
		КонецЕсли; 
		
		ОбязательныеРеквизиты.НаимБанк_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимИнБанк_1");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.НомерСчета_1) Тогда
			ОбязательныеРеквизиты.НаимБанк_1 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимБанк_1");
		КонецЕсли;
		
		ОбязательныеРеквизиты.НаимБанк_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимИнБанк_2");
		Если Не ЗначениеЗаполнено(ОбязательныеРеквизиты.НомерСчета_1) Тогда
			ОбязательныеРеквизиты.НаимБанк_2 = ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, "НаимБанк_2");
		КонецЕсли; 
		
		Возврат ТаблицаПроверкиРеквизитов(ОбязательныеРеквизиты, ФорматВыгрузки);

	КонецЕсли;
	
КонецФункции

// Функция - конструктор параметров договора 
//
// Возвращаемое значение:
//  ПараметрыДоговора  - Структура
//
Функция ПараметрыДоговора() Экспорт 
	
	// Параметры из ЭД записываем в строковом виде.
	// Преобразование к типам реквизитов будет при создании элемента справочника.
	ПараметрыДоговора = Новый Структура();
	ПараметрыДоговора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыДоговора.Вставить("Владелец", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыДоговора.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	ПараметрыДоговора.Вставить("Дата", Дата(1, 1, 1));
	ПараметрыДоговора.Вставить("Номер", "");
	ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПараметрыДоговора.Вставить("Сумма", "");
	ПараметрыДоговора.Вставить("СуммаБезНДС", "");
	ПараметрыДоговора.Вставить("СуммаНДС", "");
	ПараметрыДоговора.Вставить("СтавкаНДС", "");
	ПараметрыДоговора.Вставить("СуммаВключаетНДС", Ложь);
	ПараметрыДоговора.Вставить("СрокДействия", "");
	ПараметрыДоговора.Вставить("СрокОплаты", "");
	ПараметрыДоговора.Вставить("ДатаОплаты", "");
	ПараметрыДоговора.Вставить("РуководительКонтрагента", "");

	Возврат ПараметрыДоговора;
	
КонецФункции

// Функция - конструктор Таблицы сообщений 
//
// Возвращаемое значение:
//  ТаблицаСообщений  - ТаблицаЗначений
//
Функция ТаблицаСообщений() Экспорт 

	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("РеквизитДоговорногоДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаСообщений;
	
КонецФункции

// Функция - возвращает имя формата XML 
//
// Возвращаемое значение:
//  Строка  - имя формата
//
Функция ФорматXML() Экспорт
	Возврат "ФорматXML";
КонецФункции

// Функция - возвращает имя формата PDF 
//
// Возвращаемое значение:
//  Строка  - имя формата
//
Функция ФорматPDF()  Экспорт
	Возврат "ФорматPDF";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств)

	Если ТаблицаДопСвойств.Колонки.Найти("НаименованиеСвойства") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДлинаНаименования);
	ТаблицаДопСвойств.Колонки.Добавить("НаименованиеСвойства", ОписаниеТипаСтрока);
	
	МассивСвойств = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДопСвойств, "Свойство");
	РеквизитыСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСвойств, "Наименование");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДопСвойств Цикл
		
		Сведения = РеквизитыСвойств[СтрокаТаблицы.Свойство];
		Если Сведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.НаименованиеСвойства = ВРег(Сведения.Наименование);
	
	КонецЦикла;
	
	ТаблицаДопСвойств.Индексы.Добавить("НаименованиеСвойства");

КонецПроцедуры

// Возвращает текстовое представление для доп. свойства и реквизита.
//
Функция ПредставлениеДопСвойства(СтрокаТаблицыДопСвойств)

	Результат = Неопределено;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДопСвойств.Значение) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(СтрокаТаблицыДопСвойств.Значение) = Тип("Строка") Тогда
		Результат = СокрЛП(СтрокаТаблицыДопСвойств.Значение);

	Иначе
		// Для доп. свойств можно задать собственный формат представления, если он задан, 
		// то используем его.
		
		СведенияОДопСвойстве = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицыДопСвойств.Свойство, "ФорматСвойства");
		Если ЗначениеЗаполнено(СведенияОДопСвойстве.ФорматСвойства) Тогда
			Результат = Формат(СтрокаТаблицыДопСвойств.Значение, СведенияОДопСвойстве.ФорматСвойства);
		Иначе
			Если ТипЗнч(СтрокаТаблицыДопСвойств.Значение) = Тип("Дата")
				И СтрокаТаблицыДопСвойств.Значение = НачалоДня(СтрокаТаблицыДопСвойств.Значение) Тогда
				// Дату, которая указана как начало дня, выводим без времени.
				Результат = Формат(СтрокаТаблицыДопСвойств.Значение, "ДЛФ=DD");
			Иначе
				Результат = СокрЛП(СтрокаТаблицыДопСвойств.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗначениеПараметраПредставительКонтрагента(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно, ЭлектронныйФормат)
	
	КэшДанных = СведенияОСделке.КэшДанных;
	ТаблицаСоответствий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшДанных, "ТаблицаСоответствий");
	
	Если ТаблицаСоответствий = Неопределено Тогда  
		
		ТаблицаСоответствий = ТаблицаСоответствийПараметровИТиповыхНаименований();
		КэшДанных.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
		
	КонецЕсли;

	СведенияОДоговоре = СведенияОСделке.СведенияОДоговоре;
	СведенияОКонтрагенте = СведенияОСделке.СведенияОКонтрагенте;
	
	Успешно1 = Истина;
	Успешно2 = Истина;
	Успешно3 = Истина;
	
	ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // для любого договора
	
	Должность = ЗначениеПараметра("ДолжностьРуководителяКонтрагентаРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
			
	Руководитель = ЗначениеПараметра("РуководительКонтрагентаРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
			
	РуководительКонтрагентаПол = Неопределено;
	Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительКонтрагента) Тогда
		РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.ПолРуководителяКонтрагента);
	ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// У физического лица может не быть руководителя, тогда выводим его самого
		ПолФизическогоЛица = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СокрП(СведенияОКонтрагенте.ПолноеНаименование));
		РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(ПолФизическогоЛица);
	КонецЕсли;
	ТекстСУчетомПола = СклонениеСловаДействующий(РуководительКонтрагентаПол, 2); // родительный падеж
	
	Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяКонтрагента",
		СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
		
	Если ЭлектронныйФормат Тогда
		Результат = "";
		СформироватьРезультатЭлектронногоФормата("ДолжнЛицаРпСт2", ЗначенияСоставногоПараметра,
			Должность, Результат, ТаблицаСоответствий);
		СформироватьРезультатЭлектронногоФормата("ФИОРпСт2", ЗначенияСоставногоПараметра,
			Руководитель, Результат, ТаблицаСоответствий);
		ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
		ЗначенияСоставногоПараметра.Добавить(Основание);
		Результат = НСтр("ru = ', в лице %1%%2%%3% %4%%5%%6%, %7% на основании %8%'");
	Иначе
		Результат = НСтр("ru = ', в лице %1% %2%, %3% на основании %4%'");
		ЗначенияСоставногоПараметра.Добавить(Должность);
		ЗначенияСоставногоПараметра.Добавить(Руководитель);
		ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
		ЗначенияСоставногоПараметра.Добавить(Основание);
	КонецЕсли;
	Успешно = Успешно1 И Успешно2 И Успешно3;

	Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// От имени юридического лица всегда действует какое-то физическое лицо
		Успешно = Успешно1 И Успешно2 И Успешно3;
	Иначе
		Если ЗначениеЗаполнено(Руководитель) 
			И ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", Руководитель, ""))
			И СтрНайти(СведенияОКонтрагенте.ПолноеНаименование, СведенияОДоговоре.РуководительКонтрагента) = 0 Тогда
			// Физическое лицо действует не самостоятельно, а выдало кому-то доверенность.
			Успешно = Успешно1 И Успешно2 И Успешно3;
		Иначе
			// Физическое лицо действует самостоятельно, ничего не показываем.
			Результат = "";
			ЗначенияСоставногоПараметра.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЗначениеПараметраПредставительОрганизации(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно, ЭлектронныйФормат)
	
	КэшДанных = СведенияОСделке.КэшДанных;
	ТаблицаСоответствий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшДанных, "ТаблицаСоответствий");
	
	Если ТаблицаСоответствий = Неопределено Тогда
		
		ТаблицаСоответствий = ТаблицаСоответствийПараметровИТиповыхНаименований();
		КэшДанных.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
		
	КонецЕсли;

	СведенияОбОрганизации = СведенияОСделке.СведенияОбОрганизации;
	СведенияОДоговоре     = СведенияОСделке.СведенияОДоговоре;
	
	Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И СведенияОДоговоре.Руководитель = СведенияОбОрганизации.ИндивидуальныйПредприниматель Тогда
	
		// Индивидуальный предприниматель действует самостоятельно, ничего не показываем.
		ЗначенияСоставногоПараметра.Очистить();
		Возврат "";
		
	КонецЕсли;
		
	Успешно1 = Истина;
	Успешно2 = Истина;
	Успешно3 = Истина;
	
	Должность = ЗначениеПараметра("ДолжностьРуководителяОрганизацииРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
			
	Руководитель = ЗначениеПараметра("РуководительОрганизацииРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
		
	РуководительПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.РуководительПол);
	ТекстСУчетомПола = СклонениеСловаДействующий(РуководительПол, 2); // родительный падеж
	
	Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяОрганизации", 
		СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
		
	Успешно = Успешно1 И Успешно2 И Успешно3;
	
	Если ЭлектронныйФормат Тогда
		Результат = "";	
		СформироватьРезультатЭлектронногоФормата("ДолжнЛицаРпСт1", ЗначенияСоставногоПараметра,
			Должность, Результат, ТаблицаСоответствий); 
		СформироватьРезультатЭлектронногоФормата("ФИОРпСт1", ЗначенияСоставногоПараметра,
			Руководитель, Результат, ТаблицаСоответствий); 
		ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
		ЗначенияСоставногоПараметра.Добавить(Основание);
		Результат = НСтр("ru = ', в лице %1%%2%%3% %4%%5%%6%, %7% на основании %8%'");
	Иначе		
		Результат = НСтр("ru = ', в лице %1% %2%, %3% на основании %4%'");
		ЗначенияСоставногоПараметра.Добавить(Должность);
		ЗначенияСоставногоПараметра.Добавить(Руководитель);
		ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
		ЗначенияСоставногоПараметра.Добавить(Основание);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает слово "действующий" с правильным окончанием, учитывающим пол и падеж.
//
Функция СклонениеСловаДействующий(Пол, Падеж)
	
	Если Не ЗначениеЗаполнено(Пол) Тогда
		Если Падеж = 2 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующего (-ей)'");
		ИначеЕсли Падеж = 3 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующему (-ей)'");
		ИначеЕсли Падеж = 4 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующего (-ую)'");
		ИначеЕсли Падеж = 5 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующим (-ей)'");
		ИначеЕсли Падеж = 6 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующем (-ей)'");
		Иначе
			ТекстСУчетомПола = НСтр("ru = 'действующий (-ая)'");
		КонецЕсли;
	Иначе
		Если Падеж = 2 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующего'"));
		ИначеЕсли Падеж = 3 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующему'"));
		ИначеЕсли Падеж = 4 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующую'"), НСтр("ru = 'действующего'"));
		ИначеЕсли Падеж = 5 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующим'"));
		ИначеЕсли Падеж = 6 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующем'"));
		Иначе
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующая'"), НСтр("ru = 'действующий'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСУчетомПола;
	
КонецФункции

Функция ЗначениеПараметраСуммаСНДСДоговораПрописью(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно)
	
	СведенияОДоговоре = СведенияОСделке.СведенияОДоговоре;
	
	ИменаПараметров = Новый Массив;
	
	Если СведенияОДоговоре.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ИменаПараметров.Добавить("СуммаДоговора");
		ИменаПараметров.Добавить("СуммаДоговораПрописью");
		ИменаПараметров.Добавить("СтавкаНДСДоговора");
		Результат = НСтр("ru = '%1% (%2%) %3%'");
	Иначе
		ПодставлятьСтавкуНДС = СведенияОДоговоре.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Если СведенияОДоговоре.СуммаВключаетНДС Тогда
			ИменаПараметров.Добавить("СуммаДоговора");
			ИменаПараметров.Добавить("СуммаДоговораПрописью");
			Если ПодставлятьСтавкуНДС Тогда
				ИменаПараметров.Добавить("СтавкаНДСДоговора");
				ИменаПараметров.Добавить("СтавкаНДСДоговораПрописью");
				Результат = НСтр("ru = '%1% (%2%), в том числе НДС по ставке %3% (%4%)'");
			Иначе
				ИменаПараметров.Добавить("СуммаНДСДоговора");
				ИменаПараметров.Добавить("СуммаНДСДоговораПрописью");
				Результат = НСтр("ru = '%1% (%2%), в том числе НДС %3% (%4%)'");
			КонецЕсли;
		Иначе
			ИменаПараметров.Добавить("СуммаДоговораБезНДС");
			ИменаПараметров.Добавить("СуммаДоговораБезНДСПрописью");
			Если ПодставлятьСтавкуНДС Тогда
				ИменаПараметров.Добавить("СтавкаНДСДоговора");
				ИменаПараметров.Добавить("СтавкаНДСДоговораПрописью");
				Результат = НСтр("ru = '%1% (%2%), кроме того, НДС по ставке %3% (%4%)'");
			Иначе
				ИменаПараметров.Добавить("СуммаНДСДоговора");
				ИменаПараметров.Добавить("СуммаНДСДоговораПрописью");
				ИменаПараметров.Добавить("СуммаДоговора");
				ИменаПараметров.Добавить("СуммаДоговораПрописью");
				Результат = НСтр("ru = '%1% (%2%), кроме того, НДС %3% (%4%), всего %5% (%6%)'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		УспешноПолучен = Истина;
		ЗначениеПараметра = ЗначениеПараметра(
			ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, УспешноПолучен);
		ЗначенияСоставногоПараметра.Добавить(ЗначениеПараметра);
		Успешно = Успешно И УспешноПолучен;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПараметраСуммаСНДСДоговораЭлектронныйФормат(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно)
	
	СведенияОДоговоре = СведенияОСделке.СведенияОДоговоре;
	
	КэшДанных 				= СведенияОСделке.КэшДанных;
	ТаблицаСоответствий 	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшДанных, "ТаблицаСоответствий");
	
	Если ТаблицаСоответствий = Неопределено Тогда  
		
		ТаблицаСоответствий = ТаблицаСоответствийПараметровИТиповыхНаименований();
		КэшДанных.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
		
	КонецЕсли;
	
	УспешноПолучен = Истина;
	ИменаПараметров = Новый Массив;
	Результат = "";
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2";
	Валюта = СведенияОДоговоре.ВалютаВзаиморасчетов;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;

	
	Если СведенияОДоговоре.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		ЗначениеПараметра = СокрЛ(Формат(СведенияОДоговоре.Сумма, ФорматнаяСтрока));
		СформироватьРезультатЭлектронногоФормата("СуммаДоговора", ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);

		ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
		ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
		СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);

		ЗначениеПараметра = НСтр("ru = 'без НДС'");
		СформироватьРезультатЭлектронногоФормата("СтавкаНДСДоговора", ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);
			Результат = НСтр("ru = 'без НДС'");

		Результат = НСтр("ru = 'составляет %1%%2%%3% %4% (Код валюты %5%%6%%7%) %8%%9%%10%'");

	Иначе
		
		ПодставлятьСтавкуНДС = СведенияОДоговоре.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Если СведенияОДоговоре.СуммаВключаетНДС Тогда
			
			ЗначениеПараметра = СокрЛ(Формат(СведенияОДоговоре.Сумма, ФорматнаяСтрока));
			СформироватьРезультатЭлектронногоФормата("СуммаДоговора", ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);
			
			ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
			ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
			СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
				ЗначениеПараметра, Результат, ТаблицаСоответствий);
			
			Если ПодставлятьСтавкуНДС Тогда 
					
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОДоговоре.СтавкаНДС);
				ЗначениеПараметра = СтрШаблон(НСтр("ru = '%1%%'"), Формат(ПроцентНДС, "ЧДЦ=0; ЧН="));
				СформироватьРезультатЭлектронногоФормата("СтавкаНДСДоговора", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
				
				Результат = НСтр("ru = 'составляет %1%%2%%3% %4% (Код валюты %5%%6%%7%), в том числе НДС по ставке %8%%9%%10%'");
				
			Иначе
				
				ЗначениеПараметра = СокрЛ(Формат(СведенияОДоговоре.СуммаНДС, ФорматнаяСтрока));
				СформироватьРезультатЭлектронногоФормата("СуммаНДСДоговора", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
					
				ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
				ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
				СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
				
				Результат = НСтр("ru = 'составляет %1%%2%%3% %4% (Код валюты %5%%6%%7%), в том числе НДС %8%%9%%10% %11% (Код валюты %12%%13%%14%)'");
				
			КонецЕсли;
			
		Иначе
			
			ЗначениеПараметра = СокрЛ(Формат(СведенияОДоговоре.Сумма - СведенияОДоговоре.СуммаНДС, ФорматнаяСтрока));
			СформироватьРезультатЭлектронногоФормата("СуммаДоговораБезНДС", ЗначенияСоставногоПараметра,
			ЗначениеПараметра, Результат, ТаблицаСоответствий);
			
			ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
			ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
			СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
				ЗначениеПараметра, Результат, ТаблицаСоответствий);   
			
			Если ПодставлятьСтавкуНДС Тогда 
					
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОДоговоре.СтавкаНДС);
				ЗначениеПараметра = СтрШаблон(НСтр("ru = '%1%%'"), Формат(ПроцентНДС, "ЧДЦ=0; ЧН="));
				СформироватьРезультатЭлектронногоФормата("СтавкаНДСДоговора", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
				
				Результат = НСтр("ru = 'составляет %1%%2%%3% %4% (Код валюты %5%%6%%7%), в кроме того, НДС по ставке %8%%9%%10%'");
				
			Иначе
				
				ЗначениеПараметра = СокрЛ(Формат(СведенияОДоговоре.СуммаНДС, ФорматнаяСтрока));
				СформироватьРезультатЭлектронногоФормата("СуммаНДСДоговора", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);
					
				ЗначенияСоставногоПараметра.Добавить(СокрЛП(Валюта));
				ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
				СформироватьРезультатЭлектронногоФормата("Валюта", ЗначенияСоставногоПараметра,
					ЗначениеПараметра, Результат, ТаблицаСоответствий);  
				
				Результат = НСтр("ru = 'составляет %1%%2%%3% %4% (Код валюты %5%%6%%7%), кроме того, НДС %8%%9%%10% %11% (Код валюты %12%%13%%14%)'");
				
			КонецЕсли;

		КонецЕсли; 
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#Область ВыгрузкаЭлектронныхДоговоров 

Функция СоответствиеПараметровРеквизитам()
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("СуммаБезНДС", "3311");
	СоответствиеПараметров.Вставить("СуммаНДС", "3312");
	СоответствиеПараметров.Вставить("Сумма", "3313");
	СоответствиеПараметров.Вставить("СтавкаНДС", "3307");
	СоответствиеПараметров.Вставить("СрокДействия", "2202");
	СоответствиеПараметров.Вставить("СрокОплаты", "3407");
	СоответствиеПараметров.Вставить("ДатаОплаты", "3404");
	СоответствиеПараметров.Вставить("РуководительКонтрагента", "1117");
	СоответствиеПараметров.Вставить("КПП", "1114");
	
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура СформироватьРезультатЭлектронногоФормата(ИмяПараметра, ЗначенияСоставногоПараметра, ЗначениеПараметра, Результат, ТаблицаСоответствий)
	
	НазваниеЭлемента = МаркерЭДО(ИмяПараметра, ТаблицаСоответствий);
	СтруктураПараметраЭДО = СтруктураПараметраЭДО(НазваниеЭлемента, ЗначениеПараметра);
	ЗаполнитьЗначенияПараметровЭДО(ЗначенияСоставногоПараметра, СтруктураПараметраЭДО);
	Результат = "%1%%2%%3%";
	
КонецПроцедуры

Функция ТаблицаСоответствийПараметровИТиповыхНаименований()
	
	Макет = Справочники.ДоговорыКонтрагентов.ПолучитьМакет("СоответствияПараметровИМеток");
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ТиповойЭлемент", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаСоответствий.Колонки.Добавить("Параметр", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаСоответствий.Колонки.Добавить("Родитель", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	КоличествоСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		НоваяСтрока = ТаблицаСоответствий.Добавить();
		
		НоваяСтрока.Параметр          = НРег(СокрЛП(Макет.Область("R" + НомерСтроки + "C1").Текст));
		НоваяСтрока.ТиповойЭлемент = СокрЛП(Макет.Область("R" + НомерСтроки + "C2").Текст);
		СвязанС = СокрЛП(Макет.Область("R" + НомерСтроки + "C3").Текст);    
		
		Если ЗначениеЗаполнено(СвязанС) Тогда  
		
			// Для оптимальной визуализации метки вида ИННСт - оставим только постфикс
			СвязанС = СтрЗаменить(СвязанС, "ИННСт", ""); 
			НоваяСтрока.ТиповойЭлемент = НоваяСтрока.ТиповойЭлемент + "_" + СвязанС;
		
		КонецЕсли; 
		
		Родитель = СокрЛП(Макет.Область("R" + НомерСтроки + "C4").Текст);
		Если ЗначениеЗаполнено(Родитель) Тогда
			НоваяСтрока.Родитель = НРег(Родитель);
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаСоответствий.Индексы.Добавить("Параметр");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

Функция МаркерЭДО(Параметр, ТаблицаСоответствий)
	
	Параметр = НРег(Параметр);
	СтрокаПараметра = ТаблицаСоответствий.Найти(Параметр, "Параметр");
	
	Если СтрокаПараметра = Неопределено Тогда
		Возврат Параметр;
	Иначе
		Возврат СтрокаПараметра.ТиповойЭлемент;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьЗначенияПараметровЭДО(ЗначенияСоставногоПараметра, СтруктураПараметров)
	
	ЗначениеПараметра = ?(ЗначениеЗаполнено(СтруктураПараметров.Значение), СтруктураПараметров.Значение,
						  СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10));
						  
	ЗначенияСоставногоПараметра.Добавить("[#" + СтруктураПараметров.Имя + Символы.НПП);
	ЗначенияСоставногоПараметра.Добавить(ЗначениеПараметра);
	ЗначенияСоставногоПараметра.Добавить("#]");
	
КонецПроцедуры

Функция СтруктураПараметраЭДО(Имя, Значение)
	
	ПараметрИЗначение = Новый Структура("Имя, Значение");
	ПараметрИЗначение.Имя = Имя;
	ПараметрИЗначение.Значение = Значение;
	
	Возврат ПараметрИЗначение;
	
КонецФункции

#Область ПреобразованиеЦвета

// Функция - Цвет в шестнадцатиричный вид.
//
// Параметры:
//  Цвет - Цвет	 - исходный цвет.    
//  СоответствиеЦветов - Соответствие - соответствия цветов и преобразованных в RGB цветов.  
//  ЦветПоУмолчанию - Цвет - цвет по умолчанию.    
// 
// Возвращаемое значение:
//  Строка - строка вида #RRGGBB - где RR - красный, GG - зеленый, BB - синий.
//
Функция ЦветВHex(Знач Цвет, СоответствиеЦветов, ЦветПоУмолчанию)
	
	Если Цвет.Вид = ВидЦвета.Абсолютный Тогда
		
		ПолученныйЦвет = Цвет;
			
	ИначеЕсли Цвет.Вид = ВидЦвета.WindowsЦвет Или Цвет.Вид = ВидЦвета.ЭлементСтиля Или Цвет.Вид = ВидЦвета.WebЦвет Тогда
		
		ПолученныйЦвет = СоответствиеЦветов[Цвет];  
		
		Если ПолученныйЦвет = Неопределено Тогда 
			
			ПотокВПамяти = Новый ПотокВПамяти();

			ТабДокумент = Новый ТабличныйДокумент;
			ТабДокумент.Область(1, 1, 1, 1).ЦветФона = Цвет;
			ТабДокумент.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.ODS);

			ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);

			ТабДокумент.Прочитать(ПотокВПамяти,, ТипФайлаТабличногоДокумента.ODS);
			ПолученныйЦвет = ТабДокумент.Область(1, 1, 1, 1).ЦветФона;
            СоответствиеЦветов.Вставить(Цвет, ПолученныйЦвет);   
			ПотокВПамяти.Закрыть();  
				
		КонецЕсли;
		
	Иначе
			
		ПолученныйЦвет = ЦветПоУмолчанию;
		
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПреобразованиеИзДесятиричнойСистемы(ПолученныйЦвет.Красный), 2)
		    + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПреобразованиеИзДесятиричнойСистемы(ПолученныйЦвет.Зеленый), 2)
		    + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПреобразованиеИзДесятиричнойСистемы(ПолученныйЦвет.Синий), 2);

	Возврат "#" + Результат;
	
КонецФункции

// Конвертация из 10-чной в любую систему счисления.
//
// Параметры:
//	Значение - Строка,Число - исходное значение.
//	Нотация - Число - основание системы счисления.
//
// Возвращаемое значение:
//	Строка - значение в нужной системе счисления.
//
Функция ПреобразованиеИзДесятиричнойСистемы(Знач Значение = 0, Знач Нотация = 16)
	
	Если Нотация <= 0 Тогда Возврат("") КонецЕсли;
	Значение = Число(Значение);
	Если Значение <= 0 Тогда Возврат("0") КонецЕсли;
	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение / Нотация);		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Формирует структуру имен параметров банковских реквизитов.
//
// Параметры:
//  БИК      - Строка - БИК банка для определения признака Иностранный банк.
//  НомерСтороны - Строка  - номер стороны участника договора.
//
// Возвращаемое значение:
//  Имена - Структура:
//  * НомерСчета - Строка
//  * БИК      	 - Строка
//  * НаимБанк   - Строка
//  * КорСчет    - Строка
// 
Функция ИменаПараметровБанковскихРеквизитов(БИК, НомерСтороны) 
	
	Имена = Новый Структура();
	Имена.Вставить("НомерСчета", "НомерСчетаСт" + НомерСтороны);
	Имена.Вставить("БИК", "БИКСт" + НомерСтороны);
	Имена.Вставить("НаимБанк", "НаимБанкСт" + НомерСтороны);
	Имена.Вставить("КорСчет", "КорСчетСт" + НомерСтороны);
	
	Банк = Справочники.Банки.НайтиБанкТолькоПоБИК(БИК);
	
	Если ЗначениеЗаполнено(Банк) Тогда 
		
		Если Банк.Страна <> Справочники.СтраныМира.Россия Тогда
		
			Имена.НомерСчета = "НомСчетаИнБанкСт" + НомерСтороны;
			Имена.БИК = "БИКИнБанкСт" + НомерСтороны;
			Имена.НаимБанк = "НаимИнБанкСт" + НомерСтороны;
			Имена.КорСчет = "КорСчетИнБанкСт" + НомерСтороны;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат  Имена;
	
КонецФункции

// Процедура разбирает текст договора и сохраняет параметры и их значения в таблицу
//
// Параметр:
//	ФорматированныйДокумент - ФорматированныйДокумент, которые необходимо разобрать 
// 
// Возвращаемое значение:
//	ТаблицаФрагментов - ТаблицаЗначений.
//
Функция ТаблицаПараметровЭДО(ФорматированныйДокумент, ФорматВыгрузки = "")

	СчетчикПроизвольныхФрагментов = 1;
	НачатоЧтениеПараметра = Ложь;
	ПредыдущийНачалоПараграфа = Истина;
	НачалоПараграфаПараметра = Истина;
	ТекстПараметраЭДО = "";
	ТекстНетиповогоЭлементаЭДО = "";
	ПредыдущийПереводСтроки = Ложь;
	ПереводСтроки = Ложь;
	ПредыдущийПараграф = Неопределено;
	ПредыдущийШрифт = Неопределено;
	ПредыдущийЦветТекста = Неопределено;
	ПредыдущийЦветФона = Неопределено;
	СоответствиеЦветов = Новый Соответствие;
	ЦветПоУмолчанию	 = Новый Цвет(0, 0, 0); 
	ЦветФонаПоУмолчанию = Новый Цвет(255, 255, 255);
	
	ТаблицаФрагментов = НоваяТаблицаПараметров();

	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
	
		// Для пустого параграфа добавляем символы НПП для корректного форматирования в html
		Если Параграф.Элементы.Количество() = 0 Тогда
		
			ФорматированныйДокумент.Вставить(Параграф.ЗакладкаКонца, Символы.НПП, Тип("ТекстФорматированногоДокумента"));
		
		КонецЕсли;
		
		Для Каждого ЭлементДокумента Из Параграф.Элементы Цикл
		
			// Перевод строки пропускаем, запоминаем для оформления форматирования последующего элемента
			Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
				
				ПереводСтроки = ТипЗнч(ЭлементДокумента) = Тип("ПереводСтрокиФорматированногоДокумента");
				Продолжить;
				
			КонецЕсли;

			ИмяПараметра = СокрЛП(ЭлементДокумента.Текст);
			
			// Авто цвета приводим к RGB
			Если ЭлементДокумента.ЦветТекста.Вид = ВидЦвета.АвтоЦвет Тогда
				ЦветТекста = ЦветПоУмолчанию;    
			Иначе
				ЦветТекста = ЭлементДокумента.ЦветТекста;
			КонецЕсли; 
			
			ЦветТекста = ЦветВHex(ЦветТекста, СоответствиеЦветов, ЦветПоУмолчанию);

			Если ЭлементДокумента.ЦветФона.Вид = ВидЦвета.АвтоЦвет Тогда
				ЦветФона = ЦветФонаПоУмолчанию; 
			Иначе
				ЦветФона = ЭлементДокумента.ЦветФона;
			КонецЕсли;
			
			ЦветФона = ЦветВHex(ЦветФона, СоответствиеЦветов, ЦветПоУмолчанию);

			// Авто шрифт
			Если ЭлементДокумента.Шрифт.Вид = ВидШрифта.АвтоШрифт Тогда
				
				ИмяШрифта	 = ?(ЗначениеЗаполнено(ЭлементДокумента.Шрифт.Имя), ЭлементДокумента.Шрифт.Имя, "Arial");
				РазмерШрифта = ?(ЭлементДокумента.Шрифт.Размер = -1, 13, ЭлементДокумента.Шрифт.Размер);
				Шрифт 		 = Новый Шрифт(ИмяШрифта, РазмерШрифта, ЭлементДокумента.Шрифт.Полужирный,
							  ЭлементДокумента.Шрифт.Наклонный, ЭлементДокумента.Шрифт.Подчеркивание,
							  ЭлементДокумента.Шрифт.Зачеркивание, ЭлементДокумента.Шрифт.Масштаб);
			Иначе
				
				Шрифт = ЭлементДокумента.Шрифт;
				
			КонецЕсли;
			
			// Если элемент начинается со служебной открывающей метки, то записываем предыдущий фрагмент
			// и добавляем типовой фрагмент
			Если Лев(ИмяПараметра, 2) = "[#" Тогда
				
				Если ТекстНетиповогоЭлементаЭДО <> "" Тогда
					
					СНовойСтроки   = ПредыдущийНачалоПараграфа Или ПредыдущийПереводСтроки; 
					СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
						ПредыдущийПараграф, СНовойСтроки);
						
					СтрокаТаблицы = ТаблицаФрагментов.Добавить();
					СтрокаТаблицы.Параметр = "ПроизвФраг" + СчетчикПроизвольныхФрагментов;
					СтрокаТаблицы.Значение = ТекстНетиповогоЭлементаЭДО;
					СтрокаТаблицы.Стиль	 = СтруктураСтиля;
					СтрокаТаблицы.ТиповойФрагмент = Ложь;
					СтрокаТаблицы.НомерФрагмента = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;

					ТекстНетиповогоЭлементаЭДО = "";
					СчетчикПроизвольныхФрагментов = СчетчикПроизвольныхФрагментов + 1;
					ПредыдущийНачалоПараграфа = Параграф <> ПредыдущийПараграф;

					
				ИначеЕсли НачатоЧтениеПараметра И ТекстПараметраЭДО <> "" Тогда
					
					// Если была открывающая метка, но удалили закрывающую 
					СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
									 				ПредыдущийПараграф, НачалоПараграфаПараметра);
					
					СтрокаТаблицы.Значение = ТекстПараметраЭДО;
					СтрокаТаблицы.Стиль = СтруктураСтиля;
					СтрокаТаблицы.ТиповойФрагмент = Истина;
					СтрокаТаблицы.НомерФрагмента  = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;
					
					ТекстПараметраЭДО = "";
					НачатоЧтениеПараметра = Ложь;
					ПредыдущийШрифт = Неопределено;
					ПредыдущийНачалоПараграфа = Ложь;

				КонецЕсли;
				
				Параметр = Сред(ИмяПараметра, 3);
				СтрокаТаблицы = ТаблицаФрагментов.Добавить();
				СтрокаТаблицы.Параметр = СтрЗаменить(Параметр, Символы.НПП, "");
				НачатоЧтениеПараметра = Истина;  
				НачалоПараграфаПараметра = Параграф <> ПредыдущийПараграф; 
				
			// Если элемент начинается со служебной закрывающей метки - чтение значения параметра окончено.
			// Записываем параметры типового фрагмента
			ИначеЕсли ИмяПараметра = "#]" И НачатоЧтениеПараметра Тогда
				
				СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
									 			ПредыдущийПараграф, НачалоПараграфаПараметра);
												
				СтрокаТаблицы.Значение = ТекстПараметраЭДО;
				СтрокаТаблицы.Стиль = СтруктураСтиля;
				СтрокаТаблицы.ТиповойФрагмент = Истина; 
				СтрокаТаблицы.НомерФрагмента = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;
				
				ТекстПараметраЭДО = "";
				НачатоЧтениеПараметра = Ложь;
				ПредыдущийШрифт = Неопределено;
				ПредыдущийНачалоПараграфа = Ложь;
				
			// Продолжается чтение значения типового параметра
			ИначеЕсли НачатоЧтениеПараметра Тогда
				
				ТекстПараметраЭДО = ТекстПараметраЭДО + ЭлементДокумента.Текст;
				
			// Нетиповой фрагмент записывается в случае, если сменилось форматирование текста
			Иначе
				
				ЕстьТекст = ЗначениеЗаполнено(СокрЛП(ТекстНетиповогоЭлементаЭДО));
				СменаПараграфа = (ПредыдущийШрифт <> Неопределено) И Параграф <> ПредыдущийПараграф;
				СНовойСтроки = ПредыдущийНачалоПараграфа Или ПредыдущийПереводСтроки;
				СменаФорматирования = (ПредыдущийШрифт <> Неопределено)  И (Шрифт <> ПредыдущийШрифт 
									  Или ЦветТекста <> ПредыдущийЦветТекста Или ЦветФона <> ПредыдущийЦветФона);
				СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
								 ПредыдущийПараграф, СНовойСтроки);
				
				Если (ЕстьТекст И СменаФорматирования) Или СменаПараграфа Или ПереводСтроки Тогда
				
					СтрокаТаблицы = ТаблицаФрагментов.Добавить();
					СтрокаТаблицы.Параметр = "ПроизвФраг" + СчетчикПроизвольныхФрагментов;
					СтрокаТаблицы.Значение = ?(ЕстьТекст, ТекстНетиповогоЭлементаЭДО, Символы.НПП);
					СтрокаТаблицы.Стиль = СтруктураСтиля;
					СтрокаТаблицы.ТиповойФрагмент = Ложь; 
	                СтрокаТаблицы.НомерФрагмента = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;

					ТекстНетиповогоЭлементаЭДО 	  = ЭлементДокумента.Текст;
	                СчетчикПроизвольныхФрагментов = СчетчикПроизвольныхФрагментов + 1;
					ПредыдущийНачалоПараграфа 	  = Параграф <> ПредыдущийПараграф;
					
				// Если форматирование неизменно, присоединяем фрагмент к предыдущему тексту
				Иначе    
					
					ТекстНетиповогоЭлементаЭДО = ТекстНетиповогоЭлементаЭДО + ЭлементДокумента.Текст;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПредыдущийПараграф = Параграф;
			ПредыдущийШрифт = Шрифт;
			ПредыдущийЦветТекста = ЦветТекста;
			ПредыдущийЦветФона = ЦветФона;
			ПредыдущийПереводСтроки = ПереводСтроки;
			ПереводСтроки = Ложь;

		КонецЦикла;
		
	КонецЦикла;
	
	//Запишем последний элемент
	Если ТекстНетиповогоЭлементаЭДО <> "" Тогда
		
		СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
									 				ПредыдущийПараграф, ПредыдущийНачалоПараграфа);
													
		СтрокаТаблицы = ТаблицаФрагментов.Добавить();
		СтрокаТаблицы.Параметр = "ПроизвФраг" + СчетчикПроизвольныхФрагментов;
		СтрокаТаблицы.Значение = ТекстНетиповогоЭлементаЭДО;
		СтрокаТаблицы.Стиль = СтруктураСтиля; 
		СтрокаТаблицы.ТиповойФрагмент = Ложь; 
		СтрокаТаблицы.НомерФрагмента = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;
		
	ИначеЕсли НачатоЧтениеПараметра И ТекстПараметраЭДО <> "" Тогда
		
		// Если была открывающая метка, но удалили закрывающую
		СтруктураСтиля = СтильФрагмента(ПредыдущийШрифт, ПредыдущийЦветТекста, ПредыдущийЦветФона,
									 				ПредыдущийПараграф, НачалоПараграфаПараметра);

		СтрокаТаблицы.Значение = ТекстПараметраЭДО;
		СтрокаТаблицы.Стиль = СтруктураСтиля;
		СтрокаТаблицы.ТиповойФрагмент = Истина;
		СтрокаТаблицы.НомерФрагмента  = ТаблицаФрагментов.Индекс(СтрокаТаблицы) + 1;

	КонецЕсли;

	Если ФорматВыгрузки = ФорматPDF() Тогда
		// Для этого формата не нужно преобразование
		Возврат ТаблицаФрагментов;
	КонецЕсли;
	
	ТаблицаСоответствий = ТаблицаСоответствийПараметровИТиповыхНаименований();

	Для Каждого СтрокаТаблицы Из ТаблицаФрагментов Цикл
		
		// Проставляем ссылки не убирая из тегов СсылкБлок
		// так как они могут ссылаться произвольно, не последовательно
		Разделитель = СтрНайти(СтрокаТаблицы.Параметр, "_");
		Если Разделитель > 0 Тогда
			
			ИмяСсылБлок = ПолучитьИмяСсылБлок(ТаблицаСоответствий, СтрокаТаблицы.Параметр, Разделитель);
			НомерСсылБлок = НомерСсылБлок(ТаблицаФрагментов, ИмяСсылБлок);
			Если НомерСсылБлок <> Неопределено Тогда
				СтрокаТаблицы.СсылБлок = НомерСсылБлок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаФрагментов Цикл
		
		// Теги СсылБлок установлены, теперь возможно удалить постфиксы
		// из имен параметров
		Разделитель = СтрНайти(СтрокаТаблицы.Параметр, "_");
		Если Разделитель > 0 Тогда
			СтрокаТаблицы.Параметр = Лев(СтрокаТаблицы.Параметр, Разделитель - 1);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаФрагментов;
	
КонецФункции

Функция НоваяТаблицаПараметров()
	
	ТаблицаФрагментов = Новый ТаблицаЗначений;
	ТаблицаФрагментов.Колонки.Добавить("Параметр", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаФрагментов.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаФрагментов.Колонки.Добавить("Стиль");
	ТаблицаФрагментов.Колонки.Добавить("ТиповойФрагмент", Новый ОписаниеТипов("Булево"));
	ТаблицаФрагментов.Колонки.Добавить("НомерФрагмента", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаФрагментов.Колонки.Добавить("СсылБлок", ОбщегоНазначения.ОписаниеТипаЧисло(6));
	
	Возврат ТаблицаФрагментов;
	
КонецФункции

Функция СтильФрагмента(Шрифт, ЦветТекста, ЦветФона, Параграф, НачатНовыйПараграф)
	
	СтруктураСтиля = Новый Структура();
	СтруктураСтиля.Вставить("Шрифт", Шрифт);
	СтруктураСтиля.Вставить("ЦветТекста", ЦветТекста);
	СтруктураСтиля.Вставить("ЦветФона", ЦветФона);
	СтруктураСтиля.Вставить("Параграф", Параграф);
	СтруктураСтиля.Вставить("НовыйПараграф", НачатНовыйПараграф);
	
	Возврат СтруктураСтиля;
	
КонецФункции

// Получает из таблицы - см. ТаблицаСоответствийПараметровИТиповыхНаименований()
// имя параметра СсылБлок. Если в строке указан родитель, то СсылБлок родителя 
//
// Параметры:
//  Параметр      - Строка - Полное имя параметра.
//  Разделитель - Строка  - вид разделителя имени и СсылБлок.
//
// Возвращаемое значение:
//  ИмяСсылБлок - Строка - имя параметра СсылБлок
//
Функция ПолучитьИмяСсылБлок(ТаблицаСоответствий, Параметр, Разделитель)
	
	ИмяСсылБлок = Сред(Параметр, Разделитель + 1);
	
	СтрокаПараметра = ТаблицаСоответствий.Найти(Параметр, "ТиповойЭлемент"); 
	
	Если СтрокаПараметра <> Неопределено Тогда
		
		Родитель = СтрокаПараметра.Родитель;
		Если ЗначениеЗаполнено(Родитель) Тогда
			СтрокаРодителя = ТаблицаСоответствий.Найти(Родитель, "Параметр");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРодителя <> Неопределено Тогда
		ИмяСсылБлок = СтрокаРодителя.ТиповойЭлемент;
	КонецЕсли;
	
	Возврат ИмяСсылБлок;
	
КонецФункции

Функция НомерСсылБлок(ТаблицаФрагментов, Знач ИмяРеквизита)
	
	// Для краткости меток вместо ИННСт1 и ИННСт2 использовались постфиксы 1, 2
	Если СокрЛП(ИмяРеквизита) = "1" Тогда   
		ИмяРеквизита = "ИННСт1";	
	ИначеЕсли СокрЛП(ИмяРеквизита) = "2" Тогда
		ИмяРеквизита = "ИННСт2";
	КонецЕсли;
	
	СтрокаФрагмента = ТаблицаФрагментов.Найти(ИмяРеквизита, "Параметр");
	
	Если СтрокаФрагмента <> Неопределено Тогда
		Возврат СтрокаФрагмента.НомерФрагмента;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаПроверкиРеквизитов(СтруктураРеквизитов, ФорматВыгрузки)
	
	ТаблицаСообщений = ТаблицаСообщений();
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ИННСт1) Тогда
		
		СтрокаСообщений = ТаблицаСообщений.Добавить();
		СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 1'");
		СтрокаСообщений.Описание = НСтр("ru = 'Заполните ИНН в справочнике Организации и переформируйте текст договора'");
		
	Иначе
		
		Если СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			Если СтрДлина(СтруктураРеквизитов.ИННСт1) <> 10 Тогда
				
				СтрокаСообщений = ТаблицаСообщений.Добавить();
				СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 1'");
				СтрокаСообщений.Описание = НСтр("ru = 'ИНН организации должен содержать 10 символов'");
			 
			КонецЕсли;
			
		Иначе
			
			Если СтрДлина(СтруктураРеквизитов.ИННСт1) <> 12 Тогда
				
				СтрокаСообщений = ТаблицаСообщений.Добавить();
				СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 1'");
				СтрокаСообщений.Описание = НСтр("ru = 'ИНН организации должен содержать 12 символов'");

			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураРеквизитов.ИННСт1) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 1'");
			СтрокаСообщений.Описание = НСтр("ru = 'ИНН организации должен содержать только цифры'");
			
		КонецЕсли;

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ИННСт2) Тогда
		
		СтрокаСообщений = ТаблицаСообщений.Добавить();
		СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 2'");
		СтрокаСообщений.Описание = НСтр("ru = 'Заполните ИНН в справочнике Контрагенты и переформируйте текст договора'");
		
	Иначе
		
		Если СтруктураРеквизитов.ЮридическоеФизическоеЛицоКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			Если СтрДлина(СтруктураРеквизитов.ИННСт2) <> 10 Тогда
				
				СтрокаСообщений = ТаблицаСообщений.Добавить();
				СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 2'");
				СтрокаСообщений.Описание = НСтр("ru = 'ИНН контрагента должен содержать 10 символов'");
			 
			КонецЕсли;
			
		Иначе
			
			Если СтрДлина(СтруктураРеквизитов.ИННСт2) <> 12 Тогда
				
				СтрокаСообщений = ТаблицаСообщений.Добавить();
				СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 2'");
				СтрокаСообщений.Описание = НСтр("ru = 'ИНН контрагента должен содержать 12 символов'");

			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураРеквизитов.ИННСт2) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ИНН стороны 2'");
			СтрокаСообщений.Описание = НСтр("ru = 'ИНН контрагента должен содержать только цифры'");
			
		КонецЕсли;

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.НомерДог) Тогда  
		
		СтрокаСообщений = ТаблицаСообщений.Добавить();
		СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'Номер договора'");
		СтрокаСообщений.Описание = НСтр("ru = 'Заполните номер договора и переформируйте текст договора'");

	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ДатаДог) Тогда
		
		СтрокаСообщений = ТаблицаСообщений.Добавить();
		СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'Дата договора'");
		СтрокаСообщений.Описание = НСтр("ru = 'Заполните дату договора и переформируйте текст договора'");
		
	КонецЕсли;
	
	Если ФорматВыгрузки = ФорматPDF() Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ОГРН_1) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ОГРН стороны 1'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните ОГРН организации и переформируйте текст договора'");

		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ОГРН_2) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'ОГРН стороны 2'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните ОГРН контрагента и переформируйте текст договора'");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета_1) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'Номер счета стороны 1'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните номер банковского счета организации и переформируйте текст договора'"); 
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета_2) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'Номер счета стороны 2'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните номер банковского счета контрагента и переформируйте текст договора'");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.БИК_1) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента = НСтр("ru = 'БИК банка стороны 1'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните БИК банка в банковском счете организации и переформируйте текст договора'");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.БИК_2) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента =  НСтр("ru = 'БИК банка стороны 2'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните БИК банка в банковском счете контрагента и переформируйте текст договора'");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.КорСчет_1) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента =  НСтр("ru = 'Корреспондирующий счет банка стороны 1'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните корреспондирующий счет в банковском счете организации и переформируйте текст договора'");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.КорСчет_2) Тогда
			
			СтрокаСообщений = ТаблицаСообщений.Добавить();
			СтрокаСообщений.РеквизитДоговорногоДокумента =  НСтр("ru = 'Корреспондирующий счет банка стороны 2'");
			СтрокаСообщений.Описание = НСтр("ru = 'Заполните корреспондирующий счет в банковском счете контрагента и переформируйте текст договора'");
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТаблицаСообщений;
	
КонецФункции

Функция ЗначениеПараметраДоговорногоДокумента(СтруктураДанных, ИмяПараметра)
	
	ПараметрыДоговораЭДО = СтруктураДанных.ПараметрыДоговораЭДО;
	СведенияОКонтрагенте = СтруктураДанных.СведенияОКонтрагенте;
	СведенияОбОрганизации = СтруктураДанных.СведенияОбОрганизации;
	РеквизитыДоговора = СтруктураДанных.РеквизитыДоговора;
	
	Если ЗначениеЗаполнено(ПараметрыДоговораЭДО) Тогда
		
		НайденнаяСтрока = ПараметрыДоговораЭДО.Найти(ИмяПараметра, "Параметр");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			// Приведем значение параметра с подчеркиваниями к пустой строке
			ЗначениеПараметра = СтрЗаменить(НайденнаяСтрока.Значение, "_", "");
 
			Если ИмяПараметра = "ДатаДоговора" Тогда
				
				ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ЗначениеПараметра);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				
				Возврат ЗначениеПараметра;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ИмяПараметра = "ИННСт1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.ИНН;
	ИначеЕсли ИмяПараметра = "ИННСт2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.ИНН;
	ИначеЕсли ИмяПараметра = "НомерДоговора" Тогда
		ЗначениеПараметра = РеквизитыДоговора.Номер;
	ИначеЕсли ИмяПараметра = "ДатаДоговора" Тогда
		ЗначениеПараметра = РеквизитыДоговора.Дата;
	ИначеЕсли ИмяПараметра = "КПП_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.КПП;
	ИначеЕсли ИмяПараметра = "КПП_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.КПП;
	ИначеЕсли ИмяПараметра = "ОГРН_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.ОГРН;
	ИначеЕсли ИмяПараметра = "ОГРН_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.ОГРН;
	ИначеЕсли ИмяПараметра = "НомерСчета_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.НомерСчета;
	ИначеЕсли ИмяПараметра = "НомерСчета_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.НомерСчета;
	ИначеЕсли ИмяПараметра = "БИК_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.БИК;
	ИначеЕсли ИмяПараметра = "БИК_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.БИК;
	ИначеЕсли ИмяПараметра = "КорСчет_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.КоррСчет;
	ИначеЕсли ИмяПараметра = "КорСчет_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.КоррСчет;
	ИначеЕсли ИмяПараметра = "НаимБанк_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.Банк;
	ИначеЕсли ИмяПараметра = "НаимБанк_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.Банк;
	ИначеЕсли ИмяПараметра = "АдрТекст_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.ЮридическийАдрес;
	ИначеЕсли ИмяПараметра = "АдрТекст_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.ЮридическийАдрес;
	ИначеЕсли ИмяПараметра = "Тлф_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.Телефоны;
	ИначеЕсли ИмяПараметра = "Тлф_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.Телефоны;
	ИначеЕсли ИмяПараметра = "ЭлПочта_1" Тогда
		ЗначениеПараметра = СведенияОбОрганизации.Email;
	ИначеЕсли ИмяПараметра = "ЭлПочта_2" Тогда
		ЗначениеПараметра = СведенияОКонтрагенте.Email;
	ИначеЕсли ИмяПараметра = "СуммаВключаетНДС" Тогда
		ЗначениеПараметра = РеквизитыДоговора.СуммаВключаетНДС;
	ИначеЕсли ИмяПараметра = "СтТовУчНалВсегоДог" Тогда
		ЗначениеПараметра = РеквизитыДоговора.Сумма;
	ИначеЕсли ИмяПараметра = "СумНалВсегоДог" Тогда
		ЗначениеПараметра = РеквизитыДоговора.СуммаНДС;
	ИначеЕсли ИмяПараметра = "КодОКВ" Тогда
		ЗначениеПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ВалютаВзаиморасчетов, "Код");
	ИначеЕсли ИмяПараметра = "ДатаОкон" Тогда
		ЗначениеПараметра = РеквизитыДоговора.СрокДействия;
	КонецЕсли;
		
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПереченьТиповыхНаименованийЭлементовДоговоров() 
	
	Макет = Справочники.ДоговорыКонтрагентов.ПолучитьМакет("ПереченьТиповыхНаименованийЭлементовДоговоров");
		
	ТаблицаПеречня = Новый ТаблицаЗначений;
	ТаблицаПеречня.Колонки.Добавить("Код",           ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаПеречня.Колонки.Добавить("Наименование",  ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаПеречня.Колонки.Добавить("МеткаДоговора", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаПеречня.Колонки.Добавить("Тип",           ОбщегоНазначения.ОписаниеТипаСтрока(255));

	КоличествоСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		НоваяСтрока = ТаблицаПеречня.Добавить();
		
		НоваяСтрока.Код          = СокрЛП(Макет.Область("R" + НомерСтроки + "C2").Текст);
		НоваяСтрока.Наименование = СокрЛП(Макет.Область("R" + НомерСтроки + "C4").Текст);
		НоваяСтрока.МеткаДоговора = Нрег(СокрЛП(Макет.Область("R" + НомерСтроки + "C1").Текст));
	    НоваяСтрока.Тип = СокрЛП(Макет.Область("R" + НомерСтроки + "C5").Текст);

	КонецЦикла;
	
	ТаблицаПеречня.Индексы.Добавить("МеткаДоговора");
	
	Возврат ТаблицаПеречня;
	
КонецФункции

Функция КодВыравнивания(Параграф)
	
	Выравнивание = Параграф.ГоризонтальноеПоложение;
	
	Если Выравнивание = ГоризонтальноеПоложение.Авто Или Выравнивание = ГоризонтальноеПоложение.Лево Тогда
		Возврат "0";  
	ИначеЕсли Выравнивание = ГоризонтальноеПоложение.Право Тогда
		Возврат "1"; 
	ИначеЕсли Выравнивание = ГоризонтальноеПоложение.Центр Тогда
		Возврат "2";
	Иначе
		Возврат "3";
	КонецЕсли;   
	
КонецФункции

Функция КодПараграфа(НовыйПараграф, Параграф)
	
	Если НовыйПараграф Тогда
		
		Если Параграф.Отступ > 0 Тогда
			Возврат "1";
		Иначе
			Возврат "2";
		КонецЕсли;
		
	Иначе
		
		Возврат "0";
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеДанныхЭлектронногоФормата()
	
	СтруктураДанных = Новый Структура;
	
	// Обязательные реквизиты для ФорматXML и ФорматPDF
	СтруктураДанных.Вставить("ИННСт1", "");
	СтруктураДанных.Вставить("ИННСт2", "");
	СтруктураДанных.Вставить("НомерДог", "");
	СтруктураДанных.Вставить("ДатаДог", Дата(1, 1, 1));
	СтруктураДанных.Вставить("ЮридическоеФизическоеЛицоКонтрагента", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	СтруктураДанных.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	// Обязательные реквизиты для ФорматPDF
	СтруктураДанных.Вставить("ОГРН_1", "");
	СтруктураДанных.Вставить("ОГРН_2", "");
	СтруктураДанных.Вставить("НомерСчета_1", "");
	СтруктураДанных.Вставить("НомерСчета_2", "");
	СтруктураДанных.Вставить("БИК_1", "");
	СтруктураДанных.Вставить("БИК_2", "");
	СтруктураДанных.Вставить("КорСчет_1", "");
	СтруктураДанных.Вставить("КорСчет_2", "");
	
	// Необязательные реквизиты
	СтруктураДанных.Вставить("НаимБанк_1", "");
	СтруктураДанных.Вставить("НаимБанк_2", "");
	СтруктураДанных.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СтруктураДанных.Вставить("СведенияОбОрганизации", Новый Структура());
	СтруктураДанных.Вставить("СведенияОКонтрагенте", Новый Структура());
	СтруктураДанных.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураДанных.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	СтруктураДанных.Вставить("КПП_1", "");
	СтруктураДанных.Вставить("КПП_2", "");
	СтруктураДанных.Вставить("АдрТекст_1", "");
	СтруктураДанных.Вставить("АдрТекст_2", "");
	СтруктураДанных.Вставить("Тлф_1", "");
	СтруктураДанных.Вставить("Тлф_2", "");
	СтруктураДанных.Вставить("ЭлПочта_1", "");
	СтруктураДанных.Вставить("ЭлПочта_2", "");
	СтруктураДанных.Вставить("СуммаВключаетНДС", Ложь);
	СтруктураДанных.Вставить("СтТовУчНалВсегоДог", 0);
	СтруктураДанных.Вставить("СумНалВсегоДог", 0);
	СтруктураДанных.Вставить("СтТовБезНДСВсегоДог", 0);
	СтруктураДанных.Вставить("КодОКВ", "");
	СтруктураДанных.Вставить("ДатаОкон", Дата(1, 1, 1));
	СтруктураДанных.Вставить("ЕстьОшибки", Ложь);
	СтруктураДанных.Вставить("СодержаниеОшибок", "");

	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти 

#Область ЗагрузкаЭлектронныхДоговоров

Процедура СоздатьОбновитьДоговорПоПараметрам(ПараметрыДоговора, ДокументУчета, ОписаниеОшибки) 
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		СправочникОбъект = ДокументУчета.ПолучитьОбъект();
	Иначе
		СправочникОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	КонецЕсли;
	
	СправочникОбъект.Заполнить(ПараметрыДоговора);  
	СуммаСНДС = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыДоговора.Сумма);
	СуммаБезНДС = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыДоговора.СуммаБезНДС);
	СуммаНДС = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыДоговора.СуммаНДС);
	СуммаПоДоговору = ?(СуммаСНДС = 0, СуммаБезНДС + СуммаНДС, СуммаСНДС);
	
	СправочникОбъект.Сумма = СуммаПоДоговору;  
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДатаОплаты) Тогда 
		СправочникОбъект.ДатаОплаты = СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыДоговора.ДатаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДоговора.СрокОплаты) Тогда 
		СправочникОбъект.СрокОплаты = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыДоговора.СрокОплаты);
	КонецЕсли;
	
	СправочникОбъект.УстановленСрокОплаты = ЗначениеЗаполнено(СправочникОбъект.ДатаОплаты);

	Если ЗначениеЗаполнено(ПараметрыДоговора.СрокДействия) Тогда 
		СправочникОбъект.СрокДействия = СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыДоговора.СрокДействия);
	КонецЕсли;
	
	Если ПараметрыДоговора.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		СправочникОбъект.ВалютаВзаиморасчетов = ПараметрыДоговора.Валюта;
		СправочникОбъект.Валютный = Истина;
	КонецЕсли;
	
	Если СуммаНДС = 0 Тогда
		СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
	Иначе 
		РасчетнаяСтавкаНДС = Окр(СуммаНДС * 100 / (СуммаПоДоговору - СуммаНДС));
		СоответствиеСтавокНДС = Новый Соответствие;
		ОбменСКонтрагентамиБП.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрЗаменить(РасчетнаяСтавкаНДС, "%", ""));
	КонецЕсли;

	СправочникОбъект.СуммаНДС = СуммаНДС;
	СправочникОбъект.СуммаВключаетНДС = ПараметрыДоговора.СуммаВключаетНДС;
	СправочникОбъект.СтавкаНДС = СтавкаНДС;
		
	Попытка 
		
		СправочникОбъект.Записать();
		ДокументУчета = СправочникОбъект.Ссылка;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|№ %1 от %2. Организация: %3, контрагент: %4 по причине %5'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СправочникОбъект.Номер, СправочникОбъект.Дата, СправочникОбъект.Организация,
			СправочникОбъект.Владелец, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОписаниеОшибки = ТекстСообщения;
		
	КонецПопытки;

КонецПроцедуры

Процедура ДобавитьСтрокуТаблицыФрагментов(ТаблицаФрагментов, Фрагмент)
	
	СтрокаФрагмента = ТаблицаФрагментов.Добавить();
	НомерФрагмента = Формат(Фрагмент.НомФраг, "ЧГ=");
	СтрокаФрагмента.НомерФрагмента = НомерФрагмента;
	СтрокаФрагмента.Содержание = Фрагмент.СодержФраг;
	
	Если Фрагмент.Свойства().Получить("СсылБлок") <> Неопределено Тогда
		СсылкаНаФрагмент = Формат(Фрагмент.СсылБлок, "ЧГ=");
		СтрокаФрагмента.СсылкаНаФрагмент = СсылкаНаФрагмент;
	КонецЕсли;
	
	Если Фрагмент.Свойства().Получить("ЦифКЭлПер") <> Неопределено Тогда
		СтрокаФрагмента.КодТиповогоФрагмента = Фрагмент.ЦифКЭлПер;
	КонецЕсли;
	
    Если Фрагмент.Свойства().Получить("БукКЭлПер") <> Неопределено Тогда
		СтрокаФрагмента.НаименованиеТиповогоФрагмента = Фрагмент.БукКЭлПер;
	КонецЕсли;
		
КонецПроцедуры

Функция ВалютаДоговора(ТаблицаФрагментов)    
	
	ЦифровойКодПеречняВалюты = "4104";
	СтрокаВалюты = ТаблицаФрагментов.Найти(ЦифровойКодПеречняВалюты, "КодТиповогоФрагмента");
	Если СтрокаВалюты <> Неопределено Тогда 
		КодВалюты = СтрокаВалюты.Содержание;
		Валюта = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда  
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция ЗначениеТиповогоФрагмента(ТаблицаФрагментов, КодЭлемента)
	
	СодержаниеЭлемента = "";
	
	СтрокаЭлемента = ТаблицаФрагментов.Найти(КодЭлемента, "КодТиповогоФрагмента");
	Если СтрокаЭлемента <> Неопределено Тогда
		СодержаниеЭлемента = СтрокаЭлемента.Содержание;
	КонецЕсли;
	
	Возврат СодержаниеЭлемента;
	
КонецФункции

Функция ЗначениеЭлементаСтороныДоговора(ТаблицаФрагментов, ИмяСтороны, КодЭлемента)
	
	Содержание = "";
	Отбор = Новый Структура("КодТиповогоФрагмента", КодЭлемента);
	МассивЭлементов = ТаблицаФрагментов.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива Из МассивЭлементов Цикл
		
		СсылкаНаФрагмент  = СтрокаМассива.СсылкаНаФрагмент;
		СтруктураЭлемента = ЭлементПоСсылке(ТаблицаФрагментов, СсылкаНаФрагмент);
		Если СтруктураЭлемента.Наименование = ИмяСтороны Тогда
			Содержание = СтрокаМассива.Содержание;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Содержание;
	
КонецФункции

Функция ЭлементПоСсылке(ТаблицаФрагментов, СсылБлок)
	
	СтруктураЭлемента = Новый Структура("Наименование, Содержание", "", "");
	
	Если ЗначениеЗаполнено(СсылБлок) Тогда
		СтрокаСсылБлок = ТаблицаФрагментов.Найти(СсылБлок, "НомерФрагмента");
	Иначе
		Возврат СтруктураЭлемента;
	КонецЕсли;
	
	Если СтрокаСсылБлок = Неопределено Тогда
		Возврат СтруктураЭлемента;
	КонецЕсли;
	
	Наименование = СтрокаСсылБлок.НаименованиеТиповогоФрагмента;
	Содержание = СтрокаСсылБлок.Содержание;
	СтруктураЭлемента.Наименование = Наименование;
	СтруктураЭлемента.Содержание = Содержание;
	
	Возврат СтруктураЭлемента;

КонецФункции

Функция ЕстьОшибкиПроверкиСодержимого(СтруктураПараметров, Организация, Контрагент, СторонаКонтрагента)
	
	ЕстьОшибки = Ложь;
	
	Если СтруктураПараметров.ИННСт1 = Неопределено Или СтруктураПараметров.ИННСт2 = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнены обязательные для загрузки договора реквизиты: ИНН сторон'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибки = Истина;
		
		Возврат ЕстьОшибки;
		
	КонецЕсли;   
	
	Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", 
				  СтруктураПараметров.ИННСт2, СтруктураПараметров.КППСт2);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		// Если не найдено по ИНН/КПП стороны 2, продолжим поиск по ИНН/КПП стороны 1.
		Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации",
				  СтруктураПараметров.ИННСт1, СтруктураПараметров.КППСт1);
				
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ТекстОшибки = НСтр("ru = 'Не найдена организация по ИНН %1 КПП %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураПараметров.ИННСт1, СтруктураПараметров.КППСт1);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ЕстьОшибки = Истина;
			
			Возврат ЕстьОшибки;
			
		Иначе
			// Если организация найдена как сторона 1,
			// то контрагента ищем только по стороне 2.
			СторонаКонтрагента = "2";
		КонецЕсли;
	Иначе
		// Если организация найдена как сторона 2,
		// то контрагента ищем только по стороне 1.
		СторонаКонтрагента = "1";
	КонецЕсли;
	ПараметрИННКонтрагента = "ИННСт" + СторонаКонтрагента;
	ПараметрКППКонтрагента = "КППСт" + СторонаКонтрагента;
	Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", 
				  СтруктураПараметров[ПараметрИННКонтрагента], СтруктураПараметров[ПараметрКППКонтрагента]);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не найден контрагент по ИНН %1 КПП %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураПараметров[ПараметрИННКонтрагента],
			СтруктураПараметров[ПараметрКППКонтрагента]);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибки = Истина;
				
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти 

#КонецОбласти
