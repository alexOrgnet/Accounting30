#Область ПрограммныйИнтерфейс

// Начинает фоновое выполнение загрузки операций по ЮКассе.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки операций.
//   * Период - СтандартныйПериод, Структура - Период за который будут выбираться операции по ЮКассе.
//    ** ДатаНачала - Дата - начало периода запроса. 
//                           Если не указан, дата начала будет определена автоматически.
//    ** ДатаОкончания - Дата - окончание периода запроса. 
//                              Если не указан, дата окончания будет равна текущей дате.
//   * Организация - ОпределяемыйТип.Организация - организация, по которой нужно отобрать операции. 
//                                                 Если не указана то, будут обработаны все действительные настройки;
//   * СДоговором - Булево, Неопределено - позволяет указать для каких настроек следует загружать операции:
//    ** Неопределено - будут загружены и операции по схемам "С договором" и "Без договора"
//    ** Истина - будут загружены операции по схеме "С договором"
//    ** Ложь - будут загружены операции по схеме "Без договора"
//    Если указан параметр Организация, этот параметр не учитывается.
//
// Возвращаемое значение:
//  Структура - описание длительной операции. См. ДлительныеОперации.ВыполнитьВФоне.
//
Функция НачатьЗагрузкуОперацийОнлайнОплат(ПараметрыЗагрузки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка операций по ЮMoney'");
	
	ИмяПроцедуры = "ОнлайнОплатыБП.ЗагрузитьОперацииОнлайнОплат";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗагрузки, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Возвращает ссылочный идентификатор, который затем используется при формировании
// идентификатора платежа в ЮКассе.
//
// Возвращаемое значение:
// Строка - Ссылочный идентификатор.
//
Функция СсылочныйИдентификатор() Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1000000000) * ГСЧ.СлучайноеЧисло(1000000000);
	
	Буфер = Новый БуферДвоичныхДанных(64);
	Буфер.ЗаписатьЦелое64(0, СлучайноеЧисло);
	HexСтрока = Лев(ПолучитьHexСтрокуИзБуфераДвоичныхДанных(Буфер), 16);
	
	Возврат HexСтрока;
	
КонецФункции

// Возвращает ссылку на вид оплаты по расчетам с ЮКассе.
// Выбирается вид оплаты с контрагентом, ИНН которого соответствует ИНН эквайера
// по умолчанию из настроек ЮКассе. Если подоходящий вид оплаты не найден,
// он создается с данными эквайера по умолчанию из настроек ЮКассе.
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация для поиска (создания) вида оплаты.
//
// Возвращаемое значение:
// СправочникСсылка.ВидыОплатОрганизаций - Вид оплаты.
//
Функция НайтиИлиСоздатьВидОплаты(Организация) Экспорт
	
	ДанныеКонтрагента = ОнлайнОплаты.ДанныеЭквайера(ТекущаяДатаСеанса()); 
	ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.ПолноеНаименование);
	ДанныеКонтрагента.Вставить("КодПоОКПО",          ДанныеКонтрагента.ОКПО);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ДанныеКонтрагента.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеКонтрагента.КПП);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Контрагент.ИНН = &ИНН
	|	И ВидыОплатОрганизаций.Контрагент.КПП = &КПП
	|	И ВидыОплатОрганизаций.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Возвращаем найденный вид оплаты, только если он один.
	Если Выборка.Количество() > 1 Тогда
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// Контрагент
	ДанныеКонтрагента.НаименованиеПолное = ДанныеКонтрагента.Наименование;
	ДанныеКонтрагента.Наименование = Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(ДанныеКонтрагента.ПолноеНаименование);
	
	Контрагент = Справочники.Контрагенты.СоздатьКонтрагента(ДанныеКонтрагента);
	
	// Договор
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорКонтрагента = Выборка.Ссылка;
	Иначе
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора",  Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ПараметрыДоговора.Вставить("Организация",  Организация);
		ПараметрыДоговора.Вставить("Владелец",     Контрагент);
		ПараметрыДоговора.Вставить("Наименование", НСтр("ru='Основной договор'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
	КонецЕсли;
	
	// Вид оплаты
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ТипОплаты", Перечисления.ТипыОплат.ПлатежнаяКарта);
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Контрагент", Контрагент);
	
	ВидОплаты = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	ВидОплаты.Заполнить(ДанныеЗаполнения);
	ВидОплаты.ДоговорКонтрагента = ДоговорКонтрагента;
	ВидОплаты.Наименование = НСтр("ru='ЮКасса'");
		
	Попытка
		ВидОплаты.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='ОнлайнОплатыБП.НайтиИлиСоздатьВидОплаты'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОнлайнОплатыБП,
			,
			НСтр("ru='Ошибка создания вида оплаты при настройке интеграции с ЮКасса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ВидОплаты.Ссылка;
	
КонецФункции

// Заполняет вид оплаты по расчетам с ЮКассой значением по умолчанию.
//
// Параметры:
// ОбъектНастройка - СправочникОбъект.НастройкиОнлайнОплат - Настройка для дозаполнения вида оплаты.
Процедура ЗаполнитьНастройкуВидОплатыПоУмолчанию(ОбъектНастройка) Экспорт
	
	Если НЕ ОбъектНастройка.СДоговором Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаВидОплаты = ОбъектНастройка.ДополнительныеНастройки.Найти("ВидОплаты", "Настройка");
	Если НастройкаВидОплаты = Неопределено Тогда
		НастройкаВидОплаты = ОбъектНастройка.ДополнительныеНастройки.Добавить();
		НастройкаВидОплаты.Настройка = "ВидОплаты";
		НастройкаВидОплаты.Значение = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ВидОплатыЮКасса = НайтиИлиСоздатьВидОплаты(ОбъектНастройка.Организация);
		
	Если ЗначениеЗаполнено(ВидОплатыЮКасса) Тогда
		НастройкаВидОплаты.Значение = ВидОплатыЮКасса;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на вид оплаты по расчетам с ЮКассой.
// Получает вид оплаты из настроек ЮКассы. Если подоходящий вид оплаты не найден,
// новый не создается
//
// Параметры:
// Настройка - СправочникСсылка.НастройкиОнлайнОплат - Настройка интеграции с ЮКассой.
//
// Возвращаемое значение:
// СправочникСсылка.ВидыОплатОрганизаций, Неопределено - Вид оплаты по умолчанию
//
Функция ВидОплатыИзНастройки(Настройка) Экспорт
	
	Перем ВидОплатыЮКасса;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЮКассыДополнительныеНастройки.Значение КАК ВидОплаты
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат.ДополнительныеНастройки КАК НастройкиЮКассыДополнительныеНастройки
	|ГДЕ
	|	НастройкиЮКассыДополнительныеНастройки.Ссылка = &Ссылка
	|	И НастройкиЮКассыДополнительныеНастройки.Настройка = &НастройкаВидОплаты";
	Запрос.УстановитьПараметр("Ссылка", Настройка);
	Запрос.УстановитьПараметр("НастройкаВидОплаты", "ВидОплаты");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидОплатыЮКасса = Выборка.ВидОплаты;
	КонецЕсли;
	
	Возврат ВидОплатыЮКасса;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСПодсистемой

Процедура ПриОпределенииДополнительныхНастроекОнлайнОплат(ДополнительныеНастройки) Экспорт
	
	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "ВидОплаты";
	СтрокаНастройки.Представление = НСтр("ru='Вид оплаты'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

Процедура ПриСозданииФормыОнлайнОплаты(Форма, Группа, Префикс, ДополнительныеНастройки) Экспорт
	
	// Реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы(
		Префикс + "ВидОплаты",
		Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"),
		,
		НСтр("ru='Вид оплаты'"),
		Истина
	);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("ВидОплаты", Реквизит.Имя);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Элементы
	ТипПолеФормы = Тип("ПолеФормы");
	Элементы = Форма.Элементы;
	
	ГруппаНастройкиУчета = Элементы.Добавить(Префикс + "ГруппаНастройкиУчета", Тип("ГруппаФормы"), Группа);
	ГруппаНастройкиУчета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастройкиУчета.Заголовок = НСтр("ru='Настройка документа ""Оплата платежной картой""'");
	ГруппаНастройкиУчета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНастройкиУчета.ОтображатьЗаголовок = Истина;
	ГруппаНастройкиУчета.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	
	ИмяРеквизита = Префикс + "ВидОплаты";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.Подсказка = НСтр("ru = 'Вид оплаты для отражения операций по ЮКассе'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры

Процедура ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты(Контекст, Отказ = Ложь) Экспорт
	
	Если Контекст.НоваяНастройка Тогда
		Контекст.Форма[Контекст.Префикс + "ВидОплаты"] = НайтиИлиСоздатьВидОплаты(Контекст.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат(Контекст, Отказ = Ложь) Экспорт
	
	ИмяРеквизита = Контекст.Префикс + "ВидОплаты";
	Если Не ЗначениеЗаполнено(Контекст.Форма[ИмяРеквизита]) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле",
			"Заполнение",
			НСтр("ru='Вид оплаты'")
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизита,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымРешением

Процедура ПриОпределенииОснованийПлатежа(ОснованияПлатежа) Экспорт
	
	ОснованияПлатежа.Добавить("Документ.СчетНаОплатуПокупателю");
	
КонецПроцедуры

Процедура ПриПроверкеЗаполненияОснованияПлатежа(ОснованиеПлатежа, Отказ) Экспорт
	
	Если ТипЗнч(ОснованиеПлатежа) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПлатежа,
			"Организация,СтруктурнаяЕдиница,СуммаДокумента,ВалютаДокумента,Контрагент,СсылочныйИдентификатор");
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.СсылочныйИдентификатор) Тогда
			ТекстСообщения = НСтр("ru='Перед формированием платежной ссылки необходимо записать документ.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				НСтр("ru='Организация'")
			);
			Поле = "Организация";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.СтруктурнаяЕдиница) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				НСтр("ru='Банковский счет'")
			);
			Поле = "СтруктурнаяЕдиница";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				НСтр("ru='Контрагент'")
			);
			Поле = "Контрагент";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.СуммаДокумента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список",
				"Заполнение",,,
				НСтр("ru='Товары и услуги'"),
				НСтр("ru='Не заполнены товары и услуги или их стоимость'")
			);
			Поле = "Товары";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, Поле, "Объект", Отказ);
		КонецЕсли;
		
		ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
		Если Реквизиты.ВалютаДокумента <> ВалютаРуб Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Корректность",
				НСтр("ru = 'Валюта'"),,,
				НСтр("ru = 'С помощью ЮКассы можно оплачивать только счета в рублях'")
			);
			Поле = "ТоварыЦеныИВалюта";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОрганизации(Организация, Реквизиты) Экспорт
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	Реквизиты.ИНН       = СведенияОбОрганизации.ИНН;
	Реквизиты.КПП       = СведенияОбОрганизации.КПП;
	Реквизиты.Резидент  = Истина;
	Реквизиты.ЭтоЮрЛицо = (СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОснованияПлатежа(ОснованиеПлатежа, ДанныеОснованияПлатежа) Экспорт
	
	Если ОснованиеПлатежа.ВидОперации = Перечисления.ВидыОперацийСчетаПокупателю.ОсновныеСредства Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Счет.СсылочныйИдентификатор КАК СсылочныйИдентификатор,
		|	ДанныеПервичныхДокументов.Номер КАК Номер,
		|	Счет.Дата КАК Дата,
		|	Счет.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		|	Счет.СуммаДокумента КАК СуммаДокумента,
		|	Счет.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	Счет.СуммаСкидки КАК СуммаСкидки,
		|	Счет.СтруктурнаяЕдиница КАК БанковскийСчет,
		|	Счет.Организация КАК Организация,
		|	Счет.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(Счет.ДоговорКонтрагента.ГосударственныйКонтракт.Код, """") КАК НомерГосударственногоКонтракта
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО Счет.Ссылка = ДанныеПервичныхДокументов.Документ
		|			И Счет.Организация = ДанныеПервичныхДокументов.Организация
		|ГДЕ
		|	Счет.Ссылка = &Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ЛОЖЬ КАК ЭтоУслуга,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ ОсновныеСредства.НаименованиеПолное ПОДОБНО """"
		|				ТОГДА ОсновныеСредства.НаименованиеПолное
		|			ИНАЧЕ ОсновныеСредства.Наименование
		|		КОНЕЦ, """") КАК Наименование,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ ОсновныеСредства.НаименованиеПолное ПОДОБНО """"
		|				ТОГДА ОсновныеСредства.НаименованиеПолное
		|			ИНАЧЕ ОсновныеСредства.Наименование
		|		КОНЕЦ, """") КАК НаименованиеПолное,
		|	"""" КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.СуммаВключаетНДС
		|			ТОГДА Товары.Цена
		|		ИНАЧЕ (Товары.Сумма + Товары.СуммаНДС) / ВЫБОР
		|				КОГДА Товары.Количество = 0
		|					ТОГДА 1
		|				ИНАЧЕ Товары.Количество
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ПРЕДСТАВЛЕНИЕ(Товары.СтавкаНДС) КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			ТОГДА 1
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|			ТОГДА 2
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|			ТОГДА 3
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|			ТОГДА 4
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|			ТОГДА 4
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 5
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 6
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 6
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК СтавкаНДСКод,
		|	ПРЕДСТАВЛЕНИЕ(Товары.Ссылка.ВалютаДокумента) КАК Валюта,
		|	""шт."" КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ОсновныеСредства.Код, """") КАК Артикул,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.ГруппаОС), """") КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.Родитель), """") КАК Родитель,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.СуммаВключаетНДС
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ПО Товары.Номенклатура = ОсновныеСредства.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	"""" КАК Штрихкод
		|ГДЕ
		|	ЛОЖЬ";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Счет.СсылочныйИдентификатор КАК СсылочныйИдентификатор,
		|	ДанныеПервичныхДокументов.Номер КАК Номер,
		|	Счет.Дата КАК Дата,
		|	Счет.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		|	Счет.СуммаДокумента КАК СуммаДокумента,
		|	Счет.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	Счет.СуммаСкидки КАК СуммаСкидки,
		|	Счет.СтруктурнаяЕдиница КАК БанковскийСчет,
		|	Счет.Организация КАК Организация,
		|	Счет.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(Счет.ДоговорКонтрагента.ГосударственныйКонтракт.Код, """") КАК НомерГосударственногоКонтракта
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО Счет.Ссылка = ДанныеПервичныхДокументов.Документ
		|			И Счет.Организация = ДанныеПервичныхДокументов.Организация
		|ГДЕ
		|	Счет.Ссылка = &Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(НоменклатураСправочник.Услуга, ЛОЖЬ) КАК ЭтоУслуга,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ Товары.Содержание ПОДОБНО """"
		|				ТОГДА Товары.Содержание
		|			КОГДА НЕ НоменклатураСправочник.НаименованиеПолное ПОДОБНО """"
		|				ТОГДА НоменклатураСправочник.НаименованиеПолное
		|			ИНАЧЕ НоменклатураСправочник.Наименование
		|		КОНЕЦ, """") КАК Наименование,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ Товары.Содержание ПОДОБНО """"
		|				ТОГДА Товары.Содержание
		|			КОГДА НЕ НоменклатураСправочник.НаименованиеПолное ПОДОБНО """"
		|				ТОГДА НоменклатураСправочник.НаименованиеПолное
		|			ИНАЧЕ НоменклатураСправочник.Наименование
		|		КОНЕЦ, """") КАК НаименованиеПолное,
		|	"""" КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.СуммаВключаетНДС
		|			ТОГДА Товары.Цена
		|		ИНАЧЕ (Товары.Сумма + Товары.СуммаНДС) / ВЫБОР
		|				КОГДА Товары.Количество = 0
		|					ТОГДА 1
		|				ИНАЧЕ Товары.Количество
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ПРЕДСТАВЛЕНИЕ(Товары.СтавкаНДС) КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			ТОГДА 1
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|			ТОГДА 2
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|			ТОГДА 3
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|			ТОГДА 4
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|			ТОГДА 4
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 5
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 6
		|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 6
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК СтавкаНДСКод,
		|	ПРЕДСТАВЛЕНИЕ(Товары.Ссылка.ВалютаДокумента) КАК Валюта,
		|	ЕСТЬNULL(НоменклатураСправочник.Артикул, """") КАК Артикул,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(НоменклатураСправочник.ЕдиницаИзмерения), """") КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(НоменклатураСправочник.ВидНоменклатуры), """") КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(НоменклатураСправочник.Родитель), """") КАК Родитель,
		|	ВЫБОР
		|		КОГДА Товары.Ссылка.СуммаВключаетНДС
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|ГДЕ
		|	Товары.Ссылка = &Счет
		|	И НЕ ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", ОснованиеПлатежа);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Шапка счета
	Если Не Результаты[0].Пустой() Тогда
		
		РеквизитыСчета = Результаты[0].Выбрать();
		РеквизитыСчета.Следующий();
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыСчета.Организация,
			РеквизитыСчета.Дата, РеквизитыСчета.БанковскийСчет);
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыСчета.Контрагент, РеквизитыСчета.Дата);
		
		НомерДокумента = ПечатьТорговыхДокументов.НомерСчетаНаОплату(РеквизитыСчета.НомерГосударственногоКонтракта, РеквизитыСчета.Номер);
		
		ДанныеОснованияПлатежа.Идентификатор = ИдентификаторПлатежа(РеквизитыСчета.Номер, РеквизитыСчета.СсылочныйИдентификатор);
		ДанныеОснованияПлатежа.Номер = РеквизитыСчета.Номер;
		ДанныеОснованияПлатежа.Сумма = РеквизитыСчета.СуммаДокумента;
		ДанныеОснованияПлатежа.Валюта = РеквизитыСчета.ВалютаДокументаКод;
		ДанныеОснованияПлатежа.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Оплата по счету %1 от %2'"),
			НомерДокумента, Формат(РеквизитыСчета.Дата, "ДЛФ=D"));
		ДанныеОснованияПлатежа.БанковскийСчет.БанкБИК = СведенияОбОрганизации.БИК;
		ДанныеОснованияПлатежа.БанковскийСчет.БанкНаименование = СведенияОбОрганизации.Банк;
		ДанныеОснованияПлатежа.БанковскийСчет.БанкКоррСчет = СведенияОбОрганизации.КоррСчет;
		ДанныеОснованияПлатежа.БанковскийСчет.НомерСчета = СведенияОбОрганизации.НомерСчета;
		ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика = КодСистемыНалогообложения(РеквизитыСчета.Организация, РеквизитыСчета.Дата);
		ДанныеОснованияПлатежа.Продавец.ИНН = СведенияОбОрганизации.ИНН;
		ДанныеОснованияПлатежа.Продавец.КПП = СведенияОбОрганизации.КПП;
		ДанныеОснованияПлатежа.Продавец.Наименование = УчетДенежныхСредствБП.СформироватьТекстНаименованияПлательщикаПолучателя(,
			РеквизитыСчета.Организация, РеквизитыСчета.БанковскийСчет,, РеквизитыСчета.Дата);
		ДанныеОснованияПлатежа.Продавец.Телефон = СведенияОбОрганизации.Телефоны;
		ДанныеОснованияПлатежа.Продавец.ЭлектроннаяПочта = СведенияОбОрганизации.Email;
		ДанныеОснованияПлатежа.Продавец.ФактическийАдрес = СведенияОбОрганизации.ФактическийАдрес;
		ДанныеОснованияПлатежа.Продавец.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
		ДанныеОснованияПлатежа.Покупатель.Идентификатор = ИдентификаторПокупателя(РеквизитыСчета.Контрагент);
		ДанныеОснованияПлатежа.Покупатель.Наименование = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
		ДанныеОснованияПлатежа.Покупатель.ИНН = СведенияОКонтрагенте.ИНН;
		ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = СведенияОКонтрагенте.Email;
		
		// Номенклатура
		Если НЕ Результаты[1].Пустой() Тогда
			
			ТоварыУслуги = Результаты[1].Выгрузить();
			ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТоварыУслуги, РеквизитыСчета);
			
			Для каждого ТоварУслуга Из ТоварыУслуги Цикл
				
				СтрокаНоменклатуры = ДанныеОснованияПлатежа.Номенклатура.Добавить();
				СтрокаНоменклатуры.НомерСтроки = ТоварУслуга.НомерСтроки;
				СтрокаНоменклатуры.Наименование = ТоварУслуга.Наименование;
				СтрокаНоменклатуры.НаименованиеПолное = ТоварУслуга.НаименованиеПолное;
				СтрокаНоменклатуры.Характеристика = ТоварУслуга.Характеристика;
				СтрокаНоменклатуры.Количество = ТоварУслуга.Количество;
				СтрокаНоменклатуры.Цена = ТоварУслуга.Цена;
				СтрокаНоменклатуры.СтавкаНДС = ТоварУслуга.СтавкаНДС;
				СтрокаНоменклатуры.СтавкаНДСКод = ТоварУслуга.СтавкаНДСКод;
				СтрокаНоменклатуры.Валюта = ТоварУслуга.Валюта;
				СтрокаНоменклатуры.Артикул = ТоварУслуга.Артикул;
				СтрокаНоменклатуры.ЕдиницаИзмерения = ТоварУслуга.ЕдиницаИзмерения;
				СтрокаНоменклатуры.ВидНоменклатуры = ТоварУслуга.ВидНоменклатуры;
				СтрокаНоменклатуры.Родитель = ТоварУслуга.Родитель;
				СтрокаНоменклатуры.Сумма = ТоварУслуга.Сумма;
				
				// так как признак способа расчета всегда "Предоплата полная", то признак предмета расчета может быть только "ПЛАТЕЖ"
				СтрокаНоменклатуры.ПредметРасчета = 10; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Штрихкоды
	Если НЕ Результаты[2].Пустой() Тогда
		
		ДанныеОснованияПлатежа.Штрихкоды = Результаты[2].Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(ОснованиеПлатежа, КонтактнаяИнформация) Экспорт
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент);
	
	КонтактнаяИнформация.ЭлектроннаяПочта.Добавить(СведенияОКонтрагенте.Email);
	КонтактнаяИнформация.Телефоны.Добавить(СведенияОКонтрагенте.Телефоны);
	
КонецПроцедуры

Процедура ПриФормированииСпискаПолучателейСообщения(ОснованиеПлатежа, ВариантОтправки, Получатели) Экспорт
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент);
		Получатели.Добавить(СведенияОКонтрагенте.Email);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

Процедура ПриЗагрузкеОперацийПоОнлайнОплате(Операции, Результат, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоЗагруженыхОпераций", 0);
	Результат.Вставить("КоличествоНезагруженыхОпераций", 0);
	
	ОперацииКЗагрузке = НеучтенныеОперации(Операции.ОперацииМассивСтруктур);
	
	Для каждого Операция Из ОперацииКЗагрузке Цикл
		
		Если Операция.ВидОперации = "Оплата" Тогда
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Дата", Операция.ДатаОплаты);
			ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
			ДанныеЗаполнения.Вставить("ВидОплаты", Операция.ВидОплаты);
			ДанныеЗаполнения.Вставить("СуммаДокумента", Операция.СуммаДокумента);
			ДанныеЗаполнения.Вставить("СуммаКомиссии", ?(Операции.СДоговором, Операция.СуммаДокумента - Операция.СуммаКЗачислениюНаСчетОрганизации, 0));
			ДанныеЗаполнения.Вставить("СсылочныйНомер", Операция.ИдентификаторПлатежа);
			
			ДокументОплаты = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
			
			Счет = СчетНаОплатуПокупателюПоИдентификаторуПлатежа(Операция.ИдентификаторПлатежа);
			
			Если НЕ ЗначениеЗаполнено(Счет) Тогда
				Продолжить; // Загружаются платежи только по имеющимся в базе счетам.
			КонецЕсли;
			
			ДокументОплаты.Заполнить(Счет);
			ЗаполнитьЗначенияСвойств(ДокументОплаты, ДанныеЗаполнения);
			
			ВидОплатыРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОплаты.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
			ДокументОплаты.СчетКасса = ВидОплатыРеквизиты.СчетУчетаРасчетов;
			ДокументОплаты.Эквайер = ВидОплатыРеквизиты.Контрагент;
			ДокументОплаты.ДоговорЭквайринга = ВидОплатыРеквизиты.ДоговорКонтрагента;
			
			СуммаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "СуммаДокумента");
			Если СуммаСчета = 0 Тогда
				
				МассивСумм = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОплаты.СуммаДокумента);
				ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
				ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаВзаиморасчетов");
				
			ИначеЕсли СуммаСчета <> ДокументОплаты.СуммаДокумента Тогда
				
				МассивКоэффициентов = ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ДокументОплаты.СуммаДокумента, МассивКоэффициентов);
				ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
				ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаВзаиморасчетов");
				
				Для каждого СтрокаПлатеж Из ДокументОплаты.РасшифровкаПлатежа Цикл
					ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
					СтрокаПлатеж.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС);
				КонецЦикла;
				
			КонецЕсли;
			
			Попытка
				ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='ОнлайнОплатыБП.ПриЗагрузкеОперацийПоОнлайнОплате'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ОнлайнОплатыБП,
					,
					НСтр("ru='Ошибка проведения документа ""Оплата платежной картой"" при загрузке операций из ЮКассы'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
						
				ДокументОплаты.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				ДокументОплаты.Записать();
			КонецПопытки;
			
			Результат.КоличествоЗагруженыхОпераций = Результат.КоличествоЗагруженыхОпераций + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура ИспользоватьОнлайнОплатыПриЗаписи(МенеджерЗначения, Отказ) Экспорт
	
	// Установка функциональности "Платежные карты", если включена интеграция с ЮКассой.
	Если МенеджерЗначения.Значение 
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьОплатуПоПлатежнымКартам.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССообщениями

// Заполняет параметры сообщения электронной почты, отправляемого без шаблона.
// См. ОнлайнОплатыПереопределяемый.ЗаполнитьПараметрыСообщенияБезШаблона
//
Процедура ЗаполнитьПараметрыСообщенияБезШаблона(ПараметрыСообщения) Экспорт
	
	СведенияОСчете = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСообщения.Предмет,
		"Организация, Контрагент, СуммаДокумента, ВалютаДокумента");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОСчете.Организация);
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОСчете.Контрагент);
	Подпись = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("Подпись");
	
	ФорматнаяСтрока = ?(СведенияОСчете.СуммаДокумента - Цел(СведенияОСчете.СуммаДокумента) > 0,
		"ЧЦ=15; ЧДЦ=2",
		"ЧЦ=15");
		
	ПредставлениеСуммы = СтрШаблон("%1 %2",
		Формат(СведенияОСчете.СуммаДокумента, ФорматнаяСтрока),
		СведенияОСчете.ВалютаДокумента);
	
	ПараметрыСообщения.Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение заказа на сумму %1 (%2)'"),
		ПредставлениеСуммы,
		СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
		
	ПараметрыСообщения.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='<html><body>
	|<p>Добрый день!</p>
	|<p>Вы сделали заказ на сумму %1 у %2.</p>
	|<p>Для проверки и оплаты заказа онлайн перейдите по ссылке: <a href=""%3"">%3</a></p>
	|<br>
	|<p>%4</p>
	|</body></html>'"),
	НормализоватьСтрокуДляHTML(ПредставлениеСуммы),
	НормализоватьСтрокуДляHTML(СведенияОбОрганизации.НаименованиеДляПечатныхФорм),
	НормализоватьСтрокуДляHTML(ПараметрыСообщения.ПлатежнаяСсылка),
	Подпись);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьСсылочныеИдентификаторыДокументовСчетНаОплатуПокупателю(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.СсылочныйИдентификатор = """"
	|	И СчетНаОплатуПокупателю.Дата > &Дата";
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(), -1));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ДокументОбъект.СсылочныйИдентификатор = ОнлайнОплатыБП.СсылочныйИдентификатор();
			
			// Запись обработанного объекта.
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			// Если не удалось обработать какой-либо элемент справочника, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьСсылочныеИдентификаторыДокументовСчетНаОплатуПокупателю
				|не удалось обработать некоторые документы ""Счет покупателю"" (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СчетНаОплатуПокупателю,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьСсылочныеИдентификаторыДокументовСчетНаОплатуПокупателю
					|обработала очередную порцию документов ""Счет покупателю"": %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для служебного использования.
// Вызывается с помощью ДлительныеОперации.ВыполнитьВФоне.
//
Процедура ЗагрузитьОперацииОнлайнОплат(Параметры, АдресРезультата) Экспорт
	
	РезультатЗагрузкиОпераций = ОнлайнОплаты.ЗагрузитьОперацииОнлайнОплат(Параметры.Период, Параметры.Организация, Параметры.СДоговором);
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатЗагрузкиОпераций", РезультатЗагрузкиОпераций);
	Результат.Вставить("ПоказыватьОповещениеПользователя", Параметры.ПоказыватьОповещениеПользователя);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает код учетной политики организации для ЮКассы:
// 1 - ОСН
// 2 - УСН (доходы)
// 3 - УСН (доходы минус расходы)
// 4 - продажа облагается ЕНВД
//
// Параметры:
// Организация - СправочникСсылка.Организация - Организация, по которой получается код учетной политики.
//
// Возвращаемое значение:
// Число - Код учетной политики.
//
Функция КодСистемыНалогообложения(Организация, Период)
	
	Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
	
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
			Возврат 6;
		КонецЕсли; 
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			Возврат 4;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
			Или УчетнаяПолитика.ПрименяетсяАУСНДоходыМинусРасходы(Организация, Период) Тогда
		Возврат 3;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период)
			Или УчетнаяПолитика.ПрименяетсяАУСНДоходы(Организация, Период) Тогда
		Возврат 2;
	КонецЕсли;
	
	Возврат 1; // Общая система налогообложения.
	
КонецФункции

// Возвращает массив неучтенных операций.
//
// Параметры:
// Операции - Массив [Структура] - Массив операций.
//
// Возвращаемое значение:
// Массив [Структура] - Массив неучтенных операций.
//
Функция НеучтенныеОперации(Операции)
	
	НеучтеныеОперации = Новый Массив;
	
	ИдентификаторыПлатежей = Новый Массив;
	Для каждого Операция Из Операции Цикл
		ИдентификаторыПлатежей.Добавить(Операция.ИдентификаторПлатежа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчтенныеОперации.СсылочныйНомер КАК ИдентификаторПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК УчтенныеОперации
	|ГДЕ
	|	УчтенныеОперации.СсылочныйНомер В(&ИдентификаторыПлатежей)";
	Запрос.УстановитьПараметр("ИдентификаторыПлатежей", ИдентификаторыПлатежей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УчтенныеПлатежи = Новый Массив;
	УчтенныеПлатежи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторПлатежа");
	
	Для каждого Операция Из Операции Цикл
		
		Если УчтенныеПлатежи.Найти(Операция.ИдентификаторПлатежа) = Неопределено Тогда
			НеучтеныеОперации.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеучтеныеОперации;
	
КонецФункции

// Возвращает ссылку на документ "Счет на оплату покупателю" по идентификатору
// платежа. Если документ по указанному идентификатору не найден, возвращается
// Неопределено.
//
// Параметры:
// ИдентификаторПлатежа - Строка - Идентификатор платежа.
//
// Возвращаемое значение:
// ДокументСсылка.СчетНаОплатуПокупателю - ссылка на найденный документ.
// Неопределено - если документ не найден.
//
Функция СчетНаОплатуПокупателюПоИдентификаторуПлатежа(ИдентификаторПлатежа) 
	
	Счет = Неопределено;
	
	ПрефиксДокумента = Лев(ИдентификаторПлатежа, 2);
	СсылочныйИдентификатор = СсылочныйИдентификаторПлатежа(ИдентификаторПлатежа);
	
	Если ПрефиксДокумента = "СЧ" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.СсылочныйИдентификатор = &СсылочныйИдентификатор";
		Запрос.УстановитьПараметр("СсылочныйИдентификатор", СсылочныйИдентификатор);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Счет = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

// Возвращает идентификатор покупателя для ЮКассы
//
// Параметры:
// Контрагент - СправочникСсылка.Контрагент - Контрагент, идентификатор которого нужно получить.
// 
// Возвращаемое значение:
// Строка - Идентификатор покупателя.
//
Функция ИдентификаторПокупателя(Контрагент)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "НаименованиеПолное");
	
КонецФункции

// Заменяет спецсимволы HTML на их ссылки-мнемоники.
// 
// Параметры:
// Текст - Строка - Текст, который необходимо преобразовать для вставки в HTML
// 
// Возвращаемое значение:
// Строка - текст, в котором спецсимволы HTML заменены на свои ссылки-мненмоники.
//
Функция НормализоватьСтрокуДляHTML(Значение)
	
	Значение = СтрЗаменить(Значение, "&", "&amp;");
	Значение = СтрЗаменить(Значение, "<", "&lt;");
	Значение = СтрЗаменить(Значение, ">", "&gt;");
	Значение = СтрЗаменить(Значение, """", "&quot;");
	Значение = СтрЗаменить(Значение, "'", "&apos;");
	
	Возврат Значение;
	
КонецФункции

// Формирует идентификатор платежа для ЮКассы.
//
// Параметры:
// НомерДокумента - Строка - Номер документа (не более 6 символов)
// Ссылочный идентификатор - Строка - Ссылочный идентификатор документа (16 символов)
//
// Возвращаемое значение:
// Строка - Идентификатор платежа
//
Функция ИдентификаторПлатежа(Знач НомерДокумента, СсылочныйИдентификатор)
	
	НомерДокумента = Прав("000000" + НомерДокумента, 6);
	
	Возврат СтрШаблон("СЧ%1-%2", НомерДокумента, СсылочныйИдентификатор);
	
КонецФункции

// Выделяет ссылочный номер из идентификатора платежа.
//
// Параметры:
// ИдентификаторПлатежа - Строка - Идентификатор платежа
//
// Возвращаемое значение:
// Строка - Ссылочный номер
//
Функция СсылочныйИдентификаторПлатежа(ИдентификаторПлатежа)
	
	Возврат Прав(ИдентификаторПлатежа, 16);
	
КонецФункции

#КонецОбласти