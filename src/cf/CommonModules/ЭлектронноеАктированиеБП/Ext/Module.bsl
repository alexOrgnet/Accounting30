#Область ПрограммныйИнтерфейс

// см. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников.
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("ГосударственныеКонтрактыЕИС", "ГосударственныеКонтрактыЕИС");
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.СоздатьДоговорНаОснованииКонтракта().
Процедура СоздатьДоговорНаОснованииКонтракта(СсылкаНаКонтракт, РезультатСоздания) Экспорт
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ПараметрыДоговора.Вставить("Владелец", СсылкаНаКонтракт.Контрагент);
	ПараметрыДоговора.Вставить("Организация", СсылкаНаКонтракт.Организация);
	Шаблон = НСтр("ru = 'РК %1 №%2 от %3'");
	ДатаКонтракта = Формат(СсылкаНаКонтракт.ДатаЗаключенияКонтракта, "ДФ=dd.MM.yyyy;");
	НаименованиеДоговора = СтрШаблон(Шаблон,
		СсылкаНаКонтракт.Код,
		СсылкаНаКонтракт.Номер,
		ДатаКонтракта);
	ПараметрыДоговора.Вставить("Наименование", НаименованиеДоговора);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
	ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РезультатСоздания.Выполнено = Ложь;
		РезультатСоздания.ОписаниеОшибки = НСтр("ru='В удалось создать договор контрагента.'");;
		Возврат;
	КонецЕсли;
	
	ДоговорОбъект = ДоговорКонтрагента.ПолучитьОбъект();
	ДоговорОбъект.Номер = СсылкаНаКонтракт.Номер;
	ДоговорОбъект.Дата = СсылкаНаКонтракт.ДатаЗаключенияКонтракта;
	
	Попытка
		ДоговорОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора записать предупреждение в журнал регистрации.
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ДоговорыКонтрагентов, 
			ДоговорОбъект.Ссылка,
			ТекстСообщения);
		РезультатСоздания.Выполнено = Ложь;
		РезультатСоздания.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат;
	КонецПопытки;
	
	РезультатСоздания.Договор = ДоговорОбъект.Ссылка;
	РезультатСоздания.Выполнено = Истина;
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора().
Процедура ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора(СвязиПараметровВыбора,
			 ПараметрыВыбора) Экспорт
			
	МассивСвязей = Новый Массив();
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
	МассивСвязей.Добавить(НоваяСвязь);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	МассивСвязей.Добавить(НоваяСвязь);

	СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	ВидыДоговоров = Новый Массив();
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияПараметровВыбора = Новый ФиксированныйМассив(ВидыДоговоров);
		
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ЗначенияПараметровВыбора);
	
	МассивСвязей = Новый Массив();
	МассивСвязей.Добавить(НовыйПараметр);
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.ДляДокументаЗаполняютсяМестаПоставки()
Процедура ДляДокументаЗаполняютсяМестаПоставки(Документ, МестаПоставкиЗаполняются) Экспорт
	
	МестаПоставкиЗаполняются = Истина;
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		МестаПоставкиЗаполняются = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.СтавкаНДСОбъектаЗакупки()
Функция СтавкаНДСОбъектаЗакупки(Знач СтавкаНДСОбъектаЗакупки) Экспорт
	
	СтавкиНДС = Новый Соответствие;
	НулеваяСтавка = Перечисления.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Нулевая, ТекущаяДата());
	СтавкиНДС.Вставить("0", НулеваяСтавка);
	СтавкиНДС.Вставить("10", Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Вставить("18", Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС.Вставить("20", Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС.Вставить("n", Перечисления.СтавкиНДС.БезНДС);
	СтавкаНДС = СтавкиНДС[СтавкаНДСОбъектаЗакупки];
	
	Если СтавкаНДС = Неопределено Тогда
		Шаблон = НСтр("ru='Неизвестная ставка НДС объекта закупки ""%1"".'");
		ТекстОшибки = СтрШаблон(Шаблон, СтавкаНДСОбъектаЗакупки);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ВладелецПрисоединенныхФайлов(ОбъектыУчетаЭД) Экспорт
	
	СсылкаНаОбъект = Неопределено;
	Для каждого Основание Из ОбъектыУчетаЭД Цикл
		Если ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СсылкаНаОбъект = Основание.ОбъектУчета;
			Прервать;
		Иначе
			Если ТипЗнч(Основание.ОбъектУчета) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				СсылкаНаОбъект = Основание.ОбъектУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СсылкаНаОбъект;
		
КонецФункции

Функция НаименованиеПоставщика(Договор) Экспорт
	
	НаименованиеПоставщика = Договор.ПолноеНаименованиеПоставщика;
	Возврат НаименованиеПоставщика;
	
КонецФункции

Процедура ПоместитьРезультатВыполненияЗапросаВДанныеДляПечати(
				РезультатЗапроса, ДанныеДляПечати, НомераТаблиц) Экспорт
				
	ДанныеЭлектронногоАктирования = Новый Структура;
	
	Если НомераТаблиц.Свойство("МестаПоставкиДокументовДляЕИС") Тогда
		// Места поставки есть только в УПД.
		ДанныеЭлектронногоАктирования.Вставить("МестаПоставкиДокументовДляЕИС",
			РезультатЗапроса[НомераТаблиц.МестаПоставкиДокументовДляЕИС].Выгрузить());
	КонецЕсли;
	
	ДанныеСтрокАктированияЕИС = РезультатЗапроса[НомераТаблиц.ДанныеСтрокАктированияЕИС].Выгрузить();
	ДанныеЭлектронногоАктирования.Вставить("ДанныеСтрокАктированияЕИС",
		ДанныеСтрокАктированияЕИС);
	ДанныеЭлектронногоАктирования.Вставить("ДанныеГосконтракта",
		РезультатЗапроса[НомераТаблиц.ДанныеГосконтракта].Выгрузить());
	ДанныеЭлектронногоАктирования.Вставить("ПодписантыДокументовЕИС",
		РезультатЗапроса[НомераТаблиц.ПодписантыДокументовЕИС].Выгрузить());
	ДанныеЭлектронногоАктирования.Вставить("ПриложенныеФайлыДляЭлектронногоАктированияЕИС",
		РезультатЗапроса[НомераТаблиц.ПриложенныеФайлыДляЭлектронногоАктированияЕИС].Выгрузить());
	
	ТаблицаИдентификаторовЕИС = ДанныеСтрокАктированияЕИС.Скопировать();
	ТаблицаИдентификаторовЕИС.Свернуть(
		"ИдентификаторДляАктированияЕИС", "КоличествоСтрок");
	// Соответствие между идентификатором для ЕИС и структурой с количеством строк и данными родителя.
	ДанныеПоДетализации = Новый Соответствие();
	Для Каждого Строка Из ТаблицаИдентификаторовЕИС Цикл
		ДанныеСтрок = Новый Структура("КоличествоСтрок, ДанныеРодителя",
			Строка.КоличествоСтрок, Неопределено);
		ДанныеПоДетализации.Вставить(
			Строка.ИдентификаторДляАктированияЕИС, ДанныеСтрок);
	КонецЦикла;
	ДанныеЭлектронногоАктирования.Вставить("ДанныеПоДетализации", ДанныеПоДетализации);
	
	ДанныеДляПечати.Вставить("ДанныеЭлектронногоАктирования", ДанныеЭлектронногоАктирования);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПриложенияУПД(ДанныеЭлектронногоАктированияЕИС, ДанныеПриложенияЕИС) Экспорт
	
	СтоимостьТоваровСНалогом = 0;
	ВсегоКОплатеСуммаНалога = 0;
	
	ЭтоВалютныйКонтракт = Ложь;
	НоминалКурсаВалюты = 1;
	
	Если ЭтоВалютныйКонтракт Тогда
		// Заполняется, если валюта УПД не совпадает с валютой контракта.
		ДанныеПриложенияЕИС.СведенияОТоварах.СтоимостьТоваровСНалогом = СтоимостьТоваровСНалогом;
		ДанныеПриложенияЕИС.СведенияОТоварах.ВсегоКОплатеСуммаНалога = ВсегоКОплатеСуммаНалога;
		//В схемах 11.1 аннотации и описания атрибутов и тэгов будут скорректированы
		//В случае, если валюта документа - Российский Рубль, игнорирование атрибута НоминалКурсВал при загрузке правомерно.
		ДанныеПриложенияЕИС.СведенияОТоварах.НоминалКурсаВалюты = НоминалКурсаВалюты;
	КонецЕсли;

	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не заполнены данные государственного контракта для электронного актирования.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	Иначе
		ДанныеПриложенияЕИС.ГосударственныйКонтракт =
			ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ДобавитьДвоичныеВложенияПриложенияДляЕИС(
		ДанныеПриложенияЕИС, ДанныеЭлектронногоАктированияЕИС);
	
	Для Каждого МестоПоставки Из ДанныеЭлектронногоАктированияЕИС.МестаПоставкиДокументовДляЕИС Цикл
		Место = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТовара();
		МестоJSON = МестоПоставки.ДанныеМеста;
		ЗаполнитьЗначенияСвойств(Место, МестоПоставки);
		КодыАдреса = АдресныйКлассификатор.КодыАдреса(МестоJSON);
		Место.Классификатор = ЭлектронноеАктированиеЕИС.МестоПоставкиПоКЛАДР();
		Место.Код = ЭлектронноеАктированиеЕИС.ПреобразоватьКодКладрДляЕИС(
			КодыАдреса.КодКЛАДР);
		ДанныеПриложенияЕИС.МестаПоставки.Добавить(Место);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеПоСтрокеТоваровУПД_2019(НоваяСтрокаЭД, СтрокаВыборки, СтруктураДанных, ДанныеПриложенияЕИС) Экспорт

	ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
	
	ДанныеПоДетализации = ДанныеЭлектронногоАктированияЕИС.ДанныеПоДетализации;
	СтрокиДокумента = ДанныеЭлектронногоАктированияЕИС.ДанныеСтрокАктированияЕИС;
	
	ИдентификаторСтроки = НоваяСтрокаЭД.ИдентификаторСтрокиГосконтрактаЕИС;
	СтрокаКонтракта = СтрокиДокумента.Найти(ИдентификаторСтроки, "Идентификатор");
	Если НЕ ЗначениеЗаполнено(СтрокаКонтракта) Тогда
		Шаблон = НСтр("ru='Не найдена строка госконтракта по идентификатору %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, ИдентификаторСтроки);
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены данные для электронного актирования в форме документа.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контракт = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	ДанныеКонтракта = ЭлектронноеАктированиеЕИС.ДанныеГосударственногоКонтракта(Контракт);
	СпособМаксимальнаяЦена = ЭлектронноеАктированиеЕИС.СпособУказанияЦеныМаксимальнаяЦена();
	
	// Замена кода и наименования товара в УПД на данные из контракта.
	НоваяСтрокаЭД.ТоварКод = СтрокаКонтракта.КодТовараДляЕИС;
	НоваяСтрокаЭД.ТоварНаименование = СтрокаКонтракта.Наименование;
	
	Если НоваяСтрокаЭД.Количество = 0 Тогда
		Количество = 1;
	Иначе
		Количество = НоваяСтрокаЭД.Количество;
	КонецЕсли;
	
	СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрокаЭД.НалоговаяСтавка);
	
	// Цена за единицу указывается с точностью до 11 цифр.
	// Описание методики расчета приведено в комментариях к РДИК_0210.
	Если (ДанныеКонтракта.ИнформацияОЦенах.СпособУказанияЦены = СпособМаксимальнаяЦена
		И ЗначениеЗаполнено(ДанныеКонтракта.ИнформацияОЦенах.ФормулаЦены)
		И ЭтоОбъектЗакупкиСВозможностьюКорректировкиЦены(СтрокаКонтракта))
		ИЛИ (СтрокаКонтракта.Количество = 0 И СтрокаКонтракта.Сумма > 0) Тогда
		ЦенаИзКонтрактаСНДС = НоваяСтрокаЭД.СтоимостьТоваровСНалогом / Количество;
		НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = Окр(ЦенаИзКонтрактаСНДС / (1 + СтавкаНДС / 100), 11);
		ЦенаИзКонтрактаСНДС = Окр(ЦенаИзКонтрактаСНДС, 11);
	Иначе
		ЦенаИзКонтрактаСНДС = СтрокаКонтракта.Цена;
		ЦенаЗаЕдиницуИзмерения = Окр(ЦенаИзКонтрактаСНДС / (1 + СтавкаНДС / 100), 11);
		НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = ЦенаЗаЕдиницуИзмерения;
	КонецЕсли;
	
	ИдентификаторДляАктированияЕИС = СтрокаКонтракта.ИдентификаторДляАктированияЕИС;
	СтрокаДетализации = ДанныеПоДетализации[ИдентификаторДляАктированияЕИС];
	ЕстьДетализация = СтрокаДетализации.КоличествоСтрок > 1;
	ВерсияФорматаВерсииСхем12 = "1.11";
	Если НЕ ЭлектронноеАктированиеЕИС.ВерсияФормата() = ВерсияФорматаВерсииСхем12 Тогда
		// С 13 версии схем детализация не используется.
		ЕстьДетализация = Ложь;
	КонецЕсли;
	
	// Определяем вид ТРУ.
	ВидТРУ = ЭлектронноеАктированиеЕИС.ОпределитьВидТРУДляУПД(СтрокаКонтракта.Тип);
	ЭтоРаботаИлиУслуга = СтрокаКонтракта.ЭтоРаботаИлиУслуга;
	// Устанавливаем признак в строке УПД.
	НоваяСтрокаЭД.Признак = Строка(ВидТРУ);
	
	Если ЕстьДетализация Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДетализации.ДанныеРодителя) Тогда
			// создаем родителя
			ДанныеРодителя = ЭлектронноеАктированиеЕИС.НовыеДетализированныеСведенияОТРУ();
			СведенияОРодительскойПозиции = ДанныеРодителя.СведенияОРодительскойПозиции;
			
			СведенияОРодительскойПозиции.Идентификатор =
				ИдентификаторДляАктированияЕИС;
			СведенияОРодительскойПозиции.ТехническийИдентификатор =
				СтрокаКонтракта.ВнутреннийИдентификаторЕИС;
			СведенияОРодительскойПозиции.ВнешнийТехническийИдентификатор =
				СтрокаКонтракта.ВнешнийИдентификатор;
			СведенияОРодительскойПозиции.Код = СтрокаКонтракта.КодТовараДляЕИС;
			
			СведенияОРодительскойПозиции.Наименование = СтрокаКонтракта.Наименование;
			СведенияОРодительскойПозиции.Вид = Строка(ВидТРУ);
			СведенияОРодительскойПозиции.КодЕдиницыИзмерения = НоваяСтрокаЭД.ЕдиницаИзмеренияКод;
			СведенияОРодительскойПозиции.ЦенаЗаЕдиницу = НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения;
			СведенияОРодительскойПозиции.Количество = НоваяСтрокаЭД.Количество;
			СведенияОРодительскойПозиции.СтоимостьБезНалогов = НоваяСтрокаЭД.СтоимостьТоваровБезНалога;
			СведенияОРодительскойПозиции.НалоговаяСтавка = СтавкаНДСДляПриложенияЕИС(СтрокаВыборки.СтавкаНДС);
			СведенияОРодительскойПозиции.СтоимостьСНалогами = НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
			СведенияОРодительскойПозиции.СуммаНалога = НоваяСтрокаЭД.СуммаНалога;
			СведенияОРодительскойПозиции.СуммаАкциза = НоваяСтрокаЭД.СуммаАкциза;
			
			Если НЕ ЭтоРаботаИлиУслуга Тогда
				// Страна проихождения не указывается для услуг.
				Если НЕ СтрокаВыборки.СтранаПроисхождения.Пустая() Тогда
					СведенияОРодительскойПозиции.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
					СведенияОРодительскойПозиции.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДетализации.ДанныеРодителя = ДанныеРодителя;
			
			// Добавляем строку родителя, остальные строки добавляются как дочерние позиции.
			ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(ДанныеРодителя);
			
		Иначе
			
			ДанныеРодителя = СтрокаДетализации.ДанныеРодителя;
			СведенияОРодительскойПозиции = ДанныеРодителя.СведенияОРодительскойПозиции;
			СведенияОРодительскойПозиции.Количество = СведенияОРодительскойПозиции.Количество + НоваяСтрокаЭД.Количество;
			СведенияОРодительскойПозиции.СтоимостьСНалогами = СведенияОРодительскойПозиции.СтоимостьСНалогами + НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
			СведенияОРодительскойПозиции.СтоимостьБезНалогов = СведенияОРодительскойПозиции.СтоимостьБезНалогов + НоваяСтрокаЭД.СтоимостьТоваровБезНалога;
			СведенияОРодительскойПозиции.СуммаНалога = СведенияОРодительскойПозиции.СуммаНалога + НоваяСтрокаЭД.СуммаНалога;
			СведенияОРодительскойПозиции.СуммаАкциза = СведенияОРодительскойПозиции.СуммаАкциза + НоваяСтрокаЭД.СуммаАкциза;
			
		КонецЕсли;
		
		СведенияОДочернейПозиции = ЭлектронноеАктированиеЕИС.НовыеСведенияОДочернейПозицииТРУ();
		ИдентификаторНоменклатуры = Строка(Новый УникальныйИдентификатор);
		СведенияОДочернейПозиции.Идентификатор = СтрЗаменить(ИдентификаторНоменклатуры, "-", "");
			
		СведенияОДочернейПозиции.НомерСтрокиТаблицы = НоваяСтрокаЭД.НомерСтроки;
		
		Если НоваяСтрокаЭД.Количество > 0 Тогда
			СведенияОДочернейПозиции.ЦенаЗаЕдиницуСНДС = Окр(НоваяСтрокаЭД.СтоимостьТоваровСНалогом / НоваяСтрокаЭД.Количество, 11);
		Иначе
			СведенияОДочернейПозиции.ЦенаЗаЕдиницуСНДС = НоваяСтрокаЭД.СтоимостьТоваровСНалогом;
		КонецЕсли;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда

			Если НЕ СтрокаВыборки.СтранаПроисхождения.Пустая() Тогда
				СведенияОДочернейПозиции.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
				СведенияОДочернейПозиции.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
			КонецЕсли;
			
			МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТоварнойПозиции();
			МестоПоставки.Идентификатор = НоваяСтрокаЭД.ИдентификаторМестаПоставкиЕИС;
			МестоПоставки.ПоставляемоеКоличество = НоваяСтрокаЭД.Количество; 
			СведенияОДочернейПозиции.СведенияОМестахПоставкиТовара.Добавить(МестоПоставки);
			
		КонецЕсли;
		СведенияОДочернейПозиции.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 1;
		
		ДанныеРодителя.СведенияОДочернихПозициях.Добавить(СведенияОДочернейПозиции);
		
	Иначе
		
		// Без детализации.
		СтрокаПриложения = ЭлектронноеАктированиеЕИС.НовыеНедетализированныеСведенияОТРУ();
		СтрокаПриложения.Идентификатор = ИдентификаторДляАктированияЕИС;
		СтрокаПриложения.НомерСтрокиТаблицы = НоваяСтрокаЭД.НомерСтроки;
		Если ЭтоРаботаИлиУслуга Тогда
			Если ЗначениеЗаполнено(СтрокаКонтракта.ОбъемРаботыУслуги) Тогда
				// Количество указывается в текстовом выражении.
				СтрокаПриложения.ОбъемВТекстовомВыражении = СтрокаКонтракта.ОбъемРаботыУслуги;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПриложения.ЦенаИзКонтрактаСНДС = ЦенаИзКонтрактаСНДС;
		СтрокаПриложения.ИсходноеНаименование = СтрокаКонтракта.Наименование;
		
		СтрокаПриложения.ТехническийИдентификатор = СтрокаКонтракта.ВнутреннийИдентификаторЕИС;
		СтрокаПриложения.ВнешнийТехническийИдентификатор = СтрокаКонтракта.ВнешнийИдентификатор;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда
			Если ЗначениеЗаполнено(СтрокаВыборки.СтранаПроисхождения) Тогда
				СтрокаПриложения.КодСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Код;
				СтрокаПриложения.НаименованиеСтраныПроисхождения = СтрокаВыборки.СтранаПроисхождения.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		// Признак поставки объекта закупки с улучшенными характеристиками:
		// - 1 - не установлен;
		// - 2 - установлен из информации о контракте;
		// - 3 - установлен пользователем.
		// Игнорируется для авансовых СЧФ.
		// Игнорируется при приеме исправления к документу, который был подписан до версии 11.2.
		// В других случаях контролируется обязательное заполнение.
		// Если для позиции ТРУ в сведениях о контракте установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение "2 - установлен из информации о контракте".
		// Если для позиции ТРУ в сведениях о контракте НЕ установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение, отличное от "2 - установлен из информации о контракте".
		// В исправлении редактирование данного признака допускается только в том случае, если:
		// - статус документа, к которому формируется исправление - «Отказано при рассмотрении»
		// - в сведениях о контракте для данной позиции не установлен признак поставки объекта закупки с улучшенными характеристиками.
		СтрокаПриложения.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками = 1;
		
		Если НЕ ЭтоРаботаИлиУслуга Тогда
			МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТоварнойПозиции();
			МестоПоставки.Идентификатор = НоваяСтрокаЭД.ИдентификаторМестаПоставкиЕИС;
			МестоПоставки.ПоставляемоеКоличество = НоваяСтрокаЭД.Количество; 
			СтрокаПриложения.СведенияОМестахПоставкиТовара.Добавить(МестоПоставки);
		КонецЕсли;
		
		ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(СтрокаПриложения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПриложенияУКД(ДанныеЭлектронногоАктированияЕИС, ДанныеПриложенияЕИС) Экспорт
	
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не заполнены данные государственного контракта для электронного актирования.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	Иначе
		ДанныеПриложенияЕИС.ГосударственныйКонтракт =
			ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].Ссылка;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ДобавитьДвоичныеВложенияПриложенияДляЕИС(
		ДанныеПриложенияЕИС, ДанныеЭлектронногоАктированияЕИС);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоСтрокеТоваровУКД(НоваяСтрокаЭД, СтрокаВыборки, СтруктураДанных, ДанныеПриложенияЕИС) Экспорт
	
	ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
	
	ДанныеПоДетализации = ДанныеЭлектронногоАктированияЕИС.ДанныеПоДетализации;
	СтрокиДокумента = ДанныеЭлектронногоАктированияЕИС.ДанныеСтрокАктированияЕИС;
	
	ИдентификаторСтроки = НоваяСтрокаЭД.ИдентификаторСтрокиГосконтрактаЕИС;
	СтрокаДокумента = СтрокиДокумента.Найти(ИдентификаторСтроки, "Идентификатор");
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента) Тогда
		Шаблон = НСтр("ru='Не найдена строка госконтракта по идентификатору строки документа %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, ИдентификаторСтроки);
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Замена кода и наименования товара в УПД на данные из контракта.
	НоваяСтрокаЭД.ТоварНаименование = СтрокаДокумента.Наименование;
	
	// Замена цены на цену из контракта с точностью до 11 знаков.
	НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмерения = СтрокаДокумента.ЦенаЗаЕдиницуИзмерения;
	НоваяСтрокаЭД.ЦенаЗаЕдиницуИзмеренияДоКорректировки = СтрокаДокумента.ЦенаЗаЕдиницуИзмерения;
	
	ИдентификаторДляАктированияЕИС = СтрокаДокумента.ИдентификаторДляАктированияЕИС;
	СтрокаДетализации = ДанныеПоДетализации[ИдентификаторДляАктированияЕИС];
	ЕстьДетализация = СтрокаДетализации.КоличествоСтрок > 1;
	
	// Определяем вид ТРУ.
	ВидТРУ = ЭлектронноеАктированиеЕИС.ОпределитьВидТРУДляУПД(СтрокаДокумента.Тип);
	ЭтоРаботаИлиУслуга = СтрокаДокумента.ЭтоРаботаИлиУслуга;
	
	СтрокаПриложения = ЭлектронноеАктированиеЕИС.НовыеСведенияОТРУДляУКД();
	СтрокаПриложения.НомерСтрокиТаблицы = НоваяСтрокаЭД.НомерСтроки;
	
	СтрокаПриложения.ЦенаСНДСДоИзменения = ?(НоваяСтрокаЭД.Количество = 0, 0,
		НоваяСтрокаЭД.СтоимостьТоваровСНалогом / НоваяСтрокаЭД.Количество);
	СтрокаПриложения.ЦенаСНДСПослеИзменения = ?(НоваяСтрокаЭД.КоличествоДоКорректировки = 0, 0,
		НоваяСтрокаЭД.СтоимостьТоваровСНалогомДоКорректировки / НоваяСтрокаЭД.КоличествоДоКорректировки);
	СтрокаПриложения.ИсходноеНаименование = СтрокаДокумента.Наименование;
	
	СтрокаПриложения.ВнешнийТехническийИдентификатор = СтрокаДокумента.ВнешнийИдентификатор;
	СтрокаПриложения.Код = СтрокаДокумента.КодТовараДляЕИС;
	СтрокаПриложения.НаименованиеЕдиницыИзмеренияДоИзменения =
		СтрокаВыборки.НаименованиеЕдиницыИзмерения.НаименованиеПолное;
	СтрокаПриложения.НаименованиеЕдиницыИзмеренияПослеИзменения =
		СтрокаВыборки.НаименованиеЕдиницыИзмерения.НаименованиеПолное;
	// Для работ и услуг.
	Если ЭтоРаботаИлиУслуга
		И ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0].ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении Тогда
		СтрокаПриложения.ОбъемВТекстовомВыраженииДоИзменения =
			СтрокаДокумента.ОбъемВТекстовомВыраженииДоИзменения;
		СтрокаПриложения.ОбъемВТекстовомВыраженииПослеИзменения =
			СтрокаДокумента.ОбъемВТекстовомВыражении;
	КонецЕсли;
	
	Если ЕстьДетализация Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДетализации.ДанныеРодителя) Тогда
			// создаем родителя
		КонецЕсли;
	Иначе
		
		СтрокаПриложения.Идентификатор = ИдентификаторДляАктированияЕИС;
		
	КонецЕсли;
	
	ДанныеПриложенияЕИС.СведенияОТоварах.ТоварыРаботыУслуги.Добавить(СтрокаПриложения);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДереваДляЭлектронногоАктированияЕИС(ДеревоДанных,
		ДанныеЭлектронногоАктированияЕИС,
		ВыборкаШапки,
		ДанныеПриложенияЕИС,
		ЭтоУКД) Экспорт

	ТипОрганизация = Метаданные.ОпределяемыеТипы.Организация.Тип;
		
	ТаблицаПодписанты = Новый ТаблицаЗначений;
	ТаблицаПодписанты.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПодписанты.Колонки.Добавить("ОбластьПолномочий", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("ОснованиеПолномочий", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("Должность", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	ТаблицаПодписанты.Колонки.Добавить("ТипПодписанта", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПодписантовЕИС"));
	ТаблицаПодписанты.Колонки.Добавить("Организация", ТипОрганизация);
	
	ПодписантыЕИС = ДанныеЭлектронногоАктированияЕИС.ПодписантыДокументовЕИС;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеБД",
		ДанныеЭлектронногоАктированияЕИС);
		
	Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены данные для электронного актирования в форме документа.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	// Номер строки указывается в атрибуте ИныеСвед.
	// в дальнейшем используется для заполнения приложений для ЕИС.
	НомерСтроки = 1;
	
	Если ВыборкаШапки.Свойство("ОтветственныйЗаОформление") Тогда
		ОтветственныйЗаОформление = ВыборкаШапки.ОтветственныйЗаОформление;
	Иначе
		// В шапке СФ нет поля ОтветственныйЗаОформление.
		ПервичныйДокумент = ВыборкаШапки.СсылкаНаПервичныйДокумент;
		ОтветственныйЗаОформление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент,
			"ОтветственныйЗаОформление");
		Если НЕ ЗначениеЗаполнено(ОтветственныйЗаОформление) Тогда
			ОтветственныйЗаОформление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент,
				"Руководитель");
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветственныйЗаОформление.Пустая() Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен ответственный за оформление УПД.'");
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПодписантыОрганизацийЕИС.Ссылка КАК Ссылка,
	               |	ПодписантыОрганизацийЕИС.Наименование КАК Наименование,
	               |	ПодписантыОрганизацийЕИС.Фамилия КАК Фамилия,
	               |	ПодписантыОрганизацийЕИС.Имя КАК Имя,
	               |	ПодписантыОрганизацийЕИС.Отчество КАК Отчество,
	               |	ПодписантыОрганизацийЕИС.Должность КАК Должность
	               |ИЗ
	               |	Справочник.ПодписантыОрганизацийЕИС КАК ПодписантыОрганизацийЕИС
	               |ГДЕ
	               |	ПодписантыОрганизацийЕИС.Организация = &Организация
	               |	И ПодписантыОрганизацийЕИС.Наименование = &ФИО
	               |	И ПодписантыОрганизацийЕИС.Актуален = ИСТИНА";
	Запрос.УстановитьПараметр("Организация", ВыборкаШапки.Поставщик);
	Запрос.УстановитьПараметр("ФИО", ОтветственныйЗаОформление.ФИО);
	ВыборкаПодписантов = Запрос.Выполнить().Выбрать();
	
	Если НЕ ВыборкаПодписантов.Следующий() Тогда
		ОписаниеОшибки = НСтр("ru = 'Сотрудник %1 не найден в списке подписантов личного кабинета ЕИС.'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОтветственныйЗаОформление.ФИО);
		ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
			ДанныеПриложенияЕИС, ОписаниеОшибки);
	Иначе
		Подписант = ВыборкаПодписантов.Ссылка;
		ПорядковыйНомерРуководителяОрганизации = 1;
		СтрокаПодписант = ТаблицаПодписанты.Добавить();
		Если СтрДлина(ВыборкаШапки.Поставщик.ИНН) = 12 Тогда
			СтрокаПодписант.ТипПодписанта = Перечисления.ТипыПодписантовЕИС.ИндивидуальныйПредприниматель;
		Иначе
			СтрокаПодписант.ТипПодписанта = Перечисления.ТипыПодписантовЕИС.ПредставительЮридическогоЛица;
		КонецЕсли;
		СтрокаПодписант.ИНН = ВыборкаШапки.Поставщик.ИНН;
		ЗаполнитьЗначенияСвойств(СтрокаПодписант, Подписант);
		СтрокаПодписант.Статус = "1";
		Если ЭтоУКД Тогда
			СтрокаПодписант.ОбластьПолномочий = "6";
		Иначе
			СтрокаПодписант.ОбластьПолномочий = "5";
		КонецЕсли;
		СтрокаПодписант.ОснованиеПолномочий = "Должностные обязанности";
		СтрокаПодписант.НомерСтроки = НомерСтроки;
		ДанныеПриложенияЕИС.ПорядковыйНомерРуководителяОрганизации = ПорядковыйНомерРуководителяОрганизации;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДанныеЭлектронногоАктированияЕИС.Подписанты",
			ТаблицаПодписанты);
		СтрокаПодписант.Организация = ВыборкаШапки.Поставщик;
	КонецЕсли;
		
	Если ВыборкаШапки.Свойство("ДокументОснование") Тогда
		ДанныеПриложенияЕИС.ДокументОснование = ВыборкаШапки.ДокументОснование;
	КонецЕсли;
	ДанныеПриложенияЕИС.Контрагент = ВыборкаШапки.Покупатель;
	
	ДанныеКонтракта = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0];
	ДанныеПриложенияЕИС.ДоговорКонтрагента = ДанныеКонтракта.ДоговорКонтрагента;
	
	Если ЭтоУКД Тогда
		ЗаполнитьДанныеПриложенияУКД(
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеПриложенияЕИС);
	Иначе
		ЗаполнитьДанныеПриложенияУПД(
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеПриложенияЕИС);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения",
		ДанныеПриложенияЕИС);
		
	// Информация продавца об обстоятельствах закупок для государственных и муниципальных нужд.
	Если НЕ ЭтоУКД Тогда
		
		ЗакупкаДляГосударственныхНужд = Новый Структура;
		ЗакупкаДляГосударственныхНужд.Вставить("ДатаГосКонтракта", ДанныеКонтракта.ДатаЗаключенияКонтракта);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерГосКонтракта", ДанныеКонтракта.Номер);
		Для каждого КлючЗначение Из ЗакупкаДляГосударственныхНужд Цикл
			Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				Путь = "ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд." + КлючЗначение.Ключ;
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение идентификатора государственного контракта.
	// Идентификатор заполняется только для гос.оборон заказа.
	НомерГОЗ = ДанныеКонтракта.НомерГОЗ;
	ЭтоГОЗ = ДанныеКонтракта.ЭтоКонтрактГОЗ;
	Если ЭтоГОЗ И ЗначениеЗаполнено(НомерГОЗ) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
			НомерГОЗ);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ДополнитьДанныеШапкиСведениямиОбЭлектронномАктировании(ДанныеШапки, ПараметрыОснования) Экспорт
	
	Если ПараметрыОснования.Свойство("ДанныеЭлектронногоАктирования") Тогда
		ДанныеШапки.Вставить("ДанныеЭлектронногоАктирования",
			ПараметрыОснования.ДанныеЭлектронногоАктирования);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц, ИмяДокумента) Экспорт
	
	НомераТаблиц.Вставить("ДанныеСтрокАктированияЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПодписантыДокументовЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПриложенныеФайлыДляЭлектронногоАктированияЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДанныеГосконтракта", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДанныеДетализации", НомераТаблиц.Количество());
	
	ТекстЗапроса = ОбщаяЧастьЗапросаДляПечати();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", ИмяДокумента);
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ОбщаяЧастьЗапросаДляПечати()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДанныеДляАктированияЕИС.ИдентификаторСтрокиГосконтрактаЕИС КАК ИдентификаторДляАктированияЕИС,
	               |	1 КАК КоличествоСтрок,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка КАК Ссылка,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки КАК НомерСтроки,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнешнийИдентификатор КАК ВнешнийИдентификатор,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнутреннийИдентификаторЕИС КАК ВнутреннийИдентификаторЕИС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК Идентификатор,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодТовараДляЕИС КАК КодТовараДляЕИС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Наименование,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ОбъемРаботыУслуги КАК ОбъемРаботыУслуги,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроизводителя КАК СтранаПроизводителяКонтракт,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхожденияКонтракт,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Тип КАК Тип,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоЛекарственныйПрепарат КАК ЭтоЛекарственныйПрепарат,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоМедицинскоеИзделие КАК ЭтоМедицинскоеИзделие,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК ЭтоРаботаИлиУслуга,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЦенаЗаЕдиницуИзмерения КАК ЦенаЗаЕдиницуИзмерения
	               |ИЗ
	               |	ТаблицаДокумента КАК ДанныеДляАктированияЕИС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	               |		ПО ДанныеДляАктированияЕИС.ИдентификаторСтрокиГосконтрактаЕИС = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор
	               |ГДЕ
	               |	ДанныеДляАктированияЕИС.Ссылка = &ДокументОснование
	               |	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &ГосударственныйКонтрактЕИС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПодписантыДокументовЕИС.Подписант.ОбластьПолномочий КАК ОбластьПолномочий,
	               |	ПодписантыДокументовЕИС.Подписант.ОснованиеПолномочий КАК ОснованиеПолномочий,
	               |	ПодписантыДокументовЕИС.Подписант.Фамилия КАК Фамилия,
	               |	ПодписантыДокументовЕИС.Подписант.Имя КАК Имя,
	               |	ПодписантыДокументовЕИС.Подписант.Отчество КАК Отчество,
	               |	ПодписантыДокументовЕИС.Подписант.ИНН КАК ИНН,
	               |	ПодписантыДокументовЕИС.Подписант.Должность КАК Должность,
	               |	ПодписантыДокументовЕИС.Статус КАК Статус,
	               |	ПодписантыДокументовЕИС.Подписант.ТипПодписанта КАК ТипПодписанта,
	               |	ПодписантыДокументовЕИС.Подписант.ПолноеНаименованиеОрганизации КАК ПодписантПолноеНаименованиеОрганизации,
	               |	ПодписантыДокументовЕИС.ОбластьПолномочий КАК ОбластьПолномочийДокумент,
	               |	ПодписантыДокументовЕИС.ОснованиеПолномочий КАК ОснованиеПолномочийДокумент
	               |ИЗ
	               |	РегистрСведений.ПодписантыДокументовЕИС КАК ПодписантыДокументовЕИС
	               |ГДЕ
	               |	ПодписантыДокументовЕИС.Подписант.Актуален = ИСТИНА
	               |	И ПодписантыДокументовЕИС.Подписант.ПометкаУдаления = ЛОЖЬ
	               |	И ПодписантыДокументовЕИС.Документ = &ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Код КАК КодВида,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Наименование КАК НаименованиеВида,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения КАК ВидВложения,
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	               |ИЗ
	               |	РегистрСведений.ПриложенныеФайлыДляЭлектронногоАктированияЕИС КАК ПриложенныеФайлыДляЭлектронногоАктированияЕИС
	               |ГДЕ
	               |	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.Документ = &ДокументОснование
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГосударственныеКонтрактыЕИС.Ссылка КАК Ссылка,
	               |	ГосударственныеКонтрактыЕИС.Код КАК Код,
	               |	ГосударственныеКонтрактыЕИС.ВнутреннийИдентификаторЕИС КАК ВнутреннийИдентификаторЕИС,
	               |	ГосударственныеКонтрактыЕИС.ЕстьАвансы КАК ЕстьАвансы,
	               |	ГосударственныеКонтрактыЕИС.ЕстьАвансыПоЭтапам КАК ЕстьАвансыПоЭтапам,
	               |	ГосударственныеКонтрактыЕИС.ЕстьЛекарственныеПрепараты КАК ЕстьЛекарственныеПрепараты,
	               |	ГосударственныеКонтрактыЕИС.ЕстьРаботыИлиУслуги КАК ЕстьРаботыИлиУслуги,
	               |	ГосударственныеКонтрактыЕИС.ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении КАК ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении,
	               |	ГосударственныеКонтрактыЕИС.ЕстьПриобретениеЖилыхПомещений,
	               |	ГосударственныеКонтрактыЕИС.ИдентификаторУчастникаДокументооборотаЗаказчика КАК ИдентификаторУчастникаДокументооборотаЗаказчика,
	               |	ГосударственныеКонтрактыЕИС.ИдентификационныйКодЗакупки КАК ИдентификационныйКодЗакупки,
	               |	ГосударственныеКонтрактыЕИС.НомерИГК КАК НомерИГК,
	               |	ГосударственныеКонтрактыЕИС.Номер КАК Номер,
	               |	ГосударственныеКонтрактыЕИС.ДатаЗаключенияКонтракта КАК ДатаЗаключенияКонтракта,
	               |	ГосударственныеКонтрактыЕИС.ПредметОтноситсяКРаботамПоСтроительству КАК ПредметОтноситсяКРаботамПоСтроительству,
	               |	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеЗаказчика КАК ПолноеНаименованиеЗаказчика,
	               |	&ЭтапИсполненияКонтрактаЕИС КАК ИдентификаторЭтапаКонтракта,
	               |	ГосударственныеКонтрактыЕИС.ВладелецКонтракта КАК ДоговорКонтрагента,
	               |	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеПоставщика КАК ПолноеНаименованиеПоставщика,
	               |	ГосударственныеКонтрактыЕИС.ЭтоКонтрактГОЗ КАК ЭтоКонтрактГОЗ,
	               |	ГосударственныеКонтрактыЕИС.НомерГОЗ КАК НомерГОЗ,
	               |	ГосударственныеКонтрактыЕИСЭтапыИсполнения.ВнутреннийИдентификаторЕИС КАК ТехническийИдентификаторЭтапаКонтракта,
	               |	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеПоставщика,
	               |	ГосударственныеКонтрактыЕИС.УказанаМаксимальнаяЦена КАК УказанаМаксимальнаяЦена,
	               |	ГосударственныеКонтрактыЕИС.ТребуетсяКазначейскоеСопровождение КАК ТребуетсяКазначейскоеСопровождение,
	               |	ГосударственныеКонтрактыЕИС.ФормулаЦены КАК ФормулаЦены,
	               |	ГосударственныеКонтрактыЕИС.НевозможноУказатьКоличество
	               |ИЗ
	               |	Справочник.ГосударственныеКонтрактыЕИС.ЭтапыИсполнения КАК ГосударственныеКонтрактыЕИСЭтапыИсполнения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС КАК ГосударственныеКонтрактыЕИС
	               |		ПО ГосударственныеКонтрактыЕИСЭтапыИсполнения.Ссылка = ГосударственныеКонтрактыЕИС.Ссылка
	               |			И (ГосударственныеКонтрактыЕИСЭтапыИсполнения.Идентификатор = &ЭтапИсполненияКонтрактаЕИС)
	               |ГДЕ
	               |	ГосударственныеКонтрактыЕИС.Ссылка = &ГосударственныйКонтрактЕИС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц, ИмяДокумента) Экспорт

	НомераТаблиц.Вставить("МестаПоставкиДокументовДляЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДанныеСтрокАктированияЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПодписантыДокументовЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПриложенныеФайлыДляЭлектронногоАктированияЕИС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДанныеГосконтракта", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДанныеДетализации", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МестаПоставкиДокументовДляЕИС.Организация,
	|	МестаПоставкиДокументовДляЕИС.Документ КАК Регистратор,
	|	МестаПоставкиДокументовДляЕИС.Место,
	|	МестаПоставкиДокументовДляЕИС.Классификатор,
	|	МестаПоставкиДокументовДляЕИС.Код,
	|	МестаПоставкиДокументовДляЕИС.Наименование,
	|	МестаПоставкиДокументовДляЕИС.Адрес,
	|	МестаПоставкиДокументовДляЕИС.РайонИлиГород,
	|	МестаПоставкиДокументовДляЕИС.НаселенныйПункт,
	|	МестаПоставкиДокументовДляЕИС.ДанныеМеста
	|ИЗ
	|	РегистрСведений.МестаПоставкиДокументовДляЕИС КАК МестаПоставкиДокументовДляЕИС
	|ГДЕ
	|	МестаПоставкиДокументовДляЕИС.Документ = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаДляПечати();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", ИмяДокумента);
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ДокументОтправляетсяВЕИС(ДокументСсылка) Экспорт
	
	ПоддерживаетсяОтправка = Новый Массив;
	Тип = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ПоддерживаетсяОтправка.Добавить(Тип);
	Тип = Тип("ДокументСсылка.КорректировкаРеализации");
	ПоддерживаетсяОтправка.Добавить(Тип);
	ТипЗначения = ТипЗнч(ДокументСсылка);
	
	Возврат ПоддерживаетсяОтправка.Найти(ТипЗначения) <> Неопределено;
	
КонецФункции

// Если документ содержит договор, привязанный к контракту, выводим предупреждение пользователю.
Процедура ПроверитьДоговорЭД(Настройки, ДанныеДляФормированияЭД, ДеревоДанных, ЭтоУКД) Экспорт
	
	Если НЕ Настройки.Свойство("Договор")
		ИЛИ НЕ Настройки.Свойство("Отправитель")
		ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДляФормированияЭД, "ДокументыОснования") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиВЕИС = ПараметрыОтправкиВЕИС(
		Настройки.Отправитель, Настройки.Договор);
		
	Если НЕ ПараметрыОтправкиВЕИС.ВозможнаОтправка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Ложь;
	Для каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ЭтоВозврат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоУКД Тогда
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУКД();
	Иначе
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУПД();
	КонецЕсли;
	
	Если ЭтоУКД И ЭтоВозврат Тогда
		ТекстОшибки = НСтр("ru='Возврат товаров от покупателя не отправляется при актировании. Используйте корректировку реализации.'");
	Иначе
		Шаблон = НСтр("ru='Выбран договор, привязанный к контракту %1. Отправка документа в ЕИС не поддерживается, для отправки контрагенту используйте договор без привязки к госконтракту.'");
		ТекстОшибки = СтрШаблон(Шаблон, ПараметрыОтправкиВЕИС.Контракт);
	КонецЕсли;
	
	// Закладываем текст ошибки в данные электронного актирования в дереве документа.
	ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения", ДанныеПриложенияЕИС);
	
КонецПроцедуры

Функция ПараметрыОтправкиВЕИС(Организация, Договор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВозможнаОтправка", Ложь);
	Результат.Вставить("Контракт", Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
		И ЭлектронноеАктированиеЕИС.ОбменПоОрганизацииВключен(Организация) Тогда
		Контракт = ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Договор);
		Если ЗначениеЗаполнено(Контракт) Тогда
			Результат.ВозможнаОтправка = Истина;
			Результат.Контракт = Контракт;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// см. ЭлектронноеАктированиеЕИСПереопределяемый.КнопкиЗаполненияТабличныхЧастейДокументов()
Процедура КнопкиЗаполненияТабличныхЧастейДокументов(Форма, Кнопки) Экспорт
	
	Кнопки.Добавить("ТоварыЗаполнитьПоКонтракту");
	Кнопки.Добавить("УслугиЗаполнитьПоКонтракту");
	
КонецПроцедуры

// см. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг()
Функция ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг(
			СсылкаНаДокумент, ДеревоТоваров, ДеревоРаботУслуг) Экспорт
		
	Результат = ЭлектронноеАктированиеЕИС.НовыйРезультатЗаполненияТабличныхЧастей();
	
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();

	Ошибки = Новый Массив;
	
	КоличествоСтрокВДокументе = ДокументОбъект.Товары.Количество();
	Для Каждого РодительскаяСтрока Из ДеревоТоваров.Строки Цикл
		Если РодительскаяСтрока.Строки.Количество() = 0 Тогда
			// Без детализации.
			Если РодительскаяСтрока.НомерСтроки < КоличествоСтрокВДокументе Тогда
				СтрокаДокумента = ДокументОбъект.Товары.Получить(РодительскаяСтрока.НомерСтроки - 1);
				СтрокаДокумента.Количество = РодительскаяСтрока.Количество;
				СтрокаДокумента.Сумма = РодительскаяСтрока.Сумма;
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, РодительскаяСтрока);
			КонецЕсли;
		Иначе
			Для Каждого СтрокаДетализации Из РодительскаяСтрока.Строки Цикл
				Если СтрокаДетализации.Номенклатура.Пустая() Тогда
					ОписаниеОшибки = НСтр("ru='Не заполнена номенклатура.'");
					Ошибки.Добавить(ОписаниеОшибки);
				КонецЕсли;
				Если СтрокаДетализации.НомерСтроки > 0 Тогда
					// Строки с номером.
					Если РодительскаяСтрока.НомерСтроки <= КоличествоСтрокВДокументе Тогда
						СтрокаДокумента = ДокументОбъект.Товары.Получить(СтрокаДетализации.НомерСтроки - 1);
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДетализации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Если Ошибки.Количество() > 0 Тогда
		Результат.ОписаниеОшибки = СтрСоединить(Ошибки);
		Возврат Результат;
	КонецЕсли;

	Для Каждого РодительскаяСтрока Из ДеревоТоваров.Строки Цикл
		Если РодительскаяСтрока.Строки.Количество() > 0 Тогда
			// Новые строки.
			Для Каждого СтрокаДетализации Из РодительскаяСтрока.Строки Цикл
				Если СтрокаДетализации.НомерСтроки = 0 Тогда
					// Строки без номера.
					СтрокаДокумента = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДетализации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
		
КонецФункции

Процедура СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма, ДекорацияГосударственныйКонтракт) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ГруппаДекорации = ЭлементыФормы.ГруппаШапка;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ГруппаДекорации = ЭлементыФормы.ГруппаШапка.ПодчиненныеЭлементы[0];
	КонецЕсли;
	
	ИмяДекорации = ЭлектронноеАктированиеЕИС.ИмяДекорацииФормыПараметровЭлектронногоАктированияДокумента();
	ТипДекорации = Тип("ДекорацияФормы");
	ДекорацияГосударственныйКонтракт = ЭлементыФормы.Вставить(
			ИмяДекорации,
			ТипДекорации,
			ГруппаДекорации);
	ДекорацияГосударственныйКонтракт.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияГосударственныйКонтракт.Гиперссылка = Истина;
	ДекорацияГосударственныйКонтракт.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияГосударственныйКонтракт.Заголовок = "<нет данных о контракте>";
	
КонецПроцедуры

Процедура ЗаполнитьМестаПоставкиПриложенияЕИСПоДаннымУчастника(СведенияОбУчастнике, ДанныеУчастника, СтрокаУчастника, ВидУчастника, ДанныеПриложенияЕИС) Экспорт
	
	Если ВРег(ВидУчастника) = ВРег("СведенияОПокупателе") Тогда
		ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаПокупателя();
	ИначеЕсли ВРег(ВидУчастника) = ВРег("СведенияОГрузополучателе") Тогда
		ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаГрузополучателя();
	КонецЕсли;

	СтрокаУчастника.ИнформацияДляУчастника = ИдентификаторУчастника;
	
	Если ДанныеУчастника.Адрес.Свойство("АдресИнформация") Тогда
		АдресИнформация = ДанныеУчастника.Адрес.АдресИнформация;
		МестоПоставки = ЭлектронноеАктированиеЕИС.НовыеСведенияОМестеПоставкиТовара();
		МестоПоставки.Место = АдресИнформация.АдресТекст;
		МестоПоставки.Наименование = АдресИнформация.АдресТекст;
		МестоПоставки.Классификатор = ЭлектронноеАктированиеЕИС.МестоПоставкиПоКЛАДР();
		МестоПоставки.РайонИлиГород = "-";
		МестоПоставки.НаселенныйПункт = "-";
		Если АдресИнформация.Свойство("КодРегиона")
			И ЗначениеЗаполнено(АдресИнформация.КодРегиона) Тогда
			МестоПоставки.Код = ЭлектронноеАктированиеЕИС.КодКЛАДРПроизвольногоАдреса(
			АдресИнформация.КодРегиона);
		Иначе
			Шаблон = НСтр("ru='Не удалось определить код региона адреса: %1'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресИнформация.АдресТекст);
			ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложенияЕИС, ТекстОшибки);
			Возврат;
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("ИдентификаторМестаПоставкиЕИС") Тогда
			ИдентификаторМеста = СведенияОбУчастнике.ИдентификаторМестаПоставкиЕИС;
			ДанныеПриложенияЕИС.МестаПоставки.Очистить();
		Иначе
			ИдентификаторМеста = Строка(Новый УникальныйИдентификатор);
			ИдентификаторМеста = СтрЗаменить(ИдентификаторМеста, "-", "");
		КонецЕсли;
		МестоПоставки.Идентификатор = ИдентификаторМеста;
		МестоПоставки.ИдентификаторУчастника = ИдентификаторУчастника;
		ДанныеПриложенияЕИС.МестаПоставки.Добавить(МестоПоставки);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.НайтиСоздатьКонтрагентаПоСведениямОЗаказчике
Функция НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП");
	
	Запрос.УстановитьПараметр("ИНН", ДанныеКонтрагента.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеКонтрагента.КПП);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 0 Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		НовыйКонтрагент.ИНН = ДанныеКонтрагента.ИНН;
		НовыйКонтрагент.КПП = ДанныеКонтрагента.КПП;
		НовыйКонтрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.СокращенноеНаименование) Тогда
			НовыйКонтрагент.Наименование = ДанныеКонтрагента.СокращенноеНаименование;
		Иначе
			НовыйКонтрагент.Наименование = ДанныеКонтрагента.ПолноеНаименование;
		КонецЕсли;
		НовыйКонтрагент.НаименованиеПолное = ДанныеКонтрагента.ПолноеНаименование;
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
		Контрагент = НовыйКонтрагент.Ссылка;
	Иначе
		Контрагент = Выборка[0].Ссылка;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция ГосударственныйКонтрактДокумента(Знач Документ) Экспорт
	
	Возврат ЭлектронноеАктированиеЕИС.ГосударственныйКонтрактДоговора(Документ.ДоговорКонтрагента);
	
КонецФункции

// Преобразование прикладного значения ставки в текстовое для приложения УПД/УКД.
Функция СтавкаНДСДляПриложенияЕИС(Знач СтавкаНДС) Экспорт
	
	СтавкиНДС = Новый Соответствие;
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС0, "0%");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС10, "10%");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС18, "18%");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС20, "20%");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, "10/110");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, "18/118");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС20_120, "20/120");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.БезНДС, "без НДС");
	СтавкаНДСПриложения = СтавкиНДС[СтавкаНДС];
	
	Если СтавкаНДСПриложения = Неопределено Тогда
		ТекстОшибки= НСтр("ru='Неизвестная ставка НДС.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтавкаНДСПриложения;
	
КонецФункции

Функция Версия() Экспорт
	
	Возврат ОбщегоНазначенияБП.ПредставлениеПрограммы() + " " + Метаданные.Версия;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция ПолучитьСписокСтрокГосконтрактаПоУслуге(Номенклатура, ГосконтрактЕИС) Экспорт
	
	СписокСтрокКонтракта = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат СписокСтрокКонтракта;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Наименование,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК Идентификатор,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|ГДЕ
	|	НЕ ГосударственныеКонтрактыЕИСОбъектыЗакупки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовЗакупкиЕИС.Товар)
	|	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтрокКонтракта.Добавить(Выборка.Идентификатор,
			ПредставлениеНоменклатурыГосконтракта(Выборка.Наименование, Выборка.Цена));
	КонецЦикла;
	
	Возврат СписокСтрокКонтракта;
	
КонецФункции

Процедура ЗаполнитьПоГосконтракту(Объект, ГосконтрактЕИС, ИменаТабличныхЧастей) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Содержание,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ЕСТЬNULL(ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК Услуга,
	|	ЕСТЬNULL(ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Количество, 0) КАК КоличествоНоменклатуры
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор)
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|	И (НЕ ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура ЕСТЬ NULL
	|			ИЛИ ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки";
	
	Результат       = Запрос.Выполнить().Выбрать();
	ЗаполнятьТовары = Ложь;
	ЗаполнятьУслуги = Ложь;
	
	СтрокиДляЗаполненияСчетовТовары = Новый Массив;
	СтрокиДляЗаполненияСчетовУслуги = Новый Массив;
	
	Если СтрНайти(ИменаТабличныхЧастей, "Товары") > 0 Тогда
		ЗаполнятьТовары = Истина;
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Если СтрНайти(ИменаТабличныхЧастей, "Услуги") > 0 Тогда
		ЗаполнятьУслуги = Истина;
		Объект.Услуги.Очистить();
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ Результат.Услуга И ЗаполнятьТовары Тогда
			НоваяСтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, Результат);
			Если Результат.КоличествоНоменклатуры < Результат.Количество
				И Результат.Количество <> 0 Тогда
				НоваяСтрокаТовары.Количество = Результат.КоличествоНоменклатуры;
				НоваяСтрокаТовары.Сумма = Результат.Сумма*Результат.КоличествоНоменклатуры/Результат.Количество;
			КонецЕсли;
			НоваяСтрокаТовары.СтавкаНДС = Результат.СтавкаНДС;
			Если Не ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда
				НоваяСтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовары, Объект.СуммаВключаетНДС);
			
			СтрокиДляЗаполненияСчетовТовары.Добавить(НоваяСтрокаТовары);
		КонецЕсли;
		
		Если Результат.Услуга И ЗаполнятьУслуги Тогда
			НоваяСтрокаУслуги = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, Результат);
			Если Результат.КоличествоНоменклатуры < Результат.Количество
				И Результат.Количество <> 0 Тогда
				НоваяСтрокаУслуги.Количество = Результат.КоличествоНоменклатуры;
				НоваяСтрокаУслуги.Сумма = Результат.Сумма*Результат.КоличествоНоменклатуры/Результат.Количество;
			КонецЕсли;
			НоваяСтрокаУслуги.СтавкаНДС = Результат.СтавкаНДС;
			Если Не ЗначениеЗаполнено(НоваяСтрокаУслуги.СтавкаНДС) Тогда
				НоваяСтрокаУслуги.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуги, Объект.СуммаВключаетНДС);
			
			СтрокиДляЗаполненияСчетовУслуги.Добавить(НоваяСтрокаУслуги);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнятьТовары И СтрокиДляЗаполненияСчетовТовары.Количество() > 0 Тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			СтрокиДляЗаполненияСчетовТовары, "Товары", Объект, Документы.РеализацияТоваровУслуг);
		
	КонецЕсли;
		
	Если ЗаполнятьУслуги И СтрокиДляЗаполненияСчетовУслуги.Количество() > 0 Тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			СтрокиДляЗаполненияСчетовУслуги, "Услуги", Объект, Документы.РеализацияТоваровУслуг);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеСтрокиСведениямиПоГосконтракту(СтрокаТабличнойЧасти, ГосконтрактЕИС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГосконтрактЕИС", ГосконтрактЕИС);
	Запрос.УстановитьПараметр("ИдентификаторСтрокиГосконтрактаЕИС", СтрокаТабличнойЧасти.ИдентификаторСтрокиГосконтрактаЕИС);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Содержание,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ЕСТЬNULL(ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК Услуга,
	|	ЕСТЬNULL(ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Количество, 0) КАК КоличествоНоменклатуры
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор)
	|			И (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура = &Номенклатура)
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &ГосконтрактЕИС
	|	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор = &ИдентификаторСтрокиГосконтрактаЕИС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		Если Выборка.КоличествоНоменклатуры < Выборка.Количество
				И Выборка.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.Количество = Выборка.КоличествоНоменклатуры;
			СтрокаТабличнойЧасти.Сумма      = Выборка.Сумма * Выборка.КоличествоНоменклатуры / Выборка.Количество;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС), Выборка.СтавкаНДС,
			Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиПоСодержаниюУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГосконтрактЕИС", ДанныеОбъекта.ГосконтрактЕИС);
	Запрос.УстановитьПараметр("ИдентификаторСтрокиГосконтрактаЕИС", СтрокаТабличнойЧасти.ИдентификаторСтрокиГосконтрактаЕИС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Содержание,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК Услуга
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &ГосконтрактЕИС
	|	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор = &ИдентификаторСтрокиГосконтрактаЕИС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС), Выборка.СтавкаНДС,
			Перечисления.СтавкиНДС.БезНДС);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыДобавленияРеквизитов(Форма)
	
	Если Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая"
			ИЛИ Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаТовары"
			ИЛИ Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаУслуги" Тогда
		ПараметрыДобавленияРеквизитов = Новый Структура();
		ПараметрыДобавленияРеквизитов.Вставить("ГруппаДекорации", Форма.Элементы.ГруппаШапкаЛевая);
		ПараметрыДобавленияРеквизитов.Вставить("ПередЭлементом", Форма.Элементы.ГруппаСчетНаОплату);
		
		ПараметрыДобавленияРеквизитов.Вставить("ЭтапГосконтрактаЕИСДоступность", Истина);
		
		ПараметрыДобавленияРеквизитов.Вставить("ГруппаДекорацииФайлы", Форма.Элементы.ГруппаПодвал);
		ПараметрыДобавленияРеквизитов.Вставить("ПередЭлементомФайлы", Форма.Элементы.ГруппаВидЭД);
		
		Возврат ПараметрыДобавленияРеквизитов;
	ИначеЕсли Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента" Тогда
		ПараметрыДобавленияРеквизитов = Новый Структура();
		ПараметрыДобавленияРеквизитов.Вставить("ГруппаДекорации", Форма.Элементы.ГруппаШапка);
		ПараметрыДобавленияРеквизитов.Вставить("ПередЭлементом", Неопределено);
		
		ПараметрыДобавленияРеквизитов.Вставить("ЭтапГосконтрактаЕИСДоступность", Ложь);
		
		ПараметрыДобавленияРеквизитов.Вставить("ГруппаДекорацииФайлы", Неопределено);
		ПараметрыДобавленияРеквизитов.Вставить("ПередЭлементомФайлы", Форма.Элементы.ГруппаСостояниеЭДО);
		Возврат ПараметрыДобавленияРеквизитов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, 
				ТоварыНоменклатура = "", 
				УслугиНоменклатура = "",
				УслугиСодержание = "") Экспорт
				
	//Добавляем реквизиты формы			
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ГосконтрактЕИС", Новый ОписаниеТипов("СправочникСсылка.ГосударственныеКонтрактыЕИС")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ГосконтрактЕИСНеЗаполнен", Новый ОписаниеТипов("Булево")));
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	//Добавляем команду для отправки файлов в ЕИС
	НоваяКомандаФормы           = Форма.Команды.Добавить("ФайлыЕИСГосзакупки");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Файлы'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Приложить файлы для электронного актирования в ЕИС Госзакупки'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ЕИСГосзакупкиОткрытьСписокФайлов";
	
	ПараметрыДобавленияРеквизитов = ПараметрыДобавленияРеквизитов(Форма);
	Если ЗначениеЗаполнено(ПараметрыДобавленияРеквизитов) Тогда
		ДобавитьРеквизитыФормы(Форма, ПараметрыДобавленияРеквизитов);
	КонецЕсли;
			
	ДоговорКонтрагентаПриИзмененииНаСервере(Форма, ТоварыНоменклатура, УслугиНоменклатура,	УслугиСодержание);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормы(Форма, ПараметрыДобавленияРеквизитов) 
	
	ФормаЭлементы = Форма.Элементы;
	
	//Добавляем поля формы
	ГруппаГосконтракт = ФормаЭлементы.Вставить("ГруппаГосконтракт", Тип("ГруппаФормы"), 
		ПараметрыДобавленияРеквизитов.ГруппаДекорации, ПараметрыДобавленияРеквизитов.ПередЭлементом);
	ГруппаГосконтракт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГосконтракт.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаГосконтракт.ОтображатьЗаголовок = Ложь;
	ГруппаГосконтракт.Видимость = Ложь;
	
	ДекорацияГосконтракт = ФормаЭлементы.Вставить("ГосконтрактЕИС", Тип("ПолеФормы"), Форма.Элементы.ГруппаГосконтракт);
	ДекорацияГосконтракт.Вид = ВидПоляФормы.ПолеНадписи;
	ДекорацияГосконтракт.Гиперссылка = Истина;
	ДекорацияГосконтракт.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияГосконтракт.МаксимальнаяШирина = 25;
	ДекорацияГосконтракт.ПутьКДанным = "ГосконтрактЕИС";
	ДекорацияГосконтракт.Заголовок = "Госконтракт";
	
	ПолеЭтап = ФормаЭлементы.Вставить("ЭтапГосконтрактаЕИС", Тип("ПолеФормы"), Форма.Элементы.ГруппаГосконтракт);
	ПолеЭтап.Вид = ВидПоляФормы.ПолеВвода;
	ПолеЭтап.РежимВыбораИзСписка = Истина;
	ПолеЭтап.АвтоМаксимальнаяШирина = Ложь;
	ПолеЭтап.МаксимальнаяШирина = 15;
	ПолеЭтап.ПутьКДанным = "Объект.ЭтапГосконтрактаЕИС";
	ПолеЭтап.Заголовок = "Этап";
	ПолеЭтап.Доступность = ПараметрыДобавленияРеквизитов.ЭтапГосконтрактаЕИСДоступность;
	
	ГруппаФайлыГосконтракта = ФормаЭлементы.Вставить("ГруппаФайлыГосконтракта", Тип("ГруппаФормы"), 
		ПараметрыДобавленияРеквизитов.ГруппаДекорацииФайлы, ПараметрыДобавленияРеквизитов.ПередЭлементомФайлы);
	ГруппаФайлыГосконтракта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФайлыГосконтракта.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФайлыГосконтракта.ОтображатьЗаголовок = Ложь;
	ГруппаФайлыГосконтракта.Видимость = Ложь;
	
	НовыйЭлемент = ФормаЭлементы.Вставить("ДекорацияФайлыЕИСГосзакупки", Тип("ДекорацияФормы"), Форма.Элементы.ГруппаФайлыГосконтракта);
	НовыйЭлемент.Заголовок  = "ЕИС Госзакупки:";
	
	НовыйЭлемент = ФормаЭлементы.Вставить("ФайлыЕИСГосзакупки", Тип("КнопкаФормы"), Форма.Элементы.ГруппаФайлыГосконтракта);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.Гиперссылка;
	НовыйЭлемент.ИмяКоманды = "ФайлыЕИСГосзакупки";
	
КонецПроцедуры

Функция НовыйДанныеНоменклатурыЕИС()
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура",                       Неопределено);
	ДанныеНоменклатуры.Вставить("Наименование",                       Неопределено);
	ДанныеНоменклатуры.Вставить("Услуга",                             Ложь);
	ДанныеНоменклатуры.Вставить("Цена",                               0);
	ДанныеНоменклатуры.Вставить("ИдентификаторСтрокиГосконтрактаЕИС", "");
	ДанныеНоменклатуры.Вставить("ПодборИзГосконтрактаЕИС",            Ложь);
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Процедура ДоговорКонтрагентаПриИзмененииНаСервере(Форма, 
				ТоварыНоменклатура = "", 
				УслугиНоменклатура = "",
				УслугиСодержание = "") Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеАктированиеВЕИС") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если НЕ (Объект.Свойство("ДоговорКонтрагента") И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГосконтракта = ЭлектронноеАктированиеЕИС.ДанныеГосконтрактаПоВладельцу(Объект.ДоговорКонтрагента);
	
	Форма.ГосконтрактЕИС           = ДанныеГосконтракта.ГосконтрактЕИС;
	Форма.ГосконтрактЕИСНеЗаполнен = ДанныеГосконтракта.ГосконтрактЕИСНеЗаполнен;
	
	//Скроем лишние
	Форма.Элементы.ГруппаГосконтракт.Видимость = ЗначениеЗаполнено(Форма.ГосконтрактЕИС);
	Форма.Элементы.ГруппаФайлыГосконтракта.Видимость = ЗначениеЗаполнено(Форма.ГосконтрактЕИС);
	Если НЕ Форма.Элементы.Найти("ТоварыПодборТовары") = Неопределено Тогда
		Форма.Элементы.ТоварыПодборТовары.Видимость = НЕ ЗначениеЗаполнено(Форма.ГосконтрактЕИС);
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("УслугиПодборУслуги") = Неопределено Тогда
		Форма.Элементы.УслугиПодборУслуги.Видимость = НЕ ЗначениеЗаполнено(Форма.ГосконтрактЕИС);
	КонецЕсли;
	
	//Заполним списки выборов в табличных частях
	ЗаполнятьТовары     = Ложь;
	ЗаполнятьУслуги     = Ложь;
	ЗаполнятьСодержание = Ложь;
	
	ТоварыНоменклатура = ?(ЗначениеЗаполнено(ТоварыНоменклатура), ТоварыНоменклатура, "ТоварыНоменклатура");
	УслугиНоменклатура = ?(ЗначениеЗаполнено(УслугиНоменклатура), УслугиНоменклатура, "УслугиНоменклатура");
	УслугиСодержание   = ?(ЗначениеЗаполнено(УслугиСодержание), УслугиСодержание, "УслугиСодержание");
	
	Если НЕ Форма.Элементы.Найти(ТоварыНоменклатура) = Неопределено Тогда
		ЗаполнятьТовары = Истина;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти(УслугиНоменклатура) = Неопределено Тогда
		ЗаполнятьУслуги = Истина;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти(УслугиСодержание) = Неопределено Тогда
		ЗаполнятьСодержание = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ГосконтрактЕИС) Тогда
		
		Если ЗаполнятьТовары Тогда
			Форма.Элементы[ТоварыНоменклатура].СписокВыбора.Очистить();
			Форма.Элементы[ТоварыНоменклатура].РежимВыбораИзСписка = Истина;
			Форма.Элементы[ТоварыНоменклатура].КнопкаСоздания = Ложь;
			Форма.Элементы[ТоварыНоменклатура].КнопкаОткрытия = Ложь;
		КонецЕсли;
		
		Если ЗаполнятьУслуги Тогда
			Форма.Элементы[УслугиНоменклатура].СписокВыбора.Очистить();
			Форма.Элементы[УслугиНоменклатура].РежимВыбораИзСписка = Истина;
			Форма.Элементы[УслугиНоменклатура].КнопкаСоздания = Ложь;
			Форма.Элементы[УслугиНоменклатура].КнопкаОткрытия = Ложь;
			
			Если ЗаполнятьСодержание Тогда
				Форма.Элементы[УслугиСодержание].СписокВыбора.Очистить();
				Форма.Элементы[УслугиСодержание].РежимВыбораИзСписка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеГосконтракта.ТаблицаНоменклатуры) Тогда
			Для Каждого СтрокаТаблицыНоменклатуры Из ДанныеГосконтракта.ТаблицаНоменклатуры Цикл
				ДанныеНоменклатуры = НовыйДанныеНоменклатурыЕИС();
				ДанныеНоменклатуры.Номенклатура            = СтрокаТаблицыНоменклатуры.НоменклатураГосконтракта;
				ДанныеНоменклатуры.Наименование            = СтрокаТаблицыНоменклатуры.НоменклатураГосконтрактаПредставление;
				ДанныеНоменклатуры.Услуга                  = СтрокаТаблицыНоменклатуры.Услуга;
				ДанныеНоменклатуры.Цена                    = СтрокаТаблицыНоменклатуры.Цена;
				ДанныеНоменклатуры.ИдентификаторСтрокиГосконтрактаЕИС = СтрокаТаблицыНоменклатуры.Идентификатор;
				ДанныеНоменклатуры.ПодборИзГосконтрактаЕИС = Истина;
				
				Если НЕ ДанныеНоменклатуры.Услуга И ЗаполнятьТовары Тогда
					Форма.Элементы[ТоварыНоменклатура].СписокВыбора.Добавить(ДанныеНоменклатуры,
						ПредставлениеНоменклатурыГосконтракта(ДанныеНоменклатуры.Наименование, ДанныеНоменклатуры.Цена));
				КонецЕсли;
				
				Если ДанныеНоменклатуры.Услуга И ЗаполнятьУслуги Тогда
					Форма.Элементы[УслугиНоменклатура].СписокВыбора.Добавить(ДанныеНоменклатуры,
						ПредставлениеНоменклатурыГосконтракта(ДанныеНоменклатуры.Наименование, ДанныеНоменклатуры.Цена));
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеГосконтракта.ТаблицаРаботУслуг) Тогда
			Для Каждого СтрокаРаботУслуг Из ДанныеГосконтракта.ТаблицаРаботУслуг Цикл
				ДанныеНоменклатуры = НовыйДанныеНоменклатурыЕИС();
				ДанныеНоменклатуры.Наименование            = СтрокаРаботУслуг.Наименование;
				ДанныеНоменклатуры.Услуга                  = Истина;
				ДанныеНоменклатуры.Цена                    = СтрокаРаботУслуг.Цена;
				ДанныеНоменклатуры.ИдентификаторСтрокиГосконтрактаЕИС = СтрокаРаботУслуг.Идентификатор;
				ДанныеНоменклатуры.ПодборИзГосконтрактаЕИС = Истина;
				
				Если ЗаполнятьСодержание Тогда
					Форма.Элементы[УслугиСодержание].СписокВыбора.Добавить(ДанныеНоменклатуры,
						ПредставлениеНоменклатурыГосконтракта(ДанныеНоменклатуры.Наименование, ДанныеНоменклатуры.Цена));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Заполнение этапов госконтракта
		Если ЗначениеЗаполнено(ДанныеГосконтракта.ТаблицаЭтапов) 
			И НЕ Форма.Элементы.Найти("ЭтапГосконтрактаЕИС") = Неопределено Тогда
			
			Форма.Элементы.ЭтапГосконтрактаЕИС.СписокВыбора.Очистить();
			
			Для Каждого ЭтапГосконтракта Из ДанныеГосконтракта.ТаблицаЭтапов Цикл
				Форма.Элементы.ЭтапГосконтрактаЕИС.СписокВыбора.Добавить(ЭтапГосконтракта.Идентификатор, Формат(ЭтапГосконтракта.ДатаОкончания, "ДЛФ=ДД"));
			КонецЦикла;
			
			Если Форма.Элементы.ЭтапГосконтрактаЕИС.СписокВыбора.Количество() = 1 Тогда
				Форма.Объект.ЭтапГосконтрактаЕИС = Форма.Элементы.ЭтапГосконтрактаЕИС.СписокВыбора[0].Значение;
				Форма.Элементы.ЭтапГосконтрактаЕИС.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗаполнятьТовары Тогда
			Форма.Элементы[ТоварыНоменклатура].СписокВыбора.Очистить();
			Форма.Элементы[ТоварыНоменклатура].РежимВыбораИзСписка = Ложь;
			Форма.Элементы[ТоварыНоменклатура].КнопкаСоздания = Истина;
			Форма.Элементы[ТоварыНоменклатура].КнопкаОткрытия = Истина;
		КонецЕсли;
		
		Если ЗаполнятьУслуги Тогда
			Форма.Элементы[УслугиНоменклатура].СписокВыбора.Очистить();
			Форма.Элементы[УслугиНоменклатура].РежимВыбораИзСписка = Ложь;
			Форма.Элементы[УслугиНоменклатура].КнопкаСоздания = Истина;
			Форма.Элементы[УслугиНоменклатура].КнопкаОткрытия = Истина;
			Если ЗаполнятьСодержание Тогда
				Форма.Элементы[УслугиСодержание].СписокВыбора.Очистить();
				Форма.Элементы[УслугиСодержание].РежимВыбораИзСписка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьИдентификаторыСтрокГосконтракта(Объект) Экспорт
	
	ГосконтрактЕИС = ЭлектронноеАктированиеЕИС.НайтиГосударственныйКонтрактПоВладельцу(Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура КАК Номенклатура,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор)
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|	И НЕ ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура ЕСТЬ NULL
	|	И НЕ ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга";
	
	ТаблицаИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовар из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.ИдентификаторСтрокиГосконтрактаЕИС) Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("Номенклатура, Цена", СтрокаТовар.Номенклатура, СтрокаТовар.Цена); 
		НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			СтрокаТовар.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
		Иначе
			// Если нет подходящих позиций госконтракта по номенклатуре и цене, то ищем только по номенклатуре.
			// Если при поиске по номенклатуре мы не сможем однозначно определить строку госконтракта, 
			// то идентификатор не заполняем.
			Отбор = Новый Структура("Номенклатура", СтрокаТовар.Номенклатура); 
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаТовар.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура УслугиЗаполнитьИдентификаторыСтрокГосконтракта(Объект) Экспорт
	
	ГосконтрактЕИС = ЭлектронноеАктированиеЕИС.НайтиГосударственныйКонтрактПоВладельцу(Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура КАК Номенклатура,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Наименование,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор)
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|	И ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга";
	
	ТаблицаИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаУслуга из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуга.ИдентификаторСтрокиГосконтрактаЕИС) Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по содержанию услуги и цене.
		Если ЗначениеЗаполнено(СтрокаУслуга.Содержание) Тогда
			Отбор = Новый Структура("Наименование, Цена", СтрокаУслуга.Содержание, СтрокаУслуга.Цена);
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				СтрокаУслуга.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Поиск по номенклатуре и цене.
		Если ЗначениеЗаполнено(СтрокаУслуга.Номенклатура) Тогда
			Отбор = Новый Структура("Номенклатура, Цена", СтрокаУслуга.Номенклатура, СтрокаУслуга.Цена);
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				СтрокаУслуга.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
				СтрокаУслуга.Содержание                         = НайденныеСтроки[0].Наименование;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Поиск по содержанию услуги.
		Если ЗначениеЗаполнено(СтрокаУслуга.Содержание) Тогда
			Отбор = Новый Структура("Наименование", СтрокаУслуга.Содержание);
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
			// Если при поиске по номенклатуре мы не сможем однозначно определить строку госконтракта, 
			// то идентификатор не заполняем.
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаУслуга.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУслуга.Номенклатура) Тогда
			Отбор = Новый Структура("Номенклатура", СтрокаУслуга.Номенклатура);
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(Отбор);
			// Если при поиске по номенклатуре мы не сможем однозначно определить строку госконтракта, 
			// то идентификатор не заполняем.
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаУслуга.ИдентификаторСтрокиГосконтрактаЕИС = НайденныеСтроки[0].ИдентификаторСтрокиГосконтрактаЕИС;
				СтрокаУслуга.Содержание                         = НайденныеСтроки[0].Наименование;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ПроверитьИдентификаторыГосконтракта(Объект, ЕстьУслуги, Отказ) Экспорт
	
	ГосконтрактЕИС = ЭлектронноеАктированиеЕИС.НайтиГосударственныйКонтрактПоВладельцу(Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(ГосконтрактЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК Содержание,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС КАК СуммаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга КАК Услуга
	|ИЗ
	|	Справочник.ГосударственныеКонтрактыЕИС.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки";
	
	ТаблицаГосконтракта = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиГосконтрактаЕИС) Тогда
			Шаблон = НСтр("ru = 'Не определен идентификатор строки госконтракта в строке %1 списка ""%2"".
					|Номенклатура %3 не указана в госконтракте.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТовары.НомерСтроки, "Товары", СтрокаТовары.Номенклатура);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
			Продолжить;
		КонецЕсли;
		СтрокаГосконтракта = ТаблицаГосконтракта.Найти(СтрокаТовары.ИдентификаторСтрокиГосконтрактаЕИС, "ИдентификаторСтрокиГосконтрактаЕИС");
		Если СтрокаГосконтракта = Неопределено Тогда
			Шаблон = НСтр("ru = 'Идентификатор строки госконтракта в строке %1 списка ""%2"".
					|Не соотвествует выбранному госконтракту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТовары.НомерСтроки, "Товары");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
			Продолжить;
		Иначе
			//Дополнительные проверки на превышения количества, цены и суммы
		КонецЕсли;			
	КонецЦикла;
	
	Если НЕ ЕстьУслуги Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаУслуги.ИдентификаторСтрокиГосконтрактаЕИС) Тогда
			Шаблон = НСтр("ru = 'Не определен идентификатор строки госконтракта в строке %1 списка ""%2"".
					|Выберите строку госконтракта в поле ""%3"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаУслуги.НомерСтроки, "Услуги", "Содержание");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", СтрокаУслуги.НомерСтроки, "Содержание");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
			Продолжить;
		КонецЕсли;
		СтрокаГосконтракта = ТаблицаГосконтракта.Найти(СтрокаУслуги.ИдентификаторСтрокиГосконтрактаЕИС, "ИдентификаторСтрокиГосконтрактаЕИС");
		Если СтрокаГосконтракта = Неопределено Тогда
			Шаблон = НСтр("ru = 'Идентификатор строки госконтракта в строке %1 списка ""%2"".
					|Не соотвествует выбранному госконтракту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаУслуги.НомерСтроки, "Услуги");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", СтрокаУслуги.НомерСтроки, "Содержание");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
			Продолжить;
		Иначе
			//Дополнительные проверки на превышения количества, цены и суммы
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеНоменклатурыГосконтракта(НаименованиеНоменклатуры, Цена)
	
	СтрокаЦены = СтрШаблон(НСтр("ru = 'Цена: %1 руб.'"), Формат(Цена, "ЧДЦ=2"));
	
	Возврат НаименованиеНоменклатуры + "." + " " + СтрокаЦены;
	
КонецФункции

#КонецОбласти

Функция ЭтоОбъектЗакупкиСВозможностьюКорректировкиЦены(ДанныеОбъекта)
	
	СписокОКПД2 = Новый Массив;
	СписокОКПД2.Добавить("46.71.12");
	СписокОКПД2.Добавить("46.71.13");
	СписокОКПД2.Добавить("47.30.1");
	СписокОКПД2.Добавить("19.20");
	СписокОКПД2.Добавить("06.20.10.131");
	СписокОКПД2.Добавить("65.11.10.110");
	СписокОКПД2.Добавить("65.12.11.000");
	СписокОКПД2.Добавить("65.12.12.000");
	СписокОКПД2.Добавить("65.12.21.000");
	СписокОКПД2.Добавить("65.12.34.000");
	СписокОКПД2.Добавить("65.12.41.000");
	СписокОКПД2.Добавить("65.12.49.000");
	СписокОКПД2.Добавить("65.12.50.000");
	СписокОКПД2.Добавить("65.12.90.000");
	СписокОКПД2.Добавить("06.20.10.110");

	РазрядыКода = СтрРазделить(ДанныеОбъекта.КодТовараДляЕИС, ".", Ложь);
	КодДляПоиска = "";
	КодНайден = Ложь;
	Для каждого Код из РазрядыКода Цикл
		
		Если ПустаяСтрока(КодДляПоиска) Тогда
			КодДляПоиска = Код;
		Иначе
			КодДляПоиска = КодДляПоиска + "." + Код;
		КонецЕсли;
		
		Если НЕ СписокОКПД2.Найти(КодДляПоиска) = Неопределено Тогда
			КодНайден = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодНайден;
	
КонецФункции

Процедура ПослеЗагрузкиКонтрактаИзЕИС(СсылкаНаКонтракт) Экспорт
	
	РеквизитыКонтракта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтракт, "НомерИГК, НомерГОЗ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерИГК", РеквизитыКонтракта.НомерИГК);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосКонтракты КАК ГосКонтракты
	|		ПО ДоговорыКонтрагентов.ГосударственныйКонтракт = ГосКонтракты.Ссылка
	|ГДЕ
	|	ГосКонтракты.Код = &НомерИГК";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		Попытка
			
			ОбъектГосконтрактЕИС = СсылкаНаКонтракт.ПолучитьОбъект();
			ОбъектГосконтрактЕИС.ВладелецКонтракта = Результат.Ссылка;
			ОбъектГосконтрактЕИС.Записать();
			
		Исключение
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось связать договор: %1 с госконтрактом ЕИС: %2 по причине:
				|%3'"),
				Результат.Ссылка,
				СсылкаНаКонтракт,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Загрузка госконтракта из ЕИС'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ГосударственныеКонтрактыЕИС,
				СсылкаНаКонтракт,
				ТекстСообщения);
			
		КонецПопытки
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписьюНаСервереГосударственногоКонтракта(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Проверим корректность заполнения номенклатуры
	ПроверкаНоменклатурыНаДубли = Новый ТаблицаЗначений;
	ПроверкаНоменклатурыНаДубли.Колонки.Добавить("Номенклатура");
	ПроверкаНоменклатурыНаДубли.Колонки.Добавить("Цена");
	ПроверкаНоменклатурыНаДубли.Колонки.Добавить("Идентификатор");
	Для Каждого СтрокаНоменклатура Из ТекущийОбъект.НоменклатураОбъектовЗакупки Цикл
		
		СтрокиГосконтракта = ТекущийОбъект.ОбъектыЗакупки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаНоменклатура.Идентификатор));
		
		Если СтрокиГосконтракта.Количество() > 0 Тогда
			ЭтоТоварЕИС = (СтрокиГосконтракта[0].Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Товар);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЭтоТоварНоменклатура = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНоменклатура.Номенклатура, "Услуга");
		
		Если ЭтоТоварЕИС <> ЭтоТоварНоменклатура Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
				СтрокиГосконтракта[0].НомерСтроки, "Объекты закупки", НСтр("ru = 'Тип номенклатуры не соотвествует типу объекта закупки'"));
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбъектыЗакупки", СтрокиГосконтракта[0].НомерСтроки, "Тип");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
		Если НЕ ЭтоТоварЕИС Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Номенклатура, Цена", СтрокаНоменклатура.Номенклатура, СтрокиГосконтракта[0].Цена);
		НайденныеСтроки = ПроверкаНоменклатурыНаДубли.НайтиСтроки(Отбор);
		ИдентификаторСтроки = ?(ЗначениеЗаполнено(НайденныеСтроки), НайденныеСтроки[0].Идентификатор, Неопределено);
		Если ИдентификаторСтроки = Неопределено Тогда
			СтрокаТаблицы = ПроверкаНоменклатурыНаДубли.Добавить();
			СтрокаТаблицы.Номенклатура = СтрокаНоменклатура.Номенклатура;
			СтрокаТаблицы.Цена = СтрокиГосконтракта[0].Цена;
			СтрокаТаблицы.Идентификатор = СтрокаНоменклатура.Идентификатор;
		ИначеЕсли НЕ ИдентификаторСтроки = СтрокаНоменклатура.Идентификатор Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
				СтрокиГосконтракта[0].НомерСтроки, "Объекты закупки", НСтр("ru = 'Для нескольких закупаемых товаров указана одна номенклатура и цена'"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбъектыЗакупки", СтрокиГосконтракта[0].НомерСтроки, "Наименование");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, что все данные для актирования заполнены
	ДоговорКонтрагентаЗаполнен = ЗначениеЗаполнено(ТекущийОбъект.ВладелецКонтракта);
	НоменклатураЗаполнена      = Истина;
	
	Если ДоговорКонтрагентаЗаполнен Тогда
		Для Каждого СтрокаГосконтракта Из ТекущийОбъект.ОбъектыЗакупки Цикл
			
			ЭтоТоварЕИС = (СтрокаГосконтракта.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Товар);
			
			Если ЭтоТоварЕИС Тогда
				СтрокиНоменклатуры = ТекущийОбъект.НоменклатураОбъектовЗакупки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаГосконтракта.Идентификатор));
				Если СтрокиНоменклатуры.Количество() = 0 Тогда
					НоменклатураЗаполнена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийОбъект.ГотовДляОтраженияВУчете = ДоговорКонтрагентаЗаполнен И НоменклатураЗаполнена;
	
КонецПроцедуры