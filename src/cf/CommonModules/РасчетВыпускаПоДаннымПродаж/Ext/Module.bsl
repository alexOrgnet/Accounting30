
#Область ПрограммныИнтерфейс

// Возвращает признак, что документ поддерживает автоматичекий выпуск продукции при списании.
//
// Параметры:
//  ДокументРегистратор	 - ДокументСсылка - Ссылка на документ, который выполняет списание товаров и может выпустить продукцию.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ДокументПоддерживаетАвтоматическийВыпускПродукции(ДокументРегистратор) Экспорт
	
	Возврат ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
КонецФункции

// Возвращает массив счетов, для которых будет оформляться автоматический выпуск продукции при продаже.
// 
// Возвращаемое значение:
//   - Массив - массив счетов
//
Функция СчетаУчетаПродукцииДляВыпуска() Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	
КонецФункции

// Возвращает счет, с которого будет оформляться автоматический выпуск продукции.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которой определяется счет.
//  Период		 - Дата - Период, для которого определяется счет.
// 
// Возвращаемое значение:
//   - ПланСчетовСсылка.Хозрасчетный
//
Функция СчетВыпускаПродукции(Организация, Период) Экспорт
	
	ИспользоватьСчет40 = УчетПроизводства.ИспользоватьСчетВыпускПродукции(Период, Организация);
	Если ИспользоватьСчет40 Тогда
		Возврат ПланыСчетов.Хозрасчетный.ВыпускПродукции;
	Иначе
		Возврат СчетЗатратДляВыпущеннойПродукции();
	КонецЕсли;
	
КонецФункции

// Возвращает счет, на котором отражаются затраты по автоматически выпущенной продукции.
// 
// Возвращаемое значение:
//   - ПланСчетовСсылка.Хозрасчетный
//
Функция СчетЗатратДляВыпущеннойПродукции() Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
КонецФункции

// Возвращает статью затрат, по которой будут отражаться списанные материалы для автоматически выпущенной продукци.
// 
// Возвращаемое значение:
//   - СправочникСсылка.СтатьиЗатрат
//
Функция СтатьяЗатратДляВыпущеннойПродукции() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
	
КонецФункции

// Возвращает подразделение, по которому будут отражаться затраты на выпущенную продукцию.
// ВОзвращается подразделение по умолчанию (если есть) или первое попавшееся подразделение.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которой формируются затраты по выпущенной продукции.
// 
// Возвращаемое значение:
//   - СправочникСсылка.ПодразделенияОрганизаций
//
Функция ПодразделениеЗатратДляВыпущеннойПродукции(Организация) Экспорт
	
	НаименованиеПодразделенияПоУмолчанию = Справочники.ПодразделенияОрганизаций.НаименованиеПодразделенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НаименованиеПодразделенияПоУмолчанию", НаименованиеПодразделенияПоУмолчанию);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.Наименование = &НаименованиеПодразделенияПоУмолчанию
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Подразделение;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.СоздатьОсновноеПодразделение(Организация);
	
КонецФункции

// Возвращает признак, что в указанном месяце была выпущена продукция при продаже.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, для которой проверяется выпуск продукции.
//  Период		 - Дата - Дата, которая определяет месяц.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ВыпущенаПродукцияПоДаннымПродаж(Организация, Период) Экспорт
	
	Если Не УчетнаяПолитика.УчетВыпускаПродукцииПоДаннымПродаж(Организация, Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Период));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукцииПоДаннымПродаж.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииПоДаннымПродаж КАК ВыпускПродукцииПоДаннымПродаж
	|ГДЕ
	|	ВыпускПродукцииПоДаннымПродаж.Активность
	|	И ВыпускПродукцииПоДаннымПродаж.Период >= &НачалоПериода
	|	И ВыпускПродукцииПоДаннымПродаж.Период <= &ОкончаниеПериода
	|	И ВыпускПродукцииПоДаннымПродаж.Организация = &Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Заполняет способ учета НДС в таблице выпущенной продукции по данным реализации
//
// Параметры:
//  ТаблицаВыпущеннаяПродукция	 - ТаблицаВыпущеннаяПродукция - Таблица значений с выпущенной продукцией.
//  НДСТоварыРеализация			 - ТаблицаЗначений - таблица значений со всей проданной продукцией.
//  ТаблицаРеквизиты			 - ТаблицаЗначений - реквизиты документа, в таблице должна быть одна строка.
//
Процедура ЗаполнитьСпособУчетаНДС(ТаблицаВыпущеннаяПродукция, НДСТоварыРеализация, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(НДСТоварыРеализация)
		Или Не ЗначениеЗаполнено(ТаблицаВыпущеннаяПродукция) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не РаздельныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	УчитываетсяВCтоимости = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
	БлокироватьДоПодтверждения0 = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
	ПринимаетсяКВычету = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	
	Для Каждого СтрокаПродукции Из ТаблицаВыпущеннаяПродукция Цикл
		
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("ИмяСписка", СтрокаПродукции.ИмяСписка);
		ОтборСтрок.Вставить("НомерСтрокиДокумента", СтрокаПродукции.НомерСтроки);
		Строки = НДСТоварыРеализация.НайтиСтроки(ОтборСтрок);
		
		Если Строки.Количество() > 0 Тогда
			
			Если Строки[0].СтавкаНДС = СтавкаБезНДС Тогда
				СтрокаПродукции.СпособУчетаНДС = УчитываетсяВCтоимости;
			ИначеЕсли Строки[0].СтавкаНДС = СтавкаНДС0
				И Строки[0].СырьевойТовар Тогда
				СтрокаПродукции.СпособУчетаНДС = БлокироватьДоПодтверждения0;
			Иначе
				СтрокаПродукции.СпособУчетаНДС = ПринимаетсяКВычету;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДанныеНоменклатурыДляВыпущеннойПродукции(Номенклатура) Экспорт
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("НоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	ДанныеНоменклатуры.Вставить("Спецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат ДанныеНоменклатуры;
	КонецЕсли;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "НоменклатурнаяГруппа,ОсновнаяСпецификацияНоменклатуры");
	
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ДанныеНоменклатуры.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	Иначе
		ДанныеНоменклатуры.НоменклатурнаяГруппа = РеквизитыНоменклатуры.НоменклатурнаяГруппа;
	КонецЕсли;
	ДанныеНоменклатуры.Спецификация = РеквизитыНоменклатуры.ОсновнаяСпецификацияНоменклатуры;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция ТаблицаВыпускаПродукцииПоВыпущенойПродукции(ТаблицаВыпущеннойПродукции) Экспорт
	
	ТаблицаВыпускПродукцииУслуг = УчетПроизводства.НовыйТаблицаВыпускПродукцииУслуг();
	
	Для Каждого СтрокаВыпущеннойПродукции Из ТаблицаВыпущеннойПродукции Цикл
		СтрокаВыпускаПродукцииУслуг = ТаблицаВыпускПродукцииУслуг.Добавить();
		СтрокаВыпускаПродукцииУслуг.Номенклатура = СтрокаВыпущеннойПродукции.Номенклатура;
		СтрокаВыпускаПродукцииУслуг.СчетЗатрат = СчетЗатратДляВыпущеннойПродукции();
		СтрокаВыпускаПродукцииУслуг.ПодразделениеЗатрат = СтрокаВыпущеннойПродукции.ПодразделениеЗатрат;
		СтрокаВыпускаПродукцииУслуг.НоменклатурнаяГруппаЗатрат = СтрокаВыпущеннойПродукции.НоменклатурнаяГруппаЗатрат;
		СтрокаВыпускаПродукцииУслуг.СчетСписания = СтрокаВыпущеннойПродукции.СчетУчета;
		СтрокаВыпускаПродукцииУслуг.ПодразделениеСписания = СтрокаВыпущеннойПродукции.Подразделение;
		
		СтрокаВыпускаПродукцииУслуг.СубконтоСписания1 = ЗначениеСубконтоСписанияПродукции(
			1, СтрокаВыпущеннойПродукции.СчетУчета, СтрокаВыпущеннойПродукции);
		СтрокаВыпускаПродукцииУслуг.СубконтоСписания2 = ЗначениеСубконтоСписанияПродукции(
			2, СтрокаВыпущеннойПродукции.СчетУчета, СтрокаВыпущеннойПродукции);
		СтрокаВыпускаПродукцииУслуг.СубконтоСписания3 = ЗначениеСубконтоСписанияПродукции(
			3, СтрокаВыпущеннойПродукции.СчетУчета, СтрокаВыпущеннойПродукции);
			
		СтрокаВыпускаПродукцииУслуг.Количество = СтрокаВыпущеннойПродукции.Количество;
		СтрокаВыпускаПродукцииУслуг.ПлановаяСтоимость = СтрокаВыпущеннойПродукции.СуммаПлановая;
		// Для продукции распределение прямых расходов по количеству всегда ЛОЖЬ
		СтрокаВыпускаПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству = Ложь;
		
	КонецЦикла;
	
	Возврат ТаблицаВыпускПродукцииУслуг;
	
КонецФункции

Процедура ДобавитьВидМПЗХарактерДеятельности(СписанныеМПЗВыпущеннойПродукцииИП, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(СписанныеМПЗВыпущеннойПродукцииИП)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицДобавленияВидаМПЗХарактерДеятельности(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетДоходовИРасходовПредпринимателя.ДобавитьВидМПЗХарактерДеятельности(СписанныеМПЗВыпущеннойПродукцииИП,
		Реквизиты.Организация, Реквизиты.Период, "СчетУчета");
	
КонецПроцедуры

Функция ПодготовитьПараметрыТаблицДобавленияВидаМПЗХарактерДеятельности(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция РазделитьСписанныеМПЗиВыпущеннуюПродукциюДляИП(СписанныеМПЗ, ВыпущеннаяПродукция) Экспорт
	
	Результат = Новый Структура;
	
	СписанныеМПЗ_Остатки = СписанныеМПЗ.СкопироватьКолонки();
	СписанныеМПЗ_ВыпущеннаяПродукция = СписанныеМПЗ.СкопироватьКолонки();
	
	ОтборСтрок = Новый Структура("НомерСтроки, Номенклатура, Партия");
	
	Для Каждого СтрокаМПЗДляСписания Из СписанныеМПЗ Цикл
		
		Если СтрокаМПЗДляСписания.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаМПЗДляСписания);
		// В таблице СписанныеМПЗ есть только одна строка из ВыпущенаяПродукция с такими же "НомерСтроки, Номенклатура, Партия".
		// Поэтому просто рассчитаем количество - не будем уменьшать располагаемый остаток.
		КоличествоВыпущеннойПродукцииСтроки = КоличествоВыпущеннойПродукции(ВыпущеннаяПродукция, ОтборСтрок);
		
		Если КоличествоВыпущеннойПродукцииСтроки = 0 Тогда
			// Нет выпущенной продукции - нужно списывать всю продукцию со склада.
			ЗаполнитьЗначенияСвойств(СписанныеМПЗ_Остатки.Добавить(), СтрокаМПЗДляСписания);
		ИначеЕсли КоличествоВыпущеннойПродукцииСтроки = СтрокаМПЗДляСписания.Количество Тогда
			// Вся продукция выпущена - со склада ничего списывать не нужно.
			ЗаполнитьЗначенияСвойств(СписанныеМПЗ_ВыпущеннаяПродукция.Добавить(), СтрокаМПЗДляСписания);
		Иначе
			СтрокаМПЗДляСписания_Остатки = СписанныеМПЗ_Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМПЗДляСписания_Остатки, СтрокаМПЗДляСписания);
			СтрокаМПЗДляСписания_Остатки.Количество = СтрокаМПЗДляСписания.Количество - КоличествоВыпущеннойПродукцииСтроки;
			ДоляСписаннойПродукции = СтрокаМПЗДляСписания_Остатки.Количество/СтрокаМПЗДляСписания.Количество;
			СтрокаМПЗДляСписания_Остатки.НДСНачисленный = Окр(СтрокаМПЗДляСписания.НДСНачисленный * ДоляСписаннойПродукции, 2);
			СтрокаМПЗДляСписания_Остатки.Выручка = Окр(СтрокаМПЗДляСписания.Выручка * ДоляСписаннойПродукции, 2);
			
			СтрокаМПЗДляСписания_ВыпущеннаяПродукция= СписанныеМПЗ_ВыпущеннаяПродукция.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМПЗДляСписания_ВыпущеннаяПродукция, СтрокаМПЗДляСписания);
			СтрокаМПЗДляСписания_ВыпущеннаяПродукция.Количество = СтрокаМПЗДляСписания.Количество - СтрокаМПЗДляСписания_Остатки.Количество;
			СтрокаМПЗДляСписания_ВыпущеннаяПродукция.НДСНачисленный = СтрокаМПЗДляСписания.НДСНачисленный - СтрокаМПЗДляСписания_Остатки.НДСНачисленный;
			СтрокаМПЗДляСписания_ВыпущеннаяПродукция.Выручка = СтрокаМПЗДляСписания.Выручка - СтрокаМПЗДляСписания_Остатки.Выручка;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("СписанныеМПЗ_Остатки", СписанныеМПЗ_Остатки);
	Результат.Вставить("СписанныеМПЗ_ВыпущеннаяПродукция", СписанныеМПЗ_ВыпущеннаяПродукция);
	
	Возврат Результат;
	
КонецФункции

// Формирует движения выпуска продукции по данным таблицы выпуска продукции.
// 
// Параметры:
//  ВыпускПродукции		 - ТаблицаЗначений - Таблица, содержащая выпущенную продукцию. Структуру таблицы см. в УчетПроизводства.НовыйТаблицаВыпущеннойПродукции().
//  ТаблицаРеквизитов	 - ТаблицаЗначений - Таблица, содержащая реквизиты документа.
//  Движения			 - Движения - Движения документа.
//
Процедура СформироватьДвиженияВыпускПродукцииПоДаннымПродаж(ВыпускПродукции, ТаблицаРеквизитов, Движения) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыпускПродукции)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыФормированияДвиженийВыпускаПродукцииПоДаннымПродаж(ВыпускПродукции, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаВыпуска Из Параметры.ВыпускПродукции Цикл
		
		Движение = Движения.ВыпускПродукцииПоДаннымПродаж.Добавить();
		Движение.Организация = Реквизиты.Организация;
		Движение.Период = Реквизиты.Период;
		Движение.Номенклатура = СтрокаВыпуска.Номенклатура;
		Движение.СпособУчетаНДС = СтрокаВыпуска.СпособУчетаНДС;
		Движение.Склад = СтрокаВыпуска.Склад;
		Движение.СчетУчета = СтрокаВыпуска.СчетУчета;
		Движение.Подразделение = СтрокаВыпуска.Подразделение;
		Движение.ВыпускПоДаннымПродаж = СтрокаВыпуска.Количество;
		Движение.ПлановаяСтоимостьВыпуска = СтрокаВыпуска.СуммаПлановая;
		Движение.Спецификация = СтрокаВыпуска.Спецификация;
		Движение.НоменклатурнаяГруппа = СтрокаВыпуска.НоменклатурнаяГруппаЗатрат;
		
	КонецЦикла;
	
	Движения.ВыпускПродукцииПоДаннымПродаж.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыФормированияДвиженийВыпускаПродукцииПоДаннымПродаж(ВыпускПродукции, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ВыпускПродукции
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - продукция, которую выпустили в автоматеском режиме
		+ "СпособУчетаНДС,"             // <ПеречислениеСсылка.СпособыУчетаНДС> - способ учета НДС проданной продукции
		+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который выпустили продукцию в автоматическом режиме
		+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет выпуска продукции
		+ "Подразделение,"              // <СправочникСсылка.ПодразделениеОрганизаций> - подразделение
		+ "Количество,"                 // <Число(15,3)> - количество выпущенной продукции
		+ "СуммаПлановая,"              // <Число(15,2)> - плановая сумма выпущенной продукции
		+ "Спецификация,"               // <СправочникСсылка.СпецификацииНоменклатуры> - спецификация, по которой будут списываться материалы
		+ "НоменклатурнаяГруппаЗатрат"; // <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа выпущенной продукции.
		
	Параметры.Вставить("ВыпускПродукции", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВыпускПродукции, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеСубконтоСписанияПродукции(НомерСубконто, СчетУчета, СтрокаВыпущеннойПродукции)
	
	СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	ВидСубконтоСчета = СвойстваСчетаУчета["ВидСубконто"+НомерСубконто];
	
	Если ВидСубконтоСчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
		Возврат СтрокаВыпущеннойПродукции.Номенклатура;
	ИначеЕсли ВидСубконтоСчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СтрокаВыпущеннойПродукции.Склад;
	ИначеЕсли ВидСубконтоСчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
		Возврат СтрокаВыпущеннойПродукции.Партия;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КоличествоВыпущеннойПродукции(ВыпущеннаяПродукция, ОтборСтрок)
	
	Количество = 0;
	
	СтрокиПродукции = ВыпущеннаяПродукция.НайтиСтроки(ОтборСтрок);
	
	Для Каждого Строка Из СтрокиПродукции Цикл
		Количество = Количество + Строка.Количество;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти