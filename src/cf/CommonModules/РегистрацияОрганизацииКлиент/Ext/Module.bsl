#Область СлужебныйПрограммныйИнтерфейс

// Открывает помощник Регистрация организации (ИП)
//
// Параметры:
//   ПараметрыПомощника - Структура - Параметры открытия помощника (для каждого регламентированного уведомления свои параметры)
//
// Возвращаемое значение:
//   Булево - Истина, если получилось идентифицировать форму и открыть её, иначе Ложь
//
Функция ОткрытьПомощникРегистрации(Знач ПараметрыПомощника = Неопределено) Экспорт
	
	Если ПараметрыПомощника <> Неопределено Тогда
		
		Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПомощника, "Организация");
		ПараметрыПомощника.Вставить("НавигацияПараметрФормы", "Документы");
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
				ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.РегистрацияООО", ПараметрыПомощника);
			Иначе
				ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.РегистрацияИП", ПараметрыПомощника);
			КонецЕсли;
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		ПараметрыНавигацииПомощника = РегистрацияОрганизацииВызовСервера.ПараметрыНавигацииПомощникаРегистрации();
		Если ПараметрыНавигацииПомощника.СтруктураНавигации <> Неопределено Тогда
			НавигацияПомощниковКлиент.ОткрытьЭтап(
				ПараметрыНавигацииПомощника.НомерШага,
				ПараметрыНавигацииПомощника.СтруктураНавигации);
			Результат = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сервис регистрации отключен или не используется'"));
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Открывает помощник Внесение изменений в ЕГРЮЛ (ЕГРИП)
//
// Параметры:
//   ПараметрыПомощника - см. РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений()
//
Функция ОткрытьПомощникВнесенияИзменений(Знач ПараметрыПомощника = Неопределено) Экспорт
	
	Если ПараметрыПомощника = Неопределено Тогда
		ПараметрыПомощника = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР", ПараметрыПомощника);
	Возврат Истина;
	
КонецФункции

// Открывает помощник Снятия с учета
//
// Параметры:
//   ПараметрыПомощника - см. РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений()
//
Процедура ОткрытьПомощникСнятияСУчета(Знач ПараметрыПомощника = Неопределено) Экспорт
	
	Если ПараметрыПомощника = Неопределено Тогда
		ПараметрыПомощника = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаСнятияСУчета", ПараметрыПомощника);
	
КонецПроцедуры

// Открывает помощник заполнения заявления в ЕГРЮЛ/ЕГРИП
//
// Параметры:
//   ИдентификаторФормы - Строка - см. РегистрацияОрганизацииКлиентСервер.ИдентификаторыФормПомощниковРегистрации()
//   ПараметрыПомощника - см. РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений()
//
Процедура ОткрытьПомощникЗаполнения(ИдентификаторФормы, Знач ПараметрыПомощника = Неопределено) Экспорт
	
	ИдентификаторыФорм = РегистрацияОрганизацииКлиентСервер.ИдентификаторыФормПомощниковРегистрации();
	Если ИдентификаторФормы = ИдентификаторыФорм.РегистрацияООО Или ИдентификаторФормы = ИдентификаторыФорм.РегистрацияИП Тогда
		ОткрытьПомощникРегистрации(ПараметрыПомощника);
	Иначе
		Если ПараметрыПомощника = Неопределено Тогда
			ПараметрыПомощника = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
		КонецЕсли;
		ОткрытьФорму(СтрШаблон("Обработка.РегистрацияОрганизации.Форма.%1", ИдентификаторФормы), ПараметрыПомощника);
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьЭтап(НомерТекущегоШага, ПараметрыПомощника = Неопределено) Экспорт
	
	СтруктураНавигации = РегистрацияОрганизацииВызовСервера.СтруктураНавигацииПомощникаРегистрации();
	Если СтруктураНавигации <> Неопределено Тогда
		НавигацияПомощниковКлиент.ОткрытьЭтап(НомерТекущегоШага, СтруктураНавигации, ПараметрыПомощника);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сервис регистрации отключен или не используется'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНавигационнуюСсылку(НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		НавигацияПомощниковКлиент.ОбработатьНавигационнуюСсылку(
			НавигационнаяСсылка,
			РегистрацияОрганизацииВызовСервера.СтруктураНавигацииПомощникаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОбОткрытии(Форма, ИмяПомощника, НомерШага) Экспорт
	
	Оповестить("ОткрытШагПомощника_РегистрацияОрганизации",
		Новый Структура("ИмяПомощника, НомерШага", ИмяПомощника, НомерШага),
		Форма);
	
КонецПроцедуры

Функция ОткрытьФормуУчредителя(Элемент, ТекущиеДанные) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	Иначе
		ПараметрыФормы.Вставить("ТекстЗаполнения", ТекущиеДанные.Наименование);
	КонецЕсли;
	
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ИмяФормы = "Обработка.РегистрацияОрганизации.Форма.ФормаЮридическогоЛица";
	Иначе
		ИмяФормы = "Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Элемент);
	
КонецФункции

// см. РегламентированнаяОтчетностьКлиентПереопределяемый.ПередОткрытиемФормыУведомления
//
Процедура ПередОткрытиемФормыУведомления(Организация, ВидУведомления, СтандартнаяОбработка) Экспорт
	
	Если РегистрацияОрганизацииВызовСервера.ЭтоУведомлениеОРегистрацииВЕГР(ВидУведомления) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ОбработчикСозданияУведомления
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - Форма, из которой создаетсся уведомление
//   Параметры - Структура - Параметры формы создания уведомления
//
Процедура ОбработчикСозданияУведомления(Форма, Параметры) Экспорт
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВидУведомления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидУведомления");
	
	Если РегистрацияОрганизацииВызовСервера.ЭтоУведомлениеОРегистрацииВЕГР(ВидУведомления)
		Или УчетПСНВызовСервера.ЭтоУведомлениеЗаявлениеНаПолучениеПатента(ВидУведомления) Тогда
		
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаСозданияУведомления", Параметры, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что переданный текст введен кириллицей или латиницей (проверяемый язык ввода регулируется параметром),
// при этом не учитываются разделители слов, независимо от проверяемого языка. В случае отрицательного результата
// проверки выводит сообщение об ошибке
//
// Параметры:
//  Текст - Строка - проверяемый текст
//  Путь - Строка - полный путь к реквизиту формы. Например, "Объект.Контрагент"
//  ЗаголовокЭлемента - Строка - заголовок проверяемого поля, для отображения в сообщении об ошибке
//  ВводитсяКириллицей - Булево - Истина, если текст должен содержать только символы кириллицы
//                              - Ложь, если текст должен содержать только символы латиницы
//
Процедура ПроверкаЯзыкаВвода(Текст, Путь, ЗаголовокЭлемента, ВводитсяКириллицей) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	ОшибкаВвода = "";
	ДопустимыеСимволы = РегистрацияОрганизацииКлиентСервер.УниверсальныеСимволыВПаспортныхДанных();
	Если ВводитсяКириллицей И Не СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(
		Текст, Ложь, ДопустимыеСимволы) Тогда
		ОшибкаВвода = СтрШаблон(НСтр("ru = '%1 заполняется на русском языке'"), ЗаголовокЭлемента);
	ИначеЕсли Не ВводитсяКириллицей И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
		Текст, Ложь, ДопустимыеСимволы) Тогда
		ОшибкаВвода = СтрШаблон(НСтр("ru = '%1 заполняется латиницей'"), ЗаголовокЭлемента);
	КонецЕсли;
	Если Не ПустаяСтрока(ОшибкаВвода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаВвода, , , Путь);
	КонецЕсли;
	
КонецПроцедуры

// Инициирует событие НачалоВыбора поля формы контактной информации
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается обработчик
//  Элемент - ПолеФормы - элемент формы, в которое помещается выбранное значение
//  СтандартнаяОбработка - Булево - признак стандартной обработки события Нажатие
//  Заголовок - Строка -представление выбираемого вида контактной информации
//
&НаКлиенте
Процедура ВыборАдресаФизическогоЛица(Форма, Элемент, СтандартнаяОбработка, Заголовок = "") Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ПараметрыОткрытияФормы.Вставить("Заголовок", Заголовок);
	КонецЕсли;
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(
		Форма, Элемент, Форма.Модифицированность, СтандартнаяОбработка, ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Открывает форму предварительного просмотра заявления
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма уведомления (см. Документ.УведомлениеОСпецрежимахНалогообложения)
//   ИмяОтчета - Строка - Имя регламентированного отчета
//   ИмяФайла  - Строка - Имя сохраняемого файла
//
Процедура ОткрытьФормуПредварительногоПросмотраЗаявленияБезДвумерногоКода(Форма, ИмяОтчета, ИмяФайла) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Ссылка", Форма.Объект.Ссылка);
	ПараметрыПечати.Вставить("ИмяФормы", Форма.Объект.ИмяФормы);
	ПараметрыПечати.Вставить("ИмяОтчета", ИмяОтчета);
	
	СписокПечатаемыхЛистов = РегистрацияОрганизацииВызовСервера.СписокПечатаемыхЛистов(ПараметрыПечати, ИмяОтчета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              Неопределено);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	ПараметрыФормы.Вставить("ЕстьВыходЗаГраницы",     Ложь);
	
	// Имитируем открытие формы предварительного просмотра
	ПредПросмотр = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ПечатьРегламентированныхОтчетов",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор);
	
	Если ПредПросмотр = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Невозможно открыть форму для просмотра. Обратитесь к администратору.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Сохраняем файл в PDF формат
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из ПредПросмотр.СписокЛистов.ПолучитьЭлементы() Цикл
		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.АдресВоВременномХранилище);
		
	КонецЦикла;
	
	АдресХранилища = РегистрацияОрганизацииВызовСервера.ПоместитьЗаявлениеБезДвумерногоКодаВоВременноеХранилище(
		ПакетОтображаемыхДокументов,
		Форма.УникальныйИдентификатор);
	
	Если АдресХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем файл для просмотра
	
	Попытка
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось получить файл. Возможно, файл уже открыт.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	ПакетОтображаемыхДокументов = Неопределено;
	
КонецПроцедуры

// Открывает форму просмотра типового устава
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма помощника заполнения заявления
//   НомерТиповогоУстава     - Число - Номер типового устава
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
Процедура ОткрытьФормуПросмотраТиповогоУстава(Форма, НомерТиповогоУстава, УникальныйИдентификатор) Экспорт
	
	ДанныеУстава = РегистрацияОрганизацииКлиентСервер.НовыйДанныеТиповогоУстава();
	ЗаполнитьЗначенияСвойств(ДанныеУстава, Форма);
	
	АдресХранилища = РегистрацияОрганизацииВызовСервера.ТиповойУставООО(ДанныеУстава, НомерТиповогоУстава, УникальныйИдентификатор);
	
	ИмяФайла = СтрШаблон("%1.pdf", РегистрацияОрганизацииКлиентСервер.ИмяТиповогоУстава(НомерТиповогоУстава));
	
	Попытка
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось получить файл. Возможно, файл уже открыт.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Открывает файл из прикрепленнных файлов для справочника Отправки "Регистрация ЮЛ"
//
// Параметры:
//   Заявление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Ссылка на заявление о внесении изменений в ЕГРЮЛ/ЕГРИП
//   ТипФайла                - Строка - Идентификатор значения Перечисления.НазначенияФайловРегистрацииЮЛ
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
Процедура ОткрытьПрикрепленныйФайлОтправки(Заявление, ТипФайла, УникальныйИдентификатор) Экспорт
	
	ДанныеФайла = РегистрацияОрганизацииВызовСервера.ДанныеФайлаОтФНСДляОткрытия(
		Заявление,
		ТипФайла,
		УникальныйИдентификатор);
	
	Если ДанныеФайла.ДанныеДляОткрытия <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла.ДанныеДляОткрытия, Ложь);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В прикрепленных документах от ФНС не найдено нужного файла: %1.
		|Нажмите дважды на сообщение, чтобы перейти в просмотр прикрепленных файлов'"), ТипФайла);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ДанныеФайла.ОтправкаСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора отсканированных файлов
//
// Параметры:
//   Форма         - ФормаКлиентскогоПриложения - форма помощника заполнения заявления
//   ВладелецФайла - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//   ИмяЭлемента   - Строка - Имя элемента, к которому привязываются выбранные файлы
//   ЭтоНадпись    - Булево - Признак, указывающий тип элемента
//
// Возвращаемое значение:
//
Процедура ВыборОтсканированногоФайлаНажатие(Форма, ВладелецФайла, ИмяЭлемента) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтсканированногоФайлаЗавершение",
		Форма,
		ПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыОткрытия.Вставить("ВидДокумента", ВидДокументаОтсканированногоФайла(ИмяЭлемента));
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ЗначениеЗаполнено(Форма.ПодписанныеДокументы));
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ВыборОтсканированныхФайлов",
		ПараметрыОткрытия,
		Форма,
		Форма.УникальныйИдентификатор, , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Обработка выбора отсканированного файла
//
// Параметры:
//   Форма         - ФормаКлиентскогоПриложения - форма помощника заполнения заявления
//   ПараметрыОтображения    - Структура - См. РегистрацияОрганизацииКлиентСервер.НовыеПараметрыУправленияФормойПриПодачеДокументовВЭлектронномВиде()
//   РезультатВыбора         - Строка - Имя файла выбора
//   ДополнительныеПараметры - Структура - Признак, указывающий тип элементаДополнительные файлы формы выбора
//
// Возвращаемое значение:
//
Процедура ВыборОтсканированногоФайлаЗавершение(Форма, ПараметрыОтображения, РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ДополнительныеПараметры.ИмяЭлемента);
	
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеВыбора = РегистрацияОрганизацииКлиентСервер.ПредставлениеФайлаПоУмолчанию(РезультатВыбора);
	
	Если ТипЗнч(ЭлементФормы) = Тип("ДекорацияФормы") Тогда
		ЭлементФормы.Заголовок = ПредставлениеВыбора;
	Иначе
		Форма[ДополнительныеПараметры.ИмяЭлемента] = ПредставлениеВыбора;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(
		Форма,
		ПараметрыОтображения);
	
КонецПроцедуры

// Выполняет проверку заполнения отсканированных файлов и подписывает документы электронной подписью
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения - форма помощника заполнения заявления
//   ПараметрыЗаявления - Структура - см. НовыеПараметрыПодписанияЗаявления()
//
Процедура ПроверитьИПодписатьДокументы(Форма, ПараметрыЗаявления) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.РегистрирующийОрганКод) Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле",
			"Заполнение",
			НСтр("ru = 'Налоговая инспекция (код)'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "РегистрирующийОрганКод");
		Возврат;
	КонецЕсли;
	
	ФайлыПрикрепленныеДокументы = РегистрацияОрганизацииВызовСервера.ПрикрепленныеФайлыЗаявления(
		ПараметрыЗаявления,
		Форма.УникальныйИдентификатор);
	
	Если Не (Форма.ПодачаДокументовВЭлектронномВидеДоступна
		И ВсеФайлыВыбраны(ФайлыПрикрепленныеДокументы, ПараметрыЗаявления)) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормирования = ИнтерфейсыВзаимодействияБРОКлиент.ПараметрыМетодаСформироватьПакетПоЕГРЮЛ();
	ПараметрыФормирования.КодНО = Форма.РегистрирующийОрганКод;
	ПараметрыФормирования.ЭлПочтаЗаявителя = ПараметрыЗаявления.EMailЗаявителя;
	ПараметрыФормирования.Заявление = ПараметрыЗаявления.Заявление;
	ПараметрыФормирования.ИННЗаявителя = ПараметрыЗаявления.ИННЗаявителя;
	
	Если Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
		// Документы подписываются ЭЦП и отправляются в налоговый орган сразу
		ПараметрыФормирования.ОтправитьПакет = Истина;
		ПараметрыФормирования.ПодписатьПакет = Ложь;
		ПараметрыФормирования.ВыводитьСообщения = Ложь;
	Иначе
		// Документы только подписываются ЭЦП, пользователь сам отправляет пакет через личный кабинет
		ПараметрыФормирования.ОтправитьПакет = Ложь;
		ПараметрыФормирования.ПодписатьПакет = Истина;
	КонецЕсли;
	
	Если Форма.ВыдатьНаБумажномНосителе Тогда
		ПараметрыФормирования.СпособПредоставленияОтвета = ПредопределенноеЗначение(
			"Перечисление.СпособыПолученияОтветаНаЭлГосРегистрацию.ВыдатьДокументыЛично");
	Иначе
		ПараметрыФормирования.СпособПредоставленияОтвета = ПредопределенноеЗначение(
			"Перечисление.СпособыПолученияОтветаНаЭлГосРегистрацию.ВыслатьДокументыПоПочте");
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Заявление.Количество() > 0 Тогда
		ДобавитьФайлВОписаниеФайлов(
			ПараметрыЗаявления.ВидДокумента,
			ФайлыПрикрепленныеДокументы.Заявление,
			ПараметрыФормирования.ОписаниеФайлов,
			ПараметрыЗаявления.ЗаявлениеВXML);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Устав.Количество() > 0 Тогда
		
		Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
			ВидДокумента = "УчредительныйДокументЮЛ";
		ИначеЕсли Не ПараметрыЗаявления.НоваяРедакцияУстава Тогда
			ВидДокумента = "УставЮЛ";
		Иначе
			ВидДокумента = "УставЮЛВНовойРедакции";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.Устав,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Протокол.Количество() > 0 Тогда
		
		Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
			ВидДокумента = "РешениеОСозданииЮЛ";
		Иначе
			ВидДокумента = "ПротоколОбщегоСобранияУчастниковЮЛ";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.Протокол,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Договор.Количество() > 0 Тогда
		
		Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
			ВидДокумента = "РешениеОСозданииЮЛ";
		Иначе
			ВидДокумента = "ИнойДокумент";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.Договор,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Решение.Количество() > 0 Тогда
		
		Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
			ВидДокумента = "РешениеОСозданииЮЛ";
		Иначе
			ВидДокумента = "РешениеОбщегоСобрания";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.Решение,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.Патент.Количество() > 0 Тогда
		ДобавитьФайлВОписаниеФайлов(
			"ЗаявлениеНаПолучениеПатента26_5_1",
			ФайлыПрикрепленныеДокументы.Патент,
			ПараметрыФормирования.ОписаниеФайлов,
			ПараметрыЗаявления.ЗаявлениеВXML);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.УведомлениеОПереходеНаУСН.Количество() > 0 Тогда
		ДобавитьФайлВОписаниеФайлов(
			"ЗаявлениеПоФорме26_2_1",
			ФайлыПрикрепленныеДокументы.УведомлениеОПереходеНаУСН,
			ПараметрыФормирования.ОписаниеФайлов,
			ПараметрыЗаявления.ЗаявлениеВXML);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.ДокументПодтверждающийЛичность.Количество() > 0 Тогда
		
		Если ПараметрыЗаявления.ИностранныйГражданин Тогда
			ВидДокумента = "ДокументУдостоверяющегоЛичностьИностранногоГражданина";
		Иначе
			ВидДокумента = "ДокументУдостоверяющийЛичностьГражданинаРФ";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.ДокументПодтверждающийЛичность,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.ДокументПодтверждающийАдрес.Количество() > 0 Тогда
		
		Если Не ПараметрыЗаявления.ЭтоЮрЛицо
			И ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияИП() Тогда
			
			ВидДокумента = "ДокументПодтверждающийАдресМестаЖительстваФЛВРФ";
		Иначе
			ВидДокумента = "ИнойДокумент";
		КонецЕсли;
		
		ДобавитьФайлВОписаниеФайлов(
			ВидДокумента,
			ФайлыПрикрепленныеДокументы.ДокументПодтверждающийАдрес,
			ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.ИнойДокумент.Количество() > 0 Тогда
		Для Каждого ТекущийИнойДокумент Из ФайлыПрикрепленныеДокументы.ИнойДокумент Цикл
			ДобавитьФайлВОписаниеФайлов("ИнойДокумент", ТекущийИнойДокумент.Значение, ПараметрыФормирования.ОписаниеФайлов);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормирования.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПодписатьДокументыЗавершение",
		Форма,
		ПараметрыФормирования.ОписаниеФайлов);
	
	ИнтерфейсыВзаимодействияБРОКлиент.СформироватьПакетПоЕГРЮЛ(ПараметрыФормирования);
	
КонецПроцедуры

Функция НовыеПараметрыПодписанияЗаявления() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Заявление"); // ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
	Результат.Вставить("EMailЗаявителя", "");
	Результат.Вставить("ИННЗаявителя", "");
	Результат.Вставить("ВидДокумента", "");
	Результат.Вставить("ЭтоЮрЛицо", Ложь);
	Результат.Вставить("Учредители", Неопределено);
	Результат.Вставить("ОтображатьИндивидуальныйУстав", Ложь);
	Результат.Вставить("ЕстьПатент", Ложь);
	Результат.Вставить("ЕстьУведомлениеОПереходеУСН", Ложь);
	Результат.Вставить("ИностранныйГражданин", Ложь);
	Результат.Вставить("НуженДокументПодтверждающийАдрес", Ложь);
	Результат.Вставить("НуженДоговорОбУчрежденииООО", Ложь);
	Результат.Вставить("ЗаявлениеВXML", Ложь);
	Результат.Вставить("НоваяРедакцияУстава", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура РегистрирующийОрганКодПриИзменении(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ПодписанныеДокументы) Тогда
		
		ОповещениеПользователя = Новый ОписаниеОповещения("РегистрирующийОрганКодПриИзмененииЗавершение", Форма);
		ТекстВопроса = НСтр("ru = 'При изменении кода подписанный контейнер станет неактуальным.
		|Подписать документы заново?'");
		
		ПоказатьВопрос(ОповещениеПользователя, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрирующийОрганСписокАвтоПодбор(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из Элементы.РегистрирующийОрганСписок.СписокВыбора Цикл
		
		Если СтрНайти(НРег(ТекущаяСтрока.Представление), НРег(Текст)) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРезультат.Добавить(ТекущаяСтрока.Значение, ТекущаяСтрока.Представление);
		
	КонецЦикла;
	
	Если СписокРезультат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РегистрацияОрганизацииВызовСервера.ПодсветитьДанныеВыбора(СписокРезультат, Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьЖурналРегистрацииПриОшибкиПодписания() Экспорт
	
	Если ОбщегоНазначенияБПВызовСервера.ДоступенПросмотрЖурналаРегистрации() Тогда
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации();
	Иначе
		ТекстСообщения = НСтр("ru = 'Просмотр журнала регистрации запрещен.
		|Обратитесь к администратору для выяснения причины возникновения ошибки при подписи документов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик навигационной ссылки для статуса отправки документов в электронном виде
//
// Параметры:
//   НавигационнаяСсылка     - Строка
//   Заявление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Ссылка на заявление о регистрации или внесении изменений в ЕГРЮЛ/ЕГРИП
//   ТипФайла                - Строка - См. РегистрацияОрганизацииКлиентСервер.ТипФайлаЛистЗаписиЕГР()
//   УникальныйИдентификатор - УникальныйИдентификатор
//   СтандартнаяОбработка    - Булево
//
Процедура СтатусОтправкиОбработкаНавигационнойСсылки(НавигационнаяСсылка, Заявление, ТипФайла, УникальныйИдентификатор, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ЛистЗаписиЕГР" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РегистрацияОрганизацииКлиент.ОткрытьПрикрепленныйФайлОтправки(
			Заявление,
			ТипФайла,
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылка = "Протокол" Тогда
		
		СтандартнаяОбработка = Ложь;
		РегистрацияОрганизацииКлиент.ОткрытьПрикрепленныйФайлОтправки(
			Заявление,
			"Протокол",
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылка = "ЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		РегистрацияОрганизацииКлиент.ОткрытьЖурналРегистрацииПриОшибкиПодписания();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Форма, ТекстНавигационнойСсылки, СтандартнаяОбработка) Экспорт
	
	Если Найти(ТекстНавигационнойСсылки, "ОбразецЗаявленияОРегистрации") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ОбразецЗаявленияОРегистрации",
			Новый Структура("Макет", ТекстНавигационнойСсылки),
			Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПодтверждениеКонтактнойИнформации

Функция НовыйПараметрыПолучениеКодаПодтверждения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодтверждения", "");
	Результат.Вставить("Значение", "");
	Результат.Вставить("НаименованиеЗадания", "");
	Результат.Вставить("ИдентификаторКода", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПодтвердитьНомерТелефона(Форма, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = НовыйПараметрыПолучениеКодаПодтверждения();
	ПараметрыВыполнения.СпособПодтверждения = РегистрацияОрганизацииКлиентСервер.СпособПодтвержденияТелефон();
	ПараметрыВыполнения.Значение = СокрЛП(ДополнительныеПараметры.Телефон);
	ПараметрыВыполнения.НаименованиеЗадания = НСтр("ru = 'Отправка кода подтверждения на номер телефона'");
	ПараметрыВыполнения.ИдентификаторКода = Форма.ИдентификаторКодаПодтвержденияТелефона;
	
	Форма.КодПодтвержденияТелефонаОтправляется = Истина;
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
	ДлительнаяОперация = РегистрацияОрганизацииВызовСервера.НачатьПолучениеКодаПодтверждения(
		ПараметрыВыполнения,
		Форма.УникальныйИдентификатор);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		Форма.КодПодтвержденияТелефонаОтправляется = Ложь;
		Форма.ИдентификаторКодаПодтвержденияТелефона = "";
		Форма.СрокДействияКодаПодтвержденияТелефона = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
		Форма.ТекстПовторнаяОтправкаКодаТелефон = "";
		СообщитьОбОшибкеОтправкиКодаПодтверждения(ДлительнаяОперация.КраткоеПредставлениеОшибки);
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ПослеОтправкиКодаПодтверждения_Телефон", Форма),
			НастройкиОжидания);
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Телефон", 1, Истина);
		
	КонецЕсли;
	
КонецФункции

Функция ПодтвердитьАдресЭлектроннойПочты(Форма, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = НовыйПараметрыПолучениеКодаПодтверждения();
	ПараметрыВыполнения.СпособПодтверждения = РегистрацияОрганизацииКлиентСервер.СпособПодтвержденияЭлектроннаяПочта();
	ПараметрыВыполнения.Значение = СокрЛП(ДополнительныеПараметры.Почта);
	ПараметрыВыполнения.НаименованиеЗадания = НСтр("ru = 'Отправка кода подтверждения на электронную почту'");
	ПараметрыВыполнения.ИдентификаторКода = Форма.ИдентификаторКодаПодтвержденияПочты;
	
	Форма.КодПодтвержденияПочтыОтправляется = Истина;
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
	ДлительнаяОперация = РегистрацияОрганизацииВызовСервера.НачатьПолучениеКодаПодтверждения(
		ПараметрыВыполнения,
		Форма.УникальныйИдентификатор);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		Форма.КодПодтвержденияПочтыОтправляется = Ложь;
		Форма.ИдентификаторКодаПодтвержденияПочты = "";
		Форма.СрокДействияКодаПодтвержденияПочты = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляПочты = Неопределено;
		Форма.ТекстПовторнаяОтправкаКодаПочта = "";
		СообщитьОбОшибкеОтправкиКодаПодтверждения(ДлительнаяОперация.КраткоеПредставлениеОшибки);
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ПослеОтправкиКодаПодтверждения_Почта", Форма),
			НастройкиОжидания);
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Почта", 1, Истина);
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьКодПодтвержденияТелефона(Форма, ДополнительныеПараметры) Экспорт
	
	Если Форма.НомерТелефонаПодтвержден Тогда
		Возврат;
	КонецЕсли;
	
	Форма.НомерТелефонаПодтвержден = РегистрацияОрганизацииВызовСервера.ПроверитьКодПодтверждения(
		Форма.ИдентификаторКодаПодтвержденияТелефона,
		Форма.КодПодтвержденияТелефона);
	
	Если Форма.НомерТелефонаПодтвержден Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Телефон");
	Иначе
		СообщитьОбОшибкеПроверкиКодаПодтверждения("КодПодтвержденияТелефона");
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьКодПодтвержденияПочты(Форма, ДополнительныеПараметры) Экспорт
	
	Если Форма.ЭлектроннаяПочтаПодтверждена Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЭлектроннаяПочтаПодтверждена = РегистрацияОрганизацииВызовСервера.ПроверитьКодПодтверждения(
		Форма.ИдентификаторКодаПодтвержденияПочты,
		Форма.КодПодтвержденияПочты);
	
	Если Форма.ЭлектроннаяПочтаПодтверждена Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Почта");
	Иначе
		СообщитьОбОшибкеПроверкиКодаПодтверждения("КодПодтвержденияПочты");
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеОтправкиКодаПодтвержденияТелефона(Форма, ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Форма.КодПодтвержденияТелефонаОтправляется = Ложь;
	
	Если ДлительнаяОперация = Неопределено Тогда
		Форма.ИдентификаторКодаПодтвержденияТелефона = "";
		Форма.СрокДействияКодаПодтвержденияТелефона = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ДанныеПодтверждения = Неопределено;
		
		Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
			И РезультатВыполнения.Свойство(РегистрацияОрганизацииКлиентСервер.СпособПодтвержденияТелефон(), ДанныеПодтверждения)
			И ЗначениеЗаполнено(ДанныеПодтверждения) Тогда
			
			Форма.ИдентификаторКодаПодтвержденияТелефона = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДанныеПодтверждения,
				"Идентификатор");
			Если ДанныеПодтверждения.Выполнено И ЗначениеЗаполнено(Форма.ИдентификаторКодаПодтвержденияТелефона) Тогда
				Форма.СрокДействияКодаПодтвержденияТелефона = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеПодтверждения,
					"СрокДействия");
				Форма.СрокПовторнойОтправкиКодаДляТелефона = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеПодтверждения,
					"МинимальноеВремя");
			Иначе
				СообщитьОбОшибкеОтправкиКодаПодтверждения(ДанныеПодтверждения.Ошибка);
			КонецЕсли;
		Иначе
			Форма.ИдентификаторКодаПодтвержденияТелефона = "";
			Форма.СрокДействияКодаПодтвержденияТелефона = Неопределено;
			Форма.СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
			Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПодтверждения, "Ошибка")) Тогда
				СообщитьОбОшибкеОтправкиКодаПодтверждения(ДанныеПодтверждения.Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекстПовторнаяОтправкаКодаТелефон = РегистрацияОрганизацииВызовСервера.ТекстПовторнойОтправкиКодаПодтверждения(
			Форма.СрокПовторнойОтправкиКодаДляТелефона);
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Телефон", 1, Истина);
		
	Иначе
		СообщитьОбОшибкеОтправкиКодаПодтверждения(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеОтправкиКодаПодтвержденияПочты(Форма, ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Форма.КодПодтвержденияПочтыОтправляется = Ложь;
	
	Если ДлительнаяОперация = Неопределено Тогда
		Форма.ИдентификаторКодаПодтвержденияПочты = "";
		Форма.СрокДействияКодаПодтвержденияПочты = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляПочты = Неопределено;
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ДанныеПодтверждения = Неопределено;
		
		Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
			И РезультатВыполнения.Свойство(РегистрацияОрганизацииКлиентСервер.СпособПодтвержденияЭлектроннаяПочта(), ДанныеПодтверждения)
			И ЗначениеЗаполнено(ДанныеПодтверждения) Тогда
			
			Форма.ИдентификаторКодаПодтвержденияПочты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДанныеПодтверждения,
				"Идентификатор");
			Если ДанныеПодтверждения.Выполнено И ЗначениеЗаполнено(Форма.ИдентификаторКодаПодтвержденияПочты) Тогда
				Форма.СрокДействияКодаПодтвержденияПочты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеПодтверждения,
					"СрокДействия");
				Форма.СрокПовторнойОтправкиКодаДляПочты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеПодтверждения,
					"МинимальноеВремя");
			Иначе
				СообщитьОбОшибкеОтправкиКодаПодтверждения(ДанныеПодтверждения.Ошибка);
			КонецЕсли;
		Иначе
			Форма.ИдентификаторКодаПодтвержденияПочты = "";
			Форма.СрокДействияКодаПодтвержденияПочты = Неопределено;
			Форма.СрокПовторнойОтправкиКодаДляПочты = Неопределено;
			Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПодтверждения, "Ошибка")) Тогда
				СообщитьОбОшибкеОтправкиКодаПодтверждения(ДанныеПодтверждения.Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекстПовторнаяОтправкаКодаПочта = РегистрацияОрганизацииВызовСервера.ТекстПовторнойОтправкиКодаПодтверждения(
			Форма.СрокПовторнойОтправкиКодаДляПочты);
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Почта", 1, Истина);
		
	Иначе
		СообщитьОбОшибкеОтправкиКодаПодтверждения(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПовторнаяОтправкаКодаПодтвержденияТелефона(Форма, ДополнительныеПараметры) Экспорт
	
	Если Форма.СрокПовторнойОтправкиКодаДляТелефона > Форма.СрокДействияКодаПодтвержденияТелефона Тогда
		Форма.СрокПовторнойОтправкиКодаДляТелефона = Форма.СрокДействияКодаПодтвержденияТелефона;
	КонецЕсли;
	
	Форма.ТекстПовторнаяОтправкаКодаТелефон = РегистрацияОрганизацииВызовСервера.ТекстПовторнойОтправкиКодаПодтверждения(
		Форма.СрокПовторнойОтправкиКодаДляТелефона);
	
	Если ЗначениеЗаполнено(Форма.ТекстПовторнаяОтправкаКодаТелефон) Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Телефон", 1, Истина);
	Иначе
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Телефон");
		Форма.СрокДействияКодаПодтвержденияТелефона = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторнаяОтправкаКодаПодтвержденияПочты(Форма, ДополнительныеПараметры) Экспорт
	
	Если Форма.СрокПовторнойОтправкиКодаДляПочты > Форма.СрокДействияКодаПодтвержденияПочты Тогда
		Форма.СрокПовторнойОтправкиКодаДляПочты = Форма.СрокДействияКодаПодтвержденияПочты;
	КонецЕсли;
	
	Форма.ТекстПовторнаяОтправкаКодаПочта = РегистрацияОрганизацииВызовСервера.ТекстПовторнойОтправкиКодаПодтверждения(
		Форма.СрокПовторнойОтправкиКодаДляПочты);
	
	Если ЗначениеЗаполнено(Форма.ТекстПовторнаяОтправкаКодаПочта) Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Почта", 1, Истина);
	Иначе
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПовторнаяОтправка_Почта");
		Форма.СрокДействияКодаПодтвержденияПочты = Неопределено;
		Форма.СрокПовторнойОтправкиКодаДляПочты = Неопределено;
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаявительТелефонПриИзменении(Форма, ДополнительныеПараметры) Экспорт
	
	Если Не РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СрокДействияКодаПодтвержденияТелефона = Неопределено;
	Форма.СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
	Форма.ИдентификаторКодаПодтвержденияТелефона = "";
	Форма.КодПодтвержденияТелефона = "";
	Форма.НомерТелефонаПодтвержден = Ложь;
	
	ПредставлениеТелефона = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(
		ДополнительныеПараметры.Телефон);
	
	Если Не ЗначениеЗаполнено(ПредставлениеТелефона) Тогда
		ТекстСообщения = НСтр("ru = 'Введите корректный номер мобильного телефона.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ДополнительныеПараметры.ИмяРеквизитаТелефон);
		РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
			Форма,
			ДополнительныеПараметры);
		Возврат;
	Иначе
		Форма[ДополнительныеПараметры.ИмяРеквизитаТелефон]= ПредставлениеТелефона;
	КонецЕсли;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаявительПочтаПриИзменении(Форма, ДополнительныеПараметры) Экспорт
	
	Если Не РегистрацияОрганизацииКлиентСервер.ЭтоЭлектронныйСпособПодачиДокументов(Форма.СпособПодачиДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СрокДействияКодаПодтвержденияПочты = Неопределено;
	Форма.СрокПовторнойОтправкиКодаДляПочты = Неопределено;
	Форма.ИдентификаторКодаПодтвержденияПочты = "";
	Форма.КодПодтвержденияПочты = "";
	Форма.ЭлектроннаяПочтаПодтверждена = Ложь;
	
	РегистрацияОрганизацииКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

// Открывает файл, присоединенный к заявллению
//
// Параметры:
//   Заявление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Ссылка на заявление о регистрации, внесении изменений или снятии с учета в ЕГР
//   ИмяФайла                - Строка - Идентификатор файла, См. Обработки.РегистрацияОрганизации.ИменаФайлов()
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
Процедура ОткрытьПрисоединенныйКЗаявлениюФайл(Заявление, ИмяФайла, УникальныйИдентификатор) Экспорт
	
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		ВызватьИсключение НСтр("ru = 'Заявление не заполнено'");
	КонецЕсли;
	
	Документ = РегистрацияОрганизацииВызовСервера.ДокументПоИдентификатору(
		Заявление,
		ИмяФайла,
		УникальныйИдентификатор);
	
	Если Документ <> Неопределено Тогда
		ПолучитьФайл(Документ.АдресХранилища, Документ.ИмяФайла, Истина);
	Иначе
		ВызватьИсключение НСтр("ru = 'Файл не найден'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмеютсяУстановленныеСертификатыПодписи(РезультатПроверки) Экспорт
	
	Если ЗначениеЗаполнено(РезультатПроверки)
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "Выполнено", Ложь) Тогда
		
		НужныеСертификаты = ОставитьТолькоНужныеСертификаты(РезультатПроверки.Сертификаты);
		
		Если НужныеСертификаты.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОставитьТолькоНужныеСертификаты(ВсеСертификаты)
	
	ДоступныеСертификаты = Новый Массив;
	ТекущаяДата = ОбщегоНазначенияБПВызовСервера.ТекущаяДатаНаСервере();
	
	Для Каждого ТекущийСертификат Из ВсеСертификаты Цикл
		
		Просрочен = НачалоДня(ТекущаяДата) < НачалоДня(ТекущийСертификат.ДействителенС)
			Или НачалоДня(ТекущаяДата) > НачалоДня(ТекущийСертификат.ДействителенПо);
		
		НеверноеХранилище = ТекущийСертификат.Хранилище.Хранилище <> "MY";
		
		Если Просрочен Или НеверноеХранилище Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныеСертификаты.Добавить(ТекущийСертификат);
		
	КонецЦикла;
	
	Возврат ДоступныеСертификаты;
	
КонецФункции

Функция ВидДокументаОтсканированногоФайла(ИмяРеквизита)
	
	Возврат СтрЗаменить(ИмяРеквизита, "Скан", "");
	
КонецФункции

Функция ВсеФайлыВыбраны(ФайлыПрикрепленныеДокументы, ПараметрыЗаявления)
	
	Результат = Истина;
	
	Если ФайлыПрикрепленныеДокументы.Заявление.Количество() = 0 Тогда
		
		Если ПараметрыЗаявления.ЭтоЮрЛицо Тогда
			
			Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл заявления о регистрации организации'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл заявления о внесении изменений в ЕГРЮЛ'");
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияИП() Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл заявления о регистрации индивидуального предпринимателя'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл заявления о внесении изменений в ЕГРИП'");
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СканЗаявление");
		Результат = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыЗаявления.ОтображатьИндивидуальныйУстав И ФайлыПрикрепленныеДокументы.Устав.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран файл устава'"), , "СканУстав");
		Результат = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаявления.Учредители <> Неопределено И ПараметрыЗаявления.ЭтоЮрЛицо Тогда
		
		КоличествоЮридическихЛиц = ПараметрыЗаявления.Учредители.ЮридическиеЛица.Количество();
		КоличествоФизическихЛиц  = ПараметрыЗаявления.Учредители.ФизическиеЛица.Количество();
		ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
	
		Если ЕдинственныйУчредительФизическоеЛицо И ФайлыПрикрепленныеДокументы.Решение.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран файл решения единственного учредителя'"),
				, "СканРешение");
			Результат = Ложь;
		ИначеЕсли Не ЕдинственныйУчредительФизическоеЛицо Тогда
			
			Если ФайлыПрикрепленныеДокументы.Протокол.Количество() = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран файл протокола собрания учредителей'"),
					, "СканПротокол");
				Результат = Ложь;
			КонецЕсли;
			
			Если ПараметрыЗаявления.НуженДоговорОбУчрежденииООО И ФайлыПрикрепленныеДокументы.Договор.Количество() = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран файл договора об учреждении ООО'"),
					, "СканДоговор");
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаявления.ЕстьПатент И ФайлыПрикрепленныеДокументы.Патент.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбран файл заявления на получение патента'"), ,
			"СканПатент", ,);
		Результат = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаявления.ЕстьУведомлениеОПереходеУСН
		И ФайлыПрикрепленныеДокументы.УведомлениеОПереходеНаУСН.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбран файл заявления о переходе на УСН'"), ,
			"СканУведомлениеОПереходеНаУСН", ,);
		Результат = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияИП()
		И ПараметрыЗаявления.ИностранныйГражданин
		И ФайлыПрикрепленныеДокументы.ДокументПодтверждающийЛичность.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбран документ, подтверждающий личность'"), ,
			"СканДокументПодтверждающийЛичность");
		Результат = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыЗаявления.НуженДокументПодтверждающийАдрес
		И ФайлыПрикрепленныеДокументы.ДокументПодтверждающийАдрес.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбран документ, подтверждающий адрес'"), ,
			"СканДокументПодтверждающийАдрес");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОписаниеСтруктурыФайла(ВидДокумента)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидДокумента",
		ПредопределенноеЗначение(СтрШаблон("Перечисление.ВидыДокументовДляЭлГосРегистрации.%1", ВидДокумента)));
	
	Результат.Вставить("АдресаФайлов", Новый Массив); // Массив - Массив адресов сканов во временном хранилище, содержащих двоичные
	Результат.Вставить("ТипыСодержимогоЗаявления"); // ПеречисленияСсылка.ТипыСодержимогоФайлов.XML, если заявление в формате XML, отсутствует или пустое в остальных случаях
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьФайлВОписаниеФайлов(ВидДокумента, ПрикрепленныеДокументы, ОписаниеФайлов, ДокументВXMLФормате = Ложь)

	СтруктураФайла = НовыйОписаниеСтруктурыФайла(ВидДокумента);
	Если ДокументВXMLФормате Тогда
		СтруктураФайла.ТипыСодержимогоЗаявления = ПредопределенноеЗначение("Перечисление.ТипыСодержимогоФайлов.xml");
	КонецЕсли;
	
	Для Каждого ТекущийФайл Из ПрикрепленныеДокументы Цикл
		СтруктураФайла.АдресаФайлов.Добавить(ТекущийФайл);
	КонецЦикла;
	
	ОписаниеФайлов.Добавить(СтруктураФайла);

КонецПроцедуры

Процедура СообщитьОбОшибкеОтправкиКодаПодтверждения(ТекстОшибки)
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
		НСтр("ru = 'Не удалось отправить код подтверждения.
		|%1
		|Попробуйте ещё раз.'"),
		ТекстОшибки));
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПроверкиКодаПодтверждения(ИмяЭлемента)
	
	ТекстСообщения = НСтр("ru = 'Код подтверждения неверный'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти