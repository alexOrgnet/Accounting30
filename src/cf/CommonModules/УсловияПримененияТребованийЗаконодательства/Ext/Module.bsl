#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОписаниеУсловий

Функция ПредставлениеУсловия(Условие) Экспорт
	
	Если Условие = УсловиеФизическиеЛица() Тогда
		Возврат НСтр("ru='Физические лица'");
		
	ИначеЕсли Условие = УсловиеЮридическиеЛица() Тогда
		Возврат НСтр("ru='Юридические лица'");
		
	ИначеЕсли Условие = УсловиеЕстьСотрудники() Тогда
		Возврат НСтр("ru='Есть сотрудники'");
		
	ИначеЕсли Условие = УсловиеСтраховыеВзносыСотрудников() Тогда
		Возврат НСтр("ru='Дополнительные страховые взносы сотрудников'");
		
	ИначеЕсли Условие = УсловиеОбщаяСистемаНалогообложения() Тогда
		Возврат НСтр("ru='Общая система налогообложения'");
		
	ИначеЕсли Условие = УсловиеУпрощеннаяСистемаНалогообложения() Тогда
		Возврат НСтр("ru='Упрощенная система налогообложения'");
		
	ИначеЕсли Условие = УсловиеПлательщикиНДС() Тогда
		Возврат НСтр("ru='Плательщики НДС'");
		
	ИначеЕсли Условие = УсловиеПлательщикиЕНВД() Тогда
		Возврат НСтр("ru='Плательщики ЕНВД'");
		
	ИначеЕсли Условие = УсловиеПлательщикиТорговогоСбора() Тогда
		Возврат НСтр("ru='Плательщики торгового сбора'");
		
	ИначеЕсли Условие = УсловиеЕстьЗемельныеУчастки() Тогда
		Возврат НСтр("ru='Есть земельные участки'");
		
	ИначеЕсли Условие = УсловиеЕстьТранспортныеСредства() Тогда
		Возврат НСтр("ru='Есть транспортные средства'");
		
	ИначеЕсли Условие = УсловиеЕстьИмущество() Тогда
		Возврат НСтр("ru='Есть имущество'");
		
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьОбщаяФорма() Тогда
		Возврат НСтр("ru='Бухгалтерская отчетность общая форма'");
		
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьМалыеПредприятия() Тогда
		Возврат НСтр("ru='Бухгалтерская отчетность малые предприятия'");
		
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьНекоммерческиеОрганизации() Тогда
		Возврат НСтр("ru='Бухгалтерская отчетность некоммерческие организации'");
		
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьСоциальноОриентированные() Тогда
		Возврат НСтр("ru='Бухгалтерская отчетность социально ориентированные'");
		
	ИначеЕсли Условие = УсловиеНалогНаПрибыльАвансыЕжеквартально() Тогда
		Возврат НСтр("ru='Налог на прибыль авансы ежеквартально'");
		
	ИначеЕсли Условие = УсловиеНалогНаПрибыльАвансыЕжемесячно() Тогда
		Возврат НСтр("ru='Налог на прибыль авансы ежемесячно'");
		
	ИначеЕсли Условие = УсловиеНалогНаПрибыльАвансыПоФактическойПрибыли() Тогда
		Возврат НСтр("ru='Налог на прибыль авансы по фактической прибыли'");
		
	ИначеЕсли Условие = УсловиеАкцизыОбщаяФорма() Тогда
		Возврат НСтр("ru='Акцизы общая форма'");
		
	ИначеЕсли Условие = УсловиеАкцизыОбщийСрок() Тогда
		Возврат НСтр("ru='Акцизы общий срок'");
		
	ИначеЕсли Условие = УсловиеАкцизыФормаАлкоголь() Тогда
		Возврат НСтр("ru='Акцизы форма алкоголь'");
		
	ИначеЕсли Условие = УсловиеАкцизыФормаТабак() Тогда
		Возврат НСтр("ru='Акцизы форма табак'");
		
	ИначеЕсли Условие = УсловиеАкцизыЛьготныйСрок() Тогда
		Возврат НСтр("ru='Акцизы льготный срок'");
		
	ИначеЕсли Условие = УсловиеАвансыПоАкцизам() Тогда
		Возврат НСтр("ru='Авансы по акцизам'");
		
	ИначеЕсли Условие = УсловиеРозничнаяПродажаАлкоголя() Тогда
		Возврат НСтр("ru='Розничная продажа алкогольной и спиртосодержащей продукции'");
		
	ИначеЕсли Условие = УсловиеОптоваяТорговляАлкоголем() Тогда
		Возврат НСтр("ru='Оптовая поставка спирта, алкогольной или спиртосодержащей продукции'");
		
	ИначеЕсли Условие = УсловиеПроизводствоАлгоколя() Тогда
		Возврат НСтр("ru='Производство спирта, алкогольной или спиртосодержащей продукции'");
		
	ИначеЕсли Условие = УсловиеПеревозкаАлкоголя() Тогда
		Возврат НСтр("ru='Специализированная перевозка спирта, алкогольной или спиртосодержащей продукции'");
		
	ИначеЕсли Условие = УсловиеЗадачаВыбранаПользователем() Тогда
		Возврат НСтр("ru='Задача выбрана пользователем'");
		
	ИначеЕсли Условие = УсловиеПравилоВыбраноПользователем() Тогда
		Возврат НСтр("ru='Правило выбрано пользователем'");
		
	ИначеЕсли Условие = УсловиеФиксированныеСтраховыеВзносы_Год() Тогда
		Возврат НСтр("ru='Периодичность уплаты фиксированных страховых взносов - год'");
		
	ИначеЕсли Условие = УсловиеФиксированныеСтраховыеВзносы_Квартал() Тогда
		Возврат НСтр("ru='Периодичность уплаты фиксированных страховых взносов - квартал'");
		
	ИначеЕсли Условие = УсловиеФиксированныеСтраховыеВзносы_Месяц() Тогда
		Возврат НСтр("ru='Периодичность уплаты фиксированных страховых взносов - месяц'");
		
	ИначеЕсли Условие = УсловиеОтчетностьПФРвЭлектронномВиде() Тогда
		Возврат НСтр("ru='Отчетность в ПФР представляется в электронном виде'");
		
	ИначеЕсли Условие = УсловиеОтчетностьПФРнаБумажномНосителе() Тогда
		Возврат НСтр("ru='Отчетность в ПФР представляется на бумажном носителе'");
		
	ИначеЕсли Условие = УсловиеОтчетностьФССвЭлектронномВиде() Тогда
		Возврат НСтр("ru='Отчетность в ФСС представляется в электронном виде'");
		
	ИначеЕсли Условие = УсловиеОтчетностьФССнаБумажномНосителе() Тогда
		Возврат НСтр("ru='Отчетность в ФСС представляется на бумажном носителе'");
		
	ИначеЕсли Условие = УсловиеИмпортТоваровТаможенныйСоюз() Тогда
		Возврат НСтр("ru='Импорт товаров из стран таможенного союза'");
		
	ИначеЕсли Условие = УсловиеРозничнаяПродажаПива() Тогда
		Возврат НСтр("ru='Розничная продажа пива и пивных напитков'");
		
	ИначеЕсли Условие = УсловиеСверкаДанныхНДС() Тогда
		Возврат НСтр("ru='Сверка данных НДС'");
		
	ИначеЕсли Условие = УсловиеЖурналСчетовФактур() Тогда
		Возврат НСтр("ru='Журнал счетов фактур'");
		
	ИначеЕсли Условие = УсловиеРегистрацияНовойОрганизации() Тогда
		Возврат НСтр("ru='Регистрация новой организации'");
		
	ИначеЕсли Условие = УсловиеОтчетностьНалоговогоАгентаПоНДФЛ() Тогда
		Возврат НСтр("ru='Отчетность налогового агента по НДФЛ'");
		
	ИначеЕсли Условие = УсловиеВыставлениеСчетовФактурНеплательщикамиНДС() Тогда
		Возврат НСтр("ru='Выставление счетов-фактур неплательщиками НДС'");
		
	ИначеЕсли Условие = УсловиеЕстьНалогКУплатеПоДекларации3НДФЛ() Тогда
		Возврат НСтр("ru='Есть налог к уплате по декларации 3-НДФЛ'");
		
	ИначеЕсли Условие = УсловиеНалогНаПрофессиональныйДоход() Тогда
		Возврат НСтр("ru='Налог на профессиональный доход'");
		
	ИначеЕсли Условие = УсловиеПлательщикиФиксированныхСтраховыхВзносов() Тогда
		Возврат НСтр("ru='Плательщики фиксированных страховых взносов'");
		
	ИначеЕсли Условие = УсловиеВыплачиваетсяЗарплата() Тогда
		Возврат НСтр("ru='Выплачивается зарплата'");
		
	ИначеЕсли Условие = УсловиеЕстьЛьготыПоТранспортномуЗемельномуНалогу() Тогда
		Возврат НСтр("ru='Есть льготы по транспортному и (или) земельному налогу'");
		
	ИначеЕсли Условие = УсловиеРегистрируютсяКадровыеМероприятия() Тогда
		Возврат НСтр("ru='Регистрируются кадровые мероприятия'");
		
	ИначеЕсли Условие = УсловиеНекоммерческиеОрганизации() Тогда
		Возврат НСтр("ru='Некоммерческие организации'");
		
	ИначеЕсли Условие = УсловиеАкцизыФормаНефтяноеСырье() Тогда
		Возврат НСтр("ru='Акцизы форма нефтяное сырье'");
		
	ИначеЕсли Условие = УсловиеПереходНаУСН() Тогда
		Возврат НСтр("ru='Переход на УСН'");
		
	ИначеЕсли Условие = УсловиеПереходНаПатент() Тогда
		Возврат НСтр("ru='Переход на патент'");
		
	ИначеЕсли Условие = УсловиеАУСН() Тогда
		Возврат НСтр("ru='Автоматизированная УСН'");
		
	ИначеЕсли Условие = УсловиеЕстьЗадолженностьУчредителей() Тогда
		Возврат НСтр("ru='Есть задолженность учредителей'");
		
	ИначеЕсли Условие = УсловиеОрганизацияЗарегистрированаТекущимДнем() Тогда
		Возврат НСтр("ru='Организация зарегистрирована текущим днем'");
		
	ИначеЕсли Условие = УсловиеДобровольныеВзносыВФСС() Тогда
		Возврат НСтр("ru='Добровольные взносы в ФСС'");
		
	ИначеЕсли Условие = УсловиеКлассическийПорядокУчетаНалогов() Тогда
		Возврат НСтр("ru='Классический порядок учета налогов'");
		
	ИначеЕсли Условие = УсловиеСдаетсяОтчетностьСЗВ_М() Тогда
		Возврат НСтр("ru='Сдается отчетность СЗВ-М'");
		
	ИначеЕсли Условие = УсловиеСдаетсяОтчетностьСЗВ_Стаж() Тогда
		Возврат НСтр("ru='Сдается отчетность СЗВ-СТАЖ'");
		
	ИначеЕсли Условие = УсловиеПлательщикЕНП() Тогда
		Возврат НСтр("ru='Плательщик единого налогового платежа'");
		
	ИначеЕсли Условие = УсловиеВыставлениеСчетовФактурНалоговогоАгентаНеплательщикамиНДС() Тогда
		Возврат НСтр("ru='Выставление счетов фактур налогового агента неплательщиками НДС'");
		
	ИначеЕсли Условие = УсловиеПереходНаЕНП() Тогда
		Возврат НСтр("ru='Переход на ЕНП'");
		
	ИначеЕсли Условие = УсловиеСменаОбъектаУСН() Тогда
		Возврат НСтр("ru='Смена объекта УСН'");
		
	ИначеЕсли Условие = УсловиеЗаявлениеОЗачетеВзносов() Тогда
		Возврат НСтр("ru='Заявление о зачете средств на ЕНП в счет уплаты взносов'");
		
	ИначеЕсли Условие = УсловиеНеЗаполненаДатаЗакрытия() Тогда
		Возврат НСтр("ru='Не заполнена дата закрытия'");
		
	ИначеЕсли Условие = УсловиеПлательщикиФиксированныхСтраховыхВзносовНаДатуЗакрытия() Тогда
		Возврат НСтр("ru='Плательщики фиксированных страховых взносов на дату закрытия'");
		
	ИначеЕсли Условие = УсловиеЗаполненаДатаЗакрытия() Тогда
		Возврат НСтр("ru='Заполнена дата закрытия'");
		
	ИначеЕсли Условие = УпрощенныйЗачетФиксированныхСтраховыхВзносов() Тогда
		Возврат НСтр("ru='Упрощенный зачет фиксированных страховых взносов'");
		
	ИначеЕсли Условие = УсловиеТринадцатыйПериодНДФЛ() Тогда
		Возврат НСтр("ru='НДФЛ удержанный с 23.12 по 31.12'");
		
	ИначеЕсли Условие = УсловиеЕжемесячныйПлатежНаЕНС() Тогда
		Возврат НСтр("ru='Ежемесячный платеж на ЕНС'");
		
	ИначеЕсли Условие = УсловиеПроизводилисьВыплатыИностраннымКонтрагентам() Тогда
		Возврат НСтр("ru='Производились выплаты иностранным контрагентам'");
		
	Иначе
		Возврат Условие;
		
	КонецЕсли;
	
КонецФункции

Функция УсловиеФизическиеЛица() Экспорт
	
	Возврат "ФизическиеЛица";
	
КонецФункции

Функция УсловиеЮридическиеЛица() Экспорт
	
	Возврат "ЮридическиеЛица";
	
КонецФункции

Функция УсловиеОбщаяСистемаНалогообложения() Экспорт
	
	Возврат "ОбщаяСистемаНалогообложения";
	
КонецФункции

Функция УсловиеУпрощеннаяСистемаНалогообложения() Экспорт
	
	Возврат "УпрощеннаяСистемаНалогообложения";
	
КонецФункции

Функция УсловиеАУСН() Экспорт
	
	Возврат "АУСН";
	
КонецФункции

Функция УсловиеПлательщикиНДС() Экспорт
	
	Возврат "ПлательщикиНДС";
	
КонецФункции

Функция УсловиеПлательщикиЕНВД() Экспорт
	
	Возврат "ПлательщикиЕНВД";
	
КонецФункции

Функция УсловиеЕстьСотрудники() Экспорт
	
	Возврат "ЕстьСотрудники";
	
КонецФункции

Функция УсловиеСтраховыеВзносыСотрудников() Экспорт
	
	Возврат "СтраховыеВзносыСотрудников";
	
КонецФункции

Функция УсловиеПлательщикиТорговогоСбора() Экспорт
	
	Возврат "ПлательщикиТорговогоСбора";
	
КонецФункции

Функция УсловиеЕстьЗемельныеУчастки() Экспорт
	
	Возврат "ЕстьЗемельныеУчастки";
	
КонецФункции

Функция УсловиеЕстьТранспортныеСредства() Экспорт
	
	Возврат "ЕстьТранспортныеСредства";
	
КонецФункции

Функция УсловиеЕстьИмущество() Экспорт
	
	Возврат "ЕстьИмущество";
	
КонецФункции

Функция УсловиеЕстьДекларируемоеИмущество() Экспорт
	
	Возврат "ЕстьДекларируемоеИмущество";
	
КонецФункции

Функция УсловиеЕстьОблагаемоеНедекларируемоеИмущество() Экспорт
	
	Возврат "ЕстьОблагаемоеНедекларируемоеИмущество";
	
КонецФункции

Функция УсловиеБухгалтерскаяОтчетностьОбщаяФорма() Экспорт
	
	Возврат "БухгалтерскаяОтчетностьОбщаяФорма";
	
КонецФункции

Функция УсловиеБухгалтерскаяОтчетностьМалыеПредприятия() Экспорт
	
	Возврат "БухгалтерскаяОтчетностьМалыеПредприятия";
	
КонецФункции

Функция УсловиеБухгалтерскаяОтчетностьНекоммерческиеОрганизации() Экспорт
	
	Возврат "БухгалтерскаяОтчетностьНекоммерческиеОрганизации";
	
КонецФункции

Функция УсловиеБухгалтерскаяОтчетностьСоциальноОриентированные() Экспорт
	
	Возврат "БухгалтерскаяОтчетностьСоциальноОриентированные";
	
КонецФункции

Функция УсловиеНалогНаПрибыльАвансыЕжеквартально() Экспорт
	
	Возврат "НалогНаПрибыльАвансыЕжеквартально";
	
КонецФункции

Функция УсловиеНалогНаПрибыльАвансыЕжемесячно() Экспорт
	
	Возврат "НалогНаПрибыльАвансыЕжемесячно";
	
КонецФункции

Функция УсловиеНалогНаПрибыльАвансыПоФактическойПрибыли() Экспорт
	
	Возврат "НалогНаПрибыльАвансыПоФактическойПрибыли";
	
КонецФункции

Функция УсловиеАкцизыОбщаяФорма() Экспорт
	
	Возврат "АкцизыОбщаяФорма";
	
КонецФункции

Функция УсловиеАкцизыОбщийСрок() Экспорт
	
	Возврат "АкцизыОбщийСрок";
	
КонецФункции

Функция УсловиеАкцизыФормаАлкоголь() Экспорт
	
	Возврат "АкцизыФормаАлкоголь";
	
КонецФункции

Функция УсловиеАкцизыФормаТабак() Экспорт
	
	Возврат "АкцизыФормаТабак";
	
КонецФункции

Функция УсловиеАкцизыЛьготныйСрок() Экспорт
	
	Возврат "АкцизыЛьготныйСрок";
	
КонецФункции

Функция УсловиеАвансыПоАкцизам() Экспорт
	
	Возврат "АвансыПоАкцизам";
	
КонецФункции

Функция УсловиеРозничнаяПродажаАлкоголя() Экспорт
	
	Возврат "РозничнаяПродажаАлкоголя";
	
КонецФункции

Функция УсловиеОптоваяТорговляАлкоголем() Экспорт
	
	Возврат "ОптоваяТорговляАлкоголем";
	
КонецФункции

Функция УсловиеПроизводствоАлгоколя() Экспорт
	
	Возврат "ПроизводствоАлгоколя";
	
КонецФункции

Функция УсловиеПеревозкаАлкоголя() Экспорт
	
	Возврат "ПеревозкаАлкоголя";
	
КонецФункции

Функция УсловиеЗадачаВыбранаПользователем() Экспорт
	
	Возврат "ЗадачаВыбранаПользователем";
	
КонецФункции

Функция УсловиеПравилоВыбраноПользователем() Экспорт
	
	Возврат "ПравилоВыбраноПользователем";
	
КонецФункции

Функция УсловиеФиксированныеСтраховыеВзносы_Год() Экспорт
	
	Возврат "ФиксированныеСтраховыеВзносы_Год";
	
КонецФункции

Функция УсловиеФиксированныеСтраховыеВзносы_Квартал() Экспорт
	
	Возврат "ФиксированныеСтраховыеВзносы_Квартал";
	
КонецФункции

Функция УсловиеФиксированныеСтраховыеВзносы_Месяц() Экспорт
	
	Возврат "ФиксированныеСтраховыеВзносы_Месяц";
	
КонецФункции

Функция УсловиеОтчетностьПФРвЭлектронномВиде() Экспорт
	
	Возврат "ОтчетностьПФРвЭлектронномВиде";
	
КонецФункции

Функция УсловиеОтчетностьПФРнаБумажномНосителе() Экспорт
	
	Возврат "ОтчетностьПФРнаБумажномНосителе";
	
КонецФункции

Функция УсловиеОтчетностьФССвЭлектронномВиде() Экспорт
	
	Возврат "ОтчетностьФССвЭлектронномВиде";
	
КонецФункции

Функция УсловиеОтчетностьФССнаБумажномНосителе() Экспорт
	
	Возврат "ОтчетностьФССнаБумажномНосителе";
	
КонецФункции

Функция УсловиеИмпортТоваровТаможенныйСоюз() Экспорт
	
	Возврат "ИмпортТоваровТаможенныйСоюз";
	
КонецФункции

Функция УсловиеРозничнаяПродажаПива() Экспорт
	
	Возврат "РозничнаяПродажаПива";
	
КонецФункции

Функция УсловиеСверкаДанныхНДС() Экспорт
	
	Возврат "СверкаДанныхНДС";
	
КонецФункции

Функция УсловиеЖурналСчетовФактур() Экспорт
	
	Возврат "ЖурналСчетовФактур";
	
КонецФункции

Функция УсловиеРегистрацияНовойОрганизации() Экспорт
	
	Возврат "РегистрацияНовойОрганизации";
	
КонецФункции

Функция УсловиеОтчетностьНалоговогоАгентаПоНДФЛ() Экспорт
	
	Возврат "ОтчетностьНалоговогоАгентаПоНДФЛ";
	
КонецФункции

Функция УсловиеВыставлениеСчетовФактурНеплательщикамиНДС() Экспорт
	
	Возврат "ВыставлениеСчетовФактурНеплательщикамиНДС";
	
КонецФункции

Функция УсловиеЕстьНалогКУплатеПоДекларации3НДФЛ() Экспорт
	
	Возврат "ЕстьНалогКУплатеПоДекларации3НДФЛ";
	
КонецФункции

Функция УсловиеНалогНаПрофессиональныйДоход() Экспорт
	
	Возврат "НалогНаПрофессиональныйДоход";
	
КонецФункции

Функция УсловиеПлательщикиФиксированныхСтраховыхВзносов() Экспорт
	
	Возврат "ПлательщикиФиксированныхСтраховыхВзносов";
	
КонецФункции

Функция УсловиеВыплачиваетсяЗарплата() Экспорт
	
	Возврат "ВыплачиваетсяЗарплата";
	
КонецФункции

Функция УсловиеЕстьЛьготыПоТранспортномуЗемельномуНалогу() Экспорт
	
	Возврат "ЕстьЛьготыПоТранспортномуЗемельномуНалогу";
	
КонецФункции

Функция УсловиеРегистрируютсяКадровыеМероприятия() Экспорт
	
	Возврат "РегистрируютсяКадровыеМероприятия";
	
КонецФункции

Функция УсловиеНекоммерческиеОрганизации() Экспорт
	
	Возврат "НекоммерческиеОрганизации";
	
КонецФункции

Функция УсловиеАкцизыФормаНефтяноеСырье() Экспорт
	
	Возврат "АкцизыФормаНефтяноеСырье";
	
КонецФункции

Функция УсловиеПереходНаУСН() Экспорт
	
	Возврат "ПереходНаУСН";
	
КонецФункции

Функция УсловиеПереходНаПатент() Экспорт
	
	Возврат "ПереходНаПатент";
	
КонецФункции

Функция УсловиеЕстьЗадолженностьУчредителей() Экспорт
	
	Возврат "ЕстьЗадолженностьУчредителей";
	
КонецФункции

Функция УсловиеОрганизацияЗарегистрированаТекущимДнем() Экспорт
	
	Возврат "ОрганизацияЗарегистрированаТекущимДнем";
	
КонецФункции

Функция УсловиеДобровольныеВзносыВФСС() Экспорт
	
	Возврат "ДобровольныеВзносыВФСС";
	
КонецФункции

Функция УсловиеКлассическийПорядокУчетаНалогов() Экспорт
	
	Возврат "КлассическийПорядокУчетаНалогов";
	
КонецФункции

Функция УсловиеСдаетсяОтчетностьСЗВ_М() Экспорт
	
	Возврат "СдаетсяОтчетностьСЗВ_М";
	
КонецФункции

Функция УсловиеСдаетсяОтчетностьСЗВ_Стаж() Экспорт
	
	Возврат "СдаетсяОтчетностьСЗВ_Стаж";
	
КонецФункции

Функция УсловиеПлательщикЕНП() Экспорт
	
	Возврат "ПлательщикЕНП";
	
КонецФункции

Функция УсловиеВыставлениеСчетовФактурНалоговогоАгентаНеплательщикамиНДС() Экспорт
	
	Возврат "ВыставлениеСчетовФактурНалоговогоАгентаНеплательщикамиНДС";
	
КонецФункции

Функция УсловиеПереходНаЕНП() Экспорт
	
	Возврат "ПереходНаЕНП";
	
КонецФункции

Функция УсловиеПлательщикЕСХН() Экспорт
	
	Возврат "ПлательщикЕСХН";
	
КонецФункции

Функция УсловиеПлательщикНДПИ() Экспорт
	
	Возврат "ПлательщикНДПИ";
	
КонецФункции

Функция УсловиеПлательщикНалогаНаИгорныйБизнес() Экспорт
	
	Возврат "ПлательщикНалогаНаИгорныйБизнес";
	
КонецФункции

Функция УсловиеПлательщикВодногоНалога() Экспорт
	
	Возврат "ПлательщикВодногоНалога";
	
КонецФункции

Функция УсловиеПлательщикиВзносовСДоходов() Экспорт
	
	Возврат "ПлательщикиВзносовСДоходов";
	
КонецФункции

Функция УсловиеСменаОбъектаУСН() Экспорт
	
	Возврат "СменаОбъектаУСН";
	
КонецФункции

Функция УсловиеЗаявлениеОЗачетеВзносов() Экспорт
	
	Возврат "ЗаявлениеОЗачетеВзносов";
	
КонецФункции

Функция УсловиеОформленыПлатежныеПорученияНаВыплатыСотрудникамАУСН()
	
	Возврат "ОформленыПлатежныеПорученияНаВыплатыСотрудникамАУСН";
	
КонецФункции

Функция УсловиеНеЗаполненаДатаЗакрытия()
	
	Возврат "НеЗаполненаДатаЗакрытия";
	
КонецФункции

Функция УсловиеПлательщикиФиксированныхСтраховыхВзносовНаДатуЗакрытия()
	
	Возврат "ПлательщикиФиксированныхСтраховыхВзносовНаДатуЗакрытия";
	
КонецФункции

Функция УсловиеЗаполненаДатаЗакрытия()
	
	Возврат "ЗаполненаДатаЗакрытия";
	
КонецФункции

Функция УпрощенныйЗачетФиксированныхСтраховыхВзносов()
	
	Возврат "УпрощенныйЗачетФиксированныхСтраховыхВзносов";
	
КонецФункции

Функция УсловиеТринадцатыйПериодНДФЛ() Экспорт
	
	Возврат "ТринадцатыйПериодНДФЛ";
	
КонецФункции

Функция УсловиеЕжемесячныйПлатежНаЕНС() Экспорт
	
	Возврат "ЕжемесячныйПлатежНаЕНС";
	
КонецФункции

Функция УсловиеПроизводилисьВыплатыИностраннымКонтрагентам() Экспорт
	
	Возврат "ПроизводилисьВыплатыИностраннымКонтрагентам";
	
КонецФункции

#КонецОбласти

Функция УсловияПоВозрастаниюСложности() Экспорт
	
	ПорядокУсловий = Новый Массив; 
	ПорядокУсловий.Добавить(УсловиеФизическиеЛица());
	ПорядокУсловий.Добавить(УсловиеЮридическиеЛица());
	ПорядокУсловий.Добавить(УсловиеОбщаяСистемаНалогообложения());
	ПорядокУсловий.Добавить(УсловиеУпрощеннаяСистемаНалогообложения());
	ПорядокУсловий.Добавить(УсловиеАУСН());
	ПорядокУсловий.Добавить(УсловиеПлательщикиНДС());
	ПорядокУсловий.Добавить(УсловиеПлательщикиЕНВД());
	
	// Все остальные считаем сложными
	
	Возврат ПорядокУсловий;
	
КонецФункции

Функция ПроверитьУсловия(Знач УсловияДляПроверки, Период, Периодичность, Организация, ВыполненныеУсловия = Неопределено) Экспорт
	
	ВыполненныеУсловия = Новый Массив;
	
	Если УсловияДляПроверки.Количество() = 0 Тогда
		Возврат Неопределено; // Все условия выполнены
	КонецЕсли;
	
	Для Каждого Условие Из УсловияДляПроверки Цикл
		
		Если УсловиеВыполняется(Условие, Период, Периодичность, Организация) Тогда
			ВыполненныеУсловия.Добавить(Условие);
		Иначе
			Возврат Условие;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено; // Все условия выполнены
	
КонецФункции

Функция УсловиеВыполняется(Условие, Период, Периодичность, Организация) Экспорт
	
	// При отсутствии описания условия проверки не проводим.
	// Такое условие не может быть выполнено.
	Если ПустаяСтрока(Условие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ЮридическиеЛица, ФизическиеЛица
	Если Условие = УсловиеФизическиеЛица() Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Условие = УсловиеЮридическиеЛица() Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	// ЕстьСотрудники
	Если Условие = УсловиеЕстьСотрудники() Тогда
		Возврат УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация);
	КонецЕсли;
	
	Если Условие = УсловиеВыплачиваетсяЗарплата() Тогда
		Возврат УчетЗарплаты.ВыплачиваетсяЗарплата(Организация, Период);
	КонецЕсли;
	
	Если Условие = УсловиеРегистрируютсяКадровыеМероприятия() Тогда
		Возврат УчетЗарплаты.ЗарегистрированыКадровыеМероприятия(Организация, Период, Периодичность);
	КонецЕсли;
	
	// СистемаНалогообложения
	Если Условие = УсловиеОбщаяСистемаНалогообложения() Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Общая;
	ИначеЕсли Условие = УсловиеУпрощеннаяСистемаНалогообложения() Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Упрощенная;
	ИначеЕсли Условие = УсловиеНалогНаПрофессиональныйДоход() Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход;
	ИначеЕсли Условие = УсловиеАУСН() Тогда
		Возврат ПрименяетсяАУСН(Организация, Период, Периодичность);
	КонецЕсли;
	
	Если Условие = УсловиеПлательщикЕНП() Тогда
		Возврат УчетнаяПолитика.ПлательщикЕНП(Организация, Период)
			Или УчетнаяПолитика.ПлательщикЕНП(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	
	Если Условие = УсловиеКлассическийПорядокУчетаНалогов() Тогда
		Возврат Не (УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.АУСН
			И УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.АУСН);
	КонецЕсли; 
	
	// Отдельные виды налогов
	Если Условие = УсловиеПлательщикиЕНВД() Тогда
		Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) 
		Или УчетнаяПолитика.ПлательщикЕНВД(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	ИначеЕсли Условие = УсловиеПлательщикиНДС() Тогда
		Возврат УчетнаяПолитика.ПлательщикНДС(Организация, Период)
		Или УчетнаяПолитика.ПлательщикНДС(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	
	// Порядок уплаты авансов по налогу на прибыль
	Если Условие = УсловиеНалогНаПрибыльАвансыЕжеквартально() Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально;
	ИначеЕсли Условие = УсловиеНалогНаПрибыльАвансыЕжемесячно() Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно;
	ИначеЕсли Условие = УсловиеНалогНаПрибыльАвансыПоФактическойПрибыли() Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
	КонецЕсли;
	
	// Вариант бухгалтерской отчетности
	Если Условие = УсловиеБухгалтерскаяОтчетностьМалыеПредприятия() Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий;
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьНекоммерческиеОрганизации() Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ДляНекоммерческихОрганизаций;
	ИначеЕсли Условие = УсловиеБухгалтерскаяОтчетностьОбщаяФорма() Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	КонецЕсли;
	
	// Виды имущества
	Если Условие = УсловиеЕстьИмущество() Тогда
		Возврат ЕстьИмущество(Период, Периодичность, Организация);
	ИначеЕсли Условие = УсловиеЕстьДекларируемоеИмущество() Тогда
		Возврат ЕстьДекларируемоеИмущество(Период, Периодичность, Организация);
	ИначеЕсли Условие = УсловиеЕстьОблагаемоеНедекларируемоеИмущество() Тогда
		Возврат ЕстьОблагаемоеНедекларируемоеИмущество(Период, Периодичность, Организация);
	ИначеЕсли Условие = УсловиеЕстьТранспортныеСредства() Тогда
		Возврат РегистрыСведений.РегистрацияТранспортныхСредств.ЕстьТранспортныеСредства(Период, Периодичность, Организация);
	ИначеЕсли Условие = УсловиеЕстьЗемельныеУчастки() Тогда
		Возврат РегистрыСведений.РегистрацияЗемельныхУчастков.ЕстьЗемельныеУчастки(Период, Периодичность, Организация);
	КонецЕсли;
	
	// Льготы по имущественным налогам
	Если Условие = УсловиеЕстьЛьготыПоТранспортномуЗемельномуНалогу() Тогда
		Возврат РегистрыСведений.РегистрацияТранспортныхСредств.ЕстьЛьготыПоТранспортномуНалогу(Организация, Период, Периодичность)
			Или РегистрыСведений.РегистрацияЗемельныхУчастков.ЕстьЛьготыПоЗемельномуНалогу(Организация, Период, Периодичность);
	КонецЕсли;
		
	// Акцизы
	Если Условие = УсловиеАкцизыОбщаяФорма() Тогда
		ВидыТоваровСпециальныеФормы = Новый Массив;
		// см. АкцизыФормаАлкоголь
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		// см. АкцизыФормаТабак
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.Табак);
		// см. АкцизыФормаНефтяноеСырье
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.НефтяноеСырье);
		Возврат ЕстьАкцизыИныеТовары(Организация, ВидыТоваровСпециальныеФормы);
	ИначеЕсли Условие = УсловиеАкцизыФормаАлкоголь() Тогда
		ВидыТоваровАлкоголь = Новый Массив;
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		Возврат ЕстьАкцизыПоВидуТоваров(Организация, ВидыТоваровАлкоголь);
	ИначеЕсли Условие = УсловиеАкцизыФормаТабак() Тогда
		Возврат ЕстьАкцизыПоВидуТоваров(Организация, Перечисления.ВидыПодакцизныхТоваров.Табак);
	ИначеЕсли Условие = УсловиеАкцизыФормаНефтяноеСырье() Тогда
		Возврат ЕстьАкцизыПоВидуТоваров(Организация, Перечисления.ВидыПодакцизныхТоваров.НефтяноеСырье);
	ИначеЕсли Условие = УсловиеАкцизыОбщийСрок() Тогда
		Возврат ЕстьАкцизыОбщийСрок(Организация);
	ИначеЕсли Условие = УсловиеАкцизыЛьготныйСрок() Тогда
		Возврат ЕстьАкцизыЛьготныйСрок(Организация);
	ИначеЕсли Условие = УсловиеАвансыПоАкцизам() Тогда
		Возврат ЕстьАвансыПоАкцизам(Организация);
	КонецЕсли;
	
	// Фиксированные страховые взносы
	Если Условие = УсловиеПлательщикиФиксированныхСтраховыхВзносов() Тогда
		Возврат УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоГода(Период), КонецГода(Период));
	КонецЕсли;
	
	Если Условие = УсловиеФиксированныеСтраховыеВзносы_Квартал() Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Квартал);
	ИначеЕсли Условие = УсловиеФиксированныеСтраховыеВзносы_Год() Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, КонецГода(Период));
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Год);
	ИначеЕсли Условие = УсловиеФиксированныеСтраховыеВзносы_Месяц() Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов =
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Месяц);
	КонецЕсли;
	
	Если Условие = УсловиеДобровольныеВзносыВФСС() Тогда
		Возврат УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, НачалоГода(Период));		
	КонецЕсли;
	
	ДатаЗакрытияОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаЗакрытияОрганизации(Организация);
	Если Условие = УсловиеНеЗаполненаДатаЗакрытия() Тогда
		ПериодЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		Возврат Не ЗначениеЗаполнено(ДатаЗакрытияОрганизации) Или ПериодЗадачи < ДатаЗакрытияОрганизации;
	КонецЕсли;
	
	Если Условие = УсловиеЗаполненаДатаЗакрытия() Тогда
		Если Не ЗначениеЗаполнено(ДатаЗакрытияОрганизации) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат НачалоГода(Период) = НачалоГода(ДатаЗакрытияОрганизации);
	КонецЕсли;
	
	Если Условие = УпрощенныйЗачетФиксированныхСтраховыхВзносов() Тогда
		Возврат УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, Период);
	КонецЕсли;
	
	Если Условие = УсловиеПлательщикиФиксированныхСтраховыхВзносовНаДатуЗакрытия() Тогда
		ПлательщикФиксированныхВзносов = УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(
			Организация,
			НачалоГода(Период),
			НачалоДня(ДатаЗакрытияОрганизации) - 1);
		Возврат НачалоГода(ДатаЗакрытияОрганизации) = НачалоГода(Период) И ПлательщикФиксированныхВзносов;
	КонецЕсли;
	
	// Представление отчетов в электронном виде
	Если Условие = УсловиеОтчетностьПФРвЭлектронномВиде() Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = УсловиеОтчетностьПФРнаБумажномНосителе() Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = УсловиеОтчетностьФССвЭлектронномВиде() Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	ИначеЕсли Условие = УсловиеОтчетностьФССнаБумажномНосителе() Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	КонецЕсли;
	
	// Косвенные налоги при импорте товаров из таможенного союза
	Если Условие = УсловиеИмпортТоваровТаможенныйСоюз() Тогда
		Возврат ЕстьИмпортТоваровИзТаможенногоСоюза(Период, Периодичность, Организация);
	КонецЕсли; 
	
	Если Условие = УсловиеПлательщикиТорговогоСбора() Тогда
		Возврат УчетнаяПолитика.ПлательщикТорговогоСбора(Организация, Период)
			ИЛИ ЕстьОбъектыТорговогоСбора(Период, Периодичность, Организация);
	КонецЕсли;
	
	Если Условие = УсловиеСверкаДанныхНДС() Тогда
		
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Возврат Обработки.СверкаДанныхУчетаНДС.ВозможнаСверкаНДСЗаПериод(НачалоПериода, КонецПериода, Организация);
		
	КонецЕсли;
	
	// Условия по отчетности/уплате по НДС для неплательщиков
	Если Условие = УсловиеЖурналСчетовФактур() Тогда
		
		Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
			КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
			
			Возврат Обработки.СверкаДанныхУчетаНДС.ВозможнаСверкаНДСЗаПериод(НачалоПериода, КонецПериода, Организация);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Условие = УсловиеВыставлениеСчетовФактурНеплательщикамиНДС() Тогда
		
		Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			Возврат ЕстьЗаписиКнигиПродаж(Период, Периодичность, Организация);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Условие = УсловиеВыставлениеСчетовФактурНалоговогоАгентаНеплательщикамиНДС() Тогда
		
		Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			Возврат ЕстьЗаписиКнигиПродажНалоговогоАгента(Период, Периодичность, Организация);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Наличие отчетности при исполнении обязанности налогового агента по НДФЛ.
	Если Условие = УсловиеОтчетностьНалоговогоАгентаПоНДФЛ() Тогда
		
		// В качестве анализируемого периода используем текущий и предыдущий налоговый период, 
		// чтобы если сейчас начало января и за текущий год еще ничего не начислялось и не оплачивалось,
		// то были учтены данные прошлого года.
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		НачалоПредыдущегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, НачалоПериода - 1);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Возврат ЕстьОстаткиИОборотыПоСчету(НачалоПредыдущегоПериода, КонецПериода, Организация, ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента)
			Или УчетЗарплаты.ЕстьСведенияОДоходахНДФЛ(Организация, НачалоПредыдущегоПериода, КонецПериода);
		
	КонецЕсли;
	
	Если Условие = УсловиеЕстьНалогКУплатеПоДекларации3НДФЛ() Тогда
		Возврат ЕстьНалогКУплатеПоДекларации3НДФЛ(Организация, Период);
	КонецЕсли;
	
	// Регистрация новой организации.
	Если Условие = УсловиеРегистрацияНовойОрганизации() Тогда
		Возврат ОрганизацияСозданаВТекущемМесяце(Организация, Период);
	КонецЕсли;
	
	Если Условие = УсловиеНекоммерческиеОрганизации() Тогда
		Возврат Справочники.Организации.ЭтоНекоммерческаяОрганизация(Организация);
	КонецЕсли;
		
	Если Условие = УсловиеПереходНаУСН() Тогда
		
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		ПрименяетсяУСНвТекущемПериоде = УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода);
		ПрименяетсяУСНвСледующемПериоде = УчетнаяПолитика.ПрименяетсяУСН(
			Организация, КонецДня(КонецПериода) + 1);
		
		Возврат ПрименяетсяУСНвСледующемПериоде = Истина
			И ПрименяетсяУСНвТекущемПериоде <> ПрименяетсяУСНвСледующемПериоде;
		
	КонецЕсли;
	
	Если Условие = УсловиеПереходНаПатент() Тогда
		
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		ПрименяетсяПатентВТекущемПериоде = УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период);
		ПрименяетсяПатентВСледующемПериоде =
			УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, КонецГода(КонецПериода) + 1);
		
		Возврат ПрименяетсяПатентВСледующемПериоде = Истина
			И ПрименяетсяПатентВТекущемПериоде <> ПрименяетсяПатентВСледующемПериоде;
		
	КонецЕсли;
		
	Если Условие = УсловиеПереходНаЕНП() Тогда
		
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		ПрименяетсяЕНПвТекущемПериоде =
			УчетнаяПолитика.ПлательщикЕНП(Организация, КонецПериода);
		ПрименяетсяЕНПвСледующемПериоде = 
			УчетнаяПолитика.ПлательщикЕНП(Организация, КонецДня(КонецПериода) + 1)
				ИЛИ УчетнаяПолитика.ПлательщикЕНП(Организация, НастройкиУчетаВызовСервера.ДатаНачалаПримененияЕНП());
		
		Возврат ПрименяетсяЕНПвСледующемПериоде = Истина
				И ПрименяетсяЕНПвТекущемПериоде <> ПрименяетсяЕНПвСледующемПериоде;
		
	КонецЕсли;
			
	Если Условие = УсловиеЕстьЗадолженностьУчредителей() Тогда 
		Возврат ЕстьЗадолженностьУчредителейПоОплатеУставногоКапитала(Организация);
	КонецЕсли;
	
	// Проверяется, что организация зарегистрирована текущем днем
	// Актуально только для задач с периодичностью "День"
	Если Условие = УсловиеОрганизацияЗарегистрированаТекущимДнем() Тогда 
		Возврат ОрганизацияЗарегистрированаТекущимДнем(Организация, Период);
	КонецЕсли;
	
	// Федеральный закон от 25.02.2022 № 18-ФЗ
	// В общем случае отчетность по форме СЗВ-М сдается организациями и ИП, если есть сотрудники,
	// кроме случая для организаций и ИП на АУСН. В данном случае СЗВ-М необходимо сдавать только, если:
	//  - есть исполнители по договорам ГПХ, авторского заказа;
	//  - другие лица, которые работают не по трудовому договору.
	Если Условие = УсловиеСдаетсяОтчетностьСЗВ_М() Тогда
		
		Если Не ПрименяетсяАУСН(Организация, Период, Периодичность) Тогда
			Возврат УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация);
		Иначе
			Возврат УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация)
				И УчетЗарплаты.ЕстьДоговорыПодряда(Организация, Период, Периодичность);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Условие = УсловиеОформленыПлатежныеПорученияНаВыплатыСотрудникамАУСН() Тогда
		Возврат УчетЗарплаты.ОформленыПлатежныеПорученияНаВыплатыСотрудникамАУСН(Организация, Период);
	КонецЕсли;
	
	// Федеральный закон от 25.02.2022 № 18-ФЗ
	// В общем случае отчетность по форме СЗВ-СТАЖ сдается организациями и ИП, если есть сотрудники,
	// кроме случая для организаций и ИП на АУСН.
	Если Условие = УсловиеСдаетсяОтчетностьСЗВ_Стаж() Тогда
		
		Если Не ПрименяетсяАУСН(Организация, Период, Периодичность) Тогда
			Возврат УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация);
		Иначе
			Возврат УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация)
				И СдаетсяОтчетностьСЗВ_СТАЖ(Организация, Период, Периодичность);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяется, что организация сменила объект УСН
	Если Условие = УсловиеСменаОбъектаУСН() Тогда
		// Нужно вернуть ложь если задача должна быть в графике.
		
		// 1. Проверка ввода остатков
		Переход = НастройкиСистемыНалогообложенияФормыВызовСервера.НастройкиДляБаннераСменыОбъектаУСН(Организация);
		Если ЗначениеЗаполнено(Переход) Тогда
			НужноНапоминать = Переход.Напоминать;
		Иначе
			НужноНапоминать = Ложь;
		КонецЕсли;
		
		// 2. Проверка даты
		// Если дата меньше равно 25 апреля (дата первого авансового платежа) то ложь
		ДатаОкончанияНапоминания = (Месяц(ТекущаяДатаСеанса()) <= 4) И (День(ТекущаяДатаСеанса()) <= 25);
		
		Возврат НужноНапоминать И ДатаОкончанияНапоминания;
	КонецЕсли;
	
	Если Условие = УсловиеЗаявлениеОЗачетеВзносов() Тогда
		// Заявление ИП подает для резерва денег на ЕНС для УСН доходы-расходы и ОСНО
		Возврат Не УчетСтраховыхВзносовИППовтИсп.УпрощенныйЗачетФиксированныхВзносов(Организация, Период, Ложь);
	КонецЕсли;
	
	Если Условие = УсловиеБухгалтерскаяОтчетностьСоциальноОриентированные() Тогда
		// Условие устарело. Для некоммерческих организаций используется Бухгалтерия НКО.
		Возврат Ложь;
	КонецЕсли;
	
	Если Условие = УсловиеПлательщикиВзносовСДоходов() Тогда
		Возврат УчетСтраховыхВзносовИППовтИсп.УплачиваетсяВзносСДоходов(Организация, НачалоГода(Период), КонецГода(Период));
	КонецЕсли;
	
	Если УсловияКоторымиПользовательУправляетНапрямую().Найти(Условие) <> Неопределено Тогда
		// Эти условия включаются пользователем вручную напрямую, их проверка выполняется отдельно
		Возврат Ложь;
	КонецЕсли;
	
	Если УсловияЗадачаВключаетсяПользователем().Найти(Условие) <> Неопределено Тогда
		Возврат ЗадачаПоУсловиюВключенаПользователем(Организация, Условие);
	КонецЕсли;
	
	Если Условие = УсловиеТринадцатыйПериодНДФЛ() Тогда
		Возврат Месяц(Период) = 12;
	КонецЕсли;
	
	Если Условие = УсловиеЕжемесячныйПлатежНаЕНС() Тогда
		
		ЭтоФизЛицо = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
		СистемаНалогообложенияКонецПериода = УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
		ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИспользуетсяТрудНаемныхРаботников(Организация);
		
		Если ЭтоФизЛицо И (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
			Или СистемаНалогообложенияКонецПериода = Перечисления.СистемыНалогообложения.Упрощенная)
			И Не ИспользуетсяТрудНаемныхРаботников Тогда
			
			Возврат МесяцыНерегулярногоЕдиногоНалоговогоПлатежа().Найти(Месяц(Период) + 1) <> Неопределено;
		КонецЕсли;
		
		Если ЭтоФизЛицо И УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Организация, Период)
			И Не ИспользуетсяТрудНаемныхРаботников Тогда
			// Для ИП только на патенте добавлять задачи по уведомлениям и единому налоговому платежу не требуется
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭтоФизЛицо И СистемаНалогообложения = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход Тогда
			// Для самозанятых добавлять задачи по уведомлениям и единому налоговому платежу не требуется
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Условие = УсловиеПроизводилисьВыплатыИностраннымКонтрагентам() Тогда
	
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Возврат УчетДенежныхСредствБП.ПроизводилисьВыплатыИностраннымКонтрагентам(Организация, НачалоПериода, КонецПериода);
	
	КонецЕсли;

	// Остальные условия не умеем определять.
	Возврат Ложь;
	
КонецФункции

Функция НепериодическиеУсловия() Экспорт
	
	Условия = Новый Соответствие;
	
	Условия.Вставить(УсловиеАкцизыОбщаяФорма(),   Истина);
	Условия.Вставить(УсловиеАкцизыФормаТабак(),   Истина);
	Условия.Вставить(УсловиеАкцизыОбщийСрок(),    Истина);
	Условия.Вставить(УсловиеАкцизыЛьготныйСрок(), Истина);
	Условия.Вставить(УсловиеАвансыПоАкцизам(),    Истина);
	Условия.Вставить(УсловиеЮридическиеЛица(),    Истина);
	Условия.Вставить(УсловиеФизическиеЛица(),     Истина);
	Условия.Вставить(УсловиеЕстьЗадолженностьУчредителей(), Истина);
	
	Возврат Условия;
	
КонецФункции

Функция ЕстьИмуществоЕСГС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.КодВидаИмущества = ""01""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.КБК = ""18210602020021000110""";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьДекларируемоеИмущество(Знач Период, Периодичность, Организация) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") Тогда
		НачалоПериода = Период.НачалоПериода;
		КонецПериода = Период.КонецПериода;
	Иначе
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	КонецЕсли;
	
	Если РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(Организация, КонецПериода)
		 И УправлениеВнеоборотнымиАктивамиПовтИсп.ЕстьИмуществоПоКадастровойСтоимости(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Истина;
	ИначеЕсли Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоПериода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УправлениеВнеоборотнымиАктивамиПовтИсп.ЕстьИмуществоПоСреднегодовойСтоимости(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция ЕстьОблагаемоеНедекларируемоеИмущество(Знач Период, Периодичность, Организация) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") Тогда
		НачалоПериода = Период.НачалоПериода;
		КонецПериода = Период.КонецПериода;
	Иначе
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	КонецЕсли;
	
	Если Не РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(Организация, КонецПериода)
		 И УправлениеВнеоборотнымиАктивамиПовтИсп.ЕстьИмуществоПоКадастровойСтоимости(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция КатегорииПодчиненияЗемельныхУчастковПоВидамНалогов() Экспорт
	
	КатегорииПодчинения = Новый Массив;
	КатегорииПодчинения.Добавить("103"); // ЗемельныйНалог_ГородФедеральногоЗначения
	КатегорииПодчинения.Добавить("204"); // ЗемельныйНалог_ГородскойОкруг
	КатегорииПодчинения.Добавить("211"); // ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением
	КатегорииПодчинения.Добавить("212"); // ЗемельныйНалог_ВнутригородскойОкруг
	КатегорииПодчинения.Добавить("214"); // ЗемельныйНалог_МуниципальныйОкруг
	КатегорииПодчинения.Добавить("305"); // ЗемельныйНалог_МежселеннаяТерритория
	КатегорииПодчинения.Добавить("310"); // ЗемельныйНалог_СельскоеПоселение
	КатегорииПодчинения.Добавить("313"); // ЗемельныйНалог_ГородскоеПоселение
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииПодчинения", КатегорииПодчинения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 11, 3) КАК КатегорияПодчинения
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 11, 3) В (&КатегорииПодчинения)
	|	И ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 18, 3) = ""110""
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияПодчинения");
	
КонецФункции

Функция КатегорииПодчиненияПатентовПоВидамНалогов() Экспорт
	
	КатегорииПодчинения = Новый Массив;
	КатегорииПодчинения.Добавить("010"); // ПСН_ГородскойОкруг
	КатегорииПодчинения.Добавить("020"); // ПСН_МуниципальныйРайон
	КатегорииПодчинения.Добавить("030"); // ПСН_ГородФедеральногоЗначения
	КатегорииПодчинения.Добавить("040"); // ПСН_ГородскойОкругСВнутригородскимДелением
	КатегорииПодчинения.Добавить("050"); // ПСН_ВнутригородскойРайон
	КатегорииПодчинения.Добавить("060"); // ПСН_МуниципальныйОкруг
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииПодчинения", КатегорииПодчинения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(ОперацияСПатентом.КБК, 9, 3) КАК КатегорияПодчинения
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ПОДСТРОКА(ОперацияСПатентом.КБК, 9, 3) В (&КатегорииПодчинения)
	|	И ПОДСТРОКА(ОперацияСПатентом.КБК, 18, 3) = ""110""
	|	И ОперацияСПатентом.Проведен";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияПодчинения");
	
КонецФункции

Функция ЕстьИмпортТоваровИзТаможенногоСоюза(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров") Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИмпортТоваровТаможенныйСоюз.Организация
	|ИЗ
	|	РегистрСведений.ИмпортТоваровТаможенныйСоюз КАК ИмпортТоваровТаможенныйСоюз";
	
	МассивУсловий = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивУсловий.Добавить("ИмпортТоваровТаможенныйСоюз.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("ИмпортТоваровТаможенныйСоюз.ДатаПериода = &Период");
		Запрос.УстановитьПараметр("Период", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
	КонецЕсли;
	
	Если МассивУсловий.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			| "+ СтрСоединить(МассивУсловий, " И ");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции 

Функция ЕстьЗаписиКнигиПродаж(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.НДС <> 0");
	МассивУсловий.Добавить("НЕ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей)");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И  &КонецПериода");
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыЦенностей", Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Если МассивУсловий.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			| "+ СтрСоединить(МассивУсловий, " И ");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции 

Функция ЕстьЗаписиКнигиПродажНалоговогоАгента(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.НДС <> 0");
	МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей)");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И  &КонецПериода");
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыЦенностей", Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Если МассивУсловий.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			| "+ СтрСоединить(МассивУсловий, " И ");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция ЕстьОбъектыТорговогоСбора(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт

	Если Период = Неопределено ИЛИ Организация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикТорговогоСбора(Организация, Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперацииСнятиеСУчета", Перечисления.ВидыОперацийТорговыеТочки.СнятиеСУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыТорговыхТочекСрезПоследних.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПараметрыТорговыхТочек.СрезПоследних(&КонецПериода, &Организация) КАК ПараметрыТорговыхТочекСрезПоследних
	|ГДЕ
	|	(&Условия)";
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("ПараметрыТорговыхТочекСрезПоследних.ВидОперации <> &ВидОперацииСнятиеСУчета");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("ПараметрыТорговыхТочекСрезПоследних.Период >= &НачалоПериода");
		Запрос.УстановитьПараметр("НачалоПериода",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода",      ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условия", СтрСоединить(МассивУсловий, " ИЛИ "));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция УсловияИсключенияПоТипуОрганизации(Организация, Период = Неопределено) Экспорт
	
	УсловияИсключения = Новый Массив;
	
	ЭтоФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ЭтоФизическоеЛицо Тогда
		
		УсловияИсключения.Добавить(УсловиеЮридическиеЛица());
		
		Если НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
			УсловияИсключения.Добавить(УсловиеЕстьСотрудники());
			УсловияИсключения.Добавить(УсловиеСтраховыеВзносыСотрудников());
		КонецЕсли;
		
		УсловияИсключения.Добавить(УсловиеРозничнаяПродажаАлкоголя());
		УсловияИсключения.Добавить(УсловиеОптоваяТорговляАлкоголем());
		УсловияИсключения.Добавить(УсловиеПроизводствоАлгоколя());
		УсловияИсключения.Добавить(УсловиеПеревозкаАлкоголя());
		
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.НефтяноеСырье);
		
		УсловияИсключения.Добавить(УсловиеЕстьЗадолженностьУчредителей());
		
	Иначе
		УсловияИсключения.Добавить(УсловиеФизическиеЛица());
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
			УсловияИсключения.Добавить(УсловиеОбщаяСистемаНалогообложения());
		КонецЕсли;
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период)
			ИЛИ УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			УсловияИсключения.Добавить(УсловиеУпрощеннаяСистемаНалогообложения());
		КонецЕсли;
		Если НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			УсловияИсключения.Добавить(УсловиеПлательщикиЕНВД());
		КонецЕсли;
	КонецЕсли;
	
	Возврат УсловияИсключения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьИмущество(Знач Период, Периодичность, Организация)
	
	Если ТипЗнч(Период) = Тип("Структура") Тогда
		НачалоПериода = Период.НачалоПериода;
		КонецПериода = Период.КонецПериода;
	Иначе
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		Период = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	КонецЕсли;
	
	Если УправлениеВнеоборотнымиАктивамиПовтИсп.ЕстьИмуществоПоКадастровойСтоимости(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Истина;
	ИначеЕсли Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоПериода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УправлениеВнеоборотнымиАктивамиПовтИсп.ЕстьИмуществоПоСреднегодовойСтоимости(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция ЕстьАкцизыИныеТовары(Организация, ИсключаемыеТовары)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ИсключаемыеТовары", ИсключаемыеТовары);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И НЕ ПорядокУплатыАкцизов.ВидТовара В (&ИсключаемыеТовары)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыПоВидуТоваров(Организация, ВидыТоваров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыТоваров",  ВидыТоваров);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ВидТовара В (&ВидыТоваров)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыОбщийСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И НЕ ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыЛьготныйСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАвансыПоАкцизам(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.АвансыПриЗакупкеСырья";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьОстаткиИОборотыПоСчету(НачалоПериода, КонецПериода, Организация, Счет)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Счета",         БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаОборотДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаОборотКт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт <> 0";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ОрганизацияСозданаВТекущемМесяце(Организация, Период)

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ДатаРегистрации");
	
	// Проверяем только юридические лица.
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для организаций, зарегистрированных в декабре, считаем, что они подают отчетность в сроки предоставления годовых форм.
	// Поэтому для них отдельной задачи создавать не требуется.
	// При этом, явных разъяснений, сдавать отчет или нет при регистрации в декабре 2020 года, не опубликовано. 
	// Считаем, что лучше напомнить и подготовить отчет.
	ПоследнийГодДействияОтчета = 2020;
	Если Месяц(РеквизитыОрганизации.ДатаРегистрации) = 12
		И Год(РеквизитыОрганизации.ДатаРегистрации) < ПоследнийГодДействияОтчета Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НачалоМесяца(Период) = НачалоМесяца(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЕстьНалогКУплатеПоДекларации3НДФЛ(Организация, Период)
	
	// Юридические лица не сдают 3-НДФЛ.
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Ложь;
	ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		// Для ИП на ОСНО всегда отображается задача уплаты НДФЛ.
		Возврат Истина;
	Иначе
		// Для остальных ИП показываем только если пользователь явно включил напоминание о сдаче декларации.
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Предприниматель", "2013_ИП_Декларация");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Правило", Правило);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
		|ГДЕ
		|	НалогиОтчеты.Организация = &Организация
		|	И НалогиОтчеты.НалогОтчет = &Правило";
		
		Возврат Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецФункции

Функция ОрганизацияЗарегистрированаТекущимДнем(Организация, Период)

	ДатаРегистрации = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаРегистрацииОрганизации(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		// Проверяем текущую дату. Считаем, что если дата регистрации не указана, то функционал выполнения правила,
		// для которого проверяется текущее условие, должен обеспечивать проверку на заполнение необходимых 
		// реквизитов организации
		ДатаРегистрации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Период = ДатаРегистрации Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЕстьЗадолженностьУчредителейПоОплатеУставногоКапитала(Организация)
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Организация) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	КодОКОПФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКОПФ");
	КодыСтатистикиООО = Справочники.Организации.КодыСтатистикиПоОрганизационноПравовойФорме("ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ");
	Если КодОКОПФ <> КодыСтатистикиООО.КодОКОПФ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ЗадолженностьУчредителей = Справочники.Организации.ЗадолженностьУчредителей(Организация, ТекущаяДата);
	
	Возврат ЗадолженностьУчредителей.Количество() > 0;
	
КонецФункции

Функция ПрименяетсяАУСН(Организация, Период, Периодичность)
	
	ЗначениеАУСН = Перечисления.СистемыНалогообложения.АУСН;
	
	Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = ЗначениеАУСН
		Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = ЗначениеАУСН;
		
КонецФункции

Функция СдаетсяОтчетностьСЗВ_СТАЖ(Организация, Период, Периодичность)
	
	// Федеральный закон от 25.02.2022 № 18-ФЗ
	// В общем случае отчетность по форме СЗВ-СТАЖ сдается организациями и ИП, если есть сотрудники,
	// кроме случая для организаций и ИП на АУСН. В данном случае СЗВ-СТАЖ необходимо сдавать только, если:
	//  - есть сотрудники-ликвидаторы аварии на ЧАЭС;
	//  - есть работающие в районах Крайнего Севера и приравненных к ним местностях;
	//  - есть работающие в сельском хозяйстве; 
	//  - есть сотрудники, находящиеся в отпуске по уходу за ребенком от 1,5 до 3 лет; (нет возможности проверить в ИБ)
	//  - есть работающие в навигационный период на водном транспорте или в сезонных отраслях промышленности; (нет возможности проверить в ИБ)
	//  - есть находящиеся в отпуске без содержания;
	//  - есть исполнители по договорам ГПХ, авторского заказа;
	//  - другие лица, которые работают не по трудовому договору.
	
	ПараметрыВыполнения = Новый Структура("Организация", Организация);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьРайонныйКоэффициент", ПараметрыВыполнения)
		Или ПолучитьФункциональнуюОпцию("ПрименятьРайонныйКоэффициентВПодразделениях", ПараметрыВыполнения) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСевернуюНадбавку", ПараметрыВыполнения)
		Или ПолучитьФункциональнуюОпцию("ПрименятьСевернуюНадбавкуВПодразделениях", ПараметрыВыполнения) Тогда
			
		Возврат Истина;
	КонецЕсли;
	
	Если УчетЗарплаты.ОрганизацияРаботаетВСельскойМестности(Организация, Период) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УчетЗарплаты.ЕстьДоговорыПодряда(Организация, Период, Периодичность) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УчетЗарплаты.ЕстьДокументыОтпускаБезСодержания(Организация, Период, Периодичность) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УчетЗарплаты.ЕстьСотрудники_ЧАЭС(Организация, КонецГода(Период)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УсловияКоторымиПользовательУправляетНапрямую()
	
	// Эти условия пользователь устанавливает напрямую в настройках. 
	// Настройки хранятся в РегистрСведений.ВариантыПримененияТребованийЗаконодательства
	УсловияКоторымиПользовательУправляетНапрямую = Новый Массив;
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеСтраховыеВзносыСотрудников());
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеПроизводствоАлгоколя());
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеПеревозкаАлкоголя());
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеРозничнаяПродажаАлкоголя());
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеРозничнаяПродажаПива());
	УсловияКоторымиПользовательУправляетНапрямую.Добавить(УсловиеОптоваяТорговляАлкоголем());
	
	Возврат УсловияКоторымиПользовательУправляетНапрямую;
	
КонецФункции

Функция УсловияЗадачаВключаетсяПользователем() Экспорт
	
	УсловияЗадачаВключаетсяПользователем = Новый Массив;
	УсловияЗадачаВключаетсяПользователем.Добавить(УсловиеПлательщикЕСХН());
	УсловияЗадачаВключаетсяПользователем.Добавить(УсловиеПлательщикНДПИ());
	УсловияЗадачаВключаетсяПользователем.Добавить(УсловиеПлательщикНалогаНаИгорныйБизнес());
	УсловияЗадачаВключаетсяПользователем.Добавить(УсловиеПлательщикВодногоНалога());
	
	Возврат Новый ФиксированныйМассив(УсловияЗадачаВключаетсяПользователем);
	
КонецФункции

Функция ЗадачаПоУсловиюВключенаПользователем(Организация, Условие)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Условие", Условие);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Задача
	|ПОМЕСТИТЬ ЗадачаПоУсловиию
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Условия.Условие = &Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НалогиОтчеты.НалогОтчет КАК Справочник.ЗадачиБухгалтера) КАК Задача,
	|	НалогиОтчеты.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачаПоУсловиию КАК ЗадачаПоУсловиию
	|		ПО ((ВЫРАЗИТЬ(НалогиОтчеты.НалогОтчет КАК Справочник.ЗадачиБухгалтера)) = ЗадачаПоУсловиию.Задача)
	|ГДЕ
	|	НалогиОтчеты.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция МесяцыНерегулярногоЕдиногоНалоговогоПлатежа()
	
	// ИП на УСН (доходы) без сотрудников пополняет ЕНС только в эти месяцы
	Результат = Новый Массив;
	
	Результат.Добавить(4); // апрель
	Результат.Добавить(7); // июль
	Результат.Добавить(10); // октябрь
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
