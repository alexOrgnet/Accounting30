////////////////////////////////////////////////////////////////////////////////
// Общий модуль РекламныйСервисСлужебный
// 
////////////////////////////////////////////////////////////////////////////////
// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ФоновыеЗадания

// Заполнить изображение рекламы в фоне.
// 
// Параметры:
//  ПараметрыПроцедуры - см. НовыйПараметрыПроцедурыПолучитьДанныеРекламы
//
// Возвращаемое значение:
//  см. НовыйРезультатФормированияРекламногоМакета
//
Функция РекламныйМакет(Знач ПараметрыПроцедуры) Экспорт
	
	ДатаНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = НовыйРезультатФормированияРекламногоМакета();
	
	ПрофильПотребителя = ТекущийПрофильПотребителя();
	
	Попытка
		
		ПрочитатьДанныеРекламыИЗаполнитьСписокРекламы(ПараметрыПроцедуры, ПрофильПотребителя);
		
		СписокРекламы = ПараметрыПроцедуры.СписокРекламы;
		Если СписокРекламы.Количество() > 0 Тогда
			
			Для Каждого ДанныеРекламы Из СписокРекламы Цикл
				Результат.ИдентификаторыРекламы.Добавить(ДанныеРекламы.ИдентификаторРекламы);
			КонецЦикла;
			
			HTMLСтраницаРекламы(СписокРекламы, Результат.ТекстHTML);
			
			ОбщегоНазначенияКлиентСервер.Проверить(
				Не ПустаяСтрока(Результат.ТекстHTML), 
				НСтр("ru = 'Не удалось сформировать текст HTML документа по списку рекламы'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				"РекламныйСервисСлужебный.РекламныйМакет");
			
		КонецЕсли;
		
	Исключение
		
		ШаблонСобытия = НСтр("ru = '%1Формирование рекламного макета'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		НСтр("ru = 'РекламныйСервис: РекламныйМакет'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ДатаНачалаЗамера);
	
	Возврат Результат;
	
КонецФункции

// Зафиксировать показ рекламы в фоне.
// 
// Параметры:
//  СписокПоказаннойРекламыФормы - см. РекламныйСервисСлужебныйКлиент.НовыйСписокПоказаннойРекламыФормы
//
Процедура ЗафиксироватьПоказРекламыВФоне(СписокПоказаннойРекламыФормы) Экспорт
	
	ИмяПроцедуры = "РекламныйСервисСлужебный.ЗафиксироватьПоказРекламы";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, СписокПоказаннойРекламыФормы);
	
КонецПроцедуры

// Зафиксировать показ рекламы.
// 
// Параметры:
//  СписокПоказаннойРекламыФормы - см. РекламныйСервисСлужебныйКлиент.НовыйСписокПоказаннойРекламыФормы
//
Процедура ЗафиксироватьПоказРекламы(СписокПоказаннойРекламыФормы) Экспорт
	
	ПараметрыСобытия = РегистрыСведений.СтатистикаСобытийВзаимодействияРекламы.НовыйПараметрыСобытияВзаимодействия();
	ПараметрыСобытия.СобытиеВзаимодействия = Перечисления.СобытияВзаимодействияРекламы.ПоказРекламы;
	ПараметрыСобытия.ПрофильПотребителя = ТекущийПрофильПотребителя();
	
	ЗаполнитьЗначенияСвойств(ПараметрыСобытия, СписокПоказаннойРекламыФормы);
	
	СписокРекламы = СписокПоказаннойРекламыФормы.СписокРекламы;
	Для Каждого Реклама Из СписокРекламы Цикл
		СтрокаРекламы = ПараметрыСобытия.ИдентификаторыРекламы.Добавить();
		СтрокаРекламы.Идентификатор = Реклама;
	КонецЦикла;
	
	РегистрыСведений.СтатистикаСобытийВзаимодействияРекламы.СоздатьНаборыЗаписей(ПараметрыСобытия);
	
КонецПроцедуры

// см. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	Если РекламныйСервисСлужебныйПовтИсп.ИспользованиеРекламногоСервисаЗапрещено() 
		Или РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Реклама.ДатаЗагрузки), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗагрузки
		|ИЗ
		|	Справочник.Реклама КАК Реклама";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ДатаПроверки = НачалоДня(НачалоДня(ТекущаяДатаСеанса()) - 1);
		Если ВыборкаДетальныеЗаписи.ДатаЗагрузки < ДатаПроверки Тогда
			
			ИзменитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сформировать изображение рекламы на форме.
// 
// Параметры:
//  РекламаСсылка - СправочникСсылка
//  ПолеИзображения - Строка
//
Процедура СформироватьИзображениеРекламыНаФорме(РекламаСсылка, ПолеИзображения) Экспорт
	
	ПолеИзображения = "";
	Если РекламаСсылка = Справочники.Реклама.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	СписокРекламы = Новый Массив; // Массив из см. РекламныйСервисСлужебный.НовыйДанныеИзображения
	
	РеквизитыРекламы = РеквизитыРекламыИзображения(РекламаСсылка);
	
	ДанныеРекламы = НовыйДанныеИзображения();
	ЗаполнитьЗначенияСвойств(ДанныеРекламы, РеквизитыРекламы, , "Изображение");
	ДанныеРекламы.ИдентификаторРекламы = РеквизитыРекламы.Код;
	
	Изображение = РеквизитыРекламы.Изображение.Получить(); // Строка
	Если Изображение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРекламы.Изображение = Изображение;
	
	СписокРекламы.Добавить(ДанныеРекламы);
	
	HTMLСтраницаРекламы(СписокРекламы, ПолеИзображения);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Новый параметры процедуры получить данные рекламы.
// 
// Возвращаемое значение:
//  Структура:
//   * ИнформацияЭкрановКлиента - ФиксированныйМассив из Структура:
//   ** Высота - Число
//   ** Ширина - Число
//   * ИмяФормы - Строка
//   * СписокРекламы - Массив Из Структура см. НовыйДанныеИзображения
//
Функция НовыйПараметрыПроцедурыПолучитьДанныеРекламы() Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИнформацияЭкрановКлиента", ПолучитьИнформациюЭкрановКлиента());
	ПараметрыПроцедуры.Вставить("ИмяФормы", "");
	ПараметрыПроцедуры.Вставить("СписокРекламы", Новый Массив);
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

// Новый расположение рекламы.
// 
// Возвращаемое значение:
//  Структура:
// * ФормаСпискаПраво - Строка
//
Функция НовыйРасположениеРекламы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФормаСпискаПраво", "ФормаСпискаПраво");
	
	Возврат Результат;
	
КонецФункции

// Данные изображения.
// 
// Возвращаемое значение:
// Структура - данные изображения:
//  * ИдентификаторРекламы - Строка
//  * Изображение - Строка
//  * ЦелевоеДействие - Строка
//  * ПоказыватьМаркерРеклама - Булево
//  * ЮридическоеЛицоРекламодателя - Строка
//
Функция НовыйДанныеИзображения() Экспорт
	
	ДанныеИзображения = Новый Структура;
	ДанныеИзображения.Вставить("ИдентификаторРекламы", "");
	ДанныеИзображения.Вставить("Изображение", "");
	ДанныеИзображения.Вставить("ЦелевоеДействие", "");
	ДанныеИзображения.Вставить("ПоказыватьМаркерРеклама", Ложь);
	ДанныеИзображения.Вставить("ЮридическоеЛицоРекламодателя", "");
	
	Возврат ДанныеИзображения;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ДобавитьОбновитьРекламу
Процедура ДобавитьОбновитьРекламуОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу);
	
	ДобавитьОбновитьРекламу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФорм

// Обработчик команды формы Нажатие на рекламный носитель.
// 
// Параметры:
//  ИдентификаторРекламы - Строка - идентификатор рекламы.
//  ИмяФормы - Строка - полное имя формы вызова.
//
Процедура МакетРекламныйСервисНажатие(Знач ИдентификаторРекламы, Знач ИмяФормы) Экспорт
	
	ТекущийПрофильПотребителя = ТекущийПрофильПотребителя();
	
	ПараметрыСобытия = РегистрыСведений.СтатистикаСобытийВзаимодействияРекламы.НовыйПараметрыСобытияВзаимодействия();
	
	СтрокаРекламы = ПараметрыСобытия.ИдентификаторыРекламы.Добавить();
	СтрокаРекламы.Идентификатор = ИдентификаторРекламы;
	
	ПараметрыСобытия.ИмяФормы = ИмяФормы;
	ПараметрыСобытия.ПрофильПотребителя = ТекущийПрофильПотребителя;
	
	РегистрыСведений.СтатистикаСобытийВзаимодействияРекламы.СоздатьНаборыЗаписей(ПараметрыСобытия);
	
КонецПроцедуры

Процедура КомандаЗакрытьРекламу() Экспорт
	
	ТекущийПрофильПотребителя = ТекущийПрофильПотребителя();
	РегистрыСведений.СобытияПрофиляПотребителяРекламы.ЗафиксироватьСобытие(ТекущийПрофильПотребителя);
	
КонецПроцедуры

#КонецОбласти

#Область ПреобразованиеДанных

// Привести тип к формату идентификатора рекламного носителя.
// 
// Параметры:
//  Идентификатор - Строка
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ИдентификаторРекламы - приведенное значение идентификатора.
//
Функция ПривестиТипКИдентификаторуРекламы(Знач Идентификатор) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебный.ПривестиТипКИдентификаторуРекламногоНосителя", 
		"Идентификатор", 
		Идентификатор, 
		Тип("Строка"));
	
	Результат = Метаданные.ОпределяемыеТипы.ИдентификаторРекламы.Тип.ПривестиЗначение(Идентификатор);
	
	Возврат Результат;
	
КонецФункции

// Привести тип к формату "ВидХарактеристикиРекламы".
// 
// Параметры:
//  ВидХарактеристики - Строка
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВидХарактеристикиРекламы - приведенной значение ВидХарактеристики.
//
Функция ПривестиТипКВидХарактеристики(Знач ВидХарактеристики) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебный.ПривестиТипКВидХарактеристики", 
		"ВидХарактеристики", 
		ВидХарактеристики, 
		Тип("Строка"));
	
	Результат = Метаданные.ОпределяемыеТипы.ВидХарактеристикиРекламы.Тип.ПривестиЗначение(ВидХарактеристики);
	
	Возврат Результат;
	
КонецФункции

// Привести тип к формату "ЗначениеХарактеристикиРекламы".
// 
// Параметры:
//  ЗначениеХарактеристики - Строка
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ЗначениеХарактеристикиРекламы - приведенной значение ЗначениеХарактеристики.
//
Функция ПривестиТипКЗначениеХарактеристики(Знач ЗначениеХарактеристики) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебный.ПривестиТипКЗначениеХарактеристики", 
		"ЗначениеХарактеристики", 
		ЗначениеХарактеристики, 
		Тип("Строка"));
	
	Результат = Метаданные.ОпределяемыеТипы.ЗначениеХарактеристикиРекламы.Тип.ПривестиЗначение(ЗначениеХарактеристики);
	
	Возврат Результат;
	
КонецФункции

// Конвертирует данные в формате JSON в значение 
// 
// Параметры:
// 	Данные - Строка
// 	       - ДвоичныеДанные
// 	       - Поток
// 	       - ПотокВПамяти
// 	       - ФайловыйПоток
// 	РезультатВСоответствие - Булево
// 	СвойстваСДатой - Неопределено, Массив из Строка - имена свойств содержащих дату.
// Возвращаемое значение:
// 	- Структура, Произвольный, Соответствие из КлючИЗначение - результат после преобразования.
//
Функция JSONВЗначение(Знач Данные, Знач РезультатВСоответствие = Ложь, Знач СвойстваСДатой = Неопределено) Экспорт
	
	МассивТиповПроверка = Новый Массив; // Массив из Тип
	МассивТиповПроверка.Добавить(Тип("Строка"));
	МассивТиповПроверка.Добавить(Тип("ДвоичныеДанные"));
	МассивТиповПроверка.Добавить(Тип("Поток"));
	МассивТиповПроверка.Добавить(Тип("ПотокВПамяти"));
	МассивТиповПроверка.Добавить(Тип("ФайловыйПоток"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"РекламныйСервисСлужебный.JSONВЗначение", "Данные", Данные, МассивТиповПроверка);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(Данные), 
		НСтр("ru = 'Параметр ""Данные"" не заполнено'"), 
		"РекламныйСервисСлужебный.JSONВЗначение");
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			Лев(Данные, 1) <> "<", 
			НСтр("ru = 'Параметр ""Значение"" заполнено не верно'"), 
			"РекламныйСервисСлужебный.JSONВЗначение");
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ЧтениеJSON.УстановитьСтроку(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда 
		Поток = Данные.ОткрытьПотокДляЧтения();
		ЧтениеJSON.ОткрытьПоток(Поток);
	ИначеЕсли ТипЗнч(Данные) = Тип("Поток") Или ТипЗнч(Данные) = Тип("ПотокВПамяти")
		Или ТипЗнч(Данные) = Тип("ФайловыйПоток") Тогда 
		ЧтениеJSON.ОткрытьПоток(Данные);
	КонецЕсли;
	
	Если СвойстваСДатой = Неопределено Тогда
		СвойстваСДатой = Новый Массив;
	КонецЕсли;
	
	Значение = ПрочитатьJSON(ЧтениеJSON, РезультатВСоответствие, СвойстваСДатой, ФорматДатыJSON.ISO);
	
	ЧтениеJSON.Закрыть();
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Поток.Закрыть();
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Значение ВJSON.
// 
// Параметры:
//  Данные - Произвольный
// 
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВJSON(Знач Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Значение = ЗаписьJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

// Распаковывае файл формата gzip и возвращает его данные.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - Исходные двоичные данные gzip формата
// 
// Возвращаемое значение:
//  ДвоичныеДанные
//
Функция РаспаковатьФайлGZip(ДвоичныеДанные) Экспорт
	
	РазмерПрефикса = 10;
	РазмерПостфикса = 8;
	РазмерLHF = 34;
	РазмерDD = 16;
	РазмерCDH = 50;
	РазмерEOCD = 22;
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
	ЧтениеДанных.Пропустить(РазмерПрефикса);
	РазмерДанных = ЧтениеДанных.ИсходныйПоток().Размер();
	
	СжатыйРазмер = РазмерДанных - РазмерПрефикса - РазмерПостфикса;
	НачальнаяЕмкость = РазмерLHF + СжатыйРазмер + РазмерDD + РазмерCDH + РазмерEOCD;
	ПотокВПамяти = Новый ПотокВПамяти(НачальнаяЕмкость);
	
	БуферLHF = Новый БуферДвоичныхДанных(РазмерLHF);
	БуферLHF.ЗаписатьЦелое32(0, 67324752);	// signature 0x04034b50
	БуферLHF.ЗаписатьЦелое16(4, 20);		// version
	БуферLHF.ЗаписатьЦелое16(6, 10);		// bit flags
	БуферLHF.ЗаписатьЦелое16(8, 8);			// compression method
	БуферLHF.ЗаписатьЦелое16(10, 0);		// time
	БуферLHF.ЗаписатьЦелое16(12, 0);		// date
	БуферLHF.ЗаписатьЦелое32(14, 0);		// crc-32
	БуферLHF.ЗаписатьЦелое32(18, 0);		// compressed size
	БуферLHF.ЗаписатьЦелое32(22, 0);		// uncompressed size
	БуферLHF.ЗаписатьЦелое16(26, 4);		// filename length - "data"
	БуферLHF.ЗаписатьЦелое16(28, 0);		// extra field length
	
	КодировкаТекстаСтроки = "ascii";
	ЗаписатьBOM = Ложь;
	БуферASCII = ПолучитьБуферДвоичныхДанныхИзСтроки("data", КодировкаТекстаСтроки, ЗаписатьBOM);
	БуферLHF.Записать(30, БуферASCII);
	
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(БуферLHF);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, СжатыйРазмер);
	ЗаписьДанных.Close();
	
	ДанныеCRC32 = ЧтениеДанных.ПрочитатьЦелое32();
	НесжатыйРазмер = ЧтениеДанных.ПрочитатьЦелое32();
	ЧтениеДанных.Закрыть();
	
	БуферDD = Новый БуферДвоичныхДанных(РазмерDD);
	БуферDD.ЗаписатьЦелое32(0, 134695760);
	БуферDD.ЗаписатьЦелое32(4, ДанныеCRC32);
	БуферDD.ЗаписатьЦелое32(8, СжатыйРазмер);
	БуферDD.ЗаписатьЦелое32(12, НесжатыйРазмер);
	
	БуферCDH = Новый БуферДвоичныхДанных(РазмерCDH);
	БуферCDH.ЗаписатьЦелое32(0, 33639248);			// signature 0x02014b50
	БуферCDH.ЗаписатьЦелое16(4, 798);				// version made by
	БуферCDH.ЗаписатьЦелое16(6, 20);				// version needed to extract
	БуферCDH.ЗаписатьЦелое16(8, 10);				// bit flags
	БуферCDH.ЗаписатьЦелое16(10, 8);				// compression method
	БуферCDH.ЗаписатьЦелое16(12, 0);				// time
	БуферCDH.ЗаписатьЦелое16(14, 0);				// date
	БуферCDH.ЗаписатьЦелое32(16, ДанныеCRC32);		// crc-32
	БуферCDH.ЗаписатьЦелое32(20, СжатыйРазмер);		// compressed size
	БуферCDH.ЗаписатьЦелое32(24, НесжатыйРазмер);	// uncompressed size
	БуферCDH.ЗаписатьЦелое16(28, 4);				// file name length
	БуферCDH.ЗаписатьЦелое16(30, 0);  				// extra field length
	БуферCDH.ЗаписатьЦелое16(32, 0);				// file comment length
	БуферCDH.ЗаписатьЦелое16(34, 0);				// disk number start
	БуферCDH.ЗаписатьЦелое16(36, 0);				// internal file attributes
	БуферCDH.ЗаписатьЦелое32(38, 2176057344);		// external file attributes
	БуферCDH.ЗаписатьЦелое32(42, 0);				// relative offset of local header
	БуферCDH.Записать(46, БуферASCII);
	
	БуферEOCD = Новый БуферДвоичныхДанных(РазмерEOCD);
	БуферEOCD.ЗаписатьЦелое32(0, 101010256);		// signature 0x06054b50
	БуферEOCD.ЗаписатьЦелое16(4, 0);				// number of this disk
	БуферEOCD.ЗаписатьЦелое16(6, 0);				// number of the disk with the start of the central directory
	БуферEOCD.ЗаписатьЦелое16(8, 1);				// total number of entries in the central directory on this disk
	БуферEOCD.ЗаписатьЦелое16(10, 1);				// total number of entries in the central directory
	БуферEOCD.ЗаписатьЦелое32(12, РазмерCDH);		// size of the central directory
										// offset of start of central directory with respect to the starting disk number
	БуферEOCD.ЗаписатьЦелое32(16, РазмерLHF + СжатыйРазмер + РазмерDD); 
	БуферEOCD.ЗаписатьЦелое16(20, 0);				// the starting disk number
	
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(БуферDD);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(БуферCDH);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(БуферEOCD);
	ЗаписьДанных.Close();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ПотокВПамяти);
	Элемент = ЧтениеZipФайла.Элементы.Получить(0);
	ЧтениеZipФайла.Извлечь(Элемент, ИмяВременногоФайла, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZipФайла.Закрыть();
	
	РазделительПути = ПолучитьРазделительПути();
	ПутьКФайлу = СтрШаблон("%1%2%3", ИмяВременногоФайла, РазделительПути, Элемент.Имя);
	Результат = Новый ДвоичныеДанные(ПутьКФайлу);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

// Выполнить запрос.
// 
// Параметры:
//  ЗапросКСервису - см. НовыйЗапросКСервису
// 
// Возвращаемое значение:
//  см. НовыйОтветОтСервиса
//
Функция ВыполнитьЗапрос(Знач ЗапросКСервису) Экспорт
	
	ОтветОтСервиса = НовыйОтветОтСервиса();
	
	// Если в запросе установлен таймаут, переопределяем значение в параметрах соединения
	Если ЗначениеЗаполнено(ЗапросКСервису.Таймаут) Тогда
		ЗапросКСервису.ПараметрыСоединения.Таймаут = ЗапросКСервису.Таймаут;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализация соединения.
	Соединение = НовоеСоединениеССервером(ЗапросКСервису);
	
	// Установка параметров запроса.
	ПолныйАдресЗапроса = ПолныйАдресЗапроса(ЗапросКСервису);
	HTTPЗапрос = Новый HTTPЗапрос(ПолныйАдресЗапроса, ЗапросКСервису.Заголовки);
	
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипПередаваемогоКонтента) Тогда
		ИмяЗаголовка = ИмяЗаголовкаТипПередаваемогоКонтента();
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовка, ЗапросКСервису.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипВозвращаемогоКонтента) Тогда
		ИмяЗаголовка = ИмяЗаголовкаТипВозвращаемогоКонтента();
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовка, ЗапросКСервису.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросКСервису.Данные) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросКСервису.Данные);
	КонецЕсли;
	
	ВыполнитьHTTPМетодСервиса(Соединение, ЗапросКСервису, HTTPЗапрос, ОтветОтСервиса);
	
	ОбработатьДанныеОтвета(ЗапросКСервису, ОтветОтСервиса);
	
	Возврат ОтветОтСервиса;
	
КонецФункции

#КонецОбласти

#Область ЗапросыКСервисам

// Запрос статусы сервисов ИТС.
// 
// Параметры:
//  Данные - Строка - Данные
// 
// Возвращаемое значение:
//  см. НовыйЗапросКСервису
//
Функция ЗапросСтатусыСервисовИТС(Знач Данные) Экспорт
	
	ИмяЗапроса = НСтр("ru = 'Рекламный сервис: Получение статусов опций ИТС'");
	
	СвойстваСДатой = Новый Массив; // Массив из Строка
	СвойстваСДатой.Добавить("optionPackageEndDate");
	СвойстваСДатой.Добавить("optionPackageStartDate");
	
	ЗапросСервиса = НовыйЗапросКСервису();
	ЗапросСервиса.ПараметрыСоединения      = ПараметрыСоединенияСПорталомИТС();
	ЗапросСервиса.Наименование             = ИмяЗапроса;
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.СтрокаЗапроса            = "option-packages/search-for-advertising-banner";
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/json";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/json";
	ЗапросСервиса.Данные                   = Данные;
	ЗапросСервиса.СвойстваСДатой           = СвойстваСДатой;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Запрос список таргеты онлайн рекламы.
// 
// Возвращаемое значение:
//  см. НовыйЗапросКСервису
//
Функция ЗапросСписокТаргетыОнлайнРекламы() Экспорт
	
	ИмяЗапроса = НСтр("ru = 'Рекламный сервис: Получение списка актуальной рекламы из рекламного сервиса'");
	
	ЗапросСервиса = НовыйЗапросКСервису();
	ЗапросСервиса.ПараметрыСоединения      = ПараметрыСоединенияСРекламнымСервисом();
	ЗапросСервиса.Наименование             = ИмяЗапроса;
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.СтрокаЗапроса            = "v1/advertising/targets";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/json";
	ЗапросСервиса.Заголовки.Вставить("Accept-Encoding", "gzip");
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Запрос список контент онлайн рекламы.
// 
// Параметры:
//  Данные - Строка
// 
// Возвращаемое значение:
//  см. НовыйЗапросКСервису
//
Функция ЗапросСписокКонтентОнлайнРекламы(Знач Данные) Экспорт
	
	ИмяЗапроса = НСтр("ru = 'Рекламный сервис: Получение списка контента рекламы из рекламного сервиса'");
	
	ЗапросСервиса = НовыйЗапросКСервису(); // см. НовыйЗапросКСервису
	ЗапросСервиса.ПараметрыСоединения      = ПараметрыСоединенияСРекламнымСервисом();
	ЗапросСервиса.Наименование             = ИмяЗапроса;
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.СтрокаЗапроса            = "v1/advertising/content";
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/json";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/json";
	ЗапросСервиса.Данные = Данные;
	
	СвойстваДанныхРекламыСДатой = Новый Массив; // Массив из Строка
	СвойстваДанныхРекламыСДатой.Добавить("actualFrom");
	СвойстваДанныхРекламыСДатой.Добавить("actualTo");
	ЗапросСервиса.СвойстваСДатой = СвойстваДанныхРекламыСДатой;
	
	ЗапросСервиса.Заголовки.Вставить("Accept-Encoding", "gzip");
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Новый параметры запроса отправка статистики рекламы.
// 
// Параметры:
//  Данные - Строка
//  ХешСуммаСтрока - Строка
// 
// Возвращаемое значение:
//  см. НовыйЗапросКСервису
//
Функция ЗапросОтправкаСтатистикиРекламы(Знач Данные, ХешСуммаСтрока = "") Экспорт
	
	ИмяЗапроса = НСтр("ru = 'Рекламный сервис: Отправка статистики рекламы в сервис'");
	
	ЗапросСервиса = НовыйЗапросКСервису();
	ЗапросСервиса.ПараметрыСоединения      = ПараметрыСоединенияСРекламнымСервисом();
	ЗапросСервиса.Наименование             = ИмяЗапроса;
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.СтрокаЗапроса            = "v1/interaction/aggregated-statistic";
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/json";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/json";
	ЗапросСервиса.Данные = Данные;
	Если Не ПустаяСтрока(ХешСуммаСтрока) Тогда
		ЗапросСервиса.Заголовки.Вставить("X-Advertising-Content-Key", ХешСуммаСтрока);
	КонецЕсли;
	ЗапросСервиса.СвойстваСДатой.Добавить("forDay");
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область РекламныйМакет

// HTML текст страницы загрузки.
// 
// Возвращаемое значение:
//  Строка
//
Функция HTMLСтраницаЗагрузки() Экспорт
	
	МакетСтраницыЗагрузки = Справочники.Реклама.ПолучитьМакет("СтраницаЗагрузкиРекламы");
	ТекстСтраницыЗагрузки = МакетСтраницыЗагрузки.ПолучитьТекст();
	Возврат ТекстСтраницыЗагрузки;
	
КонецФункции

// Показ рекламного носителя возможен.
// 
// Параметры:
//  ИмяФормы - Строка
//  Отказ - Булево
//
Процедура ЕстьРекламаКПоказу(ИмяФормы, Отказ) Экспорт
	
	ПрофильПотребителя = ТекущийПрофильПотребителя();
	СписокИменФорм = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяФормы);
	СписокИменФорм.Добавить("");
	ВладельцыХарактеристик = ВладельцыХарактеристикТекущегоПрофиля();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЕстьРекламаКПоказу();
	
	МинимальныйИнтервалПоказаПоУмолчаниюВМинутах = 30 * 24 * 60; // 30 дней.
	Запрос.УстановитьПараметр("ВладельцыХарактеристик", ВладельцыХарактеристик);
	Запрос.УстановитьПараметр("СписокИменФорм", СписокИменФорм);
	Запрос.УстановитьПараметр("МинутПоУмолчанию", МинимальныйИнтервалПоказаПоУмолчаниюВМинутах);
	Запрос.УстановитьПараметр("ПрофильПотребителя", ПрофильПотребителя);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрофильПотребителя

// Текущий профиль потребителя.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПрофильПотребителяРекламы
//
Функция ТекущийПрофильПотребителя() Экспорт
	
	Результат = Новый Массив;
	ТекущийПрофильПотребителяСписком(Результат);
	ПрофильПотребителя = Результат[0];
	
	Возврат ПрофильПотребителя;
	
КонецФункции

// Текущий профиль потребителя списком.
// 
// Параметры:
//  Результат - Массив из ОпределяемыйТип.ПрофильПотребителяРекламы
//
Процедура ТекущийПрофильПотребителяСписком(Результат) Экспорт
	
	СписокПотербителей = РекламныйСервисСлужебныйПовтИсп.ТекущийПрофильПотребителя();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, СписокПотербителей);
	
КонецПроцедуры

// Идентификатор пользователя ИБПо профилю потребителя.
// 
// Параметры:
//  ПрофильПотребителя - ОпределяемыйТип.ПрофильПотребителяРекламы
// 
// Возвращаемое значение:
//  Строка -  Идентификатор пользователя ИБПо профилю потребителя
//
Функция ИдентификаторПользователяИБПоПрофилюПотребителя(ПрофильПотребителя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РекламныйСервисПереопределяемый.ИдентификаторПользователяИБПоПрофилюПотребителя(ПрофильПотребителя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Организации

// Список разрешенных организаций.
// 
// Параметры:
//  Результат - Массив из ОпределяемыйТип.ВладелецХарактеристикиРекламы - ссылки на разрешенные организации.
//
Процедура СписокРазрешенныхОрганизаций(Результат) Экспорт
	
	СписокОрганизаций = РекламныйСервисСлужебныйПовтИсп.СписокРазрешенныхОрганизаций();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, СписокОрганизаций);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеКонстанты

// Имя события взаимодействия.
// 
// Возвращаемое значение:
//  Строка - Имя события взаимодействия
//
Функция ИмяСобытияВзаимодействия() Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 Фиксация взаимодействия потребителя с рекламой.'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
	Возврат ИмяСобытия;
	
КонецФункции

// Имя события отправки статистики взаимодействия потребителя с рекламой.
// 
// Возвращаемое значение:
//  Строка - Имя события отправки статистики взаимодействия
Функция ИмяСобытияОтправкиСтатистикиВзаимодействия() Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 Отправка статистики рекламы в сервис.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
	Возврат ИмяСобытия;
	
КонецФункции

// Имя события элемента справочника Реклама.
// 
// Параметры:
//  Действие - Строка - создание, обновление, удаление.
// 
// Возвращаемое значение:
//  Строка - Имя события профиля потребителя
//
Функция ИмяСобытияЭлементРекламы(Знач Действие) Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 %2 элемента рекламы.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса(), Действие);
	
	Возврат ИмяСобытия;
	
КонецФункции

// Имя события рекламного носителя.
// 
// Возвращаемое значение:
//  Строка - Имя события рекламного носителя
//
Функция ИмяСобытияЗакрытияРекламногоНосителя() Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 Фиксация даты закрытия рекламы профилем потребителя.'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
	Возврат ИмяСобытия;
	
КонецФункции

// Имя события характеристика профиля.
// 
// Параметры:
//  Действие - Строка - создание, обновление, удаление.
// 
// Возвращаемое значение:
//  Строка - Имя события характеристика профиля
//
Функция ИмяСобытияХарактеристикаПрофиля(Знач Действие) Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 %2 характеристики профиля потребителя.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса(), Действие);
	
	Возврат ИмяСобытия;
	
КонецФункции

// Имя события загрузка офлайн рекламы.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияЗагрузкаОфлайнРекламы() Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 Загрузка офлайн рекламы.'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
	
КонецФункции

// Имя события загрузка онлайн рекламы.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияЗагрузкаОнлайнРекламы() Экспорт
	
	ШаблонСобытия = НСтр("ru = '%1 Загрузка онлайн рекламы.'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат СтрШаблон(ШаблонСобытия, ИмяСобытияРекламногоСервиса());
	
КонецФункции

// Имя действия удаление.
// 
// Возвращаемое значение:
//  Строка - Имя действия удаление
//
Функция ИмяДействияУдаление() Экспорт
	
	ИмяДействия = НСтр("ru = 'Удаление'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат ИмяДействия;
	
КонецФункции

// Имя действия обновление.
// 
// Возвращаемое значение:
//  Строка - Имя действия обновление
//
Функция ИмяДействияОбновление() Экспорт
	
	ИмяДействия = НСтр("ru = 'Обновление'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат ИмяДействия;
	
КонецФункции

// Имя свойства данных рекламы таргеты.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяСвойстваДанныхРекламыТаргеты() Экспорт
	Возврат "targets";
КонецФункции

// Имя свойства данных рекламы контент.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяСвойстваДанныхРекламыКонтент() Экспорт
	Возврат "content";
КонецФункции

// Имя макета офлайн рекламы.
// 
// Возвращаемое значение:
//  Строка - Имя макета офлайн рекламы
//
Функция ИмяМакетаОфлайнРекламы() Экспорт
	Возврат "ОффлайнРеклама";
КонецФункции

// Имя группы рекламный сервис.
// 
// Возвращаемое значение:
//  Строка - Строка
//
Функция ИмяГруппыРекламныйСервис() Экспорт
	Возврат "ГруппаРекламныйСервисВерхнийУровень";
КонецФункции

#Область Типы

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - ОписаниеТипов - Строка, Булево, Число, Дата - простой тип.
//   * Булево          - ОписаниеТипов - Булево
//   * Число           - ОписаниеТипов - Число
//   * Дата            - ОписаниеТипов - Дата
//   * Строка          - ОписаниеТипов - Строка
//   * Строка100          - ОписаниеТипов - Строка
//   * Структура       - ОписаниеТипов - Структура
//   * Массив          - ОписаниеТипов - Массив
//   * ТаблицаЗначений - ОписаниеТипов - ТаблицаЗначений
//   * Произвольный    - ОписаниеТипов - произвольный тип.
//
Функция Типы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",         Новый ОписаниеТипов("Строка, Булево, Число, Дата"));
	Результат.Вставить("Булево",          Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число",           Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата",            Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка",          Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Строка100",       Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	Результат.Вставить("Структура",       Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив",          Новый ОписаниеТипов("Массив"));
	Результат.Вставить("ТаблицаЗначений", Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Вставить("Произвольный",    Новый ОписаниеТипов(""));
	
	Возврат Результат;
	
КонецФункции

// Пустой профиль потребителя
// 
// Возвращаемое значение:
//   ОпределяемыйТип.ПрофильПотребителяРекламы
//
Функция ПустойПрофильПотребителя() Экспорт
	
	Результат = Метаданные.ОпределяемыеТипы.ПрофильПотребителяРекламы.Тип.ПривестиЗначение(); // ОпределяемыйТип.ПрофильПотребителяРекламы
	Возврат Результат;
	
КонецФункции

// Пустой владелец характеристики.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВладелецХарактеристикиРекламы
//
Функция ПустойВладелецХарактеристики() Экспорт
	
	Результат = Метаданные.ОпределяемыеТипы.ВладелецХарактеристикиРекламы.Тип.ПривестиЗначение();
	Возврат Результат;
	
КонецФункции

// Типы владельца характеристики.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Организация - Строка - имя метода получения разрешенных организаций для текущего профиля.
// * ПрофильПотребителя - Строка - имя метода получения текущего профиля потребителя.
//
Функция МетодыПолученияВладельцевХарактеристик() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", "РекламныйСервисСлужебный.СписокРазрешенныхОрганизаций");
	Результат.Вставить("ПрофильПотребителя", "РекламныйСервисСлужебный.ТекущийПрофильПотребителяСписком");
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Домен расположения серверов ИПП в РФ.
// Режим "D" - https://releases.1c.ru - РФ.
// Режим "A" - https://releases.1c.eu - за пределами РФ.
// 
// Возвращаемое значение:
//  Булево
//
Функция ДоменРасположенияСерверовИППРФ() Экспорт
	
	Режим = ПолучитьРежимВнешнихРесурсов();
	ДоменВРФ = (Режим = "D");
	
	Возврат ДоменВРФ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СформироватьРекламныйМакет

// Получить данные рекламы и заполнить список к показу рекламы.
// 
// Параметры:
//  ПараметрыПроцедуры - см. НовыйПараметрыПроцедурыПолучитьДанныеРекламы
//  ПрофильПотребителя - ОпределяемыйТип.ПрофильПотребителяРекламы
//
Процедура ПрочитатьДанныеРекламыИЗаполнитьСписокРекламы(Знач ПараметрыПроцедуры, Знач ПрофильПотребителя)
	
	СписокРекламы = ПараметрыПроцедуры.СписокРекламы;
	КоличествоСлотовРекламы = КоличествоСлотовРекламы(ПараметрыПроцедуры.ИнформацияЭкрановКлиента);
	ИмяФормы = ПараметрыПроцедуры.ИмяФормы;
	
	Попытка
		
		ВыборкаРеклама = ВыборкаДанныхРекламыКПоказу(ПрофильПотребителя, ИмяФормы);
		
		Пока ВыборкаРеклама.Следующий() Цикл
			
			ДанныеРекламы = НовыйДанныеИзображения();
			
			Идентификатор = ВыборкаРеклама.Идентификатор;
			ДанныеРекламы.ИдентификаторРекламы = Идентификатор;
			
			Изображение = ВыборкаРеклама.Изображение.Получить(); // Строка
			ДанныеРекламы.Изображение = Изображение;
			
			ЦелевоеДействие = ВыборкаРеклама.ЦелевоеДействие;
			ДанныеРекламы.ЦелевоеДействие = ЦелевоеДействие;
			
			ПоказыватьМаркерРеклама = ВыборкаРеклама.ПоказыватьМаркерРеклама;
			ДанныеРекламы.ПоказыватьМаркерРеклама = ПоказыватьМаркерРеклама;
			
			ЮридическоеЛицоРекламодателя = ВыборкаРеклама.ЮридическоеЛицоРекламодателя;
			ДанныеРекламы.ЮридическоеЛицоРекламодателя = ЮридическоеЛицоРекламодателя;
			
			СписокРекламы.Добавить(ДанныеРекламы);
			
			РегистрыСведений.СчетчикиПоказовРекламы.УвеличитьСчетчики(Идентификатор);
			
			Если СписокРекламы.Количество() = КоличествоСлотовРекламы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выборка данных рекламы к показу.
// 1. Значения характеристик текущего профиля + общие значения характеристик.
// 2. Значения характеристик рекламы (таргеты).
// 3. Подсчет количества значений по каждой характеристике рекламы.
// 4. Общая реклама (без таргетов).
// 5. Реклама с сопоставленными значениями характеристик п.1 и п.2
// 6. Подсчет количества значений характеристик сопоставленных.
// 7. Реклама у которой значения характеристик рекламы п.2, полностью совпали со значениями характеристик профиля п.1
// 8. Реклама из п.7 + общая реклама п.4.
// 9. Реклама у которой либо не указана форма для показа, либо совпадает с формой источник запроса.
// 10. Реклама из п.9 и соединение со справочником реклама для получения нужных полей.
// 11. Реклама из п.10 с ограничением по ДатаНачала и ДатаОкончания, 4 условия для объединения.
// 12. Реклама из п.11 сгруппированная, без повторов.
// 13. Реклама из п.12 соединение с п.10 - Финальное получение данных по рекламе.
// 
// Параметры:
//  ПрофильПотребителя - ОпределяемыйТип.ПрофильПотребителяРекламы - Профиль потребителя
//  ИмяФормы - Строка - имя формы инициатор показа рекламы.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Реклама - СправочникСсылка.Реклама
//  * Идентификатор - Строка
//  * Изображение - ХранилищеЗначения - адрес картинки в хранилище.
//  * ЦелевоеДействие - Строка
//  * ДатаНачала - Дата
//  * ДатаОкончания - Дата
//  * Приоритет - Число
//  * Показы - Число
//  * ДатаПоследнегоПоказа - Дата
//  * ДатаСледующегоПоказа - Дата
//  * БольшеТекущейДаты - Булево
//  * ПоказыватьМаркерРеклама - Булево
//  * ЮридическоеЛицоРекламодателя - Строка
//  * Офлайн - Булево
//
Функция ВыборкаДанныхРекламыКПоказу(Знач ПрофильПотребителя, Знач ИмяФормы)
	
	РезультатЗапроса = РезультатЗапросаДанныхРекламыКПоказу(ПрофильПотребителя, ИмяФормы);
	ВыборкаРеклама = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаРеклама;
	
КонецФункции

Функция РезультатЗапросаДанныхРекламыКПоказу(ПрофильПотребителя, ИмяФормы)
	
	ВладельцыХарактеристик = ВладельцыХарактеристикТекущегоПрофиля();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыборкаДанныхРекламыКПоказу();
	Запрос.УстановитьПараметр("ВладельцыХарактеристик", ВладельцыХарактеристик);
	Запрос.УстановитьПараметр("Профиль", ПрофильПотребителя);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СписокИменФорм = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяФормы);
	СписокИменФорм.Добавить("");
	Запрос.УстановитьПараметр("СписокИменФорм", СписокИменФорм);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВладельцыХарактеристикТекущегоПрофиля()
	
	ВладельцыХарактеристик = Новый Массив; // Массив из Неопределено, ОпределяемыйТип.ВладелецХарактеристикиРекламы, Неопределено
	
	ПустойВладелецХарактеристики = ПустойВладелецХарактеристики();
	ВладельцыХарактеристик.Добавить(ПустойВладелецХарактеристики);
	
	МетодыПолученияВладельцевХарактеристик = МетодыПолученияВладельцевХарактеристик();
	
	Для Каждого СтрокаМетода Из МетодыПолученияВладельцевХарактеристик Цикл
		
		ВладельцыХарактеристики = Новый Массив;
		
		ПараметрыМетода = Новый Массив; // Массив из Массив
		ПараметрыМетода.Добавить(ВладельцыХарактеристики);
		
		Метод = СтрокаМетода.Значение; // Строка
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Метод, ПараметрыМетода);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыХарактеристик, ВладельцыХарактеристики)
		
	КонецЦикла;
	
	Возврат ВладельцыХарактеристик;
	
КонецФункции

Функция ТекстЗапросаВыборкаДанныхРекламыКПоказу()
	
	ТекстЗапросаРекламаКПоказу = ТекстЗапросаРекламаКПоказу();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВыбраннаяРекламаПоФорме.Реклама КАК Реклама,
		|	СправочникРеклама.Код КАК Идентификатор,
		|	СправочникРеклама.Изображение КАК Изображение,
		|	СправочникРеклама.ЦелевоеДействие КАК ЦелевоеДействие,
		|	СправочникРеклама.ДатаНачала КАК ДатаНачала,
		|	СправочникРеклама.ДатаОкончания КАК ДатаОкончания,
		|	СправочникРеклама.МинимальныйИнтервалПоказа КАК МинимальныйИнтервалПоказа,
		|	СправочникРеклама.ПоказыватьМаркерРеклама КАК ПоказыватьМаркерРеклама,
		|	СправочникРеклама.ЮридическоеЛицоРекламодателя КАК ЮридическоеЛицоРекламодателя,
		|	СправочникРеклама.Офлайн КАК Офлайн
		|ПОМЕСТИТЬ ВыбраннаяРекламаРеквизиты
		|ИЗ
		|	ВыбраннаяРекламаПоФорме КАК ВыбраннаяРекламаПоФорме
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Реклама КАК СправочникРеклама
		|		ПО ВыбраннаяРекламаПоФорме.Реклама = СправочникРеклама.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбраннаяРекламаРеквизиты.Реклама КАК Реклама,
		|	ВыбраннаяРекламаРеквизиты.Идентификатор КАК Идентификатор,
		|	ВыбраннаяРекламаРеквизиты.Изображение КАК Изображение,
		|	ВыбраннаяРекламаРеквизиты.ЦелевоеДействие КАК ЦелевоеДействие,
		|	ВыбраннаяРекламаРеквизиты.ДатаНачала КАК ДатаНачала,
		|	ВыбраннаяРекламаРеквизиты.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВыбраннаяРекламаРеквизиты.МинимальныйИнтервалПоказа = 0
		|			ТОГДА 2
		|		КОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СчетчикиПоказовРекламы.ДатаПоследнегоПоказа, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, ВыбраннаяРекламаРеквизиты.МинимальныйИнтервалПоказа * 60) <= &ТекущаяДата
		|			ТОГДА 1
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Приоритет,
		|	ЕСТЬNULL(СчетчикиПоказовРекламы.Показы, 0) КАК Показы,
		|	ЕСТЬNULL(СчетчикиПоказовРекламы.ДатаПоследнегоПоказа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоПоказа,
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СчетчикиПоказовРекламы.ДатаПоследнегоПоказа, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, ВыбраннаяРекламаРеквизиты.МинимальныйИнтервалПоказа * 60) КАК ДатаСледующегоПоказа,
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СчетчикиПоказовРекламы.ДатаПоследнегоПоказа, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, ВыбраннаяРекламаРеквизиты.МинимальныйИнтервалПоказа * 60) <= &ТекущаяДата КАК БольшеТекущейДаты,
		|	ВыбраннаяРекламаРеквизиты.ПоказыватьМаркерРеклама КАК ПоказыватьМаркерРеклама,
		|	ВыбраннаяРекламаРеквизиты.ЮридическоеЛицоРекламодателя КАК ЮридическоеЛицоРекламодателя,
		|	ВыбраннаяРекламаРеквизиты.Офлайн КАК Офлайн
		|ИЗ
		|	ВыбраннаяРекламаРеквизиты КАК ВыбраннаяРекламаРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетчикиПоказовРекламы КАК СчетчикиПоказовРекламы
		|		ПО (ВыбраннаяРекламаРеквизиты.Идентификатор = СчетчикиПоказовРекламы.ИдентификаторРекламы)
		|			И (СчетчикиПоказовРекламы.ПрофильПотребителя = &Профиль)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Показы,
		|	ДатаПоследнегоПоказа,
		|	Офлайн";
	
	Результат = СтрШаблон("%1%2%3", ТекстЗапросаРекламаКПоказу, Символы.ПС, ТекстЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРекламаКПоказу()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗначенияХарактеристикПотребителя.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ЗначенияХарактеристикПотребителя.Характеристика КАК Характеристика,
		|	ЗначенияХарактеристикПотребителя.Значение КАК Значение
		|ПОМЕСТИТЬ ЗначенияПрофиля
		|ИЗ
		|	РегистрСведений.ЗначенияХарактеристикПотребителяРекламы КАК ЗначенияХарактеристикПотребителя
		|ГДЕ
		|	ЗначенияХарактеристикПотребителя.ВладелецХарактеристики В (&ВладельцыХарактеристик)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникРеклама.Ссылка КАК Ссылка,
		|	ЗначенияХарактеристикРекламы.Характеристика КАК Характеристика,
		|	ЗначенияХарактеристикРекламы.Значение КАК Значение
		|ПОМЕСТИТЬ ЗначенияДействующейРекламы
		|ИЗ
		|	Справочник.Реклама КАК СправочникРеклама
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияХарактеристикРекламы КАК ЗначенияХарактеристикРекламы
		|		ПО СправочникРеклама.Ссылка = ЗначенияХарактеристикРекламы.Реклама
		|ГДЕ
		|	ВЫБОР
		|		КОГДА СправочникРеклама.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|		И СправочникРеклама.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникРеклама.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ТекущаяДата >= СправочникРеклама.ДатаНачала
		|		ИНАЧЕ &ТекущаяДата МЕЖДУ СправочникРеклама.ДатаНачала И СправочникРеклама.ДатаОкончания
		|	КОНЕЦ
		|	И СправочникРеклама.ЦелевоеДействие <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРекламы.Ссылка КАК Реклама,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияРекламы.Характеристика) КАК Количество
		|ПОМЕСТИТЬ КоличествоХарактеристикРекламы
		|ИЗ
		|	ЗначенияДействующейРекламы КАК ЗначенияРекламы
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияРекламы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникРеклама.Ссылка КАК Реклама
		|ПОМЕСТИТЬ ОбщаяДействующаяРеклама
		|ИЗ
		|	Справочник.Реклама КАК СправочникРеклама
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияХарактеристикРекламы КАК ЗначенияХарактеристикРекламы
		|		ПО СправочникРеклама.Ссылка = ЗначенияХарактеристикРекламы.Реклама
		|ГДЕ
		|	ЗначенияХарактеристикРекламы.Значение ЕСТЬ NULL
		|	И ВЫБОР
		|		КОГДА СправочникРеклама.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|		И СправочникРеклама.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникРеклама.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ТекущаяДата >= СправочникРеклама.ДатаНачала
		|		ИНАЧЕ &ТекущаяДата МЕЖДУ СправочникРеклама.ДатаНачала И СправочникРеклама.ДатаОкончания
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПрофиля.Характеристика КАК Характеристика,
		|	ЗначенияПрофиля.Значение КАК Значение,
		|	ЗначенияРекламы.Ссылка КАК Реклама
		|ПОМЕСТИТЬ РекламаПоЗначениямПрофиля
		|ИЗ
		|	ЗначенияПрофиля КАК ЗначенияПрофиля
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияДействующейРекламы КАК ЗначенияРекламы
		|		ПО ЗначенияПрофиля.Характеристика = ЗначенияРекламы.Характеристика
		|		И ЗначенияПрофиля.Значение = ЗначенияРекламы.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РекламаПоЗначениям.Реклама КАК Реклама,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РекламаПоЗначениям.Характеристика) КАК Количество
		|ПОМЕСТИТЬ КоличествоХарактеристикСовпадение
		|ИЗ
		|	РекламаПоЗначениямПрофиля КАК РекламаПоЗначениям
		|СГРУППИРОВАТЬ ПО
		|	РекламаПоЗначениям.Реклама
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоХарактеристикРекламы.Реклама КАК Реклама
		|ПОМЕСТИТЬ ВыбраннаяРеклама
		|ИЗ
		|	КоличествоХарактеристикРекламы КАК КоличествоХарактеристикРекламы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоХарактеристикСовпадение КАК КоличествоХарактеристикСовпадение
		|		ПО КоличествоХарактеристикРекламы.Реклама = КоличествоХарактеристикСовпадение.Реклама
		|		И КоличествоХарактеристикРекламы.Количество = КоличествоХарактеристикСовпадение.Количество
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщаяРеклама.Реклама
		|ИЗ
		|	ОбщаяДействующаяРеклама КАК ОбщаяРеклама
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбраннаяРеклама.Реклама КАК Реклама,
		|	ЕСТЬNULL(РекламаЭкранныеФормы.ИмяФормы, """") КАК ИмяФормы
		|ПОМЕСТИТЬ ВыбраннаяРекламаПоФорме
		|ИЗ
		|	ВыбраннаяРеклама КАК ВыбраннаяРеклама
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Реклама.ЭкранныеФормы КАК РекламаЭкранныеФормы
		|		ПО ВыбраннаяРеклама.Реклама = РекламаЭкранныеФормы.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(РекламаЭкранныеФормы.ИмяФормы, """") В (&СписокИменФорм)";
		
		ТекстЗапроса = СтрШаблон("%1%2", ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает текст HTML из объекта ДокументHTML.
//
// Параметры:
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст.
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ТекстHTMLИзОбъектаДокументHTML(Знач ДокументHTML)
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Количество слотов рекламы.
// 
// Параметры:
//  ИнформацияЭкрановКлиента - ФиксированныйМассив из Структура:
//  * Высота - Число
//  * Ширина - Число
// 
// Возвращаемое значение:
//  Число - Количество слотов рекламы
Функция КоличествоСлотовРекламы(Знач ИнформацияЭкрановКлиента)
	
	КоличествоСлотовРекламы = 2;
	Если ЗначениеЗаполнено(ИнформацияЭкрановКлиента) Тогда
		
		ИнформацияЭкранаКлиента = ИнформацияЭкрановКлиента[0]; // Структура
		Высота = ИнформацияЭкранаКлиента.Высота;
		СлужебнаяЗона = 275;
		ВысотаРекламы = 400;
		ПредполагаемоеКоличествоСлотовРекламы = (Высота - СлужебнаяЗона) / ВысотаРекламы;
		КоличествоСлотовРекламы = 
			ПредполагаемоеКоличествоСлотовРекламы - (ПредполагаемоеКоличествоСлотовРекламы % 1);
	КонецЕсли;
	
	Возврат КоличествоСлотовРекламы;
	
КонецФункции

Функция ТекстЗапросаЕстьРекламаКПоказу()
	
	ТекстЗапросаРекламаКПоказу = ТекстЗапросаРекламаКПоказу();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникРеклама.Код КАК Код
		|ИЗ
		|	ВыбраннаяРекламаПоФорме КАК ВыбраннаяРекламаБезОграниченияПоДатам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияПрофиляПотребителяРекламы КАК СобытияПрофиляПотребителяРекламы
		|		ПО (СобытияПрофиляПотребителяРекламы.ПрофильПотребителя = &ПрофильПотребителя)
		|		И (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Реклама КАК СправочникРеклама
		|		ПО ВыбраннаяРекламаБезОграниченияПоДатам.Реклама = СправочникРеклама.Ссылка
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СобытияПрофиляПотребителяРекламы.ДатаЗакрытияРекламы, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, ВЫБОР
		|		КОГДА СправочникРеклама.МинимальныйИнтервалПоказа = 0
		|			ТОГДА &МинутПоУмолчанию
		|		ИНАЧЕ СправочникРеклама.МинимальныйИнтервалПоказа
		|	КОНЕЦ * 60) < &ТекущаяДата";
	
	Результат = СтрШаблон("%1%2%3", ТекстЗапросаРекламаКПоказу, Символы.ПС, ТекстЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Реквизиты рекламы изображения.
// 
// Параметры:
//  РекламаСсылка - СправочникСсылка
// 
// Возвращаемое значение:
//  Структура:
// * Код - Строка
// * Изображение - ХранилищеЗначения
// * ЦелевоеДействие - Строка
// * ПоказыватьМаркерРеклама - Булево
// * ЮридическоеЛицоРекламодателя - Строка
//
Функция РеквизитыРекламыИзображения(РекламаСсылка)
	
	ИменаРеквизитов = "Код, Изображение, ЦелевоеДействие, ПоказыватьМаркерРеклама, 
	|ЮридическоеЛицоРекламодателя";
	РеквизитыРекламы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РекламаСсылка, ИменаРеквизитов);
	
	//@skip-warning
	Возврат РеквизитыРекламы;
	
КонецФункции

#КонецОбласти

#Область ЗапросыКСервисам

// Параметры соединения с рекламным сервисом.
// 
// Возвращаемое значение:
//  см. НовыйПараметрыСоединения
//
Функция ПараметрыСоединенияСРекламнымСервисом()
	
	АдресРесурса = АдресСоединенияСРекламнымСервисом();
	ПараметрыСоединения = НовыйПараметрыСоединения(АдресРесурса);
	ПараметрыСоединения.Аутентификация = Ложь;
	
	Возврат ПараметрыСоединения;
	
КонецФункции

// Параметры соединения с порталом ИТС.
// 
// Возвращаемое значение:
//  см. НовыйПараметрыСоединения
//
Функция ПараметрыСоединенияСПорталомИТС()
	
	АдресРесурса = АдресСоединенияСПорталомИТС();
	ПараметрыСоединения = НовыйПараметрыСоединения(АдресРесурса);
	ПараметрыСоединения.Аутентификация = Истина;
	
	Возврат ПараметрыСоединения;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

// Новый запрос к сервису.
// 
// Возвращаемое значение:
//  Структура - Новый запрос к сервису:
// * ПараметрыСоединения - см. НовыйПараметрыСоединения
// * Наименование - Строка - Представление метода.
// * СтрокаЗапроса - Строка - Полный адрес URI метода с параметрами, задаваемыми как часть пути.
// * Метод - Строка
// * Заголовки - Соответствие из Строка
// * Таймаут - Число
// * ДопустимыеКодыСостояния - Массив из Строка - Коды состояния, означающие успешное выполнение запроса.
// * Данные - Строка, ДвоичныеДанные - тело ответа.
// * ТелоОтветаИгнорируется - Булево - Признак необходимости чтения тела ответа.
// * ПутьКДаннымВТеле - Строка - Путь к возвращаемым данным.
// * ТипПередаваемогоКонтента - Строка
// * ТипВозвращаемогоКонтента - Строка
// * РезультатВСоответствие - Булево
// * СвойстваСДатой - Массив из Строка
//
Функция НовыйЗапросКСервису()
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСоединения",		 НовыйПараметрыСоединения());
	Результат.Вставить("Наименование",				 "");
	Результат.Вставить("СтрокаЗапроса",				 "");
	Результат.Вставить("Метод",						 "");
	Результат.Вставить("Заголовки",					 Новый Соответствие);
	Результат.Вставить("Таймаут",					 0);
	Результат.Вставить("ДопустимыеКодыСостояния",	 ДопустимыеКодыСостоянияПоУмолчанию());
	Результат.Вставить("Данные",						 "");
	Результат.Вставить("ТелоОтветаИгнорируется",	 Ложь);
	Результат.Вставить("ПутьКДаннымВТеле",			 "");
	Результат.Вставить("ТипПередаваемогоКонтента",	 "");
	Результат.Вставить("ТипВозвращаемогоКонтента",	 "");
	Результат.Вставить("РезультатВСоответствие",	 Ложь);
	Результат.Вставить("СвойстваСДатой",			 Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Новое соединение с сервером.
// 
// Параметры:
//  ЗапросКСервису - см. НовыйЗапросКСервису
// 
// Возвращаемое значение:
//  Неопределено, HTTPСоединение - Новое соединение с сервером
//
Функция НовоеСоединениеССервером(Знач ЗапросКСервису)
	
	Соединение = Неопределено;
	ПараметрыСоединения = ЗапросКСервису.ПараметрыСоединения;
	
	Попытка
		
		Если ПараметрыСоединения.Аутентификация Тогда
			Соединение = Новый HTTPСоединение(
				ПараметрыСоединения.Сервер,
				ПараметрыСоединения.Порт,
				ПараметрыСоединения.Логин,
				ПараметрыСоединения.Пароль,
				ПараметрыСоединения.Прокси,
				ПараметрыСоединения.Таймаут,
				ПараметрыСоединения.ЗащищенноеСоединение);
		Иначе
			Соединение = Новый HTTPСоединение(
				ПараметрыСоединения.Сервер,
				ПараметрыСоединения.Порт, , ,
				ПараметрыСоединения.Прокси,
				ПараметрыСоединения.Таймаут,
				ПараметрыСоединения.ЗащищенноеСоединение);
		КонецЕсли;
		
	Исключение
		
		ШаблонТекстОшибки = НСтр(
			"ru='%1Отсутствует соединение: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(
			ШаблонТекстОшибки, 
			ИмяСобытияРекламногоСервиса(), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьВЖурналРегистрацииОшибкуВЗапросе(ЗапросКСервису, ТекстОшибки);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// Зафиксировать ошибку в запросе.
// 
// Параметры:
//  ЗапросКСервису - см. НовыйЗапросКСервису
//  ТекстОшибки - Строка - Текст ошибки
//  Отказ - Булево - Есть ошибки
// 
Процедура ЗаписатьВЖурналРегистрацииОшибкуВЗапросе(Знач ЗапросКСервису, Знач ТекстОшибки, Отказ = Ложь)
	
	Отказ = Истина;
	ПараметрыСоединения = ЗапросКСервису.ПараметрыСоединения;
	
	ПредставлениеОшибки = Новый Массив; // Массив из Строка
	ПредставлениеОшибки.Добавить(НСтр("ru='Ошибка взаимодействия'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ШаблонСервер = НСтр("ru='Сервер: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ПредставлениеОшибки.Добавить(СтрШаблон(ШаблонСервер, ПараметрыСоединения.Сервер));
	
	ШаблонМетод = НСтр("ru='Запрос: %1 %2.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ПолныйАдресЗапроса = ПолныйАдресЗапроса(ЗапросКСервису);
	ПредставлениеОшибки.Добавить(СтрШаблон(ШаблонМетод, ЗапросКСервису.Метод, ПолныйАдресЗапроса));
	
	ШаблонТекстОшибки = НСтр("ru='Текст ошибки: %1'");
	ПредставлениеОшибки.Добавить(СтрШаблон(ШаблонТекстОшибки, ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ШаблонИмяСобытия = НСтр("ru='%1: %2'");
	ИмяСобытия = СтрШаблон(ШаблонИмяСобытия, ИмяСобытияРекламногоСервиса(), ЗапросКСервису.Наименование);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);
	
КонецПроцедуры

Функция ПолныйАдресЗапроса(Знач ЗапросКСервису)
	
	ПараметрыСоединения = ЗапросКСервису.ПараметрыСоединения;
	Если ПустаяСтрока(ПараметрыСоединения.ПутьНаСервере) Тогда
		Возврат ЗапросКСервису.СтрокаЗапроса;
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(ПараметрыСоединения.ПутьНаСервере, "/") 
		Или СтрНачинаетсяС(ЗапросКСервису.СтрокаЗапроса, "/") Тогда
		
		ШаблонАдреса = "%1%2";
		АдресЗапроса = СтрШаблон(ШаблонАдреса, ПараметрыСоединения.ПутьНаСервере, ЗапросКСервису.СтрокаЗапроса);
		
	Иначе
		
		ШаблонАдреса = "%1/%2";
		АдресЗапроса = СтрШаблон(ШаблонАдреса, ПараметрыСоединения.ПутьНаСервере, ЗапросКСервису.СтрокаЗапроса);
		
	КонецЕсли;
	
	Возврат АдресЗапроса;
	
КонецФункции

// Выполнить HTTPМетод сервиса.
// 
// Параметры:
//  Соединение - Неопределено, HTTPСоединение - Соединение
//  ЗапросКСервису - см. НовыйЗапросКСервису
//  HTTPЗапрос - HTTPЗапрос
//  ОтветОтСервиса - см. НовыйОтветОтСервиса
//
Процедура ВыполнитьHTTPМетодСервиса(Знач Соединение, Знач ЗапросКСервису, Знач HTTPЗапрос, ОтветОтСервиса)
	
	Попытка
		
		ОтветОтСервиса.Ответ = Соединение.ВызватьHTTPМетод(ЗапросКСервису.Метод, HTTPЗапрос);
		
	Исключение
		
		ШаблонТекстаОшибки = НСтр("ru = '%1Ошибка выполнения запроса к сервису.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ИмяСобытияРекламногоСервиса());
		ОтветОтСервиса.Отказ = Истина;
		ОтветОтСервиса.ТекстОшибки = ТекстОшибки;
		
		ЗаписатьВЖурналРегистрацииОшибкуВЗапросе(ЗапросКСервису, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ДопустимыеКодыСостоянияПоУмолчанию()
	
	Результат = Новый Массив; // Массив из Число
	Результат.Добавить(200);
	Результат.Добавить(202);
	
	Возврат Результат;
	
КонецФункции

// Обработать данные ответа.
// 
// Параметры:
//  ЗапросКСервису - см. НовыйЗапросКСервису
//  ОтветОтСервиса - см. НовыйОтветОтСервиса
// 
Процедура ОбработатьДанныеОтвета(Знач ЗапросКСервису, ОтветОтСервиса)
	
	Если ОтветОтСервиса.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Неопределено;
	
	HTTPОтвет = ОтветОтСервиса.Ответ;
	Если Не ЗапросВыполненКорректно(ЗапросКСервису, HTTPОтвет, ОтветОтСервиса.ТекстОшибки) Тогда
		ОтветОтСервиса.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗапросКСервису.ТелоОтветаИгнорируется Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Кодировка = ОтветОтСервиса.Ответ.Заголовки["content-encoding"];
		Если Кодировка = "gzip" Тогда
			
			ДвоичныеДанныеОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			ДвоичныеДанныеТекста = РаспаковатьФайлGZip(ДвоичныеДанныеОтвета);
			СтрокаДанных = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеТекста);
			
		Иначе
			
			СтрокаДанных = HTTPОтвет.ПолучитьТелоКакСтроку();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных) Тогда
			Данные = JSONВЗначение(СтрокаДанных, ЗапросКСервису.РезультатВСоответствие, ЗапросКСервису.СвойстваСДатой);
		КонецЕсли;
		
		ОтветОтСервиса.Данные = Данные;
		ОтветОтСервиса.СтрокаДанных = СтрокаДанных;
		
	Исключение
		
		ШаблонОшибки = НСтр("ru='%1Ошибка обработки ответа от сервиса: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(
			ШаблонОшибки, 
			ИмяСобытияРекламногоСервиса(), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтветОтСервиса.ТекстОшибки = ТекстОшибки;
		
		ЗаписатьВЖурналРегистрацииОшибкуВЗапросе(ЗапросКСервису, ТекстОшибки, ОтветОтСервиса.Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

// Запрос выполнен корректно.
// 
// Параметры:
//  ЗапросКСервису - см. НовыйЗапросКСервису
//  HTTPОтвет - Произвольный
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Булево - Запрос выполнен корректно
Функция ЗапросВыполненКорректно(Знач ЗапросКСервису, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния; // Строка
	
	Если ЗапросКСервису.ДопустимыеКодыСостояния.Количество() = 0 
		Или ЗапросКСервису.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СтрокиОшибки = Новый Массив; // Массив из Строка
	ТекстСтрокиОшибки = НовыйСтандартныеТекстыОшибокHTTPЗапросов().Получить(КодСостояния);
	Если Не ЗначениеЗаполнено(ТекстСтрокиОшибки) Тогда
		
		Если КодСостояния >= 500 Тогда
			ТекстСтрокиОшибки = НСтр("ru = 'Внутренняя ошибка сервиса'");
		ИначеЕсли КодСостояния >= 400 Тогда
			ТекстСтрокиОшибки = НСтр("ru = 'Ошибка параметров запроса'");
		Иначе
			ТекстСтрокиОшибки = НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru='Код состояния %1 - %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	СтрокаОшибки = СтрШаблон(ШаблонСтроки, XMLСтрока(КодСостояния), ТекстСтрокиОшибки);
	СтрокиОшибки.Добавить(СтрокаОшибки);
	
	Попытка
		
		Кодировка = HTTPОтвет.Заголовки["content-encoding"];
		Если Кодировка = "gzip" Тогда
			ДвоичныеДанныеОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			ДвоичныеДанныеЗапакованногоФайла = РаспаковатьФайлGZip(ДвоичныеДанныеОтвета);
			ТелоОтвета = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеЗапакованногоФайла);
		Иначе
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			
			ШаблонДанныхОтвета = НСтр("ru='Тело ответа: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
			СтрокаОшибки = СтрШаблон(ШаблонДанныхОтвета, ТелоОтвета);
			СтрокиОшибки.Добавить(СтрокаОшибки);
			
		КонецЕсли;
		
	Исключение
		
		СтрокаОшибки = СтрШаблон(НСтр("ru='Ошибка обработки ответа от сервиса: %1'"), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтрокиОшибки.Добавить(СтрокаОшибки);
		
	КонецПопытки;
	
	ТекстОшибки = СтрСоединить(СтрокиОшибки, Символы.ПС);
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РекламныйМакет

// Создать документ HTML.
// 
// Параметры:
//  СписокРекламы - Массив из см.НовыйДанныеИзображения
//  ТекстДокументаHTML - Строка
// 
Процедура HTMLСтраницаРекламы(СписокРекламы, ТекстДокументаHTML)
	
	МакетСтраницаРекламы = Справочники.Реклама.ПолучитьМакет("СтраницаРекламы");
	ДокументHTML = МакетСтраницаРекламы.ПолучитьДокументHTML();
	
	УзелDivScroller = ДокументHTML.ПолучитьЭлементПоИдентификатору("scroller");
	
	Для Каждого Реклама Из СписокРекламы Цикл
		
		УзелDivPic = ДокументHTML.СоздатьЭлемент("Div");
		УзелDivPic.УстановитьАтрибут("class", "pic");
		УзелDivPic.УстановитьАтрибут("style", "width: 240px; margin-bottom: 10px;");
		УзелDivScroller.ДобавитьДочерний(УзелDivPic);
		
		Если Реклама.ПоказыватьМаркерРеклама Тогда
			УзелDivAdvertisement = ДокументHTML.СоздатьЭлемент("Div");
			УзелDivAdvertisement.УстановитьАтрибут("class", "advertisement");
			УзелDivAdvertisement.ТекстовоеСодержимое = НСтр("ru = 'Реклама'", ОбщегоНазначения.КодОсновногоЯзыка());
			УзелDivPic.ДобавитьДочерний(УзелDivAdvertisement);
		КонецЕсли;
		
		ЦелевоеДействие = Реклама.ЦелевоеДействие;
		УзелAImg = ДокументHTML.СоздатьЭлемент("a");
		УзелAImg.УстановитьАтрибут("href", ЦелевоеДействие);
		УзелAImg.УстановитьАтрибут("target", "_blank");
		УзелDivPic.ДобавитьДочерний(УзелAImg);
		
		ИдентификаторРекламы = Реклама.ИдентификаторРекламы;
		ДанныеИзображения = Реклама.Изображение;
		Если ДанныеИзображения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УзелImg = ДокументHTML.СоздатьЭлемент("Img");
		УзелImg.УстановитьАтрибут("class", "pic_img");
		УзелImg.УстановитьАтрибут("id", ИдентификаторРекламы);
		УзелImg.УстановитьАтрибут("src", ДанныеИзображения);
		УзелAImg.ДобавитьДочерний(УзелImg);
		
		Если Реклама.ПоказыватьМаркерРеклама 
			И Не ПустаяСтрока(Реклама.ЮридическоеЛицоРекламодателя) Тогда
			
			УзелDivAdvertiser = ДокументHTML.СоздатьЭлемент("Div");
			УзелDivAdvertiser.УстановитьАтрибут("class", "advertiser");
			ШаблонПредставления = НСтр("ru = 'Рекламодатель: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
			ПредставлениеРекламодателя = СтрШаблон(ШаблонПредставления, Реклама.ЮридическоеЛицоРекламодателя);
			УзелDivAdvertiser.ТекстовоеСодержимое = ПредставлениеРекламодателя;
			УзелDivPic.ДобавитьДочерний(УзелDivAdvertiser);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстДокументаHTML = ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Конструктор ответ от сервиса.
// 
// Возвращаемое значение:
//  Структура:
// * Ответ - Неопределено, HTTPОтвет - ответ от сервиса.
// * Данные - Неопределено, Массив из Структура, Произвольный,  - обработанные полученные данные.
// * Отказ - Булево - признак отказа.
// * ТекстОшибки - Строка - ошибка при выполнении операции.
// * СтрокаДанных - Строка - полученные текстовые данные.
//
Функция НовыйОтветОтСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("Ответ", Неопределено);
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("СтрокаДанных", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСтандартныеТекстыОшибокHTTPЗапросов()

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'ошибка в запросе.'", КодЯзыка));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'неверные данные аутентификации.'", КодЯзыка));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'у клиента нет доступа к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'на сервере нет ресурса по указанному URI.'", КодЯзыка));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'указанный метод нельзя применить к текущему ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'запрошенный URI не может удовлетворить переданным в заголовке
		|характеристикам.'", КодЯзыка));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'для доступа к серверу требуется аутентификация
		|для прокси-сервера'", КодЯзыка));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'время ожидания сервером передачи от клиента истекло.'", КодЯзыка));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'запрос не может быть выполнен из-за конфликтного
		|обращения к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'ресурс был удален и теперь недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'не указан объем передаваемых данных в заголовке.'", КодЯзыка));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'ни одно из условных полей заголовка запроса не было выполнено.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'слишком большой размер тела запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'слишком длинный URL.'", КодЯзыка));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'контент переданного типа не поддерживается.'", КодЯзыка));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'имеется логическая ошибка, из-за которой невозможно
		|произвести операцию.'", КодЯзыка));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'ресурс заблокирован.'", КодЯзыка));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'необходимо обновить протокол.'", КодЯзыка));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'слишком много запросов в единицу времени.'", КодЯзыка));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'превышена допустимая длина заголовков.'", КодЯзыка));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'запрашиваемый адрес недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'поступило недостаточно информации.'", КодЯзыка));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'внутренняя ошибка сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'сервер не поддерживает возможностей, необходимых
		|для обработки запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'сервер, выступая в роли шлюза или прокси-сервера,
		|получил недействительное ответное сообщение от вышестоящего сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'сервер временно не имеет возможности обрабатывать запросы
		|по техническим причинам.'", КодЯзыка));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'сервер в роли шлюза или прокси-сервера не дождался ответа
		|от вышестоящего сервера для завершения текущего запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'сервер не поддерживает указанную в запросе
		|версию протокола HTTP.'", КодЯзыка));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'не хватает места для выполнения текущего запроса.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'на сервере отсутствует расширение, которое желает
		|использовать клиент.'", КодЯзыка));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'необходимо авторизоваться в сети провайдера.'", КодЯзыка));
	
	Возврат СоответствиеКодов;
	
КонецФункции

// Новый результат формирования рекламного макета.
// 
// Возвращаемое значение:
//  Структура:
// * ТекстHTML - Строка - текст HTML документа.
// * ИдентификаторыРекламы - Массив из Строка - идентификатор выбранной рекламы.
//
Функция НовыйРезультатФормированияРекламногоМакета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстHTML", "");
	Результат.Вставить("ИдентификаторыРекламы", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Параметры соединения к сервисам.
//
// Параметры:
//  АдресРесурса - Строка - имя сервиса "БизнесСеть", "Рубрикатор", "ТорговыеПредложения"
// 
// Возвращаемое значение:
//  Структура:
//   * Сервер - Строка - имя сервера.
//   * Логин - Строка - логин для авторизации в сервисе.
//   * Пароль - Строка - логин для авторизации.
//   * Порт - Строка, Число, Неопределено - порт соединения.
//   * ПутьНаСервере - Строка -  адрес к ресурсу внутри сервера.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * Таймаут - Число - длительность ожидания ответа в секундах.
//   * Прокси - ИнтернетПрокси, Неопределено - интернет прокси.
//   * ЗащищенноеСоединение - Неопределено, Структура - см ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение - 
//   	объект защищенного соединения OpenSSL.
//   * ИдентификаторПрограммы - Строка - уникальный идентификатор информационной базы.
//
Функция НовыйПараметрыСоединения(Знач АдресРесурса = "")
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер",                 СтруктураURI.Хост);
	Результат.Вставить("Логин",                  СтруктураURI.Логин);
	Результат.Вставить("Пароль",                 СтруктураURI.Пароль);
	Результат.Вставить("Порт",                   СтруктураURI.Порт);
	Результат.Вставить("ПутьНаСервере",          СтруктураURI.ПутьНаСервере);
	Результат.Вставить("Аутентификация",         Не ПустаяСтрока(СтруктураURI.Логин) 
													Или Не ПустаяСтрока(СтруктураURI.Пароль));
	Результат.Вставить("Таймаут",                30);
	Результат.Вставить("ЗащищенноеСоединение",   Неопределено);
	Результат.Вставить("ИдентификаторПрограммы", "");
	
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,
			Новый СертификатыУдостоверяющихЦентровОС);
		Результат.Вставить("Прокси", ПолучениеФайловИзИнтернета.ПолучитьПрокси("https"));
	Иначе
		Результат.Вставить("Прокси", ПолучениеФайловИзИнтернета.ПолучитьПрокси("http"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Продолжение обработчика регламентного задания ДобавитьОбновитьРекламу
Процедура ДобавитьОбновитьРекламу()
	
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Попытка
		
		Если РекламныйСервисСлужебныйПовтИсп.ИспользованиеРекламногоСервисаЗапрещено() Тогда
			
			ИзменитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу, Ложь);
			Возврат;
			
		КонецЕсли;
		
		// В режиме разделения:
		// * реклама обновляется через поставляемые данные.
		// * расписание регламентных заданий не работает.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			ТекущиеТаргетыРекламы = РегистрыСведений.ЗначенияХарактеристикРекламы.ТекущиеТаргетыРекламы();
			РегистрыСведений.ЗначенияХарактеристикПотребителяРекламы.ОбновитьЗначенияХарактеристикПотребителя(
				ТекущиеТаргетыРекламы);
			
		Иначе
			
			ИнициализацияРасписания = Ложь;
			ПроверитьУстановитьРасписаниеРегламентногоЗадания(ИнициализацияРасписания);
			
			Если ИнициализацияРасписания Тогда
				Возврат;
			КонецЕсли;
			
			Справочники.Реклама.АктуализироватьРекламу();
			
		КонецЕсли;
		
		РегистрыСведений.СчетчикиПоказовРекламы.УдалитьСчетчикиУдаленнойРекламы();
		
		РегистрыСведений.СтатистикаСобытийВзаимодействияРекламы.ОтправитьСтатистикуВСервис();
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			НСтр("ru = 'РекламныйСервис: ДобавитьОбновитьРекламуОбработчикЗадания'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			ДатаНачала);
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьУстановитьРасписаниеРегламентногоЗадания(ИнициализацияРасписания = Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасписаниеРегламентногоЗадания = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу);
	
	ПустаяДата = Дата(1, 1, 1);
	Если РасписаниеРегламентногоЗадания.ВремяНачала = ПустаяДата Тогда
		
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
		УстанавливаемыйЧас = ГенераторСлучайныхЧисел.СлучайноеЧисло(09, 17);
		УстанавливаемыеМинуты = ГенераторСлучайныхЧисел.СлучайноеЧисло(00, 59);
		УстанавливаемыеСекунды = ГенераторСлучайныхЧисел.СлучайноеЧисло(00, 59);
		
		РасписаниеРегламентногоЗадания.ВремяНачала = 
			Дата(1, 1, 1, УстанавливаемыйЧас, УстанавливаемыеМинуты, УстанавливаемыеСекунды);
		РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
		
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ДобавитьОбновитьРекламу, 
			РасписаниеРегламентногоЗадания);
		
		ИнициализацияРасписания = Истина;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ИзменитьИспользованиеРегламентногоЗадания(РегламентноеЗадание, Использование)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(РегламентноеЗадание) = Использование Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Константы

// Имя события рекламного сервиса.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияРекламногоСервиса() Экспорт
	Возврат НСтр("ru = '1С:Рекламный сервис.'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

// Адрес соединения с рекламным сервисом.
// 
// Возвращаемое значение:
//  Строка - Адрес соединения с рекламным сервисом
//
Функция АдресСоединенияСРекламнымСервисом()
	
	Адрес = "https://api.adv.1c.ru/";
	Возврат Адрес;
	
КонецФункции

// Адрес соединения с порталом ИТС.
// 
// Возвращаемое значение:
//  Строка
//
Функция АдресСоединенияСПорталомИТС()
	
	Адрес = "https://services-api-dev.1c.ru/rest/";
	Возврат Адрес;
	
КонецФункции

#КонецОбласти

#КонецОбласти