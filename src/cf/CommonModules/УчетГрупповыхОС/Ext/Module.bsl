
Процедура СформироватьДвиженияПоступлениеГрупповыхОбъектовОС(ТаблицаОсновныеСредства, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОсновныеСредства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеГрупповыхОбъектовОС(ТаблицаОсновныеСредства, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойСчетУчетаЗатрат = УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Счет08 = ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств;
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	ТаблицаДляСписания.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Для каждого СтрокаТаблицы Из Параметры.ОсновныеСредства Цикл
		
		НДСУчитываетсяВCтоимости = РаздельныйУчетНДСНаСчете19 
			И СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		
		// Поступление основных средств
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт = Счет08;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.МестонахождениеОС;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.МестонахождениеОС;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
		
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		// Принятие к учету основных средств
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = ?(СтрокаТаблицы.Количество > 1, 
			НСтр("ru = 'Приняты к учету объекты ОС'"),
			НСтр("ru = 'Принят к учету объект ОС'"));
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.МестонахождениеОС;
		КонецЕсли;
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = Счет08;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.МестонахождениеОС;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;
			
			СтоимостьНУ = СтрокаТаблицы.СуммаНУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
			СтоимостьЕдиницыНУ = ?(СтрокаТаблицы.Количество = 0, СтоимостьНУ, Окр(СтоимостьНУ / СтрокаТаблицы.Количество, 2));
			Если СтоимостьЕдиницыНУ <= УчетОС.ПредельнаяСтоимостьАмортизируемогоИмуществаНУ() Тогда
				// Включение стоимости в состав расходов НУ
				СтрокаСписания = ТаблицаДляСписания.Добавить();
				
				СтрокаСписания.ОбъектУчета               = СтрокаТаблицы.ОсновноеСредство;
				СтрокаСписания.НаправлениеАмортизации    = Реквизиты.СпособОтраженияРасходовПоАмортизации;
				СтрокаСписания.СчетНачисленияАмортизации = Счет08;
				СтрокаСписания.Подразделение             = Реквизиты.МестонахождениеОС;
				СтрокаСписания.СуммаАмортизацииНУ        = СтоимостьНУ;
				СтрокаСписания.НомерСтроки               = СтрокаТаблицы.НомерСтроки;
				
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'Стоимость группового объекта ОС ""%1"" не должна превышать %2 руб. за единицу.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, 
					СтрокаТаблицы.ОсновноеСредство, 
					УчетОС.ПредельнаяСтоимостьАмортизируемогоИмуществаНУ());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчетеУСН Тогда
			// Первоначальные сведения ОС (налог. учет УСН)
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Добавить();
			
			Движение.Период                     = Реквизиты.Период;
			Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация                = Реквизиты.Организация;
			Движение.ПервоначальнаяСтоимостьУСН = СтрокаТаблицы.СуммаБУ;
			Движение.ДатаПриобретения           = Реквизиты.Период;
			Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
			Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН =
				Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
		КонецЕсли;
		
		// Регистры учета групповых объектов ОС
		
		// Способы амортизации групповых объектов ОС
		Движение = Движения.СпособыАмортизацииГрупповыхОбъектовОС.Добавить();
		
		Движение.Период = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация = Реквизиты.Организация;
		Движение.Подразделение = Реквизиты.МестонахождениеОС;
		Движение.СпособОтраженияРасходовПоАмортизации = Реквизиты.СпособОтраженияРасходовПоАмортизации;
		
		// Сроки использования групповых объектов ОС
		Движение = Движения.СрокиИспользованияГрупповыхОбъектовОС.ДобавитьПриход();
		
		Движение.Период = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация = Реквизиты.Организация;
		Движение.СрокИспользования = СтрокаТаблицы.Количество * СтрокаТаблицы.СрокПолезногоИспользования;
		
	КонецЦикла;
	
	Если (ОтражатьВНалоговомУчете Или ПлательщикНДФЛ)
		И ТаблицаДляСписания.Количество() > 0 Тогда
		
		ТаблицаЗатратПоАмортизации = 
			УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
				ТаблицаДляСписания, Параметры.Реквизиты, Отказ);
			
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПредопределенныйЭлемент("НеамортизируемоеИмущество");
			
		Для каждого СтрокаОС Из ТаблицаЗатратПоАмортизации Цикл
			СтрокаОС.СуммаВР = СтрокаОС.СуммаВР - СтрокаОС.СуммаНУ;
			
			Для Сч = 1 По 3 Цикл
				Если ТипЗнч(СтрокаОС["Субконто" + Сч]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					СтрокаОС["Субконто" + Сч] = СтатьяЗатрат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
			
		Параметры.Реквизиты.Колонки.Добавить("Содержание");
		Параметры.Реквизиты.ЗаполнитьЗначения(НСтр("ru = 'Включение стоимости в состав расходов (НУ)'"), "Содержание");
			
		УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
			ТаблицаЗатратПоАмортизации,
			Параметры.Реквизиты,
			Движения, Отказ);
			
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	Если ОтражатьВНалоговомУчетеУСН Тогда
		Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Записывать = Истина;
	КонецЕсли;
	Движения.СпособыАмортизацииГрупповыхОбъектовОС.Записывать = Истина;
	Движения.СрокиИспользованияГрупповыхОбъектовОС.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеГрупповыхОбъектовОС(ТаблицаОсновныеСредства, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОсновныеСредства

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "Количество,"                 // <Число,15,3> - количество ОС
	+ "СуммаВзаиморасчетов,"        // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"                    // <Число,15,2> - сумма в рублях
	+ "СуммаНДСРуб,"                // <Число,15,2> - сумма НДС в рублях
	+ "НомерСтроки,"                // <Число, 5, 0>
	+ "СпособУчетаНДС,"             // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаНУ,"                    // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который поступает ОС
	+ "СчетНачисленияАмортизации,"  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СрокПолезногоИспользования," // <Число, 4, 0>
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ОсновныеСредства", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОсновныеСредства, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "ВидОперации,"                    // <ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг>
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает товар
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ИмяСписка,"                      // <Строка, 0>
	+ "МестонахождениеОС,"
	+ "НомерВходящегоДокумента,"
	+ "СпособОтраженияРасходовПоАмортизации,"
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДанныеУчетаГрупповыхОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Запрос = Новый Запрос;
	ГраницаДокумента = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("ГраницаДокумента", ГраницаДокумента);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ЭтоПеремещение", Реквизиты.ЭтоПеремещение);
	ПодразделениеПолучатель = ?(Реквизиты.ЭтоПеремещение, Реквизиты.ПодразделениеПолучатель, Неопределено);
	Запрос.УстановитьПараметр("ПодразделениеПолучатель", ПодразделениеПолучатель);
	Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетУчетаОС", ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	Запрос.УстановитьПараметр("СчетАмортизацииОС", ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки01.Субконто1 КАК ОсновноеСредство,
		|	Остатки01.КоличествоОстатокДт КАК Количество,
		|	Остатки01.СуммаОстатокДт КАК Сумма
		|ПОМЕСТИТЬ Остатки01
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаДокумента,
		|			Счет = &СчетУчетаОС,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И Субконто1 В (&ОсновныеСредства)) КАК Остатки01
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки02.Субконто1 КАК ОсновноеСредство,
		|	Остатки02.СуммаОстатокКт КАК Сумма
		|ПОМЕСТИТЬ Остатки02
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаДокумента,
		|			Счет = &СчетАмортизацииОС,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И Субконто1 В (&ОсновныеСредства)) КАК Остатки02
		|;
		|
		|ВЫБРАТЬ
		|	ОстаткиОрганизации.Субконто1 КАК ОсновноеСредство,
		|	ОстаткиОрганизации.КоличествоОстатокДт КАК Количество
		|ПОМЕСТИТЬ ОстаткиОрганизации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаДокумента,
		|			Счет = &СчетУчетаОС,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 В (&ОсновныеСредства)) КАК ОстаткиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСПИ.ОсновноеСредство КАК ОсновноеСредство,
		|	ОстаткиСПИ.СрокИспользованияОстаток КАК СПИ
		|ПОМЕСТИТЬ ОстаткиСПИ
		|ИЗ
		|	РегистрНакопления.СрокиИспользованияГрупповыхОбъектовОС.Остатки(
		|			&ГраницаДокумента,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&ОсновныеСредства)) КАК ОстаткиСПИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпособыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
		|	СпособыАмортизации.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
		|ПОМЕСТИТЬ СпособыАмортизации
		|ИЗ
		|	РегистрСведений.СпособыАмортизацииГрупповыхОбъектовОС.СрезПоследних(
		|			&ГраницаДокумента,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И ОсновноеСредство В (&ОсновныеСредства)) КАК СпособыАмортизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпособыАмортизацииПолучателя.ОсновноеСредство КАК ОсновноеСредство,
		|	СпособыАмортизацииПолучателя.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
		|ПОМЕСТИТЬ СпособыАмортизацииПолучателя
		|ИЗ
		|	РегистрСведений.СпособыАмортизацииГрупповыхОбъектовОС.СрезПоследних(
		|			&ГраницаДокумента,
		|			&ЭтоПеремещение
		|				И Организация = &Организация
		|				И Подразделение = &ПодразделениеПолучатель
		|				И ОсновноеСредство В (&ОсновныеСредства)) КАК СпособыАмортизацииПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки01.ОсновноеСредство КАК ОсновноеСредство,
		|	Остатки01.Количество КАК Количество,
		|	Остатки01.Сумма КАК ПервоначальнаяСтоимость,
		|	ЕСТЬNULL(Остатки02.Сумма, 0) КАК Амортизация,
		|	ЕСТЬNULL(ОстаткиОрганизации.Количество, 0) КАК КоличествоОрганизации,
		|	ЕСТЬNULL(ОстаткиСПИ.СПИ, 0) КАК СПИ,
		|	ЕСТЬNULL(СпособыАмортизации.СпособОтраженияРасходовПоАмортизации, НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходов,
		|	ЕСТЬNULL(СпособыАмортизацииПолучателя.СпособОтраженияРасходовПоАмортизации, НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходовПолучателя
		|ИЗ
		|	Остатки01 КАК Остатки01
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки02 КАК Остатки02
		|		ПО Остатки01.ОсновноеСредство = Остатки02.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОрганизации КАК ОстаткиОрганизации
		|		ПО Остатки01.ОсновноеСредство = ОстаткиОрганизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСПИ КАК ОстаткиСПИ
		|		ПО Остатки01.ОсновноеСредство = ОстаткиСПИ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыАмортизации КАК СпособыАмортизации
		|		ПО Остатки01.ОсновноеСредство = СпособыАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыАмортизацииПолучателя КАК СпособыАмортизацииПолучателя
		|		ПО Остатки01.ОсновноеСредство = СпособыАмортизацииПолучателя.ОсновноеСредство";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОстаткиГрупповыхОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ПериодДокумента", Реквизиты.Период);
	ГраницаДокумента = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("ГраницаДокумента", ГраницаДокумента);
	
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетУчетаОС", ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОС.Субконто1 КАК ОсновноеСредство,
		|	ОстаткиОС.Подразделение КАК Подразделение,
		|	ОстаткиОС.КоличествоОстатокДт КАК Количество,
		|	ОстаткиОС.СуммаОстатокДт КАК Сумма
		|ПОМЕСТИТЬ ОстаткиОС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаДокумента,
		|			Счет = &СчетУчетаОС,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 В (&ОсновныеСредства)) КАК ОстаткиОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиОС.Субконто1 КАК ОсновноеСредство,
		|	ОстаткиОС.КоличествоОстатокДт КАК Количество
		|ПОМЕСТИТЬ ОстаткиОСПоОрганизации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаДокумента,
		|			Счет = &СчетУчетаОС,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 В (&ОсновныеСредства)) КАК ОстаткиОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСПИ.ОсновноеСредство КАК ОсновноеСредство,
		|	ОстаткиСПИ.СрокИспользованияОстаток КАК СрокИспользования
		|ПОМЕСТИТЬ ОстаткиСПИ
		|ИЗ
		|	РегистрНакопления.СрокиИспользованияГрупповыхОбъектовОС.Остатки(
		|			&ГраницаДокумента,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&ОсновныеСредства)) КАК ОстаткиСПИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСПИ.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(ДвиженияСПИ.СрокИспользования) > 0 КАК ВыполненаАмортизация
		|ПОМЕСТИТЬ ДвиженияСПИ
		|ИЗ
		|	РегистрНакопления.СрокиИспользованияГрупповыхОбъектовОС КАК ДвиженияСПИ
		|ГДЕ
		|	ДвиженияСПИ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ДвиженияСПИ.Активность
		|	И ДвиженияСПИ.ЭтоАмортизация
		|	И ДвиженияСПИ.Период >= &НачалоМесяца
		|	И ДвиженияСПИ.Период <= &ПериодДокумента
		|	И ДвиженияСПИ.Регистратор <> &Регистратор
		|	И ДвиженияСПИ.Организация = &Организация
		|	И ДвиженияСПИ.ОсновноеСредство В(&ОсновныеСредства)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияСПИ.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ОстаткиОС.Подразделение КАК Подразделение,
		|	ОстаткиОС.Количество КАК Количество,
		|	ЕСТЬNULL(ОстаткиОСПоОрганизации.Количество, 0) КАК КоличествоПоОрганизации,
		|	ЕСТЬNULL(ОстаткиСПИ.СрокИспользования, 0) КАК СрокИспользования,
		|	ЕСТЬNULL(ДвиженияСПИ.ВыполненаАмортизация, ЛОЖЬ) КАК ВыполненаАмортизация
		|ИЗ
		|	ОстаткиОС КАК ОстаткиОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОСПоОрганизации КАК ОстаткиОСПоОрганизации
		|		ПО ОстаткиОС.ОсновноеСредство = ОстаткиОСПоОрганизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСПИ КАК ОстаткиСПИ
		|		ПО ОстаткиОС.ОсновноеСредство = ОстаткиСПИ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияСПИ КАК ДвиженияСПИ
		|		ПО ОстаткиОС.ОсновноеСредство = ДвиженияСПИ.ОсновноеСредство";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПодготовитьТаблицуОстаточнойСтоимости(ТаблицаОС, ТаблицаОстатки, Отказ) Экспорт
	
	ТаблицаСтоимости = УчетОС.НовыйТаблицаОстаточнойСтоимостиОС();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
		
		ОстаткиОС = ТаблицаОстатки.Найти(СтрокаТаблицы.ОсновноеСредство, "ОсновноеСредство");
		Если ОстаткиОС = Неопределено Или ОстаткиОС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСтоимости = ТаблицаСтоимости.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтоимости, СтрокаТаблицы);
		
		ОстаточнаяСтоимость = ОстаткиОС.ПервоначальнаяСтоимость - ОстаткиОС.Амортизация;
		СтрокаСтоимости.СтоимостьБУ = Окр(ОстаточнаяСтоимость / ОстаткиОС.Количество * СтрокаТаблицы.Количество, 2);
		СтрокаСтоимости.СтоимостьВР = СтрокаСтоимости.СтоимостьБУ;
		
	КонецЦикла;

	Возврат ТаблицаСтоимости;

КонецФункции

Процедура СформироватьДвиженияРасходГрупповыхОС(ТаблицаОС, ТаблицаМатериалы, ТаблицаРеквизиты, ТаблицаОстатки, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатки.Индексы.Добавить("ОсновноеСредство");
	
	ПроверитьНаличие(ТаблицаОС, ТаблицаРеквизиты, ТаблицаОстатки, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасход = НовыйТаблицаРасход();
	
	РезультатыРасчетаАмортизации = РассчитатьАмортизацию(ТаблицаРеквизиты, ТаблицаОС, Отказ);
	
	ОтразитьАмортизациюВУчете(РезультатыРасчетаАмортизации, ТаблицаРеквизиты, Движения, Отказ);
	
	РасчетАмортизации = РезультатыРасчетаАмортизации.РасчетАмортизации;
	АмортизацияДляПроводок = РезультатыРасчетаАмортизации.АмортизацияДляПроводок;
	АмортизацияСДняПринятияКУчету = РезультатыРасчетаАмортизации.АмортизацияСДняПринятияКУчету;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Отбор = Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		ОстаткиОС = ТаблицаОстатки.НайтиСтроки(Отбор);
		СтрокаОстатка = ОстаткиОС[0];
		
		КоэффициентРасхода = СтрокаОС.Количество / СтрокаОстатка.Количество;
		
		УменьшениеПервоначальнойСтоимости = Окр(СтрокаОстатка.ПервоначальнаяСтоимость * КоэффициентРасхода, 2);
		УменьшениеАмортизации = Окр(СтрокаОстатка.Амортизация * КоэффициентРасхода, 2);
		
		КоэффициентРасходаСПИ = СтрокаОС.Количество / СтрокаОстатка.КоличествоОрганизации;
		УменьшениеСПИ = Окр(СтрокаОстатка.СПИ * КоэффициентРасходаСПИ, 0);
		
		// Учитываем результаты текущего расчета амортизации
		
		СтрокаРасчетАмортизации = РасчетАмортизации.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		Отбор = Новый Структура("Подразделение,ОбъектУчета", 
			Реквизиты.Подразделение, СтрокаОС.ОсновноеСредство);
		МассивАмортизацияДляПроводок = АмортизацияДляПроводок.НайтиСтроки(Отбор);
		Если СтрокаРасчетАмортизации <> Неопределено 
			И СтрокаРасчетАмортизации.СуммаАмортизации > 0
			И ЗначениеЗаполнено(МассивАмортизацияДляПроводок) Тогда
			СтрокаАмортизацияДляПроводок = МассивАмортизацияДляПроводок[0];
			Если АмортизацияСДняПринятияКУчету Тогда
				УменьшениеАмортизации = УменьшениеАмортизации + СтрокаАмортизацияДляПроводок.СуммаАмортизацииБУ;
				УменьшениеСПИ = УменьшениеСПИ - СтрокаРасчетАмортизации.УменьшениеСПИ;
			Иначе
				УменьшениеАмортизации = УменьшениеАмортизации 
					+ Окр(СтрокаАмортизацияДляПроводок.СуммаАмортизацииБУ * КоэффициентРасхода, 2);
				УменьшениеСПИ = УменьшениеСПИ
					- Окр(СтрокаРасчетАмортизации.УменьшениеСПИ * КоэффициентРасходаСПИ, 0);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРасход = ТаблицаРасход.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаОС);
		СтрокаРасход.ПервоначальнаяСтоимость = УменьшениеПервоначальнойСтоимости;
		СтрокаРасход.Амортизация = УменьшениеАмортизации;
		СтрокаРасход.УменьшениеСПИ = УменьшениеСПИ;
		
	КонецЦикла;
	
	Если Реквизиты.ЭтоПеремещение Тогда
		УстановитьСпособыОтраженияРасходовПолучателя(ТаблицаОС, Реквизиты, ТаблицаОстатки, Движения);
		СформироватьПроводкиПеремещение(ТаблицаРасход, Реквизиты, Движения, Отказ);
	Иначе
		СформироватьДвиженияУменьшениеСПИ(ТаблицаРасход, ТаблицаРеквизиты, Ложь, Движения);
		СформироватьПроводкиВыбытие(ТаблицаРасход, ТаблицаМатериалы, ТаблицаОстатки, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличие(ТаблицаОС, ТаблицаРеквизиты, ТаблицаОстатки, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Отбор = Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
		ОстаткиОС = ТаблицаОстатки.НайтиСтроки(Отбор);
		
		// Проверка на наличие остатков по подразделению.
		Если ОстаткиОС.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Нет основных средств %1, принятых к учету в %2'"),
				СтрокаОС.ОсновноеСредство, Реквизиты.Подразделение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(СтрокаОС.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			Продолжить;
		КонецЕсли;
		
		СтрокаОстатка = ОстаткиОС[0];
		
		Если СтрокаОстатка.Количество < СтрокаОС.Количество Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Не хватает основных средств %1, принятых к учету в %2:
				|по документу %3, принято к учету %4'"),
				СтрокаОС.ОсновноеСредство, Реквизиты.Подразделение, СтрокаОС.Количество, СтрокаОстатка.Количество);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(СтрокаОС.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСпособыОтраженияРасходовПолучателя(ТаблицаОС, Реквизиты, ТаблицаОстатки, Движения)
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		СпособОтраженияРасходовПолучателя = Неопределено;
		Если ЗначениеЗаполнено(Реквизиты.СпособОтраженияРасходовПоАмортизации) Тогда
			СпособОтраженияРасходовПолучателя = Реквизиты.СпособОтраженияРасходовПоАмортизации;
		Иначе
			Отбор = Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство);
			ОстаткиОС = ТаблицаОстатки.НайтиСтроки(Отбор);
			СтрокаОстатка = ОстаткиОС[0];
			Если Не ЗначениеЗаполнено(СтрокаОстатка.СпособОтраженияРасходовПолучателя) Тогда
				СпособОтраженияРасходовПолучателя = СтрокаОстатка.СпособОтраженияРасходов;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпособОтраженияРасходовПолучателя) Тогда
			Движение = Движения.СпособыАмортизацииГрупповыхОбъектовОС.Добавить();
			Движение.Период = Реквизиты.Период;
			Движение.Организация = Реквизиты.Организация;
			Движение.Подразделение = Реквизиты.ПодразделениеПолучатель;
			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Движение.СпособОтраженияРасходовПоАмортизации = СпособОтраженияРасходовПолучателя;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.СпособыАмортизацииГрупповыхОбъектовОС.Записывать = Истина;
	
КонецПроцедуры

Функция НовыйТаблицаРасход()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Результат.Колонки.Добавить("СчетСписания", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("СубконтоСписания1", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Результат.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	Результат.Колонки.Добавить("ПервоначальнаяСтоимость", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Результат.Колонки.Добавить("Амортизация", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Результат.Колонки.Добавить("УменьшениеСПИ", ОбщегоНазначения.ОписаниеТипаЧисло(12,2));
	Возврат Результат;
	
КонецФункции

Процедура СформироватьПроводкиПеремещение(ТаблицаРасход, Реквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаРасход) Тогда
		Возврат;
	КонецЕсли;
	
	Счет01 = ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС;
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС;
	СвойстваСчета01 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет01);
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	
	Для каждого СтрокаРасход Из ТаблицаРасход Цикл
	
		// Проводка Дт 01.11 Кт 01.11
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.СодержаниеПроводок;
		
		Проводка.СчетДт = Счет01;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
		
		Если СвойстваСчета01.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
		КонецЕсли;
		
		Если СвойстваСчета01.Количественный Тогда
			Проводка.КоличествоДт = СтрокаРасход.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = Счет01;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
		
		Если СвойстваСчета01.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчета01.Количественный Тогда
			Проводка.КоличествоКт = СтрокаРасход.Количество;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаРасход.ПервоначальнаяСтоимость;
		
		Если СвойстваСчета01.НалоговыйУчет Тогда
			Проводка.СуммаВРДт = СтрокаРасход.ПервоначальнаяСтоимость;
			Проводка.СуммаВРКт = СтрокаРасход.ПервоначальнаяСтоимость;
		КонецЕсли;
		
		// Проводка Дт 02.11 Кт 02.11
		
		Если СтрокаРасход.Амортизация > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.СодержаниеПроводок;
			
			Проводка.СчетДт = Счет02;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
			
			Если СвойстваСчета02.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Счет02;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
			
			Если СвойстваСчета02.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаРасход.Амортизация;
			
			Если СвойстваСчета02.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = СтрокаРасход.Амортизация;
				Проводка.СуммаВРКт = СтрокаРасход.Амортизация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиВыбытие(ТаблицаРасход, ТаблицаМатериалы, ТаблицаОстатки, Реквизиты, Движения, Отказ)
	
	Счет01 = ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС;
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС;
	Счет0109 = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	СвойстваСчета01 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет01);
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	СвойстваСчета0109 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет0109);
	
	Для каждого СтрокаРасход Из ТаблицаРасход Цикл
	
		// Проводка Дт 01.09 Кт 01.11
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.СодержаниеПроводок;
		
		Проводка.СчетДт = Счет0109;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
		
		Если СвойстваСчета0109.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Счет01;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
		
		Если СвойстваСчета01.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчета01.Количественный Тогда
			Проводка.КоличествоКт = СтрокаРасход.Количество;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаРасход.ПервоначальнаяСтоимость;
		
		Если СвойстваСчета0109.НалоговыйУчет Тогда
			Проводка.СуммаВРДт = СтрокаРасход.ПервоначальнаяСтоимость;
		КонецЕсли;
		Если СвойстваСчета01.НалоговыйУчет Тогда
			Проводка.СуммаВРКт = СтрокаРасход.ПервоначальнаяСтоимость;
		КонецЕсли;
		
		// Проводка Дт 02.11 Кт 01.09
		
		Если СтрокаРасход.Амортизация > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.СодержаниеПроводок;
			
			Проводка.СчетДт = Счет02;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
			
			Если СвойстваСчета02.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Счет0109;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
			
			Если СвойстваСчета0109.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаРасход.Амортизация;
			
			Если СвойстваСчета02.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = СтрокаРасход.Амортизация;
			КонецЕсли;
			Если СвойстваСчета0109.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СтрокаРасход.Амортизация;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводка Дт 91.02 Кт 01.09
		
		Если СтрокаРасход.ПервоначальнаяСтоимость - СтрокаРасход.Амортизация > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.СодержаниеПроводок;
			
			Проводка.СчетДт = СтрокаРасход.СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасход.СубконтоСписания1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаРасход.ОсновноеСредство);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Счет0109;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаРасход.ОсновноеСредство);
			
			Если СвойстваСчета0109.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			// При списании ОС могли остаться материалы.
			СтоимостьМатериалов = 0;
			Если ЗначениеЗаполнено(ТаблицаМатериалы) Тогда
				ПараметрыПоиска = Новый Структура("СубконтоДоходов1", СтрокаРасход.ОсновноеСредство);
				НайденыеСтроки = ТаблицаМатериалы.НайтиСтроки(ПараметрыПоиска);
				
				Для Каждого СтрокаМатериалы Из НайденыеСтроки Цикл
					СтоимостьМатериалов = СтоимостьМатериалов + СтрокаМатериалы.Сумма;
				КонецЦикла;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаРасход.ПервоначальнаяСтоимость - СтрокаРасход.Амортизация - СтоимостьМатериалов;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = СтрокаРасход.ПервоначальнаяСтоимость - СтрокаРасход.Амортизация - СтоимостьМатериалов;
			КонецЕсли;
			Если СвойстваСчета0109.НалоговыйУчет Тогда
				Проводка.СуммаВРКт = СтрокаРасход.ПервоначальнаяСтоимость - СтрокаРасход.Амортизация - СтоимостьМатериалов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияИзменениеПараметровАмортизации(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзмененияПараметровАмортизации(ТаблицаПараметров, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиГрупповыхОС = ОстаткиГрупповыхОС(Параметры.ТаблицаПараметров,
		ТаблицаРеквизиты,
		Отказ);

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		
		Если СтрокаТаблицы.ЛиквидационнаяСтоимость > 0 Тогда
			// Элементы амортизации групповых ОС (Бухгалтерский учет)
			Движение = Движения.ЭлементыАмортизацииГрупповыхОСБухгалтерскийУчет.Добавить();
			Движение.Период = Реквизиты.Период;
			Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация = Реквизиты.Организация;
			Движение.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
		
		РезультатПоиска = ОстаткиГрупповыхОС.НайтиСтроки(ПараметрыПоиска);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОС = РезультатПоиска[0];
		
		КоличествоОС = СтрокаОС.КоличествоПоОрганизации;
		// В остатке СПИ учтем, что в месяце проведения документа ОС может быть уже амортизировано.
		// В силу новый СПИ вступит только со следующего месяца.
		ОстатокСПИ = СтрокаОС.СрокИспользования - ?(СтрокаОС.ВыполненаАмортизация, 0, КоличествоОС);
			
		НовыйСрокСПИ = СтрокаТаблицы.СрокИспользованияДляВычисленияАмортизации * КоличествоОС
			+ ?(СтрокаОС.ВыполненаАмортизация, КоличествоОС, 0);
		
		Если НовыйСрокСПИ > ОстатокСПИ Тогда
			Движение = Движения.СрокиИспользованияГрупповыхОбъектовОС.ДобавитьПриход();
			Движение.СрокИспользования = НовыйСрокСПИ - ОстатокСПИ;
			
		ИначеЕсли НовыйСрокСПИ < ОстатокСПИ Тогда
			Движение = Движения.СрокиИспользованияГрупповыхОбъектовОС.ДобавитьРасход();
			Движение.СрокИспользования = ОстатокСПИ - НовыйСрокСПИ;
			
		Иначе
			Продолжить;
		КонецЕсли;
			
		Движение.Период = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация = Реквизиты.Организация;
		
	КонецЦикла;

	Движения.СрокиИспользованияГрупповыхОбъектовОС.Записывать = Истина;
	Движения.ЭлементыАмортизацииГрупповыхОСБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзмененияПараметровАмортизации(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                            // <СправочникСсылка.ОсновныеСредства>
	+ "СрокИспользованияДляВычисленияАмортизации,"   // <Число, 4, 0> - срок полезного использования для начисления амортизации
	+ "ЛиквидационнаяСтоимость";                     // <Число, 15, 2>
	
	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация";                  // <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеГрупповыхОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетУчетаГрупповыхОС", ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0) КАК Количество
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Дата,
	|				Счет = &СчетУчетаГрупповыхОС,
	|				&ВидСубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ТаблицаОС.ОсновноеСредство
	|						ИЗ
	|							ТаблицаОС)) КАК ХозрасчетныйОстатки
	|		ПО ТаблицаОС.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0) = 0";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'По состоянию на %4.
				|Основное средство <%1 (%2)> не числится на учете в организации <%3>.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
				Выборка.КодОС, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#Область УсловноеОформление

Процедура ДобавитьУсловноеОформлениеКоличества(УсловноеОформление, ИмяТабличнойЧасти) Экспорт
	
	ПолеУО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1Количество", ИмяТабличнойЧасти);
	
	ОтборУО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Объект.%1.ЕдиницаУчета", ИмяТабличнойЧасти);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ПолеУО);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ОтборУО, ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "1");
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеИнвентарногоНомера(УсловноеОформление, ИмяТабличнойЧасти) Экспорт
	
	ПолеУО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1ИнвентарныйНомер", ИмяТабличнойЧасти);
	
	ОтборУО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Объект.%1.ЕдиницаУчета", ИмяТабличнойЧасти);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ПолеУО);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ОтборУО, ВидСравненияКомпоновкиДанных.Равно, Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));
	
КонецПроцедуры

#КонецОбласти

Функция АмортизацияНачисляетсяСДняПринятияКУчету(Организация, Период) Экспорт
	
	АлгоритмПериодаАмортизации = УчетнаяПолитика.АлгоритмПериодаАмортизации(Период, Организация);
	Возврат АлгоритмПериодаАмортизации = Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания;
	
КонецФункции

Функция РассчитатьАмортизацию(ТаблицаРеквизиты, ТаблицаОС, Отказ, Ошибки = Неопределено) Экспорт
	
	Результаты = НовыйРезультатыРасчетаАмортизации();

	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетГрупповыхОС") Тогда
		Возврат Результаты;
	КонецЕсли;
	
	ПараметрыРасчета = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	АмортизацияСДняПринятияКУчету = АмортизацияНачисляетсяСДняПринятияКУчету(
		ПараметрыРасчета.Организация, ПараметрыРасчета.Период);
	Результаты.АмортизацияСДняПринятияКУчету = АмортизацияСДняПринятияКУчету;
	
	ОкончательныйРасчет = ТипЗнч(ПараметрыРасчета.Регистратор) = Тип("ДокументСсылка.РегламентнаяОперация");
	
	Если АмортизацияСДняПринятияКУчету
		И Не ОкончательныйРасчет
		И ПараметрыРасчета.ЭтоПеремещение Тогда
		Возврат Результаты;
	КонецЕсли;
	
	Счет01 = ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС;
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС;
	
	ПериодРасчета = НачалоДня(КонецМесяца(ПараметрыРасчета.Период));
	
	ПараметрыРасчета.Вставить("АмортизацияСДняПринятияКУчету", АмортизацияСДняПринятияКУчету);
	ПараметрыРасчета.Вставить("ОкончательныйРасчет", ОкончательныйРасчет);
	
	ДанныеДляРасчета = ДанныеДляРасчетаАмортизации(ПараметрыРасчета, ТаблицаОС);
	
	ДанныеОрганизации = ДанныеДляРасчета.ДанныеОрганизации;
	Если Не ЗначениеЗаполнено(ДанныеОрганизации) Тогда
		Возврат Результаты;
	КонецЕсли;
	
	ДанныеПодразделений = ДанныеДляРасчета.ДанныеПодразделений;
	НачисленоРанее = ДанныеДляРасчета.НачисленоРанее;
	
	Для каждого СтрокаПоОрганизации Из ДанныеОрганизации Цикл
		
		ОсновноеСредство = СтрокаПоОрганизации.ОсновноеСредство;
		
		// Пропускаем ОС, которых не было в учете на момент определения базы расчета амортизации
		Количество = СтрокаПоОрганизации.Количество;
		Если Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Рассчитываем амортизацию по организации в целом
		
		ОстаточнаяСтоимостьНаНачало = СтрокаПоОрганизации.ОстаточнаяСтоимостьНаНачало;
		
		СтрокаНачисленоРанее = НачисленоРанее.Найти(ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаНачисленоРанее <> Неопределено Тогда
			Если АмортизацияСДняПринятияКУчету Тогда
				// Уменьшаем остаточную стоимость на начало периода на суммы, 
				// учтенные при расчете амортизации по ОС, выбывшим ранее в периоде расчета
				ОстаточнаяСтоимостьНаНачало = Макс(ОстаточнаяСтоимостьНаНачало - СтрокаНачисленоРанее.ОстаточнаяСтоимостьНаНачало, 0);
			Иначе
				// Пропускаем ОС, по которым при способе "со следующего месяца" амортизация уже была начислена.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОстаточнаяСтоимостьНаКонец = СтрокаПоОрганизации.ОстаточнаяСтоимостьНаКонец;
		ЛиквидационнаяСтоимость = СтрокаПоОрганизации.ЛиквидационнаяСтоимость * Количество;
		ОстатокСПИ = СтрокаПоОрганизации.ОстатокСПИ;
		
		ТолькоПоВыбывающимОС = АмортизацияСДняПринятияКУчету И Не ОкончательныйРасчет;
		Если ТолькоПоВыбывающимОС Тогда
			// Амортизация начисляется только на выбывающее количество.
			// Уменьшаем данные для расчета амортизации пропорционально количеству выбытия.
			СтрокаОС = ТаблицаОС.Найти(ОсновноеСредство, "ОсновноеСредство");
			КоэффициентКоличества = СтрокаОС.Количество / Количество;
			Количество = СтрокаОС.Количество;
			ОстаточнаяСтоимостьНаНачало = Окр(ОстаточнаяСтоимостьНаНачало * КоэффициентКоличества, 2);
			ОстаточнаяСтоимостьНаКонец = Окр(ОстаточнаяСтоимостьНаКонец * КоэффициентКоличества, 2);
			ЛиквидационнаяСтоимость = Окр(ЛиквидационнаяСтоимость * КоэффициентКоличества, 2);
			ОстатокСПИ = Окр(ОстатокСПИ * КоэффициентКоличества, 0);
		КонецЕсли;
		
		ОстаточнаяСтоимость = ?(АмортизацияСДняПринятияКУчету,
			Окр((ОстаточнаяСтоимостьНаНачало + ОстаточнаяСтоимостьНаКонец) / 2, 2),
			ОстаточнаяСтоимостьНаНачало);
		// Пропускаем ОС , у которых нет остаточной стоимости на момент расчета амортизации
		Если ОстаточнаяСтоимость <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЛиквидационнаяСтоимость = СтрокаПоОрганизации.ЛиквидационнаяСтоимость * Количество;
		АмортизируемаяСтоимость = Макс(ОстаточнаяСтоимость - ЛиквидационнаяСтоимость, 0);
		
		Если ТолькоПоВыбывающимОС И День(ПараметрыРасчета.Период) = 1 Тогда
			// Если амортизация начисляется со дня принятия к учету, при выбытии ОС первым числом месяца амортизация 
			// за месяц выбытия не начисляется. Но выбытие тем не менее нужно учитывать при последующем начислении
			// амортизации в этом месяце, поэтому нужно его отразить в регистре РасчетАмортизацииГрупповыхОбъектовОС.
			УменьшениеСПИ = 0;
		Иначе
			УменьшениеСПИ = Мин(Количество, ОстатокСПИ);
		КонецЕсли;
		НормаАмортизации = ?(ОстатокСПИ > 0, УменьшениеСПИ / ОстатокСПИ, 0);
		
		СуммаАмортизации = Окр(АмортизируемаяСтоимость * НормаАмортизации, 2);
		
		СтрокаРасчет = Результаты.РасчетАмортизации.Добавить();
		СтрокаРасчет.ПериодРасчета = ПериодРасчета;
		СтрокаРасчет.ОсновноеСредство = ОсновноеСредство;
		СтрокаРасчет.Количество = Количество;
		СтрокаРасчет.ОстаточнаяСтоимостьНаНачало = ОстаточнаяСтоимостьНаНачало;
		СтрокаРасчет.ОстаточнаяСтоимостьНаКонец = ОстаточнаяСтоимостьНаКонец;
		СтрокаРасчет.ОстаточнаяСтоимость = ОстаточнаяСтоимость;
		СтрокаРасчет.ЛиквидационнаяСтоимость = ЛиквидационнаяСтоимость;
		СтрокаРасчет.ОстатокСПИ = ОстатокСПИ;
		СтрокаРасчет.УменьшениеСПИ = УменьшениеСПИ;
		СтрокаРасчет.СуммаАмортизации = СуммаАмортизации;
		
		// Общую сумму амортизации распределяем по подразделениям для формирования проводок
		
		Если СуммаАмортизации = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ОсновноеСредство", ОсновноеСредство);
		// Если амортизация способом "со дня принятия к учету" начисляется только в части выбывающих ОС,
		// вся начисленная сумма относится на подразделение из документа выбытия.
		Если ТолькоПоВыбывающимОС Тогда
			Отбор.Вставить("Подразделение", ПараметрыРасчета.Подразделение);
		КонецЕсли;
		ДанныеОС = ДанныеПодразделений.Скопировать(Отбор);
		
		// Распределяем пропорционально остаточной стоимости ОС в подразделениях.
		// Отрицательную остаточную стоимость считаем ошибкой.
		СтоимостьПоПодразделениям = Новый Массив;
		ЕстьОшибки = Ложь;
		Для каждого СтрокаОС Из ДанныеОС Цикл
			
			Если СтрокаОС.ОстаточнаяСтоимость >= 0 Тогда
				СтоимостьПоПодразделениям.Добавить(СтрокаОС.ОстаточнаяСтоимость);
				Продолжить;
			КонецЕсли;
			
			ЕстьОшибки = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru='Балансовая стоимость основного средства ""%1"" в подразделении ""%2"" меньше нуля'"), 
				ОсновноеСредство, СтрокаОС.Подразделение);
			Если Ошибки = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ПараметрыРасчета.Регистратор);
			Иначе
				Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
				Ошибка.Описание = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		АмортизацияПоПодразделениям = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СуммаАмортизации, СтоимостьПоПодразделениям);
		
		Если Не ЗначениеЗаполнено(АмортизацияПоПодразделениям) Тогда
			АмортизацияПоПодразделениям = Новый Массив(СтоимостьПоПодразделениям.Количество());
		КонецЕсли;
		
		Для Индекс = 0 По АмортизацияПоПодразделениям.ВГраница() Цикл
			
			СтрокаПодразделения = ДанныеОС[Индекс];
			
			СтрокаПроводки = Результаты.АмортизацияДляПроводок.Добавить();
			СтрокаПроводки.ОбъектУчета = ОсновноеСредство;
			СтрокаПроводки.СчетУчета = Счет01;
			СтрокаПроводки.СчетНачисленияАмортизации = Счет02;
			СтрокаПроводки.НаправлениеАмортизации = СтрокаПодразделения.СпособОтраженияРасходов;
			СтрокаПроводки.СуммаАмортизацииБУ = АмортизацияПоПодразделениям[Индекс];
			СтрокаПроводки.СуммаАмортизацииВР = СтрокаПроводки.СуммаАмортизацииБУ;
			СтрокаПроводки.Подразделение = СтрокаПодразделения.Подразделение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результаты.РасчетАмортизации.Индексы.Добавить("ОсновноеСредство");
	Результаты.АмортизацияДляПроводок.Индексы.Добавить("Подразделение,ОбъектУчета");
	
	Возврат Результаты;
	
КонецФункции

Процедура ОтразитьАмортизациюВУчете(РезультатыРасчета, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	СформироватьДвиженияУменьшениеСПИ(РезультатыРасчета.РасчетАмортизации, ТаблицаРеквизиты, Истина, Движения);
	
	СформироватьПроводкиАмортизация(РезультатыРасчета.АмортизацияДляПроводок, ТаблицаРеквизиты, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения, РезультатыРасчета.РасчетАмортизации, ТаблицаРеквизиты, "РасчетАмортизацииГрупповыхОбъектовОС");
	
КонецПроцедуры

Функция ДанныеДляРасчетаАмортизации(Реквизиты, ТаблицаОС)
	
	ДанныеДляРасчета = НовыйДанныеДляРасчетаАмортизации();
	
	ОкончательныйРасчет = Реквизиты.ОкончательныйРасчет;
	АмортизацияСДняПринятияКУчету = Реквизиты.АмортизацияСДняПринятияКУчету;
	
	ТекстРазделителя = ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Запрос = Новый Запрос();
	Запрос.Текст = 
		ТекстЗапросаАмортизацияДанныеПодразделений(ОкончательныйРасчет) + ТекстРазделителя
		+ ТекстЗапросаАмортизацияДанныеОрганизации(ОкончательныйРасчет) + ТекстРазделителя
		+ ТекстЗапросаАмортизацияНачисленоРанее(ОкончательныйРасчет);
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Если ОкончательныйРасчет Или Не АмортизацияСДняПринятияКУчету Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.Период));
	ИначеЕсли День(Реквизиты.Период) = 1 Тогда
		// Если амортизация начисляется со дня принятия к учету, при выбытии ОС первым числом месяца амортизация 
		// за месяц выбытия не начисляется. Но выбытие тем не менее нужно учитывать при последующем начислении
		// амортизации в этом месяце, поэтому нужно его отразить в регистре РасчетАмортизацииГрупповыхОбъектовОС.
		// Остатки в таком случае берем не на конец предыдущего дня, а на момент документа выбытия.
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", НачалоДня(Реквизиты.Период) - 1);
	КонецЕсли;
	Если АмортизацияСДняПринятияКУчету Тогда
		Запрос.УстановитьПараметр("ПериодСпособыАмортизации", КонецМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("ПериодЭлементыАмортизации", КонецМесяца(Реквизиты.Период));
	Иначе
		Запрос.УстановитьПараметр("ПериодСпособыАмортизации", КонецМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("ПериодЭлементыАмортизации", НачалоМесяца(Реквизиты.Период) - 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(КонецМесяца(Реквизиты.Период)));
	Запрос.УстановитьПараметр("МоментВремениРегистратора", Реквизиты.Регистратор.МоментВремени());
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("АмортизацияСДняПринятияКУчету", АмортизацияСДняПринятияКУчету);
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетУчетаОС", ПланыСчетов.Хозрасчетный.ГрупповыеОбъектыОС);
	Запрос.УстановитьПараметр("СчетАмортизацииОС", ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС);
	Если ОкончательныйРасчет Тогда
		Запрос.УстановитьПараметр("ОсновныеСредства", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтборСубконто1", Истина);
	Запрос.УстановитьПараметр("ОтборОС", Истина);
	
	Результаты = Запрос.ВыполнитьПакет();
	ДанныеПодразделений = Результаты[1].Выгрузить();
	ДанныеОрганизации = Результаты[3].Выгрузить();
	НачисленоРанее = Результаты[4].Выгрузить();
	
	ДанныеПодразделений.Индексы.Добавить("ОсновноеСредство");
	НачисленоРанее.Индексы.Добавить("ОсновноеСредство");
	
	ДанныеДляРасчета.ДанныеПодразделений = ДанныеПодразделений;
	ДанныеДляРасчета.ДанныеОрганизации = ДанныеОрганизации;
	ДанныеДляРасчета.НачисленоРанее = НачисленоРанее;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ТекстЗапросаАмортизацияДанныеПодразделений(ОкончательныйРасчет)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиОбороты01.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиОбороты01.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА ОстаткиОбороты01.СуммаКонечныйОстатокДт
	|		ИНАЧЕ ОстаткиОбороты01.СуммаНачальныйОстатокДт
	|	КОНЕЦ КАК ОстаточнаяСтоимость,
	|	NULL КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ ОстаткиПодразделений
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = &СчетУчетаОС,
	|			&ВидСубконтоОС,
	|			Организация = &Организация
	|				И &ОтборСубконто1) КАК ОстаткиОбороты01
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиОбороты02.Субконто1,
	|	ОстаткиОбороты02.Подразделение,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА -ОстаткиОбороты02.СуммаКонечныйОстатокКт
	|		ИНАЧЕ -ОстаткиОбороты02.СуммаНачальныйОстатокКт
	|	КОНЕЦ,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = &СчетАмортизацииОС,
	|			&ВидСубконтоОС,
	|			Организация = &Организация
	|				И &ОтборСубконто1) КАК ОстаткиОбороты02
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпособыАмортизации.ОсновноеСредство,
	|	СпособыАмортизации.Подразделение,
	|	0,
	|	СпособыАмортизации.СпособОтраженияРасходовПоАмортизации
	|ИЗ
	|	РегистрСведений.СпособыАмортизацииГрупповыхОбъектовОС.СрезПоследних(
	|			&ПериодСпособыАмортизации,
	|			Организация = &Организация
	|				И &ОтборОС) КАК СпособыАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПодразделений.ОсновноеСредство КАК ОсновноеСредство,
	|	ОстаткиПодразделений.Подразделение КАК Подразделение,
	|	СУММА(ОстаткиПодразделений.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
	|	ЕСТЬNULL(МАКСИМУМ(ОстаткиПодразделений.СпособОтраженияРасходов), НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходов
	|ИЗ
	|	ОстаткиПодразделений КАК ОстаткиПодразделений
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПодразделений.ОсновноеСредство,
	|	ОстаткиПодразделений.Подразделение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиПодразделений.ОстаточнаяСтоимость) <> 0";
	
	Если Не ОкончательныйРасчет Тогда
		ТекстОтбор = "Субконто1 В (&ОсновныеСредства)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСубконто1", ТекстОтбор);
		ТекстОтбор = "ОсновноеСредство В (&ОсновныеСредства)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОС", ТекстОтбор);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаАмортизацияДанныеОрганизации(ОкончательныйРасчет)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиОбороты01.Субконто1 КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА ОстаткиОбороты01.КоличествоКонечныйОстатокДт
	|		ИНАЧЕ ОстаткиОбороты01.КоличествоНачальныйОстатокДт
	|	КОНЕЦ КАК Количество,
	|	ОстаткиОбороты01.СуммаНачальныйОстатокДт КАК ОстаточнаяСтоимостьНаНачало,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА ОстаткиОбороты01.СуммаКонечныйОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстаточнаяСтоимостьНаКонец,
	|	0 КАК ОстатокСПИ,
	|	0 КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ ОстаткиОрганизации
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = &СчетУчетаОС,
	|			&ВидСубконтоОС,
	|			Организация = &Организация
	|				И &ОтборСубконто1) КАК ОстаткиОбороты01
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиОбороты02.Субконто1,
	|	0,
	|	-ОстаткиОбороты02.СуммаНачальныйОстатокКт,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА -ОстаткиОбороты02.СуммаКонечныйОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = &СчетАмортизацииОС,
	|			&ВидСубконтоОС,
	|			Организация = &Организация
	|				И &ОтборСубконто1) КАК ОстаткиОбороты02
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиОборотыСПИ.ОсновноеСредство,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &АмортизацияСДняПринятияКУчету
	|			ТОГДА ОстаткиОборотыСПИ.СрокИспользованияКонечныйОстаток
	|		ИНАЧЕ ОстаткиОборотыСПИ.СрокИспользованияНачальныйОстаток
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрНакопления.СрокиИспользованияГрупповыхОбъектовОС.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецПериода,
	|			,
	|			,
	|			Организация = &Организация
	|				И &ОтборОС) КАК ОстаткиОборотыСПИ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлементыАмортизации.ОсновноеСредство,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЭлементыАмортизации.ЛиквидационнаяСтоимость
	|ИЗ
	|	РегистрСведений.ЭлементыАмортизацииГрупповыхОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодЭлементыАмортизации,
	|			Организация = &Организация
	|				И &ОтборОС) КАК ЭлементыАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОрганизации.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(ОстаткиОрганизации.Количество) КАК Количество,
	|	СУММА(ОстаткиОрганизации.ОстаточнаяСтоимостьНаНачало) КАК ОстаточнаяСтоимостьНаНачало,
	|	СУММА(ОстаткиОрганизации.ОстаточнаяСтоимостьНаКонец) КАК ОстаточнаяСтоимостьНаКонец,
	|	СУММА(ОстаткиОрганизации.ОстатокСПИ) КАК ОстатокСПИ,
	|	СУММА(ОстаткиОрганизации.ЛиквидационнаяСтоимость) КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	ОстаткиОрганизации КАК ОстаткиОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиОрганизации.ОсновноеСредство
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ОстаткиОрганизации.Количество) <> 0
	|		ИЛИ СУММА(ОстаткиОрганизации.ОстаточнаяСтоимостьНаНачало) <> 0
	|		ИЛИ СУММА(ОстаткиОрганизации.ОстаточнаяСтоимостьНаКонец) <> 0
	|		ИЛИ СУММА(ОстаткиОрганизации.ОстатокСПИ) <> 0)";
	
	Если Не ОкончательныйРасчет Тогда
		ТекстОтбор = "Субконто1 В (&ОсновныеСредства)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСубконто1", ТекстОтбор);
		ТекстОтбор = "ОсновноеСредство В (&ОсновныеСредства)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОС", ТекстОтбор);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАмортизацияНачисленоРанее(ОкончательныйРасчет)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(РасчетАмортизации.ОстаточнаяСтоимостьНаНачало) КАК ОстаточнаяСтоимостьНаНачало
	|ИЗ
	|	РегистрСведений.РасчетАмортизацииГрупповыхОбъектовОС КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.ПериодРасчета = &ПериодРасчета
	|	И РасчетАмортизации.Организация = &Организация
	|	И РасчетАмортизации.Активность
	|	И РасчетАмортизации.Регистратор <> &Регистратор
	|	И &ОтборОС
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетАмортизации.ОсновноеСредство";
	
	Если Не ОкончательныйРасчет Тогда
		ТекстОтбор = 
			"РасчетАмортизации.ОсновноеСредство В (&ОсновныеСредства)
			|	И РасчетАмортизации.МоментВремени < &МоментВремениРегистратора";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОС", ТекстОтбор);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция НовыйТаблицаРасчетАмортизации()
	
	ОписаниеТипаКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	ОписаниеТипаСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаСПИ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Результат.Колонки.Добавить("Количество", ОписаниеТипаКоличество);
	Результат.Колонки.Добавить("ОстаточнаяСтоимостьНаНачало", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ОстаточнаяСтоимостьНаКонец", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ОстаточнаяСтоимость", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ЛиквидационнаяСтоимость", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ОстатокСПИ", ОписаниеТипаСПИ);
	Результат.Колонки.Добавить("УменьшениеСПИ", ОписаниеТипаСПИ);
	Результат.Колонки.Добавить("СуммаАмортизации", ОписаниеТипаСумма);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатыРасчетаАмортизации()
	
	Результаты = Новый Структура;
	Результаты.Вставить("РасчетАмортизации", НовыйТаблицаРасчетАмортизации());
	Результаты.Вставить("АмортизацияДляПроводок", УчетОС.ПолучитьПустуюТаблицуАмортизацииОС());
	Результаты.Вставить("АмортизацияСДняПринятияКУчету", Ложь);
	
	Возврат Результаты;
	
КонецФункции

Функция НовыйДанныеДляРасчетаАмортизации()
	
	Данные = Новый Структура;
	Данные.Вставить("ДанныеПодразделений", Неопределено);
	Данные.Вставить("ДанныеОрганизации", Неопределено);
	Данные.Вставить("НачисленоРанее", Неопределено);
	
	Возврат Данные;
	
КонецФункции

Процедура СформироватьПроводкиАмортизация(ТаблицаАмортизации, ТаблицаРеквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияГрупповыхОбъектовОС;
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	Реквизиты = ТаблицаРеквизиты[0];
	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, ТаблицаРеквизиты, Отказ);
	СодержаниеПроводок = НСтр("ru='Амортизация ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаЗатрат Из ТаблицаЗатрат Цикл
		
		// Проводка Дт Счет затрат Кт 02.11
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаЗатрат.ПодразделениеЗатрат;
		КонецЕсли;
		
		Проводка.СчетКт = Счет02;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаЗатрат.ОбъектУчета);
		
		Если СвойстваСчета02.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаЗатрат.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаЗатрат.СуммаБУ;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаВРДт = СтрокаЗатрат.СуммаБУ;
		КонецЕсли;
		Если СвойстваСчета02.НалоговыйУчет Тогда
			Проводка.СуммаВРКт = СтрокаЗатрат.СуммаБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияУменьшениеСПИ(ТаблицаУменьшениеСПИ, ТаблицаРеквизиты, ЭтоАмортизация, Движения)
	
	Если Не ЗначениеЗаполнено(ТаблицаУменьшениеСПИ) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для каждого СтрокаТаблицы Из ТаблицаУменьшениеСПИ Цикл
		
		Если СтрокаТаблицы.УменьшениеСПИ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.СрокиИспользованияГрупповыхОбъектовОС.ДобавитьРасход();
		Движение.Период = Реквизиты.Период;
		Движение.Организация = Реквизиты.Организация;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.СрокИспользования = СтрокаТаблицы.УменьшениеСПИ;
		Движение.ЭтоАмортизация = ЭтоАмортизация;
		
	КонецЦикла;
	
	Движения.СрокиИспользованияГрупповыхОбъектовОС.Записывать = Истина;
	
КонецПроцедуры

Функция ПолучитьТаблицуКодовОС(ТаблицаОС) Экспорт
	
	ДлинаКода = Метаданные.Справочники.ОсновныеСредства.ДлинаКода;
	КолонкаИнвентарногоНомера = ТаблицаОС.Колонки.Найти("ИнвентарныйНомер");
	Если КолонкаИнвентарногоНомера = Неопределено Тогда
		ТаблицаОС.Колонки.Добавить("ИнвентарныйНомер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(ДлинаКода)));
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
		СтрокаТаблицы.ИнвентарныйНомер = СтрокаТаблицы.ОсновноеСредство.Код;	
	КонецЦикла;
	
	Возврат ТаблицаОС
	
КонецФункции