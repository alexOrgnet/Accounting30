#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСписокОбслуживающихОрганизаций() Экспорт
	
	Результат = Новый СписокЗначений;
	
	ОбслуживающиеОрганизации = ПрограммныйИнтерфейсСервиса.ОбслуживающиеОрганизацииАбонента();
	Для каждого Организация Из ОбслуживающиеОрганизации Цикл
		Результат.Добавить(Организация.Код, Организация.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапроситьСчетПоВыбранномуТарифу(КодОО, КодТарифа, КодПериода) Экспорт
	
	ОбслуживающиеОрганизации = ПрограммныйИнтерфейсСервиса.ОбслуживающиеОрганизацииАбонента();
	Если ОбслуживающиеОрганизации.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не установлена обслуживающая организация'");
	КонецЕсли;
	ТекущаяОО = ОбслуживающиеОрганизации.НайтиСтроки(Новый Структура("Код", КодОО))[0];
	ИспользоватьТарифыОО = ТекущаяОО.РазрешеноПереопределениеТарифов;
	
	Абонент = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения();
	КодАбонента = Абонент.Код;
	
	СоставПокупки = НовыйСоставПокупки();
	СтрокаПокупки = СоставПокупки.Добавить();
	СтрокаПокупки.КодТарифа = КодТарифа;
	Если ИспользоватьТарифыОО Тогда
		ТарифОО = ПрограммныйИнтерфейсСервиса.ТарифОбслуживающейОрганизации(КодОО, КодТарифа);
		Если Не ЗначениеЗаполнено(ТарифОО) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден тариф обслуживающей организации ''%1'' по коду ''%2''.'"), КодОО,
				КодТарифа);
		КонецЕсли;
		Тариф = ПрограммныйИнтерфейсСервиса.ТарифСервиса(ТарифОО.КодТарифаПровайдера);
		СтрокаПериода = ТарифОО.ПериодыДействия.Найти(КодПериода, "Код");
		СтрокаПокупки.КодТарифаПровайдера = ТарифОО.КодТарифаПровайдера;
		СтрокаПокупки.КодТарифаОбслуживающейОрганизации = ТарифОО.Код;
	Иначе
		Тариф = ПрограммныйИнтерфейсСервиса.ТарифСервиса(КодТарифа);
		Если Не ЗначениеЗаполнено(Тариф) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден тариф провайдера по коду ''%1''.'"), КодТарифа);
		КонецЕсли;
		СтрокаПериода = Тариф.ПериодыДействия.Найти(КодПериода, "Код");
		СтрокаПокупки.КодТарифаПровайдера = КодТарифа;
	КонецЕсли;
	СтрокаПокупки.Расширение = Тариф.РасширениеТарифа;
	Если СтрокаПериода <> Неопределено Тогда
		СтрокаПокупки.Сумма = СтрокаПериода.Сумма;
	КонецЕсли;
	
	Возврат ЗапроситьСчетНаПодписку(КодОО, КодАбонента, КодПериода, Ложь, СоставПокупки);
	
КонецФункции

Функция СохранитьВыбранныйТарифНаВремяСеанса(КодТарифа) Экспорт
	
	ПараметрыСеанса.ВыбранныйТариф = КодТарифа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапроситьСчетНаПодписку(КодОО, КодАбонента, КодПериода, Продление, СоставПокупки)
	
	Данные = НовыйСчет(КодОО, КодАбонента);
	Данные.Вставить("Продление", Продление);
	
	Тарифы = ПрограммныйИнтерфейсСервиса.НовыйТарифыСчетаНаОплату();
	Для Каждого Строка Из СоставПокупки Цикл
		НоваяСтрока = Тарифы.Добавить();
		НоваяСтрока.КодТарифаПровайдера = Строка.КодТарифаПровайдера;
		Если ЗначениеЗаполнено(Строка.КодТарифаОбслуживающейОрганизации) Тогда
			НоваяСтрока.КодТарифаОбслуживающейОрганизации = Строка.КодТарифаОбслуживающейОрганизации;
		КонецЕсли;
		НоваяСтрока.КодПериодаДействия = КодПериода;
		Если ЗначениеЗаполнено(Строка.НомерПодписки) Тогда
			НоваяСтрока.НомерОснования = Строка.НомерПодписки;
		КонецЕсли;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.Сумма = Строка.Сумма;
	КонецЦикла;
	Тарифы.Свернуть("КодПериодаДействия, КодТарифаПровайдера, КодТарифаОбслуживающейОрганизации, НомерОснования", 
		"Количество, Сумма");
	Данные.Вставить("Тарифы", Тарифы);
	Данные.Вставить("Сумма", Тарифы.Итог("Сумма"));
	
	Возврат ОтправитьИПодписаться(Данные);
	
КонецФункции

Функция ОтправитьИПодписаться(Данные)
	
	ИдентификаторОбъекта = Данные.ИдентификаторСчета;
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка", Ложь);
	РезультатОперации.Вставить("ОписаниеОшибки", "");
	РезультатОперации.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
	РезультатОперации.Вставить("ИдентификаторПравила", ИдентификаторСчетаНаОплату());
	
	МодульТарификацияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТарификацияСлужебный");
	Если МодульТарификацияСлужебный = Неопределено Тогда
		РезультатОперации.Ошибка = Истина;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Не обнаружен общий модуль ""ТарификацияСлужебный""'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Вставить("ИмяФормыОбработкиОтвета", МодульТарификацияСлужебный.ИмяФормыОбработкиОтвета());
	
	СвойстваОтвета = Неопределено;
	Результат = ПрограммныйИнтерфейсСервиса.СоздатьСчетНаОплату(Данные, Ложь, СвойстваОтвета);
	Если СвойстваОтвета.КодСостояния = 200 И СвойстваОтвета.КодОтвета = 10200 Тогда
		УниверсальнаяИнтеграция.ПодписатьсяНаОповещениеОбИзмененииОбъекта(
			ИдентификаторСчетаНаОплату(), Строка(ИдентификаторОбъекта));
	Иначе
		РезультатОперации.Ошибка = Истина;
		РезультатОперации.ОписаниеОшибки = СвойстваОтвета.Сообщение;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция НовыйСчет(КодОО, КодАбонента)
	
	ИдентификаторОбъекта = Новый УникальныйИдентификатор;
	Данные = Новый Структура;
	Данные.Вставить("ИдентификаторСчета", ИдентификаторОбъекта);
	Данные.Вставить("КодПродавца", КодОО);
	Данные.Вставить("КодПокупателя", КодАбонента);
	Возврат Данные;
	
КонецФункции

Функция НовыйСоставПокупки()
	
	НовыйСоставПокупки = Новый ТаблицаЗначений;
	НовыйСоставПокупки.Колонки.Добавить("КодТарифа", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	НовыйСоставПокупки.Колонки.Добавить("КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	НовыйСоставПокупки.Колонки.Добавить("КодТарифаОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	НовыйСоставПокупки.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,0, ДопустимыйЗнак.Неотрицательный));
	НовыйСоставПокупки.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2));
	НовыйСоставПокупки.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Булево"));
	НовыйСоставПокупки.Колонки.Добавить("НомерПодписки", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	Возврат НовыйСоставПокупки;
	
КонецФункции

Функция ИдентификаторСчетаНаОплату()

	Возврат "bill";

КонецФункции

#КонецОбласти