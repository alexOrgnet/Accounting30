
////////////////////////////////////////////////////////////////////////////////
// Универсальные методы для справочника Организации
//
// Клиент-серверные методы форм справочника Организации
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ВладелецРегистрации(Форма) Экспорт
	
	Объект            = Форма.Объект;
	ОрганизацияСсылка = Форма.ОрганизацияСсылка;
	Возврат ?(Объект.ОбособленноеПодразделение, Объект.ГоловнаяОрганизация, ОрганизацияСсылка);
	
КонецФункции

// Возвращает представление выбранной системы налогообложения.
//
// Параметры:
//   ИсточникУчетнойПолитики - Структура, СправочникСсылка.Организации - описание структуры в НастройкиУчета.ОписаниеСтруктурыУчетнойПолитики()
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеСистемыНалогообложения(Знач ИсточникУчетнойПолитики) Экспорт
	
	Если ТипЗнч(ИсточникУчетнойПолитики) = Тип("СправочникСсылка.Организации") Тогда
		// Преобразуем ссылку на организацию в структуру параметров учетной политики.
		ИсточникУчетнойПолитики = ОрганизацииФормыВызовСервера.ПараметрыСистемыНалогообложенияПоОрганизации(ИсточникУчетнойПолитики);
	КонецЕсли;
	
	СистемаНалогообложенияОписание = "";
	Если Не ИсточникУчетнойПолитики.ПрименяетсяУСН И Не ИсточникУчетнойПолитики.ПлательщикНДС Тогда
		
		Если ИсточникУчетнойПолитики.ПрименяетсяУСНПатент Тогда
			
			СистемаНалогообложенияОписание = НСтр("ru = 'Патентная'");
			
			Если ИсточникУчетнойПолитики.ПлательщикЕНВД Тогда
				СистемаНалогообложенияОписание = СистемаНалогообложенияОписание + ", " + НСтр("ru = 'ЕНВД (до конца 2020 года)'");
			КонецЕсли;
			
		ИначеЕсли ИсточникУчетнойПолитики.ПлательщикЕНВД Тогда
			
			СистемаНалогообложенияОписание = НСтр("ru = 'ЕНВД (до конца 2020 года)'");
			
		ИначеЕсли ИсточникУчетнойПолитики.ПрименяетсяНалогНаПрофессиональныйДоход Тогда
			
			СистемаНалогообложенияОписание = НСтр("ru = 'Налог на профессиональный доход (""самозанятые"")'");
			
		ИначеЕсли ИсточникУчетнойПолитики.ПрименяетсяАУСН Тогда
			
			ОбъектНалогообложенияДоходыМинусРасходы = ИсточникУчетнойПолитики.ОбъектНалогообложенияУСН =
				ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы");
			ПредставлениеОбъектаНалогообложения = ?(ОбъектНалогообложенияДоходыМинусРасходы,
				НСтр("ru = 'доходы минус расходы'"), НСтр("ru = 'доходы'"));
			СистемаНалогообложенияОписание = СтрШаблон(НСтр("ru = 'АУСН (%1)'"), ПредставлениеОбъектаНалогообложения);
			
			Если ИсточникУчетнойПолитики.ПлательщикТорговогоСбора Тогда 
				СистемаНалогообложенияОписание = СтрШаблон(НСтр("ru = '%1, Торговый сбор'"), 
					СистемаНалогообложенияОписание);
			КонецЕсли;	 
			
		КонецЕсли;
		
	Иначе
	
		Если ИсточникУчетнойПолитики.ПрименяетсяУСН Тогда
			ПредставлениеОбъектаНалогообложения = ?(ИсточникУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы,
				НСтр("ru = 'доходы минус расходы'"), НСтр("ru = 'доходы'"));
			СистемаНалогообложенияОписание = НСтр("ru = 'УСН'") + " (" + ПредставлениеОбъектаНалогообложения + ")";
		Иначе
			СистемаНалогообложенияОписание = НСтр("ru = 'Общая'");
		КонецЕсли;
		Если ИсточникУчетнойПолитики.ПрименяетсяУСНПатент Тогда
			СистемаНалогообложенияОписание = СистемаНалогообложенияОписание + ", " + НСтр("ru = 'Патент'");
		КонецЕсли;
		Если ИсточникУчетнойПолитики.ПлательщикЕНВД Тогда
			СистемаНалогообложенияОписание = СистемаНалогообложенияОписание + ", " + НСтр("ru = 'ЕНВД (до конца 2020 года)'");
		КонецЕсли;
		Если ИсточникУчетнойПолитики.ПлательщикТорговогоСбора Тогда
			СистемаНалогообложенияОписание = СистемаНалогообложенияОписание + ", " + НСтр("ru = 'Торговый сбор'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемаНалогообложенияОписание;
	
КонецФункции

Функция ТекстВыбораЗначенияПоГиперссылке() Экспорт
	
	Возврат НСтр("ru = 'Выбрать'");
	
КонецФункции

Функция ТелефонСоответствуетТребованиям(Знач Телефон) Экспорт
	
	Телефон = ТолькоЦифры(СокрЛП(Телефон));
	
	КодСтраны = Лев(Телефон, 1);
	КодРегиона = Сред(Телефон, 2, 3);
	Номер = Сред(Телефон, 5);
	
	Если ПустаяСтрока(КодСтраны) Или ПустаяСтрока(КодРегиона) Или ПустаяСтрока(Номер) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если СтрДлина(Телефон) > 15 Тогда
		// Номер телефона слишком длинный
		Возврат Ложь;
	КонецЕсли;
	
	Если КодСтраны = "7" Тогда
		Если СтрДлина(Номер) > 7 Тогда
			// В России номер телефона не может быть больше 7 цифр
			Возврат Ложь;
		КонецЕсли;
		Если КодРегионаЗарезервирован(КодРегиона) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НеГеографическийКодРоссии(КодРегиона) И СтрДлина(КодРегиона) <> 3 Тогда
			// В России номера мобильных телефонов должны содержать 3 цифры
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИндивидуальныйПредпринимательЗарегистрированВФСС(Реквизиты) Экспорт
	
	Если Реквизиты = Неопределено Или Реквизиты.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьРегистрационныйНомерФСС = ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС)
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС);
	
	Возврат ЕстьРегистрационныйНомерФСС;
	
КонецФункции

// Заполняет актуальные наименования организации после завершения редактирования истории в отдельной форме.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой редактируется организация.
//	Объект - СправочникОбъект.Организации, ДанныеФормыСтруктура - Организация, наименования которой изменяются.
//	НаборЗаписей - ТаблицаЗначений, ДанныеФормыКоллекция - История наименований организации.
//
Процедура УстановитьНаименованиеПослеРедактированияИстории(Форма, Объект, НаборЗаписей) Экспорт
	
	Форма.Модифицированность = Истина;

	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияНаименований.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияНаименований.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	АктуальнаяЗапись = НаборЗаписей[НаборЗаписей.Количество()-1];
	Объект.НаименованиеСокращенное = АктуальнаяЗапись.НаименованиеСокращенное;
	Объект.НаименованиеПолное      = АктуальнаяЗапись.НаименованиеПолное;
	Объект.ФамилияИП               = АктуальнаяЗапись.ФамилияИП;
	Объект.ИмяИП                   = АктуальнаяЗапись.ИмяИП;
	Объект.ОтчествоИП              = АктуальнаяЗапись.ОтчествоИП;
	
	Если ПустаяСтрока(Объект.Наименование)
		Или ОбщегоНазначенияБПКлиентСервер.НаименованиеСоответствуетСокращенномуНаименованию(
				Форма.НаименованиеСокращенноеДоИзменения, Объект.Наименование) Тогда
		Объект.Наименование = ОбщегоНазначенияБПКлиентСервер.НаименованиеПоСокращенномуНаименованию(Объект.НаименованиеСокращенное);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет актуальный вид организации после завершения редактирования истории в отдельной форме.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой редактируется организация.
//	Объект - СправочникОбъект.Организации, ДанныеФормыСтруктура - Организация, наименования которой изменяются.
//	НаборЗаписей - ТаблицаЗначений, ДанныеФормыКоллекция - История наименований организации.
//
Процедура УстановитьСтатусФизЛицаПослеРедактированияИстории(Форма, Объект, НаборЗаписей) Экспорт
	
	Форма.Модифицированность = Истина;

	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияСтатусовФизическогоЛица.Очистить();
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияСтатусовФизическогоЛица.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	АктуальнаяЗапись = НаборЗаписей[НаборЗаписей.Количество() - 1];
	Объект.СтатусФизическогоЛица = АктуальнаяЗапись.СтатусФизическогоЛица;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ГеографическийКодРоссии(КодРегиона) Экспорт
	
	Возврат СтрНачинаетсяС(КодРегиона, "3") Или СтрНачинаетсяС(КодРегиона, "4") Или СтрНачинаетсяС(КодРегиона, "8");
	
КонецФункции

Функция НеГеографическийКодРоссии(КодРегиона) Экспорт
	
	Возврат СтрНачинаетсяС(КодРегиона, "9");
	
КонецФункции

Функция КодРегионаЗарезервирован(КодРегиона) Экспорт
	
	Возврат СтрНачинаетсяС(КодРегиона, "0") Или СтрНачинаетсяС(КодРегиона, "1") Или СтрНачинаетсяС(КодРегиона, "2") Или СтрНачинаетсяС(КодРегиона, "5");
	
КонецФункции

Функция ТолькоЦифры(Строка) Экспорт
	
	ОбработаннаяСтрока = "";
	
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ >= "0" И Символ <= "9" Тогда
			ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработаннаяСтрока;
	
КонецФункции

Процедура ОпределитьПолПоОтчеству(Пол, Знач Отчество) Экспорт
	
	Если Прав(Отчество, 2) = "ич" Тогда
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли Прав(Отчество, 2) = "на" Тогда
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;
	
КонецПроцедуры

Процедура ТелефонПриИзменении(Форма, Элемент) Экспорт
	
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Элемент.Имя));
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки = Строки[0];
	
	ВведенноеЗначение = Форма[Элемент.Имя];
	Если ПустаяСтрока(ВведенноеЗначение) Тогда
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.Значение = Неопределено;
	Иначе
		Телефон = ТелефонДляЗаявления(ВведенноеЗначение);
		Форма[Элемент.Имя] = Телефон;
		ДанныеСтроки.Представление =Телефон;
		ДанныеСтроки.Значение = ОрганизацииФормыВызовСервера.КонтактнаяИнформацияПоПредставлению(Телефон, ДанныеСтроки.Вид);
	КонецЕсли;
	
КонецПроцедуры

Функция ТелефонДляЗаявления(Знач Телефон) Экспорт
	
	Телефон = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(Телефон));
	
	КодСтраны = Лев(Телефон, 1);
	КодРегиона = Сред(Телефон, 2, 3);
	Номер = Сред(Телефон, 5);
	
	Если КодСтраны <> "7" И КодСтраны <> "8" Тогда
		Возврат Телефон;
	КонецЕсли;
	
	Если ОрганизацииФормыКлиентСервер.ГеографическийКодРоссии(КодРегиона) Тогда
		ШаблонТелефона = "8(%1)%2";
	ИначеЕсли ОрганизацииФормыКлиентСервер.НеГеографическийКодРоссии(КодРегиона) Тогда
		ШаблонТелефона = "+7(%1)%2";
	Иначе
		Возврат Телефон;
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонТелефона, КодРегиона, Номер);
	
КонецФункции

// Функция определяет, заполнено ли представление адреса в указанном реквизите формы
//
// Параметры:
//     Форма                - ФормаКлиентскогоПриложения - Форма владельца контактной информации (организации или подразделения).
//     ИмяРеквизитаАдреса   - Строка - Имя реквизита формы, содержащего представление адреса.
//
Функция АдресЗаполен(Форма, ИмяРеквизитаАдреса) Экспорт
	
	Возврат НЕ ПустаяСтрока(Форма[ИмяРеквизитаАдреса])
		И Форма[ИмяРеквизитаАдреса] <> УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	
КонецФункции	

Функция НастроитьПояснениеКПП(Форма, ЭтоФизЛицо = Ложь, ОбособленноеПодразделение = Истина, КрупнейшийНалогоплательщик = Ложь) Экспорт 
	
	Элементы = Форма.Элементы;
	
	ОписаниеРеквизитовРегистрации = ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	ЕстьКнопкаСнятьСУчета = (Элементы.Найти(ПрефиксИмени + "СнятьСУчета") <> Неопределено);
	ПоказыватьКомандуСнятьСУчета = Истина;
	
	Если ЕстьКнопкаСнятьСУчета Тогда
		ПоказыватьКнопкуСнятьСУчета = (НЕ ЭтоФизЛицо И ОбособленноеПодразделение) Или КрупнейшийНалогоплательщик;
	КонецЕсли;	
	
	Если Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Ссылка.Пустая() Тогда
		
		// Некорректный формат КПП - выведем пояснение
		Элементы[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"].Видимость = ЗначениеЗаполнено(Форма[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"]);
		Элементы[ПрефиксИмени + "НадписьПоясненияСнятоСУчета"].Видимость 		= Ложь;
		Если ЕстьКнопкаСнятьСУчета Тогда
			Элементы[ПрефиксИмени + "СнятьСУчета"].Видимость = Ложь;
		КонецЕсли;	
				
	ИначеЕсли ЗначениеЗаполнено(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].ДатаСнятияСУчета) Тогда
		
		// Выбранный КПП закрыт
		Если КрупнейшийНалогоплательщик Тогда
			ТекстСообщения = НСтр("ru = ' Снят с учета %1 '");
		Иначе
			ТекстСообщения = НСтр("ru = ' Подразделение снято с учета %1 '");
		КонецЕсли;
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].ДатаСнятияСУчета, "ДЛФ=D"));
		
		МассивСтрок = Новый Массив;
		// Пояснение выводим форматированной строкой, чтобы указать меньший размер шрифта, чем в поле ввода.
		// В самом поле ввода шрифт указан больше (см. форму), чтобы фон выделения поля окружал текст пояснения с запасом.
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСообщения, Новый Шрифт(, 10)));
		Форма[ПрефиксИмени + "НадписьПоясненияСнятоСУчета"] = Новый ФорматированнаяСтрока(МассивСтрок);
						
		Элементы[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"].Видимость = Ложь;
		Элементы[ПрефиксИмени + "НадписьПоясненияСнятоСУчета"].Видимость 		= Истина;
		Если ЕстьКнопкаСнятьСУчета Тогда
			Элементы[ПрефиксИмени + "СнятьСУчета"].Видимость = Ложь;
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(Форма[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"]) Тогда
		
		// КПП не закрыт, но, возможно, есть ошибка в формате - выводим пояснение
		Элементы[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"].Видимость = Истина;
		Элементы[ПрефиксИмени + "НадписьПоясненияСнятоСУчета"].Видимость 		= Ложь;
		Если ЕстьКнопкаСнятьСУчета Тогда
			Элементы[ПрефиксИмени + "СнятьСУчета"].Видимость = ПоказыватьКнопкуСнятьСУчета;
		КонецЕсли;	
		
	Иначе
		
		// КПП соответствует требованиям и не закрыт - скрываем все пояснения 
		Элементы[ПрефиксИмени + "НадписьПоясненияНекорректногоКПП"].Видимость = Ложь;
		Элементы[ПрефиксИмени + "НадписьПоясненияСнятоСУчета"].Видимость 		= Ложь;
		Если ЕстьКнопкаСнятьСУчета Тогда
			Элементы[ПрефиксИмени + "СнятьСУчета"].Видимость = ПоказыватьКнопкуСнятьСУчета;
		КонецЕсли;	
				
	КонецЕсли;	
	
КонецФункции

Процедура НастроитьСвойстваЭлементаДатаРегистрации(Элемент, ЭтоФизЛицо) Экспорт

	Если ЭтоФизЛицо Тогда
		Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Дата государственной регистрации, указывается в ""Свидетельстве о государственной регистрации индивидуального предпринимателя"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entregdate"));

	Иначе
		Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Дата государственной регистрации, указывается в ""Свидетельстве о государственной регистрации юридического лица"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgregdate"));

	КонецЕсли;

КонецПроцедуры

Процедура НастроитьСвойстваЭлементаЮрАдресОрганизации(Элемент, ЭтоФизЛицо) Экспорт

	Если ЭтоФизЛицо Тогда

		Элемент.Заголовок = ЗаголовокАдресаФизЛица();
		Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Адрес индивидуального предпринимателя по месту постоянной регистрации.'"));
	
	Иначе

		Элемент.Заголовок = НСтр("ru = 'Юридический адрес'");
		Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Адрес, указанный в учредительных документах (Уставе) и в Выписке из ЕГРЮЛ. По этому адресу организация поставлена на налоговый учет.'"));
	
	КонецЕсли;

КонецПроцедуры

Функция ЗаголовокАдресаФизЛица() Экспорт
	
	Возврат НСтр("ru = 'Адрес места жительства'");
	
КонецФункции

Функция ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик) Экспорт
	
	ОписаниеРеквизитовРегистрации = Новый Структура;
	ОписаниеРеквизитовРегистрации.Вставить("ПрефиксИмени",
		?(КрупнейшийНалогоплательщик, "КрупнейшийНалогоплательщик",   ""));
	ОписаниеРеквизитовРегистрации.Вставить("РеквизитКодНО",
		?(КрупнейшийНалогоплательщик, "КодНалоговогоОрганаПолучателя", "КодНалоговогоОргана"));
	
	Возврат ОписаниеРеквизитовРегистрации;
	
КонецФункции

#КонецОбласти

#Область ОКВЭД2

Функция ПрочитатьОКВЭД2(КодОКВЭД2, СообщениеОбОшибке = "") Экспорт
	
	СообщениеОбОшибке = "";
	НаименованиеОКВЭД2 = Неопределено;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) тогда
		Возврат НаименованиеОКВЭД2;
	КонецЕсли;
	
	ОКВЭДКорректен = ОКВЭДСоответствуетТребованиям(СообщениеОбОшибке, КодОКВЭД2);
	
	Если ОКВЭДКорректен Тогда
		
		НаименованиеОКВЭД2 = ОрганизацииФормыВызовСервера.НаименованиеОКВЭД2(КодОКВЭД2);
		Если НаименованиеОКВЭД2 = Неопределено Тогда
			СообщениеОбОшибке  = Нстр("ru = 'Код ОКВЭД не найден в классификаторе. Возможно указан неправильный код'");
			НаименованиеОКВЭД2 = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаименованиеОКВЭД2;
	
КонецФункции

Функция ОКВЭДСоответствуетТребованиям(СообщениеОбОшибке, КодОКВЭД) Экспорт
	
	СообщениеОбОшибке = "";
	
	ОКВЭДКорректен = РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(КодОКВЭД);
	
	Если Не ОКВЭДКорректен Тогда
		ПримерОКВЭД = ПримерПравильногоОКВЭД(КодОКВЭД);
		Если ПустаяСтрока(ПримерОКВЭД) Тогда
			СообщениеОбОшибке = "В коде ОКВЭД разрешены только цифры и символ "".""";
		Иначе
			ШаблонОшибки = Нстр("ru = 'Код ОКВЭД не соответствует формату. Пример правильного кода: %1'");
			СообщениеОбОшибке = СтрШаблон(ШаблонОшибки, ПримерОКВЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОКВЭДКорректен;
	
КонецФункции

Функция ПримерПравильногоОКВЭД(ИсходнаяСтрока) Экспорт
	
	Результат = "";
	
	Длина = СтрДлина(ИсходнаяСтрока);
	СимволыОКВЭД = Новый Массив();
	Для НомерСимвола = 1 По Длина Цикл
		
		Если СимволыОКВЭД.Количество() >= ДлинаОКВЭД() Тогда
			Прервать;
		КонецЕсли;
		
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		
		Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Символ = Сред(ИсходнаяСтрока, НомерСимвола, 1);
			СимволыОКВЭД.Добавить(Символ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СимволыОКВЭД.Количество() = 1 Тогда
		// ОКВЭД минимум содержит 2 знака.
		СимволыОКВЭД.Добавить("0")
	КонецЕсли;
	
	Для НомерСимвола = 1 По СимволыОКВЭД.Количество() Цикл
		Если НомерСимвола = СимволыОКВЭД.Количество() Или НомерСимвола % 2 <> 0 Тогда
			Результат = Результат + СимволыОКВЭД[НомерСимвола - 1];
		Иначе
			Результат = Результат + СимволыОКВЭД[НомерСимвола - 1] + ".";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДлинаОКВЭД()
	
	Возврат 6;
	
КонецФункции

#КонецОбласти
