
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.82";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудника.ПеренестиДанныеВНовыеРегистры";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.28.27";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудника.ОбновитьВыгруженныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.28.34";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудника.ЗарегистрироватьОграничениеДоступаКРабочимКонтактам";
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноИзменениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания 

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуютсяОбсужденияКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	ИнтеграцияКабинетСотрудникаВнутренний.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.Имя);
	
	ИнтеграцияКабинетСотрудникаВнутренний.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.ИмяМетода);
	
	ИнтеграцияКабинетСотрудникаВнутренний.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

#КонецОбласти

// Возвращает таблицу с данными публикуемых физических лиц.
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений
// 			* ФизическоеЛицо
// 			* Организация
//
Функция ДанныеДляФормированияСогласийНаПрисоединениеККЭДО() Экспорт
	
	ФизическиеЛицаОрганизация = Новый ТаблицаЗначений;
	ФизическиеЛицаОрганизация.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛицаОрганизация.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	НЕ ПубликуемыеОбъекты.УсловноВыгружается
	|	И ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники";
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ФизическиеЛицаОрганизация;
	КонецЕсли;
	
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	Если ИспользоватьКадровыйУчет Тогда
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ВидСобытия";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ДатаПриема,ДатаУвольнения";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		ТаблицаДанных.Колонки.Добавить("ВидСобытия");
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) И СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) И СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаОрганизация.Свернуть("ФизическоеЛицо,Организация");
	
	Возврат ФизическиеЛицаОрганизация;
	
КонецФункции

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
			
			ИмяКоманды = ИмяКомандыПодписатьФормыПечатьДокументов();
			
			КомандаФормы = КомандаПодписатьФормыПечатьДокументов(Форма);
			Если КомандаФормы = Неопределено Тогда
				
				СвойстваКоманды = СвойстваКомандыПередачиВКабинетСотрудника();
				
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = СвойстваКоманды.Заголовок;
				КомандаФормы.Подсказка = СвойстваКоманды.Подсказка;
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = СвойстваКоманды.Картинка;
				
				КнопкаФормы = КадровыйЭДО.РазместитьКомандуНаФормеПечатьДокументов(Форма, КомандаФормы);
				Если КнопкаФормы <> Неопределено Тогда
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КомандаПодписатьФормыПечатьДокументов(Форма) Экспорт
	
	Возврат Форма.Команды.Найти(ИмяКомандыПодписатьФормыПечатьДокументов());
	
КонецФункции

Функция СвойстваКомандыПередачиВКабинетСотрудника() Экспорт
	
	Возврат Новый Структура("Заголовок,Подсказка,Картинка",
		НСтр("ru = 'Передать в ""1С:Кабинет сотрудника""'"),
		НСтр("ru = 'Подписать и передать в ""1С:Кабинет сотрудника""'"),
		БиблиотекаКартинок.СервисКабинетСотрудника);
		
КонецФункции

Функция ФайлРасчетногоЛисткаОпубликован(ДокументКЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументКЭДО", ДокументКЭДО);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО = &ДокументКЭДО";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаСостоянияСервиса

// Процедура регламентного задания ПроверкаСостоянияСервисаКабинетСотрудника
Процедура ПроверкаСостоянияСервиса() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	
	ИСДоступна = ИнтеграцияКабинетСотрудникаОбмен.ИнформационнаяСистемаДоступна();
	Если ИСДоступна = Неопределено Тогда
		// Не удалось получить информацию о состоянии ИС.
		Возврат;
	КонецЕсли;
	
	СервисЗаблокирован = Не ИСДоступна;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);

КонецПроцедуры

#КонецОбласти

#Область Обмен

// Обработчик регламентного задания ОбменССервисомКабинетСотрудника
//
Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	Если ИнтеграцияУправлениеПерсоналом.ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияОбмен()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриложениеЗаблокировано() Тогда
		// Приложение заблокировано.
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ВыполнятьРегламентноеЗадание Тогда
		// Реализации паузы первого запуска регламентного задания.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.ВключитьВыполнениеРегламентногоЗадания();
		Возврат;
	КонецЕсли;
	
	Если ДоступнаВерсияDTO_2_0() Тогда
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		БылиОшибки = ИнтеграцияУправлениеПерсоналомОбмен.ВыполнитьОбмен(Приложение, Ложь);
	Иначе
		БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Ложь);
	КонецЕсли;
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик фонового задания обмена с приложением.
Процедура ВыполнитьОбменФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал обмен.
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДоступнаВерсияDTO_2_0() Тогда
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		БылиОшибки = ИнтеграцияУправлениеПерсоналомОбмен.ВыполнитьОбмен(Приложение, Параметры.ПодготовитьДанныеДляТехПоддержки);
	Иначе
		БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Параметры.ПодготовитьДанныеДляТехПоддержки);
	КонецЕсли;
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Используется при подключении к новому приложению.
// Выполняется получение версий формата или приложения, результат будет записан
// в регистр сведений НастройкиСервисаКабинетСотрудника.
//
Процедура ПолучитьВерсииФорматаПриложения() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	
	ВерсияAPI = "";
	ВерсияDTO = "";
	ВерсияПриложения = "";
	
	Ответ = МенеджерОбмена.ВерсииФорматаОбменаПриложения();
	Если Ответ.Использовать = Истина Тогда
		ВерсииФормата = Ответ.ОбъектВерсииФормата;
		Если ЗначениеЗаполнено(ВерсииФормата.ВерсияDTO) И ЗначениеЗаполнено(ВерсииФормата.ВерсияAPI) Тогда
			ВерсияAPI = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияAPI, ИнтеграцияУправлениеПерсоналом.ВерсииAPI(Приложение));
			ВерсияDTO = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияDTO, ИнтеграцияУправлениеПерсоналом.ВерсииDTO(Приложение));
			Если Не ЗначениеЗаполнено(ВерсияAPI) Или Не ЗначениеЗаполнено(ВерсияDTO) Тогда
				ВерсияAPI = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияAPI, КабинетСотрудникаМенеджерОбмена.ВерсииAPI());
				ВерсияDTO = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияDTO, КабинетСотрудникаМенеджерОбмена.ВерсииФорматаОбмена());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияAPI) И ЗначениеЗаполнено(ВерсияDTO) Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ВерсияAPI = ВерсияAPI;
		Настройки.ВерсияDTO = ВерсияDTO;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
	Иначе
		ИнформацияОПриложении = КабинетСотрудникаМенеджерОбмена.ИнформацияОПриложении();
		Если ИнформацияОПриложении <> Неопределено Тогда
			ВерсияПриложения = ИнформацияОПриложении.ВерсияПриложения;
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(ВерсияПриложения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьКабинетыНепубликуемыхСотрудниковФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	Если ИспользуетсяВерсияDTO("2.0") Тогда
		Ответ = ОтключитьКабинетыНепубликуемыхСотрудников();
	Иначе
		Ответ = КабинетСотрудника.ОтключитьКабинетыНепубликуемыхСотрудников();
	КонецЕсли;
	
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет проверку наличия активных фоновых заданий:
// - регламентное задание ОбменССервисомКабинетСотрудника
// - обмен, запущенный пользователем интерактивно
//
Функция ЕстьАктивныеФоновыеЗаданияОбмен() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналом.ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияОбмен())
		Или ИнтеграцияУправлениеПерсоналом.ЕстьАктивныеФоновыеЗадания(КлючРегламентногоЗаданияОбмен());
	
КонецФункции

Функция КлючФоновогоЗаданияОбмен() Экспорт

	Возврат "ФоновоеЗаданиеОбменКабинетСотрудника";

КонецФункции

Функция КлючРегламентногоЗаданияОбмен()

	Возврат Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Ключ;

КонецФункции 

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

// Публикация расчетных листков из формы публикации.
Процедура ОпубликоватьРасчетныеЛистыВФоне(Параметры, АдресХранилища) Экспорт
	
	// Параметры ПодготовитьДанныеДляТехПоддержки, ДатаНачала, ДатаОкончания
	// используются для получения списка событий журнала регистрации при подготовке
	// данных для техподдержки.
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания,НеОбработаны,КоличествоВыгружено", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	ФизическиеЛицаОрганизации.Вставить(Параметры.Организация, Параметры.СписокФизическихЛиц);
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(Параметры.МесяцРасчетныхЛистов, ФизическиеЛицаОрганизации);
	
	ПараметрыПубликации = ПараметрыПубликацииРасчетныхЛистов();
	ПараметрыПубликации.ВестиПротокол 								= Параметры.ПодготовитьДанныеДляТехПоддержки;
	ПараметрыПубликации.ПовторнаяПубликация 						= Параметры.ПовторнаяПубликация;
	ПараметрыПубликации.ПерваяПоловинаМесяца 						= Параметры.ПерваяПоловинаМесяца;
	ПараметрыПубликации.ВариантОтчета 								= Параметры.ВариантОтчета;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом 	= Параметры.ФормироватьРасчетныеЛистыОтдельнымЗапросом;
	
	УстановитьПривилегированныйРежим(Истина); 
	Если ДоступнаВерсияDTO_2_0() Тогда
		Ответ = ИнтеграцияКабинетСотрудникаОбмен.РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыПубликации);
	Иначе
		Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыПубликации);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ДатаОкончания 		= ТекущаяДатаСеанса();
	Результат.БылиОшибки 			= Ответ.БылиОшибки;
	Результат.НеОбработаны 			= Ответ.НеОбработаны;
	Результат.КоличествоВыгружено 	= Ответ.КоличествоВыгружено;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков из формы интеграции с сервисом.
Процедура ОпубликоватьРасчетныеЛистыЗаМесяцВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И ФизическиеЛица.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
			
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Организация КАК Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическиеЛицаОрганизации.Вставить(Организация, СписокФизическихЛиц);
		
	КонецЦикла;
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(ПараметрыПроцедуры.Месяц, ФизическиеЛицаОрганизации);
	
	Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());
	Результат.БылиОшибки = Ответ.БылиОшибки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков после подключения к сервису.
Процедура ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков) Экспорт

	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгружаемыеОбъекты.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.Ссылка
	|				И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|				И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|		ПО ВыгружаемыеОбъекты.Ссылка = Сотрудники.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПубликации = Новый Соответствие;
	Для каждого МесяцПубликации Из ПериодыРасчетныхЛистков Цикл
		ФизическиеЛицаОрганизации = ФизическиеЛицаОрганизаций(МесяцПубликации, Запрос.МенеджерВременныхТаблиц);
		ДанныеДляПубликации.Вставить(НачалоМесяца(МесяцПубликации), ФизическиеЛицаОрганизации);
	КонецЦикла;
	
	КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());

КонецПроцедуры

Функция ФизическиеЛицаОрганизаций(Месяц, МенеджерВременныхТаблиц)
	
	ФизическиеЛицаПоОрганизациям = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК ПубликуемыеСотрудники
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ПубликуемыеСотрудники.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиОрганизации.Организация = ПубликуемыеОбъекты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			ФизическиеЛицаПоОрганизациям.Вставить(Выборка.Организация, СписокФизическихЛиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Запрос.Выполнить();
	
	Возврат ФизическиеЛицаПоОрганизациям;
	
КонецФункции

Функция ПараметрыПубликацииРасчетныхЛистовПоУмолчанию()
	
	ПараметрыПубликации = ПараметрыПубликацииРасчетныхЛистов();
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ПараметрыПубликации.ВариантОтчета = Настройки.ВариантОтчетаРасчетныйЛисток;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом = Настройки.ФормироватьРасчетныеЛистыОтдельнымЗапросом;
	Возврат ПараметрыПубликации;
	
КонецФункции

Функция ПараметрыПубликацииРасчетныхЛистов()

	ПараметрыПубликации = Новый Структура("
	|Организация,
	|Месяц,
	|ПерваяПоловинаМесяца,
	|СписокФизическихЛиц,
	|ПовторнаяПубликация,
	|ВестиПротокол,
	|ВариантОтчета,
	|ФормироватьРасчетныеЛистыОтдельнымЗапросом");
	
	ПараметрыПубликации.ПовторнаяПубликация 						= Ложь;
	ПараметрыПубликации.ВестиПротокол 								= Ложь;
	ПараметрыПубликации.ПерваяПоловинаМесяца 						= Ложь;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом 	= Ложь;
	
	Возврат ПараметрыПубликации;

КонецФункции

#КонецОбласти

#Область ПравилаВыгрузки

Процедура ЗаписатьОбъектыПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БудущиеСобытияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ИнтеграцияКабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиПриСохраненииПравилВыгрузки(Блокировка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(ОбъектыДляРегистрации.НовыеПравила);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ВыгружаемыеОбъекты Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ИзмененияДляОбмена Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(ОбъектыДляРегистрации.БудущиеСобытия) Тогда
			НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Приложение.Установить(Приложение);
			Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.БудущиеСобытия Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ИнтеграцияКабинетСотрудникаВнутренний.ЗаписатьОбъектыДляОбменаПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации);
		Если ЗначениеЗаполнено(ОбъектыДляРегистрации.ФизическиеЛицаОрганизации) Тогда
			КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО(ОбъектыДляРегистрации.ФизическиеЛицаОрганизации);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка записи правил.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		// Исключение обрабатывает вызывающий метод.
		ВызватьИсключение
	КонецПопытки;
	
	ИнтеграцияУправлениеПерсоналом.ПроверитьЗаполнениеОбъектов(Приложение);

КонецПроцедуры

Функция ОбъектВыгружается(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой(); 
	
КонецФункции

Процедура ПроверитьОбновитьИсключенияИзПравил() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.ЭтоОтветственный";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьОтветственного = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФизическоеЛицо <> Настройки.Ответственный Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Выборка.Публикуется;
			Запись.ЭтоОтветственный = Ложь;
			Запись.Записать();
		ИначеЕсли Не Выборка.Публикуется Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Истина;
			Запись.ЭтоОтветственный = Истина;
			Запись.Записать();
		Иначе
			ОбновитьОтветственного = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновитьОтветственного И ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ФизическоеЛицо 	= Настройки.Ответственный;
		Запись.Публикуется 		= Истина;
		Запись.ЭтоОтветственный = Истина;
		Запись.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Версионирование

Процедура ЗаполнитьВерсииDTO(Версии) Экспорт

	Версии.Добавить("2.0");
	Версии.Добавить("2.1");
	Версии.Добавить("2.2");

КонецПроцедуры

Процедура ЗаполнитьВерсииAPI(Версии) Экспорт

	Версии.Добавить("2.0");
	Версии.Добавить("2.1");

КонецПроцедуры

Процедура УстановитьНовуюВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO) Экспорт

	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюDTO(НоваяВерсияDTO);
	ВыполнитьДействияПриПереходеНаВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO);

КонецПроцедуры

Процедура УстановитьНовуюВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI) Экспорт

	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюAPI(НоваяВерсияAPI);
	ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI);

КонецПроцедуры

Функция ИспользуетсяВерсияDTO(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияDTO) Тогда
		Возврат Ложь;
	Иначе
		Возврат ИнтеграцияУправлениеПерсоналом.СравнитьВерсии(Настройки.ВерсияDTO, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

Функция ИспользуетсяВерсияAPI(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияAPI) Тогда
		Возврат Ложь;
	Иначе
		Возврат ИнтеграцияУправлениеПерсоналом.СравнитьВерсии(Настройки.ВерсияAPI, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

Функция ВерсионированиеИспользуется() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеЗаполнено(Настройки.ВерсияAPI);

КонецФункции

#КонецОбласти

#Область ОбработчикиСменыВерсииDTOИлиAPI

Процедура ВыполнитьДействияПриПереходеНаВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO)

	Если Не ЗначениеЗаполнено(ТекущаяВерсияDTO) Тогда
		ЗарегистрироватьОбработчикОбмена(КабинетСотрудника.ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		ЗарегистрироватьОбработчикОбмена(КабинетСотрудника.ИмяОбработчикаОбновлениеФизическихЛиц());
		ЗарегистрироватьОбработчикОбмена(КабинетСотрудника.ИмяОбработчикаЗарегистрироватьОбновлениеУровнейДоступаКИ());
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КонецЕсли;
	
	Если ИнтеграцияУправлениеПерсоналом.ВерсияФорматаМеньшеВерсии(ТекущаяВерсияDTO, "1.1")
		И ИнтеграцияУправлениеПерсоналом.ВерсияФорматаБольшеИлиРавнаВерсии(НоваяВерсияDTO, "1.1") Тогда
		ВключитьСборГрафиковОтпусков();
	КонецЕсли;
	
	Если ИнтеграцияУправлениеПерсоналом.ВерсияФорматаМеньшеВерсии(ТекущаяВерсияDTO, "2.0")
		И ИнтеграцияУправлениеПерсоналом.ВерсияФорматаБольшеИлиРавнаВерсии(НоваяВерсияDTO, "2.0") Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизацийИДолжностей());
	КонецЕсли;
	
	Если ИнтеграцияУправлениеПерсоналом.ВерсияФорматаМеньшеВерсии(ТекущаяВерсияDTO, "2.2")
		И ИнтеграцияУправлениеПерсоналом.ВерсияФорматаБольшеИлиРавнаВерсии(НоваяВерсияDTO, "2.2") Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизаци());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьВыгрузкуШаблоновДокументов());
		КадровыйЭДО.ВключитьИспользованиеШаблоновДокументов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI)

	Если Не ЗначениеЗаполнено(ТекущаяВерсияAPI) Тогда
		// Переход на приложение с поддержкой версионирования.
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		КабинетСотрудника.ВыполнитьДействияПриПереходеНаВерсию(Настройки.ВерсияПриложения, "6.0.1.1");
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДоступнаяФункциональность

Функция ИспользуютсяОграниченияДоступаКРабочимКонтактам() Экспорт

	Возврат ВерсионированиеИспользуется();

КонецФункции

Функция ИспользуютсяДоступныеФункцииФизическогоЛица() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО") И КабинетСотрудника.ИспользоватьФормат503();

КонецФункции

#КонецОбласти

#Область РучнаяРегистрацияИзмененийДляОбмена

Процедура ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов) Экспорт
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПрименяемыеВычетыНДФЛ;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Если ИспользуютсяОграниченияДоступаКРабочимКонтактам() Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") И ИспользуетсяВерсияDTO("2.0") Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенностьКЭДО;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.МашиночитаемыеДоверенностиКЭДО.ПустаяСсылка());
	КонецЕсли;
	
	Если ИспользуютсяДоступныеФункцииФизическогоЛица() Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДоступныеФункцииФизическогоЛица;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	Если ИспользуетсяВерсияDTO("2.2") Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ШаблонДокумента;
		НоваяСтрока.ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ШаблоныДокументов.ПустаяСсылка());
	КонецЕсли;
	
	ИнтеграцияКабинетСотрудникаВнутренний.ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов);
	
КонецПроцедуры

#КонецОбласти

 #Область ОбслуживаниеПодключенияОтключенияПриложения

Процедура ВыполнитьОбменПослеПодключенияПриложения(ПериодыРасчетныхЛистков) Экспорт
	
	Попытка
		Если ИспользуетсяВерсияDTO("2.0") Тогда
			ИнтеграцияУправлениеПерсоналомОбмен.ВыполнитьОбменПослеПодключенияПриложения(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
		Иначе
			КабинетСотрудникаМенеджерОбмена.РезультатПубликацииПослеПодключения();
		КонецЕсли;
		Если ПериодыРасчетныхЛистков.Количество() > 0 И ПравилаВыгрузкиЗаданы() Тогда
			ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков);
		КонецЕсли;
	Исключение 
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;
		
КонецПроцедуры

Функция ПравилаВыгрузкиЗаданы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК Правила
	|ГДЕ
	|	Правила.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника)";
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Процедура ВключитьНастройкиПрограммыПослеПодключенияПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	КонецЕсли;
	
	Попытка
		БизнесПроцессыЗаявокСотрудников.ИнициализироватьРолиИсполнителей();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось инициализировать роли исполнителей задач'");
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Попытка
			ИнтеграцияУправлениеПерсоналом.ОбновитьСтруктуруПредприятия();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось обновить структуру предприятия'");
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецПопытки;
	КонецЕсли;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Попытка
		БизнесПроцессыЗаявокСотрудников.НачальноеЗаполнениеИсполнителейЗадач(ТекущийПользователь);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить начальное заполнение исполнителей задач'");
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИнтеграцияУправлениеПерсоналом.ДоступнаВыгрузкаВидовСправок() И КабинетСотрудника.ИспользоватьФормат50375() Тогда
		ЗарегистрироватьПубликациюВидовСправок();
	КонецЕсли;
	
	Если ИспользуетсяВерсияDTO("1.0") Тогда
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;
	
	Если ИспользуетсяВерсияDTO("1.1") Тогда
		ВключитьСборГрафиковОтпусков();
	КонецЕсли;
	
	Если ИспользуетсяВерсияDTO("2.2") Тогда
		ЗарегистрироватьВыгрузкуШаблоновДокументов();
		КадровыйЭДО.ВключитьИспользованиеШаблоновДокументов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииПриложения() Экспорт

	РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	Константы.ИспользуетсяСервисКабинетСотрудника.Установить(Ложь);
	Константы.ИспользуютсяОбсужденияКабинетСотрудника.Установить(Ложь);
	Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Ложь);
	Константы.СервисКабинетСотрудникаВЛокальнойСети.Установить(Ложь);
	
	РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.УдалитьВсеПравила();
	
	ИнтеграцияКабинетСотрудникаВнутренний.ОчиститьДанныеПриОтключенииПриложения(); 

КонецПроцедуры

#КонецОбласти

#Область ИзменениеНастроекПодключения 

Процедура СохранитьНовыеНастройкиПодключения(АдресПриложения) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
	Блокировка.Заблокировать();
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения = АдресПриложения;
	Настройки.АдресПриложенияПоИмени = "";
	Настройки.Идентификатор = "local";
	
	Запись = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Настройки);
	Запись.Записать();
	
	Если Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
		МенеджерЗначенияКонстанты = Константы.СервисКабинетСотрудникаВЛокальнойСети.СоздатьМенеджерЗначения();
		МенеджерЗначенияКонстанты.ДополнительныеСвойства.Вставить("ИзменениеРазрешено");
		МенеджерЗначенияКонстанты.Значение = Истина;
		МенеджерЗначенияКонстанты.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыОбъектов

Функция НоваяТаблицаВыгружаемыеОбъекты() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ВыгружаемыеОбъектыКабинетСотрудника");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаИзмененияДляОбмена() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ИзмененияДляОбменаКабинетСотрудника");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбменаКабинетСотрудника

Процедура ВыполнитьОбработчикиОбмена(МенеджерОбмена) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обработчики.Обработчик КАК Обработчик,
	|	Обработчики.НомерИтерации КАК НомерИтерации,
	|	Обработчики.ДатаРегистрации КАК ДатаРегистрации,
	|	Обработчики.ДатаВыполнения КАК ДатаВыполнения
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК Обработчики
	|ГДЕ
	|	НЕ Обработчики.Выполнено";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
			ИнтеграцияКабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияПлановыхУдержаний();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей() Тогда
			ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеОрганизацийИДолжностей() Тогда
			ЗарегистрироватьОбновлениеОрганизацийИДолжностей();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьВыгрузкуШаблоновДокументов() Тогда
			ЗарегистрироватьВыгрузкуШаблоновДокументов();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеОрганизаци() Тогда
			ЗарегистрироватьОбновлениеОрганизаций();
		КонецЕсли;
	КонецЦикла;
	
	КабинетСотрудника.ВыполнитьОбработчикиОбмена();

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбмена(ИмяОбработчика, ПроверятьРегистрацию = Истина) Экспорт
	
	Если ПроверятьРегистрацию Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбработчикиОбмена.Обработчик КАК Обработчик
		|ИЗ
		|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
		|ГДЕ
		|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчика;
	МенеджерЗаписи.Выполнено = Ложь;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ОтключитьОбработчикОбмена(ИмяОбработчика) Экспорт

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчика;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Выполнено = Истина;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт

	Возврат "ЗарегистрироватьИзмененияПлановыхУдержаний";

КонецФункции

Функция ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей()

	Возврат "ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей";

КонецФункции

Процедура ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныеПодписи.МЧД КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенностьКЭДО) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиКЭДО КАК ЭлектронныеПодписи
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЭлектронныеПодписи.МЧД) = ТИП(Справочник.МашиноЧитаемыеДоверенностиКЭДО)
	|	И ЭлектронныеПодписи.МЧД <> ЗНАЧЕНИЕ(Справочник.МашиноЧитаемыеДоверенностиКЭДО.ПустаяСсылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = СтрокаТЗ.Ссылка;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеОрганизацийИДолжностей()

	Возврат "ОбновлениеОрганизацийИДолжностей";

КонецФункции

Процедура ЗарегистрироватьОбновлениеОрганизацийИДолжностей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ВыгружаемыеОбъекты.Ссылка = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность))
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Должности
	|	И Изменения.ВерсияДанных ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация)
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ВыгружаемыеОбъекты.Ссылка = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация))
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизацийИДолжностей());
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизацийИДолжностей());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьВыгрузкуШаблоновДокументов()
	
	Возврат "ЗарегистрироватьВыгрузкуШаблоновДокументов";
	
КонецФункции

Процедура ЗарегистрироватьВыгрузкуШаблоновДокументов()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ШаблонДокумента) КАК ТипОбъекта
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьВыгрузкуШаблоновДокументов());
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = СтрокаТЗ.Ссылка;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьВыгрузкуШаблоновДокументов());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеОрганизаци()

	Возврат "ОбновлениеОрганизаций";

КонецФункции

Процедура ЗарегистрироватьОбновлениеОрганизаций()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ВыгружаемыеОбъекты.Ссылка = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация))
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизаци());
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеОрганизаци());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияПриложения

Функция ПриложениеЗаблокировано() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.СервисЗаблокирован;

КонецФункции

#КонецОбласти

#Область ОбслуживаниеИсключенийИзПравил

Процедура ОбновитьСведенияОПубликацииФизическихЛицИсключений(ФизическиеЛица) Экспорт

	Если Не ЗначениеЗаполнено(ФизическиеЛица) Или Не ПравилаВыгрузкиЗаданы() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.ФизическоеЛицо
	|			И (Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник)
	|			И (НЕ Сотрудники.ПометкаУдаления)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников, Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	
	Если ИнтеграцияУправлениеПерсоналом.ОбновлятьРуководителейПриСменеРуководителяОрганизации() Тогда
		Организации = ОрганизацииГдеФизическиеЛицаРуководители(ФизическиеЛица);
		Подразделения = ПодразделенияДляОбновленияРуководителя(Организации);
		Если ЗначениеЗаполнено(Подразделения) Тогда
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = Подразделения;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				Для каждого СтрокаТЗ Из Подразделения Цикл
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОрганизацииГдеФизическиеЛицаРуководители(ФизическиеЛица)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации";
	ВыгружаемыеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	СведенияОРуководителях = ИнтеграцияУправлениеПерсоналом.СведенияОРуководителяхОрганизаций(ВыгружаемыеОрганизации);
	Организации = Новый Массив;
	Для каждого Организация Из ВыгружаемыеОрганизации Цикл
		Если ФизическиеЛица.Найти(СведенияОРуководителях[Организация].Руководитель) <> Неопределено Тогда
			Организации.Добавить(Организация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Организации;

КонецФункции

Функция ПодразделенияДляОбновленияРуководителя(Организации)
	
	Подразделения = Новый Массив;
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат Подразделения;
	КонецЕсли;
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Подразделение
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ПО ВыгружаемыеОбъекты.Ссылка = Подразделения.Ссылка
		|			И (Подразделения.Владелец В (&Организации))
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций";
		ПодразделенияДляПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		Для каждого Организация Из Организации Цикл
			Подразделения.Добавить(Организация);
		КонецЦикла;
	Иначе
		ПодразделенияДляПроверки = ИнтеграцияУправлениеПерсоналом.ПодразделенияДляПроверкиРуководителей(Организации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодразделенияДляПроверки) Тогда
		Возврат Подразделения;
	КонецЕсли;
	
	ФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ВыгружаемыеФизическиеЛица(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	ВыгружаемыеФизическиеЛица = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);
	ПодразделенияРуководители = ИнтеграцияУправлениеПерсоналом.РуководителиПодразделенийОрганизаций(ПодразделенияДляПроверки, ВыгружаемыеФизическиеЛица);
	
	ПодразделенияБезРуководителей = Новый Массив;
	Для каждого Подразделение Из ПодразделенияДляПроверки Цикл
		Если Не ЗначениеЗаполнено(ПодразделенияРуководители[Подразделение]) Тогда
			ПодразделенияБезРуководителей.Добавить(Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПодразделенияБезРуководителей) Тогда
		Запрос.УстановитьПараметр("Подразделения", ПодразделенияБезРуководителей);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение) КАК ТипОбъекта
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка В(&Подразделения)";
		Подразделения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Процедура СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональность, СообщениеОбОшибке = Неопределено) Экспорт

	ТекущиеНастройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ОбновитьУровеньДоступаКИ = (ТекущиеНастройки.УровеньДоступаКИ <> НастройкиФункциональность.УровеньДоступаКИ);
	
	ФизическиеЛица = Неопределено;
	Если ОбновитьУровеньДоступаКИ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
		ФизическиеЛица = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТипОбъектаОграничениеДоступа = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
		Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъектаОграничениеДоступа);
		ИначеЕсли ОбновитьУровеньДоступаКИ Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъектаОграничениеДоступа);
		КонецЕсли;
		Блокировка.Заблокировать();
		
		РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СохранитьНовыеНастройки(НастройкиФункциональность);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Если ОбновитьУровеньДоступаКИ Тогда
			НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъектаОграничениеДоступа);
			Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Ссылка 		= СтрокаТЗ.Ссылка;
				ЗаписьНабора.ТипОбъекта 	= ТипОбъектаОграничениеДоступа;
				ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");
		ШаблонОписания = НСтр("ru = 'Не удалось сохранить настройки функциональности.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ШаблонОписания, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	КонецПопытки;

КонецПроцедуры

Функция ИспользуемаяФункциональностьСервиса() Экспорт
	
	НастройкиФункциональности = Новый Структура;
	НастройкиФункциональности.Вставить("ИнформацияОЗарплате", 							Истина);
	НастройкиФункциональности.Вставить("ЗаявленияНаВычетыНДФЛ", 						Истина);
	НастройкиФункциональности.Вставить("РегистрацияОтсутствий", 						Ложь);
	НастройкиФункциональности.Вставить("ОтсутствиеПоЛичнымОбстоятельствам", 			Ложь);
	НастройкиФункциональности.Вставить("Опоздание", 									Ложь);
	НастройкиФункциональности.Вставить("Отпуск", 										Ложь);
	НастройкиФункциональности.Вставить("Болезнь", 										Ложь);
	НастройкиФункциональности.Вставить("Командировка", 									Ложь);
	НастройкиФункциональности.Вставить("УчебныйОтпуск", 								Ложь);
	НастройкиФункциональности.Вставить("ОтпускБезОплаты", 								Ложь);
	НастройкиФункциональности.Вставить("Отгул", 										Ложь);
	НастройкиФункциональности.Вставить("ОтпускПоБеременностиИРодам", 					Ложь);
	НастройкиФункциональности.Вставить("ОтпускПоУходуЗаРебенком", 						Ложь);
	НастройкиФункциональности.Вставить("УходЗаРебенкомИнвалидом", 						Ложь);
	НастройкиФункциональности.Вставить("ИнформацияОбОтпуске", 							Ложь);
	НастройкиФункциональности.Вставить("ГрафикОтпусков", 								Ложь);
	НастройкиФункциональности.Вставить("ЗапросСправки2НДФЛ", 							Истина);
	НастройкиФункциональности.Вставить("ЗапросСправкиСМестаРаботы", 					Ложь);
	НастройкиФункциональности.Вставить("АдресСотрудника", 								Истина);
	НастройкиФункциональности.Вставить("ЛичнаяКонтактнаяИнформация", 					Истина);
	НастройкиФункциональности.Вставить("ЗапросНаИзменениеЛичнойИнформации", 			Истина);
	НастройкиФункциональности.Вставить("ДоступноПолучениеФайлаДляПечати", 				Истина);
	НастройкиФункциональности.Вставить("ДоступноПолучениеСканаОригинала", 				Истина);
	НастройкиФункциональности.Вставить("ДоступноПолучениеДокументаСЭП", 				Ложь);
	НастройкиФункциональности.Вставить("ДоступноПолучениеДокументаВБумажномВиде", 		Истина);
	НастройкиФункциональности.Вставить("ДоступноПолучениеКопииНаЭлектроннуюПочту", 		Ложь);
	НастройкиФункциональности.Вставить("ЗаявленияНаКомпенсациюОтпуска", 				Ложь);
	НастройкиФункциональности.Вставить("ЗаявленияНаДСВ", 								Ложь);
	НастройкиФункциональности.Вставить("СпособРасчетаДСВПроцентом", 					Ложь);
	НастройкиФункциональности.Вставить("СпособРасчетаДСВСуммой", 						Ложь);
	НастройкиФункциональности.Вставить("СпособРасчетаДСВПроцентомНеБолееСуммы", 		Ложь);
	НастройкиФункциональности.Вставить("ЗапросМестаРаботыВЗаявлении", 					Истина);
	НастройкиФункциональности.Вставить("РасширенныйЗапросНаИзменениеЛичнойИнформации", 	Истина);
	НастройкиФункциональности.Вставить("ИспользуютсяОбсуждения", 						Ложь);
	НастройкиФункциональности.Вставить("РазделКомпания", 								Ложь);
	НастройкиФункциональности.Вставить("РазделСправки", 								Ложь);
	НастройкиФункциональности.Вставить("РазделДокументы", 								Ложь);
	НастройкиФункциональности.Вставить("ПолучениеСогласияКЭДОНаБумаге", 				Ложь);
	НастройкиФункциональности.Вставить("ПолучениеСогласияКЭДОУНЭП", 					Ложь);
	НастройкиФункциональности.Вставить("ИспользуетсяКЭДО", 								Ложь);
	НастройкиФункциональности.Вставить("ЕдиновременнаяВыплатаКОтпуску", 				Ложь);
	НастройкиФункциональности.Вставить("МатериальнаяПомощьКОтпуску", 					Ложь);
	НастройкиФункциональности.Вставить("РасширенныеРолиСогласования", 					Истина);
	НастройкиФункциональности.Вставить("ЗапросСправкиОстаткиОтпусков", 					Ложь);
	НастройкиФункциональности.Вставить("ИнтеграцияС1СПерсонал", 						Ложь);
	
	НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.РазделКомпания 	= Не НастройкиИспользуемаяФункциональность.СкрытьРазделКомпания;
	НастройкиФункциональности.РазделСправки 	= Не НастройкиИспользуемаяФункциональность.СкрытьРазделСправки;
	НастройкиФункциональности.РазделДокументы 	= Не НастройкиИспользуемаяФункциональность.СкрытьРазделДокументы;
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")
																	И Не НастройкиИспользуемаяФункциональность.ПолучениеДокументаСЭПНедоступно;
	Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		
		НастройкиРасчетаЗарплаты = ИнтеграцияКабинетСотрудникаВнутренний.НастройкиРасчетаЗарплаты();
		
		НастройкиФункциональности.РегистрацияОтсутствий 			= Истина;
		НастройкиФункциональности.ОтсутствиеПоЛичнымОбстоятельствам = Истина;
		НастройкиФункциональности.Опоздание 						= Истина;
		НастройкиФункциональности.Отпуск 							= Истина;
		НастройкиФункциональности.Болезнь 							= Истина;
		НастройкиФункциональности.ОтпускПоБеременностиИРодам 		= Истина;
		НастройкиФункциональности.ОтпускПоУходуЗаРебенком 			= Истина;
		НастройкиФункциональности.УходЗаРебенкомИнвалидом 			= Истина;
		НастройкиФункциональности.ГрафикОтпусков 					= Истина;
		НастройкиФункциональности.ЗапросСправкиСМестаРаботы 		= Истина;
		НастройкиФункциональности.ЗапросСправкиОстаткиОтпусков 		= Истина;
		
		НастройкиФункциональности.Командировка 		= НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок;
		НастройкиФункциональности.Отгул 			= НастройкиРасчетаЗарплаты.ИспользоватьОтгулы;
		НастройкиФункциональности.УчебныйОтпуск 	= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные;
		НастройкиФункциональности.ОтпускБезОплаты 	= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты;
		НастройкиФункциональности.ЕдиновременнаяВыплатаКОтпуску = НастройкиРасчетаЗарплаты.ИспользоватьЕдиновременнуюВыплатуКОтпуску;
		НастройкиФункциональности.МатериальнаяПомощьКОтпуску 	= НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске;
		
		НастройкиФункциональности.ЗаявленияНаДСВ 						= НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ;
		НастройкиФункциональности.СпособРасчетаДСВПроцентом 			= НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентом;
		НастройкиФункциональности.СпособРасчетаДСВСуммой 				= НастройкиИспользуемаяФункциональность.СпособРасчетаДСВСуммой;
		НастройкиФункциональности.СпособРасчетаДСВПроцентомНеБолееСуммы = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентомНеБолееСуммы;
		НастройкиФункциональности.ЗаявленияНаКомпенсациюОтпуска 		= Не НастройкиИспользуемаяФункциональность.КомпенсацияОтпускаНедоступна;
		НастройкиФункциональности.ИнформацияОбОтпуске 					= Не НастройкиИспользуемаяФункциональность.ИнформацияОбОстаткахОтпусковНедоступна;
		
	Иначе
		
		ДоступенРасчетЗарплатыДляНебольшихОрганизаций = ИнтеграцияУправлениеПерсоналом.ДоступенРасчетЗарплатыДляНебольшихОрганизаций();
		НастройкиФункциональности.РегистрацияОтсутствий 		= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		НастройкиФункциональности.Отпуск 						= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		НастройкиФункциональности.ОтпускБезОплаты 				= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		НастройкиФункциональности.УчебныйОтпуск 				= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		НастройкиФункциональности.Болезнь 						= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		НастройкиФункциональности.ОтпускПоБеременностиИРодам 	= ДоступенРасчетЗарплатыДляНебольшихОрганизаций;
		
	КонецЕсли;
	
	НастройкиФункциональности.ИспользуютсяОбсуждения 					= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	НастройкиФункциональности.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	НастройкиФункциональности.ИспользуетсяКЭДО 							= ИспользуетсяКадровыйЭДО();
	// Получаем значение константы, а не ФО.
	НастройкиФункциональности.ИнтеграцияС1СПерсонал 					= Константы.ИспользуетсяПриложение1СПерсонал.Получить();
	
	СпособПолученияСогласия = СпособПолученияСогласияНаПрисоединениеККЭДО();
	НастройкиФункциональности.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
	НастройкиФункциональности.ПолучениеСогласияКЭДОУНЭП 	= (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);

	
	Возврат НастройкиФункциональности;
	
КонецФункции

Функция ТребуетсяОбновитьНастройкиФункциональности() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.ТребуетсяОбновитьНастройкиФункциональности;

КонецФункции

Процедура УстановитьТребуетсяОбновитьНастройкиФункциональности(НовоеЗначение) Экспорт

	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(НовоеЗначение);

КонецПроцедуры

Функция СистемнаяУчетнаяЗаписьНастроена()

	УстановитьПривилегированныйРежим(Истина);
	СистемнаяУчетнаяЗаписьНастроена = РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СистемнаяУчетнаяЗаписьНастроена;

КонецФункции

#КонецОбласти

#Область НастройкиЗаявленийНаОтпуск

Функция ТребуетсяОбновитьНастройкиЗаявленийНаОтпуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
	Возврат Настройки.ОбновитьНастройкиВСервисе;

КонецФункции

Функция НастройкиЗаявленийНаОтпуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();

КонецФункции

Процедура УстановитьТребуетсяОбновитьНастройкиЗаявленийНаОтпуск(УстановленныеНастройки) Экспорт

	ТекущиеНастройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
	Если ОбщегоНазначения.КоллекцииИдентичны(УстановленныеНастройки, ТекущиеНастройки) Тогда
		УстановленныеНастройки.ОбновитьНастройкиВСервисе = Ложь;
		СохранитьНастройкиЗаявокНаОтпуск(УстановленныеНастройки);
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьНастройкиЗаявокНаОтпуск(НастройкиЗаявокНаОтпуск, СообщениеОбОшибке = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СохранитьНовыеНастройки(НастройкиЗаявокНаОтпуск);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#Область РегистрацияПубликацияОтветственногоЛица

Функция ЗарегистрироватьОпубликоватьОтветственного(Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ответственный);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ответственный);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = Ответственный;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		Возврат Ложь;
	КонецПопытки;

	Если ИспользуетсяВерсияDTO("2.0") Тогда
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		Возврат ИнтеграцияУправлениеПерсоналомОбмен.РезультатВыгрузкиФизическогоЛица(Приложение, Ответственный);
	Иначе
		Возврат КабинетСотрудникаМенеджерОбмена.РезультатПубликацииФизическогоЛица(Ответственный);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

#Область ПереносДанных

Процедура Перенос_ИзмененияДляОбменаКабинетСотрудника()
	
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена();
	
	ТипОбъектаПоТипуОбъектаКС = ТипОбъектаПоТипуОбъектаКС();
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	Запрос = Новый Запрос;
	
	// ДокументыКУдалениюКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ИдентификаторыДокументов.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов
	|		ПО Таблица.ИдентификаторДокумента = ИдентификаторыДокументов.ИдентификаторДокумента
	|			И (ИдентификаторыДокументов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись))";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
	
	ТипСборГрафиков = ИнтеграцияУправлениеПерсоналом.ТипСборГрафиковОтпусковСсылка();
	Если ЗначениеЗаполнено(ТипСборГрафиков) Тогда
		
		ДокументМенеджер = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипСборГрафиков);
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументМенеджер.ПустаяСсылка());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	Таблица.КорневойСборГрафиков КАК КорневойСборГрафиков
		|ИЗ
		|	#ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.ИдентификаторДокумента = """"";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
		РезультатЗапрос = Запрос.Выполнить();
		Если Не РезультатЗапрос.Пустой() Тогда
			Выборка = РезультатЗапрос.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.КорневойСборГрафиков) Тогда
					Продолжить;
				КонецЕсли;
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ИдентификаторДокумента = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				ДокументОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьВыгрузку");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	ИдентификаторыДокументов.ТипОбъекта
		|ИЗ
		|	#ИмяТаблицы КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов
		|		ПО Таблица.ИдентификаторДокумента = ИдентификаторыДокументов.ИдентификаторДокумента
		|			И (ИдентификаторыДокументов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
		Таблица = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из Таблица Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
			НоваяСтрока.ТипОбъекта 			= ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
			НоваяСтрока.ВыгружатьУдаление 	= Истина;
		КонецЦикла;
		
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК Документы
	|ГДЕ
	|	Документы.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО)";
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента");
	Согласия = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		Согласия.Добавить(Документы.СогласиеНаПрисоединениеККЭДО.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	Запрос.УстановитьПараметр("Ссылки", Согласия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
	|ГДЕ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка В(&Ссылки)";
	Согласия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для каждого Согласие Из Согласия Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= Согласие;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.СогласиеНаПрисоединениеККЭДО;
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
	
	// ИзмененияДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Изменения.ПредметПубликации) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	НЕ Изменения.ПредметПубликации ССЫЛКА БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ИзмененияДокументовДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПубликуемыйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияДокументовДляСервисаКабинетСотрудника КАК Изменения";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ИзмененияЗаявокДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК Ссылка,
	|	Изменения.ПредметПубликации.ТипЗаявкиКабинетСотрудника КАК ТипЗаявки
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника КАК Изменения";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТипЗаявкиТипОбъекта = ТипЗаявкиТипОбъекта();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗаявкиТипОбъекта[СтрокаТЗ.ТипЗаявки];
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ОбъектыДляУдаленияИзСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ОбъектДляУдаления КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Таблица.ОбъектДляУдаления) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
		
	// ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПрименяемыеВычетыНДФЛ;
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	Отбор = Новый Структура("ВыгружатьУдаление", Истина);
	ИзмененияКУдалению = ИзмененияДляОбмена.Скопировать(Отбор);
	
	ИзмененияДляОбмена.Свернуть("Ссылка,ТипОбъекта");
	ИзмененияДляОбмена.Колонки.Добавить("ВыгружатьУдаление", Новый ОписаниеТипов("Булево"));
	ИзмененияДляОбмена.Колонки.Добавить("ВерсияДанных");
	
	Отбор = Новый Структура("Ссылка,ТипОбъекта");
	Для каждого СтрокаТЗ Из ИзмененияКУдалению Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ИзмененияДляОбмена.НайтиСтроки(Отбор);
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.ВыгружатьУдаление = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл
		СтрокаТЗ.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ИзмененияДляОбмена);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура Перенос_ВыгружаемыеОбъектыКабинетСотрудника()
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты();
	
	Запрос = Новый Запрос;
	
	//ПубликуемыеОбъектыКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ОбъектПубликации КАК Ссылка,
	|	Таблица.УсловноПубликуется КАК УсловноВыгружается
	|ИЗ
	|	РегистрСведений.УдалитьПубликуемыеОбъектыКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВыгружаемыеОбъекты.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	//ФизическиеЛицаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	Таблица.ОкончаниеПубликации КАК ОкончаниеВыгрузки
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВыгружаемыеОбъекты.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ВыгружаемыеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура Перенос_ИдентификаторыНезагруженныхОбъектовКабинетСотрудника()
	
	НезагруженныеОбъекты = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("НезагруженныеОбъектыУправлениеПерсоналом");
	ТипОбъектаПоТипуОбъектаКС = ТипОбъектаПоТипуОбъектаКС();
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Идентификаторы.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	Идентификаторы.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.УдалитьИдентификаторыНезагруженныхОбъектовКабинетСотрудника КАК Идентификаторы";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл 
		ТипОбъекта = ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
		Если Не ЗначениеЗаполнено(ТипОбъекта) Или Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НезагруженныеОбъекты.Добавить();
		НоваяСтрока.Идентификатор 	= СтрокаТЗ.ИдентификаторОбъекта;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.Приложение 		= Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НезагруженныеОбъекты) Тогда
		НаборЗаписей = РегистрыСведений.НезагруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(НезагруженныеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьИдентификаторыНезагруженныхОбъектовКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ОбъектыСОшибкамиЗаполненияКабинетСотрудника()
	
	ОшибкиЗаполнения = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыСОшибками.ОбъектПубликации КАК Ссылка,
	|	ОбъектыСОшибками.БлокирующаяОшибка КАК БлокирующаяОшибка,
	|	ОбъектыСОшибками.Позиция КАК ПозицияШР,
	|	ОбъектыСОшибками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбъектыСОшибками.ОписаниеБлокирующейОшибки КАК ПредставлениеБлокирующейОшибки,
	|	ОбъектыСОшибками.ОписаниеОшибки КАК ПредставлениеОшибки,
	|	ТИПЗНАЧЕНИЯ(ОбъектыСОшибками.ОбъектПубликации) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОбъектыСОшибками";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъекта = ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Или Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ОшибкиЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ТипОбъекта = ТипОбъекта;
		НоваяСтрока.Приложение = Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		НаборЗаписей = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(ОшибкиЗаполнения);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ПравилаПубликацииКабинетСотрудника()
	
	Правила = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ПравилаВыгрузкиУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.ОбъектПравила КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьПравилаПубликацииКабинетСотрудника КАК Правила";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Правила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Правила) Тогда
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(Правила);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_РезультатОбменаКабинетСотрудника()

	СобытияОбмена = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("СобытияОбменаУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатОбмена.ИндексСобытия КАК ИндексСобытия,
	|	РезультатОбмена.ДатаНачала КАК ДатаНачала,
	|	РезультатОбмена.ДатаОкончания КАК ДатаОкончания,
	|	РезультатОбмена.БылиОшибки КАК БылиОшибки
	|ИЗ
	|	РегистрСведений.УдалитьРезультатОбменаКабинетСотрудника КАК РезультатОбмена";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		НоваяСтрока = СобытияОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
		Если СтрокаТЗ.ИндексСобытия = 0 Тогда
			НоваяСтрока.ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
		Иначе
			НоваяСтрока.ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.ОбработкаОбсуждений;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СобытияОбмена) Тогда
		НаборЗаписей = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(СобытияОбмена);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьРезультатОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_СотрудникиДляОбновленияПубликуемыхОбъектов()

	БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	СотрудникиДляОбновления.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Или Не ЗначениеЗаполнено(СтрокаТЗ.Событие) Или Не ЗначениеЗаполнено(СтрокаТЗ.ДатаСобытия) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = БудущиеСобытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
		Если СтрокаТЗ.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы Тогда
			НоваяСтрока.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.ГрафикРаботы;
		Иначе
			НоваяСтрока.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БудущиеСобытия) Тогда
		НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(БудущиеСобытия);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_НеобработанныеРезультатыСогласованияКабинетСотрудника()

	НеобработанныеОбъекты = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("НеобработанныеОбъектыУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НеобработанныеРезультаты.РезультатСогласования КАК Объект
	|ИЗ
	|	РегистрСведений.УдалитьНеобработанныеРезультатыСогласованияКабинетСотрудника КАК НеобработанныеРезультаты";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ИдентификаторОбъекта = Неопределено;
		Попытка
			Объект = СтрокаТЗ.Объект.Получить();
			ИдентификаторОбъекта = Объект.ИдентификаторОбъекта;
		Исключение
			// Не обрабатываем этот объект.
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НеобработанныеОбъекты.Добавить();
		НоваяСтрока.Приложение 		= Приложение;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		НоваяСтрока.Идентификатор 	= ИдентификаторОбъекта;
		НоваяСтрока.Объект 			= Новый ХранилищеЗначения(Объект);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НеобработанныеОбъекты) Тогда 
		НаборЗаписей = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(НеобработанныеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьНеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ВерсияИзмененийКабинетСотрудника()
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ВерсияИзменений = Константы.УдалитьВерсияИзмененийКабинетСотрудника.Получить();
	
	Если ВерсияИзменений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Приложение 		= Приложение;
	ЗаписьНабора.ВерсияИзменений 	= ВерсияИзменений;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Константы.УдалитьВерсияИзмененийКабинетСотрудника.Установить(0);

КонецПроцедуры

Процедура Перенос_НастройкиИнтеграцииУправлениеПерсоналом()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.ВидКИМобильныйТелефон КАК ВидКИМобильныйТелефон
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииУправлениеПерсоналом КАК НастройкиИнтеграции";
	НастройкиИнтеграции = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.УдалитьВидКонтактнойИнформацииМобильныйТелефон КАК ВидКИМобильныйТелефон,
	|	НастройкиИнтеграции.УдалитьВидКонтактнойИнформацииАдресЭлектроннойПочты КАК ВидКИАдресЭлектроннойПочты,
	|	НастройкиИнтеграции.УдалитьПубликоватьСтруктуруЮридическихЛиц КАК ПубликоватьСтруктуруЮридическихЛиц
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииКабинетСотрудника КАК НастройкиИнтеграции";
	НастройкиИнтеграции = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкиИнтеграции);
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ВыгруженныеОбъекты()
	
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|ГДЕ
	|	ВыгруженныеОбъекты.Приложение = &Приложение";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта В (&ТипыОбъектов))
	|ГДЕ
	|	ИзмененияДляОбмена.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ТипОбъекта = ТипЗначенияТипОбъекта[ТипЗнч(Выборка.Ссылка)];
		Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Ссылка 		= Выборка.Ссылка;
		НоваяЗапись.Приложение 	= Приложение;
		НоваяЗапись.ТипОбъекта 	= ТипОбъекта;
		НоваяЗапись.Выгружался 	= Истина;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборЗаписей) Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПубличныеИдентификаторы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПубличныеИдентификаторы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы";
	ЕстьПубличныеИдентификаторы = Не Запрос.Выполнить().Пустой();
	
	ОбрабатываемыеТипы = Новый Соответствие;
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки, Истина);
	
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбъектов = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ПубличныеИдентификаторыОбъектовУправлениеПерсоналом");
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъекта = ТипЗначенияТипОбъекта[СтрокаТЗ.ТипДанных];
		Если ОбрабатываемыеТипы[ТипОбъекта] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Ссылка 		= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	ВТТаблицаОбъектов КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы
	|		ПО Таблица.ТипОбъекта = ПубличныеИдентификаторы.ТипОбъекта
	|			И Таблица.Ссылка = ПубличныеИдентификаторы.Ссылка
	|ГДЕ
	|	ПубличныеИдентификаторы.Идентификатор ЕСТЬ NULL";
	ОбъектыБезИдентификатора = Запрос.Выполнить().Выгрузить();
	
	Если Не ЗначениеЗаполнено(ОбъектыБезИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	ОрганизацииКакПодразделение = Новый Массив;
	ОбъектыБезИдентификатора.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из ОбъектыБезИдентификатора Цикл
		Если ПубликоватьСтруктуруЮридическихЛиц И СтрокаТЗ.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация Тогда
			ОрганизацииКакПодразделение.Добавить(СтрокаТЗ.Ссылка);
		КонецЕсли;
		СтрокаТЗ.Идентификатор = Строка(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОрганизацииКакПодразделение) Тогда
		Запрос.УстановитьПараметр("Ссылки", ОрганизацииКакПодразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ИдентификаторыОрганизаций.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций
		|		ПО Организации.Ссылка = ИдентификаторыОрганизаций.Организация
		|ГДЕ
		|	Организации.Ссылка В(&Ссылки)";
		Идентификаторы = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из Идентификаторы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОбъектыБезИдентификатора.Добавить();
			НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
			НоваяСтрока.Идентификатор 	= СтрокаТЗ.Идентификатор;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПубличныеИдентификаторы Тогда
		Для каждого СтрокаТЗ Из ОбъектыБезИдентификатора Цикл
			НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(СтрокаТЗ.Ссылка);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(СтрокаТЗ.ТипОбъекта);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ОбъектыБезИдентификатора);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;

КонецПроцедуры

Функция ТипОбъектаПоТипуОбъектаКС()

	ТипОбъектаПоТипуОбъектаКС = Новый Соответствие;
	
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.СогласиеНаПрисоединениеККЭДО);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПодразделения);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.ПравилоСогласования,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПравилоСогласования);
		
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправки2НДФЛ);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаКомпенсациюОтпуска);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаИзменениеЛичныхДанных);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаДСВ);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправкиСМестаРаботы);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаОтпуск);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаОстаткиОтпусков);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНалоговыйВычет);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия,
		Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Отсутствие);
		
	Возврат ТипОбъектаПоТипуОбъектаКС;

КонецФункции

// Используется только для переноса данных.
// Описание состава соответсвует прежней версии.
//
Функция ТипЗначенияТипОбъекта()
	
	ПеречислениеМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипЗначенияТипОбъекта = Новый Соответствие;
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), 					ПеречислениеМенеджер.ФизическоеЛицо);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Организации"), 					ПеречислениеМенеджер.Организация);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ПодразделенияОрганизаций"), 		ПеречислениеМенеджер.Подразделение);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), 			ПеречислениеМенеджер.Подразделение);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Должности"), 						ПеречислениеМенеджер.Должность);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ШтатноеРасписание"), 				ПеречислениеМенеджер.ДолжностьПоШтатномуРасписанию);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Сотрудники"), 						ПеречислениеМенеджер.Сотрудник);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиКЭДО"), 	ПеречислениеМенеджер.МашиночитаемаяДоверенностьКЭДО);
	
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипВидПредоставляемойСотрудникамСправкиСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ВидПредоставляемойСотрудникамСправки);
	КонецЕсли;
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ГрафикРаботы);
	КонецЕсли;
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипСборГрафиковОтпусковСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ГрафикОтпусковПредприятия);
	КонецЕсли;
	
	Возврат ТипЗначенияТипОбъекта;

КонецФункции

#КонецОбласти

Процедура ПеренестиДанныеВНовыеРегистры() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Перенос_ИзмененияДляОбменаКабинетСотрудника();
	Перенос_ВыгружаемыеОбъектыКабинетСотрудника();
	Перенос_ИдентификаторыНезагруженныхОбъектовКабинетСотрудника();
	Перенос_ОбъектыСОшибкамиЗаполненияКабинетСотрудника();
	Перенос_ПравилаПубликацииКабинетСотрудника();
	Перенос_РезультатОбменаКабинетСотрудника();
	Перенос_СотрудникиДляОбновленияПубликуемыхОбъектов();
	Перенос_НеобработанныеРезультатыСогласованияКабинетСотрудника();
	Перенос_ВерсияИзмененийКабинетСотрудника();
	Перенос_ВыгруженныеОбъекты();
	ЗаполнитьПубличныеИдентификаторы();
	Перенос_НастройкиИнтеграцииУправлениеПерсоналом();
	
КонецПроцедуры

Процедура ОбновитьВыгруженныеДанные(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка,
	|	ВыгруженныеОбъекты.Приложение КАК Приложение,
	|	ВыгруженныеОбъекты.ТипОбъекта КАК ТипОбъекта,
	|	ВыгруженныеОбъекты.Выгружался КАК Выгружался
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|ГДЕ
	|	НЕ ВыгруженныеОбъекты.Выгружался
	|	И ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом", "Ссылка", "Ссылка") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.Приложение.Установить(Выборка.Приложение);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(Выборка.ТипОбъекта);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.Выгружался = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОграничениеДоступаКРабочимКонтактам(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника")
		Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Или Не МенеджерЗаписи.УдалитьОбновитьУровеньДоступаКИ Тогда
		 ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "ТипОбъекта", ТипОбъекта) Тогда
		ОбработкаВыполнена = Ложь;
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка 		= Выборка.Ссылка;
		ЗаписьНабора.ТипОбъекта 	= ТипОбъекта;
		ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ЗаполнитьНастройкиПодключения(НастройкиПодключения) Экспорт
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	АдресПриложения = Настройки.АдресПриложения;
	Если ЗначениеЗаполнено(Настройки.АдресПриложенияПоИмени) И Настройки.АдресПриложенияПоИмениДоступен Тогда
		АдресПриложения = Настройки.АдресПриложенияПоИмени;
	КонецЕсли;
	НастройкиПодключения.ВерсияDTO 			= СокрЛП(Настройки.ВерсияDTO);
	НастройкиПодключения.ВерсияAPI 			= СокрЛП(Настройки.ВерсияAPI); 
	НастройкиПодключения.АдресПриложения 	= СокрЛП(АдресПриложения);
	
КонецФункции

Функция ТипЗаявкиТипОбъекта() Экспорт
	
	ПеречислениеТипыОбъектов = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ПеречислениеТипыЗаявок = Перечисления.ТипыЗаявокКабинетСотрудника;
	ТипЗаявкиТипОбъекта = Новый Соответствие;
	
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаНДФЛ, 					ПеречислениеТипыОбъектов.ЗапросСправки2НДФЛ);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаКомпенсациюОтпуска, 	ПеречислениеТипыОбъектов.ЗаявкаНаКомпенсациюОтпуска);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ИзменениеЛичныхДанных, 			ПеречислениеТипыОбъектов.ЗаявкаИзменениеЛичныхДанных);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаУдержаниеДСВ, 		ПеречислениеТипыОбъектов.ЗаявкаДСВ);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаСМестаРаботы, 			ПеречислениеТипыОбъектов.ЗапросСправкиСМестаРаботы); 
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаОтпуск, 				ПеречислениеТипыОбъектов.ЗаявкаНаОтпуск);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаОбОстаткеОтпуска, 		ПеречислениеТипыОбъектов.ЗаявкаОстаткиОтпусков);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаНалоговыеВычеты, 	ПеречислениеТипыОбъектов.ЗаявкаНалоговыйВычет);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СогласованиеОтсутствия, 		ПеречислениеТипыОбъектов.Отсутствие);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ОбращениеСотрудника, 			ПеречислениеТипыОбъектов.ОбращениеСотрудника);
	
	Возврат ТипЗаявкиТипОбъекта;

КонецФункции

Процедура ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации) Экспорт
	
	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбмена;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
	КонецЕсли;
	
	ИнтеграцияКабинетСотрудникаВнутренний.ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации);

КонецПроцедуры

Процедура ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации) Экспорт

	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		Для каждого СтрокаТЗ Из ВыгружаемыеОбъекты Цикл 
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			Если СтрокаТЗ.Удалить Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл 
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли; 
	
	ИнтеграцияКабинетСотрудникаВнутренний.ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации);
	
КонецПроцедуры

Функция ФизическиеЛицаИсключения() Экспорт

	ФизическиеЛицаИсключения = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника КАК ИсключенияИзПравил";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаИсключения.Вставить(Выборка.ФизическоеЛицо, Выборка.Публикуется);
	КонецЦикла;
	
	Возврат ФизическиеЛицаИсключения;

КонецФункции

Функция ДоступнаВерсияDTO_2_0()
	
	Если ИспользуетсяВерсияDTO("2.0") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем версии в приложении.
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	Попытка
		МенеджерОбмена.ПроверитьВерсиюФорматаОбмена();
	Исключение
		// Не удалось подобрать версию формата.
		// Исключение не обрабатываем.
		Возврат Ложь;
	КонецПопытки;

	Возврат ИспользуетсяВерсияDTO("2.0");
	
КонецФункции

Процедура ОбновитьАктуальностьИнформацииОбОтпуске(ОбработанныеСотрудники, АктуальностьИнформацииОбОтпуске) Экспорт

	ИнтеграцияКабинетСотрудникаВнутренний.ОбновитьАктуальностьИнформацииОбОтпуске(ОбработанныеСотрудники, АктуальностьИнформацииОбОтпуске);

КонецПроцедуры

Функция ИменаСобытийЖР() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Возврат ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);

КонецФункции

Функция ДоступнаПубликацияРасчетныхЛистков() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);

КонецФункции

Функция ИспользуетсяКадровыйЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	Возврат Настройки.ИспользуетсяКадровыйЭДО;

КонецФункции

Функция СпособПолученияСогласияНаПрисоединениеККЭДО()

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	Возврат Настройки.СпособПолученияСогласияНаПрисоединениеККЭДО;

КонецФункции

Процедура ЗарегистрироватьПубликациюВидовСправок() Экспорт
	
	ВидыСправок = ИнтеграцияУправлениеПерсоналом.ВидыПредоставляемыхСотрудникамСправок();
	
	Если Не ЗначениеЗаполнено(ВидыСправок) Тогда
		ОтключитьОбработчикОбмена(КабинетСотрудника.ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовСправок = Новый ТаблицаЗначений;
	ТаблицаВидовСправок.Колонки.Добавить("ВидСправки");
	ТаблицаВидовСправок.Колонки.Добавить("ТипОбъекта");
	Для каждого ВидСправки Из ВидыСправок Цикл
		НоваяСтрока = ТаблицаВидовСправок.Добавить();
		НоваяСтрока.ВидСправки = ВидСправки;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидСправки");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидСправки");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаВидовСправок Цикл
		
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = СтрокаТЗ.ВидСправки;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.ВидСправки;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(КабинетСотрудника.ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура ВключитьСборГрафиковОтпусков() Экспорт
	
	ИнтеграцияКабинетСотрудникаВнутренний.ВключитьСборГрафиковОтпусков();

КонецПроцедуры

Функция ОтключитьКабинетыНепубликуемыхСотрудников()

	// Привилегированный режим устанавливается для обработки всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал отключение кабинетов.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Идентификаторы = ИнтеграцияКабинетСотрудникаОбмен.ИдентификаторыАктивныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка получения данных из сервиса. Подробности см. в журнале регистрации.'");
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ИдентификаторыСсылки = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		ФизическоеЛицо = ИдентификаторыСсылки[Идентификатор];
		Если ФизическоеЛицо = Неопределено Тогда
			ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		КонецЕсли;
		
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеФизическиеЛица
	|		ПО ФизическиеЛица.ФизическоеЛицо = ВыгружаемыеФизическиеЛица.Ссылка
	|ГДЕ
	|	ВыгружаемыеФизическиеЛица.ОкончаниеВыгрузки ЕСТЬ NULL";
	ИдентификаторыКДеактивации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если ИдентификаторыКДеактивации.Количество() > 0 Тогда
		Результат = ОтключитьКабинетыПоИдентификаторам(ИдентификаторыКДеактивации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтключитьКабинетыПоИдентификаторам(Идентификаторы) Экспорт
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.РезультатДеактивацииФизическихЛиц(Идентификаторы);
	Если БылиОшибки Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка перевода кабинетов в неактивное состояние. Подробности см. в журнале регистрации.'");
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


Функция ИмяКомандыПодписатьФормыПечатьДокументов()
	Возврат "ПередатьПодписанныеPDFВСервисКабинетСотрудника";
КонецФункции

#КонецОбласти

#КонецОбласти





