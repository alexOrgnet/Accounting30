
#Область ПрограммныйИнтерфейс

// Открывает диалог выбора файла для загрузки с последующим распознаванием данных файла.
//
// Параметры: 
//   ПараметрыЗагрузки   - Структура           - см. ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных.
//   ОповещениеОЗагрузке - ОписаниеОповещения  - оповещение, которое будет вызвано после загрузки данных.
//
Процедура ВыбратьФайлДляЗагрузки(ИмяОткрываемойФормы, УникальныйИдентификатор, ДополнительныеПараметры = Неопределено) Экспорт
	
	Параметры = Новый Структура("ИмяФормы, УникальныйИдентификатор", ИмяОткрываемойФормы, УникальныйИдентификатор);
	
	// Сценарий загрузки в табличную часть. 
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		Параметры.Вставить("ИмяТабличнойЧасти", ДополнительныеПараметры.ИмяТабличнойЧасти);
		Параметры.Вставить("Заголовок", ДополнительныеПараметры.Заголовок);
		Параметры.Вставить("Пояснение", ДополнительныеПараметры.Пояснение);
		Параметры.Вставить("РеквизитыДляСопоставления", ДополнительныеПараметры.РеквизитыДляСопоставления);
		Параметры.Вставить("ПрикладнаяЗагрузка", ДополнительныеПараметры.ПрикладнаяЗагрузка);
		Параметры.Вставить("ПараметрыПрикладнойЗагрузки", ДополнительныеПараметры.ПараметрыПрикладнойЗагрузки);
		
		Параметры.Вставить("Идентификатор", УникальныйИдентификатор);
		Параметры.Вставить("Оповещение", ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораФайла", ЭтотОбъект, Параметры);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Все поддерживаемые форматы файлов(*.xls;*.xlsx;*.ods;*.mxl;*.csv)|*.xls;*.xlsx;*.ods;*.mxl;*.csv'");
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

// Проверяет, что для всех колонок табличного документа указан соответствующий реквизит.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - проверяемый табличный документ.
//   ИмяРеквизитаФормы - Строка - имя реквизита, к которому будут привязаны выводимые сообщения об ошибках.
//   ОписаниеКолонок - ДанныеФормыКоллекция - таблица значений, содержащая описание загружаемых колонок.
//                                            См. ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок()
//
// Возвращаемое значение:
//   Булево - результат проверки:
//      * Истина - если все колонки сопоставлены с реквизитами и сопоставлены обязательные реквизиты;
//      * Ложь - в противном случае.
//
Функция ЗаполненыВсеЗаголовкиКолонок(ТабличныйДокумент, ИмяРеквизитаФормы, ОписаниеКолонок) Экспорт
	
	Если ТипЗнч(ОписаниеКолонок) <> Тип("ДанныеФормыКоллекция") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбязательныеКолонки = ОбязательныеКолонки(ОписаниеКолонок);
	
	ЕстьНезаполненныйЗаголовок = Ложь;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	ТекстНезаполненныйЗаголовок = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
	
	Для НомерКолонки = 1 по ШиринаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область("R1C" + НомерКолонки);
		
		Если Ячейка.Текст = ТекстНезаполненныйЗаголовок Тогда
			ЕстьНезаполненныйЗаголовок = Истина;
			Продолжить;
		КонецЕсли;
		
		ОбязательнаяКолонка = ОбязательныеКолонки.Найти(Ячейка.ПараметрРасшифровки);
		Если ОбязательнаяКолонка <> Неопределено Тогда
			ОбязательныеКолонки.Удалить(ОбязательнаяКолонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНезаполненныйЗаголовок Тогда
		ТекстСообщения = НСтр("ru = 'Укажите названия реквизитов в заголовках колонок. Если колонку не требуется загружать, удалите ее.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизитаФормы);
	КонецЕсли;
	
	Для Каждого ОбязательнаяКолонка Из ОбязательныеКолонки Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указана колонка %1.'"), ОбязательнаяКолонка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизитаФормы);
	КонецЦикла;
	
	ЕстьОшибки = ЕстьНезаполненныйЗаголовок Или ОбязательныеКолонки.Количество() > 0;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

// Проверяет, что выбраны все обязательные колонки табличного документа.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - проверяемый табличный документ.
//   ИмяРеквизитаФормы - Строка - имя реквизита, к которому будут привязаны выводимые сообщения об ошибках.
//   ОписаниеКолонок - ДанныеФормыКоллекция - таблица значений, содержащая описание загружаемых колонок.
//                                            См. ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок()
//
// Возвращаемое значение:
//   Булево - результат проверки:
//      * Истина - если колонки сопоставлены со всеми обязательными реквизитами;
//      * Ложь - в противном случае.
//
Функция ЗаполненыВсеОбязательныеЗаголовкиКолонок(ТабличныйДокумент, ИмяРеквизитаФормы, ОписаниеКолонок) Экспорт
	
	Если ТипЗнч(ОписаниеКолонок) <> Тип("ДанныеФормыКоллекция") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НезаполненныеОбязательныеКолонки = НезаполненныеОбязательныеКолонки(ТабличныйДокумент, ОписаниеКолонок);
	СообщитьОНезаполненныхОбязательныхКолонках(НезаполненныеОбязательныеКолонки, ИмяРеквизитаФормы, ОписаниеКолонок);
	
	Возврат НезаполненныеОбязательныеКолонки.Количество() = 0;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбязательныеКолонки(ОписаниеКолонок)
	
	ОбязательныеКолонки = Новый Массив;
	
	Для Каждого Колонка Из ОписаниеКолонок Цикл
	
		Если Колонка.ОбязательнаДляЗаполнения Тогда
			ОбязательныеКолонки.Добавить(Колонка.Идентификатор);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ОбязательныеКолонки;
	
КонецФункции

Процедура ОбработкаВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Результат.Имя);
	Если Не ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.РасширениеФайлаПоддерживается(РасширениеФайла) Тогда
		ТекстСообщения = НСтр("ru = 'Загрузка возможна только из файлов с расширениями xls, xlsx, mxl, csv, ods.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресФайла", Результат.Хранение);
	ПараметрыФормы.Вставить("РасширениеФайла", РасширениеФайла);
	
	Если НЕ ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		
		ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	// Сценарий загрузки в табличную часть.
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", ДополнительныеПараметры.ИмяТабличнойЧасти);
	ПараметрыФормы.Вставить("Заголовок", ДополнительныеПараметры.Заголовок);
	ПараметрыФормы.Вставить("РеквизитыДляСопоставления", ДополнительныеПараметры.РеквизитыДляСопоставления);
	ПараметрыФормы.Вставить("ПрикладнаяЗагрузка", ДополнительныеПараметры.ПрикладнаяЗагрузка);
	ПараметрыФормы.Вставить("ПараметрыПрикладнойЗагрузки", ДополнительныеПараметры.ПараметрыПрикладнойЗагрузки);
	ПараметрыФормы.Вставить("Пояснение", ДополнительныеПараметры.Пояснение);
	
	ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ПараметрыФормы, ДополнительныеПараметры.Идентификатор,,,, ДополнительныеПараметры.Оповещение);
	
КонецПроцедуры

Функция НовыйПараметрыЗагрузкиВТабЧасть() Экспорт
	
	ПараметрыЗагрузкиДанных = Новый Структура;
	
	ПараметрыЗагрузкиДанных.Вставить("ИмяТабличнойЧасти", ""); // в следующем виде: Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие
	ПараметрыЗагрузкиДанных.Вставить("Заголовок", "");
	ПараметрыЗагрузкиДанных.Вставить("Пояснение", ""); // поясняющий текст/текст инструкции для пользователя на форме, можно форматированной строкой (см. СтроковыеФункцииКлиент.ФорматированнаяСтрока())
	ПараметрыЗагрузкиДанных.Вставить("РеквизитыДляСопоставления", ""); // адрес во временном хранилище имен реквизитов, используемых при сопоставлении с элементами справочника (например: "Номенклатура.Артикул")
	ПараметрыЗагрузкиДанных.Вставить("Оповещение", Неопределено);
	
	ПараметрыЗагрузкиДанных.Вставить("ПрикладнаяЗагрузка", Ложь);
	ПараметрыЗагрузкиДанных.Вставить("ПараметрыПрикладнойЗагрузки", НовыйПараметрыПрикладнойЗагрузки());
	
	Возврат ПараметрыЗагрузкиДанных;
	
КонецФункции

Функция НовыйПараметрыПрикладнойЗагрузки()
	
	ПараметрыЗагрузкиДанных = Новый Структура;
	
	ПараметрыЗагрузкиДанных.Вставить("ОбъектДляЗагрузки", Неопределено); // ссылка на документ/справочник, в который происходит прикладная загрузка
	ПараметрыЗагрузкиДанных.Вставить("ИмяМакета", ""); // макет, содержащий колонки табличной части для загрузки
	ПараметрыЗагрузкиДанных.Вставить("ПострочнаяОбработка", Ложь); // признак того, что данные сопоставляются не по ячейкам, а построчно менеджером объекта загрузки
	ПараметрыЗагрузкиДанных.Вставить("СопоставлятьКолонки", Ложь); // используется ли дополнительное сопоставление колонок табичной части и колонок загружаемого файла менеджером объекта загрузки
	ПараметрыЗагрузкиДанных.Вставить("Период", Неопределено);
	ПараметрыЗагрузкиДанных.Вставить("Организация", Неопределено);
	ПараметрыЗагрузкиДанных.Вставить("ТолькоПоследнийЛист", Ложь); // используется, если в файле несколько листов и нужно загрузить только последний
	ПараметрыЗагрузкиДанных.Вставить("ПоказатьИнформациюОжидания", Ложь); // используется, если при загрузке нужно показать информацию в ожидании длительной операции
	ПараметрыЗагрузкиДанных.Вставить("ТекстИнформацииОжидания", ""); // текст, который показывается в ожидании длительной операции
	ПараметрыЗагрузкиДанных.Вставить("ОграничениеТипов", ""); // строка, массив типов которые не могут быть выбраны в обработке
	
	Возврат ПараметрыЗагрузкиДанных;
	
КонецФункции

Функция НезаполненныеОбязательныеКолонки(ТабличныйДокумент, Знач ОписаниеКолонок)
	
	ОбязательныеКолонки = ОбязательныеКолонки(ОписаниеКолонок);
	
	ЗаполненныеЗаголовкиКолонок = ЗаполненныеЗаголовкиКолонок(ТабличныйДокумент);
	Для Каждого ИдентификаторКолонки Из ЗаполненныеЗаголовкиКолонок Цикл
		
		ОбязательнаяКолонка = ОбязательныеКолонки.Найти(ИдентификаторКолонки);
		Если ОбязательнаяКолонка <> Неопределено Тогда
			ОбязательныеКолонки.Удалить(ОбязательнаяКолонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбязательныеКолонки;
КонецФункции

Процедура СообщитьОНезаполненныхОбязательныхКолонках(НезаполненныеОбязательныеКолонки, ИмяРеквизитаФормы, ОписаниеКолонок) Экспорт
	
	Для Каждого ОбязательнаяКолонка Из НезаполненныеОбязательныеКолонки Цикл
		ОписаниеКолонки = ОписаниеКолонок.НайтиСтроки(Новый Структура("Идентификатор", ОбязательнаяКолонка));
		ИмяКолонки = ?(ОписаниеКолонки.Количество() > 0, ОписаниеКолонки[0].ПредставлениеКолонки, ОбязательнаяКолонка);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указана обязательная колонка ""%1"".'"), ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизитаФормы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив имен заполненных для загрузки колонок.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - проверяемый табличный документ.
//
// Возвращаемое значение:
//   Массив - массив идентификаторов колонок.
//
Функция ЗаполненныеЗаголовкиКолонок(ТабличныйДокумент) Экспорт
	
	ИдентификаторыКолонок = Новый Массив;
	
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	Для НомерКолонки = 1 по ШиринаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область("R1C" + НомерКолонки);
		Если ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			ИдентификаторыКолонок.Добавить(Ячейка.ПараметрРасшифровки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторыКолонок;
	
КонецФункции

#КонецОбласти
