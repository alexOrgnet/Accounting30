#Область Описание
//
// Содержит общие методы работы с шиной мобильных приложений от имени мобильного(клиентского) приложения.
//
// Если мобильное приложение подключено по логину и паролю, то облачное приложение выступает в роли посредника
// при взаимодействии с шиной мобильных приложений.
//
// Облачное приложение получает от мобильного приложения сообщение, передает его в шину мобильных приложений,
// "притворяясь" мобильным приложением. Результат обработки сообщения шина передает в облачное приложение.
// В свою очередь облачное приложение уже оповещает мобильное приложение о результатах обработки этого сообщения.
// Облачное приложение в таком случае "клиентским приложением".
//
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращет регистрацию клиентского приложения на шине мобильных приложений.
// Реквизиты регистрации (внешний и внутренний ключи, токен, срок действия токена) хранятся в безопасном хранилище.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине.
//
// Возвращаемое значение:
//  Регистрация - Структура, Неопределено - реквизиты регистрации мобильного приложения (код, ключ, токен) на шине
//                                          мобильных приложений. См. НовыйРегистрация()
//                                          Если не удалось выполнить регистрацию, возвращает Неопределено.
//
Функция Регистрация(Приложение) Экспорт
	
	Подключение = Подключение(Приложение);
	
	Если Не ЗначениеЗаполнено(Подключение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Регистрация = СохраненныеДанныеРегистрации(ИмяДанныхРегистрации(Приложение));
	
	Если Не ЗначениеЗаполнено(Регистрация) Или Не ЗначениеЗаполнено(Регистрация.ВнешнийКлюч) Тогда
		Возврат Зарегистрировать(Приложение, Подключение);
	КонецЕсли;
		
	Если Регистрация.СрокДействияТокена <= ТекущаяУниверсальнаяДата() Тогда
		Регистрация = ПовторноеПолучениеТокена(Приложение, Подключение, Регистрация);
	КонецЕсли;
	
	Возврат Регистрация;
	
КонецФункции

// Отправляет сообщение Шине.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине.
//  Сообщение - Структура - произвольные данные, передаваемые шине мобильных приложений.
//                          Структура должна быть сериализуемой в JSON.
//
// Возвращаемое значение:
//  Идентификатор - Строка, Неопределено - Идентификатор, присвоенный сообщению шиной мобильных приложений.
//                                         Неопределено, если сообщение не было принято шиной.
//
Функция ОтправитьСообщение(Приложение, Сообщение) Экспорт
	
	Результат = Неопределено;
	
	Подключение = Подключение(Приложение);
	Если Не ЗначениеЗаполнено(Подключение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Регистрация = Регистрация(Приложение);
	Если Не ЗначениеЗаполнено(Регистрация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Подключение.Токен = Регистрация.Токен;
	Подключение.ПространствоИмен = ПространствоИмен(ИмяСервисаКлиентскогоПриложения());
	ДобавитьЗаголовки(Подключение);
	
	Данные = Новый Структура();
	Данные.Вставить("Отправитель", Регистрация.ВнутреннийКлюч);
	Данные.Вставить("Сообщение", Сообщение);
	
	// Пробуем отправить сообщение максимально 3 раза. Первая попытка может быть неудачной из-за требования
	// переключиться с Шины мобильных приложений на Шину прикладных приложений.
	// Вторая попытка может быть неудачной из-за просроченного токена.
	// Если третья отправка завершилась неудачей, то нет смысла пробовать ещё раз.
	ЧислоПопытокОтправки = 3;
	Для СчетчикПопыток = 1 по ЧислоПопытокОтправки Цикл
		
		ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "Outbound", Данные);
			
		Если ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияРесурсОкончательноПеремещен() Тогда
			Если ОтветСервиса.Содержимое.Свойство("Адрес") Тогда
				// Следует использовать подключение к Шине прикладных приложений.
				Константы.АдресШиныПрикладныхПриложений.Установить(ОтветСервиса.Содержимое.Адрес);
				Подключение.АдресСервиса = АдресСервисаШиныПрикладныхПриложений(ОтветСервиса.Содержимое.Адрес);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		Если ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияНеАвторизован() Тогда
			Регистрация = ПовторноеПолучениеТокена(Приложение, Подключение, Регистрация);
			Если Не ЗначениеЗаполнено(Регистрация) Тогда
				// Если не удалось обновить токен (например, на стороне Шины утрачена информация,
				// необходимая для продления токена), то перерегистрируем приложение.
				Регистрация = Зарегистрировать(Приложение, Подключение);
				Если Не ЗначениеЗаполнено(Регистрация) Тогда
					ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
						ОтветСервиса,
						Приложение,
						НСтр("ru = 'Перерегистрация при повторном получении токена'", ОбщегоНазначения.КодОсновногоЯзыка()));
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			Подключение.Токен = Регистрация.Токен;
			ДобавитьЗаголовки(Подключение);
			
		ИначеЕсли ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
			
			ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
				ОтветСервиса,
				Приложение,
				НСтр("ru = 'Отправка сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Возврат Результат;
			
		Иначе
			Результат = ОтветСервиса.Содержимое.Идентификатор;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Обновляет реквизиты подключения клиентского приложения к шине.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине.
//  Реквизиты - Структура - реквизиты подключения к шине, содержащие:
//                          - адрес,
//                          - логин,
//                          - пароль.
//
Процедура ОбновитьРеквизитыПодключения(Приложение, Реквизиты) Экспорт
	
	ИмяДанныхПодключения = ИмяДанныхПодключения(Приложение);
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.АдресСервиса = Реквизиты.Адрес;
	Подключение.Логин = Реквизиты.Логин;
	Подключение.Пароль = Реквизиты.Пароль;
	
	ШинаМобильныхПриложенийСлужебный.СохранитьДанныеПодключения(
		ИмяДанныхПодключения,
		ШинаМобильныхПриложений.СохраняемыеДанныеПодключения(Подключение));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеПодсистемы

Процедура ЗаполнитьМенеджерыПриложений(МенеджерыПриложений)
	
	МенеджерыПриложений.Добавить(РегистрыСведений.КлиентскоеПриложениеСканированиеЧеков);
	
КонецПроцедуры

#КонецОбласти

Функция Подключение(Приложение)
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДанныхПодключения = ИмяДанныхПодключения(Приложение);
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.ИсточникЗапроса = ИмяДанныхПодключения;
	
	АдресШиныПрикладныхПриложений = Константы.АдресШиныПрикладныхПриложений.Получить();
	Если ЗначениеЗаполнено(АдресШиныПрикладныхПриложений) Тогда
		// Использовать подключение к Шине прикладных приложений.
		Подключение.АдресСервиса = АдресСервисаШиныПрикладныхПриложений(АдресШиныПрикладныхПриложений);
		Возврат Подключение;
	КонецЕсли;
	
	// Использовать подключение к Шине мобильных приложений.
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПодключения);
	
	Если ЗначениеЗаполнено(Подключение) И ЗначениеЗаполнено(Подключение.АдресСервиса) Тогда
		Возврат Подключение;
	КонецЕсли;
	
	ОписаниеШины = ШинаМобильныхПриложений.ОписаниеШины(Приложение);
	
	АдресШиныПрикладныхПриложений = Константы.АдресШиныПрикладныхПриложений.Получить();
	// В процессе получения описания Шины мобильных приложений мог быть получен адрес Шины прикладных приложений.
	Если ЗначениеЗаполнено(АдресШиныПрикладныхПриложений) Тогда
		Подключение.АдресСервиса = АдресСервисаШиныПрикладныхПриложений(АдресШиныПрикладныхПриложений);
		Возврат Подключение;
	КонецЕсли;
	
	Если ОписаниеШины = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение.АдресСервиса = ОписаниеШины.Подключение.МобильноеПриложение.Адрес;
	Подключение.Логин = ОписаниеШины.Подключение.МобильноеПриложение.Логин;
	Подключение.Пароль = ОписаниеШины.Подключение.МобильноеПриложение.Пароль;
	
	ШинаМобильныхПриложенийСлужебный.СохранитьДанныеПодключения(
		ИмяДанныхПодключения,
		ШинаМобильныхПриложений.СохраняемыеДанныеПодключения(Подключение));
	
	Возврат Подключение;
	
КонецФункции

Функция Зарегистрировать(Приложение, Подключение)
	
	// Мобильное приложение требует ввод кода доступа и активацию его на шине.
	// Облачное приложение "притворяется" мобильным приложением для работы с шиной, поэтому
	// выполним эту процедуру и получим токен для последующего доступа.
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	МенеджерПриложения = ШинаМобильныхПриложенийСлужебный.МенеджерПриложения(Приложение, МенеджерыПриложений);
	ИмяДанныхРегистрации = ИмяДанныхРегистрации(Приложение);
	КодДоступа = МенеджерПриложения.НовыйКодДоступа(ИмяДанныхРегистрации);
	
	Если Не ЗначениеЗаполнено(КодДоступа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Активируем пользователя.
	Подключение.ПространствоИмен = ПространствоИмен(ИмяСервисаАутентификацииШины());
	Данные = Новый Структура("Ключ", КодДоступа);
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "", Данные);
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Активация мобильного приложения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Регистрация = НовыйРегистрация();
	Регистрация.ЭкземплярПриложения = ОтветСервиса.Содержимое.ЭкземплярПриложения;
	Регистрация.ВнешнийКлюч = КодДоступа;
	Регистрация.ВнутреннийКлюч = ОтветСервиса.Содержимое.Ключ;
	Регистрация.Токен = ОтветСервиса.Содержимое.Токен.Значение;
	Регистрация.СрокДействияТокена = ПрочитатьДатуJSON(ОтветСервиса.Содержимое.Токен.СрокДействия, ФорматДатыJSON.ISO);
	
	ШинаМобильныхПриложенийСлужебный.СохранитьДанныеПодключения(ИмяДанныхРегистрации, Регистрация);
	
	Возврат Регистрация;
КонецФункции

Функция СохраненныеДанныеПодключения(Владелец)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Владелец,
		"АдресСервиса, Логин, Пароль, Токен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Подключение = ЗапросыREST.НовыйПодключение();
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения);
	Подключение.ИсточникЗапроса = Владелец;
	
	Возврат Подключение;
	
КонецФункции

Функция СохраненныеДанныеРегистрации(Владелец)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеРегистрации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Владелец,
		"ВнешнийКлюч, ВнутреннийКлюч, ЭкземплярПриложения, Токен, СрокДействияТокена");
	УстановитьПривилегированныйРежим(Ложь);
	
	Регистрация = НовыйРегистрация();
	ЗаполнитьЗначенияСвойств(Регистрация, ДанныеРегистрации);
	
	Возврат Регистрация;
	
КонецФункции

Функция ПовторноеПолучениеТокена(Приложение, Подключение, Регистрация)
	
	Ключи = Новый Массив;
	Ключи.Добавить(Регистрация.ВнешнийКлюч);
	
	Данные = Новый Структура;
	Данные.Вставить("ЭкземплярПриложения", Регистрация.ЭкземплярПриложения);
	Данные.Вставить("Ключ", Ключи);
	
	Подключение.ПространствоИмен = ПространствоИмен(ИмяСервисаАутентификацииШины());
	Подключение.Токен = Регистрация.Токен;
	ДобавитьЗаголовки(Подключение);
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "PUT", "", Данные);
	
	Если ОтветСервиса = Неопределено Или ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Повторное получение токена'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Регистрация.Токен = ОтветСервиса.Содержимое.Токен.Значение;
	Регистрация.СрокДействияТокена = ПрочитатьДатуJSON(ОтветСервиса.Содержимое.Токен.СрокДействия, ФорматДатыJSON.ISO);
	
	ШинаМобильныхПриложенийСлужебный.СохранитьДанныеПодключения(
		ИмяДанныхРегистрации(Приложение),
		Регистрация);
	
	Возврат Регистрация;
	
КонецФункции

Функция АдресСервисаШиныПрикладныхПриложений(Знач АдресШины)
	
	Пока СтрЗаканчиваетсяНа(АдресШины, "/") Цикл
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(АдресШины);
	КонецЦикла;
	
	Возврат СтрШаблон("%1/api", АдресШины);
	
КонецФункции

Функция НовыйРегистрация()
	
	Регистрация = Новый Структура;
	
	Регистрация.Вставить("ВнешнийКлюч", "");
	Регистрация.Вставить("ВнутреннийКлюч", "");
	Регистрация.Вставить("ЭкземплярПриложения", "");
	Регистрация.Вставить("Токен", "");
	Регистрация.Вставить("СрокДействияТокена", Дата(1,1,1));
	
	Возврат Регистрация;
	
КонецФункции

Функция ПространствоИмен(ИмяСервиса)
	
	Возврат СтрШаблон("/hs/%1/%2", ИмяСервиса, ВерсияAPI());
	
КонецФункции

Функция ВерсияAPI()
	
	Возврат "v1";
	
КонецФункции

Функция ИмяСервисаКлиентскогоПриложения()
	
	Возврат "MobileBus";
	
КонецФункции

Функция ИмяСервисаАутентификацииШины()
	
	Возврат "MobileAuth";
	
КонецФункции

Процедура ДобавитьЗаголовки(Подключение)
	
	Если Подключение.Свойство("Токен") И ЗначениеЗаполнено(Подключение.Токен) Тогда
		Подключение.ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификации(), Подключение.Токен);
	КонецЕсли;
	
	// Необходимо передавать в заголовках версию мобильного приложения. Так Шина сможет
	// "понять", какими возможностями обладает подключаемое приложение.
	Подключение.ЗаголовкиАутентификации.Вставить("Version", ВерсияМобильногоПриложения());
	
КонецПроцедуры

Функция ВерсияМобильногоПриложения()
	
	// Мобильное приложение версии 1.1 обладает возможностью переподключиться на Шину
	// с новым адресом, получив на какой-либо запрос ответ с кодом 308 и новым адресом Шины
	// в теле ответа.
	Возврат "1.1";
	
КонецФункции

Функция ИмяДанныхПодключения(Приложение)
	
	Возврат СтрШаблон("mobile-%1", Приложение);
	
КонецФункции

Функция ИмяДанныхРегистрации(Приложение)
	
	Возврат СтрШаблон("mobile-reg-%1", Приложение);
	
КонецФункции

Функция ИмяЗаголовкаАутентификации()
	
	Возврат "mobile-auth";
	
КонецФункции

#КонецОбласти
