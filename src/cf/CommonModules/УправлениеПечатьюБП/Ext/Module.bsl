
#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ИспользоватьПодписиИПечати = Истина;
	Настройки.СкрыватьПодписиИПечатиДляРедактирования = Истина;
	
	Настройки.ОбъектыПечати.Добавить(Справочники.Контрагенты);
	
КонецПроцедуры

Функция ЭтоПечатнаяФормаЗаПоставщика(ДокументПечатнойФормы) Экспорт
	Возврат ВидыДокументовСПечатьюЗаПоставщика().Найти(ТипЗнч(ДокументПечатнойФормы)) <> Неопределено;
КонецФункции

Процедура ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати, Организация, ДокументПечатнойФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОчиститьФаксимильнуюПодписьИПечатьИзМакета(ТабличныйДокумент, ОбъектыПечати, ДокументПечатнойФормы);
		Возврат;
	КонецЕсли;
	
	ОрганизацияЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	// В печатных формах могут быть несовместимые факсимиле.
	// Например, это может быть Руководитель и Предприниматель в счете-фактуре.
	// В зависимости от организации может выводится либо то, либо другое факсимиле.
	// Поэтому нужно доработать выведенный макет так, чтобы он содержал только нужные факсимиле.
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеРуководитель", "ФаксимилеПредприниматель", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеГлавныйБухгалтер", "ФаксимилеПредприниматель", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеРуководительСчетФактура", "ФаксимилеПредпринимательСчетФактура", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеГлавныйБухгалтерСчетФактура", "ФаксимилеПредпринимательСчетФактура", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеФаксимильнаяПечать", "ФаксимилеФаксимильнаяПечатьПредприниматель", ОрганизацияЮридическоеЛицо);
	
КонецПроцедуры

Процедура НастроитьСтарыйВариантПодписиИПечати(ТабличныйДокумент, ОбъектыПечати, Организация, ДокументПечатнойФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	
	ПодписиОрганизации = Справочники.Организации.ПодписиИПечатиОрганизации(Организация);
	Если ПодписиОрганизации.Свойство("ФаксимилеФаксимильнаяПечать") Тогда
		// Это старый вариант подписи, нужно удалить области ФаксимилеРуководитель, ФаксимилеГлавныйБухгалтер,
		// ФаксимилеПечать, ФаксимилеПредприниматель, ФаксимилеПечатьПредприниматель
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеРуководитель", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеГлавныйБухгалтер", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПечать", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПечатьПредприниматель", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПредприниматель", СуффиксРисункаФаксимиле));
	Иначе
		// Старого варианта подписи нет, нужно удалить области ФаксимилеФаксимильнаяПечать, ФаксимилеФаксимильнаяПечатьПредприниматель
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеФаксимильнаяПечать", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеФаксимильнаяПечатьПредприниматель", СуффиксРисункаФаксимиле));
	КонецЕсли;
	
	// Возможно, пользователь сохранил макет счета, и тогда у него останутся области ФаксимильнаяПечать и ФаксимильнаяПечатьПредприниматель
	// Они не заполнятся корректно, поэтому их нужно удалить в любом случае.
	ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимильнаяПечать", СуффиксРисункаФаксимиле));
	ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимильнаяПечатьПредприниматель", СуффиксРисункаФаксимиле));
	
КонецПроцедуры

Процедура ОчиститьФаксимильнуюПодписьИПечатьИзМакета(ТабличныйДокумент, ОбъектыПечати, ДокументПечатнойФормы) Экспорт
	
	// При печати документов за поставщика не нужно устанавливать факсимиле, т.к. это документ от имени другой организации.
	// Но т.к. макет для печати документов за поставщика используется тот же, что и для печати документов от имени организации,
	// то объекты факсимиле там есть. Выводить их не нужно, нужно удалить, чтобы механика БСП ее не видел и не заполнял.
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	
	ДлинаСуффиксаРисункаФаксимиле = СтрДлина(СуффиксРисункаФаксимиле);
	
	РисункиКУдалению = Новый Массив;
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		
		ИмяРисунка = Рисунок.Имя;
		
		Если ВРег(Прав(ИмяРисунка, ДлинаСуффиксаРисункаФаксимиле)) <> ВРег(СуффиксРисункаФаксимиле) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из МассивИменПоказателей Цикл
			Если СтрНачинаетсяС(ВРег(ИмяРисунка), ВРег(ИмяПоказателя)) Тогда
				РисункиКУдалению.Добавить(Рисунок.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ИмяРисунка Из РисункиКУдалению Цикл
		ТабличныйДокумент.Рисунки.Удалить(ИмяРисунка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодписантовДокумента(ПараметрыВывода, СсылкаНаДокумент, ТипПодписанта, ИмяПодписантаВСтруктуре, СтруктураПодписантов) Экспорт
	
	Если ТипЗнч(СтруктураПодписантов) <> Тип("Структура")
		Или Не СтруктураПодписантов.Свойство(ИмяПодписантаВСтруктуре) Тогда
		Возврат;
	КонецЕсли;	
	Подписант = СтруктураПодписантов[ИмяПодписантаВСтруктуре];
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли;
	
	ПодписиДляФаксимилеВДокументахБП = Неопределено;
	ПараметрыВывода.Свойство("ПодписиДляФаксимилеВДокументахБП", ПодписиДляФаксимилеВДокументахБП);
	
	Если Не ЗначениеЗаполнено(ПодписиДляФаксимилеВДокументахБП) Тогда
		ПодписиДляФаксимилеВДокументахБП = Новый Соответствие;
		ПараметрыВывода.Вставить("ПодписиДляФаксимилеВДокументахБП", ПодписиДляФаксимилеВДокументахБП);
	КонецЕсли;
	
	ПодписиДокумента = ПодписиДляФаксимилеВДокументахБП.Получить(СсылкаНаДокумент);
	Если Не ЗначениеЗаполнено(ПодписиДокумента) Тогда
		ПодписиДокумента = Новый Структура;
		ПодписиДляФаксимилеВДокументахБП.Вставить(СсылкаНаДокумент, ПодписиДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПодписантов[ИмяПодписантаВСтруктуре]) Тогда
		ПодписиДокумента.Вставить(ТипПодписанта, Подписант);
	Иначе
		ПодписиДокумента.Вставить(ТипПодписанта, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#Область ДобавлениеФаксимиле

Процедура ПриПолученииПодписейИПечатей(СписокДокументов, ПодписиИПечати, ПараметрыВывода) Экспорт
	
	// Подписи и печати получаем в привилегированном режиме.
	// Большинство печатных форм формируется в привилегированном режиме, например, УПД, ТОРГ12, ТТН.
	// И если пользователь смог сформиоровать печатные формы, то он должен иметь возможность сформировать и факсимиле,
	// даже если у него недостаточно прав, например, на присоединенные файлы физ.лиц.
	// Поэтому все получение подписей формируем в привилегированном режиме.
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодписиФизическихЛиц = Новый Соответствие;
	
	ОбъектыПоТипам = ОбъектыПоТипам(СписокДокументов);
	
	Для Каждого ОбъектыПоТипу Из ОбъектыПоТипам Цикл
		
		ТипОбъекта = ОбъектыПоТипу.Ключ;
		СписокОбъектов = ОбъектыПоТипу.Значение;
		
		ПодписиДляОбъектов = Новый Соответствие;
		ДополнитьПодписямиОрганизацийСкладовИзОбъектов(ПодписиДляОбъектов, ТипОбъекта, СписокОбъектов);
		
		ПодписантыВОбъектах = ПодписантыВОбъектах(ТипОбъекта, СписокОбъектов);
		
		ДополнитьПодписантовВОбъектахПодписямиПараметровВывода(ПодписантыВОбъектах, ПараметрыВывода);
		
		Для Каждого СсылкаНаОбъект Из СписокОбъектов Цикл
			
			КомплектПодписейИПечатей = Новый Структура;
			
			КомплектПодписейИПечатейДокумента = ПодписантыВОбъектах.Получить(СсылкаНаОбъект);
			Если ЗначениеЗаполнено(КомплектПодписейИПечатейДокумента) Тогда
				
				Для Каждого КлючЗначение Из КомплектПодписейИПечатейДокумента Цикл
					
					Подписант = КлючЗначение.Значение;
					
					Если Не ЗначениеЗаполнено(Подписант) Тогда
						Продолжить;
					КонецЕсли;
					
					ФаксимилеПодписанта = ПодписиФизическихЛиц.Получить(Подписант);
					Если ФаксимилеПодписанта = Неопределено Тогда
						ДвоичныеДанныеПодписи = ДвоичныеДанныеФаксимилеФизическогоЛица(Подписант);
						Если ДвоичныеДанныеПодписи <> Неопределено Тогда
							ФаксимилеПодписанта = Новый Картинка(ДвоичныеДанныеПодписи);
							ПодписиФизическихЛиц.Вставить(Подписант, ФаксимилеПодписанта);
						КонецЕсли;
					КонецЕсли;
					
					Если ФаксимилеПодписанта <> Неопределено Тогда
						КомплектПодписейИПечатей.Вставить(ИмяФаксимилеПоПодписанту(КлючЗначение.Ключ), ФаксимилеПодписанта);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Дополним факсимиле подписями для руководителей организаций, если они не указаны
			// в документе.
			КомплектПодписейИПечатейОрганизации = ПодписиДляОбъектов.Получить(СсылкаНаОбъект);
			Если ЗначениеЗаполнено(КомплектПодписейИПечатейОрганизации) Тогда
				Для Каждого КлючЗначение Из КомплектПодписейИПечатейОрганизации Цикл
					
					ИмяПодписанта = ИмяПодписантаПоФаксимиле(КлючЗначение.Ключ);
					Если ЗначениеЗаполнено(КомплектПодписейИПечатейДокумента)
						И КомплектПодписейИПечатейДокумента.Свойство(ИмяПодписанта) Тогда
						Продолжить;
					КонецЕсли;
					
					КомплектПодписейИПечатей.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
					
				КонецЦикла;
			КонецЕсли;
			
			ДополнитьКомплектПодписейИПечатейДублямиФаксимиле(КомплектПодписейИПечатей);
			
			ПодписиИПечати.Вставить(СсылкаНаОбъект, КомплектПодписейИПечатей);
			
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОбъединитьОбъектыПечатиФаксимиле(ОбъектыПечатиДляФаксимилеБП, ОбъектыПечатиБСП) Экспорт
	
	ОбъектыПечати = ОбъектыПечатиДляФаксимилеБП.Скопировать();
	Для Каждого ОбъектПечатиБСП Из ОбъектыПечатиБСП Цикл
		// Ищем представление для каждого объекта печати из БСП в нашем.
		// Если находим - то ничего не делаем, наш объект печати важнее.
		// Если не находим - добавляем, т.к. не все объекты добавляются в ОбъектыПечатиДляФаксимилеБП,
		// а только те, которые нужно переопределить.
		Для Каждого ОбъектПечатиДляФаксимилеБП Из ОбъектыПечатиДляФаксимилеБП Цикл
			Если ВРег(ОбъектПечатиДляФаксимилеБП.Представление) = ВРег(ОбъектПечатиБСП.Представление) Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ОбъектыПечати.Добавить(ОбъектПечатиБСП.Значение, ОбъектПечатиБСП.Представление);
		
	КонецЦикла;
		
	Возврат ОбъектыПечати;
	
КонецФункции

Функция ИмяФаксимилеПоПодписанту(ИмяПодписанта)
	
	Возврат ПрефиксФаксимиле() + ИмяПодписанта;
	
КонецФункции

Функция ИмяПодписантаПоФаксимиле(ИмяФаксимиле)
	
	ПрефиксФаксимиле = ПрефиксФаксимиле();
	ДлинаПрефиксаФаксимиле = СтрДлина(ПрефиксФаксимиле);
	
	Если ВРег(Лев(ИмяФаксимиле, ДлинаПрефиксаФаксимиле)) = ВРег(ПрефиксФаксимиле) Тогда
		Возврат Сред(ИмяФаксимиле, ДлинаПрефиксаФаксимиле + 1);
	Иначе
		Возврат ИмяФаксимиле;
	КонецЕсли;
	
КонецФункции

Функция ПрефиксФаксимиле()
	Возврат "Факсимиле";
КонецФункции

Функция ОбъектыПоТипам(СписокОбъектов)
	
	ОбъектыПоТипам = Новый Соответствие;
	Для Каждого ОбъектСписка Из СписокОбъектов Цикл
		ТипОбъекта = ТипЗнч(ОбъектСписка);
		Если ОбъектыПоТипам[ТипОбъекта] = Неопределено Тогда
			ОбъектыПоТипам[ТипОбъекта] = Новый Массив;
		КонецЕсли;
		ОбъектыПоТипам[ТипОбъекта].Добавить(ОбъектСписка);
	КонецЦикла;
	
	Возврат ОбъектыПоТипам;
	
КонецФункции

Процедура ДополнитьПодписямиОрганизацийСкладовИзОбъектов(ПодписиДляОбъектов, ТипОбъекта, СписокОбъектов)
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	ЕстьРеквизитыДляФаксимиле = Ложь;
	РеквизитыДляЗапроса = Новый Массив;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
		РеквизитыДляЗапроса.Добавить("Организация");
		ЕстьРеквизитыДляФаксимиле = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
		РеквизитыДляЗапроса.Добавить("Склад");
		ЕстьРеквизитыДляФаксимиле = Истина;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта)
		Или ОбщегоНазначения.ЕстьРеквизитОбъекта("Дата", МетаданныеОбъекта) Тогда
		РеквизитыДляЗапроса.Добавить("Дата");
	КонецЕсли;
	
	Если Не ЕстьРеквизитыДляФаксимиле Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокОбъектов, СтрСоединить(РеквизитыДляЗапроса, ","));
	
	ЗаполнитьФаксимилеОрганизаций(ПодписиДляОбъектов, РеквизитыОбъектов);
	
	ЗаполнитьФаксимилеСкладов(ПодписиДляОбъектов, РеквизитыОбъектов);
	
КонецПроцедуры

Процедура ДополнитьПодписантовВОбъектахПодписямиПараметровВывода(ПодписантыВОбъектах, ПараметрыВывода)
	
	Если Не ЗначениеЗаполнено(ПараметрыВывода) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыВывода.Свойство("ПодписиДляФаксимилеВДокументахБП") Тогда
		Возврат;
	КонецЕсли;
	
	// В некоторых случаях подписанты определяются сложным образом.
	// Например, в УПД кладовщик для документов с товарами определяется как кладовщик,
	// а для документов без товаров - как исполнитель. Повторить эту логику не получится,
	// т.к. при получении факсимиле мы не знаем, для какой печатной формы формируем факсимиле.
	// Поэтому при печати УПД мы переопределяем кладовщика по данным печатной формы.
	// А здесь перезаписываем то, что получилось.
	
	ПодписиДляФаксимилеВДокументахБП = ПараметрыВывода.ПодписиДляФаксимилеВДокументахБП;
	Для Каждого ПодписантыИзДокумента Из ПодписиДляФаксимилеВДокументахБП Цикл
		ПодписантыОбъектов = ПодписантыВОбъектах.Получить(ПодписантыИзДокумента.Ключ);
		Если Не ЗначениеЗаполнено(ПодписантыОбъектов) Тогда
			ПодписантыОбъектов = Новый Структура;
			ПодписантыВОбъектах.Вставить(ПодписантыИзДокумента.Ключ, ПодписантыОбъектов);
		КонецЕсли;
		
		Для Каждого ПодписантИзОбъектов Из ПодписантыИзДокумента.Значение Цикл
			ПодписантыОбъектов.Вставить(ПодписантИзОбъектов.Ключ, ПодписантИзОбъектов.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФаксимилеОрганизаций(ПодписиДляОбъектов, РеквизитыОбъектов)
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
		Если Не РеквизитыОбъекта.Значение.Свойство("Организация")
			Или Не ЗначениеЗаполнено(РеквизитыОбъекта.Значение.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаОрганизаций.Добавить(), РеквизитыОбъекта.Значение);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОрганизаций.Свернуть("Организация,Дата");
	ТаблицаОрганизаций.Колонки.Добавить("ПечатиИПодписи");
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		
		ДатаСведений = ?(ЗначениеЗаполнено(СтрокаОрганизации.Дата), СтрокаОрганизации.Дата, Неопределено);
		СтрокаОрганизации.ПечатиИПодписи = Справочники.Организации.ПодписиИПечатиОрганизации(СтрокаОрганизации.Организация, ДатаСведений);
		
	КонецЦикла;
	
	Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Значение.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Организация", РеквизитыОбъекта.Значение.Организация);
		// Т.к. в таблице ТаблицаОрганизаций тип даты - дата без времени, то и здесь нужно привести дату к началу дня.
		ОтборСтрок.Вставить("Дата", ?(РеквизитыОбъекта.Значение.Свойство("Дата"), НачалоДня(РеквизитыОбъекта.Значение.Дата), '00010101'));
		
		СтрокиОрганизацииНаДату = ТаблицаОрганизаций.НайтиСтроки(ОтборСтрок);
		Если СтрокиОрганизацииНаДату.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиОрганизацииНаДату[0]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиОрганизацииНаДату[0].ПечатиИПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ФаксимилеДляДокумента = ПодписиДляОбъектов.Получить(РеквизитыОбъекта.Ключ);
		Если ФаксимилеДляДокумента = Неопределено Тогда
			ФаксимилеДляДокумента = Новый Структура;
			ПодписиДляОбъектов.Вставить(РеквизитыОбъекта.Ключ, ФаксимилеДляДокумента);
		КонецЕсли;
		
		Для Каждого ПодписьИПечать Из СтрокиОрганизацииНаДату[0].ПечатиИПодписи Цикл
			ФаксимилеДляДокумента.Вставить(ПодписьИПечать.Ключ, ПодписьИПечать.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФаксимилеСкладов(ПодписиДляОбъектов, РеквизитыОбъектов)
	
	ТаблицаСкладов = Новый ТаблицаЗначений;
	ТаблицаСкладов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСкладов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
		
		Если Не РеквизитыОбъекта.Значение.Свойство("Склад")
			Или Не ЗначениеЗаполнено(РеквизитыОбъекта.Значение.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаСкладов.Добавить(), РеквизитыОбъекта.Значение);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаСкладов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСкладов.Свернуть("Склад,Дата");
	ТаблицаСкладов.Колонки.Добавить("ПодписьКладовщика");
	
	Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
		
		ДатаСведений = ?(ЗначениеЗаполнено(СтрокаСклада.Дата), СтрокаСклада.Дата, Неопределено);
		МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(СтрокаСклада.Склад, ДатаСведений);
		Если ЗначениеЗаполнено(МОЛ) Тогда
			ДвоичныеДанныеПодписи = ДвоичныеДанныеФаксимилеФизическогоЛица(МОЛ);
			Если ДвоичныеДанныеПодписи <> Неопределено Тогда
				СтрокаСклада.ПодписьКладовщика = Новый Картинка(ДвоичныеДанныеПодписи);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Значение.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Склад", РеквизитыОбъекта.Значение.Склад);
		// Т.к. в таблице ТаблицаСкладов тип даты - дата без времени, то и здесь нужно привести дату к началу дня.
		ОтборСтрок.Вставить("Дата", ?(РеквизитыОбъекта.Значение.Свойство("Дата"), НачалоДня(РеквизитыОбъекта.Значение.Дата), '00010101'));
		
		СтрокиСкладаНаДату = ТаблицаСкладов.НайтиСтроки(ОтборСтрок);
		Если СтрокиСкладаНаДату.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиСкладаНаДату[0]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокиСкладаНаДату[0].ПодписьКладовщика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ФаксимилеДляДокумента = ПодписиДляОбъектов.Получить(РеквизитыОбъекта.Ключ);
		Если ФаксимилеДляДокумента = Неопределено Тогда
			ФаксимилеДляДокумента = Новый Структура;
			ПодписиДляОбъектов.Вставить(РеквизитыОбъекта.Ключ, ФаксимилеДляДокумента);
		КонецЕсли;
		
		ФаксимилеДляДокумента.Вставить("ФаксимилеКладовщик", СтрокиСкладаНаДату[0].ПодписьКладовщика);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодписантыВОбъектах(ТипОбъекта, СписокОбъектов)
	
	Если ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Возврат Документы.РеализацияТоваровУслуг.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Возврат Документы.КорректировкаРеализации.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		
		Возврат Документы.РеализацияОтгруженныхТоваров.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Возврат Документы.АктОбОказанииПроизводственныхУслуг.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		Возврат Документы.ОказаниеУслуг.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		Возврат Документы.РеализацияУслугПоПереработке.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Возврат Документы.СчетФактураВыданный.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Возврат Документы.СчетНаОплатуПокупателю.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		
		Возврат Документы.АктСверкиВзаиморасчетов.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Доверенность") Тогда
		
		Возврат Документы.Доверенность.ОпределитьПодписантов(СписокОбъектов);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложение") Тогда
		
		Возврат Документы.КоммерческоеПредложение.ОпределитьПодписантов(СписокОбъектов);
		
	КонецЕсли;
	
	Возврат Новый Соответствие;
	
КонецФункции

Процедура ДополнитьКомплектПодписейИПечатейДублямиФаксимиле(КомплектПодписейИПечатей)
	
	// В некоторых печатных формах одно факсимиле нужно выводить в нескольких местах.
	// Например, в РеализацияУслугПоПереработке.ПФ_MXL_ОтчетОПродукцииМатериалах ФаксимилеИсполнитель нужно
	// выводить в нескольких местах. Для этого добавлены три картинки:
	// ФаксимилеИсполнитель, ФаксимилеИсполнительНакладнаяМатериалы, ФаксимилеИсполнительНакладнаяУслуги.
	// Но выводятся в них все так же картинка для Исполнитель.
	// Поэтому, если в комплекте для факсимиле есть ФаксимилеИсполнитель, то нужно добавить и ее дубли.
	ДублиФаксимиле = ДублиФаксимиле();
	
	Для Каждого ДубльФаксимиле Из ДублиФаксимиле Цикл
		
		Если КомплектПодписейИПечатей.Свойство(ДубльФаксимиле.ИмяФаксимиле) Тогда
			
			Для Каждого ИмяДубляФаксимиле Из ДубльФаксимиле.ИменаДублей Цикл
				Если Не КомплектПодписейИПечатей.Свойство(ИмяДубляФаксимиле) Тогда
					КомплектПодписейИПечатей.Вставить(ИмяДубляФаксимиле, КомплектПодписейИПечатей[ДубльФаксимиле.ИмяФаксимиле]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДублиФаксимиле()
	
	Дубли = Новый ТаблицаЗначений;
	Дубли.Колонки.Добавить("ИмяФаксимиле", Новый ОписаниеТипов("Строка"));
	Дубли.Колонки.Добавить("ИменаДублей", Новый ОписаниеТипов("Массив"));
	
	ДублиФаксимилеИсполнитель = Дубли.Добавить();
	ДублиФаксимилеИсполнитель.ИмяФаксимиле = "ФаксимилеИсполнитель";
	ДублиФаксимилеИсполнитель.ИменаДублей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	ДублиФаксимилеИсполнитель.ИменаДублей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	
	ДублиФаксимилеРуководитель = Дубли.Добавить();
	ДублиФаксимилеРуководитель.ИмяФаксимиле = "ФаксимилеРуководитель";
	ДублиФаксимилеРуководитель.ИменаДублей.Добавить("ФаксимилеРуководительНакладная");
	ДублиФаксимилеРуководитель.ИменаДублей.Добавить("ФаксимилеРуководительСчетФактура");
	ДублиФаксимилеРуководитель.ИменаДублей.Добавить("ФаксимилеПредприниматель");
	
	// Дубли факсимиле руководителя для счета-фактуры должны идти после ФаксимилеРуководитель
	// Т.к. если ФаксимилеРуководительСчетФактура не будет заполнен, то он установится из ФаксимилеРуководитель
	// в строке выше
	ДублиФаксимилеРуководительСчетФактура = Дубли.Добавить();
	ДублиФаксимилеРуководительСчетФактура.ИмяФаксимиле = "ФаксимилеРуководительСчетФактура";
	ДублиФаксимилеРуководительСчетФактура.ИменаДублей.Добавить("ФаксимилеПредпринимательСчетФактура");
	
	ДублиФаксимилеГлавныйБухгалтер = Дубли.Добавить();
	ДублиФаксимилеГлавныйБухгалтер.ИмяФаксимиле = "ФаксимилеГлавныйБухгалтер";
	ДублиФаксимилеГлавныйБухгалтер.ИменаДублей.Добавить("ФаксимилеГлавныйБухгалтерСчетФактура");
	
	ДублиФаксимилеКладовщик = Дубли.Добавить();
	ДублиФаксимилеКладовщик.ИмяФаксимиле = "ФаксимилеКладовщик";
	ДублиФаксимилеКладовщик.ИменаДублей.Добавить("ФаксимилеКладовщикУПД");
	
	ДублиФаксимилеОтветственныйЗаОформление = Дубли.Добавить();
	ДублиФаксимилеОтветственныйЗаОформление.ИмяФаксимиле = "ФаксимилеОтветственныйЗаОформление";
	ДублиФаксимилеОтветственныйЗаОформление.ИменаДублей.Добавить("ФаксимилеОтветственныйЗаОформлениеУПД");
	ДублиФаксимилеОтветственныйЗаОформление.ИменаДублей.Добавить("ФаксимилеОтветственныйЗаОформлениеУКД");
	
	ДублиФаксимилеПечать = Дубли.Добавить();
	ДублиФаксимилеПечать.ИмяФаксимиле = "ФаксимилеПечать";
	ДублиФаксимилеПечать.ИменаДублей.Добавить("ФаксимилеПечатьПредприниматель");
	
	ДублиФаксимильнаяПечать = Дубли.Добавить();
	ДублиФаксимильнаяПечать.ИмяФаксимиле = "ФаксимилеФаксимильнаяПечать";
	ДублиФаксимильнаяПечать.ИменаДублей.Добавить("ФаксимилеФаксимильнаяПечатьПредприниматель");
	
	Возврат Дубли;
	
КонецФункции

// Устарела. Следует использовать УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать() и 
// УправлениеПечатьюБП.ПриПолученииПодписейИПечатей()
// Процедура готовит область факсимиле в печатных формах,
// которые сформированы на экране.
//
// Параметры:
//  ОбластьМакета      - ФормаКлиентскогоПриложения.
//  СведенияОДокументе - Строка таблицы значений, выборка из запроса.
//  ОбъектыПечати      - Список значений.
//  ПараметрыПечати    - Структура, дополнительные праметры печати
//						 хранит в частности адрес факсимиле во временном хранилище 
//
Процедура ДополнитьДокументПодписьюИПечатью(ОбластьМакета, СведенияОДокументе, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Процедура оставлена для обратной совместимости печати из внешних печатных форм.
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФаксимилеПриПечати

// Возвращает настройки факсимиле в зависимости от имени макета.
// Если имя макета пустая строка, то возвращается общая настройка печати факсимиле.
//
// Параметры:
//  ИмяМакета	 - Строка - Имя макета, для которой нужно вернуть настройку.
//                          Может быть пустой строкой, тогда возвращается общая настройка без привязки к макету.
// 
// Возвращаемое значение:
//   - Структура - Настройка подписи и печати.
//
Функция НастройкиПодписиИПечати(ИмяМакета = "") Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ВыводитьФаксимиле", Ложь);
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если НастройкиВыводаФаксимиле <> Неопределено Тогда
		
		ВыводитьФаксимиле = Неопределено;
		
		// ИмяМакета может содержать текст, недопустимый для использования в роли ключа для структуры,
		// поэтому оборачиваем в Попытку..Исключение.
		Попытка
			НастройкиВыводаФаксимиле.Свойство("ВыводитьФаксимиле" + ИмяМакета, ВыводитьФаксимиле);
		Исключение
		КонецПопытки;
		
		Если ВыводитьФаксимиле <> Неопределено Тогда
			Настройки.ВыводитьФаксимиле = ВыводитьФаксимиле;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Сохраняет настройки подписи и печати.
//
// Параметры:
//  ВыводитьФаксимиле			 - Булево, Неопределено - Признак, что нужно выводить факсимиле.
//                                 Если указано Неопределено, то признак вывода факсимиле не будет сохраняться.
//  ИмяМакета					 - Строка - Имя макета, для которого будет сохранена настройка. Если пустая строка - то будет сохранена только общая настройка.
//
Процедура СохранитьНастройкиПодписиИПечати(ВыводитьФаксимиле, ИмяМакета = "") Экспорт
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если НастройкиВыводаФаксимиле = Неопределено Тогда
		НастройкиВыводаФаксимиле = Новый Структура;
	КонецЕсли;
	
	Если ВыводитьФаксимиле <> Неопределено
		И ТипЗнч(ВыводитьФаксимиле) = Тип("Булево") Тогда
		
		// Общая настройка сохраняется всегда, даже если заполнено ИмяМакета.
		НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле", ВыводитьФаксимиле);
		Если ЗначениеЗаполнено(ИмяМакета) Тогда
			НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле" + ИмяМакета, ВыводитьФаксимиле);
		КонецЕсли;
		
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле", НастройкиВыводаФаксимиле);
	
КонецПроцедуры

// Процедура дополняет форму ПечатьДокументов элементами управления.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма) Экспорт
	
	СообщитьПроДополнительныеУсловияОтчетаКомитенту(Форма);
	
	ПроверитьУдалитьРекламуПодключенияДиректБанкаКСчетуИнтеграции(Форма);
	
	ДокументыДляПечати = ДокументыДляПечатиИзНастроек(Форма.НастройкиПечатныхФорм);
	
	Если ДокументыДляПечати.Количество() = 1 Тогда
		УдалитьИзЗаголовкаНеПолученныйНомерППИнтеграцияСБанком(Форма, ДокументыДляПечати[0]);
	КонецЕсли;
	
	// Определим - есть ли формы с факсимиле
	// Сначала определяем, документы ли выведены на печать или нет
	// Если на печати документы, то определяем, можно ли выводить факсимиле
	// и настраиваем форму для вывода факсимиле.
	Если ЕстьПечатныеФормыСПодписьюИПечатью(Форма.НастройкиПечатныхФорм) Тогда
		НастроитьПодписьИПечать(Форма, ДокументыДляПечати);
	КонецЕсли;
	
	СервисЭлектронныхТрудовыхКнижек.ПечатьДокументовПриСозданииНаСервере(Форма);
	
	ПерсонализированныеПредложенияСервисов.ПечатьДокументовПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Процедура дополняет обработчик закрытия формы ПечатьДокументов
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура СохранитьНастройкиПечатиПриЗакрытии(Форма) Экспорт
	
	ЭлементГруппаПодписьИПечать = Форма.Элементы.Найти(ИмяГруппыПодписьИПечать());
	
	Если ЭлементГруппаПодписьИПечать <> Неопределено
		И ЭлементГруппаПодписьИПечать.Видимость Тогда
		
		ВыводитьФаксимиле = Неопределено;
		ИмяМакета = "";
		Если НЕ ЭлементГруппаПодписьИПечать.ТолькоПросмотр Тогда
			
			ВыводитьФаксимиле = Форма.ПодписьИПечать;
			
			Если Форма.Элементы.Найти("НастройкиПечатныхФорм") <> Неопределено Тогда
				ИмяМакета = ИмяМакетаНастройкиПечатныхФорм(Форма.НастройкиПечатныхФорм);
			КонецЕсли;
			
		КонецЕсли;
		
		СохранитьНастройкиПодписиИПечати(ВыводитьФаксимиле, ИмяМакета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНастройкиПечатиПриЗагрузкеДанныхИзНастроек(Форма, Настройки) Экспорт
	
	ИмяМакета = ИмяМакетаНастройкиПечатныхФорм(Форма.НастройкиПечатныхФорм);
	НастройкиПодписиИПечати = НастройкиПодписиИПечати(ИмяМакета);
	
	Форма.ПодписьИПечать = НастройкиПодписиИПечати.ВыводитьФаксимиле = Истина;
	
КонецПроцедуры

Функция ИмяГруппыПодписьИПечать()
	Возврат "ГруппаПодписьИПечатьБП";
КонецФункции

#КонецОбласти

#Область ДобавлениеФаксимилеПриОтправке

// Процедура определяет возможность добавление факсимиле в форму отправки
//
// Параметры:
//  АдресВоВременномХранилище - Строка
//  ПараметрыФаксимиле        - Структура, параметры отрисовки команды:
//   * ВыводитьПодписьИПечать - Булево - можно вывести факсимиле;
//   * ПредложитьНастроить    - Булево - необходимо настроить факсимиле.
//
Процедура ПолучитьПараметрыФаксимилеПриОтправке(АдресВоВременномХранилище, ПараметрыФаксимиле) Экспорт
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	НаборПечатныхФорм  = ИсходныеДанные.НаборПечатныхФорм;
	
	СкрыватьПодписиИПечати = УправлениеПечатью.НастройкиПечати().СкрыватьПодписиИПечатиДляРедактирования;
	
	ЕстьМакетыСПодписьюИПечатью = Ложь;
	Для Каждого ДанныеПечати ИЗ НаборПечатныхФорм Цикл
		
		СписокДокументов = ДанныеПечати.ОбъектыПечати;
		Если СписокДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПечати.Свойство("ДанныеПодписейИПечатей") Тогда
			Если ЗначениеЗаполнено(ДанныеПечати.ДанныеПодписейИПечатей) Тогда
				ЕстьМакетыСПодписьюИПечатью = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТабличныйДокумент ИЗ ДанныеПечати.ТабличныеДокументы Цикл
			
			РабочаяПечатнаяФорма = ТабличныйДокумент.Значение;
			Если ЕстьПодписьИПечать(РабочаяПечатнаяФорма) Тогда
				ЕстьМакетыСПодписьюИПечатью = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьМакетыСПодписьюИПечатью Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьМакетыСПодписьюИПечатью Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	Для Каждого ДанныеПечати ИЗ НаборПечатныхФорм Цикл
		СписокТабличныхДокументов = ДанныеПечати.ТабличныеДокументы;
		СписокДокументов          = ДанныеПечати.ОбъектыПечати;
		МассивДокументовВременный = СписокДокументов.ВыгрузитьЗначения();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, МассивДокументовВременный, Истина);
	КонецЦикла;
	
	ПараметрыФаксимиле = ПроверитьЗаполнениеПечатиПодписейОрганизации(МассивДокументов);
	ПараметрыФаксимиле.Вставить("ВыводитьПодписьИПечать", Истина);
	
КонецПроцедуры

// Процедура добавляет факсимиле в формы отправки
//
// Параметры:
//  ПечатныеФормы - Массив печатных форм.
//
Процедура ДобавитьФаксимилеПриОтправке(НаборПечатныхФорм) Экспорт
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	Для Каждого ДанныеПечати ИЗ НаборПечатныхФорм Цикл
		
		СписокДокументов = ДанныеПечати.ОбъектыПечати;
		Если СписокДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписейИПечатей = Неопределено;
		Если ДанныеПечати.Свойство("ДанныеПодписейИПечатей") Тогда
			ДанныеПодписейИПечатей = ДанныеПечати.ДанныеПодписейИПечатей;
		КонецЕсли;
		
		ДобавитьФаксимилеВПечатнуюФорму(
			ДанныеПечати.ТабличныеДокументы, ДанныеПечати.ОбъектыПечати, ДанныеПечати.ПараметрыВывода, ДанныеПодписейИПечатей);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьПодписиИПечатиТабличныхДокументов(НаборПечатныхФорм) Экспорт
	
	ПодписиИПечати = Новый Структура;
	
	СкрыватьПодписиИПечати = УправлениеПечатью.НастройкиПечати().СкрыватьПодписиИПечатиДляРедактирования;
	
	Для Каждого ДанныеПечати Из НаборПечатныхФорм Цикл
		
		ДанныеПодписиИПечатиТабличныхДокументов = Новый Массив;
		
		Для Каждого ТабличныйДокументСписок Из ДанныеПечати.ТабличныеДокументы Цикл
			ТабличныйДокумент = ТабличныйДокументСписок.Значение;
			РисункиТабличногоДокумента = ПодписиИПечатиТабличногоДокумента(ТабличныйДокумент);
			ДанныеПодписиИПечатиТабличныхДокументов.Добавить(РисункиТабличногоДокумента);
			
			УправлениеПечатью.УбратьПодписьИПечать(ТабличныйДокумент, СкрыватьПодписиИПечати);
		КонецЦикла;
		
		ДанныеПечати.Вставить("ДанныеПодписейИПечатей", ДанныеПодписиИПечатиТабличныхДокументов);
		
	КонецЦикла;
	
	Возврат ПодписиИПечати;
	
КонецФункции

#КонецОбласти

// Процедура добавляет подсказку элемента управления выводом факсимиле,
// а также управляет его доступностью и фоном
//
// Параметры:
//  Элемент - Элемент формы.
//  Группа  - Группа формы.
//
Процедура ОформитьВыводРеквизитаПодписьИПечать(Элемент, Группа, ПараметрыВывода) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Если ПараметрыВывода.НужноЗаполнить Тогда
		
		Группа.ТолькоПросмотр = Истина;	
		
		Если ПараметрыВывода.ПредложитьНастроить И ЗначениеЗаполнено(ПараметрыВывода.Организация) Тогда	
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Сначала настройте печать и подписи руководителей в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = ', затем сформируйте печатную форму снова'")));
		ИначеЕсли НЕ ПараметрыВывода.ПредложитьНастроить И ЗначениеЗаполнено(ПараметрыВывода.Организация) Тогда	
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
		Иначе
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в Реквизитах организации'")));
		КонецЕсли;
			
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыВывода.Организация)  Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
		Иначе
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в Реквизитах организации'")));
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = '
			|'")));
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Подписи сотрудников настраиваются в карточке сотрудника.'")));
	
	Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

// Функция проверяет использоваие измененного "старого" макета
// Параметры:
//  Ссылка - Документ.Ссылка.
// Возвращаемое значение:
//  Булево - признак того, что есть измененные макеты без областей для нового механизма факсимиле
//           Истина - есть измененные макеты
//           Ложь   - нет измененных макетов
//  
Функция ИспользуетсяИзмененныйМакет(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		ИмяОбъекта = "Документ.АктСверкиВзаиморасчетов";
		ИмяМакета  = "ПФ_MXL_АктСверки";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИмяОбъекта = "ОбщийМакет";
		ИмяМакета  = "ПФ_MXL_СчетЗаказ";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Доверенность") Тогда
		ИмяОбъекта = "ОбщийМакет";
		ИмяМакета  = "ПФ_MXL_М2";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтарыхИмен = Новый Массив;
	МассивСтарыхИмен.Добавить("Печать");
	МассивСтарыхИмен.Добавить("Подпись");
	МассивСтарыхИмен.Добавить("ПодписьРуководителя");
	МассивСтарыхИмен.Добавить("ПодписьГлавногоБухгалтера");
	МассивСтарыхИмен.Добавить("ПечатьПредпринимателя");
	МассивСтарыхИмен.Добавить("ПодписьПредпринимателя");
	
	МассивНовыхИмен = МассивИменПоказателейФаксимиле();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Запрос.УстановитьПараметр("ИмяМакета",  ИмяМакета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект КАК Объект,
	|	ПользовательскиеМакетыПечати.Макет КАК Макет
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект = &ИмяОбъекта
	|	И ПользовательскиеМакетыПечати.ИмяМакета = &ИмяМакета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Макет = Выборка.Макет.Получить();
		Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда			
			Продолжить;
		Иначе
			Для Каждого ИмяПоказателя ИЗ МассивСтарыхИмен Цикл
				Если Макет.Области.Найти(ИмяПоказателя) <> Неопределено Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ИмяПоказателя ИЗ МассивНовыхИмен Цикл
				Если Макет.Области.Найти(ИмяПоказателя) <> Неопределено Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если для макета с указанным именем зарегистрирован пользовательский макет.
//
// Параметры:
// ПроверяемыеМакеты  - Массив - Проверяемые имена макетов.
//                               Имена макетов  - Строка, Пример: "ПФ_MXL_БухгалтерскаяСправка".
// ПроверяемыеОбъекты - Массив - Проверяемые имена объектов, которым принадлежат макеты.
//                               Имена объектов - Строка, Пример: "Документ.ОперацияБух".
// ИменаНовыхОбластей - Массив - Имена областей, которые должны быть в макетах, чтобы считать, что макет актуальный.
//                               Имена областей - Строка, Пример: "ЗаголовокТаблицыПБУ18".
//
// Возвращаемое значение:
// Булево - Истина, если среди проверяемых макетов есть хотя бы один измененный, 
//  в котором отсутствуют искомые новые области.
//
Функция ИспользуютсяИзмененныеМакеты(ПроверяемыеМакеты, ПроверяемыеОбъекты, ИменаНовыхОбластей) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	Запрос.УстановитьПараметр("ПроверяемыеМакеты",  ПроверяемыеМакеты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект КАК Объект,
	|	ПользовательскиеМакетыПечати.Макет КАК Макет
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект В (&ПроверяемыеОбъекты)
	|	И ПользовательскиеМакетыПечати.ИмяМакета В (&ПроверяемыеМакеты)
	|	И ПользовательскиеМакетыПечати.Использование";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		Макет = Выборка.Макет.Получить();
		Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из ИменаНовыхОбластей Цикл
			Если Макет.Области.Найти(ИмяПоказателя) = Неопределено Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает двоичные данные картинки присоединенного файла факсимиле к физическому лицу
//
// Параметры:
//  ФизическоеЛицо - Ссылка на физическое лицо, к которой присоединена картинка
Функция ДвоичныеДанныеФаксимилеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Попытка
			ПрисоединенныйФайл = ПрисоединенныйФайлФаксимилеФизическогоЛица(ФизическоеЛицо);
			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
				ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ФизическиеЛица, ФизическоеЛицо,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ПрисоединенныйФайлФаксимилеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ПрисоединенныйФайл = Справочники.Файлы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФаксимилеПодписи");
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументыДляПечатиИзНастроек(НастройкиПечатныхФорм)
	
	ДокументыДляПечати = Новый Массив;
	
	Для НомерСтроки = 1 ПО НастройкиПечатныхФорм.Количество() Цикл
		
		СписокДокументов = ПолучитьСписокДокументов(НастройкиПечатныхФорм[НомерСтроки-1]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляПечати, СписокДокументов.ВыгрузитьЗначения(), Истина);
		
	КонецЦикла;
	
	Возврат ДокументыДляПечати;
	
КонецФункции

Процедура НастроитьПодписьИПечать(Форма, ДокументыДляПечати)
	
	РезультатПроверки = ПроверитьЗаполнениеПечатиПодписейОрганизации(ДокументыДляПечати);
	
	ДобавитьРеквизитФормыОрганизация(Форма, РезультатПроверки);
	
	ДобавитьФлажокПодписиИПечати(Форма, РезультатПроверки);
	
	ИмяМакета = ИмяМакетаНастройкиПечатныхФорм(Форма.НастройкиПечатныхФорм);
	НастройкиПодписиИПечати = НастройкиПодписиИПечати(ИмяМакета);
	
	Если НастройкиПодписиИПечати.ВыводитьФаксимиле = Истина
		И НЕ РезультатПроверки.НужноЗаполнить Тогда 
		Форма.ПодписьИПечать = Истина;
	КонецЕсли;
	
	// Постобработка
	Если НЕ Форма.Элементы.ГруппаНастройкаКомплектаКоманднаяПанель.Видимость Тогда
		Форма.Элементы.НастройкиПечатныхФорм.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПечатныеФормыСПодписьюИПечатью(НастройкиПечатныхФорм)
	
	// Функция скопирована из общей формы ПечатьДокументов.
	// Она должна совпадать с ней и возвращать такой же результат.
	
	Результат = Ложь;
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		Результат = Результат Или НастройкаПечатнойФормы.ПодписьИПечать;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЕстьПодписьИПечать(ТабличныйДокумент)
	
	// Функция скопирована из общей формы ПечатьДокументов.
	// Она должна совпадать с ней и возвращать такой же результат.
	
	Если Не УправлениеПечатью.НастройкиПечати().ИспользоватьПодписиИПечати Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		Для Каждого Префикс Из УправлениеПечатью.ПрефиксыИменОбластейСПодписьюИПечатью() Цикл
			Если СтрНачинаетсяС(Рисунок.Имя, Префикс) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьФлажокПодписиИПечати(Форма, РезультатПроверки)
	
	ФлагПодписьИПечать =  Форма.Элементы.Найти("ФлажокПодписьИПечать");
	Если ФлагПодписьИПечать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагПодписьИПечать.Видимость = Ложь Тогда
		// В форме БСП флаг "Подпись и печать" устанавливается в Ложь,
		// если на форме есть элементы для вывода факсимиле, но самих факсимиле нет.
		// Но мы выводим этот флаг всегда, т.к. в подсказке мы отправляем в организацию для установки флажка.
		ФлагПодписьИПечать.Видимость = Истина;
	КонецЕсли;
	
	// Добавляем группу для размещения элемента, связанного с реквизитом
	ГруппаПодписьИПечать = Форма.Элементы.Вставить(ИмяГруппыПодписьИПечать(), Тип("ГруппаФормы"),
		Форма.Элементы.ГруппаКоманднаяПанель, Форма.Элементы.КоманднаяПанельПраваяЧасть);
	ГруппаПодписьИПечать.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПодписьИПечать.ОтображатьЗаголовок      = Ложь;
	ГруппаПодписьИПечать.Отображение              = ОтображениеОбычнойГруппы.Нет;
	ГруппаПодписьИПечать.ЦветФона                 = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	ГруппаПодписьИПечать.Ширина                   = 16;
	ГруппаПодписьИПечать.РастягиватьПоГоризонтали = Ложь;	
	
	// Перемещаем БСП-ый флажок в нашу новую группу.
	Форма.Элементы.Переместить(ФлагПодписьИПечать, ГруппаПодписьИПечать);
	
	ОформитьВыводРеквизитаподписьИПечать(ФлагПодписьИПечать, ГруппаПодписьИПечать, РезультатПроверки);
	
КонецПроцедуры

Процедура ДобавитьРеквизитФормыОрганизация(Форма, РезультатПроверки)
	
	Если ЗначениеЗаполнено(РезультатПроверки.Организация) Тогда
		
		ИмяРеквизитаОрганизация = "Организация";
		НовыеРеквизитыФормы = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизитаОрганизация,
			Новый ОписаниеТипов("СправочникСсылка.Организации"),
			,
			НСтр("ru = 'Организация'"));
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
		Форма[ИмяРеквизитаОрганизация] = РезультатПроверки.Организация;
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ИмяМакетаНастройкиПечатныхФорм(НастройкиПечатныхФорм)
	
	ИмяМакета = "";
	Если НастройкиПечатныхФорм.Количество() = 1 Тогда
		ИмяМакета = НастройкиПечатныхФорм[0].ИмяМакета;
		ИмяМакета = СтрЗаменить(ИмяМакета, ".", "");
	КонецЕсли;
	
	Возврат ИмяМакета;
	
КонецФункции

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеПредпринимательСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтерСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформлениеУПД");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформлениеУКД");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщикУПД");
	МассивИменПоказателей.Добавить("ФаксимилеДоверенноеЛицо");
	// для совместимости - подвал Счета
	МассивИменПоказателей.Добавить("ФаксимилеФаксимильнаяПечать");
	МассивИменПоказателей.Добавить("ФаксимилеФаксимильнаяПечатьПредприниматель");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

Функция ПолучитьСписокДокументов(НастройкаПечатныхФорм)
	
	СписокДокументов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы) Тогда
		СоответствиеДокументов = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы);
		Если ТипЗнч(СоответствиеДокументов) = Тип("Соответствие") Тогда
			Для Каждого ЗначениеСоответствия Из СоответствиеДокументов Цикл
				СписокДокументов.Добавить(ЗначениеСоответствия.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы)
	
	ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(ДокументПечатнойФормы);
	Возврат ДанныеОбласти.Представление;
	
КонецФункции

Процедура ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле, ИмяОсновногоФаксимиле, ИмяДублирующегоФаксимиле, ИспользоватьОсновноеФаксимиле)
	
	ИмяДублирующегоРисункаФаксимиле = ИмяОбластиФаксимилеДокумента(ИмяДублирующегоФаксимиле, СуффиксРисункаФаксимиле);
	ИмяОсновногоРисункаФаксимиле = ИмяОбластиФаксимилеДокумента(ИмяОсновногоФаксимиле, СуффиксРисункаФаксимиле);
	
	ОбластьДублирующегоФаксимиле = ТабличныйДокумент.Области.Найти(ИмяДублирующегоРисункаФаксимиле);
	Если ОбластьДублирующегоФаксимиле = Неопределено Тогда
		// Дублирования факсимиле нет, поэтому и делать ничего не нужно.
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОсновноеФаксимиле Тогда
		ТабличныйДокумент.Рисунки.Удалить(ОбластьДублирующегоФаксимиле.Имя);
	Иначе
		ОбластьОсновногоФаксимиле = ТабличныйДокумент.Области.Найти(ИмяОсновногоРисункаФаксимиле);
		Если ОбластьОсновногоФаксимиле <> Неопределено Тогда
			ТабличныйДокумент.Рисунки.Удалить(ОбластьОсновногоФаксимиле.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбластиФаксимилеДокумента(ИмяФаксимиле, СуффиксДокумента)
	Возврат СтрШаблон("%1_%2", ИмяФаксимиле, СуффиксДокумента)
КонецФункции

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти) Экспорт
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыДокументовСПечатьюЗаПоставщика()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВыкупПредметовЛизинга"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	
	Возврат МассивТипов;
	
КонецФункции

Процедура ДобавитьФаксимилеВПечатнуюФорму(ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, ДанныеПодписейИПечатей)
	
	// Этот код взят из процедуры ДобавитьПодписьИПечать() общей формы ПечатьДокументов
	// При изменении в процедуре общей формы, нужно вносить изменения и в эту процедуру
	
	ПодписиИПечатиОбластей = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыВывода)
		И ПараметрыВывода.Свойство("ОбъектыПечатиДляФаксимилеБП") Тогда
		ОбъектыПечатиОбъединенный = УправлениеПечатьюБП.ОбъединитьОбъектыПечатиФаксимиле(
			ПараметрыВывода.ОбъектыПечатиДляФаксимилеБП, ОбъектыПечати);
		ПодписиИПечатиОбластей = УправлениеПечатью.ПодписиИПечатиОбластей(ОбъектыПечатиОбъединенный, ПараметрыВывода);
	Иначе
		ПодписиИПечатиОбластей = УправлениеПечатью.ПодписиИПечатиОбластей(ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	ИндексТабличногоДокумента = 0;
	Для Каждого ТабличныйДокументСписка Из ТабличныеДокументы Цикл
		
		ТабличныйДокумент = ТабличныйДокументСписка.Значение;
		
		Если ЗначениеЗаполнено(ДанныеПодписейИПечатей) Тогда
			РисункиТабличногоДокумента = ДанныеПодписейИПечатей[ИндексТабличногоДокумента];
			Для Каждого СохраненныйРисунок Из РисункиТабличногоДокумента Цикл
				НовыйРисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				ЗаполнитьЗначенияСвойств(НовыйРисунок, СохраненныйРисунок);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеПечатиРисунковТабличногоДокумента = УправлениеПечатью.ПодписиИПечатиТабличногоДокумента(
			ОбъектыПечати, ТабличныйДокумент, ОбщегоНазначения.КодОсновногоЯзыка());
		Для Каждого ПодписиИПечатиОбласти Из ПодписиИПечатиОбластей Цикл
			ИмяОбласти = ПодписиИПечатиОбласти.Ключ;
			Если ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти] = Неопределено Тогда
				ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти] = Новый Соответствие();
			КонецЕсли;
			Для Каждого Элемент Из ПодписиИПечатиОбласти.Значение Цикл
				ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти][Элемент.Ключ] = Элемент.Значение;
			КонецЦикла;
		КонецЦикла;
		
		УправлениеПечатью.ДобавитьПодписьИПечать(ТабличныйДокумент, ДанныеПечатиРисунковТабличногоДокумента);
		
		ИндексТабличногоДокумента = ИндексТабличногоДокумента + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодписиИПечатиТабличногоДокумента(ТабличныйДокумент)
	
	// Эта процедура копия ПодписиИПечатиТабличногоДокумента() общей формы ПечатьДокументов.
	
	РисункиТабличногоДокумента = Новый Массив;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		Если УправлениеПечатью.ЭтоПодписьИлиПечать(Рисунок) Тогда
			ОписаниеРисунка = Новый Структура("Лево,Верх,Ширина,Высота,Картинка,Владелец,ЦветФона,Имя,Линия,
				|РазмерКартинки,ВертикальноеПоложение,ГоризонтальноеПоложение");
			ЗаполнитьЗначенияСвойств(ОписаниеРисунка, Рисунок);
			РисункиТабличногоДокумента.Добавить(ОписаниеРисунка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РисункиТабличногоДокумента;
	
КонецФункции

#Область НаличиеФаксимиле

// Собирает данные для проверки заполнения необходимых реквизитов пред печатью с факсимильной подписью.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы одного типа.
//
// Возвращаемое значение:
//  Структура:
//    * НужноЗаполнить - Булево- нужно заполнить реквизиты.
//    * Организация - СправочникСсылка.Организации - организация документов.
//    * ПредложитьНастроить - Булево - у пользователя достаточно прав для настройки.
//
Функция ПроверитьЗаполнениеПечатиПодписейОрганизации(МассивДокументов)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	РезультатПроверки.Вставить("НужноЗаполнить", Ложь);
	РезультатПроверки.Вставить("ПредложитьНастроить", Ложь);
	
	НужноЗаполнить = Ложь;
	
	ТаблицаОрганизацийДокументов = ОрганизацииДокументовДляПечати(МассивДокументов);
	
	ОрганизацииДокументов = ТаблицаОрганизацийДокументов.ВыгрузитьКолонку("Организация");
	ОрганизацииДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииДокументов);
	
	Если ОрганизацииДокументов.Количество() = 1 Тогда
		
		Организация = ОрганизацииДокументов[0];
		
		РезультатПроверки.Организация = Организация;
		
		ТаблицаДатДокументов = ТаблицаОрганизацийДокументов.Скопировать(Новый Структура("Организация", Организация));
		ТаблицаДатДокументов.Сортировать("Дата Убыв");
		ДатаПроверки = ТаблицаДатДокументов[0].Дата;
		
		НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФайлПечать"),
			ДатаПроверки);
	
		Если НужноЗаполнить Тогда
			НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФайлФаксимильнаяПечать"));
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки.НужноЗаполнить      = НужноЗаполнить;
	РезультатПроверки.ПредложитьНастроить = НужноЗаполнить
		И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОрганизацииДокументовДляПечати(МассивДокументов)
	
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("Организация");
	Организации.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Организации;
	КонецЕсли;
	
	МетаданныеДокумента = МассивДокументов[0].Метаданные();
	Если НЕ Метаданные.Документы.Содержит(МетаданныеДокумента) Тогда
		Возврат Организации;
	КонецЕсли;
		
	МетаданныеИмя = МетаданныеДокумента.ПолноеИмя();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеДокумента) Тогда
		ИмяРеквизита = "ОрганизацияПолучатель";
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ПакетЗапроса.Операторы[0];
	Оператор.Источники.Добавить(МетаданныеИмя, "Документ");
	Оператор.ВыбиратьРазличные = Истина;
	Оператор.ВыбираемыеПоля.Добавить("Документ." + ИмяРеквизита);
	Оператор.ВыбираемыеПоля.Добавить("Документ.Дата");
	ПакетЗапроса.Колонки[0].Псевдоним = "Организация";
	ПакетЗапроса.Колонки[1].Псевдоним = "Дата";
	Оператор.Отбор.Добавить("Документ.Ссылка В(&Документы)");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Документы", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Организации.Добавить(), Выборка);
	КонецЦикла;
	
	Организации.Свернуть("Организация, Дата");
	
	Возврат Организации;
	
КонецФункции

Функция ЗаполненыПечатьИПодписи(Организация, ПроверяемыеРеквизиты, ДатаПроверки = Неопределено)
	
	РеквизитыЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(Организация) И ПроверяемыеРеквизиты.Количество() <> 0 Тогда
		
		ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация,
			Новый ФиксированныйМассив(ПроверяемыеРеквизиты));
		
		Для Каждого Реквизит Из ЗначенияРеквизитовОрганизации Цикл
			Если НЕ Реквизит.Значение.Пустая() Тогда
				РеквизитыЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РеквизитыЗаполнены И ДатаПроверки <> Неопределено Тогда
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ДатаПроверки);
		Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
			РеквизитыЗаполнены = ЗначениеЗаполнено(ПрисоединенныйФайлФаксимилеФизическогоЛица(Руководители.Руководитель));
		КонецЕсли;
		Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
			РеквизитыЗаполнены = ЗначениеЗаполнено(ПрисоединенныйФайлФаксимилеФизическогоЛица(Руководители.ГлавныйБухгалтер));
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

Функция ДопустимыйРазмерКартинки(РазмерКартинки, ПредставлениеКартинки, ВладелецКартинки, ОповеститьПользователя = Ложь) Экспорт
	
	ДопустимыйРазмерКартинки = РазмерКартинки <= 512000;
	
	Если НЕ ДопустимыйРазмерКартинки Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер картинки ""%1"" слишком велик.
				|Рекомендуется использовать файл формата *.png размером не более 500 Кб.'"),
				ПредставлениеКартинки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, ВладелецКартинки,
			ТекстОшибки);
			
		Если ОповеститьПользователя Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВладелецКартинки);
		КонецЕсли;
			
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ДопустимыйРазмерКартинки;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБанком

// Процедура проверяет и удаляет с формы ПечатьДокументов рекламу подключения ДиректБанка к счету интеграции.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПроверитьУдалитьРекламуПодключенияДиректБанкаКСчетуИнтеграции(Форма)
	
	Если Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ЭлементДополнительнаяИнформация = Элементы.Найти("ДополнительнаяИнформация");
	Если ЭлементДополнительнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяИнформацияЗаголовок = Строка(ЭлементДополнительнаяИнформация.Заголовок);
	Если ПустаяСтрока(ДополнительнаяИнформацияЗаголовок) Тогда
		Возврат;
	КонецЕсли;
	
	БИКБанковИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БИКВсехБанковИнтеграции();
	ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции = Ложь;
	Для Каждого БИК Из БИКБанковИнтеграции Цикл
		Если СтрНайти(ДополнительнаяИнформацияЗаголовок, БИК) > 0 Тогда
			ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции Тогда
		ЭлементДополнительнаяИнформация.Заголовок = "";
		Элементы.КартинкаИнформации.Картинка = Новый Картинка;
		Элементы.ГруппаДополнительнаяИнформация.Видимость = Ложь;
		Элементы.КартинкаИнформации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет и удаляет с формы ПечатьДокументов рекламу подключения ДиректБанка к счету интеграции.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура УдалитьИзЗаголовкаНеПолученныйНомерППИнтеграцияСБанком(Форма, Документ)
	
	Если Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеДокумента = НСтр("ru = 'Платежное поручение'");
	Если Не Документы.ПлатежноеПоручение.НомерПлатежногоПорученияИзвестен(Документ)
		И СтрНайти(Форма.Заголовок, НазваниеДокумента) > 0 Тогда
		Форма.Заголовок = НазваниеДокумента;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура проверяет, если среди печатных форм есть Отчет комитенту 
// и в печатной форме нет требуемых областей, 
// то выводим баннер с предупреждением
Процедура СообщитьПроДополнительныеУсловияОтчетаКомитенту(Форма)

	ЭтоОтчетКомитентуОтчетОПродажах = Ложь;
	
	Если НЕ Форма.КлючНастроек = НСтр("ru = 'Документ.ОтчетКомитентуОПродажах-ОтчетКомитентуОПродажах'") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОбъектПечати Из Форма.ОбъектыПечати Цикл
		Если ТипЗнч(ОбъектПечати.Значение) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПечати.Значение, "ВидОперации");
		
			// Контролируем изменение макета у документов с видом операции Отчет о продажах
			Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
				ЭтоОтчетКомитентуОтчетОПродажах = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоОтчетКомитентуОтчетОПродажах Тогда
	// Печатные формы не связаны с отчетами комитента, для них баннер выводить не требуется
		Возврат;
	КонецЕсли;

	// Проверим, есть ли печатная форма счета и есть ли в ней область доп. условий.
	ЕстьПечатнаяФормаОтчетКомитенту = Ложь;
	
	// Проверим, есть ли печатная форма счета и есть ли в ней область 
	Для НомерСтроки = 1 ПО Форма.НастройкиПечатныхФорм.Количество() Цикл
		
		СтрокаНастройкиПечатнойФормы = Форма.НастройкиПечатныхФорм[НомерСтроки - 1];

		Если СтрокаНастройкиПечатнойФормы.ИмяМакета <> "ОтчетКомитентуОПродажах" Тогда
			Продолжить;
		КонецЕсли;
		ЕстьПечатнаяФормаОтчетКомитенту = Истина; 
	
		РабочаяПечатнаяФорма = Форма[СтрокаНастройкиПечатнойФормы.ИмяРеквизита];
		
		Для Каждого Область ИЗ РабочаяПечатнаяФорма.Области Цикл
			ОбластьДополнительныеУсловия = СтрНайти(Область.Имя, "ВидСобытия");
			Если ОбластьДополнительныеУсловия <> 0 Тогда
				// Дополнительные условия уже используются, сообщать ничего не требуется.
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	Если НЕ ЕстьПечатнаяФормаОтчетКомитенту Тогда
		Возврат;
	КонецЕсли;
	
	// Если ранее уже показывали пользователю баннер и он его закрыл, то больше не показываем.
	НеПоказыватьБаннерДопУсловияОтчетаКомитента = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"БП.ПечатьДокументов", "НеПоказыватьБаннерДопУсловияОтчетаКомитента");
	Если НеПоказыватьБаннерДопУсловияОтчетаКомитента = Истина Тогда
		Возврат;
	КонецЕсли;

	// Добавляем баннер перед ГруппаПечатныеФормы, в которой выводится печатный документ.
	ГруппаПечатныеФормы = Форма.Элементы.Найти("ГруппаПечатныеФормы");
	
	ГруппаБаннер = Форма.Элементы.Вставить("ГруппаБаннерДопУсловияОтчетаКомитента",
		Тип("ГруппаФормы"), Форма, ГруппаПечатныеФормы);
	ГруппаБаннер.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннер.ОтображатьЗаголовок      = Ложь;
	ГруппаБаннер.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннер.ЦветФона                 = ЦветаСтиля.БыстрыеОтборыФонГруппы; // Выделяем баннер цветом.
	
	НадписьБаннер = Форма.Элементы.Добавить("НадписьБаннерДопУсловияОтчетаКомитента",
		Тип("ДекорацияФормы"), ГруппаБаннер);
	НадписьБаннер.РастягиватьПоГоризонтали = Истина;
	НадписьБаннер.АвтоМаксимальнаяШирина   = Ложь;
	
	ЗаголовокБаннера = Новый Массив;
	ЗаголовокБаннера.Добавить(
		НСтр("ru = 'Внимание! В отчете комитенту добавлена возможность вывода на печать информации по счетам-фактурам.'"));
	ЗаголовокБаннера.Добавить(" ");
	ЗаголовокБаннера.Добавить(
		НСтр("ru = 'Для использования новых возможностей рекомендуем восстановить типовой макет.'"));
	ЗаголовокБаннера.Добавить(" ");
	ЗаголовокБаннера.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),
		 , , , "https://its.1c.ru/db/answers1c/content/641/hdoc"));

	// Дополнительные условия в счете не используются, выведем баннер о том, что есть такая возможность.  	
	НадписьБаннер.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокБаннера);
	
	// Добавим крестик для закрытия баннера, если пользователю он не интересен.
	КартинкаЗакрытьБаннер = Форма.Элементы.Добавить("КартинкаЗакрытьБаннерДопУсловияСчетаНаОплату",
		 Тип("ДекорацияФормы"), ГруппаБаннер);
	КартинкаЗакрытьБаннер.Заголовок   = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПолеВводаОчистить,
		 , , , "ЗакрытьБаннерДопУсловияОтчетаКомитента");

КонецПроцедуры

#КонецОбласти
