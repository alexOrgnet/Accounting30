#Область ПрограммныйИнтерфейс

// Конструктор коллекции, описывающей код доступа к мобильному приложению.
//
// Код доступа может быть получен в 1С:Бухгалтерии, затем он должен быть передан
// пользователю мобильного приложения и введен в мобильное приложение.
// После ввода кода доступа конкретный экземпляр мобильного приложения (в который введен код)
// и область 1С:Бухгалтерии (в которой был получен код) могут обмениваться сообщениями.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйКодДоступа() Экспорт
	
	КодДоступа = Новый Структура;
	
	КодДоступа.Вставить("Код",           ""); // Для использования при машинной обработке
	КодДоступа.Вставить("Представление", ""); // Для передачи пользователю

	Возврат КодДоступа;
	
КонецФункции

// Предоставляет новый код доступа в мобильное приложение.
//
// Полученный код следует сохранить в информационной базе, а его представление выдать пользователю.
//
// Параметры:
//  Приложение      - Строка - имя приложения в шине
//  НачальныеДанные - Структура - произвольные данные, которые будут доставлены в мобильное приложение
//                    (будут доступны мобильному приложению после того, как пользователь введет в него код доступа).
//                    Например, это может быть информация о предприятии, из информационной базы которого выдан код доступа,
//                    либо о лице, которому он выдан.
//                    Структура должна быть сериализуемой в JSON и не должна содержать вложенные соответствия.
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Неопределено - не удалось предоставить код
//
Функция КодДоступа(Приложение, НачальныеДанные) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("НачальныеДанные", НачальныеДанные);
	ОтветСервиса = ВыполнитьМетодСервиса(
		Приложение, Подключение, "POST", ИмяСервисаШиныПриложений(), "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	КодДоступа = НовыйКодДоступа();
	КодДоступа.Код = ОтветСервиса.Содержимое.Ключ;
	КодДоступа.Представление = ОтветСервиса.Содержимое.ПредставлениеКлюча;
	
	Возврат КодДоступа;
	
КонецФункции

// Удаляет (отзывает) код доступа: после вызова метода код нельзя использовать для передачи сообщений.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//  КодДоступа - Строка - сохраняемый код, полученный в КодДоступа
// 
// Возвращаемое значение:
//  Булево - Истина, если получено подтверждение, что код отозван (не может быть более использован)
//
Функция УдалитьКодДоступа(Приложение, КодДоступа) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Ключ", КодДоступа);
	
	ОтветСервиса = ВыполнитьМетодСервиса(
		Приложение, Подключение, "DELETE", ИмяСервисаШиныПриложений(), "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Удаление кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Запускает фоновое получения сообщений с Шины прикладных приложений
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//
Процедура ПолучитьСообщенияШиныОтложенно(Приложение) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФоновогоВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыФоновогоВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыФоновогоВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыФоновогоВыполнения.КлючФоновогоЗадания         = Приложение;
	ПараметрыФоновогоВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(
		НСтр("ru = 'Обработка сообщений мобильного приложения %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
	ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыФоновогоВыполнения,
		"ШинаПрикладныхПриложений.ПолучитьСообщенияШины",
		Приложение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет получение сообщений с Шины прикладных приложений.
//
Процедура ПолучитьСообщенияШины(Приложение) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	ИмяСобытияПроверкаНаличияСообщений = НСтр("ru = 'Проверка наличия сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Используем блокировку записи регистра сведений "ОпросШиныМобильныхПриложений", чтобы не допустить нескольких одновременных запросов.
	Блокировка = РегистрыСведений.ОпросШиныМобильныхПриложений.СоздатьКлючЗаписи(Новый Структура("ИмяПриложения", ИмяДанныхПриложения));
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Блокировка);
	Исключение
		ИмяСобытия = ШинаМобильныхПриложенийСлужебный.ИмяСобытияЖурналаРегистрации(ИмяСобытияПроверкаНаличияСообщений, ИмяДанныхПриложения);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ИмяСервиса = ИмяСервисаШиныПриложений();
	Пока Истина Цикл
		
		ОтветИдентификаторСообщения = ВыполнитьМетодСервиса(
			Приложение, Подключение, "GET", ИмяСервиса, "inbound", Неопределено, Ложь);
			
		Если ОтветИдентификаторСообщения = Неопределено Тогда
			Прервать;
		КонецЕсли;
			
		Если ОтветИдентификаторСообщения.КодСостояния = ЗапросыREST.КодСостоянияНетДанных() Тогда
			// Все обработаны
			Прервать;
		КонецЕсли;
		
		Если ОтветИдентификаторСообщения.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
			ЗаписатьОшибкуКодСостояния(
				ОтветИдентификаторСообщения, ИмяДанныхПриложения, ИмяСобытияПроверкаНаличияСообщений);
			Прервать;
		КонецЕсли;
		
		Ресурс = СтрШаблон("inbound/%1", ОтветИдентификаторСообщения.Содержимое.Идентификатор);
		ОтветСодержимоеСообщения = ВыполнитьМетодСервиса(Приложение, Подключение, "GET", ИмяСервиса, Ресурс);
		
		Если ОтветСодержимоеСообщения <> Неопределено Тогда
			ОбработатьСообщение(
				Приложение,
				ОтветСодержимоеСообщения.Содержимое.Отправитель,
				ОтветСодержимоеСообщения.Содержимое.Сообщение);
				
			ВыполнитьМетодСервиса(Приложение, Подключение, "DELETE", ИмяСервиса, Ресурс);
		КонецЕсли;
	КонецЦикла;
	
	РазблокироватьДанныеДляРедактирования(Блокировка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Авторизация

// Возвращает временный токен авторизации, получая новый при необходимости
//
// Возвращаемое значение:
//  Строка, Неопределено
//
Функция ВременныйТокен(ИмяДанныхПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	ВременныйТокен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИмяДанныхПриложения,
		"ВременныйТокен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВременныйТокен = Неопределено Тогда
		ВременныйТокен = ПолучитьНовыйВременныйТокен(ИмяДанныхПриложения);
	КонецЕсли;
	
	Возврат ВременныйТокен;
	
КонецФункции

// Возвращает новый временный токен авторизации, срок действия токена при этом игнорируется.
//
// Возвращаемое значение:
//  Строка, Неопределено
//
Функция ПолучитьНовыйВременныйТокен(ИмяДанныхПриложения)
	
	ИмяСобытия = "ПолучениеВременногоТокенаШины";
	
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения);
	Если Подключение = Неопределено Тогда
		ОписаниеСобытия = НСтр("ru = 'Не задана учетная запись пользователя сервиса Шины.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеСобытия);
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Подключение.АдресСервиса);
	// Адрес Шины в общем случае имеет вид "https://site.ru/application-bus".
	// Для получения временного токена необходимо использовать не адрес публикации приложения Шины, а
	// адрес сервера, на котором расположено это приложение. Т.е. "https://site.ru".
	АдресСервиса = ?(ЗначениеЗаполнено(ЭлементыАдреса.Порт),
		СтрШаблон("%1:%2", ЭлементыАдреса.Хост, ЭлементыАдреса.Порт), ЭлементыАдреса.Хост);
	Подключение.АдресСервиса = СтрШаблон("%1://%2", ЭлементыАдреса.Схема, АдресСервиса);
	Подключение.ПространствоИмен = АдресСервисаАвторизации();
	Подключение.ЗаголовкиАутентификации.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "", "grant_type=client_credentials");
	
	Если Ответ = Неопределено Тогда
		// Если не удалось подключиться к сервису, ошибку уже зарегистрировал метод ВыполнитьМетодСервиса()
		Возврат Неопределено;
	КонецЕсли;
		
	Если Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		
		ОписаниеСобытия = СтрШаблон(
		НСтр("ru = 'Ошибка запроса получения временного токена шины. Код ответа: %1.
			|Описание: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Ответ.КодСостояния, Ответ.Текст);
	
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеСобытия);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Ответ.Содержимое.Свойство(КлючВременногоТокена()) Тогда
		
		ОписаниеСобытия = СтрШаблон(
		НСтр("ru = 'Ошибка запроса получения временного токена шины. Код ответа: %1.
			|Описание: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Ответ.КодСостояния, Ответ.Текст);
	
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеСобытия);
		Возврат Неопределено;
	КонецЕсли;
	
	Токен = Ответ.Содержимое[КлючВременногоТокена()];
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяДанныхПриложения, Токен, "ВременныйТокен");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Токен;
	
КонецФункции

// Ключ токена в ответе сервиса авторизации
//
Функция КлючВременногоТокена()
	
	Возврат "id_token";
	
КонецФункции

Функция АдресСервисаАвторизации()
	
	Возврат "auth/oidc/token";
	
КонецФункции

Функция ИмяЗаголовкаАутентификацииИТС()
	
	Возврат "auth-login-1c";
	
КонецФункции

Функция ИмяЗаголовкаАдресПриложения()
	
	Возврат "tenant-address";
	
КонецФункции

#КонецОбласти

#Область ПодключениеПодсистемы

Процедура ЗаполнитьМенеджерыПриложений(МенеджерыПриложений)
	
	МенеджерыПриложений.Добавить(РегистрыСведений.МобильноеПриложениеСканированиеЧеков);
	
КонецПроцедуры

#КонецОбласти

Функция Подключение(Приложение)
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Приложение может узнать адрес Шины одним из двух способов:
	// 1. Обычным способом через Менеджер Сервиса, если приложение не было ранее
	// подключено с Сервису проверки чеков ККТ.
	// 2. От kktService. При попытке выполнить любой запрос вернется ответ с кодом 308 и адресом
	// Шины в теле ответа, если приложение уже подключено к Сервису проверки чеков ККТ.
	АдресСервиса = Константы.АдресШиныПрикладныхПриложений.Получить();
	
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения);
	Если Подключение <> Неопределено Тогда
		Подключение.АдресСервиса = АдресСервиса;
		Подключение.ИсточникЗапроса = ИмяДанныхПриложения;
		Возврат Подключение;
	КонецЕсли;

	ДанныеИТС = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-check-scan");
	
	Если Не ЗначениеЗаполнено(ДанныеИТС.Тикет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.ИсточникЗапроса = ИмяДанныхПриложения;
	Подключение.АдресСервиса = АдресСервиса;
	Подключение.ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификацииИТС(), ДанныеИТС.Тикет);
	
	// Приложение ранее могло быть уже подключено к Шине мобильных приложений.
	// При переходе на Шину прикладных приложений следует сохранить адрес (идентификатор) этого приложения.
	// Передадаим его в заголовках запроса.
	АдресПриложения = ШинаМобильныхПриложений.АдресОблачногоПриложения(Приложение);
	Если ЗначениеЗаполнено(АдресПриложения) Тогда
		Подключение.ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАдресПриложения(), АдресПриложения);
	КонецЕсли;
	
	// Зарегистрируем приложение
	Подключение.ПространствоИмен = ПространствоИмен(ИмяСервисаРегистрацииПриложения());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Подключение.ЗаголовкиАутентификации, ШинаМобильныхПриложенийСлужебный.АутентификацияИТС(), Истина);
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "tenant");
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация приложения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	// Сохраним данные подключения
	Ответ = ОтветСервиса.Содержимое;
	Подключение.Логин = Ответ.Идентификатор;
	Подключение.Пароль = Ответ.Секрет;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Подключение Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИмяДанныхПриложения,
			КлючИЗначение.Значение,
			КлючИЗначение.Ключ);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Подключение;
	
КонецФункции

Функция СохраненныеДанныеПодключения(ИмяДанныхПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИмяДанныхПриложения,
		"АдресСервиса, Логин, Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Фактически при отсутствии данных ПрочитатьДанныеИзБезопасногоХранилища зачем-то возвращает структуру,
	// в которой значения свойств будут Неопределено
	Для Каждого КлючИЗначение Из ДанныеПодключения Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.ИсточникЗапроса = ИмяДанныхПриложения;
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения);
	Возврат Подключение;
	
КонецФункции

// Выполняет метод HTTP (REST) API.
//
// Параметры:
//  Приложение  - Строка - имя приложения в шине
//  Подключение - Структура - см. ЗапросыRest.НовыйПодключение
//  Метод       - Строка - имя HTTP-метода (например, "POST", "GET", "MERGE")
//  ИмяСервиса  - Строка - корневой URL HTTP-сервиса.
//  Ресурс      - Строка - имя ресурса HTTP-сервиса.
//                         В общем случае путь на сервере имеет вид "/ИмяСервиса/Ресурс".
//  Данные       - Структура, Строка - данные, передаваемые в теле запроса(в виде json-объекта, либо серилизованные в строку)
//  ВременныйТокен - Cтрока - временный токен для доступа к Шине
// 
// Возвращаемое значение:
//  Структура - см. НовыйОтветСервиса
//  Неопределено - ответ от вызываемого сервиса не получен.
//
Функция ВыполнитьМетодСервиса(Приложение, Подключение, Метод, ИмяСервиса, Ресурс, Данные = Неопределено, ЗаписыватьОшибку = Истина)
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	// Для аутентификации на Шине используется временный токен, передаваемый в заголовках. Логин и пароль не используется.
	// Временный токен валиден в течение 1 часа.
	ВременныйТокен = ВременныйТокен(ИмяДанныхПриложения);
	Если ВременныйТокен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Подключение.ПространствоИмен = ПространствоИмен(ИмяСервиса);
	Подключение.ЗаголовкиАутентификации.Вставить("Authorization", СтрШаблон("Bearer %1", ВременныйТокен));
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, Метод, Ресурс, Данные);
	
	Если Ответ = Неопределено Тогда
		// Если не удалось подключиться к Шине, ошибку уже зарегистрировал метод ЗапросыREST.ВыполнитьМетодСервиса()
		Возврат Неопределено;
	КонецЕсли;
	
	// Срок действия токена не проверяется перед выполнением запроса, поэтому
	// временный токен может быть устаревшим. Тогда вернется ответ с кодом 401.
	// В таком случае необходимо получить новый токен и повторить запрос.
	Если Ответ.КодСостояния = ЗапросыREST.КодСостоянияНеАутентифицирован() Тогда
		Возврат ОбновитьТокенВыполнитьМетодСервиса(Приложение, Подключение, Метод, Ресурс, Данные);
	КонецЕсли;
	
	Если ЗаписыватьОшибку И Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуЗапроса(Ресурс, Приложение, Ответ.КодСостояния, Ответ.Текст);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ОбновитьТокенВыполнитьМетодСервиса(Приложение, Подключение, Метод, Ресурс, Данные)
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	ВременныйТокен = ПолучитьНовыйВременныйТокен(ИмяДанныхПриложения);
	Если ВременныйТокен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Подключение.ЗаголовкиАутентификации.Вставить("Authorization", СтрШаблон("Bearer %1", ВременныйТокен));
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, Метод, Ресурс, Данные);
	
	Если Ответ = Неопределено Тогда
		// Если не удалось подключиться к Шине, ошибку уже зарегистрировал метод ЗапросыREST.ВыполнитьМетодСервиса()
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуЗапроса(Ресурс, Приложение, Ответ.КодСостояния, Ответ.Текст);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Процедура ОбработатьСообщение(Приложение, Отправитель, Сообщение)
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	
	МенеджерПриложения = ШинаМобильныхПриложенийСлужебный.МенеджерПриложения(Приложение, МенеджерыПриложений);
	МенеджерПриложения.ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение);
	
КонецПроцедуры

Функция ПространствоИмен(ИмяСервиса)
	
	Возврат СтрШаблон("/api/%1/%2", ИмяСервиса, ВерсияAPI());
	
КонецФункции

Функция ВерсияAPI()
	
	Возврат "v1";
	
КонецФункции

Функция ИмяДанныхПриложения(Приложение)
	
	Возврат СтрШаблон("bus-%1", Приложение);
	
КонецФункции

Функция ИмяСервисаРегистрацииПриложения()
	
	Возврат "tenantauth";
	
КонецФункции

Функция ИмяСервисаШиныПриложений()
	
	Возврат "tenantbus";
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(Действие = "", Приложение = "")
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'Шина прикладных приложений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
		Если ЗначениеЗаполнено(Приложение) Тогда
			ЭлементыИмени.Добавить(Приложение);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

Процедура ЗаписатьОшибкуКодСостояния(ОтветСервиса, Приложение, Действие)
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		,
		ОтветСервиса.КодСостояния,
		ОтветСервиса.Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЗапроса(Ресурс, Приложение, КодСостояния, Текст)
	
	ОписаниеСобытия = СтрШаблон(
		НСтр("ru = 'Ошибка запроса. Код ответа: %1.
			|Описание: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		КодСостояния, Текст);
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(Ресурс, Приложение),
		УровеньЖурналаРегистрации.Ошибка, , , ОписаниеСобытия);
КонецПроцедуры

#КонецОбласти