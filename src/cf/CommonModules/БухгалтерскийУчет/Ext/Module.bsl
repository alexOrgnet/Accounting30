#Область ПрограммныйИнтерфейс

#Область РаботаСоСчетамиИСубконто

// Снимает/устанавливает активность проводок документа (бух. учет).
//
// Параметры:
//	Документ - ДокументСсылка.* - Ссылка на документ, для которого меняется активность проводок.
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ОбщегоНазначенияБП.ПропуститьБизнесЛогикуПриЗаписи(ПроводкиДокумента);
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//	Счет         - ПланСчетовСсылка.Хозрасчетный - Счет, к которому относится субконто.
//  Субконто     - РегистрБухгалтерииСубконто.Хозрасчетный - Набор субконто.
//	ИмяСубконто  - Строка, Число - Номер, имя или вид устанавливаемого субконто.
//  ЗначениеСубконто - Произвольный - Значение устанавливаемого субконто.
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда // номер субконто

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];
		НомерСубконто = ИмяСубконто;
		
	Иначе // имя или вид субконто

		ВидСубконто = ?(ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"),
						ИмяСубконто,
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто]);
		
		// Проверка, что указанный вид субконто есть на счете
		// и получение номера субконто.
		Если СвойстваСчета.ВидСубконто1 = ВидСубконто Тогда
			НомерСубконто = 1;
		ИначеЕсли СвойстваСчета.ВидСубконто2 = ВидСубконто Тогда
			НомерСубконто = 2;
		ИначеЕсли СвойстваСчета.ВидСубконто3 = ВидСубконто Тогда
			НомерСубконто = 3;
		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Ключ = СтрШаблон("ВидСубконто%1ТипЗначения", НомерСубконто);
	ТипЗначения = СвойстваСчета[Ключ];
		
	Если ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Заполняет значения субконто в коллекции субконто. После первого использования свойства сохраняются в СвойстваСчетаКеш.
// Предназначена для использования в циклах с множеством итераций, заполняющих субконто проводок по малому количеству
// счетов. Проверок корректности данных (наличия субконто на счете  и т.п.) для использования на счете не выполняется.
// Поэтому необходимо обеспечить их корректность до вызова функции.
//
// Параметры:
//	Счет         - ПланСчетовСсылка.Хозрасчетный - Счет, к которому относится субконто.
//  Субконто     - РегистрБухгалтерииСубконто - набор субконто
//  СвойстваСчетаКеш
//               - Соответствие - достаточно передать пустое соответствие.
//  Субконто1, Субконто2, Субконто3
//               - значения устанавливаемых субконто.
//
// Возвращаемое значение:
//   Структура   - свойства счета, на котором были установлены субконто.
//
Функция УстановитьСубконтоПоКешуСвойствСчета(Счет, Субконто, СвойстваСчетаКеш = Неопределено,
												Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
												
	// СвойстваСчетаКеш - соответствие, где ключ = значение счета, а значение = свойства счета.
	Если СвойстваСчетаКеш = Неопределено Тогда
		СвойстваСчетаКеш = Новый Соответствие;
	КонецЕсли;
												
	СвойстваСчета = СвойстваСчетаКеш[Счет];
	Если СвойстваСчета = Неопределено Тогда   // первое использование счета
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		СвойстваСчетаКеш.Вставить(Счет, СвойстваСчета);
	КонецЕсли;
	
	// Из соображений производительности использован не цикл из трех итераций, а явно заданные имена свойств.
	Если СвойстваСчета.КоличествоСубконто > 0 Тогда
		Субконто.Вставить(СвойстваСчета.ВидСубконто1, Субконто1);
		Если СвойстваСчета.КоличествоСубконто > 1 Тогда
			Субконто.Вставить(СвойстваСчета.ВидСубконто2, Субконто2);
			Если СвойстваСчета.КоличествоСубконто > 2 Тогда
				Субконто.Вставить(СвойстваСчета.ВидСубконто3, Субконто3);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Очистка значений отсутствующих на счете субконто (если необходима) выполняется в обработчике ПередЗаписью регистра.
	
	Возврат СвойстваСчета;
	
КонецФункции

// Для субконто, которое может принимать значения только одного типа, возвращает пустое значение этого типа.
//
// Параметры:
//  СтрокаВидаСубконто - СтрокаТаблицыЗначений, Структура - содержит свойство ВидСубконто, для которого подбираем
//                                                          значение по-умолчанию.
//  ЗначенияНеиспользуемыхСубконто - Соответствие - кеш, где ключ = вид субконто, значение = значение по-умолчанию.
//
// Возвращаемое значение:
//   Неопределено - для вида субконто, который может принимать значения нескольких типов; иначе пустая ссылка.
//
Функция ЗначениеПоУмолчаниюДляСубконто(СтрокаВидаСубконто, ЗначенияНеиспользуемыхСубконто = Неопределено) Экспорт
	Перем ЗначениеПоУмолчанию;
	
	Если ЗначенияНеиспользуемыхСубконто <> Неопределено Тогда // может быть ранее уже подбирали
		ЗначениеПоУмолчанию = ЗначенияНеиспользуемыхСубконто[СтрокаВидаСубконто.ВидСубконто];
	КонецЕсли;
	Если ЗначениеПоУмолчанию = Неопределено Тогда // определим по стандартным правилам
		
		ДопустимыеТипы = СтрокаВидаСубконто.ВидСубконто.ТипЗначения.Типы();
		ЗначениеПоУмолчанию = ?(ДопустимыеТипы.Количество() > 1,
			Null, // признак замены на Неопределено
			Новый(ДопустимыеТипы[0])); // пустая ссылка
		Если ЗначенияНеиспользуемыхСубконто <> Неопределено Тогда
			ЗначенияНеиспользуемыхСубконто.Вставить(СтрокаВидаСубконто.ВидСубконто, ЗначениеПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли;
	Если ЗначениеПоУмолчанию = Null Тогда // заменяем на Неопределено
		ЗначениеПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям.
//
// Параметры:
//	Проводка - РегистрБухгалтерииЗапись.Хозрасчетный - Проводка, в которой нужно установить подразделение.
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение.
//	ДтКт - Строка - Если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту.
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям.
//
// Параметры:
//	Проводка - РегистрБухгалтерииЗапись.Хозрасчетный - Проводка, в которой нужно установить подразделения.
// 	ПодразделениеДт - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение по дебету.
// 	ПодразделениеКт - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение по кредиту.
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

// Задает набор возможных условий для отбора по списку счетов.
//
Функция НовыеУсловияОтбораСубсчетов() Экспорт
	
	УсловияОтбора = Новый Структура;
	
	// флаги
	УсловияОтбора.Вставить("ИспользоватьВПроводках"); // отбор по ЗапретитьИспользоватьВПроводках
	УсловияОтбора.Вставить("Валютный");
	УсловияОтбора.Вставить("Забалансовый");
	
	// список исключаемых счетов
	УсловияОтбора.Вставить("СчетаИсключения");
	
	Возврат УсловияОтбора;
	
КонецФункции

// Дополняет переданные счета их субсчетами. Для всех счетов проверяется соответствие заданным условиям.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//  УсловияОтбора- Структура - см. НовыеУсловияОтбораСубсчетов().
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора = Неопределено) Экспорт

	Если УсловияОтбора = Неопределено Тогда
		УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	КонецЕсли;
	
	УсловиеПоСчетам = ?(ЗначениеЗаполнено(МассивСчетов), "Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)", "ИСТИНА");
	
	УсловиеПоИсключениям = ?(ЗначениеЗаполнено(УсловияОтбора.СчетаИсключения), "И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)", "");
	
	Если УсловияОтбора.ИспользоватьВПроводках = Неопределено Тогда
		УсловиеПоСчетамГруппам = "";
	Иначе
		УсловиеПоСчетамГруппам = "И " + ?(УсловияОтбора.ИспользоватьВПроводках, "НЕ ", "") + "Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	КонецЕсли;
	
	Если УсловияОтбора.Валютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = "И " + ?(УсловияОтбора.Валютный, "", "НЕ ") + "Хозрасчетный.Валютный";
	КонецЕсли; 
	
	Если УсловияОтбора.Забалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = "И " + ?(УсловияОтбора.Забалансовый, "", "НЕ ") + "Хозрасчетный.Забалансовый";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", УсловияОтбора.СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	" + УсловиеПоСчетам + "
	|	" + УсловиеПоИсключениям + "
	|	" + УсловиеПоСчетамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСчетовССубсчетами;

КонецФункции

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

// Одновременно разворачивает (дополняет массивы) все параметры-счета до субсчетов. Имя разворачиваемого параметра
// должно начинаться со строки "Счета".
//
Процедура РазвернутьПараметрыДоСубсчетов(ЗапросСПараметрами) Экспорт 
	
	СчетаПараметров = Новый ТаблицаЗначений;
	СчетаПараметров.Колонки.Добавить("СчетГруппа", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СчетаПараметров.Колонки.Добавить("СчетПараметра", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	// создаём список разворачиваемых параметров
	СписокИменРазворачиваемыхПараметров = Новый Массив;
	Для Каждого ПараметрЗапроса Из ЗапросСПараметрами.Параметры Цикл
		
		Если Лев(ПараметрЗапроса.Ключ, 5) <> "Счета" Тогда
			Продолжить;
		КонецЕсли;
		
		СписокИменРазворачиваемыхПараметров.Добавить(ПараметрЗапроса.Ключ);
		Для Каждого СчетПараметра Из ПараметрЗапроса.Значение Цикл
			НоваяСтрока = СчетаПараметров.Добавить();		
			НоваяСтрока.СчетГруппа    = СчетПараметра;
			НоваяСтрока.СчетПараметра = СчетПараметра;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СчетаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаПараметров", СчетаПараметров);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Создаём временную таблицу.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаПараметров.СчетГруппа КАК СчетГруппа,
	|	СчетаПараметров.СчетПараметра КАК СчетПараметра
	|ПОМЕСТИТЬ ТекущийУровень
	|ИЗ
	|	&СчетаПараметров КАК СчетаПараметров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПараметра";
	
	// Получаем нижележащие счета.
	ТекстЗапросаСледующегоУровня =
	"ВЫБРАТЬ
	|	ТекущийУровень.СчетГруппа КАК СчетГруппа,
	|	Хозрасчетный.Ссылка КАК СчетПараметра
	|ПОМЕСТИТЬ СледующийУровень
	|ИЗ
	|	ТекущийУровень КАК ТекущийУровень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ТекущийУровень.СчетПараметра = Хозрасчетный.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПараметра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТекущийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СледующийУровень.СчетГруппа КАК СчетГруппа,
	|	СледующийУровень.СчетПараметра КАК СчетПараметра
	|ИЗ
	|	СледующийУровень КАК СледующийУровень";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + ТекстЗапросаСледующегоУровня;
	
	// Создаём временную таблицу и выполняем запрос первого уровня.
	РезультатЗапроса = Запрос.Выполнить();
	
	// Задаём текст для запросов последующих уровней.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СледующийУровень.СчетГруппа КАК СчетГруппа,
	|	СледующийУровень.СчетПараметра КАК СчетПараметра
	|ПОМЕСТИТЬ ТекущийУровень
	|ИЗ
	|	СледующийУровень КАК СледующийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СледующийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапросаСледующегоУровня;
	
	Для НомерУровня = 1 По 100 Цикл // считаем, что вложенность больше 100 нереалистична; избегаем зацикливания в справочнике
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СчетаПараметров.Добавить();		
			НоваяСтрока.СчетГруппа    = Выборка.СчетГруппа;
			НоваяСтрока.СчетПараметра = Выборка.СчетПараметра;
			
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// формируем соответствие счетов и субсчетов
	СубсчетаПараметров = Новый Соответствие;
	Для каждого Субсчет Из СчетаПараметров Цикл
		
		Если Субсчет.СчетГруппа = Субсчет.СчетПараметра Тогда // верхний уровень не нужен
			Продолжить;
		КонецЕсли;
		
		СписокСубсчетов = СубсчетаПараметров[Субсчет.СчетГруппа];
		Если СписокСубсчетов = Неопределено Тогда
			СписокСубсчетов = Новый Массив;
			СубсчетаПараметров.Вставить(Субсчет.СчетГруппа, СписокСубсчетов);
		КонецЕсли;
		
		СписокСубсчетов.Добавить(Субсчет.СчетПараметра);
		
	КонецЦикла;
	
	// дополняем списки счетов в параметрах их субсчетами
	Для Каждого ПараметрЗапроса Из СписокИменРазворачиваемыхПараметров Цикл
		
		СписокСчетовПараметра = ЗапросСПараметрами.Параметры[ПараметрЗапроса];
		КоличествоСчетовВерхнегоУровня = СписокСчетовПараметра.Количество();
		Для инд = 0 По КоличествоСчетовВерхнегоУровня - 1 Цикл
			СчетГруппа = СписокСчетовПараметра[инд];
		
			СписокСубсчетов = СубсчетаПараметров[СчетГруппа];
			Если СписокСубсчетов = Неопределено Тогда // нет субсчетов
				Продолжить;
			КонецЕсли;
			
			Для каждого Субсчет Из СписокСубсчетов Цикл
				СписокСчетовПараметра.Добавить(Субсчет);
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает максимальное количество субконто на счете.
//
// Возвращаемое значение:
//	Число - Максимальное количество субконто.
//
Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

// Определяет, содержит ли табличная часть ВидыСубконто указанного счета субконто Склады.
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный
// 
// Возвращаемое значение:
//  Булево -  Истина, если на счете есть субконто Склады
//
Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		Или СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		Или СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	СвойстваСчета  = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	Возврат ПартионныйУчет;

КонецФункции 

Функция НаСчетеВедетсяУчетПоДокументамРасчетов(Счет) Экспорт
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	Возврат УчетПоДокументамРасчетов;
	
КонецФункции

Функция НаСчетеВедетсяУчетСчетамФактурамПолученным(Счет) Экспорт
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные;
	
	Возврат УчетПоДокументамРасчетов;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Возврат УчетПоДоговорам;

КонецФункции

Функция МассивСубконтоСчета19() Экспорт
	
	СубконтоСчета19 = Новый Массив;
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС);
	
	Возврат СубконтоСчета19;

КонецФункции

Функция МассивСубконтоСчета1907() Экспорт
	
	СубконтоСчета1907 = Новый Массив;
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРеализации);

	Возврат СубконтоСчета1907;

КонецФункции

Функция МассивСубСчетов19НДСКВычету() Экспорт
	
	Счета19КВычету = Новый Массив;
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	
	Возврат Счета19КВычету;

КонецФункции

Функция УчетПоСпособамНаСчете19() Экспорт
	
	Счет19 = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям.ПолучитьОбъект();
	УчетПоСпособамНаСчете19 = Счет19.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС, "ВидСубконто") <> Неопределено;
		
	Возврат УчетПоСпособамНаСчете19;

КонецФункции

Функция СубСчета19СчетаСНетиповымиСубконто() Экспорт
	
	// Субсчета 19 счета стандартно имеющие иную аналитику
	СубСчета19СчетаСНетиповымиСубконто = Новый Массив;
	СубСчета19СчетаСНетиповымиСубконто.Добавить(ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям); // 19.06
	СубСчета19СчетаСНетиповымиСубконто.Добавить(ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);      // 19.07
	
	УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.СчетаИсключения = СубСчета19СчетаСНетиповымиСубконто;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	
	МассивСубсчетов19Счета = СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора);
	МассивСубконтоСчета19 = МассивСубконтоСчета19();
	
	Для Каждого Субсчет19Счета Из МассивСубсчетов19Счета Цикл
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Субсчет19Счета);
		
		Если ЗначениеЗаполнено(СвойстваСчета.ВидСубконто1) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто1) = Неопределено
		 ИЛИ ЗначениеЗаполнено(СвойстваСчета.ВидСубконто2) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто2) = Неопределено
		 ИЛИ ЗначениеЗаполнено(СвойстваСчета.ВидСубконто3) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто3) = Неопределено Тогда
		
			// На счете присутствует субконто, не предусмотренное в типовом решении.
			СубСчета19СчетаСНетиповымиСубконто.Добавить(Субсчет19Счета);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СубСчета19СчетаСНетиповымиСубконто;
	
КонецФункции

// Определяет аналитику, доступную для счета (субконто, измерения)
//
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный
//       - Структура - см. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета
// 
// Возвращаемое значение:
//  Соответствие - аналитика счета.
//   * Ключ     - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - вид субконто
//              - Строка - имя измерения
//   * Значение - Строка - номер субконто (строкой) или имя измерения
//
Функция АналитикаСчета(Счет) Экспорт
	
	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Иначе
		СвойстваСчета = Счет;
	КонецЕсли;
	
	АналитикаСчета = ОбщегоНазначения.СкопироватьРекурсивно(СвойстваСчета.ИдентификаторыСубконто);
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		АналитикаСчета.Вставить("Подразделение", "Подразделение");
	КонецЕсли;
	
	Возврат АналитикаСчета;
	
КонецФункции

// Значения по умолчанию аналитики на счете
//
// Параметры:
//  АналитикаСчета - Структура - см. АналитикаСчета
//  СвойстваСчета  - Структура - см. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - как в АналитикаСчета
//   * Значение - значение по умолчанию (пустая ссылка соответствующего типа)
//
Функция ЗначенияПоУмолчаниюАналитикиСчета(АналитикаСчета, СвойстваСчета) Экспорт
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	
	Для Каждого РазрезАналитики Из АналитикаСчета Цикл
		
		Если РазрезАналитики.Ключ = "Подразделение" Тогда
			ЗначенияПоУмолчанию.Вставить(
				"Подразделение",
				БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		Иначе
			
			ИмяТипЗначения = СтрШаблон("ВидСубконто%1ТипЗначения", РазрезАналитики.Значение);
			
			Значение = Неопределено;
			Если СвойстваСчета.Свойство(ИмяТипЗначения) Тогда
				ТипЗначения = СвойстваСчета[ИмяТипЗначения];
				ОписаниеТипов = Новый ОписаниеТипов(ТипЗначения);
				Значение = ОписаниеТипов.ПривестиЗначение(Неопределено);
			КонецЕсли;
			
			ЗначенияПоУмолчанию.Вставить(РазрезАналитики.Ключ, Значение);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Возвращает свойства счета и отображаемую аналитику, в соответствии с настройками плана счетов и
// учетной политики.
// 
// Параметры:
//  СчетУчета - ПланСчетовСсылка.Хозрасчетный
//  Организация - СправочникСсылка.Организации
//  Дата - Дата
// 
// Возвращаемое значение:
//  Структура:
//    * ДанныеСчета - См. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета.
//    * ОтображаемаяАналитика - Соответствие из КлючИЗначение:
//      ** Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
//      ** Значение - Булево
//
Функция СвойстваИАналитикаСчета(СчетУчета, Организация, Дата) Экспорт
	
	Результат = Новый Структура;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	ОтображаемаяАналитика = Новый Соответствие;

	НеиспользуемаяАналитика = ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика();
	
	Для Каждого ВидСубконто Из ДанныеСчета.ИдентификаторыСубконто Цикл
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + XMLСтрока(ВидСубконто.Значение) + "ТипЗначения"];
		
		// Отображение аналитики может определяться:
		// - функциональными опциями
		СкрытьСубконтоПоФункциональнымОпциям = СкрытьСубконтоПоФункциональнымОпциям(ТипЗначенияСубконто);
			
		// - настройкой плана счетов
		ОтображатьАналитику = Не СкрытьСубконтоПоФункциональнымОпциям
			И (НеиспользуемаяАналитика.Найти(ВидСубконто.Ключ) = Неопределено);

		ОтображаемаяАналитика.Вставить(ВидСубконто.Ключ, ОтображатьАналитику);

	КонецЦикла;
		
	// - настройкой учетной политики
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Дата) Тогда
		НастроитьОтображениеСубконтоПоДаннымУчетнойПолитики(ДанныеСчета, Дата, Организация, ОтображаемаяАналитика);
	КонецЕсли;

	Результат.Вставить("ДанныеСчета", ДанныеСчета);
	Результат.Вставить("ОтображаемаяАналитика", ОтображаемаяАналитика);
		
	Возврат Результат;
	
КонецФункции

// Возвращает представление аналитики затрат (счет и субконто) для отображения на форме.
// 
// Параметры:
//  ДанныеАналитики - Структура
// 
// Возвращаемое значение:
//  Строка - Представление аналитики учета затрат
//
Функция ПредставлениеАналитикиУчетаЗатрат(Знач ДанныеАналитики) Экспорт
	
	АналитикаУчетаМассив = Новый Массив;
	ПустоеЗначение = "<...>";
	УчетПоПодразделениям = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеАналитики.СчетЗатрат) Тогда
		СвойстваИАналитикаСчета = БухгалтерскийУчетКлиентСервер.СвойстваИАналитикаСчета(
			ДанныеАналитики.СчетЗатрат,
			ДанныеАналитики.Организация,
			ДанныеАналитики.Дата);
		СвойстваСчета = СвойстваИАналитикаСчета.ДанныеСчета;
		УчетПоПодразделениям = СвойстваСчета.УчетПоПодразделениям;
		АналитикаУчетаМассив.Добавить(СвойстваСчета.Код);
		
		ЗаполнитьПредставлениеСубконтоСчета(ДанныеАналитики, СвойстваИАналитикаСчета, АналитикаУчетаМассив);
		
		Если УчетПоПодразделениям Тогда
			АналитикаУчетаМассив.Добавить(
				?(ЗначениеЗаполнено(ДанныеАналитики.ПодразделениеЗатрат), ДанныеАналитики.ПодразделениеЗатрат, ПустоеЗначение));
		КонецЕсли;
	Иначе
		АналитикаУчетаМассив.Добавить(ПустоеЗначение);
	КонецЕсли;
	
	Если ДанныеАналитики.РаздельныйУчетНДСНаСчете19 Тогда
		Если ЗначениеЗаполнено(ДанныеАналитики.СпособУчетаНДС) Тогда
			АналитикаУчетаМассив.Добавить(ДанныеАналитики.СпособУчетаНДС);
		Иначе
			АналитикаУчетаМассив.Добавить(ПустоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(АналитикаУчетаМассив, ", ");
	
КонецФункции

#КонецОбласти

#Область ПервичныеДокументы

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры:
//  СписокСведений - СписокЗначений - Список значений со значениями параметров организации.
//   СписокСведений формируется функцией СведенияОЮрФизЛице.
//  Список         - Строка - Список запрашиваемых параметров организации.
//  СПрефиксом     - Булево - Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Перем Префикс, СтрокаДополнения;

	Результат = Новый Массив;
	ЦифровойСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СписокСведений, "ЦифровойСчет", Ложь);
	
	СоответствиеПараметров = Новый Структура;
	СоответствиеПараметров.Вставить("ПолноеНаименование",			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм",	" ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");
	СоответствиеПараметров.Вставить("КПП",							" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("ТелефонЮридическогоАдреса",	" тел.: ");
	СоответствиеПараметров.Вставить("Факс",							" факс: ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");
	СоответствиеПараметров.Вставить("ОГРН",                         " ОГРН ");
	СоответствиеПараметров.Вставить("СтранаРегистрации",            " ");
	
	Если ЦифровойСчет Тогда
		СоответствиеПараметров.Вставить("НомерСчета",					" цифровой рубль: ");	
	Иначе
		СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
		СоответствиеПараметров.Вставить("Банк",               			" в банке ");
		СоответствиеПараметров.Вставить("БИК",                			" БИК ");
		СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	КонецЕсли;
	
	Если ПустаяСтрока(Список) Тогда

		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		Если НЕ СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			Список = "НаименованиеПолное," + Список;
		Иначе
			Список = "НаименованиеДляПечатныхФорм," + Список;
		КонецЕсли;
		Если СписокСведений.Свойство("ТелефонЮридическогоАдреса") Тогда
			Список = "ТелефонЮридическогоАдреса," + Список;
		КонецЕсли;

	КонецЕсли;
	
	СписокПараметров = СтрРазделить(Список, ",", Ложь);
	СписокПараметровБанковскиеРеквизиты = СтрРазделить("БИК,КоррСчет,НомерСчета",",");
	
	Для каждого ИмяПараметра Из СписокПараметров Цикл
		
		Если СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения) Тогда

			Если ПустаяСтрока(СтрокаДополнения) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СПрефиксом = Истина 
				И СоответствиеПараметров.Свойство(ИмяПараметра, Префикс) Тогда
				
				Если СписокПараметровБанковскиеРеквизиты.Найти(ИмяПараметра) <> Неопределено  Тогда
				
					ПроверитьЗаменитьБанковскиеПрефиксы(Префикс, ИмяПараметра, СтрокаДополнения)
				
				КонецЕсли; 
				
				Результат.Добавить(Префикс + СтрокаДополнения);
			Иначе
				Результат.Добавить(СтрокаДополнения);
			КонецЕсли; 
			
		Иначе
			
			ТекстСообщения = НСТр("ru = 'Не удалось определить значение параметра организации:'") + " " + ИмяПараметра;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование сведений об организации'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Организации,, 
				ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		КонецЕсли;
		
	КонецЦикла; 

	СтрокаРезультата = СтрСоединить(Результат, ",");
	
	Пока СтрНайти(СтрокаРезультата, "  ") > 0 Цикл
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "  ", " ");
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаРезультата);
	
КонецФункции

Процедура ПроверитьЗаменитьБанковскиеПрефиксы(Префикс, ИмяПараметра, СтрокаДополнения)

	Если ИмяПараметра = "НомерСчета" 
		И БанковскиеПравила.ЭтоКазначейскийСчет(СтрокаДополнения) Тогда
	
		Префикс = " казн.счет ";
		
	ИначеЕсли ИмяПараметра = "БИК" 
		И БанковскиеПравила.ЭтоБИКТОФК(СтрокаДополнения) Тогда
		Префикс = " БИК ТОФК ";
		
	ИначеЕсли ИмяПараметра = "КоррСчет" 
		И БанковскиеПравила.ЭтоЕдиныйКазначейскийСчет(СтрокаДополнения) Тогда
		Префикс = " ЕКС ";
	КонецЕсли; 

КонецПроцедуры

// Определяет в контексте отдельных операций, отчетов и т.п., нужно ли рассчитывать,
// заполнять и отображать пользователю суммы разниц в проводках.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период      - Дата - дата, на которую проверяется значение настройки;
//                если не заполнена, то проверяется наиболее поздняя
//  ДоступныйВидИспользованияСумм - Строка - максимально возможный.
//                                  См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// 
// Возвращаемое значение:
//   Строка - варианты использования разниц. См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
Функция ИспользоватьСуммыНалогНаПрибыль(Организация, Период, ДоступныйВидИспользованияСумм = "") Экспорт
	
	// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно типу учета.
	Если Не НалоговыйУчет.ТребуетсяНалоговыйУчет() Тогда
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если ПустаяСтрока(ДоступныйВидИспользованияСумм) Тогда
		ДоступныйВидИспользованияСумм = БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль();
	КонецЕсли;
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ДоступныйВидИспользованияСумм) Тогда
		// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;
	
	ПараметрыФункциональнойОпции = Новый Структура;
	ПараметрыФункциональнойОпции.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Период) Тогда
		ПериодКеша = Мин(НачалоМесяца(Период), '39991201');
		ПараметрыФункциональнойОпции.Вставить("Период", ПериодКеша);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ПлательщикНалогаНаПрибыль", ПараметрыФункциональнойОпции) Тогда
		// Никакие суммы кроме БУ не нужны данной организации согласно ее системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ДоступныйВидИспользованияСумм) Тогда
		// В базе нет ни одной организации, для которой требовалось бы учитывать ПР/ВР.
		Возврат "ПлательщикНалогаНаПрибыль";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаПБУ18", ПараметрыФункциональнойОпции) Тогда
		// Нужно учитывать постоянные и временные разницы для данной организации.
		Возврат "ПоддержкаПБУ18";
	Иначе
		// Нужно отдельно учитывать суммы НУ для данной организации.
		Возврат "ПлательщикНалогаНаПрибыль";
	КонецЕсли;
	
КонецФункции

// Настраивает поля учета разниц в форме, отображающей набор записей регистра Хозрасчетный.
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  ПоляЗаголовков - Структура - поля формы, отображающие заголовки колонок, содержащих показатели налогового учета и разниц
//                   Должна содержать ключи Дт и Кт. Значения - поля формы.
//  ПериодДок      - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//
Процедура НастроитьПоляУчетаРазниц(ПоляНалогНаПрибыль, ПоляЗаголовков, Период, Организация = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВидИспользованияСумм = "НеИспользовать";
	Иначе
		ВидИспользованияСумм = ИспользоватьСуммыНалогНаПрибыль(Организация, Период);
	КонецЕсли;

	Для Каждого Поле Из ПоляНалогНаПрибыль Цикл

		Поле.Ключ.Видимость = ?(Поле.Значение = "НУ",
			БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм),
			БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм));
		
	КонецЦикла;
	
	Если БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм) Тогда
		ШаблонЗаголовкаКолонокНалоговыйУчет = НСтр("ru='Сумма %1'");
	Иначе
		ШаблонЗаголовкаКолонокНалоговыйУчет = НСтр("ru='Сумма НУ %1'");
	КонецЕсли;
	ПоляЗаголовков.Дт.Заголовок = СтрШаблон(ШаблонЗаголовкаКолонокНалоговыйУчет, НСтр("ru='Дт'"));
	ПоляЗаголовков.Кт.Заголовок = СтрШаблон(ШаблонЗаголовкаКолонокНалоговыйУчет, НСтр("ru='Кт'"));
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСуммСписанияРБП

// Устарела: Следует использовать РасходыБудущихПериодов.СуммыРасходовОчередногоМесяца()
//
Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, ДатаНачалаСписания, ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, ОчереднойМесяц, мКонДата) Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "Сумма", "Сумма");
	
	Суммы = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	Суммы.Сумма = Остаток;
	
	ПротоколРасчета = Неопределено;
	Суммы = РасходыБудущихПериодов.СуммыРасходовОчередногоМесяца(
		Суммы,
		ОписаниеСумм,
		СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов,
		ОчереднойМесяц,
		СтатьяРасходовБудущихПериодов.ДатаНачалаСписания,
		СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания,
		ПротоколРасчета);
	
	Если ВспомогательныеДанные <> Неопределено И ПротоколРасчета <> Неопределено Тогда
		ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ПротоколРасчета.Числитель;
		ВспомогательныеДанные.КоличествоМесяцевДней                = ПротоколРасчета.Знаменатель;
	КонецЕсли;
	
	Возврат Суммы.Сумма;
	
КонецФункции

#КонецОбласти

#Область ФормыДокументовПоДвижениюДенежныхСредств

Функция ПолучитьПодразделениеПоСчету(Подразделение, Счет, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если НЕ Счет.УчетПоПодразделениям Тогда
		Подразделение = Неопределено;
		Возврат Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) 
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Тогда
		Возврат Подразделение;
	КонецЕсли;
	
	Если ПодразделениеПоУмолчанию = Неопределено Тогда                                    
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
			Подразделение = ПодразделениеПоУмолчанию;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьМассивСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора",     МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовОтбора)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|	И НЕ Хозрасчетный.Ссылка В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

#КонецОбласти

#Область ОпределениеСчетовУчета

// Определяет счета учета расходов будущих периодов.
//
Функция СчетаУчетаРасходовБудущихПериодов() Экспорт

	СчетаРасходыБудущихПериодов = Новый Массив;
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);                      // 97
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников); // 76.01.2
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);             // 76.01.9
	
	Результат = СформироватьМассивСубсчетов(СчетаРасходыБудущихПериодов);
	
	Возврат Результат;

КонецФункции

// Определяет счет учета материалов, переданных в переработку
Функция СчетУчетаМатериалыПереданныеВПереработку(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетВыбранныйПользователем)
		И СчетВыбранныйПользователем.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
		Возврат СчетВыбранныйПользователем;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
	КонецЕсли;
	
КонецФункции

// Определяет счет учета материалов, принятых в переработку и затем использованных
Функция СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетВыбранныйПользователем) Тогда
		Возврат СчетВыбранныйПользователем;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	КонецЕсли;
	
КонецФункции

// Определяет счет учета наличных денежных средств в кассе.
//
// Параметры:
//  УсловияОтбора - Структура - см. НовыеУсловияОтбораСубсчетов().
//
// Возвращаемое значение:
//   Массив   - Список счетов наличных денежных средств, используемых в проводках.
//
Функция СчетаНаличныхДенежныхСредств(УсловияОтбора = Неопределено) Экспорт 

	МассивСчетовКасса = Новый Массив;
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	
	Если УсловияОтбора = Неопределено Тогда
		УсловиеОтбора = НовыеУсловияОтбораСубсчетов();
	КонецЕсли;
	
	УсловиеОтбора.ИспользоватьВПроводках = Истина;
	
	Возврат СформироватьМассивСубсчетовПоОтбору(МассивСчетовКасса, УсловиеОтбора);

КонецФункции

#КонецОбласти

#Область ИсчислениеПериодов

// Определяет дату начала отчетного года для составления финансовой отчетности в соответствии с Законом "О БУХГАЛТЕРСКОМ
// УЧЕТЕ" N 402-ФЗ (6 декабря 2011 года).
//
// Статья 15
// 3. В случае, если государственная регистрация экономического субъекта, за исключением кредитной организации,
// произведена после 30 сентября, первым отчетным годом является, если иное не установлено экономическим субъектом,
// период с даты государственной регистрации по 31 декабря календарного года, следующего за годом его государственной
// регистрации, включительно.
// 
// Параметры:
//  Период		 - Дата - любая дата из отчетного года
//  Организация	 - СправочникСсылка.Организации - Организация, начало отчетного года которой нужно получить.
// 
// Возвращаемое значение:
//  Дата         - дата начала периода; как правило начало года, но может быть и датой регистрации организации
//  Неопределено - запрошен период ранее даты регистрации организации.
//
Функция НачалоОтчетногоГода(Период, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.НачалоНалоговогоПериода(
		Организация,
		Период,
		ВариантРасширенногоПервогоНалоговогоПериода(),
		Перечисления.Периодичность.Год);
		
КонецФункции

// Определяет вариант, имеющий отношение к составлению финансовой отчетности
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
//
Функция ВариантРасширенногоПервогоНалоговогоПериода() Экспорт
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследнемКвартале;
КонецФункции

// Идентифицирует вариант, как имеющий отношение к составлению финансовой отчетности
//
// Параметры:
//  ВариантНалоговогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный вариант применяется для налога на прибыль
//
Функция ПрименяютсяПравилаРасширенногоНалоговогоПериода(ВариантНалоговогоПериода) Экспорт
	
	Возврат ВариантНалоговогоПериода = ВариантРасширенногоПервогоНалоговогоПериода();
	
КонецФункции

// Определяет границы периода бухгалтерской отчетности, к которому относится переданная дата.
// Возвращает данные первого отчетного периода организации, если переданная дата относится к периоду до ее создания.
//
// Параметры:
//  ПроверяемыйПериод - Дата - дата в периоде, границы которого определяются
//  Организация       - СправочникСсылка.Организации - юридическое лицо, об отчетности которого идет речь
// 
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало отчетного периода (начало года);
//    * Начало - Дата - фактическое начало отчетного периода (может совпадать со стандартным началом или
//               датой регистрации организации);
//    * Конец  - Дата - дата с указанием времени.
// 
Функция БлижайшийОтчетныйПериод(ПроверяемыйПериод, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		ПроверяемыйПериод,
		ВариантРасширенногоПервогоНалоговогоПериода(),
		Перечисления.Периодичность.Год);
		
КонецФункции

// Готовит тексты информации для пользователя об особенностях первого отчетного периода (для целей финансовой отчетности)
// организации, зарегистрированной в последнем квартале года.
//
// Параметры:
//  Период      - Дата - конец отчетного периода, к которому относится информация
//  Организация - СправочникСсылка.Организации - юридическое лицо, об отчетности которого идет речь
//  ОписаниеНалоговогоПериода 
//              - Структура - результат функции ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод.
//                Может быть передан для оптимизации производительности, если уже рассчитан в вызывающем коде.
// 
// Возвращаемое значение:
//  Структура - ИнформированиеНалоговыйПериодКлиентСервер.НовыйИнформация
//
Функция ИнформацияОтчетныйПериод(Период, Организация, ОписаниеНалоговогоПериода = Неопределено) Экспорт

	// Определим периодичность отчетности.
	БлижайшийПериод = БлижайшийОтчетныйПериод(Период, Организация);
	
	Если Период < БлижайшийПериод.Период Тогда
		// Нет никаких сведений для определения периода.
		// Определяем как наиболее общий
		ПериодичностьОтчета = Перечисления.Периодичность.Год;
	Иначе
		
		// Обычно финансовая отчетность предоставляется на квартальной основе.
		// Поэтому периоды, выраженные в месяцах, используем, если период не может быть выражен числом кварталов.
		РазмерКвартала = 3; // месяца
		ЭтоКвартальнаяОтчетность = (Месяц(Период) % РазмерКвартала = 0);
		Если ЭтоКвартальнаяОтчетность Тогда
			ПериодичностьОтчета = Перечисления.Периодичность.Квартал;
		Иначе
			ПериодичностьОтчета = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
		ВариантРасширенногоПервогоНалоговогоПериода(),
		Период,
		Организация,
		НСтр("ru = 'финансовую отчетность'"),
		Перечисления.Периодичность.Год,
		ПериодичностьОтчета,
		ОписаниеНалоговогоПериода);

КонецФункции

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы НУ в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// Она единообразно работает и с ПР/ВР, и с НУ.
// 
// Возвращаемое значение:
//  Булево - Истина, если может потребоваться использовать суммы НУ в проводках.
//
Функция ПользователюДоступныСуммыНУ() Экспорт
	
	// Функциональные опции, привязанные к ресурсу периодического регистра сведений,
	// фактически могут быть использованы только при использовании Периода в качестве параметров функциональной опции.
	
	// Потому что значение функциональной опции вычисляется по срезу последних регистра и если период не передан,
	// то значение функциональной опции будет Истина только в том случае, когда на самый поздний момент значение ресурса Истина,
	// а не в том случае, когда в одной из записей значение ресурса Истина.
	
	// Поэтому здесь не обращаемся к функциональной опции, а обращаемся к данным регистра непосредственно.
	
	Возврат БухгалтерскийУчетПереопределяемый.ПользователюДоступныСуммыНУ();

КонецФункции

#КонецОбласти

#Область МежотчетныйПериод

// Возвращает верхнюю границу уточнения периода исходя из заданной в метаданнх длины учтонения периода.
//
// Возвращаемое значение:
//	Число
//
Функция ВерхняяГраницаУточненияПериода() Экспорт
	
	Возврат Pow(10, Метаданные.РегистрыБухгалтерии.Хозрасчетный.ДлинаУточненияПериода) - 1;
	
КонецФункции

// Проверяет документ на принадлежность к межотчетному периоду.
//
// Параметры:
//	Источник - ДокументСсылка.РегламентнаяОперация, ДокументОбъект.РегламентнаяОперация - Проверяемый документ
//
// Возвращаемое значение:
//	Булево
//
Функция ЭтоОперацияМежотчетногоПериода(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ВидОперации");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РегламентнаяОперация") Тогда
		ВидОперации = Источник.ВидОперации;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ВидыОперацийМежотчетногоПериода = Новый Соответствие;
	ВидыОперацийМежотчетногоПериода.Вставить(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ25, Истина);
	ВидыОперацийМежотчетногоПериода.Вставить(Перечисления.ВидыРегламентныхОпераций.ПереходНаФСБУ6, Истина);
	ВидыОперацийМежотчетногоПериода.Вставить(Перечисления.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование, Истина);
	ВидыОперацийМежотчетногоПериода.Вставить(Перечисления.ВидыРегламентныхОпераций.КорректировкаОтложенногоНалога, Истина);
	
	Возврат ВидыОперацийМежотчетногоПериода.Получить(ВидОперации) <> Неопределено;
	
КонецФункции

// Проверяет наличие операций межотчетного периода на дату.
//
// Параметры:
//	Период - Дата
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьОперацииМежотчетногоПериода(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.СчетДт КАК СчетДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Период = &Период
	|	И Хозрасчетный.УточнениеПериода > 0
	|	И Хозрасчетный.Организация = &Организация";
	
	Запрос.Параметры.Вставить("Период", КонецМесяца(Период));
	Запрос.Параметры.Вставить("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Межотчетный период нужен для отчетности за год, следующий за ним. Поэтому данные в нем нужно разрешать редактировать,
// даже если предшествующий ему период закрыт от редактирования.
// Если изменение на начало года разрешено и изменяемый объект не меняет данные более ранних периодов
// (в случае переноса даты), то будет установлен признак, отключающий проверку даты запрета.
// В противном случае вызывается исключение.
//
// Параметры:
//  Источник - ДокументОбъект, РегистрБухгалтерииНаборЗаписей.Хозрасчетный - обрабатываемые данные.
//
Процедура ПроверитьДатуЗапретаНаНачалоПериодаСледующегоЗаМежотчетным(Источник) Экспорт
	
	Если Источник.ОбменДанными = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения")
		И Источник.ДополнительныеСвойства.ПропуститьПроверкуЗапретаИзменения Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	
	ЭтоДокумент           = ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника);
	ЭтоРегистрБухгалтерии = ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеИсточника);
	
	Если Не ЭтоДокумент И Не ЭтоРегистрБухгалтерии Тогда
		Возврат;
	КонецЕсли;
	
	// Принадлежность документа к межотчетному периоду определяется соответствующим реквизитом или видом операции документа
	// "Регламентная операция". Для набора записей подобная проверка выполняется в методе СдвинутьДату().
	// Здесь она не имеет смысла, поскольку признак межотчетного периода устанавливается для каждой записи,
	// а не для всего набора записей в целом.
	Если ЭтоДокумент Тогда
		
		Если Не (ОбщегоНазначения.ЕстьРеквизитОбъекта("МежотчетныйПериод", МетаданныеИсточника) И Источник.МежотчетныйПериод)
			И Не ЭтоОперацияМежотчетногоПериода(Источник) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Смещаем дату источника на начало следующего года.
	СдвинутьДату(Источник, Истина, ЭтоРегистрБухгалтерии);
	// Проверка даты запрета.
	ИзменениеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(Источник);
	// Возвращаем дату в исходное значение.
	СдвинутьДату(Источник, Ложь, ЭтоРегистрБухгалтерии);
	
	// Будет выполнен штатный алгоритм проверки даты запрета с выдачей ошибки.
	Если ИзменениеЗапрещено Тогда
		Возврат;
	КонецЕсли;
		
	// Проверим дату запрета для старой версии источника.
	ИсточникИзБазыДанных = ИсточникПроверкиИзБазыДанных(Источник, ЭтоРегистрБухгалтерии);
	
	Если ИсточникИзБазыДанных <> Неопределено Тогда
		
		СдвинутьДату(ИсточникИзБазыДанных, Истина, ЭтоРегистрБухгалтерии);
		ИзменениеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(ИсточникИзБазыДанных);
		
	КонецЕсли;
	
	Если Не ИзменениеЗапрещено Тогда
		Источник.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Процедура СдвинутьДату(Источник, СдвигВперед, ЭтоРегистрБухгалтерии)
	
	Сдвиг = ?(СдвигВперед, 1, -1);
	
	Если ЭтоРегистрБухгалтерии Тогда
		
		УточнениеПериода = БухгалтерскийУчетКлиентСервер.ОсновноеЗначениеУточненияМежотчетногоПериода();
		БудетУстановленоУточнениеПериода = Источник.ДополнительныеСвойства.Свойство("УстанавливаемоеУточнениеПериода")
			И Источник.ДополнительныеСвойства.УстанавливаемоеУточнениеПериода = УточнениеПериода;
			
		Для Каждого Проводка Из Источник Цикл
			Если БудетУстановленоУточнениеПериода Или Проводка.УточнениеПериода = УточнениеПериода Тогда
				Проводка.Период = Проводка.Период + Сдвиг;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Источник.Дата = Источник.Дата + Сдвиг;
	КонецЕсли;

КонецПроцедуры

Функция ИсточникПроверкиИзБазыДанных(Источник, ЭтоРегистрБухгалтерии)

	Если ЭтоРегистрБухгалтерии Тогда
		
		Регистратор = Источник.Отбор.Регистратор.Значение;
		ИсточникИзБазыДанных = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		ИсточникИзБазыДанных.Отбор.Регистратор.Установить(Регистратор);
		ИсточникИзБазыДанных.Прочитать();
		
		// Если старая версия набора записей не содеражит записей, проверка не требуется.
		Если ИсточникИзБазыДанных.Количество() = 0 Тогда
			Возврат Неопределено; 
		КонецЕсли;
		
	Иначе
		
		Если Источник.Ссылка.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИсточникИзБазыДанных = Источник.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	Возврат ИсточникИзБазыДанных;

КонецФункции

Процедура НастроитьОтображениеСубконтоПоДаннымУчетнойПолитики(Знач ДанныеСчета, Знач Дата, Знач Организация, Знач ОтображаемаяАналитика)
	
	НастраиваемыеСчета = Справочники.НастройкиУчетаЗатрат.НастраиваемыеСчета();
	
	Если НастраиваемыеСчета.Найти(ДанныеСчета.Ссылка) <> Неопределено Тогда
		
		НастройкиУчетаЗатрат = Справочники.НастройкиУчетаЗатрат.БазовыеНастройки(Дата, Организация);
		
		ОтображаемаяАналитикаНастройка = НастройкиУчетаЗатрат.ОтображаемаяАналитика[ДанныеСчета.Ссылка];
		Если ОтображаемаяАналитикаНастройка <> Неопределено Тогда
			Для Каждого ВидСубконто Из ДанныеСчета.ИдентификаторыСубконто Цикл
				ОтображаемаяАналитика[ВидСубконто.Ключ] =
				ОтображаемаяАналитика[ВидСубконто.Ключ] И ОтображаемаяАналитикаНастройка.Найти(ВидСубконто.Ключ) <> Неопределено;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция СкрытьСубконтоПоФункциональнымОпциям(Знач ТипЗначенияСубконто)
	
	СкрытьСубконтоПоФункциональнымОпциям = Истина;
	
	// Субконто с типами значений, отключенных функционкциональными опциями, не должны отображаться
	// в интерфейсе.
	Для Каждого Тип Из ТипЗначенияСубконто.Типы() Цикл
		
		Если Не СкрытьСубконтоПоФункциональнымОпциям Тогда
			Прервать;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		СкрытьСубконтоПоФункциональнымОпциям = Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
			
		// Справочник "Номенклатурные группы" - особый случай, поскольку его использование определяется не только
		// вхождением в состав функциональных опций, но и совокупностью значения функциональной опции
		// ИспользоватьНесколькоНоменклатурныхГрупп и количеством элементов справочника "Номенклатурные группы".
		// При этом меняется видимость не только субконто ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
		// (оно также содержится в списке субконто, неотображаемых в соответствии с настройкой
		// плана счетов ПланыСчетов.Хозрасчетный.НеиспользуемаяАналитика()), но и пользовательских субконто
		// со значением этого типа (если в составе типа субконто нет значений других типов, которые нужно отображать).
		Если Тип = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СкрытьСубконтоПоФункциональнымОпциям =
				СкрытьСубконтоПоФункциональнымОпциям Или БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СкрытьСубконтоПоФункциональнымОпциям;

КонецФункции

Процедура ЗаполнитьПредставлениеСубконтоСчета(Знач ДанныеАналитики, Знач СвойстваИАналитикаСчета, АналитикаУчетаМассив)
	
	ПустоеЗначение = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
	СвойстваСчета = СвойстваИАналитикаСчета.ДанныеСчета;
	ОтображаемаяАналитика = СвойстваИАналитикаСчета.ОтображаемаяАналитика;
	
	Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
		
		ЗначениеСубконто = ДанныеАналитики["Субконто" + XMLСтрока(Н)];
		ВидСубконто = СвойстваСчета["ВидСубконто" + XMLСтрока(Н)];
		
		Если ОтображаемаяАналитика[ВидСубконто] = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			АналитикаУчетаМассив.Добавить(ЗначениеСубконто);
		Иначе
			АналитикаУчетаМассив.Добавить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
