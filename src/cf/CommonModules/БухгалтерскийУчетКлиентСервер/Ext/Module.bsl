#Область ПрограммныйИнтерфейс

// Определяет дату начала года, с отчетности за который обязательно применяется ФСБУ 5 "Запасы"
// 
// Возвращаемое значение:
//  Дата
//
Функция ДатаОбязательногоПримененияФСБУ5() Экспорт
	Возврат '2021-01-01';
КонецФункции

// Определяет дату начала обязательного применения ФСБУ 6 "Основные средства"
// 
// Возвращаемое значение:
//  Дата
//
Функция НачалоОбязательногоПримененияФСБУ6() Экспорт
	
	Возврат '2022-01-01';
	
КонецФункции

// Определяет дату начала досрочного применения ФСБУ 6 "Основные средства"
// 
// Возвращаемое значение:
//  Дата
//
Функция НачалоДосрочногоПримененияФСБУ6() Экспорт
	
	Возврат '2021-01-01';
	
КонецФункции

// Начало применения ФСБУ 27.
// 
// Возвращаемое значение:
//  Дата - Начало применения ФСБУ 27
//
Функция НачалоПримененияФСБУ27() Экспорт
	
	Возврат '2022-01-01';
	
КонецФункции

Процедура УстановитьНачальныеСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьНачальныеСвойстваСубконтоТаблицы(Таблица, ПараметрыУстановки) Экспорт
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНачальныеСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(Форма, СтрокаТаблицы, ПараметрыУстановки) Экспорт
	
	УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(СтрокаТаблицы, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(Форма, Объект, НомерСубконто, ПараметрыУстановки) Экспорт
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(Форма, СтрокаТаблицы, НомерСубконто, ПараметрыУстановки) Экспорт
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
	ОчиститьСубконтоПриИзмененииСубконто(СтрокаТаблицы, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(Форма, Объект, ПараметрыУстановки) Экспорт
	
	ОчиститьСубконтоПриИзмененииОрганизации(Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(Таблица, ПараметрыУстановки) Экспорт
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		ОчиститьСубконтоПриИзмененииОрганизации(СтрокаТаблицы, ПараметрыУстановки);
		
		УстановитьЗначенияСубконтоПоУмолчанию(СтрокаТаблицы, ПараметрыУстановки);
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор свойств счета и аналитики счета, используемых для отображения на форме.
// 
// Возвращаемое значение:
//  Структура - Имена полей формы:
// * ПоляФормы - Структура:
//   ** Субконто1 - Строка
//   ** Субконто2 - Строка
//   ** Субконто3 - Строка
//   ** Подразделение - Строка
// * ПоляОбъекта - Структура - Имена полей объекта:
//   ** СчетУчета - Строка
//   ** Субконто1 - Строка
//   ** Субконто2 - Строка
//   ** Субконто3 - Строка
//   ** Подразделение - Строка
// * ДопРеквизиты - Структура
// * ЗначенияПоУмолчанию - Соответствие из КлючИЗначение: См. ПредопределенныеЗначенияСубконтоПоУмолчанию()
// * СкрыватьСубконто - Булево
// * ДанныеСчета - Структура: См. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета
// * ОтображаемаяАналитика - Неопределено
//                         - Соответствие из КлючИЗначение:
//   ** Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
//   ** Значение - Булево
//
Функция НовыеПараметрыУстановкиСвойствСубконто() Экспорт
	
	Результат = Новый Структура;
	
	ПоляФормы = Новый Структура;
	ПоляФормы.Вставить("Субконто1");
	ПоляФормы.Вставить("Субконто2");
	ПоляФормы.Вставить("Субконто3");
	ПоляФормы.Вставить("Подразделение");
	Результат.Вставить("ПоляФормы", ПоляФормы);
	
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("СчетУчета", "СчетУчета");
	ПоляОбъекта.Вставить("Субконто1");
	ПоляОбъекта.Вставить("Субконто2");
	ПоляОбъекта.Вставить("Субконто3");
	ПоляОбъекта.Вставить("Подразделение");
	Результат.Вставить("ПоляОбъекта", ПоляОбъекта);
	
	ДопРеквизиты = Новый Структура;
	Результат.Вставить("ДопРеквизиты", ДопРеквизиты);
	
	Результат.Вставить("ЗначенияПоУмолчанию", Новый Соответствие); // См. также ПредопределенныеЗначенияСубконтоПоУмолчанию()
	
	Результат.Вставить("СкрыватьСубконто", Истина);
	
	ДанныеСчета = Новый Структура;
	Результат.Вставить("ДанныеСчета", ДанныеСчета);
	
	Результат.Вставить("ОтображаемаяАналитика", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыУстановкиСвойствСубконтоПоШаблону(СубконтоФормы, ПодразделениеФормы, СубконтоОбъекта, ПодразделениеОбъекта, СчетУчетаОбъекта) Экспорт
	
	Результат = НовыеПараметрыУстановкиСвойствСубконто();
	
	Если НЕ ПустаяСтрока(СубконтоФормы) Тогда
		Для Индекс = 1 По 3 Цикл
			Результат.ПоляФормы["Субконто" + Индекс] = СубконтоФормы + Индекс;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПодразделениеФормы) Тогда
		Результат.ПоляФормы.Подразделение = ПодразделениеФормы;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СубконтоОбъекта) Тогда
		Для Индекс = 1 По 3 Цикл
			Результат.ПоляОбъекта["Субконто" + Индекс] = СубконтоОбъекта + Индекс;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПодразделениеОбъекта) Тогда
		Результат.ПоляОбъекта.Подразделение = ПодразделениеОбъекта;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СчетУчетаОбъекта) Тогда
		Результат.ПоляОбъекта.СчетУчета = СчетУчетаОбъекта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки) Экспорт
	
	Результат = Новый Структура;
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	ОписаниеТиповДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСубконто = Объект[ПоляОбъекта["Субконто" + Индекс]];
		ТипСубконто = ТипЗнч(ЗначениеСубконто);
		Если ТипСубконто= Тип("СправочникСсылка.Контрагенты") Тогда
			Результат.Вставить("Контрагент", ЗначениеСубконто);
		ИначеЕсли ОписаниеТиповДоговора.СодержитТип(ТипСубконто) Тогда
			Результат.Вставить("ДоговорКонтрагента", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Номенклатура") Тогда
			Результат.Вставить("Номенклатура", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Склады") Тогда
			Результат.Вставить("Склад", ЗначениеСубконто);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("СчетУчета", Объект[ПоляОбъекта.СчетУчета]);
	
	Если ПоляОбъекта.Свойство("Организация") Тогда
		Результат.Вставить("Организация", Объект[ПоляОбъекта.Организация]);
	КонецЕсли;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		Результат.Вставить(ДопРеквизит.Ключ, ДопРеквизит.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура установки типа и видимости субконто в зависимости от выбранного счета.
//
// Параметры:
//	Счет			 - ПланСчетовСсылка.Хозрасчетный - Счет, для которого необходимо настроить тип и видимость субконто
//	Форма			 - ФормаКлиентскогоПриложения - Форма, которая содержит ПоляФормы и ЗаголовкиПолей
//	ПоляФормы		 - Структура - Значениями которой являются имена соответствующих полей на форме (поля субконто):
//	                   * Субконто1 - Строка
//	                   * Субконто2 - Строка
//	                   * Субконто3 - Строка
//	ПараметрыОтображенияАналитикиСчета - Структура - См. НовыйПараметрыОтображенияАналитикиСчета
//	                                   - Неопределено
//
Процедура ПриВыбореСчета(Счет, Форма, ПоляФормы, ПараметрыОтображенияАналитикиСчета = Неопределено) Экспорт
	
	Если ПараметрыОтображенияАналитикиСчета = Неопределено Тогда
		ПараметрыОтображенияАналитикиСчета = НовыйПараметрыОтображенияАналитикиСчета();
	КонецЕсли;
	
	ЗаголовкиПолей   = ПараметрыОтображенияАналитикиСчета.ЗаголовкиПолей;
	ЭтоТаблица       = ПараметрыОтображенияАналитикиСчета.ЭтоТаблица;
	СкрыватьСубконто = ПараметрыОтображенияАналитикиСчета.СкрыватьСубконто;
	
	СвойстваИАналитикаСчета = СвойстваИАналитикаСчета(
		Счет,
		ПараметрыОтображенияАналитикиСчета.Организация,
		ПараметрыОтображенияАналитикиСчета.ДатаДокумента);
		
		ДанныеСчета = СвойстваИАналитикаСчета.ДанныеСчета;
		ОтображаемаяАналитика = СвойстваИАналитикаСчета.ОтображаемаяАналитика;
	
	Для Индекс = 1 По 3 Цикл
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
		ВидСубконто = ДанныеСчета["ВидСубконто" + Индекс];
		Если Индекс <= ДанныеСчета.КоличествоСубконто
		И Не НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто, ВидСубконто, ОтображаемаяАналитика) Тогда
			Если ЭтоТаблица Тогда
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ТипЗначенияСубконто;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ПодсказкаВвода  = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
				КонецЕсли;
			Иначе
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей["Субконто" + Индекс]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость = Истина;
					КонецЕсли;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ":";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Истина;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ТипЗначенияСубконто;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			// Ничего делать не надо, т.к. не доступные поля будут скрыты
			Если Не ЭтоТаблица Тогда
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей["Субконто" + Индекс]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость	 = Ложь;
					КонецЕсли;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = "";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Ложь;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоТаблица Тогда
		Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Подразделение") Тогда
			Форма[ЗаголовкиПолей["Подразделение"]] = ?(ДанныеСчета.УчетПоПодразделениям, НСтр("ru = 'Подразделение'") + ":", "");
		КонецЕсли;
		Если ПоляФормы.Свойство("Подразделение") Тогда
			
			ДоступностьПодразделения = ДанныеСчета.УчетПоПодразделениям;
			Если ПоляФормы.Свойство("ДоступностьПодразделения") Тогда
				ДоступностьПодразделения = ДоступностьПодразделения ИЛИ ПоляФормы.ДоступностьПодразделения;
			КонецЕсли;
			
			Форма.Элементы[ПоляФормы["Подразделение"]].Доступность = ДоступностьПодразделения;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конструктор дополнительных параметров, влияющих на отображение аналитики счета на форме.
// 
// Возвращаемое значение:
//  Структура:
//    * ЗаголовкиПолей - Неопределено
//                     - Структура из Строка - значениями являются имена соответствующих полей на форме (заголовки субконто):
//                      ** Субконто1 - Строка
//                      ** Субконто2 - Строка
//                      ** Субконто3 - Строка
//    * ЭтоТаблица - Булево
//    * СкрыватьСубконто - Булево
//    * Организация - СправочникСсылка.Организации
//    * ДатаДокумента - Дата
//    * ИспользоватьНастройкиУчетнойПолитики - Булево
//
Функция НовыйПараметрыОтображенияАналитикиСчета() Экспорт
	
	ПараметрыОтображения = Новый Структура;
	
	ПараметрыОтображения.Вставить("ЗаголовкиПолей",   Неопределено);
	ПараметрыОтображения.Вставить("ЭтоТаблица",       Истина);
	ПараметрыОтображения.Вставить("СкрыватьСубконто", Ложь);
	ПараметрыОтображения.Вставить("Организация",      ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыОтображения.Вставить("ДатаДокумента",    '00010101');
	ПараметрыОтображения.Вставить("ИспользоватьНастройкиУчетнойПолитики", Ложь);
	
	Возврат ПараметрыОтображения;
	
КонецФункции
// Процедура установки типа, значения и доступности субконто в зависимости от выбранного счета
//
// Параметры:
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	ЗначенияСубконто - <Соответствие> ИЛИ <Неопределено> - Значения субконто, где ключ Вид субконто, а значение - значение для подстановки
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции СкрытьСубконто
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь, ЗначенияСубконто = Неопределено, СкрыватьСубконто = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				ЗначениеСубконто = ТипЗначенияСубконто.ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
				ЗначениеСубконтоПоУмолчанию = ?(ЗначенияСубконто = Неопределено, ЗначенияСубконто, ЗначенияСубконто.Получить(ДанныеСчета["ВидСубконто" + Индекс]));
				Если ЗначениеЗаполнено(ЗначениеСубконто) ИЛИ (НЕ ЗначениеЗаполнено(ЗначениеСубконтоПоУмолчанию)) Тогда
					Объект[ПоляОбъекта["Субконто" + Индекс]] = ЗначениеСубконто;
				Иначе
					Объект[ПоляОбъекта["Субконто" + Индекс]] = ЗначениеСубконтоПоУмолчанию;
				КонецЕсли;
			Иначе 
				Объект[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто);
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Если ДанныеСчета.УчетПоПодразделениям Тогда
			ПодразделениеПоУмолчанию = Неопределено;
			ПоляОбъекта.Свойство("ПодразделениеПоУмолчанию", ПодразделениеПоУмолчанию);
			НовоеПодразделение = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьПодразделениеПриИзмененииСчета(
				Объект[ПоляОбъекта.Подразделение],
				ПоляОбъекта.Организация,
				ПодразделениеПоУмолчанию);
			
			Если НовоеПодразделение <> Объект[ПоляОбъекта.Подразделение] Тогда
				Объект[ПоляОбъекта.Подразделение] = НовоеПодразделение;
			КонецЕсли;
			
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Истина;
			КонецЕсли;
		Иначе
			Объект[ПоляОбъекта.Подразделение] = Неопределено;
			Если ЭтоТаблица Тогда
				Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			Если НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто) Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = Ложь;
			Иначе
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Валютный") Тогда
		Объект[ПоляОбъекта["Валютный"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный") Тогда
		Объект[ПоляОбъекта["Количественный"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта, ШаблонИмяЭлементаФормы, СписокПараметров) Экспорт
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации(), "БанковскийСчет");
	ВидыПараметров.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), "Подразделение");
	Для Каждого ТипДоговора Из БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы() Цикл
		ВидыПараметров.Вставить(ТипДоговора, "Договор");
	КонецЦикла;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"), "РегистрацияВИФНС");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	ВидыПараметров.Вставить(Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"), "ВидыПлатежейВГосБюджет");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.РасходыБудущихПериодов"), "РасходБудущихПериодов");
	
	ОчищатьСвязанныеСубконто = Ложь;
	ТипыСвязанныхСубконто    = Неопределено;
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущийЭлемент = Форма.ТекущийЭлемент.ТекущийЭлемент;
	Иначе
		ТекущийЭлемент = Форма.ТекущийЭлемент;
	КонецЕсли;
	ИмяТекущегоЭлемента = ?(ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы"), ТекущийЭлемент.Имя, "");
	
	Для Индекс = 1 По 3 Цикл
		ИмяЭлементаФормы = СтрЗаменить(ШаблонИмяЭлементаФормы, "%Индекс%", Индекс);
		ИмяПоляОбъекта   = СтрЗаменить(ШаблонИмяПоляОбъекта  , "%Индекс%", Индекс);
		ТипПоляОбъекта   = ТипЗнч(Объект[ИмяПоляОбъекта]);
		
		ВидПараметра = ВидыПараметров[ТипПоляОбъекта];
		МассивПараметров = Новый Массив();
		
		БухгалтерскийУчетКлиентСерверПереопределяемый.ДополнитьПараметрыВыбораПолейСубконто(
			МассивПараметров, СписокПараметров, ТипПоляОбъекта);
			
		Если ВидПараметра <> Неопределено Тогда
			
			Если ВидПараметра = "Договор" Тогда
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("Контрагент") Тогда
					ИмяКонтрагента = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяКонтрагента, СписокПараметров.Контрагент));
				КонецЕсли;
			ИначеЕсли ВидПараметра = "БанковскийСчет" Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));
			ИначеЕсли ВидПараметра = "РегистрацияВИФНС" Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", 
					ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(СписокПараметров.Организация)));
			ИначеЕсли ВидПараметра = "Субконто"
				И СписокПараметров.Свойство("СчетУчета") Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			ИначеЕсли ВидПараметра = "Подразделение" Тогда
				ИмяРеквизитаОрганизация = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
				Если ЗначениеЗаполнено(ИмяРеквизитаОрганизация) Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяРеквизитаОрганизация, СписокПараметров.Организация));
				КонецЕсли;
			ИначеЕсли ВидПараметра = "ВидыПлатежейВГосБюджет"
				И СписокПараметров.Свойство("СчетУчета") Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СчетУчета", СписокПараметров.СчетУчета));
			ИначеЕсли ВидПараметра = "РасходБудущихПериодов" Тогда
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СчетУчета", СписокПараметров.СчетУчета));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивПараметров.Количество() > 0 Тогда
			ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = ПараметрыВыбора;
		КонецЕсли;
		
		Если ОчищатьСвязанныеСубконто 
			И ЗначениеЗаполнено(Объект[ИмяПоляОбъекта]) Тогда
			
			Если ТипыСвязанныхСубконто = Неопределено Тогда
				ВсеТипыСвязанныхСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
				ТипыСвязанныхСубконто    = Новый ОписаниеТипов(Новый Массив);
				Для Каждого Параметр Из СписокПараметров Цикл
					Если ВсеТипыСвязанныхСубконто[Параметр.Ключ] <> Неопределено Тогда
						ТипыСвязанныхСубконто = Новый ОписаниеТипов(ТипыСвязанныхСубконто, 
							ВсеТипыСвязанныхСубконто[Параметр.Ключ].Типы());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыСвязанныхСубконто.СодержитТип(ТипПоляОбъекта) Тогда
				Объект[ИмяПоляОбъекта] = Новый (ТипПоляОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
			ОчищатьСвязанныеСубконто = Истина; // Очищаются только субконто с номером больше текущего
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура дополняет список параметров субконто, чтобы установить параметры выбора.
// 
// Параметры:
//  СписокПараметров - Структура - Список параметров
//  Объект - Структура, ЛюбаяСсылка - Данные, откуда будем брать параметры 
//  ШаблонИмяПоляОбъекта - Строка - Шаблон имя поля объекта
//
Процедура ДополнитьСписокПараметровСубконто(СписокПараметров, Объект, ШаблонИмяПоляОбъекта) Экспорт
	
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = Объект[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСерверПереопределяемый.ДополнитьСписокПараметровСубконто(
		СписокПараметров, Объект, ШаблонИмяПоляОбъекта);
	
КонецПроцедуры

// Процедура изменяет параметры выбора для ПоляВвода управляемой формы:
//
// Параметры:
//	ЭлементФормыСчет - ПолеВвода управляемой формы, для которого изменяется параметр выбора 
//  МассивСчетов                 - <Массив> ИЛИ <Неопределено> - счета, которыми нужно ограничить список. 
//	                                   Если не заполнено - ограничения не будет
//  ОтборПоПризнакуВалютный      - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//  ОтборПоПризнакуЗабалансовый   - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//  ОтборПоПризнакуСчетГруппа    - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//
//
Процедура ИзменитьПараметрыВыбораСчета(ЭлементФормыСчет, МассивСчетов, ОтборПоПризнакуВалютный = Неопределено, ОтборПоПризнакуЗабалансовый = Неопределено, ОтборПоПризнакуСчетГруппа = Ложь) Экспорт
	
	МассивОтборов = Новый Массив;
	Если ОтборПоПризнакуСчетГруппа <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", ОтборПоПризнакуСчетГруппа));
	КонецЕсли;
	
	Если ОтборПоПризнакуВалютный <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОтборПоПризнакуВалютный));
	КонецЕсли;
	
	Если ОтборПоПризнакуЗабалансовый <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", ОтборПоПризнакуЗабалансовый));
	КонецЕсли;
	
	Если МассивСчетов <> Неопределено И МассивСчетов.Количество() > 0 Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСчетов)));
	КонецЕсли;
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтборов);
	ЭлементФормыСчет.ПараметрыВыбора = ПараметрыВыбора;
	
КонецПроцедуры

Функция ТипСумма() Экспорт
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, РазрядностьДробнойЧастиСумм()));
	
КонецФункции

// Определяет тип неотрицательной денежной суммы, принятый в конфигурации.
// См. также ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
// 
// Возвращаемое значение:
//  ОписаниеТипов - описание типа денежной суммы
//
Функция ТипСуммаНеотрицательная() Экспорт
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, РазрядностьДробнойЧастиСумм(), ДопустимыйЗнак.Неотрицательный));
	
КонецФункции

Функция РазрядностьДробнойЧастиСумм() Экспорт
	
	Возврат 2;
	
КонецФункции

// Проверяет условие использования сумм НУ.
//
// Параметры:
//  ВидИспользованияСумм - Строка - см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
// Возвращаемое значение:
//   Булево      - Истина, если суммы НУ используются.
//
Функция ИспользоватьСуммуНУ(ВидИспользованияСумм) Экспорт
	
	Возврат ВидИспользованияСумм <> "НеИспользовать";
	
КонецФункции

// Проверяет условие использования сумм ВР и ПР.
//
// Параметры:
//  ВидИспользованияСумм - Строка - см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
// Возвращаемое значение:
//   Булево      - Истина, если суммы разниц используются.
//
Функция ИспользоватьСуммыРазниц(ВидИспользованияСумм) Экспорт
	
	Возврат ВидИспользованияСумм = "ПоддержкаПБУ18";
	
КонецФункции

// Проверяет по дате договора, что учет имущества по договору лизинга может вести только лизингодатель.
//
// Параметры:
//  ДатаДоговора - Дата - Дата договора с контрагентом
//
// Возвращаемое значение:
//  Булево       - Истина, если учет имущества ведет только лизингодатель.
//
Функция УчетИмуществаВедетЛизингодатель(ДатаДоговора) Экспорт
	
	// Согласно 382-ФЗ от 29.11.2021 для договоров, заключенных начиная с 01.01.2022,
	// налоговый учет имущества ведет только лизингодатель.
	
	Возврат ДатаДоговора >= '20220101';
	
КонецФункции

// Возвращает значение по умолчанию для уточнения межотчетного периода.
//
// Возвращаемое значение:
//	Число
//
Функция ОсновноеЗначениеУточненияМежотчетногоПериода() Экспорт
	
	Возврат 5;
	
КонецФункции

// Функция возвращает Истина, если в конфигурации используется межотчетный период.
// Межотчетный период - запись движений последней секундой года с указанием уточнения периода.
//
Функция ИспользуетсяМежотчетныйПериод() Экспорт
	
	ИспользуетсяМежотчетныйПериод = Ложь;
	
	БухгалтерскийУчетКлиентСерверПереопределяемый.ПриОпределенииИспользованияМежотчетногоПериода(ИспользуетсяМежотчетныйПериод);
	
	Возврат ИспользуетсяМежотчетныйПериод;
	
КонецФункции

// Функция определяет, нужно ли скрывать данное субконто.
// 
// Параметры:
//  СкрыватьСубконто - Булево - Признак того, нужно ли для этой формы дополнительно скрывать субконто
//  ТипЗначенияСубконто - ОписаниеТипов - Тип значения субконто
//  ВидСубконто - Неопределено
//              - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
//  ОтображаемаяАналитика - Неопределено
//                        - Соответствие из КлючИЗначение:
//   * Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
//   * Значение - Булево
// 
// Возвращаемое значение:
//  Булево - Истина, если субконто нужно скрыть.
//
Функция НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто, ВидСубконто = Неопределено, ОтображаемаяАналитика = Неопределено) Экспорт
	
	Если Не СкрыватьСубконто Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтображаемаяАналитика <> Неопределено И ОтображаемаяАналитика[ВидСубконто] <> Неопределено Тогда
		Возврат Не ОтображаемаяАналитика[ВидСубконто];
	КонецЕсли;
	
	// Для совместимости с вызовами функции, при которых не передается значение ОтображаемаяАналитика
	Возврат ТипЗначенияСубконто = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы") И
		БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	
КонецФункции

// Возвращает список предопределенных значений по умолчанию для субконто.
// 
// Возвращаемое значение:
//  Соответствие из Характеристика.ВидыСубконтоХозрасчетные - значение субконто по умолчанию.
//
Функция ПредопределенныеЗначенияСубконтоПоУмолчанию() Экспорт
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	
	ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"),
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
		
	ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
		
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Возвращает свойства счета и отображаемую аналитику, в соответствии с настройками плана счетов и
// учетной политики.
//
// Параметры:
//  СчетУчета - ПланСчетовСсылка.Хозрасчетный
//  Организация - СправочникСсылка.Организации
//  Дата - Дата
//  
//  Возвращаемое значение:
//   Структура - См. БухгалтерскийУчет.СвойстваИАналитикаСчета
//
Функция СвойстваИАналитикаСчета(СчетУчета, Организация, Дата) Экспорт
	
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.СвойстваИАналитикаСчета(СчетУчета, Организация, НачалоМесяца(Дата));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ПоляОбъекта.СчетУчета]);

	Для Индекс = 1 По 3 Цикл
		Если ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			СтрокаТаблицы[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = ДанныеСчета.КоличествоСубконто >= Индекс
				И НЕ НужноСкрытьСубконто(ПараметрыУстановки.СкрыватьСубконто, ТипЗначенияСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("ПодразделениеДоступность") Тогда
		СтрокаТаблицы[ПоляОбъекта.ПодразделениеДоступность] = ДанныеСчета.УчетПоПодразделениям;
	ИначеЕсли ЗначениеЗаполнено(ПоляОбъекта.Подразделение) Тогда
		СтрокаТаблицы[ПоляОбъекта.Подразделение + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Валютный")
		И ЗначениеЗаполнено(ПоляОбъекта.Валютный) Тогда
		СтрокаТаблицы[ПоляОбъекта.Валютный] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный")
		И ЗначениеЗаполнено(ПоляОбъекта.Количественный) Тогда
		СтрокаТаблицы[ПоляОбъекта.Количественный] = ДанныеСчета.Количественный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("НалоговыйУчет")
		И ЗначениеЗаполнено(ПоляОбъекта.НалоговыйУчет) Тогда
		СтрокаТаблицы[ПоляОбъекта.НалоговыйУчет] = ДанныеСчета.НалоговыйУчет;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(
		БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации(), "БанковскийСчет");
	ВидыПараметров.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), "Подразделение");
	Для каждого ТипДоговора Из БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы() Цикл
		ВидыПараметров.Вставить(ТипДоговора, "Договор");
	КонецЦикла;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"), "РегистрацияВИФНС");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	ВидыПараметров.Вставить(Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"), "ВидыПлатежейВГосБюджет");
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс])
			ИЛИ НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормыСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ЭлементФормыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСубконто   = ТипЗнч(Объект[ПоляОбъекта["Субконто" + Индекс]]);
		ВидПараметров = ВидыПараметров[ТипСубконто];
		Если ВидПараметров <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			Если ВидПараметров = "Договор" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", ДанныеОбъекта.Организация));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("Контрагент") Тогда
					ИмяКонтрагента = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяКонтрагента, ДанныеОбъекта.Контрагент));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "БанковскийСчет" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Организация));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "РегистрацияВИФНС" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
						ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДанныеОбъекта.Организация)));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "Субконто" И ДанныеОбъекта.Свойство("СчетУчета") Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеОбъекта.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			ИначеЕсли ВидПараметров = "Подразделение" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					ИмяРеквизитаОрганизация = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
					Если ЗначениеЗаполнено(ИмяРеквизитаОрганизация) Тогда
						МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяРеквизитаОрганизация, ДанныеОбъекта.Организация));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидПараметров = "ВидыПлатежейВГосБюджет"
				И ДанныеОбъекта.Свойство("СчетУчета") Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СчетУчета", ДанныеОбъекта.СчетУчета));
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				ЭлементФормыСубконто.ПараметрыВыбора = ПараметрыВыбора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	
	ВсеТипыСвязанныхСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСубконтоДляОчистки   = Новый ОписаниеТипов(Новый Массив);
	Для каждого СвойствоОбъекта Из ДанныеОбъекта Цикл
		СвязанныеТипы = ВсеТипыСвязанныхСубконто[СвойствоОбъекта.Ключ];
		Если СвязанныеТипы <> Неопределено Тогда
			ТипыСубконтоДляОчистки = Новый ОписаниеТипов(ТипыСубконтоДляОчистки, СвязанныеТипы.Типы());
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = НомерСубконто + 1 По 3 Цикл
		
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСубконто = ПоляОбъекта["Субконто" + Индекс];
		ТипСубконто = ТипЗнч(Объект[ИмяСубконто]);
		
		Если ЗначениеЗаполнено(Объект[ИмяСубконто])
			И ТипыСубконтоДляОчистки.СодержитТип(ТипСубконто) Тогда
			Объект[ИмяСубконто] = Новый (ТипСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииОрганизации(Объект, ПараметрыУстановки)
	
	ВсеТипыСвязанныхСубконто   = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСвязанныеСОрганизацией = ВсеТипыСвязанныхСубконто["Организация"];
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	
	Для каждого ПолеОбъекта Из ПоляОбъекта Цикл
		ИмяПоля = ПолеОбъекта.Значение;
		Если ЗначениеЗаполнено(ИмяПоля)
			И ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			ТипПоля = ТипЗнч(Объект[ИмяПоля]);
			Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипПоля) Тогда
				Объект[ИмяПоля] = Новый (ТипПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта           = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы             = ПараметрыУстановки.ПоляФормы;
	ДанныеСчета           = ПараметрыУстановки.ДанныеСчета;
	ОтображаемаяАналитика = ПараметрыУстановки.ОтображаемаяАналитика;
	
	Если Не ЗначениеЗаполнено(ДанныеСчета) Тогда
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ПолеСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ПолеСубконто <> Неопределено Тогда
			ПоказатьСубконто = ДанныеСчета.КоличествоСубконто >= Индекс
				И Не НужноСкрытьСубконто(
					ПараметрыУстановки.СкрыватьСубконто,
					ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"],
					ДанныеСчета["ВидСубконто" + Индекс],
					ОтображаемаяАналитика);
			ПолеСубконто.Видимость = ПоказатьСубконто;
			ПолеСубконто.Заголовок = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПоляФормы.Подразделение) Тогда
		ПолеПодразделение = Элементы.Найти(ПоляФормы.Подразделение);
		Если ПолеПодразделение <> Неопределено Тогда
			Если ПоляОбъекта.Свойство("ПодразделениеДоступность") Тогда
				Объект[ПоляОбъекта["ПодразделениеДоступность"]] = ДанныеСчета.УчетПоПодразделениям;
			КонецЕсли;
			ПолеПодразделение.Доступность = ДанныеСчета.УчетПоПодразделениям
				ИЛИ ПоляОбъекта.Свойство("УчетПоПодразделениям") И Объект[ПоляОбъекта["УчетПоПодразделениям"]];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс]) Тогда
			ПолеСубконто = Элементы[ПоляФормы["Субконто" + Индекс]];
			ПолеСубконто.ПодсказкаВвода = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
			ПолеСубконто.ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	ЗначенияПоУмолчанию = ПредопределенныеЗначенияСубконтоПоУмолчанию();
	Для Каждого КлючИЗначение Из ПараметрыУстановки.ЗначенияПоУмолчанию Цикл
		ЗначенияПоУмолчанию.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля = ПоляОбъекта["Субконто" + Индекс];
		Если НЕ ЗначениеЗаполнено(ИмяПоля) 
			ИЛИ ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПоУмолчанию = ЗначенияПоУмолчанию[ДанныеСчета["ВидСубконто" + Индекс]];
		Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			Объект[ИмяПоля] = ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЦикла;
	
	ИмяПоля = ПоляОбъекта.Подразделение;
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		
		УчетПоПодразделениям = ДанныеСчета.УчетПоПодразделениям
			ИЛИ ПоляОбъекта.Свойство("УчетПоПодразделениям") И Объект[ПоляОбъекта["УчетПоПодразделениям"]];
		
		Если УчетПоПодразделениям И НЕ ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			Если ДопРеквизиты.Свойство("ПодразделениеПоУмолчанию") Тогда
				ЗначениеПоУмолчанию = ДопРеквизиты.ПодразделениеПоУмолчанию;
			ИначеЕсли ДопРеквизиты.Свойство("Организация") Тогда
				ЗначениеПоУмолчанию = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(ДопРеквизиты.Организация);
			Иначе
				ЗначениеПоУмолчанию = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
				Объект[ИмяПоля] = ЗначениеПоУмолчанию;
			КонецЕсли; 
		ИначеЕсли НЕ УчетПоПодразделениям И ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			Объект[ИмяПоля] = Неопределено;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
