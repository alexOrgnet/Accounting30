
#Область ПрограммныйИнтерфейс

// Обработчик для события ПриСозданииНаСервере.
// Выполняет прорисовку панели "Подсказки".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которой пользователь нажал команду Подсказки
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Панель Подсказки доступна только в 1С:БизнесСтарт
	Если Не ОбщегоНазначенияБП.ЭтоБизнесСтарт()
		Или ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		Или СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		Элементы.ИзменитьВидимостьПодсказок.Видимость = Ложь;
		Элементы.ПанельПодсказки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ИзменитьВидимостьПодсказок.Видимость = Истина;
	Элементы.ПанельПодсказки.Видимость = Истина;
	
	НаименованиеРаздела = УправлениеПанельюПодсказкиКлиентСервер.НаименованиеОткрытогоРаздела(Форма);
	
	Если Не ЗначениеЗаполнено(НаименованиеРаздела) Тогда
		Элементы.ИзменитьВидимостьПодсказок.Видимость = Ложь;
		Элементы.ПанельПодсказки.Видимость = Ложь;
		Возврат;
	ИначеЕсли Не ПоказыватьПанельПодсказок(НаименованиеРаздела) Тогда
		Элементы.ИзменитьВидимостьПодсказок.Пометка = Ложь;
		Элементы.ИзменитьВидимостьПодсказок.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		Элементы.ПанельПодсказки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбновитьИнформациюВПанелиПодсказок(НаименованиеРаздела, Элементы);
	
КонецПроцедуры

// Обработчик для включения/скрытия панели "Подсказки" при нажатии пользователя на команду
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которой пользователь нажал команду Подсказки
//
Процедура ИзменитьВидимостьПодсказок(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	НаименованиеРаздела = УправлениеПанельюПодсказкиКлиентСервер.НаименованиеОткрытогоРаздела(Форма);
	
	Если Элементы.ИзменитьВидимостьПодсказок.Пометка Тогда
		
		Состояние = Ложь;
		Элементы.ИзменитьВидимостьПодсказок.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		УправлениеПанельюПодсказкиКлиентСервер.ЗаписатьОперациюБизнесСтатистики(
			СтрШаблон("%1.ЗакрытиеФормы", НаименованиеРаздела));
		
	Иначе
		
		Состояние = Истина;
		Элементы.ИзменитьВидимостьПодсказок.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		ОбновитьИнформациюВПанелиПодсказок(НаименованиеРаздела, Элементы);
		УправлениеПанельюПодсказкиКлиентСервер.ЗаписатьОперациюБизнесСтатистики(
			СтрШаблон("%1.ОткрытиеФормы", НаименованиеРаздела));
		
	КонецЕсли;
	
	Элементы.ИзменитьВидимостьПодсказок.Пометка = Состояние;
	Элементы.ПанельПодсказки.Видимость = Состояние;
	
	ЗаписатьСостояниеОтображенияПанелиПодсказок(НаименованиеРаздела, Состояние);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет доступность изменения настройки из панели "Подсказки" для текущего пользователя
//
// Настройка - ОбъектМетаданных: Константа - проверяемая настройка
//
// Возвращаемое значение:
//   Булево - Истина, если доступно изменение настройки
Функция ПравоИзмененияНастройки(Настройка) Экспорт
	
	Возврат ПравоДоступа("Изменение", Настройка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоветПоНавигацииВПрограмме(Раздел)
	
	СтрокиСовета = Новый Массив;
	
	ВестиУчетРасчетовСКонтрагентами = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСКонтрагентами");
	
	Если Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделДеньги() Тогда
		
		СтрокиСовета.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Для контроля поступлений и расходов денежных средств нажмите <a href=""e1cib/command/Отчет.АнализДвиженийДенежныхСредств.Команда.АнализДвиженийДенежныхСредств"">Отчеты - Анализ движения денежных средств</a>.'")));
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделДокументы() Тогда
		
		СтрокиСовета.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Если вы хотите связать документы, то для этого достаточно открыть нужный документ и выбрать из меню ""Создать на основании"" документ для связи.'")));
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделТовары() Тогда
		
		Если ВестиУчетРасчетовСКонтрагентами Тогда
			СтрокиСовета.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Посмотрите движение товаров за период, нажав: <a href=""e1cib/app/Отчет.ДвижениеТоваров"">Отчеты - Движение товаров</a>.'")));
		КонецЕсли;
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделКонтрагенты() Тогда
		
		Если ВестиУчетРасчетовСКонтрагентами Тогда
			СтрокиСовета.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Посмотрите расчеты со своими контрагентами, нажав: <a href=""РасчетыСПоставщикамиИПокупателями"">Отчеты - Расчеты с поставщиками и покупателями</a>.'")));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрокиСовета);
	
КонецФункции

Процедура ОбновитьИнформациюВПанелиПодсказок(НаименованиеРаздела, Элементы)
	
	Если Не ЗначениеЗаполнено(НаименованиеРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПодсказокРаздела = УправлениеПанельюПодсказкиВызовСервера.ОписаниеПодсказокРаздела(НаименованиеРаздела);
	ЭтоРазделСписка = УправлениеПанельюПодсказкиКлиентСервер.ЭтоРазделСписка(НаименованиеРаздела);
	
	// Советы по работе с программой
	МаксимальноеКоличествоСоветовВПанели = УправлениеПанельюПодсказкиКлиентСервер.МаксимальноеКоличествоСоветовВПанели();
	Для Индекс = 1 По МаксимальноеКоличествоСоветовВПанели Цикл
		ИмяЭлемента = СтрШаблон("СоветПоРаботе%1", Индекс);
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы[ИмяЭлемента].Заголовок = ОписаниеПодсказокРаздела[ИмяЭлемента];
		Элементы[ИмяЭлемента].Видимость = ЗначениеЗаполнено(ОписаниеПодсказокРаздела[ИмяЭлемента]);
	КонецЦикла;
	
	// Советы по навигации в программе
	Если ЭтоРазделСписка Тогда
		Элементы.НавигацияВПрограмме.Заголовок = СоветПоНавигацииВПрограмме(НаименованиеРаздела);
	КонецЕсли;
	
	// Видеоролики
	ЕстьВидео = Ложь;
	МаксимальноеКоличествоВидеороликов = УправлениеПанельюПодсказкиКлиентСервер.МаксимальноеКоличествоВидеороликовВПанели();
	Для ИндексВидео = 1 По МаксимальноеКоличествоВидеороликов Цикл
		ИмяЭлементаВидео = СтрШаблон("Видеоинструкция%1", ИндексВидео);
		ИмяГруппыЭлементаВидео = СтрШаблон("ГруппаВидеоинструкция%1", ИндексВидео);
		ЗначениеВидео = ОписаниеПодсказокРаздела[ИмяЭлементаВидео];
		Элементы[ИмяЭлементаВидео].Заголовок = ЗначениеВидео;
		Элементы[ИмяГруппыЭлементаВидео].Видимость = ЗначениеЗаполнено(ЗначениеВидео);
		Если ЗначениеЗаполнено(ЗначениеВидео) Тогда
			ЕстьВидео = Истина;	
		КонецЕсли;
	КонецЦикла;
	Элементы.НеЗнакомыСПрограммой.ОтображатьЗаголовок = ЕстьВидео;
	
	Элементы.ПереходНаКанал.Заголовок = Обработки.ПанелиПростойИнтерфейс.СсылкаНаКаналБизнесСтарт();
	
	// Доступная функциональность к использованию
	Если ЭтоРазделСписка Тогда
		Элементы.ДополнительнаяФункциональность.Видимость = ЗначениеЗаполнено(ОписаниеПодсказокРаздела.ДополнительнаяФункциональность);
		Элементы.ДополнительнаяФункциональность.Заголовок = ОписаниеПодсказокРаздела.ДополнительнаяФункциональность;
	КонецЕсли;
	
КонецПроцедуры

#Область ХранилищеДанных

Функция ПоказыватьПанельПодсказок(Раздел)
	
	Если Не ЗначениеЗаполнено(Раздел) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИзХранилища = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецХранилищаДанных(),
		СтрШаблон(ШаблонКлючаХраненияСостоянияПанелиПодсказок(), Раздел));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеИзХранилища = Неопределено Тогда
		// Проверим, работал ли пользователь с разделом ранее:
		// для уже работающих пользователей панель подсказок необходимо по умолчанию скрыть
		Возврат ЭтоНовыйРазделДляПользователя(Раздел);
	КонецЕсли;
	
	Возврат (ДанныеИзХранилища = Истина);
	
КонецФункции

Процедура ЗаписатьСостояниеОтображенияПанелиПодсказок(Раздел, Состояние)
	
	Если Не ЗначениеЗаполнено(Раздел) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецХранилищаДанных(),
		Состояние,
		СтрШаблон(ШаблонКлючаХраненияСостоянияПанелиПодсказок(), Раздел));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ШаблонКлючаХраненияСостоянияПанелиПодсказок()
	
	Возврат "ОтображатьПанельПодсказок_%1";
	
КонецФункции

Функция ВладелецХранилищаДанных()
	
	Возврат "ИнтерфейсБизнесСтарт";
	
КонецФункции

#КонецОбласти

Функция ЭтоНовыйРазделДляПользователя(Раздел)
	
	Если Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделДеньги() Тогда
		
		Возврат ЭтоНовыйРазделДляПользователя_Деньги();
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделДокументы() Тогда
		
		Возврат ЭтоНовыйРазделДляПользователя_Документы();
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделТовары() Тогда
		
		Возврат ЭтоНовыйРазделДляПользователя_Товары();
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.РазделКонтрагенты() Тогда
		
		Возврат ЭтоНовыйРазделДляПользователя_Контрагенты();
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументСчетНаОплатуПокупателю() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("СчетНаОплатуПокупателю", "ТоварыИУслуги");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументСчетНаОплатуПоставщика() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("СчетНаОплатуПоставщика");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументПоступлениеТоваровУслугПокупкаКомиссия() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("ПоступлениеТоваровУслуг", "ПокупкаКомиссия,Оборудование");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументПоступлениеТоваровУслугТовары() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("ПоступлениеТоваровУслуг", "Товары");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументПоступлениеТоваровУслугУслуги() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("ПоступлениеТоваровУслуг", "Услуги");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументРеализацияТоваровУслугПродажаКомиссия() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("РеализацияТоваровУслуг", "ПродажаКомиссия,Оборудование");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументРеализацияТоваровУслугТовары() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("РеализацияТоваровУслуг", "Товары");
		
	ИначеЕсли Раздел = УправлениеПанельюПодсказкиКлиентСервер.ДокументРеализацияТоваровУслугУслуги() Тогда
		
		Возврат ЭтоНовыйДокументДляПользователя("РеализацияТоваровУслуг", "Услуги");
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоНовыйРазделДляПользователя_Деньги()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеНаРасчетныйСчет.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет");
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоНовыйРазделДляПользователя_Документы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетНаОплатуПоставщика.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика");
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоНовыйРазделДляПользователя_Товары()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура");
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоНовыйРазделДляПользователя_Контрагенты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка заполнения справочника элементами, за исключением государственных органов:
	// данные о государственных органов могут автоматически заполняться по данным организации
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка)");
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЭтоНовыйДокументДляПользователя(ИмяДокумента, ИменаВидовОпераций = "")
	
	// Проверяем наличие доступных пользователю документов
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапроса.ВыбиратьРазрешенные = Истина;
	ОператорЗапроса = ПакетЗапроса.Операторы[0];
	ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	// Добавим источник в запрос
	ТаблицаДокумента = ОператорЗапроса.Источники.Добавить(СтрШаблон("Документ.%1", ИмяДокумента), "ТаблицаДокумента");
	// Добавим поля в запрос
	ПолеСсылка = ОператорЗапроса.ВыбираемыеПоля.Добавить("ТаблицаДокумента.Ссылка");
	// Добавим условие по виду операции
	Если Не ПустаяСтрока(ИменаВидовОпераций) Тогда
		
		Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
			ИмяПеречисленияВидовОпераций = "ВидыОперацийПоступлениеТоваровУслуг";
		ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда
			ИмяПеречисленияВидовОпераций = "ВидыОперацийРеализацияТоваров";
		ИначеЕсли ИмяДокумента = "СчетНаОплатуПокупателю" Тогда
			ИмяПеречисленияВидовОпераций = "ВидыОперацийСчетаПокупателю";
		КонецЕсли;
		
		УсловияОтбора = Новый Массив;
		
		ВидыОпераций = СтрРазделить(ИменаВидовОпераций, ",");
		Для Каждого ВидОперации Из ВидыОпераций Цикл
			УсловияОтбора.Добавить(
				СтрШаблон("ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.%1.%2)", 
				ИмяПеречисленияВидовОпераций, ВидОперации));
		КонецЦикла;
		УсловиеПоВидуОперации = СтрШаблон("(%1)", СтрСоединить(УсловияОтбора, " ИЛИ "));
		ОператорЗапроса.Отбор.Добавить(УсловиеПоВидуОперации);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти