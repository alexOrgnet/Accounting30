#Область Описание
// Содержит общие методы работы с шиной мобильных приложений.
//
// Шина позволяет
// - регистрировать пользователей мобильного приложения, не являющихся пользователями программы,
//   предоставляя им коды доступа
// - опосредованно передавать сообщения между мобильным приложением и программой.
//
// Работа с конкретными мобильными приложениями описывается в отдельных объектах ("менеджерах приложений").
// В качестве менеджера может быть общий модуль или объект метаданных, имеющий модуль менеджера.
// 
// Перечень подключенных приложений (менеджеров приложений) приводится в ЗаполнитьМенеджерыПриложений.
// Каждый менеджер должен предоставлять пять методов:
//
// 1. Функция ИмяМобильногоПриложения()
//    Возвращает строку - имя мобильного приложения в шине.
//
// 2. Функция ИнтервалПроверкиСообщений()
//    Возвращает число секунд - интервал проверки (опроса), есть ли новые сообщения в шине.
//    См. НачатьПроверкуСообщенийПоАктивностиПользователя
//
// 3. Процедура ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение)
//    Выполняет прикладные действия с сообщением, полученным из мобильного приложения.
//    Как правило, суть этих действий - записать полученные данные в информационную базу.
//    После выполнения метода данные будут удалены из шины, поэтому при невозможности их сохранить
//    - если проблема временная, следует вызвать исключение
//    - в остальных случаях - сохранить данные для дальнейшего разбора, в частности, методами 
//      из области ЗаписьОтладочнойИнформации
//    
//    Параметры:
//      Отправитель        - Строка - код доступа пользователя, отсканировавшего QR-код
//      Сообщение          - Структура - данные, отправленные мобильным приложением
//
// Для работы шины следует подключить ее к механизмам БСП и БТС - см. Область ПодключениеПодсистем
//
#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область КодыДоступа

// Конструктор коллекции, описывающей код доступа к мобильному приложению.
//
// Код доступа может быть получен в 1С:Бухгалтерии, затем он должен быть передан
// пользователю мобильного приложения и введен в мобильное приложение.
// После ввода кода доступа конкретный экземпляр мобильного приложения (в который введен код)
// и область 1С:Бухгалтерии (в которой был получен код) могут обмениваться сообщениями.
// 
// Длина кода доступа выбирается так, чтобы его было не сложно ввести, но достаточно сложно подобрать.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйКодДоступа() Экспорт
	
	КодДоступа = Новый Структура;
	
	КодДоступа.Вставить("Код",           ""); // Для использования при машинной обработке
	КодДоступа.Вставить("Представление", ""); // Для передачи пользователю

	Возврат КодДоступа;
	
КонецФункции

// Предоставляет новый код доступа в мобильное приложение.
// Этот код позволяет
// - начать использовать мобильное приложение
// - идентифицировать пользователя мобильного приложения при обмене сообщениями.
//
// Полученный код следует сохранить в информационной базе, а его представление выдать пользователю.
//
// Параметры:
//  Приложение      - Строка - имя приложения в шине
//  НачальныеДанные - Структура - произвольные данные, которые будут доставлены в мобильное приложение
//                    (будут доступны мобильному приложению после того, как пользователь введет в него код доступа).
//                    Например, это может быть информация о предприятии, из информационной базы которого выдан код доступа,
//                    либо о лице, которому он выдан.
//                    Структура должна быть сериализуемой в JSON и не должна содержать вложенные соответствия.
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Неопределено - не удалось предоставить код
//
Функция КодДоступа(Приложение, НачальныеДанные) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("НачальныеДанные", НачальныеДанные);
	Подключение.ПространствоИмен = ПространствоИмен();
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияРесурсОкончательноПеремещен()
		И ОтветСервиса.Содержимое.Свойство("Адрес") Тогда
		
		// Следует использовать подключение к Шине прикладных приложений.
		Константы.АдресШиныПрикладныхПриложений.Установить(ОтветСервиса.Содержимое.Адрес);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	КодДоступа = НовыйКодДоступа();
	КодДоступа.Код           = ОтветСервиса.Содержимое.Ключ;
	КодДоступа.Представление = ОтветСервиса.Содержимое.ПредставлениеКлюча;
	
	Возврат КодДоступа;
	
КонецФункции

// Удаляет (отзывает) код доступа: после вызова метода код нельзя использовать для передачи сообщений.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//  КодДоступа - Строка - сохраняемый код, полученный в КодДоступа
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Булево - Истина, если получено подтверждение, что код отозван (не может быть более использован)
//
Функция УдалитьКодДоступа(Приложение, КодДоступа) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Ключ", КодДоступа);
	Подключение.ПространствоИмен = ПространствоИмен();
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "DELETE", "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Удаление кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Отправляет сообщение в мобильное приложение.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//  Получатель - Строка - сохраняемый код, полученный в КодДоступа
//  Сообщение  - Структура - произвольные данные, передаваемые мобильному приложению.
//               Структура должна быть сериализуемой в JSON и не должна содержать вложенные соответствия.
// 
// Возвращаемое значение:
//  Булево - Истина, если сообщение отправлено.
//           Отправка сообщения не означает его доставку в мобильное приложение.
//           Если нужно отслеживать доставку, то следует из мобильного приложения отправить сообщение,
//           подтверждающее прием.
//
Функция ОтправитьСообщение(Приложение, Получатель, Сообщение) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Получатель", Получатель);
	Запрос.Вставить("Сообщение",  Сообщение);
	Подключение.ПространствоИмен = ПространствоИмен();
	
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "Outbound", Запрос);
		
	Если Ответ = Неопределено
		Или Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			Ответ,
			Приложение,
			НСтр("ru = 'Отправка сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Инициирует опрос шины, есть ли в ней новые сообщения от мобильного приложения.
// 
// Следует вызывать при интерактивных действиях с механизмами программы,
// которым могут быть нужны данные от мобильного приложения.
// Например, если мобильное приложение предоставляет данные для заполнения авансового отчета,
// то опрос выполняется при работе пользователя с авансовым отчетом.
//
// Метод можно выполнять в зависимости от действий пользователя
// (например, при каждом открытии формы), однако фактически опрос будет выполняться с определенной регулярностью.
// Интервал опроса устанавливается методом ИнтервалПроверкиСообщений менеджера приложения.
//
// Как правило, в режиме сервиса такой регулярный опрос избыточен,
// потому что сообщения доставляются с помощью оповещений менеджера сервиса - сразу же,
// после передачи мобильным приложением в шину.
//
// Однако, технология 1cfresh не гарантирует доставку оповещений, поэтому наряду с оповещениями
// следует использовать и опрос.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//
Процедура НачатьПроверкуСообщенийПоАктивностиПользователя(Приложение) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьПотребность(Приложение, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФоновогоВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыФоновогоВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыФоновогоВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыФоновогоВыполнения.КлючФоновогоЗадания         = Приложение;
	ПараметрыФоновогоВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(
		НСтр("ru = 'Обработка сообщений мобильного приложения %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
	ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыФоновогоВыполнения,
		"ШинаМобильныхПриложений.ПроверитьСообщенияПриложения",
		Приложение);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьОтладочнойИнформации

// Записывает ошибку разбора сообщения, когда получены не те данные,
// которые ожидались от мобильного приложения.
//
// Параметры:
//  Сообщение  - Структура - данные, отправленные мобильным приложением
//  Приложение - Строка - имя приложения в шине
//  Ошибка     - Строка - суть ошибки
//
Процедура ЗаписатьОшибкуСодержимогоСообщения(Сообщение, Приложение, Ошибка) Экспорт
	
	Действие = НСтр("ru = 'Обработка сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИмяСобытия = ШинаМобильныхПриложенийСлужебный.ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	Если Сообщение = Неопределено Тогда
		Комментарий = Ошибка;
	Иначе
		ШаблонСообщения = НСтр("ru = '%1
	                           |От сервиса получены данные:
	                           |%2
	                           |'", ОбщегоНазначения.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(ШаблонСообщения, Ошибка, ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Сообщение));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		,
		,
		Комментарий);

КонецПроцедуры

// Записывает исключение, возникшее при использовании подсистемы.
// Следует вызывать из блока Исключение
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - возникшее исключение
//  Данные             - Произвольный - ссылка или значение примитивного типа, обрабатываемый объект
//  Приложение         - Строка - имя приложения в шине
//  Действие           - Строка - наименование действия, при выполнении которого возникла ошибка.
//                       Не должно содержать указания на конкретный объект данных.
//
Процедура ЗаписатьИсключение(ИнформацияОбОшибке, Данные, Приложение, Действие) Экспорт
	
	ИмяСобытия = ШинаМобильныхПриложенийСлужебный.ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеПодсистем

#Область ОчередьЗаданий

// Регистрирует метод в подсистеме ОчередьЗаданий
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
// Параметры:
//  МетодыОчередиЗаданий - см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ЗарегистрироватьМетодОчередиЗаданий(МетодыОчередиЗаданий) Экспорт
	
	МетодыОчередиЗаданий.Вставить(ИмяМетодаПроверитьСообщения());
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальнаяИнтеграцияУниверсальнымиОбъектами

// Обработчик оповещения о входящих сообщениях.
// Инициирует получение и обработку сообщений.
// См. УниверсальнаяИнтеграцияПереопределяемый.ОбработатьОповещениеОбИзменении
//
// Параметры:
//  ИдентификаторДанных - Строка    - идентифицирует оповещение, как относящееся к шине мобильных приложений
//  АдресПриложения     - Строка    - идентифицирует оповещаемое приложение
//  Сообщение           - Структура - данные, переданные шиной
//
Процедура ПринятьОповещение(ИдентификаторДанных, АдресПриложения, Сообщение) Экспорт
	
	Если ИдентификаторДанных <> ШинаМобильныхПриложенийСлужебный.ИдентификаторДанныхМенеджераСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ВызватьИсключение НСтр("ru = 'Работа с внешними ресурсами заблокирована'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Приложение = ИмяПриложенияПоАдресу(АдресПриложения);
	
	Если Приложение = Неопределено Тогда
		Ошибка = СтрШаблон(
			НСтр("ru = 'Неизвестный адрес приложения: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			АдресПриложения);
		ЗаписатьОшибкуСодержимогоСообщения(Сообщение, "", Ошибка);
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьПотребность(Приложение, Истина);
	
	// Из обработчика оповещения универсальной интеграции нельзя вызвать фоновое задание непосредственно.
	// Это связано с тем, что обработчик выполняется от имени служебного (неразделенного) пользователя
	// в привилегированном режиме.
	// Непосредственно фоновое задание выполнялось бы от имени этого пользователя
	// уже без привилегированного режима - что приводит к невозможности инициализации сеанса фонового задания.
	// Поэтому выполняем отложенную проверку, но без задержки.
	ЗапланироватьОтложеннуюПроверкуСообщений(Приложение, 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиФоновыхЗаданий

// Только для использования в обработчиках фоновых заданий, запускаемых из модуля

// См. ИмяМетодаПроверитьСообщения()
Процедура ПроверитьСообщения() Экспорт
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	Для Каждого Приложение Из МенеджерыПриложений Цикл
		ПроверитьСообщенияПриложения(Приложение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСообщенияПриложения(Приложение) Экспорт
	
	// Процедура отражает результат внешних по отношению к пользователю событий,
	// поэтому все ее содержимое безопасно вызывать в привилегированном режиме
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Приложение) = Тип("Строка") Тогда
		МенеджерыПриложений = Новый Массив;
		ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
		
		ИмяПриложения      = Приложение;
		МенеджерПриложения = ШинаМобильныхПриложенийСлужебный.МенеджерПриложения(ИмяПриложения, МенеджерыПриложений);
	Иначе
		МенеджерПриложения = Приложение;
		ИмяПриложения = МенеджерПриложения.ИмяМобильногоПриложения();
	КонецЕсли;
		
	Если Не РегистрыСведений.ОпросШиныМобильныхПриложений.ТребуетсяЗапрос(ИмяПриложения) Тогда
		Возврат;
	КонецЕсли;
	
	// Запланируем следующий запрос на случай, если что-то пойдет не так
	ИнтервалПовторногоЗапроса = 300;
	ЗапланироватьОтложеннуюПроверкуСообщений(ИмяПриложения, ИнтервалПовторногоЗапроса);
	
	ИмяСобытияПроверкаНаличияСообщений = НСтр("ru = 'Проверка наличия сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Блокировка = РегистрыСведений.ОпросШиныМобильныхПриложений.СоздатьКлючЗаписи(Новый Структура("ИмяПриложения", ИмяПриложения));
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Блокировка);
	Исключение
		ИмяСобытия = ШинаМобильныхПриложенийСлужебный.ИмяСобытияЖурналаРегистрации(ИмяСобытияПроверкаНаличияСообщений, ИмяПриложения);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Подключение = Подключение(ИмяПриложения);
	Если Подключение = Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(Блокировка);
		Возврат;
	КонецЕсли;
	
	ВерсияНачалаЗапроса = РегистрыСведений.ОпросШиныМобильныхПриложений.ВерсияНачалаЗапроса(ИмяПриложения);
	
	Пока Истина Цикл
		Подключение.ПространствоИмен = ПространствоИмен();
		ОтветИдентификаторСообщения = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", "Inbound");
			
		Если ОтветИдентификаторСообщения = Неопределено Тогда
			Прервать;
		КонецЕсли;
			
		Если ОтветИдентификаторСообщения.КодСостояния = ЗапросыREST.КодСостоянияНетДанных() Тогда
			// Все обработаны
			Прервать;
		КонецЕсли;
		
		Если ОтветИдентификаторСообщения.КодСостояния = ЗапросыREST.КодСостоянияРесурсОкончательноПеремещен() Тогда
			Если ОтветИдентификаторСообщения.Содержимое.Свойство("Адрес") Тогда
				// Следует использовать подключение к Шине прикладных приложений.
				Константы.АдресШиныПрикладныхПриложений.Установить(ОтветИдентификаторСообщения.Содержимое.Адрес);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если ОтветИдентификаторСообщения.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
			ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
				ОтветИдентификаторСообщения, ИмяПриложения, ИмяСобытияПроверкаНаличияСообщений);
			Прервать;
		КонецЕсли;
		
		Ресурс = СтрШаблон("Inbound/%1", ОтветИдентификаторСообщения.Содержимое.Идентификатор);
		Подключение.ПространствоИмен = ПространствоИмен();
		ОтветСодержимоеСообщения = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", Ресурс);
		
		Если ОтветСодержимоеСообщения.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
			ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
				ОтветСодержимоеСообщения,
				ИмяПриложения,
				НСтр("ru = 'Получение сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			ОбработатьСообщение(
				ИмяПриложения,
				ОтветСодержимоеСообщения.Содержимое.Отправитель,
				ОтветСодержимоеСообщения.Содержимое.Сообщение);
		КонецЕсли;
		
		ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "DELETE", Ресурс);
		
	КонецЦикла;
	
	РазблокироватьДанныеДляРедактирования(Блокировка);
	
	РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьВыполнение(
		ИмяПриложения,
		ВерсияНачалаЗапроса,
		МенеджерПриложения.ИнтервалПроверкиСообщений());
	
КонецПроцедуры

#КонецОбласти

// Возвращает описание шины, необходимое облачному и мобильному приложениям для подключения к шине.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине.
//
// Возвращаемое значение:
//  Структура, Неопределено - описание настроки шины мобильных приложений.
//                            Если не удалось получить описание, возвращает Неопределено.
//
Функция ОписаниеШины(Приложение) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение.ПространствоИмен = ПространствоИмен();
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", "Bus");
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Получение описания шины'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОтветСервиса.Содержимое;
	
КонецФункции

// Возвращает адрес(идентификатор) этого облачного приложения в Шине, если оно уже было подключено.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине.
//
// Возвращаемое значение:
//  Строка, Неопределено - Адрес приложения. Если адрес отсутствует, возвращает Неопределено.
//
Функция АдресОблачногоПриложения(Приложение) Экспорт
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Подключение.АдресОповещений;
	
КонецФункции

// Возвращает данные из Подключение, которые могут быть сохранены с безопасное хранилище.
//
// Параметры:
//  Подключение - Структура - реквизиты подключения к шине.
//
// Возвращаемое значение:
//  Структура
//
Функция СохраняемыеДанныеПодключения(Подключение) Экспорт
	
	СохраняемыеДанные = Новый Структура;
	
	СохраняемыеДанные.Вставить("АдресСервиса", "");
	СохраняемыеДанные.Вставить("Логин", "");
	СохраняемыеДанные.Вставить("Пароль", "");
	СохраняемыеДанные.Вставить("Токен", "");
	СохраняемыеДанные.Вставить("АдресОповещений", "");
	
	ЗаполнитьЗначенияСвойств(СохраняемыеДанные, Подключение);
	Возврат СохраняемыеДанные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеПодсистемы

Процедура ЗаполнитьМенеджерыПриложений(МенеджерыПриложений)
	
	МенеджерыПриложений.Добавить(РегистрыСведений.МобильноеПриложениеСканированиеЧеков);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗапланироватьОтложеннуюПроверкуСообщений(ИмяПриложения, Интервал)
	
	Попытка
		ОбщегоНазначенияБП.ЗапланироватьВыполнение(ИмяМетодаПроверитьСообщения(), Интервал);
	Исключение
		ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			,
			ИмяПриложения,
			НСтр("ru = 'Планирование проверки сообщений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяМетодаПроверитьСообщения()
	Возврат "ШинаМобильныхПриложений.ПроверитьСообщения";
КонецФункции

Процедура ОбработатьСообщение(Приложение, Отправитель, Сообщение)
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	
	МенеджерПриложения = ШинаМобильныхПриложенийСлужебный.МенеджерПриложения(Приложение, МенеджерыПриложений);
	МенеджерПриложения.ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение);
	
КонецПроцедуры

Функция НовыйПодключение(ИмяДанныхПриложения)
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.ИсточникЗапроса = ИмяДанныхПриложения;
	Подключение.Вставить("АдресОповещений", "");
	
	Возврат Подключение;
	
КонецФункции

Функция Подключение(Приложение)
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения);
	Если Подключение <> Неопределено Тогда
		ДобавитьЗаголовкиАутентификации(Подключение);
		Возврат Подключение;
	КонецЕсли;
	
	// Получим данные для регистрации из менеджера сервиса
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = УниверсальнаяИнтеграция.ПолучитьДанныеОбъектаПоПравилу(
		ШинаМобильныхПриложенийСлужебный.ИдентификаторДанныхМенеджераСервиса(),
		ИмяДанныхПриложения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Или Не ДанныеПодключения.Свойство("payload") Тогда
		ЗаписатьОшибкуДанныеПодключения(Приложение);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПодключения = ДанныеПодключения.payload;
	
	Если Не ДанныеПодключения.Свойство("Подключение")
		Или Не ДанныеПодключения.Подключение.Свойство("ОблачноеПриложение")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Адрес")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Логин")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Пароль")
		Или Не ДанныеПодключения.Подключение.Свойство("МобильноеПриложение")
		Или Не ДанныеПодключения.Подключение.МобильноеПриложение.Свойство("Адрес")
		Или Не ДанныеПодключения.Подключение.МобильноеПриложение.Свойство("Логин")
		Или Не ДанныеПодключения.Подключение.МобильноеПриложение.Свойство("Пароль") Тогда
		ЗаписатьОшибкуДанныеПодключения(Приложение);
		Возврат Неопределено;
	КонецЕсли;
	
	// Переход с Шины мобильных приложений на Шину прикладных приложений временно предусматривает
	// возможность нового подключения приложения к любой из Шин.
	Если ДанныеПодключения.Подключение.Свойство("ПодключениеШиныПрикладныхПриложений")
		И ДанныеПодключения.Подключение.ПодключениеШиныПрикладныхПриложений Тогда
		
		// Следует использовать подключение к Шине прикладных приложений.
		Константы.АдресШиныПрикладныхПриложений.Установить(ДанныеПодключения.Подключение.ОблачноеПриложение.Адрес);
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение = НовыйПодключение(ИмяДанныхПриложения);
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения.Подключение.ОблачноеПриложение);
	Подключение.АдресСервиса = ДанныеПодключения.Подключение.ОблачноеПриложение.Адрес;
	
	// Зарегистрируем приложение
	Подключение.ПространствоИмен = ПространствоИмен();
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Подключение.ЗаголовкиАутентификации, ШинаМобильныхПриложенийСлужебный.АутентификацияИТС(), Истина);
		
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "Tenant");
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ШинаМобильныхПриложенийСлужебный.ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация приложения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	// Сохраним данные подключения
	Подключение.Токен           = ОтветСервиса.Содержимое.Токен.Значение;
	Подключение.АдресОповещений = ОтветСервиса.Содержимое.Адрес;
	
	ШинаМобильныхПриложенийСлужебный.СохранитьДанныеПодключения(
		ИмяДанныхПриложения,
		СохраняемыеДанныеПодключения(Подключение));
	
	// Сохраним данные для подключения клиентского приложения.
	ШинаМобильныхПриложенийКлиентскоеПриложение.ОбновитьРеквизитыПодключения(
		Приложение,
		ДанныеПодключения.Подключение.МобильноеПриложение);
	
	ПодписатьсяНаОповещения(Приложение, Подключение.АдресОповещений);
	ДобавитьЗаголовкиАутентификации(Подключение);
	
	Возврат Подключение;
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат СтрШаблон("/hs/%1/%2", ИмяСервисаОблачногоПриложения(), ВерсияAPI());
	
КонецФункции

Функция ВерсияAPI()
	
	Возврат "v1";
	
КонецФункции

Функция ИмяСервисаОблачногоПриложения()
	
	Возврат "MobileBusInternal";
	
КонецФункции

Функция ИмяДанныхПриложения(Приложение)
	
	Возврат СтрШаблон("app-%1", Приложение);
	
КонецФункции

Функция ИмяЗаголовкаАутентификации()
	
	Возврат "tenant-auth";
	
КонецФункции

Функция СохраненныеДанныеПодключения(ИмяДанныхПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИмяДанныхПриложения,
		"АдресСервиса, Логин, Пароль, Токен, АдресОповещений");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Фактически при отсутствии данных ПрочитатьДанныеИзБезопасногоХранилища зачем-то возвращает структуру,
	// в которой значения свойств будут Неопределено
	Для Каждого КлючИЗначение Из ДанныеПодключения Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Подключение = НовыйПодключение(ИмяДанныхПриложения);
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения);
	Возврат Подключение;
	
КонецФункции

Функция ИмяПриложенияПоАдресу(АдресПриложения)
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	
	Для Каждого МенеджерПриложения Из МенеджерыПриложений Цикл
		
		ИмяПриложения = МенеджерПриложения.ИмяМобильногоПриложения();
		Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения(ИмяПриложения));
		
		Если Подключение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Подключение.АдресОповещений = АдресПриложения Тогда
			Возврат МенеджерПриложения.ИмяМобильногоПриложения();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьЗаголовкиАутентификации(Подключение)
	
	Если Подключение.Свойство("Токен") И ЗначениеЗаполнено(Подключение.Токен) Тогда
		Подключение.ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификации(), Подключение.Токен);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьсяНаОповещения(Приложение, АдресОповещений)
	
	// Вынесена в отдельную процедуру для упрощения тестирования
	
	// Подпишемся на оповещения о новых сообщениях
	Попытка
		// Невозможность подписаться не исключает возможность использовать приложение:
		// в этом случае сообщения от приложения будут доставляться при обращении к функционалу, 
		// а не заблаговременно.
		УниверсальнаяИнтеграция.ПодписатьсяНаОповещенияОбИзменении(
			ШинаМобильныхПриложенийСлужебный.ИдентификаторДанныхМенеджераСервиса(),
			АдресОповещений);
	Исключение
		ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			АдресОповещений,
			Приложение,
			НСтр("ru = 'Подписка на оповещения о сообщениях'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуДанныеПодключения(Приложение)
	
	// Содержимое данных подключения не записывается в журнал регистрации из соображений безопасности.
	// Эти данные персистентные и могут быть проверены в менеджере сервиса
	
	ИмяСобытия = ШинаМобильныхПриложенийСлужебный.ИмяСобытияЖурналаРегистрации(
		НСтр("ru = 'Получение сведений о приложении'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		НСтр("ru = 'Менеджер сервиса содержит некорректные данные о приложении'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

#КонецОбласти
