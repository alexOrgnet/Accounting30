
#Область ПрограммныйИнтерфейс

// Формирует и заполняет специальные параметры переданной навигационной ссылки.
// 
// Параметры:
//  НавигационнаяСсылка - Строка 
//  ОбщиеПараметры - Структура - ПараметрыНавигационныхСсылок.ОбщиеПараметры 
//  	(см. СверкаСФНСПоИмущественнымНалогамФормы.НовыеПараметрыНавигационныхСсылок())
// 
// Возвращаемое значение:
//  Структура - в структуре всегда есть свойство
// * Выполнено - Булево - признак "выполнения" ссылки, т.е. наличие записанного объекта по ссылке
Функция СпециальныеПараметрыНавигационнойСсылки(НавигационнаяСсылка, ОбщиеПараметры) Экспорт

	СпециальныеПараметры = СверкаСФНСПоИмущественнымНалогамФормы.НовыеСпециальныеПараметрыНавигационнойСсылки();

	// Признаком выполнения некоторых действий по ссылкам считаем наличие уведомления с видом,
	// указанным в шаблоне.
	УсловиеВидУведомления = ОбщиеПараметры.УсловияПоВидуУведомления[НавигационнаяСсылка];
	// Выполнение действия по ссылке может оцениваться по прочему условию.
	ПрочееУсловие = ОбщиеПараметры.ПрочиеУсловия[НавигационнаяСсылка];

	Если УсловиеВидУведомления <> Неопределено Тогда 

		// Поищем уведомления нужного вида в году, следующим за отчетным
		КонецСледующегоГодаПослеОтчетного = Дата(Год(ОбщиеПараметры.НалоговыйПериод) + 1, 12, 31);
		АктуальныеУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.АктуальныеУведомления(
			ОбщиеПараметры.Организация,
			УсловиеВидУведомления,
			КонецСледующегоГодаПослеОтчетного,
			Перечисления.Периодичность.Год,
			ОбщиеПараметры.ИФНС);

		СпециальныеПараметры.Выполнено = (АктуальныеУведомления <> Неопределено); 

	ИначеЕсли ПрочееУсловие = "ЕстьДокументУплаты" Тогда

		// Ищем подходящие платежи
		ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
		ПараметрыУплатыНалогов.КодыЗадач.Добавить(ОбщиеПараметры.КодНалога);

		ПлательщикЕНП = ПомощникиПоУплатеНалоговИВзносов.ПрименяетсяОсобыйПорядокУплатыНалога(
			ОбщиеПараметры.Организация,
			ОбщегоНазначения.ТекущаяДатаПользователя());
			
		Если ПлательщикЕНП Тогда
			ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
			ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
			ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Иначе
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОбщиеПараметры.КодНалога, ОбщиеПараметры.Организация);
			ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
			ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
			ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
			ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
			ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
		КонецЕсли;

		ПараметрыУплатыНалогов.ОтборОплатаЗадолженности = Истина;

		// Доплата налога относится к отчетному году, хотя дата самого документа доплаты в текущем году. 
		// Поэтому ищем документы с отбором по налоговому периоду.
		НачалоПериода = НачалоГода(ОбщиеПараметры.НалоговыйПериод);
		КонецПериода = КонецГода(ОбщиеПараметры.НалоговыйПериод);

		ДокументыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(
			ОбщиеПараметры.Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);

		СпециальныеПараметры.Выполнено = (ДокументыУплатыНалогов.Количество() > 0);

		// Определим, какую нужно открывать форму по навигационной ссылки 
		// на основании самого последнего по времени документа.
		Если ДокументыУплатыНалогов.Количество() > 0 Тогда
			
			ПоследнийДокумент = ДокументыУплатыНалогов[ДокументыУплатыНалогов.Количество() - 1];
			
			СпециальныеПараметры.Вставить("ИмяФормы", "Документ." + ПоследнийДокумент.Ссылка.Метаданные().Имя + ".ФормаСписка");

			ПараметрыФормыПлатежей = Новый Структура;
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОбщиеПараметры.Организация);
			
			ТипЗначенияДокументаУплаты = ТипЗнч(ПоследнийДокумент.Ссылка);
			
			Если ТипЗначенияДокументаУплаты = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
			ИначеЕсли ТипЗначенияДокументаУплаты = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
			ИначеЕсли ТипЗначенияДокументаУплаты = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
			КонецЕсли;	
			
			ПараметрыФормыПлатежей.Вставить("Отбор", Отбор);
			ПараметрыФормыПлатежей.Вставить("ТекущаяСтрока", ПоследнийДокумент.Ссылка);
			СпециальныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормыПлатежей);
			
		КонецЕсли;

	ИначеЕсли ПрочееУсловие = "ЕстьДокументДоначисления" Тогда
		
		// Текст запроса ниже модифицируется в части условий виртуальной таблицы
		Запрос = Новый Запрос;
		Запрос.Текст =
	 	"ВЫБРАТЬ ПЕРВЫЕ 1
	 	|	ХозрасчетныйОбороты.Регистратор КАК Ссылка
	 	|ИЗ
	 	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет = &Счет,
	 	|		&СубконтоВидПлатежаИФНС, Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам))
	 	|	И &УсловиеИФНС,,) КАК ХозрасчетныйОбороты
	 	|
	 	|УПОРЯДОЧИТЬ ПО
	 	|	ХозрасчетныйОбороты.Период,
	 	|	ХозрасчетныйОбороты.Регистратор";
		
		// Доначисление налога ожидаем в следующем году после отчетного 
		НачалоПериода = КонецГода(ОбщиеПараметры.НалоговыйПериод) + 1;
		КонецПериода = КонецГода(НачалоПериода);
		
		Если ОбщиеПараметры.ЭтоТранспортныйНалог Тогда
			Счет = ПланыСчетов.Хозрасчетный.ТранспортныйНалог;
		ИначеЕсли ОбщиеПараметры.ЭтоНалогНаИмущество Тогда
			Счет= ПланыСчетов.Хозрасчетный.НалогНаИмущество;
		ИначеЕсли ОбщиеПараметры.ЭтоЗемельныйНалог Тогда
			Счет = ПланыСчетов.Хозрасчетный.ЗемельныйНалог;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		СубконтоВидПлатежаИФНС = Новый Массив;
		СубконтоВидПлатежаИФНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			СубконтоРегистрацияВНалоговомОргане = Ложь;
			НалоговыйУчетОбособленныхПодразделений.ОпределитьСубконтоРегистрацияВНалоговомОргане(
				СубконтоРегистрацияВНалоговомОргане,
				СвойстваСчета["ВидСубконто" + Ном]);
			Если СубконтоРегистрацияВНалоговомОргане Тогда
				НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(СубконтоВидПлатежаИФНС);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИФНС", "Субконто2 = &ИФНС");
				Запрос.УстановитьПараметр("ИФНС", ОбщиеПараметры.ИФНС);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если на счете нет субконто РегистрацияВНалоговомОргане, то убираем условие по ИФНС.
		// В ином случае это условие уже скорректировано выше.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеИФНС", "");
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.УстановитьПараметр("СубконтоВидПлатежаИФНС", СубконтоВидПлатежаИФНС);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		СпециальныеПараметры.Выполнено = (Не РезультатЗапроса.Пустой());
		
		Если Не РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокументДоначисления = Выборка.Ссылка;
			
			СпециальныеПараметры.Вставить("ИмяФормы", "Документ." + ДокументДоначисления.Метаданные().Имя + ".ФормаСписка");

			ПараметрыФормы = Новый Структура;
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОбщиеПараметры.Организация);
			
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ПараметрыФормы.Вставить("ТекущаяСтрока", ДокументДоначисления);
			СпециальныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;

	// Действия, у которых не указаны условия выполнения, всегда помечаем как невыполенные
	Возврат СпециальныеПараметры;

КонецФункции

// Возвращает параметры открытия формы нового платежного документа.
// 
// Параметры:
//  ОбщиеПараметры - Структура - см. ПараметрыНавигационныхСсылок.ОбщиеПараметры 
//  	(см. СверкаСФНСПоИмущественнымНалогамФормы.НовыеПараметрыНавигационныхСсылок())
//  Сумма - Число - сумма доплаты налога
//  Описание - Строка - описание платежа
// 
// Возвращаемое значение:
//  Структура - Параметры формы платежного документа
Функция ПараметрыФормыПлатежногоДокумента(ОбщиеПараметры, Сумма, Описание) Экспорт

	ПериодСобытия = СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ПериодСобытияПоНалоговомуПериоду(
		ОбщиеПараметры.НалоговыйПериод);
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация                = ОбщиеПараметры.Организация;
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.ИмяЗадачи                  = ОбщиеПараметры.КодНалога;
	ОписаниеПлатежа.Сумма                      = Сумма;
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация);
	// По земельному налогу возможны несколько значений ВидНалога (земельный налог города федерального значения, сельского поселения и т.д.).
	// Если применяется только один, то он будет найден. В ином случае конкретное значение Налог нельзя определить.
	ОписаниеПлатежа.Налог                      = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	ОписаниеПлатежа.КБК                        = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог);
	ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам;
	ОписаниеПлатежа.СпособОплаты               = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	ОписаниеПлатежа.ПоказательПериода          = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьГод());
	ОписаниеПлатежа.ОплатаЗадолженности        = Истина;
	ОписаниеПлатежа.Описание                   = Описание;
		
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	ПравилоУплаты = Документы.СверкаСФНСПоИмущественнымНалогам.ПравилоУплатыЗаПериодСверки(
		ОбщиеПараметры.Организация,
		ОбщиеПараметры.Налог,
		ПериодСобытия);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, ПравилоУплаты);
		
КонецФункции

// Возвращает параметры открытия формы новой бухгалтерской операции по доначислению налога.
// 
// Параметры:
//  ОбщиеПараметры - Структура -См. ПараметрыНавигационныхСсылок.ОбщиеПараметры (См. СверкаСФНСПоИмущественнымНалогамФормы.НовыеПараметрыНавигационныхСсылок())
//  Сумма - Число - сумма доначисления налога
//  Описание - Строка - описание проводки
// 
// Возвращаемое значение:
//  Структура --- Параметры формы бухгалтерской операции
// * ЗначенияЗаполнения - Структура - значения заполнения бух операции
Функция ПараметрыФормыБухОперации(ОбщиеПараметры, Сумма, Описание) Экспорт

	ЗначенияЗаполнения = Новый Структура;
	
	ЗначенияЗаполнения.Вставить("Организация", ОбщиеПараметры.Организация);
	ЗначенияЗаполнения.Вставить("СуммаОперации", Сумма);
	
	Хозрасчетный = Новый Массив;
	Хозрасчетный.Добавить(Новый Структура);
	Проводка = Хозрасчетный[0];
	Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ОбщийСпособОтраженияРасходовПоНалогу = РасчетИмущественныхНалоговБП.ОбщийСпособОтраженияРасходовПоНалогу(
		ОбщиеПараметры.Организация,
		ОбщиеПараметры.Налог,
		Период);
	
	Если ЗначениеЗаполнено(ОбщийСпособОтраженияРасходовПоНалогу.СчетДт) Тогда
		
		Проводка.Вставить("СчетДт", ОбщийСпособОтраженияРасходовПоНалогу.СчетДт);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.Вставить("ПодразделениеДт", ОбщийСпособОтраженияРасходовПоНалогу.Подразделение);
		КонецЕсли;
		
		Для Ном = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
			Проводка.Вставить("СубконтоДт" + Ном, ОбщийСпособОтраженияРасходовПоНалогу["Субконто" + Ном]);
		КонецЦикла;
	
	КонецЕсли;
	
	Содержание = Нстр("ru='Доначислен %1 за %2 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
	НалогСтрокой = "";
	
	Если ОбщиеПараметры.ЭтоТранспортныйНалог Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.ТранспортныйНалог;
		НалогСтрокой = Нстр("ru='транспортный налог'");
	ИначеЕсли ОбщиеПараметры.ЭтоНалогНаИмущество Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.НалогНаИмущество;
		НалогСтрокой = Нстр("ru='налог на имущество'");
	ИначеЕсли ОбщиеПараметры.ЭтоЗемельныйНалог Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.ЗемельныйНалог;
		НалогСтрокой = Нстр("ru='земельный налог'");
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Содержание", СтрШаблон(Содержание, НалогСтрокой, Формат(ОбщиеПараметры.НалоговыйПериод, "ДФ=yyyy;")));
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
	
	Проводка.Вставить("СчетКт", СчетКт);
	Проводка.Вставить("СубконтоКт1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);

	Проводка.Вставить("Сумма", Сумма);

	Для Ном = 1 По СвойстваСчетаКт.КоличествоСубконто Цикл
		СубконтоРегистрацияВНалоговомОргане = Ложь;
		НалоговыйУчетОбособленныхПодразделений.ОпределитьСубконтоРегистрацияВНалоговомОргане(
			СубконтоРегистрацияВНалоговомОргане,
			СвойстваСчетаКт["ВидСубконто" + Ном]);
		Если СубконтоРегистрацияВНалоговомОргане Тогда
			Проводка.Вставить("СубконтоКт" + Ном, ОбщиеПараметры.ИФНС);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ОбщиеПараметры.Организация, Период);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(ОбщиеПараметры.Организация, Период);
	
	Если ОтражатьВНалоговомУчете Тогда
		
		ЭтоНеПринимаемыйРасходНУ = НалоговыйУчет.ЭтоНепринимаемыйРасходНУ(
			ОбщийСпособОтраженияРасходовПоНалогу.Субконто1,
			ОбщийСпособОтраженияРасходовПоНалогу.Субконто2,
			ОбщийСпособОтраженияРасходовПоНалогу.Субконто3);
			
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			
			Проводка.Вставить("СуммаНУДт", ?(ЭтоНеПринимаемыйРасходНУ, 0, Проводка.Сумма));
			
			Если ПоддержкаПБУ18 Тогда
				Проводка.Вставить("СуммаПРДт", ?(ЭтоНеПринимаемыйРасходНУ, Проводка.Сумма, 0));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Хозрасчетный", Хозрасчетный);
	
	Возврат Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
КонецФункции

// Формирует массив активных задач бухгалтера, которые ассоциированы с конкретной сверкой.
// Одна сверка может составляться сразу по нескольким налоговым органам (например, одна налоговая
// посчитала налог по всем объектам организации, находящимся в разных обособленных подразделениях).
// В этом случае одной этой сверке будут соответствовать несколько задач, 
// и каждая из них будет вести в эту сверку.
//
// Параметры:
//  Организация   - СправочникСсылка.Организация - организация, по которой сверяется налог
//  ПериодСобытия - Дата - период задачи сверки в списке задач
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило сверки налога
//  КодыНалоговыхОрганов - Массив - коды налоговых органов, в которых учтены объекты, попавшие в сверку
// 
// Возвращаемое значение:
//  Массив - массив структур, содержащих ключи записей регистра сведений ЗадачиБухгалтера
//          (см. РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач())
//
Функция АктивныеЗадачиСверки(Организация, ПериодСобытия, Правило, КодыНалоговыхОрганов) Экспорт
	
	МассивЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане.Код В (&КодыНалоговыхОрганов)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("КодыНалоговыхОрганов", КодыНалоговыхОрганов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Задача = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Задача, Выборка);
		МассивЗадач.Добавить(Задача);
	КонецЦикла;
	
	Возврат МассивЗадач;
	
КонецФункции

// Возвращает текстовое содержимое файлов с расчетом имущественных налогов, приложенных к сообщению.
// Используется для передачи в метод визуализации расчетов в читаемом виде.
//
// Параметры:
//  Сообщение - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов - входящее сообщение ФНС, к которому
//              приложен(-ы) файл(-ы) с расчетом налога(-ов)
// 
// Возвращаемое значение:
//  Массив - массив текстовых представлений содержимого xml-файлов
//
Функция СодержаниеВложенийСообщения(Сообщение) Экспорт 

	СодержаниеВложений = Новый Массив;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Сообщение);

	Для Каждого Вложение Из Вложения Цикл

		Если Не СтрЗаканчиваетсяНа(Вложение.ИмяФайла, ".xml") Тогда
			Продолжить;
		КонецЕсли;

		Если Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаТранспортногоНалога(Вложение.ИмяФайла)
			 И Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаЗемельногоНалога(Вложение.ИмяФайла)
			 И Не СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ЭтоФайлРасчетаИмущественныхНалогов(Вложение.ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;

		СодержаниеВложений.Добавить(Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ТекстСообщения(Вложение.Данные));

	КонецЦикла;

	Возврат СодержаниеВложений;

КонецФункции
 
// Из сообщения ФНС об исчисленных суммах имущественных налогов выбирает содержащиеся в нем расчеты налога.
// Под отдельным расчетом налога понимается набор сведений по объектам одной организации, облагаемым
// конкретным налогом за конкретный налоговый период, составленный одним налоговым органом - отправтелем этого расчета.
// Иными словами, это порция сведений, которые требуют отдельной сверки. 
//
// Параметры:
//  Сообщение - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов - входящее сообщение ФНС, к которому
//              приложен(-ы) файл(-ы) с расчетом налога(-ов)
//  ТекстОшибки - Строка - текст ошибки, возникшей при разборе файлов, приложенных к сообщению
// 
// Возвращаемое значение:
//  СписокЗначений - список выбора расчета
//      * Значение - параметры формы сверки конкретного расчета налога
//      * Представление - представление расчета для показа выбора пользователю
//
Функция СписокРасчетовИзСообщения(Сообщение) Экспорт 

	СписокРасчетов = Новый СписокЗначений;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Сообщение);
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "Организация");
	ТекстОшибки = "";
	СведенияОРасчитанныхНалогах = СверкаСФНСПоИмущественнымНалогам.СведенияОРасчитанныхНалогахИзФайлов(Вложения,, ТекстОшибки);

	Если СведенияОРасчитанныхНалогах.РассчитанныеНалоги.Количество() = 0 Тогда
		// Если произошла ошибка при чтении файлов, то сообщим об этом
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		// Файл может быть корректный, но в нем нет нужных данных - также прерываем выполнение с показом сообщения
		ВызватьИсключение Нстр("ru='В приложенных файлах сообщения не обнаружено расчетов имущественных налогов.'");
	КонецЕсли;

	ШаблонПредставления = Нстр("ru='%1 за %2 год (ФНС %3)'");
	Для Каждого Расчет Из СведенияОРасчитанныхНалогах.РассчитанныеНалоги Цикл

		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("КодыНалоговыхОрганов", Расчет.КодыНалоговыхОрганов);
		
		СуществующаяСверка = Документы.СверкаСФНСПоИмущественнымНалогам.НайтиСуществующий(
			Организация,
			Расчет.Налог,
			Расчет.НалоговыйПериод,
			Расчет.КодОтправителя,
			,
			Сообщение);

		Если ЗначениеЗаполнено(СуществующаяСверка) Тогда
			ПараметрыРасчета.Вставить("Ключ", СуществующаяСверка);
		Иначе
			ПараметрыРасчета.Вставить("Организация", Организация);
			ПараметрыРасчета.Вставить("Налог", Расчет.Налог);
			ПараметрыРасчета.Вставить("НалоговыйПериод", Расчет.НалоговыйПериод);
			ПараметрыРасчета.Вставить("КодОтправителя", Расчет.КодОтправителя);
			ПараметрыРасчета.Вставить("СообщениеФНС", Сообщение);
		КонецЕсли; 

		СписокРасчетов.Добавить(ПараметрыРасчета, 
			СтрШаблон(ШаблонПредставления, Расчет.Налог, Формат(Расчет.НалоговыйПериод, "ДФ=yyyy"), Расчет.КодОтправителя));

	КонецЦикла;

	Возврат СписокРасчетов;

КонецФункции

// Из файла с исчисленными суммами имущественных налогов выбирает содержащиеся в нем расчеты налога.
// Под отдельным расчетом налога понимается набор сведений по объектам одной организации, облагаемым
// конкретным налогом за конкретный налоговый период, составленный одним налоговым органом - отправтелем этого расчета.
// Иными словами, это порция сведений, которые требуют отдельной сверки. 
//
// Параметры:
//  Файл - Структура - описание файла с расчетом(-ми) налога
//         Свойства:
//          * Адрес - адрес файла во временном хранилище
//            или Данные - ДвоичныеДанные или ХранилищеЗначения
//          * ИмяФайла - имя загружаемого файла
// 
// Возвращаемое значение:
//  СписокЗначений - список выбора расчета
//      * Значение - параметры формы сверки конкретного расчета налога
//      * Представление - представление расчета для показа выбора пользователю
//
Функция СписокРасчетовИзФайла(Файл, Отбор = Неопределено) Экспорт 

	СписокРасчетов = Новый СписокЗначений;
	Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файл);
	ТекстОшибки = "";
	СведенияОРасчитанныхНалогах = СверкаСФНСПоИмущественнымНалогам.СведенияОРасчитанныхНалогахИзФайлов(Файлы, Отбор, ТекстОшибки);

	Если СведенияОРасчитанныхНалогах.РассчитанныеНалоги.Количество() = 0 Тогда
		// Если произошла ошибка при чтении файла, то сообщим об этом
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		// Файл может быть корректный, но в нем нет нужных данных - также прерываем выполнение с показом сообщения
		Если Отбор = Неопределено Тогда
			ТекстОшибки = Нстр("ru='В файле не обнаружено расчетов имущественных налогов.'");
		ИначеЕсли Отбор.Свойство("Налог") Тогда
			Шаблон = Нстр("ru='В файле не обнаружено расчета %1%2.'");
			НалогВРодительномПадеже = ВыполнениеЗадачБухгалтера.ПредставлениеНалогаРодительныйПадеж(
				Перечисления.ВидыИмущественныхНалогов.КодНалогаВЗадачахБухгалтера(Отбор.Налог));
			Дополнения = Новый Массив;
			Если Отбор.Свойство("Организация") И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru=' по организации %1'"), Отбор.Организация));
			КонецЕсли;
			Если Отбор.Свойство("НалоговыйПериод") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru=' за %1 год'"), Формат(Отбор.НалоговыйПериод, "ДФ=yyyy")));
			КонецЕсли;
			ТекстОшибки = СтрШаблон(Шаблон, НалогВРодительномПадеже, СтрСоединить(Дополнения));
		Иначе
			Шаблон = Нстр("ru='В файле не обнаружено расчетов имущественных налогов%1.'");
			Дополнения = Новый Массив;
			Если Отбор.Свойство("Организация") И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru=' по организации %1'"), Отбор.Организация));
			КонецЕсли;
			Если Отбор.Свойство("НалоговыйПериод") Тогда
				Дополнения.Добавить(СтрШаблон(Нстр("ru=' за %1 год'"), Формат(Отбор.НалоговыйПериод, "ДФ=yyyy")));
			КонецЕсли;
			ТекстОшибки = СтрШаблон(Шаблон, СтрСоединить(Дополнения));
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ШаблонПредставления = Нстр("ru='%1 за %2 год (ФНС %3)'");
	Для Каждого Расчет Из СведенияОРасчитанныхНалогах.РассчитанныеНалоги Цикл

		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("КодыНалоговыхОрганов", Расчет.КодыНалоговыхОрганов);

		СуществующаяСверка = Документы.СверкаСФНСПоИмущественнымНалогам.НайтиСуществующий(
			Расчет.Организация,
			Расчет.Налог,
			Расчет.НалоговыйПериод,
			Расчет.КодОтправителя,
			,
			,
			СведенияОРасчитанныхНалогах.ИмяПервогоФайла);

		Если ЗначениеЗаполнено(СуществующаяСверка) Тогда
			ПараметрыРасчета.Вставить("Ключ", СуществующаяСверка);
		Иначе
			ПараметрыРасчета.Вставить("Организация", Расчет.Организация);
			ПараметрыРасчета.Вставить("Налог", Расчет.Налог);
			ПараметрыРасчета.Вставить("НалоговыйПериод", Расчет.НалоговыйПериод);
			ПараметрыРасчета.Вставить("КодОтправителя", Расчет.КодОтправителя);
			ПараметрыРасчета.Вставить("Файл", Файл);
			ПараметрыРасчета.Вставить("ИмяФайла", СведенияОРасчитанныхНалогах.ИмяПервогоФайла);
		КонецЕсли; 
			
		СписокРасчетов.Добавить(ПараметрыРасчета, 
			СтрШаблон(ШаблонПредставления, Расчет.Налог, Формат(Расчет.НалоговыйПериод, "ДФ=yyyy"), Расчет.КодОтправителя));

	КонецЦикла;

	Возврат СписокРасчетов;

КонецФункции

// Функция-посредник для получения на клиенте соответствия категорий ТС классификатору видов ТС,
// используемому в регистрации ТС
Функция КатегорииТСПоКодуВида() Экспорт

	Возврат РегистрыСведений.РегистрацияТранспортныхСредств.КатегорииТСПоКодуВида();

КонецФункции

// Формирует наименование объекта налогообложения для конкретного налога. Например, "транспортное средство".
//
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - налог, которым облагаются основные средства
//  Падеж - Строка - например, "Родительный"
//  ВЕдинственномЧисле - Булево - если Ложь, то возвращается наименование во множественном числе, например "транспортные средства"
//  СБольшойБуквы - Булево - если Истина, то возвращается наименование с большой буквы, например "Транспортные средства"
// 
// Возвращаемое значение:
//  Строка - например, "транспортных средств" или "Земельному участку"
//
Функция НаименованиеОбъектаНалогообложения(Налог, Падеж = "Именительный", ВЕдинственномЧисле = Истина, СБольшойБуквы = Ложь) Экспорт

	ОбъектНалогообложенияСтрокой = "";
	Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru='транспортное средство'"), Нстр("ru='транспортные средства'"));
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ЗемельныйНалог") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru='земельный участок'"), Нстр("ru='земельные участки'"));
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
		ОбъектНалогообложенияСтрокой = ?(ВЕдинственномЧисле, Нстр("ru='объект недвижимости'"), Нстр("ru='объекты недвижимости'"));
	КонецЕсли;

	Если Падеж <> "Именительный" Тогда
		СклоненнаяСтрокаМассив = ПолучитьСклоненияСтроки(
			ОбъектНалогообложенияСтрокой,
			"Л= ru_RU",
			"ПД="+Падеж);
		ОбъектНалогообложенияСтрокой = СклоненнаяСтрокаМассив[0];
	КонецЕсли;

	Если СБольшойБуквы Тогда
		ОбъектНалогообложенияСтрокой = ВРег(Лев(ОбъектНалогообложенияСтрокой, 1)) + Сред(ОбъектНалогообложенияСтрокой, 2);
	КонецЕсли; 
	
	Возврат ОбъектНалогообложенияСтрокой;

КонецФункции 

#КонецОбласти