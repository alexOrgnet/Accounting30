#Область СлужебныйПрограммныйИнтерфейс

// Переносит ссылки в "Публичные идентификаторы синхронизируемых объектов" со старой 
// ссылки на новую. Нужно для случая, когда меняется источник для выгрузки и загрузки
// объекта формата. Например, ранее объект формата Справочник.Патенты загружался в 
// справочник "Патенты", а в новой версии - в документ "ОперацияСПатентом". В этом
// случае нужно перенести идентификаторы со справочника "Патенты" на документ "Операция с патентом".
//
// Параметры:
//  СтараяСсылка - ЛюбаяСсылка - ссылка, с которой нужно перенести идентификаторы на новую
//  НоваяСсылка	 - ЛюбаяСсылка - ссылка, на которую нужно перенести идентификаторы.
//
Процедура ПеренестиСсылкиВПубличныхИдентификаторах(СтараяСсылка, НоваяСсылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтараяСсылка", СтараяСсылка);
	Запрос.УстановитьПараметр("НоваяСсылка", НоваяСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УзлыПланаОбмена
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|		ПО СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка = ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы
	|			И (ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка = &НоваяСсылка)
	|ГДЕ
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления
	|	И НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыПланаОбмена.Ссылка КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор, """") КАК Идентификатор
	|ИЗ
	|	УзлыПланаОбмена КАК УзлыПланаОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|		ПО УзлыПланаОбмена.Ссылка = ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы
	|			И (ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка = &СтараяСсылка)";
	
	ДанныеПИСО = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейПИСОНовая = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейПИСОНовая.Отбор.Ссылка.Установить(НоваяСсылка);
	
	НаборЗаписейПИСОСтарая = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейПИСОСтарая.Отбор.Ссылка.Установить(СтараяСсылка);
	
	Для Каждого СтрокаПИСО Из ДанныеПИСО Цикл
		
		Запись = НаборЗаписейПИСОНовая.Добавить();
		Запись.Активность = Истина;
		Запись.УзелИнформационнойБазы = СтрокаПИСО.УзелИнформационнойБазы;
		Запись.Ссылка = НоваяСсылка;
		Если Не ЗначениеЗаполнено(СтрокаПИСО.Ссылка) Тогда
			// Ссылки в ПИСО нет, значит либо этот объект никогда не загружался,
			// либо идентификатор в этой базе и в базе корреспондента совпадает.
			// Поэтому нужно записать идентификатор старого элемента как идентификатор нового со ссылкой на новый.
			Запись.Идентификатор = Строка(СтараяСсылка.УникальныйИдентификатор());
		Иначе
			// Есть ссылка в ПИСО, поэтому нужно продублировать запись ПИСО для новой ссылки и существующего идентификатора ПИСО.
			Запись.Идентификатор = СтрокаПИСО.Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписейПИСОНовая.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейПИСОНовая);
		// Записываем пустой набор, так как этот объект уже в обмене не участвует.
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейПИСОСтарая);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти