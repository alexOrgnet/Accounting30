////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РАСШИФРОВОК БУХГАЛТЕРСКОЙ ОТЧЕТНОСТИ ДЛЯ БАНКОВ
//  Модуль предназначен для заполнения отчетов с расшифровками показателей
//  бухгалтерской отчетности, отправляемых в банк.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет отчет "Расшифровки бухгалтерской отчетности" по данным информационной базы.
// Вызывается из РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет().
//
// Параметры:
//   ИДРедакцииОтчета - Строка - имя формы регл. отчета.
//   ПараметрыОтчета - Структура - параметры регл. отчета.
//   Контейнер - Структура - данные регл. отчета.
//
Процедура ЗаполнитьРасшифровкиБухгалтерскойОтчетности(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
		ЗаполнитьОтчетРасшифровкиБухгалтерскойОтчетностиФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные xml-файла выгрузки плана счетов.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, данные которой выгружаются.
//
// Возвращаемое значение:
//	ДвоичныеДанные - Данные xml-файла.
//
Функция ВыгрузитьПланСчетов(Организация) Экспорт
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиПланаСчетов(Организация);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяВременногоФайла, "windows-1251");
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл",    ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(КомпоновщикXML, "ВерсПрог",  ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(КомпоновщикXML, "ВерсФорм",  ПараметрыВыгрузки.ВерсФорм);
	
	ВывестиУзел_ПланСчетов_Документ(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОтчетРасшифровкиБухгалтерскойОтчетностиФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер)
	
	Если ПараметрыОтчета.РасшифровкиПоказателей = Неопределено Тогда
		ПараметрыОтчета.РасшифровкиПоказателей = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Заполнить_ОСВ(ПараметрыОтчета);
	
	Заполнить_АнализСчета(ПараметрыОтчета);
	
	Заполнить_ОперацииИКарточкаСчета(ПараметрыОтчета);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура Заполнить_ОСВ(ПараметрыОтчета)
	
	ИмяРаздела = "ОборотноСальдоваяВедомость";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеИПредставлениеСтраницы = Неопределено;
		
		НачалоПериода = НачалоМесяца(СтраницаРаздела.Параметры.ДатаНачалаПериода);
		КонецПериода  = КонецМесяца(СтраницаРаздела.Параметры.ДатаКонцаПериода);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("СписокОрганизаций", ПараметрыОтчета.СписокОрганизаций);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
		ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
		
		ДанныеИПредставлениеСтраницы = Новый Структура;
		
		Заполнить_ОСВ_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
		
		СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить_АнализСчета(ПараметрыОтчета)
	
	ИмяРаздела = "АнализСчета";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	ТипДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ПериодыОтчетов = Новый ТаблицаЗначений;
	ПериодыОтчетов.Колонки.Добавить("НачалоПериода", ТипДата);
	ПериодыОтчетов.Колонки.Добавить("КонецПериода",  ТипДата);
	ПериодыОтчетов.Колонки.Добавить("ПрефиксВидаФайла",  ТипСтрока);
	ПериодыОтчетов.Колонки.Добавить("ШаблонИмениФайла",  ТипСтрока);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОтчета = СтраницаРаздела.Параметры.Счет;
		Если ЗначениеЗаполнено(СчетОтчета)
		   И СчетОтмеченВСписке(СчетОтчета, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтчета);
			
			ПрефиксВидаФайла = "АнализСчета" + "." + СчетОтчета.УникальныйИдентификатор() + ".";
			ШаблонИмениФайла = "Сегмент %1 анализа счета " + СвойстваСчета.Код;
			
			ПериодыОтчетов.Очистить();
			Если СтраницаРаздела.Параметры.Свойство("ДатаНачалаПериода") Тогда
				// Отчет формируется за несколько периодов, сами периоды указаны во вложенных строках.
				Для Каждого СтрокаПериода Из СтраницаРаздела.Строки Цикл
					ПериодОтчета = ПериодыОтчетов.Добавить();
					ПериодОтчета.НачалоПериода = НачалоМесяца(СтрокаПериода.Параметры.ДатаНачалаПериода);
					ПериодОтчета.КонецПериода  = КонецМесяца(СтрокаПериода.Параметры.ДатаКонцаПериода);
					ПериодОтчета.ПрефиксВидаФайла = ПрефиксВидаФайла 
						+ СтрокаГГММ_ГГММ(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода) + ".";
					ПериодОтчета.ШаблонИмениФайла = ШаблонИмениФайла 
						+ " за " + ПредставлениеПериода(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода);
				КонецЦикла;
				
			Иначе
				// Отчет строится за один период - последний месяц периода отчета.
				ПериодОтчета = ПериодыОтчетов.Добавить();
				ПериодОтчета.КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
				ПериодОтчета.НачалоПериода = НачалоМесяца(ПериодОтчета.КонецПериода);
				ПериодОтчета.ПрефиксВидаФайла = ПрефиксВидаФайла;
				ПериодОтчета.ШаблонИмениФайла = ШаблонИмениФайла;
				
			КонецЕсли;
			
			Для Каждого ПериодОтчета Из ПериодыОтчетов Цикл
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("Организация",       ПараметрыОтчета.Организация);
				ПараметрыЗаполнения.Вставить("СписокОрганизаций", ПараметрыОтчета.СписокОрганизаций);
				ПараметрыЗаполнения.Вставить("Счет",          СтраницаРаздела.Параметры.Счет);
				ПараметрыЗаполнения.Вставить("НачалоПериода", ПериодОтчета.НачалоПериода);
				ПараметрыЗаполнения.Вставить("КонецПериода",  ПериодОтчета.КонецПериода);
				ПараметрыЗаполнения.Вставить("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
				ПараметрыЗаполнения.Вставить("ПрефиксВидаФайла",        ПериодОтчета.ПрефиксВидаФайла);
				ПараметрыЗаполнения.Вставить("ШаблонИмениФайла",        ПериодОтчета.ШаблонИмениФайла);
				
				Заполнить_АнализСчета_ЗаПериод(ПараметрыЗаполнения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить_ОперацииИКарточкаСчета(ПараметрыОтчета)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	СчетаДляКоторыхПредусмотренФорматВыгрузки = УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	ПараметрыРаздела = ПараметрыРаздела_Операции();
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл // По каждому бух.счету
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетВерхнегоУровня = СтраницаРаздела.Параметры.Счет;
		
		Если НЕ ЗначениеЗаполнено(СчетВерхнегоУровня)
		 ИЛИ НЕ СчетОтмеченВСписке(СчетВерхнегоУровня, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетВерхнегоУровня);
		
		ПараметрыРаздела.СчетВерхнегоУровня     = СчетВерхнегоУровня;
		ПараметрыРаздела.КодСчетаВерхнегоУровня = СвойстваСчета.Код;
		ПараметрыРаздела.СчетаВИерархии         = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		
		ФормироватьТаблицу =
			СчетаДляКоторыхПредусмотренФорматВыгрузки.Найти(СтраницаРаздела.Параметры.Счет) <> Неопределено;
		
		Для Каждого СтрокаПериода Из СтраницаРаздела.Строки Цикл // По периодам отчета
			ДанныеИПредставлениеСтраницы = Новый Структура;
			
			Если ФормироватьТаблицу Тогда
				ПараметрыРаздела.НачалоПериода  = НачалоДня(СтрокаПериода.Параметры.ДатаНачалаПериода);
				ПараметрыРаздела.КонецПериода   = КонецДня(СтрокаПериода.Параметры.ДатаКонцаПериода);
				
				ПараметрыРаздела.ПрефиксВидаФайла = "БанковскиеСчета" + "."
					+ СчетВерхнегоУровня.УникальныйИдентификатор() + "."
					+ СтрокаГГММ_ГГММ(ПараметрыРаздела.НачалоПериода, ПараметрыРаздела.КонецПериода) + ".";
				
				ПараметрыРаздела.ИмяФайла = "Сегмент %НомерСегмента% перечня проводок по счету %БанковскийСчет% за "
					+ ПредставлениеПериода(ПараметрыРаздела.НачалоПериода, ПараметрыРаздела.КонецПериода);
				
				ПараметрыСводныхСведений = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыДанныхКарточкиСчетаСводныеСведения();
				ПараметрыСводныхСведений.Организации = ПараметрыОтчета.СписокОрганизаций;
				ПараметрыСводныхСведений.СчетВерхнегоУровня = ПараметрыРаздела.СчетВерхнегоУровня;
				ПараметрыСводныхСведений.КодСчетаВерхнегоУровня = ПараметрыРаздела.КодСчетаВерхнегоУровня;
				ПараметрыСводныхСведений.СчетаВИерархии = ПараметрыРаздела.СчетаВИерархии;
				ПараметрыСводныхСведений.НачалоПериода = ПараметрыРаздела.НачалоПериода;
				ПараметрыСводныхСведений.КонецПериода =  ПараметрыРаздела.КонецПериода;
				
				СводныеДанные = ЗаполнениеФинОтчетностиВБанкиВыгрузка.КарточкаСчетаСводныеСведения(ПараметрыСводныхСведений);
				
				Заполнить_Операции_ДетальныеСведения(ПараметрыОтчета, ПараметрыРаздела);
				ДанныеИПредставлениеСтраницы.Вставить("Данные", СводныеДанные);
				ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
				
			КонецЕсли;
			
			БланкОтчета = БланкОтчетаКарточкаСчета(ПараметрыОтчета, СтрокаПериода);
			
			ЗаписатьБланкКарточкиСчетаВРегистрДополнительныхФайлов(ПараметрыОтчета, СтрокаПериода, БланкОтчета);
			
			ДанныеИПредставлениеСтраницы.Вставить("БланкОтчета", БланкОтчета);
			
			СтрокаПериода.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
			
		КонецЦикла; // По периодам отчета
		
	КонецЦикла; // По каждому бух.счету
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

#Область КарточкаСчета

Процедура ЗаписатьБланкКарточкиСчетаВРегистрДополнительныхФайлов(ПараметрыОтчета, СтрокаПериода, БланкОтчета)
	
	ПрефиксВидаФайла = ПрефиксКарточкиСчета(
		СтрокаПериода.Параметры.Счет, СтрокаПериода.Параметры.ДатаНачалаПериода, СтрокаПериода.Параметры.ДатаКонцаПериода);
	
	// Удаление сохраненных данных.
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(
		ПараметрыОтчета.РегламентированныйОтчет, ПрефиксВидаФайла + "%");
	
	ИмяФайла = ПрефиксВидаФайла + ".mxl";
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные",                  БланкОтчета);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла);
	ПараметрыЗаписи.Вставить("ИмяФайла",                ИмяФайла);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей",       1);
	
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Функция БланкОтчетаКарточкаСчета(ПараметрыОтчета, СтрокаПериода)
	
	НастройкиОтчета = Новый Структура;
	НастройкиОтчета.Вставить("Счет",          СтрокаПериода.Параметры.Счет);
	НастройкиОтчета.Вставить("НачалоПериода", СтрокаПериода.Параметры.ДатаНачалаПериода);
	НастройкиОтчета.Вставить("КонецПериода",  СтрокаПериода.Параметры.ДатаКонцаПериода);
	НастройкиОтчета.Вставить("Организация",   ПараметрыОтчета.Организация);
	НастройкиОтчета.Вставить("ВключатьОбособленныеПодразделения", Истина);
	НастройкиОтчета.Вставить("РазмещениеДополнительныхПолей", "");
	НастройкиОтчета.Вставить("ДополнительныеПоля", ЗаполнениеФинОтчетностиВБанки.НовыеДополнительныеПоля());
	НастройкиОтчета.Вставить("Периодичность", "");
	НастройкиОтчета.Вставить("Отборы", Новый Структура);
	
	ПараметрыКарточкиСчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКарточкаСчета(НастройкиОтчета);
	БланкОтчета = СформироватьОтчетКарточкаСчета(ПараметрыКарточкиСчета);
	
	Возврат БланкОтчета;
	
КонецФункции

Функция ПрефиксКарточкиСчета(Счет, НачалоПериода, КонецПериода) Экспорт
	
	ПрефиксВидаФайла = "БланкОтчета" + ".StTRN_"
		+ Счет.Код + "."
		+ СтрокаГГГГММДД_ГГГГММДД(НачалоПериода, КонецПериода);
	
	Возврат ПрефиксВидаФайла;
	
КонецФункции

Функция СформироватьОтчетКарточкаСчета(ПараметрыОтчета)
	
	БухгалтерскиеОтчеты.ПодготовитьСхемуКомпоновкиДанных(ПараметрыОтчета);
	
	// Для выгрузки в банк расшифровку формировать не требуется.
	ПараметрыОтчета.Вставить("ИспользоватьДанныеРасшифровки", Ложь);
	
	РезультатФормированияОтчета = БухгалтерскиеОтчетыВызовСервера.ПодготовитьОтчет(ПараметрыОтчета);
	Если ЭтоАдресВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(РезультатФормированияОтчета.ДанныеРасшифровки);
	КонецЕсли;
	
	Возврат РезультатФормированияОтчета.Результат;
	
КонецФункции

#КонецОбласти

#Область ОборотноСальдоваяВедомость

Процедура Заполнить_ОСВ_ЗаПериод(ЗаполняемаяСтруктура, ПараметрыЗаполнения)
	
	СписокОрганизаций = ПараметрыЗаполнения.СписокОрганизаций;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	СведенияОСВ = ЗаполнениеФинОтчетностиВБанкиВыгрузка.СведенияОСВ(
		СписокОрганизаций, НачалоПериода, КонецПериода);
	
	ЗаполняемаяСтруктура.Вставить("Данные", СведенияОСВ);
	ЗаполняемаяСтруктура.Вставить("Представление", Неопределено);
	
КонецПроцедуры

Процедура ВнестиСтрокиВСведенияОСВ(СведенияОСВ, ДанныеЗапроса)
	
	Для Каждого СтрокаДанных Из ДанныеЗапроса.Строки Цикл
		ЭтоДетальнаяЗапись = (СтрокаДанных.Строки.Количество() = 0);
		Если НЕ ЭтоДетальнаяЗапись Тогда
			НоваяСтрокаОСВ = СведенияОСВ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОСВ, СтрокаДанных);
			
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АнализСчета

Процедура Заполнить_АнализСчета_ЗаПериод(ПараметрыЗаполнения)
	
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ПрефиксВидаФайла = ПараметрыЗаполнения.ПрефиксВидаФайла;
	ШаблонИмениФайла = ПараметрыЗаполнения.ШаблонИмениФайла;
	
	ПрефиксВидаФайлаИтоги = СтрЗаменить(ПрефиксВидаФайла, "АнализСчета", "АнализСчетаИтоги");
	ИмяФайлаИтоги         = СтрЗаменить(ШаблонИмениФайла, "Сегмент %1 анализа счета", "Итоги анализа счета");
	
	// Удаление сохраненных данных.
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ПрефиксВидаФайла + "%");
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ПрефиксВидаФайлаИтоги + "%");
	
	ПараметрыЗапросаАнализСчета = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыЗапросаАнализСчета();
	ПараметрыЗапросаАнализСчета.СписокОрганизаций = ПараметрыЗаполнения.СписокОрганизаций;
	ПараметрыЗапросаАнализСчета.Счет = ПараметрыЗаполнения.Счет;
	ПараметрыЗапросаАнализСчета.НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	ПараметрыЗапросаАнализСчета.КонецПериода = ПараметрыЗаполнения.КонецПериода;
	
	Запрос = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ЗапросАнализСчета(ПараметрыЗапросаАнализСчета);
	
	ИтогиАнализаСчета = Новый Структура();
	ИтогиАнализаСчета.Вставить("СНД", 0);
	ИтогиАнализаСчета.Вставить("СНК", 0);
	ИтогиАнализаСчета.Вставить("ДО",  0);
	ИтогиАнализаСчета.Вставить("КО",  0);
	ИтогиАнализаСчета.Вставить("СКД", 0);
	ИтогиАнализаСчета.Вставить("СКК", 0);
	
	ВеличинаОтсечки = 3000;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // уровень 0 - общие итоги
	ВыборкаИтоги.Следующий();
	
	ЗаполнитьЗначенияСвойств(ИтогиАнализаСчета, ВыборкаИтоги);
	
	ВыборкаПоСчетам = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // уровень 1
	
	ТаблицаДанныхСтраницы = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаДанныхСтраницы.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаДанныхСтраницы.Колонки.Добавить("Уровень",
		ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные",                  ТаблицаДанныхСтраницы);
	ПараметрыЗаписи.Вставить("УровеньДетальныхЗаписей", 5);
	ПараметрыЗаписи.Вставить("ПрефиксВидаФайла",        ПрефиксВидаФайла);
	ПараметрыЗаписи.Вставить("ШаблонИмениФайла",        ШаблонИмениФайла);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		НоваяСтрокаДанных = ТаблицаДанныхСтраницы.Добавить();
		НоваяСтрокаДанных.Уровень = ВыборкаПоСчетам.Уровень();
		НакопленоЗаписей = НакопленоЗаписей + 1;
		ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
			НоваяСтрокаДанных, ВыборкаПоСчетам, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", СтрШаблон(ШаблонИмениФайла, СтрокаЧГ0(НомерСегмента)));
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ПривестиТаблицуДанныхК4Уровню(ТаблицаДанныхСтраницы);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиАнализаСчета);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайлаИтоги + "0");
	ПараметрыЗаписи.Вставить("ИмяФайла", ИмяФайлаИтоги);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
	СтрокаТаблицыДанных, Выборка, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи)
	
	УровеньВыборки = Выборка.Уровень();
	
	// Заполним строку таблицы данных по выборке
	// В зависимости от того, сколько строк в выборке на нижних уровнях, строка данных может:
	//  - либо содержать содержать данные по всем аналитикам более детальных уровней (счет, субконто1, субконто2),
	//  - либо содержать сводные данные без аналитики или по части аналитики нижних уровней - тогда данные 
	//    по полному набору аналитики содержатся в подчиненных строках.
	ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, Выборка); // пока без аналитики нижних уровней
	
	ВыборкаПодчиненныхСтрок = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УровеньПодчиненнойВыборки = ВыборкаПодчиненныхСтрок.Уровень();
	
	ТаблицаДанных = СтрокаТаблицыДанных.Владелец();
	
	Если УровеньПодчиненнойВыборки = ПараметрыЗаписи.УровеньДетальныхЗаписей Тогда
		// Если на следующем уровне выборки находятся детальные строки, то в текущей строке данных не требуется заполнять
		// аналитику с более низкого уровня. Вместо этого в таблице данных создадим новые строки по подчиненной выборке.
		
		Пока ВыборкаПодчиненныхСтрок.Следующий() Цикл
			СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			СтрокаТаблицыДанных.Уровень = УровеньПодчиненнойВыборки;
			НакопленоЗаписей = НакопленоЗаписей + 1;
			ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок);
		КонецЦикла;
		
	ИначеЕсли ВыборкаПодчиненныхСтрок.Количество() > 1 Тогда
		// Если на следующем уровне выборки несколько строк, то в текущей строке данных не требуется заполнять
		// аналитику с более низкого уровня. Вместо этого в таблице данных создадим новые строки по подчиненной выборке.
		
		Пока ВыборкаПодчиненныхСтрок.Следующий() Цикл
			СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			СтрокаТаблицыДанных.Уровень = УровеньПодчиненнойВыборки;
			НакопленоЗаписей = НакопленоЗаписей + 1;
			ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
				СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
		КонецЦикла;
				
	Иначе
		// Дополним данные родительской строки аналитикой из единственной подчиненной строки.
		// Строку подчиненного уровня в таблице данных не создаем.
		ВыборкаПодчиненныхСтрок.Следующий();
		ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
			СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
		
	КонецЕсли;
	
	// После обработки очередной записи 1-го или 2-го уровня (Счет или Субконто1) проверим,
	// не пора ли сбросить данные сегмента в регистр.
	Если УровеньВыборки < 3 И НакопленоЗаписей >= ВеличинаОтсечки Тогда
		// Сброс в регистр по отсечке.
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПараметрыЗаписи.ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", СтрШаблон(ПараметрыЗаписи.ШаблонИмениФайла, СтрокаЧГ0(НомерСегмента)));
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ПривестиТаблицуДанныхК4Уровню(ТаблицаДанных);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		
		ТаблицаДанных.Очистить();
		НомерСегмента = НомерСегмента + 1;
		НакопленоЗаписей = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, Выборка)
	
	УровеньВыборки = Выборка.Уровень();
	
	ПоляВыборки = Новый Массив;
	
	Для Уровень = 1 По УровеньВыборки Цикл
		Если Уровень = 1 Тогда
			ПоляВыборки.Добавить("Счет");
			ПоляВыборки.Добавить("КодСчета");
			
		ИначеЕсли Уровень = 2 Тогда
			ПоляВыборки.Добавить("Субконто1");
			ПоляВыборки.Добавить("Субконто1ИНН");
			ПоляВыборки.Добавить("Субконто1КПП");
			СтрокаТаблицыДанных.ПредставлениеСубконто1 = Строка(Выборка.Субконто1);
			
		ИначеЕсли Уровень = 3 Тогда
			ПоляВыборки.Добавить("Субконто2");
			ПоляВыборки.Добавить("Субконто2ИНН");
			ПоляВыборки.Добавить("Субконто2КПП");
			СтрокаТаблицыДанных.ПредставлениеСубконто2 = Строка(Выборка.Субконто2);
			
		ИначеЕсли Уровень = 4 Тогда
			ПоляВыборки.Добавить("Валюта");
			
		ИначеЕсли Уровень = 5 Тогда
			ПоляВыборки.Добавить("КорСчет");
			ПоляВыборки.Добавить("КодКорСчета");
			ПоляВыборки.Добавить("ДетальнаяЗапись");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если строка заполняется по данным выборки подчиненных строк (УровеньВыборки > СтрокаТаблицыДанных.Уровень),
	// то суммы не трогаем.
	Если УровеньВыборки = СтрокаТаблицыДанных.Уровень Тогда
		ПоляВыборки.Добавить("СНД");
		ПоляВыборки.Добавить("СНК");
		ПоляВыборки.Добавить("ДО");
		ПоляВыборки.Добавить("КО");
		ПоляВыборки.Добавить("СКД");
		ПоляВыборки.Добавить("СКК");
	КонецЕсли;
	
	СтрокаСвойств = СтрСоединить(ПоляВыборки, ",");
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, Выборка, СтрокаСвойств);
	
КонецПроцедуры

Процедура ПривестиТаблицуДанныхК4Уровню(ТаблицаДанныхСтраницы)
	
	СтрокиУровня4 = ТаблицаДанныхСтраницы.НайтиСтроки(Новый Структура("Уровень", 4));
	Для Каждого СтрокаУровня4 Из СтрокиУровня4 Цикл
		ТаблицаДанныхСтраницы.Удалить(СтрокаУровня4);
	КонецЦикла;
	
	СтрокиУровня5 = ТаблицаДанныхСтраницы.НайтиСтроки(Новый Структура("Уровень", 5));
	Для Каждого СтрокаУровня5 Из СтрокиУровня5 Цикл
		СтрокаУровня5.Уровень = 4;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

Функция ПараметрыРаздела_Операции()
	
	ПараметрыРаздела = Новый Структура();
	ПараметрыРаздела.Вставить("СчетВерхнегоУровня", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыРаздела.Вставить("КодСчетаВерхнегоУровня", "");
	ПараметрыРаздела.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыРаздела.Вставить("КонецПериода",  '0001-01-01');
	ПараметрыРаздела.Вставить("СчетаВИерархии", Новый Массив);
	
	// Шаблоны для полей регистра ДополнительныеФайлыРегламентированныхОтчетов
	ПараметрыРаздела.Вставить("ИмяФайла",         "");
	ПараметрыРаздела.Вставить("ПрефиксВидаФайла", "");
	
	Возврат ПараметрыРаздела;
	
КонецФункции

Процедура Заполнить_Операции_ДетальныеСведения(ПараметрыОтчета, ПараметрыРаздела)
	
	РегламентированныйОтчет = ПараметрыОтчета.РегламентированныйОтчет;
	
	ПараметрыЗапроса = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ПараметрыЗапросаКарточкиСчетаДетальныеСведения();
	ПараметрыЗапроса.Вставить("Организации", ПараметрыОтчета.СписокОрганизаций);
	ПараметрыЗапроса.Вставить("СчетаВИерархии", ПараметрыРаздела.СчетаВИерархии);
	ПараметрыЗапроса.Вставить("НачалоПериода", ПараметрыРаздела.НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода",  ПараметрыРаздела.КонецПериода);
	
	Запрос = ЗаполнениеФинОтчетностиВБанкиВыгрузка.ЗапросКарточкаСчетаДетальныеСведения(ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоБанковскимСчетам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПрефиксВидаФайла = ПараметрыРаздела.ПрефиксВидаФайла;
	ВеличинаОтсечки = 1000;
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("ДатаОперации", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("Документ");
	ТаблицаОпераций.Колонки.Добавить("ВходящийДокумент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Назначение", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетДтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетКтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаДт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаКт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВал", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ТаблицаОпераций);
	
	// Очистка регистра от ранее заполненных сведений.
	ШаблонОтбора = ПрефиксВидаФайла + "%";
	ВыборкаСегментов = ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
	Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
		БанковскийСчет = ВыборкаПоБанковскимСчетам.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксПоБанковскомуСчету = ПрефиксВидаФайла
		                          + БанковскийСчет.УникальныйИдентификатор() + ".";
		БанковскийСчетНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Наименование");
		
		ТаблицаОпераций.Очистить();
		
		НомерСегмента = 1;
		НакопленоЗаписей = 0;
		
		ВыборкаПоОперациям = ВыборкаПоБанковскимСчетам.Выбрать();
		
		Пока ВыборкаПоОперациям.Следующий() Цикл
			НоваяСтрокаДанных = ТаблицаОпераций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, ВыборкаПоОперациям);
			
			Если ЗначениеЗаполнено(НоваяСтрокаДанных.НомерДокумента) Тогда
				НоваяСтрокаДанных.ВходящийДокумент = "№" + СокрЛП(НоваяСтрокаДанных.НомерДокумента);
				
				Если ЗначениеЗаполнено(НоваяСтрокаДанных.ДатаДокумента) Тогда
					НоваяСтрокаДанных.ВходящийДокумент = НоваяСтрокаДанных.ВходящийДокумент + " от "
					                                   + Формат(НоваяСтрокаДанных.ДатаДокумента, "ДЛФ=D");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалДт = 0 Тогда
				НоваяСтрокаДанных.ВалютаДт = "";
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалКт = 0 Тогда
				НоваяСтрокаДанных.ВалютаКт = "";
			КонецЕсли;
			
			НакопленоЗаписей = НакопленоЗаписей + 1;
			Если НакопленоЗаписей < ВеличинаОтсечки Тогда
				Продолжить; // накопление данных в таблице
			КонецЕсли;
			
			// Сброс в регистр по отсечке.
			ИмяФайла = ПараметрыРаздела.ИмяФайла;
			ИмяФайла = СтрЗаменить(ИмяФайла, "%НомерСегмента%", СтрокаЧГ0(НомерСегмента));
			ИмяФайла = СтрЗаменить(ИмяФайла, "%БанковскийСчет%",БанковскийСчетНаименование);
			
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковскомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла",                ИмяФайла);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей",       НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
			
			ТаблицаОпераций.Очистить();
			НомерСегмента = НомерСегмента + 1;
			НакопленоЗаписей = 0;
			
		КонецЦикла;
		
		// Сброс в регистр финального непустого сегмента или пустого первого сегмента.
		Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
			ИмяФайла = ПараметрыРаздела.ИмяФайла;
			ИмяФайла = СтрЗаменить(ИмяФайла, "%НомерСегмента%", СтрокаЧГ0(НомерСегмента));
			ИмяФайла = СтрЗаменить(ИмяФайла, "%БанковскийСчет%",БанковскийСчетНаименование);
			
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковскомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла",                ИмяФайла);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей",       НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПланаСчетов

Функция ПараметрыВыгрузкиПланаСчетов(Организация)
	
	Сегодня = ТекущаяДатаСеанса();
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ИННФЛ, ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, Сегодня, СтрокаСведений);
		
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсФорм", "1.01.02");
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(Сегодня, "ДФ=dd.MM.yyyy"));
	ПараметрыВыгрузки.Вставить("ИдФайл",   "BANK_COA_" + СведенияОбОрганизации.ИННЮЛ);
		
	ПараметрыОтправителя = Новый Структура;
	ПараметрыОтправителя.Вставить("Наим", "");
	ПараметрыОтправителя.Вставить("ИНН",  "");
	ПараметрыОтправителя.Вставить("КПП",  "");
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		ПараметрыОтправителя.Наим = СведенияОбОрганизации.НаимЮЛПол;
		ПараметрыОтправителя.ИНН  = СведенияОбОрганизации.ИННЮЛ;
		ПараметрыОтправителя.КПП  = СведенияОбОрганизации.КППЮЛ;
		ПараметрыВыгрузки.ИдФайл = ПараметрыВыгрузки.ИдФайл + СведенияОбОрганизации.КППЮЛ;
		
	Иначе
		
		ПараметрыОтправителя.Наим = СведенияОбОрганизации.ФИОРук;
		ПараметрыОтправителя.ИНН  = СведенияОбОрганизации.ИННФЛ;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Отправитель", ПараметрыОтправителя);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзел_ПланСчетов_Документ(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	
	ВывестиУзел_Организация(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ПланСчетов_БухгалтерскиеСчета(Компоновщик);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиУзел_Организация(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	Отправитель = ПараметрыВыгрузки.Отправитель;
	
	ВывестиАтрибут(Компоновщик, "Наим",  Отправитель.Наим, "Т,1000");
	ВывестиАтрибут(Компоновщик, "ИНН",   Отправитель.ИНН,  "Т"); // Может быть 10 или 12 символов.
	ВывестиНеобязательныйАтрибут(Компоновщик, "КПП", Отправитель.КПП,  "Т,9");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_ПланСчетов_БухгалтерскиеСчета(Компоновщик)
	
	ДеревоСчетов = ОтчетностьВБанкиСлужебный.ДеревоСчетовБУ(Истина);
	
	Если ДеревоСчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("БухгалтерскиеСчета");
	
	СтрокиУровня1 = ДеревоСчетов.Строки;
	
	Для Каждого Выборка1Уровня Из СтрокиУровня1 Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", Выборка1Уровня.Код, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", Выборка1Уровня.Наименование, "Т,120");
		ВывестиАтрибут(Компоновщик, "Тип", Выборка1Уровня.Вид, "Т,2");
		ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка1Уровня.Забалансовый, 1, 0), "Ч,1");
		
		СтрокиУровня2 = Выборка1Уровня.Строки;
		
		Для Каждого Выборка2Уровня Из СтрокиУровня2 Цикл
			Если Выборка2Уровня.Ссылка = Выборка1Уровня.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			ВывестиАтрибут(Компоновщик, "Код", Выборка2Уровня.Код, "Т,8");
			ВывестиАтрибут(Компоновщик, "Наименование", Выборка2Уровня.Наименование, "Т,120");
			ВывестиАтрибут(Компоновщик, "Тип", Выборка2Уровня.Вид, "Т,2");
			ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка2Уровня.Забалансовый, 1, 0), "Ч,1");
			
			СтрокиУровня3 = Выборка2Уровня.Строки;
			
			Для Каждого Выборка3Уровня Из СтрокиУровня3 Цикл
				Если Выборка3Уровня.Ссылка = Выборка2Уровня.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("Счет");
				
				ВывестиАтрибут(Компоновщик, "Код", Выборка3Уровня.Код, "Т,8");
				ВывестиАтрибут(Компоновщик, "Наименование", Выборка3Уровня.Наименование, "Т,120");
				ВывестиАтрибут(Компоновщик, "Тип", Выборка3Уровня.Вид, "Т,2");
				ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка3Уровня.Забалансовый, 1, 0), "Ч,1");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // Счет
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Счет
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БухгалтерскиеСчета
	
КонецПроцедуры

#КонецОбласти

Функция СтрокаГГММ_ГГММ(ДатаНачала, ДатаОкончания)
	
	Суффикс = "";
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаНачала, "ДФ='ггММ'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаОкончания, "ДФ='ггММ'");
	КонецЕсли;
	
	Суффикс = Сред(Суффикс, 2);
	
	Возврат Суффикс;
	
КонецФункции

Функция СтрокаГГГГММДД_ГГГГММДД(ДатаНачала, ДатаОкончания)
	
	Суффикс = "";
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаНачала, "ДФ=ггггММдд");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаОкончания, "ДФ='ггггММдд'");
	КонецЕсли;
	
	Суффикс = Сред(Суффикс, 2);
	
	Возврат Суффикс;
	
КонецФункции

Процедура ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ШаблонОтбора) Экспорт 
	
	ВыборкаСегментов = ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетОтмеченВСписке(СчетОтчета, СписокСчетов)
	
	СтрокаСчета = СписокСчетов.Найти(СчетОтчета, "Счет");
	
	Возврат СтрокаСчета <> Неопределено И СтрокаСчета.Включен;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#Область ОберткиФункцийИПроцедур

Процедура ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи)
	
	ЗаполнениеОтчетностиВБанки.ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Функция ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора)
	
	Возврат ЗаполнениеОтчетностиВБанки.ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
КонецФункции

#КонецОбласти

#КонецОбласти
