
#Область СлужебныйПрограммныйИнтерфейс

// Запускает фоновое задание, которое создает сообщения системы взаимодействия от имени служебного пользователя.
//
// Параметры:
//  ПараметрыЧатов - Соответствие - см. УведомленияОтФНСАУСНКлиент.ПараметрыВсехЧатов()
//
Процедура ПоказатьОповещенияВФоне(Знач ПараметрыЧатов) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
	
	Для Каждого ПараметрыСоответствияЧата Из ПараметрыЧатов Цикл	
		
		ПараметрыЧата = ПараметрыСоответствияЧата.Значение;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(
			НСтр("ru = 'Получение уведомлений АУСН от ФНС. %1'"), ПараметрыЧата.Организация);
		ПараметрыВыполнения.КлючФоновогоЗадания = ПараметрыЧата.ИдентификаторЧата;
		ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "УведомленияОтФНСАУСН.ПоказатьОповещения", ПараметрыЧата);
		
	КонецЦикла;
	
КонецПроцедуры

// Отправляет для пользователя чата сообщение с предложением перейти к разделу "Уведомления" в "1С-Отчетность".
//
// Параметры:
//  КомуПредложить - ИдентификаторПользователяСистемыВзаимодействия - пользователь, которому будет адресовано сообщение.
//  ПараметрыЧата - Структура - см. 
//
Процедура Предложить1СОтчетность(КомуПредложить, ПараметрыЧата) Экспорт
	
	ПользовательБота = СистемаВзаимодействия.ПолучитьПользователя(
		Новый ИдентификаторПользователяСистемыВзаимодействия(ПараметрыЧата.ИдентификаторПомощника));
	
	Получатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ИдентификаторПользователяСистемыВзаимодействия(КомуПредложить));
	
	ТекстСообщения = НСтр("ru = 'Для отправки ответных сообщений в ФНС рекомендуется использовать специализированный сервис.
                          |<a href=""ПерейтиВ1СОтчетность"">Открыть ""1С-Отчетность""</a>'");
	ОтправляемоеСообщение = Обсуждения.ОписаниеСообщения(
		СтроковыеФункции.ФорматированнаяСтрока(ТекстСообщения));
		
	ОтправляемоеСообщение.Данные = Новый Структура("Идентификатор", "ПерейтиВ1СОтчетность");
	
	ИдентификаторЧата = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ПараметрыЧата.ИдентификаторЧата);
	
	Обсуждения.ОтправитьСообщение(ПользовательБота, Получатели, ОтправляемоеСообщение, ИдентификаторЧата);
	
КонецПроцедуры

// Получает ссылку на уведомление по его идентификатору.
//
// Параметры:
//  ИдентификаторУведомления - Строка - код удаляемого уведомления.
//
// Возвращаемое значение:
//   СправочникСсылка.УведомленияАУСН - объект, в котором хранится уведомление.
//
Функция УведомлениеПоИдентификатору(Знач ИдентификаторУведомления) Экспорт
	
	Возврат Справочники.УведомленияАУСН.НайтиПоКоду(ИдентификаторУведомления);
	
КонецФункции

// Удаляет сообщение системы взаимодействия и помечает уведомление от ФНС как архивированное.
//
// Параметры:
//  ИдентификаторСообщения - ИдентификаторСообщенияСистемыВзаимодействия - удаляемое сообщение.
//  ИдентификаторУведомления - Строка - код удаляемого уведомления.
//
Процедура УдалитьСообщение(Знач ИдентификаторСообщения, Знач ИдентификаторУведомления = "") Экспорт
	
	Если ПустаяСтрока(ИдентификаторУведомления) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СистемаВзаимодействия.УдалитьСообщение(ИдентификаторСообщения);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УведомлениеОтФНС = Справочники.УведомленияАУСН.НайтиПоКоду(ИдентификаторУведомления);
	Если УведомлениеОтФНС.Пустая() Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не найдено уведомление от ФНС с идентификатором (MessageId) = %1'"),
			ИдентификаторУведомления);
		
		ЗаписьЖурналаРегистрации(ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.УведомленияАУСН,
			,
			ОписаниеОшибки());
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		
		Попытка
		
			УведомлениеОбъект = УведомлениеОтФНС.ПолучитьОбъект();
			Если УведомлениеОбъект.СтатусОповещения <> Перечисления.СтатусыОповещенийАУСН.Архивировано Тогда
				УведомлениеОбъект.СтатусОповещения = Перечисления.СтатусыОповещенийАУСН.Архивировано;
				УведомлениеОбъект.Записать();
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось архивировать уведомление от ФНС для %1.
                      |Header = %2
                      |MessageId = %3
                      |%4'"),
				УведомлениеОтФНС.Организация, УведомлениеОтФНС.Наименование, УведомлениеОтФНС.Код, ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации(ИнтеграцияАУСНКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.УведомленияАУСН,
				УведомлениеОтФНС,
				ОписаниеОшибки());
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СистемаВзаимодействия.УдалитьСообщение(ИдентификаторСообщения);
	
КонецПроцедуры

Функция ЕстьНепрочитанныеУведомления() Экспорт
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхБухгалтерии") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УведомленияАУСН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УведомленияАУСН КАК УведомленияАУСН
	|ГДЕ
	|	УведомленияАУСН.СтатусОповещения = ЗНАЧЕНИЕ(Перечисление.СтатусыОповещенийАУСН.НеПрочитано)
	|	И НЕ УведомленияАУСН.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция МожноПодключитьОбсуждения() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ПодключениеАУСН)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения");
	
КонецФункции

Функция ОбсужденияПодключены() Экспорт
	
	Если МожноПодключитьОбсуждения() Тогда
		МодульОбсуждения = ОбщегоНазначения.ОбщийМодуль("Обсуждения");
		Возврат МодульОбсуждения.ОбсужденияДоступны();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЛичныйКабинетБанкаДляУведомления(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УведомленияАУСН.ИдентификаторБанка КАК ИдентификаторБанка,
		|	УведомленияАУСН.Организация КАК Организация
		|ИЗ
		|	Справочник.УведомленияАУСН КАК УведомленияАУСН
		|ГДЕ
		|	УведомленияАУСН.Код = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПодключенныеБанки = РегистрыСведений.СостоянияИнтеграцииАУСН.Банки(Выборка.Организация, Выборка.ИдентификаторБанка);
		Если ПодключенныеБанки.Следующий() Тогда
			Возврат ИнтеграцияАУСНПовтИсп.СсылкаЛичныйКабинетБанка(ПодключенныеБанки.Банк);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
