
#Область ПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияПриИзменении.
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	
	МассивПолей.Добавить("ПолеПоискаШтрихкодНаименование");
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// См. РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьВидыНоменклатуры                    = Ложь;
	Настройки.ИспользоватьХарактеристики                      = Ложь;
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры        = Истина;
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе            = Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке           = Ложь;
	Настройки.ИспользоватьДополнительныеРеквизиты             = Ложь;
	Настройки.ИспользоватьВыгрузкуВКаталог1С                  = Ложь;
	Настройки.ИспользоватьВыгрузкуВНациональныйКаталог        = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру.
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	РеквизитыНоменклатуры = РеквизитыНоменклатурыПоДаннымСервиса(ДанныеЗаполнения, Истина);
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, РеквизитыНоменклатуры);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды.
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	НоменклатураПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкодам(
		ДанныеПоШтрихкодам.ВыгрузитьКолонку("Штрихкод"), Истина);
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		Штрихкод = СокрЛП(ЭлементКоллекции.Штрихкод);
		
		Если НоменклатураПоШтрихкодам.Найти(Штрихкод, "Штрихкод") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Штрихкод = Штрихкод;
		ЗаписьШтрихкода.Номенклатура = ЭлементКоллекции.Номенклатура;
		ЗаписьШтрихкода.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&РеквизитыНоменклатуры КАК РеквизитыНоменклатуры,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	ТекстРеквизиты = Новый Массив;
	РеквизитыНоменклатуры = РеквизитыНоменклатурыЗаполняемыеПоДаннымСервиса();
	Для каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
		ТекстРеквизиты.Добавить(СтрШаблон("	Номенклатура.%1 КАК %1,", РеквизитНоменклатуры.Ключ));
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"	&РеквизитыНоменклатуры КАК РеквизитыНоменклатуры,", СтрСоединить(ТекстРеквизиты, Символы.ПС));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов = РеквизитыНоменклатурыЗаполняемыеПоДаннымСервиса();
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма.Объект);
	
КонецПроцедуры

#КонецОбласти 

#Область СопоставлениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры.
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	РеквизитыНоменклатуры = РеквизитыНоменклатурыПоДаннымСервиса(ДанныеНоменклатурыСервиса);
	
	Если ТипЗнч(ДанныеНоменклатурыБазы) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеНоменклатурыБазы = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеНоменклатурыБазы);
	КонецЕсли;
	
	ПредставленияРеквизитов = РеквизитыНоменклатурыЗаполняемыеПоДаннымСервиса("Синоним");
	
	Для каждого Реквизит Из РеквизитыНоменклатуры Цикл
		ЗначениеБазы = Неопределено;
		Если ДанныеНоменклатурыБазы.Свойство(Реквизит.Ключ, ЗначениеБазы) 
			И ЗначениеБазы <> Реквизит.Значение Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, Реквизит.Ключ, Реквизит.Значение, 
				ЗначениеБазы, ПредставленияРеквизитов[Реквизит.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру.
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьИсключительнуюБлокировкуПоСсылке(НоменклатураСсылка);
		
		ЗаблокироватьДанныеДляРедактирования(НоменклатураСсылка);
		
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
		НоменклатураОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме.
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаИзменений <> Неопределено Тогда 
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
	ИначеЕсли ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда 
		
		// Заполнение при интерактивном создании.
		
		РеквизитыНоменклатуры = РеквизитыНоменклатурыПоДаннымСервиса(ДанныеИнтерактивногоЗаполнения, Истина);
		Для каждого ЭлементКоллекции Из РеквизитыНоменклатуры Цикл
			Форма.Объект[ЭлементКоллекции.Ключ] = ЭлементКоллекции.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// См. РаботаСНоменклатуройПереопределяемый.ПриСозданииНаСервереФормаПанельАдминистрирования.
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаРаботаСНоменклатуройАвтоматическоеОбновление", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаРаботаСОблачнымиКлассификаторами", "Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьРеквизитыФормыДляРаботыСервиса(Форма) Экспорт
	
	ПараметрыДоступности = РаботаСНоменклатуройКлиентСерверБП.ПараметрыДоступностиСервиса();
	ЗаполнитьПараметрыДоступностиСервиса(ПараметрыДоступности);
	ЗаполнитьЗначенияСвойств(Форма, ПараметрыДоступности);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДоступностиСервиса(ПараметрыДоступности) Экспорт 
	
	ПараметрыДоступности.СервисДоступен = РаботаСНоменклатурой.ПравоИзмененияДанных();
	ПараметрыДоступности.СервисАктивен = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
	ПараметрыДоступности.ИнтернетПоддержкаПодключена = 
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецПроцедуры

Функция СервисУспешноАктивирован() Экспорт 
	
	Результат = Истина;
	
	Попытка
		Константы.ИспользоватьСервисРаботаСНоменклатурой.Установить(Истина);
	Исключение
		РаботаСНоменклатурой.ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(
			НСтр("ru = 'Активация функциональности.'"), 
			ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что приоритетным видом номенклатуры является услуга
//
// Возвращаемое значение:
//  Булево
//
Функция УслугаПриоритетныйВидНоменклатуры() Экспорт
	
	Результат = Ложь;
	ВидыБизнесаСУслугамиВПриоритете = Перечисления.ВидыБизнеса.ВидыБизнесаСПриоритетнымВидомНоменклатурыУслуга();
	ОсновнойВидБизнеса = Константы.ВидБизнесаОсновной.Получить();
	Если ВидыБизнесаСУслугамиВПриоритете.Найти(ОсновнойВидБизнеса) <> Неопределено Тогда
		Результат = Истина;
	Иначе
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(
			ОсновнаяОрганизация, ОбщегоНазначения.ТекущаяДатаПользователя());
		Результат = СистемаНалогообложения = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет содержание услуги в табличной части документа.
// Устанавливает содержание с учетом периодичности.
//
// Параметры:
//    ТабличнаяЧасть - Табличная часть, Массив - Табличная часть документа или массив строк табличной части,
//                                       например - Товары, Услуги или АгентскиеУслуги.
//                                       В таблице обязательно наличие колонок "Номенклатура" и "Содержание".
//    ТекущаяДата    - Дата - Текущая дата документа. Используется для формирования нового содержания услуг. 
//    ПредыдущаяДата - Дата - Предыдущая дата документа. Если дата заполнена,
//                            то будет выполнена проверка на изменение содержания.
//                            В случае, если содержание услуги изменено пользователем,
//                            то новое содержание не будет установлено.
//
Процедура ОбновитьСодержаниеУслуг(ТабличнаяЧасть, Знач ТекущаяДата, Знач ПредыдущаяДата = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПериодичностьУслуг") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим реквизиты используемой номенклатуры в таблице.
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина);
	
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивНоменклатуры,
		"Наименование, НаименованиеПолное, ПериодичностьУслуги, Услуга");
		
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		РеквизитыТекущейНоменклатуры = РеквизитыНоменклатуры[СтрокаТаблицы.Номенклатура];
		Если РеквизитыТекущейНоменклатуры = Неопределено
			ИЛИ НЕ РеквизитыТекущейНоменклатуры.Услуга
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыТекущейНоменклатуры.ПериодичностьУслуги) Тогда
			// Обрабатываем только услуги с установленной периодичностью.
			Продолжить;
		КонецЕсли;
		
		НаименованиеНоменклатуры = ?(ПустаяСтрока(РеквизитыТекущейНоменклатуры.НаименованиеПолное),
			РеквизитыТекущейНоменклатуры.Наименование,
			РеквизитыТекущейНоменклатуры.НаименованиеПолное);
		
		Если ЗначениеЗаполнено(ПредыдущаяДата) Тогда
			// Если есть предыдущая дата, 
			// то проверим изменялось ли содержание услуги пользователем.
			ПредыдущееСодержаниеУслуги = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
				НаименованиеНоменклатуры,
				РеквизитыТекущейНоменклатуры.ПериодичностьУслуги,
				ПредыдущаяДата);
			СодержаниеУслугиИзменено = (СтрокаТаблицы.Содержание <> ПредыдущееСодержаниеУслуги);
		Иначе
			СодержаниеУслугиИзменено = Ложь;
		КонецЕсли;
		
		Если СодержаниеУслугиИзменено Тогда
			Продолжить;
		КонецЕсли;
		
		// Установим новое содержание услуги.
		СтрокаТаблицы.Содержание = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
			НаименованиеНоменклатуры,
			РеквизитыТекущейНоменклатуры.ПериодичностьУслуги,
			ТекущаяДата);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет признак прослеживаемости товара, комплекта, ОС в табличной части документа.
//
// Параметры:
//    ТабличнаяЧасть - табличная часть документа.
//                     В таблице обязательно наличие колонок "Номенклатура" и "ПрослеживаемыйТовар".
//    ВестиУчетПрослеживаемыхТоваров - Булево
//    ДатаСведений - Дата - дата на которую обновляется признак прослеживаемости
//    ОС - Булево - признак служит для идентификации порядка заполнения реквизитов прослеживаемости в ТЧ
//
Процедура ОбновитьПризнакПрослеживаемости(ТабличнаяЧасть, ВестиУчетПрослеживаемыхТоваров, ДатаСведений, ОС = Ложь) Экспорт
	
	ТаблицаТоваров = ТабличнаяЧасть.Выгрузить();
	ЕстьКолонкаПрослеживаемыйКомплект    = ТаблицаТоваров.Колонки.Найти("ПрослеживаемыйКомплект") <> Неопределено;
	ЕстьКолонкаПрослеживаемыйТовар       = ТаблицаТоваров.Колонки.Найти("ПрослеживаемыйТовар") <> Неопределено;
	ЕстьКолонкаПрослеживаемоеОС          = ТаблицаТоваров.Колонки.Найти("ПрослеживаемоеОС") <> Неопределено;
	Если НЕ ВестиУчетПрослеживаемыхТоваров Тогда
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если ЕСтьКолонкаПрослеживаемыйТовар Тогда
				СтрокаТаблицы.ПрослеживаемыйТовар = Ложь;
			КонецЕсли;
			Если ЕстьКолонкаПрослеживаемыйКомплект Тогда
				СтрокаТаблицы.ПрослеживаемыйКомплект = Ложь;
			КонецЕсли;
			Если ЕстьКолонкаПрослеживаемоеОС Тогда
				СтрокаТаблицы.ПрослеживаемоеОС = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Если ОС Тогда 
			КолонкаНоменклатуры = "ОсновноеСредство";
		Иначе
			КолонкаНоменклатуры = "Номенклатура";
		КонецЕсли;

		// Получим реквизиты используемой номенклатуры в таблице.
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть.Выгрузить(), КолонкаНоменклатуры, Истина);
		
		ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
				
		Если ОС Тогда
			РеквизитыНоменклатуры = "ПрослеживаемыйТовар";
		Иначе
			РеквизитыНоменклатуры = "ПрослеживаемыйТовар, ПрослеживаемыйКомплект";
		КонецЕсли;
		
		Если ОС Тогда
			РеквизитыНоменклатурыИзИстории = Справочники.ОсновныеСредства.ПризнакПрослеживаемостиНаДатуИзИстории(
			МассивНоменклатуры, ДатаСведений);
		Иначе
			РеквизитыНоменклатурыИзИстории = Справочники.Номенклатура.ПризнакПрослеживаемостиНаДатуИзИстории(
			МассивНоменклатуры, ДатаСведений);
		КонецЕсли;
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			МассивНоменклатуры, РеквизитыНоменклатуры);
		
		Если ЕстьКолонкаПрослеживаемоеОС Тогда
			МассивОС = ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть.Выгрузить(), "ОсновноеСредство", Истина);
			ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивОС);
			РеквизитыОС = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОС, "ПрослеживаемыйТовар");
			РеквизитыОСИзИстории = Справочники.ОсновныеСредства.ПризнакПрослеживаемостиНаДатуИзИстории(
			МассивОС, ДатаСведений);
		КонецЕсли;

		ЕстьКолонкаЕстьВДокументеПоступления = ТаблицаТоваров.Колонки.Найти("ЕстьВДокументеПоступления") <> Неопределено;
		ЕстьКолонкаНомерГТД                  = ТаблицаТоваров.Колонки.Найти("НомерГТД") <> Неопределено;
				
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			Если ЕстьКолонкаЕстьВДокументеПоступления
				И СтрокаТаблицы.ЕстьВДокументеПоступления Тогда
				// Не обновляем признак прослеживаемости для строк исходного документа. 
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКолонкаПрослеживаемоеОС Тогда
				ПрослеживаемостьТекущегоОС = РеквизитыОСИзИстории.Получить(СтрокаТаблицы.ОсновноеСредство);
				СтрокаТаблицы.ПрослеживаемоеОС = ?(ПрослеживаемостьТекущегоОС = Неопределено,
					РеквизитыОС[СтрокаТаблицы.ОсновноеСредство], ПрослеживаемостьТекущегоОС.ПрослеживаемыйТовар);
			КонецЕсли;
			
			РеквизитыТекущейНоменклатуры = РеквизитыНоменклатурыИзИстории[СтрокаТаблицы[КолонкаНоменклатуры]];
			Если РеквизитыТекущейНоменклатуры = Неопределено Тогда
				РеквизитыТекущейНоменклатуры = РеквизитыНоменклатуры[СтрокаТаблицы[КолонкаНоменклатуры]];
			КонецЕсли;
			Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
				Если ЕстьКолонкаПрослеживаемыйКомплект И ЕстьКолонкаПрослеживаемыйТовар Тогда
					СтрокаТаблицы.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар
					Или РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				КонецЕсли;
				
				Если ЕстьКолонкаПрослеживаемыйТовар И Не ЕстьКолонкаПрослеживаемыйКомплект Тогда
					СтрокаТаблицы.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры.ПрослеживаемыйТовар;
				КонецЕсли;
				
				Если ЕстьКолонкаПрослеживаемыйКомплект Тогда
					СтрокаТаблицы.ПрослеживаемыйКомплект = РеквизитыТекущейНоменклатуры.ПрослеживаемыйКомплект;
				КонецЕсли;
				Если ЕстьКолонкаПрослеживаемыйТовар И СтрокаТаблицы.ПрослеживаемыйТовар И ЕстьКолонкаНомерГТД Тогда
					// Дополнительно очистим номер ГТД для прослеживаемого товара.
					СтрокаТаблицы.НомерГТД = Неопределено;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров объекта, используемых для получения сведений о
// номенклатуре (см. БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры)
//
// Возвращаемое значение:
//  Структура
//
Функция НовыеПараметрыОбъекта() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("Дата", Дата(1, 1, 1));
	Параметры.Вставить("Дата", Дата(1, 1, 1));
	Параметры.Вставить("ТипЦен", Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	Параметры.Вставить("СуммаВключаетНДС", Ложь);
	Параметры.Вставить("ВалютаДокумента", Справочники.Валюты.ПустаяСсылка());
	Параметры.Вставить("КурсВзаиморасчетов", 0);
	Параметры.Вставить("КратностьВзаиморасчетов", 0);
	Параметры.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	Параметры.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Параметры.Вставить("ДокументБезНДС", Ложь);
	Параметры.Вставить("Реализация", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеНоменклатуры

Функция РеквизитыНоменклатурыПоДаннымСервиса(ДанныеСервиса, ДобавитьЗначенияПоУмолчанию = Ложь)
	
	Перем Производитель;
	
	РеквизитыНоменклатуры = РеквизитыНоменклатурыЗаполняемыеПоДаннымСервиса("ПустоеЗначениеТипа");
	РеквизитыНоменклатуры.Артикул = ДанныеСервиса.Артикул;
	РеквизитыНоменклатуры.НаименованиеПолное = ДанныеСервиса.Наименование;
	РеквизитыНоменклатуры.Наименование =  ?(ЗначениеЗаполнено(ДанныеСервиса.НаименованиеДляПечати),
		ДанныеСервиса.НаименованиеДляПечати, ДанныеСервиса.Наименование);
		
	ПредставлениеПроизводителя = ПредставлениеПроизводителяНоменклатуры(ДанныеСервиса, Производитель);
	Если ЗначениеЗаполнено(Производитель) Тогда
		РеквизитыНоменклатуры.Производитель = Производитель;
	КонецЕсли;
	Описание = НеформализованноеОписаниеНоменклатуры(ДанныеСервиса, ПредставлениеПроизводителя);
	РеквизитыНоменклатуры.Описание = Описание;
	РеквизитыНоменклатуры.ПродукцияМаркируемаяДляГИСМ = ДанныеСервиса.УчастникГИСМ;
	
	СтавкаНДС = ОбменСКонтрагентамиБП.ПолучитьСтавкуНДСПеречислением(ДанныеСервиса.СтавкаНДС);
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	РеквизитыНоменклатуры.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	
	РеквизитыНоменклатуры.Услуга = (ДанныеСервиса.Тип = "Услуга");
	
	РеквизитыНоменклатуры.ЕдиницаИзмерения = 
		ЕдиницаИзмеренияПоДаннымСервиса(ДанныеСервиса.ЕдиницаИзмерения, РеквизитыНоменклатуры.Услуга);
	
	ДобавитьВРеквизитыЗначенияКлассификаторов(РеквизитыНоменклатуры, ДанныеСервиса);
	
	Если ДобавитьЗначенияПоУмолчанию Тогда
		Если РеквизитыНоменклатуры.Услуга Тогда
			ВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга");
		Иначе
			ВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры");
		КонецЕсли;
		РеквизитыНоменклатуры.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		РеквизитыНоменклатуры.Вставить("НоменклатурнаяГруппа",
			БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	КонецЕсли;
	
	Возврат РеквизитыНоменклатуры;
	
КонецФункции

// Возвращает неформализованное описание номенклатуры в виде текста.
//
// Параметры:
//  ДанныеСервиса - СтрокаТаблицыЗначений - Данные номенклатуры, полученные из сервиса.
// 
// Возвращаемое значение:
//  Строка - Текстовое описание номенклатуры.
//
Функция НеформализованноеОписаниеНоменклатуры(Знач ДанныеСервиса, Знач ПредставлениеПроизводителя)
	
	СодержимоеОписания = СтрРазделить(ДанныеСервиса.Описание, Символы.ПС);
	СодержимоеОписания.Добавить(ПредставлениеПроизводителя);
	СодержимоеОписания.Добавить(ПредставлениеБренда(ДанныеСервиса));
	ПредставлениеМерныхХарактеристикНоменклатуры(СодержимоеОписания, ДанныеСервиса);
	ПредставлениеДополнительныхРеквизитовНоменклатуры(СодержимоеОписания, ДанныеСервиса);
	
	Всего = СодержимоеОписания.Количество();
	Для ОбратныйИндекс = 1 По Всего Цикл
		Если ПустаяСтрока(СодержимоеОписания[Всего - ОбратныйИндекс]) Тогда
			СодержимоеОписания.Удалить(Всего - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СодержимоеОписания, Символы.ПС);
	
КонецФункции

Функция ПредставлениеПроизводителяНоменклатуры(Знач ДанныеСервиса, КонтрагентСсылка)
	
	Результат = "";
	
	Если ТипЗнч(ДанныеСервиса.Производитель) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	НаименованиеПроизводителя = "";
	ДанныеСервиса.Производитель.Свойство("Наименование", НаименованиеПроизводителя);
	Если ЗначениеЗаполнено(НаименованиеПроизводителя) Тогда
		
		ИНН = "";
		КПП = "";
		ДанныеСервиса.Производитель.Свойство("ИНН", ИНН);
		ДанныеСервиса.Производитель.Свойство("КПП", КПП);
		
		Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
			Результат = СтрШаблон(НСтр("ru = 'Производитель: %1 (ИНН/КПП: %2/%3)'"),
				НаименованиеПроизводителя, ИНН, КПП);
			КонтрагентСсылка = КонтрагентПоИННКПП(ИНН, КПП);
		ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
			Результат = СтрШаблон(НСтр("ru = 'Производитель: %1 (ИНН %2)'"),
				НаименованиеПроизводителя, ИНН);
		Иначе
			Результат = СтрШаблон(НСтр("ru = 'Производитель: %1'"), НаименованиеПроизводителя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеБренда(Знач ДанныеСервиса)
	
	Результат = "";
	
	Если ДанныеСервиса.Бренд <> Неопределено
		И Не ПустаяСтрока(ДанныеСервиса.Бренд.Наименование) Тогда 
		Результат = СтрШаблон("Бренд: %1", ДанныеСервиса.Бренд.Наименование);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПредставлениеМерныхХарактеристикНоменклатуры(СодержимоеОписания, Знач ДанныеСервиса)
	
	МерныеХарактеристики = Новый Соответствие;
	МерныеХарактеристики.Вставить("Вес",                 НСтр("ru = 'Вес'"));
	МерныеХарактеристики.Вставить("Длина",               НСтр("ru = 'Длина'"));
	МерныеХарактеристики.Вставить("Площадь",             НСтр("ru = 'Площадь'"));
	МерныеХарактеристики.Вставить("Объем",               НСтр("ru = 'Объем'"));
	МерныеХарактеристики.Вставить("КоличествоВУпаковке", НСтр("ru = 'Количество в упаковке'"));
	
	Для Каждого МернаяХарактеристика Из МерныеХарактеристики Цикл
		
		ТекущееПредставление = ПредставлениеМернойХарактеристикиНоменклатуры(ДанныеСервиса, МернаяХарактеристика);
		
		Если Не ПустаяСтрока(ТекущееПредставление) Тогда
			СодержимоеОписания.Добавить(ТекущееПредставление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеМернойХарактеристикиНоменклатуры(Знач ДанныеСервиса, Знач МернаяХарактеристика)
	
	ПредставлениеМернойХарактеристики = "";
	
	ИмяМернойХарактеристики       = МернаяХарактеристика.Ключ;
	ЗаголовокМернойХарактеристики = МернаяХарактеристика.Значение;
	
	Если ДанныеСервиса[ИмяМернойХарактеристики].Свойство("ЧислительКратности") Тогда
		ЗначениеМернойХарактеристики = ДанныеСервиса[ИмяМернойХарактеристики].ЧислительКратности;
	ИначеЕсли ДанныеСервиса[ИмяМернойХарактеристики].Свойство("Количество") Тогда
		ЗначениеМернойХарактеристики = ДанныеСервиса[ИмяМернойХарактеристики].Количество;
	Иначе
		ЗначениеМернойХарактеристики = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеМернойХарактеристики) Тогда
		
		НаименованиеЕдиницыИзмерения = ДанныеСервиса[ИмяМернойХарактеристики].ЕдиницаИзмерения.Наименование;
		
		ПредставлениеМернойХарактеристики = СтрШаблон("%1: %2 %3", ЗаголовокМернойХарактеристики,
			Строка(ЗначениеМернойХарактеристики), НаименованиеЕдиницыИзмерения);
		
	КонецЕсли;
	
	Возврат ПредставлениеМернойХарактеристики;
	
КонецФункции

Процедура ПредставлениеДополнительныхРеквизитовНоменклатуры(СодержимоеОписания, Знач ДанныеСервиса)
	
	Для каждого ДополнительныйРеквизит Из ДанныеСервиса.ДополнительныеРеквизиты Цикл
		Если ЗначениеЗаполнено(ДополнительныйРеквизит.СтроковоеЗначение) Тогда
			СодержимоеОписания.Добавить(СтрШаблон("%1: %2", 
				ДополнительныйРеквизит.Наименование, ДополнительныйРеквизит.СтроковоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЭтоУслуга = Ложь)
	
	Перем ОКЕИ, ЕдиницаИзмерения;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", ОКЕИ) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(ОКЕИ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) И Не ЭтоУслуга Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Процедура ДобавитьВРеквизитыЗначенияКлассификаторов(РеквизитыНоменклатуры, ДанныеСервиса)
	
	Для каждого Элемент Из ДанныеСервиса.Классификаторы Цикл
		Если ВРег(Элемент.Наименование) = "TNVED" Тогда
			РеквизитыНоменклатуры.Вставить("КодТНВЭД",
				НайтиСоздатьЭлементКлассификатораТНВЭД(Элемент.Идентификатор));
		ИначеЕсли ВРег(Элемент.Наименование) = "OKPD2" Тогда
			РеквизитыНоменклатуры.Вставить("КодОКПД2",
				Справочники.КлассификаторОКПД2.НайтиСоздатьПоКоду(Элемент.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьЭлементКлассификатораТНВЭД(КодКлассификатора)
	
	Результат = Справочники.КлассификаторТНВЭД.НайтиПоКоду(КодКлассификатора);
	
	Если Результат.Пустая() Тогда
		НовыйЭлемент = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
		НовыйЭлемент.Код = КодКлассификатора;
		ТаблицаКлассификатораТНВЭД = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
		СтрокаТНВЭД = ТаблицаКлассификатораТНВЭД.Найти(КодКлассификатора, "Код");
		Если СтрокаТНВЭД <> Неопределено Тогда
			НовыйЭлемент.Наименование = СтрокаТНВЭД.Наименование;
			НовыйЭлемент.НаименованиеПолное = СтрокаТНВЭД.Наименование;
			НовыйЭлемент.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаТНВЭД.ЕдиницаИзмерения);
		КонецЕсли;
		НовыйЭлемент.Записать();
		Результат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура УстановитьИсключительнуюБлокировкуПоСсылке(Ссылка)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
		
КонецПроцедуры

Функция РеквизитыНоменклатурыЗаполняемыеПоДаннымСервиса(ВариантЗаполнения = "")
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("Артикул");
	РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения");
	РеквизитыНоменклатуры.Вставить("ВидСтавкиНДС");
	РеквизитыНоменклатуры.Вставить("Описание");
	РеквизитыНоменклатуры.Вставить("НаименованиеПолное");
	РеквизитыНоменклатуры.Вставить("КодТНВЭД");
	РеквизитыНоменклатуры.Вставить("КодОКПД2");
	РеквизитыНоменклатуры.Вставить("Производитель");
	РеквизитыНоменклатуры.Вставить("ПродукцияМаркируемаяДляГИСМ");
	РеквизитыНоменклатуры.Вставить("Услуга");
	
	Если Не ПустаяСтрока(ВариантЗаполнения) Тогда
		Для каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
			МетаданныеРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты[РеквизитНоменклатуры.Ключ];
			ЗначениеЗаполнения = ?(ВариантЗаполнения = "Синоним", 
				МетаданныеРеквизита.Синоним, МетаданныеРеквизита.Тип.ПривестиЗначение());
			РеквизитыНоменклатуры.Вставить(РеквизитНоменклатуры.Ключ, ЗначениеЗаполнения);
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыНоменклатуры.Вставить("Наименование");
	
	Возврат РеквизитыНоменклатуры;
	
КонецФункции 

#КонецОбласти