#Область ПрограммныйИнтерфейс

// Добавление элементов информирования об отрицательных остатках на форму отчета.
// Добавление происходит если в манифесте отчета указан параметр "КонтрольОтрицательныхОстатков",
// см. функцию ПолучитьПараметрыИсполненияОтчета() в менеджере отчета.
//
// Для корректной работы необходимо добавить в форму отчета функции обработки команд
// Подключаемый_ОтрицательныеОстаткиСкрытьИнформацию и Подключаемый_ОтрицательныеОстаткиОбработкаНавигационнойСсылки 
// см. пример общая форма СправкаРасчет
//
// Тип добавляемого реквизита - ФорматированнаяСтрока
// Место добавления элемента - перед элементом Результат.
// Добавляемые элементы:
// 	ФонИнформацияОтрицательныеОстатки              - ГруппаФормы - Фон баннера информации
// 		ИнформацияОтрицательныеОстатки             - ПолеФормы   - Строка с информацией об отрицательных остатках
// 		ГруппаОтрицательныеОстаткиСкрытьИнформацию - ГруппаФормы - Группа, содержащая ссылку на команду скрывания баннера.
// 		ОтрицательныеОстаткиСкрытьИнформацию       - КнопкаФормы - Гиперссылка на команду скрывания баннера
//
// Параметры:
// Форма	 - Управляемая форма -  форма отчета
// 
Процедура СоздатьЭлементИнформированияОтрицательныеОстатки(Форма) Экспорт
	
	МенеджерОтчета = Отчеты[БухгалтерскиеОтчеты.ИмяОтчета(Форма)];
	
	Манифест = Неопределено;
	Попытка
		Манифест = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Манифест)
		Или Не Манифест.Свойство("КонтролироватьОтрицательныеОстатки") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Позиция = Элементы.Найти("Результат");
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементИнформация = Элементы.Найти(
		ИнформированиеОтрицательныеОстаткиКлиентСервер.ИмяПоляИнформацииОбОтрицательныхОстатках());
	Если Не ЭлементИнформация = Неопределено Тогда
		// На форме уже есть такой элемент, поэтому добавлять ничего не нужно.
		Возврат;
	КонецЕсли;
	
	ДобавитьБаннерИнформацииОбОтрицательныхОстатках(Форма, Позиция);
	
КонецПроцедуры

// Метод фонового задания расчета количества позиций с отрицательными остатками
// Проверка отрицательных остатков в учете на конец месяца на счетах с количественным учетом  
// номенклатуры и подсчет количества номенклатур, по которым обнаружен отрицательный остаток.
//
// Параметры:
//  Организация   - СправочникСсылка.Организация - организация, по которой проверяются остатки. Параметр обязателен.
//  Период        - Дата - Период, на который нужно проверить наличие остатков.
//  
// Возвращаемое значение:
//   Число -количество позиций отрицательных остатков.
Функция ПроверитьОтрицательныеОстаткиВФоне(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",                     Организация);
	
	СчетаЗапасов = СчетаЗапасов();
	Запрос.УстановитьПараметр("СчетаУчетаСкладИНоменклатура",    СчетаЗапасов.СчетаУчетаСкладИНоменклатура);
	Запрос.УстановитьПараметр("СчетаУчетаНоменклатураБезСклада", СчетаЗапасов.СчетаУчетаНоменклатураБезСклада);
	Запрос.УстановитьПараметр("Период",                          Новый Граница(КонецДня(Период), ВидГраницы.Включая));
	
	СубконтоНоменклатураСклад = Новый Массив;
	СубконтоНоменклатураСклад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	СубконтоНоменклатураСклад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	СубконтоНоменклатура = Новый Массив;
	СубконтоНоменклатура.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос.УстановитьПараметр("СубконтоНоменклатураСклад",       СубконтоНоменклатураСклад);
	Запрос.УстановитьПараметр("СубконтоНоменклатура",            СубконтоНоменклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаНоменклатураБезСклада), &СубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Склады), ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
	|	ХозрасчетныйОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаСкладИНоменклатура), &СубконтоНоменклатураСклад, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтрицательныеОстатки.Номенклатура), 0) КАК КоличествоПозиций
	|ИЗ
	|	ОтрицательныеОстатки КАК ОтрицательныеОстатки
	|ГДЕ
	|	ОтрицательныеОстатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	КоличествоПозиций = Выборка.КоличествоПозиций;
	
	Возврат КоличествоПозиций;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подготовка счетов учета номенклатуры для проверки отрицательных остатков.
// Для целей проверки берем все счета, где ведется количественный учет остатков номенклатуры.
// 
// Возвращаемое значение:
// СтруктураСчетов  - Структура из двух массивов
// 	*СчетаУчетаСкладИНоменклатура    - Массив - Счета учета с видами субконто Номенклатура и склад
//  *СчетаУчетаНоменклатураБезСклада - Массив - Счета учета с видом субконто Номенклатура
Функция СчетаЗапасов()

	СтруктураСчетов = Новый Структура;
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Новый Массив);
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ ВидыСубконтоНоменклатура
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ХозрасчетныйВидыСубконто.Ссылка.Количественный
	|	И ХозрасчетныйВидыСубконто.Количественный
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВидыСубконтоНоменклатураСклады
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыСубконтоНоменклатура.Счет КАК Счет
	|			ИЗ
	|				ВидыСубконтоНоменклатура КАК ВидыСубконтоНоменклатура)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|	И ХозрасчетныйВидыСубконто.Количественный
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконтоНоменклатураСклады.Счет КАК Счет
	|ИЗ
	|	ВидыСубконтоНоменклатураСклады КАК ВидыСубконтоНоменклатураСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыСубконтоНоменклатура.Счет КАК Счет
	|			ИЗ
	|				ВидыСубконтоНоменклатура КАК ВидыСубконтоНоменклатура)
	|	И НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					ВидыСубконтоНоменклатураСклады.Счет КАК Счет
	|				ИЗ
	|					ВидыСубконтоНоменклатураСклады КАК ВидыСубконтоНоменклатураСклады)";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураСчетов.СчетаУчетаСкладИНоменклатура    = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	СтруктураСчетов.СчетаУчетаНоменклатураБезСклада = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат СтруктураСчетов;
	
КонецФункции

Процедура ДобавитьБаннерИнформацииОбОтрицательныхОстатках(Форма, Позиция)
	
	Элементы = Форма.Элементы;
	
	ИмяПоляИнформации = ИнформированиеОтрицательныеОстаткиКлиентСервер.ИмяПоляИнформацииОбОтрицательныхОстатках();
	// ФОН БАННЕРА
	ФонЭлементаИнформация = Элементы.Вставить(
		ИнформированиеОтрицательныеОстаткиКлиентСервер.ИмяГруппыБаннера(),
		Тип("ГруппаФормы"),
		Позиция.Родитель,
		Позиция);
		
	ФонЭлементаИнформация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ФонЭлементаИнформация.Отображение              = ОтображениеОбычнойГруппы.Нет;
	ФонЭлементаИнформация.ОтображатьЗаголовок      = Ложь;
	ФонЭлементаИнформация.ЦветФона                 = ЦветаСтиля.ЦветФонаНекорректногоКонтрагента; // Розовый, как у фона актуализации.
	ФонЭлементаИнформация.РастягиватьПоГоризонтали = Истина;
	ФонЭлементаИнформация.Видимость                = Ложь;
	
	ЭлементИнформация = Элементы.Добавить(
		ИмяПоляИнформации,
		Тип("ПолеФормы"),
		ФонЭлементаИнформация);
	
	ЭлементИнформация.ПутьКДанным              = ИмяПоляИнформации;
	ЭлементИнформация.Вид                      = ВидПоляФормы.ПолеНадписи;
	ЭлементИнформация.ОтображениеПодсказки     = ОтображениеПодсказки.Нет;
	ЭлементИнформация.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИнформация.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементИнформация.РастягиватьПоГоризонтали = Истина;
	ЭлементИнформация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОтрицательныеОстаткиОбработкаНавигационнойСсылки");
	
	// КОМАНДА СКРЫТИЯ БАННЕРА
	ИмяКомандыСкрытьИнформацию = ИмяПоляИнформации + "_СкрытьИнформацию";
	
	// Добавим команду скрытия в растягивающуюся группу, для того чтобы команда прижалась к правому краю окна	
	ЭлементГруппаСкрыть = Элементы.Добавить(
		ИмяПоляИнформации + "_ГруппаСкрытьИнформацию",
		Тип("ГруппаФормы"),
		ФонЭлементаИнформация);
	
	ЭлементГруппаСкрыть.Вид                                = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппаСкрыть.РастягиватьПоГоризонтали           = Истина;
	ЭлементГруппаСкрыть.РастягиватьПоВертикали             = Ложь;
	ЭлементГруппаСкрыть.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
	ЭлементГруппаСкрыть.Отображение                        = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппаСкрыть.ОтображатьЗаголовок                = Ложь;
	
	КомандаСкрыть          = Форма.Команды.Добавить(ИмяКомандыСкрытьИнформацию);
	КомандаСкрыть.Действие = "Подключаемый_ОтрицательныеОстаткиСкрытьИнформацию";
	
	ЭлементСкрыть = Элементы.Добавить(
		ИмяКомандыСкрытьИнформацию,
		Тип("КнопкаФормы"),
		ЭлементГруппаСкрыть);
		
	НаименованиеЭлементаСкрыть           = НСтр("ru = 'Скрыть'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЭлементСкрыть.ИмяКоманды             = ИмяКомандыСкрытьИнформацию;
	ЭлементСкрыть.Вид                    = ВидКнопкиФормы.Гиперссылка;
	ЭлементСкрыть.Заголовок              = НаименованиеЭлементаСкрыть;
	ЭлементСкрыть.ОтображениеПодсказки   = ОтображениеПодсказки.Нет;
	ЭлементСкрыть.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

#КонецОбласти
