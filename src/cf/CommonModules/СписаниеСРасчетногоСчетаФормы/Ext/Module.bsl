////////////////////////////////////////////////////////////////////////////////
// СписаниеСРасчетногоСчетаФормы: серверные процедуры и функции, 
// вызываемые из форм документа "Списание с расчетного счета".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СчетаБанка(Объект) Экспорт
	
	СчетаОтбора = Новый Массив;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВЦифровыхРублях(Объект.ВидОперации) Тогда 
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль);
	КонецЕсли;
	
	ОтбиратьПоВалюте = Ложь;
	ОбразецСчета     = Неопределено;
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ОтбиратьПоВалюте = Истина;
		ОбразецСчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Иначе
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации)
			И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация) Тогда
			
			ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
			Если ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			Иначе
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
			КонецЕсли;
		Иначе
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		КонецЕсли;
		
		ОтбиратьПоВалюте = Ложь;
		Образец          = Неопределено;
	КонецЕсли;
	
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ОбразецСчета);
	
	Возврат СчетаБанка;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Форма.Объект, Форма);
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Форма.РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчеты в у.е. или в валюте, пересчитаем суммы взаиморасчетов на дату документа
		Если (Форма.ЕстьРасчетыВУсловныхЕдиницах Или Форма.ОплатаВВалюте)
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов(Форма);
		КонецЕсли;
	КонецЕсли;
	
	БанкИКассаФормы.ПриСозданииНаСервереВРежимеИнтеграцииАУСН(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.СвойстваПлатежа = Неопределено;
	ИнициализироватьСвойстваПлатежа(Форма);
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьУсловноеОформление(Форма);
	
	УправлениеЭлементамиВалютногоКонтроля(Форма);
	
	УправлениеЭлементамиВалютногоКонтроля(Форма);

КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Форма.ПодготовитьФормуНаСервере();
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
		Объект.Организация,
		Объект.СчетОрганизации,
		Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации,
		Отказ,
		ПараметрыЗаписи);
		
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	УстановитьСостояниеДокумента(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
	КонецЕсли;
	
	Если РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупреждениеДляДокумента(ТекущийОбъект.Ссылка) Тогда
		БанкИКассаФормы.УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(Форма, ТекущийОбъект.Ссылка);
		ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииСтатусаПредупрежденияЗагрузкиВыписки", Истина);
	КонецЕсли;
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(
			ТекущийОбъект.РасшифровкаПлатежа, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ОтобразитьПлатежноеПоручение(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога) 
		И Форма.НалогЗаОбособленноеПодразделение 
		И НЕ ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Регистрация в ФНС'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, , "РегистрацияВНалоговомОргане", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	УстановитьСостояниеДокумента(Форма);
	
	// Заполнение реквизитов формы
	
	Форма.ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Форма.ТекущаяДатаДокумента           = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Форма.ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный
		ИЛИ ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;  
		
	Форма.ЦифровыеДеньги = ЭтоЦифровыеДеньги(Объект);
	Форма.ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма);
	
	УстановитьКурсДокумента(Форма);
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	ОтобразитьПлатежноеПоручение(Форма, Объект);
	
	Форма.ПодтвержденоВыпискойБанка = НЕ Объект.НеПодтвержденоВыпискойБанка;
	
	Если НЕ (Форма.Параметры.Ключ.Пустая() И ПустаяСтрока(Объект.НазначениеПлатежа)) Тогда
		Форма.СгенерированноеНазначенияПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект,, Истина);
	КонецЕсли;
	
	Форма.НалоговыйПериодСтрока = Объект.НалоговыйПериод;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ЗначениеЗаполнено(Объект.Налог) Тогда
			Форма.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		КонецЕсли;
		
		ЗначениеПериодаУплаты = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.НалоговыйПериод");
		
		Если Форма.Параметры.Ключ.Пустая() Тогда
			ЗначениеПериодаУплаты = ?(ЗначениеЗаполнено(ЗначениеПериодаУплаты), ЗначениеПериодаУплаты, НачалоМесяца(Объект.Дата));
		КонецЕсли;
		
		Форма.НалоговыйПериодСтрока = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(
			ЗначениеПериодаУплаты, Форма.ВидНалога);
		
		Форма.ЭтоУплатаНДФЛ = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
		Если Форма.ЭтоУплатаНДФЛ 
			И БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Тогда
			Форма.НалогЗаОбособленноеПодразделение = ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.НалогУплачиваетсяОтдельно = ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(Объект.Организация,
		Объект.Дата,
		Объект.Налог,
		Объект.Контрагент);
	
	БанкИКассаФормы.ПодготовитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Форма.СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Объект.РасшифровкаПлатежа[0], "СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если Не БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма)
		И Форма.ПлательщикНПД Тогда
		
		Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
		
	КонецЕсли;
	
	БанкИКассаФормы.ОпределитьКонтрагентЮрФизЛицо(Форма);
	УстановитьОграничениеТипаКонтрагента(Форма);
	
	БанкИКассаФормы.ПоказатьБаннерПредупрежденийПриЗагрузкеВыписки(Форма);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(Форма);
	
	// Управление внешним видом формы
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	
	БанкИКассаФормы.УстановитьПараметрыИнтеграцииАУСН(Форма);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.ВидОперации, Объект.Контрагент, Объект.ПлатежнаяВедомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
		УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	ИначеЕсли форма.ПрименяетсяАУСН И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
КонецПроцедуры

Процедура РеестрВыплатСамозанятымПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.РеестрВыплатСамозанятым) Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым Тогда
			Объект.СуммаДокумента = СуммаПлатежаПоРееструВыплатыСамозанятым(Объект.РеестрВыплатСамозанятым, Объект.Ссылка);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
			Объект.СуммаДокумента = СуммаПлатежаСамозанятомуПоРееструВыплатыСамозанятым(Объект.РеестрВыплатСамозанятым,
				Объект.Контрагент, 
				Объект.СчетКонтрагента,
				Объект.Ссылка);
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
	УстановитьСтатусЗагрузкиЧеков(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	СформироватьНазначениеПлатежаСервер(Форма);
	
КонецПроцедуры

Процедура ВидОперацииПриИзмененииСервер(Форма) Экспорт
	
	ВидОперацииОбработатьИзменение(Форма, Новый Массив);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Или Форма.ПрименяетсяАУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ДатаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	УстановитьКурсДокумента(Форма);
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	ФормаДокументаОднострочная = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	Если ФормаДокументаОднострочная
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
		И Объект.РасшифровкаПлатежа.Количество() < 2 Тогда
		// Синхронизируем данные расшифровки платежа с данными из реквизитов формы.
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(Форма);
	КонецЕсли;
	
	Форма.НалогУплачиваетсяОтдельно = ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(Объект.Организация,
		Объект.Дата,
		Объект.Налог,
		Объект.Контрагент);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	
	ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
	Если ФормаДокументаОднострочная
		И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		// Обновим данные реквизитов первой строки на форме.
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
		Форма, Объект.РасшифровкаПлатежа[0],, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	
	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	
	Форма.НалогУплачиваетсяОтдельно = ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(Форма.Объект.Организация,
		Форма.Объект.Дата,
		Форма.Объект.Налог,
		Форма.Объект.Контрагент);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Или Форма.ПрименяетсяАУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура НалогоплательщикПриИзмененииСервер(Форма) Экспорт
	
	НалогоплательщикОбработатьИзменение(Форма, Новый Массив);
	
	Если Форма.ПрименениеУСН Или Форма.ПрименяетсяАУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы(Форма);
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	Форма.ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	
	ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
		Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	ИначеЕсли УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации) Тогда
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	ПричиныИзменения.Добавить("СчетОрганизации");
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента, ПодразделениеОрганизации");
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	
	УстановитьПараметрыБанковскихСчетов = Ложь;
	
	Если ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
		
		УстановитьПараметрыБанковскихСчетов = Истина;
		
	КонецЕсли;
	
	Если НовыеПараметры.ЦифровыеДеньги <> ПараметрыОбъекта.ЦифровыеДеньги Тогда
		
		УстановитьПараметрыБанковскихСчетов = Истина;
		
		СвойстваФормыКЗаполнению = "ЦифровыеДеньги";
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, СвойстваФормыКЗаполнению);
		
	КонецЕсли;
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
		НовыеПараметры = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	КонецЕсли;
	
	Форма.НалогУплачиваетсяОтдельно = ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(Объект.Организация,
		Объект.Дата,
		Объект.Налог,
		Объект.Контрагент);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьРасшифровкуНДФЛ(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Организация", ПричиныИзменения);
	
	ЗаполнитьСчетаУчета(Форма, "Организация", ПричиныИзменения);
	
	Если УстановитьПараметрыБанковскихСчетов Тогда
		
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		
	КонецЕсли;
	
	БанкИКассаФормы.УстановитьПараметрыИнтеграцииАУСН(Форма);
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
		И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		// Если строка платежа одна, то сумма документа совпадает с суммой платежа в первой строке.
		Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) 
			И НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.РасшифровкаПлатежаСуммаПлатежаПриИзменении(
			Форма, Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор());
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтоги(Форма);
	КонецЕсли;
	
	Если Форма.ПрименениеУСН Или Форма.ПрименяетсяАУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
	   И Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		
		Если Объект.НалоговыйАгентНДС.Количество() = 1 Тогда
			СтрокаРасшифровки       = Объект.НалоговыйАгентНДС[0];
			СтрокаРасшифровки.Сумма = Объект.СуммаДокумента;
		Иначе
			Объект.НалоговыйАгентНДС.Очистить();
			ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма, Истина);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура СчетБанкПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетБанк");
	
	ОплатаВВалютеПараметр = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	ЦифровыеДеньгиПараметр = БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаЦифровыхДенег(Объект.СчетБанк);
	
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалютеПараметр, ЦифровыеДеньгиПараметр);
	
	ЗаполнитьСчетаУчета(Форма, "СчетБанк", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетКонтрагентаПриИзмененииСервер(Форма) Экспорт
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКонтрагента");
	ЗаполнитьСчетаУчета(Форма, "СчетКонтрагента", ПричиныИзменения);
	
	Объект = Форма.Объект;
	
	Форма.ЦифровыеДеньги = ЭтоЦифровыеДеньги(Объект);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НадписьПлатежноеПоручение") Тогда
	
		Форма.НадписьПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.ПредставлениеПлатежногоПоручения(
			Форма.ПлатежноеПоручение, Объект.ВидОперации, Объект.Проведен, Форма.ЦифровыеДеньги);

	КонецЕсли;
		
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "СчетКонтрагента", ПричиныИзменения);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетОрганизации");
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	Объект.ПодразделениеОрганизации = НовыеПараметры.ПодразделениеОрганизации;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	
	УстановитьПараметрыБанковскихСчетов = Ложь;
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		
		УстановитьПараметрыБанковскихСчетов = Истина;

		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		СвойстваФормыКЗаполнению  = "КурсДокумента, КратностьДокумента";
		
		Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
			СвойстваФормыКЗаполнению = СвойстваФормыКЗаполнению + ", ОплатаВВалюте";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, СвойстваФормыКЗаполнению);
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента, СчетКонтрагента");
		
		ИзменитьПараметрыВыбораСчетаПеревода(Форма);
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа(Форма);
	КонецЕсли;
	
	Если НовыеПараметры.ЦифровыеДеньги <> ПараметрыОбъекта.ЦифровыеДеньги Тогда
		
		УстановитьПараметрыБанковскихСчетов = Истина;

		СвойстваФормыКЗаполнению = "ЦифровыеДеньги";
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, СвойстваФормыКЗаполнению);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НадписьПлатежноеПоручение") Тогда
		
			Форма.НадписьПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.ПредставлениеПлатежногоПоручения(
				Форма.ПлатежноеПоручение, Объект.ВидОперации, Объект.Проведен, Форма.ЦифровыеДеньги);

		КонецЕсли;
			
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
		
	КонецЕсли;

	ЗаполнитьСчетаУчета(Форма, "СчетОрганизации", ПричиныИзменения);
	
	Если УстановитьПараметрыБанковскихСчетов = Ложь Тогда
		
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		
	КонецЕсли;
	
	БанкИКассаФормы.УстановитьПараметрыИнтеграцииАУСН(Форма);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	УправлениеЭлементамиВалютногоКонтроля(Форма);
	
КонецПроцедуры

Процедура СчетУчетаПрочиеПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СформироватьНазначениеПлатежаСервер(Форма, ТолькоСумму = Ложь, ПричинаИзменения = "", ПричиныИзменения = Неопределено) Экспорт
	
	Если ПричиныИзменения <> Неопределено Тогда
		// процедура может потребовать обращений к базе данных, поэтому минимизируем ее вызовы -
		// вызовем только в начале стека вызовов
		// Воспользуемся механикой из СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета().
		// Поэтому ПричиныИзменения нельзя расширять больше, чем нужно для заполнения счетов.
		МожноВыполнитьПозже = Истина;
		ПричиныЗаменыНазначенияПлатежа = ",ВидОперации,Организация,Контрагент,СчетКонтрагента,ДоговорКонтрагента,Налог,";
		Для ИндексОбработчикаИзменения = 0 По ПричиныИзменения.ВГраница() Цикл
			// дойдем до первой причины в стеке вызовов, которая может привести к замене назначения платежа;
			// если обработчик этой причины не вызван уже сейчас,
			// то он будет вызываться позже и заполнение назначения можно отложить до него.
			ПричинаИзмененияИзСтека = ПричиныИзменения[ИндексОбработчикаИзменения];
			Если СтрНайти(ПричиныЗаменыНазначенияПлатежа, "," + ПричинаИзмененияИзСтека + ",") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ПричинаИзменения = ПричинаИзмененияИзСтека Тогда
				МожноВыполнитьПозже = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если МожноВыполнитьПозже Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = Форма.СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Форма);
		Форма.СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	ИначеЕсли ТолькоСумму И Объект.НазначениеПлатежа <> Форма.СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраницНаСервере(Форма) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		УстановитьВидимостьГрупп(Форма);
	Иначе
		УстановитьВидимостьСтраниц(Форма);
	КонецЕсли;
	
	УстановитьВидимостьКнопкиПечатиЧека(Форма);
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопкиПечатиЧека(Форма)
	
	Элементы = Форма.Элементы;
	КомандаПечатьЧека = Элементы.Найти("ФормаНапечататьЧек");
	Если КомандаПечатьЧека <> Неопределено Тогда
		БаннерПечатьЧека = Элементы.Найти("ПредупреждениеОПечатиЧека");
		БаннерПечатьЧекаАктивен = ?(БаннерПечатьЧека = Неопределено, Ложь, БаннерПечатьЧека.Видимость);
		
		КомандаПечатьЧека.Видимость = НЕ БаннерПечатьЧекаАктивен 
			И МенеджерОборудованияБПВызовСервера.ИспользоватьПодключаемоеОборудование()
			И Не Форма.ПлательщикНПД;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьГрупп(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементГруппаАналитика = Элементы.Найти("ГруппаАналитика");
	Если ЭлементГруппаАналитика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаАналитика.Видимость = ВидимостьГруппыСтраниц(Объект.ВидОперации);
	Если НЕ ЭлементГруппаАналитика.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ГруппаПлатежПрочие",                                Элементы.ГруппаПлатежПрочие);
	СтруктураСтраниц.Вставить("ГруппаПереводНаДругойСчет",                         Элементы.ГруппаПереводНаДругойСчет);
	СтруктураСтраниц.Вставить("ГруппаСтатьяДвиженияДенежныхСредств",               Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	СтруктураСтраниц.Вставить("ГруппаПеречислениеЗарплаты",                        Элементы.ГруппаПеречислениеЗарплаты);
	СтруктураСтраниц.Вставить("ГруппаВыплатаДепонентов",                           Элементы.ГруппаВыплатаДепонентов);
	СтруктураСтраниц.Вставить("ГруппаСнятиеНаличных",                              Элементы.ГруппаСнятиеНаличных);
	СтруктураСтраниц.Вставить("ГруппаРасчетыСКонтрагентами",                       Элементы.ГруппаРасчетыСКонтрагентами);
	СтруктураСтраниц.Вставить("ГруппаБезЗакрывающихДокументов",                    Элементы.ГруппаБезЗакрывающихДокументов);
	СтруктураСтраниц.Вставить("ГруппаВыплатаДивидендов",                           Элементы.ГруппаВыплатаДивидендов);
	СтруктураСтраниц.Вставить("ГруппаВыплатаПоДоговоруПодряда",                    Элементы.ГруппаВыплатаПоДоговоруПодряда);
	СтруктураСтраниц.Вставить("ГруппаВыплатыСамозанятым",                          Элементы.ГруппаВыплатыСамозанятым);
	СтруктураСтраниц.Вставить("ГруппаПеречислениеПоИсполнительномуЛистуРаботника", Элементы.ГруппаПеречислениеПоИсполнительномуЛистуРаботника);
	
	ТекущаяСтраница = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ТекущаяСтраница = "ГруппаПлатежПрочие";
	ИначеЕсли УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации) Тогда
		ТекущаяСтраница = "ГруппаПереводНаДругойСчет";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаПеречислениеЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаПеречислениеЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаВыплатаДепонентов";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ТекущаяСтраница = "ГруппаСнятиеНаличных";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ТекущаяСтраница = "ГруппаВыплатаДивидендов";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
		ТекущаяСтраница = "ГруппаВыплатыСамозанятым";
	ИначеЕсли Объект.БезЗакрывающихДокументов Тогда
		ТекущаяСтраница = "ГруппаБезЗакрывающихДокументов";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
			Или (Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Не Форма.ВедетсяУчетРасчетовПоЗарплатеСводно) Тогда
			ТекущаяСтраница = "ГруппаВыплатаПоДоговоруПодряда";
		Иначе
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПоИсполнительномуЛистуРаботника Тогда
		ТекущаяСтраница = "ГруппаПеречислениеПоИсполнительномуЛистуРаботника";
	Иначе
		ТекущаяСтраница = "ГруппаРасчетыСКонтрагентами";
		// Установим видимость отдельных полей.
		ЭтоКредитыИлиПрочиеРасчеты = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
		
		ЭтоВозвратКредитаИлиЗайма = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
		
		Если ЭтоКредитыИлиПрочиеРасчеты Тогда
			// При прочих расчетах и расчетах по кредитам и займам для УСН (доходы - расходы) могут указываться расходы, принимаемые в УСН.
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Истина;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Ложь;
		ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			// Для видов операций "Оплата поставщику" и "Возврат покупателю" возможно указание документа расчетов.
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Ложь;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Истина;
		Иначе
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Ложь;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Ложь;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Ложь;
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = НЕ ЭтоКредитыИлиПрочиеРасчеты;
		Элементы.РасшифровкаПлатежаСуммаНДС.Видимость  = НЕ ЭтоКредитыИлиПрочиеРасчеты;
		Элементы.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам.Видимость = ЭтоВозвратКредитаИлиЗайма;
		
		Элементы.ГруппаРасчетыВУЕ.Видимость = Не ЭтоКредитыИлиПрочиеРасчеты
			И Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураСтраниц Цикл
		Если КлючИЗначение.Ключ <> ТекущаяСтраница Тогда
			Если КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Управление видимостью полей, связанных с отражением компенсации задержки выплаты зарплаты.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Истина;
			Элементы.ГруппаВыплатаЗарплатыОперации.ОтображатьЗаголовок = Истина;
		Иначе
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Ложь;
			Элементы.ГруппаВыплатаЗарплатыОперации.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраниц(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементГруппаСтраницы = Элементы.Найти("ГруппаСтраницы");
	Если ЭлементГруппаСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаСтраницы.Видимость = ВидимостьГруппыСтраниц(Объект.ВидОперации);
	
	Если НЕ ЭлементГруппаСтраницы.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	МассивСтраниц.Добавить(Элементы.ГруппаПереводНаДругойСчет);
	МассивСтраниц.Добавить(Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДепонентов);
	МассивСтраниц.Добавить(Элементы.ГруппаСнятиеНаличных);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДивидендов);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаПоДоговоруПодряда);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатыСамозанятым);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеПоИсполнительномуЛистуРаботника);
	
	ТекущаяСтраница = Неопределено;
	// т.к. Расшифровка платежа теперь есть у многих видов операций, сначала отработаем формы-исключения.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит Тогда
		ТекущаяСтраница = Элементы.ГруппаПереводНаДругойСчет;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентов;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ТекущаяСтраница = Элементы.ГруппаСнятиеНаличных;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатаДивидендов;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
			Или (Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Не Форма.ВедетсяУчетРасчетовПоЗарплатеСводно) Тогда
			ТекущаяСтраница = Элементы.ГруппаВыплатаПоДоговоруПодряда;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатыСамозанятым;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПоИсполнительномуЛистуРаботника Тогда
		ТекущаяСтраница = Элементы.ГруппаПеречислениеПоИсполнительномуЛистуРаботника;
	Иначе
		// а затем тех, кто использует основную форму Расшифровки платежа
		РасшифровкаНедоступна = Объект.БезЗакрывающихДокументов 
			И НЕ Форма.ОтражениеДоходаВидимость 
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
		ТекущаяСтраница = ?(РасшифровкаНедоступна, Неопределено, Элементы.ГруппаРасчетыСКонтрагентами);
	КонецЕсли;
	
	// Управление видимостью полей, связанных с отражением компенсации задержки выплаты зарплаты.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Истина;
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Ложь;
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			ЭлементГруппаСтраницы.ТекущаяСтраница = ТекСтраница;
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКурсДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Форма.КурсДокумента      = СтруктураКурса.Курс;
		Форма.КратностьДокумента = СтруктураКурса.Кратность;
	Иначе
		Форма.КурсДокумента      = 1;
		Форма.КратностьДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента = Элементы.Найти("РасшифровкаПлатежаДоговорКонтрагента");
	Если ЭлементРасшифровкаПлатежаДоговорКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = СписаниеСРасчетногоСчетаФормыВызовСервера.ВидыДоговоровДокумента(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте ИЛИ НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента = Элементы.Найти("РасшифровкаПлатежаДоговорКонтрагента");
	Если ЭлементРасшифровкаПлатежаДоговорКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ЗначениеСвязиПоВладельцу = "Объект.Налогоплательщик";
	Иначе
		ЗначениеСвязиПоВладельцу = "Объект.Контрагент";
	КонецЕсли;
	НовыеСвязи = Новый Массив();
	Для каждого СвязьПараметров Из ЭлементРасшифровкаПлатежаДоговорКонтрагента.СвязиПараметровВыбора Цикл
		Если СвязьПараметров.Имя = "Отбор.Владелец" 
			И СвязьПараметров.ПутьКДанным <> ЗначениеСвязиПоВладельцу Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", ЗначениеСвязиПоВладельцу, 
				РежимИзмененияСвязанногоЗначения.Очищать);
			НовыеСвязи.Добавить(НоваяСвязь);
		Иначе
			НовыеСвязи.Добавить(СвязьПараметров);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ЭтоФормаРасшифровкиПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма);
	ЭтоФормаДокументаИнтеграцияСБанком = БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Форма.ПлательщикНДС       = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	Форма.ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	Форма.ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПлательщикЕНП       = УчетнаяПолитика.ПлательщикЕНП(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяАУСН     = УчетнаяПолитика.ПрименяетсяАУСН(Объект.Организация, Объект.Дата);
	
	Форма.ПрименяетсяОсобыйНалоговыйРежим = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата)
		Или УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	
	Форма.ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Если Не ЭтоФормаРасшифровкиПлатежа Тогда
		Форма.ИспользоватьНачислениеЗарплаты        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
		Форма.УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
		Форма.ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
		Форма.ИспользоватьФорматОбменаЗУП25         = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
			Новый Структура("Организация", Объект.Организация));
		Форма.ИспользоватьФорматОбменаЗУП30         = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	КонецЕсли;
	
	Если Не ЭтоФормаРасшифровкиПлатежа И Не ЭтоФормаДокументаИнтеграцияСБанком Тогда
		Форма.ПлательщикНПД = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, Объект.Дата);
		Форма.ДоступнаИнтеграцияСПлатформойСамозанятые = ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
	КонецЕсли;
	
	Если Не ЭтоФормаДокументаИнтеграцияСБанком Тогда
		Форма.ПрименяетсяАУСНДоходы = УчетнаяПолитика.ПрименяетсяАУСНДоходы(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникПриИзмененииНаСервере(Форма) Экспорт
	
	ПриИзмененииРеквизитовОплатыИсполнительногоЛиста(Форма);
	
КонецПроцедуры

Процедура ИсполнительныйЛистПриИзмененииНаСервере(Форма) Экспорт
	
	ПриИзмененииРеквизитовОплатыИсполнительногоЛиста(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитовОплатыИсполнительногоЛиста(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Сотрудник) И ЗначениеЗаполнено(Объект.ИсполнительныйЛист) Тогда
		РеквизитыПолученияДанных = УчетЗарплаты.СтруктураРеквизитовПолученияДанныхПоИСполнительномуДокументу();
		ЗаполнитьЗначенияСвойств(РеквизитыПолученияДанных, Объект);
		Если Объект.СуммаДокумента = 0 Тогда
			Объект.СуммаДокумента = УчетЗарплаты.УдержаноПоИсполнительномуДокументу(РеквизитыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте, ЦифровыеДеньги)
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте 
		ИЛИ ЦифровыеДеньги <> ПараметрыОбъекта.ЦифровыеДеньги Тогда
		
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		СчетОрганизацииПредыдущий = ПараметрыОбъекта.СчетОрганизации;
		ЦифровыеДеньгиПредыдущий = ПараметрыОбъекта.ЦифровыеДеньги;
		
		НовыйСчетОрганизации      = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, Не ОплатаВВалюте,,,,
				ЦифровыеДеньги);
		КонецЕсли;
		
		// необходимо временно поменять этот параметр, чтобы получить договор по изменившейся валюте
		ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации",   НовыйСчетОрганизации);
		
		// восстановим значение параметров
		ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
		ПараметрыОбъекта.СчетОрганизации = СчетОрганизацииПредыдущий;
		ПараметрыОбъекта.ЦифровыеДеньги = ЦифровыеДеньгиПредыдущий;
		
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	НовыеПараметры.Вставить("ЦифровыеДеньги", ЦифровыеДеньги);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта)
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента, Истина);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте,,,,
			ПараметрыОбъекта.ЦифровыеДеньги);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента, ПодразделениеОрганизации, ЦифровыеДеньги", 
			ПараметрыОбъекта.ВалютаДокумента, Неопределено, Ложь);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств, ПодразделениеОрганизации, ЦифровойСчет");
	НоваяВалюта   = СвойстваСчета.ВалютаДенежныхСредств;
	НовыйЦифровыеДеньги = ?(СвойстваСчета.ЦифровойСчет = Неопределено, Ложь, СвойстваСчета.ЦифровойСчет);

	Если ПараметрыОбъекта.ОплатаВВалюте И ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура("ВалютаДокумента, ЦифровыеДеньги, ПодразделениеОрганизации",
			НоваяВалюта, НовыйЦифровыеДеньги, СвойстваСчета.ПодразделениеОрганизации);
	КонецЕсли;
	
	НоваяВалюта    = ?(НоваяВалюта = Неопределено, ПараметрыОбъекта.ВалютаРегламентированногоУчета, НоваяВалюта);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ОплатаВВалюте = НоваяВалюта <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ВалютаОбъекта = ПараметрыОбъекта.ВалютаДокумента;
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		КонецЕсли;
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		
		ПараметрыОбъекта.ВалютаДокумента = ВалютаОбъекта;
		
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПользовательУправляетСчетамиУчета Тогда
		НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("ПодразделениеОрганизации", СвойстваСчета.ПодразделениеОрганизации);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	НовыеПараметры.Вставить("ЦифровыеДеньги", НовыйЦифровыеДеньги);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("Ссылка",             ПараметрыОбъекта.Ссылка);
	НовыеПараметры.Вставить("ВидОперации",        ПараметрыОбъекта.ВидОперации);
	НовыеПараметры.Вставить("Контрагент",         ПараметрыОбъекта.Контрагент);
	НовыеПараметры.Вставить("ПлатежнаяВедомость", ПараметрыОбъекта.ПлатежнаяВедомость);
	НовыеПараметры.Вставить("СуммаДокумента",     СуммаВыплаченнойЗарплатыРаботнику(
		ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.ВидОперации, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость,
		УчетЗарплатыИКадровВоВнешнейПрограмме));
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция ВидимостьГруппыСтраниц(ВидОперации)
	
	Возврат ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
	
КонецФункции

Процедура ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалюте, ЦифровыеДеньги)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте, ЦифровыеДеньги);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		ПараметрыОбъекта.Вставить("ОплатаВВалюте", НовыеПараметры.ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, СчетКонтрагента, ПодразделениеОрганизации");
		
		СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения);
		
		ИзменитьПараметрыВыбораСчетаПеревода(Форма);
		
		УстановитьЗаголовкиКолонокУСН(Форма);
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		
		ЗаполнитьСчетаУчета(Форма, "ВалютаДокумента", ПричиныИзменения);
		
	КонецЕсли;
	
	Если НовыеПараметры.ЦифровыеДеньги <> ПараметрыОбъекта.ЦифровыеДеньги Тогда
		
		ПричиныИзменения.Добавить("ЦифровыеДеньги");
		
		ПараметрыОбъекта.Вставить("ЦифровыеДеньги", НовыеПараметры.ЦифровыеДеньги);
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, "ЦифровыеДеньги");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, СчетКонтрагента, ПодразделениеОрганизации");
		
		ЗаполнитьСчетаУчета(Форма, "ЦифровыеДеньги", ПричиныИзменения);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НадписьПлатежноеПоручение") Тогда
		
			Форма.НадписьПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.ПредставлениеПлатежногоПоручения(
				Форма.ПлатежноеПоручение, Объект.ВидОперации, Объект.Проведен, Форма.ЦифровыеДеньги);

		КонецЕсли;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
		
	КонецЕсли;

	// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
КонецПроцедуры

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		Объект.НачислениеДивидендов = "";
	КонецЕсли;
	
	БанкИКассаФормы.УстановитьКонтрагентаЮрФизЛицоПоУмолчанию(Форма);
	УстановитьОграничениеТипаКонтрагента(Форма);
	БанкИКассаФормы.ОпределитьКонтрагентЮрФизЛицо(Форма);
	
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации)
		ИЛИ Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ПараметрОплатаВВалюте = Ложь;
	Иначе
		ПараметрОплатаВВалюте = Форма.ОплатаВВалюте;
	КонецЕсли;
	
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВЦифровыхРублях(Объект.ВидОперации) Тогда
		ЦифровыеДеньгиПараметр = Ложь;
	Иначе
		ЦифровыеДеньгиПараметр = ЭтоЦифровыеДеньги(Объект);
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ПараметрОплатаВВалюте, ЦифровыеДеньгиПараметр);
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым 
		Или Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
		Объект.РеестрВыплатСамозанятым = Документы.ВыплатыСамозанятым.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		Объект.ПеречислениеНДФЛ.Очистить();
		Форма.ЭтоУплатаНДФЛ = Ложь;
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Объект.Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
	ИначеЕсли Не УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец") <> Объект.Контрагент Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента, Объект.Контрагент,
			Объект.ВалютаДокумента, Истина);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "ВидОперации", ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит
		И Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
		КонецЕсли;
		Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "ВидОперации", ПричиныИзменения);
	
	ОтобразитьПлатежноеПоручение(Форма, Объект)
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("Контрагент");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ФизЛицоВыплатаЗарплатыПриИзмененииСервер(Форма);
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьДепонированнымиСуммамиНаСервере(Форма);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах;
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Контрагент", ПричиныИзменения);
		
		ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
		Если ЕстьРасчетыВУсловныхЕдиницах <> Форма.ЕстьРасчетыВУсловныхЕдиницах
			И БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			УстановитьВидимостьГрупп(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику И Форма.ВестиУчетПоДоговорам Тогда
		
		Если ЗначениеЗаполнено(НовыеПараметры.ДоговорКонтрагента)
			ИЛИ Форма.ОплатаВВалюте Тогда
			Форма.ПредлагатьНовыйДоговор = Ложь;
		Иначе
			Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогоплательщикОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
	ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
	НовыеПараметры = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Контрагент", ПричиныИзменения);
	
	ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
	
КонецПроцедуры

Процедура ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация, СчетОрганизации", Объект.Организация, Объект.СчетОрганизации));
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаПеревода(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если УчетДенежныхСредствКлиентСервер.СписаниеСредствНаДругойСчет(Объект.ВидОперации) Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МассивПараметрыВыбора = Новый Массив;
	Если БанкИКассаФормыКлиентСервер.ВидимостьДоступностьКонтрагентаЮрФизЛицо(Форма) Тогда 
		Если Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо",
				ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
			МассивПараметрыВыбора.Добавить(НовыйПараметр);
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
		Иначе
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			Элементы.Контрагент.ПодсказкаВвода  = "";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
		МассивПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Самозанятый", Истина));
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	
КонецПроцедуры

Процедура УстановитьСтатусЗагрузкиЧеков(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтатусЗагрузки = Документы.ВыплатыСамозанятым.СтатусЗагрузкиЧеков(
		Объект.РеестрВыплатСамозанятым);
		
	Форма.ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ГиперссылкаЦвет;
	Если СтатусЗагрузки = Документы.ВыплатыСамозанятым.СтатусНеВсеЧекиЗагружены() Тогда
		Форма.ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		Форма.СтатусЗагрузкиЧеков = НСтр("ru='Не все чеки загружены'");
	ИначеЕсли СтатусЗагрузки = Документы.ВыплатыСамозанятым.СтатусЧекиНеПрикреплены() Тогда
		Форма.ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		Форма.СтатусЗагрузкиЧеков = НСтр("ru='Чеки не прикреплены'");
	ИначеЕсли СтатусЗагрузки = Документы.ВыплатыСамозанятым.СтатусРеестрВыплатОтменен() Тогда
		Форма.ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		Форма.СтатусЗагрузкиЧеков = НСтр("ru='Реестр выплат отменен'");
	ИначеЕсли СтатусЗагрузки = Документы.ВыплатыСамозанятым.СтатусЧекиЗагружены() Тогда
		Форма.СтатусЗагрузкиЧеков = НСтр("ru='Чеки загружены'");
	Иначе
		Форма.СтатусЗагрузкиЧеков = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрВыбораОплатаВВалюте = Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте);
	ПараметрВыбораЦифровыеДеньги = Новый ПараметрВыбора("Отбор.ЦифровойСчет", Форма.ЦифровыеДеньги);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(ПараметрВыбораОплатаВВалюте);
	
	МассивПараметровСчетКонтрагента = Новый Массив();
	МассивПараметровСчетКонтрагента.Добавить(ПараметрВыбораОплатаВВалюте);
	
	Если СчетБанкаВиден(Форма) Тогда
		
		Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВЦифровыхРублях(Объект.ВидОперации) Тогда
			НовыйМассивПараметров.Добавить(ПараметрВыбораЦифровыеДеньги);
		ИначеЕсли ЗначениеЗаполнено(Объект.СчетБанк) Тогда
			
			ОтборПоСчету = Новый Массив;
			ОтборПоСчету.Добавить(Объект.СчетБанк);
			ОтборПоСчету.Добавить(ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			
			ПараметрВыбораСчетБанк = Новый ПараметрВыбора("Отбор.СчетБанк", Новый ФиксированныйМассив(ОтборПоСчету));
			НовыйМассивПараметров.Добавить(ПараметрВыбораСчетБанк);
		КонецЕсли;
		
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		НовыйМассивПараметров = Новый Массив();
		МассивПараметровСчетКонтрагента = Новый Массив();
		
		Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
			НовыйМассивПараметров.Добавить(ПараметрВыбораОплатаВВалюте);
			МассивПараметровСчетКонтрагента.Добавить(ПараметрВыбораОплатаВВалюте);
		КонецЕсли;
		
		Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВЦифровыхРублях(Объект.ВидОперации) Тогда
			НовыйМассивПараметров.Добавить(ПараметрВыбораЦифровыеДеньги);
		КонецЕсли;
		
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
	МассивПараметровСчетКонтрагента.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента)); 
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит Тогда
		МассивПараметровСчетКонтрагента.Добавить(ПараметрВыбораЦифровыеДеньги);
	КонецЕсли;
	
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровСчетКонтрагента);
	
	Если Элементы.Найти("ВторойСчетОрганизации") <> Неопределено Тогда
		Элементы.ВторойСчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровСчетКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СчетаБанка = СчетаБанка(Форма.Объект);
	
	ЭлементСчетБанк = Элементы.Найти("СчетБанк");
	Если ЭлементСчетБанк <> Неопределено Тогда
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		ЭлементСчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
	ЭлементСчетУчетаРасчетовСКонтрагентомПеревод = Элементы.Найти("СчетУчетаРасчетовСКонтрагентомПеревод");
	Если ЭлементСчетУчетаРасчетовСКонтрагентомПеревод <> Неопределено Тогда
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		ЭлементСчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

Процедура ФизЛицоВыплатаЗарплатыПриИзмененииСервер(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	
КонецПроцедуры

Процедура ПерезаполнитьСтатьюДДС(Форма)
	
	Объект = Форма.Объект;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Возврат
	КонецЕсли;
	
	КонтекстОперации = Объект.ВидОперации;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалога(Объект.ВидНалоговогоОбязательства) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		Если УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(ВидНалога) Тогда
			КонтекстОперации = "НалогНаПрибыль";
		КонецЕсли;
	ИначеЕсли Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы // в большинстве случаев это услуги банка
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		КонтекстОперации = "КомиссияБанка";
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДляАннулированияЧекаНПД(НомерЧекаНПД) Экспорт
	
	НомерЧекаНПДЗаполнен = ЗначениеЗаполнено(НомерЧекаНПД);
	Если Не НомерЧекаНПДЗаполнен Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
			НСтр("ru = 'Номер чека, по которому ранее регистрировался доход'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерЧекаНПД", "Объект");
	КонецЕсли;
	
	Возврат НомерЧекаНПДЗаполнен;
	
КонецФункции

Процедура ОтобразитьПлатежноеПоручение(Форма, Объект)
	
	ЭлементГиперссылкаПлатежноеПоручение = Форма.Элементы.Найти("ГиперссылкаПлатежноеПоручение");
	Если ЭлементГиперссылкаПлатежноеПоручение <> Неопределено И ЭлементГиперссылкаПлатежноеПоручение.Видимость Тогда
		Форма.ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
			Объект.Ссылка, Объект.ДокументОснование, Объект.ВидОперации, Объект.Проведен, Форма.НадписьПлатежноеПоручение,
			Форма.ЦифровыеДеньги);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЦифровыеДеньги(Объект)
	
	ЭтоПереводНаЦифровойСчет = (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
		И (БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаЦифровыхДенег(Объект.СчетУчетаРасчетовСКонтрагентом)
			ИЛИ (ЗначениеЗаполнено(Объект.СчетКонтрагента) 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "ЦифровойСчет")));
		
	ЭтоЦифровыеДеньги = ЭтоПереводНаЦифровойСчет 
		ИЛИ	СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВЦифровыхРублях(Объект.ВидОперации)
			И (БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаЦифровыхДенег(Объект.СчетБанк)
				ИЛИ (ЗначениеЗаполнено(Объект.СчетОрганизации) 
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ЦифровойСчет")));
					
	Возврат ЭтоЦифровыеДеньги;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			
			Если Не СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
				РасшифровкаПлатежа = Неопределено;
				Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) > 0 Тогда
					РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
				Иначе
					РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
				КонецЕсли;
				
				Если РасшифровкаПлатежа.Количество() > 0 Тогда
					ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            РасшифровкаПлатежа[0].ДоговорКонтрагента);
					ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
					ПараметрыОбъекта.Вставить("СтавкаНДС",                     РасшифровкаПлатежа[0].СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
			
			Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
			И СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента] <> Неопределено Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиУСНВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма, РасшифровкаПлатежа = Неопределено)
	
	Если Не Форма.ОтражениеДоходаВидимость Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа = Неопределено Тогда
		Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) 
		И РасшифровкаПлатежа.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияДохода) Тогда
			СтрокаПлатеж.ОтражениеДоходаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияДохода,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ФормаДокументаОднострочная = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	ИнициализироватьСвойстваПлатежа(Форма);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.СписаниеСРасчетногоСчета);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		
		Если НЕ ФормаДокументаОднострочная Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтоги(Форма);
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если ФормаДокументаОднострочная Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуНДФЛ(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Если Не Форма.ЭтоУплатаНДФЛ
			Или Не СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
			Объект.ПеречислениеНДФЛ.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма)
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = РасшифровкаПлатежа.Количество() < 2;
		
	ИначеЕсли СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = Ложь;
		
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = Ложь;
		
	КонецЕсли;
	
	Если ДанныеВРеквизитахФормы Тогда
		// Одна строка, актуальные данные содержатся в реквизитах формы.
		СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
		РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	Иначе
		Если Форма.ОплатаВВалюте Тогда
			ПлатежиКПересчету = РасшифровкаПлатежа;
		Иначе
			Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
			ПлатежиКПересчету = РасшифровкаПлатежа.НайтиСтроки(Отбор);
		КонецЕсли;
		
		Для Каждого СтрокаПлатеж Из ПлатежиКПересчету Цикл
			РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж)
	
	Объект = Форма.Объект;
	
	Если СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов <> Форма.ВалютаРегламентированногоУчета Тогда
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
		
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Иначе
		СтрокаПлатеж.КурсВзаиморасчетов      = 1;
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, ПараметрыОбъекта, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента", Объект, СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.СписаниеСРасчетногоСчета,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж,
		Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,          Изменения);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	
	Если Форма.ПрименениеУСН Или Форма.ПрименяетсяАУСН Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	
	Если РасшифровкаПлатежа.Количество() > 1 Тогда
		Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
			ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	Иначе
		Форма.ЕстьРасчетыВУсловныхЕдиницах = СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Форма.ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииВТаблицеНаСервере(Форма, ИдСтроки) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, ПараметрыОбъекта, СтрокаПлатеж);
	
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор) Экспорт
	
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор И ВестиУчетПоДоговорам Тогда
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ПрименениеУСН, ПлательщикНДС,
			|СтатьяДвиженияДенежныхСредств, ВидПлатежаПоКредитамЗаймам, СтавкаНДС");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		Если ПолучатьДоговор Тогда
			ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
		КонецЕсли;
		
		СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
			СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам = ПараметрыПлатежа.ВидПлатежаПоКредитамЗаймам;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
			СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
			СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
			
			Если СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Или ПараметрыПлатежа.ОплатаВВалюте Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
				СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
		КонецЕсли;
		
		СтавкаНДСПоУмолчанию = СтавкаНДСРасшифровкиПлатежа(ПараметрыОбъекта.Дата, ПараметрыПлатежа.ВидОперации,
			ПараметрыПлатежа.ДоговорКонтрагента, ПараметрыОбъекта.ПлательщикНДС);
		
		Если СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.БезНДС
			Или СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			// Особая ставка НДС по организации / договору / виду операции / периоду.
			СвойстваПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыПлатежа.СтавкаНДС) Тогда
			// Ставка НДС уже была заполнена в документе, оставляем ее.
			СвойстваПлатежа.СтавкаНДС = ПараметрыПлатежа.СтавкаНДС;
		ИначеЕсли СтавкаНДСПоУмолчанию <> Неопределено Тогда
			// В иных случаях заполняем ставку НДС по умолчанию.
			СвойстваПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбъекта.БезЗакрывающихДокументов Тогда
		СвойстваПлатежа.ПорядокОтраженияДохода = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция СтавкаНДСРасшифровкиПлатежа(Дата, ВидОперации, Договор, ПлательщикНДС) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			Возврат УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Дата, Договор);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			Если Не ПлательщикНДС Тогда
				Возврат Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Возврат УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Дата, Договор);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			Возврат УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Дата);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			Возврат УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Дата, ПлательщикНДС);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВыплатыСамозанятым

Функция СуммаПлатежаПоРееструВыплатыСамозанятым(Знач ВыплатыСамозанятым, Знач Ссылка) Экспорт
	
	СуммаДокумента = РегистрыНакопления.ЗадолженностьСамозанятыхПоРеестру.СуммаЗадолженностиПоРеестру(
		Ссылка, ВыплатыСамозанятым);
	
	Если СуммаДокумента = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 полностью оплачен.'"), ВыплатыСамозанятым);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

Функция СуммаПлатежаСамозанятомуПоРееструВыплатыСамозанятым(Знач ВыплатыСамозанятым, Знач Контрагент, Знач СчетКонтрагента, Знач Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СчетКонтрагента", СчетКонтрагента);
	Запрос.УстановитьПараметр("ВыплатыСамозанятым", ВыплатыСамозанятым);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыплатыСамозанятымВыплаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.ВыплатыСамозанятым.Выплаты КАК ВыплатыСамозанятымВыплаты
	|ГДЕ
	|	ВыплатыСамозанятымВыплаты.Ссылка = &ВыплатыСамозанятым
	|	И ВыплатыСамозанятымВыплаты.Контрагент = &Контрагент";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Самозанятый %1 со счетом %2 не указан в реестре %3'"), Контрагент, СчетКонтрагента, ВыплатыСамозанятым);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	СуммаДокумента = РегистрыНакопления.ЗадолженностьСамозанятыхПоРеестру.СуммаЗадолженностиПоСамозанятому(
		Ссылка, ВыплатыСамозанятым, Контрагент, СчетКонтрагента);
	Если СуммаДокумента = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Самозанятому %1 уже была выплата по реестру %2.'"), Контрагент, ВыплатыСамозанятым);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеЗаработнойПлаты

Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ВидОперации, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
				СтрокаУточнениеДохода = НСтр("ru = 'о выплате по договору подряда'");
			Иначе
				СтрокаУточнениеДохода = НСтр("ru = 'о заработной плате'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения %1 сотрудника %2.'"), СтрокаУточнениеДохода, ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации") = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
					СтрокаУточнениеДохода = НСтр("ru = 'сумма дохода по договору подряда'");
				Иначе
					СтрокаУточнениеДохода = НСтр("ru = 'заработная плата'");
				КонецЕсли;
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости %1 сотрудника %2 выплачена ранее.'"), СтрокаУточнениеДохода, ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

Функция СуммаЗаработнойПлатыПоВедомости(Знач ПлатежнаяВедомость, Знач Ссылка, Знач УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ПлатежнаяВедомость = Ведомости[0];
	ТаблицаВедомостей  = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости,, Ложь);
	
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать(, "Ведомость");
	ТаблицаДокументовОплаты.Свернуть("Ведомость",);
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 полностью оплачен.'"), ПлатежнаяВедомость);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеДепонентов

Процедура ЗаполнитьДепонированнымиСуммамиНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан работник!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		Возврат;
	Иначе
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(Объект.Контрагент);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Объект.Ссылка, Объект.Организация, Объект.Дата, МассивФизическихЛиц);
		
		НевыплаченныеДепоненты.Колонки.Сумма.Имя = "СуммаПлатежа";
		Объект.СуммаДокумента = НевыплаченныеДепоненты.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Объект.ПеречислениеДепонентов.Очистить();
	Объект.ПеречислениеДепонентов.Загрузить(НевыплаченныеДепоненты);
	
	Форма.ПеречислениеДепонентовПриИзмененииНаСервере();
	
КонецПроцедуры

Функция СуммаНеВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач Организация, Знач Дата, Знач ФизЛицо, Знач ПлатежнаяВедомость, Знач УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(ФизЛицо);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
		Ссылка, Организация, Дата, МассивФизическихЛиц);
		
		ВедомостьДепонентов = НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость, "Ведомость");
		
		Если ВедомостьДепонентов = Неопределено Тогда
			СуммаДокумента = 0;
		Иначе
			СуммаДокумента = ВедомостьДепонентов.Сумма;
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеНалога

Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Документы.СписаниеСРасчетногоСчета.ВидНалоговогоОбязательстваПриИзменении(Объект);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет список выбора вида налогового обязательства
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   ДобавитьТекущееЗначениеПриОтсутствии - Булево - Истина, если при отсутствии в списке текущего значения реквизита,
//     необходимо его добавить. Например, при создании формы или в случаях, когда пользователь явно указал
//     некорректный вид обязательства.
//
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, ДобавитьТекущееЗначениеПриОтсутствии = Ложь)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Если ДобавитьТекущееЗначениеПриОтсутствии Тогда
			СписокВидовНалоговыхОбязательств.Добавить(Объект.ВидНалоговогоОбязательства);
		ИначеЕсли СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			Объект.ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
			ВидНалоговогоОбязательстваПриИзмененииНаСервере(Форма);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементВидНалоговогоОбязательства = Элементы.Найти("ВидНалоговогоОбязательства");
	Если ЭлементВидНалоговогоОбязательства <> Неопределено Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьСписокВыбора(ЭлементВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПорядокОтраженияБУ = Элементы.Найти("ПорядокОтраженияБУ");
	Если ЭлементПорядокОтраженияБУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Представление порядка отражения в БУ
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
		СтруктураОтраженияБУ = Новый Структура;
		СтруктураОтраженияБУ.Вставить("Представление", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
		СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КоличествоСтрок = ТаблицаНалоговыйАгентНДС.Количество();
		Если КоличествоСтрок > 1 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент] и еще [КоличествоСтрок]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент,КоличествоСтрок",
				ТаблицаНалоговыйАгентНДС[0].Контрагент,
				КоличествоСтрок - 1));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		ИначеЕсли КоличествоСтрок > 0 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент",
				ТаблицаНалоговыйАгентНДС[0].Контрагент));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		Иначе
			Представление = НСтр("ru='68.32, <...>'"); 
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период", Объект.Дата);
		СтруктураПараметров.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
		Для НомерСубконто = 1 По 3 Цикл
			СтруктураПараметров.Вставить("Субконто" + НомерСубконто, Объект["СубконтоДт" + НомерСубконто]);
		КонецЦикла;
		СтруктураОтраженияБУ = ПлатежиВБюджетПереопределяемый.ПредставлениеПорядкаОтраженияБУ(СтруктураПараметров);
	КонецЕсли;
	
	Форма.ПорядокОтраженияБУ         = СтруктураОтраженияБУ.Представление;
	Форма.ПорядокОтраженияБУЗаполнен = СтруктураОтраженияБУ.Заполнен;
	
	ЭлементПорядокОтраженияБУ.ПропускатьПриВводе = СтруктураОтраженияБУ.Заполнен;
	
КонецПроцедуры

Процедура НалогПриИзмененииНаСервере(Форма, ПричиныИзменения, СтрокаПоискаПоКБК) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
	КонецЕсли;
	
	ПричиныИзменения.Добавить("Налог");
	
	РеквизитыНалога = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Налог, "ВидНалога,СчетУчета");
	Форма.ВидНалога = РеквизитыНалога.ВидНалога;
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		СтрокаПоискаПоКБК, Объект.Дата, Форма.ВидНалога);
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Объект.Дата, Объект.Организация);
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(Форма.ВидНалога)
		Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = УчетНДФЛПредпринимателя.РелевантныйПериодНалоговогоПлатежа(Объект.Дата);
	Иначе
		Объект.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	КонецЕсли;
	
	Форма.НалоговыйПериодСтрока = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(
		Объект.НалоговыйПериод, Форма.ВидНалога);
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Объект.Налог);
	Если ПравилаЗаполнения.ЗаполнятьПолучателя И Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		ТекущийПолучатель = Объект.Контрагент;
		Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Получатель) И ТекущийПолучатель <> Получатель Тогда
			Объект.Контрагент = Получатель;
			КонтрагентОбработатьИзменение(Форма, ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЭтоУплатаНДФЛ = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
	Если НЕ Форма.ЭтоУплатаНДФЛ Тогда
		Объект.ПеречислениеНДФЛ.Очистить();
	КонецЕсли;
	
	Если РеквизитыНалога.СчетУчета <> ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	Форма.НалогУплачиваетсяОтдельно = ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(Объект.Организация,
		Объект.Дата,
		Объект.Налог,
		Объект.Контрагент);
	
	ЗаполнитьСчетаУчета(Форма, "Налог", ПричиныИзменения);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Налог", ПричиныИзменения);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере(Форма) Экспорт
	
	Форма.Объект.ВидНалоговогоОбязательства = Документы.СписаниеСРасчетногоСчета.ВидНалоговогоОбязательстваПоАналитикеПлатежа(Форма.Объект);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура НалоговыйПериодПриИзмененииНаСервере(Форма) Экспорт
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область УСН

Процедура ЗаполнитьОтражениеВУСННаСервере(Форма, ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	
	Если ЗаполнитьСуммы Тогда
		
		ОбновлятьРеквизитыФормы = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1;
		
		// Настройка УСН работает с данными объекта, поэтому в однострочной форме перед ее вызовом
		// требуется синхронизировать данные однострочной формы и объекта.
		Если ОбновлятьРеквизитыФормы Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(Форма);
		КонецЕсли;
		
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
		
		// Заполняем реквизиты формы, связанные с расшифровкой платежа, после заполнения нового отражения объекта в УСН.
		Если ОбновлятьРеквизитыФормы Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
				Форма, Объект.РасшифровкаПлатежа[0],, Ложь);
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ПризнакНалоговойБазы", Перечисления.ПризнакиНалоговойБазыАУСН.ВозвратПрихода);
		РазметкаАУСНБанкаСодержитВозвратПрихода = Объект.РазметкаАУСНбанка.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
		ЭтоВозвратПокупателю = ПараметрыУСН.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		ИсточникРазметкиБанк = Объект.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк;
		ЭтоФормаДокументаИнтеграцияСБанком = БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма);
		ПрименяетсяАУСНДоходы = Не ЭтоФормаДокументаИнтеграцияСБанком И Форма.ПрименяетсяАУСНДоходы;
		
		Если ПрименяетсяАУСНДоходы И Не ЭтоВозвратПокупателю
			И ИсточникРазметкиБанк И РазметкаАУСНБанкаСодержитВозвратПрихода Тогда
			Объект.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Программа;
		КонецЕсли;
		
		УправлениеЭлементамиОтраженияВУСНСервер(Форма);
		
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭлементамиОтраженияВУСНСервер(Форма) Экспорт
	
	Если БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЗаполнитьСпискиВыбораОтражениеВУСН(Форма);
	
	БанкИКассаФормы.НастроитьЭлементыИсточникаРазметкиАУСН(Форма,
		СтрРазделить("ИсточникРазметкиАУСН,ИсточникРазметкиАУСНБезДокументов,ПрочееИсточникРазметкиАУСН", ","));
	
	ВидимостьИсточникаРазметкиАУСН = Форма.ПрименяетсяАУСН;
	
	ПрименяетсяРазметкаАУСНБанка = Объект.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк;
	
	ЭтоОднострочнаяФорма = БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
		И (Объект.РасшифровкаПлатежа.Количество() <= 1);
		
	ЕстьРасшифровкаПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Форма);
	Если ЕстьРасшифровкаПлатежа И ЭтоОднострочнаяФорма Тогда
		РасходыПринимаются = Форма.РасшифровкаПлатежаОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	Иначе
		РасходыПринимаются = Истина;
	КонецЕсли;
	
	// ТЧ "Расшифровка платежа"
	
	ЗаполняетсяОтражениеРасходовУСН = СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма);
	ЕстьПрочиеРасчеты = УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации);
	ОплатаБезЗакрывающихДокументов = Объект.БезЗакрывающихДокументов
		И (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	НастраиватьРасходыУСНПоРасчетам = ЗаполняетсяОтражениеРасходовУСН
		И (ЕстьПрочиеРасчеты Или ОплатаБезЗакрывающихДокументов);
	
	ЭлементРасшифровкаПлатежаОтражениеВУСН = Элементы.Найти("РасшифровкаПлатежаОтражениеВУСН");
	Если ЭлементРасшифровкаПлатежаОтражениеВУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаОтражениеВУСН.Видимость = 
			НастраиватьРасходыУСНПоРасчетам И Не ПрименяетсяРазметкаАУСНБанка;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаЗаголовокРасходыУСН = Элементы.Найти("РасшифровкаПлатежаЗаголовокРасходыУСН");
	Если ЭлементРасшифровкаПлатежаЗаголовокРасходыУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаЗаголовокРасходыУСН.Видимость = 
			НастраиватьРасходыУСНПоРасчетам И Не ПрименяетсяРазметкаАУСНБанка;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаРасходыУСН = Элементы.Найти("РасшифровкаПлатежаРасходыУСН");
	Если ЭлементРасшифровкаПлатежаРасходыУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаРасходыУСН.Видимость = 
			НастраиватьРасходыУСНПоРасчетам И РасходыПринимаются И Не ПрименяетсяРазметкаАУСНБанка;
	КонецЕсли;
	
	ЭлементГруппаИсточникРазметкиАУСН = Элементы.Найти("ГруппаИсточникРазметкиАУСН");
	Если ЭлементГруппаИсточникРазметкиАУСН <> Неопределено Тогда
		ЭлементГруппаИсточникРазметкиАУСН.Видимость = НастраиватьРасходыУСНПоРасчетам И ВидимостьИсточникаРазметкиАУСН;
	КонецЕсли;
	
	ОтображатьСтатусАУСН = НастраиватьРасходыУСНПоРасчетам И Форма.ПрименяетсяАУСН И Форма.ПодключенСервисАУСН;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтатусАУСН", "Видимость", ОтображатьСтатусАУСН);
	
	// Суммы НДС в расходах указываем только при УСН (доходы минус расходы) для прочих расчетов с контрагентами.
	
	ПрименениеУСНДоходыРасходы = Форма.ПрименениеУСН И Не Форма.ПрименениеУСНДоходы;
	
	ЭлементРасшифровкаПлатежаЗаголовокНДСУСН = Элементы.Найти("РасшифровкаПлатежаЗаголовокНДСУСН");
	Если ЭлементРасшифровкаПлатежаЗаголовокНДСУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаЗаголовокНДСУСН.Видимость = ПрименениеУСНДоходыРасходы
			И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаНДСУСН = Элементы.Найти("РасшифровкаПлатежаНДСУСН");
	Если ЭлементРасшифровкаПлатежаНДСУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаНДСУСН.Видимость = ПрименениеУСНДоходыРасходы
			И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И РасходыПринимаются;
	КонецЕсли;
	
	// Группа "Без закрывающих документов"
	
	ПрименяетсяАУСН = Форма.ПрименяетсяАУСН;
	
	ЭлементОтражениеВУСНБезДокументов = Элементы.Найти("РасшифровкаПлатежаОтражениеВУСНБезДокументов");
	Если ЭлементОтражениеВУСНБезДокументов <> Неопределено Тогда
		ЭлементОтражениеВУСНБезДокументов.Видимость = ЭтоОднострочнаяФорма
			И ПрименяетсяАУСН И ОплатаБезЗакрывающихДокументов И Не ПрименяетсяРазметкаАУСНБанка;
	КонецЕсли;
	
	ЭлементРасходыУСНБезДокументов = Элементы.Найти("РасшифровкаПлатежаРасходыУСНБезДокументов");
	Если ЭлементРасходыУСНБезДокументов <> Неопределено Тогда
		ЭлементРасходыУСНБезДокументов.Видимость = ЭтоОднострочнаяФорма
			И ПрименяетсяАУСН И ОплатаБезЗакрывающихДокументов И Не ПрименяетсяРазметкаАУСНБанка
			И РасходыПринимаются;
	КонецЕсли;
	
	ЭлементГруппаИсточникРазметкиАУСНБезДокументов = Элементы.Найти("ГруппаИсточникРазметкиАУСНБезДокументов");
	Если ЭлементГруппаИсточникРазметкиАУСНБезДокументов <> Неопределено Тогда
		ЭлементГруппаИсточникРазметкиАУСНБезДокументов.Видимость = ЭтоОднострочнаяФорма
			И ПрименяетсяАУСН И ОплатаБезЗакрывающихДокументов И ВидимостьИсточникаРазметкиАУСН;
	КонецЕсли;
	
	ОтображатьСтатусАУСНБезДокументов = ЭтоОднострочнаяФорма И ПрименяетсяАУСН И ОплатаБезЗакрывающихДокументов
		И Форма.ПодключенСервисАУСН;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтатусАУСНБезДокументов", "Видимость", ОтображатьСтатусАУСНБезДокументов);
	
	// Страница "Прочее"
	
	ЭлементГруппаОтражениеВУСН = Элементы.Найти("ГруппаОтражениеВУСН");
	Если ЭлементГруппаОтражениеВУСН <> Неопределено Тогда
		
		ОтображатьСтатусАУСНПрочее = Форма.ПрименяетсяАУСН И Форма.ПодключенСервисАУСН;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			// При перечислении комиссии банка сумму расходов можно редактировать только в случае,
			// если документ создан до добавления реквизита ОтражениевУСН и в нем указано частичное признание расходов.
			ПустоеОтражениеВУСН = Объект.ОтражениеВУСН = Перечисления.ОтражениеВУСН.ПустаяСсылка();
			ВидимостьРасходыУСН = ПустоеОтражениеВУСН И Не ПрименяетсяРазметкаАУСНБанка;
			ВидимостьНДСУСН = ПустоеОтражениеВУСН;
			ВидимостьСодержаниеУСН = Ложь;
		Иначе
			ОтражениеПринимаютсяВУСН = Объект.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ВидимостьРасходыУСН = ОтражениеПринимаютсяВУСН И Не ПрименяетсяРазметкаАУСНБанка;
			ВидимостьНДСУСН = ОтражениеПринимаютсяВУСН;
			ВидимостьСодержаниеУСН = Истина;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			И ЗаполняетсяОтражениеРасходовУСН
			И (ПрименяетсяАУСН
					И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме
					И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога)
				Или Форма.ВидНалога = Перечисления.ВидыНалогов.ПрочиеНалогиИСборы) Тогда
			Элементы.НДСУСН.Видимость = ВидимостьНДСУСН;
			Элементы.ГруппаОтражениеВУСН.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Ложь;
			Элементы.ОтражениеВУСН.Видимость = Не ПрименяетсяРазметкаАУСНБанка;
			Элементы.РасходыУСН.Видимость = ВидимостьРасходыУСН;
			Элементы.СодержаниеУСН.Видимость = ВидимостьСодержаниеУСН;
			Элементы.ГруппаПрочееИсточникРазметкиАУСН.Видимость = ВидимостьИсточникаРазметкиАУСН;
			Элементы.ПрочееСтатусАУСН.Видимость = ОтображатьСтатусАУСНПрочее;
			
		ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
				Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка)
			И ЗаполняетсяОтражениеРасходовУСН Тогда
			Элементы.НДСУСН.Видимость = ВидимостьНДСУСН И Не ПрименяетсяАУСН;
			Элементы.ГруппаОтражениеВУСН.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
			Элементы.ОтражениеВУСН.Видимость = Не ПрименяетсяРазметкаАУСНБанка;
			Элементы.РасходыУСН.Видимость = ВидимостьРасходыУСН;
			Элементы.СодержаниеУСН.Видимость = ВидимостьСодержаниеУСН;
			Элементы.ГруппаПрочееИсточникРазметкиАУСН.Видимость = ВидимостьИсточникаРазметкиАУСН;
			Элементы.ПрочееСтатусАУСН.Видимость = ОтображатьСтатусАУСНПрочее;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда
			И Не ПрименяетсяАУСН И ЗаполняетсяОтражениеРасходовУСН
			И Не ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
			Элементы.НДСУСН.Видимость = ВидимостьНДСУСН;
			Элементы.ГруппаОтражениеВУСН.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Ложь;
			Элементы.ОтражениеВУСН.Видимость = Истина;
			Элементы.РасходыУСН.Видимость = ВидимостьРасходыУСН;
			Элементы.СодержаниеУСН.Видимость = ВидимостьСодержаниеУСН;
			Элементы.ГруппаПрочееИсточникРазметкиАУСН.Видимость = ВидимостьИсточникаРазметкиАУСН;
			Элементы.ПрочееСтатусАУСН.Видимость = ОтображатьСтатусАУСНПрочее;
			
		ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
				Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
			И ПрименяетсяАУСН
			И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.НДСУСН.Видимость = ВидимостьНДСУСН;
			Элементы.ГруппаОтражениеВУСН.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Ложь;
			Элементы.ОтражениеВУСН.Видимость = Не ПрименяетсяРазметкаАУСНБанка;
			Элементы.РасходыУСН.Видимость = ВидимостьРасходыУСН;
			Элементы.СодержаниеУСН.Видимость = ВидимостьСодержаниеУСН;
			Элементы.ГруппаПрочееИсточникРазметкиАУСН.Видимость = ВидимостьИсточникаРазметкиАУСН;
			Элементы.ПрочееСтатусАУСН.Видимость = ОтображатьСтатусАУСНПрочее;
			
		ИначеЕсли ВидимостьИсточникаРазметкиАУСН
			И (Не (НастраиватьРасходыУСНПоРасчетам
				Или ЭтоОднострочнаяФорма И ПрименяетсяАУСН И ОплатаБезЗакрывающихДокументов)
			Или БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
				И Объект.РасшифровкаПлатежа.Количество() > 1) Тогда
			Элементы.НДСУСН.Видимость = Ложь;
			Элементы.ГруппаОтражениеВУСН.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Ложь;
			Элементы.ОтражениеВУСН.Видимость = Ложь;
			Элементы.РасходыУСН.Видимость = Ложь;
			Элементы.СодержаниеУСН.Видимость = Ложь;
			Элементы.ГруппаПрочееИсточникРазметкиАУСН.Видимость = Истина;
			Элементы.ПрочееСтатусАУСН.Видимость = ОтображатьСтатусАУСНПрочее;
			
		Иначе
			Элементы.ГруппаОтражениеВУСН.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.НДСУСН.Доступность = Объект.Графа7_УСН <> 0;
		
		// Отметка незаполненного
		Элементы.ОтражениеВУСН.АвтоотметкаНезаполненного
			= (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	КонецЕсли;
	
	Если ЗаполняетсяОтражениеРасходовУСН Тогда
		УстановитьЗаголовкиКолонокУСН(Форма);
	КонецЕсли;
	
	ЭтоФормаДокументаИнтеграцияСБанком = БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма);
	Если Не ЭтоФормаДокументаИнтеграцияСБанком И Форма.ПрименяетсяАУСНДоходы Тогда
		УстановитьВидимостьРазметкиАУСНДоходы(Форма, ЭтоОднострочнаяФорма, Объект.БезЗакрывающихДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокУСН(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоФормаДокументаИнтеграцияСБанком = БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма);
	ПрименяетсяАУСНДоходы = Не ЭтоФормаДокументаИнтеграцияСБанком И Форма.ПрименяетсяАУСНДоходы;
	
	Если Не СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйРежим = ?(Форма.ПрименяетсяАУСН, НСтр("ru = 'АУСН'"), НСтр("ru = 'УСН'"));
	
	// Заголовки группы Отражение в УСН
	
	ЗаголовокГруппаОтражениеВУСН = СтрШаблон(НСтр("ru = 'Отражение в %1'"), НалоговыйРежим);
	
	ЭлементГруппаОтражениеВУСН = Элементы.Найти("ГруппаОтражениеВУСН");
	Если ЭлементГруппаОтражениеВУСН <> Неопределено Тогда
		ЭлементГруппаОтражениеВУСН.Заголовок = ЗаголовокГруппаОтражениеВУСН;
	КонецЕсли;
	
	// Заголовки ОтражениеВУСН
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		И ПрименяетсяАУСНДоходы Тогда
		ЗаголовокОтражениеВУСН = СтрШаблон(НСтр("ru = 'Доходы %1 (уменьшение)'"), НалоговыйРежим);
	Иначе
		ЗаголовокОтражениеВУСН = СтрШаблон(НСтр("ru = 'Расходы %1'"), НалоговыйРежим);
	КонецЕсли;
	
	ЭлементГруппаТаблицыОтражениеВУСН = Элементы.Найти("РасшифровкаПлатежаГруппаОтражениеВУСН");
	Если ЭлементГруппаТаблицыОтражениеВУСН <> Неопределено Тогда
		ЭлементГруппаТаблицыОтражениеВУСН.Заголовок = ЗаголовокОтражениеВУСН;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаОтражениеВУСН = Элементы.Найти("РасшифровкаПлатежаОтражениеВУСН");
	Если ЭлементРасшифровкаПлатежаОтражениеВУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаОтражениеВУСН.Заголовок = ЗаголовокОтражениеВУСН;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаОтражениеВУСНБезДокументов = Элементы.Найти("РасшифровкаПлатежаОтражениеВУСНБезДокументов");
	Если ЭлементРасшифровкаПлатежаОтражениеВУСНБезДокументов <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаОтражениеВУСНБезДокументов.Заголовок = ЗаголовокОтражениеВУСН;
	КонецЕсли;
	
	ЭлементОтражениеВУСН = Элементы.Найти("ОтражениеВУСН");
	Если ЭлементОтражениеВУСН <> Неопределено Тогда
		ЭлементОтражениеВУСН.Заголовок = ЗаголовокОтражениеВУСН;
	КонецЕсли;
	
	// Заголовки РасходыУСН
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		И ПрименяетсяАУСНДоходы Тогда
		ЗаголовокРасходыУСН = НСтр("ru = 'Сумма уменьшения'");
	Иначе
		ЗаголовокРасходыУСН = НСтр("ru = 'Сумма расходов'");
	КонецЕсли;
	
	Если Форма.ОплатаВВалюте Тогда
		ЗаголовокРасходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма расходов, %1'"), Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ЭлементРасходыУСН = Элементы.Найти("РасходыУСН");
	Если ЭлементРасходыУСН <> Неопределено Тогда
		ЭлементРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаРасходыУСН = Элементы.Найти("РасшифровкаПлатежаРасходыУСН");
	Если ЭлементРасшифровкаПлатежаРасходыУСН <> Неопределено Тогда
		ЭлементРасшифровкаПлатежаРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	КонецЕсли;
	
	ЭлементРасходыУСНБезДокументов = Элементы.Найти("РасшифровкаПлатежаРасходыУСНБезДокументов");
	Если ЭлементРасходыУСНБезДокументов <> Неопределено Тогда
		ЭлементРасходыУСНБезДокументов.Заголовок = ЗаголовокРасходыУСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораОтражениеВУСН(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполняетсяОтражениеРасходовУСН(Форма)
		Или БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеОтражения = Перечисления.ОтражениеВУСН.СписокВыбора(Форма.ПрименяетсяОсобыйНалоговыйРежим, Истина);
	
	// Особенный случай - частичное отражение в УСН комиссии банка в документах, оформленных до появления реквизита ОтражениеВУСН.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		И Не Форма.Параметры.Ключ.Пустая()
		И Объект.Графа7_УСН > 0 Тогда
		
		Если Форма.ОплатаВВалюте Тогда
			ПолнаяСуммаРасхода = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				Объект.ВалютаДокумента,
				Форма.ВалютаРегламентированногоУчета,
				Форма.КурсДокумента, 1,
				Форма.КратностьДокумента, 1);
		Иначе
			ПолнаяСуммаРасхода = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Объект.Графа7_УСН <> ПолнаяСуммаРасхода Тогда
			ДоступныеОтражения.Добавить(Перечисления.ОтражениеВУСН.ПустаяСсылка(), НСтр("ru = 'Частично принимаются'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДляНастройки = Новый Массив;
	
	Если Элементы.Найти("ОтражениеВУСН") <> Неопределено Тогда
		ЭлементыДляНастройки.Добавить(Элементы.ОтражениеВУСН);
	КонецЕсли;
	Если Элементы.Найти("РасшифровкаПлатежаОтражениеВУСН") <> Неопределено Тогда
		ЭлементыДляНастройки.Добавить(Элементы.РасшифровкаПлатежаОтражениеВУСН);
	КонецЕсли;
	Если Объект.БезЗакрывающихДокументов И Элементы.Найти("РасшифровкаПлатежаОтражениеВУСНБезДокументов") <> Неопределено Тогда
		ЭлементыДляНастройки.Добавить(Элементы.РасшифровкаПлатежаОтражениеВУСНБезДокументов);
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыДляНастройки Цикл
		Элемент.СписокВыбора.Очистить();
		Для Каждого ВариантОтражения Из ДоступныеОтражения Цикл
			Элемент.СписокВыбора.Добавить(ВариантОтражения.Значение, ВариантОтражения.Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеЭлементамиВалютногоКонтроля(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		БанкРасчетногоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "Банк");
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(БанкРасчетногоСчета);
		ИностранныйБанк = Не РеквизитыБанка.ЯвляетсяБанкомРФ;
	Иначе 
		ИностранныйБанк = Ложь;
	КонецЕсли;
	
	Видимость = ИностранныйБанк Или 
		ПолучитьФункциональнуюОпцию("УчетПоКодамВалютныхОперацийИНомерамВалютныхДоговоров");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодВалютнойОперации", "Видимость", Видимость);
	
КонецПроцедуры

Процедура УстановитьВидимостьРазметкиАУСНДоходы(Форма, ЭтоОднострочнаяФорма, ОплатаБезЗакрывающихДокументов)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ВидОперацииПрочееСписание = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	ВидОперацииВозвратПокупателю = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	ВидимостьРазметкиАУСН = ВидОперацииПрочееСписание Или ВидОперацииВозвратПокупателю;
	ПодключенСервисАУСН = Форма.ПодключенСервисАУСН;
	РазметкаПоДаннымДокумента = Объект.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Программа;
	ЭтоФормаРасшифровкиПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма);
	
	// Видимость СтатусАУСН
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СтатусАУСНБезДокументов",
		"Видимость",
		ЭтоОднострочнаяФорма И ПодключенСервисАУСН И ОплатаБезЗакрывающихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СтатусАУСН",
		"Видимость",
		ПодключенСервисАУСН И ВидОперацииВозвратПокупателю);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПрочееСтатусАУСН",
		"Видимость",
		ПодключенСервисАУСН И ВидОперацииПрочееСписание);
	
	// Видимость ИсточникРазметкиАУСН
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ИсточникРазметкиАУСНБезДокументов",
		"Видимость",
		ВидимостьРазметкиАУСН);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ИсточникРазметкиАУСН",
		"Видимость",
		ВидимостьРазметкиАУСН);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПрочееИсточникРазметкиАУСН",
		"Видимость",
		ВидимостьРазметкиАУСН);
	
	// Видимость ОтражениеВУСН
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"РасшифровкаПлатежаОтражениеВУСНБезДокументов",
		"Видимость",
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"РасшифровкаПлатежаОтражениеВУСН",
		"Видимость",
		ВидимостьРазметкиАУСН И РазметкаПоДаннымДокумента);
	
	Если ЭтоОднострочнаяФорма Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОтражениеВУСН",
			"Видимость",
			ВидимостьРазметкиАУСН И РазметкаПоДаннымДокумента);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОтражениеВУСН",
			"Видимость",
			(ВидОперацииПрочееСписание Или ОплатаБезЗакрывающихДокументов) И РазметкаПоДаннымДокумента);
	КонецЕсли;
	
	// Видимость РасходыУСН
	
	ОтражениеВУСНПринимаются = Не ЭтоФормаРасшифровкиПлатежа И Объект.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Если ЭтоОднострочнаяФорма Тогда
		РасшифровкаОтражениеВУСНПринимаются = Форма.РасшифровкаПлатежаОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасшифровкаПлатежаРасходыУСНБезДокументов",
			"Видимость",
			РасшифровкаОтражениеВУСНПринимаются И Элементы.РасшифровкаПлатежаОтражениеВУСНБезДокументов.Видимость);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасшифровкаПлатежаРасходыУСН",
			"Видимость",
			РасшифровкаОтражениеВУСНПринимаются И Элементы.РасшифровкаПлатежаРасходыУСН.Видимость);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасходыУСН",
			"Видимость",
			ОтражениеВУСНПринимаются И Элементы.ОтражениеВУСН.Видимость);
	Иначе
		ВидимостьРасшифровкаПлатежаРасходыУСН = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы,
			"РасшифровкаПлатежаОтражениеВУСН",
			"Видимость");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасшифровкаПлатежаГруппаОтражениеВУСН",
			"Видимость",
			ВидимостьРасшифровкаПлатежаРасходыУСН);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасшифровкаПлатежаРасходыУСН",
			"Видимость",
			ВидимостьРасшифровкаПлатежаРасходыУСН);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"РасходыУСН",
			"Видимость",
			ОтражениеВУСНПринимаются И Элементы.ОтражениеВУСН.Видимость);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СчетаУчета

Процедура ЗаполнитьСчетаУчета(Форма, ПричинаИзменения, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			// Если видны счета, то при изменении счета банка может быть изменен банковский счет организации.
			// А изменение банковского счета организации в общем случае приводит к установке счета банка.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДепозит = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("ГруппаЗаголовкиСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("ГруппаПоляСчетСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентомПеревод");
	Если Не ЭтоДепозит Тогда
		ЭлементыСчетов.Добавить("ПодразделениеДтПеревод");
	КонецЕсли;
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	Если Не СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.СчетБанк.Видимость = СчетБанкаВиден(Форма);
		Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.Видимость =
			Не УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата)
			И Не ЭтоДепозит
			И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
		Элементы.СтатьяДвиженияДенежныхСредствСнятиеНаличных.Видимость =
			УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	Если ВидОперацииНеПредполагаетАвансаРасчетов(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция СчетБанкаВиден(Форма) Экспорт
	
	Используется57Счет = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Форма.Объект.Организация, Форма.Объект.Дата);
	
	Если НЕ Используется57Счет Тогда
		Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецФункции

Функция ВидОперацииНеПредполагаетАвансаРасчетов(ВидОперации)
	
	Результат = ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеШапка(Форма);
	
	УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШапка(Форма)
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// ПорядокОтраженияБУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокОтраженияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокОтраженияБУЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	
	Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РегистрацияВНалоговомОргане
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РегистрацияВНалоговомОргане");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НалогЗаОбособленноеПодразделение", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Статус АУСН
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСтатусАУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтатусАУСНБезДокументов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтатусАУСН");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"СтатусАУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтатусыОбменаАУСН.Отклонен);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтрицательногоЗначения);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма) Экспорт
	
	// Условное оформление применяется к колонкам таблицы, для однострочной формы не требуется.
	Если Форма.Элементы.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	Иначе
		НачалоПутиКДаннымТЧ = "Объект.";
	КонецЕсли;
	
	// Реквизиты не используются при расчетах по кредитам и займам, а также прочих расчетах с контрагентами.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при возврате займа.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<документ>'"));
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ГруппаОтбораИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораИли,
		НачалоПутиКДаннымТЧ + "Организация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораИли,
		НачалоПутиКДаннымТЧ + "Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаРасходыУСН, РасшифровкаПлатежаНДСУСН, РасшифровкаПлатежаЗаголовокРасходыУСН, РасшифровкаПлатежаЗаголовокНДСУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаЗаголовокРасходыУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРасходыУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаЗаголовокНДСУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНДСУСН");
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементУО.Отбор.Элементы, "ОтборРежимНалогообложения",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПрименяетсяАУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ОтражениеВУСН",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ОтражениеВУСН.Принимаются);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	БанкИКассаФормы.УстановитьУсловноеОформлениеБезЗакрывающихДокументов(Форма, НачалоПутиКДаннымТЧ);
	
КонецПроцедуры

Функция ОплаченныеСчета(Форма)
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма,1);
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СчетНаОплату) Тогда
				ОплаченныеСчета.Добавить(СтрокаРасшифровки.СчетНаОплату);
			КонецЕсли;
		Иначе
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Функция ПоместитьРасшифровкуНалоговыйАгентНДСВХранилище(Объект) Экспорт
	
	ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
	АдресТаблицыНалоговыйАгентНДСВХранилище = ПоместитьВоВременноеХранилище(
		ТаблицаНалоговыйАгентНДС, Новый УникальныйИдентификатор());
	
	Возврат АдресТаблицыНалоговыйАгентНДСВХранилище;
	
КонецФункции

#КонецОбласти
