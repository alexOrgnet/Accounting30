#Область ПрограммныйИнтерфейс

// Функция возвращает сальдо расчетов на едином налоговом счете в бухгалтерском учете.
// В бухгалтерском учете не учитывается порядок зачета платежей.
// Может отличаться от реального состояния единого налогового счета.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация для получения остатков
//  Дата           - Дата получения остатков.
//  ДокументСсылка - ДокументСсылк, если заполнен - остаток будет получен на момент времени документа
// Возвращаемое значение:
//  Сумма остатка на счете учета расчетов ЕНС
//
Функция СальдоЕдиногоНалоговогоСчета(Организация, Дата, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СальдоЕдиногоНалоговогоСчета = 0;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПериодОстатков = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации",    Организации);
	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ПериодОстатков, Счет = &Счет, , Организация В (&Организации)) КАК ХозрасчетныйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СальдоЕдиногоНалоговогоСчета = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат СальдоЕдиногоНалоговогоСчета;
	
КонецФункции

// Функция возвращает остаток расчетов по единому налоговому счету по правилам НК.
// Учитывается порядок зачета платежей по факту наступлени срока уплаты.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация для получения остатков
//  Дата           - Дата получения остатков.
//  ДокументСсылка - ДокументСсылк, если заполнен - остаток будет получен на момент времени документа
// Возвращаемое значение:
//  Сумма остатка по ЕНС
//
Функция ОстатокНаЕдиномНалоговомСчете(Организация, Дата, ДокументСсылка = Неопределено) Экспорт
	
	Если Дата >= НачалоПростогоУчета() Тогда
		Возврат СальдоЕдиногоНалоговогоСчета(Организация, Дата, ДокументСсылка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаОстаток = 0;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПериодОстатков = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",         Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",      ПериодОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)) КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 0 Тогда
		СуммаОстаток = Результат.Итог("СуммаОстаток");
	КонецЕсли;
	
	Возврат СуммаОстаток;
	
КонецФункции

// Функция возвращает таблицу остатков расчетов по единому налоговому счету по правилам НК.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация для получения остатков
//  Дата           - Дата получения остатков.
//  ДокументСсылка - ДокументСсылк, если заполнен - остаток будет получен на момент времени документа
// Возвращаемое значение:
//  Таблица значений 
//     ПлатежныйДокумент - документ, которым зарегистрирована уплата
//     Сумма             - Сумма остатка по ЕНС в разрезе платежных документов
//
Функция ТаблицаОстатковНаЕдиномНалоговомСчете(Организация, Дата, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаОстаток = 0;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПериодОстатков = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",         Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",      ПериодОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация КАК Организация,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)) КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация КАК Организация,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_РасчетыПоЕдиномуНалоговомуСчетуОстатки КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистратора,
	|	ПлатежныйДокумент";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает дату изменения алгоритма
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаСменыАлгоритмаЗачетаУплат() Экспорт
	
	// Дата не формализована нормативными документами - так фактически было реализовано на стороне ФНС
	Возврат Дата(2022,09,09);
	
КонецФункции

// Функция возвращает дату изменения последовательности уплаты налогов
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаСменыПоследовательностиЗачетаУплат() Экспорт
	
	// Дата по 196-ФЗ от 29.05.2023 г.
	Возврат Дата(2023,05,29);
	
КонецФункции

// Функция возвращает дату изменения последовательности уплаты налогов при подачи уведомления
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаПриоритезацииУведомленияПоНДФЛ() Экспорт
	
	// Дата по 196-ФЗ от 29.05.2023 г. - через месяц после публикации
	Возврат ДобавитьМесяц(ДатаСменыПоследовательностиЗачетаУплат(), 1) + 86400;
	
КонецФункции

// Функция возвращает дату изменения последовательности уплаты налогов при подачи уведомления
// Возвращаемое значение:
//  Дата смены алгоритма - Дата
Функция ДатаПриоритезацииУведомленияПоСтраховымВзносам() Экспорт
	
	// Дата по 389-ФЗ от 31.07.2023 г. - с 01.10.2023
	Возврат Дата(2023, 10, 01);
	
КонецФункции

// Функция возвращает версию используемого алгоритма
// Параметры:
//  Дата - Дата проведения зачета.
// Возвращаемое значение:
//  Версия алгоритма - число
Функция ВерсияАлгоритмаЗачетаУплат(Дата) Экспорт
	
	Если Дата <= ДатаСменыАлгоритмаЗачетаУплат() Тогда
		// Зачет с даты самого первого документа оплаты
		Возврат 1;
	Иначе
		// Зачет в обратой последовательности с даты ближайшего документа оплаты
		Возврат 2;
	КонецЕсли;
	
КонецФункции

// Функция возвращает таблицу зачета налогов за заданный период.
//
// Параметры:
//  Организация       - СправочникСсылка.Организации - Организация для получения остатков
//  ДатаНачала        - Дата начала осмотра.
//  ДатаОкончания     - Дата окончания осмотра.
//  ВидыНалогов       - Массив значений ПеречислениеСсылка.ВидыНалогов, или пусто
//  ПоВсейОрганизации - Булево, признак возврата данных по всей организации с ОП
// Возвращаемое значение:
//  Таблица значений 
//     * Организация                 - СправочникСсылка.Организации
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//     * ВидНалога                   - ПеречислениеСсылка.ВидыНалогов
//     * Сумма                       - Число - Сумма оборота по ЕНС
//
Функция ЗачтенныеУплатыНалоговЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидыНалогов = Неопределено, ПоВсейОрганизации = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога КАК ВидНалога,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|ГДЕ
	|	НЕ &ПростойУчетЕНС
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = &ВидДвижения
	|	И &УсловиеВидыНалога
	|	И &УсловиеОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбУплатеНалогов.Ссылка.Организация,
	|	&ОсновнаяРегистрацияВНалоговомОргане,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога,
	|	СУММА(СведенияОбУплатеНалогов.Сумма)
	|ИЗ
	|	Документ.СведенияОбУплатеНалогов.Сведения КАК СведенияОбУплатеНалогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО СведенияОбУплатеНалогов.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|ГДЕ
	|	&ПростойУчетЕНС
	|	И СведенияОбУплатеНалогов.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СведенияОбУплатеНалогов.Ссылка.Организация = &Организация
	|	И СведенияОбУплатеНалогов.Ссылка.Проведен
	|	И &УсловиеВидыНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбУплатеНалогов.Ссылка.Организация,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",       КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидДвижения",         ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидыНалогов",         ВидыНалогов);
	
	ПростойУчетЕНС = ДатаОкончания >= НачалоПростогоУчета();
	Запрос.УстановитьПараметр("ПростойУчетЕНС", ПростойУчетЕНС);
	ОсновнаяРегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, ДатаОкончания);
	Запрос.УстановитьПараметр("ОсновнаяРегистрацияВНалоговомОргане", ОсновнаяРегистрацияВНалоговомОргане);
	
	Если ЗначениеЗаполнено(ВидыНалогов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидыНалога", "ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалогов)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидыНалога", "Истина");
	КонецЕсли;
	Если ПоВсейОрганизации Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", "РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация = &Организация");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает таблицу налогов, заполнение которых доступно.
//
// Параметры:
//  ТолькоДопустимые - Булево, признак отбора налогов по уведомлениям.
//  Период           - Дата, на которую осуществляется выборка.
//  Таблица значений 
//     Ссылка       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//     КодБК        - Строка 20, КБК налога
//     Наименование - Строка, наименование элемента справочника
//     СчетУчета    - ПланСчетовСсылка.Хозрасчетный, счет учета налога
//
Функция ТаблицаНалоговДляАвтоматическогоЗаполнения(ТолькоДопустимые, Период) Экспорт
	
	Если ТолькоДопустимые Тогда
		НалогиИсключения = ЕдиныйНалоговыйСчетПовтИсп.МассивНедоступныхВидовНалогов(Истина);
	Иначе
		НалогиИсключения = ЕдиныйНалоговыйСчетПовтИсп.МассивДоступныхВидовНалогов();
	КонецЕсли;
	ОбслуживаемыеСчетаУчета = ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчета(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НалогиИсключения", НалогиИсключения);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Ссылка,
		|	ВидыНалоговИПлатежейВБюджет.КодБК КАК КодБК,
		|	ВидыНалоговИПлатежейВБюджет.Наименование КАК Наименование,
		|	ВидыНалоговИПлатежейВБюджет.СчетУчета КАК СчетУчета
		|ИЗ
		|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
		|ГДЕ
		|	НЕ ВидыНалоговИПлатежейВБюджет.ВидНалога В (&НалогиИсключения)
		|	И ВидыНалоговИПлатежейВБюджет.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает суммы по видам налогов, которые зарезервированы по заявлениям
//
// Параметры:
//   Налог     - Массив из СправочникСсылка.ВидыНалоговИПлатежейВБюджет - Виды налогов
//   Документы - Массив из ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности - Заявления о зачете
//
// Возвращаемое значение:
//   ТаблицаЗначений
//    * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//    * Сумма - Число
//
Функция ЗарезервированыеСуммыПоВидамНалогов(ВидыНалогов, Документы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог КАК Налог,
	|	СУММА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Налоги КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги
	|ГДЕ
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Ссылка В(&Документы)
	|	И ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог В(&ВидыНалогов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог");
		
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("ВидыНалогов", ВидыНалогов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает сумму, которые зарезервирована по организации за период по конкретному виду налога
//
// Параметры:
//   Организаци    - СправочникСсылка.Организации - Организация, по которой необходимо вычислить зарезервированную сумму
//   ДатаНачала    - Дата - Дата периода, с которого необходимо рассчитать зарезервированную сумму
//   датаОкончания - Дата - Дата периода, по которую необходимо рассчитать зарезервированную сумму
//   ВидНалога     - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - Вид налогов
//
// Возвращаемое значение:
//   Число
//
Функция ЗарезервированнаяСуммаЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидНалога) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Сумма), 0) КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Налоги КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
	|		ПО ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Ссылка = ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Проведен)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанностиНалоги.Налог = &Налог)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Организация = &Организация)
	|			И (ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Налог", ВидНалога);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Сумма;
	
КонецФункции

// Возвращает суммы по видам налогов, которые отражены на едином налоговом счете
//
// Параметры:
//   Документы - Массив из ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету - Операции по ЕНС
//
// Возвращаемое значение:
//   ТаблицаЗначений
//    * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//    * Сумма - Число
//
Функция ОперацииЕНСПоВидамНалогов(Документы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог КАК Налог,
	|	СУММА(ОперацияПоЕдиномуНалоговомуСчетуНалоги.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОперацияПоЕдиномуНалоговомуСчету.Налоги КАК ОперацияПоЕдиномуНалоговомуСчетуНалоги
	|ГДЕ
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Ссылка В(&Документы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацияПоЕдиномуНалоговомуСчетуНалоги.Налог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог");
	
	Запрос.УстановитьПараметр("Документы", Документы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет можно ли для данного налога использовать отрицательную сумму в уведомлении
//
// Параметры:
//  Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - проверяемый налог
// 
// Возвращаемое значение:
//  Булево - Истина, если можно
//
Функция МожноИспользоватьОтрицательнуюСуммуВУведомлении(Налог) Экспорт
	Возврат Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы)
		Или Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы)
		Или Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕСХН)
		Или Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ИП)
		Или Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
КонецФункции

// Функция возвращает таблицу зачета налогов за заданный период.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - Организация для получения остатков
//  ДатаНачала      - Дата начала осмотра.
//  ДатаОкончания   - Дата окончания осмотра.
//  ВидыНалогов     - Массив значений ПеречислениеСсылка.ВидыНалогов
//
// Возвращаемое значение:
//  Таблица значений 
//     Организация - СправочникСсылка.Организации 
//     Сумма       - Число - Сумма зачтенной уплаты
//     Ссылка      - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.РасходныйКассовыйОрдер
//     Дата        - Дата - Дата отражения в учете
//     Уведомление - ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности - Заявление о зачете сумм на ЕНС
//     Оплачено    - Булево - Признак состояние оплаченого вида налога
//     Состояние   - ПеречислениеСсылка.СостоянияБанковскихДокументов - Состояние оплаченого вида налог
//
Функция ЗачтенныеУплатыНалоговПоДокументамЗаПериод(Организация, ДатаНачала, ДатаОкончания, ВидыНалогов) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма) КАК Сумма,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент КАК Ссылка,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период КАК Дата,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор КАК Уведомление,
	|	ИСТИНА КАК Оплачено,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено) КАК Состояние
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = &ВидДвижения)
	|			И (ВидыНалоговИПлатежейВБюджет.ВидНалога В (&ВидыНалогов))
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность)
	|			И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор ССЫЛКА Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ПлатежныйДокумент,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",       КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидДвижения",         ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидыНалогов",         ВидыНалогов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗначенияРеквизитовЕдиногоНалоговогоСчета() Экспорт
	
	// Реквизиты единого налогового счета едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура();
	
	Реквизиты.Вставить("БИК",           "017003983");
	Реквизиты.Вставить("РасчетныйСчет", "03100643000000018500");
	Реквизиты.Вставить("КоррСчет",      "40102810445370000059");
	Реквизиты.Вставить("НаименованиеБанка",
		НСтр("ru = 'ОТДЕЛЕНИЕ ТУЛА БАНКА РОССИИ//УФК по Тульской области г. Тула'"));
	Реквизиты.Вставить("ТекстКорреспондента", "");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоРеквизитыЕдиногоНалоговогоСчета(ПлатежныеРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеРеквизиты) Или ТипЗнч(ПлатежныеРеквизиты) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЕНС = ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	КлючиДляПроверки = Новый Структура("БИК, РасчетныйСчет, КоррСчет");
	
	Для Каждого КлючИЗначение Из КлючиДляПроверки Цикл
		Если Не ПлатежныеРеквизиты.Свойство(КлючИЗначение.Ключ)
			Или РеквизитыЕНС[КлючИЗначение.Ключ] <> ПлатежныеРеквизиты[КлючИЗначение.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитыМИДол() Экспорт
	
	// Реквизиты получателя единого налогового платежа едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Вид", Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	Реквизиты.Вставить("Код", "9967");
	Реквизиты.Вставить("ИНН", "7727406020");
	Реквизиты.Вставить("КПП", "770801001");
	Реквизиты.Вставить("Наименование",
		НСтр("ru = 'МИ ФНС России по управлению долгом'"));
	Реквизиты.Вставить("ПолноеНаименование",
		НСтр("ru = 'Межрегиональная инспекция Федеральной налоговой службы по управлению долгом'"));
	
	Реквизиты.Вставить("ПлатежныеРеквизиты", ЗначенияРеквизитовЕдиногоНалоговогоСчета());
	
	Реквизиты.ПлатежныеРеквизиты.Вставить("Банк");
	Реквизиты.ПлатежныеРеквизиты.Вставить("БанковскийСчет");
	Реквизиты.ПлатежныеРеквизиты.Вставить("ПолучательПлатежа",
		НСтр("ru = 'Казначейство России (ФНС России)'"));
	
	Возврат Реквизиты;
	
КонецФункции

Функция ОКТМОЕдиногоНалоговогоСчета() Экспорт
	
	Возврат "0";
	
КонецФункции

Функция КППОКТМООрганизацииДляУплатыВБюджет(Знач Организация, Налог, Период) Экспорт
	
	РеквизитыОрганизации = Новый Структура("КПП, ОКТМО");
	
	НалогиУплачиваемыеОтдельно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеОтдельно();
	НалогУплачиваетсяОтдельно  = НалогиУплачиваемыеОтдельно.Найти(Налог) <> Неопределено;
	ЭтоЕНП = Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ЕдиныйНалоговыйПлатеж;
	
	Если ЭтоЕНП Или Не НалогУплачиваетсяОтдельно Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж()
		И УчетнаяПолитика.ПлательщикЕНП(Организация, Период);
	
	РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, Период);
	РеквизитыОрганизации.КПП    = Справочники.Организации.КППНаДату(Организация, Период, Ложь);
	
	Если ПустаяСтрока(РеквизитыОрганизации.КПП)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		РеквизитыОрганизации.КПП = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	КонецЕсли;
	
	Если ЭтоЕНП И ИспользуетсяЕдиныйНалоговыйПлатеж Тогда
		РеквизитыОрганизации.ОКТМО = ОКТМОЕдиногоНалоговогоСчета();
	Иначе
		РеквизитыОрганизации.ОКТМО = Справочники.РегистрацииВНалоговомОргане.КодТерритории(
			РегистрацияВНалоговомОргане, "ОКТМО");
	КонецЕсли;
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

Процедура ПлатежныеРеквизитыЕдиногоНалоговогоСчета(ПлатежныеРеквизиты) Экспорт
	
	ЗаполнитьЗначенияСвойств(ПлатежныеРеквизиты,
		ЗначенияРеквизитовЕдиногоНалоговогоСчета());
	
КонецПроцедуры

Процедура ПроверкаРеквизитовЕдиногоНалоговогоПлатежа(Организация) Экспорт
	
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодНалоговогоОргана");
	Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат
	КонецЕсли;
	ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		КодНалоговогоОргана);
	ГосударственныйОрганСсылка = ГосударственныйОрган.Ссылка;
	Если Не ЗначениеЗаполнено(ГосударственныйОрганСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйБанковскийСчетГосударственногоОргана(ГосударственныйОрганСсылка);
	
КонецПроцедуры

Функция ЕдиныйБанковскийСчетГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ГосударственныйОрган) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	ЗначенияРеквизитовСчета = ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	Банк = РаботаСБанкамиБП.БанкПоПлатежнымРеквизитам(ЗначенияРеквизитовСчета);
	
	// Находим или создаем счет
	НомерСчетаЕдиногоНалоговогоПлатежа = ЗначенияРеквизитовСчета.РасчетныйСчет;
	
	БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ГосударственныйОрган,
		Банк,
		НомерСчетаЕдиногоНалоговогоПлатежа);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьЭлемент(ГосударственныйОрган,
			НомерСчетаЕдиногоНалоговогоПлатежа,
			ЗначенияРеквизитовСчета.БИК);
			
		РеквизитыГосударственногоОргана = ДанныеГосударственныхОрганов.ПолучитьПлатежныеРеквизитыКонтрагента(ГосударственныйОрган);
		Если РеквизитыГосударственногоОргана <> Неопределено Тогда
			БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
			БанковскийСчетОбъект.ТекстКорреспондента = РеквизитыГосударственногоОргана.ПлатежныеРеквизиты.ПолучательПлатежа;
			БанковскийСчетОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция КБКВозвратаПоЕНП() Экспорт
	
	Возврат "18201061201010000610";
	
КонецФункции

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения.ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период);
	
	Если Реквизиты.Период <= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		РаспределитьОплатуПоОстаткамРасчетов263ФЗ(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	Иначе
		РаспределитьОплатуПоОстаткамРасчетов565ФЗ(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Вставить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Истина);
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		Параметры, Параметры.Реквизиты);
		
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
		Параметры, Движения, Отказ);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5ПоТаблицам(Параметры,
		Параметры.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		Параметры,
		Параметры.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП,
		Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура СобратьТаблицыПогашенияНалоговПоРегистратору(ПараметрыПроведения, Движения) Экспорт
	
	ПараметрыПроведения.Вставить("ТаблицаУплатыПоЕдиномуНалоговомуСчету", Неопределено);
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПроведения, "ТаблицаНалогов");
	Если ТаблицаНалогов = Неопределено Тогда
		ТаблицаНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
		Если ТаблицаНалогов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТаблицаНалогов.Свернуть("СчетУчета, КодБК, Налог, РегистрацияВНалоговомОргане, СрокУплаты, ПлатежныйДокумент", "Сумма");
	
	ПлатежныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалогов, "ПлатежныйДокумент", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Номер КАК Номер,
	|	ДанныеПервичныхДокументов.Дата КАК Дата,
	|	ДанныеПервичныхДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Документ В(&ПлатежныеДокументы)";
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	ДанныеПервичныхДокументов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		ДанныеПервичныхДокументов.Вставить(СтрокаТаблицы.Документ,
			Новый Структура("Дата, Номер", СтрокаТаблицы.Дата, СтрокаТаблицы.Номер));
	КонецЦикла;
	
	ТаблицаНалогов.Колонки.Добавить("НомерВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТаблицаНалогов.Колонки.Добавить("ДатаВходящегоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТаблицаУплатыПоНалогам = ТаблицаНалогов.СкопироватьКолонки();
	ТаблицаУплатыПоНалогам.Колонки.Добавить("ТаблицаУплатыПоНалогам");
	
	ПеречислениеНалоговИсходная = ТаблицаРасшифровкиПлатежа();
	
	Налоги = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалогов, "Налог", Истина);
	ВидыНалогов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Налоги, "ВидНалога");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		
		ВидНалога = ВидыНалогов[СтрокаТаблицы.Налог];
		
		ВидПлатежа =
			Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаТаблицы.КодБК, Реквизиты.Период, ВидНалога);
		
		НоваяСтрокаТаблицыНалогов = ТаблицаУплатыПоНалогам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНалогов, СтрокаТаблицы);
		
		ДанныеДокумента = ДанныеПервичныхДокументов[СтрокаТаблицы.ПлатежныйДокумент];
		Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
			НоваяСтрокаТаблицыНалогов.НомерВходящегоДокумента = ДанныеДокумента.Номер;
			НоваяСтрокаТаблицыНалогов.ДатаВходящегоДокумента  = ДанныеДокумента.Дата;
		КонецЕсли;
		
		ТаблицаНалога = ПеречислениеНалоговИсходная.СкопироватьКолонки();
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		НоваяСтрока = ТаблицаНалога.Добавить();
		НоваяСтрока.СчетДт                               = СтрокаТаблицы.СчетУчета;
		НоваяСтрока.СубконтоДт1                          = ВидПлатежа;
		
		СубконтоРегистрацияВНалоговомОргане = Ложь;
		НалоговыйУчетОбособленныхПодразделений.ОпределитьСубконтоРегистрацияВНалоговомОргане(СубконтоРегистрацияВНалоговомОргане, СвойстваСчета.ВидСубконто2);
		Если СубконтоРегистрацияВНалоговомОргане Тогда
			НоваяСтрока.СубконтоДт2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		Иначе
			НалоговыйУчетОбособленныхПодразделений.ОпределитьСубконтоРегистрацияВНалоговомОргане(СубконтоРегистрацияВНалоговомОргане, СвойстваСчета.ВидСубконто3);
			Если СубконтоРегистрацияВНалоговомОргане Тогда
				НоваяСтрока.СубконтоДт3 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.РегистрацияВНалоговомОргане          = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		НоваяСтрока.СуммаРуб                             = СтрокаТаблицы.Сумма;
		НоваяСтрока.Период                               = Реквизиты.Период;
		НоваяСтрока.НалоговыйПериод                      = НачалоМесяца(СтрокаТаблицы.СрокУплаты);
		НоваяСтрокаТаблицыНалогов.ТаблицаУплатыПоНалогам = ТаблицаНалога;
		
	КонецЦикла;
	
	ПараметрыПроведения.Вставить("ТаблицаУплатыПоЕдиномуНалоговомуСчету", ТаблицаУплатыПоНалогам);
	
КонецПроцедуры

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоУведомлению(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоДвижениямДокумента(ПараметрыПроведения.Реквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период, Реквизиты.Регистратор);
	
	РаспределитьОплатуПоДвижениямДокумента(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Вставить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Истина);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету, "ВидОперации");
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		Параметры, Параметры.Реквизиты);
		
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
		Параметры, Движения, Отказ);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5ПоТаблицам(Параметры,
		Параметры.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		Параметры,
		Параметры.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП,
		Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениюОЗачете(ПараметрыПроведения, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениеОЗачете(ПараметрыПроведения.Реквизиты, ТаблицаНалоги);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период, Реквизиты.Регистратор);
	
	ДоступныйОстаток = ТаблицаОстатковНаЕдиномНалоговомСчете.Итог("Сумма");
	СуммаКЗачету     = Параметры.ТаблицаНалоги.Итог("Сумма");
	Если ДоступныйОстаток < СуммаКЗачету Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сумма, заявленная к зачету (%1) превышает доступный остаток ЕНС по данным учета в программе (%2).'"),
			Формат(СуммаКЗачету, "ЧДЦ=2; ЧН=0,00"), Формат(ДоступныйОстаток, "ЧДЦ=2; ЧН=0,00"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ТекстСообщения =
			НСтр("ru='Проведите сверку сальдо ЕНС с данными личного кабинета ФНС и отразите в программе недостающую инфорацию об уплате ЕНП.
			|Это позволит избежать отказа в приеме ""Заявления о зачете"" и признать сумму налога заявленную к зачету в полном объеме.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	РаспределитьПредварительнуюОплатуПоТаблицеДвижений(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Параметры.ТаблицаНалоги, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Вставить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Истина);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету, "ВидОперации");
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		Параметры, Параметры.Реквизиты);
		
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
		Параметры, Движения, Отказ);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5ПоТаблицам(Параметры,
		Параметры.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		Параметры,
		Параметры.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП,
		Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалогов);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Период < НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУплатыПоНалогам = Параметры.ТаблицаНалоги.Скопировать(Новый Структура("КорректировкаЕНС", Ложь));
	Параметры.Вставить("ТаблицаНалогов", ТаблицаУплатыПоНалогам);
	
	// Отражение факта уплаты по видам учетов
	
	Параметры.Реквизиты.Колонки.Добавить("ВидОперации",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	Параметры.Реквизиты.Колонки.Добавить("СчетУчета",                           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Реквизиты.Колонки.Добавить("ДатаВходящегоДокумента",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Параметры.Реквизиты.Колонки.Добавить("НомерВходящегоДокумента",             ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Параметры.Реквизиты.Колонки.Добавить("ПлатежныйДокумент",                   Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Параметры.Вставить("ЗачетАвансаПоЕдиномуНалоговомуСчету", Истина);
	
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ВидыРегламентныхОпераций.ЗачетАвансаПоЕдиномуНалоговомуСчету, "ВидОперации");
	
	СобратьТаблицыПогашенияНалоговПоРегистратору(Параметры, Движения);
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		Параметры, Параметры.Реквизиты);
		
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(Параметры.Реквизиты,
		Параметры, Движения, Отказ);
		
	ДокументОбъект = Новый Структура;
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Регистратор", Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Движения",    Движения);
	ДокументОбъект.Вставить("Имя",         Реквизиты.Регистратор.Метаданные().Имя);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5ПоТаблицам(Параметры,
		Параметры.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		Параметры,
		Параметры.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП,
		Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ЭтоУведомлениеПоЕдиномуНалоговомуПлатежу(ИмяОтчета) Экспорт
	
	Возврат ИмяОтчета = "РегламентированноеУведомлениеИсчисленныеСуммыНалогов";
	
КонецФункции

Функция ЭтоЗаявлениеОЗачетеНалогаПоЕдиномуНалоговомуПлатежу(ИмяОтчета) Экспорт
	
	Возврат ИмяОтчета = "РегламентированноеУведомлениеЗачетНалога";
	
КонецФункции

Функция ТаблицаРасшифровкиПлатежа() Экспорт
	
	РасшифровкаПлатежаПрочее = Новый ТаблицаЗначений;
	РасшифровкаПлатежаПрочее.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СчетДт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СубконтоДт1",                 Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СубконтоДт2",                 Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СубконтоДт3",                 Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	РасшифровкаПлатежаПрочее.Колонки.Добавить("ПодразделениеДт",             Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("СуммаРуб",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("Период",                      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("НалоговыйПериод",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасшифровкаПлатежаПрочее.Колонки.Добавить("ПлатежныйДокумент",           Метаданные.РегистрыНакопления.РасчетыПоЕдиномуНалоговомуСчету.Измерения.ПлатежныйДокумент.Тип);
	
	Возврат РасшифровкаПлатежаПрочее;
	
КонецФункции

Функция ПараметрыПолученияОстатковРасчетов() Экспорт
	
	ПараметрыПолученияОстатковРасчетов = Новый Структура();
	ПараметрыПолученияОстатковРасчетов.Вставить("Организация",                     Справочники.Организации.ПустаяСсылка());
	ПараметрыПолученияОстатковРасчетов.Вставить("Дата",                            Дата('20100101'));
	ПараметрыПолученияОстатковРасчетов.Вставить("ВидОперации",                     Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПустаяСсылка());
	ПараметрыПолученияОстатковРасчетов.Вставить("СписокНалогов",                   Новый СписокЗначений);
	ПараметрыПолученияОстатковРасчетов.Вставить("ВводНачальныхДанных",             Ложь);
	ПараметрыПолученияОстатковРасчетов.Вставить("ВводитсяЗадолженностьПрошлыхЛет", Ложь);
	
	Возврат ПараметрыПолученияОстатковРасчетов;
	
КонецФункции

Функция ПолучитьОстаткиРасчетовПоНалогам(ПараметрыДокумента, Исключения = Неопределено) Экспорт
	
	Организация         = ПараметрыДокумента.Организация;
	Период              = НачалоДня(ПараметрыДокумента.Дата);
	ВидОперации         = ПараметрыДокумента.ВидОперации;
	ВводНачальныхДанных = ПараметрыДокумента.ВводНачальныхДанных;
	СписокНалогов       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДокумента, "СписокНалогов");

	МассивСчетовУчетаСОтрицательнойСуммой = Новый Массив;
	Если СписокНалогов <> Неопределено Тогда
		МассивСчетовУчета = Новый Массив;
		Для Каждого СтрокаСписка Из СписокНалогов Цикл
			СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаСписка.Значение);
			Если МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаСписка.Значение) Тогда
				МассивСчетовУчетаСОтрицательнойСуммой.Добавить(СчетУчета);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СчетУчета) Тогда
				МассивСчетовУчета.Добавить(СчетУчета);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивСчетовУчета = ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчета(Период-1);
		Для Каждого СчетУчета Из МассивСчетовУчета Цикл
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(СчетУчета, Организация, Период-1);
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
			Если МожноИспользоватьОтрицательнуюСуммуВУведомлении(Налог) Тогда
				МассивСчетовУчетаСОтрицательнойСуммой.Добавить(СчетУчета);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСчетовУчета,МассивСчетовУчетаСОтрицательнойСуммой);
	КонецЕсли;
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	Для Каждого СчетАгентскогоНДФЛ Из УчетЗарплаты.СписокСчетовАгентскогоНДФЛ() Цикл
		СчетаИсключения.Добавить(СчетАгентскогоНДФЛ.Значение);
	КонецЦикла;
	
	Если Исключения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключения, Исключения);
	КонецЕсли;
	
	ТаблицаНалогов = ОписаниеТаблицНалогов();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		ИмяТаблицы = "ТаблицаНалоги";
		Множитель = -1;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
		ИмяТаблицы = "ТаблицаСанкции";
		Множитель = -1;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		ИмяТаблицы = "ТаблицаЕдиныйСчет";
		Множитель = 1;
	Иначе
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	МассивСчетовУчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСчетовУчета);
	МассивСчетовУчетаСОтрицательнойСуммой = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСчетовУчетаСОтрицательнойСуммой);
	
	ТекущаяТаблица = ТаблицаНалогов[ИмяТаблицы];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков",                       Новый Граница(КонецДня(Период-1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",                           Организация);
	Запрос.УстановитьПараметр("МассивСчетовУчета",                     МассивСчетовУчета);
	Запрос.УстановитьПараметр("СчетаИсключения",                       СчетаИсключения);
	Запрос.УстановитьПараметр("Множитель",                             Множитель);
	Запрос.УстановитьПараметр("МассивСчетовУчетаСОтрицательнойСуммой", МассивСчетовУчетаСОтрицательнойСуммой);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	&Множитель * ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&МассивСчетовУчета)
	|				И НЕ Счет В (&МассивСчетовУчетаСОтрицательнойСуммой)
	|				И НЕ Счет В (&СчетаИсключения),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Множитель < 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток > 0
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Счет.Код,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	&Множитель * ХозрасчетныйОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&МассивСчетовУчетаСОтрицательнойСуммой)
	|				И НЕ Счет В (&СчетаИсключения),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКод";
	
	ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатки Цикл
		НоваяСтрока = ТекущаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ТекущаяТаблица.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
			НоваяСтрока.СчетЗатрат = СтрокаТаблицы.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	ТекущаяТаблица.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ЗаполнитьВидыНалогов(ТекущаяТаблица, Организация, Период);
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
		Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
			Если ВидыНалоговыхПлатежей.Найти(СтрокаТаблицы.ВидНалоговогоОбязательства) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
			Если Перечисления.ВидыПлатежейВГосБюджет.ЭтоПени(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ПениСам;
			ИначеЕсли Перечисления.ВидыПлатежейВГосБюджет.ЭтоШтраф(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
			ИначеЕсли Перечисления.ВидыПлатежейВГосБюджет.ЭтоПроценты(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Проценты;
			Иначе
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТекущаяТаблица.Удалить(СтрокаМассива);
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		ДозаполнитьТаблицуНалогов(ТекущаяТаблица, Организация, Период, ВводНачальныхДанных);
	КонецЕсли;
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Процедура ЗаполнитьВидыНалогов(ТекущаяТаблица, Организация, Период) Экспорт
	
	ОсновнаяРегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, Период);
	
	Если ТекущаяТаблица.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
		ИмяКолонкиСчет = "СчетЗатрат";
	Иначе
		ИмяКолонкиСчет = "СчетУчета";
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		ЗаполнятьРегистрацию = Истина;
	Иначе
		ЗаполнятьРегистрацию = Ложь;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("Налог") <> Неопределено Тогда
		ЗаполнятьНалог = Истина;
	Иначе
		ЗаполнятьНалог = Ложь;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("ВидПлатежаВГосБюджет") <> Неопределено  Тогда
		ЗаполнятьВидПлатежаВГосБюджет = Истина;
	Иначе
		ЗаполнятьВидПлатежаВГосБюджет = Ложь;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("УровеньБюджета") <> Неопределено  Тогда
		ЗаполнятьУровеньБюджета = Истина;
	Иначе
		ЗаполнятьУровеньБюджета = Ложь;
	КонецЕсли;
	
	ПрочиеНалогиИСборы = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы");
	
	Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ИмяКолонкиСчет]);
		
		Если ЗаполнятьРегистрацию Тогда
			НомерСубконто = НомерВидаСубконтоНаСчете(СвойстваСчета, "РегистрацияВНалоговомОргане", "СправочникСсылка.РегистрацииВНалоговомОргане");
			СтрокаТаблицы.РегистрацияВНалоговомОргане = ?(НомерСубконто > 0, 
				СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.РегистрацияВНалоговомОргане) Тогда
				СтрокаТаблицы.РегистрацияВНалоговомОргане = ОсновнаяРегистрацияВНалоговомОргане;
			КонецЕсли;
			СтрокаТаблицы.КодПоОКТМО = Справочники.РегистрацииВНалоговомОргане.КодТерритории(СтрокаТаблицы.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Если ЗаполнятьНалог Тогда
			НомерСубконто  = НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов");
			УровеньБюджета = ?(НомерСубконто > 0, СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(
				СтрокаТаблицы.СчетУчета, Организация, Период, УровеньБюджета);
			СтрокаТаблицы.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Налог) Или СтрокаТаблицы.Налог = ПрочиеНалогиИСборы Тогда
				СтрокаТаблицы.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина, Период);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Налог) Или СтрокаТаблицы.Налог = ПрочиеНалогиИСборы Тогда
				СтрокаТаблицы.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина, ДобавитьМесяц(Период,-12));
			КонецЕсли;
			Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Налог) Или СтрокаТаблицы.Налог = ПрочиеНалогиИСборы)
				И ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоРеквизиту("СчетУчета", СтрокаТаблицы.СчетУчета);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
				СтрокаТаблицы.Налог = ПрочиеНалогиИСборы;
			КонецЕсли;
			Если ЗаполнятьУровеньБюджета Тогда
				СтрокаТаблицы.УровеньБюджета = УровеньБюджета;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.ВидНалоговогоОбязательства = ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицы, ИмяКолонкиСчет);
		Если ЗаполнятьВидПлатежаВГосБюджет Тогда
			СтрокаТаблицы.ВидПлатежаВГосБюджет = СтрокаТаблицы.ВидНалоговогоОбязательства;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуНалогов(ТаблицаНалогов, Организация, Период, ВводНачальныхДанных) Экспорт
	
	СписокСчетовАгентскогоНДФЛ = УчетЗарплаты.СписокСчетовАгентскогоНДФЛ();
	
	Если ВводНачальныхДанных Тогда
		ПериодЗаполнения = НачалоДня(Период) - 1;
	Иначе
		ПериодЗаполнения = Период;
	КонецЕсли;
	
	ДатаОтноситсяКТринадцатомуПериоду = НачалоДня(Период) >= Дата(Год(ПериодЗаполнения), 12, 23);
	ДатаОтноситсяКоВторойПоловинеМесяца = Ложь;
	ПостояннаяПередачаЧастичныхУведомленийПоНДФЛ = Ложь;
	Если Период >= УчетЗарплаты.ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ() Тогда
		ПостояннаяПередачаЧастичныхУведомленийПоНДФЛ = Истина;
		ДатаОтноситсяКоВторойПоловинеМесяца = НачалоДня(Период) >= Дата(Год(ПериодЗаполнения), Месяц(ПериодЗаполнения), 23);
	КонецЕсли;
	
	ТаблицаНДФЛ = УчетЗарплаты.УдержанныйНДФЛЗаПериод(Организация, Период, ДатаОтноситсяКТринадцатомуПериоду Или ДатаОтноситсяКоВторойПоловинеМесяца);
	
	Для Каждого СтрокаНДФЛ Из ТаблицаНДФЛ Цикл
		СтрокаНалог = ТаблицаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНалог, СтрокаНДФЛ);
		СтрокаНалог.КодПоОКТМО = СтрокаНДФЛ.ОКАТО;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			СтрокаТаблицы.КодБК          = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(СтрокаТаблицы.Налог, , Период);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета      = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(СтрокаТаблицы.Налог, Период);
			КонецЕсли;
			
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Налог, "ВидНалога");
			Если ЗначениеЗаполнено(ВидНалога) Тогда
				
				ТринадцатыйПериод = Ложь;
				ЭтоНДФЛ = СписокСчетовАгентскогоНДФЛ.НайтиПоЗначению(СтрокаТаблицы.СчетУчета) <> Неопределено;
				ТринадцатыйПериод = ЭтоНДФЛ И ДатаОтноситсяКТринадцатомуПериоду;
				
				ПорядокУплаты = Неопределено;
				Если Не ЭтоНДФЛ Тогда
					ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
						Организация,
						ВидНалога,
						ПериодЗаполнения);
				КонецЕсли;
				
				Если ПорядокУплаты <> Неопределено Тогда
					СрокУплаты    = ПорядокУплаты.Срок;
					Периодичность = ПорядокУплаты.Периодичность;
				Иначе
					СрокУплаты = ОпределитьСрокУплаты(
						Организация,
						Новый Структура("КонецПериода, Налог", ПериодЗаполнения, СтрокаТаблицы.Налог),
						ЭтоНДФЛ,
						ТринадцатыйПериод Или ДатаОтноситсяКоВторойПоловинеМесяца);
					Периодичность = Перечисления.Периодичность.Месяц;
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
					Обработки.РасчетСтраховыхВзносовИП.УточнитьСрокУплатыВзносовСвышеПредела(СрокУплаты);
				КонецЕсли;
				
				СтрокаТаблицы.СрокУплаты = СрокУплаты;
				Если Периодичность <> Перечисления.Периодичность.Месяц Тогда
					СтрокаТаблицы.НачалоПериода = НачалоКвартала(ДобавитьМесяц(СрокУплаты, -3));
					СтрокаТаблицы.КонецПериода  = КонецКвартала(ДобавитьМесяц(СрокУплаты, -3));
				Иначе
					Если ТринадцатыйПериод Тогда
						СтрокаТаблицы.НачалоПериода = Дата(Год(СрокУплаты), 12, 23);
						СтрокаТаблицы.КонецПериода  = Дата(Год(СрокУплаты), 12, 31);
					ИначеЕсли ЭтоНДФЛ И ДатаОтноситсяКоВторойПоловинеМесяца Тогда
						ПериодУплаты = ДобавитьМесяц(СрокУплаты, -1);
						СтрокаТаблицы.НачалоПериода = Дата(Год(ПериодУплаты), Месяц(ПериодУплаты), 23);
						СтрокаТаблицы.КонецПериода  = КонецМесяца(ПериодУплаты);
					ИначеЕсли ЭтоНДФЛ И ПостояннаяПередачаЧастичныхУведомленийПоНДФЛ Тогда
						СтрокаТаблицы.НачалоПериода = НачалоМесяца(СрокУплаты);
						СтрокаТаблицы.КонецПериода  = Дата(Год(СрокУплаты), Месяц(СрокУплаты), 22);
					Иначе
						СтрокаТаблицы.НачалоПериода = НачалоМесяца(ДобавитьМесяц(СрокУплаты, ?(ЭтоНДФЛ,0, -1)));
						СтрокаТаблицы.КонецПериода  = КонецМесяца(ДобавитьМесяц(СрокУплаты, ?(ЭтоНДФЛ, 0,-1)));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ОпределитьСрокУплаты(Организация, ПараметрыСтроки, ЭтоНДФЛ, КонецОтчетногоМесяца = Ложь) Экспорт
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = НачалоГода(ПараметрыСтроки.КонецПериода) >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	Налог_НДС = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДС);
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСтроки.Налог, "ВидНалога");
	
	СрокУплатыНалога = Дата(1,1,1);
	Если ЗначениеЗаполнено(ВидНалога) И (Не ЭтоНДФЛ И ИспользуетсяЕдиныйНалоговыйПлатеж) Тогда
		ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация,
			ВидНалога,
			ПараметрыСтроки.КонецПериода,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокУплатыНалога, "Уплата", Неопределено);
		Если ПорядокУплаты <> Неопределено Тогда
			Если ТипЗнч(ПорядокУплаты) = Тип("Структура") Тогда
				СрокУплатыНалога = ПорядокУплаты.Срок;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СрокУплатыНалога) Или (ЭтоНДФЛ И ИспользуетсяЕдиныйНалоговыйПлатеж) Тогда
		
		ОтчетныйПериод = ПараметрыСтроки.КонецПериода;
		Если Не ЭтоНДФЛ И Не ПараметрыСтроки.Налог = Налог_НДС Тогда
			ОтчетныйПериод = КонецМесяца(ОтчетныйПериод) + 1;
		КонецЕсли;
		
		ГодУплаты   = Год(ОтчетныйПериод);
		МесяцУплаты = Месяц(ОтчетныйПериод);
		ДеньУплаты  = 28;// Общий порядок
		
		ТринадцатыйПериод = Ложь;
		Если ЭтоНДФЛ Тогда // есть особенности
			ТринадцатыйПериод = КонецОтчетногоМесяца И МесяцУплаты = 12;
			Если КонецОтчетногоМесяца И НЕ ТринадцатыйПериод Тогда
				МесяцУплаты = МесяцУплаты + 1; // срок уплаты в следующем месяце
				ДеньУплаты  = 5;
			ИначеЕсли ТринадцатыйПериод Тогда
				ДеньУплаты  = 31;
			КонецЕсли;
		КонецЕсли;
		
		СрокУплатыНалога = Дата(ГодУплаты, МесяцУплаты, ДеньУплаты);
		
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		
		ПараметрыПолученияБлижайшихРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат(ПроизводственныйКалендарь);
		Если ЭтоНДФЛ И ТринадцатыйПериод Тогда
			ПараметрыПолученияБлижайшихРабочихДат.ПолучатьПредшествующие = Истина;
		КонецЕсли;
		
		ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
			ПроизводственныйКалендарь,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СрокУплатыНалога),
			ПараметрыПолученияБлижайшихРабочихДат);
		НовыйСрокУплаты = ГрафикПереноса[СрокУплатыНалога];
		Если ЗначениеЗаполнено(НовыйСрокУплаты) Тогда
			СрокУплатыНалога = НовыйСрокУплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СрокУплатыНалога;
	
КонецФункции

#Область ФормированиеДвиженийВБухгалтерскомУчете

Процедура СформироватьПроводкиНачислениеНалогов(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНалогов(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СписокСчетовАгентскогоНДС = УчетНДСБП.СписокСчетовАгентскогоНДС();
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (начисление):'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	// Аналитика
	Если ТаблицаНалоги.Колонки.Найти("ВидПлатежа") = Неопределено Тогда
		ТаблицаНалоги.Колонки.Добавить("ВидПлатежа", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	КонецЕсли;
	Если ТаблицаНалоги.Колонки.Найти("УровеньБюджета") = Неопределено Тогда
		ТаблицаНалоги.Колонки.Добавить("УровеньБюджета", Новый ОписаниеТипов("ПеречислениеСсылка.УровниБюджетов"));
	КонецЕсли;
	
	ЕстьКолонкаВидПлатежаВГосБюджет = ТаблицаНалоги.Колонки.Найти("ВидПлатежаВГосБюджет") <> Неопределено;
	
	ВидыНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалоги, "Налог"), "ВидНалога");
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		ВидНалога = ВидыНалога[СтрокаТаблицы.Налог];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.УровеньБюджета) Тогда
			СтрокаТаблицы.УровеньБюджета
				= РасчетыСБюджетом.УровеньБюджета(ВидНалога);
		КонецЕсли;
		Если ЕстьКолонкаВидПлатежаВГосБюджет И ЗначениеЗаполнено(СтрокаТаблицы.ВидПлатежаВГосБюджет) Тогда
			СтрокаТаблицы.ВидПлатежа = СтрокаТаблицы.ВидПлатежаВГосБюджет;
		Иначе
			СтрокаТаблицы.ВидПлатежа =
				Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаТаблицы.КодБК, Реквизиты.Период, ВидНалога);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПлатежа) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	РазделитьФиксированныеВзносыПоВидамПлатежа(Реквизиты, ТаблицаНалоги);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если СписокСчетовАгентскогоНДС.НайтиПоЗначению(СтрокаТаблицы.СчетУчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.КорректировкаЕНС Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
				Проводка.Содержание,
				СокрЛП(Строка(СтрокаТаблицы.Налог)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		Проводка.СчетКт = СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", СтрокаТаблицы.ВидПлатежа);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УровниБюджетов",         СтрокаТаблицы.УровеньБюджета);
		НомерСубконто = НомерВидаСубконтоНаСчете(СвойстваСчета, "РегистрацияВНалоговомОргане", "СправочникСсылка.РегистрацииВНалоговомОргане");
		Если НомерСубконто <> 0 Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, СтрокаТаблицы.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиУплатаНалогов(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыУплатаНалогов(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (погашение задолженности):'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
				Проводка.Содержание,
				СокрЛП(Строка(СтрокаТаблицы.Налог)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СчетУчета;
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеПенейШтрафов(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеПенейШтрафов(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (начисление штрафов и пеней):'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПлатежа) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
				Проводка.Содержание,
				СокрЛП(Строка(СтрокаТаблицы.ВидПлатежа)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		Проводка.СчетКт = СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПогашениеПенейШтрафов(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПогашениеПенейШтрафов(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (погашение штрафов и пеней):'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПлатежа) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
				Проводка.Содержание,
				СокрЛП(Строка(СтрокаТаблицы.ВидПлатежа)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СчетУчета;
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНалоговыйАгентНДС(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеНалоговыйАгентНДС(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый платеж (начисление):'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			Проводка.Содержание = СтрШаблон(НСтр("ru='%1 %2'"),
				Проводка.Содержание,
				СокрЛП(Строка(СтрокаТаблицы.Налог)));
		КонецЕсли;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		Проводка.СчетКт = СчетУчета;
		
		// Аналитика
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",                     СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",                        СтрокаТаблицы.Договор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.ДокументРасчетов);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные",                    СтрокаТаблицы.ДокументРасчетов);
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПополнениеСчета(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПополнениеСписание(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый счет: пополнение'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СчетУчета;
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		// Аналитика
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСписаниеСоСчета(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПополнениеСписание(ТаблицаРеквизиты, ТаблицаНалоги);
	
	Проводки  = Движения.Хозрасчетный;
	Реквизиты = ТаблицаРеквизиты[0];
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	
	СодержаниеПроводки = НСтр("ru='Единый налоговый счет: списание'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка             = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		Проводка.СчетКт = СчетУчета;
		
		// Аналитика
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете И СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийПоРегистрам

Процедура СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ, Сторно = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	СтрокаСвертки = "СчетУчета, Налог, КодБК, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидДвижения";
	Если ТаблицаНалоги.Колонки.Найти("ПлатежныйДокумент") <> Неопределено Тогда
		СтрокаСвертки = СтрокаСвертки + ", ПлатежныйДокумент";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(СтрокаСвертки, "Сумма");
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		
		// При отрицательной сумме по УСН или ЕСХН формируем движение Расход
		Если Не Сторно
			И СтрокаТаблицы.Сумма < 0
			И МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаТаблицы.Налог) Тогда
			СформироватьДвиженияУСНПоПредыдущимСрокамУплаты(НаборДвижений, СтрокаТаблицы, Реквизиты, ГоловнаяОрганизация);
		Иначе
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрока.Активность = Истина;
		КонецЕсли;
	КонецЦикла;
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоСанкциямНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗачислениеНаЕдиныйНалоговыйСчет(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	
	СуммаЕдиногоНалоговогоПлатежа = 0;
	Если ТаблицаНалоги.Колонки.Найти("СчетДт") <> Неопределено Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			Если СтрокаТаблицы.СчетДт = СчетУчета Тогда
				СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа + СтрокаТаблицы.СуммаРуб;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СуммаЕдиногоНалоговогоПлатежа = СуммаПлатежаКВозврату(ТаблицаНалоги, ГоловнаяОрганизация, Реквизиты.Период);
	КонецЕсли;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетов = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить();
	НоваяСтрока = ТаблицаРасчетов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
	НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
	НоваяСтрока.Сумма               = СуммаЕдиногоНалоговогоПлатежа;
	НоваяСтрока.ВидДвижения         = ВидДвиженияНакопления.Приход;
	НоваяСтрока.ПлатежныйДокумент   = Реквизиты.Регистратор;
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаРасчетов, Движения, Отказ);
	
КонецПроцедуры

Процедура ЗарегистрироватьВозвратНаЕдиныйНалоговыйСчет(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не УчетнаяПолитика.ПлательщикЕНП(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	
	СуммаЕдиногоНалоговогоПлатежа = 0;
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		Если СтрокаТаблицы.СчетКт = СчетУчета Тогда
			СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа + СтрокаТаблицы.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(
		Реквизиты.Организация, Реквизиты.Период, Реквизиты.Регистратор);
	ТаблицаОстатковНаЕдиномНалоговомСчете.Сортировать("ДатаРегистратора УБЫВ");
	ТаблицаРасчетов = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить();
	
	Для Каждого СтрокаОстатка Из ТаблицаОстатковНаЕдиномНалоговомСчете Цикл
		Если СтрокаОстатка.Сумма < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СуммаВозврата = ?(СуммаЕдиногоНалоговогоПлатежа < СтрокаОстатка.Сумма,
			СуммаЕдиногоНалоговогоПлатежа, СтрокаОстатка.Сумма);
		СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа - СуммаВозврата;
		
		НоваяСтрока = ТаблицаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Организация         = СтрокаОстатка.Организация;
		НоваяСтрока.Сумма               = СуммаВозврата;
		НоваяСтрока.ВидДвижения         = ВидДвиженияНакопления.Расход;
		НоваяСтрока.ПлатежныйДокумент   = СтрокаОстатка.ПлатежныйДокумент;
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа > 0 Тогда
		НоваяСтрока = ТаблицаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Сумма               = СуммаЕдиногоНалоговогоПлатежа;
		НоваяСтрока.ВидДвижения         = ВидДвиженияНакопления.Расход;
		НоваяСтрока.ПлатежныйДокумент   = Реквизиты.Регистратор;
	КонецЕсли;
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаРасчетов, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги = ТаблицаНалогов.Скопировать();
	КолонкиСвертки = "ПлатежныйДокумент, ВидДвижения";
	Если ТаблицаНалоги.Колонки.Найти("Организация") <> Неопределено Тогда
		КолонкиСвертки = КолонкиСвертки + ", Организация";
	КонецЕсли;
	Если ТаблицаНалоги.Колонки.Найти("Период") <> Неопределено Тогда
		КолонкиСвертки = КолонкиСвертки + ", Период";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСвертки, "Сумма");
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоЕдиномуНалоговомуСчету;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность  = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

// Списание всех остатков по всем регистрам ЕНС при переходе на простой учет.
//
// Параметры:
//  ТаблицаРеквизиты - Структура - таблица с реквизитами регламентной операции. Должна иметь колонки:
//  	* Период 		- Дата - Дата документа.
//  	* Организация 	- СправочникСсылка.Организации - Организация документа.
//  Движения - КоллекцияДвижений - наборы записей движений документа.
//  Отказ	 - Булево - Отказ от записи при ошибке.
//
Процедура СписатьОстаткиПоРегистрамЕНС(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	НачалоПростогоУчета = НачалоПростогоУчета();
	Если КонецМесяца(Реквизиты.Период) + 1 <> НачалоПростогоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасчетыПоЕдиномуНалоговомуСчету.Записать();
	Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Записать();
	Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Остатки.Организация КАК Организация,
	|	Остатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	-Остатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету.Остатки(&Период, ГоловнаяОрганизация = &Организация) КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Остатки.Организация КАК Организация,
	|	Остатки.СчетУчета КАК СчетУчета,
	|	Остатки.Налог КАК Налог,
	|	Остатки.КодБК КАК КодБК,
	|	Остатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Остатки.КодПоОКТМО КАК КодПоОКТМО,
	|	Остатки.СрокУплаты КАК СрокУплаты,
	|	-Остатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(&Период, ГоловнаяОрганизация = &Организация) КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Остатки.Организация КАК Организация,
	|	Остатки.ВидПлатежа КАК ВидПлатежа,
	|	-Остатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Остатки(&Период, ГоловнаяОрганизация = &Организация) КАК Остатки";
	
	Запрос.УстановитьПараметр("Период", НачалоПростогоУчета);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаРасчетыПоЕдиномуНалоговомуСчету = Результаты[0].Выбрать();
	ВыборкаРасчетыПоНалогамНаЕдиномНалоговомСчете = Результаты[1].Выбрать();
	ВыборкаРасчетыПоСанкциямНаЕдиномНалоговомСчете = Результаты[2].Выбрать();
	
	Пока ВыборкаРасчетыПоЕдиномуНалоговомуСчету.Следующий() Цикл
		Движение = Движения.РасчетыПоЕдиномуНалоговомуСчету.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаРасчетыПоЕдиномуНалоговомуСчету);
		Движение.Период = НачалоПростогоУчета;
	КонецЦикла;
	Пока ВыборкаРасчетыПоНалогамНаЕдиномНалоговомСчете.Следующий() Цикл
		Движение = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаРасчетыПоНалогамНаЕдиномНалоговомСчете);
		Движение.Период = НачалоПростогоУчета;
	КонецЦикла;
	Пока ВыборкаРасчетыПоСанкциямНаЕдиномНалоговомСчете.Следующий() Цикл
		Движение = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаРасчетыПоСанкциямНаЕдиномНалоговомСчете);
		Движение.Период = НачалоПростогоУчета;
	КонецЦикла;
	
	Движения.РасчетыПоЕдиномуНалоговомуСчету.Записывать = Истина;
	Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Записывать = Истина;
	Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

Процедура СинхронизироватьСостояниеУведомлений(Уведомление) Экспорт
	
	Если Уведомление.ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	Иначе
		Уведомление.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомление",     Уведомление.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Уведомление.ПометкаУдаления);
	
	Если ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОбИсчисленныхСуммахНалогов") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
			|		ПО УведомлениеОбИсчисленныхСуммахНалогов.Уведомление = УведомлениеОСпецрежимахНалогообложения.Ссылка
			|ГДЕ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка = &Уведомление
			|	И УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления <> &ПометкаУдаления";
	ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументОбъект.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
			|		ПО ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Уведомление = УведомлениеОСпецрежимахНалогообложения.Ссылка
			|ГДЕ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка = &Уведомление
			|	И УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления <> &ПометкаУдаления";
	ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК УведомлениеОбИсчисленныхСуммахНалогов
			|ГДЕ
			|	УведомлениеОбИсчисленныхСуммахНалогов.Уведомление = &Уведомление
			|	И УведомлениеОбИсчисленныхСуммахНалогов.ПометкаУдаления <> &ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Ссылка
			|ИЗ
			|	Документ.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности КАК ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
			|ГДЕ
			|	ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.Уведомление = &Уведомление
			|	И ЗаявлениеОЗачетеВСчетПредстоящейОбязанности.ПометкаУдаления <> &ПометкаУдаления";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
		ДокументОбъект.УстановитьПометкуУдаления(Уведомление.ПометкаУдаления);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьОперациюПоЕНСВТихомРежиме(Организация, АдресХранилищаТаблицыНалоги, Правило, ПериодСобытия, ВыполненоВТихомРежиме) Экспорт
	
	ДокументОбъект = Документы.ОперацияПоЕдиномуНалоговомуСчету.СоздатьДокумент();
	
	Отказ = Ложь;
	
	ЗаполнитьОперациюПоЕНС(ДокументОбъект, Организация, АдресХранилищаТаблицыНалоги, Правило, ПериодСобытия, Отказ);
	
	Если Не Отказ Тогда
		ВыполненоВТихомРежиме = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОперациюПоЕНС(ДокументОбъект, Организация, АдресХранилищаТаблицыНалоги, Правило,
		ПериодСобытия, Отказ = Ложь) Экспорт
	
	Если КонецМесяца(ПериодСобытия) + 1 >= НачалоПростогоУчета() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
		ДокументОбъект.Организация = Организация;
		Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
			ДокументОбъект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		КонецЕсли;
		
		ТаблицыЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыНалоги);
		ТаблицаНалоги = ТаблицыЗаполнения.ТаблицаНалоги;
		ТаблицаНалоговыйАгентНДС = ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС;
		
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоги) Тогда
			ДокументОбъект.Налоги.Загрузить(ТаблицыЗаполнения.ТаблицаНалоги);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС) Тогда
			ДокументОбъект.НалоговыйАгентНДС.Загрузить(ТаблицыЗаполнения.ТаблицаНалоговыйАгентНДС);
		КонецЕсли;
		
		ДокументОбъект.СозданАвтоматически = Истина;
		
		ВыполнениеЗадачБухгалтера.УстановитьСвойстваУведомленияПриРегистрации(
			ДокументОбъект,
			Правило,
			ПериодСобытия);
			
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
			Отказ = Истина;
		КонецЕсли;
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось зарегистрировать отражение на ЕНС
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отражение на едином налоговом счете'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету,, 
			ТекстСообщения);
	
		ОтменитьТранзакцию();
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Функция НомерВидаСубконтоНаСчете(СвойстваСчета, ИмяВидаСубконто, ИмяТипаСубконто = "") Экспорт
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто].ИмяПредопределенныхДанных = ИмяВидаСубконто Тогда
			Возврат НомерСубконто;
		ИначеЕсли ПустаяСтрока(СвойстваСчета["ВидСубконто" + НомерСубконто].ИмяПредопределенныхДанных) И Не ПустаяСтрока(ИмяТипаСубконто) Тогда
			Если СвойстваСчета["ВидСубконто" + НомерСубконто].ТипЗначения.СодержитТип(Тип(ИмяТипаСубконто)) Тогда
				Возврат НомерСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция ОписаниеТаблицНалогов() Экспорт
	
	ТаблицыНалогов = Новый Структура();
	ТаблицыНалогов.Вставить("ТаблицаНалоги",            ОписаниеТаблицыНалогов());
	ТаблицыНалогов.Вставить("ТаблицаНалоговыйАгентНДС", ОписаниеТаблицыНалоговыйАгентНДС());
	ТаблицыНалогов.Вставить("ТаблицаСанкции",           ОписаниеТаблицыСанкции());
	ТаблицыНалогов.Вставить("ТаблицаЕдиныйСчет",        ОписаниеТаблицыЕдиныйСчет());
	
	Возврат ТаблицыНалогов;
	
КонецФункции

Функция ОписаниеТаблицыНалогов() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("Налог",                       Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаНалогов.Колонки.Добавить("КодБК",                       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ТаблицаНалогов.Колонки.Добавить("СчетУчета",                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНалогов.Колонки.Добавить("ВидПлатежаВГосБюджет",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаНалогов.Колонки.Добавить("УровеньБюджета",              Новый ОписаниеТипов("ПеречислениеСсылка.УровниБюджетов"));
	ТаблицаНалогов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаНалогов.Колонки.Добавить("КодПоОКТМО",                  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ТаблицаНалогов.Колонки.Добавить("Сумма",                       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНалогов.Колонки.Добавить("СрокУплаты",                  Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("СчетЗатрат",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНалогов.Колонки.Добавить("Субконто1",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто2",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто3",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("КлючСтроки",                  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаНалогов.Колонки.Добавить("НачалоПериода",               Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("КонецПериода",                Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ОписаниеТаблицыНалоговыйАгентНДС() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("КлючСтроки",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаНалогов.Колонки.Добавить("Контрагент",       Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаНалогов.Колонки.Добавить("Договор",          Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаНалогов.Колонки.Добавить("ДокументРасчетов", Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету.ТабличныеЧасти.НалоговыйАгентНДС.Реквизиты.ДокументРасчетов.Тип);
	ТаблицаНалогов.Колонки.Добавить("Сумма",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ОписаниеТаблицыСанкции() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("ВидПлатежа", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаНалогов.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНалогов.Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНалогов.Колонки.Добавить("Субконто1",  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто2",  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто3",  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ОписаниеТаблицыЕдиныйСчет() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("ВидДвижения",       Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету.ТабличныеЧасти.ЕдиныйСчет.Реквизиты.ВидДвижения.Тип);
	ТаблицаНалогов.Колонки.Добавить("ПлатежныйДокумент", Метаданные.Документы.ОперацияПоЕдиномуНалоговомуСчету.ТабличныеЧасти.ЕдиныйСчет.Реквизиты.ПлатежныйДокумент.Тип);
	ТаблицаНалогов.Колонки.Добавить("Сумма",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНалогов.Колонки.Добавить("СчетЗатрат",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНалогов.Колонки.Добавить("Субконто1",         Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто2",         Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто3",         Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция НалогиПоВиду(ВидыНалогов, Период = Неопределено) Экспорт
	
	МассивНалогов = Новый Массив;
	
	Для Каждого ВидНалога Из ВидыНалогов Цикл
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, , Период);
		Если ЗначениеЗаполнено(Налог) Тогда
			МассивНалогов.Добавить(Налог);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНалогов);
	
КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Функция ПодготовитьПараметрыНачислениеНалогов(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"КорректировкаЕНС,"			// <Булево>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыНачислениеНалоговыйАгентНДС(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"Контрагент,"					// <СправочникСсылка.Контрагенты>
	+"Договор,"						// <СправочникСсылка.ДоговорыКонтрагентов>
	+"ДокументРасчетов,"			// <ДокументСсылка>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыУплатаНалогов(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.УплатаНалогов
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"ПлатежныйДокумент,"			// <ДокументСсылка>
	+"СчетЗатрат,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"Субконто1,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто2,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто3,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"ОтражениеВУСН,"				// <ПеречислениеСсылка.ОтражениеВУСН>
	+"Подразделение,"				// <СправочникСсылка.ПодразделенияОрганизаций>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыНачислениеПенейШтрафов(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.НачислениеПенейШтрафов/Параметры.ПогашениеПенейШтрафов
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"ВидПлатежа,"					// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет>
	+"СчетЗатрат,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"Субконто1,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто2,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто3,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"ОтражениеВУСН,"				// <ПеречислениеСсылка.ОтражениеВУСН>
	+"Подразделение,"				// <СправочникСсылка.ПодразделенияОрганизаций>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПогашениеПенейШтрафов(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.НачислениеПенейШтрафов/Параметры.ПогашениеПенейШтрафов
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"ВидПлатежа,"					// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет>
	+"СчетЗатрат,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"Субконто1,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто2,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто3,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"ОтражениеВУСН,"				// <ПеречислениеСсылка.ОтражениеВУСН>
	+"Подразделение,"				// <СправочникСсылка.ПодразделенияОрганизаций>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"ПлатежныйДокумент,"			// <ДокументСсылка>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыПополнениеСписание(ТаблицаРеквизитов, ТаблицаНалоги)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+"Регистратор,"					// <ДокументСсылка>
	+"Период,"						// <Дата>
	+"Организация";					// <СправочникСсылка.Организация>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ПополнениеСчета/Параметры.СписаниеСоСчета
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"СчетЗатрат,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"Субконто1,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто2,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"Субконто3,"					// <ХарактеристикаСсылка.ВидыСубконтоХозрасчетные>
	+"ОтражениеВУСН,"				// <ПеречислениеСсылка.ОтражениеВУСН>
	+"Подразделение,"				// <СправочникСсылка.ПодразделенияОрганизаций>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"ПлатежныйДокумент,"			// <ДокументСсылка>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор,"       // <ДокументСсылка.*>
	+ "ВидОперации,"       // <ПеречислениеСсылка.ВидыРегламентныхОпераций>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоЗаявлениеОЗачете(ТаблицаРеквизиты, ТаблицаНалоги)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоОперацииЕНС(ТаблицаРеквизиты, ТаблицаНалоги)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Подготовка таблицы Параметры.ТаблицаНалоги
	
	СписокОбязательныхКолонок = ""
	+"НомерСтроки,"					// <Число>
	+"РегистрацияВНалоговомОргане,"	// <СправочникСсылка.РегистрацииВНалоговомОргане>
	+"КодПоОКТМО,"					// <Строка, 11>
	+"Налог,"						// <СправочникСсылка.ВидыНалоговИПлатежейВБюджет>
	+"КодБК,"						// <Строка, 20>
	+"СрокУплаты,"					// <Дата>
	+"СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+"ПлатежныйДокумент,"			// <ДокументСсылка>
	+"ВидДвижения,"					// <ВидДвиженияНакопления>
	+"КорректировкаЕНС,"			// <Булево>
	+"Сумма";						// <Число 15, 2>
	
	Параметры.Вставить("ТаблицаНалоги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалоги, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура РаспределитьОплатуПоОстаткамРасчетов263ФЗ(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	ДатаСменыАлгоритмаЗачетаУплат            = ДатаСменыАлгоритмаЗачетаУплат();
	ВерсияАлгоритмаЗачетаУплат               = ВерсияАлгоритмаЗачетаУплат(Реквизиты.Период);
	ДействуетНоваяВерсияАлгоритмаЗачетаУплат = ВерсияАлгоритмаЗачетаУплат = 2;
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	СуммыЕдиногоНалоговогоПлатежа.Сортировать("ДатаРегистратора Возр");
	
	НаборДвиженийНалог   = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	НаборДвиженийСанкции = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	ПериодОстатков      = Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",           ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",                   Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",                ПериодОстатков);
	Запрос.УстановитьПараметр("ПредельныйСрокУплаты",          Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаСменыАлгоритмаЗачетаУплат", ДатаСменыАлгоритмаЗачетаУплат);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты КАК СрокУплаты,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток) КАК Сумма,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаСменыАлгоритмаЗачетаУплат, ДЕНЬ)
	|			ТОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Недоимка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ОстаткиПоНалогам
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)
	|				И СрокУплаты <= &ПредельныйСрокУплаты) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ОстаткиПоНалогам.Организация КАК Организация,
	|	ВТ_ОстаткиПоНалогам.Налог КАК Налог,
	|	ВТ_ОстаткиПоНалогам.КодБК КАК КодБК,
	|	ВТ_ОстаткиПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_ОстаткиПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ОстаткиПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ОстаткиПоНалогам.СрокУплаты КАК СрокУплаты,
	|	ВТ_ОстаткиПоНалогам.Сумма КАК Сумма,
	|	ВТ_ОстаткиПоНалогам.Недоимка КАК Недоимка,
	|	ВТ_ОстаткиПоНалогам.Приоритет КАК Приоритет,
	|	ВТ_ОстаткиПоНалогам.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ЭтоНалог
	|ИЗ
	|	ВТ_ОстаткиПоНалогам КАК ВТ_ОстаткиПоНалогам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа КАК ВидПлатежа,
	|	СУММА(РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток) КАК Сумма,
	|	ВЫБОР
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|			ТОГДА 3
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|			ТОГДА 4
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Остатки(&ПериодОстатков, Организация В (&Организации)) КАК РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|			ТОГДА 3
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|			ТОГДА 4
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|			ТОГДА 5
	|	КОНЕЦ,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОстаткиПоНалогам  = Результат[1].Выгрузить();
	ОстаткиПоСанкциям = Результат[2].Выгрузить();
	
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	// Приоритеты 1 и 2. Погашение недоимки и текущих платежей
	Если Не ДействуетНоваяВерсияАлгоритмаЗачетаУплат Тогда
		СрокиУплаты = ОстаткиПоНалогам.Скопировать(, "СрокУплаты");
		СрокиУплаты.Свернуть("СрокУплаты", );
		СрокиУплаты.Сортировать("СрокУплаты");
		РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог)
	Иначе
		РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог)
	КонецЕсли;
	
	// Приоритеты 3-5. Погашение пеней, процентов и штрафов
	Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
		РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоСанкциям, НаборДвиженийСанкции);
	КонецЕсли;
	
	ТаблицаНалоги = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить().СкопироватьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийНалог.Выгрузить(),   ТаблицаНалоги);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийСанкции.Выгрузить(), ТаблицаНалоги);
	
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РаспределитьОплатуПоОстаткамРасчетов565ФЗ(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	
	// Исторически сначала был изменен приоритет зачета для НДФЛ, потом для страховых взносов.
	// Поэтому если не действует новая версия НДФЛ, то это значит, что и для взносов тоже не действует.
	ДатаСменыПоследовательностиЗачетаУплатНДФЛ   = ДатаСменыПоследовательностиЗачетаУплат();
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплатНДФЛ;
	ПереходныйПериодНДФЛ                         = НачалоМесяца(Реквизиты.Период) = НачалоМесяца(ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	СуммыЕдиногоНалоговогоПлатежа.Сортировать("ДатаРегистратора Возр");
	
	НаборДвиженийНалог   = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	НаборДвиженийСанкции = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	ПериодОстатков      = Новый Граница(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1)), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                            ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организации",                                    Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",                                 ПериодОстатков);
	Запрос.УстановитьПараметр("НачалоПериода",                                  НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",                                   КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ПредельныйСрокУплаты",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("ВсеВидыНалоговНДФЛ",                             ЕдиныйНалоговыйСчетПовтИсп.ВсеВидыНалоговНДФЛ());
	Запрос.УстановитьПараметр("ВидыНалоговНДФЛНалоговогоАгента",                ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента());
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор",                         Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатНДФЛ",   НоваяВерсияПоследовательностиЗачетаУплатНДФЛ);
	Запрос.УстановитьПараметр("ДатаПриоритезацииУведомленияПоНДФЛ",             ДатаПриоритезацииУведомленияПоНДФЛ());
	Запрос.УстановитьПараметр("ДатаПриоритезацииУведомленияПоСтраховымВзносам", ДатаПриоритезацииУведомленияПоСтраховымВзносам());
	Запрос.УстановитьПараметр("ВидыНалоговСтраховыеВзносы",                     ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период > РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоНДФЛ
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|					КОНЕЦ
	|			ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|		КОНЕЦ, ДЕНЬ) КАК Период,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма КАК Сумма,
	|	NULL КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет,
	|	ИСТИНА КАК ЭтоНалог
	|ПОМЕСТИТЬ ВТ_Начисление
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|					И &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ)
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|					И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ)
	|			ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты
	|		КОНЕЦ, ДЕНЬ),
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток),
	|	NULL,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)
	|				И НАЧАЛОПЕРИОДА(СрокУплаты, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И &НачалоПериода >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период, ДЕНЬ),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Сумма,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете КАК РасчетыПоСанкциямНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1), МЕСЯЦ),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СУММА(РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток),
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация В (&Организации)) КАК РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	ВЫБОР
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|						ТОГДА 6
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|						ТОГДА 7
	|					КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|						ТОГДА 8
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|					ТОГДА 3
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|					ТОГДА 4
	|				КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|					ТОГДА 5
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период > РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоНДФЛ
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|							ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|						ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|					КОНЕЦ
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Период, ДЕНЬ) < &ДатаПриоритезацииУведомленияПоНДФЛ
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты >= &ДатаПриоритезацииУведомленияПоНДФЛ
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|				ТОГДА &ДатаПриоритезацииУведомленияПоНДФЛ
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.Период, ДЕНЬ) < &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|				ТОГДА &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|			ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|		КОНЕЦ, ДЕНЬ),
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма,
	|	NULL,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|								И РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВсеВидыНалоговНДФЛ)
	|							ИЛИ НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = ЛОЖЬ
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|					ТОГДА 2
	|				КОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|						И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ТОГДА 4
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) > НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|	И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|				И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоНДФЛ
	|					ИЛИ РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты >= &ДатаПриоритезацииУведомленияПоНДФЛ)
	|			ИЛИ РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог В (&ВидыНалоговСтраховыеВзносы)
	|				И (РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам
	|					ИЛИ РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты >= &ДатаПриоритезацииУведомленияПоСтраховымВзносам))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Начисление.Период КАК Период,
	|	ВТ_Начисление.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Начисление.Организация КАК Организация,
	|	ВТ_Начисление.СчетУчета КАК СчетУчета,
	|	ВТ_Начисление.Налог КАК Налог,
	|	ВТ_Начисление.КодБК КАК КодБК,
	|	ВТ_Начисление.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Начисление.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Начисление.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_Начисление.Сумма) КАК Сумма,
	|	ВТ_Начисление.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_Начисление.Приоритет КАК Приоритет,
	|	ВТ_Начисление.ЭтоНалог КАК ЭтоНалог,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РасчетыПоНалогам
	|ИЗ
	|	ВТ_Начисление КАК ВТ_Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Начисление.ВидПлатежа,
	|	ВТ_Начисление.СрокУплаты,
	|	ВТ_Начисление.ЭтоНалог,
	|	ВТ_Начисление.Налог,
	|	ВТ_Начисление.Период,
	|	ВТ_Начисление.СчетУчета,
	|	ВТ_Начисление.РегистрацияВНалоговомОргане,
	|	ВТ_Начисление.ГоловнаяОрганизация,
	|	ВТ_Начисление.Организация,
	|	ВТ_Начисление.КодПоОКТМО,
	|	ВТ_Начисление.КодБК,
	|	ВТ_Начисление.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасчетыПоНалогам.Период КАК Период,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация КАК Организация,
	|	ВТ_РасчетыПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_РасчетыПоНалогам.Налог КАК Налог,
	|	ВТ_РасчетыПоНалогам.КодБК КАК КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_РасчетыПоНалогам.Сумма) КАК Сумма,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.Приоритет КАК Приоритет,
	|	ВТ_РасчетыПоНалогам.НомерСтроки КАК НомерСтроки,
	|	ВТ_РасчетыПоНалогам.ЭтоНалог КАК ЭтоНалог
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетыПромежуточная
	|ИЗ
	|	ВТ_РасчетыПоНалогам КАК ВТ_РасчетыПоНалогам
	|ГДЕ
	|	ВТ_РасчетыПоНалогам.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасчетыПоНалогам.Период,
	|	ВТ_РасчетыПоНалогам.КодБК,
	|	ВТ_РасчетыПоНалогам.Налог,
	|	ВТ_РасчетыПоНалогам.СрокУплаты,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.Организация,
	|	ВТ_РасчетыПоНалогам.ЭтоНалог,
	|	ВТ_РасчетыПоНалогам.СчетУчета,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Приоритет,
	|	ВТ_РасчетыПоНалогам.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|			ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты
	|		ИНАЧЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Период
	|	КОНЕЦ КАК Период,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Сумма КАК Сумма,
	|	NULL КАК ВидПлатежа
	|ПОМЕСТИТЬ ВТ_СписаниеПромежуточная
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.СрокУплаты <= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И РасчетыПоНалогамНаЕдиномНалоговомСчете.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Сумма,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете КАК РасчетыПоСанкциямНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Организация В(&Организации)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоСанкциямНаЕдиномНалоговомСчете.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписаниеПромежуточная.Период КАК Период,
	|	ВТ_СписаниеПромежуточная.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_СписаниеПромежуточная.Организация КАК Организация,
	|	ВТ_СписаниеПромежуточная.СчетУчета КАК СчетУчета,
	|	ВТ_СписаниеПромежуточная.Налог КАК Налог,
	|	ВТ_СписаниеПромежуточная.КодБК КАК КодБК,
	|	ВТ_СписаниеПромежуточная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_СписаниеПромежуточная.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_СписаниеПромежуточная.СрокУплаты КАК СрокУплаты,
	|	ВТ_СписаниеПромежуточная.Сумма КАК Сумма,
	|	ВТ_СписаниеПромежуточная.ВидПлатежа КАК ВидПлатежа,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Списание
	|ИЗ
	|	ВТ_СписаниеПромежуточная КАК ВТ_СписаниеПромежуточная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Списание.Период КАК Период,
	|	ВТ_Списание.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Списание.Организация КАК Организация,
	|	ВТ_Списание.СчетУчета КАК СчетУчета,
	|	ВТ_Списание.Налог КАК Налог,
	|	ВТ_Списание.КодБК КАК КодБК,
	|	ВТ_Списание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_Списание.Сумма) КАК Сумма,
	|	ВТ_Списание.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_Списание.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаЗачетыПромежуточная
	|ИЗ
	|	ВТ_Списание КАК ВТ_Списание
	|ГДЕ
	|	ВТ_Списание.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Списание.КодПоОКТМО,
	|	ВТ_Списание.СчетУчета,
	|	ВТ_Списание.Период,
	|	ВТ_Списание.РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодБК,
	|	ВТ_Списание.ВидПлатежа,
	|	ВТ_Списание.ГоловнаяОрганизация,
	|	ВТ_Списание.Налог,
	|	ВТ_Списание.СрокУплаты,
	|	ВТ_Списание.Организация,
	|	ВТ_Списание.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасчетыПоНалогам.Период КАК Период,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация КАК Организация,
	|	ВТ_РасчетыПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_РасчетыПоНалогам.Налог КАК Налог,
	|	ВТ_РасчетыПоНалогам.КодБК КАК КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.СрокУплаты КАК СрокУплаты,
	|	СУММА(-ВТ_РасчетыПоНалогам.Сумма) КАК Сумма,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ВТ_РасчетыПоНалогам КАК ВТ_РасчетыПоНалогам
	|ГДЕ
	|	ВТ_РасчетыПоНалогам.Сумма < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасчетыПоНалогам.СчетУчета,
	|	ВТ_РасчетыПоНалогам.ВидПлатежа,
	|	ВТ_РасчетыПоНалогам.ГоловнаяОрганизация,
	|	ВТ_РасчетыПоНалогам.Организация,
	|	ВТ_РасчетыПоНалогам.СрокУплаты,
	|	ВТ_РасчетыПоНалогам.КодПоОКТМО,
	|	ВТ_РасчетыПоНалогам.Налог,
	|	ВТ_РасчетыПоНалогам.КодБК,
	|	ВТ_РасчетыПоНалогам.РегистрацияВНалоговомОргане,
	|	ВТ_РасчетыПоНалогам.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРасчетыПромежуточная.Период КАК Период,
	|	ВТ_ТаблицаРасчетыПромежуточная.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаРасчетыПромежуточная.Организация КАК Организация,
	|	ВТ_ТаблицаРасчетыПромежуточная.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаРасчетыПромежуточная.Налог КАК Налог,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодБК КАК КодБК,
	|	ВТ_ТаблицаРасчетыПромежуточная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаРасчетыПромежуточная.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаРасчетыПромежуточная.Сумма) КАК Сумма,
	|	ВТ_ТаблицаРасчетыПромежуточная.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_ТаблицаРасчетыПромежуточная.Приоритет КАК Приоритет,
	|	ВТ_ТаблицаРасчетыПромежуточная.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаРасчетыПромежуточная.ЭтоНалог КАК ЭтоНалог,
	|	ЛОЖЬ КАК Недоимка
	|ИЗ
	|	ВТ_ТаблицаРасчетыПромежуточная КАК ВТ_ТаблицаРасчетыПромежуточная
	|ГДЕ
	|	ВТ_ТаблицаРасчетыПромежуточная.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРасчетыПромежуточная.ГоловнаяОрганизация,
	|	ВТ_ТаблицаРасчетыПромежуточная.ЭтоНалог,
	|	ВТ_ТаблицаРасчетыПромежуточная.ВидПлатежа,
	|	ВТ_ТаблицаРасчетыПромежуточная.Период,
	|	ВТ_ТаблицаРасчетыПромежуточная.Организация,
	|	ВТ_ТаблицаРасчетыПромежуточная.СчетУчета,
	|	ВТ_ТаблицаРасчетыПромежуточная.Налог,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодБК,
	|	ВТ_ТаблицаРасчетыПромежуточная.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаРасчетыПромежуточная.КодПоОКТМО,
	|	ВТ_ТаблицаРасчетыПромежуточная.СрокУплаты,
	|	ВТ_ТаблицаРасчетыПромежуточная.Приоритет,
	|	ВТ_ТаблицаРасчетыПромежуточная.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Списание.Период КАК Период,
	|	ВТ_Списание.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Списание.Организация КАК Организация,
	|	ВТ_Списание.СчетУчета КАК СчетУчета,
	|	ВТ_Списание.Налог КАК Налог,
	|	ВТ_Списание.КодБК КАК КодБК,
	|	ВТ_Списание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты КАК СрокУплаты,
	|	СУММА(-ВТ_Списание.Сумма) КАК Сумма,
	|	ВТ_Списание.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ВТ_Списание КАК ВТ_Списание
	|ГДЕ
	|	ВТ_Списание.Сумма < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Списание.ГоловнаяОрганизация,
	|	ВТ_Списание.Организация,
	|	ВТ_Списание.СчетУчета,
	|	ВТ_Списание.КодБК,
	|	ВТ_Списание.Налог,
	|	ВТ_Списание.РегистрацияВНалоговомОргане,
	|	ВТ_Списание.КодПоОКТМО,
	|	ВТ_Списание.СрокУплаты,
	|	ВТ_Списание.ВидПлатежа,
	|	ВТ_Списание.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗачетыПромежуточная.Период КАК Период,
	|	ВТ_ТаблицаЗачетыПромежуточная.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаЗачетыПромежуточная.Организация КАК Организация,
	|	ВТ_ТаблицаЗачетыПромежуточная.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаЗачетыПромежуточная.Налог КАК Налог,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодБК КАК КодБК,
	|	ВТ_ТаблицаЗачетыПромежуточная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаЗачетыПромежуточная.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаЗачетыПромежуточная.Сумма) КАК Сумма,
	|	ВТ_ТаблицаЗачетыПромежуточная.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_ТаблицаЗачетыПромежуточная.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_ТаблицаЗачетыПромежуточная КАК ВТ_ТаблицаЗачетыПромежуточная
	|ГДЕ
	|	ВТ_ТаблицаЗачетыПромежуточная.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЗачетыПромежуточная.Период,
	|	ВТ_ТаблицаЗачетыПромежуточная.ВидПлатежа,
	|	ВТ_ТаблицаЗачетыПромежуточная.СчетУчета,
	|	ВТ_ТаблицаЗачетыПромежуточная.Организация,
	|	ВТ_ТаблицаЗачетыПромежуточная.ГоловнаяОрганизация,
	|	ВТ_ТаблицаЗачетыПромежуточная.Налог,
	|	ВТ_ТаблицаЗачетыПромежуточная.СрокУплаты,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодПоОКТМО,
	|	ВТ_ТаблицаЗачетыПромежуточная.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаЗачетыПромежуточная.КодБК,
	|	ВТ_ТаблицаЗачетыПромежуточная.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРасчетыСторно = Результат[Результат.Количество()-4].Выгрузить();
	ТаблицаРасчеты       = Результат[Результат.Количество()-3].Выгрузить();
	ТаблицаЗачетыСторно  = Результат[Результат.Количество()-2].Выгрузить();
	ТаблицаЗачеты        = Результат[Результат.Количество()-1].Выгрузить();
	
	КолонкиОтбора = "ГоловнаяОрганизация, Организация, СчетУчета, Налог, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидПлатежа";
		
	ТаблицаРасчеты.Индексы.Добавить(КолонкиОтбора);
	ТаблицаРасчеты.Индексы.Добавить("Период, СрокУплаты, ЭтоНалог");
	ТаблицаРасчеты.Индексы.Добавить("НомерСтроки");
	
	СкорректироватьНаСуммыСторно(ТаблицаРасчеты, ТаблицаРасчетыСторно);
	СкорректироватьНаСуммыСторно(ТаблицаЗачеты,  ТаблицаЗачетыСторно);
	
	СтруктураОтбора = Новый Структура(КолонкиОтбора);
	
	//Исключим из оборотов принудительно проведенные зачеты (операции, уведомления, заявления)
	Для Каждого СтрокаТаблицыЗачета Из ТаблицаЗачеты Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыЗачета);
		ТаблицаКЗачету = ТаблицаРасчеты.Скопировать(СтруктураОтбора);
		ТаблицаКЗачету.Сортировать("Период Убыв, Приоритет");
		
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
			// Считается зачтенной сумма, которая ранее была отражена в учете как начисленная
			Если СтрокаТаблицыКЗачету.Период > СтрокаТаблицыЗачета.Период Тогда
				Продолжить;
			КонецЕсли;
			ЗачтеннаяСумма = Макс(0, СтрокаТаблицыКЗачету.Сумма - СтрокаТаблицыЗачета.Сумма);
			СтрокаТаблицыКЗачету.Сумма = ЗачтеннаяСумма;
			СтрокаТаблицыЗачета.Сумма = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
			МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
		КонецЦикла;
		Для Каждого СтрокаТаблицыКЗачету Из МассивОбработанныхСтрок Цикл
			ТекущаяСтрока = ТаблицаРасчеты.Найти(СтрокаТаблицыКЗачету.НомерСтроки, "НомерСтроки");
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Сумма = СтрокаТаблицыКЗачету.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьТаблицуОтПустыхЗаписей(ТаблицаРасчеты);
	
	ПериодыОплаты = ОбщегоНазначения.ВыгрузитьКолонку(СуммыЕдиногоНалоговогоПлатежа, "ДатаРегистратора", Истина);
	ОтборПериодовОплаты   = Новый Структура("ДатаРегистратора");
	ОстаткиПоНалогам      = ТаблицаРасчеты.СкопироватьКолонки();
	ОстаткиПоСанкциям     = ТаблицаРасчеты.СкопироватьКолонки();
	УчтенныеДанныеНалоги  = ТаблицаРасчеты.СкопироватьКолонки();
	УчтенныеДанныеСанкции = ТаблицаРасчеты.СкопироватьКолонки();
	
	УчтенныеДанныеНалоги.Индексы.Добавить("НомерСтроки");
	УчтенныеДанныеСанкции.Индексы.Добавить("НомерСтроки");
	
	ПериодыРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчеты, "Период", Истина);
	
	// Принцип зачета налогов:
	// - Обрабатываем данные в последовательности документов уплаты.
	// - Переплата прошлого периода распределяется по всей имеющейся задолженности в последовательности ее возникновения (*1).
	// - Уплата текущего периода (*2):
	//     - сначала погашает задолженность, зарегистрированную до отражения уплаты (*3);
	//     - если сумма списана не вся, погашается задолженность, зарегистрированная после отражения уплаты (*4).
	// - Последовательность зачета корректируется из-за переходного периода, который создал 196-ФЗ:
	//     - в выборке новая последовательность устанавливается для всех записей нового периода;
	//     - если зачет фактически происходит до даты применения 196-ФЗ, то последовательность принудительно указывается "старая" (*5).
	// - В первую очередь зачитываются недоимки и текущая задолженность по налогу/взносу. Приоритеты 1-5.(*6)
	// - После каждой итерации зачета налогов запускается итерация зачета санкций. Приоритеты 6-8. (*7).
	
	Для Каждого ПериодОплаты Из ПериодыОплаты Цикл
		
		// Уточнение приоритета требуется только для переходного периода по НДФЛ.
		// Для страховых взносов переходного периода нет, т.к. они изменения приоритета по ним вступают в силу с 01.10.2023
		УточнятьПриоритет = ПереходныйПериодНДФЛ И ПериодОплаты < ДатаСменыПоследовательностиЗачетаУплатНДФЛ;
		
		ОтборПериодовОплаты.ДатаРегистратора = ПериодОплаты;
		СуммыЕдиногоНалоговогоПлатежаПоПериодам = СуммыЕдиногоНалоговогоПлатежа.Скопировать(ОтборПериодовОплаты);
		
		Если НачалоМесяца(ПериодОплаты) < НачалоМесяца(Реквизиты.Период) Тогда
			// (*1)
			Отбор = Новый Структура("ЭтоНалог, Период");
			Для Каждого ПериодРегистрации Из ПериодыРегистраций Цикл
				Отбор.Период   = ПериодРегистрации;
				Отбор.ЭтоНалог = Истина;
				ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
					ТаблицаРасчеты,
					УчтенныеДанныеНалоги,
					Отбор,
					УточнятьПриоритет И ПериодРегистрации < ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
				// (*6)
				РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
					СуммыЕдиногоНалоговогоПлатежаПоПериодам,
					ОстаткиПоНалогам,
					НаборДвиженийНалог,
					УчтенныеДанныеНалоги);
				Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
					// (*7)
					Отбор.ЭтоНалог = Ложь;
					ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
						ТаблицаРасчеты,
						УчтенныеДанныеСанкции,
						Отбор,
						Ложь);
					РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежаПоПериодам,
						ОстаткиПоСанкциям,
						НаборДвиженийСанкции,
						УчтенныеДанныеСанкции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// (*2)
			Отбор = Новый Структура("ЭтоНалог, Период, ПериодОплаты, Ретроспективно");
			Отбор.Период       = Дата('00010101');
			Отбор.ПериодОплаты = ПериодОплаты;
			
			КоличествоИтераций = ?(ПереходныйПериодНДФЛ, 3, 2);
			// 1. Ретроспективно осмотр (*3)
			// 2. Перспективный осмотр (*4). С ограничением на переходную дату, если применимо
			// 3. Перспективный осмотр (*4). Без ограничения на переходную дату, если она была применена на ш. 2
			Для НомерИтерации = 1 По КоличествоИтераций Цикл
				
				Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") <= 0 Тогда
					Продолжить;
				КонецЕсли;
				Отбор.Ретроспективно = НомерИтерации = 1;
				
				Если НомерИтерации = 1 Тогда 
					// (*6)
					Отбор.ЭтоНалог = Истина;
					ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
						ТаблицаРасчеты,
						УчтенныеДанныеНалоги,
						Отбор,
						УточнятьПриоритет);
					РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежаПоПериодам,
						ОстаткиПоНалогам,
						НаборДвиженийНалог,
						УчтенныеДанныеНалоги);
					Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
						// (*7)
						Отбор.ЭтоНалог = Ложь;
						ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
							ТаблицаРасчеты,
							УчтенныеДанныеСанкции,
							Отбор,
							Ложь);
						РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
							СуммыЕдиногоНалоговогоПлатежаПоПериодам,
							ОстаткиПоСанкциям,
							НаборДвиженийСанкции,
							УчтенныеДанныеСанкции);
					КонецЕсли;
				Иначе
					Для Каждого ПериодРегистрации Из ПериодыРегистраций Цикл
						Отбор.Период = ПериодРегистрации;
						// (*6)
						Отбор.ЭтоНалог = Истина;
						ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам,
							ТаблицаРасчеты,
							УчтенныеДанныеНалоги,
							Отбор,
							УточнятьПриоритет И ПериодРегистрации < ДатаСменыПоследовательностиЗачетаУплатНДФЛ);
						РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты,
							СуммыЕдиногоНалоговогоПлатежаПоПериодам,
							ОстаткиПоНалогам,
							НаборДвиженийНалог,
							УчтенныеДанныеНалоги);
						Если СуммыЕдиногоНалоговогоПлатежаПоПериодам.Итог("Сумма") > 0 Тогда
							// (*7)
							Отбор.ЭтоНалог = Ложь;
							ТекущиеОстаткиПоНалогам(ОстаткиПоСанкциям,
								ТаблицаРасчеты,
								УчтенныеДанныеСанкции,
								Отбор,
								Ложь);
							РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты,
								СуммыЕдиногоНалоговогоПлатежаПоПериодам,
								ОстаткиПоСанкциям,
								НаборДвиженийСанкции,
								УчтенныеДанныеСанкции);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНалоги = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить().СкопироватьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийНалог.Выгрузить(),   ТаблицаНалоги);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийСанкции.Выгрузить(), ТаблицаНалоги);
	
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа, Истина);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СкорректироватьНаСуммыСторно(ТаблицаРасчета, ТаблицаСторно)
		
	СтруктураОтбора = Новый Структура("ГоловнаяОрганизация, Организация, СчетУчета, Налог, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты, ВидПлатежа");
	
	// Поправка на сторно записи расчетов по налогам и санкциям
	Для Каждого СтрокаТаблицыЗачета Из ТаблицаСторно Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыЗачета);
		ТаблицаКЗачету = ТаблицаРасчета.Скопировать(СтруктураОтбора);
		ТаблицаКЗачету.Сортировать("Период Убыв");
		
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
			// Считается зачтенной сумма, которая ранее была отражена в учете как начисленная
			Если СтрокаТаблицыКЗачету.Период > СтрокаТаблицыЗачета.Период
				Или СтрокаТаблицыЗачета.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗачтеннаяСумма = Мин(СтрокаТаблицыКЗачету.Сумма, СтрокаТаблицыЗачета.Сумма);
			СтрокаТаблицыКЗачету.Сумма = СтрокаТаблицыКЗачету.Сумма - ЗачтеннаяСумма;
			СтрокаТаблицыЗачета.Сумма  = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
			МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
		КонецЦикла;
		Если СтрокаТаблицыЗачета.Сумма <> 0 И ТаблицаКЗачету.Итог("Сумма") <> 0 Тогда
			ТаблицаКЗачету.Сортировать("Период Возр");
			Для Каждого СтрокаТаблицыКЗачету Из ТаблицаКЗачету Цикл
				// Считается зачтенной сумма, которая позже была отражена в учете как начисленная
				Если СтрокаТаблицыКЗачету.Период <= СтрокаТаблицыЗачета.Период
					Или СтрокаТаблицыЗачета.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗачтеннаяСумма = Мин(СтрокаТаблицыКЗачету.Сумма, СтрокаТаблицыЗачета.Сумма);
				СтрокаТаблицыКЗачету.Сумма = СтрокаТаблицыКЗачету.Сумма - ЗачтеннаяСумма;
				СтрокаТаблицыЗачета.Сумма  = СтрокаТаблицыЗачета.Сумма - ЗачтеннаяСумма;
				МассивОбработанныхСтрок.Добавить(СтрокаТаблицыКЗачету);
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаТаблицыКЗачету Из МассивОбработанныхСтрок Цикл
			ТекущаяСтрока = ТаблицаРасчета.Найти(СтрокаТаблицыКЗачету.НомерСтроки, "НомерСтроки");
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Сумма = СтрокаТаблицыКЗачету.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьТаблицуОтПустыхЗаписей(ТаблицаРасчета);
	
КонецПроцедуры

Процедура ТекущиеОстаткиПоНалогам(ОстаткиПоНалогам, ТаблицаРасчеты, УчтенныеДанные, Отбор, УточнятьПриоритет)
	
	ДатаСменыПоследовательностиЗачетаУплат = ДатаСменыПоследовательностиЗачетаУплат();
	
	ЭтоНалог       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ЭтоНалог",       Ложь);
	Ретроспективно = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Ретроспективно", Ложь);
	
	Период         = НачалоДня(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Период",         Дата('00010101')));
	ПериодОплаты   = НачалоДня(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ПериодОплаты",   Дата('00010101')));
	
	ДополнитьОграничениеПериода = ЭтоНалог И Не Ретроспективно И УточнятьПриоритет;
	
	ОстаткиПоНалогам.Очистить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРасчеты Цикл
		Если ЗначениеЗаполнено(Период) Тогда
			ВыполненоУсловиеПериода = НачалоДня(СтрокаТаблицы.Период) = Период;
		Иначе
			ВыполненоУсловиеПериода = ?(Ретроспективно, НачалоДня(СтрокаТаблицы.Период) <= ПериодОплаты, НачалоДня(СтрокаТаблицы.Период) > ПериодОплаты);
		КонецЕсли;
		Если ДополнитьОграничениеПериода Тогда
			ВыполненоУсловиеПериода = ВыполненоУсловиеПериода И СтрокаТаблицы.Период < ДатаСменыПоследовательностиЗачетаУплат;
		КонецЕсли;
		Если СтрокаТаблицы.ЭтоНалог = ЭтоНалог И ВыполненоУсловиеПериода Тогда
			НепогашеннаяСумма = СтрокаТаблицы.Сумма;
			УчтенныеСтроки = УчтенныеДанные.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТаблицы.НомерСтроки));
			Для Каждого УчтеннаяСтрока Из УчтенныеСтроки Цикл
				НепогашеннаяСумма = Макс(0, НепогашеннаяСумма - УчтеннаяСтрока.Сумма);
			КонецЦикла;
			Если НепогашеннаяСумма > 0 Тогда
				НоваяСтрока = ОстаткиПоНалогам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Сумма = НепогашеннаяСумма;
				// (*5)
				УточнитьПриоритетЗачета(УточнятьПриоритет, НоваяСтрока.Приоритет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПриоритетЗачета(УточнитьПриоритет, Приоритет)
	
	Если Не УточнитьПриоритет Тогда
		Возврат;
	КонецЕсли;
	
	// До даты смены последовательности НДФЛ зачитываем по-старому
	Если Приоритет = 3 Тогда
		Приоритет = 1;
	ИначеЕсли Приоритет = 5 Тогда
		Приоритет = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаУплаты, ИспользоватьПериодИсходныхОперации = Ложь)
	
	КолонкиСвертки = "ПлатежныйДокумент, Организация, ВидДвижения";
	Если ИспользоватьПериодИсходныхОперации Тогда
		КолонкиСвертки = КолонкиСвертки + ", Период";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСвертки, "Сумма");
	ПлатежныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНалоги, "ПлатежныйДокумент", Истина);
	
	СтруктураОтбора = Новый Структура("ПлатежныйДокумент");
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		СтруктураОтбора.ПлатежныйДокумент = ПлатежныйДокумент;
		СтрокиТаблицаНалоги = ТаблицаНалоги.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицаНалоги.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиТаблицаУплаты = ТаблицаУплаты.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТаблицаУплаты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОрганизация = СтрокиТаблицаУплаты[0].Организация;
		Для Каждого СтрокаТаблицыНалоги Из СтрокиТаблицаНалоги Цикл
			СтрокаТаблицыНалоги.Организация = ТекущаяОрганизация;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РазделитьФиксированныеВзносыПоВидамПлатежа(Реквизиты, ТаблицаНалоги)
	
	МассивСтрок = ТаблицаНалоги.НайтиСтроки(Новый Структура("СчетУчета",ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
			Реквизиты.Организация, Реквизиты.Период, Перечисления.Периодичность.Год, Ложь, Реквизиты.Регистратор);
		
	СуммаВзносаПФРКУплате = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
	
	ЕдиныйТарифВзносов = Реквизиты.Период >= УчетЗарплаты.ДатаПереходаНаЕдиныйТарифСтраховыхВзносов();
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПлатежа) Тогда
			Если СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
				СуммаВзносаПФРКУплате = Макс(0, СуммаВзносаПФРКУплате - СтрокаТаблицы.Сумма);
			КонецЕсли;
		Иначе
			
			Если ЕдиныйТарифВзносов Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			Иначе
					
				Если СуммаВзносаПФРКУплате = 0 Тогда
					
					СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
					
				ИначеЕсли СтрокаТаблицы.Сумма > СуммаВзносаПФРКУплате Тогда
					
					Сумма = СтрокаТаблицы.Сумма;
					
					СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог;
					СтрокаТаблицы.Сумма = СуммаВзносаПФРКУплате;
					
					НоваяСтрока = ТаблицаНалоги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
					НоваяСтрока.Сумма = Сумма - СуммаВзносаПФРКУплате;
					
					СуммаВзносаПФРКУплате = 0;
					
				Иначе
					
					СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог;
					СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаТаблицы.Сумма;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчетуПоДвижениямДокумента(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор";       // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура РаспределитьОплатуПоДвижениямДокумента(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	ВерсияАлгоритмаЗачетаУплат               = ВерсияАлгоритмаЗачетаУплат(Реквизиты.Период);
	ДействуетНоваяВерсияАлгоритмаЗачетаУплат = ВерсияАлгоритмаЗачетаУплат = 2;

	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	
	НаборДвиженийНалог = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	
	// Предварительно следует избавиться от налогов, которые уже оказались оплачены
	// В частности, это НДФЛ, введенный в учет ЕНС при начале эксперимента
	
	ТаблицаНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",           ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",                   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков",                Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПериодОплаты",                  НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ТаблицаНалогов",                ТаблицаНалогов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ТаблицаНалогов.Налог КАК Налог,
	|	ТаблицаНалогов.КодБК КАК КодБК,
	|	ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	ТаблицаНалогов.Организация КАК Организация,
	|	ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТаблицаНалогов.Сумма КАК Сумма,
	|	ТаблицаНалогов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаНалогов
	|ИЗ
	|	&ТаблицаНалогов КАК ТаблицаНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	РегистрацияВНалоговомОргане,
	|	КодПоОКТМО,
	|	Налог,
	|	КодБК,
	|	СчетУчета,
	|	СрокУплаты,
	|	ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты КАК СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация = &Организация
	|				И СчетУчета В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаНалогов.СчетУчета
	|					ИЗ
	|						ВТ_ТаблицаНалогов)) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СрокУплаты,
	|	ГоловнаяОрганизация,
	|	Налог,
	|	Организация,
	|	КодПоОКТМО,
	|	РегистрацияВНалоговомОргане,
	|	КодБК,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНалогов.Организация КАК Организация,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаНалогов.Налог КАК Налог,
	|	ВТ_ТаблицаНалогов.КодБК КАК КодБК,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаНалогов.Сумма + ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) < 0
	|				ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	ЛОЖЬ КАК Недоимка,
	|	МАКСИМУМ(ВТ_ТаблицаНалогов.НомерСтроки) КАК НомерЗаписи,
	|	ИСТИНА КАК ЭтоНалог,
	|	2 КАК Приоритет
	|ИЗ
	|	ВТ_ТаблицаНалогов КАК ВТ_ТаблицаНалогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|		ПО ВТ_ТаблицаНалогов.ГоловнаяОрганизация = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация
	|			И ВТ_ТаблицаНалогов.Организация = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация
	|			И ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане
	|			И ВТ_ТаблицаНалогов.КодПоОКТМО = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО
	|			И ВТ_ТаблицаНалогов.Налог = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог
	|			И ВТ_ТаблицаНалогов.КодБК = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК
	|			И ВТ_ТаблицаНалогов.СчетУчета = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета
	|			И ВТ_ТаблицаНалогов.СрокУплаты = РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаНалогов.СрокУплаты, ДЕНЬ) <= &ПериодОплаты
	|	И ВТ_ТаблицаНалогов.Сумма + ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток, 0) < 0
	|				ТОГДА РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНалогов.КодБК,
	|	ВТ_ТаблицаНалогов.СчетУчета,
	|	ВТ_ТаблицаНалогов.СрокУплаты,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.Организация,
	|	ВТ_ТаблицаНалогов.Налог,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО";
	
	ОстаткиПоНалогам = Запрос.Выполнить().Выгрузить();
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	Если Не ДействуетНоваяВерсияАлгоритмаЗачетаУплат Тогда
		СрокиУплаты = ОстаткиПоНалогам.Скопировать(, "СрокУплаты");
		СрокиУплаты.Свернуть("СрокУплаты", );
		СрокиУплаты.Сортировать("СрокУплаты");
		РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог);
	Иначе
		РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог);
	КонецЕсли;
	
	ТаблицаНалоги = НаборДвиженийНалог.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РаспределитьПредварительнуюОплатуПоТаблицеДвижений(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, ТаблицаНалогов, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	
	НаборДвиженийНалог = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	
	Если ТаблицаНалогов.Колонки.Найти("ГоловнаяОрганизация") = Неопределено Тогда
		ТаблицаНалогов.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	ТаблицаНалогов.ЗаполнитьЗначения(ГоловнаяОрганизация,   "ГоловнаяОрганизация");
	
	Если ТаблицаНалогов.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаНалогов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	ТаблицаНалогов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплат();
	НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы = Реквизиты.Период >= ДатаПриоритезацииУведомленияПоСтраховымВзносам();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                            ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",                                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков",                                 Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПериодОплаты",                                   НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ТаблицаНалогов",                                 ТаблицаНалогов);
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатНДФЛ",   НоваяВерсияПоследовательностиЗачетаУплатНДФЛ);
	Запрос.УстановитьПараметр("ВидыНалоговНДФЛНалоговогоАгента",                ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента());
	Запрос.УстановитьПараметр("НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы", НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы);
	Запрос.УстановитьПараметр("ВидыНалоговСтраховыеВзносы",                     ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ТаблицаНалогов.Налог КАК Налог,
	|	ТаблицаНалогов.КодБК КАК КодБК,
	|	ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	ТаблицаНалогов.Организация КАК Организация,
	|	ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТаблицаНалогов.Сумма КАК Сумма,
	|	ТаблицаНалогов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаНалогов
	|ИЗ
	|	&ТаблицаНалогов КАК ТаблицаНалогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНалогов.Организация КАК Организация,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаНалогов.Налог КАК Налог,
	|	ВТ_ТаблицаНалогов.КодБК КАК КодБК,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ТаблицаНалогов.СрокУплаты КАК СрокУплаты,
	|	СУММА(ВТ_ТаблицаНалогов.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК Недоимка,
	|	МАКСИМУМ(ВТ_ТаблицаНалогов.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА 2
	|		КОГДА ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|			ТОГДА 2
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
	|				И ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговСтраховыеВзносы)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет,
	|	ИСТИНА КАК ЭтоНалог
	|ИЗ
	|	ВТ_ТаблицаНалогов КАК ВТ_ТаблицаНалогов
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаНалогов.СрокУплаты, ДЕНЬ) >= &ПериодОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНалогов.КодБК,
	|	ВТ_ТаблицаНалогов.СчетУчета,
	|	ВТ_ТаблицаНалогов.СрокУплаты,
	|	ВТ_ТаблицаНалогов.ГоловнаяОрганизация,
	|	ВТ_ТаблицаНалогов.Организация,
	|	ВТ_ТаблицаНалогов.Налог,
	|	ВТ_ТаблицаНалогов.РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаНалогов.КодПоОКТМО,
	|	ВЫБОР
	|		КОГДА НЕ &НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
	|			ТОГДА 2
	|		КОГДА ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговНДФЛНалоговогоАгента)
	|			ТОГДА 2
	|		КОГДА &НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
	|				И ВТ_ТаблицаНалогов.Налог В (&ВидыНалоговСтраховыеВзносы)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ";
	
	ОстаткиПоНалогам = Запрос.Выполнить().Выгрузить();
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог);
	
	ТаблицаНалоги = НаборДвиженийНалог.Выгрузить().Скопировать(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
	ПодготовитьТаблицуСписания(ТаблицаНалоги, ТаблицаСуммыЕдиногоНалоговогоПлатежа);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог, УчтенныеДанные = Неопределено)
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Реквизиты.Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	НоваяВерсияПоследовательностиЗачетаУплатНДФЛ = Реквизиты.Период >= ДатаСменыПоследовательностиЗачетаУплат();
	ВсеВидыНалоговНДФЛ = ЕдиныйНалоговыйСчетПовтИсп.ВсеВидыНалоговНДФЛ();
	
	НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы = Реквизиты.Период >= ДатаПриоритезацииУведомленияПоСтраховымВзносам();
	ВидыНалоговСтраховыеВзносы = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы();
	
	УточнятьДатуОперации = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РегламентнаяОперация");
	
	ОтборПоСрокам = Новый Структура("СрокУплаты");
	ОтборПоИзмерениям = Новый Структура("ГоловнаяОрганизация, Организация, РегистрацияВНалоговомОргане, КодПоОКТМО, Налог, КодБК, СчетУчета, СрокУплаты");
	
	Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
		Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
			ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
			ОстаткиПоДате = ОстаткиПоНалогам.Скопировать(ОтборПоСрокам);
			
			СуммаОстаток = ОстаткиПоДате.Итог("Сумма");
			СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СуммаОстаток);
			Если СуммаПогашения <> 0 Тогда
				
				Коэффициенты = ОстаткиПоДате.ВыгрузитьКолонку("Сумма");
				РаспределеннаяСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПогашения, Коэффициенты, 2);
				Если РаспределеннаяСумма = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОстаткиПоДате.ЗагрузитьКолонку(РаспределеннаяСумма, "Сумма");
				
				Для Каждого СтрокаТаблицыПоДате Из ОстаткиПоДате Цикл
					
					Если СтрокаТаблицыПоДате.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = НаборДвиженийНалог.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПоДате);
					
					Если ИспользуетсяЕдиныйНалоговыйПлатеж И УточнятьДатуОперации Тогда
						// Уточнение периода уплаты - привязываемся к дате операции
						
						ПриоритетныйЗачетНДФЛ = НоваяВерсияПоследовательностиЗачетаУплатНДФЛ
							И ВсеВидыНалоговНДФЛ.Найти(НоваяСтрока.Налог) <> Неопределено;
						
						ПриоритетныйЗачетСтраховыхВзносов = НоваяВерсияПоследовательностиЗачетаУплатСтраховыеВзносы
							И ВидыНалоговСтраховыеВзносы.Найти(НоваяСтрока.Налог) <> Неопределено;
						
						Если СтрокаТаблицыПлатежа.ДатаРегистратора >= НоваяСтрока.СрокУплаты 
							Или ПриоритетныйЗачетНДФЛ
							Или ПриоритетныйЗачетСтраховыхВзносов
							Или НоваяСтрока.СрокУплаты < НачалоМесяца(Реквизиты.Период) Тогда
							ДатаОперации = Макс(НоваяСтрока.Период, СтрокаТаблицыПлатежа.ДатаРегистратора);
						Иначе
							ДатаОперации = НоваяСтрока.СрокУплаты;
						КонецЕсли;
						НоваяСтрока.Период = КонецДня(ДатаОперации);
					КонецЕсли;
					
					Если УчтенныеДанные <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(УчтенныеДанные.Добавить(), СтрокаТаблицыПоДате);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборПоИзмерениям, НоваяСтрока);
					СтрокиИсходнойТаблицы = ОстаткиПоНалогам.НайтиСтроки(ОтборПоИзмерениям);
					СтрокиИсходнойТаблицы[0].Сумма = СтрокиИсходнойТаблицы[0].Сумма - НоваяСтрока.Сумма;
					
					НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
					НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
				КонецЦикла;
				
				СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
				
			КонецЕсли;
			
			Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
				СтрокаТаблицыПлатежа.Сумма = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НаборДвиженийНалог.Записывать = Истина;
	
КонецПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог, УчтенныеДанные = Неопределено)
	
	ДатаСменыАлгоритмаЗачетаУплат = ДатаСменыАлгоритмаЗачетаУплат();
	ПереходныйПериод              = ВерсияАлгоритмаЗачетаУплат(НачалоМесяца(Реквизиты.Период)) = 1;
	
	ВременнаяТаблицаОстатков = ОстаткиПоНалогам.СкопироватьКолонки();
	ВременнаяТаблицаОплат    = СуммыЕдиногоНалоговогоПлатежа.СкопироватьКолонки();
	
	// Приоритеты:
	Если Реквизиты.Период < ДатаСменыПоследовательностиЗачетаУплат() Тогда
		// - 1. Недоимка прочие налоги
		// - 2. Текущий платеж прочие налоги
		ЧислоПриоритетов = 2;
	Иначе
		// - 1. Недоимка НДФЛ
		// - 2. Текущий платеж НДФЛ
		// - 3. Недоимка прочие налоги
		//   4. Текущий платеж по взносам (начиная с 01.10.2023 - вступления в силу 389-ФЗ, до этого момента страховые взносы идут с приоритетом 5)
		// - 5. Текущий платеж прочие налоги
		ЧислоПриоритетов = 5;
	КонецЕсли;
	
	Для Приоритет = 1 По ЧислоПриоритетов Цикл
		// Погашение недоимки (определяемой однозначно определенной по сроку платежа)
		ОстаткиПоТекущимНалогам = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка, Приоритет, ЭтоНалог", Истина, Приоритет, Истина));
		Если ОстаткиПоТекущимНалогам.Итог("Сумма") > 0 И СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
			ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
			ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
			
			СрокиУплаты = ОстаткиПоТекущимНалогам.Скопировать(Новый Структура("Недоимка", Истина), "СрокУплаты, Недоимка");
			СрокиУплаты.Свернуть("СрокУплаты, Недоимка", );
			СрокиУплаты.Сортировать("СрокУплаты");
			РаспределениеСуммыОплатыПоСрокам(Реквизиты,
				СуммыЕдиногоНалоговогоПлатежа,
				ОстаткиПоТекущимНалогам,
				СрокиУплаты,
				НаборДвиженийНалог,
				УчтенныеДанные);
			// Принудительно сменим приоритет, чтобы последующее распределение обязательно выполнилось.
			Приоритет = Приоритет + 1;
		КонецЕсли;
		// Погашение текущей задолженности или выявленной недоимки периода проведения
		ОстаткиПоТекущимНалогам = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка, Приоритет, ЭтоНалог", Ложь, Приоритет, Истина));
		
		Если ПереходныйПериод Тогда
			Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
				// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
				ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
				ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
				
				// При условии, что есть что распределять
				// Сначала обработаем налоги и платежи до даты изменения алгоритма - "по старому"
				ВременнаяТаблицаОстатков.Очистить();
				ВременнаяТаблицаОплат.Очистить();
				Для Каждого СтрокаТаблицыОстатков Из ОстаткиПоТекущимНалогам Цикл
					Если СтрокаТаблицыОстатков.СрокУплаты < ДатаСменыАлгоритмаЗачетаУплат Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОстатков.Добавить(), СтрокаТаблицыОстатков);
					КонецЕсли;
				КонецЦикла;
				Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
					Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
						Если СтрокаТаблицыПлатежа.ДатаРегистратора < ДатаСменыАлгоритмаЗачетаУплат Тогда
							ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
						КонецЕсли;
					КонецЦикла;
					СрокиУплаты = ВременнаяТаблицаОстатков.Скопировать(
						Новый Структура("Недоимка, Приоритет", Ложь, Приоритет), "СрокУплаты, Недоимка");
					СрокиУплаты.Свернуть("СрокУплаты", );
					СрокиУплаты.Сортировать("СрокУплаты");
					РаспределениеСуммыОплатыПоСрокам(Реквизиты,
						ВременнаяТаблицаОплат,
						ВременнаяТаблицаОстатков,
						СрокиУплаты,
						НаборДвиженийНалог,
						УчтенныеДанные);
					
					// Учтем списанные суммы
					Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
						ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
						Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТаблицыОстатков Из ВременнаяТаблицаОстатков Цикл
						ТекущаяСтрокаОстатков = ОстаткиПоТекущимНалогам.Найти(СтрокаТаблицыОстатков.НомерСтроки, "НомерСтроки");
						Если ТекущаяСтрокаОстатков <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаОстатков, СтрокаТаблицыОстатков);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОстаткиПоТекущимНалогам.Итог("Сумма") > 0 И СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// При условии, что есть что распределять и погашать
			
			// Принцип следующий:
			//   Перебираем таблицу остатков и ищем в таблице оплат суммы со сроками более ранними чем срок уплаты налога
			//   Если сумма остатка погашена не полностью (оперативная недоимка) переходим к перебору таблицы оплат со сроками
			//   болеее поздними чем срок уплаты налога
			
			// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
			ОчиститьТаблицуОтПустыхЗаписей(ОстаткиПоТекущимНалогам);
			ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
			
			СрокиУплаты = ОстаткиПоТекущимНалогам.Скопировать(
				Новый Структура("Недоимка, Приоритет, ЭтоНалог", Ложь, Приоритет, Истина), "СрокУплаты, Недоимка");
			СрокиУплаты.Свернуть("СрокУплаты", );
			СрокиУплаты.Сортировать("СрокУплаты");
			
			ОтборПоСрокам = Новый Структура("СрокУплаты");
			
			Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
				
				ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
				ВременнаяТаблицаОстатков = ОстаткиПоТекущимНалогам.Скопировать(ОтборПоСрокам);
				
				ВременнаяТаблицаОплат.Очистить();
				Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
					Если СтрокаТаблицыПлатежа.Сумма > 0 И НачалоДня(СтрокаТаблицыПлатежа.ДатаРегистратора) <= СтрокаТаблицы.СрокУплаты Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				ВременнаяТаблицаОплат.Сортировать("ДатаРегистратора Убыв");
				
				// Погасим задолженнность уплатами, совершенными до наступления срока платежа
				СрокиУплатыВрем = ВременнаяТаблицаОстатков.Скопировать(, "СрокУплаты");
				СрокиУплатыВрем.Свернуть("СрокУплаты", );
				СрокиУплатыВрем.Сортировать("СрокУплаты");
				РаспределениеСуммыОплатыПоСрокам(Реквизиты,
					ВременнаяТаблицаОплат,
					ВременнаяТаблицаОстатков,
					СрокиУплатыВрем,
					НаборДвиженийНалог,
					УчтенныеДанные);
				
				// Учтем списанные суммы
				Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
					ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
					Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				
				// Задолженность не погашена полностью: появилась оперативная недоимка - ее погашают документы уплаты после срока платежа
				Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
					РаспределениеСуммыОплатыПоСрокам(Реквизиты,
						СуммыЕдиногоНалоговогоПлатежа,
						ВременнаяТаблицаОстатков,
						СрокиУплатыВрем,
						НаборДвиженийНалог,
						УчтенныеДанные);
				КонецЕсли;
				
				Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
					// Очистим таблицу от пустых записей, чтобы уменьшить количество итераций
					ОчиститьТаблицуОтПустыхЗаписей(СуммыЕдиногоНалоговогоПлатежа);
				Иначе
					// Распределять больше нечего
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура РаспределениеСуммыОплатыСанкцийПоПриоритетам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийСанкции, УчтенныеДанные = Неопределено)
	
	ИспользуетсяЕдиныйНалоговыйПлатеж = Реквизиты.Период >= НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	// Приоритеты:
	Если Реквизиты.Период < ДатаСменыПоследовательностиЗачетаУплат() Тогда
		// - 3. Пени
		// - 4. Проценты
		// - 5. Штрафы
		НачальноеЗначение = 3;
		ЧислоПриоритетов  = 5;
	Иначе
		// - 6. Пени
		// - 7. Проценты
		// - 8. Штрафы
		НачальноеЗначение = 6;
		ЧислоПриоритетов  = 8;
	КонецЕсли;
	
	Для Приоритет = НачальноеЗначение По ЧислоПриоритетов Цикл
		ОстаткиПоСанкциям = ОстаткиПоНалогам.Скопировать(Новый Структура("Приоритет", Приоритет));
		Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
			// При условии, что есть что погашать
			Для Каждого СтрокаТаблицы Из ОстаткиПоСанкциям Цикл
				Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
					Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СтрокаТаблицы.Сумма);
					Если СуммаПогашения <> 0 Тогда
						
						НоваяСтрока = НаборДвиженийСанкции.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						НоваяСтрока.Сумма             = СуммаПогашения;
						НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
						НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
						
						Если ИспользуетсяЕдиныйНалоговыйПлатеж Тогда
							// Уточнение периода уплаты - привязываемся к дате операции
							Если СтрокаТаблицыПлатежа.ДатаРегистратора < НачалоМесяца(Реквизиты.Период) Тогда
								ДатаОперации = НоваяСтрока.Период;
							Иначе
								ДатаОперации = Макс(СтрокаТаблицыПлатежа.ДатаРегистратора, НоваяСтрока.Период);
							КонецЕсли;
							НоваяСтрока.Период = ДатаОперации;
						КонецЕсли;
						
						Если УчтенныеДанные <> Неопределено Тогда
							НоваяСтрока = УчтенныеДанные.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
							НоваяСтрока.Сумма = СуммаПогашения;
						КонецЕсли;
						
						СтрокаТаблицы.Сумма        = СтрокаТаблицы.Сумма - СуммаПогашения;
						СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
					КонецЕсли;
					Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
						СтрокаТаблицыПлатежа.Сумма = 0;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			НаборДвиженийСанкции.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьТаблицуОтПустыхЗаписей(ТаблицаДанных)
	
	МассивСтрокКУдалению = ТаблицаДанных.НайтиСтроки(Новый Структура("Сумма", 0));
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

Функция ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицыПлатежей, ИмяКолонкиСчет)
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(СтрокаТаблицыПлатежей[ИмяКолонкиСчет],
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерСубконто <> 0 Тогда
		ВидНалоговогоОбязательства = СтрокаТаблицыПлатежей["Субконто" + НомерСубконто]
	Иначе
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

Процедура СформироватьДвиженияУСНПоПредыдущимСрокамУплаты(НаборДвижений, СтрокаТаблицы, Реквизиты, ГоловнаяОрганизация)
	
	// Выберем все положительные движения за указанный налоговый период,
	// а также задолженность на дату создания уведомления
	НалоговыйПериод = НачалоГода(СтрокаТаблицы.СрокУплаты);
	СчетУчета = СтрокаТаблицы.СчетУчета;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты КАК СрокУплаты,
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетУчета = &СчетУчета
		|				И ГоловнаяОрганизация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокУплаты УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			ГоловнаяОрганизация = &Организация
		|				И СчетУчета = &СчетУчета) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтрокаТаблицы.СрокУплаты));
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Период = Новый Граница(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1)), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНачислений = Результат[0].Выгрузить();
	
	РезультатЗадолженности = Результат[1].Выбрать();
	Если РезультатЗадолженности.Следующий() Тогда
		Задолженность = РезультатЗадолженности.Задолженность;
	Иначе
		Задолженность = 0;
	КонецЕсли;

	СуммаСторно = Мин(- СтрокаТаблицы.Сумма, Задолженность);

	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		Если СуммаСторно > 0 Тогда
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ПлатежныйДокумент = Реквизиты.Регистратор;
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Период = КонецМесяца(ДобавитьМесяц(Реквизиты.Период, -1));
			
			СуммаКЗачету = Мин(СтрокаНачисления.Сумма, СуммаСторно);
			НоваяСтрока.Сумма = СуммаКЗачету;
			НоваяСтрока.СрокУплаты = СтрокаНачисления.СрокУплаты;
			СуммаСторно = СуммаСторно - СуммаКЗачету;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СуммаПлатежаКВозврату(ТаблицаНалоги, ГоловнаяОрганизация, Период)
	
	СуммаКЗачету = 0;
	СрокУплаты = Дата(1, 1, 1);
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		Если СтрокаТаблицы.Сумма < 0
			И МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаТаблицы.Налог) Тогда
			СуммаКЗачету = СуммаКЗачету - СтрокаТаблицы.Сумма;
			// Предполагаем что в одном уведомлени не может встретиться два налога: УСН и ЕСХН
			СчетУчета = СтрокаТаблицы.СчетУчета;
			СрокУплаты = Макс(СрокУплаты, СтрокаТаблицы.СрокУплаты);
		КонецЕсли;
	КонецЦикла;
	
	// Если не было строк с отрицательными суммами по УСН или ЕСХН, то и считать дальше нет смысла
	Если СуммаКЗачету = 0 Тогда
		Возврат СуммаКЗачету;
	КонецЕсли;
	
	// Определим период уплаты
	// За год уведомление не отправляется, поэтому уведомление со сроком первого квартала
	// относится к текущему году
	// Также в первом квартале никогда не должно получиться отрицательной суммы
 	НомерКвартала = ОбщегоНазначенияБПКлиентСервер.НомерКвартала(ДобавитьМесяц(СрокУплаты, -1));
	Если НомерКвартала = 1 Тогда
		Возврат 0;
	Иначе
		НалоговыйПериод = НачалоГода(СрокУплаты);
	КонецЕсли;
	
	// Нужен оборот расход (зачет в счет налога)
	// Счет, т.к. может быть или УСН или ЕСХН
	// Конец периода = срок уплаты (не смотрим в будущее)
	// Отсекаем проводки расхода, сделанные Уведомлением
	// Формируем задолженность без учета созданного уведомления
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетУчета = &СчетУчета
		|				И ГоловнаяОрганизация = &Организация) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.Регистратор) <> ТИП(Документ.УведомлениеОбИсчисленныхСуммахНалогов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
		|			&Период,
		|			ГоловнаяОрганизация = &Организация
		|				И СчетУчета = &СчетУчета) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СрокУплаты));
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	ПериодОстатков = Новый Граница(КонецМесяца(ДобавитьМесяц(Период, -1)), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Период", ПериодОстатков);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатЗадолженности = Результат[1].Выбрать();
	Если РезультатЗадолженности.Следующий() Тогда
		Задолженность = РезультатЗадолженности.Задолженность;
		СуммаКЗачету = Макс(0, СуммаКЗачету - Задолженность);
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКЗачету = Мин(СуммаКЗачету, Выборка.СуммаРасход);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат СуммаКЗачету;
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура СформироватьВходящиеОстаткиПоЕНСРежимИнтеграцииСБанком() Экспорт
	
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПерехода = НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж();
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета);
	МассивОпераций.Добавить("ЗачетАвансов");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ВидОперации Из МассивОпераций Цикл
			
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация",  Выборка.Ссылка);
			СтруктураПараметров.Вставить("ДатаПерехода", ДатаПерехода);
			СтруктураПараметров.Вставить("ВидОперации",  ВидОперации);
			
			Если ВидОперации = "ЗачетАвансов" Тогда
				Обработки.ПомощникПереходаНаЕНС.ЗачетАвансов(СтруктураПараметров, АдресХранилища);
			Иначе
				Обработки.ПомощникПереходаНаЕНС.ПереносРасчетовПоНалогамВзносам(СтруктураПараметров, АдресХранилища);
			КонецЕсли;
			
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("УспешноВыполнено") Тогда
				
				Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
				
				Если СтруктураДанных.УспешноВыполнено Тогда
					Если СтруктураДанных.Свойство("ТребуетсяКонтроль") Тогда
						Если СтруктураДанных.ТребуетсяКонтроль Тогда
							Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками");
						КонецЕсли;
					КонецЕсли;
					
					ДокументыОперации = ?(СтруктураДанных.Свойство("ДокументыОперации"), СтруктураДанных.ДокументыОперации, Неопределено);
					
					СтруктураПараметров.Вставить("Состояние", Состояние);
					
					Если ТипЗнч(ДокументыОперации) = Тип("Массив") Тогда
						СтруктураПараметров.Вставить("ДокументыОперации", ДокументыОперации);
					КонецЕсли;
					
					Обработки.ПомощникПереходаНаЕНС.ОтразитьВыполнениеОперацииПереходаНаЕНС(СтруктураПараметров, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Повторный переход на ЕНС для клиентов в режиме интеграции в рамках регламентной операцией.
//
// Параметры:
//  ТаблицаРеквизиты - Структура - таблица с реквизитами регламентной операции. Должна иметь колонки:
//  	* Период 		- Дата - Дата документа.
//  	* Организация 	- СправочникСсылка.Организации - Организация документа.
//  Движения - КоллекцияДвижений - наборы записей движений документа.
//  Отказ	 - Булево - Отказ от записи при ошибке.
//
Процедура ПовторноВыполнитьПереходНаЕНСРежимИнтеграцииСБанком(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		Или Реквизиты.Период <> ЕдиныйНалоговыйСчет.НачалоПростогоУчета()-1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНалоговИВзносов = Новый СписокЗначений;
	СписокНалоговИВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС,
		Ложь));
	СписокНалоговИВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела,
		Ложь));
	СписокНалоговИВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф,
		Ложь));
	СписокНалоговИВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
		Перечисления.ВидыНалогов.УСН_Доходы,
		Ложь));
	
	ПараметрыДокумента = ПараметрыПолученияОстатковРасчетов();
	ПараметрыДокумента.Организация = Реквизиты.Организация;
	ПараметрыДокумента.Дата = Реквизиты.Период;
	ПараметрыДокумента.СписокНалогов = СписокНалоговИВзносов;
	ПараметрыДокумента.ВводНачальныхДанных = Истина;
	
	// Начисление налогов
	
	ПараметрыДокумента.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов;
	ТаблицыОстатковВзносы = ЕдиныйНалоговыйСчет.ПолучитьОстаткиРасчетовПоНалогам(ПараметрыДокумента);
	
	ТаблицыОстатковВзносы.ТаблицаНалоги.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицыОстатковВзносы.ТаблицаНалоги.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ВидДвиженияНакопления"));
	ТаблицыОстатковВзносы.ТаблицаНалоги.Колонки.Добавить("КорректировкаЕНС", Новый ОписаниеТипов("Булево"));
	
	ТаблицыОстатковВзносы.ТаблицаНалоги.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	
	ПараметрыПроведения.Вставить("НачислениеНалогов", ТаблицыОстатковВзносы.ТаблицаНалоги);
	
	// Корректировка счета
	
	ПараметрыДокумента.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета;
	
	ТаблицыОстатковНалоги = ЕдиныйНалоговыйСчет.ПолучитьОстаткиРасчетовПоНалогам(ПараметрыДокумента);
	
	ТаблицыОстатковНалоги.ТаблицаЕдиныйСчет.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицыОстатковНалоги.ТаблицаЕдиныйСчет.Колонки.Добавить(
		"ОтражениеВУСН",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	ТаблицыОстатковНалоги.ТаблицаЕдиныйСчет.Колонки.Добавить(
		"Подразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ПараметрыПроведения.Вставить("ПополнениеСчета", ТаблицыОстатковНалоги.ТаблицаЕдиныйСчет);
	
	// Бухгалтерский учет
	ЕдиныйНалоговыйСчет.СформироватьПроводкиНачислениеНалогов(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.НачислениеНалогов,
		Движения,
		Отказ);
	
	ЕдиныйНалоговыйСчет.СформироватьПроводкиПополнениеСчета(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ПополнениеСчета,
		Движения,
		Отказ);
	
	Проводки = Движения.Хозрасчетный;
	КоличествоПроводок = Проводки.Количество();
	Для Индекс = 1 По КоличествоПроводок Цикл
		ОбратныйИндекс = КоличествоПроводок - Индекс;
		Если Проводки[ОбратныйИндекс].Сумма < 0 Тогда
			Проводки.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПростойУчетЕНС

Функция НачалоПростогоУчета() Экспорт
	
	Возврат '2024-01-01';
	
КонецФункции

// Остаток средств на ЕНС на выбранную дату, доступный для зачета начисленных сумм налогов.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организация, для которой определяется остаток.
//  Дата		 - Дата - дата, на которую определяется остаток.
// 
// Возвращаемое значение:
//   - Число - остаток средств. Отрицательный остаток - задолженность к уплате.
//
Функция ДоступныйОстатокСредствНаЕНС(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ОстаткиОбороты.Сумма) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &Счет6890, , Организация = &Организация) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Проводки.Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|	ГДЕ
	|		Проводки.Период >= &Дата
	|		И Проводки.СчетДт = &Счет6890
	|		И Проводки.СчетКт <> &Счет6890
	|		И Проводки.Организация = &Организация
	|		И Проводки.Активность) КАК ОстаткиОбороты";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет6890", ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Начисление налогов на ЕНС регламентной операцией.
//
// Параметры:
//  ТаблицаРеквизиты - Структура - таблица с реквизитами регламентной операции. Должна иметь колонки:
//  	* Период 		- Дата - Дата документа.
//  	* Организация 	- СправочникСсылка.Организации - Организация документа.
//  Движения - КоллекцияДвижений - наборы записей движений документа.
//  Отказ	 - Булево - Отказ от записи при ошибке.
//
Процедура НачислитьНалогиНаЕНС(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	НалогиКУплате = ПолучитьНалогиКУплате(Реквизиты.Организация, Реквизиты.Период);
	НДСНалоговогоАгентаКУПлате = ПолучитьНДСНалоговогоАгентаКУплате(Реквизиты.Организация, Реквизиты.Период);
	Если ЗначениеЗаполнено(НДСНалоговогоАгентаКУПлате) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НДСНалоговогоАгентаКУПлате, НалогиКУплате);
	КонецЕсли;
	
	СформироватьПроводкиНачисленияНалоговНаЕНС(НалогиКУплате, Реквизиты, Движения);
	
КонецПроцедуры

#Область ПростойУчетЕНСОбработчикиОбновления

// У всех документов удаляем в отложенном режиме все движения регистров ЕНС, начиная с даты начала простого учета ЕНС.
//  Исключение - списание остатков регистров ЕНС, которое делает последняя регламентная операция "Зачет авансов ЕНС".
//  У ряда документов с даты начала простого учета ЕНС удаляем вообще все движения:
//  - ЗаявлениеОЗачетеВСчетПредстоящейОбязанности
//  - ОперацияПоЕдиномуНалоговомуСчету
//  - УведомлениеОбИсчисленныхСуммахНалогов
//
Процедура УдалитьДвиженияРегистровЕНСПослеНачалаПростогоУчета(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетыПоЕдиномуНалоговомуСчету.Период КАК Период,
	|	РасчетыПоЕдиномуНалоговомуСчету.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету КАК РасчетыПоЕдиномуНалоговомуСчету
	|ГДЕ
	|	РасчетыПоЕдиномуНалоговомуСчету.Период >= &НачалоПростогоУчета
	|	И (НЕ РасчетыПоЕдиномуНалоговомуСчету.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|			ИЛИ ВЫРАЗИТЬ(РасчетыПоЕдиномуНалоговомуСчету.Регистратор КАК Документ.РегламентнаяОперация).Дата < &НачалоПростогоУчета)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете КАК РасчетыПоНалогамНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчете.Период >= &НачалоПростогоУчета
	|	И (НЕ РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|			ИЛИ ВЫРАЗИТЬ(РасчетыПоНалогамНаЕдиномНалоговомСчете.Регистратор КАК Документ.РегламентнаяОперация).Дата < &НачалоПростогоУчета)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете КАК РасчетыПоСанкциямНаЕдиномНалоговомСчете
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчете.Период >= &НачалоПростогоУчета
	|	И (НЕ РасчетыПоСанкциямНаЕдиномНалоговомСчете.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|			ИЛИ ВЫРАЗИТЬ(РасчетыПоСанкциямНаЕдиномНалоговомСчете.Регистратор КАК Документ.РегламентнаяОперация).Дата < &НачалоПростогоУчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Регистратор";
	
	Запрос.УстановитьПараметр("НачалоПростогоУчета", НачалоПростогоУчета());
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	ТипыРегистровЕНС = Новый Массив;
	ТипыРегистровЕНС.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыПоЕдиномуНалоговомуСчету"));
	ТипыРегистровЕНС.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыПоНалогамНаЕдиномНалоговомСчете"));
	ТипыРегистровЕНС.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыПоСанкциямНаЕдиномНалоговомСчете"));
	
	Выборка = Результат.Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеДокумента = Строка(Выборка.Регистратор);
		НачатьТранзакцию();
		
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ." + Выборка.Регистратор.Метаданные().Имя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			УдалитьВсеДвижения = ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявлениеОЗачетеВСчетПредстоящейОбязанности")
				Или ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету")
				Или ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.УведомлениеОбИсчисленныхСуммахНалогов");
				
			Для каждого Набор Из ДокументОбъект.Движения Цикл
				ОчиститьНабор = УдалитьВсеДвижения 
					Или ТипыРегистровЕНС.Найти(ТипЗнч(Набор)) <> Неопределено;
				Если ОчиститьНабор Тогда
					Набор.Очистить();
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОперацияПоЕдиномуНалоговомуСчету") Тогда
				ДокументОбъект.Проведен = Ложь;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию(); 
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре %1 не удалось обработать документ ""%2"" по причине:
					|%3'"),
				"ЕдиныйНалоговыйСчет.УдалитьДвиженияРегистровЕНСПослеНачалаПростогоУчета()",
				ПредставлениеДокумента,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Регистратор.Метаданные(), 
				Выборка.Регистратор, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПростойУчетЕНССлужебные

Процедура СформироватьПроводкиНачисленияНалоговНаЕНС(НалогиКУплате, Реквизиты, Движения)
	
	Если Не ЗначениеЗаполнено(НалогиКУплате) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержанияНалог = НСтр("ru='Единый налоговый счет: Начисление налога за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонСодержанияАванс = НСтр("ru='Единый налоговый счет: Авансовый платеж за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаНалога Из НалогиКУплате Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНалога.СрокУплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Макс(СтрокаНалога.СрокУплаты, Реквизиты.Период);
		Проводка.Организация = Реквизиты.Организация;
		Если СтрокаНалога.АвансовыйПлатеж Тогда
			ШаблонСодержания = ШаблонСодержанияАванс;
		Иначе
			ШаблонСодержания = ШаблонСодержанияНалог;
		КонецЕсли;
		Проводка.Содержание = СтрШаблон(ШаблонСодержания, 
			ПредставлениеПериода(СтрокаНалога.НачалоПериода, КонецДня(СтрокаНалога.КонецПериода)));
		
		Проводка.СчетДт = СтрокаНалога.СчетУчета;
		Для НомерСубконто = 1 По 3 Цикл
			ЗначениеСубконто = СтрокаНалога["Субконто" + НомерСубконто];
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, ЗначениеСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		
		Проводка.Сумма = СтрокаНалога.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПолучитьНалогиКУплате(Организация, Период)
	
	НачисленныеНалоги = НачисленныеНалогиЗаМесяц(Организация, Период);
	НачисленныеНалогиЗаКвартал = НачисленныеНалогиЗаКвартал(Организация, Период);
	Если ЗначениеЗаполнено(НачисленныеНалогиЗаКвартал) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленныеНалогиЗаКвартал, НачисленныеНалоги);
	КонецЕсли;
	НачисленныйНДС = НачисленныйНДС(Организация, Период);
	Если ЗначениеЗаполнено(НачисленныйНДС) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленныйНДС, НачисленныеНалоги);
	КонецЕсли;
	НалогНаПрибыльКварталПоРасчетнойПрибыли = НалогНаПрибыльКварталПоРасчетнойПрибыли(Организация, Период);
	Если ЗначениеЗаполнено(НалогНаПрибыльКварталПоРасчетнойПрибыли) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НалогНаПрибыльКварталПоРасчетнойПрибыли, НачисленныеНалоги);
	КонецЕсли;
	НалогНаПрибыльЕжемесячноПоРасчетнойПрибыли = НалогНаПрибыльЕжемесячноПоРасчетнойПрибыли(Организация, Период);
	Если ЗначениеЗаполнено(НалогНаПрибыльЕжемесячноПоРасчетнойПрибыли) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НалогНаПрибыльЕжемесячноПоРасчетнойПрибыли, НачисленныеНалоги);
	КонецЕсли;
	СтраховыеВзносыПереходНаПростойУчет = СтраховыеВзносыПереходНаПростойУчет(Организация, Период);
	Если ЗначениеЗаполнено(СтраховыеВзносыПереходНаПростойУчет) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтраховыеВзносыПереходНаПростойУчет, НачисленныеНалоги);
	КонецЕсли;
	НачисленныеНалоги.Сортировать("СчетПорядок");
	
	НалогиКУплате = ОписаниеТаблицыНалогов();
	НалогиКУплате.Колонки.Добавить("АвансовыйПлатеж", Новый ОписаниеТипов("Булево"));
	
	ОсновнаяРегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОрганеНаДату(Организация, Период);
	
	Для каждого СтрокаНачисления Из НачисленныеНалоги Цикл
		
		СчетУчета = СтрокаНачисления.СчетУчета;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
		
		УровеньБюджета = Неопределено;
		НомерСубконто = НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов");
		Если НомерСубконто > 0 Тогда
			УровеньБюджета = СтрокаНачисления["Субконто" + НомерСубконто];
		КонецЕсли;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(СчетУчета, Организация, Период, УровеньБюджета);
		Если Не ЗначениеЗаполнено(ВидНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНачисления.Сумма < 0
			И Не ВозможноОтрицательноеНачисление(ВидНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		Периодичность = Неопределено;
		Если СтрокаНачисления.ПоРасчетнойПрибыли Тогда
			Если СтрокаНачисления.ПрибыльЕжемесячно Тогда
				Периодичность = Перечисления.Периодичность.Месяц;
			ИначеЕсли Месяц(Период) = 12 Тогда
				Периодичность = Перечисления.Периодичность.Год;
			Иначе
				Периодичность = Перечисления.Периодичность.Квартал;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаНачисления.ПоРасчетнойПрибыли И СтрокаНачисления.ПрибыльЕжемесячно Тогда
			// Первый месяц следующего квартала
			ПериодПорядкаУплаты1 = КонецМесяца(КонецКвартала(Период) + 1); 
			ПорядокУплаты = ПорядокУплатыНалога(ВидНалога, Организация, ПериодПорядкаУплаты1, Периодичность);
			Если Не ЗначениеЗаполнено(ПорядокУплаты) Тогда
				Продолжить;
			КонецЕсли;
			// Второй месяц следующего квартала
			ПериодПорядкаУплаты2 = КонецМесяца(ПериодПорядкаУплаты1 + 1);
			ПорядокУплаты2 = ПорядокУплатыНалога(ВидНалога, Организация, ПериодПорядкаУплаты2, Периодичность);
			Если ЗначениеЗаполнено(ПорядокУплаты2) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорядокУплаты2, ПорядокУплаты);
			КонецЕсли;
			// Третий месяц следующего квартала
			ПериодПорядкаУплаты3 = КонецМесяца(ПериодПорядкаУплаты2 + 1);
			ПорядокУплаты3 = ПорядокУплатыНалога(ВидНалога, Организация, ПериодПорядкаУплаты3, Периодичность);
			Если ЗначениеЗаполнено(ПорядокУплаты3) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорядокУплаты3, ПорядокУплаты);
			КонецЕсли;
		Иначе
			ПорядокУплаты = ПорядокУплатыНалога(ВидНалога, Организация, КонецМесяца(Период), Периодичность);
			Если Не ЗначениеЗаполнено(ПорядокУплаты) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоОплат = ПорядокУплаты.Количество();
		Если КоличествоОплат > 1 Тогда
			СуммыОплат = Новый Массив(КоличествоОплат);
			СуммаПоСроку = Цел(СтрокаНачисления.Сумма / КоличествоОплат);
			Для Индекс = 0 По КоличествоОплат - 1 Цикл
				СуммыОплат[Индекс] = СуммаПоСроку;
			КонецЦикла;
			СуммаОкругления = СтрокаНачисления.Сумма - СуммаПоСроку * КоличествоОплат;
			СуммыОплат[КоличествоОплат - 1] = СуммыОплат[КоличествоОплат - 1] + СуммаОкругления;
		Иначе
			СуммыОплат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачисления.Сумма);
		КонецЕсли;
		
		Для ИндексСтроки = 0 По КоличествоОплат - 1 Цикл
			СтрокаПорядка = ПорядокУплаты[ИндексСтроки];
			СтрокаОплаты = НалогиКУплате.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаНачисления); 
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаПорядка); 
			СтрокаОплаты.Сумма = СуммыОплат[ИндексСтроки];
			СтрокаОплаты.АвансовыйПлатеж = СтрокаНачисления.ПоРасчетнойПрибыли И СтрокаНачисления.ПрибыльЕжемесячно;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НалогиКУплате;
	
КонецФункции

Функция НачисленныеНалогиЗаКвартал(Организация, Период)
	
	Если КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетаНалогов = СчетаНалоговСПериодичностьюКвартал(Организация, Период);
	Запрос.УстановитьПараметр("СчетаНалогов", СчетаНалогов);
	СчетаУплаты = Новый Массив;
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет); // 68.90
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
	|	ЛОЖЬ КАК ПоРасчетнойПрибыли,
	|	ЛОЖЬ КАК ПрибыльЕжемесячно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаНалогов),
	|			,
	|			Организация = &Организация,
	|			КорСчет НЕ В(&СчетаУплаты)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела))";
	
	НачисленияНалогов = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНалогов;
	
КонецФункции

Функция НачисленныеНалогиЗаМесяц(Организация, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетаНалогов = СчетаНалоговСПериодичностьюМесяц(Организация, Период);
	Запрос.УстановитьПараметр("СчетаНалогов", СчетаНалогов);
	СчетаУплаты = Новый Массив;
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет); // 68.90
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
	|	ЛОЖЬ КАК ПоРасчетнойПрибыли,
	|	ЛОЖЬ КАК ПрибыльЕжемесячно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаНалогов),
	|			,
	|			Организация = &Организация,
	|			КорСчет НЕ В(&СчетаУплаты)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)";
	
	НачисленияНалогов = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНалогов;
	
КонецФункции

Функция НалогНаПрибыльЕжемесячноПоРасчетнойПрибыли(Организация, Период)
	
	Если КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверяем учетную политику на следующий квартал
	УплатаАвансовПоНалогуНаПрибыль = УчетнаяПолитика.ПорядокУплатыАвансов(Организация, КонецМесяца(Период) + 1);
	Если УплатаАвансовПоНалогуНаПрибыль <> Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Месяц(Период) = 12 Тогда
		// Для расчета в декабре авансов на 1-й квартал следующего года берем данные 3-го квартала
		КонецТретьегоКвартала = НачалоКвартала(Период) - 1;
		НачалоПериода = НачалоКвартала(КонецТретьегоКвартала);
		КонецПериода = КонецТретьегоКвартала;
	Иначе
		// Для расчета авансов на 2-й - 4-й кварталы берем данные текущего квартала
		НачалоПериода = НачалоКвартала(Период);
		КонецПериода = КонецКвартала(Период);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетНалога = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом; // 68.04.1
	Запрос.УстановитьПараметр("СчетНалога", СчетНалога);
	СчетаУплаты = Новый Массив;
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет); // 68.90
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	ВЫБОР КОГДА -ХозрасчетныйОбороты.СуммаОборот > 0 ТОГДА -ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ КАК Сумма,
	|	ИСТИНА КАК ПоРасчетнойПрибыли,
	|	ИСТИНА КАК ПрибыльЕжемесячно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = &СчетНалога,
	|			,
	|			Организация = &Организация,
	|			КорСчет НЕ В(&СчетаУплаты)) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	И ВЫБОР КОГДА -ХозрасчетныйОбороты.СуммаОборот > 0 ТОГДА -ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ > 0";
	
	НачисленияНалогов = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНалогов;
	
КонецФункции

Функция НалогНаПрибыльКварталПоРасчетнойПрибыли(Организация, Период)
	
	Если КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УплатаАвансовПоНалогуНаПрибыль = УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период);
	Если УплатаАвансовПоНалогуНаПрибыль <> Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// При расчете за квартал учитываем суммы ежемесячных авансовых платежей в этом квартале - обороты с 68.90 не исключаем.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетНалога = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом; // 68.04.1
	Запрос.УстановитьПараметр("СчетНалога", СчетНалога);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	-ХозрасчетныйОстаткиИОбороты.СуммаОборот - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК Сумма,
	|	ИСТИНА КАК ПоРасчетнойПрибыли,
	|	ЛОЖЬ КАК ПрибыльЕжемесячно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = &СчетНалога,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)";
	
	НачисленияНалогов = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНалогов;
	
КонецФункции

Функция НачисленныйНДС(Организация, Период)
	
	Если КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС; // 68.02
	Запрос.УстановитьПараметр("СчетНДС", СчетНДС);
	СчетаУплаты = Новый Массив;
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет); // 68.90
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаУплаты.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	ВидыЦенностейИсключения = Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент();
	ВидыЦенностейИсключения.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейИсключения", ВидыЦенностейИсключения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СчетНДС КАК СчетУчета,
	|	Хозрасчетный.Порядок КАК СчетПорядок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ОКР(СУММА(Данные.Сумма), 0) КАК Сумма,
	|	ЛОЖЬ КАК ПоРасчетнойПрибыли,
	|	ЛОЖЬ КАК ПрибыльЕжемесячно
	|ИЗ
	|	(ВЫБРАТЬ
	|		-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &СчетНДС, , Организация = &Организация, НЕ КорСчет В (&СчетаУплаты), ) КАК ХозрасчетныйОбороты
	|	ГДЕ
	|		ХозрасчетныйОбороты.Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ЗаписиКнигиПродаж.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И НЕ ВидЦенности В (&ВидыЦенностейИсключения)
	|					И ЗаписьДополнительногоЛиста) КАК ЗаписиКнигиПродаж
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаписиКнигиПокупок.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И НЕ ВидЦенности В (&ВидыЦенностейИсключения)
	|					И ЗаписьДополнительногоЛиста) КАК ЗаписиКнигиПокупок) КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО (Хозрасчетный.Ссылка = &СчетНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Порядок
	|
	|ИМЕЮЩИЕ
	|	ОКР(СУММА(Данные.Сумма), 0) > 0";
	
	НачисленияНДС = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНДС;
	
КонецФункции

Функция ПолучитьНДСНалоговогоАгентаКУплате(Организация, Период)
	
	НачисленныеНалоги = НДСНалоговогоАгента(Организация, Период);
	Если Не ЗначениеЗаполнено(НачисленныеНалоги) 
		Или Не ЗначениеЗаполнено(НачисленныеНалоги.Строки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НалогиКУплате = ОписаниеТаблицыНалогов();
	НалогиКУплате.Колонки.Добавить("АвансовыйПлатеж", Новый ОписаниеТипов("Булево"));
	
	ВидНалога = Перечисления.ВидыНалогов.НДС;
	ПорядокУплаты = ПорядокУплатыНалога(ВидНалога, Организация, КонецМесяца(Период));
	Если Не ЗначениеЗаполнено(ПорядокУплаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоОплат = ПорядокУплаты.Количество();
	
	Для каждого СтрокаПоКонтрагенту Из НачисленныеНалоги.Строки Цикл
		Для каждого СтрокаПоВидуДоговора Из СтрокаПоКонтрагенту.Строки Цикл
			
			СуммыОплатПоВидуДоговора = Новый Массив(КоличествоОплат);
			СуммаПоСроку = Цел(СтрокаПоВидуДоговора.Сумма / КоличествоОплат);
			Для Индекс = 0 По КоличествоОплат - 1 Цикл
				СуммыОплатПоВидуДоговора[Индекс] = СуммаПоСроку;
			КонецЦикла;
			СуммаОкругления = СтрокаПоВидуДоговора.Сумма - СуммаПоСроку * КоличествоОплат;
			СуммыОплатПоВидуДоговора[КоличествоОплат - 1] = СуммыОплатПоВидуДоговора[КоличествоОплат - 1] + СуммаОкругления;
			
			Для ИндексСтроки = 0 По КоличествоОплат - 1 Цикл
				ОстатокСуммы = СуммыОплатПоВидуДоговора[ИндексСтроки];
				СтрокаПорядка = ПорядокУплаты[ИндексСтроки];
				Для каждого СтрокаНачисления Из СтрокаПоВидуДоговора.Строки Цикл
					Если СтрокаНачисления.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					СтрокаОплаты = НалогиКУплате.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаНачисления); 
					ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаПорядка);
					СтрокаОплаты.Сумма = Мин(ОстатокСуммы, СтрокаНачисления.Сумма);
					СтрокаНачисления.Сумма = СтрокаНачисления.Сумма - СтрокаОплаты.Сумма;
					ОстатокСуммы = ОстатокСуммы - СтрокаОплаты.Сумма;
					Если ОстатокСуммы <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат НалогиКУплате;
	
КонецФункции

Функция НДСНалоговогоАгента(Организация, Период)
	
	Если КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетНА = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; // 68.32
	Запрос.УстановитьПараметр("СчетНА", СчетНА);
	ВидыСубконтоНА = Новый Массив;
	ВидыСубконтоНА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоНА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоНА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоНА", ВидыСубконтоНА);
	ВидыЦенностейНА = Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент();
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностейНА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СчетНА КАК СчетУчета,
	|	Данные.Организация КАК Организация,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Договор КАК Договор,
	|	Данные.Документ КАК Документ,
	|	СУММА(Данные.Сумма) КАК Сумма
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация,
	|		ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|		ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|		ХозрасчетныйОбороты.Субконто3 КАК Документ,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &СчетНА, &ВидыСубконтоНА, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаписиКнигиПродаж.Организация,
	|		ЗаписиКнигиПродаж.Покупатель,
	|		ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|		ЗаписиКнигиПродаж.СчетФактура,
	|		-ЗаписиКнигиПродаж.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ВидЦенности В (&ВидыЦенностейНА)
	|					И ЗаписьДополнительногоЛиста) КАК ЗаписиКнигиПродаж) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Контрагент,
	|	Данные.Договор,
	|	Данные.Документ
	|
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.СчетУчета КАК СчетУчета,
	|	Обороты.Контрагент КАК Субконто1,
	|	Обороты.Договор КАК Субконто2,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Обороты.Договор КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	Обороты.Документ КАК Субконто3,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокумента,
	|	Обороты.Сумма КАК Сумма
	|ИЗ
	|	Обороты КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Обороты.Организация = ДанныеПервичныхДокументов.Организация
	|			И Обороты.Документ = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Обороты.Договор КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субконто1,
	|	ВидДоговора,
	|	Субконто2,
	|	ДатаДокумента,
	|	Субконто3
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Субконто1,
	|	ВидДоговора";
	
	НачисленияНДСНалоговогоАгента = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат НачисленияНДСНалоговогоАгента;
	
КонецФункции

Функция СтраховыеВзносыПереходНаПростойУчет(Организация, Период)
	
	Если КонецМесяца(Период) + 1 <> НачалоПростогоУчета() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем только остатки, не перенесенные на ЕНС в декабре 2023 г.
	// Проверяем наличие начислений за текущий месяц.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	СчетаНалогов = ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчетаСтраховыхВзносов(Период);
	Запрос.УстановитьПараметр("СчетаНалогов", СчетаНалогов);
	ВидыПлатежейВГосБюджет = Новый Массив;
	ВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	ВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежейВГосБюджет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок КАК СчетПорядок,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	-ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК Сумма,
	|	ЛОЖЬ КАК ПоРасчетнойПрибыли,
	|	ЛОЖЬ КАК ПрибыльЕжемесячно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&СчетаНалогов), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 В(&ВидыПлатежейВГосБюджет)
	|	И -ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток > 0
	|	И ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0";
	
	НачисленияНалогов = Запрос.Выполнить().Выгрузить();
	Возврат НачисленияНалогов;
	
КонецФункции

Функция ПорядокУплатыНалога(ВидНалога, Организация, Период, Знач Периодичность = Неопределено)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СрокУплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ПорядокУплаты = Неопределено;
	ДанныеНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, Период, Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога, , Периодичность);
	Если ЗначениеЗаполнено(ДанныеНалога) Тогда
		ПорядокУплаты = ДанныеНалога.Уплата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПорядокУплаты) Тогда
		// Если данных об уплате не нашли, возвращаем ближайший единый срок уплаты.
		МесяцУплаты = ДобавитьМесяц(Период, 1);
		СрокУплаты = Дата(Год(МесяцУплаты), Месяц(МесяцУплаты), 28);
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
			ПроизводственныйКалендарь,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СрокУплаты));
		СрокУплаты = ГрафикПереноса[СрокУплаты];
		Периодичность = Перечисления.Периодичность.Месяц;
	ИначеЕсли ТипЗнч(ПорядокУплаты) = Тип("ТаблицаЗначений") Тогда
		Периодичность = ПорядокУплаты[0].Периодичность;
	Иначе
		СрокУплаты = ПорядокУплаты.Срок;
		Периодичность = ПорядокУплаты.Периодичность;
	КонецЕсли;
	Если Периодичность = Перечисления.Периодичность.Квартал
		И КонецМесяца(Период) <> КонецКвартала(Период) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ПорядокУплаты) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаПорядка Из ПорядокУплаты Цикл
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.СрокУплаты = СтрокаПорядка.Срок;
		КонецЦикла;
	Иначе
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.СрокУплаты = СрокУплаты;
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(Период);
		КонецПериода = КонецМесяца(Период);
	Иначе
		НачалоПериода = НачалоКвартала(Период);
		КонецПериода = КонецКвартала(Период);
	КонецЕсли;
	
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НачалоПериода = НачалоПериода;
		СтрокаРезультата.КонецПериода = КонецПериода;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СчетаНалоговСПериодичностьюКвартал(Организация, Период)
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ЗемельныйНалог);    // 68.06
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ТранспортныйНалог); // 68.07
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НалогНаИмущество);  // 68.08
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ЕНприУСН);          // 68.12
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ТорговыйСбор);      // 68.13
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_ИП);           // 68.21.1
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины); // 68.21.2
	// Включение в список налога на прибыль определяется учетной политикой.
	УплатаАвансовПоНалогуНаПрибыль = УчетнаяПолитика.ПорядокУплатыАвансов(Организация, КонецМесяца(Период) + 1);
	Если УплатаАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально Тогда
		Результат.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом); // 68.04.1
	КонецЕсли;
	// Страховые взносы ИП "за себя". При переходе на простой учет для страховых взносов отдельная функция.
	Если КонецМесяца(Период) + 1 <> НачалоПростогоУчета() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат, ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчетаСтраховыхВзносовИП());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СчетаНалоговСПериодичностьюМесяц(Организация, Период)
	
	// Все обслуживаемые счета налогов (68.х), кроме "зарплатного" НДФЛ, акцизов, НДС, агентского НДС, патентов, АУСН,
	// прочих налогов и сборов и счетов с квартальной периодичностью.
	Результат = ЕдиныйНалоговыйСчетПовтИсп.ОбслуживаемыеСчетаУчетаНалогов();
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	// НДФЛ налогового агента начисляется при выплате зарплаты.
	Для каждого СчетАгентскогоНДФЛ Из УчетЗарплаты.СписокСчетовАгентскогоНДФЛ() Цикл
		СчетаИсключения.Добавить(СчетАгентскогоНДФЛ.Значение);
	КонецЦикла;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.Акцизы); // 68.03
	// Для НДС и агентского НДС есть отдельные функции.
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДС); // 68.02
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента); // 68.32
	// Патенты на ЕНС отражаются документами ОперацияСПатентом.
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НалогПриПСН); // 68.14
	// Налог АУСН отражается документами КорректировкаЕНС при подключенном сервисе автоматически, или вручную
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НалогПриАУСН); // 68.15
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы); // 68.10
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, СчетаНалоговСПериодичностьюКвартал(Организация, Период));
	// Включение в список налога на прибыль определяется учетной политикой.
	УплатаАвансовПоНалогуНаПрибыль = УчетнаяПолитика.ПорядокУплатыАвансов(Организация, КонецМесяца(Период) + 1);
	Если УплатаАвансовПоНалогуНаПрибыль <> Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом); // 68.04.1
	КонецЕсли;
	// Исключаем все непредопределенные счета, для них нужно при необходимости использовать документ КорректировкаЕНС.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоНалогам), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию))
	|	И НЕ Хозрасчетный.Предопределенный
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Результат = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Результат, СчетаИсключения);
	Возврат Результат;
	
КонецФункции

Функция ВозможноОтрицательноеНачисление(ВидНалога)
	
	Возврат ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет
		Или ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
		Или ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы
		Или ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы
		Или ВидНалога = Перечисления.ВидыНалогов.ЕСХН
		Или ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП
		Или ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины;
	
КонецФункции

#КонецОбласти
