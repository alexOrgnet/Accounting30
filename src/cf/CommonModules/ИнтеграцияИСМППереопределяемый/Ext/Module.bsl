#Область ПрограммныйИнтерфейс

//Определяет использование актов о расхождении после приемки для документа
//
//Параметры:
//  Документ     - ДокументСсылка - документ, для которого необходимо определить возможность использования актов о расхождении.
//  Используется - Булево - в данный параметр необходимо установить признак использования актов, по умолчанию установлен в Ложь.
//
Процедура ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Заполняет переданную таблицу данные из ТЧ документа.
//
//Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидМаркируемойПродукции) Экспорт
	
	ИнтеграцияИСМПБП.СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидМаркируемойПродукции);
	
КонецПроцедуры

//Заполняет таблицу маркированный товаров по выбранным документам.
//
//Параметры:
//   Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//   ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
//   СтандартнаяОбработка - Булево - Необходимость обработки события "по-умолчанию" (установить Ложь при переопределении).
//
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПБП.СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований);
	
КонецПроцедуры

//Дополнительные действия прикладной конфигурации при изменении статуса документа ИСМП.
//
//Параметры:
//   ДокументСсылка   - ДокументСсылка     - ссылка на документ с изменением статуса.
//   ПредыдущийСтатус - ПеречислениеСсылка - предыдущий статус обработки.
//   НовыйСтатус      - ПеречислениеСсылка - новый статус обработки.
//   ПараметрыОбновленияСтатуса - Структура, Неопределено - (См. ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса).
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт

	Возврат;

КонецПроцедуры

#Область Серии

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//  (См. ИнтеграцияИСМП.СгенерироватьСерии)
//
Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Определяет заполнение Товарного знака по номенклатуре.
// 
// Параметры:
// 	Номенклатура - Массив из ОпределяемыйТип.Номенклатура - Исходные данные для заполнения.
// 	ТоварныеЗнакиПоНоменклатуре - Соответствие:
// 	 * Ключ     - ОпределяемыйТип.Номенклатура - Значение номенклатуры из исходных данных.
// 	 * Значение - Строка, произвольный         - Товарный знак по номенклатуре (значение будет конвертировано в строку).
Процедура ТоварныеЗнакиПоНоменклатуре(Номенклатура, ТоварныеЗнакиПоНоменклатуре) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для поиска по коду элемента в Классификаторе ТН ВЭД.
// Если элемент не найден, то, при использовании классификатора, создать элемент справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
// 
// Параметры:
//  КодТНВЭД - Строка - Строка с кодом классификатора ТН ВЭД.
//  ДанныеЭлемента - Структура - Переопределяемый параметр, содержащий структуру со свойствами:
//   * ЭлементСправочника - Произвольный - Ссылка на элемент классификатора.
//   * НаименованиеПолное - Строка - наименование найденного элемента классификатора.
//  Наименование - Строка - Наименование элемента классификатора ТН ВЭД по данным ГИС МТ.
Процедура ПриОпределенииСопоставленногоКлассификатораТНВЭД(КодТНВЭД, ДанныеЭлемента, Наименование = "") Экспорт
	
	ЭлементСправочника = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(КодТНВЭД);
	Если ЭлементСправочника <> Неопределено Тогда
		ДанныеЭлемента.ЭлементСправочника = ЭлементСправочника;
		ДанныеЭлемента.НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСправочника, "НаименованиеПолное");
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения объема маркируемой продукции в литрах.
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на маркируемую продукцию.
//   * ОбъемВЛитрах - Число - Объем в литрах, который необходимо заполнить.

Процедура ОбъемМаркируемойПродукцииВЛитрах(Таблица) Экспорт
	
	МассивНоменклатуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Таблица.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КоэффПересчетаДал, 0) * 10 КАК ОбъемВЛитрах
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.Номенклатура В(&Номенклатура)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаНоменклатура Из НайденныеСтроки Цикл
			СтрокаНоменклатура.ОбъемВЛитрах = Выборка.ОбъемВЛитрах;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

#Область КаталогGS46

// Заполняет свойства номенклатуры, используемые для передачи в каталог GS46. Могут быть заполнены колонки:
//   * Торговая марка,
//   * Страна производства,
//   * Вид обуви,
//   * Материал верха,
//   * Материал подкладки,
//   * Материал низа,
//   * Цвет,
//   * Размер.
// 
// Параметры:
//   Товары - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСвойстваНоменклатурыДляКаталогаGS46(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN КАК GTIN,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.ВидНоменклатуры) КАК ВидОбуви,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.НаименованиеПолное = """"
	|			ТОГДА СправочникНоменклатура.Наименование
	|		ИНАЧЕ СправочникНоменклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроизводства
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеGTINКаталогаGS46(Товары) Экспорт
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("EAN",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для каждого СтрокаТовары Из Товары.Выгрузить() Цикл
		НоваяСтрока              = ТаблицаТовары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
		НоваяСтрока.EAN          = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТовары.GTIN);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.EAN КАК EAN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.EAN КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.EAN = Штрихкоды.Штрихкод
	|ГДЕ
	|	Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Набор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	СтрокаНабора = Набор.Добавить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Набор.Отбор.Штрихкод.Установить(Выборка.Штрихкод, Истина);
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиНоменклатуры

// Обработчик события получения сведений об иерархии упаковок номенклатуры.
// Если обработчик пустой, то подсистема виртуальной агрегации не сможет автоматически распределять
// коды маркировки по упаковкам. В этом случае будет возможна только ручная агрегация.
//
// Параметры:
//  Номенклатура         - Массив из ОпределяемыйТип.Номенклатура - Номенклатура [Входящий]
//  УпаковкиНоменклатуры - ТаблицаЗначений - сведения об упаковках [Исходящий], должны быть отсортированы по возрастанию коэффициента упаковки:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - номенклатура упаковки,
//   * Упаковка           - ОпределяемыйТип.Упаковка - упаковка,
//   * РодительУпаковки   - ОпределяемыйТип.Упаковка - родительская упаковка,
//   * ЕдиницаИзмерения   - Строка - наименование единицы измерения упаковки,
//   * Наименование       - Строка - наименование упаковки,
//   * КоличествоУпаковок - Число - количество упаковок, содержащихся в родительской упаковке,
//   * Коэффициент        - Число - коэффициент пересчета в единицу измерения номенклатуры.
//
Процедура ПриОпределенииИерархииУпаковокНоменклатуры(Номенклатура, УпаковкиНоменклатуры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Наборы

// Обработчик события получения сведений о комплектующих набора. Данные о комплектующих могут быть
// получены из вариантов комплектации (ERP, УНФ) при создании наборов оптовиками и розничными магазинами из введенных в оборот товаров
// и могут быть получены из производственных спецификаций при производстве наборов и их комплектующих.
// Если обработчик пустой, то в документе маркировки возможно ручное создание наборов, без проверки принадлежности.
//
// Параметры:
//  Наборы - ТаблицаЗначений, ДанныеФормыКоллекция, Массив - массив строк [Входящий]:
//   * НомерСтроки         - Число - уникальный номер строки с набором,
//   * Номенклатура        - ОпределяемыйТип.Номенклатура - номенклатура набора,
//   * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика набора,
//   * Упаковка            - ОпределяемыйТип.Упаковка - упаковка набора,
//   * КоличествоУпаковок  - Число - количество упаковок набора,
//   * Количество          - Число - количество наборов.
//  КомплектующиеНаборов - ТаблицаЗначений - сведения о наборах [Исходящий], должны быть отсортированы по убыванию номера строки набора:
//   * НомерСтрокиНабора            - Число - уникальный номер строки с набором,
//   * НоменклатураНабора           - ОпределяемыйТип.Номенклатура - номенклатура набора,
//   * ХарактеристикаНабора         - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика набора,
//   * УпаковкаНабора               - ОпределяемыйТип.Упаковка - упаковка набора,
//   * НомерСтрокиКомплектации      - Число - порядковый номер строки комплектации,
//   * Номенклатура                 - ОпределяемыйТип.Номенклатура - номенклатура комплектующей набора,
//   * Характеристика               - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика комплектующей набора,
//   * Упаковка                     - ОпределяемыйТип.Упаковка - упаковка комплектующей набора,
//   * КоличествоУпаковок           - Число - количество упаковок комплектующей набора,
//   * Количество                   - Число - количество комплектующей набора.
Процедура ПриОпределенииКомплектующихНаборов(Наборы, КомплектующиеНаборов) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиНабора,
	|	ТаблицаТоваров.Номенклатура КАК НоменклатураНабора,
	|	ТаблицаТоваров.Характеристика КАК ХарактеристикаНабора,
	|	ТаблицаТоваров.Упаковка КАК УпаковкаНабора,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковокНабора,
	|	ТаблицаТоваров.Количество КАК КоличествоНаборов
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтрокиНабора КАК НомерСтрокиНабора,
	|	ТаблицаТоваров.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаТоваров.УпаковкаНабора КАК УпаковкаНабора,
	|	МИНИМУМ(ВариантыКомплектацииНоменклатурыТовары.НомерСтроки) КАК НомерСтрокиКомплектации,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Упаковка,
	|	ТаблицаТоваров.КоличествоУпаковокНабора / ВариантыКомплектацииНоменклатуры.Количество * СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоУпаковок,
	|	ТаблицаТоваров.КоличествоНаборов / ВариантыКомплектацииНоменклатуры.Количество * СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.НоменклатураНабора = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (СправочникНоменклатура.ОсновнаяСпецификацияНоменклатуры = ВариантыКомплектацииНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО (ВариантыКомплектацииНоменклатуры.Ссылка = ВариантыКомплектацииНоменклатурыТовары.Ссылка)
	|ГДЕ
	|	НЕ ВариантыКомплектацииНоменклатурыТовары.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.НомерСтрокиНабора,
	|	ТаблицаТоваров.НоменклатураНабора,
	|	ТаблицаТоваров.ХарактеристикаНабора,
	|	ТаблицаТоваров.УпаковкаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ТаблицаТоваров.КоличествоУпаковокНабора,
	|	ТаблицаТоваров.КоличествоНаборов,
	|	ВариантыКомплектацииНоменклатуры.Количество";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",         ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТоваров.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТоваров.Колонки.Добавить("Упаковка",            Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаТоваров.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Для Каждого Строка Из Наборы Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст = ТекстЗапроса;
	КомплектующиеНаборов = Запрос.Выполнить().Выгрузить();
	

	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПанельАдминистрированияИСМП

// Предназначения для управления признаком возможности включения / отключения ведения учета МРЦ табачной продукции.
// При заполнении причины - соответствующая доступность изменяется, на форме отображатеся указанная причина.
// Например, можно запретить отключение функции, если ведется учет МРЦ в составе серий или характеристик.
// 
//Параметры:
//  ВозможноВключение              - Булево - Признак возможности включения.
//  ПричинаНевозможностиВключения  - Строка - Причина, по которой невозможно включить учет МРЦ.
//  ВозможноОтключение             - Булево - Признак возможности отключения.
//  ПричинаНевозможностиОтключения - Строка - Причина, по которой невозможно выключить учет МРЦ.
Процедура ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(ВозможноВключение, ПричинаНевозможностиВключения, ВозможноОтключение, ПричинаНевозможностиОтключения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Требуется определить массив ссылок организаций, исключаемых из отображаемого списка в общей форме "ФормаВыбораСпискаОрганизацийИСМП".
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списка отбора.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	ИнтеграцияИСПереопределяемый.ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОРганизаций);
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаОстатков

// Определяет ссылку на документ-основание маркировки товаров, как документ, являющийся основанием для маркировки остатков.
// 
// Параметры:
// 	СсылкаНаДокумент   - ОпределяемыйТип.ОснованиеМаркировкаТоваровИСМП - Ссылка на проверямый документ.
// 	ЯвляетсяОснованием - Булево                                         - Выходной параметр.
Процедура ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСредствамиККТ

// При определении текста запроса платежных документов по документу продажи или возврата.
// Определяет текст запроса получения ссылок на платежные документы, из которых могла выполняться проверка средствами ККТ при пробитии чека, для отображения результатов проверки при открытии формы проверки.
// 
// Используется в случае наличия функционала, при котором возможно пробитие чека на ККТ из платежного документа, связанного
// с товароучетным документом, в котором присутствуют коды маркировки, и при заполнении параметров сканирования платежного документа используется
// ссылка на платежный документ (ПараметрыСканирования.СсылкаНаДокумент), а не ссылка на товароучетный документ.
// Например: Приходный кассовый ордер может быть оформлен по нескольким документам Реализации товара с кодами маркировки,
// при этом при заполнении параметров сканирования для ПКО ПараметрыСканирования.СсылкаНаДокумент - устанавливается ссылка
// на ПКО. В этом случае, в переопределеннии необходимо дополнить текст запроса для получения документов ПКО,
// связанными с текущей реализацией. Возможен аналогичный сценарий с РКО и Возвратом.
//
// Текст запроса присоединяется конструкцией ОБЪЕДИНИТЬ ВСЕ, должен содержать единственное поле поле со ссылкой на платежный документ
// типа ОпределяемыйТип.ОснованиеФискальнойОперацииИСМП.
// В запросе установлен параметр &СсылкаНаДокумент значением параметра СсылкаНаДокумент.
// 
// Параметры:
//  СсылкаНаДокумент                - ОпределяемыйТип.ОснованиеФискальнойОперацииИСМП - Ссылка на товароучетный документ.
//  ТекстЗапросаПлатежныхДокументов - Строка - Текст запроса платежных документов по товароучетному
Процедура ПриОпределенииТекстаЗапросаПлатежныхДокументовПоДокументуПродажиИлиВозврата(СсылкаНаДокумент, ТекстЗапросаПлатежныхДокументов) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
//Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента) 
		И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ДанныеЗаполнения.Свойство("Организация", ДокументОбъект.Организация);
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			
			Справочники.Организации.ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОсновнаяОрганизация);
			
			ДокументОбъект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		ИнтеграцияИСМПБП.ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП") Тогда
		ИнтеграцияИСМПБП.ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП") Тогда
		ИнтеграцияИСМПБП.ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		ИнтеграцияИСМПБП.ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратВОборотИСМП") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при выполнении заполнения набора из какого-либо значения.
//
//Параметры:
//   РегистрСведенийНаборЗаписей - РегистрСведенийНаборЗаписей - заполняемый регистр сведений,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияРегистраСведений(РегистрСведенийНаборЗаписей, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ОрганизацияПоУмолчанию());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТипыРасхожденийКодовМаркировки

// Реализовать получение значение Брак определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
Процедура ПриОпределенииТипаРасхожденияИСМПБрак(ТипРасхождения) Экспорт
	
	ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Брак;
	
КонецПроцедуры

// Реализовать получение значение Излишек определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
Процедура ПриОпределенииТипаРасхожденияИСМПИзлишек(ТипРасхождения) Экспорт
	
	ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Излишек;
	
КонецПроцедуры

// Реализовать получение значение Недостача определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
//  
Процедура ПриОпределенииТипаРасхожденияИСМПНедостача(ТипРасхождения) Экспорт
	
	ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Недостача;
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

#Область Отладка

Процедура ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Характеристика") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли; 
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетИСМП") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодыНаБалансе.Характеристика");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПодпись

// Предназначена для получения сертификата на компьютере по строке отпечатка.
// (См. ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку)
//
// Параметры:
//   Сертификат             - СертификатКриптографии - найденный сертификат электронной подписи и шифрования.
//   Отпечаток              - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - если Истина, тогда искать в личном хранилище, иначе везде.
//   СтандартнаяОбработка   - Булево - признак обработки стандартной библиотекой (установить Ложь при переопределении)
//
Процедура ПриОпределенииСертификатаПоОтпечатку(Сертификат, Отпечаток, ТолькоВЛичномХранилище, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет признак использования производства на стороне.
//
// Параметры:
//  Используется - Булево - Признак использования производства на стороне.
Процедура ИспользуетсяПереработкаНаСтороне(Используется) Экспорт

	Возврат;

КонецПроцедуры

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт

	ИнтеграцияИСПереопределяемый.ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется);
	
КонецПроцедуры

// Процедура заполняет признак использования производственного объекта.
//
// Параметры:
//  Используется - Булево - Признак использования производственного объекта.
Процедура ПриОпределенииИспользованияПроизводственногоОбъекта(Используется) Экспорт

	Возврат;

КонецПроцедуры

// Процедура заполняет признак использования передачи товаров между организациями.
// Вызывается из документа ОтгрузкаТоваровИСМП для определения доступных типов элемента формы Контрагент.
//
// Параметры:
//  Используется - Булево - Признак использования передачи товаров между организациями, значение по умолчанию Ложь.
Процедура ПриОпределенииИспользованияПередачиТоваровМеждуОрганизациями(Используется) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииСкладаДокументаОснования(Склад, ДокументОснование) Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьКодыТНВЭДПоНоменклатуреВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.Номенклатура,
	|	вт_Товары.Номенклатура.КодТНВЭД.Код КАК КодТНВЭД
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1].КодТНВЭД = Выборка.КодТНВЭД;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменаИСМП

// Предназачена для модификации текста запроса по расчету неоформленных документов ЭДО
// Сценарий использования: заменить текст "&ОграничениеИсходящихДокументовЭДО" на типы неоформленных
// с помощью ЭДО документов продажи.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//
Процедура ПриПолучениТекстаЗапросаНеоформленныхДокументовЭДО(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияЭД.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
	|		ПО СостоянияЭД.СсылкаНаОбъект = ШтрихкодыРеализации.Ссылка
	|ГДЕ
	|	СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
	|	И НЕ(ШтрихкодыРеализации.Ссылка ЕСТЬ NULL)
	|	И (&БезОтбораПоОрганизации
	|	ИЛИ СостоянияЭД.Организация В (&Организации))";
	
КонецПроцедуры

#КонецОбласти


//Получение ссылки ТН ВЭД по коду.
//
//Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности.
//  ТНВЭД - Произвольный - искомый элемент.
//
Процедура КлассификаторТНВЭД(КодТНВЭД, ТНВЭД) Экспорт
	
	ТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(КодТНВЭД);
	
КонецПроцедуры
