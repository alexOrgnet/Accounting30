#Область ПрограммныйИнтерфейс

// Открывает форму для продления текущего тарифа или оплаты нового тарифа.
// Перед открытием сохраняет текущие значения тарифициремых опций во временное хранилище.
//
// Параметры:
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы-владельца
//                           - Неопределено - если значения тарифицируемых опций сохранять не нужно
//
// Возвращаемое значение:
//   Строка - Адрес временного хранилища текущих значений тарифицируемых опций
//
Функция ОткрытьФормуОплатыСервиса(УникальныйИдентификатор = Неопределено) Экспорт
	
	ОплатаСервисаКлиент.ОткрытьФормуОплатыСервиса();
	
	Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		Возврат ПоместитьВоВременноеХранилище(ТарификацияБПВызовСервера.ЗначенияТарифицируемыхОпций(), УникальныйИдентификатор);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Оповещает пользователя о том, что его действие заблокировано
// ограничением тарифа и записывает информацию об этом в журнал регистрации.
//
Процедура ОповеститьОбОграниченииТарифа(ИмяОбъекта) Экспорт
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		СобытиеЖурналаРегистрацииСообщение(),
		,
		Строка(ИмяОбъекта),
		,
		Истина);
	
	ТекстПредупреждения = ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения();
	ПоказатьПредупреждение(
		,
		ТекстПредупреждения,
		,
		НСтр("ru='Ограничение тарифа'"));
	
КонецПроцедуры

// Открывает форму выбора тарифа.
// 
// Параметры:
//  - Владелец (обязательный) - форма или элемент управления другой формы.
//  - ПараметрыФормы (не используется) - сохраняется для совместимости с БРО.
//
Процедура ОткрытьФормуВыбораТарифа(Владелец = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ОплатаСервисаБПКлиент.ОткрытьФормуВыбораТарифа(Владелец);
	
КонецПроцедуры

// Открывает форму организации.
//
Процедура ПерейтиВНастройкиОрганизации() Экспорт
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ТарификацияБПВызовСервера.ПараметрыОткрытияНастроекОрганизации());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СобытиеЖурналаРегистрацииСообщение()
	
	КодЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Вызов функции'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ТарификацияБПКлиентСервер.ГруппаСобытийЖурналаРегистрации());
	
КонецФункции

Процедура ОтобразитьБаннерПревышенияЛимитаТарифаНаЧислоСотрудников(Форма, Организация, ВключенОтборПоОрганизации) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ВключенОтборПоОрганизации Тогда
		Элементы.ПредупреждениеОПревышенииЛимитаТарифа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ТарификацияБПВызовСервера.РезультатПроверкиУсловийТарификацииПоКоличествуСотрудников(
		Организация);
	Если РезультатПроверки.УсловияВыполнены Тогда
		Элементы.ПредупреждениеОПревышенииЛимитаТарифа.Видимость = Ложь;
	Иначе
		Элементы.ПредупреждениеОПревышенииЛимитаТарифа.Видимость = Истина;
		Элементы.ТекстПредупрежденияЛимитТарифа.Заголовок = СтрШаблон(
			НСтр("ru = 'Количество сотрудников превысило ограничение тарифа (%1 из %2)'"),
			РезультатПроверки.ТекущееКоличествоСотрудников,
			РезультатПроверки.КоличествоСотрудниковПоТарифу); 
	КонецЕсли;
	
КонецПроцедуры

Функция ИнтервалПервойПроверкиОплатыТарифа() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция НеобходимаПроверкаЛимитаТарифаЧисленностиСотрудников(ИмяСобытия) Экспорт
	
	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить("Запись_Сотрудники");
	ИменаСобытий.Добавить("Запись_ПриемНаРаботу");
	ИменаСобытий.Добавить("Запись_Увольнение");
	ИменаСобытий.Добавить("ИзменениеКадровыхДокументов");
	
	Возврат ИменаСобытий.Найти(ИмяСобытия) <> Неопределено;
	
КонецФункции

#КонецОбласти