////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для обработки заявок на открытие счета:
// - формирование электронных представлений заявок и отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбращениеКСервису

// Структура параметров для алгоритма, передающего информацию о ходе фонового задания в форму с индикатором.
//
// Возвращаемое значение:
//	Структура - см. переменную Состояние.
//
Функция СостояниеПрогрессаПодписанияИОтправки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяШага", ""); // 1 = "подготовка"; 2 = "подписание"; 3 = "транзакции"; 4 = "отправка"
	
	Состояние = Новый Структура;
	Состояние.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Состояние.Вставить("ВыполненоДействий", 0);  // часть выполненных действий шага
	Состояние.Вставить("КоличествоДействий", 0); // сколько условных действий составляет шаг
	
	Возврат Состояние;
	
КонецФункции

// Если получение транзакции связано с событием по заявке на открытие счета, то обновляем состояние заявки.
// В этом случае по типу транзакции можно определить событие по заявке.
// 
// Параметры:
//  РеквизитыТранзакции - Структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции().
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* ИдентификаторТранзакции  - Строка - идентификатор транзакции.
//		* Документооборот  - СправочникСсылка.ДокументооборотыОбменаСБанками - документооборот, в рамках которого была получена транзакция.
//
Процедура ПриПолученииТранзакции(РеквизитыТранзакции, Результат) Экспорт
	
	Если ТипЗнч(РеквизитыТранзакции.ТипТранзакции) <> Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета")
		Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = УниверсальныйОбменСБанками.ПредметТранзакции(РеквизитыТранзакции.Транзакция);
	Если ТипЗнч(Предмет) <> Тип("ДокументСсылка.ЗаявкаНаОткрытиеСчета")
	 Или Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.Выполнено Тогда
		РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ОбновитьСостояниеЗаявкиПриПолученииСообщения(
			Предмет,
			РеквизитыТранзакции);
	Иначе
		РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ЗаписатьОшибку(
			Предмет,
			РеквизитыТранзакции.Организация,
			РеквизитыТранзакции.Банк,
			Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Если отправка транзакции связана с событием по заявке на открытие счета, то обновляем состояние заявки.
// В этом случае по типу транзакции можно определить событие по заявке.
// 
// Параметры:
//  РеквизитыТранзакции - Структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции().
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//
Процедура ПриОтправкеТранзакции(РеквизитыТранзакции, Результат) Экспорт
	
	Если ТипЗнч(РеквизитыТранзакции.ТипТранзакции) <> Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаОткрытиеСчета")
		Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = УниверсальныйОбменСБанками.ПредметТранзакции(РеквизитыТранзакции.Транзакция);
	Если ТипЗнч(Предмет) <> Тип("ДокументСсылка.ЗаявкаНаОткрытиеСчета")
	 Или Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.Выполнено Тогда
		РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ОбновитьСостояниеЗаявкиПриОтправкеСообщения(
			Предмет,
			РеквизитыТранзакции);
	Иначе
		РегистрыСведений.СостояниеЗаявокНаОткрытиеСчета.ЗаписатьОшибкуПоАктуальномуСостоянию(
			Предмет,
			РеквизитыТранзакции,
			Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объект XDTO из корневого элемента XML по схеме пакетаXDTO ЗаявкиНаОткрытиеСчета.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//	ДанныеXML     - Строка, ХранилищеЗначения - Данные XML из характеристик сервиса заявок на открытие счета.
//
// Возвращаемое значение:
//	ОбъектXDTO, Неопределено - Объект XDTO, прочитанный из XML, или Неопределено в случае ошибок или отсутствия данных.
//
Функция ОбъектXDTOХарактеристики(СервисОбменаСБанками, ДанныеXML) Экспорт
	
	УсловияОбслуживания = ФабрикаXDTO.Тип("http://www.v8.1c.ru/banks/AccountServices", "УсловияОбслуживания");
	
	Возврат УниверсальныйОбменСБанкамиОбщегоНазначения.ОбъектXDTOХарактеристики(СервисОбменаСБанками, ДанныеXML, УсловияОбслуживания);

КонецФункции

#КонецОбласти

#Область ОбновлениеДанныхСервиса

// Процедура - обработчик начала получения данных о сервисе заявок на открытие счета.
// Предназначена для вызова из модуля форм, в которых требуются актуальные данные о сервисе.
//
// Параметры:
//  СервисОбменаСБанками - Перечисление.СервисыОбменаСБанками - Сервис обмена.
//  Форма - ФормаКлиентскогоПриложения - должна содержать реквизиты СведенияОСервисе И СведенияОДлительнойОперации
//
Процедура НачатьОбновлениеДанныхСервиса(СервисОбменаСБанками, Форма) Экспорт 

	СведенияОСервисе = Форма.СведенияОСервисе;
	СведенияОДлительнойОперации = Форма.СведенияОДлительнойОперации;
	
	Если Форма.ТолькоПросмотр 
		ИЛИ СведенияОСервисе.ДанныеАктуальны
		ИЛИ СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		// Обновление не требуется или невозможно.
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено Тогда
		// Не завершено предыдущее фоновое задание, новое не запускаем.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ОжидатьЗавершение           = 0; // Не ждем завершения.
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(НСтр("ru = 'Обновление данных сервиса %1'"), СервисОбменаСБанками);
	ПараметрыВыполнения.КлючФоновогоЗадания = ПараметрыВыполнения.КлючФоновогоЗадания;
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("СервисОбменаСБанками", СервисОбменаСБанками);
	АдресХранилища = "";
	
	СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса";
	СведенияОДлительнойОперации.ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"УниверсальныйОбменСБанками.ОбновитьДанныеСервиса", ПараметрыПроцедуры, АдресХранилища);
		
КонецПроцедуры

#КонецОбласти

#Область СостояниеЗаявокНаОткрытиеСчета

// Возвращает признак того, что заявка была одобрена.
//
// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияЗаявокНаОткрытиеСчета - текущее состояние заявки.
// 
// Возвращаемое значение:
//   Булево - Истина, если заявка ранее уже была одобрена банком.
//
Функция ЗаявкаОдобрена(Состояние) Экспорт 

	Возврат Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт");
	
КонецФункции	

// Возвращает цвет текста или фона для элемента, отображающего состояние заявки на кредит.
//
// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияЗаявокНаОткрытиеСчета - состояние заявки на кредит.
// 
// Возвращаемое значение:
// 	Цвет - Цвет состояния.
//
Функция ЦветСостояния(Состояние) Экспорт 

	ЦветСостояния = Новый Цвет; // Автоцвет

	Если ЗаявкаОдобрена(Состояние) Тогда
		ЦветСостояния = ЦветаСтиля.ЦветШрифтаСостояниеЗаявкиНаКредитОдобрено;
	КонецЕсли;	
	
	Возврат ЦветСостояния;
	
КонецФункции	

// Возвращает документооборот по заявке на кредит.
//
// Параметры:
//	ЗаявкаНаОткрытиеСчета - ДокументСсылка.ЗаявкаНаОткрытиеСчета - Ссылка на заявку.
//
// Возвращаемое значение:
//	СправочникСсылка.ДокументооборотыОбменаСБанками - ссылка на документооборот по заявке.
//
Функция ДокументооборотПоЗаявке(ЗаявкаНаОткрытиеСчета) Экспорт

	Результат = Справочники.ДокументооборотыОбменаСБанками.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаОткрытиеСчета", ЗаявкаНаОткрытиеСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаОткрытиеСчета.Транзакция.Документооборот КАК Документооборот
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета = &ЗаявкаНаОткрытиеСчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Документооборот) Тогда
			Результат = Выборка.Документооборот;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет реквизиты, отражающие состояние документооборота по заявке на открытие счета.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - набор взаимодействий с банком по определенному
//                                                                      предмету обмена (например, заявке на кредит).
//  ОписаниеСтатуса - Структура - см. УниверсальныйОбменСБанкамиПереопределяемый.СтатусДокументооборота()
//
Процедура СтатусДокументооборота(Документооборот, ОписаниеСтатуса) Экспорт
	
	// По-умолчанию состояние как будто заявка во все банки просрочена.
	ОписаниеСтатуса.Завершен         = Истина;
	ОписаниеСтатуса.ОжидаетсяОтвет   = Ложь;
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документооборот", Документооборот);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаОткрытиеСчета.Состояние КАК Состояние,
	|	СостояниеЗаявокНаОткрытиеСчета.ЕстьОшибки КАК ЕстьОшибки,
	|	СостояниеЗаявокНаОткрытиеСчета.СрокАктуальности КАК СрокАктуальности,
	|	НАЧАЛОПЕРИОДА(СостояниеЗаявокНаОткрытиеСчета.ДатаИзменения, ДЕНЬ) КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаОткрытиеСчета КАК СостояниеЗаявокНаОткрытиеСчета
	|ГДЕ
	|	СостояниеЗаявокНаОткрытиеСчета.Транзакция.Документооборот = &Документооборот
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостояниеЗаявокНаОткрытиеСчета.ДатаИзменения УБЫВ,
	|	СостояниеЗаявокНаОткрытиеСчета.Состояние.Порядок УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	Если Выборка.Следующий() Тогда
		
		ИстекСрокАктуальности = ЗначениеЗаполнено(Выборка.СрокАктуальности)
			И Выборка.СрокАктуальности < ДатаСегодня;

		// Может быть ситуация, когда банк сначала прислал одно решение, а потом передумал
		// и через несколько дней прислал другое.
		// Поэтому в течение 3-х месяцев с момента последнего изменения считаем, что можем получить еще какой-то ответ.
		ИзмененияМеньшеТрехМесяцевНазад = ЗначениеЗаполнено(Выборка.ДатаИзменения)
			И ДобавитьМесяц(Выборка.ДатаИзменения, 3) > ДатаСегодня;

		Если Выборка.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Черновик
			ИЛИ Выборка.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.НеОтправлено Тогда
			// В обычной ситуации сюда попасть не должны, т.к. не отправляли еще и документооборот не создавали.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = Ложь;

		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.Отправлено
			ИЛИ Выборка.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.ОжидаетРешения Тогда
			// Ждем ответ от банка на заявку.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = НЕ ИстекСрокАктуальности ИЛИ ИзмененияМеньшеТрехМесяцевНазад;

		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияЗаявокНаОткрытиеСчета.СчетОткрыт Тогда
			// Получили одобрение, если разобрали файл ответа без ошибок
			// Если возникла ошибка, то банк может попытаться прислать исправленный вариант ответа,
			// поэтому продолжаем проверять входящие сообщения.
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = Выборка.ЕстьОшибки
				ИЛИ НЕ ИстекСрокАктуальности
				ИЛИ ИзмененияМеньшеТрехМесяцевНазад;

		Иначе
			// Во всех остальных случаях от банка ничего не ждем, считаем что процесс завершился,
			// если с момента последнего изменения состояния прошло больше месяца.
			ОписаниеСтатуса.ОжидаетсяОтвет = НЕ ИстекСрокАктуальности ИЛИ ИзмененияМеньшеТрехМесяцевНазад;
			ОписаниеСтатуса.Завершен       = НЕ ОписаниеСтатуса.ОжидаетсяОтвет;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу этапов отправки заявки.
//
// Параметры:
//	РеквизитыДокументооборота - Структура - см. УниверсальныйОбменСБанками.РеквизитыДокументооборота().
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры формы.
//	ТаблицаЭтаповОтправки - ТаблицаЗначений - см. УниверсальныйОбменСБанками.ЗаготовкаТаблицыЭтаповОтправки().
//
Процедура ЗаполнитьТаблицуЭтаповОтправки(РеквизитыДокументооборота, ДополнительныеПараметры, ТаблицаЭтаповОтправки) Экспорт

	ДатаОтправкиЗаявки  = '0001-01-01';
	МожноДобавлятьЭтапы = Истина;
	
	ТипыТранзакций = ЗаявкиНаОткрытиеСчетаКлиентСервер.ТипыТранзакцийСервисаОбменаСБанками(РеквизитыДокументооборота.Сервис);
	
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоДокументообороту(РеквизитыДокументооборота.Документооборот);
	ТаблицаДанныхТранзакций = УниверсальныйОбменСБанками.РеквизитыТранзакций(Транзакции);
	
	ЗначенияПеречисления = Метаданные.Перечисления.СостоянияЗаявокНаОткрытиеСчета.ЗначенияПеречисления;

	// 1. Сама заявка.
	СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
		ТаблицаДанныхТранзакций,
		ТипыТранзакций.Заявка);

	Если СведенияОТранзакции <> Неопределено Тогда
		ДатаОтправкиЗаявки = СведенияОТранзакции.ДатаТранспорта;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Отправлено.Синоним;
		СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
		// Покажем в комментарии, когда получена банком.
		СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
			ТаблицаДанныхТранзакций,
			ТипыТранзакций.ИзвещениеОПолученииБанкомЗаявки);
		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа.КомментарийКСостоянию	= СтрШаблон(НСтр("ru = 'Получено %1 %2'"),
				РеквизитыДокументооборота.Банк,
				Формат(СведенияОТранзакции.ДатаТранспорта, "ДЛФ=DT"));
		КонецЕсли;
		
	Иначе
		// Заявка вообще не была отправлена.
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.НеОтправлено.Синоним;
		СтрокаЭтапа.Дата						= '0001-01-01';
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Ложь;
		
		// Другие этапы не показываем.
		МожноДобавлятьЭтапы = Ложь;
	КонецЕсли;
	

	// 2. Решение банка.
	Если МожноДобавлятьЭтапы Тогда

		СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
			ТаблицаДанныхТранзакций,
			ТипыТранзакций.Одобрено,
			ДатаОтправкиЗаявки);
		
		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.СчетОткрыт.Синоним;
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		Иначе
			СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
				ТаблицаДанныхТранзакций,
				ТипыТранзакций.Отказ,
				ДатаОтправкиЗаявки);
			Если СведенияОТранзакции <> Неопределено Тогда
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= ЗначенияПеречисления.Отказано.Синоним;
				СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.ЭтапПройден					= Истина;
			
				// Другие этапы не показываем.
				МожноДобавлятьЭтапы = Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	// Если банк в процессе какого-либо шага прислал тип транзакции "Ошибка", то обмен считается завершенным.
	// Покажем статус ошибки самым последним шагом.
	Если ТаблицаЭтаповОтправки.Количество() < 4 Тогда // Отображение больше 4-х этапов форма не поддерживает.
		СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
			ТаблицаДанныхТранзакций,
			ТипыТранзакций.Ошибка,
			ДатаОтправкиЗаявки);

		Если СведенияОТранзакции <> Неопределено Тогда
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Ошибка'");
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

// Записывает данные бизнес-статистики в Пульт и Бизнес-статистику 1С-Фреш.
//
// Параметры:
//   ИдентификаторБанка - Строка - Идентификатор банка в сервисе.
//   ИмяОперации - Строка - имя ключевой операции бизнес-статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИдентификаторБанка, ИмяОперации) Экспорт
	
	ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.ЗаявкиНаОткрытиеСчета.%1.%2", ИдентификаторБанка, ИмяОперации);
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяКлючевойОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор параметров формирования имени файла комплекта заявки в банк.
//
// Параметры:
//
// Возвращаемое значение:
//	Структура - Параметры для открытия формы на клиенте.
//
Функция НовыеПараметрыИмениФайлаЗаявки() Экспорт
	
	ПараметрыФайлаЗаявки = Новый Структура;
	ПараметрыФайлаЗаявки.Вставить("ТипДокумента", 			Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ПустаяСсылка());
	ПараметрыФайлаЗаявки.Вставить("ТипСодержимого", 		Перечисления.ТипыСодержимогоФайловОбменаСБанками.ПустаяСсылка());
	ПараметрыФайлаЗаявки.Вставить("СведенияОЗаявке", 		Неопределено);
	ПараметрыФайлаЗаявки.Вставить("ДатаНачала", 	'00010101');
	ПараметрыФайлаЗаявки.Вставить("ДатаОкончания", 	'00010101');
	ПараметрыФайлаЗаявки.Вставить("ПрефиксФайла", 			"");
	ПараметрыФайлаЗаявки.Вставить("УникальныеИменаФайловВПакете", Неопределено);
	
	Возврат ПараметрыФайлаЗаявки;
КонецФункции

// Возвращает имя файла отчета, сформированное по шаблону.
//
// Параметры:
//	ПараметрыФайлаЗаявки - Структура - параметры для формирования имени файла отчета - см. НовыеПараметрыИмениФайлаЗаявки()
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ПолучитьИмяФайлаЗаявкиВБанк(ПараметрыФайлаЗаявки) Экспорт
	
	СведенияОЗаявке = ПараметрыФайлаЗаявки.СведенияОЗаявке;
		
	ПараметрыИмениФайлаОтчета = УниверсальныйОбменСБанкамиОбщегоНазначения.НовыеПараметрыИмениФайлаОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыИмениФайлаОтчета, ПараметрыФайлаЗаявки); 
	
	ПараметрыИмениФайлаОтчета.ФорматИменованияФайлов = УниверсальныйОбменСБанкамиОбщегоНазначения.СокращенныйПериодБезУИД();
	ПараметрыИмениФайлаОтчета.ШаблонИмениФайла = ПолучитьШаблонИмениФайлаПоТипу(ПараметрыФайлаЗаявки.ТипДокумента);
	
	ПараметрыИмениФайлаОтчета.ИНН =	СведенияОЗаявке.Отправитель.ИНН;
	ПараметрыИмениФайлаОтчета.КПП =	СведенияОЗаявке.Отправитель.КПП;
	
	ИмяФайлаЗаявкиВБанк = УниверсальныйОбменСБанкамиОбщегоНазначения.ПолучитьИмяФайлаОтчета(ПараметрыИмениФайлаОтчета)
		+ "." + ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыФайлаЗаявки.ТипСодержимого);
	
	ИмяФайлаЗаявкиВБанк = УниверсальныйОбменСБанкамиОбщегоНазначения.УнифицироватьИмяФайлаКВыгрузке(
		ИмяФайлаЗаявкиВБанк,
		УниверсальныйОбменСБанкамиОбщегоНазначения.СокращенныйПериодБезУИД(),
		ПараметрыФайлаЗаявки.ПрефиксФайла,
		ПараметрыФайлаЗаявки.УникальныеИменаФайловВПакете);
		
	Возврат ИмяФайлаЗаявкиВБанк;

КонецФункции

// Универсальным образом формирует имя файла, добавляемого в отправляемый от клиента контейнер.
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета - назначение отправляемой информации.
//  ТипСодержимого - ПеречислениеСсылка.ТипыСодержимогоФайловОбменаСБанками - формат (расширение файла) информации.
//  СведенияОЗаявке - Структура - см. СведенияОЗаявке() или СведенияОбАкцепте() .
//  КлючУникальности - Строка, Массив - для вставки произвольного текста в середину названия файла.
//
// Возвращаемое значение:
//   Строка      - имя файла для переданного типа содержимого.
//
Функция ИмяФайлаДляКонтейнера(ТипДокумента, ТипСодержимого, СведенияОЗаявке, КлючУникальности = "") Экспорт
	
	СоставнойКлюч = (ТипЗнч(КлючУникальности) = Тип("Массив"));
	
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить("BANK");
	
	Если ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета Тогда
		
		ЧастиИмениФайла.Добавить("ACCAPP");
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Невозможно получить имя файла для контейнера: неизвестный тип документа обмена.'");
	КонецЕсли;
	
	Если СоставнойКлюч Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмениФайла, КлючУникальности);
	ИначеЕсли Не ПустаяСтрока(КлючУникальности) Тогда
		ЧастиИмениФайла.Добавить(КлючУникальности);
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(СведенияОЗаявке.Отправитель.ИдентификаторОтправителя);
	ЧастиИмениФайла.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")); // дата выгрузки
	ЧастиИмениФайла.Добавить(Строка(Новый УникальныйИдентификатор())); // для гарантированной уникальности файла
	
	ИмяФайла = СтрСоединить(ЧастиИмениФайла, "_") + "." + ОбщегоНазначения.ИмяЗначенияПеречисления(ТипСодержимого);
	
	Возврат ИмяФайла;
	
КонецФункции

// Вызывается после загрузки данных услуги банка, полученных с сервера.
// Параметры:
//		УслугаБанка - СправочникСсылка.УслугиБанков - ссылка на элемент справочника, данные которого были обновлены.
Процедура ПослеЗагрузкиДанныхУслугиБанка(УслугаБанка) Экспорт
	
	Если Не ЗначениеЗаполнено(УслугаБанка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Характеристика Из УслугаБанка.Характеристики Цикл
		ОбработатьХарактеристику(Характеристика, УслугаБанка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает XDTO объект из пакета ЗаявкиНаОткрытиеСчета с информацией о финансовом продукте банка.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//	УсловияОбслуживанияXDTO - ОбъектXDTO - Корневой объект из пакета XDTO ЗаявкиНаОткрытиеСчета, в котором производится поиск.
//	ИдентфикаторПродукта - Строка - Идентификатор искомого финансового продукта.
//	Дата - Дата - Дата, по состоянию на которую возвращает информация.
//
// Возвращаемое значение:
//	ОбъектXDTO или Неопределено
//
Функция НайтиФинансовыйПродукт(СервисОбменаСБанками, УсловияОбслуживанияXDTO, Знач ИдентфикаторПродукта, Знач Дата) Экспорт

	Если УсловияОбслуживанияXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекущаяВерсияСервиса = УниверсальныйОбменСБанками.ВерсияСервиса(СервисОбменаСБанками);
	Дата                 = НачалоДня(Дата);
	ИдентфикаторПродукта = ВРег(ИдентфикаторПродукта);

	ФинансовыйПродуктПоУмолчанию = Неопределено;
	
	Для каждого ФинансовыйПродукт Из УсловияОбслуживанияXDTO.ФинансовыйПродукт Цикл

		Если ФинансовыйПродукт.ДатаНачала > Дата
			ИЛИ ФинансовыйПродукт.ДатаОкончания < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(ФинансовыйПродукт.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ФинансовыйПродукт.МинВерсияСервиса) < 0 Тогда
			// Продукт может быть корректно отображен только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФинансовыйПродукт.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ФинансовыйПродукт.МаксВерсияСервиса) > 0 Тогда
			// Продукт предназначен для отображения на предыдущих версиях программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
	
		Если ФинансовыйПродукт.Свойства().Получить("Идентификатор") = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ФинансовыйПродукт.Идентификатор) Тогда
			// В старых настройках могут быть продукты, у которых еще не было идентификатора.
			// Если не найдем никакого продукта с искомым идентификатором, то вернем без идентификатора.
			ФинансовыйПродуктПоУмолчанию = ФинансовыйПродукт;
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ФинансовыйПродукт.Идентификатор) = ИдентфикаторПродукта Тогда
			Возврат ФинансовыйПродукт;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ФинансовыйПродуктПоУмолчанию;

КонецФункции

// Возвращает список видов счетов, которые заложены в настройках сервиса.
//
// Параметры:
//	ВключаяАрхивные - Булево - Признак того, необходимо ли включать в список архивные элементы.
//
// Возвращаемое значение:
//	СписокЗначений - Значение - идентификатор, Представление - наименование.
//
Функция ВидыСчетов(ВключаяАрхивные = Ложь) Экспорт

	Результат = Новый СписокЗначений;
	
	ЗначенияХарактеристик = УниверсальныйОбменСБанками.ХарактеристикиСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);
	
	УсловияОбслуживанияXDTO = ОбъектXDTOХарактеристики(Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета, ЗначенияХарактеристик);
	Если УсловияОбслуживанияXDTO = Неопределено
		ИЛИ УсловияОбслуживанияXDTO.ВидыСчетов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидыСчетовXDTO = УсловияОбслуживанияXDTO.ВидыСчетов;
	
	ТекущаяВерсияСервиса = УниверсальныйОбменСБанками.ВерсияСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);
	
	Для каждого ЭлементXDTO Из ВидыСчетовXDTO.ВидСчета Цикл

		// Проверим версии сервиса, для которых применяются условия.
		Если ЗначениеЗаполнено(ЭлементXDTO.МинВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ЭлементXDTO.МинВерсияСервиса) < 0 Тогда
			// Значение может быть корректно обработано только в следующих версиях программы, 
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ЭлементXDTO.МаксВерсияСервиса)
			И УниверсальныйОбменСБанкамиКлиентСервер.СравнитьВерсии(ТекущаяВерсияСервиса, ЭлементXDTO.МаксВерсияСервиса) > 0 Тогда
			// Значение предназначено для предыдущих версий программы,
			// для текущей версии его пропускаем.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВключаяАрхивные И ЭлементXDTO.Архивный Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ЭлементXDTO.Идентификатор, ЭлементXDTO.Наименование);

	КонецЦикла;

	Возврат Результат;

КонецФункции

#Область ОбработчикиОбновления

// Процедура устанавливает значение реквизита "Версия" справочника "Услуги банков" равным 0.
// Может быть использована для принудительного обновления данных в этом справочнике при
// следующей синхронизации с сервером обмена.
Процедура СброситьВерсиюУслугБанкаЗаявкиНаОткрытиеСчета() Экспорт
	
	УниверсальныйОбменСБанками.СброситьВерсиюУслугБанка(Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьХарактеристику(Характеристика, УслугаБанка)
	
	Если Характеристика.Характеристика <> Перечисления.ХарактеристикиСервисаЗаявкиНаОткрытиеСчета.ГруппыКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеХарактеристики = Характеристика.Значение.Получить();
	Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	СервисХарактеристики = Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета;
	
	ОбъектXDTOХарактеристики = ОбъектXDTOХарактеристики(СервисХарактеристики, ЗначениеХарактеристики);
	
	Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УслугаБанка, "Банк");

	РегистрыСведений.ГруппыКонтрагентовЗаявкиВБанки.ЗаписатьГруппыКонтрагентов(СервисХарактеристики, 
		ОбъектXDTOХарактеристики, Банк); 
	
КонецПроцедуры

#Область ФормированиеЗаявки

Процедура ВывестиУзел_ЗаявкаНаОткрытие_Документ(Компоновщик, ПараметрыПредставления)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ПредметОбмена",      ПараметрыПредставления.ИдентификаторЗаявки, "Т,255");
	ВывестиАтрибут(Компоновщик, "ДатаПредметаОбмена", ПараметрыПредставления.Дата, "Д");
	
	ВывестиУзел_Заявка(Компоновщик,      ПараметрыПредставления.Заявка);
	ВывестиУзел_Банк(Компоновщик,        ПараметрыПредставления.Банк);
	ВывестиУзел_Организация(Компоновщик, ПараметрыПредставления);
	ВывестиУзел_КонтактноеЛицо(Компоновщик, ПараметрыПредставления.КонтактноеЛицо);
	
	УниверсальныйОбменСБанкамиФормы.ВывестиУзел_ДополнительныеПоказатели(Компоновщик, ПараметрыПредставления);
	
	ПараметрыУпорядочения = Новый Структура;
	ПараметрыУпорядочения.Вставить("ГруппаАнкета", Документы.ЗаявкаНаОткрытиеСчета.ГруппаФайловПоПризнаку(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета));
	ПараметрыУпорядочения.Вставить("ГруппаПоУмолчанию", Документы.ЗаявкаНаОткрытиеСчета.ГруппаФайловПоПризнаку());
	ПараметрыУпорядочения.Вставить("ПорядокВывода", Документы.ЗаявкаНаОткрытиеСчета.ПорядокВыводаФайлов());
	УниверсальныйОбменСБанкамиФормы.ВывестиУзел_ДополнительныеФайлы(Компоновщик, ПараметрыПредставления, ПараметрыУпорядочения);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиУзел_Заявка(Компоновщик, Заявка)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Заявка");
	
	ВывестиАтрибут(Компоновщик, "ИдентификаторПродукта", Заявка.ИдентификаторПродукта, "Т,100");
	ВывестиАтрибут(Компоновщик, "ВидСчета",              Заявка.ВидСчета, "Т,100");
	Если Заявка.ПодключитьКСервисуАУСН Тогда
		ВывестиАтрибут(
			Компоновщик, "ПодключитьКСервисуАУСН", Формат(Заявка.ПодключитьКСервисуАУСН, "БЛ=0; БИ=1"), "Т,100");
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Валюты");
	Для Каждого Валюта Из Заявка.Валюты Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Валюта");
		ВывестиАтрибут(Компоновщик, "Код", Валюта);
		Компоновщик.ЗаписатьКонецЭлемента(); // Валюта
	КонецЦикла;
	Компоновщик.ЗаписатьКонецЭлемента(); // Валюты
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Заявка
	
КонецПроцедуры

Процедура ВывестиУзел_Банк(Компоновщик, Банк)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Банк");
	
	ВывестиАтрибут(Компоновщик, "ИНН",  Банк.ИНН);
	ВывестиАтрибут(Компоновщик, "Наим", Банк.Наименование);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Банк
	
КонецПроцедуры

Процедура ВывестиУзел_Организация(Компоновщик, ПараметрыПредставления)
	
	Отправитель = ПараметрыПредставления.Отправитель;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	ВывестиАтрибут(Компоновщик, "Наименование", Отправитель.Наименование, "Т,1000");
	Если ПараметрыПредставления.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ВывестиАтрибут(Компоновщик, "Нерезидент", Отправитель.Нерезидент, "Ч,1");
		ВывестиАтрибут(Компоновщик, "ИНН", Отправитель.ИНН, "Т,10");
		
	Иначе
		
		ВывестиАтрибут(Компоновщик, "ИНН", Отправитель.ИНН, "Т,12");
		
	КонецЕсли;
	ВывестиАтрибут(Компоновщик, "ДатаРег",    Отправитель.ДатаРегистрации, "Д");
	ВывестиАтрибут(Компоновщик, "ОКВЭД2",     Отправитель.КодОКВЭД2, "Т,8");
	ВывестиАтрибут(Компоновщик, "ОКОПФ",      Отправитель.КодОКОПФ, "Т,5");
	ВывестиАтрибут(Компоновщик, "КодРегиона", Отправитель.КодРегиона, "Т,3");
	ВывестиАтрибут(Компоновщик, "Город",      Отправитель.Город, "Т,100");
		
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_КонтактноеЛицо(Компоновщик, КонтактноеЛицо)
	
	Компоновщик.ЗаписатьНачалоЭлемента("КонтактноеЛицо");
	
	ВывестиНеобязательныйАтрибут(Компоновщик, "Должность", КонтактноеЛицо.Должность, "Т,255");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Телефон",   КонтактноеЛицо.Телефон, "Т,255");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ЭлПочта",   КонтактноеЛицо.ЭлПочта, "Т,255");
	
	Компоновщик.ЗаписатьНачалоЭлемента("ФИО");
	ВывестиАтрибут(Компоновщик, "Фамилия",  КонтактноеЛицо.ФИО.Фамилия);
	ВывестиАтрибут(Компоновщик, "Имя",      КонтактноеЛицо.ФИО.Имя);
	ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", КонтактноеЛицо.ФИО.Отчество);
	Компоновщик.ЗаписатьКонецЭлемента(); // ФИО
	
	Компоновщик.ЗаписатьКонецЭлемента(); // КонтактноеЛицо
	
КонецПроцедуры

#КонецОбласти

#Область КомпоновщикXML
 
Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеЗаявок

Процедура ЗапуститьУниверсальныйОбменСБанкамиПоСервисуВФоне(Параметры, АдресРезультата) Экспорт
	
	// Скачивание данных с сервера обмена с банками в рег.задании выполняется под полными правами,
	// поэтому если вызываем его интерактивно, то самостоятельно включаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);

	УниверсальныйОбменСБанками.ЗапуститьУниверсальныйОбменСБанкамиПоСервису(Параметры.СервисОбменаСБанками);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыгрузкаXML

Функция ПолучитьШаблонИмениФайлаПоТипу(ТипДокумента)
	
	Если ТипДокумента = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаОткрытиеСчета.ЗаявкаНаОткрытиеСчета Тогда
		
		ШаблонИмениФайла = "ACCAPP";
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно получить шаблон имени файла для контейнера: %1 - неизвестный тип документа обмена.'"), 
			ТипДокумента);
	КонецЕсли;

	Возврат ШаблонИмениФайла;
	
КонецФункции

// Возвращает структуру с пустыми значениями для параметра ПараметрыПредставления функции ЭлектронноеПредставлениеСообщения().
//
// Возвращаемое значение:
//	Структура - Содержит ключи, которые используются при выгрузке заявки на открытие счета в xml-файл.
//
Функция НовыеСведенияЗаявкиНаОткрытиеСчета() Экспорт
	
	Сведения = Новый Структура;
	
	// Технические реквизиты.
	Сведения.Вставить("Кодировка",            "windows-1251");
	Сведения.Вставить("ВерсияПрограммы",      РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	Сведения.Вставить("СервисОбменаСБанками", Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);
	Сведения.Вставить("ИдентификаторФайла",   "");
	Сведения.Вставить("ИдентификаторЗаявки",  "");
	Сведения.Вставить("Дата",                 '0001-01-01');
	Сведения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	
	// Описание банковского продукта.
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторПродукта",   "");
	Описание.Вставить("ВидСчета",                "");
	Описание.Вставить("ПодключитьКСервисуАУСН",  Ложь);
	Описание.Вставить("Валюты",                  Новый Массив);
	Сведения.Вставить("Заявка", Описание);
	
	// Описание организации.
	Описание = Новый Структура;
	Описание.Вставить("Наименование",    "");
	Описание.Вставить("ИНН",             "");
	Описание.Вставить("ДатаРегистрации", '0001-01-01');
	Описание.Вставить("КодОКВЭД2",       "");
	Описание.Вставить("КодОКОПФ",        "");
	Описание.Вставить("Нерезидент",      ""); // "0" - резидент, "1" - нерезидент.
	Описание.Вставить("КодРегиона",      "");
	Описание.Вставить("Город",           "");
	Сведения.Вставить("Отправитель", Описание);
	
	// Описание контактного лица.
	Описание = Новый Структура;
	Описание.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество", "", "", ""));
	Описание.Вставить("Должность", "");
	Описание.Вставить("Телефон",   "");
	Описание.Вставить("ЭлПочта",   "");
	Сведения.Вставить("КонтактноеЛицо", Описание);
	
	// Сведения об банке - получателе заявки.
	Банк = Новый Структура;
	Банк.Вставить("ИНН",          "");
	Банк.Вставить("Наименование", "");
	Сведения.Вставить("Банк", Банк);
	
	Сведения.Вставить("ДополнительныеПоказатели", Новый Массив); // Строка таблицы значений с колонками:
	                                                             // Банк, Идентификатор, ДанныеОтсутствуют, Значение
	                                                             // См. Документ.ЗаявкаНаОткрытиеСчета.ДополнительныеПоказателиБанков()
																 
	Сведения.Вставить("ДополнительныеФайлы", Новый Структура); // Таблицы значений в структуре по видам прикладываемых файлов.
															   // См. Документ.ЗаявкаНаОткрытиеСчета.ДополнительныеФайлыПоВидам()
																 
	Возврат Сведения;
	
КонецФункции

// Формирует xml-файл сообщения для банка по заявке на открытие счета
//
// Параметры:
//  ВидСообщения - Строка - определяет, какой файл нужно сформировать, возможные значения:
//		* "Заявка"
//		* "Акцепт"
//  ПараметрыПредставления - Структура - контекст выгружаемых данных, состав свойств зависит от типа транзакции.
//		см. НовыеСведенияЗаявкиНаОткрытиеСчета().
// 
// Возвращаемое значение:
//   - ДвоичныеДанные - двоичные данные XML-файла, содержащего сообщение для банка
//
Функция ЭлектронноеПредставлениеСообщения(ВидСообщения, ПараметрыПредставления) Экспорт
	
	ПотокСообщения = Новый ПотокВПамяти;
	КомпоновщикXML = Новый ЗаписьXML;
	КомпоновщикXML.ОткрытьПоток(ПотокСообщения, ПараметрыПредставления.Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл",    ПараметрыПредставления.ИдентификаторФайла);
	ВывестиАтрибут(КомпоновщикXML, "ВерсПрог",  ПараметрыПредставления.ВерсияПрограммы);
	
	Если ВидСообщения = "Заявка" Тогда
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм",  "1.01.01");
		ВывестиУзел_ЗаявкаНаОткрытие_Документ(КомпоновщикXML, ПараметрыПредставления);
	КонецЕсли;	
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	КомпоновщикXML.Закрыть();
	
	Возврат ПотокСообщения.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область СогласиеНаОбработкуДанных

// Подготавливает внутри фонового задания текст согласия на обработку персональных данных.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - Содержит ключи:
//		* ПараметрыСогласия - Структура - см. ПараметрыСогласия() или ПараметрыСогласияУчредителей().
//		* Банки - Массив - Содержит элементы типа СправочникСсылка.БанкиУниверсальногоОбмена.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое поместить результат выполнения функции.
//
Процедура ЗаполнитьТекстСогласияВФоне(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	ИнформацияОБанках = ПодготовитьИнформациюОБанкахДляСогласий(ПараметрыЗаполнения.ОбъектыСогласия, ПараметрыЗаполнения.ПараметрыСогласия);
	
	Результат = ТекстСогласия(ПараметрыЗаполнения.ПараметрыСогласия, ИнформацияОБанках);
	
	ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9)), АдресХранилища);
	
КонецПроцедуры

Функция ТекстСогласия(ПараметрыСогласия, ИнформацияОБанках) Экспорт
	
	// Создаем сводный список банков.
	ПараметрыСогласия.Вставить("БанкиРеквизиты",
		УниверсальныйОбменСБанкамиФормы.ПредставлениеСпискаБанков(ИнформацияОБанках, Ложь));
		
	// Оставляем один элемент-согласие.
	ИнформацияОСогласии = Новый ТаблицаЗначений;
	ИнформацияОСогласии.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ИнформацияОСогласии.Колонки.Добавить("ТекстМакета", Новый ОписаниеТипов("Строка"));
	ИнформацияОСогласии.Колонки.Добавить("ПараметрыМакета", Новый ОписаниеТипов("ТаблицаЗначений"));
	ОбъектСогласие = ИнформацияОСогласии.Добавить();
	ОбъектСогласие.Наименование    = Строка(ПараметрыСогласия.Организация);
	ОбъектСогласие.ТекстМакета     = ПараметрыСогласия.ТекстМакета;
	ОбъектСогласие.ПараметрыМакета = ПараметрыСогласия.ПараметрыМакета;
	
	ПараметрыФорматирования = УниверсальныйОбменСБанкамиФормы.ПараметрыФорматированияСогласия();
	ПараметрыФорматирования.ВыделятьЗначенияПараметров = Ложь;
	
	Возврат УниверсальныйОбменСБанкамиФормы.ТекстСогласия(ПараметрыСогласия, ИнформацияОСогласии, ПараметрыФорматирования);
	
КонецФункции

// Согласие на обработку персональных данных, которое дает клиент банку.
// Все возможные параметры клиента, доступные для использования в макете.
//
// Параметры:
//  ЭтоЮридическоеЛицо    - Булево - если Ложь, то нужны параметры индивидуального предпринимателя; иначе юридического лица.
//
// Возвращаемое значение:
//   Структура   - набор доступных параметров макета.
//
Функция ПараметрыСогласия(ЭтоЮридическоеЛицо) Экспорт
	
	Результат = Новый Структура;
	// Определяют заполнение остальных параметров.
	Результат.Вставить("СервисОбменаСБанками", Перечисления.СервисыОбменаСБанками.ЗаявкиНаОткрытиеСчета);
	Результат.Вставить("Организация",          Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ДатаСогласия",         '00010101');
	Результат.Вставить("ЭтоЮридическоеЛицо",   ЭтоЮридическоеЛицо);
		
	// Общие для всех вариантов.
	Результат.Вставить("ИНН",              "");

	Возврат Результат;
	
КонецФункции

// Получает из специального сервиса информацию о банках-получателях согласия на обработку персональных данных.
//
// Параметры:
//  ФинансовыеПродукты - Строка таблицы значений, см. Документ.СостояниеЗаявокНаОткрытиеСчета.СведенияОБанках(), 
//                        Массив - о чем собирается информация.
//  ПараметрыСогласия  - Структура - см. ПараметрыСогласия() или ПараметрыСогласияУчредителей().
//
// Возвращаемое значение:
//   ТаблицаЗначений - информация о кредиторах.
//
Функция ПодготовитьИнформациюОБанкахДляСогласий(ФинансовыеПродукты, ПараметрыСогласия) Экспорт
	
	Банки = ОбщегоНазначения.ВыгрузитьКолонку(ФинансовыеПродукты, "Банк", Истина);
	
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(Банки,
		"Наименование, НаименованиеСокращенное, НаименованиеПолное, ИНН, КПП, ОГРН, Адрес, Логотип");
	Для каждого РеквизитыБанка Из РеквизитыБанков Цикл
		РеквизитыБанка.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(РеквизитыБанка.Адрес);
	КонецЦикла;
	
	СогласияПоПродуктам = Новый ТаблицаЗначений;
	СогласияПоПродуктам.Колонки.Добавить("ИдентификаторПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("Банк",                  Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	СогласияПоПродуктам.Колонки.Добавить("Наименование",          ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("ПолноеНаименованиеБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("ИННБанка",              ОбщегоНазначения.ОписаниеТипаСтрока(10));
	СогласияПоПродуктам.Колонки.Добавить("КППБанка",              ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("ОГРНБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("ЮридическийАдресБанка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СогласияПоПродуктам.Колонки.Добавить("Логотип",               Новый ОписаниеТипов("ДвоичныеДанные"));
	
	Для каждого ФинансовыйПродукт Из ФинансовыеПродукты Цикл
		
		НоваяСтрока = СогласияПоПродуктам.Добавить();
		НоваяСтрока.Банк = ФинансовыйПродукт.Банк;
		НоваяСтрока.ИдентификаторПродукта = ФинансовыйПродукт.ИдентификаторПродукта;
		
		РеквизитыБанка = РеквизитыБанков.Найти(НоваяСтрока.Банк, "Банк");
		Если РеквизитыБанка = Неопределено Тогда
			
			НоваяСтрока.Наименование            = ФинансовыйПродукт.ИдентификаторПродукта;
			НоваяСтрока.ПолноеНаименованиеБанка = ФинансовыйПродукт.ИдентификаторПродукта;
			НоваяСтрока.Логотип                 = Новый Картинка;
			
		Иначе
			
			НоваяСтрока.Наименование            = ?(ПустаяСтрока(РеквизитыБанка.НаименованиеСокращенное),
				РеквизитыБанка.Наименование, РеквизитыБанка.НаименованиеСокращенное);
			НоваяСтрока.ПолноеНаименованиеБанка = ?(ПустаяСтрока(РеквизитыБанка.НаименованиеПолное),
				РеквизитыБанка.Наименование, РеквизитыБанка.НаименованиеПолное);
			НоваяСтрока.ИННБанка                = РеквизитыБанка.ИНН;
			НоваяСтрока.КППБанка                = РеквизитыБанка.КПП;
			НоваяСтрока.ОГРНБанка               = РеквизитыБанка.ОГРН;
			НоваяСтрока.ЮридическийАдресБанка   = РеквизитыБанка.Адрес;
			НоваяСтрока.Логотип                 = РеквизитыБанка.Логотип;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстМакета = "";
	
	ХарактеристикаСервиса = УниверсальныйОбменСБанками.ХарактеристикиСервиса(ПараметрыСогласия.СервисОбменаСБанками);
	УсловияОбслуживания = ОбъектXDTOХарактеристики(ПараметрыСогласия.СервисОбменаСБанками, ХарактеристикаСервиса);
	Если УсловияОбслуживания <> Неопределено Тогда
		
		Для Каждого СогласиеНаОбработкуДанных Из УсловияОбслуживания.СогласияНаОбработкуДанных Цикл
			Если СогласиеНаОбработкуДанных.ДатаНачала <= ПараметрыСогласия.ДатаСогласия
			   И (Не ЗначениеЗаполнено(СогласиеНаОбработкуДанных.ДатаОкончания)
				Или КонецДня(СогласиеНаОбработкуДанных.ДатаОкончания) >= ПараметрыСогласия.ДатаСогласия) Тогда
				ТекстМакета = СогласиеНаОбработкуДанных.ТекстМакета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыСогласия.Вставить("ТекстМакета", ТекстМакета);
	ПараметрыСогласия.Вставить("ПараметрыМакета", УниверсальныйОбменСБанкамиФормы.РазметкаТекста(ТекстМакета));

	Возврат СогласияПоПродуктам;
	
КонецФункции

#КонецОбласти

