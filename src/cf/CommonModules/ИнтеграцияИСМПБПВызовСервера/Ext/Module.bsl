#Область ПрограммныйИнтерфейс

Функция КодТНВЭД(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "КодТНВЭД").Код;
	
КонецФункции

Функция КонтрагентНадпись(Контрагент, ВидМаркируемойПродукции) Экспорт
	КонтрагентНадпись = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый ФорматированнаяСтрока(КонтрагентНадпись);
	КонецЕсли; 
	
	КонтрагентПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Представление");

	КонтрагентНадпись.Добавить(Новый ФорматированнаяСтрока(КонтрагентПредставление, Новый Шрифт(,,Истина)));
	КонтрагентНадпись.Добавить("  ");
	
	УчастникСистемыМаркировки = РегистрыСведений.СтатусыКонтрагентовИСМП.УчастникСистемыМаркировки(
		Контрагент, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидМаркируемойПродукции));
		
	Если УчастникСистемыМаркировки = Неопределено Тогда
		СтатусСтрокой = НСтр("ru = 'выбрать статус контрагента'");
	ИначеЕсли УчастникСистемыМаркировки = ИСТИНА Тогда
		СтатусСтрокой = НСтр("ru = 'зарегистрирован в ИС МП'");
	ИначеЕсли УчастникСистемыМаркировки = ЛОЖЬ Тогда
		СтатусСтрокой = НСтр("ru = 'не зарегистрирован в ИС МП'");
	КонецЕсли; 
	
	КлючЗаписи = РегистрыСведений.СтатусыКонтрагентовИСМП.СоздатьКлючЗаписи(Новый Структура("Контрагент, ВидПродукции", Контрагент, ВидМаркируемойПродукции));
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыКонтрагентовИСМП) Тогда
		КонтрагентНадпись.Добавить(Новый ФорматированнаяСтрока(СтатусСтрокой,,,,ПолучитьНавигационнуюСсылку(КлючЗаписи)));
	Иначе
		КонтрагентНадпись.Добавить(Новый ФорматированнаяСтрока(СтатусСтрокой));
	КонецЕсли; 
	
	Возврат Новый ФорматированнаяСтрока(КонтрагентНадпись);
КонецФункции

Функция ШтрихкодыМаркируемойПродукции(СписокОбъектов, АдресХранилища) Экспорт

	ШтрихкодыМаркируемойПродукции = Обработки.ПечатьЭтикеток.НовыйШтрихкодыМаркируемойПродукции();
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Для каждого ОписаниеЭтикетки Из СписокОбъектов Цикл
		ОписаниеЭтикетки.Вставить("ИдентификаторСтроки", Новый УникальныйИдентификатор);
		
		НоваяСтрока = ШтрихкодыМаркируемойПродукции.Добавить();
		
		НоваяСтрока.ИдентификаторСтроки = ОписаниеЭтикетки.ИдентификаторСтроки;
		НоваяСтрока.Организация         = ОрганизацияПоУмолчанию;
		НоваяСтрока.Номенклатура        = ОписаниеЭтикетки.Номенклатура;
		НоваяСтрока.Количество          = 1;
		НоваяСтрока.ТипШтрихкода        = ОписаниеЭтикетки.ТипШтрихкода;
		
		
		СтруктураШтрихкода  = Новый Структура;
		СтруктураШтрихкода.Вставить("Штрихкод",        ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ОписаниеЭтикетки.Штрихкод));
		СтруктураШтрихкода.Вставить("ШтрихкодВBase64", Истина);
		
		НоваяСтрока.Штрихкод        = ДанныеВСтрокуJSON(СтруктураШтрихкода);
	КонецЦикла; 
	
	Возврат ПоместитьВоВременноеХранилище(ШтрихкодыМаркируемойПродукции, АдресХранилища);
КонецФункции

Функция ДанныеВСтрокуJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

//Получает вид продукции ИС по наименованию
//Параметры: ГосударственныйКонтроль Тип("Строка")
//
//Возвращаемео значение: ВидПродукцииИС Тип("Перечисления.ВидыПродукцииИС")
//
Функция ВидПродукцииИС(ГосударственныйКонтроль) Экспорт
		
	СоответствиеВидовПродукцииИС = ПолучитьСоответствиеВидовПродукцииИС();
	Возврат СоответствиеВидовПродукцииИС.Получить(ГосударственныйКонтроль);
	
КонецФункции 

//Формирует соответствие видов продукцииИС
//Параметры: нет
//
//Возвращаемое значение: СоответствиеВидовПродукцииИС Тип("Соответствие")
//
Функция ПолучитьСоответствиеВидовПродукцииИС() Экспорт
	
	СоответствиеВидовПродукцииИС = Новый Соответствие; 
	
	СоответствиеВидовПродукцииИС.Вставить("МОТП"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	СоответствиеВидовПродукцииИС.Вставить("ОбувнаяПродукция"					, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	СоответствиеВидовПродукцииИС.Вставить("Велосипеды"							, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")); 
	СоответствиеВидовПродукцииИС.Вставить("Духи"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	СоответствиеВидовПродукцииИС.Вставить("КреслаКоляски"						, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	СоответствиеВидовПродукцииИС.Вставить("ЛегкаяПромышленность"				, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	СоответствиеВидовПродукцииИС.Вставить("МолочнаяПродукцияПодконтрольнаяВЕТИС", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));	
	СоответствиеВидовПродукцииИС.Вставить("МолочнаяПродукцияБезВЕТИС"			, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));	
	СоответствиеВидовПродукцииИС.Вставить("Фотоаппараты"						, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	СоответствиеВидовПродукцииИС.Вставить("Шины"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	СоответствиеВидовПродукцииИС.Вставить("АльтернативныйТабак"					, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	СоответствиеВидовПродукцииИС.Вставить("УпакованнаяВода"						, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));	
	СоответствиеВидовПродукцииИС.Вставить("Антисептики"							, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));	
	СоответствиеВидовПродукцииИС.Вставить("БАДы"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	СоответствиеВидовПродукцииИС.Вставить("НикотиносодержащаяПродукция"			, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"));	
	СоответствиеВидовПродукцииИС.Вставить("Пиво"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	СоответствиеВидовПродукцииИС.Вставить("БезалкогольноеПиво"					, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво"));
	СоответствиеВидовПродукцииИС.Вставить("СоковаяПродукция"					, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция"));
	СоответствиеВидовПродукцииИС.Вставить("Зерно"								, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
	СоответствиеВидовПродукцииИС.Вставить("ПродуктыПереработкиЗерна"			, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	СоответствиеВидовПродукцииИС.Вставить("ЗерноВЕТИС"							, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС"));
	СоответствиеВидовПродукцииИС.Вставить("ПродуктыПерерработкиЗернаВЕТИС"		, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС"));
	СоответствиеВидовПродукцииИС.Вставить("МорепродуктыПодконтрольныеВЕТИС"		, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	СоответствиеВидовПродукцииИС.Вставить("ПодконтрольнаяПродукцияСАТУРН"		, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"));
	СоответствиеВидовПродукцииИС.Вставить("ПродукцияМаркируемаяДляГИСМ"         , ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));

	Возврат СоответствиеВидовПродукцииИС;
	
КонецФункции

Функция ПараметрыОписанияМаркируемогоТовара(Ссылка, ГосударственныйКонтроль) Экспорт
	
	ПараметрыОписанияМаркируемогоТовара = ИнтеграцияИСКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры();
	ПараметрыОписанияМаркируемогоТовара.СсылкаНаОбъект 									= Ссылка;
	ПараметрыОписанияМаркируемогоТовара.ВидПродукции 									= ВидПродукцииИС(ГосударственныйКонтроль);
	ПараметрыОписанияМаркируемогоТовара.ДопустимаНастройкаЛогистическойЕдиницы 			= Ложь;
	ПараметрыОписанияМаркируемогоТовара.ПредставлениеВНесколькоСтрок 					= Ложь;
	ПараметрыОписанияМаркируемогоТовара.ОтступПриВыводеНастройкиВидаУпаковки 			= Ложь;
	ПараметрыОписанияМаркируемогоТовара.ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN = Ложь;

	Возврат ПараметрыОписанияМаркируемогоТовара;
	
КонецФункции

Функция ПолучитьЧастичноеСодержимоеИКодыОСУ(ТаблицаУпаковок, СсылкаНаОбъект, ИмяТабличнойЧасти) Экспорт
	
	ТаблицаТоваров = СсылкаНаОбъект[ИмяТабличнойЧасти].Выгрузить(,"Номенклатура,Количество");
	ТаблицаТоваров.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(СсылкаНаОбъект))));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.ЗаполнитьЗначения(СсылкаНаОбъект, "Ссылка");
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(СсылкаНаОбъект);
	Если Не ПараметрыСканирования.Свойство("ДатаДокумента") Тогда
		ПараметрыСканирования.Вставить("ДатаДокумента", Дата(1,1,1));
	КонецЕсли;

	Возврат ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеИКодыОСУ(ТаблицаУпаковок, ТаблицаТоваров, ПараметрыСканирования);
	
КонецФункции

//Возвращает массив выбранных пользователем маркированных товаров
//Параметры: ДатаНачалаМаркировки Тип("Дата")
//
//Возвращаемое значение: ИспользуемаяМаркировка Тип("Массив")
//
Функция ПолучитьИспользованиеМаркировки(ДатаНачалаМаркировки) Экспорт
	
	ИспользуемаяМаркировка = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции.Ссылка КАК ВидПродукции
	               |ИЗ
	               |	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
	               |ГДЕ
	               |	НастройкиУчетаМаркируемойПродукцииИСМП.ВестиУчетПродукции = ИСТИНА
				   |	И НастройкиУчетаМаркируемойПродукцииИСМП.ДатаОбязательнойМаркировки <= &ДатаОбязательнойМаркировки";
	
	Запрос.УстановитьПараметр("ДатаОбязательнойМаркировки", ДатаНачалаМаркировки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого Эл Из Метаданные.Перечисления.ВидыПродукцииИС.ЗначенияПеречисления Цикл
			Если Эл.Синоним = Строка(Выборка.ВидПродукции) Тогда
				ИспользуемаяМаркировка.Добавить(Эл.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИспользуемаяМаркировка;	
	
КонецФункции

//Получает имя реквизита справочника номенклатура по виду продукции ИС
//Параметры: ВидПродукцииИС Тип("ПеречисленияСсылка.ВидыПродукцииИС")
//
//Возвращаемое значение: ИмяРеквизита Тип("Строка")
//
Функция ИмяРеквизитаНоменклатурыПоВидуПродукцииИС(ВидПродукцииИС) Экспорт
	
	ИмяРеквизита = "";
	
	СоответствиеВидовПродукцииИС = ИнтеграцияИСМПБПВызовСервера.ПолучитьСоответствиеВидовПродукцииИС();
	Для Каждого КлючИЗначение Из СоответствиеВидовПродукцииИС Цикл
		Если ВидПродукцииИС = КлючИЗначение.Значение Тогда
			Если КлючИЗначение.Ключ = "МОТП" Тогда
				ИмяРеквизита = "ТабачнаяПродукция";
			Иначе
				ИмяРеквизита = КлючИЗначение.Ключ;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяРеквизита;
	
КонецФункции

//Для возможности использовать на клиенте в переопределениях
Функция ПолучитьЗначенияРеквизитовДокументаОснования(Ссылка, СписокРеквизитов) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СписокРеквизитов);
		
КонецФункции

//Проверяет что номенклатура это алкогольгаяпродукция( не пиво)
//Параметры: -Номенклатура Тип("СправочникСсылка.Номенлатура")
//
//Возвращаемое значение: ЭтоАлкоголь Тип("Булево")
//
Функция ЭтоАлкогольнаяПродукция(Номенклатура) Экспорт
	
	ЭтоАлкоголь = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.Номенклатура = &Номенклатура
	|	И НЕ СведенияОбАлкогольнойПродукции.Номенклатура.Пиво";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ЭтоАлкоголь = Истина;
	КонецЕсли;
	
	Возврат ЭтоАлкоголь;
	
КонецФункции
          
#КонецОбласти