#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак поддержки в конфигурации учета по обособленным подразделениям
//
// Возвращаемое значение:
//   Булево
//
Функция ВестиУчетПоПодразделениям() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
КонецФункции

#КонецОбласти

#Область СвойстваСчетов

// Возвращает структуру со свойствами счета.
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Счет, свойства которого необходимо вернуть.
//
// Возвращаемое значение:
//	Структура - См. БухгалтерскийУчетПереопределяемый.ПолучитьСвойстваСчета().
//
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСвойстваСчета(Счет);
	
КонецФункции

// Возвращает структуру со свойствами счета.
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Счет, свойства которого необходимо вернуть.
//
// Возвращаемое значение:
//	Структура - См. БухгалтерскийУчетПереопределяемый.ПолучитьСвойстваСчетаССубсчетами().
//
Функция ПолучитьСвойстваСчетаССубсчетами(Знач Счет) Экспорт

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСвойстваСчетаССубсчетами(Счет);
	
КонецФункции

// Возвращает свойства счета и отображаемую аналитику, в соответствии с настройками плана счетов и
// учетной политики.
// 
// Параметры:
//  СчетУчета - ПланСчетовСсылка.Хозрасчетный
//  Организация - СправочникСсылка.Организации
//  Период - Дата - период учетной политики
// 
// Возвращаемое значение:
//   Структура - см. БухгалтерскийУчет.СвойстваИАналитикаСчета
//
Функция СвойстваИАналитикаСчета(СчетУчета, Организация, Период) Экспорт
	
	Возврат БухгалтерскийУчет.СвойстваИАналитикаСчета(СчетУчета, Организация, Период);
	
КонецФункции

Функция НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Счет) Экспорт
	
	СвойстваСчета = ПолучитьСвойстваСчета(Счет);
	
	УчетПоНомГруппам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	Возврат УчетПоНомГруппам;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоРаботникам(Счет) Экспорт
	
	СвойстваСчета = ПолучитьСвойстваСчета(Счет);
	
	УчетПоРаботникам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	Возврат УчетПоРаботникам;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(Счет) Экспорт
	
	СвойстваСчета = ПолучитьСвойстваСчета(Счет);
	
	УчетПоПрочимДоходамИРасходам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Возврат УчетПоПрочимДоходамИРасходам;
	
КонецФункции

// Функция возвращает типы значений субконто, связанных с именами реквизитов.
//
// Возвращаемое значение:
//   Соответствие   - ключ - имя реквизита, значение - описание типов связанных значений субконто.
//
Функция ВсеТипыСвязанныхСубконто() Экспорт
	
	СвязанныеСубконто = Новый Соответствие;
	
	БухгалтерскийУчетПереопределяемый.УстановитьТипыСвязанныхСубконто(СвязанныеСубконто);
	
	СвязанныеСубконто.Вставить("Организация", БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией());
	
	Возврат СвязанныеСубконто;
	
КонецФункции

// Возвращает Булево - является ли счет счетом учета цифрового рубля.
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - проверяемый счет.
//
// Возвращаемое значение:
//	Булево - Истина, если параметр - счет учета цифрового рубля.
//
Функция ЭтоСчетУчетаЦифровыхДенег(Счет) Экспорт
	
	Возврат БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ЦифровойРубль);
	
КонецФункции

#КонецОбласти

#Область ИспользованиеОднойНоменклатурнойГруппы

// Функция возвращает признак использования одной номенклатурной группы.
//
// Возвращаемое значение:
//	Булево - Признак использования одной номенклатурной группы.
//
Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьОднуНоменклатурнуюГруппу();

КонецФункции

// Функция получает единственную номенклатурную группу.
//
// Возвращаемое значение:
//		Основная номенклатурная группа - Тип НоменклатурныеГруппы, если ничего не найдено, то возвращается пустая ссылка.
Функция ОсновнаяНоменклатурнаяГруппа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ПометкаУдаления
	|	И НЕ НоменклатурныеГруппы.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	// Если опция ВестиУчетПоНесколькимНоменклатурнымГруппам выключена, но номенклатурная группа одна,
	// то все равно подставляем эту номенклатурную группу.
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ОсновнаяНоменклатурнаяГруппа = Выборка.Ссылка;
	Иначе
		ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОсновнаяНоменклатурнаяГруппа;

КонецФункции

#КонецОбласти

#Область ПервичныеДокументы

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать, заполнять и отображать в проводках
// пользователю суммы налогового учета и постоянных/временных разниц.
// 
// Возвращаемое значение:
//  Строка - варианты использования разниц:
//         * "ПоддержкаПБУ18", если может потребоваться использовать как НУ, так и суммы ПР/ВР в проводках;
//         * "ПлательщикНалогаНаПрибыль", если потребуются суммы НУ;
//         * "НеИспользовать", если ничего кроме сумм БУ не требуется использовать.
//
Функция ПользователюДоступныСуммыНалогНаПрибыль() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидИспользованияСумм = "ПоддержкаПБУ18";
	Если Не БухгалтерскийУчет.ПользователюДоступныСуммыНУ() Тогда // только БУ
		ВидИспользованияСумм = "НеИспользовать";
	ИначеЕсли Не НалогНаПрибыльБухгалтерскийУчет.ПользователюДоступныСуммыРазниц() Тогда
		ВидИспользованияСумм = "ПлательщикНалогаНаПрибыль";
	КонецЕсли;
	
	Возврат ВидИспользованияСумм;
	
КонецФункции

#КонецОбласти
