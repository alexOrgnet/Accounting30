
#Область ПрограммныйИнтерфейс

// Собирает данные необходимые для печати чеков по документу основанию
//
// Параметры:
//  ДокументСсылка     - <ДокументСсылка> - документ на основании которого печатается чек
//  НомерСекции        - <Число> - номер секции торгового объекта из настроек ККТ
//  ВерсияФормата      - <Строка> - версия формата фискальных данных по которому печатается чек
//  АдресУстановкиККТ  - <Строка> - адрес установки ККТ из настроек ККТ
//  ПараметрыОбработчика  - <Структура> - имя и тип объекта (общий модуль/модуль менеджера) в котором расположена переопределяемая процедура
//                  подготовки параметров печати чека
//     - ТипОбъекта - <Строка>
//     - ИмяОбъекта - <Строка>
//  СообщениеОбОшибке  - <Строка>  - выходной параметр с описанием ошибки формирования чека. 
//  ИдентификаторФормы - <УникальныйИдентификатор> - идентификатор формы из которой формируется чек
//  АдресХранилищаПечатьЧека - <Строка> -адрес хранилища с данными необходиммыми для печати чека. Если НЕОПРЕДЕЛЕНО
//                 то параметры печати чека получаются в процессе выполнения функции
// 
//  ДанныеОплатыСертификатНСПК - <Структура> - данные предавторизации для продажи товаров оплачиваемых сертификатами НСПК
//            - ИдентификаторКорзины  - <Строка>
//            - СуммаСертификатамиНСПК - <Число>
//
// Возвращаемое значение:
//   <Масссив>          - массив данных чеков. Состав см. 
//                 ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека() 
//
Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции = 0, ВерсияФормата, АдресУстановкиККТ, ПараметрыОбработчика = Неопределено, СообщениеОбОшибке = "", ИдентификаторФормы = Неопределено, АдресХранилищаПечатьЧека = Неопределено, ДанныеОплатыСертификатНСПК = Неопределено) Экспорт
	
	МассивЧеков = Новый Массив;
	
	Если ПараметрыОбработчика = Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
	КонецЕсли;
	
	ПараметрыПечатиЧека = Неопределено;
	
	// Параметры печати чека могли быть получены ранее
	Если ЭтоАдресВременногоХранилища(АдресХранилищаПечатьЧека) Тогда
		ПараметрыПечатиЧека = ПолучитьИзВременногоХранилища(АдресХранилищаПечатьЧека);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПечатиЧека) Тогда
		ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ДокументСсылка, ПараметрыОбработчика, СообщениеОбОшибке);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат МассивЧеков;
	КонецЕсли; 
	
	РеквизитыПечатиЧека = ПараметрыПечатиЧека.РеквизитыПечатиЧека;
	Если РеквизитыПечатиЧека.Количество() = 0 Тогда
		Возврат МассивЧеков;
	КонецЕсли;
	
	Для Каждого РеквизитПечатиЧека ИЗ РеквизитыПечатиЧека Цикл
		
		Реквизиты = НовыйРеквизитыПечатиЧека();
		
		ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитПечатиЧека);
		
		Если ДанныеОплатыСертификатНСПК <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеОплатыСертификатНСПК);
		КонецЕсли; 
		
		Если НЕ ПараметрыПечатиЧека.Свойство("ШтрихкодыУпаковок") Тогда
			// Чек не содержит маркируемую продукцию
		ИначеЕсли НЕ ОбработатьМаркированнуюПродукцию(
				ПараметрыПечатиЧека.ОплачиваемаяНоменклатура, 
				ПараметрыПечатиЧека.ШтрихкодыУпаковок, Реквизиты, 
				ИдентификаторФормы, СообщениеОбОшибке) Тогда
				
			Возврат МассивЧеков;
		КонецЕсли; 
		
		ПрименяетсяУСНПатент                    = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Дата);
		ПрименяетсяЕНВД                         = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Дата);
		ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Реквизиты.Организация, Реквизиты.Дата);
		
		ПрименяетсяТолькоПатент                 = ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяУСНПатент;
		ПрименяетсяТолькоЕНВД                   = ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяЕНВД;
		
		Если ПрименяетсяТолькоПатент ИЛИ ЗначениеЗаполнено(Реквизиты.Патент) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		ИначеЕсли ПрименяетсяТолькоЕНВД Тогда 
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Дата)
			Или УчетнаяПолитика.ПрименяетсяАУСНДоходы(Реквизиты.Организация, Реквизиты.Дата) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Дата)
			Или УчетнаяПолитика.ПрименяетсяАУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Дата) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
		Иначе
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		КонецЕсли;
		
		Реквизиты.Вставить("НалоговыйРежим", НалоговыйРежим);
		Реквизиты.Вставить("НомерСекции",    НомерСекции);
		
		Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
			Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
				МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
			Иначе // документ
				МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
			КонецЕсли;
		Иначе // документ по ссылке
			МодульОбработчика = Документы[ДокументСсылка.Метаданные().Имя];
		КонецЕсли;
		
		Реквизиты.Вставить("НаименованиеВСтрокеЧека", МодульОбработчика.НаименованиеВСтрокеЧека(Реквизиты));
		
		ПараметрыОперацииФискализацииЧека = ПараметрыОперацииФискализацииЧека(Реквизиты, ПараметрыПечатиЧека, ВерсияФормата, АдресУстановкиККТ, СообщениеОбОшибке);
		Если ЗначениеЗаполнено(ПараметрыОперацииФискализацииЧека) Тогда
			МассивЧеков.Добавить(ПараметрыОперацииФискализацииЧека);
		Иначе
			Возврат МассивЧеков;
		КонецЕсли; 
		
	КонецЦикла;

	Возврат МассивЧеков;
КонецФункции

// Получает список налоговых режимов допустимых в нстройках онлайн-кассы
//
// Параметры:
//  Оборудование     - <Справочник.ПодключаемоеОборудование> - оборудование для которого получаем список режимов
//
// Возвращаемое значение:
//   <Масссив>    - массив значений типа ПеречислениеСсылка.ТипыСистемНалогообложенияККТ со списком налоговых режимов
Функция НалоговыеРежимыРазрешенныеВНастройкахККТ(Оборудование) Экспорт
	СписокНалоговыхРежимов = Новый Массив;
	
	КодыСистемыНалогообложенияСтрокой = "";
	Если ЗначениеЗаполнено(Оборудование) Тогда
		ПараметрыРегистрации = ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(Оборудование);
		ПараметрыРегистрации.Свойство("КодыСистемыНалогообложения", КодыСистемыНалогообложенияСтрокой)
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(КодыСистемыНалогообложенияСтрокой) Тогда
		Возврат СписокНалоговыхРежимов;
	КонецЕсли; 
	
	КодыСистемыНалогообложения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыСистемыНалогообложенияСтрокой, ",", Истина, Истина);
	Для каждого КодСНОСтрокой Из КодыСистемыНалогообложения Цикл
		КодСНО = Число(КодСНОСтрокой);
		
		НалоговыйРежим = Неопределено;
		Если КодСНО = 0 Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		ИначеЕсли КодСНО = 1 Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
		ИначеЕсли КодСНО = 2 Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
		ИначеЕсли КодСНО = 3 И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Оборудование, "ИспользуетсяФН36") Тогда
			// ККТ фискализированная на ЕНВД с установленным флагом ИспользуетсяФН36 может применять для ОСН
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		ИначеЕсли КодСНО = 5 Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		Иначе
			Продолжить;
		КонецЕсли; 
		
		СписокНалоговыхРежимов.Добавить(НалоговыйРежим);
	КонецЦикла;
	
	Возврат СписокНалоговыхРежимов;

КонецФункции

// Список налоговых режимов допустимых для ККТ 
//
// Параметры:
//  <Организация>  - <СправочникСсылка.Организации> - организация к которой привязаны ККТ по которым получаем налоговые режимы
//  <Склад>        - <СправочникСсылка.Склады> - склад к которой привязаны ККТ по которым получаем налоговые режимы
//
// Возвращаемое значение:
//   <Массив>   - - массив значений типа ПеречислениеСсылка.ТипыСистемНалогообложенияККТ со списком налоговых режимов
Функция НалоговыеРежимыДляПечатиЧека(Организация, Склад) Экспорт
	
	СписокНалоговыхРежимов = Новый Массив;

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОборудованиеПоОрганизациям.Оборудование КАК Оборудование
	|ИЗ
	|	РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|ГДЕ
	|	ОборудованиеПоОрганизациям.Организация = &Организация
	|	И &УсловиеСклад
	|	И ОборудованиеПоОрганизациям.Оборудование.РабочееМесто = &РабочееМесто
	|	И ОборудованиеПоОрганизациям.Оборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеСклад", "ОборудованиеПоОрганизациям.Склад = &Склад");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеСклад", "ИСТИНА");
	КонецЕсли; 
	
	РезультатЗапросаПоОборудованию = Запрос.Выполнить().Выбрать();
	Если РезультатЗапросаПоОборудованию.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Пока РезультатЗапросаПоОборудованию.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СписокНалоговыхРежимов, 
			НалоговыеРежимыРазрешенныеВНастройкахККТ(РезультатЗапросаПоОборудованию.Оборудование), Истина);
	
	КонецЦикла; 
	
	Возврат СписокНалоговыхРежимов;
КонецФункции 

// Возвращает налоговый режим чека для организации в заданном периоде
//
// Параметры:
//  <Организация>  - <СправочникСсылка.Организации> - организация для которой надо получить
//                 налоговый режим печати чека
//  <Период>  - <Дата> - дата на которую печатается чек
//
// Возвращаемое значение:
//   <ПеречислениеСсылка.ТипыСистемНалогообложенияККТ>   - налоговый режим
//
Функция НалоговыйРежимПоУмолчаниюДляПечатиЧека(Организация, Период) Экспорт
	Если УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Организация, Период) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	ИначеЕсли УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период)
		Или УчетнаяПолитика.ПрименяетсяАУСНДоходы(Организация, Период) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
		Или УчетнаяПолитика.ПрименяетсяАУСНДоходыМинусРасходы(Организация, Период) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
	Иначе
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ОСН
	КонецЕсли; 
КонецФункции 

// Возвращает параметры ранее напечатанного по документу чека
//
// Параметры:
//  <ДокументСсылка>  - <ДокументСсылка> - документ 
//                 по которому ранее был напечатат чек
//
// Возвращаемое значение:
//   <Структура>   
//         - НомерЧека - <Строка>
//         - НомерСмены - <Строка>
//         - СерийныйНомер - <Строка>
//
Функция ПараметрыЧека(ДокументСсылка) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НомерЧека",     "");
	ВозвращаемоеЗначение.Вставить("НомерСмены",    "");
	ВозвращаемоеЗначение.Вставить("СерийныйНомер", "");
	
	ДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
	Если ДанныеЖурнала <> Неопределено Тогда
		ВозвращаемоеЗначение.НомерЧека     = ДанныеЖурнала.НомерЧекаККМ;
		ВозвращаемоеЗначение.НомерСмены    = ДанныеЖурнала.НомерСменыККМ;
		ВозвращаемоеЗначение.СерийныйНомер = ДанныеЖурнала.ЗаводскойНомерФН; // в новом регистре сведений ФискальныеОперации серийный номер ККМ хранится тут.
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает признак предмета расчета для переданных сведений о номенклатура
// Параметры:
//    СведенияОНоменклатуре - структура - см. БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры
// Возвращаемое значение:
// <Перечисления.ПризнакиПредметаРасчета, Неопределено> - признак предмета расчета для номенклатуры
// 
Функция РасчитатьПризнакПредметаРасчета(СведенияОНоменклатуре) Экспорт
	ПризнакПредметаРасчета = СведенияОНоменклатуре.ПризнакПредметаРасчета;
	Если ЗначениеЗаполнено(ПризнакПредметаРасчета) 
		И ПризнакПредметаРасчета <> Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
	
		Возврат ПризнакПредметаРасчета;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Услуга Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
	ИначеЕсли СведенияОНоменклатуре.АлкогольнаяПродукция Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
	ИначеЕсли СведенияОНоменклатуре.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак
		ИЛИ СведенияОНоменклатуре.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ;
	ИначеЕсли СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СведенияОНоменклатуре.ВидПродукцииИС) Тогда
		Если ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
			// есть акцизная и контрольная марка
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ;
		Иначе
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ;
		КонецЕсли;
	ИначеЕсли ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
		// есть акцизная марка, нет контрольной марки
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
	Иначе
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчета;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция НовыйСведенияОКомитенте() Экспорт
	СведенияОКомитенте = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
	
	СведенияОКомитенте.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат СведенияОКомитенте;
КонецФункции

Функция НовыйРеквизитыПечатиЧека()
	
	РеквизитыПечатиЧека = Новый Структура;
	
	РеквизитыПечатиЧека.Вставить("Ссылка",                             Неопределено);
	РеквизитыПечатиЧека.Вставить("Дата",                               ТекущаяДата());
	РеквизитыПечатиЧека.Вставить("Номер",                              "1");
	РеквизитыПечатиЧека.Вставить("Организация",                        Справочники.Организации.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("Контрагент",                         Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("Склад",                              Справочники.Склады.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("ВыводитьКонтрагентаВЧеке",           ЛОЖЬ);
	РеквизитыПечатиЧека.Вставить("ВидОперации",                        Неопределено);
	РеквизитыПечатиЧека.Вставить("Выдать",                             "");
	РеквизитыПечатиЧека.Вставить("ПринятоОт",                          "");
	РеквизитыПечатиЧека.Вставить("Основание",                          "");
	РеквизитыПечатиЧека.Вставить("Патент",                             Справочники.Патенты.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("СтавкаНДС",                          Перечисления.СтавкиНДС.БезНДС);
	РеквизитыПечатиЧека.Вставить("СуммаДокумента",                     0);
	РеквизитыПечатиЧека.Вставить("ВалютаДокумента",                    ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	РеквизитыПечатиЧека.Вставить("ДоговорПлатежногоАгента",            Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("ПлатежныйАгент",                     Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("НесколькоДоговоровПлатежногоАгента", ЛОЖЬ);
	РеквизитыПечатиЧека.Вставить("ТипОплаты",                          Неопределено);
	РеквизитыПечатиЧека.Вставить("ТипРасчета",                         Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	РеквизитыПечатиЧека.Вставить("НалоговыйРежим",                     Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	РеквизитыПечатиЧека.Вставить("НаименованиеВСтрокеЧека",            "");
	РеквизитыПечатиЧека.Вставить("НомерСекции",                        0);
	РеквизитыПечатиЧека.Вставить("ОписаниеУдержанияДляЧека",           "");
	РеквизитыПечатиЧека.Вставить("ИдентификаторФискальнойЗаписи",      "");
	
	// Оплата сертификатами НСПК
	РеквизитыПечатиЧека.Вставить("ИдентификаторКорзины",   "");
	РеквизитыПечатиЧека.Вставить("СуммаСертификатамиНСПК", 0);
	
	Возврат РеквизитыПечатиЧека;
КонецФункции

Функция ПодготовитьПараметрыПечатиЧека(ДокументСсылка, ПараметрыОбработчика, СообщениеОбОшибке) Экспорт
	
	Перем ТаблицаРезультата;
	
	ИменаТаблиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",                 ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ДатаОчереди", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаРасчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Дата"));
	
	Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
		Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
			МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
		Иначе // документ
			МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
		КонецЕсли;
	Иначе // документ по ссылке
		МодульОбработчика = Документы[ДокументСсылка.Метаданные().Имя];
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	Запрос.Текст = МодульОбработчика.ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечатиЧека = Новый Структура;
	Для Индекс = 0 По ИменаТаблиц.Количество()-1 Цикл
		ИмяТаблицы = ИменаТаблиц[Индекс];
		
		Если ПараметрыПечатиЧека.Свойство(ИмяТаблицы, ТаблицаРезультата) Тогда
			// В запросе может быть несколько подзапросов, формируемых по данных разных документов, 
			// для формирования товарной части чека Их надо собрать в итоге в одну таблицу
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Индекс].Выгрузить(), ТаблицаРезультата);
		Иначе
			ТаблицаРезультата = Результат[Индекс].Выгрузить();
		КонецЕсли; 
		ПараметрыПечатиЧека.Вставить(ИмяТаблицы, ТаблицаРезультата);
	КонецЦикла; 
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

Функция ПараметрыОперацииФискализацииЧека(Реквизиты, ДанныеПечатиЧека, ВерсияФормата, АдресУстановкиККТ, СообщениеОбОшибке) Экспорт
	//Шапка чека
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	ПодготовитьДанныеКПередачеВОФД = Константы.ПодготовитьДанныеКПередачеВОФД.Получить();
	
	// Сумма расчета - сумма всех позиций чека
	СуммаРасчетаПоЧеку = 0;
	СуммаПостоплатойПоЧеку = 0;
	СуммаПредоплатойПоЧеку = 0;
	
	ОбщиеПараметры.ТипРасчета = Реквизиты.ТипРасчета;
		
	ОбщиеПараметры.Электронно = Ложь;
	
	//Параметры принтера чеков ЕНВД
	ОбщиеПараметры.НомерКассы        = "00001";
	ОбщиеПараметры.НомерЧека         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Истина);
	ОбщиеПараметры.НомерСмены        = 1;
	ОбщиеПараметры.ДатаВремя         = ТекущаяДатаСеанса();
	ОбщиеПараметры.ДокументОснование = Реквизиты.Ссылка;
	ОбщиеПараметры.Организация       = Реквизиты.Организация;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, Реквизиты.Дата);
	
	ОбщиеПараметры.ОрганизацияНазвание       = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбщиеПараметры.ОрганизацияИНН            = СведенияОбОрганизации.ИНН;
	ОбщиеПараметры.ОрганизацияКПП            = СведенияОбОрганизации.КПП;
	ОбщиеПараметры.АдресМагазина             = ?(ЗначениеЗаполнено(АдресУстановкиККТ), АдресУстановкиККТ, СведенияОбОрганизации.ФактическийАдрес);
	
	Если ЗначениеЗаполнено(Реквизиты.Контрагент)
		И ТипЗнч(Реквизиты.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Контрагент, Реквизиты.Дата);
		
		Если Реквизиты.ВыводитьКонтрагентаВЧеке 
			И (СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
				ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН)) Тогда
				
			ОбщиеПараметры.СведенияОПокупателе.Покупатель      = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН   = ИННКонтрагента(СведенияОКонтрагенте);
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = СведенияОКонтрагенте.ЮридическийАдрес;
				
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ОбщиеПараметры.ЕстьПерсональныеДанные    = Истина;
				ОбщиеПараметры.СубъектПерсональныхДанных = Реквизиты.Контрагент;
				ОбщиеПараметры.ТипПерсональныхДанных     = Перечисления.ТипыПерсональныхДанныхККТ.ИНН;
			КонецЕсли; 
		КонецЕсли; 
		
		ОбщиеПараметры.ПокупательEmail = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		ОбщиеПараметры.ПокупательНомер = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
			
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Контрагент)
			и ТипЗнч(Реквизиты.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
		ОбщиеПараметры.ПокупательEmail = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		
		ПокупательНомер = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
		Если Не ЗначениеЗаполнено(ПокупательНомер) Тогда
			ПокупательНомер = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(ПокупательНомер);
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ОбщиеПараметры.ПокупательНомер) Тогда
		// Номер покупателя передается в формате +{Ц}
		ОбщиеПараметры.ПокупательНомер = "+"+ОбщиеПараметры.ПокупательНомер;
	КонецЕсли;
		
	ОбщиеПараметры.СистемаНалогообложения = Реквизиты.НалоговыйРежим;
	
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Реквизиты.Организация, Реквизиты.Дата);
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		ОбщиеПараметры.Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	Иначе
		ОбщиеПараметры.Кассир = НСтр("ru = 'Администратор'");
	КонецЕсли;
	
	ОбщиеПараметры.КассирИНН = ДанныеКассира.ИНН;
	
	Если Реквизиты.Свойство("ИдентификаторФискальнойЗаписи") и НЕ ПустаяСтрока(Реквизиты.ИдентификаторФискальнойЗаписи) Тогда
		ОбщиеПараметры.ИдентификаторФискальнойЗаписи = Реквизиты.ИдентификаторФискальнойЗаписи;
		ОплачиваемыеДокументы = ДанныеПечатиЧека.ОплачиваемыеДокументы.Скопировать(Новый Структура("ИдентификаторФискальнойЗаписи", Реквизиты.ИдентификаторФискальнойЗаписи));
		ОплачиваемаяНоменклатура = ДанныеПечатиЧека.ОплачиваемаяНоменклатура.Скопировать(Новый Структура("ИдентификаторФискальнойЗаписи", Реквизиты.ИдентификаторФискальнойЗаписи));
	Иначе
		ОплачиваемыеДокументы = ДанныеПечатиЧека.ОплачиваемыеДокументы;
		ОплачиваемаяНоменклатура = ДанныеПечатиЧека.ОплачиваемаяНоменклатура;
	КонецЕсли;

	//Строки чека
	ОплачиваемаяНоменклатура.Индексы.Добавить("Документ");
	ОплачиваемаяНоменклатура.Индексы.Добавить("СтавкаНДС");
	
	ЭтоВерсия105 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0);
	ЭтоВерсия110 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0);
	ЭтоВерсия120 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.2.0.0", ВерсияФормата) > 0);
	
	СписокНоменклатуры          = ОбщегоНазначения.ВыгрузитьКолонку(ОплачиваемаяНоменклатура, "Номенклатура", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(СписокНоменклатуры);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Реквизиты);
	
	СтруктураТипов = ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(СписокНоменклатуры);
	
	СписокТипаНоменклатуры = СтруктураТипов.Получить(Метаданные.Справочники.Номенклатура);
	СведенияОСпискеНоменклатуры = ?(СписокТипаНоменклатуры <> Неопределено,
		БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокТипаНоменклатуры, ПараметрыОбъекта, Истина, Ложь), Новый Соответствие);
	
	СписокТипаОС = СтруктураТипов.Получить(Метаданные.Справочники.ОсновныеСредства);
	СведенияОСпискеНоменклатурыПоТипуОС = ?(СписокТипаОС <> Неопределено,
		УчетОСПереопределяемый.СведенияОСпискеОсновныхСредств(СписокТипаОС), Новый Соответствие);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
					СведенияОСпискеНоменклатуры,
					СведенияОСпискеНоменклатурыПоТипуОС,
					Истина);
	
	ЕстьОбщийКомитентПоЧеку       = Неопределено;
	ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
	
	ДоговорПлатежногоАгента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ПлатежныйАгент          = Справочники.Контрагенты.ПустаяСсылка();
	КомитентПоЧеку          = НовыйСведенияОКомитенте();
	
	//Платежный агент
	Если ЗначениеЗаполнено(Реквизиты.ДоговорПлатежногоАгента)
		ИЛИ ЗначениеЗаполнено(Реквизиты.ПлатежныйАгент) Тогда
		Если Реквизиты.НесколькоДоговоровПлатежногоАгента И НЕ ЭтоВерсия105 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В чеке может быть указан только один договор платежного агента.'");
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
		ДоговорПлатежногоАгента       = Реквизиты.ДоговорПлатежногоАгента;
		ПлатежныйАгент                = Реквизиты.ПлатежныйАгент;
		
	ИначеЕсли ОплачиваемаяНоменклатура.Количество() > 0 И ЭтоВерсия105 Тогда 
		
		МассивТоваровНаКомиссии = Новый Массив;
		
		Для каждого СведенияОНоменклатуре Из СведенияОСпискеНоменклатуры Цикл
			Если СведенияОНоменклатуре.Значение.Комиссионный Тогда
				МассивТоваровНаКомиссии.Добавить(СведенияОНоменклатуре.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ОплачиваемаяНоменклатура.Сортировать("ДатаДокумента");
		
		СведенияОКомитентах = ПолучитьСведенияОКомитентах(МассивТоваровНаКомиссии, Реквизиты.Организация, ОплачиваемаяНоменклатура[0].ДатаДокумента);
	КонецЕсли;
	
	Отбор = Новый Структура("Документ, СтавкаНДС");
	Для каждого ОплачиваемыйДокумент Из ОплачиваемыеДокументы Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ОплачиваемыйДокумент);
		Если ОплачиваемыйДокумент.СуммаСкидкиПоДокументу <> 0 Тогда
			ТаблицаСчетаНаОплату = ОплачиваемаяНоменклатура.Скопировать(Новый Структура("Документ", ОплачиваемыйДокумент.Документ));
			
			СуммаСоСкидкой    = ТаблицаСчетаНаОплату.Итог("Сумма") - ОплачиваемыйДокумент.СуммаСкидкиПоДокументу;
			СуммаНДССоСкидкой = ?(ТаблицаСчетаНаОплату.Итог("Сумма") = 0, 0, Окр(ТаблицаСчетаНаОплату.Итог("СуммаНДС") * СуммаСоСкидкой / ТаблицаСчетаНаОплату.Итог("Сумма"), 2));
			
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыйДокумент.СуммаСкидкиПоДокументу, ТаблицаСчетаНаОплату, "СуммаСкидок", "Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСоСкидкой, ТаблицаСчетаНаОплату, "Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДССоСкидкой, ТаблицаСчетаНаОплату, "СуммаНДС");
			
			ОплачиваемыеПозицииСчета = ТаблицаСчетаНаОплату.Скопировать(Отбор);
		Иначе
			ОплачиваемыеПозицииСчета = ОплачиваемаяНоменклатура.Скопировать(Отбор);
		КонецЕсли; 
		
		СуммаВзаиморасчетов = ?(ОплачиваемыйДокумент.РасчетыВУсловныхЕдиницах, ОплачиваемыйДокумент.СуммаВзаиморасчетов, ОплачиваемыйДокумент.СуммаОплаты);
		
		Если ОплачиваемыеПозицииСчета.Количество() = 0  ИЛИ (ОплачиваемыеПозицииСчета.Итог("Сумма") <> СуммаВзаиморасчетов И НЕ ЭтоВерсия105) Тогда
			
			Если ЗначениеЗаполнено(ОплачиваемыйДокумент.СтавкаНДС) Тогда
				СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(ОплачиваемыйДокумент.СтавкаНДС);
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли; 
			
			// Оплата без номенклатуры
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование           = Реквизиты.НаименованиеВСтрокеЧека;
			СтрокаПозицииЧека.Количество             = 1;
			СтрокаПозицииЧека.Цена                   = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.ЦенаСоСкидками         = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.Сумма                  = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.СтавкаНДС              = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
			
			СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ОплачиваемыйДокумент.СуммаОплаты, Истина, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаПозицииЧека.СуммаНДС = Окр(СуммаНДС, 2);
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета  = ?(ЭтоВерсия105,Перечисления.ПризнакиСпособаРасчета.Аванс, Неопределено);
			СтрокаПозицииЧека.ПризнакПредметаРасчета = ?(ЭтоВерсия105,Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, Неопределено);
			СтрокаПозицииЧека.НомерСекции            = Реквизиты.НомерСекции;
			СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество()+1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
			СуммаРасчетаПоЧеку = СуммаРасчетаПоЧеку + ОплачиваемыйДокумент.СуммаОплаты;
		Иначе
			// Оплата счета в уе
			Если ОплачиваемыйДокумент.РасчетыВУсловныхЕдиницах Тогда
				КурсОплаты = ОплачиваемыйДокумент.СуммаОплаты/СуммаВзаиморасчетов;
				
				// Используем распределение сумм по строкам документа вместо построчного расчета, чтобы избежать проблем с форматологическим контролем из-за ошибок округления.
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыеПозицииСчета.Итог("Сумма") * КурсОплаты, ОплачиваемыеПозицииСчета, "Сумма");
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыеПозицииСчета.Итог("СуммаНДС") * КурсОплаты, ОплачиваемыеПозицииСчета, "СуммаНДС");
				
				Для каждого СтрокаСчета Из ОплачиваемыеПозицииСчета Цикл
					// Если по строке есть скидка - то пересчитываем цену по курсу, иначе используем более точный метод расчета от суммы в рублях.
					СтрокаСчета.Цена = ?(
					ОплачиваемыйДокумент.СуммаСкидкиПоДокументу <> 0 ИЛИ СтрокаСчета.СуммаСкидок <> 0, 
					Окр(СтрокаСчета.Цена * КурсОплаты, 2), 
					Окр(СтрокаСчета.Сумма/СтрокаСчета.Количество, 2));
				КонецЦикла; 
			КонецЕсли; 
			
			// Признак предоплаты устанавливается по всем позициям счета под одну ставку
			// Сравниваем сумму по счету и сумму оплаты поступившую на текущий момент
			ОстатокКОплате = ОплачиваемыеПозицииСчета.Итог("Сумма") - ОплачиваемыйДокумент.СуммаОплатыВсего;
			Если ОстатокКОплате > 0   Тогда 
				ПризнакПредоплатыПоСчету = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
			Иначе
				ПризнакПредоплатыПоСчету = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			КонецЕсли;
			
			СуммаСчета = ОплачиваемыеПозицииСчета.Итог("Сумма");
			Если НЕ ПодготовитьДанныеКПередачеВОФД ИЛИ ОплачиваемыйДокумент.СуммаОплаты = 0 Тогда
				СуммаПостоплатойПоЧеку = СуммаПостоплатойПоЧеку + ОстатокКОплате;
				СуммаПредоплатойПоЧеку = СуммаПредоплатойПоЧеку + (ОплачиваемыйДокумент.СуммаОплатыВсего - ОплачиваемыйДокумент.СуммаОплаты);
			ИначеЕсли ОплачиваемыйДокумент.СуммаОплаты <> СуммаСчета Тогда
				// Постоплату и предоплату считаем только для передачи товара (в соответствии с методическими указаниями ФНС). 
				// В случаях приема или выдачи денежных средств постоплата не указывается.
				МассивСуммыПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(ОплачиваемыеПозицииСчета, "Сумма");
				СуммыДокумента = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОплачиваемыйДокумент.СуммаОплаты, МассивСуммыПоСчету);
				
				Если СуммыДокумента <> Неопределено Тогда
					ОплачиваемыеПозицииСчета.ЗагрузитьКолонку(СуммыДокумента, "Сумма");
				КонецЕсли;
				
				СуммаСкидок = ?(СуммаСчета = 0, 0, Окр(ОплачиваемыеПозицииСчета.Итог("СуммаСкидок") * ОплачиваемыйДокумент.СуммаОплаты/СуммаСчета));
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСкидок, ОплачиваемыеПозицииСчета, "СуммаСкидок");
				
				Если СуммаСкидок <> 0 Тогда
					Для каждого ПозицияСчета Из ОплачиваемыеПозицииСчета Цикл
						// Цена без учета скидок
						ПозицияСчета.Цена = ПозицияСчета.Сумма + ПозицияСчета.СуммаСкидок;
					КонецЦикла; 
				ИначеЕсли СуммыДокумента <> Неопределено Тогда
					ОплачиваемыеПозицииСчета.ЗагрузитьКолонку(СуммыДокумента, "Цена");
				КонецЕсли; 
				
				СуммаНДСДокумента = ?(СуммаСчета = 0, 0, Окр(ОплачиваемыеПозицииСчета.Итог("СуммаНДС") * ОплачиваемыйДокумент.СуммаОплаты/СуммаСчета, 2));
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДСДокумента, ОплачиваемыеПозицииСчета, "СуммаНДС");
			КонецЕсли; 
			
			// Оплата в разрезе номенклатуры счета
			Для каждого СтрокаСчета Из ОплачиваемыеПозицииСчета Цикл
				СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
				
				Если СтрокаСчета.Количество < 0 ИЛИ СтрокаСчета.Сумма < 0  Тогда
					СообщениеОбОшибке = НСтр("ru = 'Основание печати чека не может содержать отрицательных сумм'");
					Возврат Неопределено;
				КонецЕсли; 
				
				Если НЕ ЭтоВерсия105 Тогда
					ПризнакСпособаРасчета = Неопределено;
				ИначеЕсли СтрокаСчета.КоличествоОтгружено >= СтрокаСчета.Количество Тогда
					// Если передача не сопровождается оплатой
					Если ОплачиваемыйДокумент.СуммаОплаты = 0 Тогда
						Если ОплачиваемыйДокумент.СуммаОплатыВсего = 0 Тогда
							// Товар не был оплачен ранее.
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
						ИначеЕсли ОстатокКОплате = 0 Тогда
							// Товар был ранее оплачен полностью (нет остатка к оплате по ставке).
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
						Иначе
							// Товар был оплачен ранее частично.
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
						КонецЕсли
					Иначе
						// Если передача сопровождается оплатой
						ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
					КонецЕсли; 
				Иначе
					ПризнакСпособаРасчета = ПризнакПредоплатыПоСчету;
				КонецЕсли;
				
				СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПризнакСпособаРасчета;
				Если ПризнакСпособаРасчета = Неопределено Тогда
					ПризнакПредметаРасчета = Неопределено;
				ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой 
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
					
					СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаСчета.Номенклатура];
					Если СтрокаСчета.ЭтоУслуга Тогда
						ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
					Иначе
						ПризнакПредметаРасчета = РасчитатьПризнакПредметаРасчета(СведенияОНоменклатуре)
					КонецЕсли; 
					
				Иначе
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
					
					Если ПодготовитьДанныеКПередачеВОФД Тогда
						// Количество всегда 1 при предоплате и оплате кредита (в соответствии с методуказаниями)
						СтрокаСчета.Количество = 1;
					КонецЕсли; 
				КонецЕсли;
				
				СтрокаПозицииЧека.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
				
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаСчета);
				
				Если ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата Тогда
					СтрокаПозицииЧека.КодЕдиницыИзмерения = Неопределено; // Для тега 2108
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаСчета.КодВидаТРУ) Тогда
					СтрокаПозицииЧека.NTIN = СтрокаСчета.КодВидаТРУ; // Для тега 1162 и 1163
				КонецЕсли;
				
				// Цену со скидкой получаем расчетным путем
				СтрокаПозицииЧека.ЦенаСоСкидками = ?(СтрокаСчета.СуммаСкидок = 0, СтрокаСчета.Цена, Окр(СтрокаСчета.Сумма/СтрокаСчета.Количество,2));
				
				СтавкаНДС = СтрокаСчета.СтавкаНДС;
				СуммаНДС  = СтрокаСчета.СуммаНДС;
				
				Если ПодготовитьДанныеКПередачеВОФД Тогда
					Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда 
						СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						СуммаНДС  = 0;
					ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная 
						ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда 
						
						СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(ОплачиваемыйДокумент.СтавкаНДС);
						СуммаНДС = СтрокаСчета.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаПозицииЧека.СтавкаНДС         = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
				СтрокаПозицииЧека.СуммаНДС          = СуммаНДС;
				
				СтрокаПозицииЧека.НомерСекции       = Реквизиты.НомерСекции;
				СтрокаПозицииЧека.НомерСтрокиТовара = ОбщиеПараметры.ПозицииЧека.Количество()+1;
				
				// Определяем общего комитента по чеку для записи в шапку
				Если ЭтоВерсия105 Тогда
					Если ЗначениеЗаполнено(СтрокаСчета.ДоговорПлатежногоАгента)
						ИЛИ ЗначениеЗаполнено(СтрокаСчета.ПлатежныйАгент) Тогда
						// Комиссионная услуга - общего комитента по чеку указать нельзя.
						ЕстьОбщийКомитентПоЧеку = Ложь;
						
						РеквизитыАгента = РеквизитыПлатежногоАгента(СтрокаСчета.ДоговорПлатежногоАгента, СтрокаСчета.ПлатежныйАгент, Реквизиты.Дата);
						ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыАгента, "ДанныеАгента, ДанныеПоставщика, ПризнакАгентаПоПредметуРасчета");
						Если ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено Тогда
							
							// Общего платежного агента нет и никогда не было
							ДоговорПлатежногоАгента       = СтрокаСчета.ДоговорПлатежногоАгента;
							ПлатежныйАгент                = СтрокаСчета.ПлатежныйАгент;
							ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
							
						ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку = Истина
							И ДоговорПлатежногоАгента <> СтрокаСчета.ДоговорПлатежногоАгента Тогда
							
							// Платежный агент по текущей строке не равен общему платежному агента
							ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
						КонецЕсли; 
					Иначе
						ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
						
						СведенияОКомитенте = СведенияОКомитентах[СтрокаСчета.Номенклатура];
						Если СведенияОКомитенте <> Неопределено Тогда
							// Комиссионный товар
							СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
							ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
							
							Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
								
								// Общего комитента нет и никогда не было
								КомитентПоЧеку          = СведенияОКомитенте;
								ЕстьОбщийКомитентПоЧеку = Истина;
								
							ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
								И СведенияОКомитенте.Контрагент <> КомитентПоЧеку.Контрагент Тогда 
								
								// Комитент по строке не равен общему комитенту по чеку
								ЕстьОбщийКомитентПоЧеку = Ложь;
							КонецЕсли; 
						Иначе
							// Некомиссионный товар или услуга - общего комитента по чеку указать нельзя.
							ЕстьОбщийКомитентПоЧеку = Ложь;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				
				СуммаРасчетаПоЧеку = СуммаРасчетаПоЧеку + СтрокаСчета.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	// Договор агента устанавливаем только если он совпадает в шапке и по строкам, 
	// или в шапке не задан а по строкам одинаковый
	// В версии ФФД 1.2 передача комитента в шапке была упразднена
	Если НЕ ЭтоВерсия120 Тогда
		Если ЕстьОбщийПлатежныйАгентПоЧеку = Истина Тогда
			СтруктураРеквизитов = РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгент, Реквизиты.Дата);
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры, СтруктураРеквизитов, "ДанныеАгента, ДанныеПоставщика, ПризнакАгента");
		ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина Тогда 
			ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, КомитентПоЧеку);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Реквизиты.СуммаДокумента <> 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Реквизиты.ТипОплаты);
		СтрокаОплаты.Вставить("Сумма", Реквизиты.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли; 
	
	Если СуммаРасчетаПоЧеку <> Реквизиты.СуммаДокумента Тогда
		// Для ФФД 1.0, документов без табличной части, а также случаев когда заплатили больше чем сумма по счетам добавляем служебную строку в чек 
		Если НЕ ЭтоВерсия105 ИЛИ Реквизиты.СуммаДокумента > СуммаРасчетаПоЧеку Тогда
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			Если ЗначениеЗаполнено(Реквизиты.СтавкаНДС) Тогда
				СтавкаНДСПоУмолчанию = Реквизиты.СтавкаНДС;
			Иначе
				ЭтоПлательщикНДС     = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Дата);
				СтавкаНДСПоУмолчанию = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Реквизиты.Дата, ЭтоПлательщикНДС);
			КонецЕсли;
			
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(СтавкаНДСПоУмолчанию);
			
			СтрокаПозицииЧека.Наименование      = Реквизиты.НаименованиеВСтрокеЧека;
			СтрокаПозицииЧека.Количество        = 1;
			СтрокаПозицииЧека.Цена              = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.ЦенаСоСкидками    = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.Сумма             = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.СтавкаНДС         = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
			
			СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаПозицииЧека.Сумма, Истина, 
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаПозицииЧека.СуммаНДС          = Окр(СуммаНДС, 2);
			СтрокаПозицииЧека.НомерСекции       = Реквизиты.НомерСекции;
			СтрокаПозицииЧека.НомерСтрокиТовара = ОбщиеПараметры.ПозицииЧека.Количество()+1;
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета  = ?(ЭтоВерсия105, Перечисления.ПризнакиСпособаРасчета.Аванс, Неопределено);
			СтрокаПозицииЧека.ПризнакПредметаРасчета = ?(ЭтоВерсия105, Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, Неопределено);
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		Иначе
			Если СуммаПредоплатойПоЧеку > 0 Тогда
				СтрокаОплаты = Новый Структура();
				СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
				СтрокаОплаты.Вставить("Сумма", СуммаПредоплатойПоЧеку);
				ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			Если СуммаПостоплатойПоЧеку > 0 Тогда
				СтрокаОплаты = Новый Структура();
				СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
				СтрокаОплаты.Вставить("Сумма", СуммаПостоплатойПоЧеку);
				ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.СуммаСертификатамиНСПК > 0 Тогда
	
		ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы = Реквизиты.ИдентификаторКорзины;
		ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
		ОбщиеПараметры.QRКод.ЗначениеКода = Реквизиты.ИдентификаторКорзины;
		
		ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = "СЕРТИФИКАТОМ";
		ДетализацияОплаты.Сумма = Реквизиты.СуммаСертификатамиНСПК;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
	
		Если Реквизиты.СуммаДокумента > Реквизиты.СуммаСертификатамиНСПК Тогда
			ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
			ДетализацияОплаты.НаименованиеТипаОплаты = "КАРТА МИР";
			ДетализацияОплаты.Сумма = Реквизиты.СуммаДокумента - Реквизиты.СуммаСертификатамиНСПК;
			ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ОбщиеПараметры;
КонецФункции

Функция ПолучитьСведенияОКомитентах(СписокНоменклатуры, Организация, ДатаСведений) Экспорт
	Результат = Новый Соответствие;
	
	Если СписокНоменклатуры.Количество() = 0 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Контрагент, Партия.Контрагент) КАК Комитент,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Дата, Партия.Дата) КАК ДатаОперации
	|ПОМЕСТИТЬ ВТ_Комитенты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаСведений,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе),
	|			&ВидыСубконто,
	|			Субконто1 В (&СписокНоменклатуры)
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ХозрасчетныйОстатки.Субконто2 = ПоступлениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Партия КАК Партия
	|		ПО ХозрасчетныйОстатки.Субконто2 = Партия.Ссылка
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток > 0
	|	И (ХозрасчетныйОстатки.Субконто2 ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ ХозрасчетныйОстатки.Субконто2 ССЫЛКА Документ.Партия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Комитенты.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(ВТ_Комитенты.ДатаОперации) КАК ДатаОперации
	|ПОМЕСТИТЬ ВТ_КомитентыПоДатам
	|ИЗ
	|	ВТ_Комитенты КАК ВТ_Комитенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Комитенты.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Комитенты.Комитент КАК Контрагент,
	|	ВТ_Комитенты.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТ_Комитенты КАК ВТ_Комитенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КомитентыПоДатам КАК КомитентыПоДатам
	|		ПО ВТ_Комитенты.Номенклатура = КомитентыПоДатам.Номенклатура
	|			И ВТ_Комитенты.ДатаОперации = КомитентыПоДатам.ДатаОперации
	|ГДЕ
	|	НЕ КомитентыПоДатам.Номенклатура ЕСТЬ NULL";
	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос.УстановитьПараметр("ВидыСубконто",       ВидыСубконто);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДатаСведений",       ДатаСведений);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОКомитенте = НовыйСведенияОКомитенте();
		
		ЗаполнитьЗначенияСвойств(СведенияОКомитенте, Выборка);
		ЗаполнитьЗначенияСвойств(СведенияОКомитенте, СведенияОКонтрагенте(Выборка.Контрагент, ДатаСведений));
		
		Результат.Вставить(Выборка.Номенклатура, СведенияОКомитенте);
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

Функция ИННКонтрагента(СведенияОЮрФизЛице)
	Если НЕ ЗначениеЗаполнено(СведенияОЮрФизЛице.ИНН)
		И ЗначениеЗаполнено(СведенияОЮрФизЛице.СтранаРегистрации) 
		И СведенияОЮрФизЛице.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда 
		
		Возврат "000000000000";
	КонецЕсли;
	
	Возврат СведенияОЮрФизЛице.ИНН;
КонецФункции

Функция СведенияОКонтрагенте(Контрагент, ДатаСведений) Экспорт
	СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСведений);
	
	Результат = НовыйСведенияОКомитенте();
	
	Результат.Вставить("Контрагент",   Контрагент);
	
	Результат.Вставить("Наименование", СведенияОЮрФизЛице.НаименованиеДляПечатныхФорм);
	Результат.Вставить("Телефон",      СведенияОЮрФизЛице.Телефоны);
	Результат.Вставить("ИНН",          ИННКонтрагента(СведенияОЮрФизЛице));
	
	Возврат Результат;
КонецФункции

// Функция преобразует номер телефона в соотвествии с требованиями 54ФЗ
Функция НомерТелефонаДляПечатиЧека(НомерТелефона)
	НомерТелефонаДляПечатиЧека = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(НомерТелефона);
	
	// Обрабатываем только российские мобильные номера (11 знаков, начиная с 7 или 8)
	Если СтрДлина(НомерТелефонаДляПечатиЧека) <> 11
		ИЛИ Найти(Лев(НомерТелефонаДляПечатиЧека, 1), "78") = 0 Тогда
		
		Возврат НомерТелефонаДляПечатиЧека;
	КонецЕсли; 
	
	// Номер телефона передается в формате +{Ц}
	НомерТелефонаДляПечатиЧека = "+7"+Сред(НомерТелефонаДляПечатиЧека, 2);

	Возврат НомерТелефонаДляПечатиЧека;
КонецФункции

Функция РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгент, ДатаСведений) Экспорт
	
	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ДоговорПлатежногоАгента) Тогда
		
		СписокПараметров = "ТелефонПлатежногоАгента, ТелефонОператораПоПриемуПлатежей, ТелефонОператораПеревода, ПлатежныйАгент,
			|ТелефонПоставщика, АдресОператораПеревода, ИННОператораПеревода, НаименованиеОператораПеревода, ОперацияПлатежногоАгента, ПризнакАгента, Владелец";
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорПлатежногоАгента, СписокПараметров);
		
		ДанныеАгента = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента();
		
		ДанныеАгента.ПлатежныйАгент.Операция = СтруктураРеквизитов.ОперацияПлатежногоАгента;
		ДанныеАгента.ПлатежныйАгент.Телефон  = СтруктураРеквизитов.ТелефонПлатежногоАгента;
		
		ДанныеАгента.ОператорПеревода.Наименование = СтруктураРеквизитов.НаименованиеОператораПеревода;
		ДанныеАгента.ОператорПеревода.Телефон = СтруктураРеквизитов.ТелефонОператораПеревода;
		ДанныеАгента.ОператорПеревода.Адрес = СтруктураРеквизитов.АдресОператораПеревода;
		ДанныеАгента.ОператорПеревода.ИНН = СтруктураРеквизитов.ИННОператораПеревода;
		
		ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = СтруктураРеквизитов.ТелефонОператораПоПриемуПлатежей;
		
		Результат.Вставить("ДанныеАгента", ДанныеАгента);
		
		ДанныеПоставщика = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураРеквизитов.Владелец, ДатаСведений);
		
		ПризнакАгента     = СтруктураРеквизитов.ПризнакАгента;
		ТелефонПоставщика = СтруктураРеквизитов.ТелефонПоставщика;
		Если НЕ СтруктураРеквизитов.ПлатежныйАгент Тогда
			ТелефонПоставщика = НомерТелефонаДляПечатиЧека(СведенияОбОрганизации.Телефоны);
			ПризнакАгента     = Перечисления.ПризнакиАгента.Агент;
		КонецЕсли; 
		
		ДанныеПоставщика.Телефон      = ТелефонПоставщика;
		ДанныеПоставщика.Наименование = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеПоставщика.ИНН          = ИННКонтрагента(СведенияОбОрганизации);
		Результат.Вставить("ДанныеПоставщика", ДанныеПоставщика);
		
		Результат.Вставить("ПризнакАгента",                  ПризнакАгента);
		Результат.Вставить("ПризнакАгентаПоПредметуРасчета", ПризнакАгента);
		
	ИначеЕсли ЗначениеЗаполнено(ПлатежныйАгент) Тогда
		
		НомерТелефона = НомерТелефонаДляПечатиЧека(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ПлатежныйАгент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПлатежныйАгент, ДатаСведений);
		
		ДанныеАгента = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента();
		ДанныеАгента.ПлатежныйАгент.Телефон           = НомерТелефона;
		ДанныеАгента.ОператорПеревода.Наименование    = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеАгента.ОператорПеревода.Телефон         = НомерТелефона;
		ДанныеАгента.ОператорПеревода.Адрес           = СведенияОбОрганизации.ЮридическийАдрес;
		ДанныеАгента.ОператорПеревода.ИНН             = ИННКонтрагента(СведенияОбОрганизации);
		ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = НомерТелефона;
		Результат.Вставить("ДанныеАгента", ДанныеАгента);
		
		ДанныеПоставщика = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
		ДанныеПоставщика.Телефон      = НомерТелефона;
		ДанныеПоставщика.Наименование = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеПоставщика.ИНН          = ИННКонтрагента(СведенияОбОрганизации);
		Результат.Вставить("ДанныеПоставщика", ДанныеПоставщика);
		
		ПризнакАгента = Перечисления.ПризнакиАгента.ПлатежныйАгент;
		
		Результат.Вставить("ПризнакАгента", ПризнакАгента);
		Результат.Вставить("ПризнакАгентаПоПредметуРасчета", ПризнакАгента);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает поставщика (комитента) если он един для всей номенклатуры
// В противном случае возвращается НЕОПРЕДЕЛЕНО
Функция КомитентПоЧеку(СведенияОКомитентах, СписокНоменклатуры) Экспорт
	СведенияОКомитенте = Неопределено;
	Для НомерПозиции = 0 По СписокНоменклатуры.Количество() - 1 Цикл
		Номенклатура = СписокНоменклатуры[НомерПозиции];
		
		Если НомерПозиции = 0 Тогда
			СведенияОКомитенте = СведенияОКомитентах[Номенклатура];
		ИначеЕсли СведенияОКомитенте = Неопределено 
			ИЛИ СведенияОКомитентах[Номенклатура] = Неопределено 
			ИЛИ СведенияОКомитентах[Номенклатура].Контрагент <> СведенияОКомитенте.Контрагент Тогда
			
			СведенияОКомитенте = Неопределено;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СведенияОКомитенте;
КонецФункции

Процедура ПечатьЧековНаУдержанияИзЗарплаты(ПараметрыОбработки, АдресХранилища) Экспорт
	
	// 1. Очистка очереди от "непробитых" чеков.
	ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(ПараметрыОбработки.Ссылка);
	
	// 2. Генерация новых чеков.
	Если ЗначениеЗаполнено(ПараметрыОбработки.ИдентификаторУстройства) Тогда
		ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(ПараметрыОбработки.ИдентификаторУстройства);
		
		// Настройка печати и отправки чеков
		ПараметрыПечатиЧека = МенеджерОборудованияБП.ПараметрыПодключаемогоОборудования(ПараметрыОбработки.ИдентификаторУстройства);
	Иначе
		// Попытка получить оборудование по умолчанию.
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = "ККТ";
		
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор);
		Если СписокДоступныхУстройств.Количество() = 1 Тогда
			Устройство = СписокДоступныхУстройств[0].Ссылка;
			ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(Устройство);
			ПараметрыПечатиЧека = МенеджерОборудованияБП.ПараметрыПодключаемогоОборудования(Устройство);
		Иначе
			ПараметрыУстройства = Новый Структура;
			ПараметрыПечатиЧека = МенеджерОборудованияБП.НовыйПараметрыОборудования();
		КонецЕсли;
	КонецЕсли; 
	
	НомерСекции = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
	
	МассивЧеков = ПечатьФискальныхДокументов.СобратьДанныеЧеков(
		ПараметрыОбработки.Ссылка,
		НомерСекции,
		ПараметрыОбработки.ВерсияФормата,
		ПараметрыОбработки.АдресУстановкиККТ,
		ПараметрыОбработки.ПараметрыОбработчика);
	
	//3. Регистрация чеков в очереди.
	Для Каждого ПараметрыЧекаККТ ИЗ МассивЧеков Цикл
		
		// Заполняем настройки чеков в соответствии с настройками по умолчанию
		ОтправлятьEmail = ПараметрыПечатиЧека.ЗаполнятьКонтактныеДанные
			И ПараметрыПечатиЧека.ОтправлятьEmail 
			И ЗначениеЗаполнено(ПараметрыЧекаККТ.ПокупательEmail);
			
		ОтправлятьSMS = ПараметрыПечатиЧека.ЗаполнятьКонтактныеДанные
			И ПараметрыПечатиЧека.ОтправлятьSMS 
			И ЗначениеЗаполнено(ПараметрыЧекаККТ.ПокупательНомер);
		
		Если ОтправлятьEmail Тогда
			ПараметрыЧекаККТ.Отправляет1СEmail = ПараметрыПечатиЧека.Отправляет1СEmail;
		Иначе
			ПараметрыЧекаККТ.ПокупательEmail = "";
		КонецЕсли;
		
		Если ОтправлятьSMS Тогда
			ПараметрыЧекаККТ.Отправляет1СSMS = ПараметрыПечатиЧека.Отправляет1СSMS;
		Иначе
			ПараметрыЧекаККТ.ПокупательНомер = "";
		КонецЕсли; 
		
		// Если чек отправляется по email или SMS то его можно не печатать
		Если ОтправлятьEmail ИЛИ ОтправлятьSMS Тогда
			ПараметрыЧекаККТ.Электронно = НЕ ПараметрыПечатиЧека.ПечататьЧек;
		КонецЕсли; 
		
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ);
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоТовара(МассивКодовМаркировки)
	Количество = 0;
	Для каждого СтрокаРаспределения Из МассивКодовМаркировки Цикл
		Количество = Количество + СтрокаРаспределения.Количество;
	КонецЦикла; 
	
	Возврат Количество;
КонецФункции
 

Функция ОбработатьМаркированнуюПродукцию(ТаблицаДокумента, ТаблицаШтрихкодов, РеквизитыПечатиЧека, ИдентификаторФормы, СообщениеОбОшибке)
	ПараметрыРаспределения = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",              Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Упаковка",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТовары.Колонки.Добавить("Склад",              Метаданные.ОпределяемыеТипы.Склад.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Документ", РеквизитыПечатиЧека.Ссылка);
	
	МассивШтрихкодыУпаковок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаШтрихкодов.НайтиСтроки(СтруктураОтбора), "ШтрихкодУпаковки");
	Если МассивШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураОтбора.Вставить("МаркируемаяПродукция", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокумента.НайтиСтроки(СтруктураОтбора), ТаблицаТовары);
	
	// Дополним таблиу товаров складом из шапки документа
	ТаблицаТовары.ЗаполнитьЗначения(РеквизитыПечатиЧека.Склад, "Склад"); 
	
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Серия, Упаковка, Склад", "Количество, КоличествоУпаковок");
	
	ПараметрыРаспределения.ДокументСсылка = РеквизитыПечатиЧека.Ссылка; 

	РезультатРаспределения = 
		ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(ПараметрыРаспределения, ТаблицаТовары, МассивШтрихкодыУпаковок);
		
	ВидыПродукции = Новый Массив;
		
	Если РезультатРаспределения.ЕстьОшибки Тогда

		СообщениеОбОшибке = СтрСоединить(РезультатРаспределения.Ошибки, Символы.ПС);
		
		Возврат Ложь;
	ИначеЕсли РезультатРаспределения.СтрокиБезШтрихкодов.Количество() > 0 Тогда
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Не удалось определить штрихкоды для %1 позиций номенклатуры'"), 
			РезультатРаспределения.СтрокиБезШтрихкодов.Количество());
		
		Возврат Ложь;
	Иначе
		Для каждого СтрокаТовары Из ТаблицаТовары Цикл
			ШтрихкодыПоТовару = РезультатРаспределения.РаспределенныеСтроки[СтрокаТовары];
			
			Если ШтрихкодыПоТовару = Неопределено 
				ИЛИ ШтрихкодыПоТовару.Количество() = 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			ВидыПродукции.Добавить(ШтрихкодыПоТовару[0].ВидПродукции);
			
			СтрокиДокумента = ТаблицаДокумента.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));
			Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
				Если КоличествоТовара(ШтрихкодыПоТовару) >= СтрокаДокумента.Количество И НЕ ЗначениеЗаполнено(СтрокаДокумента.Штрихкод) Тогда
					
					ШтрихкодыПоСтроке = Новый Массив;
					Пока КоличествоТовара(ШтрихкодыПоСтроке) < СтрокаДокумента.Количество Цикл
						ШтрихкодыПоСтроке.Добавить(ШтрихкодыПоТовару[0]);
						
						// Удаляем из массива строк обработанную строку
						ШтрихкодыПоТовару.Удалить(0);
					КонецЦикла; 
					
					// Подобрано марок на большее количество товара, чем есть в чеке
					Если КоличествоТовара(ШтрихкодыПоСтроке) > СтрокаДокумента.Количество Тогда
					
						СообщениеОбОшибке = СтрШаблон(
							НСтр("ru = 'Количество товара %1 в чеке не кратно размеру упаковки.'"), 
							СтрокаТовары.Номенклатура);
						
						Возврат Ложь;
					КонецЕсли; 
					
					// Помещаем во временное хранилище чтобы потом достать в Обработка.ПечатьЧека.Форма.ПараметрыОперацииФискализацииЧекаСоШтрихкодами()
					Если ИдентификаторФормы = Неопределено Тогда
						СтрокаДокумента.Штрихкод = ПоместитьВоВременноеХранилище(ШтрихкодыПоСтроке, Новый УникальныйИдентификатор);
					Иначе
						СтрокаДокумента.Штрихкод = ПоместитьВоВременноеХранилище(ШтрихкодыПоСтроке, ИдентификаторФормы);
					КонецЕсли; 
				Иначе
					СообщениеОбОшибке = СтрШаблон(
						НСтр("ru = 'Не удалось определить штрихкоды для %1 '"), 
						СтрокаТовары.Номенклатура);
					
					Возврат Ложь;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		
		УчастникСистемыМаркировки = РегистрыСведений.СтатусыКонтрагентовИСМП.УчастникСистемыМаркировки(
			РеквизитыПечатиЧека.Контрагент, ВидыПродукции);
			
		Если УчастникСистемыМаркировки = Истина Тогда
			РеквизитыПечатиЧека.Вставить("ВыводитьКонтрагентаВЧеке", Истина);
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли; 
КонецФункции

#КонецОбласти 
