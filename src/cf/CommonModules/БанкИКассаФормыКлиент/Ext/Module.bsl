
#Область ОбработчикиБаннераНДП

&НаКлиенте
Процедура ОбработатьСсылкуБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПомощникНПД" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("КонтекстныйВызов,Организация", Ложь, Организация);
		ОткрытьФорму("Обработка.ПомощникУплатыНПД.Форма.Форма", ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинетНПД" Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(
			ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСервиса());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПолучитьВыпискуБанка(Форма, НастройкиБанковскогоСчета, СтруктураПериода) Экспорт
	
	Форма.СоглашениеЭД    = НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками;
	Форма.ПериодНачало    = СтруктураПериода.ДатаНачала;
	Форма.ПериодОкончание = СтруктураПериода.ДатаОкончания;
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПериода);
	ДополнительныеПараметры.Вставить("Организация",    НастройкиБанковскогоСчета.Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет", НастройкиБанковскогоСчета.БанковскийСчет);
	
	Если СтруктураПериода.Свойство("ОткрыватьФормуУточненияПериода") Тогда
		Если НастройкиБанковскогоСчета.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
			И УчетДенежныхСредствВызовСервера.НетДокументовДиректБанкСбербанк(
				НастройкиБанковскогоСчета.Организация, НастройкиБанковскогоСчета.БанковскийСчет) Тогда
			Оповещение = Новый ОписаниеОповещения("ПолучитьВыпискиПоПрямомуОбменуСБанкомЗавершение", Форма, ДополнительныеПараметры);
			ТекстПредупреждения =
				НСтр("ru = 'Запрос выписки за большой период может привести к длительному ожиданию и быть прерван банком,
				|если потребуется значительное время соединения.
				|
				|Рекомендуется разбить большой период загрузки на интервалы не более двух недель.'");
			ПоказатьПредупреждение(Оповещение, ТекстПредупреждения);
		Иначе
			Форма.ОткрытьФормуКлиентБанка(ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПолучитьВыпискуБанкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.БанковскийСчет) Тогда
			ОбменСБанкамиКлиент.ПолучитьВыписку(
				Оповещение, НастройкиБанковскогоСчета.БанковскийСчет, Форма.ПериодНачало, Форма.ПериодОкончание);
		ИначеЕсли ЗначениеЗаполнено(НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками) Тогда
			ОбменСБанкамиКлиент.ПолучитьВыпискуПоНастройкеОбмена(
				Оповещение, НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками, Форма.ПериодНачало, Форма.ПериодОкончание);
		Иначе
			Форма.ОткрытьФормуКлиентБанка(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовОтражениеДоходов

Процедура ОтражениеДоходаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	// Обработчик не должен вызываться из неподготовленных форм, поэтому вызовем исключение,
	// если вызывающая форма не соответствует требованиям.
	БанкИКассаФормыКлиентСервер.ПроверитьВозможностьОтраженияДоходов(Форма);
	
	УчетПСНКлиент.ОтражениеДоходаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтражениеДоходаПриИзменении(Форма, ИзменяемыйРеквизит, НовоеПредставление, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	// Обработчик не должен вызываться из неподготовленных форм, поэтому вызовем исключение,
	// если вызывающая форма не соответствует требованиям.
	БанкИКассаФормыКлиентСервер.ПроверитьВозможностьОтраженияДоходов(Форма);
	
	ВариантыОтраженияДоходов = БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма);
	
	Если ЗначениеЗаполнено(НовоеПредставление) Тогда
		
		// Пользователь выбрал представление - обновим значение связанного реквизита.
		ИзменяемыйРеквизит = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовЗначение(
			НовоеПредставление,
			ВариантыОтраженияДоходов);
		
	Иначе
		
		// Если новое представление пользователем не выбрано - заполним отражение дохода значением по умолчанию.
		ИзменяемыйРеквизит = ЗначениеПоУмолчанию;
		
		НовоеПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
			ИзменяемыйРеквизит,
			ВариантыОтраженияДоходов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Успех Тогда
		Если Не ДополнительныеПараметры.Свойство("ОкноУжеПоказано") Тогда
			ДополнительныеПараметры.Вставить("ОкноУжеПоказано", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗагрузитьВыпискуИзФайла",
				ЭтотОбъект, ДополнительныеПараметры);
			СписокКнопок       = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Загрузить выписку из файла'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Попробовать позже'"));
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Вы отменили загрузку выписки с помощью 1С:ДиректБанк.
					|Хотите загрузить выписку из файла?'"),
				СписокКнопок,
				,
				КодВозвратаДиалога.Да,
				НСтр("ru = 'Загрузка банковской выписки'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Форма.ВыпискиБанка.Очистить();
	Если Результат.Выписки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВыпискиБанка.Очистить();
	Форма.ВыпискиБанка.ЗагрузитьЗначения(Результат.Выписки);
	АдресВыписки = ЭлектронноеВзаимодействиеБПВызовСервера.ДанныеВыписокБанкаВКоллекцию(Результат.Выписки);
	Форма.ПрочитатьВыпискуНаКлиенте(АдресВыписки);
	
КонецПроцедуры

Процедура ПослеВопросаЗагрузитьВыпискуИзФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Организация    = ДополнительныеПараметры.Организация;
	БанковскийСчет = ДополнительныеПараметры.БанковскийСчет;
	НастройкиБанковскогоСчета = ЭлектронноеВзаимодействиеБПВызовСервера.НастройкиКлиентБанкаДляБанковскогоСчета(
		Организация, БанковскийСчет);
	Форма = ДополнительныеПараметры.Форма;
	ЗагрузитьВыпискуЧерезФайл(НастройкиБанковскогоСчета.ФайлЗагрузки, НастройкиБанковскогоСчета.Кодировка, Форма);
	
КонецПроцедуры

Процедура ЗагрузитьВыпискуЧерезФайл(ФайлЗагрузки, Кодировка, Форма)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ДополнительныеПараметры.Вставить("Кодировка",    Кодировка);
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьВыпискуЧерезФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЗагрузитьВыпискуЧерезФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФайлЗагрузки) И ПодключеноРасширениеРаботыСФайлами Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(ДополнительныеПараметры.ФайлЗагрузки, ДополнительныеПараметры.Форма, ДополнительныеПараметры.Кодировка);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРеестраВзносов

Функция ТекстПредупрежденияНеизвестныйФорматРеестра() Экспорт
	
	Возврат НСтр("ru = 'Неизвестный формат файла.
		|Заполните реестр вручную'");
	
КонецФункции

Функция ТекстПредупрежденияНеизвестныйФорматФайлаРеестра() Экспорт
	
	Возврат НСтр("ru = 'Загрузка возможна только из файлов с расширениями txt и csv.'");
	
КонецФункции

// Проверяет, что расширение выбранного файла поддерживается механизмом загрузки данных из файла.
//
// Параметры:
//   РасширениеФайла - Строка - расширение файла без точки.
//
// Возвращаемое значение:
//   Булево - результат проверки расширения файла среди списка поддерживаемых.
//
Функция РасширениеФайлаПоддерживается(ИмяФайла) Экспорт
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	
	Если ПустаяСтрока(РасширениеФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РасширениеФайла = НРег(РасширениеФайла);
	
	Если Лев(РасширениеФайла, 1) = "y" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(РасширениеФайла, 2, 2)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РасширениеФайла = "txt" Или РасширениеФайла = "csv";
	
КонецФункции

Процедура ЗагрузитьРеестрИзФайла(Форма, Организация, БанковскийСчет, РежимНастройки) Экспорт
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = Форма.УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы реестра(*.txt, *.csv,*.y*)|*'");
	Если РежимНастройки Тогда
		ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Для настройки загрузки реестра платежей выберите файл'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация",        Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет",     БанковскийСчет);
	ДополнительныеПараметры.Вставить("ИмяФормы",           "Обработка.ЗагрузкаРеестраПлатежей.Форма");
	ДополнительныеПараметры.Вставить("РежимНастройки",     РежимНастройки);
	ДополнительныеПараметры.Вставить("ПроверитьНастройку", Истина);
	
	ОбработкаВыбораФайла = Новый ОписаниеОповещения("ЗагрузитьРеестрИзФайлаВыборФайлаЗавершение", Форма, ДополнительныеПараметры);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработкаВыбораФайла, ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти
