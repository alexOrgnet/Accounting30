#Область ПрограммныйИнтерфейс

#Область СистемыНалогообложения

// Подготавливает временную таблицу, в которой перечислены системы налогообложения, которые применялись в организациях
// в течение периода.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации - организации, описания систем налогообложения которых нужно подготовить.
//   НачалоПериода - Дата - начало анализируемого периода.
//   КонецПериода - Дата - конец анализируемого периода.
//   ОписанияСистемНалогообложения - МенеджерВременныхТаблиц - после выполнения процедуры должен содержать
//                                    таблицу ВТ_НастройкиСистемыНалогообложения, имеющую следующие колонки:
//     * Период - Дата - начало действия параметров налогообложения.
//     * Субъект - СправочникСсылка.Организации - для кого действуют параметры.
//     * СистемаНалогообложения - ПеречислениеСсылка.СистемыНалогообложения - набор параметров налогообложения.
//     * ПрименяетсяУСНДоходы, ПрименяетсяУСНДоходыМинусРасходы, ПрименяетсяУСНПатент - Булево - флаги вариантов применения УСН.
//     * ПрименяетсяНалогНаПрофессиональныйДоход - флаг учетной политики для самозанятых.
//     * ПлательщикЕНВД, ПлательщикТорговогоСбора - дополнительные флаги учетной политики.
//
Процедура ПодготовитьОписанияСистемНалогообложения(Субъекты, НачалоПериода, КонецПериода, ОписанияСистемНалогообложения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписанияСистемНалогообложения;
	Запрос.УстановитьПараметр("Субъекты",      Субъекты);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиСистемыНалогообложения.Период < НастройкиСистемыНалогообложения.ДатаИзменения
	|				И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаНачала
	|			ТОГДА НастройкиСистемыНалогообложения.ДатаИзменения
	|		ИНАЧЕ НастройкиСистемыНалогообложения.Период
	|	КОНЕЦ КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Субъект,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора КАК ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход КАК ПрименяетсяНалогНаПрофессиональныйДоход
	|ПОМЕСТИТЬ ВТ_НастройкиСистемыНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ДатаНачала, Организация В (&Субъекты)) КАК НастройкиСистемыНалогообложения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период,
	|	НастройкиСистемыНалогообложения.Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Субъекты)
	|	И НастройкиСистемыНалогообложения.Период > &ДатаНачала
	|	И НастройкиСистемыНалогообложения.Период <= &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.ДатаИзменения,
	|	НастройкиСистемыНалогообложения.Организация,
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент,
	|	НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора,
	|	НастройкиСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Субъекты)
	|	И НастройкиСистемыНалогообложения.ДатаИзменения >= &ДатаНачала
	|	И НастройкиСистемыНалогообложения.ДатаИзменения <= &ДатаОкончания";

	Запрос.Выполнить();

КонецПроцедуры

// Подготовливает список применявшихся патентов.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - проверяемая организация.
//   НачалоПериода - Дата - начало анализируемого периода.
//   КонецПериода - Дата - конец анализируемого периода.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//    * Ссылка - СправочникСсылка.Патенты - ссылка на патент;
//    * Наименование - Строка(50) - наименование патента в программе;
//    * ДатаНачала - Дата - день начала срока действия патента;
//    * ДатаОкончания - Дата - день окончания срока действия патента;
//    * ПотенциальноВозможныйГодовойДоход - Число - потенциальный годовой доход по патенту. Далее не используется.
//
Функция ПатентыОрганизацииЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт

	ПатентыОрганизации = УчетПСН.ПатентыОрганизацииЗаПериод(Организация, НачалоПериода, КонецПериода);
	
	Возврат ПатентыОрганизации;
	
КонецФункции

#КонецОбласти

#Область СпискиОбъектов

// Подготавливает список из наименований банков для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации, СправочникСсылка.Контрагенты - владельцы счетов.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ИсключаемыеБИК - Массив из Строка - БИК банков, счета которых не должны включаться в список.
//
// Возвращаемое значение:
//   ТаблицаЗначений - список наименований банков, в которых открыты счета у субъектов.
//		* НаименованиеБанка - представление счета.
//
Функция Банки(Субъекты, НачалоПериода, КонецПериода, ИсключаемыеБИК) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", Субъекты);
	Запрос.УстановитьПараметр("ИсключаемыеБИК", ИсключаемыеБИК);
	Запрос.УстановитьПараметр("ДатаНачала",     НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецДня(КонецПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Банк.Наименование КАК НаименованиеБанка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец В(&ВсяОрганизация)
	|	И НЕ БанковскиеСчета.Банк.Код В (&ИсключаемыеБИК)
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И (БанковскиеСчета.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаОткрытия <= &ДатаОкончания)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия >= &ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеБанка";

	УстановитьПривилегированныйРежим(Истина);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Подготавливает список касс организации для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации, СправочникСсылка.Контрагенты - структурные подразделения, входящие в группу.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ПараметрыОтбора - Структура - содержит дополнительные параметры для подбора касс.
//
// Возвращаемое значение:
//   ТаблицаЗначений - список касс с их свойствами:
//     * Организация - СправочникСсылка.Организации - основная организация.
//     * ОрганизацияНаименование - Строка - наименование организации.
//     * Подразделение - СправочникСсылка - обособленное подразделение.
//     * ПодразделениеНаименование - Строка - наименование обособленного подразделения.
//     * ПлатежныйАгент - Булево - признак, что касса относится к платежному агенту.
//
Функция Кассы(Субъекты, НачалоПериода, КонецПериода, ПараметрыОтбора) Экспорт

	// Выберем все обособленные подразделения, по которым есть остатки и/или обороты по кассе, 
	// а также с учетом видов деятельности - собственные средства или по деятельности платежного агента.
	СчетаКассы = Новый Массив;
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаКассы);
	
	СчетаКассыПлатежногоАгента = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента); // 50.04
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтбора.Субъект);
	Запрос.УстановитьПараметр("ВсяОрганизация", Субъекты);
	Запрос.УстановитьПараметр("ДатаНачала",     НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СчетаКассы",     СчетаКассы);
	Запрос.УстановитьПараметр("СчетаКассыПлатежногоАгента", СчетаКассыПлатежногоАгента);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Организация = &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокСортировкиОрганизаций,
	|	Хозрасчетный.Организация КАК Организация,
	|	Хозрасчетный.Организация.Наименование КАК ОрганизацияНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокСортировкиПодразделений,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение.Наименование
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПодразделениеНаименование,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Счет В (&СчетаКассыПлатежногоАгента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежныйАгент,
	|	СУММА(Хозрасчетный.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(Хозрасчетный.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В (&СчетаКассы, &СчетаКассыПлатежногоАгента), , Организация В (&ВсяОрганизация)) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация,
	|	Хозрасчетный.Организация.Наименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА Хозрасчетный.Подразделение.Наименование
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Счет В (&СчетаКассыПлатежногоАгента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировкиОрганизаций,
	|	ОрганизацияНаименование,
	|	ПорядокСортировкиПодразделений,
	|	ПодразделениеНаименование,
	|	ПлатежныйАгент";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Подготавливает список налоговых органов, в которых зарегистрированы подразделения организации, для использования в интерфейсе.
//
// Параметры:
//   Субъекты    - Массив из СправочникСсылка.Организации - структурные подразделения, входящие в группу.
//   НачалоПериода - Дата - начало периода, в который счет является действующим.
//   КонецПериода - Дата - конец периода, в который счет является действующим.
//   ВидНалога   - Строка - имя налога, по которому формируется список налоговых органов: "Имущество" или "ЕНВД".
//
// Возвращаемое значение:
//   СписокЗначений - содержит:
//     * Значение - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган.
//     * Представление - Строка - наименование налогового органа.
//
Функция НалоговыеОрганы(Субъекты, НачалоПериода, КонецПериода, ВидНалога) Экспорт
	
	СписокНалоговыхОрганов = Новый СписокЗначений;
	
	// Декларация составляются по каждому налоговому органу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", Субъекты);
	Запрос.УстановитьПараметр("ДатаНачала",     НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",  КонецПериода);
	
	Если ВидНалога = "Имущество" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	Организации.РегистрацияВНалоговомОргане КАК Ссылка,
		|	Организации.РегистрацияВНалоговомОргане.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_НалоговыеОрганы
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&ВсяОрганизация)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	10,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.Наименование
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(&ДатаНачала, Организация В (&ВсяОрганизация)) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
		|ГДЕ
		|	НЕ СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НеПодлежитНалогообложению
		|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	10,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган.Наименование
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
		|ГДЕ
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.Организация В(&ВсяОрганизация)
		|	И НЕ СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НеПодлежитНалогообложению
		|	И СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_НалоговыеОрганы.Порядок) КАК Порядок,
		|	ВТ_НалоговыеОрганы.Ссылка КАК РегистрацияВНалоговомОргане,
		|	ВТ_НалоговыеОрганы.Наименование КАК РегистрацияВНалоговомОрганеНаименование
		|ИЗ
		|	ВТ_НалоговыеОрганы КАК ВТ_НалоговыеОрганы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НалоговыеОрганы.Ссылка,
		|	ВТ_НалоговыеОрганы.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Наименование";
		
	Иначе

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане.Наименование КАК РегистрацияВНалоговомОрганеНаименование
		|ИЗ
		|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
		|ГДЕ
		|	ВидыДеятельностиЕНВД.Владелец В(&ВсяОрганизация)
		|	И НЕ ВидыДеятельностиЕНВД.ПометкаУдаления
		|	И ВидыДеятельностиЕНВД.ДатаНачала <= &ДатаОкончания
		|	И (ВидыДеятельностиЕНВД.ДатаПрекращения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВидыДеятельностиЕНВД.ДатаПрекращения >= &ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрацияВНалоговомОрганеНаименование";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.РегистрацияВНалоговомОргане)
		   И СписокНалоговыхОрганов.НайтиПоЗначению(Выборка.РегистрацияВНалоговомОргане) = Неопределено Тогда
			СписокНалоговыхОрганов.Добавить(Выборка.РегистрацияВНалоговомОргане, Выборка.РегистрацияВНалоговомОрганеНаименование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокНалоговыхОрганов;
	
КонецФункции

// По переданным реквизитам подбирает организацию. Если организацию подобрать не удалось, то контрагента.
//
// Параметры:
//  ИНН          - Строка - налоговый идентификатор.
//  КПП          - Строка - налоговый идентификатор организации.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации, СправочникСсылка.Контрагенты - возвращаемый параметр. Приоритет у организации.
//
Функция СсылкаНаОбъектПоИННКПП(ИНН, КПП) Экспорт
	Перем СубъектСсылка;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	СубъектСсылка = Справочники.Организации.НайтиОрганизацию(ИНН, КПП);
	Если Не ЗначениеЗаполнено(СубъектСсылка) 
	 Или ДоступныеОрганизации.Найти(СубъектСсылка) = Неопределено Тогда
		// Подставляем контрагента, если организация не найдена или она недоступна текущему пользователю.
		ОтборПоСубъекту = Новый Структура("ИНН, КПП", ИНН, КПП);
		СубъектСсылка = РаботаСКонтрагентамиБП.НайтиКонтрагентаПоИНН_КПП(ОтборПоСубъекту);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СубъектСсылка;
	
КонецФункции

// Заполняет значения основных реквизитов субъекта фин.отчетности.
//
// Параметры:
//  Субъект      - СправочникСсылка - см. реквизит Субъект в таб.части ЭкономическиеСубъекты документа ФинОтчетВБанк.
//  РеквизитыСубъекта - Структура - см. ЗаполнениеФинОтчетностиВБанки.СписокРеквизитовСубъекта()
//
Процедура ЗаполнитьРеквизитыСубъекта(Субъект, РеквизитыСубъекта) Экспорт
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого РеквизитСубъекта Из РеквизитыСубъекта Цикл
		
		Если СтрЗаканчиваетсяНа(РеквизитСубъекта.Ключ, "ДолженБытьЗаполнен") Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитСубъекта.Ключ = "ОГРН" И ТипЗнч(Субъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			ИменаРеквизитов.Добавить("РегистрационныйНомер");
		Иначе
			ИменаРеквизитов.Добавить(РеквизитСубъекта.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияРеквизитовСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субъект, СтрСоединить(ИменаРеквизитов, ","));
	
	Для Каждого РеквизитСубъекта Из ЗначенияРеквизитовСубъекта Цикл
		
		Если РеквизитСубъекта.Ключ = "РегистрационныйНомер" Тогда
			РеквизитыСубъекта.ОГРН = РеквизитСубъекта.Значение;
		Иначе
			РеквизитыСубъекта[РеквизитСубъекта.Ключ] = РеквизитСубъекта.Значение;
		КонецЕсли;
		
	КонецЦикла;

	РеквизитыСубъекта.Вставить("ОГРНДолженБытьЗаполнен", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетыНаОсновеБСП

// Вызывается из процедуры "НастроитьВариантыОтчета" в модуле объекта. Инициализирует настройки для подсистемы БСП.
//
// Параметры:
//  Настройки    - ТаблицаЗначений - см. параметр Настройки у ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
//  ОписаниеОтчета - СтрокаДереваЗначений - см. ВариантыОтчетов.ОписаниеОтчета()
//
Процедура НастроитьВариантыОтчетаОстаткиТоваровПоСрокамХранения(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПоСрокамХранения").Размещение.Вставить(
		Метаданные.Подсистемы.Руководителю.Подсистемы.Склад, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;

КонецПроцедуры

// Формирует печатную форму "Кассовая книга".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКассоваяКнига()
//
// Возвращаемое значение:
//   Структура - см. ЗаполнениеФинОтчетностиВБанки.НовыйВозвращаемыеПараметры()
//
Функция СформироватьОтчетКассоваяКнига(ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	РезультатФормированияОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПодготовитьОтчет(ПараметрыОтчета);
	
	Возврат РезультатФормированияОтчета;
	
КонецФункции

// Дополняет параметры формирования отчета "Книга доходов и расходов предпринимателя" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//  ПараметрыОтчетаОсновные - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
// Возвращаемое значение:
//   Структура   - заполненные параметры отчета.
//
Функция ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(НастройкиОтчета, ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	ПараметрыФормы = ЗаполнениеФинОтчетностиВБанки.НовыйПараметрыФормы();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ПараметрыФормы, Истина);
	
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	// Получим расширение "по умолчанию".
	Расширение = Документы.ФинОтчетВБанк.РасширениеФайлаБезТочки(Неопределено, Неопределено);
	ТипФайла = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ТипФайлаПакетаОтображаемыхДокументовПоРасширению(
			ПараметрыОтчета.Расширение);
	
	ПараметрыОтчета.Вставить("Расширение", Расширение);
	ПараметрыОтчета.Вставить("ТипФайла",   ТипФайла);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Запоняет параметры отчета "Книга доходов и расходов предпринимателя".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
Функция ЗаполнитьПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета.Вставить("СписокТаблиц"); // чтобы не заполнялась Таблица значений, не поддерживаемая на Клиенте
	Возврат Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	
КонецФункции

// Дополняет параметры формирования отчета "Расшифровка задолженности" по настройкам из требований банка.
//
// Параметры:
//	НастройкиОтчета - Структура - см. НовыеНастройкиОтчета()
//  ПараметрыОтчетаОсновные - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
// Возвращаемое значение:
//   Структура   - заполненные параметры отчета.
//
Функция ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета, ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета = Отчеты.РасшифровкаЗадолженности.ПустыеПараметрыКомпоновкиОтчета();
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьОбщиеПараметрыКомпоновкиОтчета(ПараметрыОтчета);
	
	// Настройки с табличными полями требуют специального заполнения.
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьЗначенияСвойствКромеТаблиц(ПараметрыОтчета, НастройкиОтчета);
	
	СвойстваСчета = Неопределено;
	КешСубконто = Новый Структура();
	
	// Перед установкой группировок и доп.полей из настроек банка,
	// требуется очистить установленные группировки и доп.поля из сохраненных настроек.
	ПараметрыОтчета.Вставить("ОчищатьТаблицуГруппировок", Истина);
	ПараметрыОтчета.Вставить("ОчищатьДополнительныеПоля", Истина);
	ПараметрыОтчета.Вставить("ОчищатьИнтервалы",          Истина);
	ПараметрыОтчета.Вставить("ОчищатьСчетаРасчетов",      Истина);
	
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьГруппировкиОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьОтборыОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьДополнительныеПоляОтчета(ПараметрыОтчета, НастройкиОтчета, СвойстваСчета, КешСубконто);
	ЗаполнениеФинОтчетностиВБанки.ЗаполнитьИнтервалыОтчета(ПараметрыОтчета, НастройкиОтчета);
	
	ПараметрыОтчета.ВыводитьПримечания = Ложь; // Примечания отчета выводятся для группы Контроль, в банк эти данные передавать не требуется.
	
	ВключитьСчетаБезИнвентаризацииВАкте = Ложь;
	Если НастройкиОтчета.ВариантОтчетаРасшифровкаЗадолженности = "ВидыЗадолженности" Тогда
	    ПараметрыОтчета.КлючВарианта  = "РасшифровкаЗадолженности";

	ИначеЕсли НастройкиОтчета.ВариантОтчетаРасшифровкаЗадолженности = "СтрокиБаланса" Тогда	    
		ПараметрыОтчета.КлючВарианта  = "РасшифровкаЗадолженностиПоСтрокамБаланса";
		ВключитьСчетаБезИнвентаризацииВАкте = Истина;

	КонецЕсли;
	
	Если НастройкиОтчета.ДетализацияПоСрокам = "ПоСрокамВозникновения" Тогда
		ПараметрыОтчета.ВариантДетализации = Отчеты.РасшифровкаЗадолженности.ВариантыДетализацииПоСрокам().ПоСрокамВозникновения;

	ИначеЕсли НастройкиОтчета.ДетализацияПоСрокам = "ПоСрокамПогашения" Тогда
		ПараметрыОтчета.ВариантДетализации = Отчеты.РасшифровкаЗадолженности.ВариантыДетализацииПоСрокам().ПоСрокамПогашения;

	Иначе
		ПараметрыОтчета.ВариантДетализации = Отчеты.РасшифровкаЗадолженности.ВариантыДетализацииПоСрокам().БезДетализации;
	КонецЕсли;
	
	// Учитываем все счета расчетов.
	ПараметрыОтчета.СчетаРасчетов = Отчеты.РасшифровкаЗадолженности.СчетаРасчетовПоУмолчанию(ВключитьСчетаБезИнвентаризацииВАкте);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Действия, выполняемые в форме при формировании отчета.
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - из какой формы вызывается обработчик.
//
Процедура СформироватьОтчетНаСервере(Форма) Экспорт
	
	ПараметрыОтчета = Форма.ПодготовитьПараметрыОтчетаНаСервере();
	
	НастройкиДляСтатистики = БухгалтерскиеОтчеты.ПоказателиОтчетаРуководителяДляСтатистики(ПараметрыОтчета);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	НастройкиДляСтатистики = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(НастройкиДляСтатистики, ПараметрыЗаписиJSON);
	
	БухгалтерскиеОтчеты.ЗаписатьОперациюБизнесСтатистики(Форма, "СформироватьОтчет", НастройкиДляСтатистики);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета) Экспорт
	
	Если ОтправляемыйСчет = Счет("01") Тогда
		УстановитьПараметрыСчета_01(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("02") Тогда
		УстановитьПараметрыСчета_02(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("03") Тогда
		УстановитьПараметрыСчета_03(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("04") Тогда
		УстановитьПараметрыСчета_04(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("05") Тогда
		УстановитьПараметрыСчета_05(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("07") Тогда
		УстановитьПараметрыСчета_07(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("08") Тогда
		УстановитьПараметрыСчета_08(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("09") Тогда
		УстановитьПараметрыСчета_09(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("10") Тогда
		УстановитьПараметрыСчета_10(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("14") Тогда
		УстановитьПараметрыСчета_14(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("19") Тогда
		УстановитьПараметрыСчета_19(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("20") Тогда
		УстановитьПараметрыСчета_20(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("21") Тогда
		УстановитьПараметрыСчета_21(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("23") Тогда
		УстановитьПараметрыСчета_23(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("25") Тогда
		УстановитьПараметрыСчета_25(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("26") Тогда
		УстановитьПараметрыСчета_26(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("28") Тогда
		УстановитьПараметрыСчета_28(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("29") Тогда
		УстановитьПараметрыСчета_29(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("40") Тогда
		УстановитьПараметрыСчета_40(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("41") Тогда
		УстановитьПараметрыСчета_41(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("42") Тогда
		УстановитьПараметрыСчета_42(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("43") Тогда
		УстановитьПараметрыСчета_43(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("44") Тогда
		УстановитьПараметрыСчета_44(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("45") Тогда
		УстановитьПараметрыСчета_45(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("46") Тогда
		УстановитьПараметрыСчета_46(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("50") Тогда
		УстановитьПараметрыСчета_50(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("51") Тогда
		УстановитьПараметрыСчета_51(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("52") Тогда
		УстановитьПараметрыСчета_52(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("55") Тогда
		УстановитьПараметрыСчета_55(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("57") Тогда
		УстановитьПараметрыСчета_57(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("58") Тогда
		УстановитьПараметрыСчета_58(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("59") Тогда
		УстановитьПараметрыСчета_59(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("60") Тогда
		УстановитьПараметрыСчета_60(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("62") Тогда
		УстановитьПараметрыСчета_62(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("63") Тогда
		УстановитьПараметрыСчета_63(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("66") Тогда
		УстановитьПараметрыСчета_66(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("67") Тогда
		УстановитьПараметрыСчета_67(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("68") Тогда
		УстановитьПараметрыСчета_68(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("69") Тогда
		УстановитьПараметрыСчета_69(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("70") Тогда
		УстановитьПараметрыСчета_70(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("71") Тогда
		УстановитьПараметрыСчета_71(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("73") Тогда
		УстановитьПараметрыСчета_73(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("75") Тогда
		УстановитьПараметрыСчета_75(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("76") Тогда
		УстановитьПараметрыСчета_76(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("77") Тогда
		УстановитьПараметрыСчета_77(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("79") Тогда
		УстановитьПараметрыСчета_79(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("80") Тогда
		УстановитьПараметрыСчета_80(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("81") Тогда
		УстановитьПараметрыСчета_81(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("83") Тогда
		УстановитьПараметрыСчета_83(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("84") Тогда
		УстановитьПараметрыСчета_84(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("86") Тогда
		УстановитьПараметрыСчета_86(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("90") Тогда
		УстановитьПараметрыСчета_90(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("91") Тогда
		УстановитьПараметрыСчета_91(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("96") Тогда
		УстановитьПараметрыСчета_96(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("97") Тогда
		УстановитьПараметрыСчета_97(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("98") Тогда
		УстановитьПараметрыСчета_98(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("99") Тогда
		УстановитьПараметрыСчета_99(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("001") Тогда
		УстановитьПараметрыСчета_001(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("002") Тогда
		УстановитьПараметрыСчета_002(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("003") Тогда
		УстановитьПараметрыСчета_003(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("004") Тогда
		УстановитьПараметрыСчета_004(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("005") Тогда
		УстановитьПараметрыСчета_005(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("007") Тогда
		УстановитьПараметрыСчета_007(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("008") Тогда
		УстановитьПараметрыСчета_008(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("009") Тогда
		УстановитьПараметрыСчета_009(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("010") Тогда
		УстановитьПараметрыСчета_010(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("011") Тогда
		УстановитьПараметрыСчета_011(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("012") Тогда
		УстановитьПараметрыСчета_012(ПараметрыСчета);
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОтправкиСчетов

Процедура УстановитьПараметрыСчета_01(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_02(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_03(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_04(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_05(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_07(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_08(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбъектыСтроительства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РасходыНаНИОКР");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_09(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_10(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_14(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_19(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_20(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы, СтатьиЗатрат");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_21(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_23(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_25(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_26(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_28(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_29(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_40(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы, ВидыСтоимости");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_41(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_42(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_43(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_44(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_45(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_46(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_50(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_51(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_52(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_55(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_57(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_58(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_59(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_60(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_62(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_63(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_66(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_67(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_68(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_69(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыРасчетовПоСредствамФСС");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_70(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_71(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_73(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_75(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_76(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_77(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_79(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбособленныеПодразделения");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_80(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители, ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители");
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_81(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители, ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители");
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_83(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_84(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НаправленияИспользованияПрибыли");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_86(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НазначениеЦелевыхСредств, Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_90(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы, Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_91(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ПрочиеДоходыИРасходы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_96(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Резервы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_97(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РасходыБудущихПериодов");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_98(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_99(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ПрибылиИУбытки");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_001(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_002(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура, Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_003(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_004(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_005(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_007(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_008(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_009(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_010(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_011(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты, ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_012(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Функция ДобавитьВидыСубконоПоСчету(ПараметрыСчета, СписокВидовСубконто)
	
	СтрокаПараметров = ПараметрыСчета.Добавить();
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	ВидыСубконто = СтрРазделить(СписокВидовСубконто, ",", Ложь);
	
	Для Каждого ВидСубконто Из ВидыСубконто Цикл
		СтрокаПараметров.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СокрЛП(ВидСубконто)]);
	КонецЦикла;
	
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти

#Область ОберткиФункцийИПроцедур

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти
