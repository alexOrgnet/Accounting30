#Область ПроверкаИПодборПродукции

Функция ОпределитьДокументОснованиеСверкиКодов(ДОкументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПолученный") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументРеализации");
	Иначе
		Возврат ДОкументСсылка;
	КонецЕсли; 

КонецФункции 
 

// Предназначена для определения факта наличия в данных документа номенклатуры, являющейся маркируемой продукцией.
// 
// Параметры:
//  Коллекция                - ДанныеФормыКоллекция - состав номенклатуры документа
//  ВидМаркируемойПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции, наличие которой необходимо определить.
//  ЕстьМаркируемаяПродукция - Булево - признак наличия маркируемой продукции.
//
Процедура ЕстьМаркируемаяПродукцияВКоллекции(Коллекция, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	ВремТаблТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьМаркируемаяПродукция
	|ИЗ
	|	ВремТаблТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаТовары", Коллекция.Выгрузить(, "Номенклатура"));
	Результат = Запрос.Выполнить();
	
	ЕстьМаркируемаяПродукция = НЕ Результат.Пустой();
	
КонецПроцедуры

// Заполняет переданную таблицу товарами переданного документа, являющимися маркируемой продукцией требуемого вида.
// 
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции, которую необходимо получить.
//  ТаблицаМаркируемойПродукции - ТаблицаЗначений - таблица маркируемой продукции документа. (См. ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента())
//
Процедура ЗаполнитьМаркируемуюПродукциюДокумента(Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		РезультатЗапроса = ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции);
		ТаблицаМаркируемойПродукции.Очистить();
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "РеализацияТоваровУслуг") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииРеализацияТоваровУслуг(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ПоступлениеТоваровУслуг") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииПоступлениеТоваровУслуг(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ПриемкаТоваровИСМП") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииПриемкаТоваровИСМП(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ВозвратТоваровОтПокупателя") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииВозвратТоваровОтПокупателя(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "АктОРасхожденияхПолученный") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииАктОРасхожденияхПолученный(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "АктОРасхождениях") Тогда  
		РезультатЗапроса = ЗапросМаркируемойПродукцииАктОРасхождениях(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ВозвратТоваровПоставщику") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииВозвратТоваровПоставщику(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "КорректировкаРеализации") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииКорректировкаРеализации(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСБПКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ПередачаТоваров") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииПередачаТоваров(Контекст, ВидМаркируемойПродукции);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТаблицаМаркируемойПродукции.Колонки.Найти("GTIN") <> Неопределено Тогда
		
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристика.Следующий() Цикл
				ПродукцияПоGTIN = ТаблицаМаркируемойПродукции.СкопироватьКолонки();
				СписокКодовGTIN = Новый Массив;
				
				ВыборкаGTIN = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаGTIN.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
						// Соответственно тут должен быть остаточный GTIN
						Выборка = ВыборкаGTIN.Выбрать();
						Пока Выборка.Следующий() Цикл
							ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), Выборка);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					
					Если ПродукцияПоGTIN.Количество() = 0 Тогда
						Выборка = ВыборкаGTIN.Выбрать();
						Пока Выборка.Следующий() Цикл
							ЗаполнитьЗначенияСвойств(ПродукцияПоGTIN.Добавить(), Выборка,, "GTIN");
						КонецЦикла;
					КонецЕсли;
					
					Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ВыборкаGTIN.GTIN) Тогда
						GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ВыборкаGTIN.GTIN);
						СписокКодовGTIN.Добавить(GTIN);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаПродукцииПоGTIN Из ПродукцияПоGTIN Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), СтрокаПродукцииПоGTIN);
					СтрокаПродукцииПоGTIN.КодыGTIN.ЗагрузитьЗначения(СписокКодовGTIN);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ТаблицаМаркируемойПродукции);
	КонецЕсли;
	
	Если ТаблицаМаркируемойПродукции.Колонки.Найти("ВидПродукции") <> Неопределено Тогда
		// Заполним сведения о списке номенклатуры
		СведенияОСпискеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМаркируемойПродукции, "Номенклатура", Истина), СписокПараметровНоменклатурыИС());
			
		Для каждого СтрокаТаблицы Из ТаблицаМаркируемойПродукции Цикл
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТаблицы.Номенклатура];
			Если СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.ВидПродукции = ВидПродукцииИС(СведенияОНоменклатуре);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры


// Заполняет в переданной таблице данные из документа по значениям штрихкодов в разрезе продукции.
// Используется для получения данных по документу, содержащему расхождения кодов маркировки (акты о расхождениях). 
// 
// Параметры:
// ДокументСсылка - ДокументСсылка - ссылка на документ.
// ТаблицаТоваровЗначенийШтрихкодов - См. СверкаКодовМаркировкиИСМП.ИнициализироватьТаблицуТоваровЗначенийШтрихкодов.
//
Процедура ПриЗаполненииЗначенияШтрихкодовПродукцииПоДокументу(ДокументСсылка, ТаблицаТоваровЗначенийШтрихкодов) Экспорт
	
	ТипПроверямогоДокумента = ТипЗнч(ДокументСсылка);
	Если ТипПроверямогоДокумента = Тип("ДокументСсылка.АктОРасхождениях") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	АктОРасхожденияхШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	АктОРасхожденияхШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		|	"""" КАК Характеристика,
		|	&ОпределениеВидаПродукции КАК ВидПродукции
		|ИЗ
		|	Документ.АктОРасхождениях КАК ДокументыОснованияАкта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях.УпаковкиРасхождения КАК АктОРасхожденияхШтрихкодыУпаковок
		|		ПО ДокументыОснованияАкта.Ссылка = АктОРасхожденияхШтрихкодыУпаковок.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (АктОРасхожденияхШтрихкодыУпаковок.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	ДокументыОснованияАкта.Ссылка В(&МассивОбъектов)
		|	И &УсловиеМаркируемаяПродукция";
		
		
		ФильтрВидПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		
		УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ФильтрВидПродукции);
		УстановитьОпределениеВидаПродукции(ТекстЗапроса);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивОбъектов", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаТоваровЗначенийШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	ИначеЕсли ТипПроверямогоДокумента = Тип("ДокументСсылка.АктОРасхожденияхПолученный") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	АктОРасхожденияхШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	АктОРасхожденияхШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		|	"""" КАК Характеристика,
		|	&ОпределениеВидаПродукции КАК ВидПродукции
		|ИЗ
		|	Документ.АктОРасхожденияхПолученный КАК ДокументыОснованияАкта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПолученный.ШтрихкодыУпаковокРасхождения КАК АктОРасхожденияхШтрихкодыУпаковок
		|		ПО ДокументыОснованияАкта.Ссылка = АктОРасхожденияхШтрихкодыУпаковок.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (АктОРасхожденияхШтрихкодыУпаковок.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	ДокументыОснованияАкта.Ссылка В(&МассивОбъектов)
		|	И &УсловиеМаркируемаяПродукция";
		
		
		ФильтрВидПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		
		УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ФильтрВидПродукции);
		УстановитьОпределениеВидаПродукции(ТекстЗапроса);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивОбъектов", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаТоваровЗначенийШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых
// (на любом уровне вложенности, в т.ч. частично) находится продукция требуемого вида.
//
// Параметры:
//   ШтрихкодыДляПроверки - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкоды упаковок для проверки.
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
//
// Возвращаемое значение:
//   Массив - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - подходящие под виды продукции штрихкоды упаковок.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции) Экспорт
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ЕСТЬNULL(&УсловиеМаркируемаяПродукция, ЛОЖЬ) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО (ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
	|			И ШтрихкодыУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В(&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В(&ШтрихкодУпаковки)";
	
	УстановитьУсловиеПоМаркируемойПродукции(Запрос.Текст, ВидыПродукции);
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#Область АктОРасхожденияхПолученныйРезультатыСверки
	

Процедура ОтразитьРезультатыСверкиАктОРасхожденияхПолученный(ПараметрыОкончанияСверки) Экспорт

	ДокументОбъект = ПараметрыОкончанияСверки.ПроверяемыйДокумент.ПолучитьОбъект();
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияСверки.ТаблицаШтрихкодовВерхнегоУровня,
		Неопределено);
		
	ОтразитьИзмененияТабличнойЧастиТовары(ДокументОбъект, ПараметрыОкончанияСверки.ТаблицаРасхожденийКодовМаркировки);
	
	ДокументОбъект.ШтрихкодыУпаковокРасхождения.Загрузить(ПараметрыОкончанияСверки.ТаблицаРасхожденийКодовМаркировки);
		
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

// Переносит таблицу штрихкодов верхнего уровня в документ
//   * Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие (содержащие внутри хотя бы 1 шт 
//   маркируемой продукции) штрихкоды верхнего уровня.
//   * Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды.
//   * Не меняет прочие штрихкоды.
// 
// Параметры:
//   ДокументОбъект                  - ДокументОбъект  - документ для изменения
//   ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
//   ВидПродукцииИС                  - ПеречислениеСсылка.ВидыПродукцииИС - обрабатываемый вид продукции
//
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня, ВидПродукцииИС) Экспорт
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Штрихкод.Имя = "ЗначениеШтрихкода";
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ШтрихкодыУпаковок.Добавить(), ЭлементВНаличии);
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодыСодержащиеМаркируемуюПродукцию = ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, ВидПродукцииИС);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеМаркируемуюПродукцию Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки"));
	КонецЦикла;
	
КонецПроцедуры


Процедура ОтразитьИзмененияТабличнойЧастиТовары(ДокументОбъект, ТаблицаРасхожденийКодовМаркировки)
	
	НеПризнать = Перечисления.ВариантыДействийПоРасхождениямКодовМаркировкиИСМП.НеПризнать;
	
	ТаблицаИзлишки        = ТаблицаРасхожденийКодовМаркировки.СкопироватьКолонки();
	ТаблицаНедостачаИБрак = ТаблицаРасхожденийКодовМаркировки.СкопироватьКолонки();
	
	Для Каждого Отклонение Из ТаблицаРасхожденийКодовМаркировки Цикл
		Если Отклонение.Признан <> НеПризнать Тогда
			Если Отклонение.ТипРасхождения =  Перечисления.ТипыРасхожденийИСМП.Излишек Тогда
				НоваяСтрока= ТаблицаИзлишки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отклонение);
			Иначе
				НоваяСтрока= ТаблицаНедостачаИБрак.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отклонение);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаИзлишки.Количество() = 0 
		И ТаблицаНедостачаИБрак.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		СтрокиИзлишки = ТаблицаИзлишки.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));
		СтрокиНедостачи = ТаблицаНедостачаИБрак.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));
		
		Если СтрокиИзлишки.Количество() = 0 
			И СтрокиНедостачи.Количество() = 0 Тогда
			
			Продолжить;
		Иначе
			КоличествоФакт = СтрокаТовары.КоличествоПоДокументу;
			
			// Проходим в два захода - сначала приходуем излишки
			Для Каждого Отклонение Из СтрокиИзлишки Цикл
				КоличествоФакт = КоличествоФакт + Отклонение.Количество;
				Отклонение.Количество = 0;
			КонецЦикла;
			
			// А потом вычитаем недостачи
			Для Каждого Отклонение Из СтрокиНедостачи Цикл
				ОтклонениеКоличество    = Мин(КоличествоФакт, Отклонение.Количество);
				Отклонение.Количество   = Отклонение.Количество - ОтклонениеКоличество;
				КоличествоФакт      = КоличествоФакт    - ОтклонениеКоличество;
			КонецЦикла;
			
			СтрокаТовары.Количество = КоличествоФакт;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТовары);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 


Функция ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции)
	
	ПоляВЫБРАТЬ = Новый Массив;
	ПоляБезGTIN = Новый Массив;
	Для Каждого Колонка Из ТаблицаМаркируемойПродукции.Колонки Цикл
		Если Колонка.Имя <> "КодыGTIN"
				И Колонка.Имя <> "ИдентификаторыПроисхожденияВЕТИС" Тогда
			ПоляВЫБРАТЬ.Добавить(СтрШаблон("МаркируемаяПродукция.%1 КАК %1", Колонка.Имя));
			Если Колонка.Имя <> "GTIN" Тогда
				ПоляБезGTIN.Добавить(СтрШаблон("МаркируемаяПродукция.%1 КАК %1", Колонка.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПоляВЫБРАТЬ
	|ПОМЕСТИТЬ ВТМаркируемаяПродукция
	|ИЗ
	|	&МаркируемаяПродукция КАК МаркируемаяПродукция
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	&ПоляБезGTIN
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	МаркируемаяПродукция.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
	|	И МаркируемаяПродукция.GTIN = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Номенклатура не заполнена только для строк с остаточными GTIN
	|	&ПоляВЫБРАТЬ
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|ГДЕ
	|	МаркируемаяПродукция.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
	|	И МаркируемаяПродукция.GTIN <> """"
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МаркируемаяПродукция", ТаблицаМаркируемойПродукции);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВЫБРАТЬ", СтрСоединить(ПоляВЫБРАТЬ, ",
	|"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляБезGTIN", СтрСоединить(ПоляБезGTIN, ",
	|"));
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ЗапросМаркируемойПродукцииПоступлениеТоваровУслуг(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ПоступлениеТоваровУслугТовары.Номенклатура     КАК Номенклатура,
	|	""""                                           КАК Характеристика,
	|	""""                                           КАК Серия,
	|	ПоступлениеТоваровУслугТовары.Количество       КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииРеализацияТоваровУслуг(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	РеализацияТоваровУслугТовары.Номенклатура      КАК Номенклатура,
	|	""""                                           КАК Характеристика,
	|	""""                                           КАК Серия,
	|	РеализацияТоваровУслугТовары.Количество        КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Заполняет таблицу товаров, принятых без расхождений, при загрузке данных формы результатов сверки по кодам маркировки.
// Товары, принятые без расхождений, определяются как товары документа основания, данных по которым нет в массиве номенклатуры,
// полученном по ЭДО (из акта или корректировочного документа), соотвествующие отбору по видам продукции.
// 
// Параметры:
//  ДокументОснование - ДокументСсылка - документ основание, с которым производится сверка кодов из входящего электронного документа.
//  НоменклатураПоДаннымЭДО - Массив - массив из ОпределяемыйТип.Номенклатура, полученный из входящего электронного документа.
//  ВидыМаркируемойПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС - виды маркируемой продукции документа основания, которую необходимо получить.
//  ТаблицаПродукции - ТаблицаЗначений - таблица продукции для заполнения. Колонки:
//  * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура.
//
// см. СверкаКодовМаркировкиИСМППереопределяемый.ПриОпеределенииТаблицыПродукцииПринятойБезРасхождений
Процедура ПриОпеределенииТаблицыПродукцииПринятойБезРасхождений(ДокументОснование, НоменклатураПоДаннымЭДО, ВидыМаркируемойПродукции, ТаблицаПродукции) Экспорт
	
	Если ТипЗнч(ДОкументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииРеализацияТоваровУслуг(ДокументОснование, ВидыМаркируемойПродукции).Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			Если НоменклатураПоДаннымЭДО.Найти(РезультатЗапроса.Номенклатура) = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПродукции.Добавить(), РезультатЗапроса);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗапросМаркируемойПродукцииВозвратТоваровОтПокупателя(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииАктОРасхождениях(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	АктОРасхожденияхТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	АктОРасхожденияхТовары.Количество КАК Количество
	|ИЗ
	|	Документ.АктОРасхождениях.Товары КАК АктОРасхожденияхТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО АктОРасхожденияхТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО АктОРасхожденияхТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	АктОРасхожденияхТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция 
	|	И НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииАктОРасхожденияхПолученный(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	АктОРасхожденияхТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	АктОРасхожденияхТовары.Количество КАК Количество
	|ИЗ
	|	Документ.АктОРасхожденияхПолученный.Товары КАК АктОРасхожденияхТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО АктОРасхожденияхТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО АктОРасхожденияхТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	АктОРасхожденияхТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииКорректировкаРеализации(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	КорректировкаРеализацииТовары.Количество КАК Количество
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО КорректировкаРеализацииТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КорректировкаРеализацииТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииВозвратТоваровПоставщику(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ВозвратТоваровПоставщику.Номенклатура      КАК Номенклатура,
	|	""""                                           КАК Характеристика,
	|	""""                                           КАК Серия,
	|	ВозвратТоваровПоставщику.Количество        КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВозвратТоваровПоставщику.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВозвратТоваровПоставщику.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииПередачаТоваров(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	               |	ПередачаТоваровТовары.Номенклатура КАК Номенклатура,
	               |	"""" КАК Характеристика,
	               |	"""" КАК Серия,
	               |	ПередачаТоваровТовары.Количество КАК Количество
	               |ИЗ
	               |	Документ.ПередачаТоваров.Товары КАК ПередачаТоваровТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ПередачаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |		ПО ПередачаТоваровТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	               |ГДЕ
	               |	ПередачаТоваровТовары.Ссылка = &ДокументСсылка
	               |	И &УсловиеМаркируемаяПродукция
	               |ИТОГИ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииПриемкаТоваровИСМП(Документ, ВидМаркируемойПродукции)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	Товары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|ИТОГИ
	|ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПодготовитьФормуПроверкаИПодбор(Форма) Экспорт
	Если НЕ Форма.Параметры.Свойство("КонтрагентПоДокументу") Тогда
		Возврат;
	КонецЕсли; 

	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КонтрагентНадпись", Новый ОписаниеТипов("ФорматированнаяСтрока"),,"Контрагент"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КонтрагентБП", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),,"Контрагент"));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элемент = Форма.Элементы.Добавить("Контрагент", Тип("ПолеФормы"),Форма);
	Элемент.ПутьКДанным = "КонтрагентНадпись";
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	
	Форма.Элементы.Переместить(Элемент, Форма, Форма.Элементы.СтраницыПродукция);
	
	Форма.КонтрагентБП = Форма.Параметры.КонтрагентПоДокументу;
	
	Форма.КонтрагентНадпись = ИнтеграцияИСМПБПВызовСервера.КонтрагентНадпись(Форма.КонтрагентБП, Форма.ВидМаркируемойПродукции);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполнения

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Или ТипДокумента = Тип("ДокументСсылка.АктОРасхождениях")
		Или ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "Продукция");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "Возвраты");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено'");
		
	КонецЕсли;
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу маркированный товаров по выбранным документам. Требуется обеспечить формирование временной таблицы
//   "МаркированныеТоварыОснований" с колонками по порядку:
//   ДокументОснование,Номенклатура,Характеристика,Шаблон,СпособВводаВОборот,Количество.
// Текст запроса уже содержит выбираемые данные во временную таблицу "ТоварыПредварительно",
// поэтому должен начинаться с конструкции: ОБЪЕДИНИТЬ ВСЕ и для присоединения к существующему тексту запроса.
// Параметры:
//  Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//  ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований) Экспорт
	
	ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
	|	ТоварыПредварительно.Организация        КАК Организация,
	|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
	|	ТоварыПредварительно.Характеристика     КАК Характеристика,
	|	ТоварыПредварительно.Шаблон             КАК Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	&ОпределениеВидаПродукции КАК ВидПродукции,
	|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ МаркированныеТоварыОснований
	|ИЗ
	|	ТоварыПредварительно КАК ТоварыПредварительно
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО ТоварыПредварительно.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция И НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПредварительно.Ссылка,
	|	ТоварыПредварительно.Организация,
	|	ТоварыПредварительно.Номенклатура,
	|	ТоварыПредварительно.Характеристика,
	|	ТоварыПредварительно.Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот,
	|	&ОпределениеВидаПродукции
	|"; 
	
	ФильтрВидПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ФильтрВидПродукции);
	УстановитьОпределениеВидаПродукции(ТекстЗапроса);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара) КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента
		|ИЗ
		|	Документ.СписаниеТоваров КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеТоваров", ,ФильтрВидПродукции);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента
		|ИЗ
		|	Документ.ТребованиеНакладная КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ТребованиеНакладная", ,ФильтрВидПродукции);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка КАК ДокументОснование,
		|	ДокументСсылка.Организация КАК Организация,
		|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
		|	ЕСТЬNULL(ФискальныеОперации.НомерЧекаККМ, ДокументСсылка.Номер) КАК НомерПервичногоДокумента,
		|	ЕСТЬNULL(ФискальныеОперации.Дата, ДокументСсылка.Дата) КАК ДатаПервичногоДокумента,
		|	ВЫБОР
		|		КОГДА НЕ ФискальныеОперации.НомерЧекаККМ ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа)
		|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия)
		|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС)
		|	КОНЕЦ КАК Операция,
		|	ВЫБОР
		|		КОГДА ФискальныеОперации.НомерЧекаККМ ЕСТЬ NULL
		|				И (ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
		|					ИЛИ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия))
		|			ТОГДА ДокументСсылка.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА НЕ ФискальныеОперации.НомерЧекаККМ ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек)
		|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД)
		|	КОНЕЦ КАК ВидПервичногоДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (ФискальныеОперации.ДокументОснование = &ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Ссылка = ДокументСсылка.Контрагент)
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ШтрихкодыУпаковок = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
		
		ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг", ШтрихкодыУпаковок ,ФильтрВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Продукция", ""));
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетПроизводстваЗаСмену", ТабличныеЧасти,
			, ФильтрВидПродукции);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ПоступлениеИзПереработки КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Продукция", ""));
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПоступлениеИзПереработки", ТабличныеЧасти,
			, ФильтрВидПродукции);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОприходованиеТоваров",
			,, ФильтрВидПродукции);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ИнвентаризацияТоваровНаСкладе", 
			,, ФильтрВидПродукции);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ОрганизацияИзСопоставления = Неопределено;
		ИнтеграцияИСПереопределяемый.ПриОпределенииОрганизацииИзПрикладногоОбъекта(ОрганизацияИзСопоставления, ДанныеЗаполнения);
		
		Если ТипЗнч(ОрганизацияИзСопоставления) = Тип("СправочникСсылка.Организации") Тогда
			ДокументОбъект.Организация = ОрганизацияИзСопоставления;
		КонецЕсли;
		
		ФильтрВидПродукции = ?(ЗначениеЗаполнено(ДокументОбъект.ВидПродукции), ДокументОбъект.ВидПродукции, Неопределено);
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПроизводственнаяОперацияВЕТИС", 
			,, ФильтрВидПродукции);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
		ОрганизацияИзСопоставления = Неопределено;
		ИнтеграцияИСПереопределяемый.ПриОпределенииОрганизацииИзПрикладногоОбъекта(ОрганизацияИзСопоставления, ДанныеЗаполнения);
		
		Если ТипЗнч(ОрганизацияИзСопоставления) = Тип("СправочникСсылка.Организации") Тогда
			ДокументОбъект.Организация = ОрганизацияИзСопоставления;
		КонецЕсли;
			
		ФильтрВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВходящаяТранспортнаяОперацияВЕТИС", 
			,, ФильтрВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидОперацииОтгрузкаТоваровИСМППоВидуПродукцииИКонтрагенту(ВидПродукции, Контрагент)
	ВидыПродукцииЭкспортЕАЭС = Новый Соответствие;
	
	ВидыПродукцииЭкспортЕАЭС.Вставить(Перечисления.ВидыПродукцииИС.Шины,                                 Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыПродукцииЭкспортЕАЭС.Вставить(Перечисления.ВидыПродукцииИС.Обувь,                                Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыПродукцииЭкспортЕАЭС.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность,                 Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыПродукцииЭкспортЕАЭС.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС,            Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	ВидыПродукцииЭкспортЕАЭС.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	
	ВидОперации = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя;
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ВидОперации = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа;
	ИначеЕсли (ВидыПродукцииЭкспортЕАЭС[ВидПродукции] <> Неопределено И Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент)) 
			ИЛИ ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
			
		ВидОперации = ВидыПродукцииЭкспортЕАЭС[ВидПродукции];
	КонецЕсли;
	
	Возврат ВидОперации;
КонецФункции

Процедура ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка КАК ДокументОснование,
		|	ДокументСсылка.Организация КАК Организация,
		|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
		|	ДокументСсылка.Контрагент КАК Контрагент,
		|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента,
		|	ДокументСсылка.Дата КАК ДатаОтгрузки,
		|	ДокументСсылка.Номер КАК НомерПервичногоДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ДокументОбъект.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерПервичногоДокумента, Истина, Ложь);
		ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг", , Истина, Ложь);
		ДокументОбъект.Операция = ВидОперацииОтгрузкаТоваровИСМППоВидуПродукцииИКонтрагенту(ДокументОбъект.ВидПродукции, ДокументОбъект.Контрагент);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка           КАК ДокументОснование,
		|	ДокументСсылка.Организация      КАК Организация,
		|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
		|	ДокументСсылка.Контрагент КАК Контрагент,
		|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента,
		|	ДокументСсылка.Дата КАК ДатаОтгрузки,
		|	ДокументСсылка.Номер КАК НомерПервичногоДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ДокументОбъект.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерПервичногоДокумента, Истина, Ложь);
		ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику");
		ДокументОбъект.Операция = ВидОперацииОтгрузкаТоваровИСМППоВидуПродукцииИКонтрагенту(ДокументОбъект.ВидПродукции, ДокументОбъект.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//
// Возвращаемое значение:
//   Соответствие - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары) Экспорт
	Результат = Новый Соответствие;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|ГДЕ
	|	НЕ Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Товары);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод);
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Результат.Вставить(GTIN, 
				Новый Структура("Номенклатура,Характеристика,Упаковка, Коэффициент", Выборка.Номенклатура, Неопределено, Неопределено, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаУсловияМаркируемойПродукции(ВидМаркируемойПродукции)

	УсловиеМаркируемаяПродукция = "";
	
	ИмяРеквизита = ИнтеграцияИСМПБПВызовСервера.ИмяРеквизитаНоменклатурыПоВидуПродукцииИС(ВидМаркируемойПродукции);
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		УсловиеМаркируемаяПродукция = "СправочникНоменклатура."+ИмяРеквизита;
	КонецЕсли;
	
	Возврат УсловиеМаркируемаяПродукция;
	
КонецФункции 

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
Процедура УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, Знач ВидМаркируемойПродукции, ИмяПараметра =  "&УсловиеМаркируемаяПродукция") Экспорт
	Если ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив") 
		ИЛИ ТипЗнч(ВидМаркируемойПродукции) = Тип("ФиксированныйМассив") Тогда
		
		МассивУсловийМаркируемойПродукции = Новый Массив;
		Для каждого ЭлементМаркируемойПродукции Из ВидМаркируемойПродукции Цикл
			СтрокаУсловияМаркируемойПродукции = СтрокаУсловияМаркируемойПродукции(ЭлементМаркируемойПродукции);
			Если НЕ ПустаяСтрока(СтрокаУсловияМаркируемойПродукции) Тогда
				МассивУсловийМаркируемойПродукции.Добавить(СтрокаУсловияМаркируемойПродукции);
			КонецЕсли; 
		КонецЦикла; 
		
		УсловиеМаркируемаяПродукция = СтрСоединить(МассивУсловийМаркируемойПродукции, " ИЛИ ");
	Иначе
		УсловиеМаркируемаяПродукция = СтрокаУсловияМаркируемойПродукции(ВидМаркируемойПродукции);
	КонецЕсли; 
	
	Если Не ПустаяСтрока(УсловиеМаркируемаяПродукция) Тогда
		УсловиеМаркируемаяПродукция = СтрШаблон("(%1)", УсловиеМаркируемаяПродукция);
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, УсловиеМаркируемаяПродукция);
КонецПроцедуры

Процедура УстановитьОпределениеВидаПродукции(ТекстЗапроса) Экспорт
	
	ЗначенияПеречисления = Метаданные.Перечисления.ВидыПродукцииИС.ЗначенияПеречисления;
	
	УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если УчитываемыеВидыМаркируемойПродукции.Количество() = 0 Тогда
		ТекстУсловия = "ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)";
	Иначе
		ТекстУсловия = "ВЫБОР";
		Для каждого ВидПродукции Из УчитываемыеВидыМаркируемойПродукции Цикл
			
			Индекс = Перечисления.ВидыПродукцииИС.Индекс(ВидПродукции);
		
			Шаблон = "
			|	КОГДА %1 Тогда ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.%2)";
			
			ТекстУсловия = ТекстУсловия + СтрШаблон(Шаблон, СтрокаУсловияМаркируемойПродукции(ВидПродукции), ЗначенияПеречисления[Индекс].Имя);
		
		КонецЦикла;
		ТекстУсловия = ТекстУсловия + "
		|ИНАЧЕ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеВидаПродукции", ТекстУсловия);

КонецПроцедуры

Функция УсловиеПоВидуПродукции(ВидПродукции = Неопределено) Экспорт
	Условие = СтрокаУсловияМаркируемойПродукции(ВидПродукции);
	
	Если ПустаяСтрока(Условие) Тогда
	
		Условие = "(СправочникНоменклатура.ТабачнаяПродукция 
			|ИЛИ СправочникНоменклатура.ОбувнаяПродукция
			|ИЛИ СправочникНоменклатура.Велосипеды
			|ИЛИ СправочникНоменклатура.Антисептики
			|ИЛИ СправочникНоменклатура.БАДы
			|ИЛИ СправочникНоменклатура.НикотиносодержащаяПродукция
			|ИЛИ СправочникНоменклатура.Пиво
			|ИЛИ СправочникНоменклатура.Духи
			|ИЛИ СправочникНоменклатура.КреслаКоляски
			|ИЛИ СправочникНоменклатура.ЛегкаяПромышленность
			|ИЛИ СправочникНоменклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
			|ИЛИ СправочникНоменклатура.МолочнаяПродукцияБезВЕТИС
			|ИЛИ СправочникНоменклатура.Фотоаппараты
			|ИЛИ СправочникНоменклатура.Шины
			|ИЛИ СправочникНоменклатура.АльтернативныйТабак
			|ИЛИ СправочникНоменклатура.УпакованнаяВода
			|ИЛИ СправочникНоменклатура.ПродукцияМаркируемаяДляГИСМ
			|ИЛИ СправочникНоменклатура.БезалкогольноеПиво
			|ИЛИ СправочникНоменклатура.СоковаяПродукция
			|ИЛИ СправочникНоменклатура.Зерно
			|ИЛИ СправочникНоменклатура.ПродуктыПереработкиЗерна 
			|ИЛИ СправочникНоменклатура.ЗерноВЕТИС
			|ИЛИ СправочникНоменклатура.ПродуктыПереработкиЗернаВЕТИС 
			|ИЛИ СправочникНоменклатура.МорепродуктыПодконтрольныеВЕТИС
			|ИЛИ СправочникНоменклатура.ПодконтрольнаяПродукцияСАТУРН)";
	
	КонецЕсли; 

	Возврат Условие;
КонецФункции

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапросаШаблон = "ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И &УсловиеМаркируемаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствует продукция для заполнения.'"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента, ЕстьЗначениеШтрихкода = Истина)
	
	Если ЕстьЗначениеШтрихкода Тогда
		Возврат СтрШаблон(
		"ВЫБРАТЬ
		|	Таблица.ШтрихкодУпаковки,
		|	Таблица.ЗначениеШтрихкода
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка",
		ИмяДокумента);
	Иначе
		Возврат СтрШаблон(
		"ВЫБРАТЬ
		|	Таблица.ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка",
		ИмяДокумента);
	КонецЕсли;
	
КонецФункции

//Вывод из оборота

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено, ФильтрВидПродукции = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ШтрихкодыУпаковок.Очистить();
	
	ТаблицыТоваров = Новый Массив;
	Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
	
		ТаблицыТоваров.Добавить(Новый Структура("Товары, ПолеСумма, ПолеСуммаНДС, ПолеСтавкаНДС, ПолеСуммаВключаетНДС", 
			"Товары", "Сумма", "СуммаНДС", "СтавкаНДС", "СуммаВключаетНДС"));
	ИначеЕсли ИмяДокумента = "ТребованиеНакладная" Тогда
	
		ТаблицыТоваров.Добавить(Новый Структура("Товары, ПолеСумма, ПолеСуммаНДС, ПолеСтавкаНДС, ПолеСуммаВключаетНДС", 
			"Материалы", "0", "0", "0", "0"));
	Иначе
		ТаблицыТоваров.Добавить(Новый Структура("Товары, ПолеСумма, ПолеСуммаНДС, ПолеСтавкаНДС, ПолеСуммаВключаетНДС", 
			"Товары", "0", "0", "0", "0"));
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Основание = ДанныеЗаполнения.Основание;
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции =  ДанныеЗаполнения.ЗначениеФильтра;
		КонецЕсли; 
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ТаблицыТоваров, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], Основание, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТаблицыТоваров, ТабличнаяЧастьШтрихкоды)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ЧастиЗапроса = Новый Массив;
	
	ТоварыПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТабличнаяЧастьТовары Из ТаблицыТоваров Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	""""                            КАК Характеристика,
		|	""""                            КАК Серия,
		|	&ПолеСтавкаНДС                  КАК СтавкаНДС,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(&ПолеСуммаНДС)            КАК СуммаНДС,
		|	СУММА(ВЫБОР 
		|		КОГДА &ПолеСуммаВключаетНДС Тогда  &ПолеСумма - &ПолеСуммаНДС 
		|		ИНАЧЕ &ПолеСумма КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР 
		|		КОГДА &ПолеСуммаВключаетНДС Тогда  &ПолеСумма
		|	ИНАЧЕ &ПолеСумма + &ПолеСуммаНДС  КОНЕЦ) КАК СуммаСНДС
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаШапка КАК ТаблицаРеквизиты
		|		ПО ТаблицаТовары.Ссылка = ТаблицаРеквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
		|	И %1
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура, &ПолеСтавкаНДС";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТТовары", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаШапка", ОписаниеДокумента);
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТабличнаяЧастьТовары.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.ПолеСуммаВключаетНДС)
			И ТабличнаяЧастьТовары.ПолеСуммаВключаетНДС <> "0" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаВключаетНДС", СтрШаблон("ТаблицаРеквизиты.%1",ТабличнаяЧастьТовары.ПолеСуммаВключаетНДС));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаВключаетНДС", "ИСТИНА");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.ПолеСуммаНДС)
			И ТабличнаяЧастьТовары.ПолеСуммаНДС <> "0" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС", СтрШаблон("ТаблицаТовары.%1",ТабличнаяЧастьТовары.ПолеСуммаНДС));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС", "0");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.ПолеСтавкаНДС)
			И ТабличнаяЧастьТовары.ПолеСтавкаНДС <> "0" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСтавкаНДС", СтрШаблон("ТаблицаТовары.%1",ТабличнаяЧастьТовары.ПолеСтавкаНДС));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСтавкаНДС", "ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТабличнаяЧастьТовары.ПолеСумма)
			И ТабличнаяЧастьТовары.ПолеСумма <> "0" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", СтрШаблон("ТаблицаТовары.%1",ТабличнаяЧастьТовары.ПолеСумма));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "0");
		КонецЕсли;
		
		ТоварыПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ЧастиЗапроса.Добавить(СтрСоединить(ТоварыПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|"));
	
	ЧастиЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ВТТовары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.СуммаСНДС
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	ТоварыКОформлению.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма) КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС) КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА СУММА(ТоварыКОформлению.Количество) > 0
	|				И СУММА(ТоварыКОформлению.Сумма) > 0
	|			ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 0) = 0
	|				ТОГДА 0
	|			КОГДА ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке = 1
	|				ТОГДА 0
	|			ИНАЧЕ ТоварыКОформлению.Количество / ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке
	|		КОНЕЦ) КАК КоличествоПотребительскихУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТоварыКОформлению.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0");
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапросаШтрихкоды = СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И %4
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		УсловиеВидПродукции);
		
		ЧастиЗапроса.Добавить(ТекстЗапросаШтрихкоды);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
		СтрСоединить(ЧастиЗапроса, ИнтеграцияИС.РазделительЗапросовВПакете()), 
		УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Маркировка товаров

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь, ФильтрВидПродукции = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Основание = ДанныеЗаполнения.Основание;
		Если ФильтрВидПродукции = Неопределено 
			И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			
			ФильтрВидПродукции =  ДанныеЗаполнения.ЗначениеФильтра;
		КонецЕсли; 
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ТоварыСерии);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОтчетПроизводственнойЛинии") Тогда
		ВыборкаШапка = Запрос.Выполнить().Выбрать();
		Если ВыборкаШапка.Следующий() Тогда
			ДокументОбъект.Номенклатура   = ВыборкаШапка.Номенклатура;
			ДокументОбъект.Характеристика = ВыборкаШапка.Характеристика;
			ДокументОбъект.Серия          = ВыборкаШапка.Серия;
		КонецЕсли;
	Иначе
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
		Если ЕстьШтрихкодыУпаковок Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
			Запрос.УстановитьПараметр("Ссылка", Основание);
			ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
	КонецЕсли; 
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТабличныеЧастиТоварыСерии)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	""""    КАК Характеристика,
		|	""""             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И %1
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура
		|";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СпрНоменклатура.КодТНВЭД КАК КодТНВЭД
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СпрНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СпрНоменклатура.КодТНВЭД
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Отгрузка товаров

Процедура ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь, ЕстьЗначениеШтрихкода = Ложь, ФильтрВидПродукции = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Основание = ДанныеЗаполнения.Основание;
		Если ФильтрВидПродукции = Неопределено 
			И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			
			ФильтрВидПродукции =  ДанныеЗаполнения.ЗначениеФильтра;
		КонецЕсли; 
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ТоварыСерии);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
	
	Если ЕстьШтрихкодыУпаковок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента, ЕстьЗначениеШтрихкода);
		Запрос.УстановитьПараметр("Ссылка", Основание);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТабличныеЧастиТоварыСерии)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	""""    КАК Характеристика,
		|	""""             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ) КАК СуммаСНДС,
		|	СУММА(ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ ТаблицаТовары.Сумма
		|	КОНЕЦ) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР 
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Цена 
		|		КОГДА ТаблицаТовары.Количество = 0
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС) / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И %1
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ВЫБОР 
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Цена 
		|		КОГДА ТаблицаТовары.Количество = 0
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС) / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ
		|";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Цена           КАК Цена,
	|	Товары.СтавкаНДС      КАК СтавкаНДС,
	|	Товары.Количество     КАК Количество,
	|	Товары.СуммаСНДС      КАК Сумма,
	|	Товары.СуммаСНДС      КАК СуммаСНДС,
	|	Товары.СуммаНДС       КАК СуммаНДС
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.Цена,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаСНДС,
	|	-ОформленныеТовары.СуммаНДС
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.Цена              КАК Цена,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена,
	|	ТоварыКОформлению.СтавкаНДС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Виды маркируемых товаров

Функция СписокПараметровНоменклатурыИС() Экспорт
	
	Возврат "ТабачнаяПродукция, ОбувнаяПродукция, Велосипеды, Пиво, Антисептики, БАДы," + 
	"НикотиносодержащаяПродукция, Духи, КреслаКоляски, ЛегкаяПромышленность, МолочнаяПродукцияПодконтрольнаяВЕТИС," + 
	"МолочнаяПродукцияБезВЕТИС, Фотоаппараты, Шины, АльтернативныйТабак, УпакованнаяВода, ПродукцияМаркируемаяДляГИСМ," + 
	"БезалкогольноеПиво, СоковаяПродукция, Зерно, ПродуктыПереработкиЗерна, МорепродуктыПодконтрольныеВЕТИС, ЗерноВЕТИС," +
	"ПродуктыПереработкиЗернаВЕТИС, ПодконтрольнаяПродукцияСатурн";
	
КонецФункции

Функция ВидПродукцииИС(ПараметрыНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыНоменклатуры.ТабачнаяПродукция) Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыНоменклатуры.ТабачнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИС.Табак;
	ИначеЕсли ПараметрыНоменклатуры.ОбувнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИС.Обувь;
	ИначеЕсли ПараметрыНоменклатуры.Велосипеды Тогда
		Возврат Перечисления.ВидыПродукцииИС.Велосипеды;
	ИначеЕсли ПараметрыНоменклатуры.Антисептики Тогда
		Возврат Перечисления.ВидыПродукцииИС.Антисептики;
	ИначеЕсли ПараметрыНоменклатуры.БАДы Тогда
		Возврат Перечисления.ВидыПродукцииИС.БАДы;
	ИначеЕсли ПараметрыНоменклатуры.НикотиносодержащаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
	ИначеЕсли ПараметрыНоменклатуры.Пиво Тогда
		Возврат Перечисления.ВидыПродукцииИС.Пиво;
	ИначеЕсли ПараметрыНоменклатуры.Духи Тогда
		Возврат Перечисления.ВидыПродукцииИС.Духи;
	ИначеЕсли ПараметрыНоменклатуры.КреслаКоляски Тогда
		Возврат Перечисления.ВидыПродукцииИС.КреслаКоляски;
	ИначеЕсли ПараметрыНоменклатуры.ЛегкаяПромышленность Тогда
		Возврат Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность;
	ИначеЕсли ПараметрыНоменклатуры.МолочнаяПродукцияБезВЕТИС Тогда
		Возврат Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
	ИначеЕсли ПараметрыНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	ИначеЕсли ПараметрыНоменклатуры.Фотоаппараты Тогда
		Возврат Перечисления.ВидыПродукцииИС.Фотоаппараты;
	ИначеЕсли ПараметрыНоменклатуры.Шины Тогда
		Возврат Перечисления.ВидыПродукцииИС.Шины;
	ИначеЕсли ПараметрыНоменклатуры.АльтернативныйТабак Тогда
		Возврат Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
	ИначеЕсли ПараметрыНоменклатуры.УпакованнаяВода Тогда
		Возврат Перечисления.ВидыПродукцииИС.УпакованнаяВода;
	ИначеЕсли ПараметрыНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	ИначеЕсли ПараметрыНоменклатуры.БезалкогольноеПиво Тогда
		Возврат Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ИначеЕсли ПараметрыНоменклатуры.СоковаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИС.СоковаяПродукция; 
	ИначеЕсли ПараметрыНоменклатуры.Зерно Тогда
		Возврат Перечисления.ВидыПродукцииИС.Зерно;
	ИначеЕсли ПараметрыНоменклатуры.ПродуктыПереработкиЗерна Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	ИначеЕсли ПараметрыНоменклатуры.ЗерноВЕТИС Тогда
		Возврат Перечисления.ВидыПродукцииИС.ЗерноВЕТИС;
	ИначеЕсли ПараметрыНоменклатуры.ПродуктыПереработкиЗернаВЕТИС Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС;
	ИначеЕсли ПараметрыНоменклатуры.МорепродуктыПодконтрольныеВЕТИС Тогда
		Возврат Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС;
	ИначеЕсли ПараметрыНоменклатуры.ПодконтрольнаяПродукцияСАТУРН Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН;
	Иначе
		Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция МаркируемаяПродукция(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СписокПараметровНоменклатурыИС());
	ВидыПродукцииИС = ВидПродукцииИС(СвойстваПродукции);
	Возврат НЕ (ВидыПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	
КонецФункции

//Приемка товаров

Процедура ЗаполнитьПоступлениеПоПриемкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Выборка.Номенклатура, ДанныеОбъекта, Ложь, Ложь);
			НоваяСтрока.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаТоваровИСМП.Организация КАК Организация,
	|	ПриемкаТоваровИСМП.Контрагент  КАК Контрагент,
	|	ПриемкаТоваровИСМП.Комментарий КАК Комментарий,
	|	ПриемкаТоваровИСМП.Дата        КАК Дата,
	|	Не ПриемкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ПриемкаТоваровИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Упаковка               КАК Упаковка,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВидМаркированнойПродукцииБПО(ВидПродукцииИС) Экспорт
	
	ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.ПустаяСсылка();
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС 
		ИЛИ ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Обувь;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Шины;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Фотоаппараты;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Духи Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Духи;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Велосипеды;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.КреслаКоляски;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.УпакованнаяВода;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Антисептики Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Антисептики;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.БАДы Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.БАДы;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Пиво;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.СоковаяПродукция Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.СоковаяПродукция;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.БезалкогольноеПиво;
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
		ВидМаркированнойПродукцииБПО = Перечисления.ВидыМаркированнойПродукцииБПО.Морепродукты;
	КонецЕсли;
	
	Возврат ВидМаркированнойПродукцииБПО;
КонецФункции

#КонецОбласти

#Область ПечатьЭтикетокИСМП
// В данной процедуре определяется метод печати этикеток ИС МП
// 
// Параметры:
// 	ТаблицаДляПечати - Массив - Массив строк таблицы (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Дополнительне параметры для печати
// 	СтандартнаяОбработка - Булево - Признак использования бублиотечной печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка) Экспорт
	Если СтруктураНастроек.ПечатьЭтикетокВТаблицу Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	ТабличныйДокумент.Очистить();
	
	СписокНоменклатурыПоШаблонамИУпаковкам = РазобратьНоменклатуруПоШаблонам(ТаблицаДляПечати);
	Для каждого СписокНоменклатурыПоШаблонам Из СписокНоменклатурыПоШаблонамИУпаковкам Цикл
		Для каждого ЭлементСписка Из СписокНоменклатурыПоШаблонам.Значение Цикл
		
			МассивНоменклатуры = ЭлементСписка.Значение.ВыгрузитьКолонку("Номенклатура");
		
			ТабличныйДокументЭтикетка = Обработки.ПечатьЭтикеток.ТабличныйДокументЭтикетка(
				МассивНоменклатуры, 
				ЭлементСписка.Ключ, 
				ЭлементСписка.Значение, 
				СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте);
				
			Если ТабличныйДокумент.ВысотаТаблицы <> 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли; 
				
			ТабличныйДокумент.Вывести(ТабличныйДокументЭтикетка);
		
		КонецЦикла; 
		
	КонецЦикла;
КонецПроцедуры

Функция ДанныеВСтрокуJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции


Функция РазобратьНоменклатуруПоШаблонам(ТаблицаДляПечати)
	// В соотвествии ключом будет код упаковки (для агрегации)
	// А в значениях будут коды которые к этой упаковке привязаны
	Результат = Новый Соответствие;
	
	Для каждого ОписаниеЭтикетки Из ТаблицаДляПечати Цикл
		
		// Первый уровень - упаковки. Для содержимого упаковки код хранится в "КодУпаковки", а для самой упаковки в "КодМаркировки"
		ШтрихкодУпаковки = ?(ОписаниеЭтикетки.ЭтоКодМаркировки, ОписаниеЭтикетки.КодУпаковки, ОписаниеЭтикетки.КодМаркировки);
		Если Результат.Получить(ШтрихкодУпаковки) = Неопределено Тогда
			Результат.Вставить(ШтрихкодУпаковки, Новый Соответствие);
		КонецЕсли; 
		
		СтрокаШтрихкодУпаковки = Результат[ШтрихкодУпаковки];
		
		// Второй уровень - шаблоны этикеток
		Если СтрокаШтрихкодУпаковки.Получить(ОписаниеЭтикетки.ШаблонЭтикетки) = Неопределено Тогда
			СтрокаШтрихкодУпаковки.Вставить(ОписаниеЭтикетки.ШаблонЭтикетки, Обработки.ПечатьЭтикеток.НовыйШтрихкодыМаркируемойПродукции());
		КонецЕсли; 
		
		НоваяСтрока = СтрокаШтрихкодУпаковки[ОписаниеЭтикетки.ШаблонЭтикетки].Добавить();
		
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		НоваяСтрока.Организация      = ОписаниеЭтикетки.Организация;
		НоваяСтрока.Номенклатура     = ОписаниеЭтикетки.Номенклатура;
		НоваяСтрока.Количество       = ОписаниеЭтикетки.Количество;
		НоваяСтрока.ТипШтрихкода     = ОписаниеЭтикетки.ТипШтрихкода;
		НоваяСтрока.ШтрихкодУпаковки = ОписаниеЭтикетки.ШтрихкодУпаковки;
		
		
		СтруктураШтрихкода  = Новый Структура;
		СтруктураШтрихкода.Вставить("Штрихкод",        ОписаниеЭтикетки.Штрихкод);
		СтруктураШтрихкода.Вставить("ШтрихкодВBase64", ОписаниеЭтикетки.ШтрихкодВBase64);
		
		НоваяСтрока.Штрихкод        = ДанныеВСтрокуJSON(СтруктураШтрихкода);
		
		СоставКодаМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ОписаниеЭтикетки.КодМаркировки);
		
		Если СоставКодаМаркировки <> Неопределено Тогда
			НоваяСтрока.СерийныйНомер = СоставКодаМаркировки.СерийныйНомер;
			НоваяСтрока.GTIN          = СоставКодаМаркировки.GTIN;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции 

Процедура ПодготовитьФормуПечатьЭтикетокИСМП(Форма) Экспорт
	ДанныеЗаполнения = Новый Структура("ШаблонПотребительскойЭтикетки", Справочники.ХранилищеШаблонов.ШаблонЭтикеткаОбувь);
	ТабличныеЧасти = Новый Структура("ДеревоАгрегированныхКодов,СписокКодовМаркировки");
	
	ЗаполнитьЗначенияСвойств(ТабличныеЧасти, Форма);
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Значение <> Неопределено Тогда
			Если ТипЗнч(ТабличнаяЧасть.Значение) = Тип("ДанныеФормыДерево") Тогда
				ОбойтиДеревоРекурсивно(ТабличнаяЧасть.Значение, ДанныеЗаполнения);
			Иначе
				Для каждого СтрокаТаблицы Из ТабличнаяЧасть.Значение Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеЗаполнения);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
Процедура ОбойтиДеревоРекурсивно(ДеревоЗначений, ДанныеЗаполнения)
	ЭлементыДерева = ДеревоЗначений.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЗаполнитьЗначенияСвойств(ЭлементДерева, ДанныеЗаполнения);
		ОбойтиДеревоРекурсивно(ЭлементДерева, ДанныеЗаполнения);
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область ОтчетыОРасхождениях

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииТекстаЗапросаОформленныхДокументов(ТекстЗапроса, ОтчетОбъект) Экспорт
	
	Текст = Неопределено;
	Отчет = ОтчетОбъект.Метаданные();
	
	Если Отчет = Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции Тогда
		Текст = ОформленныеДокументыПоПоступлениюАлкогольнойПродукции();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриОтгрузкеАлкогольнойПродукции Тогда
		Текст = ОформленныеДокументыПоОтгрузкеАлкогольнойПродукции();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС Тогда
		Текст = ОформленныеДокументыПоПоступлениюПродукцииВЕТИС();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриОтгрузкеПродукцииВЕТИС Тогда
		Текст = ОформленныеДокументыПоОтгрузкеПродукцииВЕТИС();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриИнвентаризацииПродукцииВЕТИС Тогда
		Текст = ОформленныеДокументыПоИнвентаризацииПродукцииВЕТИС();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриПроизводствеПродукцииВЕТИС Тогда
		Текст = ОформленныеДокументыПоПроизводственнойОперацииВЕТИС();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриМаркировкеТоваровИСМП Тогда
		Текст = ОформленныеДокументыПоМаркировкеТоваровИСМП();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриВыводеИзОборотаИСМП Тогда
		Текст = ОформленныеДокументыВыводуИзОборотаИСМП();
	ИначеЕсли Отчет = Метаданные.Отчеты.АнализРасхожденийПриДвиженииСАТУРН Тогда
		Текст = ОформленныеДокументыСАТУРН(); 
	КонецЕсли;
	
	Если Не(Текст = Неопределено) Тогда
		ТекстЗапроса = Текст;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ОформленныеДокументыВыводуИзОборотаИСМП()
	
	МассивТекстовЗапросов = Новый Массив;
	
	Реализации = "";
	ДобавитьОснование(МассивТекстовЗапросов, "РеализацияТоваровУслуг", "Товары");
	Если МассивТекстовЗапросов.Количество() Тогда
		Реализации = СтрСоединить(МассивТекстовЗапросов, " ОБЪЕДИНИТЬ ВСЕ ");
		Реализации = СтрЗаменить(Реализации, ".Проведен", ".Проведен И ТаблицаТовары.Ссылка.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)");
	КонецЕсли;
	МассивТекстовЗапросов.Очистить();
	
	ДобавитьОснование(МассивТекстовЗапросов, "СписаниеТоваров", "Товары");
	
	Если ЗначениеЗаполнено(Реализации) Тогда
		МассивТекстовЗапросов.Добавить(Реализации);
	КонецЕсли;
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииИСМП(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоМаркировкеТоваровИСМП()
	
	МассивТекстовЗапросов = Новый Массив;
	
	Знак = "ТаблицаТовары.Ссылка.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	ЗнакПоступление = СтрШаблон("ВЫБОР КОГДА %1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ", Знак);
	ДобавитьОснование(МассивТекстовЗапросов,"ПоступлениеТоваровУслуг", "Товары", , ЗнакПоступление);
	ДобавитьОснование(МассивТекстовЗапросов, "ОприходованиеТоваров", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов, "ОтчетПроизводстваЗаСмену", "Продукция");
	ДобавитьОснование(МассивТекстовЗапросов, "ОтчетПроизводстваЗаСмену", "Материалы", ,"-");
	ДобавитьОснование(МассивТекстовЗапросов, "ПоступлениеИзПереработки", "Продукция");
	ДобавитьОснование(МассивТекстовЗапросов, "ПоступлениеИзПереработки", "ИспользованныеМатериалы", ,"-");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииИСМП(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоПроизводственнойОперацииВЕТИС()
	
	МассивТекстовЗапросов = Новый Массив;
	
	ДобавитьОснование(МассивТекстовЗапросов, "ОтчетПроизводстваЗаСмену", "Продукция");
	ДобавитьОснование(МассивТекстовЗапросов, "ОтчетПроизводстваЗаСмену", "Материалы", ,"-");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииВЕТИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоИнвентаризацииПродукцииВЕТИС()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснование(МассивТекстовЗапросов, "СписаниеТоваров", "Товары", , "-");
	ДобавитьОснование(МассивТекстовЗапросов, "ОприходованиеТоваров", "Товары");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииВЕТИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоОтгрузкеПродукцииВЕТИС()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснование(МассивТекстовЗапросов, "РеализацияТоваровУслуг", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов, "ВозвратТоваровПоставщику", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов, "ПеремещениеТоваров", "Товары");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииВЕТИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоПоступлениюПродукцииВЕТИС()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснование(МассивТекстовЗапросов,"ПоступлениеТоваровУслуг", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов,"ВозвратТоваровОтПокупателя", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов,"ПеремещениеТоваров", "Товары");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииВЕТИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоОтгрузкеАлкогольнойПродукции()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснование(МассивТекстовЗапросов,"ВозвратТоваровПоставщику", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов,"ПеремещениеТоваров", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов,"РеализацияТоваровУслуг", "Товары");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииЕГАИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыПоПоступлениюАлкогольнойПродукции()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснование(МассивТекстовЗапросов,"ПоступлениеТоваровУслуг", "Товары");
	ДобавитьОснование(МассивТекстовЗапросов,"ПеремещениеТоваров", "Товары");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ДоработатьЗапросПродукцииЕГАИС(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ОформленныеДокументыСАТУРН()
	
	МассивТекстовЗапросов = Новый Массив;
	ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов,"РеализацияТоваровУслуг", "Товары",, "-");
	ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов,"ОприходованиеТоваров", "Товары");
	ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов,"СписаниеТоваров", "Товары",, "-");
	ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов,"ОтчетПроизводстваЗаСмену", "Материалы",, "-");
    ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов,"ОтчетПроизводстваЗаСмену", "Продукция",, "+");
	
	Текст = СтрСоединить(МассивТекстовЗапросов, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ДоработатьЗапросПродукцииСАТУРН(Текст);
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область Шаблоны

Функция ДобавитьОснование(МассивТекстовЗапросов, ИмяДокумента, ИмяТабличнойЧасти, СерииОтдельно = Ложь, Знак = "", Постфикс = "")
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы[ИмяДокумента]) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка              КАК Ссылка,
	|	ТаблицаТовары.Номенклатура%5      КАК Номенклатура,
	|	""""                              КАК Характеристика,
	|	""""                              КАК Серия,
	|	%4СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.%1.%2 КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Ссылка В
	|		(ВЫБРАТЬ
	|			ПрикладныеДокументы.Ссылка
	|		ИЗ
	|			ПрикладныеДокументы КАК ПрикладныеДокументы)
	|	%3
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура%5,
	|	"""",
	|	""""";
	
	Шаблон = СтрШаблон(Шаблон,
		ИмяДокумента,
		ИмяТабличнойЧасти,
		"",
		Знак,
		Постфикс);
	
	МассивТекстовЗапросов.Добавить(Шаблон);
	Возврат Истина;
	
КонецФункции

Функция ДобавитьОснованиеСВидомДвижения(МассивТекстовЗапросов, ИмяДокумента, ИмяТабличнойЧасти, СерииОтдельно = Ложь, Знак = "", Постфикс = "", УсловиеОтбора = "ИСТИНА")
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы[ИмяДокумента]) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка              КАК Ссылка,
	|	ТаблицаТовары.Номенклатура%4      КАК Номенклатура,
	|	""""    						  КАК Характеристика,
	|	""""             				  КАК Серия,
	|	ВЫБОР 
	|		КОГДА %5 = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			СУММА(ТаблицаТовары.Количество)
	|		ИНАЧЕ
	|			0 
	|	КОНЕЦ КАК КоличествоПриход,
	|	ВЫБОР 
	|		КОГДА %5 = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			СУММА(ТаблицаТовары.Количество)
	|		ИНАЧЕ
	|			0 
	|	КОНЕЦ КАК КоличествоРасход
	|ИЗ
	|	Документ.%1.%2 КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Ссылка В
	|		(ВЫБРАТЬ
	|			ПрикладныеДокументы.Ссылка
	|		ИЗ
	|			ПрикладныеДокументы КАК ПрикладныеДокументы)
	|	%3 И %6
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура%4,
	|	"""",
	|	""""";
	
	ШаблонСерииОтдельно = СтрШаблон(
	"И (ТаблицаТовары.Серия%1 <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ТаблицаТовары.СтатусУказанияСерий = 0)", Постфикс);
	
	Шаблон = СтрШаблон(Шаблон,
		ИмяДокумента,
		ИмяТабличнойЧасти,
		?(СерииОтдельно, ШаблонСерииОтдельно, ""),
		Постфикс,
		?(Знак = "-", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)"),
		УсловиеОтбора);
	
	МассивТекстовЗапросов.Добавить(Шаблон);
	
	Возврат Истина;
	
КонецФункции

Процедура ДоработатьЗапросПродукцииВЕТИС(Текст)
	
	Позиция = СтрНайти(Текст, "ВЫБРАТЬ");
	Текст = Лев(Текст, Позиция-1) + "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(Текст, Позиция + СтрДлина("ВЫБРАТЬ"));
	Позиция = СтрНайти(Текст, "
	|ИЗ");
	Текст = Лев(Текст, Позиция -1)+ "
	|ПОМЕСТИТЬ ТоварыНакладнойПредварительно
	|"+ Сред(Текст, Позиция);
	
	Текст = Текст + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыНакладной
	|ИЗ
	|	ТоварыНакладнойПредварительно КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС 
	|;
	|
	|";
КонецПроцедуры

Процедура ДоработатьЗапросПродукцииЕГАИС(Текст)
	
	Позиция = СтрНайти(Текст, "ВЫБРАТЬ");
	Текст = Лев(Текст, Позиция-1) + "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(Текст, Позиция + СтрДлина("ВЫБРАТЬ"));
	Позиция = СтрНайти(Текст, "
	|ИЗ");
	Текст = Лев(Текст, Позиция -1)+ "
	|ПОМЕСТИТЬ ТоварыНакладнойПредварительно
	|"+ Сред(Текст, Позиция);
	
	Текст = Текст + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	Товары.Количество КАК Количество,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК ОбъемДАЛ
	|ПОМЕСТИТЬ ТоварыНакладной
	|ИЗ
	|	ТоварыНакладнойПредварительно КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО Товары.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код
	|ГДЕ
	|	(НЕ СведенияОбАлкогольнойПродукции.Номенклатура ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТоварыНакладной.Номенклатура КАК Номенклатура,
	|	ТоварыНакладной.Характеристика КАК Характеристика,
	|	ТоварыНакладной.ОбъемДАЛ КАК ОбъемДАЛ
	|ПОМЕСТИТЬ НоменклатураПереопределяемый
	|ИЗ
	|	ТоварыНакладной КАК ТоварыНакладной
	|;
	|
	|";
	
КонецПроцедуры

Процедура ДоработатьЗапросПродукцииИСМП(Текст)
	
	Позиция = СтрНайти(Текст, "ВЫБРАТЬ");
	Текст = Лев(Текст, Позиция-1) + "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(Текст, Позиция + СтрДлина("ВЫБРАТЬ"));
	
	Позиция = СтрНайти(Текст, "
	|ИЗ");
	Текст = Лев(Текст, Позиция -1)+ "
	|ПОМЕСТИТЬ ТоварыНакладнойПредварительно
	|"+ Сред(Текст, Позиция)+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Текст = Текст + 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыНакладной
	|ИЗ
	|	ТоварыНакладнойПредварительно КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И (СправочникНоменклатура.ОбувнаяПродукция 
	|			ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|			)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТоварыНакладной.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТоварыНакладной.Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.СоответствиеНоменклатурыЕГАИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ТоварыНакладной.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ТоварыНакладной.Номенклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА ТоварыНакладной.Номенклатура.ЛегкаяПромышленность
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА ТоварыНакладной.Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ТоварыНакладной.Номенклатура.МолочнаяПродукцияБезВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА ТоварыНакладной.Номенклатура.Шины
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА ТоварыНакладной.Номенклатура.АльтернативныйТабак
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА ТоварыНакладной.Номенклатура.УпакованнаяВода
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА ТоварыНакладной.Номенклатура.Фотоаппараты
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		КОГДА ТоварыНакладной.Номенклатура.Духи
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА ТоварыНакладной.Номенклатура.Велосипеды
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА ТоварыНакладной.Номенклатура.Антисептики
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|		КОГДА ТоварыНакладной.Номенклатура.БАДы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|		КОГДА ТоварыНакладной.Номенклатура.НикотиносодержащаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|		КОГДА ТоварыНакладной.Номенклатура.Пиво
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|		КОГДА ТоварыНакладной.Номенклатура.КреслаКоляски
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА ТоварыНакладной.Номенклатура.ПродукцияМаркируемаяДляГИСМ 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		КОГДА ТоварыНакладной.Номенклатура.БезалкогольноеПиво
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|       КОГДА ТоварыНакладной.Номенклатура.СоковаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|		КОГДА ТоварыНакладной.Номенклатура.Зерно
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Зерно)
	|		КОГДА ТоварыНакладной.Номенклатура.ПродуктыПереработкиЗерна 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна)
	|		КОГДА ТоварыНакладной.Номенклатура.ЗерноВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЗерноВЕТИС)
	|		КОГДА ТоварыНакладной.Номенклатура.ПродуктыПереработкиЗернаВЕТИС 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС)
	|       КОГДА ТоварыНакладной.Номенклатура.МорепродуктыПодконтрольныеВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|		КОГДА ТоварыНакладной.Номенклатура.ПодконтрольнаяПродукцияСАТУРН
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ НоменклатураПереопределяемый
	|ИЗ
	|	ТоварыНакладной КАК ТоварыНакладной
	|;
	|
	|";
	
КонецПроцедуры

Процедура ДоработатьЗапросПродукцииСАТУРН(Текст)
	
	Позиция = СтрНайти(Текст, "ВЫБРАТЬ");
	Текст = Лев(Текст, Позиция-1) + "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(Текст, Позиция + СтрДлина("ВЫБРАТЬ"));
	Позиция = СтрНайти(Текст, "
	|ИЗ");
	Текст = Лев(Текст, Позиция -1)+ "
	|ПОМЕСТИТЬ ТоварыНакладнойПредварительно
	|"+ Сред(Текст, Позиция);
	
	Текст = Текст + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоПриход КАК КоличествоПриход,
	|	Товары.КоличествоРасход КАК КоличествоРасход
	|ПОМЕСТИТЬ ТоварыНакладной
	|ИЗ
	|	ТоварыНакладнойПредварительно КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ПодконтрольнаяПродукцияСАТУРН
	|;
	|
	|";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
