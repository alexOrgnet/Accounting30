
#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкаОбменаЭД

Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника    = ТипЗнч(Источник);
	ТипыДокументов  = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	СтрокаПараметровЭД = ПараметрыЭД.Добавить();
	
	Если ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип				 	 = ТипыДокументов.СчетНаОплату;;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.СчетНаОплату;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.СчетНаОплату;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли  ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.СчетНаОплату;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента, ВидОперации");
		Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.АктПриемкиСтроительныхРаботУслуг;
		Иначе
			СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаРеализации(Источник);
			Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
				Если СчетФактураНеТребуется(Источник) Тогда
					СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
						ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
				Иначе
					СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
						ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
				КонецЕсли;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			КонецЕсли;
		КонецЕсли;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если Источник.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.СтроительныеРаботы Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.АктПриемкиСтроительныхРаботУслуг;
		Иначе
			СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаРеализации(Источник);
			Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
				Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
					СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
						ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
				Иначе
					СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
						ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
				КонецЕсли;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			КонецЕсли;
		КонецЕсли;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
	
		СтрокаПараметровЭД.Тип 					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		СтрокаПараметровЭД.Тип 					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник, "Организация, Контрагент, ДоговорКонтрагента, ДокументОснование");
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			СтрокаПараметровЭД.Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		
		Если Документы.СчетФактураВыданный.ЭтоУниверсальныйДокумент(Источник)
				И Не НеобходимоСформироватьЭлектронныйДокументСчетФактура(Источник) Тогда
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			РеквизитыОснования = Новый Структура("Контрагент");
			Если ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				РеквизитыОснования.Вставить("Договор"); 
			КонецЕсли;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыОснования);
			СтрокаПараметровЭД.Контрагент = ДанныеДокумента.Контрагент;
			Если ДанныеДокумента.Свойство("Договор") Тогда
				СтрокаПараметровЭД.ДоговорКонтрагента = ДанныеДокумента.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			СтрокаПараметровЭД.Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник.ДокументОснование)
				И Не НеобходимоСформироватьЭлектронныйДокументСчетФактура(Источник) Тогда
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;    
		
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
		ДокументОснование = Источник.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			РеквизитыОснования = Новый Структура("Контрагент");
			Если ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				РеквизитыОснования.Вставить("Договор"); 
			КонецЕсли;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыОснования);
			СтрокаПараметровЭД.Контрагент = ДанныеДокумента.Контрагент;
			Если ДанныеДокумента.Свойство("Договор") Тогда
				СтрокаПараметровЭД.ДоговорКонтрагента = ДанныеДокумента.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			СтрокаПараметровЭД.Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			СтрокаПараметровЭД.Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			СтрокаПараметровЭД.Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаКорректировки(Источник);
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаКорректировки(Источник);
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;

	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаКорректировки(Источник);
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип = ВидЭлектронногоДокументаКорректировки(Источник);
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
			
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
			
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип				 	 = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип				  	 = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхождениях") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктОРасхождениях;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.АктОРасхождениях") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктОРасхождениях;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхожденияхПолученный") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктОРасхождениях;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.АктОРасхожденияхПолученный") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктОРасхождениях;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление 		 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");

		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление 	   = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") Тогда
		
		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
			
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВыдачаДенежныхДокументов")
		Или ТипИсточника = Тип("ДокументСсылка.Доверенность")
		Или ТипИсточника = Тип("ДокументСсылка.НачислениеПеней") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип                = Перечисления.ТипыДокументовЭДО.Прочее;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ВыдачаДенежныхДокументов")
		Или ТипИсточника = Тип("ДокументОбъект.Доверенность")
		Или ТипИсточника = Тип("ДокументОбъект.НачислениеПеней") Тогда
		
		СтрокаПараметровЭД.Тип                = Перечисления.ТипыДокументовЭДО.Прочее;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник, "Организация");
		
		СтрокаПараметровЭД.Тип                = Перечисления.ТипыДокументовЭДО.Прочее;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КорректировкаДолга") Тогда
		
		СтрокаПараметровЭД.Тип                = Перечисления.ТипыДокументовЭДО.Прочее;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип                = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПередачаТоваров") Тогда
		
		СтрокаПараметровЭД.Тип                = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");

		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РеализацияУслугПоПереработке") Тогда
	
		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
			
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеИзПереработки") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.АктВыполненныхРабот;
		СтрокаПараметровЭД.Направление 			 = НаправленияДокументов.Входящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");

		СтрокаПараметровЭД.Тип                = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Разрешено;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПередачаОС") Тогда
	
		СтрокаПараметровЭД.Тип                = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
			
		Если ТребуетсяСформироватьУниверсальныйДокумент(Источник) Тогда
			Если СчетФактураНеТребуется(Источник.Ссылка) Тогда
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
			Иначе
				СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
					ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Обязательно;
			КонецЕсли;
		Иначе
			СтрокаПараметровЭД.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");

		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктСверкиВзаиморасчетов;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.АктСверкиВзаиморасчетов") Тогда
	
		СтрокаПараметровЭД.Тип                = ТипыДокументов.АктСверкиВзаиморасчетов;
		СтрокаПараметровЭД.Направление        = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация        = Источник.Организация;
		СтрокаПараметровЭД.Контрагент         = Источник.Контрагент;
		СтрокаПараметровЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		Реквизиты = "Организация, Владелец, Ссылка";
		
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);

		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
				
		СтрокаПараметровЭД.Тип =  ТипыДокументов.ДоговорныйДокумент;
		СтрокаПараметровЭД.Направление = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент  = ЗначенияРеквизитов.Владелец;
		СтрокаПараметровЭД.ДоговорКонтрагента = ЗначенияРеквизитов.Ссылка;
		
	ИначеЕсли ЭлектронноеВзаимодействиеБП.ДокументПоддерживаетВнутреннийЭДО(Источник) Тогда
		
		Реквизиты = "Организация";
		
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		СтрокаПараметровЭД.Тип = Перечисления.ТипыДокументовЭДО.Внутренний;
		СтрокаПараметровЭД.Направление = Перечисления.НаправленияЭДО.Внутренний;
		СтрокаПараметровЭД.Организация   = ЗначенияРеквизитов.Организация;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеИсходящихЭД

Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	СтавкаНДСИсчисляетсяНалоговымАгентом = СтавкаНДСИсчисляетсяНалоговымАгентом();
	Соответствие.Вставить(СтавкаНДСИсчисляетсяНалоговымАгентом, СтавкаНДСИсчисляетсяНалоговымАгентом);
	
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС0,      "0");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10,     "10");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18,     "18");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20,     "20");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10_110, "10/110");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18_118, "18/118");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20_120, "20/120");
	Соответствие.Вставить(Перечисления.СтавкиНДС.БезНДС,    "без НДС");

КонецПроцедуры

Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиБППовтИсп.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений, БанковскийСчет);
	
КонецФункции

Функция ДляВидаОперацииДокументаДоступенЭДО(Документ) Экспорт
	
	ДоступенЭДО = Истина;
	
	ТипЗначенияДокумента = ТипЗнч(Документ);
	ДоступенЭДОДляВидаОперации = (ТипЗначенияДокумента = Тип("ДокументОбъект.ПередачаТоваров")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПередачаТоваров")
		Или ТипЗначенияДокумента = Тип("ДокументОбъект.ОтчетКомитентуОПродажах")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Если Не (ДоступенЭДОДляВидаОперации
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", Документ.Метаданные())) Тогда
		Возврат ДоступенЭДО;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Документ) Тогда // ДокументСсылка
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидОперации");
	Иначе // ДокументОбъект
		ВидОперации = Документ.ВидОперации;
	КонецЕсли;
	
	ТипЗначенияВидаОперации = ТипЗнч(ВидОперации);
	Если ТипЗначенияВидаОперации = Тип("ПеречислениеСсылка.ВидыОперацийПередачаТоваров") Тогда
		ДоступенЭДО = ДляВидаОперацииПередачиТоваровДоступенЭДО(ВидОперации);
	ИначеЕсли ТипЗначенияВидаОперации = Тип("ПеречислениеСсылка.ВидыОперацийОтчетКомитентуОПродажах") Тогда
		ДоступенЭДО = ДляВидаОперацииОтчетаКомитентуДоступенЭДО(ВидОперации);
	КонецЕсли;
	
	Возврат ДоступенЭДО;
	
КонецФункции

Функция ДляВидаОперацииПередачиТоваровДоступенЭДО(ВидОперации) Экспорт
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача
		Или ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту);
	
КонецФункции

Функция ДляВидаОперацииОтчетаКомитентуДоступенЭДО(ВидОперации) Экспорт
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах);
	
КонецФункции

#КонецОбласти

#Область ОтражениеВУчетеВходящихЭД

// См. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	Если ТипДокумента = ТипыДокументов.АктВыполненныхРабот  Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ОпределяетсяПрограммой,
			НСтр("ru = 'Определяется программой'"), Истина);
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеУслуг,
			НСтр("ru = 'Поступление услуг'"), Ложь);
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеУслугАренды,
			НСтр("ru = 'Поступление услуг аренды'"), Ложь);
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеУслугЛизинга,
				НСтр("ru = 'Поступление услуг лизинга'"), Ложь);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьФакторинг") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеУслугФакторинга,
				НСтр("ru = 'Поступление услуг факторинга'"), Ложь);
		КонецЕсли;
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеДопРасходов,
			НСтр("ru = 'Поступление доп. расходов'" ), Ложь);
		Если ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеИзПереработки,
				НСтр("ru = 'Поступление из переработки'"), Ложь);
		КонецЕсли;
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.КорректировкаПоступления,
			НСтр("ru = 'Корректировка поступления'"), Ложь);
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеТоваров,
			НСтр("ru = 'Поступление товаров'"), Истина);
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеОсновныхСредств,
				НСтр("ru = 'Поступление основных средств'"), Ложь);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеМатериаловВПереработку,
				НСтр("ru = 'Поступление материалов в переработку'"), Ложь);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеОборудования,
				НСтр("ru = 'Поступление оборудования'"), Ложь);
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеОбъектовСтроительства,
				НСтр("ru = 'Поступление объектов строительства'"), Ложь);
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеЗемельныхУчастков,
				НСтр("ru = 'Поступление земельных участков'"), Ложь);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетПоПутевымЛистам") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПоступлениеТоплива,
				НСтр("ru = 'Поступление топлива'"), Ложь);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров") Тогда
			СпособыОтраженияВУчете.Добавить(СпособыОбработки.ВозвратВыкупленныхТоваровКомиссионера,
				НСтр("ru = 'Возврат выкупленных комиссионером товаров'"), Ложь);
		КонецЕсли;
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.КорректировкаПоступления,
			НСтр("ru = 'Корректировка поступления'"), Ложь);
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ОпределяетсяПрограммой,
			НСтр("ru = 'Определяется программой'"), Истина);
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.КорректировкаПоступления,
			НСтр("ru = 'Корректировка поступления'"), Ложь);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПередачаПрав,
			НСтр("ru = 'Акт на передачу прав'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.СчетФактураПолученный,
			НСтр("ru = 'Корректировочный счет-фактура полученный'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.СчетФактураПолученный,
			НСтр("ru = 'Счет-фактура (полученный)'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.СчетНаОплатуПоставщика,
			НСтр("ru = 'Счет на оплату поставщика'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ОтчетКомиссионераОПродажах,
			НСтр("ru = 'Отчет комиссионера о продажах'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктОРасхождениях Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.АктОРасхожденияхПолученный,
			НСтр("ru = 'Акт о расхождениях (полученный)'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктСверкиВзаиморасчетов Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.АктСверкиВзаиморасчетов,
			НСтр("ru = 'Акт сверки расчетов с контрагентом'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктПриемкиСтроительныхРаботУслуг Тогда
		СпособыОтраженияВУчете.Добавить(СпособыОбработки.ПриемкаВыполненныхСтроительныхРабот,
			НСтр("ru = 'Приемка выполненных строительных работ'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ДоговорныйДокумент Тогда
		СпособыОтраженияВУчете.Добавить("ДоговорыКонтрагентов", НСтр("ru = 'Договор'"), Истина);
	КонецЕсли;
		
КонецПроцедуры

Функция СпособыОбработкиВходящихЭД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОпределяетсяПрограммой"           , "ОпределяетсяПрограммой");
	
	Результат.Вставить("ПоступлениеУслуг"                 , "ПоступлениеУслуг");
	Результат.Вставить("ПоступлениеУслугАренды"           , "ПоступлениеУслугАренды");
	Результат.Вставить("ПоступлениеУслугЛизинга"          , "ПоступлениеУслугЛизинга");
	Результат.Вставить("ПоступлениеУслугФакторинга"       , "ПоступлениеУслугФакторинга");
	Результат.Вставить("ПоступлениеИзПереработки"         , "ПоступлениеИзПереработки");
	Результат.Вставить("ПоступлениеДопРасходов"           , "ПоступлениеДопРасходов");
	
	Результат.Вставить("ПоступлениеТоваров"               , "ПоступлениеТоваров");
	Результат.Вставить("ПоступлениеОсновныхСредств"       , "ПоступлениеОсновныхСредств");
	Результат.Вставить("ПоступлениеМатериаловВПереработку", "ПоступлениеМатериаловВПереработку");
	Результат.Вставить("ПоступлениеОборудования"          , "ПоступлениеОборудования");
	Результат.Вставить("ПоступлениеОбъектовСтроительства" , "ПоступлениеОбъектовСтроительства");
	Результат.Вставить("ПоступлениеЗемельныхУчастков"     , "ПоступлениеЗемельныхУчастков");
	Результат.Вставить("ПоступлениеТоплива"               , "ПоступлениеТоплива");
	
	Результат.Вставить("КорректировкаПоступления"         , "КорректировкаПоступления");
	Результат.Вставить("ПередачаПрав"                     , "ПередачаПрав");
	Результат.Вставить("СчетФактураПолученный"            , "СчетФактураПолученный");
	Результат.Вставить("СчетНаОплатуПоставщика"           , "СчетНаОплатуПоставщика");
	Результат.Вставить("ОтчетКомиссионераОПродажах"       , "ОтчетКомиссионераОПродажах");
	Результат.Вставить("АктОРасхожденияхПолученный"       , "АктОРасхожденияхПолученный");
	
	Результат.Вставить("ВозвратВыкупленныхТоваровКомиссионера", "ВозвратВыкупленныхТоваровКомиссионера");
	Результат.Вставить("АктСверкиВзаиморасчетов"              , "АктСверкиВзаиморасчетов");
	
	Результат.Вставить("ПриемкаВыполненныхСтроительныхРабот", "ПриемкаВыполненныхСтроительныхРабот");
	
	Возврат Результат;
	
КонецФункции

Функция СпособОбработкиПервичногоДокумента(СпособОбработки) Экспорт
	
	Результат = "";
	Если ТипЗнч(СпособОбработки) = Тип("Структура")
			И СпособОбработки.Свойство("ПервичныйДокумент") Тогда
		Результат = СпособОбработки.ПервичныйДокумент;
	ИначеЕсли ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		Результат = СпособОбработки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете().
Процедура ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОтраженияВУчете, ИмяДокумента) Экспорт 
	
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	Если СпособОтраженияВУчете = СпособыОбработки.ПоступлениеУслуг
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеУслугАренды
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеУслугЛизинга
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеУслугФакторинга
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеТоваров
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеОсновныхСредств
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеМатериаловВПереработку
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеОборудования
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеОбъектовСтроительства
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеЗемельныхУчастков
			Или СпособОтраженияВУчете = СпособыОбработки.ПоступлениеТоплива
			Или СпособОтраженияВУчете = СпособыОбработки.ПередачаПрав
			Или СпособОтраженияВУчете = СпособыОбработки.ПриемкаВыполненныхСтроительныхРабот
			Или СпособОтраженияВУчете = СпособыОбработки.ОпределяетсяПрограммой Тогда
		ИмяДокумента = Метаданные.Документы.ПоступлениеТоваровУслуг.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.ПоступлениеДопРасходов Тогда
		ИмяДокумента = Метаданные.Документы.ПоступлениеДопРасходов.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.ПоступлениеИзПереработки Тогда
		ИмяДокумента = Метаданные.Документы.ПоступлениеИзПереработки.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.СчетФактураПолученный Тогда
		ИмяДокумента = Метаданные.Документы.СчетФактураПолученный.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.СчетНаОплатуПоставщика Тогда
		ИмяДокумента = Метаданные.Документы.СчетНаОплатуПоставщика.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.ОтчетКомиссионераОПродажах Тогда
		ИмяДокумента = Метаданные.Документы.ОтчетКомиссионераОПродажах.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.АктОРасхожденияхПолученный Тогда
		ИмяДокумента = Метаданные.Документы.АктОРасхожденияхПолученный.Имя;
	ИначеЕсли СпособОтраженияВУчете = СпособыОбработки.КорректировкаПоступления Тогда
		ИмяДокумента = Метаданные.Документы.КорректировкаПоступления.Имя;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидОперацииДокументаПоступленияПоСпособуОбработки(СпособОбработки) Экспорт
	
	Возврат СоответствиеСпособаОбработкиИВидаОперацииПоступления()[СпособОбработки];
	
КонецФункции

#КонецОбласти

#Область УПД_2019

Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	Если ТипДокумента = ТипыДокументов.УПД И Не СчетФактураНеТребуется(Основание) Тогда 
		
		Настройки.Вставить("Функция", "СЧФДОП");
		ЗаполнитьДанныеДляСЧФДОПИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Описание, Отказ)
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		Настройки.Вставить("Функция", "СЧФ");
		ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Отказ);
		
	Иначе
		
		Настройки.Вставить("Функция", "ДОП");	
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Отказ);
	
	КонецЕсли;

КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ) Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	Для Каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СчетФактура = Основание;
		Иначе
			ПервичныйДокумент = Основание;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОтветногоТитула = НовыйДанныеОтветногоТитулаУПД();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	НомераТаблиц = Новый Структура;
	ТекстЗапросаМассив = Новый Массив;
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулУПД_ПоступлениеТоваровУслуг(НомераТаблиц, ПервичныйДокумент));
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулИсправительногоУПД_КорректировкаПоступления(НомераТаблиц, ПервичныйДокумент));
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулУПД_ПоступлениеДопРасходов(НомераТаблиц, ПервичныйДокумент));
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулУПД_ПоступлениеИзПереработки(НомераТаблиц, ПервичныйДокумент));
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулУПД_СчетФактура(НомераТаблиц, СчетФактура));
	ТекстЗапросаМассив.Добавить(ТекстЗапросаОтветныйТитулУПД_АктОРасхождениях(НомераТаблиц, ПервичныйДокумент));
	
	Запрос.Текст = СтрСоединить(ТекстЗапросаМассив); 
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОтветногоТитула.ДатаПолученияТоваров = ТекущаяДатаСеанса();
	Организация = Неопределено;
	
	// Если есть акт о расхождениях, значит товары (услуги) приняты с расхождениями.
	Если НомераТаблиц.Свойство("АктОРасхождениях")
			И Не РезультатЗапроса[НомераТаблиц.АктОРасхождениях].Пустой() Тогда
		ВыборкаАктОРасхождениях = РезультатЗапроса[НомераТаблиц.АктОРасхождениях].Выбрать();
		ВыборкаАктОРасхождениях.Следующий();
		ДанныеОтветногоТитула.КодИтога              = КодТоварыУслугиПринятыСРасхождениями();
		ДанныеОтветногоТитула.АктОРасхожденияхНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ВыборкаАктОРасхождениях.Номер, Истина, Ложь);
		ДанныеОтветногоТитула.АктОРасхожденияхДата  = НачалоДня(ВыборкаАктОРасхождениях.Дата);
	КонецЕсли;
	
	Если НомераТаблиц.Свойство("ПоступлениеТоваровУслуг") Тогда
		Выборка = РезультатЗапроса[НомераТаблиц.ПоступлениеТоваровУслуг].Выбрать();
		Выборка.Следующий();
		Если Не Выборка.Товары.Пустой() Тогда
			Если ДанныеОтветногоТитула.КодИтога = КодТоварыУслугиПринятыБезПретензий() Тогда
				ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстТоварыПринятыБезПретензий());
			ИначеЕсли ДанныеОтветногоТитула.КодИтога = КодТоварыУслугиПринятыСРасхождениями() Тогда
				ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстТоварыПринятыСРасхождениями());
			КонецЕсли;
		КонецЕсли;
		Если Не (Выборка.Услуги.Пустой() И Выборка.АгентскиеУслуги.Пустой()) Тогда
			Если ДанныеОтветногоТитула.КодИтога = КодТоварыУслугиПринятыБезПретензий() Тогда
				ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстУслугиПринятыБезПретензий());
			ИначеЕсли ДанныеОтветногоТитула.КодИтога = КодТоварыУслугиПринятыСРасхождениями() Тогда
				ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстУслугиПринятыСРасхождениями());
			КонецЕсли;
		КонецЕсли;
		ДанныеОтветногоТитула.СодержаниеОперации   = СтрСоединить(ДанныеОтветногоТитула.СоставСодержания, " ");
		ДанныеОтветногоТитула.ДатаПолученияТоваров = Выборка.Дата;
		Организация = Выборка.Организация;
	ИначеЕсли НомераТаблиц.Свойство("КорректировкаПоступления") Тогда
		Выборка = РезультатЗапроса[НомераТаблиц.КорректировкаПоступления].Выбрать();
		Выборка.Следующий();
		Если Не Выборка.Товары.Пустой() Тогда
			ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстТоварыПринятыБезПретензий());
		КонецЕсли;
		Если Не (Выборка.Услуги.Пустой() И Выборка.АгентскиеУслуги.Пустой()) Тогда
			ДанныеОтветногоТитула.СоставСодержания.Добавить(ТекстУслугиПринятыБезПретензий());
		КонецЕсли;
		ДанныеОтветногоТитула.СодержаниеОперации   = СтрСоединить(ДанныеОтветногоТитула.СоставСодержания, " ");
		ДанныеОтветногоТитула.ДатаПолученияТоваров = Выборка.Дата;
		Организация = Выборка.Организация;
	ИначеЕсли НомераТаблиц.Свойство("ПоступлениеДопРасходов") Тогда
		Выборка = РезультатЗапроса[НомераТаблиц.ПоступлениеДопРасходов].Выбрать();
		Выборка.Следующий();
		ДанныеОтветногоТитула.СодержаниеОперации = ТекстУслугиПринятыБезПретензий();
		ДанныеОтветногоТитула.ДатаПолученияТоваров = Выборка.Дата;
		Организация = Выборка.Организация;
	ИначеЕсли НомераТаблиц.Свойство("ПоступлениеИзПереработки") Тогда
		Выборка = РезультатЗапроса[НомераТаблиц.ПоступлениеИзПереработки].Выбрать();
		Выборка.Следующий();
		ДанныеОтветногоТитула.СодержаниеОперации = ТекстУслугиПринятыБезПретензий();
		ДанныеОтветногоТитула.ДатаПолученияТоваров = Выборка.Дата;
		Организация = Выборка.Организация;
	ИначеЕсли НомераТаблиц.Свойство("СчетФактура") Тогда
		Выборка = РезультатЗапроса[НомераТаблиц.СчетФактура].Выбрать();
		Выборка.Следующий();
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		ДанныеОтветногоТитула.СоставительДокумента = СоставительДокумента(
			ПолучитьДанныеЮрФизЛица(Организация, ДанныеОтветногоТитула.ДатаПолученияТоваров));
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", ДанныеОтветногоТитула.СоставительДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПринятииТоваров.ДатаПолученияТоваров", ДанныеОтветногоТитула.ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПринятииТоваров.СодержаниеОперации", ДанныеОтветногоТитула.СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПринятииТоваров.КодИтога", ДанныеОтветногоТитула.КодИтога);
	
	// Создан акт о расхождениях.
	Если ДанныеОтветногоТитула.КодИтога = КодТоварыУслугиПринятыСРасхождениями() Тогда
		Путь = "СведенияОПринятииТоваров.ДокументОРасхождениях";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			Путь + ".Наименование", ДанныеОтветногоТитула.АктОРасхожденияхНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			Путь + ".Номер", ДанныеОтветногоТитула.АктОРасхожденияхНомер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			Путь + ".Дата", ДанныеОтветногоТитула.АктОРасхожденияхДата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			Путь + ".Вид", ДанныеОтветногоТитула.АктОРасхожденияхВид);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ФункцияУПД = ФункцияЭД(ДеревоДанных);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Ссылка;
			Иначе
				ПервичныйДокумент = Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокументыУчета = Новый Массив;  
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Отражение в учете первичного документа.
	Если ЭтоФункцияСЧФДОП(ФункцияУПД) Или ЭтоФункцияДОП(ФункцияУПД) Тогда
		Если ЭтоИсправлениеУПД(ДеревоДанных) Тогда // корректировка поступления с видом операции "Исправление в первичных документах"
			ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД_2019(ДеревоДанных, СпособОбработки, ОписаниеОшибки);
			ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеДляЗаполнения, ОписаниеОшибки);
		ИначеЕсли ЭтоПоступлениеДопРасходов(СпособОбработки) Тогда // поступление доп. расходов
			ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияДопРасходовУПД_2019(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументПоступленияДопРасходов(ПервичныйДокумент, ДанныеДляЗаполнения, ОписаниеОшибки);
		ИначеЕсли ЭтоПоступлениеИзПереработки(СпособОбработки, ДеревоДанных, "УПД") Тогда
			ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияИзПереработкиУПД_2019(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументПоступленияИзПереработки(ПервичныйДокумент, ДанныеДляЗаполнения, ОписаниеОшибки);
		ИначеЕсли ЭтоВозвратВыкупленныхТоваров(СпособОбработки) Тогда
			ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД_2019(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументВозвратТоваровОтПокупателя(ПервичныйДокумент, ДанныеДляЗаполнения, ОписаниеОшибки);
		Иначе // поступление товаров и услуг
			ОпределитьСпособОбработкиПриПерезаполненииПоступления(ПервичныйДокумент, СпособОбработки);
			ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД_2019(ДеревоДанных, СпособОбработки, ОписаниеОшибки);
			ЗаполнитьДокументПоступленияТоваровУслуг(ПервичныйДокумент, ДанныеДляЗаполнения, СпособОбработки, ОписаниеОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			ДокументыУчета.Добавить(ПервичныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	// Отражение в учете счета-фактуры.
	Если ЭтоФункцияСЧФДОП(ФункцияУПД) Или ЭтоФункцияСЧФ(ФункцияУПД) Тогда
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			// Добавим ссылку на первичный документ в дерево электронного документа
			// для привязки к нему счета-фактуры.
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		
		ДанныеДляЗаполнения = ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных, ОписаниеОшибки);
		ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеДляЗаполнения, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ДокументыУчета.Добавить(СчетФактура);
		КонецЕсли;
	КонецЕсли;
	
	СсылкиНаВладельцев = ДокументыУчета;
	
КонецПроцедуры

#КонецОбласти

#Область УКД_2020

Процедура ЗаполнитьДанныеУКД2020_ИнформацияПродавца(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	ПроверитьГотовностьОснованияУКД(СсылкаНаОбъект, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипДокумента = ТипыДокументов.УКД Тогда
		Настройки.Вставить("Функция", "КСЧФДИС");
		ЗаполнитьУКД_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ);
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		Настройки.Вставить("Функция", "ДИС");        
		ЗаполнитьДИС_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Отказ);
	Иначе
		Настройки.Вставить("Функция", "КСЧФ");
		ЗаполнитьКСЧ_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Знач Основания, ДеревоДанных, Отказ) Экспорт
	
	Документ = Неопределено;
	
	Для Каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			Поступление = Основание;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СчетФактураПолученный = Основание;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СчетФактураПолученный) Тогда
		Документ = СчетФактураПолученный;
	ИначеЕсли ЗначениеЗаполнено(Поступление) Тогда
		Документ = Поступление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Организация");
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(Реквизиты.Организация);
		СоставительДокумента =  СоставительДокумента(СведенияОПокупателе);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента(СведенияОПокупателе));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", Реквизиты.Дата);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ТекущаяДатаСеанса());
		СоставительДокумента = "-";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));
	
КонецПроцедуры

Процедура НайтиСоздатьУКД_2020(ДеревоДанных, СсылкиНаВладельцев, СпособОбработки, ОписаниеОшибки = "") Экспорт
	
	ФункцияУКД = ФункцияЭД(ДеревоДанных);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для каждого Ссылка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Ссылка;
			Иначе
				ПервичныйДокумент = Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДокументыУчета = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоФункцияКСЧФДИС(ФункцияУКД) Тогда
		Если НужноСоздатьДокументВозвратТоваровПоставщику(СпособОбработки, ДеревоДанных) Тогда
			ДанныеУКД = ПодготовитьСтруктуруДляВозвратаТоваровПоставщикуУКД(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументВозвратТоваровПоставщику(ПервичныйДокумент, ДанныеУКД, ОписаниеОшибки);
		Иначе
			ДанныеУКД = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД_2020(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУКД, ОписаниеОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			ДокументыУчета.Добавить(ПервичныйДокумент);
		КонецЕсли;
		
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		ДанныеУКД = ПодготовитьСтруктуруДляСчетаФактурыУКД_2020(ДеревоДанных, ОписаниеОшибки);
		ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУКД, ОписаниеОшибки);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ДокументыУчета.Добавить(СчетФактура);
		КонецЕсли;
	ИначеЕсли ЭтоФункцияДИС(ФункцияУКД) Тогда
		Если НужноСоздатьДокументВозвратТоваровПоставщику(СпособОбработки, ДеревоДанных) Тогда
			ДанныеУКД = ПодготовитьСтруктуруДляВозвратаТоваровПоставщикуУКД(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументВозвратТоваровПоставщику(ПервичныйДокумент, ДанныеУКД, ОписаниеОшибки);
		Иначе
			ДанныеУКД = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД_2020(ДеревоДанных, ОписаниеОшибки);
			ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУКД, ОписаниеОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			ДокументыУчета.Добавить(ПервичныйДокумент);
		КонецЕсли;
	Иначе
		ДанныеУКД = ПодготовитьСтруктуруДляСчетаФактурыУКД_2020(ДеревоДанных, ОписаниеОшибки);
		ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУКД, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ДокументыУчета.Добавить(СчетФактура);
		КонецЕсли;
	КонецЕсли; // КСЧФУКД
	
	СсылкиНаВладельцев = ДокументыУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Если Не ДоступенЭДОДляЭДПередачаТоваров(СсылкаНаОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Для вида документа электронный документ ""Передача товаров"" недоступен. Используйте электронный документ УПД.'");
		СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ДляВидаОперацииДокументаДоступенЭДО(СсылкаНаОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Для вида операции электронный документооборот недоступен.'");
		СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ДанныеДляПечати = Документы.ПередачаТоваров.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов);
	Иначе
		ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, Истина);
	КонецЕсли;
	
	Если ДанныеДляПечати.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	НомерТоварнойНакладной = ?(ЗначениеЗаполнено(РеквизитыШапки.ГосударственныйКонтракт), РеквизитыШапки.ГосударственныйКонтракт + "/", "")
		+ РеквизитыШапки.НомерДокумента;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", НомерТоварнойНакладной);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			СтроковыеФункцииКлиентСервер.СтрокаВЧисло(РеквизитыШапки.НомерИсправления));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений,
		БанковскийСчетПродавца(РеквизитыШапки));
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ДанныеОбособленногоПодразделения = Новый Структура("Организация, Подразделение, Грузоотправитель");
	ЗаполнитьЗначенияСвойств(ДанныеОбособленногоПодразделения, РеквизитыШапки);
	ДополнитьДаннымиКППОбособленногоПодразделения(СведенияОПоставщике, СведенияОГрузоотправителе,
		ДанныеОбособленногоПодразделения, РеквизитыШапки.ДатаДляПолученияСведений);
	
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДляПолученияСведений);
	
	НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование + ?(ЗначениеЗаполнено(
		СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН,
		СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));

	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		РеквизитыШапки.Поставщик, "Объект.Организация");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "НаименованиеСоставителяДокумента", НаименованиеСоставителяДокумента,
		ПараметрыОбработкиОшибок);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик", "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОПоставщике.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОПоставщике.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Поставщик.КодОКПО",
			СокрЛП(СведенияОПоставщике.КодПоОКПО));
		
	КонецЕсли;
		
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт", РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОГрузоотправителе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОГрузоотправителе.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Грузоотправитель.КодОКПО",
			СокрЛП(СведенияОГрузоотправителе.КодПоОКПО));
		
	КонецЕсли;
		
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Плательщик", "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОПокупателе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОПокупателе.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Плательщик.КодОКПО",
			СокрЛП(СведенияОПокупателе.КодПоОКПО));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.АдресДоставки) Тогда
		СведенияОГрузополучателе.Вставить("АдресДоставки", РеквизитыШапки.АдресДоставки);
	КонецЕсли;
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт", РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОГрузополучателе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОГрузополучателе.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Грузополучатель.КодОКПО",
			СокрЛП(СведенияОГрузополучателе.КодПоОКПО));
		
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "НаименованиеПолное"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		
		МассивОснований = Новый Массив;
		МассивОснований.Добавить(РеквизитыШапки.ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									МассивОснований);
		
	КонецЕсли;
	
	// Данные договора
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыШапки.Договор,
		"Номер, Дата, ВидДоговора, Наименование");
	ДокументыОснования = ПодготовитьТаблицуДанныхДоговора(
		ДанныеОснования.Наименование,
		ДанныеОснования.Номер,
		ДанныеОснования.Дата);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования, "ДокОснованиеДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыОснования, "Основание");
	
	УчетАгентскогоНДСПокупателем = ПокупательВыступаетНалоговымАгентомПоУплатеНДС(РеквизитыШапки.Договор);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		// Чтобы удалить строку товара в исправлении количеству товара присваивают 0. 
		Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление
			И ДанныеСтроки.Количество = 0
			И ДанныеСтроки.СуммаБезНДС = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		СтрокаТаблицыДокумента.Номенклатура                 = ДанныеСтроки.Товар;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры     = ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод            = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыДокумента.МассаНетто                   = ДанныеСтроки.Количество;
		
		СтрокаТаблицыДокумента.СуммаСНДС   = ?(УчетАгентскогоНДСПокупателем, 0, ДанныеСтроки.СуммаСНДС);
		СтрокаТаблицыДокумента.СуммаНДС    = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС = ДанныеСтроки.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС   = ?(УчетАгентскогоНДСПокупателем, СтавкаНДСИсчисляетсяНалоговымАгентом(), ДанныеСтроки.СтавкаНДС);
		СтрокаТаблицыДокумента.Цена        = ДанныеСтроки.Цена;
		
		ТаблицаДопДанных = НоваяТаблицаДопДанных();
		ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "СтавкаНДС",              ДанныеСтроки.СтавкаНДС);
		ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "НомерТД",                ДанныеСтроки.НомерТД);
		ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "КодСтраныПроисхождения", ДанныеСтроки.КодСтраныПроисхождения);
		
		// Значение единицы измерения для возвратной тары
		Если ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Товары Тогда
			ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "ТаблицаДокумента", "Товары");
		ИначеЕсли ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Услуги Тогда
			ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "ТаблицаДокумента", "Услуги");
		ИначеЕсли ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.ВозвратнаяТара Тогда
			ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, "ТаблицаДокумента", "ВозвратнаяТара");
			СтрокаТаблицыДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = ТаблицаДопДанных;
		
		СтрокаТаблицыДокумента.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			ДанныеСтроки.Товар, СтрокаТаблицыДокумента.СтавкаНДС);
		СтрокаТаблицыДокумента.КодТовара = КодТоварнойПозиции(ДанныеСтроки.Товар, ДанныеСтроки.ТоварКод, Настройки,
			СтрокаТаблицыДокумента.Сопоставление);
		
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаПодписанияДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			?(УчетАгентскогоНДСПокупателем, 0, ИтоговыеСуммы.ИтогоСуммаСНДС));
			
	КурсВзаиморасчетов = 1;
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование)
			И ТипЗнч(РеквизитыШапки.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыШапки.ДокументОснование,
				"КурсВзаиморасчетов");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "КурсВзаиморасчетов");
		
	КонецЕсли;
	
	ДопДанные = Новый ТаблицаЗначений;
	ДопДанные.Колонки.Добавить("Идентификатор");
	ДопДанные.Колонки.Добавить("Значение");
	
	СтрокаДопДанных = ДопДанные.Добавить();
	СтрокаДопДанных.Идентификатор = "КурсВзаиморасчетов";
	СтрокаДопДанных.Значение = КурсВзаиморасчетов;
	
	Если ДанныеОснования.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтрокаДопДанных = ДопДанные.Добавить();
		СтрокаДопДанных.Идентификатор = "ПередачаТовараКомитентом";
		СтрокаДопДанных.Значение = Истина;
	КонецЕсли;
	
	ЦифровойСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОПоставщике, "ЦифровойСчет", Ложь);
	Если ЦифровойСчет Тогда
		СтрокаДопДанных = ДопДанные.Добавить();
		СтрокаДопДанных.Идентификатор = "ПолучЦифровойРубль";
		СтрокаДопДанных.Значение = СведенияОПоставщике.НомерСчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.КладовщикДолжностьНаименование)
		И ЗначениеЗаполнено(РеквизитыШапки.Кладовщик) Тогда
		
		// Кладовщик работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", РеквизитыШапки.КладовщикДолжностьНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", РеквизитыШапки.КладовщикСтруктураФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", РеквизитыШапки.КладовщикСтруктураФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", РеквизитыШапки.КладовщикСтруктураФИО.Отчество);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыШапки.Кладовщик) Тогда
		// Кладовщик не работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", РеквизитыШапки.КладовщикСтруктураФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", РеквизитыШапки.КладовщикСтруктураФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", РеквизитыШапки.КладовщикСтруктураФИО.Отчество);
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СведенияОГрузе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "СведенияОТранспортировкеИГрузе, СопроводительныеДокументы");
		Если ЗначениеЗаполнено(СведенияОГрузе.СведенияОТранспортировкеИГрузе) Тогда
			СтрокаДопДанных = ДопДанные.Добавить();
			СтрокаДопДанных.Идентификатор = "СведенияОТранспортировке";
			СтрокаДопДанных.Значение = СведенияОГрузе.СведенияОТранспортировкеИГрузе;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОГрузе.СопроводительныеДокументы) Тогда
			СтрокаДопДанных = ДопДанные.Добавить();
			СтрокаДопДанных.Идентификатор = "ИныеСведенияОбОтгрузке";
			СтрокаДопДанных.Значение = СведенияОГрузе.СопроводительныеДокументы;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, ДопДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных, СпособОбработки, ОписаниеОшибки);
	Если ДанныеОбъекта.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта, ОписаниеОшибки);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта, СпособОбработки, ОписаниеОшибки);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПередачаРезультатовРабот

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект);
	ТаблицаСведенийАктаОбОказанииУслуг = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
	
	Если ТаблицаСведенийАктаОбОказанииУслуг.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = ?(ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации"),
		Перечисления.ВидыОперацийЭД.Исправление, Перечисления.ВидыОперацийЭД.ПродажаКомиссия); 
	РеквизитыШапки = ТаблицаСведенийАктаОбОказанииУслуг[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыШапки.ГосударственныйКонтракт), РеквизитыШапки.ГосударственныйКонтракт+"/", "")+РеквизитыШапки.НомерДокумента;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			СтроковыеФункцииКлиентСервер.СтрокаВЧисло(РеквизитыШапки.НомерИсправления));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
			|	- в документе указана валюта,
			|	- для нее заполнен код по Общероссийскому классификатору валют.'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод, ТекстОшибки);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "НаименованиеПолное"));
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик,  РеквизитыШапки.ДатаДляПолученияСведений, БанковскийСчетПродавца(РеквизитыШапки));
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Получатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование + ?(ЗначениеЗаполнено(
		СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН,
		СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));

	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		РеквизитыШапки.Поставщик, "Объект.Организация");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "НаименованиеСоставителяДокумента", НаименованиеСоставителяДокумента,
		ПараметрыОбработкиОшибок);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик", "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	// Данные договора
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаОбъект,
		"ДоговорКонтрагента.Номер, ДоговорКонтрагента.Дата, ДоговорКонтрагента.Наименование");
	Основания = ПодготовитьТаблицуДанныхДоговора(
		ДанныеОснования.ДоговорКонтрагентаНаименование,
		ДанныеОснования.ДоговорКонтрагентаНомер,
		ДанныеОснования.ДоговорКонтрагентаДата);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Основания, "ДокОснованиеДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Основания, "Основание");
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Сопоставление");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ТабличнаяЧасть);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),СокрЛП(Строка.ЕдиницаИзмеренияКод), "");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество;
		СтрокаТаблицыДокумента.Описание                     = Строка.НоменклатураНаименование;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = Строка.Цена;
		
		СтрокаТаблицыДокумента.ИдТовараУКонтрагента = ПолучитьИДНоменклатуры(
			Строка.Номенклатура, Неопределено, Неопределено);
			
		СтрокаТаблицыДокумента.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			Строка.Номенклатура, СтрокаТаблицыДокумента.СтавкаНДС, Строка.НоменклатураНаименование);
		Если РеализацияУслугПоПереработкеОснованиеЭД(СсылкаНаОбъект) Тогда
				// Номенклатура документа "Реализация услуг по переработке" одновременно содержит данные о продукции и оказанной услуге по переработке.
				// Данное изменение необходимо, чтобы при формировании ЭД Акт об оказани услуг наименование заполнялось данными поля "Содержание".
				СтрокаТаблицыДокумента.Сопоставление.Наименование = Строка.НоменклатураНаименование;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаУслуг);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);
		
	ДопДанные = Новый ТаблицаЗначений;
	ДопДанные.Колонки.Добавить("Идентификатор");
	ДопДанные.Колонки.Добавить("Значение");
		
	КурсВзаиморасчетов = 1;
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование)
			И ТипЗнч(РеквизитыШапки.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыШапки.ДокументОснование,
				"КурсВзаиморасчетов");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "КурсВзаиморасчетов");
		
	КонецЕсли;
	
	СтрокаДопДанных = ДопДанные.Добавить();	
	СтрокаДопДанных.Идентификатор = "КурсВзаиморасчетов";
	СтрокаДопДанных.Значение = КурсВзаиморасчетов;
	
	Если РеализацияУслугПоПереработкеОснованиеЭД(СсылкаНаОбъект) Тогда
		СтрокаДопДанных = ДопДанные.Добавить();
		СтрокаДопДанных.Идентификатор = "РеализацияУслугПоПереработке";
		СтрокаДопДанных.Значение = "Истина";
	КонецЕсли;
	
	ЦифровойСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОПоставщике, "ЦифровойСчет", Ложь);
	Если ЦифровойСчет Тогда
		СтрокаДопДанных = ДопДанные.Добавить();
		СтрокаДопДанных.Идентификатор = "ПолучЦифровойРубль";
		СтрокаДопДанных.Значение = СведенияОПоставщике.НомерСчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, ДопДанные, Истина);
	КонецЕсли;
		
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ) Экспорт
	
	Если Основания.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"СведенияПоВыполнениюУслуг.ДатаЗаказа", Основания[0].Дата);
	КонецЕсли;	
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ЭтоПоступлениеДопРасходов(СпособОбработки) Тогда
		ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияДопРасходовПоПередачаРабот(ДеревоДанных, ОписаниеОшибки);
		ЗаполнитьДокументПоступленияДопРасходов(СсылкаНаВладельца, ДанныеДляЗаполнения, ОписаниеОшибки);
	ИначеЕсли ЭтоПоступлениеИзПереработки(СпособОбработки, ДеревоДанных, "Акт") Тогда
		ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияИзПереработкиПоПередачаРабот(ДеревоДанных, ОписаниеОшибки);
		ЗаполнитьДокументПоступленияИзПереработки(СсылкаНаВладельца, ДанныеДляЗаполнения, ОписаниеОшибки);
	Иначе
		ДанныеДляЗаполнения = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных, ОписаниеОшибки);
		Если ДанныеДляЗаполнения.Шапка.Исправление Тогда
			ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗаполнения, ОписаниеОшибки);
		Иначе
			ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗаполнения, СпособОбработки, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки = ДанныеДляФормированияЭД[0];
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Номер", РеквизитыШапки.НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата", РеквизитыШапки.ДатаДокумента);
	
	УчетАгентскогоНДСПокупателем = ПокупательВыступаетНалоговымАгентомПоУплатеНДС(РеквизитыШапки.ДоговорКонтрагента);
	
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СуммаСУчетомСкидки = ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки;
		Цена = Окр(ДанныеСтроки.Цена * ?(ДанныеСтроки.Сумма = 0, 1, СуммаСУчетомСкидки/ДанныеСтроки.Сумма), 2);
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураАртикул;
		СтрокаТаблицыТоваров.Наименование				= ПолучитьНаименованиеНоменклатуры(
			ДанныеСтроки.НоменклатураНаименование);
		СтрокаТаблицыТоваров.Описание 					= ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное		 = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение	 = "-";
		СтрокаТаблицыТоваров.Цена 						= Цена;
		СтрокаТаблицыТоваров.Количество 				= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 						= СуммаСУчетомСкидки;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 			= РеквизитыШапки.СуммаВключаетНДС;
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ?(УчетАгентскогоНДСПокупателем, СтавкаНДСИсчисляетсяНалоговымАгентом(), ДанныеСтроки.СтавкаНДС);
		СтрокаТаблицыТоваров.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			ДанныеСтроки.Номенклатура, СтрокаТаблицыТоваров.СтавкаНДС, ДанныеСтроки.Содержание);
		
	КонецЦикла;
	
	// Если скидка задана в целом по документу
	Если РеквизитыШапки.СуммаСкидки <> 0  Тогда
	
		СуммаСУчетомСкидки = ТаблицаТоваров.Итог("Сумма") - РеквизитыШапки.СуммаСкидки;
		
		КоэфСкидки = ?(ТаблицаТоваров.Итог("Сумма") = 0, 1, СуммаСУчетомСкидки/ТаблицаТоваров.Итог("Сумма"));
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСУчетомСкидки, ТаблицаТоваров, "Сумма");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Окр(ТаблицаТоваров.Итог("СуммаНДС")*КоэфСкидки, 2), ТаблицаТоваров, "СуммаНДС");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Окр(ТаблицаТоваров.Итог("Цена")*КоэфСкидки, 2), ТаблицаТоваров, "Цена");
	
	КонецЕсли;
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, БанковскийСчетПродавца(РеквизитыШапки));
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.ДатаДляПолученияСведений);
	
	СуммаИтог     = ТаблицаТоваров.Итог("Сумма");
	СуммаНДСИтог  = ТаблицаТоваров.Итог("СуммаНДС");
	СуммаСНДСИтог = СуммаИтог + ?(РеквизитыШапки.СуммаВключаетНДС, 0, СуммаНДСИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента,
		"Сумма",
		СуммаСНДСИтог);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорКонтрагента) Тогда
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.ДоговорКонтрагента, "Наименование, Номер, Дата");
		НазначениеПлатежа = НазначениеПлатежаДляСчетаНаОплату(ДанныеДоговора.Наименование, ДанныеДоговора.Номер, ДанныеДоговора.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", РеквизитыШапки.СрокОплаты); 
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЦифровойСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОПоставщике, "ЦифровойСчет", Ложь);
	Если Не ЦифровойСчет Тогда
		// Расчетный счет
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Итоги по документу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", СуммаСНДСИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",  СуммаСНДСИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",        СуммаНДСИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
		
	// Отвественные лица
	РуководительДолжность = ?(ЗначениеЗаполнено(РеквизитыШапки.РуководительДолжностьНаименование), 
		РеквизитыШапки.РуководительДолжностьНаименование, "Руководитель");
	ЗаполнитьДанныеФизическогоЛица(ДеревоДокумента, "Продавец.Руководитель", РеквизитыШапки.РуководительСтруктураФИО, РуководительДолжность);
		
	// Итоговая строка
	ШаблонСтроки = НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСНДСИтог, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаСНДСИтог, РеквизитыШапки.Валюта);
	
	ДопДанные = Новый ТаблицаЗначений;
	ДопДанные.Колонки.Добавить("Идентификатор");
	ДопДанные.Колонки.Добавить("Значение");
		
	Если ЦифровойСчет Тогда
		СтрокаДопДанных = ДопДанные.Добавить();
		СтрокаДопДанных.Идентификатор = "ПолучЦифровойРубль";
		СтрокаДопДанных.Значение = СведенияОПоставщике.НомерСчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);

КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату101

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчетуНаОплату101.
Процедура ЗаполнитьДанныеПоСчетуНаОплату101(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Основания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание);
	ДанныеДокументов = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(Основания);
	ДанныеДокумента = ДанныеДокументов[0];
	
	// Шапка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Функция", "0"); // не является счетом-офертой
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеДокумента.НомерДокумента);
	
	БанковскийСчетПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтруктурнаяЕдиница");
	
	ЗаполнитьРеквизитыУчастникаСчетаНаОплату(ДеревоДанных, ДанныеДокумента.Получатель, ДанныеДокумента.ДатаДокумента,
		"ПолучательДенежныхСредств", БанковскийСчетПолучателя);
	ЗаполнитьРеквизитыУчастникаСчетаНаОплату(ДеревоДанных, ДанныеДокумента.Покупатель, ДанныеДокумента.ДатаДокумента,
		"Плательщик");
	ЗаполнитьРеквизитыУчастникаСчетаНаОплату(ДеревоДанных, ДанныеДокумента.Поставщик, ДанныеДокумента.ДатаДокумента,
		"Продавец");
	ЗаполнитьРеквизитыУчастникаСчетаНаОплату(ДеревоДанных, ДанныеДокумента.Покупатель, ДанныеДокумента.ДатаДокумента,
		"Покупатель");
	
	ТаблицаДокумента = ДанныеДокумента.ТаблицаДокумента;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоНаименований", ТаблицаДокумента.Количество());
	
	УчетАгентскогоНДСПокупателем = ПокупательВыступаетНалоговымАгентомПоУплатеНДС(ДанныеДокумента.ДоговорКонтрагента);
	
	// Основание
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоговорКонтрагента) Тогда
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДокумента.ДоговорКонтрагента, "Наименование, Номер, Дата");
		Если ДоговорУказан(ДанныеДоговора.Наименование) Тогда
			ТаблицаДанныхДоговора = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "Основания");
			СтрокаДанныхДоговора = ТаблицаДанныхДоговора.Добавить();
			СтрокаДанныхДоговора.Наименование = ДанныеДоговора.Наименование;
			СтрокаДанныхДоговора.Номер = ?(ЗначениеЗаполнено(ДанныеДоговора.Номер), ДанныеДоговора.Номер, "Без номера");
			СтрокаДанныхДоговора.Дата = ДанныеДоговора.Дата;
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДанныхДоговора, "Основания");
		КонецЕсли;
	КонецЕсли;
	
	// Таблица документа
	ДокументБезНДС = Истина;
	ТаблицаТоваров = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ТаблицаТоваров");
	Для Каждого Строка Из ТаблицаДокумента Цикл
		СтрокаТоваров = ТаблицаТоваров.Добавить();
		СтрокаТоваров.Наименование                 = Строка.НоменклатураНаименование;
		СтрокаТоваров.Количество                   = Строка.Количество;
		СтрокаТоваров.КодЕдиницыИзмерения          = Строка.ЕдиницаИзмеренияКод;
		СтрокаТоваров.НаименованиеЕдиницыИзмерения = Строка.ЕдиницаИзмеренияНаименование;
		
		СуммаСоСкидкой = Строка.Сумма - Строка.СуммаСкидки;
		
		СтрокаТоваров.СтоимостьБезНДС  = ?(ДанныеДокумента.СуммаВключаетНДС,
			СуммаСоСкидкой - Строка.СуммаНДС, СуммаСоСкидкой);
		
		СтрокаТоваров.СтавкаНДС = ?(УчетАгентскогоНДСПокупателем,
			СтавкаНДСИсчисляетсяНалоговымАгентом(),
			ИнтеграцияЭДОПовтИсп.СтавкаНДСПеречисление(Строка.СтавкаНДС));
		
		СтруктураСуммаНДС = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
			"ТаблицаТоваров.НомерСтроки.СуммаНДС");
		СтруктураСуммаНДСБезСкидки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
			"ТаблицаТоваров.НомерСтроки.СуммаНДСБезСкидки");
		СуммаНДСБезСкидки = 0;
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтруктураСуммаНДС.БезНДС          = БезНДС();
			СтруктураСуммаНДСБезСкидки.БезНДС = БезНДС();
		Иначе
			ДокументБезНДС = Ложь;
			СтруктураСуммаНДС.СуммаНалога = Строка.СуммаНДС;
			СуммаНДСБезСкидки = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, ДанныеДокумента.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС)), 2);
			СтруктураСуммаНДСБезСкидки.СуммаНалога = СуммаНДСБезСкидки;
		КонецЕсли;
		СтрокаТоваров.СуммаНДС = СтруктураСуммаНДС;
		
		СтрокаТоваров.СтоимостьСНДС = ?(ДанныеДокумента.СуммаВключаетНДС,
			СуммаСоСкидкой, СуммаСоСкидкой + Строка.СуммаНДС);
			
		СтрокаТоваров.СуммаСкидки   = Строка.СуммаСкидки;
		
		СтрокаТоваров.СтоимостьБезНДСБезСкидки = ?(ДанныеДокумента.СуммаВключаетНДС,
			Строка.Сумма - СуммаНДСБезСкидки, Строка.Сумма);
			
		СтрокаТоваров.СтоимостьСНДСБезСкидки = ?(ДанныеДокумента.СуммаВключаетНДС,
			Строка.Сумма, Строка.Сумма + СуммаНДСБезСкидки);
		
		СтрокаТоваров.СуммаНДСБезСкидки = СтруктураСуммаНДСБезСкидки;
		
		СтрокаТоваров.ЦенаЗаЕдиницуИзмерения = Окр(СтрокаТоваров.СтоимостьБезНДС / ?(СтрокаТоваров.Количество = 0, 1, СтрокаТоваров.Количество), 2);
		СтрокаТоваров.ЦенаБезСкидки = Окр(СтрокаТоваров.СтоимостьБезНДСБезСкидки / ?(СтрокаТоваров.Количество = 0, 1, СтрокаТоваров.Количество), 2);
		
		ДополнительныеСведения = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ТаблицаТоваров.НомерСтроки.ДополнительныеСведения");
		ДополнительныеСведения.Признак = ?(Строка.ЭтоУслуга, "3", "1");
		ДополнительныеСведения.АртикулТовара = Строка.НоменклатураАртикул;
		СтрокаТоваров.ДополнительныеСведения = ДополнительныеСведения;
		
		СтрокаТоваров.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Номенклатура, Строка.СтавкаНДС,
			Строка.Содержание);
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Всего к оплате
	ВсегоКОплате = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ВсегоКОплате");
	ВсегоСумма    = 0;
	ВсегоСуммаНДС = 0;
	Если ДанныеДокумента.СуммаСкидки = 0 Тогда
		ВсегоСумма    = ТаблицаДокумента.Итог("Сумма") - ТаблицаДокумента.Итог("СуммаСкидки");
		ВсегоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
	Иначе
		// Сумма скидки указана по документу в целом. 
		ДанныеОСкидкеПоДокументу = Новый Структура("СуммаСкидки, СуммаВключаетНДС");
		ЗаполнитьЗначенияСвойств(ДанныеОСкидкеПоДокументу, ДанныеДокумента);
		КопияТаблицыДокумента = ТаблицаДокумента.Скопировать();
		ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(КопияТаблицыДокумента, ДанныеОСкидкеПоДокументу);
		
		ВсегоСумма    = КопияТаблицыДокумента.Итог("Сумма");
		ВсегоСуммаНДС = КопияТаблицыДокумента.Итог("СуммаНДС");
	КонецЕсли;
	ВсегоКОплате.СуммаСкидки     = ДанныеДокумента.СуммаСкидки;
	ВсегоКОплате.СтоимостьБезНДС = ?(ДанныеДокумента.СуммаВключаетНДС, ВсегоСумма - ВсегоСуммаНДС, ВсегоСумма);
	ВсегоКОплате.СтоимостьСНДС   = ВсегоКОплате.СтоимостьБезНДС + ВсегоСуммаНДС;
	
	СтруктураВсегоНДС = ВсегоКОплате.СуммаНалога;
	Если ДокументБезНДС Тогда
		СтруктураВсегоНДС.БезНДС = БезНДС();
	Иначе
		СтруктураВсегоНДС.СуммаНалога = ВсегоСуммаНДС;
	КонецЕсли;
	ВсегоКОплате.СуммаНалога = СтруктураВсегоНДС;
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ВсегоКОплате, "ВсегоКОплате");
	
	// Денежная единица
	ДенежнаяЕдиница = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДенежнаяЕдиница");
	ДенежнаяЕдиница.КодВалюты          = ДанныеДокумента.ВалютаКод;
	ДенежнаяЕдиница.НаименованиеВалюты = ДанныеДокумента.ВалютаНаименование;
	ДенежнаяЕдиница.КурсВалюты         = ДанныеДокумента.КурсВзаиморасчетов;
	СтруктураВсегоНДС = ДенежнаяЕдиница.СуммаНалога;
	Если ДокументБезНДС Тогда
		СтруктураВсегоНДС.БезНДС = БезНДС();
	Иначе
		СтруктураВсегоНДС.СуммаНалога = ВсегоСуммаНДС;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДенежнаяЕдиница, "ДенежнаяЕдиница");
	
	// Дополнительные сведения
	ДополнительныеСведения = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДополнительныеСведения");
	
	ДополнительныеСведения.ОграничениеПоДатеОплаты = ДанныеДокумента.СрокОплаты;
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДополнительныеСведения, "ДополнительныеСведения");
	
	// Информационное поле
	ЦифровойСчет = ?(ЗначениеЗаполнено(БанковскийСчетПолучателя),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПолучателя, "ЦифровойСчет"), Ложь);
		
	Если ЦифровойСчет Тогда
		
		ТаблицаДополнительнойИнформации = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ИнформационноеПоле");
		ИДКошелька = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПолучателя, "НомерСчета");
		СтрокаИнформационногоПоля = ТаблицаДополнительнойИнформации.Добавить();
		
		ТаблицаТекстовойИнформации = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ИнформационноеПоле.НомерСтроки.ТекстоваяИнформация");
		СтрокаТекстовойИнформации = ТаблицаТекстовойИнформации.Добавить();
		СтрокаТекстовойИнформации.Идентификатор = "ПолучЦифровойРубль";
		СтрокаТекстовойИнформации.Значение = ИДКошелька;
		
		СтрокаИнформационногоПоля.ТекстоваяИнформация = ТаблицаТекстовойИнформации;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДополнительнойИнформации, "ИнформационноеПоле");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьСчетНаОплату101.
Процедура НайтиСоздатьСчетНаОплату101(ДеревоДанных, ДокументУчета, СпособОбработки, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументОбъект.НомерВходящегоДокумента = ДанныеЭД.НомерДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеЭД.ДатаДокумента;
	
	ДанныеОбъекта = Новый Структура("ДатаВходящегоДокумента", ДокументОбъект.ДатаВходящегоДокумента);
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "Покупатель", ОписаниеОшибки);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеОбъекта);
	ДокументОбъект.Контрагент = КонтрагентПоДаннымЭД(ДеревоДанных , "Продавец");
	
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	ТаблицаТоваров = ДокументОбъект.Товары.ВыгрузитьКолонки();
	ТаблицаТоваров.Колонки.Добавить("ЭтоУслуга");
	Для Каждого СтрокаТаблицы Из ДанныеЭД.ТаблицаТоваров Цикл
		СтрокаТовары = ТаблицаТоваров.Добавить();
		Если ЗначениеЗаполнено(СтрокаТаблицы.Сопоставление.НоменклатураИБ) Тогда
			СтрокаТовары.Номенклатура = СтрокаТаблицы.Сопоставление.НоменклатураИБ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			СтрокаТовары.ЭтоУслуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "Услуга");
		Иначе
			СтрокаТовары.ЭтоУслуга = Истина;
		КонецЕсли;
		
		СтрокаТовары.Содержание = СтрокаТаблицы.Наименование;
		СтрокаТовары.Количество = СтрокаТаблицы.Количество;
		СтрокаТовары.СуммаНДС   = СтрокаТаблицы.СуммаНДС.СуммаНалога;
		
		Если СтрокаТаблицы.СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
			Если ИспользуетсяОбратноеНачислениеНДС Тогда
				НДСИсчисляетсяНалоговымАгентом = Истина;
				СтрокаТовары.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(ДанныеЭД.ДатаДокумента);
				// Вычисляем НДС сверху по общей ставке
				СтрокаТовары.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезНДС, Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
			Иначе
				СтрокаТовары.СтавкаНДС = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС; 
		КонецЕсли;
		
		СтрокаТовары.Сумма = ?(ДокументОбъект.СуммаВключаетНДС, СтрокаТаблицы.СтоимостьСНДС, СтрокаТаблицы.СтоимостьБезНДС);
		СтрокаТовары.Цена = СтрокаТовары.Сумма / ?(СтрокаТовары.Количество = 0, 1, СтрокаТовары.Количество);
	КонецЦикла;
	
	// Если скидка задана в целом по документу
	ВсегоКОплате = ДанныеЭД.ВсегоКОплате;
	Если ВсегоКОплате.СуммаСкидки <> 0 Тогда
		ДанныеОСкидкеПоДокументу = Новый Структура("СуммаСкидки, СуммаВключаетНДС",
			ВсегоКОплате.СуммаСкидки, ДокументОбъект.СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТоваров, ДанныеОСкидкеПоДокументу);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТоваров);
	
	ДенежнаяЕдиница = ДанныеЭД.ДенежнаяЕдиница;
	ДокументОбъект.ВалютаДокумента = НайтиСсылкуНаОбъект("Валюты", ДенежнаяЕдиница.КодВалюты);
	ДокументОбъект.КурсВзаиморасчетов = ДенежнаяЕдиница.КурсВалюты;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение договора
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		ОтборПоВалюте = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			СтруктураПараметров.Вставить("УчетАгентскогоНДС", Новый Структура("ЗначениеОтбора", Истина));
			СтруктураПараметров.Вставить("ВидАгентскогоДоговора",
				Новый Структура("ЗначениеОтбора", Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров));
		Иначе
			СтруктураПараметров.Вставить("УчетАгентскогоНДС", Новый Структура("ЗначениеОтбора", Ложь));
		КонецЕсли;
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
			ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
	КонецЕсли;
	
	// Запись документа и установка ограничения по сроку оплаты
	ДополнительныеСведения = ДанныеЭД.ДополнительныеСведения;
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
		Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
			ДокументУчета = ДокументОбъект.Ссылка;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныеСведения.ОграничениеПоДатеОплаты) Тогда
			СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(ДокументОбъект.Ссылка,
				ДополнительныеСведения.ОграничениеПоДатеОплаты);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АктСверкиВзаиморасчетов

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияОтправителя()
Процедура ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияОтправителя(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Если Не ДоступенЭДОДляЭДАктСверкиВзаиморасчетов(Основание) Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ ""Акт сверки расчетов с контрагентом"" недоступен.'");
		СообщитьОбОшибкеПриФормированииЭД(Основание, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЭтоЭлектронныйДокумент,ЭтоДокументКонтрагента");
	
	Если Не ПараметрыОснования.ЭтоЭлектронныйДокумент Тогда
		ТекстСообщения = НСтр("ru = 'Не установлен признак составления в электронном виде.'");
		СообщитьОбОшибкеПриФормированииЭД(Основание, ТекстСообщения, Отказ);
		Возврат;
	ИначеЕсли ПараметрыОснования.ЭтоДокументКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Для входящего документа недоступно формирование электронного документа.'");
		СообщитьОбОшибкеПриФормированииЭД(Основание, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = Документы.АктСверкиВзаиморасчетов.ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеОтправителя();
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизитыДокумента = Результат[0].Выгрузить();
	Если ТаблицаРеквизитыДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для формирования электронного документа.'");
		СообщитьОбОшибкеПриФормированииЭД(Основание, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ТаблицаРеквизитыДокумента[0];
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаНачалаПериодаСверки", РеквизитыДокумента.ДатаНачала);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаОкончанияПериодаСверки", РеквизитыДокумента.ДатаОкончания);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"КодВалюты", РеквизитыДокумента.КодВалюты, ТекстОшибкиНекорректнаяВалюта());
	ЗаполнитьРеквизитыУчастника(ДеревоДанных, РеквизитыДокумента.Организация, РеквизитыДокумента.Дата, "Отправитель");
	ЗаполнитьРеквизитыУчастника(ДеревоДанных, РеквизитыДокумента.Контрагент, РеквизитыДокумента.Дата, "Получатель");

	ТаблицаИтоги = Результат[1].Выгрузить();
	СальдоНаНачалоПериодаДебет = 0;
	СальдоНаНачалоПериодаКредит = 0;
	Если РеквизитыДокумента.ОстатокНаНачало > 0 Тогда
		СальдоНаНачалоПериодаДебет = РеквизитыДокумента.ОстатокНаНачало;
	Иначе
		СальдоНаНачалоПериодаКредит = - РеквизитыДокумента.ОстатокНаНачало;
	КонецЕсли;
	ОборотПоДебету   = ТаблицаИтоги.Итог("Дебет");
	ОборотПоКредиту = ТаблицаИтоги.Итог("Кредит");
	СальдоНаКонецПериодаДебет = СальдоНаНачалоПериодаДебет + ОборотПоДебету;
	СальдоНаКонецПериодаКредит = СальдоНаНачалоПериодаКредит + ОборотПоКредиту;
	
	Если СальдоНаКонецПериодаДебет > СальдоНаКонецПериодаКредит Тогда
		СальдоНаКонецПериодаДебет = СальдоНаКонецПериодаДебет - СальдоНаКонецПериодаКредит;
		СальдоНаКонецПериодаКредит = 0;
	Иначе
		СальдоНаКонецПериодаКредит = СальдоНаКонецПериодаКредит - СальдоНаКонецПериодаДебет;
		СальдоНаКонецПериодаДебет = 0;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаНачалоПериодаДебет", СальдоНаНачалоПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаНачалоПериодаКредит", СальдоНаНачалоПериодаКредит);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.ОборотПоДебету", ОборотПоДебету);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.ОборотПоКредиту", ОборотПоКредиту);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаКонецПериодаДебет", СальдоНаКонецПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОтправителя.СальдоНаКонецПериодаКредит", СальдоНаКонецПериодаКредит);
	
	СведенияПоДоговорам = НовыйТаблицаСведенияПоДоговорам();
	НомерСтрокиПоДоговору = 0;
	
	ВыборкаПоДоговорам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоговорам.Следующий() Цикл
		
		НомерСтрокиПоДоговору = НомерСтрокиПоДоговору + 1;
		НомерСтрокиПоДокументам = 0;

		СтрокаПоДоговору = СведенияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДоговору, ВыборкаПоДоговорам);
		СтрокаПоДоговору.НомерСтроки = НомерСтрокиПоДоговору;
		СтрокаПоДоговору.ОписаниеДоговора = Строка(ВыборкаПоДоговорам.ВидДоговора);
		
		ТаблицаПоДокументам = НовыйТаблицаСведенияПоДокументам();
		СтрокаПоДоговору.СведенияПоДокументам = ТаблицаПоДокументам;
		
		ВыборкаПоДокументам = ВыборкаПоДоговорам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл

			НомерСтрокиПоДокументам = НомерСтрокиПоДокументам + 1;
			
			СтрокаПоДокументу = ТаблицаПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоДокументу, ВыборкаПоДокументам);
			СтрокаПоДокументу.НомерСтроки = НомерСтрокиПоДокументам;
			
			ТаблицаПоОперациям = НовыйТаблицаСведенияПоОперациям();
			СтрокаПоДокументу.СведенияПоОперациям = ТаблицаПоОперациям;
			
			СтрокаПоОперациям = ТаблицаПоОперациям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоОперациям, ВыборкаПоДокументам);
			СтрокаПоОперациям.НомерСтроки = 1;
			СтрокаПоОперациям.ПорядковыйНомерСтроки = 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияПоДоговорам, "СведенияОтправителя.СведенияПоДоговорам");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя()
Процедура ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя(ОбъектУчета, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступенЭДОДляЭДАктСверкиВзаиморасчетов(ОбъектУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ ""Акт сверки расчетов с контрагентом"" недоступен.'");
		СообщитьОбОшибкеПриФормированииЭД(ОбъектУчета, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, "ЭтоЭлектронныйДокумент,ЭтоДокументКонтрагента");
	
	Если Не ПараметрыОснования.ЭтоЭлектронныйДокумент Тогда
		ТекстСообщения = НСтр("ru = 'Не установлен признак составления в электронном виде.'");
		СообщитьОбОшибкеПриФормированииЭД(ОбъектУчета, ТекстСообщения, Отказ);
		Возврат;
	ИначеЕсли Не ПараметрыОснования.ЭтоДокументКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Формирование ответного титула доступно только для полученного электронного документа.'");
		СообщитьОбОшибкеПриФормированииЭД(ОбъектУчета, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбъектУчета);
	Запрос.Текст = Документы.АктСверкиВзаиморасчетов.ТекстЗапросаДляФормированияЭлектронногоДокументаДанныеПолучателя();
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизитыДокумента = Результат[0].Выгрузить();
	Если ТаблицаРеквизитыДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для формирования электронного документа.'");
		СообщитьОбОшибкеПриФормированииЭД(ОбъектУчета, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ТаблицаРеквизитыДокумента[0];
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ПризнакНаличияРазногласий", РеквизитыДокумента.ЕстьРасхождения И Не РеквизитыДокумента.СверкаСогласована);
	
	ТаблицаИтоги = Результат[1].Выгрузить();
	
	СальдоНаНачалоПериодаДебет = 0;
	СальдоНаНачалоПериодаКредит = 0;
	Если РеквизитыДокумента.ОстатокНаНачало > 0 Тогда
		СальдоНаНачалоПериодаДебет = РеквизитыДокумента.ОстатокНаНачало;
	Иначе
		СальдоНаНачалоПериодаКредит = - РеквизитыДокумента.ОстатокНаНачало;
	КонецЕсли;
	ОборотПоДебету   = ТаблицаИтоги.Итог("Дебет");
	ОборотПоКредиту = ТаблицаИтоги.Итог("Кредит");
	СальдоНаКонецПериодаДебет = СальдоНаНачалоПериодаДебет + ОборотПоДебету;
	СальдоНаКонецПериодаКредит = СальдоНаНачалоПериодаКредит + ОборотПоКредиту;
	
	Если СальдоНаКонецПериодаДебет > СальдоНаКонецПериодаКредит Тогда
		СальдоНаКонецПериодаДебет = СальдоНаКонецПериодаДебет - СальдоНаКонецПериодаКредит;
		СальдоНаКонецПериодаКредит = 0;
	Иначе
		СальдоНаКонецПериодаКредит = СальдоНаКонецПериодаКредит - СальдоНаКонецПериодаДебет;
		СальдоНаКонецПериодаДебет = 0;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаНачалоПериодаДебет", СальдоНаНачалоПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаНачалоПериодаКредит", СальдоНаНачалоПериодаКредит);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.ОборотПоДебету", ОборотПоДебету);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.ОборотПоКредиту", ОборотПоКредиту);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаКонецПериодаДебет", СальдоНаКонецПериодаДебет);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПолучателя.СальдоНаКонецПериодаКредит", СальдоНаКонецПериодаКредит);
	
	СведенияПоДоговорам = НовыйТаблицаСведенияПоДоговорам();
	НомерСтрокиПоДоговору = 0;
	
	ВыборкаПоДоговорам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДоговорам.Следующий() Цикл
		
		НомерСтрокиПоДоговору = НомерСтрокиПоДоговору + 1;
		НомерСтрокиПоДокументам = 0;

		СтрокаПоДоговору = СведенияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДоговору, ВыборкаПоДоговорам);
		СтрокаПоДоговору.НомерСтроки = НомерСтрокиПоДоговору;
		СтрокаПоДоговору.ОписаниеДоговора = Строка(ВыборкаПоДоговорам.ВидДоговора);
		
		ТаблицаПоДокументам = НовыйТаблицаСведенияПоДокументам();
		СтрокаПоДоговору.СведенияПоДокументам = ТаблицаПоДокументам;
		
		ВыборкаПоДокументам = ВыборкаПоДоговорам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл

			НомерСтрокиПоДокументам = НомерСтрокиПоДокументам + 1;
			
			СтрокаПоДокументу = ТаблицаПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоДокументу, ВыборкаПоДокументам);
			СтрокаПоДокументу.НомерСтроки = НомерСтрокиПоДокументам;
			
			ТаблицаПоОперациям = НовыйТаблицаСведенияПоОперациям();
			СтрокаПоДокументу.СведенияПоОперациям = ТаблицаПоОперациям;
			
			СтрокаПоОперациям = ТаблицаПоОперациям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоОперациям, ВыборкаПоДокументам);
			СтрокаПоОперациям.НомерСтроки = 1;
			СтрокаПоОперациям.ПорядковыйНомерСтроки = 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияПоДоговорам, "СведенияПолучателя.СведенияПоДоговорам");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоДанных, ДокументУчета, СпособОбработки, ОписаниеОшибки)
Процедура НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоДанных, ДокументУчета, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗаполнения = ПодготовитьСтруктуруДляАктСверкиВзаиморасчетовВходящий(ДеревоДанных, ОписаниеОшибки);
	ЗаполнитьДокументАктСверкиВзаиморасчетовВходящий(ДокументУчета, ДанныеДляЗаполнения, ОписаниеОшибки);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьАктСверкиВзаиморасчетовПоДаннымПолучателя(ДанныеДокумента, ОбъектыУчета) 
Процедура ЗаполнитьАктСверкиВзаиморасчетовПоДаннымПолучателя(ДанныеДокумента, ОбъектыУчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗаполнения = ПодготовитьСтруктуруДляАктСверкиВзаиморасчетовПолученОтветныйТитул(ДанныеДокумента, ОбъектыУчета);
	ЗаполнитьДокументАктСверкиВзаиморасчетовИсходящийОтветнымТитулом(ДанныеДляЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетКомиссионера

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//    Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//    колонки ДополнительныеРеквизиты в таблице товаров.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Дата КАК Дата,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента.Код КАК ВалютаКод,
	|	ОтчетКомитентуОПродажах.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетКомитентуОПродажах.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.СпособРасчетаКомиссионногоВознаграждения КАК СпособРасчетаКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.ПроцентКомиссионногоВознаграждения КАК ПроцентКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.Организация КАК Организация,
	|	ОтчетКомитентуОПродажах.Контрагент КАК Контрагент,
	|	ОтчетКомитентуОПродажах.УдержатьВознаграждение КАК УдержатьВознаграждение,
	|	ОтчетКомитентуОПродажах.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОтчетКомитентуОПродажах.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ОтчетКомитентуОПродажах.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Сумма КАК СуммаПродажи,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.Покупатель КАК ПокупательСсылка,
	|	Товары.Цена КАК ЦенаПродажи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЦенаПоступления КАК Цена,
	|	Товары.СуммаПоступления КАК Сумма,
	|	Товары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.ДатаРеализации КАК ДатаРеализации,
	|	""-"" КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.ДокументРасчетов КАК ДокументРасчетов
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахДенежныеСредства.ВидОтчетаПоПлатежам КАК ВидОтчетаПоПлатежам,
	|	ОтчетКомитентуОПродажахДенежныеСредства.Сумма КАК Сумма,
	|	ОтчетКомитентуОПродажахДенежныеСредства.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетКомитентуОПродажахДенежныеСредства.СуммаНДС КАК СуммаНДС,
	|	ОтчетКомитентуОПродажахДенежныеСредства.Покупатель КАК Покупатель,
	|	ОтчетКомитентуОПродажахДенежныеСредства.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.ДенежныеСредства КАК ОтчетКомитентуОПродажахДенежныеСредства
	|ГДЕ
	|	ОтчетКомитентуОПродажахДенежныеСредства.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документооборот для отчета комитенту по закупкам не поддерживается.'");
		СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РеквизитыШапки.КурсВзаиморасчетов);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);	
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.СуммаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
	
	СведенияОКомитенте = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", РеквизитыШапки.Дата);
	
	ДанныеПрослеживаемости = Документы.ОтчетКомитентуОПродажах.РНПТРеализованныхПрослеживаемыхТоваров(СсылкаНаОбъект);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("Страна");
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СтавкаНДС);
		ЗаполнитьСведенияОПрослеживаемостиВЭДОтчетОКомиссионныхПродажах(СтрокаТаблицы, ДанныеПрослеживаемости);
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		ИндексСтроки = Число(Товар.Значение) - 1;
		Покупатель = ТаблицаТоваров[ИндексСтроки].ПокупательСсылка;
		Если ЗначениеЗаполнено(Покупатель) Тогда
			ЗаполнитьДанныеУчастника(Товар, ПолучитьДанныеЮрФизЛица(Покупатель),
				"Товары.НомерСтроки.Покупатель", "Юр", РеквизитыШапки.Дата);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не указан Покупатель в строке %1.'");
			СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, СтрШаблон(ШаблонСообщения, ИндексСтроки + 1), Отказ);
		КонецЕсли;
		
		ДатаРеализации = ТаблицаТоваров[ИндексСтроки].ДатаРеализации;
		Если ЗначениеЗаполнено(ДатаРеализации) Тогда
			СтрокаДопДанных = Товар.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
			ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ДатаРеализации", ДатаРеализации), Истина);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не указана Дата реализации в строке %1.'");
			СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, СтрШаблон(ШаблонСообщения, ИндексСтроки + 1), Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	
	ДопДанные = Новый ТаблицаЗначений;
	ДопДанные.Колонки.Добавить("Идентификатор");
	ДопДанные.Колонки.Добавить("Значение");
	
	СтрокаДопДанных = ДопДанные.Добавить();	
	СтрокаДопДанных.Идентификатор = "ПлательщикНДС";
	СтрокаДопДанных.Значение = ПлательщикНДС;
	
	СтрокаДопДанных = ДопДанные.Добавить();	
	СтрокаДопДанных.Идентификатор = "УдержатьВознаграждение";
	СтрокаДопДанных.Значение = РеквизитыШапки.УдержатьВознаграждение;
	
	// Табличная часть "Денежные средства"
	Если Не РезультатЗапроса[2].Пустой() Тогда
		
		ТаблицаДС = Новый ТаблицаЗначений;
		ТаблицаДС.Колонки.Добавить("ВидОтчетаПоПлатежам");
		ТаблицаДС.Колонки.Добавить("Сумма");
		ТаблицаДС.Колонки.Добавить("СтавкаНДС");
		ТаблицаДС.Колонки.Добавить("СуммаНДС");
		ТаблицаДС.Колонки.Добавить("Покупатель");
		ТаблицаДС.Колонки.Добавить("ДатаСобытия");
		
		СоответствиеСтавокНДС = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		ВыборкаДС = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДС.Следующий() Цикл
			
			СтрокаДС = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДС, ВыборкаДС,, "ВидОтчетаПоПлатежам, СтавкаНДС, Покупатель");
			Если ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "Аванс";
			ИначеЕсли ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "Оплата";
			ИначеЕсли ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "ЗачетАванса";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДС.СтавкаНДС) Тогда
				СтрокаДС.СтавкаНДС = СоответствиеСтавокНДС[ВыборкаДС.СтавкаНДС];
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДС.Покупатель) Тогда
				СтрокаДС.Покупатель = ДанныеКонтрагентаСтруктурой(ВыборкаДС.Покупатель, РеквизитыШапки.Дата);
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем данные табличной части "Денежные средства" в доп. данные электронного документа
		ДанныеДС = ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаДС);
		
		СтрокаДопДанных = ДопДанные.Добавить();	
		СтрокаДопДанных.Идентификатор = "ДенежныеСредства";
		СтрокаДопДанных.Значение = ДанныеДС;
		
	КонецЕсли;
	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.ВалютаДокумента);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область АктОРасхождениях

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя()
//
Процедура ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.АктОРасхождениях.ПолучитьДанныеДляПечатнойФормыТОРГ2(МассивОбъектов);
	
	ВыборкаШапка = ДанныеДляФормированияЭД.ДанныеПечати.Выбрать();
	Если Не ВыборкаШапка.Следующий() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Наименование документа.
	НаименованиеДокумента = НСтр("ru = 'Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеДокумента", НаименованиеДокумента);
	
	// Обстоятельства составления.
	Если ВыборкаШапка.ВидОперации = Перечисления.ВидыОперацийАктОРасхождениях.РасхожденияПриПриемке Тогда
		ОбстоятельстваСоставления = "1";
	Иначе
		ОбстоятельстваСоставления = "2";
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваСоставленияДокумента", ОбстоятельстваСоставления);
	
	// Номер документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.НомерДокумента, Истина, Ложь));

	// Дата документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", ВыборкаШапка.ДатаДокумента);
	
	// Покупатель.
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр", ВыборкаШапка.ДатаДокумента);
	
	// Грузополучатель.
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузополучатель) Тогда
		СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузополучатель, ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель", "Факт", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
		
	// Составитель.
	СоставительДокументаНаименование = СведенияОПокупателе.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПокупателе.КПП),
		СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП),
		СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПокупателе.ИНН));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "СоставительДокументаНаименование", СоставительДокументаНаименование);
		
	// Поставщик.
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Поставщик, ВыборкаШапка.ДатаДокумента);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "Продавец", "Юр", ВыборкаШапка.ДатаДокумента);
	
	// Грузоотправитель.
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузоотправитель, ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "Грузополучатель", "Факт", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
	
	// Сведения по транспортным документам.
	СведенияПоТранспортнымДокументам = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПоТранспортнымДокументам");
	ВыборкаТовары = ДанныеДляФормированияЭД.ДанныеТовары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументам) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СведенияПоТранспортнымДокументам.Добавить();
		НоваяСтрока.ВидУпаковки                  = "";
		НоваяСтрока.Количество                   = Окр(ВыборкаТовары.КоличествоПоДокументам); // количество мест груза, должен быть целым числом 
		НоваяСтрока.НаименованиеГруза            = ВыборкаТовары.НоменклатураНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТовары.КодПоОКЕИ;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияПоТранспортнымДокументам, "СведенияПоТранспортнымДокументам");
	
	// Сопроводительный документ.
	ВыборкаДанныеСчетовФактур = ДанныеДляФормированияЭД.ДанныеСчетовФактур.Выбрать();
	Если ВыборкаДанныеСчетовФактур.Следующий() Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Наименование", "Счет-фактура");
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Наименование", "Товарная накладная");
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'В документе поступления не заполнен номер входящего документа.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Номер",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.НомерВходящегоДокумента, Истина, Ложь), ТекстОшибки);
	ТекстОшибки = НСтр("ru = 'В документе поступления не заполнена дата входящего документа.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Дата", ВыборкаШапка.ДатаВходящегоДокумента, ТекстОшибки);
	
	// Сведения о лице, принявшем товар.
	Кладовщик = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(ВыборкаШапка.Склад, ВыборкаШапка.ДатаДокумента);
	Если ЗначениеЗаполнено(Кладовщик) Тогда
		ОбщийПуть = "СведенияОЛицеПринявшемТовар.РаботникОрганизацииПокупателя.";
		ДанныеКладовщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Кладовщик, "Фамилия, Имя, Отчество");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Фамилия", ДанныеКладовщика.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Имя", ДанныеКладовщика.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Отчество", ДанныеКладовщика.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "ОснованиеПолномочий", НСтр("ru = 'Должностные обязанности'"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ОбщийПуть + "Должность", НСтр("ru = 'Кладовщик'"));
	КонецЕсли;
	
	// Краткое описание события.
	ОписаниеСобытия = НСтр("ru = 'При приемке указанных в документе ценностей (результатов работ) установлены расхождения с сопроводительными документами.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "КраткоеОписаниеСобытия", ОписаниеСобытия);
	
	// Результаты приемки.
	РезультатыПриемки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "РезультатыПриемки");
		
	ВыборкаТовары.Сбросить();
	ТаблицаКодовМаркировки     = ДанныеДляФормированияЭД.ШтрихкодыУпаковок.Выгрузить();
	ТаблицаУпаковкиРасхождения = ДанныеДляФормированияЭД.УпаковкиРасхождения.Выгрузить();
	ТаблицаУпаковкиИзлишек     = ТаблицаУпаковкиРасхождения.Скопировать(Новый Структура("ТипРасхождения", Перечисления.ТипыРасхождений.Излишек));
	ТаблицаУпаковкиНедостача   = ТаблицаУпаковкиРасхождения.Скопировать(Новый Структура("ТипРасхождения", Перечисления.ТипыРасхождений.Недостача));
	РасхожденияВСуммеИКоличестве = Ложь;
	РазрядностьЦеныВФорматеЭД = 11;
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаТовары.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РезультатыПриемки.Добавить();
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТовары.КодПоОКЕИ;
		
		НоваяСтрока.Товар = Новый Структура;
		НоваяСтрока.Товар.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
		НоваяСтрока.Товар.Вставить("Артикул"     , ВыборкаТовары.НоменклатураПоставщикаАртикул);
		НоваяСтрока.Товар.Вставить("Код"         , ВыборкаТовары.Код);
		
		СтавкаНДСЧислом = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ВыборкаТовары.СтавкаНДС);
		
		// По документу.
		НоваяСтрока.ПоДокументу = Новый Структура;
		НоваяСтрока.ПоДокументу.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументам);
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(ВыборкаТовары.Цена,
			ВыборкаТовары.ЦенаВключаетНДСПоДокументам, Ложь, СтавкаНДСЧислом);
		НоваяСтрока.ПоДокументу.Вставить("Цена", Окр(Цена, РазрядностьЦеныВФорматеЭД));
		НоваяСтрока.ПоДокументу.Вставить("СтавкаНДС" , ВыборкаТовары.СтавкаНДС);
		НоваяСтрока.ПоДокументу.Вставить("СуммаНДС"  , ВыборкаТовары.СуммаНДСПоДокументам);
		НоваяСтрока.ПоДокументу.Вставить("СуммаСНДС" ,
			?(ВыборкаТовары.ЦенаВключаетНДСПоДокументам, ВыборкаТовары.СуммаПоДокументам, ВыборкаТовары.СуммаПоДокументам + ВыборкаТовары.СуммаНДСПоДокументам));
		
		// По факту.
		НоваяСтрока.ПоФакту = Новый Структура;
		НоваяСтрока.ПоФакту.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту);
		ЦенаПоФакту = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(ВыборкаТовары.ЦенаПоФакту,
			ВыборкаТовары.ЦенаВключаетНДСПоФакту, Ложь, СтавкаНДСЧислом);
		НоваяСтрока.ПоФакту.Вставить("Цена", Окр(ЦенаПоФакту, РазрядностьЦеныВФорматеЭД));
		НоваяСтрока.ПоФакту.Вставить("СтавкаНДС" , ВыборкаТовары.СтавкаНДС);
		НоваяСтрока.ПоФакту.Вставить("СуммаНДС"  , ВыборкаТовары.СуммаНДСПоФакту);
		НоваяСтрока.ПоФакту.Вставить("СуммаСНДС" ,
			?(ВыборкаТовары.ЦенаВключаетНДСПоФакту, ВыборкаТовары.СуммаПоФакту, ВыборкаТовары.СуммаПоФакту + ВыборкаТовары.СуммаНДСПоФакту));
		ЗаполнитьСведенияОМаркировкеВАктеОРасхождениях(НоваяСтрока.ПоФакту, ВыборкаТовары, ТаблицаКодовМаркировки);
		
		Если Не РасхожденияВСуммеИКоличестве Тогда
			РасхожденияВСуммеИКоличестве = Не (НоваяСтрока.ПоДокументу.Количество = НоваяСтрока.ПоФакту.Количество
				И НоваяСтрока.ПоДокументу.СуммаСНДС = НоваяСтрока.ПоФакту.СуммаСНДС);
		КонецЕсли;
		
		// Излишки и недостача.
		НоваяСтрока.Излишки = Новый Структура;
		НоваяСтрока.Недостача = Новый Структура;
		Если ВыборкаТовары.КоличествоПоФакту > ВыборкаТовары.КоличествоПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту - ВыборкаТовары.КоличествоПоДокументам);
			ЗаполнитьСведенияОМаркировкеВАктеОРасхождениях(НоваяСтрока.Излишки, ВыборкаТовары, ТаблицаУпаковкиИзлишек);
		ИначеЕсли ВыборкаТовары.КоличествоПоФакту < ВыборкаТовары.КоличествоПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументам - ВыборкаТовары.КоличествоПоФакту);
			ЗаполнитьСведенияОМаркировкеВАктеОРасхождениях(НоваяСтрока.Недостача, ВыборкаТовары, ТаблицаУпаковкиНедостача);
		КонецЕсли;
		Если ВыборкаТовары.СуммаНДСПоФакту > ВыборкаТовары.СуммаНДСПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоФакту - ВыборкаТовары.СуммаНДСПоДокументам);
		ИначеЕсли ВыборкаТовары.СуммаНДСПоФакту < ВыборкаТовары.СуммаНДСПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументам - ВыборкаТовары.СуммаНДСПоФакту);
		КонецЕсли;
		Если ВыборкаТовары.СуммаПоФакту > ВыборкаТовары.СуммаПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаСНДС", ВыборкаТовары.СуммаПоФакту - ВыборкаТовары.СуммаПоДокументам);
		ИначеЕсли ВыборкаТовары.СуммаПоФакту < ВыборкаТовары.СуммаПоДокументам Тогда
			НоваяСтрока.Недостача.Вставить("СуммаСНДС", ВыборкаТовары.СуммаПоДокументам - ВыборкаТовары.СуммаПоФакту);
		КонецЕсли;
		
		// Сопоставление.
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			ВыборкаТовары.Номенклатура, ВыборкаТовары.СтавкаНДС, ВыборкаТовары.НоменклатураНаименование, ВыборкаШапка.Поставщик);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, РезультатыПриемки, "РезультатыПриемки");
	
	// Обстоятельства использования.
	Если РасхожденияВСуммеИКоличестве Тогда
		ОбстоятельстваИспользования = "3000";
	Иначе
		ОбстоятельстваИспользования = "4000";
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваИспользованияДокумента", ОбстоятельстваИспользования);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОРасхождениях_ФНС_2019();
//
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.АктОРасхожденияхПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	// Шапка.
	ДокументОбъект.НомерВходящегоДокумента = ДанныеЭД.НомерДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеЭД.ДатаДокумента;
	
	ДанныеОбъекта = Новый Структура("ДатаВходящегоДокумента", ДокументОбъект.ДатаВходящегоДокумента);
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "Продавец", ОписаниеОшибки);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеОбъекта);
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных , "Покупатель");
	
	ДокументОснование = Неопределено;
	СопроводительныйДокумент = ДанныеЭД.СведенияОбОсмотреГруза.СопроводительныйДокумент;
	Если ЗначениеЗаполнено(СопроводительныйДокумент.Номер) Тогда
		ДокументОснование = НайтиРеализациюТоваровУслуг(ДокументОбъект.Организация, СопроводительныйДокумент.Номер, СопроводительныйДокумент.Дата);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОбъект.ДокументРеализации = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументРеализации) Тогда
		ДокументОбъект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументРеализации, "СуммаВключаетНДС");
	Иначе
		ДокументОбъект.СуммаВключаетНДС = Истина;
	КонецЕсли;

	// Товары.
	ЗначенияШтрихкодов = Новый Массив;
	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаПриемки Из ДанныеЭД.РезультатыПриемки Цикл
		Номенклатура = Неопределено;
		Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.НоменклатураИБ) Тогда
			Номенклатура = СтрокаПриемки.Сопоставление.НоменклатураИБ;
		КонецЕсли;
		
		ЭтоУслуга = ЭтоУслуга(Номенклатура);
		
		Если ЭтоУслуга Тогда
			СтрокаТовара = ДокументОбъект.Услуги.Добавить();
		Иначе
			СтрокаТовара = ДокументОбъект.Товары.Добавить();
		КонецЕсли;
		СтрокаТовара.Номенклатура = Номенклатура;
		
		СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоДокументу.СтавкаНДС;
		
		СтавкаНДСЧислом = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПриемки.ПоДокументу.СтавкаНДС);
		
		СтрокаТовара.КоличествоПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
		СтрокаТовара.СуммаПоДокументу      = ?(ДокументОбъект.СуммаВключаетНДС, СтрокаПриемки.ПоДокументу.СуммаСНДС,
			СтрокаПриемки.ПоДокументу.СуммаСНДС - СтрокаПриемки.ПоДокументу.СуммаНДС);
		СтрокаТовара.СуммаНДСПоДокументу   = СтрокаПриемки.ПоДокументу.СуммаНДС;
		СтрокаТовара.ЦенаПоДокументу       = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаПриемки.ПоДокументу.Цена, Ложь, ДокументОбъект.СуммаВключаетНДС, СтавкаНДСЧислом);
		
		СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
		СтрокаТовара.Сумма      = ?(ДокументОбъект.СуммаВключаетНДС, СтрокаПриемки.ПоФакту.СуммаСНДС, 
			СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС);
		СтрокаТовара.СуммаНДС   = СтрокаПриемки.ПоФакту.СуммаНДС;
		СтрокаТовара.Цена       = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаПриемки.ПоФакту.Цена, Ложь, ДокументОбъект.СуммаВключаетНДС, СтавкаНДСЧислом);
		
		ПолучитьЗначенияШтрихкодов(ЗначенияШтрихкодов, СтрокаПриемки.ПоФакту);
		
		СтрокаТовара.ЕстьВДокументеРеализации = Истина;
	КонецЦикла;
	
	ЗаполнитьШтрихкодыУпаковок(ДокументОбъект.ШтрихкодыУпаковок, ЗначенияШтрихкодов);
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
		
		Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
			ДокументУчета = ДокументОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктПриемкиВыполненныхСтроительныхРабот

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОПриемкеВыполненныхРаботВСтроительстве_ИнформацияПодрядчика
// 
Процедура ЗаполнитьДанныеАктОПриемкеВыполненныхРаботВСтроительстве_ИнформацияПодрядчика(СсылкаНаОбъект, КонструкторЭД, Отказ) Экспорт
	
	ДанныеДляФормированияЭД = Документы.РеализацияТоваровУслуг.ДанныеДляПечатиАктаОПриемкеВыполненныхСтроительныхРабот(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект));
	
	ДанныеДокумента = ДанныеДляФормированияЭД[0];
	
	ОбработчикОшибок = КонструкторЭД.ОбработчикОшибок;
	ОбработчикОшибок.ПараметрыСвязиПоУмолчанию(СсылкаНаОбъект);
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	ИнформацияПодрядчика.Составитель = ДанныеДокумента.ПредставлениеПодрядчика;
	ОбработчикОшибок.УстановитьСвязь(ИнформацияПодрядчика, "Составитель", "Объект.Организация");
	
	ИнформацияПодрядчика.НомерАкта         = ДанныеДокумента.НомерАкта;
	ИнформацияПодрядчика.ДатаАкта          = ДанныеДокумента.Дата;
	ИнформацияПодрядчика.Стройка           = ДанныеДокумента.ОбъектВыполненияРаботНаименование;
	ИнформацияПодрядчика.КодВалютыДоговора = ДанныеДокумента.ВалютаКод;
	
	ДоговорПодряда = КонструкторЭД.НовоеОписаниеДокумента();
	ДоговорПодряда.Дата = ДанныеДокумента.ДатаДоговора;
	ДоговорПодряда.Наименование = ДанныеДокумента.НаименованиеДоговора;
	ДоговорПодряда.Номер = ДанныеДокумента.НомерДоговора;
	ИнформацияПодрядчика.ДоговорПодряда = ДоговорПодряда;
	
	ИнформацияПодрядчика.Подрядчик = ДанныеУчастникаАктаПриемкиРабот(ДанныеДокумента.Организация, КонструкторЭД,
		ДанныеДокумента.Дата);
	
	ИнформацияПодрядчика.Заказчик = ДанныеУчастникаАктаПриемкиРабот(ДанныеДокумента.Контрагент, КонструкторЭД,
		ДанныеДокумента.Дата);
	
	Если ЗначениеЗаполнено(ДанныеДокумента.АдресОбъекта) Тогда
		ИнформацияПодрядчика.МестоВыполненияРабот = КонструкторЭД.НовыйАдресВСвободнойФорме(
			ДанныеДокумента.АдресОбъектаКодСтраны, ДанныеДокумента.АдресОбъекта);
	КонецЕсли;
	
	ИнформацияПодрядчика.Содержание = НСтр("ru = 'Выполнение работ'");
	
	ИнформацияПодрядчика.НачалоРабот    = ДанныеДокумента.ПериодНачалаРабот;
	ИнформацияПодрядчика.ОкончаниеРабот = ДанныеДокумента.ПериодОкончанияРабот;
	
	ИнформацияПодрядчика.Валюта = КонструкторЭД.НоваяВалюта(ДанныеДокумента.ВалютаКод,
		ДанныеДокумента.ВалютаНаименование);
	
	СуммаНДСВРазбивкеПоСтавкам = Новый Соответствие;
	Для Каждого СтрокаРаздела Из ДанныеДокумента.ДанныеРаздела Цикл
		Раздел = КонструкторЭД.НовыйРаздел();
		ИнформацияПодрядчика.ВыполненныеРаботы.Добавить(Раздел);
		Раздел.Наименование = СтрокаРаздела.РаботыНаименование;
		Раздел.Сумма        = СтрокаРаздела.Сумма;
		Раздел.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(СтрокаРаздела.Работы, СтрокаРаздела.СтавкаНДС);
		
		СтавкаНДСАктаПриемки = Неопределено;
		Если СтрокаРаздела.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтавкаНДСАктаПриемки = БезНДС();
		Иначе
			СтавкаНДСАктаПриемки = Строка(СтрокаРаздела.СтавкаНДС);
		КонецЕсли;
		ПозицииАкта = Новый Массив;
		Для Каждого СтрокаСметы Из СтрокаРаздела.ДанныеПоСмете Цикл
			Работа = КонструкторЭД.НоваяРабота();
			Раздел.ВыполненныеРаботы.Добавить(Работа);
			Если ЗначениеЗаполнено(СтрокаСметы.ЕдиницаИзмеренияКод) Тогда
				ЕдиницаИзмерения = КонструкторЭД.НоваяЕдиницаИзмерения();
				ЕдиницаИзмерения.Код          = СтрокаСметы.ЕдиницаИзмеренияКод;
				ЕдиницаИзмерения.Наименование = СтрокаСметы.ЕдиницаИзмеренияНаименование;
				Работа.ЕдиницаИзмерения = ЕдиницаИзмерения;
			КонецЕсли;
			Работа.Количество       = СтрокаСметы.Количество;
			Работа.Наименование     = СтрокаСметы.НоменклатураНаименование;
			КонструкторЭД.ОбработчикОшибок.УстановитьСвязь(Работа, "Наименование",
				"Объект.СтроительноМонтажныеРаботы.Номенклатура", СтрокаСметы.НомерСтроки);
			Работа.ПозицияПоАкту    = Формат(СтрокаСметы.НомерСтроки, "ЧГ=0");
			Работа.Сумма            = СтрокаСметы.Сумма;
			Работа.ТипЗатрат        = КонструкторЭД.ТипыЗатрат().Работа;
			Работа.Цена             = СтрокаСметы.Цена;
			Работа.ПозицияПоСмете   = СтрокаСметы.НомерПозицииПоСмете;
			Работа.СтавкаНДС        = СтавкаНДСАктаПриемки;
			ПозицииАкта.Добавить(Работа.ПозицияПоАкту);
		КонецЦикла;
		НалогПоСтавке = КонструкторЭД.НовыйНалогПоСтавке();
		НалогПоСтавке.НалоговаяБаза = СтрокаРаздела.Сумма;
		НалогПоСтавке.Сумма         = СтрокаРаздела.СуммаНДС;
		Если СтрокаРаздела.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
				Или СтрокаРаздела.СтавкаНДС = Перечисления.СтавкиНДС.НДС10
				Или СтрокаРаздела.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			НалогПоСтавке.ПозицииАкта = ПозицииАкта;
		КонецЕсли;
		СуммаНДСВРазбивкеПоСтавкам.Вставить(СтавкаНДСАктаПриемки, НалогПоСтавке);
	КонецЦикла;
	
	Итоги = ИнформацияПодрядчика.Итоги.ОтчетныйПериод;
	Итоги.Сумма           = ДанныеДокумента.Всего;
	Итоги.СуммаНДС        = ДанныеДокумента.ВсегоНДС;
	Итоги.СуммаСНДС       = ДанныеДокумента.ВсегоСУчетомНДС;
	Итоги.НалогиПоСтавкам = СуммаНДСВРазбивкеПоСтавкам;
	
	НастройкиДокумента = КонструкторЭД.НовыеНастройкиДокумента();
	НастройкиДокумента.СпособНакопленияИтогов = КонструкторЭД.СпособыНакопленияИтогов().Выключены;
	
	НастройкиДокумента.СпособРасчетаНДС = КонструкторЭД.СпособыРасчетаНДС().ТолькоВИтогах;
	
	ИнформацияПодрядчика.НастройкиДокумента = НастройкиДокумента;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОПриемкеВыполненныхРаботВСтроительстве_ИнформацияЗаказчика
//
Процедура ЗаполнитьДанныеАктОПриемкеВыполненныхРаботВСтроительстве_ИнформацияЗаказчика(СсылкаНаОбъект, КонструкторЭД, Отказ) Экспорт
	
	ДанныеДляОтветногоТитула = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Дата, Организация.НаименованиеПолное");
	
	ИнформацияЗаказчика = КонструкторЭД.ИнформацияЗаказчика();
	ИнформацияЗаказчика.Составитель = ДанныеДляОтветногоТитула.ОрганизацияНаименованиеПолное;
	ИнформацияЗаказчика.ДляГосИМуниципальныхНужд = Ложь;
	
	ИнформацияЗаказчика.Содержание = НСтр("ru = 'Строительные работы'");
	
	КодыОпераций = КонструкторЭД.КодыОперации();
	ИнформацияЗаказчика.ДатаРешения = ДанныеДляОтветногоТитула.Дата;
	
	ИнформацияЗаказчика.КодОперации = КодыОпераций.ПринятоБезЗамечаний;
	ИнформацияЗаказчика.РешениеПоПредоставленнымРасчетам = КонструкторЭД.НовоеРешениеПоПредоставленнымРасчетам();
	ИнформацияЗаказчика.РешениеПоПредоставленнымРасчетам.КодРешения =
		КонструкторЭД.КодыРешенияПоПредоставленнымРасчетам().СверкаНеПредусмотрена;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОПриемкеСтроительныхРаботУслуг
//
Процедура НайтиСоздатьАктОПриемкеСтроительныхРаботУслуг(КонструкторЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки) Экспорт
	
	ДанныеДляЗаполнения = ПодготовитьДанныеПоВходящемуАктуОПриемкеСтроительныхРабот(КонструкторЭД, ОписаниеОшибки);
	ЗаполнитьДокументПоступленияТоваровУслуг(ДокументУчета, ДанныеДляЗаполнения, СпособОбработки, ОписаниеОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ДоговорныйДокумент

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоДоговорномуДокументу101.
Процедура ЗаполнитьДанныеПоДоговорномуДокументу101(СсылкаНаОбъект, КонструкторЭД, Отказ) Экспорт
	
	Данные = ПечатьДоговоров.ДанныеДоговорногоДокумента(СсылкаНаОбъект);
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента(); // см. ОбработкаОбъект.ФорматДоговорныйДокумент101
	ИнформацияДокумента.ФункцияДокумента = КонструкторЭД.ФункцииДокумента().Дог;
	
	Если Данные.ЕстьОшибки Тогда
		КонструкторЭД.ОбработчикОшибок.УстановитьСвязь(ИнформацияДокумента, "Ссылка", "Объект.Ссылка");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Данные.СодержаниеОшибок);
		Возврат;
	КонецЕсли;
	
	ИнформацияДокумента.ПризнакПорядкаФормирования = КонструкторЭД.ПризнакиПорядкаФормирования().НеОферта;
	ИнформацияДокумента.НомерДоговора = Данные.НомерДог;
	ИнформацияДокумента.ДатаДоговора = Данные.ДатаДог;
	ИнформацияДокумента.ТипДоговора = ИнтеграцияЭДОПовтИсп.ВидДоговоровКонтрагентовПеречисление(Данные.ВидДоговора);
	
	СведенияОбОрганизации = Данные.СведенияОбОрганизации;
	СведенияОКонтрагенте = Данные.СведенияОКонтрагенте;
	
	ИнформацияДокумента.Контрагент = КонструкторЭД.НоваяСторонаДоговора();
	
	ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Контрагент, "ИндивидуальныйПредприниматель");
	ИнформацияДокумента.Контрагент.КодОКПО = СведенияОКонтрагенте.КодПоОКПО;
	
	ИнформацияДокумента.Контрагент.КраткоеНазвание = СведенияОКонтрагенте.ПолноеНаименование;
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОКонтрагенте.ПолноеНаименование);
	
	Если ИндивидуальныйПредприниматель Тогда
		ИдентификационныеСведенияКонтрагента = КонструкторЭД.НовыеИдентификационныеСведенияИП();
		ИдентификационныеСведенияКонтрагента.ИНН = Данные.ИННСт2;
		ИдентификационныеСведенияКонтрагента.ОГРН = Данные.ОГРН_2; 
		ИдентификационныеСведенияКонтрагента.ФИО = КонструкторЭД.НовыеФИО(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
	ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ИдентификационныеСведенияКонтрагента = КонструкторЭД.НовыеИдентификационныеСведенияОрганизации();
		ИдентификационныеСведенияКонтрагента.НаименованиеПолное = СведенияОКонтрагенте.ПолноеНаименование;
		ИдентификационныеСведенияКонтрагента.ИНН = Данные.ИННСт2;
		ИдентификационныеСведенияКонтрагента.ОГРН = Данные.ОГРН_2;
		Если ЗначениеЗаполнено(Данные.КПП_2) Тогда
			МассивКППКонтрагента = Новый Массив;
			МассивКППКонтрагента.Добавить(Данные.КПП_2);
			ИдентификационныеСведенияКонтрагента.КПП = МассивКППКонтрагента;
		КонецЕсли;
	ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ИдентификационныеСведенияКонтрагента = КонструкторЭД.НовыеИдентификационныеСведенияФизЛица();
		ИдентификационныеСведенияКонтрагента.ИНН = Данные.ИННСт2;    
		ИдентификационныеСведенияКонтрагента.ФИО = КонструкторЭД.НовыеФИО(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);

		ИдентификационныеСведенияКонтрагента.Адрес = КонструкторЭД.ЗаполнитьАдресАвтоматически(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Данные.АдрТекст_2,
				ИнформацияДокумента.ДатаДоговора, КонструкторЭД);
	КонецЕсли;

	ИнформацияДокумента.Контрагент.ИдентификационныеСведения = ИдентификационныеСведенияКонтрагента;
	ИнформацияДокумента.Контрагент.Адрес = КонструкторЭД.ЗаполнитьАдресАвтоматически(
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Данные.Контрагент, ИнформацияДокумента.ДатаДоговора,
			КонструкторЭД);
			
	Если ЗначениеЗаполнено(Данные.Тлф_2) ИЛИ ЗначениеЗаполнено(Данные.ЭлПочта_2) Тогда
		ИнформацияДокумента.Контрагент.КонтактныеДанные = КонструкторЭД.НовыеКонтактныеДанные();
		ИнформацияДокумента.Контрагент.КонтактныеДанные.НомерТелефона = Данные.Тлф_2;
		ИнформацияДокумента.Контрагент.КонтактныеДанные.АдресЭП = Данные.ЭлПочта_2;
	КонецЕсли;
	
	ИнформацияДокумента.Контрагент.БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
	ИнформацияДокумента.Контрагент.БанковскиеРеквизиты.НомерСчета = Данные.НомерСчета_2;
	
	ИнформацияДокумента.Контрагент.БанковскиеРеквизиты.Наименование = Данные.НаимБанк_2;
	
	ИнформацияДокумента.Контрагент.БанковскиеРеквизиты.БИК = Данные.БИК_2;
	ИнформацияДокумента.Контрагент.БанковскиеРеквизиты.КорреспондентскийСчет = Данные.КорСчет_2;
	
	СтатусФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Организация, "СтатусФизическогоЛица");
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ПолноеНаименование);
	СторонаОрганизация = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	
	ИнформацияДокумента.Организация = КонструкторЭД.НоваяСторонаДоговора();
	ИнформацияДокумента.Организация.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
		
	Если ЗначениеЗаполнено(СведенияОбОрганизации.СокращенноеНаименование) Тогда
		ИнформацияДокумента.Организация.КраткоеНазвание = СведенияОбОрганизации.СокращенноеНаименование;
	Иначе
		ИнформацияДокумента.Организация.КраткоеНазвание = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;

	ИдентификационныеСведенияОрганизации = Неопределено;
	
	Если СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.ИндивидуальныйПредприниматель Тогда
		ИдентификационныеСведенияОрганизации = КонструкторЭД.НовыеИдентификационныеСведенияИП();
		ИдентификационныеСведенияОрганизации.ИНН = Данные.ИННСт1;
		ИдентификационныеСведенияОрганизации.ОГРН = Данные.ОГРН_1;
		ИдентификационныеСведенияОрганизации.ФИО = КонструкторЭД.НовыеФИО(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		
	ИначеЕсли  СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ИдентификационныеСведенияОрганизации = КонструкторЭД.НовыеИдентификационныеСведенияОрганизации();
		ИдентификационныеСведенияОрганизации.НаименованиеПолное = СведенияОбОрганизации.ПолноеНаименование;
		ИдентификационныеСведенияОрганизации.ИНН = Данные.ИННСт1;
		ИдентификационныеСведенияОрганизации.ОГРН = Данные.ОГРН_1;
		Если ЗначениеЗаполнено(Данные.КПП_1) Тогда
			МассивКППОрганизации = Новый Массив;
			МассивКППОрганизации.Добавить(Данные.КПП_1);
			ИдентификационныеСведенияОрганизации.КПП = МассивКППОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияДокумента.Организация.ИдентификационныеСведения = ИдентификационныеСведенияОрганизации;
	ИнформацияДокумента.Организация.Адрес = КонструкторЭД.ЗаполнитьАдресАвтоматически(
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Данные.Организация, ИнформацияДокумента.ДатаДоговора,
			КонструкторЭД);
			
	Если ЗначениеЗаполнено(Данные.Тлф_1) ИЛИ ЗначениеЗаполнено(Данные.ЭлПочта_1) Тогда
		ИнформацияДокумента.Организация.КонтактныеДанные = КонструкторЭД.НовыеКонтактныеДанные();
		ИнформацияДокумента.Организация.КонтактныеДанные.НомерТелефона = Данные.Тлф_1;
		ИнформацияДокумента.Организация.КонтактныеДанные.АдресЭП = Данные.ЭлПочта_1;
	КонецЕсли;
	
	ИнформацияДокумента.Организация.БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
	ИнформацияДокумента.Организация.БанковскиеРеквизиты.НомерСчета = Данные.НомерСчета_1;
	ИнформацияДокумента.Организация.БанковскиеРеквизиты.Наименование = Данные.НаимБанк_1;
	ИнформацияДокумента.Организация.БанковскиеРеквизиты.БИК = Данные.БИК_1;
	ИнформацияДокумента.Организация.БанковскиеРеквизиты.КорреспондентскийСчет = Данные.КорСчет_1;

	ИнформацияДокумента.СведенияОбОбщейСтоимости = КонструкторЭД.НовыеСведенияОбОбщейСтоимости();
	ИнформацияДокумента.СведенияОбОбщейСтоимости.СуммаСНДС = Данные.СтТовУчНалВсегоДог; 
	ИнформацияДокумента.СведенияОбОбщейСтоимости.СуммаБезНДС = Данные.СтТовБезНДСВсегоДог;
	ИнформацияДокумента.СведенияОбОбщейСтоимости.СуммаНДС = Данные.СумНалВсегоДог;
	ИнформацияДокумента.СведенияОбОбщейСтоимости.КодВалюты = Данные.КодОКВ;
			
	ИнформацияДокумента.СрокДействия = КонструкторЭД.НовыйСрокДействия();
	ИнформацияДокумента.СрокДействия.ДатаНачалаДействия = Данные.ДатаДог;
	ИнформацияДокумента.СрокДействия.ДатаОкончанияДействия = Данные.ДатаОкон;
	ИнформацияДокумента.СрокДействия.НаличиеПролонгации =
			КонструкторЭД.ПризнакиНаличияПролонгации().ОтсутствуетУсловиеПролонгации;
		
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДоговорнойДокумент101
//
Процедура НайтиСоздатьДоговорнойДокумент101(КонструкторЭД, ДокументУчета, ОписаниеОшибки) Экспорт

	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента[0];
	
	ПараметрыДоговора = ПечатьДоговоров.ПараметрыДоговора();
	ТипыСторон = Обработки.ФорматДоговорныйДокумент101.ТипыСторонДоговора();
	ПараметрыДоговора.Организация = ОрганизацияПоДаннымДоговорногоДокумента101(ИнформацияДокумента.Контрагент.ИдентификационныеСведения, ТипыСторон);
	ПараметрыДоговора.Владелец = КонтрагентПоДаннымДоговорногоДокумента101(
		ИнформацияДокумента.Организация.ИдентификационныеСведения, ТипыСторон, ИнформацияДокумента.ДатаДоговора);
    ПараметрыДоговора.Дата = ИнформацияДокумента.ДатаДоговора;
	ПараметрыДоговора.Номер = ИнформацияДокумента.НомерДоговора;
			
	// На данный момент поддерживается только функция Дог
	// договор, выражающий согласованную волю стороны 1 и стороны 2 на установление гражданских прав.
	Если НЕ (ИнформацияДокумента.ФункцияДокумента = КонструкторЭД.ФункцииДокумента().Дог
		И ИнформацияДокумента.ПризнакПорядкаФормирования = КонструкторЭД.ПризнакиПорядкаФормирования().НеОферта) Тогда
		ОписаниеОшибки = НСтр("ru = 'Данный вид договора не поддерживается.'");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда 
		ДокументУчета = ПечатьДоговоров.НайтиДоговорПоПараметрам(ПараметрыДоговора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		СправочникОбъект = ДокументУчета.ПолучитьОбъект();
	Иначе 
		СправочникОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонструкторЭД.Предмет) Тогда
		ОтборПредмета = Новый Структура;
		ОтборПредмета.Вставить("НомерСтрокиТаблицы", 0);
		НайденныеСтроки = КонструкторЭД.Предмет.НайтиСтроки(ОтборПредмета);
	
		Если НайденныеСтроки.Количество() > 0 Тогда
		
			СтрокаОбщейИнформацииПредмета = НайденныеСтроки[0];
			СуммаСНДС = СтрокаОбщейИнформацииПредмета.СуммаСНДС;
			СтавкаНДСПоДаннымДоговорногоДокумента101(СправочникОбъект.СтавкаНДС, СтрокаОбщейИнформацииПредмета);
			СправочникОбъект.ВалютаВзаиморасчетов = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", СтрокаОбщейИнформацииПредмета.КодВалюты);
			СправочникОбъект.СуммаНДС = СтрокаОбщейИнформацииПредмета.СуммаНалога; 
			
			Если СтрокаОбщейИнформацииПредмета.СуммаБезНДС = 0 Тогда
				СправочникОбъект.СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			СправочникОбъект.Сумма = СуммаСНДС;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(КонструкторЭД.СведенияОбОбщейСтоимости)
		И КонструкторЭД.СведенияОбОбщейСтоимости.Количество() > 0 Тогда
		
		СведенияОбОбщейСтоимости = КонструкторЭД.СведенияОбОбщейСтоимости[0];
		СуммаСНДС = СведенияОбОбщейСтоимости.СуммаСНДС;
		СуммаБезНДС = СведенияОбОбщейСтоимости.СуммаБезНДС;
		СуммаНДС = СведенияОбОбщейСтоимости.СуммаНДС;
		СправочникОбъект.СуммаНДС = СуммаНДС;
		СправочникОбъект.Сумма = СуммаСНДС;
		
		Если СведенияОбОбщейСтоимости.СуммаБезНДС = 0 Тогда
			СправочникОбъект.СуммаВключаетНДС = Истина;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
		КонецЕсли;
 
		Если СуммаНДС = 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе 
			РасчетнаяСтавкаНДС = Окр(СуммаНДС * 100 / СуммаБезНДС); 
			СоответствиеСтавокНДС = Новый Соответствие;
			ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
			СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрЗаменить(РасчетнаяСтавкаНДС, "%", ""));
		КонецЕсли;
		СправочникОбъект.СтавкаНДС = СтавкаНДС;
		СправочникОбъект.ВалютаВзаиморасчетов = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", СведенияОбОбщейСтоимости.КодВалюты);
			
	КонецЕсли;

	СоответствиеПротивоположныхВидовДоговоров = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеВидовДоговоровПротивоположноеЗначениюКонтрагентов(СоответствиеПротивоположныхВидовДоговоров);
	ВидДоговораПеречисление = СоответствиеПротивоположныхВидовДоговоров.Получить(ИнформацияДокумента.ТипДоговора);
	
	Если ЗначениеЗаполнено(ВидДоговораПеречисление) Тогда
		СправочникОбъект.ВидДоговора = ВидДоговораПеречисление;
	Иначе 
		// Неизвестный вид договора
		СправочникОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	
	СправочникОбъект.Дата = ПараметрыДоговора.Дата;
	СправочникОбъект.Номер = ПараметрыДоговора.Номер;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Номер) Тогда
		СправочникОбъект.Наименование = СтрШаблон("%1", СправочникОбъект.Номер);
			
		Если ЗначениеЗаполнено(СправочникОбъект.Дата) Тогда
			СправочникОбъект.Наименование = СтрШаблон(НСтр("ru = '%1 от %2'"), СправочникОбъект.Наименование,
				Формат(СправочникОбъект.Дата, "ДФ=dd.MM.yyyy;"));
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъект.Организация = ПараметрыДоговора.Организация;
	СправочникОбъект.Владелец = ПараметрыДоговора.Владелец;
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.СрокДействия) Тогда
		СправочникОбъект.СрокДействия = ИнформацияДокумента.СрокДействия.ДатаОкончанияДействия;
	КонецЕсли;
	
	СправочникОбъект.СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоУмолчанию();
	СправочникОбъект.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически;
	
	ЗаписатьСправочник(СправочникОбъект);
	ДокументУчета = СправочникОбъект.Ссылка;

КонецПроцедуры

Процедура СтавкаНДСПоДаннымДоговорногоДокумента101(СтавкаНДС, СтрокаОбщейИнформацииПредмета)
	
	Если ЗначениеЗаполнено(СтрокаОбщейИнформацииПредмета.СтавкаНДС) Тогда
		
		СоответствиеСтавокНДС = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		
		СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрЗаменить(СтрокаОбщейИнформацииПредмета.СтавкаНДС, "%", ""));
		
	ИначеЕсли СтрокаОбщейИнформацииПредмета.БезНДС Тогда
		
		СтавкаНДС =  Перечисления.СтавкиНДС.БезНДС;
		
	КонецЕсли;
	
КонецПроцедуры      

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДоговорныйДокументXML
//
Процедура НайтиСоздатьДоговорныйДокументXML(ДанныеФайлаЭД, ДокументУчета, ОписаниеОшибки) Экспорт
	
	ПечатьДоговоров.ПрочитатьДоговорныйДокументXML(ДанныеФайлаЭД, ДокументУчета, ОписаниеОшибки);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеВидовДоговоровПротивоположноеЗначениюКонтрагентов.
Процедура ЗаполнитьСоответствиеВидовДоговоровПротивоположноеЗначениюКонтрагентов(Соответствие) Экспорт
	
	Соответствие.Вставить("С покупателем", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Соответствие.Вставить("С поставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Соответствие.Вставить("С комиссионером (агентом) на продажу", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Соответствие.Вставить("С комитентом (принципалом) на продажу",
		Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Соответствие.Вставить("С комиссионером (агентом) на закупку",
		Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Соответствие.Вставить("С комитентом (принципалом) на закупку",
		Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);  
	Соответствие.Вставить("С транспортной компанией (доставка и оплата)", 
		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
    Соответствие.Вставить("С факторинговой компанией)", 
		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Соответствие.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеВидовДоговоровКонтрагентов.
Процедура ЗаполнитьСоответствиеВидовДоговоровКонтрагентов(Соответствие) Экспорт
	
	Соответствие.Вставить("С поставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Соответствие.Вставить("С покупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Соответствие.Вставить("С комитентом (принципалом) на продажу", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Соответствие.Вставить("С комиссионером (агентом) на продажу",
		Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Соответствие.Вставить("С комитентом (принципалом) на закупку",
		Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Соответствие.Вставить("С комиссионером (агентом) на закупку",
		Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Соответствие.Вставить("С транспортной компанией (доставка и оплата)",
		Перечисления.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией);
	Соответствие.Вставить("С факторинговой компанией)",
		Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	Соответствие.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);

КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента
//
Процедура ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента(НоменклатураКонтрагента, Форма) Экспорт
	
	Объект = Форма.Объект;
	Объект.Наименование       = НоменклатураКонтрагента.Наименование;
	Объект.НаименованиеПолное = НоменклатураКонтрагента.Наименование;
	Объект.Артикул            = НоменклатураКонтрагента.Артикул;
	Объект.ЕдиницаИзмерения   = ЕдиницаИзмеренияПоДаннымКонтрагента(
		НоменклатураКонтрагента.ЕдиницаИзмеренияКод, НоменклатураКонтрагента.ЕдиницаИзмерения);
	Объект.ВидСтавкиНДС       = ВидСтавкиНДСПоДаннымКонтрагента(НоменклатураКонтрагента.СтавкаНДС);
	
	Форма.Штрихкоды           = НоменклатураКонтрагента.ШтрихкодыНоменклатуры;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

Процедура УстановитьСтатусДокументПодписан(МассивДокументов) Экспорт
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				Или ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
			СтатусыДокумента.Статус = Перечисления.СтатусыДокументовРеализации.Подписан;
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Документ, СтатусыДокумента);
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Справочники.ДоговорыКонтрагентов.УстановитьДоговорПодписан(Документ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПеревозочныеДокументы

Функция РеквизитыЭТрН(Основание) Экспорт
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ЭлектроннаяТранспортнаяНакладная", Документы.ЭлектроннаяТранспортнаяНакладная.ПустаяСсылка());
	РеквизитыФормы.Вставить("СостояниеЭТрН",                    ""); 
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ЭлектроннаяТранспортнаяНакладная,
		|	ЭлектроннаяТранспортнаяНакладная.Дата КАК Дата
		|ИЗ
		|	Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная КАК ЭлектроннаяТранспортнаяНакладная
		|		ПО ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка = ЭлектроннаяТранспортнаяНакладная.Ссылка 
		|ГДЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
		|	И НЕ ЭлектроннаяТранспортнаяНакладная.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РеквизитыФормы.ЭлектроннаяТранспортнаяНакладная = Выборка.ЭлектроннаяТранспортнаяНакладная;
		КонецЕсли;
	КонецЕсли; 
	
	РеквизитыФормы.СостояниеЭТрН = СостояниеЭТрН(РеквизитыФормы.ЭлектроннаяТранспортнаяНакладная, Основание);
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция СостояниеЭТрН(ЭлектроннаяТранспортнаяНакладная, Основание) Экспорт 
	
	СостояниеЭТрН = НСтр("ru = 'Не выбран'");
	Если ЗначениеЗаполнено(ЭлектроннаяТранспортнаяНакладная) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭлектроннаяТранспортнаяНакладная, 
			"ТитулГрузоотправителяТранспортнаяНакладнаяНомер, ТитулГрузоотправителяТранспортнаяНакладнаяДата, ТекущийШаг");
			
		СостояниеЭТрН = СтрШаблон("%1 от %2 (%3)", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОбъекта.ТитулГрузоотправителяТранспортнаяНакладнаяНомер), 
			ФОрмат(РеквизитыОбъекта.ТитулГрузоотправителяТранспортнаяНакладнаяДата, "ДФ=dd.MM.yyyy"), РеквизитыОбъекта.ТекущийШаг);
	ИначеЕсли ПравоДоступа("Изменение", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная) Тогда
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
			СостояниеЭТрН = НСтр("ru = 'Создать документ'");
		Иначе
			СостояниеЭТрН = НСтр("ru = 'Выбрать документ'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭТрН;
КонецФункции

#КонецОбласти

#Область УстаревшиеФорматыЭД

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ЭтоКомиссионнаяТорговля  = Ложь;
	ЭтоСчетФактураНаАванс    = Ложь;
	ОснованиеСФУчаствуетВЭДО = Истина;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
		ЭтоКомиссионнаяТорговля  = ЭтоКомиссионнаяТорговля(СчетФактура);
		ЭтоСчетФактураНаАванс    = ЭтоСчетФактураНаАванс(СчетФактура);
		ОснованиеСФУчаствуетВЭДО = ОснованиеСФУчаствуетВЭДО(СчетФактура);
			
		Если ЭтоКомиссионнаяТорговля
			ИЛИ ЭтоСчетФактураНаАванс
			ИЛИ Не ОснованиеСФУчаствуетВЭДО Тогда // если основание СФ не участвует в ЭДО, тогда формируем ЭД СФ вместо УПД
			
			СтруктураЭД.Функция = "СЧФ";
		КонецЕсли;
	Иначе
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента.ВидДоговора")
				= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СтруктураЭД.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Комиссия);
			ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СсылкаНаОбъект);
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	Если ЭтоКомиссионнаяТорговля
		Или ЭтоСчетФактураНаАванс
		Или Не ОснованиеСФУчаствуетВЭДО Тогда
		
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Иначе
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Неопределено, Истина), Истина);
	КонецЕсли;
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭД.Вставить("ЭтоСчетФактураНаАванс", ЭтоСчетФактураНаАванс);
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ЗаполнитьОсновнуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	Если Не (ЭтоСчетФактураНаАванс
		ИЛИ ЭтоКомиссионнаяТорговля
		ИЛИ Не ОснованиеСФУчаствуетВЭДО) Тогда
		
		ЗаполнитьРасширеннуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры") = "Авансовый" Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СсылкаНаОбъект);
	ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
		МассивДокументов, Документы[СсылкаНаОбъект.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(), Истина);
	ДанныеДляФормированияЭД = ТаблицаДанных[0];
	
	Если Не СтруктураЭД.Свойство("ВидОперацииЭД") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента.ВидДоговора")= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СтруктураЭД.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Комиссия);
		
	КонецЕсли;
	
	СтруктураЭД.Вставить("ЭтоСчетФактураНаАванс", Ложь);
	ЗаполнитьОсновнуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	ЗаполнитьРасширеннуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если СтруктураЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УПД
		И СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийЭД.Комиссия Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = СсылкаНаОбъект;
	ЭтоКомиссионнаяТорговля  = ЭтоКомиссионнаяТорговля(СчетФактура);
	ЭтоСчетФактураНаАванс    = ЭтоСчетФактураНаАванс(СчетФактура);
	ОснованиеСФУчаствуетВЭДО = ОснованиеСФУчаствуетВЭДО(СчетФактура);
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	Если ЭтоКомиссионнаяТорговля
		Или ЭтоСчетФактураНаАванс
		Или Не ОснованиеСФУчаствуетВЭДО Тогда
		
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Иначе
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Неопределено, Истина), Истина);
	КонецЕсли;
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭД.Вставить("ЭтоСчетФактураНаАванс", ЭтоСчетФактураНаАванс);
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ЗаполнитьОсновнуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУКД_ИнформацияПродавца(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	СчетФактура = Неопределено;
	КорректировочныеДокументы = Новый Массив;
	
	Если ТипДокумента = ТипыДокументов.УКД Тогда 		
		ПроверитьГотовностьОснованияУКД(Основание, Отказ);
	    Настройки.Вставить("Функция", "КСЧФДИС");
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПервичныйДокумент = Неопределено;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			СчетФактура = Основание;
			ПервичныйДокумент = СчетФактура.ДокументОснование;
			Описание.Основания.Добавить(ПервичныйДокумент);
		Иначе
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание);
			ПервичныйДокумент = Основание;
			Описание.Основания.Добавить(СчетФактура);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетФактура) Тогда
			СообщитьОбОшибкеПриФормированииЭД(
				Основание, НСтр("ru = 'Не выписан счет-фактура'"), Отказ);

			Возврат;
		КонецЕсли;
		
		МассивСчетовФактур = Новый Массив();
		МассивСчетовФактур.Добавить(СчетФактура);
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Неопределено, Истина), Истина);
		Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
			
			СообщитьОбОшибкеПриФормированииЭД(
				Основание, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа.'"), Отказ);
			Возврат;
		КонецЕсли;
		
		ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
		
		ЗаполнитьОсновнуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
		ЗаполнитьРасширеннуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		ПроверитьГотовностьОснованияУКД(Основание, Отказ);
		Настройки.Вставить("Функция", "ДИС");
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыУКД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, СведенияПрослеживаемости");
		ЕстьПрослеживаемыеТовары = Не РеквизитыУКД.СведенияПрослеживаемости.Пустой();
		ВерсияПостановления = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(РеквизитыУКД.Дата);
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Основание);
		ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(
			МассивДокументов, Документы[Основание.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхКорректировочныхДокументов(ВерсияПостановления, ЕстьПрослеживаемыеТовары));
			
		Если ТаблицаДанных = Неопределено
				ИЛИ ТаблицаДанных.Количество()=0 Тогда
			
			СообщитьОбОшибкеПриФормированииЭД(
				Основание, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа-основания.'"), Отказ);
			Возврат;
		КонецЕсли;
			
		ДанныеДляФормированияЭД = ТаблицаДанных[0];
		
		ЗаполнитьОсновнуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
		ЗаполнитьРасширеннуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);  
				
	Иначе
		
		Настройки.Вставить("Функция", "КСЧФ");
		ПроверитьГотовностьОснованияУКД(Основание, Отказ);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		МассивСчетовФактур = Новый Массив();
		МассивСчетовФактур.Добавить(Основание);
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
				МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Неопределено, Истина), Истина);
		Если ТаблицаСчетовФактур = Неопределено
				ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
			
			СообщитьОбОшибкеПриФормированииЭД(
				Основание, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа-основания.'"), Отказ);
			Возврат;
		КонецЕсли;
		
		ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
		
		ЗаполнитьОсновнуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	
	КонецЕсли;

КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеУКД_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ) Экспорт
	
	Документ = Неопределено;
	
	Для Каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			Поступление = Основание;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СчетФактураПолученный = Основание;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СчетФактураПолученный) Тогда
		Документ = СчетФактураПолученный;
	ИначеЕсли ЗначениеЗаполнено(Поступление) Тогда
		Документ = Поступление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Организация");
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(Реквизиты.Организация);
		СоставительДокумента =  СоставительДокумента(СведенияОПокупателе);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента(СведенияОПокупателе));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", Реквизиты.Дата);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ТекущаяДатаСеанса());
		СоставительДокумента = "-";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, ДеревоДанных, Отказ) Экспорт
	
	СведенияОбОрганизации = ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Наименование КАК Комментарий,
	|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(Банки.Код, """") КАК БанкБИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК БанкСчетКорр,
	|	"""" КАК БанкSWIFT,
	|	ЕСТЬNULL(БанкиКорреспондент.Наименование, """") КАК БанкКоррНаименование,
	|	ЕСТЬNULL(БанкиКорреспондент.Код, """") КАК БанкКоррБИК,
	|	ЕСТЬNULL(БанкиКорреспондент.КоррСчет, """") КАК БанкКоррБанкСчетКорр,
	|	"""" КАК БанкКоррSWIFT
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК БанкиКорреспондент
	|		ПО БанковскиеСчета.БанкДляРасчетов = БанкиКорреспондент.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	БанковскиеСчета = Результат.Выгрузить();
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, БанковскиеСчета, "РасчетныеСчета");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СсылкаНаОбъект.Наименование);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого Строка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Строка;
			Иначе
				ПервичныйДокумент = Строка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	ДокументыУчета = Новый Массив;
	Если ЭтоФункцияСЧФДОП(ФункцияУПД) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
		
			ДанныеУПД = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных);
			Если ДанныеУПД.Шапка.Исправление Тогда
				ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУПД);
			Иначе
				ЗаполнитьДокументПоступленияТоваровУслуг(ПервичныйДокумент, ДанныеУПД, СпособОбработки, ОписаниеОшибки);
			КонецЕсли;
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			ДанныеУПД = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
			ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУПД);
			
			ДокументыУчета.Добавить(СчетФактура);
			
			СсылкиНаВладельцев = ДокументыУчета;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭтоФункцияДОП(ФункцияУПД) Тогда
		
			НачатьТранзакцию();
			Попытка
			
				УстановитьПривилегированныйРежим(Истина);
			
				ДанныеУПД = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных);
				
				Если ДанныеУПД.Шапка.Исправление Тогда
					ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУПД);
				Иначе
					ЗаполнитьДокументПоступленияТоваровУслуг(ПервичныйДокумент, ДанныеУПД, СпособОбработки, ОписаниеОшибки);
				КонецЕсли;
				
				ДокументыУчета.Добавить(ПервичныйДокумент);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки; 	

	Иначе
		НачатьТранзакцию();
		Попытка

			УстановитьПривилегированныйРежим(Истина);
		
			ДанныеУПД = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
			ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУПД);
		
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	СсылкиНаВладельцев = ДокументыУчета;

КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого Строка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Строка;
			Иначе
				ПервичныйДокумент = Строка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");  	 
	
	ДокументыУчета = Новый Массив;

	Если ЭтоФункцияКСЧФДИС(ФункцияУКД) Тогда

		НачатьТранзакцию();
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если НужноСоздатьДокументВозвратТоваровПоставщику(СпособОбработки, ДеревоДанных) Тогда
				ДанныеУКД = ПодготовитьСтруктуруДляВозвратаТоваровПоставщикуУКД(ДеревоДанных);
				ЗаполнитьДокументВозвратТоваровПоставщику(ПервичныйДокумент, ДанныеУКД);
			Иначе
				ДанныеУКД = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
				ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУКД);
			КонецЕсли;
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			ДанныеУКД = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
			ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУКД);
			ДокументыУчета.Добавить(СчетФактура);
			
			СсылкиНаВладельцев = ДокументыУчета;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭтоФункцияДИС(ФункцияУКД) Тогда 
		 	
		НачатьТранзакцию();
		Попытка
		
			УстановитьПривилегированныйРежим(Истина);
			
			Если НужноСоздатьДокументВозвратТоваровПоставщику(СпособОбработки, ДеревоДанных) Тогда
				ДанныеУКД = ПодготовитьСтруктуруДляВозвратаТоваровПоставщикуУКД(ДеревоДанных);
				ЗаполнитьДокументВозвратТоваровПоставщику(ПервичныйДокумент, ДанныеУКД);
			Иначе
				ДанныеУКД = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
				ЗаполнитьДокументКорректировкиПоступления(ПервичныйДокумент, ДанныеУКД);
			КонецЕсли;
			
			ДокументыУчета.Добавить(ПервичныйДокумент);

			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;

	Иначе
		
		НачатьТранзакцию();
		Попытка

			УстановитьПривилегированныйРежим(Истина);
			
			ДанныеУКД = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
			ЗаполнитьДокументСчетФактураПолученный(СчетФактура, ДанныеУКД);
			
			ДокументыУчета.Добавить(СчетФактура);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;  
		
	КонецЕсли;
	
	СсылкиНаВладельцев = ДокументыУчета;

КонецПроцедуры

 // См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя.
 // ЭД используется для загрузки УПД и ТОРГ12 из Excel.
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(Знач Основания, Данные, Отказ) Экспорт
	
	ДатаПолученияТоваров = Дата(1, 1, 1);
	СоставительДокумента = "-";
	
	Поступление = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Поступление = Основание;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Поступление);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ДатаПолученияТоваров = Выборка.Дата;

	СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП), СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
		Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП), СтрШаблон(НСтр(
		"ru = '%1, ИНН %2'"), Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СоставительДокумента);

	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "ДатаПолученияГруза", ДатаПолученияТоваров);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  НайденныйОбъект - Произвольный - созданный объект.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект = Неопределено, ОписаниеОшибки) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ТоварнаяНакладная
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктНаПередачуПрав Тогда
		
		НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СчетНаОплату Тогда
		
		НайденныйОбъект = НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);	
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаНДС;
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаНДС);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено
			ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС"
			ИЛИ Не ЗначениеЗаполнено(ПредставлениеСтавкиНДС) Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Найти("20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Найти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Найти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Найти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли Найти("20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "Банки" Тогда
		Результат = Справочники.Банки.НайтиБанкТолькоПоБИК(ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.ИНН) Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.КПП) Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // есть Идентификатор
			Результат = ЭлектронноеВзаимодействиеБП.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(
				ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = ЭлектронноеВзаимодействиеБП.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(
				ПараметрПоиска, Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Попытка 
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты)Тогда
		Владелец = "";
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда
			ИмяПрикладногоСправочника = ИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ИдОбъекта);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "НомерТД" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("НомераГТД", "Код", ИдОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

Процедура КомандыЭДО_ФормаСписка(Форма, Входящий = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма                 = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.СостояниеЭДО;
	Если Входящий Тогда
		ПараметрыПриСозданииНаСервере.Направление = ОбменСКонтрагентами.НаправленияДокументов().Входящий;
	Иначе
		ПараметрыПриСозданииНаСервере.Направление = ОбменСКонтрагентами.НаправленияДокументов().Исходящий;
	КонецЕсли;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

Процедура КомандыЭДО_ФормаДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма                 = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка        = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	// Определим правильное размещение команд на форме документа
	МестоРазмещенияКомандПоУмолчанию = Элементы.Найти("КомандыЭДО");
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = МестоРазмещенияКомандПоУмолчанию;
	КонецЕсли;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
	Если Форма.Команды.Найти("СоздатьЭлектроннуюТранспортнуюНакладную") <> Неопределено Тогда
		НовыйЭлемент            = Форма.Элементы.Добавить("СоздатьЭлектроннуюТранспортнуюНакладную", Тип("КнопкаФормы"), МестоРазмещенияКомандПоУмолчанию);
		НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = "СоздатьЭлектроннуюТранспортнуюНакладную";
	КонецЕсли; 
КонецПроцедуры

Процедура КомандыЭДО_ПриЧтенииФормыДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
КонецПроцедуры

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	ИНН                     = СокрЛП(РеквизитыКонтрагента.ИНН);
	КПП                     = СокрЛП(РеквизитыКонтрагента.КПП);
	НаименованиеКонтрагента = СокрЛП(РеквизитыКонтрагента.Наименование);
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать контрагента, т.к. во входящем электронном документе не заполнен ИНН.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Если СтрДлина(ИНН) > 10 Тогда
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	КонтрагентОбъект.ОбособленноеПодразделение = Ложь;
	
	ЭтоЮрЛицо = КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Если ЭтоЮрЛицо Тогда
		СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		РеквизитыКонтрагента = Новый Структура("ОписаниеОшибки", "");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОписаниеОшибки) Тогда
			РеквизитыКонтрагента.ОписаниеОшибки = СведенияОКонтрагенте.ОписаниеОшибки;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ЕГРЮЛ) Тогда
			РеквизитыКонтрагента = СведенияОКонтрагенте.ЕГРЮЛ;
		Иначе
			ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
			РеквизитыКонтрагента.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, ИНН);
		КонецЕсли;
		РеквизитыКонтрагента.Вставить("ИНН", ИНН);
		Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
		Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			Если ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители) Тогда
				ЗаполнитьЗначенияСвойств(Руководитель, РеквизитыКонтрагента.Руководители[0]);
			Иначе
				Руководитель = Неопределено;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("Руководитель", Руководитель);
			РеквизитыКонтрагента.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
			РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		РеквизитыКонтрагента.Вставить("КодОКВЭД",
			?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
		РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",  
			?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда // не удалось получить данные контрагента из ЕГРН
		КонтрагентОбъект.Наименование = НаименованиеКонтрагента;
		КонтрагентОбъект.ИНН = ИНН;
		КонтрагентОбъект.КПП = КПП;
	Иначе
		ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыКонтрагента);
		КонтрагентОбъект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		Если ЭтоЮрЛицо Тогда
			ТаблицаКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
			Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
				
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
				
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
			КонецЕсли;
			
			Если ТаблицаКИ.Количество() > 0 Тогда
				УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(КонтрагентОбъект, ТаблицаКИ);
			КонецЕсли;
			
			Если Не ПустаяСтрока(КПП) Тогда
				КонтрагентОбъект.КПП = КПП;
			КонецЕсли;
		Иначе
			КонтрагентОбъект.КПП = "";
			СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
			Если СвидетельствоОРегистрации <> Неопределено Тогда
				КонтрагентОбъект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
				КонтрагентОбъект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		КонтрагентОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при записи нового элемента справочника ""Контрагенты"".
			|Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание контрагента'"),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Контрагент = КонтрагентОбъект.Ссылка;

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	ТипыДокументов  = ОбменСКонтрагентами.ТипыДокументов();
	
	Если Параметры.ТипДокумента = ТипыДокументов.УПД
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.УКД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
	
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.СчетФактура
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.ТоварнаяНакладная
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.АктВыполненныхРабот
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.АктНаПередачуПрав
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.АктПриемкиСтроительныхРаботУслуг
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКлючевыхРеквизитовЭДО(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	ПараметрыПриИзменении.Форма                  = Форма;
	ПараметрыПриИзменении.ДокументСсылка         = Объект.Ссылка;
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	ПараметрыПриИзменении.ДокументОбъект         = Объект.Ссылка;
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
КонецПроцедуры

Процедура РазрешеноИспользоватьВнутреннийЭДО(Использовать) Экспорт
	
	Использовать = ВариантыПриложений.ЭтоВерсияКОРП();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СведенияФизЛицаПользователя.
Процедура СведенияФизЛицаПользователя(Пользователь, Организация, СведенияФизЛица) Экспорт
	
	СведенияОПользователе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Наименование, ФизическоеЛицо");
	Если ЗначениеЗаполнено(СведенияОПользователе.ФизическоеЛицо) Тогда
		СведенияФизЛица.ИмяПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОПользователе.ФизическоеЛицо, "ФИО");
		СведенияФизЛица.Должность = УчетЗарплаты.ДолжностьФизическогоЛица(СведенияОПользователе.ФизическоеЛицо, Организация, ТекущаяДатаСеанса());
	Иначе
		СведенияФизЛица.ИмяПолное = СведенияОПользователе.Наименование;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаОбменаЭД

Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаРеализации(Источник)
	
	ТипыДокументов  = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТипЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
		Если Не ЗначениеЗаполнено(ТипЭД) Тогда
			ТипЭД = ТипыДокументов.ТоварнаяНакладная;
		КонецЕсли;
		Возврат ТипЭД;
	Иначе
		Возврат Источник.ВидЭлектронногоДокумента;
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаКорректировки(Источник)
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	ТипЭД = Неопределено;
	Если ЭтоКорректировкаПоСогласованиюСторон(Источник)
			Или ЭтоВозвратТоваровОтПокупателя(Источник) Тогда
		ТипЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости; // будет сформирован УКД
	ИначеЕсли ЭтоИсправлениеВПервичныхДокументах(Источник) Тогда
		ТипЭД = ТипДокументаИсправления(Источник);
	КонецЕсли;
	
	Возврат ТипЭД;
	
КонецФункции

Функция ТипДокументаИсправления(Источник)
	
	Результат = Неопределено;
	ТолькоУслуги = Ложь;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		ТолькоУслуги = (Источник.Товары.Количество() = 0);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Товары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Товары");
		ТолькоУслуги = Товары.Пустой();
	КонецЕсли;
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	Если ТолькоУслуги Тогда
		Результат = ТипыДокументов.АктВыполненныхРабот;
	Иначе
		Результат = ТипыДокументов.ТоварнаяНакладная;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидОперацииКорректировки(Источник)
	
	ВидОперации = Неопределено;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		ВидОперации = Источник.ВидОперации;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.КорректировкаРеализации")
			И ЗначениеЗаполнено(Источник) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ВидОперации");
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

Функция ЭтоКорректировкаПоСогласованиюСторон(Источник)
	
	ВидОперации = ВидОперацииКорректировки(Источник);
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		Или ЭтоИсправлениеКорректировки(Источник, ВидОперации));
	
КонецФункции

Функция ЭтоИсправлениеВПервичныхДокументах(Источник)
	
	Возврат (ВидОперацииКорректировки(Источник)
		= Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	
КонецФункции

Функция ЭтоИсправлениеКорректировки(Источник, ВидОперации)
	
	Если ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОснованиеКорректировки = Неопределено;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		ОснованиеКорректировки = Источник.ДокументРеализации;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.КорректировкаРеализации")
			И ЗначениеЗаполнено(Источник) Тогда
		ОснованиеКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ДокументРеализации");
	КонецЕсли;
	
	Возврат (ТипЗнч(ОснованиеКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеКорректировки, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
КонецФункции

Функция ЭтоВозвратТоваровОтПокупателя(Источник)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя")
		Или ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция СчетФактураНеТребуется(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(СсылкаНаДокумент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивДокументов = Документы[СсылкаНаДокумент.Метаданные().Имя].СчетаФактурыНеТребуются(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент));
	
	Возврат МассивДокументов.Количество() > 0;
	
КонецФункции

Функция ТребуетсяСформироватьУниверсальныйДокумент(Источник) 
	
	Если Источник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", Источник.Метаданные()) Тогда
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Источник) Тогда
			ЭтоУниверсальныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Источник, "ЭтоУниверсальныйДокумент");
		Иначе
			ЭтоУниверсальныйДокумент = Источник.ЭтоУниверсальныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоУниверсальныйДокумент = Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИсходящихЭД

Функция НеобходимоСформироватьЭлектронныйДокументСчетФактура(Источник)
	
	Возврат ЭтоКомиссионнаяТорговля(Источник)
		ИЛИ ЭтоСчетФактураНаАванс(Источник)
		ИЛИ Не ОснованиеСФУчаствуетВЭДО(Источник);
		
КонецФункции

Функция НоваяТаблицаДопДанных()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор");
	Результат.Колонки.Добавить("Значение");
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьСтрокуТаблицыДопДанных(ТаблицаДопДанных, Идентификатор, Значение)

	Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(Значение) Тогда
		НоваяСтрока = ТаблицаДопДанных.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
		НоваяСтрока.Значение      = Значение;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуДанныхДоговора(Знач Наименование, Знач Номер, Знач Дата)
	
	ТаблицаДанныхДоговора = Новый ТаблицаЗначений;
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеНаименование");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеНомер");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеДата");
	
	Если Не ДоговорУказан(Наименование) Тогда
		Возврат ТаблицаДанныхДоговора; // возвращаем пустую таблицу
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДанныхДоговора.Добавить();
	НоваяСтрока.ДокОснованиеНаименование = Наименование;
	НоваяСтрока.ДокОснованиеНомер        = Номер;
	НоваяСтрока.ДокОснованиеДата         = Дата;
	
	Возврат ТаблицаДанныхДоговора;
	
КонецФункции

Функция ПодготовитьТаблицуДанныхДоговораУПД(Знач Наименование, Знач Номер, Знач Дата)
	
	ТаблицаДанныхДоговора = Новый ТаблицаЗначений;
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокументНаименование");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокументНомер");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокументДата");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокументДопСведения");
	
	Если Не ДоговорУказан(Наименование) Тогда
		Возврат ТаблицаДанныхДоговора; // возвращаем пустую таблицу
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДанныхДоговора.Добавить();
	НоваяСтрока.ДокументНаименование = Наименование;
	НоваяСтрока.ДокументНомер        = Номер;
	НоваяСтрока.ДокументДата         = Дата;
	
	Возврат ТаблицаДанныхДоговора;
	
КонецФункции

Функция ЭтоСчетФактураНаАванс(СчетФактура)
	
	Если Не (СчетФактура <> Неопределено И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		ВидСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ВидСчетаФактуры");
	Иначе
		ВидСчетаФактуры = СчетФактура.ВидСчетаФактуры;
	КонецЕсли;

	Возврат ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку;
	
КонецФункции

Функция ЭтоКомиссионнаяТорговля(СчетФактура)
	
	Если Не (СчетФактура <> Неопределено И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ДокументОснование");
	Иначе
		ДокументОснование = СчетФактура.ДокументОснование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипЗначенияДокументаОснования = ТипЗнч(ДокументОснование);
	Возврат (ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗначенияДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	
КонецФункции

Функция ОснованиеСФУчаствуетВЭДО(СчетФактура)
	
	Если Не СчетФактура <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументОбъект.СчетФактураВыданный")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ДокументОснование");
	Иначе
		ДокументОснование = СчетФактура.ДокументОснование;
	КонецЕсли; 
	
	ТипЗначенияДокументаОснования = ТипЗнч(ДокументОснование);
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.Типы() Цикл
		Если ТипЗначенияДокументаОснования = Тип Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ДоговорУказан(НаименованиеДоговора)
	
	Возврат (ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
		И ЗначениеЗаполнено(НаименованиеДоговора)
		И СтрНайти(ВРег(НаименованиеДоговора), "БЕЗ ДОГОВОРА") = 0);
	
КонецФункции

Процедура СообщитьОбОшибкеПриФормированииЭД(Документ, ТекстОшибки, Отказ)

	ШаблонСообщения = НСтр("ru = 'Не удалось сформировать электронный документ на основании документа ""%1"". %2'");
	
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, Документ, ТекстОшибки),,,, Отказ);

КонецПроцедуры

Функция СозданныйПользователемВозвратПоставщику(ДанныеДокумента)

	Если Не ЗначениеЗаполнено(ДанныеДокумента.Шапка.Основание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", ДанныеДокумента.Шапка.Основание);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВозвратТоваровПоставщикуТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Сделка = &Сделка
	|	И НЕ ВозвратТоваровПоставщикуТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Ссылка,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура
	|ИТОГИ ПО
	|	Ссылка";
	
	ТаблицаТовары = ДанныеДокумента.Товары.Скопировать();
	ТаблицаТовары.Свернуть("Номенклатура", "Количество");
	
	ТаблицаТоварыДокумента = ТаблицаТовары.Скопировать();
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Выборка = ВыборкаПоДокументам.Выбрать();
		ТаблицаТоварыДокумента.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаТоварыДокумента = ТаблицаТоварыДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыДокумента, Выборка);
		КонецЦикла;
		Если ОбщегоНазначения.КоллекцииИдентичны(ТаблицаТовары, ТаблицаТоварыДокумента) Тогда
			Возврат ВыборкаПоДокументам.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ЗаполнитьДанныеДокументовПодтверждающихОтгрузку(ДеревоДанных, ДанныеШапки)
	
	Если Не (ДанныеШапки.Свойство("ДокументыОбОтгрузке")
			И ТипЗнч(ДанныеШапки.ДокументыОбОтгрузке) = Тип("ТаблицаЗначений")
			И ЗначениеЗаполнено(ДанныеШапки.ДокументыОбОтгрузке)) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДокументОбОтгрузке", "№ п/п  №  от  ");
		Возврат;
	КонецЕсли;
	
	ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 № %2 от %3 г.";
	ДанныеОбОтгрузке = Новый Массив;
	
	ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата");
	Для Каждого СтрокаДокументОбОтгрузке Из ДанныеШапки.ДокументыОбОтгрузке Цикл
		Если Не (ЗначениеЗаполнено(СтрокаДокументОбОтгрузке.НомерДокумента)
				И ЗначениеЗаполнено(СтрокаДокументОбОтгрузке.НаименованиеДокумента)) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки.Добавить();
		СтрокаДокументыПодтвержденияОтгрузки.Номер        = СтрокаДокументОбОтгрузке.НомерДокумента;
		СтрокаДокументыПодтвержденияОтгрузки.Дата         = СтрокаДокументОбОтгрузке.ДатаДокумента;
		СтрокаДокументыПодтвержденияОтгрузки.Наименование = СтрокаДокументОбОтгрузке.НаименованиеДокумента;
		
		ДанныеОбОтгрузке.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
			СтрокаДокументОбОтгрузке.НомераСтрок,
			СтрокаДокументОбОтгрузке.НомерДокумента,
			Формат(СтрокаДокументОбОтгрузке.ДатаДокумента, "ДЛФ='Д'")));
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДокументОбОтгрузке", СтрСоединить(ДанныеОбОтгрузке, ";"));
	
КонецПроцедуры

Процедура ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, Идентификатор, Значение, ПутьВДереве)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	НоваяСтрока = ТекстоваяИнформация.Добавить();
	НоваяСтрока.Идентификатор = Идентификатор;
	НоваяСтрока.Значение      = Значение;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, ПутьВДереве);

КонецПроцедуры

Процедура ДополнитьДаннымиКППОбособленногоПодразделения(СведенияОПоставщике, СведенияОГрузоотправителе, ДанныеОбособленногоПодразделения, Дата)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбособленногоПодразделения.Организация, "ОбособленноеПодразделение") Тогда
		// Если в поле Организация указано обособленное подразделение,
		// то в поле Поставщик должен быть указан КПП обособленного подразделения.
		СведенияОПоставщике.КПП = Справочники.Организации.КППНаДату(ДанныеОбособленногоПодразделения.Организация, Дата, Истина);
	ИначеЕсли ЗначениеЗаполнено(ДанныеОбособленногоПодразделения.Подразделение)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбособленногоПодразделения.Подразделение, "ОбособленноеПодразделение") Тогда
		// Если в поле Подразделение указано обособленное подразделение,
		// то в поле Поставщик должен быть указан КПП обособленного подразделения.
		СведенияОПоставщике.КПП = Справочники.ПодразделенияОрганизаций.КППНаДату(ДанныеОбособленногоПодразделения.Подразделение, Дата);
		Если ДанныеОбособленногоПодразделения.Организация = ДанныеОбособленногоПодразделения.Грузоотправитель Тогда
			СведенияОГрузоотправителе.КПП = СведенияОПоставщике.КПП;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОТаможеннойДекларации()
	
	ТаможеннаяДекларация = Новый ТаблицаЗначений;
	ТаможеннаяДекларация.Колонки.Добавить("СтранаПроисхожденияКод",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
	ТаможеннаяДекларация.Колонки.Добавить("ТаможеннаяДекларацияНомер",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	Возврат ТаможеннаяДекларация;
	
КонецФункции

Функция ПризнакТовараЕдиногоДокумента(Товар, ДанныеПервичногоДокумента = Неопределено)
	
	Если ЗначениеЗаполнено(ДанныеПервичногоДокумента) 
			И РеализацияУслугПоПереработкеОснованиеЭД(ДанныеПервичногоДокумента.Ссылка) Тогда
		Возврат "3"; // Услуга
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Не ЗначениеЗаполнено(Товар) Тогда // в СФ на аванс и в СФ на комиссионное вознаграждение номенклатура может быть не заполнена
			Возврат "3"; // Услуга
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товар, "Услуга") Тогда
			Возврат "3"; // Услуга
		Иначе
			Возврат "1"; // Имущество
		КонецЕсли;
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Возврат "1"; // Имущество
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		Возврат "4"; // Имущественные права;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный", ДатаСведений = '00010101')
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация") Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна",
									Строка(СведенияОбУчастнике.СтранаРегистрации));
	
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ПутьКРеквизитуДерева = ВидУчастника + ".ТипУчастника.ЮЛ";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".КПП",
									СведенияОбУчастнике.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
									
	Иначе
		
		ПутьКРеквизитуДерева = ВидУчастника + ".ТипУчастника";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКРеквизитуДерева + ".ИП") Тогда
			ПутьКРеквизитуДерева = ПутьКРеквизитуДерева + ".ИП";
		Иначе
			ПутьКРеквизитуДерева = ПутьКРеквизитуДерева + ".ФЛ";
		КонецЕсли;
		
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(
			ДеревоДанных,
			ПутьКРеквизитуДерева + ".ПолноеНаименование") Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ПутьКРеквизитуДерева + ".ПолноеНаименование",
				СведенияОбУчастнике.НаименованиеДляПечатныхФорм);
				
		КонецЕсли;
			
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(
			ДеревоДанных,
			ПутьКРеквизитуДерева + ".СвидетельствоОГосРегистрации")
			И ЗначениеЗаполнено(СведенияОбУчастнике.Свидетельство) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ПутьКРеквизитуДерева + ".СвидетельствоОГосРегистрации",
				СведенияОбУчастнике.Свидетельство);
				
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".ИНН",
									СведенияОбУчастнике.ИНН);
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".Фамилия",
									ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".Имя",
									ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ПутьКРеквизитуДерева + ".Отчество",
									ФИО.Отчество);
									
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, ВидАдреса, ДатаСведений);
	
	Если ЗначениеЗаполнено(АдресУчастника.АдресТекст) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Иностранный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = "Иностранный";
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("АдресДоставки") Тогда
			АдресУчастника.АдресТекст = СведенияОбУчастнике.АдресДоставки;
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
			И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбУчастнике, "ЦифровойСчет", Ложь) Тогда
		Банк     = "";
		БИК      = "";
		КоррСчет = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ПолныйПуть + ".НомерСчета",
				НомерСчета);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ПолныйПуть + ".НаимБанк",
										Банк);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ПолныйПуть + ".БИК",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет)
				И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть + ".КорСчет") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ПолныйПуть + ".КорСчет",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Руководитель = Неопределено;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Руководитель)
		И ЗначениеЗаполнено(Руководитель) Тогда
		
		ФИОРуководителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Руководитель, "Фамилия, Имя, Отчество");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия",  ФИОРуководителя.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя",      ФИОРуководителя.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", ФИОРуководителя.Отчество);
		
		Если СведенияОбУчастнике.Свойство("ДолжностьРуководителяПредставление")
			И ЗначениеЗаполнено(СведенияОбУчастнике.ДолжностьРуководителяПредставление) Тогда
			
			ДолжностьРуководителя = СведенияОбУчастнике.ДолжностьРуководителяПредставление;
		Иначе
			ДолжностьРуководителя = НРег("ru = 'Директор'");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", ДолжностьРуководителя);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Комментарий = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Комментарий) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст);
	Иначе
		Если ТипАдреса = "Структурированный" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			
			ИмяПоля = ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ;
			
			Если Не ДеревоДанных.Строки.Найти(ИмяПоля, "ПолныйПуть", Истина) = Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ИмяПоля,
								Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументОснованиеСчетаФактурыВыданного(СчетФактура)
	
	ДокументыОснования = ДокументыОснованияСчетаФактурыВыданного(СчетФактура);
	
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Возврат ДокументыОснования[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДокументыОснованияСчетаФактурыВыданного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &СчетФактура";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "АдресРФ", ДатаСведений = '00010101')
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
		
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);
		
	Иначе
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			ТипУчастника = ".ТипУчастника.ИП";
		Иначе
			ТипУчастника = ".ТипУчастника.ФЛ";
			Если Не ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ТипУчастника) Тогда
				ТипУчастника = ".ТипУчастника.ИП";
			КонецЕсли;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ТипУчастника + ".ИНН",
									СведенияОбУчастнике.ИНН);
									
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель
			И ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство);
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ТипУчастника + ".Фамилия",
									ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ТипУчастника + ".Имя",
									ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ТипУчастника + ".Отчество",
									ФИО.Отчество);
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("ОбособленноеПодразделениеОрганизации")
		И ЗначениеЗаполнено(СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации) Тогда
		
		Компания = СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации;
	Иначе
		Компания = СведенияОбУчастнике.ЮрФизЛицоСсылка;
	КонецЕсли;
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, Компания, ВидАдреса, ДатаСведений);
	
	Если СведенияОбУчастнике.Свойство("АдресДоставки") Тогда
		АдресУчастника.АдресТекст = СведенияОбУчастнике.АдресДоставки;
	КонецЕсли;
	ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, "АдресИнформация", ВидУчастника);
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Email) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.Email);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбУчастнике, "ЦифровойСчет", Ложь) Тогда
		Банк = "";
		БИК = "";
		КоррСчет = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										Банк);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СокрЛП(СведенияОбУчастнике.КодПоОКПО));
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("ПодразделениеОрганизации") Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".СтруктурноеПодразделение",
									СведенияОбУчастнике.ПодразделениеОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, Ссылка, ВидАдреса = "Юр", ДатаСведений = '00010101')
	
	СтруктураАдреса.Вставить("АдресРФ",         Истина);
	СтруктураАдреса.Вставить("КодСтр",          "");
	СтруктураАдреса.Вставить("КодСтраны",       "");
	СтруктураАдреса.Вставить("Индекс",          "");
	СтруктураАдреса.Вставить("КодРегион",       "");
	СтруктураАдреса.Вставить("КодРегиона",      "");
	СтруктураАдреса.Вставить("Район",           "");
	СтруктураАдреса.Вставить("Город",           "");
	СтруктураАдреса.Вставить("НаселПункт",      "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица",           "");
	СтруктураАдреса.Вставить("Дом",             "");
	СтруктураАдреса.Вставить("Корпус",          "");
	СтруктураАдреса.Вставить("Кварт",           "");
	СтруктураАдреса.Вставить("Квартира",        "");
	СтруктураАдреса.Вставить("АдрТекст",        "");
	СтруктураАдреса.Вставить("АдресТекст",      "");
	СтруктураАдреса.Вставить("КодГАР",          "");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Если ВидАдреса = "Факт" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ВидАдреса = "Почтовый" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		Иначе
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций;
	Иначе
		Если ВидАдреса = "Факт" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ИначеЕсли ВидАдреса = "Почтовый" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		Иначе
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОбАдресе = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Ссылка, ВидКонтактнойИнформации, ДатаСведений);
	
	АдресПредставление = "";
	Если СведенияОбАдресе.ТипАдреса = "Муниципальный" Тогда
		АдресПредставление = СведенияОбАдресе.МуниципальноеПредставление;
	Иначе
		АдресПредставление = СведенияОбАдресе.Представление;
	КонецЕсли;
	
	СтруктураАдреса.АдрТекст   = АдресПредставление;
	СтруктураАдреса.АдресТекст = АдресПредставление;
	
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.АдресРФ    = СведенияОбАдресе.АдресРФ;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	
	СтруктураАдреса.Дом        = ?(ЗначениеЗаполнено(СведенияОбАдресе.ТипДома), НРег(Строка(СведенияОбАдресе.ТипДома)) + " ", "")
		+ СведенияОбАдресе.Дом;
	
	СтруктураАдреса.Корпус     = ?(ЗначениеЗаполнено(СведенияОбАдресе.ТипКорпуса), НРег(Строка(СведенияОбАдресе.ТипКорпуса)) + " ", "")
		+ СведенияОбАдресе.Корпус;
	
	СтруктураАдреса.Кварт      = ?(ЗначениеЗаполнено(СведенияОбАдресе.ТипКвартиры), НРег(Строка(СведенияОбАдресе.ТипКвартиры)) + " ", "")
		+ СведенияОбАдресе.Квартира;
	
	СтруктураАдреса.Квартира   = ?(ЗначениеЗаполнено(СведенияОбАдресе.ТипКвартиры), НРег(Строка(СведенияОбАдресе.ТипКвартиры)) + " ", "")
		+ СведенияОбАдресе.Квартира;
		
КонецПроцедуры

Процедура ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров)

	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ТоварНаименование",,,
		НСтр("ru = 'Не указано полное наименование товара (услуги) в справочнике ""Номенклатура"".'"));
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияНаименование",,,
		НСтр("ru = 'Не указано наименование единицы измерения в справочнике ""Номенклатура"".'"));
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияКод",,,
		НСтр("ru = 'Не указан код единицы измерения в справочнике ""Номенклатура"".'"));
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "Количество",,,
		НСтр("ru = 'Не заполнено количество в табличной части документа.'"));
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "БазоваяЕдиницаКод",,,
		НСтр("ru = 'Не указан код единицы измерения в справочнике ""Номенклатура"".'"));

	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияКодДоКорректировки",,,
		НСтр("ru = 'Не указан код единицы измерения в справочнике ""Номенклатура"".'"));
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "КоличествоДоКорректировки",,,
		НСтр("ru = 'Не указано количество товара в табличной части'"));

КонецПроцедуры

Функция БанковскийСчетПродавца(ДанныеШапки)

	Если ТипЗнч(ДанныеШапки) = Тип("СтрокаТаблицыЗначений") Тогда
		Владелец = ДанныеШапки.Владелец();
		Если Владелец.Колонки.Найти("БанковскийСчетПродавца") <> Неопределено Тогда
			Возврат ДанныеШапки.БанковскийСчетПродавца;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеШапки) = Тип("Структура") И ДанныеШапки.Свойство("БанковскийСчетПродавца") Тогда
		Возврат ДанныеШапки.БанковскийСчетПродавца;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция РеализацияУслугПоПереработкеОснованиеЭД(СсылкаНаДокумент)
	
	Возврат ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РеализацияУслугПоПереработке");
	
КонецФункции

Функция ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(СсылкаНаОбъект)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПервичногоДокумента = ДанныеПервичногоДокументаУПД(СсылкаНаОбъект);
	ВидДоговора = ДанныеПервичногоДокумента.ВидДоговора;
	
	Возврат (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		Или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		Или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		Или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
КонецФункции

Функция ПокупательВыступаетНалоговымАгентомПоУплатеНДС(ДоговорКонтрагента)
	
	Если Не (ЗначениеЗаполнено(ДоговорКонтрагента)
			И ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем") = Истина;
	
КонецФункции

#КонецОбласти

#Область ОтражениеВУчетеВходящихЭД

#Область УниверсальныйДокумент

Функция ФункцияЭД(ДеревоДанных)
	
	Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
КонецФункции

Функция ЭтоФункцияСЧФДОП(ФункцияУПД)
	
	Возврат (ВРег(ФункцияУПД) = "СЧФДОП");
	
КонецФункции

Функция ЭтоФункцияДОП(ФункцияУПД)
	
	Возврат (ВРег(ФункцияУПД) = "ДОП");
	
КонецФункции

Функция ЭтоФункцияСЧФ(ФункцияУПД)
	
	Возврат (ВРег(ФункцияУПД) = "СЧФ");
	
КонецФункции

Функция ЭтоФункцияКСЧФДИС(ФункцияУКД)
	
	Возврат (ВРег(ФункцияУКД) = "КСЧФДИС");
	
КонецФункции

Функция ЭтоФункцияДИС(ФункцияУКД)
	
	Возврат (ВРег(ФункцияУКД) = "ДИС");
	
КонецФункции

Функция ЭтоФункцияКСЧФ(ФункцияУКД)
	
	Возврат (ВРег(ФункцияУКД) = "КСЧФ");
	
КонецФункции

Функция ЭтоУниверсальныйЭД(ФункцияЭД)
	
	Возврат ЭтоФункцияСЧФДОП(ФункцияЭД)
		Или ЭтоФункцияКСЧФДИС(ФункцияЭД);
	
КонецФункции

#КонецОбласти

Функция ВидОперацииДокументаПоступления(ДанныеДокумента, СпособОбработки)
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	СпособОбработкиПервичногоДокумента = СпособОбработкиПервичногоДокумента(СпособОбработки);
	
	Если Не ЗначениеЗаполнено(СпособОбработкиПервичногоДокумента) Тогда
		СпособОбработкиПервичногоДокумента = СпособыОбработки.ОпределяетсяПрограммой;
	КонецЕсли;
	
	Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel") И Булево(ДанныеШапки.ЗагрузкаИзФайлаExcel) Тогда
		СпособОбработкиПервичногоДокумента = СпособыОбработки.ОпределяетсяПрограммой;
	КонецЕсли;
	
	ВидОперации = ВидОперацииДокументаПоступленияПоСпособуОбработки(СпособОбработкиПервичногоДокумента);
	
	// Для уточнения вида операции обратимся к содержимому электронного документа.
	ДанныеТабличныхЧастей = ДанныеДокумента.ДанныеТабличныхЧастей;
	Если ДанныеШапки.ПередачаТовараКомитентом Тогда
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ОпределяетсяПрограммой
			Или СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеУслуг
			Или СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеТоваров Тогда
		Если ДанныеТабличныхЧастей.ВозвратнаяТара.Количество() > 0 Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ИначеЕсли ДанныеТабличныхЧастей.Товары.Количество()=0 Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		ИначеЕсли ДанныеТабличныхЧастей.Услуги.Количество()=0 Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

Процедура ОпределитьСпособОбработкиПриПерезаполненииПоступления(ПервичныйДокумент, СпособОбработки)
	
	Если Не (ЗначениеЗаполнено(ПервичныйДокумент)
			И ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент, "ВидОперации");
	Если ВидОперации = ВидОперацииДокументаПоступленияПоСпособуОбработки(СпособОбработки) Тогда
		// Если способ обработки соответствует виду операции поступления, то менять ничего не нужно.
		Возврат;
	КонецЕсли;
	
	СоответствиеСпособаОбработкиИВидаОперации = СоответствиеСпособаОбработкиИВидаОперацииПоступления();
	Для Каждого КлючЗначение Из СоответствиеСпособаОбработкиИВидаОперации Цикл
		Если КлючЗначение.Значение = ВидОперации Тогда
			СпособОбработки = КлючЗначение.Ключ;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеСпособаОбработкиИВидаОперацииПоступления()
	
	Соответствие = Новый Соответствие;
	
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	
	Соответствие.Вставить(СпособыОбработки.ПоступлениеУслуг,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеТоваров,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеУслугАренды,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеУслугЛизинга,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеУслугФакторинга,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеОсновныхСредств,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеМатериаловВПереработку,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеОборудования,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеОбъектовСтроительства,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеЗемельныхУчастков,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков);
	Соответствие.Вставить(СпособыОбработки.ПоступлениеТоплива,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Топливо);
	Соответствие.Вставить(СпособыОбработки.ПриемкаВыполненныхСтроительныхРабот,
		Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
	
	Возврат Соответствие;
	
КонецФункции

Процедура УстановитьДоговорДокументаПоступления(ДокументОбъект, ДанныеДокумента)
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	ОтборПоВалюте = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	Если ДанныеШапки.ПередачаТовараКомитентом Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ДанныеДокумента.Свойство("НДСИсчисляетсяНалоговымАгентом")
			И ДанныеДокумента.НДСИсчисляетсяНалоговымАгентом Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СтруктураПараметров.Вставить("УчетАгентскогоНДС", Новый Структура("ЗначениеОтбора", Истина));
		СтруктураПараметров.Вставить("ВидАгентскогоДоговора",
			Новый Структура("ЗначениеОтбора", Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров));
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			Или ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
			Или ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Иначе
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
		ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
	
КонецПроцедуры

Функция ДополнительныеПараметрыДляЗаполненияДокументаПоступления(ДокументОбъект)
	
	Результат = Новый Структура("РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ПлательщикНДС, ОтражениеВУСН");

	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	Результат.РассчитыватьСуммаВРознице = (ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах
		И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	НТТ = (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = (СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	
	Результат.ЗаполнятьСтавкуНДСВРознице = (НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице);
	
	Результат.ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	ЭтоКомиссия = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Результат.ОтражениеВУСН  = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
	
	Возврат Результат;
	
КонецФункции

Функция ДокументИнформационнойБазыСоздан(Документ)
	
	Возврат ЗначениеЗаполнено(Документ);
	
КонецФункции

Процедура УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДокумента)
	
	Если Не (ДанныеДокумента.Свойство("ФункцияЭД")
			И ЭтоУниверсальныйЭД(ДанныеДокумента.ФункцияЭД)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", ДокументОбъект.Метаданные()) Тогда
		ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(ДокументОбъект.ДоговорКонтрагента);
		ДокументОбъект.ЭтоУниверсальныйДокумент = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) И ЭтоСсылкаНаОбъектВДеревеРазбора(Результат) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСсылкаНаОбъектВДеревеРазбора(Значение)
	
	// Ссылки на объекты в дереве разбора имеют вид "X_X".
	Возврат ТипЗнч(Значение) = Тип("Строка")
		И СтрДлина(Значение) = 3
		И ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Лев(Значение, 1))
		И Сред(Значение, 2, 1) = "_"
		И ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Прав(Значение, 1));
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыПолученного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка = &СчетФактура
	|	И СчетФактураПолученныйДокументыОснования.НомерСтроки = 1";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, Данные)
	
	Если Данные.Свойство("НомерТД")
			И ЕстьКолонкаТаблицыЗначений(СтрокаТаблицы, "НомерГТД") Тогда
		СтрокаТаблицы.НомерГТД = НомерТДПолучитьСсылку(Данные.НомерТД);
	КонецЕсли;
	
	Если Данные.Свойство("КодСтраныПроисхождения")
			И ЕстьКолонкаТаблицыЗначений(СтрокаТаблицы, "СтранаПроисхождения") Тогда
		СтрокаТаблицы.СтранаПроисхождения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхождения);
	КонецЕсли;
	
	Если Данные.Свойство("НомерТДДоИзменения")
			И ЕстьКолонкаТаблицыЗначений(СтрокаТаблицы, "НомерГТДДоИзменения") Тогда
		СтрокаТаблицы.НомерГТДДоИзменения = НомерТДПолучитьСсылку(Данные.НомерТДДоИзменения);
	КонецЕсли;
	
	Если Данные.Свойство("КодСтраныПроисхожденияДоИзменения")
			И ЕстьКолонкаТаблицыЗначений(СтрокаТаблицы, "СтранаПроисхожденияДоИзменения") Тогда
		СтрокаТаблицы.СтранаПроисхожденияДоИзменения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхожденияДоИзменения);
	КонецЕсли; 

КонецПроцедуры

Функция НомерТДПолучитьСсылку(НомерТД)
	
	Если Не ЗначениеЗаполнено(НомерТД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерТД = СокрЛП(НомерТД);
	НомерТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
	Если Не ЗначениеЗаполнено(НомерТДСсылка) Тогда
		
		НомерТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерТДОбъект.Код = НомерТД;
		НомерТДОбъект.РегистрационныйНомер = Справочники.НомераГТД.РегистрационныйНомер(НомерТД);
		НомерТДОбъект.Записать();
		НомерТДСсылка = НомерТДОбъект.Ссылка;
		
	КонецЕсли; 
	
	Возврат НомерТДСсылка;
	
КонецФункции

Функция СтранаПроисхожденияПолучитьСсылку(КодСтраныПроисхождения)
	
	Если Не ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СтранаПроисхожденияСсылка = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СокрЛП(КодСтраныПроисхождения));
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти страну происхождения в классификаторе стран мира.");
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтранаПроисхожденияСсылка) Тогда
		Возврат СтранаПроисхожденияСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи)
	
	ОписаниеОшибки = "";
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект,, ОписаниеОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Запись документа ИБ'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция НоменклатураИБ(СведенияОТоваре, ПутьКДаннымСопоставления)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДаннымСопоставления, "ПолныйПуть", Истина);
	
	Если Сопоставление <> Неопределено Тогда
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДаннымСопоставления + ".НоменклатураИБ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка электронных документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ЭтоПоступлениеДопРасходов(СпособОбработки)
	
	Возврат (СпособОбработкиПервичногоДокумента(СпособОбработки) = СпособыОбработкиВходящихЭД().ПоступлениеДопРасходов);
	
КонецФункции

Функция ЭтоПоступлениеИзПереработки(СпособОбработки, ДеревоДанных, ВидЭД)
	
	Результат = Ложь;
	СпособОбработкиПервичногоДокумента = СпособОбработкиПервичногоДокумента(СпособОбработки);
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	Если СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеИзПереработки Тогда
		Результат = Истина;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ОпределяетсяПрограммой Тогда 
		ПутьВДереве = "";
		Если ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность") Тогда
			Если ВРег(ВидЭД) = ВРег("УПД") Тогда
				ПутьВДереве = "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация";
			ИначеЕсли ВРег(ВидЭД) = ВРег("Акт") Тогда
				ПутьВДереве = "ДопДанные.Подписанные";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьВДереве) Тогда
			ДопДанные = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьВДереве);
			СтрокаДопДанных = ДопДанные.Найти("РеализацияУслугПоПереработке");
			Если СтрокаДопДанных <> Неопределено И СтрокаДопДанных.Значение = "Истина" Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВходящегоЭД(ДеревоДанных)
	
	Результат = Новый Структура;
	Для каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		Путь = СтрокаДерева.ПолныйПуть;
		ДанныеСтроки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Путь);
		Результат.Вставить(Путь, ДанныеСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоУслуга(Номенклатура)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Вид номенклатуры может быть незаполнен, поэтому проверяем на равенство истине.
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры.Услуга") = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИмяТабличнойЧастиПоступленияПоСпособуОбработки(СпособОбработкиПервичногоДокумента, ЭтоУслуга)
	
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	
	ТабличныеЧастиПоступления = Метаданные.Документы.ПоступлениеТоваровУслуг.ТабличныеЧасти;
	ИмяТабличнойЧасти = "";
	
	Если ЭтоУслуга Тогда
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.Услуги.Имя;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОборудования Тогда
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.Оборудование.Имя;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеТоплива Тогда
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.Топливо.Имя;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОсновныхСредств
			Или СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеЗемельныхУчастков Тогда
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.ОсновныеСредства.Имя;
	ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОбъектовСтроительства Тогда
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.ОбъектыСтроительства.Имя;
	Иначе
		ИмяТабличнойЧасти = ТабличныеЧастиПоступления.Товары.Имя;
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

#Область ПоискОрганизацииКонтрагента

// Поиск организации при загрузке электронных документов, регламентированных ФНС.
Процедура НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, ВидУчастника, ОписаниеОшибки = "")
	
	Организация = Неопределено;
	ПодразделениеОрганизации = Неопределено;
	
	ТипУчастника = СокрЛП(ВРег(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника")));
	ИНН = "";
	КПП = "";
	ДатаВходящегоДокумента = Неопределено;
	ДанныеОбъекта.Свойство("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Если ТипУчастника = "ЮЛ" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ТолькоОсновнаяРегистрация = Не (ЭтоКППКрупнейшегоНалогоплательщика(КПП)
			И ПолучитьФункциональнуюОпцию("РасширенныйФункционал"));
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И ВЫБОР
			|			КОГДА &ТолькоОсновнаяРегистрация
			|				ТОГДА Организации.КПП = &КПП
			|			ИНАЧЕ Организации.КрупнейшийНалогоплательщикКПП = &КПП
			|		КОНЕЦ
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|	И НЕ Организации.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА &ТолькоОсновнаяРегистрация
			|			ТОГДА Организации.КПП
			|		ИНАЧЕ Организации.КрупнейшийНалогоплательщикКПП
			|	КОНЕЦ КАК КПП
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН",                       ИНН);
		Запрос.УстановитьПараметр("КПП",                       КПП);
		Запрос.УстановитьПараметр("ТолькоОсновнаяРегистрация", ТолькоОсновнаяРегистрация);
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаПоИННКПП = Результат[0].Выбрать();
		Если ВыборкаПоИННКПП.Следующий() Тогда // найдено точное соответствие
			Организация = ВыборкаПоИННКПП.Ссылка;
		Иначе // нет точного соответствия, возможно у организации изменился КПП, или это обособленное подразделение
			ВыборкаПоИНН = Результат[1].Выбрать();
			Если ЗначениеЗаполнено(КПП) Тогда
				ЭтоКППОбособленногоПодразделения = ЭтоКППОбособленногоПодразделения(КПП);
				Пока ВыборкаПоИНН.Следующий() Цикл
					КППНаДату = Справочники.Организации.КППНаДату(ВыборкаПоИНН.Ссылка, ДатаВходящегоДокумента, ТолькоОсновнаяРегистрация);
					Если КППНаДату = КПП Тогда
						Организация = ВыборкаПоИНН.Ссылка;
					ИначеЕсли ЭтоКППОбособленногоПодразделения
							И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделения") Тогда
						ПодразделениеОрганизации = ОбособленноеПодразделениеОрганизацииПоКПП(ВыборкаПоИНН.Ссылка, КПП);
						Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
							Организация = ВыборкаПоИНН.Ссылка;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Организация) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе // в ЭД не указан КПП организации
				Если ВыборкаПоИНН.Следующий() Тогда
					Организация = ВыборкаПоИНН.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = "ИП" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = "ФЛ" Тогда
		
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если организация не найдена, то вызываем исключение и не создаем документ ИБ на основании ЭД.
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Если ЗначениеЗаполнено(КПП) Тогда
			Шаблон = НСтр("ru = 'Не удалось создать документ, организация с ИНН/КПП %1/%2 не найдена'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН, КПП);
		Иначе
			Шаблон = НСтр("ru = 'Не удалось создать документ, организация с ИНН %1 не найдена'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ДанныеОбъекта.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
	КонецЕсли;
	
КонецПроцедуры

// Поиск организации при загрузке электронных документов формата CML.
Процедура НайтиОрганизациюПоДаннымЭДCML(ДанныеОбъекта, ИНН, КПП)
	
	Организация = Неопределено;
	ПодразделениеОрганизации = Неопределено;
	
	ДатаВходящегоДокумента = Неопределено;
	ДанныеОбъекта.Свойство("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	
	Если ЗначениеЗаполнено(КПП) Тогда
		
		ЭтоКППКрупнейшегоНалогоплательщика = ЭтоКППКрупнейшегоНалогоплательщика(КПП);
		ТолькоОсновнаяРегистрация          = Не (ЭтоКППКрупнейшегоНалогоплательщика
			И ПолучитьФункциональнуюОпцию("РасширенныйФункционал"));
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка,
			|	Организации.КПП КАК КПП
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЭтоКППОбособленногоПодразделения = ЭтоКППОбособленногоПодразделения(КПП);
			Пока Выборка.Следующий() Цикл
				КППНаДату = Справочники.Организации.КППНаДату(Выборка.Ссылка, ДатаВходящегоДокумента, ТолькоОсновнаяРегистрация);
				Если КППНаДату = КПП Тогда
					Организация = Выборка.Ссылка;
				ИначеЕсли ЭтоКППОбособленногоПодразделения
					И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделения") Тогда
					
					ПодразделениеОрганизации = ОбособленноеПодразделениеОрганизацииПоКПП(Выборка.Ссылка, КПП);
					Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
						Организация = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Организация) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если организация не найдена, то вызываем исключение и не создаем документ ИБ на основании ЭД.
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Если ЗначениеЗаполнено(КПП) Тогда
			Шаблон = НСтр("ru = 'Не удалось создать документ, т.к. организация с ИНН/КПП %1/%2 не найдена'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН, КПП);
		Иначе
			Шаблон = НСтр("ru = 'Не удалось создать документ, т.к. организация с ИНН %1 не найдена'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ДанныеОбъекта.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКППОбособленногоПодразделения(КПП)
	
	Если Не ЗначениеЗаполнено(КПП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодПричиныПостановкиНаУчет = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(КПП);
	Возврат Не ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(КодПричиныПостановкиНаУчет);

КонецФункции

Функция ЭтоКППКрупнейшегоНалогоплательщика(КПП)

	КодПричиныПостановкиНаУчет = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(КПП);
	Возврат ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетКрупнейшегоНалогоплательщика(КодПричиныПостановкиНаУчет);

КонецФункции

Функция ОбособленноеПодразделениеОрганизацииПоКПП(Организация, КПП)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение
	|	И ПодразделенияОрганизаций.КПП = &КПП";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	ТипУчастника = СокрЛП(ВРег(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника")));
	Если ТипУчастника = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		ДатаСведений = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", Ложь);
		Возврат КонтрагентПоДаннымЭД_ЮЛ(ИНН, КПП, ДатаСведений);
	ИначеЕсли ТипУчастника = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Возврат КонтрагентПоДаннымЭД_ФЛ(ИНН);
	ИначеЕсли ТипУчастника = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		Возврат КонтрагентПоДаннымЭД_ФЛ(ИНН);
	ИначеЕсли ТипУчастника = "ИЛ" Тогда
		Наименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Возврат КонтрагентПоДаннымЭД_ПоНаименованию(Наименование);
	КонецЕсли;
	
КонецФункции

Функция КонтрагентПоДаннымЭД_ЮЛ(ИНН, КПП, ДатаСведений = Неопределено)
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Контрагенты.ПометкаУдаления"; 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоИННиКПП = РезультатЗапроса[0].Выбрать();
	ВыборкаПоИНН     = РезультатЗапроса[1].Выбрать();
	КонтрагентНайденныйПоИНН = Неопределено;
	Если ВыборкаПоИННиКПП.Следующий() Тогда
		Контрагент = ВыборкаПоИННиКПП.Ссылка; // найдено точное соответствие по ИНН и КПП
	Иначе
		Пока ВыборкаПоИНН.Следующий() Цикл
			Если ЗначениеЗаполнено(ДатаСведений) Тогда
				КППНаДату = Справочники.Контрагенты.КППНаДату(ВыборкаПоИНН.Ссылка, ДатаСведений);
				Если КПП = КППНаДату Тогда
					Контрагент = ВыборкаПоИНН.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если Не (ЗначениеЗаполнено(КонтрагентНайденныйПоИНН)
					Или ЭтоКППОбособленногоПодразделения(ВыборкаПоИНН.КПП)) Тогда
				КонтрагентНайденныйПоИНН = ВыборкаПоИНН.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не была создана карточка обособленного подразделения,
	// поэтому вернем данные головного контрагента.
	Если Не ЗначениеЗаполнено(Контрагент)
			И ЭтоКППОбособленногоПодразделения(КПП)
			И ЗначениеЗаполнено(КонтрагентНайденныйПоИНН) Тогда
		Контрагент = КонтрагентНайденныйПоИНН;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция КонтрагентПоДаннымЭД_ФЛ(ИНН)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция КонтрагентПоДаннымЭД_ПоНаименованию(Наименование)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеПолное", Наименование);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УПД_2019

Процедура ЗаполнитьДанныеДляСЧФДОПИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Описание, Отказ)
	
	ЭтоКомиссионнаяТорговля  = Ложь;
	ЭтоСчетФактураНаАванс    = Ложь;
	ОснованиеСФУчаствуетВЭДО = Истина;
	ПервичныйДокумент = Неопределено;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = Основание;
		ЭтоКомиссионнаяТорговля  = ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(СчетФактура);
		ЭтоСчетФактураНаАванс    = ЭтоСчетФактураНаАванс(СчетФактура);
		ОснованиеСФУчаствуетВЭДО = ОснованиеСФУчаствуетВЭДО(СчетФактура);
		ПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ДокументОснование");
		Описание.Основания.Добавить(ПервичныйДокумент);
	Иначе
		ПервичныйДокумент = Основание;
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ПервичныйДокумент);
		Описание.Основания.Добавить(СчетФактура)
	КонецЕсли;
	
	Если Не ДляВидаОперацииДокументаДоступенЭДО(ПервичныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для вида операции электронный документооборот недоступен.'");
		СообщитьОбОшибкеПриФормированииЭД(ПервичныйДокумент, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ВозможноФормированиеЭлектронногоДокумента(ПервичныйДокумент, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	Если ЭтоКомиссионнаяТорговля
			Или ЭтоСчетФактураНаАванс
			Или Не ОснованиеСФУчаствуетВЭДО Тогда
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Иначе
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Неопределено, Истина), Истина, Истина);
	КонецЕсли;
	
	Если ТаблицаСчетовФактур = Неопределено
		ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		СообщитьОбОшибкеПриФормированииЭД(
				Основание, НСтр("ru = 'Не выписан счет-фактура'"), Отказ);
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ЭтоСчетФактураНаАванс"  , ЭтоСчетФактураНаАванс);
	Настройки.Вставить("ЭтоКомиссионнаяТорговля", ЭтоКомиссионнаяТорговля);
	Настройки.Вставить("ЭтоСводныйСчетФактура"  , Ложь);
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ЗаполнитьОсновнуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных, Отказ);
	
	Если Не (ЭтоСчетФактураНаАванс
			ИЛИ ЭтоКомиссионнаяТорговля
			ИЛИ Не ОснованиеСФУчаствуетВЭДО) Тогда
		ЗаполнитьРасширеннуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Отказ)
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры") = "Авансовый" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДляВидаОперацииДокументаДоступенЭДО(Основание) Тогда
		ТекстСообщения = НСтр("ru = 'Для вида операции электронный документооборот недоступен.'");
		СообщитьОбОшибкеПриФормированииЭД(Основание, ТекстСообщения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ВозможноФормированиеЭлектронногоДокумента(Основание, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Основание);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
		МассивДокументов, Документы[Основание.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(), Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляФормированияЭД = ТаблицаДанных[0];
	
	Если Не Настройки.Свойство("ВидОперацииЭД") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДоговорКонтрагента.ВидДоговора")= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Настройки.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Комиссия);
		
	КонецЕсли;
	
	Настройки.Вставить("ЭтоСчетФактураНаАванс"  , Ложь);
	Настройки.Вставить("ЭтоКомиссионнаяТорговля", ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(Основание));
	Настройки.Вставить("ЭтоСводныйСчетФактура"  , Ложь);
	ЗаполнитьОсновнуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных, Отказ);
	ЗаполнитьРасширеннуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных); 

КонецПроцедуры

Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(Основание, Настройки, ДеревоДанных, Отказ)
	
	СчетФактура = Основание;
	ЭтоКомиссионнаяТорговля  = ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(СчетФактура);
	ЭтоСчетФактураНаАванс    = ЭтоСчетФактураНаАванс(СчетФактура);
	ОснованиеСФУчаствуетВЭДО = ОснованиеСФУчаствуетВЭДО(СчетФактура);
	ЭтоСводныйСчетФактура    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "СводныйКомиссионный");
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	Если ЭтоКомиссионнаяТорговля
		Или ЭтоСчетФактураНаАванс
		Или Не ОснованиеСФУчаствуетВЭДО Тогда
		
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Иначе
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Неопределено, Истина));
	КонецЕсли;
	Если ТаблицаСчетовФактур = Неопределено
		ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ЭтоСчетФактураНаАванс"  , ЭтоСчетФактураНаАванс);
	Настройки.Вставить("ЭтоКомиссионнаяТорговля", ЭтоКомиссионнаяТорговля);
	Настройки.Вставить("ЭтоСводныйСчетФактура"  , ЭтоСводныйСчетФактура);
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ЗаполнитьОсновнуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьОсновнуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных, Отказ)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	ДанныеПервичногоДокумента = ДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД.Ссылка);
	ДанныеШапки.Вставить("ВидДоговора",               ДанныеПервичногоДокумента.ВидДоговора);
	ДанныеШапки.Вставить("СсылкаНаПервичныйДокумент", ДанныеПервичногоДокумента.Ссылка);
	
	ПолучитьДанныеПоКонтрагентамСводногоСчетаФактуры(ДанныеДляФормированияЭД, Настройки); 
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьМаркируемуюПродукциюДокумента(ДанныеДляФормированияЭД.Ссылка, Отказ);
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	ИдентификаторМестаПоставкиЕИС = "";
	Если ДанныеШапки.Свойство("ДанныеЭлектронногоАктирования") Тогда
		ЭтоЭлектронноеАктированиеЕИС = Истина;
		ДанныеЭлектронногоАктированияЕИС = ДанныеШапки.ДанныеЭлектронногоАктирования;
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУПД();
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения", ДанныеПриложенияЕИС);
		ЭлектронноеАктированиеБП.ЗаполнитьДанныеДереваДляЭлектронногоАктированияЕИС(ДеревоДанных,
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеШапки,
			ДанныеПриложенияЕИС,
			Ложь);
		ИдентификаторМестаПоставкиЕИС = Строка(Новый УникальныйИдентификатор);
		ИдентификаторМестаПоставкиЕИС = СтрЗаменить(ИдентификаторМестаПоставкиЕИС, "-", "");
	Иначе
		ЭлектронноеАктированиеБП.ПроверитьДоговорЭД(
			Настройки, ДанныеДляФормированияЭД, ДеревоДанных, Ложь);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры",
		?(Настройки.ЭтоСчетФактураНаАванс, "Авансовый", "Реализация"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ЗаполнитьСведенияОПоставщикахУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки);
	
	Настройки.Вставить("ИдентификаторМестаПоставкиЕИС", ИдентификаторМестаПоставкиЕИС);
	ЗаполнитьСведенияОПокупателяхУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки);
	
	ДобавитьДанныеОтчетаКомитентуВДопДанные(ДеревоДанных, ДанныеДляФормированияЭД);
	
	ПолучитьКомиссионераДляПеревыставленногоСчетаФактуры(ДеревоДанных, ДанныеШапки, ДанныеДляФормированияЭД);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если НЕ ЭтоЭлектронноеАктированиеЕИС И ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление Тогда
		Если ЗначениеЗаполнено(ДанныеДляФормированияЭД.СчетФактура) Тогда
			ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
			Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
				ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	ПлатежныеДокументы.Колонки.Добавить("Сумма");
	Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
		Для Каждого ПлатежныйДокумент ИЗ ДанныеШапки.ТаблицаПлатежныхДокументов Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаДокумента;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерДокумента;
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	Если Настройки.ЭтоСчетФактураНаАванс Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", 
			НСтр("ru = 'Регистрация счет-фактуры на аванс'"));
	КонецЕсли;
	
	ЗаполнитьОбстоятельстваФормированияУПД(ДеревоДанных, Настройки, ДанныеПервичногоДокумента);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтрокиГосконтрактаЕИС");
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторМестаПоставкиЕИС");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	УчетАгентскогоНДСПокупателем = (ДанныеШапки.Свойство("НДСИсчисляетсяНалоговымАгентом")
		И ДанныеШапки.НДСИсчисляетсяНалоговымАгентом);
	
	// Маркировка.
	ТаблицаКодовМаркировки = Неопределено;
	Если ЕстьКолонкаТаблицыЗначений(ДанныеДляФормированияЭД, "ШтрихкодыУпаковок") Тогда
		ТаблицаКодовМаркировки = ДанныеДляФормированияЭД.ШтрихкодыУпаковок;
	КонецЕсли;
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НаименованиеНоменклатуры = ?(ЗначениеЗаполнено(Строка.ТоварНаименование), Строка.ТоварНаименование,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "НаименованиеПолное")); 
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		НоваяСтрока.ТоварНаименование   = НаименованиеНоменклатуры;
		
		Если НеобходимоУказатьЕдиницуИзмерения(Строка, Настройки.ЭтоСчетФактураНаАванс) Тогда
			Если ПустаяСтрока(Строка.ЕдиницаИзмеренияКод) И ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "ЕдиницаИзмерения");
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
					РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
					НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
					НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(РеквизитыЕдиницыИзмерения.Наименование);
				КонецЕсли;
			Иначе
				НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = ?(Настройки.ЭтоСчетФактураНаАванс И Не УчетАгентскогоНДСПокупателем, 0, Строка.Стоимость);
		НоваяСтрока.НалоговаяСтавка           = ?(УчетАгентскогоНДСПокупателем, СтавкаНДСИсчисляетсяНалоговымАгентом(), Строка.СтавкаНДС);
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = ?(УчетАгентскогоНДСПокупателем, 0, Строка.Всего);
		
		Если ЗначениеЗаполнено(Строка.НомерГТД)
			Или ЗначениеЗаполнено(Строка.СтранаПроисхожденияКод) Тогда
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации();
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод = Строка.СтранаПроисхожденияКод;
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.СтранаПроисхождения;
		КонецЕсли;
		
		НоваяСтрока.Признак = ПризнакТовараЕдиногоДокумента(Строка.Товар, ДанныеПервичногоДокумента);
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		ЗаполнитьСведенияОМаркировкеВУПД(НоваяСтрока, ДанныеПервичногоДокумента.Ссылка, Строка, ТаблицаКодовМаркировки);
		ЗаполнитьСведенияОПрослеживаемостиВЭлектронномДокументе(НоваяСтрока, Строка);
		
		Если ТолькоУслуги
				И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
			НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
				Строка.Товар, НоваяСтрока.НалоговаяСтавка, НаименованиеНоменклатуры);
			Если РеализацияУслугПоПереработкеОснованиеЭД(ДанныеПервичногоДокумента.Ссылка) Тогда
				// Номенклатура документа "Реализация услуг по переработке" одновременно содержит данные о продукции и оказанной услуге по переработке.
				// Данное изменение необходимо, чтобы при формировании ЭД УПД наименование заполнялось данными поля "Содержание".
				НоваяСтрока.Сопоставление.Наименование = НаименованиеНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.ТоварКод = КодТоварнойПозиции(Строка.Товар, Строка.ТоварКод, Настройки, НоваяСтрока.Сопоставление);
		
		Если ЗначениеЗаполнено(Строка.ТоварКодТНВЭД) И ТипЗнч(Строка.ТоварКодТНВЭД) = Тип("СправочникСсылка.КлассификаторТНВЭД") Тогда
			НоваяСтрока.КодВидаТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ТоварКодТНВЭД, "Код");
		КонецЕсли;
		
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			НоваяСтрока.ИдентификаторМестаПоставкиЕИС = ИдентификаторМестаПоставкиЕИС;
			НоваяСтрока.ИдентификаторСтрокиГосконтрактаЕИС =
				Строка.ИдентификаторСтрокиГосконтрактаЕИС;
			ЭлектронноеАктированиеБП.ЗаполнитьДанныеПоСтрокеТоваровУПД_2019(
				НоваяСтрока, Строка, ДанныеШапки, ДанныеПриложенияЕИС);
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ?(Настройки.ЭтоСчетФактураНаАванс И Не УчетАгентскогоНДСПокупателем, 0, ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога")));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьДанныеДокументовПодтверждающихОтгрузку(ДеревоДанных, ДанныеШапки);
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
	|	- не заполнена колонка ""Страна происхождения""
	|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
	// Не выводим данные Грузоотправителя и Грузополучателя, если в документе только услуги или это счет-фактура на аванс.
	Если Не (ТолькоУслуги Или Настройки.ЭтоСчетФактураНаАванс) Тогда
		ЗаполнитьСведенияОГрузоотправителяхИГрузополучателяхУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасширеннуюЧастьУПД_2019(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	ИначеЕсли Настройки.Свойство("ВидОперацииЭД") Тогда
		ВидОперацииЭД = Настройки.ВидОперацииЭД;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		ПризнакТовара = ПризнакТовараЕдиногоДокумента(Строка.Товар);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ДанныеПервичногоДокумента = ДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД.Ссылка);
	
	// Дата отгрузки должна быть равна дате документа-реализации товаров и услуг.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеПервичногоДокумента.ДатаОтгрузки);
	
	// Данные транспортной накладной (данные документа "Реализация товаров и услуг")
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	СтрокаТранспортнаяНакладная = ТранспортнаяНакладная.Добавить();
	СтрокаТранспортнаяНакладная.ТранспортнаяНакладнаяНомер = ДанныеПервичногоДокумента.Номер;
	СтрокаТранспортнаяНакладная.ТранспортнаяНакладнаяДата = ДанныеПервичногоДокумента.Дата;
	
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументРеализации");
			Если ЗначениеЗаполнено(ДокументРеализации) Тогда
				ДанныеДляФормированияЭД.ДокументыОснования.Добавить(ДокументРеализации);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ОснованиеОтгрузкиТоваров = ПодготовитьТаблицуДанныхДоговораУПД(
		ДанныеШапки.Основание,
		ДанныеШапки.ОснованиеНомер,
		ДанныеШапки.ОснованиеДата);
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеОтгрузкиТоваров, "ДокументДата",,,
		НСтр("ru = 'Необходимо указать дату договора.'"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке", ДанныеШапки.ДанныеТранспортнаяНакладная);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке", ДанныеШапки.СопроводительныеДокументы);
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике",, ДанныеШапки.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
		И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		
		// Кладовщик работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
			
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		// Кладовщик не работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
	КонецЕсли;
	
	ПутьВДереве = "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация";
	
	Если ДанныеШапки.ОснованиеВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ПередачаТовараКомитентом", "Истина", ПутьВДереве);
	КонецЕсли;
	
	Если РеализацияУслугПоПереработкеОснованиеЭД(ДанныеПервичногоДокумента.Ссылка) Тогда
		ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "РеализацияУслугПоПереработке", "Истина", ПутьВДереве);
	КонецЕсли;
	
	// Информационное поле 
	БанковскийСчетПродавца = БанковскийСчетПродавца(ДанныеШапки);
	ЦифровойСчет = ?(ЗначениеЗаполнено(БанковскийСчетПродавца),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПродавца, "ЦифровойСчет"), Ложь);
		
	Если ЦифровойСчет Тогда
		НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПродавца, "НомерСчета");
		ПутьВДереве = "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация";
		ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ПолучЦифровойРубль", НомерСчета, ПутьВДереве);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастниковУПД_2019(ДеревоДанных, СведенияОбУчастниках, ВидУчастника, ВидАдреса = "АдресРФ", ДатаСведений = '00010101', ЭтоЭлектронноеАктирование = Ложь, ДанныеПриложенияЕИС = Неопределено)
	
		ТаблицаУчастников = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, ВидУчастника);
		ТаблицаУчастников.Колонки.Добавить("СведенияОбУчастнике");
		
		Для Каждого СведенияОбУчастнике Из СведенияОбУчастниках Цикл
			СтрокаУчастника = ТаблицаУчастников.Добавить();
			ДанныеУчастника = ДанныеУчастникаУПД(СведенияОбУчастнике, ВидУчастника, ВидАдреса, ДатаСведений);
			Если ВРег(ВидУчастника) = ВРег("СведенияОГрузоотправителе") Тогда
				СтрокаУчастника.Грузоотправитель = ДанныеУчастника;
				СтрокаУчастника.ОнЖе = Ложь;
				ЗаполнитьЗначенияСвойств(СтрокаУчастника, ДанныеУчастника, "СведенияОбУчастнике");
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаУчастника, ДанныеУчастника);
				// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
				Если ЭтоЭлектронноеАктирование Тогда
					ЭлектронноеАктированиеБП.ЗаполнитьМестаПоставкиПриложенияЕИСПоДаннымУчастника(
						СведенияОбУчастнике, ДанныеУчастника, СтрокаУчастника, ВидУчастника, ДанныеПриложенияЕИС);
				КонецЕсли;
				// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			КонецЕсли;
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУчастников, ВидУчастника);
		
КонецПроцедуры

Функция ДанныеУчастникаУПД(СведенияОбУчастнике, ВидУчастника, ВидАдреса, ДатаСведений)
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	// Наименование, ИНН, КПП участника
	Данные.Вставить("ТипУчастника", Новый Структура);
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН",                     СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП",                     СведенияОбУчастнике.КПП);
	Иначе
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ИНН)
			И СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			
			ТипУчастника = "ИП";
		Иначе
			ТипУчастника = "ФЛ";
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		Данные.ТипУчастника.Вставить(ТипУчастника, Новый Структура);
		Данные.ТипУчастника[ТипУчастника].Вставить("ИНН",      СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника[ТипУчастника].Вставить("Фамилия",  ФИО.Фамилия);
		Данные.ТипУчастника[ТипУчастника].Вставить("Имя",      ФИО.Имя);
		Данные.ТипУчастника[ТипУчастника].Вставить("Отчество", ФИО.Отчество);   
		
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
				
			Данные.ТипУчастника[ТипУчастника].Вставить("СвидетельствоОГосРегистрации", Свидетельство);
		КонецЕсли
		
	КонецЕсли;
	
	// Контактная информация участника
	Данные.Вставить("Адрес", Новый Структура);
	Данные.Адрес.Вставить("АдресИнформация", Новый Структура("КодСтраны, АдресТекст, КодРегиона"));
	
	Если СведенияОбУчастнике.Свойство("ОбособленноеПодразделениеОрганизации")
		И ЗначениеЗаполнено(СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации) Тогда
		
		Компания = СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации;
	Иначе
		Компания = СведенияОбУчастнике.ЮрФизЛицоСсылка;
	КонецЕсли;
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, Компания, ВидАдреса, ДатаСведений);
	
	Если СведенияОбУчастнике.Свойство("АдресДоставки") Тогда
		АдресУчастника.АдресТекст = СведенияОбУчастнике.АдресДоставки;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Данные.Адрес.АдресИнформация, АдресУчастника);
	
	Если Не ЗначениеЗаполнено(Данные.Адрес.АдресИнформация.КодСтраны)
		И Не ЗначениеЗаполнено(Данные.Адрес.АдресИнформация.АдресТекст) Тогда
		Данные.Адрес.Удалить("АдресИнформация");
	КонецЕсли;
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("Email", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	// Банковские реквизиты
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбУчастнике, "ЦифровойСчет", Ложь) Тогда
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);		
		Банк =     "";
		БИК =      "";
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", Банк);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	// ОКПО
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		Данные.Вставить("КодОКПО", СокрЛП(КодПоОКПО));
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("ПодразделениеОрганизации") Тогда
		Данные.Вставить("СтруктурноеПодразделение", СведенияОбУчастнике.ПодразделениеОрганизации);
	КонецЕсли;
	
	Возврат Данные;

КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД_2019(ДеревоДанных, СпособОбработки, ОписаниеОшибки = "")
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	Если ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Добавить("Номенклатура");
	КонецЕсли;
	Если ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Добавить("СтавкаНДС");
	КонецЕсли;

	ДанныеТабличныхЧастей.Товары.Колонки.Добавить("ШтрихкодыУпаковок");
	ДанныеТабличныхЧастей.ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
		
		// Вид операции ЭД может быть не указан, т.к. реквизит не является обязательным.
		Если Не ЗначениеЗаполнено(ДанныеОбъекта.ВидОперацииЭД) Тогда
			ДанныеОбъекта.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
		КонецЕсли;
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта, ОписаниеОшибки);
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		КонецЕсли;
	ИначеЕсли ДанныеОбъекта.Исправление Тогда
		ДокументыОснованияДокументаОтгрузки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки");
		ДокументПоступления = Неопределено;
		Если ТипЗнч(ДокументыОснованияДокументаОтгрузки) = Тип("Массив") Тогда
			Для Каждого ДокументОснование Из ДокументыОснованияДокументаОтгрузки Цикл
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(ДокументыОснованияДокументаОтгрузки) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = ДокументыОснованияДокументаОтгрузки;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументПоступления) Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументПоступления);
		КонецЕсли;
	КонецЕсли;
	
	ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
	Если ТекстоваяИнформация <> Неопределено Тогда
		Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
			Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
				ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	СпособОбработкиПервичногоДокумента = СпособОбработкиПервичногоДокумента(СпособОбработки);
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление"); 
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		ЭтоУслуга = Ложь;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ЭтоУслуга = ЭтоУслуга(Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(Признак) Тогда
			ЭтоУслуга = ?(Признак = "1", Ложь, Истина);
		Иначе
			ЭтоУслуга = Истина;
		КонецЕсли;
		
		НоваяСтрока = ДанныеТабличныхЧастей[ИмяТабличнойЧастиПоступленияПоСпособуОбработки(СпособОбработкиПервичногоДокумента, ЭтоУслуга)].Добавить();
		
		Если ЭтоУслуга Тогда
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		КонецЕсли;
		
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "ЕдиницаИзмерения") Тогда
			НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
		КонецЕсли;
		
		// Обязательные реквизиты:
		// Ставка "НДС исчисляется налоговым агентом" используется при продаже металлолома, сырых шкур животных
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
			НДСИсчисляетсяНалоговымАгентом = Истина;
			Если ИспользуетсяОбратноеНачислениеНДС Тогда
				НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
				// Вычисляем НДС сверху по общей ставке
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Иначе
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "Количество") Тогда
			НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		КонецЕсли;
		
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "Цена") Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		КонецЕсли;
		
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		СуммаСНалогом = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		// При реализации НДС рассчитан с межценовой разницы.
		Если ТипЗнч(СуммаСНалогом) = Тип("Число")
				И СуммаСНалогом > 0
				И СуммаСНалогом - НоваяСтрока.СуммаНДС <> НоваяСтрока.Сумма Тогда
			НоваяСтрока.Сумма = СуммаСНалогом - НоваяСтрока.СуммаНДС;
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			НоваяСтрока.Номенклатура = Номенклатура;
		ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОсновныхСредств
				Или СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеЗемельныхУчастков Тогда
			НоваяСтрока.ОсновноеСредство = Номенклатура;
			НоваяСтрока.ИнвентарныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Код");
		ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОбъектовСтроительства Тогда
			НоваяСтрока.ОбъектСтроительства = Номенклатура;
		Иначе
			НоваяСтрока.Номенклатура = Номенклатура;
		КонецЕсли;
		
		Если Не ЭтоУслуга Тогда
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено
					И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				ДанныеГТД = Новый Структура("НомерТД, КодСтраныПроисхождения", "", "");
				ДанныеГТД.НомерТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				ДанныеГТД.КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
			КонецЕсли;
			ПодготовитьСведенияОПрослеживаемостиДляДокументаИБ_УПД(ДанныеТабличныхЧастей.СведенияПрослеживаемости,
				НоваяСтрока, СведенияОТоваре, СпособОбработкиПервичногоДокумента);
		КонецЕсли;
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ДанныеТабличныхЧастей.ШтрихкодыУпаковок, СведенияОТоваре);
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка"                         , ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей"         , ДанныеТабличныхЧастей);
	ДанныеДляЗаполнения.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	ДанныеДляЗаполнения.Вставить("ФункцияЭД", ФункцияЭД(ДеревоДанных));
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерДокумента);
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ДанныеЭД.ДатаДокумента);
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", "");
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  '00010101');
	
	// Если есть сведения о комиссионере, значит нужно создать перевыставленную счет-фактуру.
	ДанныеОбъекта.Вставить("ЭтоПеревыставленныйСФНаКомиссионныеПродажи", Ложь);
	ДанныеОбъекта.Вставить("ЭтоПеревыставленныйСФНаКомиссионныеЗакупки",
		ЭтоПеревыставленныйСФНаКомиссионныеЗакупки(ДанныеЭД));
	ДанныеОбъекта.Вставить("ЭтоСводныйСчетФактура", Ложь);
	ДанныеОбъекта.Вставить("Организация"          , Неопределено);
	
	ДанныеОбъекта.Вставить("Продавцы", Документы.СчетФактураПолученный.ПустаяСсылка().Продавцы.ВыгрузитьКолонки());
	Если ДанныеЭД.СведенияОКомиссионере.ТипУчастника.Количество() > 0 Тогда
		ДанныеОбъекта.ЭтоСводныйСчетФактура = ЭтоСводныйСчетФактура(ДеревоДанных);
		Если ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеЗакупки Тогда
			ЗаполнитьПродавцовСчетаФактуры(ДанныеОбъекта, ДеревоДанных);
		Иначе
			НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОКомиссионере", ОписаниеОшибки);
			ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеПродажи = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта, ОписаниеОшибки);
	
	Если ЭтоВходящаяСчетФактураНаАванс(ДанныеЭД) Тогда
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаАванс);
		КодВидаОперации = "02";
	Иначе
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление); 
		КодВидаОперации = ?(ДанныеОбъекта.ЭтоСводныйСчетФактура, "27", "01");
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	
	НомерИсправления = ДанныеЭД.НомерИсправления;
	ДатаИсправления  = ДанныеЭД.ДатаИсправления;
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	//Заполняем документы-основания.
	ОснованияСФ = Новый Массив;
	Если ДанныеЭД.ДокументыОснованияСчетаФактуры <> Неопределено Тогда
		Если ТипЗнч(ДанныеЭД.ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
			Для Каждого Элемент Из ДанныеЭД.ДокументыОснованияСчетаФактуры Цикл
				ОснованияСФ.Добавить(Элемент);
			КонецЦикла;
			ОснованияСФ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОснованияСФ);
		Иначе
			ОснованияСФ.Добавить(ДанныеЭД.ДокументыОснованияСчетаФактуры);
		КонецЕсли;
	ИначеЕсли ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеПродажи Тогда
		ТекстоваяИнформация = ДанныеЭД.ДопДанныеСчетаФактуры.ТекстоваяИнформация;
		ДанныеНомера = ТекстоваяИнформация.Найти("НомерОтчетаКомитенту", "Идентификатор");
		Если ДанныеНомера <> Неопределено Тогда
			НомерОтчетаКомитенту = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеНомера.Значение, Истина, Ложь);
		КонецЕсли;
		ДанныеДаты = ТекстоваяИнформация.Найти("ДатаОтчетаКомитенту", "Идентификатор");
		Если ДанныеДаты <> Неопределено Тогда
			ДатаОтчетаКомитенту = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеДаты.Значение, ЧастиДаты.Дата);
		КонецЕсли;
		ОтчетКомитенту = НайтиОтчетКомитенту(ДанныеОбъекта.Организация, НомерОтчетаКомитенту, ДатаОтчетаКомитенту);
		Если ЗначениеЗаполнено(ОтчетКомитенту) Тогда
			ОснованияСФ.Добавить(ОтчетКомитенту);
		КонецЕсли;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", ОснованияСФ);
	
	КодВалюты = ДанныеЭД.ВалютаКод;
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента"   , ДанныеЭД.ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом);
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", ДанныеЭД.ВсегоКОплате.ВсегоСуммаНалога);
	
	ДанныеОбъекта.Вставить("СуммаУменьшение"   , 0);
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", 0);
	ДанныеОбъекта.Вставить("СуммаУвеличение"   , 0);
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", 0);
	
	// Авансы
	Если ДанныеОбъекта.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		СведенияОТоварах = ДанныеЭД.СведенияОТоварах;
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Сумма");
		ТаблицаАвансы.Колонки.Добавить("СуммаНДС");
		ТаблицаАвансы.Колонки.Добавить("СтавкаНДС");
		Для Каждого СведенияОТоваре Из СведенияОТоварах Цикл
			СтрокаАвансы = ТаблицаАвансы.Добавить();
			СтрокаАвансы.СтавкаНДС = СведенияОТоваре.НалоговаяСтавка;
			СтрокаАвансы.Сумма     = СведенияОТоваре.СтоимостьТоваровСНалогом;
			СтрокаАвансы.СуммаНДС  = СведенияОТоваре.СуммаНалога;
		КонецЦикла;
		Если ТаблицаАвансы.Количество() > 0 Тогда
			ДанныеОбъекта.Вставить("Авансы", ТаблицаАвансы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияДопРасходовУПД_2019(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка = Новый Структура;
	
	Шапка.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерДокумента);
	Шапка.Вставить("ДатаВходящегоДокумента" , ДанныеЭД.ДатаДокумента);
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.ВалютаКод);
	Шапка.Вставить("ВалютаДокумента", Валюта);
	
	КурсВзаиморасчетов = ДанныеЭД.ДополнительныеСведенияОбУчастниках.ВалютаКурс;
	Шапка.Вставить("КурсВзаиморасчетов"     ,?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	Шапка.Вставить("КратностьВзаиморасчетов", 1);
	Шапка.Вставить("СуммаВключаетНДС"       , Ложь);
	Шапка.Вставить("ВидОперацииЭД"          , ДанныеЭД.ВидОперации);
	
	Если ЗначениеЗаполнено(ДанныеЭД.НомерИсправления) Тогда
		Шапка.Вставить("Исправление"     , Истина);
		Шапка.Вставить("НомерИсправления", ДанныеЭД.НомерИсправления);
		Шапка.Вставить("ДатаИсправления" , ДанныеЭД.ДатаИсправления);
		
		// Вид операции ЭД может быть не указан, т.к. реквизит не является обязательным.
		Если Не ЗначениеЗаполнено(Шапка.ВидОперацииЭД) Тогда
			Шапка.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
		КонецЕсли;
	Иначе
		Шапка.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, Шапка, ОписаниеОшибки);
	
	ОснованиеСчетаФактуры = Неопределено;
	Если ТипЗнч(ДанныеЭД.ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДанныеЭД.ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЭД.ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеСчетаФактуры = ДанныеЭД.ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
			Шапка.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		КонецЕсли;
	ИначеЕсли Шапка.Исправление Тогда
		ДокументПоступления = Неопределено;
		Если ТипЗнч(ДанныеЭД.ДокументыОснованияДокументаОтгрузки) = Тип("Массив") Тогда
			Для Каждого ДокументОснование Из ДанныеЭД.ДокументыОснованияДокументаОтгрузки Цикл
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(ДанныеЭД.ДокументыОснованияДокументаОтгрузки) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = ДанныеЭД.ДокументыОснованияДокументаОтгрузки;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументПоступления) Тогда
			Шапка.Вставить("Основание", ДокументПоступления);
		КонецЕсли;
	КонецЕсли;
	
	МассивНаименованийУслуг = Новый Массив;
	ПерваяИтерация          = Истина;
	СтавкаНДС               = Неопределено;
	Для Каждого СведенияОТоваре Из ДанныеЭД.СведенияОТоварах Цикл
		МассивНаименованийУслуг.Добавить(СведенияОТоваре.ТоварНаименование);
		Если ПерваяИтерация Тогда
			СтавкаНДС = СведенияОТоваре.НалоговаяСтавка;
			ПерваяИтерация = Ложь;
		КонецЕсли;
		
		// Если строки таблицы документа имеют разные ставки НДС, то ставку НДС в документе "Поступление доп. расходов" не заполняем.
		Если СтавкаНДС <> СведенияОТоваре.НалоговаяСтавка Тогда
			СтавкаНДС = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Шапка.Вставить("Содержание"     , СтрСоединить(МассивНаименованийУслуг, ";" + " "));
	Шапка.Вставить("СтавкаНДС"      , СтавкаНДС);
	Шапка.Вставить("СуммаНДС"       , ДанныеЭД.СведенияОТоварах.Итог("СуммаНалога"));
	Шапка.Вставить("Сумма"          , ДанныеЭД.СведенияОТоварах.Итог("СтоимостьТоваровБезНалога"));
	Шапка.Вставить("СуммаДокумента" , ДанныеЭД.СведенияОТоварах.Итог("СтоимостьТоваровСНалогом"));
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", Шапка);
	
	ДанныеДляЗаполнения.Вставить("ФункцияЭД", ФункцияЭД(ДеревоДанных));
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияИзПереработкиУПД_2019(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка  = Новый Структура;
	Услуги = Документы.ПоступлениеИзПереработки.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Шапка.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерДокумента);
	Шапка.Вставить("ДатаВходящегоДокумента" , ДанныеЭД.ДатаДокумента);
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.ВалютаКод);
	Шапка.Вставить("ВалютаДокумента", Валюта);
	
	КурсВзаиморасчетов = ДанныеЭД.ДополнительныеСведенияОбУчастниках.ВалютаКурс;
	Шапка.Вставить("КурсВзаиморасчетов"     ,?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	Шапка.Вставить("КратностьВзаиморасчетов", 1);
	Шапка.Вставить("СуммаВключаетНДС"       , Ложь);
	Шапка.Вставить("ВидОперацииЭД"          , ДанныеЭД.ВидОперации);

	ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, Шапка, ОписаниеОшибки);
	
	ОснованиеСчетаФактуры = Неопределено;
	Если ТипЗнч(ДанныеЭД.ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДанныеЭД.ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЭД.ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеСчетаФактуры = ДанныеЭД.ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
			Шапка.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		КонецЕсли;
	КонецЕсли;
	
	МассивНаименованийУслуг = Новый Массив;
	ПерваяИтерация          = Истина;
	СтавкаНДС               = Неопределено;
	Для Каждого СведенияОТоваре Из ДанныеЭД.СведенияОТоварах Цикл
		НоваяСтрока = Услуги.Добавить();
		Номенклатура = Неопределено;
		Если ЗначениеЗаполнено(СведенияОТоваре.Сопоставление.НоменклатураИБ) Тогда
			Номенклатура = СведенияОТоваре.Сопоставление.НоменклатураИБ;
		КонецЕсли;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Содержание   = СведенияОТоваре.ТоварНаименование;
		НоваяСтрока.СтавкаНДС    = СведенияОТоваре.НалоговаяСтавка;
		НоваяСтрока.СуммаНДС     = СведенияОТоваре.СуммаНалога;
		НоваяСтрока.Количество   = СведенияОТоваре.Количество;
		НоваяСтрока.Цена         = СведенияОТоваре.ЦенаЗаЕдиницуИзмерения;
		НоваяСтрока.Сумма        = СведенияОТоваре.СтоимостьТоваровБезНалога;
	КонецЦикла;
	Шапка.Вставить("СуммаДокумента" , ДанныеЭД.СведенияОТоварах.Итог("СтоимостьТоваровСНалогом"));
	
	ДаныеДляЗаполнения = Новый Структура();
	ДаныеДляЗаполнения.Вставить("Шапка" , Шапка);
	ДаныеДляЗаполнения.Вставить("Услуги", Услуги);
	
	Возврат ДаныеДляЗаполнения;
	
КонецФункции

Процедура ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта, ОписаниеОшибки = "")
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	
	Если ДанныеОбъекта.Свойство("ЭтоПеревыставленныйСФНаКомиссионныеЗакупки")
			И ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеЗакупки Тогда
		ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОКомиссионере"));
	Иначе
		Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
			ПутьВДереве = "СведенияОПродавце.НомерСтроки"; 
			ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(СтрокаПродавца, ПутьВДереве));
			ОпределитьКППОбособленногоПодразделенияВходящегоДокумента(ДеревоДанных, ДанныеОбъекта, ПутьВДереве);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		Если ДанныеОбъекта.Свойство("ЭтоПеревыставленныйСФНаКомиссионныеПродажи")
				И ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеПродажи Тогда
			ДанныеОбъекта.Вставить("Покупатель", КонтрагентПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Иначе
			НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки", ОписаниеОшибки);
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	Для каждого СтрокаГрузоотправителя Из СведенияОГрузоотправителе.Строки Цикл
		ГрузоотправительОнЖе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.ОнЖе");
		Если ГрузоотправительОнЖе = Истина Тогда
			ДанныеОбъекта.Вставить("Грузоотправитель", ДанныеОбъекта.Контрагент);
		Иначе
			ДанныеОбъекта.Вставить("Грузоотправитель",
				КонтрагентПоДаннымЭД(СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель"));
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	СведенияОГрузополучателе = ДеревоДанных.Строки.Найти("СведенияОГрузополучателе", "ПолныйПуть");
	Для каждого СтрокаГрузополучателя Из СведенияОГрузополучателе.Строки Цикл
		ДанныеОбъекта.Вставить("Грузополучатель", КонтрагентПоДаннымЭД(СтрокаГрузополучателя, "СведенияОГрузополучателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = Новый Массив;
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			ШтрихкодыУпаковокСтрокиТЧ.Добавить(
				ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаКодаУпаковки,
					"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код"));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрокаТЧШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
		НоваяСтрокаТЧШтрихкодыУпаковок.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВходящаяСчетФактураНаАванс(ДанныеЭД)
	
	Результат = Ложь;
	ОбстоятельстваФормированияСФ = "";
	Если ДанныеЭД.ДополнительныеСведенияОбУчастниках.Свойство("ОбстоятельстваФормированияСФ", ОбстоятельстваФормированияСФ)
			И ЗначениеЗаполнено(ОбстоятельстваФормированияСФ) Тогда
		Если ОбстоятельстваФормированияСФ = "2" Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Иначе
		// Тег ОбстоятельстваФормированияСФ в документах из роуминга может быть не заполнен,
		// поэтому определяем вид счета-фактуры по косвенным признакам.
		Если ДанныеЭД.ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога = 0 Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСводныйСчетФактура(ДеревоДанных)
	
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	
	Возврат СведенияОПокупателе.Строки.Количество() > 1 Или СведенияОПродавце.Строки.Количество() > 1;

КонецФункции

Процедура ЗаполнитьПродавцовСчетаФактуры(ДанныеОбъекта, ДеревоДанных)
	
	СведенияОПродавцах = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	Контрагенты = Новый Массив;
	Для Каждого СведенияОПродавце Из СведенияОПродавцах.Строки Цикл
		Контрагент = КонтрагентПоДаннымЭД(СведенияОПродавце, "СведенияОПродавце.НомерСтроки");
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагенты.Добавить(Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыКонтрагентов = Общегоназначения.ЗначенияРеквизитовОбъектов(Контрагенты, "ИНН, КПП"); 
	Продавцы = ДанныеОбъекта.Продавцы;
	Для Каждого Контрагент Из Контрагенты Цикл
		СтрокаПродавцы = Продавцы.Добавить();
		СтрокаПродавцы.Продавец = Контрагент;
		СтрокаПродавцы.ИННПродавца = РеквизитыКонтрагентов[Контрагент].ИНН;
		СтрокаПродавцы.КПППродавца = РеквизитыКонтрагентов[Контрагент].КПП;
	КонецЦикла;
	
КонецПроцедуры

Функция НеобходимоУказатьЕдиницуИзмерения(Строка, ЭтоСчетФактураНаАванс)
	
	Если ЭтоСчетФактураНаАванс Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для услуг единицу измерения указывать необязательно, если не указано количество.
	Если ЗначениеЗаполнено(Строка.Товар)
			И Строка.Количество = 0
			И ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "Услуга") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьСведенияОПоставщикахУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = ДанныеШапки.Свойство("ДанныеЭлектронногоАктирования");
	ДанныеПриложенияЕИС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	// Сведения о поставщиках.
	
	СведенияОПоставщиках = Новый Массив;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Ссылка, "Организация");
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(Организация, ДанныеШапки.Дата, БанковскийСчетПродавца(ДанныеШапки));
	
	Если Настройки.ЭтоСводныйСчетФактура
			И ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		СведенияОПоставщиках = ДанныеШапки.СведенияОПоставщиках;
	Иначе
		Если ЗначениеЗаполнено(ДанныеШапки.Поставщик) Тогда
			СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата, БанковскийСчетПродавца(ДанныеШапки));
			СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
			СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
		КонецЕсли;
		ДополнитьДаннымиОПодразделенииОрганизации(СведенияОПоставщике, ДанныеДляФормированияЭД);
		
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			ДанныеЭлектронногоАктированияЕИС = ДанныеШапки.ДанныеЭлектронногоАктирования;
			Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан гос.контракт или не выбран этап гос.контракта.'");
				ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
					ДанныеПриложенияЕИС, ТекстОшибки);
			Иначе
				ДанныеГосконтракта = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0];
				НаименованиеПоставщикаДляЕИС =
					ЭлектронноеАктированиеБП.НаименованиеПоставщика(
						ДанныеГосконтракта);
				Если НЕ ПустаяСтрока(НаименованиеПоставщикаДляЕИС) Тогда
					СведенияОПоставщике.ПолноеНаименование = НаименованиеПоставщикаДляЕИС;
				Иначе
					НаименованиеПоставщикаДляЕИС = СведенияОПоставщике.ПолноеНаименование;
				КонецЕсли;
				
				// Сведения о составителе документа.
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СоставительДокументаНаименование", НаименованиеПоставщикаДляЕИС);
			КонецЕсли;
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

		СведенияОПоставщиках.Добавить(СведенияОПоставщике);
	КонецЕсли;
	
	ЗаполнитьДанныеУчастниковУПД_2019(
		ДеревоДанных,
		СведенияОПоставщиках,
		"СведенияОПродавце",
		"Юр",
		ДанныеШапки.Дата);
	
	// Сведения о составителе документа.
	Если Не ЭтоЭлектронноеАктированиеЕИС Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента(СведенияОПоставщике));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПокупателяхУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = ДанныеШапки.Свойство("ДанныеЭлектронногоАктирования");
	ДанныеПриложенияЕИС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	СведенияОПокупателях = Новый Массив;	
	
	Если Настройки.ЭтоСводныйСчетФактура
			И ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СведенияОПокупателях = ДанныеШапки.СведенияОПокупателях;
	Иначе
		Если ЗначениеЗаполнено(ДанныеШапки.Покупатель) Тогда
			Контрагент = ДанныеШапки.Покупатель;
			СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
			СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
			СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
		Иначе
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Ссылка, "Контрагент");
			СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(Контрагент, ДанныеШапки.Дата);
		КонецЕсли;
		СведенияОПокупателях.Добавить(СведенияОПокупателе);
		
		Если ЕстьКолонкаТаблицыЗначений(ДанныеДляФормированияЭД, "ШтрихкодыУпаковок") 
			И ДанныеДляФормированияЭД.ШтрихкодыУпаковок <> Неопределено
			И ДанныеДляФормированияЭД.ШтрихкодыУпаковок.Количество() > 0 Тогда
			
			СписокВидовПродукции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляФормированияЭД.ШтрихкодыУпаковок, "ВидПродукции", Истина);
			
			УчастникСистемыМаркировки = РегистрыСведений.СтатусыКонтрагентовИСМП.УчастникСистемыМаркировки(Контрагент, СписокВидовПродукции);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОВыбытииМаркированныхТоваров", 
				?(УчастникСистемыМаркировки = ЛОЖЬ, 1, 0));
		КонецЕсли; 
			
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Для каждого Покупатель Из СведенияОПокупателях Цикл
		Если Настройки.Свойство("ИдентификаторМестаПоставкиЕИС")
				И ЗначениеЗаполнено(Настройки.ИдентификаторМестаПоставкиЕИС) Тогда
			Покупатель.Вставить("ИдентификаторМестаПоставкиЕИС", Настройки.ИдентификаторМестаПоставкиЕИС);
		КонецЕсли;
	КонецЦикла;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	ЗаполнитьДанныеУчастниковУПД_2019(
		ДеревоДанных,
		СведенияОПокупателях,
		"СведенияОПокупателе",
		"Юр",
		ДанныеШапки.Дата,
		ЭтоЭлектронноеАктированиеЕИС, // ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		ДанныеПриложенияЕИС); // ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОГрузоотправителяхИГрузополучателяхУПД(ДеревоДанных, ДанныеДляФормированияЭД, Настройки)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = ДанныеШапки.Свойство("ДанныеЭлектронногоАктирования");
	ДанныеПриложенияЕИС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	// Сведения о грузоотправителях.
	
	СведенияОГрузоотправителях = Новый Массив;
	Если Настройки.ЭтоСводныйСчетФактура
			И ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		СведенияОГрузоотправителях = ДанныеШапки.СведенияОГрузоотправителях;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)
			ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
		ТаблицаГрузоотправителей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОГрузоотправителе");
		ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
		ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
	Иначе
		СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
		СведенияОГрузоотправителях.Добавить(СведенияОГрузоотправителе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителях) Тогда
		ЗаполнитьДанныеУчастниковУПД_2019(
			ДеревоДанных,
			СведенияОГрузоотправителях,
			"СведенияОГрузоотправителе",
			"Почтовый",
			ДанныеШапки.Дата);
	КонецЕсли;
	
	//Сведения о грузополучателях.
	
	СведенияОГрузополучателях = Новый Массив;
	Если Настройки.ЭтоСводныйСчетФактура
			И ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СведенияОГрузополучателях = ДанныеШапки.СведенияОГрузополучателях;
	Иначе
	    Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
			ДанныеШапки.Покупатель, ДанныеШапки.Грузополучатель);
		СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
		
		Если Настройки.Свойство("ИдентификаторМестаПоставкиЕИС")
				И ЗначениеЗаполнено(Настройки.ИдентификаторМестаПоставкиЕИС) Тогда
			СведенияОГрузополучателе.Вставить("ИдентификаторМестаПоставкиЕИС", Настройки.ИдентификаторМестаПоставкиЕИС);
		КонецЕсли;
		
		ЗаполнитьАдресДоставки(СведенияОГрузополучателе, ДанныеШапки.СсылкаНаПервичныйДокумент);
		СведенияОГрузополучателях.Добавить(СведенияОГрузополучателе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателях) Тогда
		ЗаполнитьДанныеУчастниковУПД_2019(
			ДеревоДанных,
 			СведенияОГрузополучателях,
			"СведенияОГрузополучателе",
			"Почтовый",
			ДанныеШапки.Дата,
			ЭтоЭлектронноеАктированиеЕИС, // ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			ДанныеПриложенияЕИС); // ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресДоставки(СведенияОКонтрагенте, СсылкаНаПервичныйДокумент)
	
	Если Не (ТипЗнч(СсылкаНаПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипЗнч(СсылкаНаПервичныйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации")) Тогда
		Возврат;
	КонецЕсли;

	АдресДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПервичныйДокумент, "АдресДоставки");
	Если ЗначениеЗаполнено(АдресДоставки) Тогда
		СведенияОКонтрагенте.Вставить("АдресДоставки", АдресДоставки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоКонтрагентамСводногоСчетаФактуры(ДанныеДляФормированияЭД, Настройки)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ДанныеШапки.Вставить("СведенияОПоставщиках",       Новый Массив);
	ДанныеШапки.Вставить("СведенияОПокупателях",       Новый Массив);
	ДанныеШапки.Вставить("СведенияОГрузоотправителях", Новый Массив);
	ДанныеШапки.Вставить("СведенияОГрузополучателях",  Новый Массив);
	
	Если Не Настройки.ЭтоСводныйСчетФактура Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = ДанныеДляФормированияЭД.СчетФактура;
	Если Не (ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеШапки.Свойство("ВидДоговора") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		ПолучитьДанныеПоКонтрагентамСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеШапки, СчетФактура);
	ИначеЕсли ДанныеШапки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ПолучитьДанныеПоКонтрагентамСводногоСчетаФактурыКомиссияПоПродаже(ДанныеШапки, СчетФактура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоКонтрагентамСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеШапки, СчетФактура)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
	|				И ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ГоловнойКонтрагент
	|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик.ОбособленноеПодразделение
	|				ИЛИ ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ОтчетКомитентуОПродажахПоставщики.Поставщик
	|			ТОГДА ОтчетКомитентуОПродажахПоставщики.Поставщик
	|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДанныеСводногоСФ
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажахПоставщики
	|ГДЕ
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ОтчетКомитентуОПродажахПоставщики.СчетФактура = &СчетФактура
	|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.ВыписыватьСчетаФактурыСводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСводногоСФ.Поставщик КАК Поставщик,
	|	МАКСИМУМ(ВТДанныеСводногоСФ.Дата) КАК Дата
	|ИЗ
	|	ВТДанныеСводногоСФ КАК ВТДанныеСводногоСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСводногоСФ.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСводногоСФ.Грузоотправитель КАК Грузоотправитель,
	|	МАКСИМУМ(ВТДанныеСводногоСФ.Дата) КАК Дата
	|ИЗ
	|	ВТДанныеСводногоСФ КАК ВТДанныеСводногоСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСводногоСФ.Грузоотправитель";

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоставщики = РезультатЗапроса[1].Выбрать();
	ВыборкаГрузоотправители = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаПоставщики.Следующий() Цикл
		ДанныеШапки.СведенияОПоставщиках.Добавить(ПолучитьДанныеЮрФизЛица(ВыборкаПоставщики.Поставщик, ВыборкаПоставщики.Дата));
	КонецЦикла;
	
	Пока ВыборкаГрузоотправители.Следующий() Цикл
		ДанныеШапки.СведенияОГрузоотправителях.Добавить(ПолучитьДанныеЮрФизЛица(ВыборкаГрузоотправители.Грузоотправитель, ВыборкаГрузоотправители.Дата));
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоКонтрагентамСводногоСчетаФактурыКомиссияПоПродаже(ДанныеШапки, СчетФактура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель
	|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДанныеСводногоСФ
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСводногоСФ.Покупатель КАК Покупатель,
	|	МАКСИМУМ(ВТДанныеСводногоСФ.Дата) КАК Дата
	|ИЗ
	|	ВТДанныеСводногоСФ КАК ВТДанныеСводногоСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСводногоСФ.Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСводногоСФ.Грузополучатель КАК Грузополучатель,
	|	МАКСИМУМ(ВТДанныеСводногоСФ.Дата) КАК Дата
	|ИЗ
	|	ВТДанныеСводногоСФ КАК ВТДанныеСводногоСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСводногоСФ.Грузополучатель";

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПокупатели = РезультатЗапроса[1].Выбрать();
	ВыборкаГрузополучатели = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаПокупатели.Следующий() Цикл
		ДанныеШапки.СведенияОПокупателях.Добавить(ПолучитьДанныеЮрФизЛица(ВыборкаПокупатели.Покупатель, ВыборкаПокупатели.Дата));
	КонецЦикла;
	
	Пока ВыборкаГрузополучатели.Следующий() Цикл
		ДанныеШапки.СведенияОГрузополучателях.Добавить(ПолучитьДанныеЮрФизЛица(ВыборкаГрузополучатели.Грузополучатель, ВыборкаГрузополучатели.Дата));
	КонецЦикла;
	
КонецПроцедуры

Функция КодТоварнойПозиции(Номенклатура, КодТовара, Настройки, ДанныеДляСопоставления)
	
	Код = СокрЛП(КодТовара);
	Если Не (ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		Возврат Код;
	КонецЕсли;
	
	ЭтоТовар = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга");
	
	Если ЭтоТовар И Настройки.Свойство("ВариантыЗаполненияПолей") И Настройки.ВариантыЗаполненияПолей.Свойство("ТоварКод") Тогда
		ВариантыЗаполненияПолей = Настройки.ВариантыЗаполненияПолей;
		Если ВариантыЗаполненияПолей.ТоварКод = "Штрихкод" Тогда
			Код = "";
			Если ДанныеДляСопоставления.Свойство("ШтрихкодыНоменклатуры")
					И ЗначениеЗаполнено(ДанныеДляСопоставления.ШтрихкодыНоменклатуры) Тогда
				Код = СокрЛП(ДанныеДляСопоставления.ШтрихкодыНоменклатуры[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

Процедура ПолучитьКомиссионераДляПеревыставленногоСчетаФактуры(ДеревоДанных, ДанныеШапки, ДанныеДляФормированияЭД)
	
	Если Не (ДанныеШапки.Свойство("Комиссионер") И ЗначениеЗаполнено(ДанныеШапки.Комиссионер)) Тогда
		ДокументОснование = Неопределено;
		Если ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования) = Тип("Массив")
				И ДанныеДляФормированияЭД.ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДанныеДляФормированияЭД.ДокументыОснования[0];
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(ДокументОснование)
				И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
			Возврат;
		КонецЕсли;
		
		СчетФактура = ДанныеДляФормированияЭД.СчетФактура;
		Если Не ЗначениеЗаполнено(СчетФактура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
		|ГДЕ
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ОтчетКомиссионераОПродажах
		|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Контрагент";
		Запрос.УстановитьПараметр("ОтчетКомиссионераОПродажах", ДокументОснование);
		Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
		
		Выборка = Запрос.Выполнить().Выбрать(); 
		Если Выборка.Следующий() Тогда
			ДанныеШапки.Вставить("Комиссионер", Выборка.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеШапки.Свойство("Комиссионер")
			И ЗначениеЗаполнено(ДанныеШапки.Комиссионер) Тогда
		СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Комиссионер, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
		Если ДанныеШапки.Свойство("ПредставлениеКомиссионера") И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
			ПутьВДереве = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
			ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ДополнительныеСведенияОКомиссионере",
				ДанныеШапки.ПредставлениеКомиссионера, ПутьВДереве);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	Если ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
			Для Каждого Элемент Из АдресУчастника Цикл
				
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция СоставительДокумента(СведенияОбОрганизации) 
	
	Если Не ЗначениеЗаполнено(СведенияОбОрганизации) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = СведенияОбОрганизации.СокращенноеНаименование;
	Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Результат = Результат + ", " + НСтр("ru = 'ИНН/КПП'")
			+ " " + СведенияОбОрганизации.ИНН + "/" + СведенияОбОрганизации.КПП;
	Иначе
		Результат = Результат + ", " + НСтр("ru = 'ИНН'")
			+ " " + СведенияОбОрганизации.ИНН;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсправляемыйСчетФактураВыданный(СчетФактура)
	
	ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыВыданного(СчетФактура);
	
	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
		ОснованиеДокумента = Неопределено;
		Если ТипЗнч(ДокументОснованиеСчетаФактуры) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСчетаФактуры, "ДокументРеализации");
		ИначеЕсли ТипЗнч(ДокументОснованиеСчетаФактуры) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСчетаФактуры, "Сделка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ОснованиеДокумента) Тогда
			Возврат УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ОснованиеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьДаннымиОПодразделенииОрганизации(СведенияОбОрганизации, ДанныеДляФормированияЭД)
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ?(ДанныеДляФормированияЭД.ДокументыОснования.Количество() > 0,
		ДанныеДляФормированияЭД.ДокументыОснования[0],
		Неопределено);
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")) Тогда
		
		Возврат 
	КонецЕсли;
	
	НаименованиеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ПодразделениеОрганизации.Наименование");
	Если Не ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбОрганизации.Вставить("ПодразделениеОрганизации", СокрЛП(НаименованиеПодразделения));
	
КонецПроцедуры

Функция НайтиОтчетКомитенту(Организация, НомерДокумента, ДатаДокумента)
	
	Если Не (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(ДатаДокумента)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер = &НомерДокумента
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.ОтчетКомитентуОПродажах)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИсправлениеУПД(ДеревоДанных)
	
	Возврат ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
	
КонецФункции

Функция ДанныеПервичногоДокументаУПД(Знач ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка"      , Неопределено);
	Результат.Вставить("Номер"       , "");
	Результат.Вставить("Дата"        , Неопределено);
	Результат.Вставить("ДатаОтгрузки", Неопределено);
	Результат.Вставить("Договор"     , Неопределено);
	Результат.Вставить("ВидДоговора" , Неопределено);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументСсылка = ДокументОснованиеСчетаФактурыВыданного(ДокументСсылка);
	КонецЕсли;
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Дата");
	ИменаРеквизитов.Добавить("Номер");
	ИменаРеквизитов.Добавить("Ссылка");
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ДокументСсылка.Метаданные()) Тогда
		ИменаРеквизитов.Добавить("ДоговорКонтрагента");
		ИменаРеквизитов.Добавить("ДоговорКонтрагента.ВидДоговора");
	КонецЕсли;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИменаРеквизитов.Добавить("ДатаИсходногоДокумента");
	КонецЕсли;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтрСоединить(ИменаРеквизитов, ",")); 
	
	Результат.Ссылка       = ЗначенияРеквизитов.Ссылка;
	Результат.Номер        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитов.Номер, Истина, Ложь);
	Результат.Дата         = ЗначенияРеквизитов.Дата;
	Результат.ДатаОтгрузки = ?( ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации"),
		ЗначенияРеквизитов.ДатаИсходногоДокумента, ЗначенияРеквизитов.Дата);
	Если ЗначенияРеквизитов.Свойство("ДоговорКонтрагента") Тогда
		Результат.Договор     = ЗначенияРеквизитов.ДоговорКонтрагента;
		Результат.ВидДоговора = ЗначенияРеквизитов.ДоговорКонтрагентаВидДоговора;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПеревыставленныйСФНаКомиссионныеЗакупки(ДанныеЭД)
	
	ДопДанныеСФ = ДанныеЭД.ДопДанныеСчетаФактуры.ТекстоваяИнформация;
	Если Не (ЗначениеЗаполнено(ДопДанныеСФ) и ТипЗнч(ДопДанныеСФ) = Тип("ТаблицаЗначений")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ДопСведенияОКомиссионере = ДопДанныеСФ.Найти("ДополнительныеСведенияОКомиссионере", "Идентификатор");
	Если ДопСведенияОКомиссионере = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(СокрЛП(ВРег(ДопСведенияОКомиссионере.Значение)), ВРег("Составлен комиссионером")) > 0;
	
КонецФункции

Функция ЗаполнитьОбстоятельстваФормированияУПД(ДеревоДанных, Настройки, ДанныеПервичногоДокумента)
	
	// Обстоятельства формирования СФ <ОбстФормСЧФ>
	//Для <Функция>=СЧФ:
	// 1 – счет-фактура, выставляемый при реализации товаров (работ, услуг), передаче имущественных прав
	// 2 – счет-фактура, выставляемый при получении оплаты, частичной оплаты в счет предстоящих поставок товаров (выполнения работ, оказания услуг), 
	// передачи имущественных прав
	// 3 – счет-фактура, применяемый в случае реализации комиссионером (агентом, экспедитором, застройщиком или заказчиком, 
	// выполняющим функции застройщика) двум и более покупателям (приобретения у двух и более продавцов) товаров (работ, услуг), 
	// имущественных прав от своего имени 
	// Для <Функция>= СЧФДОП или <Функция>= ДОП:
	// 4 – Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) для дальнейшей реализации
	// 5 – Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при возврате товаров
	// 6 – Товары переданы от Комиссионера (Агента, действующего от собственного имени) Комитенту (Принципалу) при закупке товара
	// 7 – Товары переданы от Комитента (Принципала) Комиссионеру (Агенту, действующему от собственного имени) при возврате товаров
	// 8 – Возврат товара от Покупателя Продавцу
	
	ОбстоятельстваФормированияСФ = "";
	Если ЭтоФункцияДОП(Настройки.Функция) Тогда // УПД со статусом 2
		Если ДанныеПервичногоДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОбстоятельстваФормированияСФ = "4";
		ИначеЕсли ДанныеПервичногоДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
			ОбстоятельстваФормированияСФ = "6";
		Иначе
			ОбстоятельстваФормированияСФ = "";
		КонецЕсли;
	ИначеЕсли ЭтоФункцияСЧФ(Настройки.Функция) Тогда // счет-фактура
		Если Настройки.ЭтоСчетФактураНаАванс Тогда
			ОбстоятельстваФормированияСФ = "2";
		ИначеЕсли Настройки.ЭтоСводныйСчетФактура Тогда
			ОбстоятельстваФормированияСФ = "3";
		Иначе
			ОбстоятельстваФормированияСФ = "1";
		КонецЕсли;
	ИначеЕсли ЭтоФункцияСЧФДОП(Настройки.Функция) Тогда
		ОбстоятельстваФормированияСФ = "";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", ОбстоятельстваФормированияСФ);
	
КонецФункции

Функция ВозможноФормированиеЭлектронногоДокумента(СсылкаНаОбъект, Отказ)
	
	ФормированиеВозможно = Истина;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ФормированиеВозможно = ВозможноФормированиеЭДНаОснованииКорректировкиРеализации(СсылкаНаОбъект, Отказ);
	КонецЕсли;
	
	Возврат ФормированиеВозможно;
	
КонецФункции

Функция ВозможноФормированиеЭДНаОснованииКорректировкиРеализации(СсылкаНаОбъект, Отказ)
	
	ФормированиеВозможно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	СУММА(ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) + ЕСТЬNULL(КорректировкаРеализацииУслуги.Количество, 0)) КАК КоличествоВсегоПослеКорректировки
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ПО (КорректировкаРеализацииТовары.Ссылка = КорректировкаРеализации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|		ПО (КорректировкаРеализацииУслуги.Ссылка = КорректировкаРеализации.Ссылка)
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|	И КорректировкаРеализации.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализации.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоВсегоПослеКорректировки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'При исправлении первичного документа общее количество после корректировки не может быть равным 0.
                            |Аннулируйте первичный документ, если он был выписан ошибочно. Если это возврат, то используйте вид операции ""Корректировка по согласованию сторон"".'");
		СообщитьОбОшибкеПриФормированииЭД(СсылкаНаОбъект, ТекстОшибки, Отказ);
		ФормированиеВозможно = Ложь;
	КонецЕсли;
	
	Возврат ФормированиеВозможно;
	
КонецФункции

Функция ЭтоВозвратВыкупленныхТоваров(СпособОбработки)
	
	Возврат (СпособОбработкиПервичногоДокумента(СпособОбработки) = СпособыОбработкиВходящихЭД().ВозвратВыкупленныхТоваровКомиссионера);
	
КонецФункции

Процедура ОпределитьКППОбособленногоПодразделенияВходящегоДокумента(ДеревоДанных, ДанныеОбъекта, ВидУчастника)
	
	// При приобретении товаров и услуг через обособленные подразделения контрагентов в поле "КПП поставщика" счет-фактуры входящей
	// необходимо указывать КПП соответствующего подразделения. Если пользователь не ведет учет по обособленными подразделениям поставщика
	// и все приходует на головного контрагента, то необходимо выделить КПП обособленного подразделения и установить его в счет-фактуре. 
	
	ПродавецКПП = СокрЛП(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
	Контрагент = ДанныеОбъекта.Контрагент;
	Если Не (ЗначениеЗаполнено(ПродавецКПП)
			И ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоКППОбособленногоПодразделения(ПродавецКПП) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентКПП = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП"));
	Если ПродавецКПП <> КонтрагентКПП Тогда
		ДанныеОбъекта.Вставить("ОбособленноеПодразделениеКПП", ПродавецКПП);
	КонецЕсли;
	
КонецПроцедуры

#Область ОтветныйТитулУПД

Функция НовыйДанныеОтветногоТитулаУПД()
	
	Результат = Новый Структура;
	Результат.Вставить("КодИтога"                    , КодТоварыУслугиПринятыБезПретензий());
	Результат.Вставить("АктОРасхожденияхНаименование", НСтр("ru = 'Акт о расхождениях'"));
	Результат.Вставить("АктОРасхожденияхНомер"       , "");
	Результат.Вставить("АктОРасхожденияхДата"        , Неопределено);
	Результат.Вставить("АктОРасхожденияхВид"         , "2"); // документ о приемке с расхождениями
	Результат.Вставить("СодержаниеОперации"          , "");
	Результат.Вставить("СоставСодержания"            , Новый Массив);
	Результат.Вставить("СоставительДокумента"        , "-");
	Результат.Вставить("ДатаПолученияТоваров"        , Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулУПД_ПоступлениеТоваровУслуг(НомераТаблиц, ПервичныйДокумент)
	
	Если ТипЗнч(ПервичныйДокумент) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеТоваровУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Товары.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Товары,
	|	ПоступлениеТоваровУслуг.Услуги.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Услуги,
	|	ПоступлениеТоваровУслуг.АгентскиеУслуги.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК АгентскиеУслуги
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ПервичныйДокумент";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулИсправительногоУПД_КорректировкаПоступления(НомераТаблиц, ПервичныйДокумент)
	
	Если ТипЗнч(ПервичныйДокумент) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КорректировкаПоступления", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Дата КАК Дата,
	|	КорректировкаПоступления.Организация КАК Организация,
	|	КорректировкаПоступления.Товары.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Товары,
	|	КорректировкаПоступления.Услуги.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Услуги,
	|	КорректировкаПоступления.АгентскиеУслуги.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК АгентскиеУслуги
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &ПервичныйДокумент";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулУПД_ПоступлениеДопРасходов(НомераТаблиц, ПервичныйДокумент)
	
	Если ТипЗнч(ПервичныйДокумент) <> Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеДопРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Дата КАК Дата,
	|	ПоступлениеДопРасходов.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ПервичныйДокумент";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулУПД_ПоступлениеИзПереработки(НомераТаблиц, ПервичныйДокумент)
	
	Если ТипЗнч(ПервичныйДокумент) <> Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеИзПереработки", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Дата КАК Дата,
	|	ПоступлениеИзПереработки.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ПервичныйДокумент";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулУПД_СчетФактура(НомераТаблиц, СчетФактура)
	
	Если ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СчетФактура", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация КАК Организация
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &СчетФактура";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаОтветныйТитулУПД_АктОРасхождениях(НомераТаблиц, ПервичныйДокумент)
	
	Если ТипЗнч(ПервичныйДокумент) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("АктОРасхождениях", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОРасхождениях.Номер КАК Номер,
	|	АктОРасхождениях.Дата КАК Дата
	|ИЗ
	|	Документ.АктОРасхождениях КАК АктОРасхождениях
	|ГДЕ
	|	АктОРасхождениях.ДокументПоступления = &ПервичныйДокумент
	|	И НЕ АктОРасхождениях.ПометкаУдаления
	|	И АктОРасхождениях.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАктОРасхождениях.РасхожденияПриПриемке)";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция КодТоварыУслугиПринятыБезПретензий()
	
	Возврат "1";
	
КонецФункции

Функция КодТоварыУслугиПринятыСРасхождениями()
	
	Возврат "2";
	
КонецФункции

Функция ТекстТоварыПринятыБезПретензий()
	
	Возврат НСтр("ru = 'Товары принял без претензий.'");
	
КонецФункции

Функция ТекстТоварыПринятыСРасхождениями()
	
	Возврат НСтр("ru = 'Товары приняты с расхождениями (претензиями).'");
	
КонецФункции

Функция ТекстУслугиПринятыБезПретензий()
	
	Возврат НСтр("ru = 'Услуги получены, претензий нет.'");
	
КонецФункции

Функция ТекстУслугиПринятыСРасхождениями()
	
	Возврат НСтр("ru = 'Услуги приняты с расхождениями (претензиями).'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УКД_2020

Процедура ЗаполнитьУКД_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Описание, Отказ)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
		Описание.Основания.Добавить(СчетФактура.ДокументОснование);
	Иначе
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СсылкаНаОбъект);
		Описание.Основания.Добавить(СчетФактура);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		СообщитьОбОшибкеПриФормированииЭД(
				СсылкаНаОбъект, НСтр("ru = 'Не выписан счет-фактура'"), Отказ); 
		Возврат;
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Неопределено, Истина, Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
		ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		
		СообщитьОбОшибкеПриФормированииЭД(
		СсылкаНаОбъект, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа.'"), Отказ);
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЗаполнитьОсновнуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	ЗаполнитьРасширеннуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);

КонецПроцедуры

Процедура ЗаполнитьДИС_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Отказ)
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	РеквизитыУКД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Дата, СведенияПрослеживаемости");
	ЕстьПрослеживаемыеТовары = Не РеквизитыУКД.СведенияПрослеживаемости.Пустой();
	ВерсияПостановления = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(РеквизитыУКД.Дата);
	
	ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(
		МассивДокументов, Документы[СсылкаНаОбъект.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхКорректировочныхДокументов(ВерсияПостановления, ЕстьПрослеживаемыеТовары));
	Если ТаблицаДанных.Количество() = 0 Тогда
		СообщитьОбОшибкеПриФормированииЭД(
			СсылкаНаОбъект, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа.'"), Отказ);
		Возврат;
	КонецЕсли;
	ДанныеДляФормированияЭД = ТаблицаДанных[0];
	
	ЗаполнитьОсновнуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);
	ЗаполнитьРасширеннуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);

КонецПроцедуры

Процедура ЗаполнитьКСЧ_2020(СсылкаНаОбъект, Настройки, ДеревоДанных, Отказ)
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Неопределено, Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		
		СообщитьОбОшибкеПриФормированииЭД(
			СсылкаНаОбъект, НСтр("ru = 'Возможно, не была произведена корректировка табличной части документа-основания.'"), Отказ);
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЗаполнитьОсновнуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных);

КонецПроцедуры

Процедура ЗаполнитьОсновнуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если ЭтоФункцияКСЧФДИС(Настройки.Функция)
			ИЛИ ЭтоФункцияКСЧФ(Настройки.Функция) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	ДанныеПриложенияЕИС = Неопределено;
	Если ДанныеШапки.Свойство("ДанныеЭлектронногоАктирования")
		И ЗначениеЗаполнено(ДанныеШапки.ДанныеЭлектронногоАктирования) Тогда
		
		ЭтоЭлектронноеАктированиеЕИС = Истина;
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.
			НовыеДанныеПриложенияКТитулуПродавцаУКД();
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения", ДанныеПриложенияЕИС);
		ДанныеЭлектронногоАктированияЕИС = ДанныеШапки.ДанныеЭлектронногоАктирования;
		
		Если ТипЗнч(ДанныеДляФормированияЭД.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДокументКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Ссылка, "ДокументОснование");
		Иначе
			ДокументКорректировки = ДанныеДляФормированияЭД.Ссылка;
		КонецЕсли;
		
		// Определяем прикладной документ, на базе которого был создан исходный электронный документ.
		Если ЗначениеЗаполнено(ДокументКорректировки) Тогда
			ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКорректировки, "ДокументРеализации");
			ДанныеШапки.Вставить("ДокументОснование", ДокументРеализации);
		КонецЕсли;
		
		ЭлектронноеАктированиеБП.ЗаполнитьДанныеДереваДляЭлектронногоАктированияЕИС(ДеревоДанных,
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеШапки,
			ДанныеПриложенияЕИС,
			Истина);
		
	Иначе
		
		ЭлектронноеАктированиеБП.ПроверитьДоговорЭД(
			Настройки, ДанныеДляФормированияЭД, ДеревоДанных, Истина);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента"  , ВидУКД(ДанныеДляФормированияЭД.Ссылка));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента" , ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	ЗаполнитьДанныеИсходныхДокументов(ДеревоДанных, ДанныеДляФормированияЭД, Настройки);
	
	СчетФактура = Неопределено;
	Если ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(ДанныеДляФормированияЭД.Ссылка)
			И ЭтоКорректировкаПеревыставленногоСчетФактуры(ДанныеДляФормированияЭД.Ссылка, СчетФактура) Тогда
		ДанныеПокупателяПродавца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Организация, Контрагент, Продавец");
		СведенияОПокупателе   = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Контрагент, ДанныеШапки.Дата);
		СведенияОПоставщике   = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Продавец, ДанныеШапки.Дата);
		СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Организация, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
		Если ДанныеШапки.Свойство("ПредставлениеКомиссионера") И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
			ПутьВДереве = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
			ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ДополнительныеСведенияОКомиссионере",
				ДанныеШапки.ПредставлениеКомиссионера, ПутьВДереве);
		КонецЕсли;
	Иначе
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата, БанковскийСчетПродавца(ДанныеШапки));
		СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
		СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
		СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
		СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	КонецЕсли;
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не указан гос.контракт или не выбран этап гос.контракта.'");
			ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
				ДанныеПриложенияЕИС, ТекстОшибки);
		Иначе
			НаименованиеПоставщикаДляЕИС =
				ЭлектронноеАктированиеБП.НаименованиеПоставщика(
					ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0]);
			СведенияОПоставщике.ПолноеНаименование = НаименованиеПоставщикаДляЕИС;
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", НаименованиеПоставщикаДляЕИС);
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокумента(СведенияОПоставщике));
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента(СведенияОПоставщике));
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если НЕ ЭтоЭлектронноеАктированиеЕИС И ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = ОснованияУКД(ДанныеДляФормированияЭД.Ссылка, Настройки.Функция);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если ЭтоФункцияКСЧФ(Настройки.Функция) Тогда // УКД СФ без первичного документа
		
		ОснованиеКорректировки = ПодготовитьТаблицуДанныхДоговораУПД(
			ДанныеШапки.Основание,
			ДанныеШапки.ОснованиеНомер,
			ДанныеШапки.ОснованиеДата);
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеКорректировки, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ДанныеПервичногоДокумента = ДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД.Ссылка);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияПослеКорректировки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеДо");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеПосле");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтрокиГосконтрактаЕИС");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	УчетАгентскогоНДСПокупателем = (ДанныеШапки.Свойство("НДСИсчисляетсяНалоговымАгентом")
		И ДанныеШапки.НДСИсчисляетсяНалоговымАгентом);
	
	ДанныеШтрихкодовУпаковок = ДанныеШтрихкодовУпаковокУКД(ДанныеДляФормированияЭД, ДанныеПервичногоДокумента.Ссылка,
		ДокументыОснования);
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.КодТовара   = Строка.ТоварКод;
		
		Если ЭтоФункцияДИС(Настройки.Функция) Тогда
			// Для УКД со статусом 2 номера строк исходных документов не выводим.
			НоваяСтрока.НомерСтрокиИсходногоДокумента = 0;
		Иначе
			НоваяСтрока.НомерСтрокиИсходногоДокумента = Строка.НомерСтроки;
		КонецЕсли;
		
		НаименованиеНоменклатуры = ?(ЗначениеЗаполнено(Строка.НаименованиеНоменклатуры), Строка.НаименованиеНоменклатуры,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "НаименованиеПолное"));
		
		НоваяСтрока.ТоварНаименование                              = НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки             = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                            = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки    = Строка.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = Строка.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.КодВидаТовара                                  =
			?(СтрДлина(Строка.ТоварКодТНВЭД) < 10, "", Строка.ТоварКодТНВЭД);
		
		НоваяСтрока.КоличествоДоКорректировки                = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = Строка.ЦенаДоИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		
		СтавкаНДС = ?(УчетАгентскогоНДСПокупателем = Истина, СтавкаНДСИсчисляетсяНалоговымАгентом(), Строка.СтавкаНДС);
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = ?(УчетАгентскогоНДСПокупателем, 0, Строка.СтоимостьСНДСДоИзменения);
		НоваяСтрока.СтоимостьТоваровСНалогом                = ?(УчетАгентскогоНДСПокупателем, 0, Строка.СтоимостьСНДСПослеИзменения);
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = ?(УчетАгентскогоНДСПокупателем, 0, Строка.РазницаСНДСУвеличение);
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = ?(УчетАгентскогоНДСПокупателем, 0, Строка.РазницаСНДСУменьшение);
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И ПризнакТовараЕдиногоДокумента(Строка.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.РегистрационныйНомерТДПосле)
				Или ЗначениеЗаполнено(Строка.СтранаПроисхожденияКодПосле) Тогда
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации();
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод = Строка.СтранаПроисхожденияКодПосле;
			Декларация.ТаможеннаяДекларацияНомер =
				?(ЗначениеЗаполнено(Строка.РегистрационныйНомерТДПосле), СокрЛП(Строка.РегистрационныйНомерТДПосле), "-");
		КонецЕсли;
		
		ЗаполнитьСведенияОМаркировкеВУКД_2020(НоваяСтрока, ДанныеПервичногоДокумента.Ссылка, Строка, ДанныеШтрихкодовУпаковок);
		ЗаполнитьСведенияОПрослеживаемостиВЭлектронномДокументеУКД(НоваяСтрока, Строка);
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			Строка.Товар, НоваяСтрока.НалоговаяСтавка, НаименованиеНоменклатуры);
		
		Если ЗначениеЗаполнено(Строка.ТоварКодТНВЭД) И ТипЗнч(Строка.ТоварКодТНВЭД) = Тип("СправочникСсылка.КлассификаторТНВЭД") Тогда
			НоваяСтрока.КодВидаТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ТоварКодТНВЭД, "Код");
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			НоваяСтрока.ИдентификаторСтрокиГосконтрактаЕИС = Строка.ИдентификаторСтрокиГосконтрактаЕИС;
			ЭлектронноеАктированиеБП.
				ЗаполнитьДанныеПоСтрокеТоваровУКД(
					НоваяСтрока, Строка, ДанныеШапки, ДанныеПриложенияЕИС);
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

Процедура ЗаполнитьРасширеннуюЧастьУКД_2020(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	ОснованиеКорректировки = ПодготовитьТаблицуДанныхДоговораУПД(
			ДанныеШапки.Основание,
			ДанныеШапки.ОснованиеНомер,
			ДанныеШапки.ОснованиеДата);
			
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеКорректировки, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("ДокументНаименование");
	ТаблицаОснований.Колонки.Добавить("ДокументНомер");
	ТаблицаОснований.Колонки.Добавить("ДокументДата");
	НаименованиеИсправляемогоДокумента = НСтр("ru = 'Универсальный передаточный документ'");
	Если ЗначениеЗаполнено(ДанныеШапки.ТаблицаРеквизитовОснований.Количество()) Тогда
		Для Каждого Основание ИЗ ДанныеШапки.ТаблицаРеквизитовОснований Цикл
			Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
				ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
										Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
										Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
			Иначе
				ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№ %1 от %2'"),
										Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
			КонецЕсли;
			СтрокаТаблицыОснований = ТаблицаОснований.Добавить();
			СтрокаТаблицыОснований.ДокументНаименование = НаименованиеИсправляемогоДокумента;
			СтрокаТаблицыОснований.ДокументНомер = Основание.НомерСчетаФактуры;
			СтрокаТаблицыОснований.ДокументДата = Основание.ДатаСчетаФактуры;
		КонецЦикла;
	ИначеЕсли ДанныеШапки.Свойство("ИсправляемыйДокументРеализации")
			И ЗначениеЗаполнено(ДанныеШапки.ИсправляемыйДокументРеализации) Тогда  
		РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеШапки.ИсправляемыйДокументРеализации, "Номер, Дата");
		СтрокаТаблицыОснований = ТаблицаОснований.Добавить();
		СтрокаТаблицыОснований.ДокументНаименование = НаименованиеИсправляемогоДокумента;
		СтрокаТаблицыОснований.ДокументНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИсправляемогоДокумента.Номер, Истина, Ложь);
		СтрокаТаблицыОснований.ДокументДата  = РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаОснований, "ПередаточныйДокумент");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
																	ДанныеШапки.ИныеСведения);
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД_2020(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейКорректировкиПоступления();
	
	Если ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Добавить("Номенклатура");
	КонецЕсли;
	Если ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ДанныеТабличныхЧастей.СведенияПрослеживаемости.Колонки.Добавить("СтавкаНДС");
	КонецЕсли;
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ПолучитьДанныеИсходныхДокументов(ДанныеОбъекта, ДеревоДанных);
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Исправление);
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Корректировка);
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДокументОснование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументОснование) = Тип("Массив") И ДокументОснование.Количество() > 0 Тогда
		ДокументОснование = ДокументОснование[0];
	КонецЕсли;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Основание", ДокументОснование);
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе", ОписаниеОшибки);
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	ДанныеТабличныхЧастей.ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		
		Если ЗначениеЗаполнено(Номенклатура)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга") Тогда
			НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
			НоваяСтрока.СодержаниеДоИзменения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			НоваяСтрока.Содержание            = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Иначе
			НоваяСтрока = ДанныеТабличныхЧастей.Товары.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		// Ставка "НДС исчисляется налоговым агентом" используется при продаже металлолома, сырых шкур животных
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
			
			Если ИспользуетсяОбратноеНачислениеНДС Тогда
				
				НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
				НоваяСтрока.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
			Иначе
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
			
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_УКД(ДанныеТабличныхЧастей.ШтрихкодыУпаковок, СведенияОТоваре);
		
		ПодготовитьСведенияОПрослеживаемостиДляДокументаИБ_УКД(ДанныеТабличныхЧастей.СведенияПрослеживаемости, НоваяСтрока, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	ДанныеДляЗаполнения.Вставить("ФункцияЭД", ФункцияЭД(ДеревоДанных));
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД_2020(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	ПолучитьДанныеИсходныхДокументов(ДанныеОбъекта, ДеревоДанных);
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе", ОписаниеОшибки);
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	
	// Если счет-фактура на аванс.
	ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ДанныеОбъекта.Вставить("КодВидаОперации", "01");
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если Не (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.Значение = Неопределено) Тогда // нет данных о документе-основании
		МассивДокументовОснований = НайденнаяСтрока.Значение;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента",    0);
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", 0);
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение"));
	ДанныеОбъекта.Вставить("СуммаУвеличение",    ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение"));
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляВозвратаТоваровПоставщикуУКД(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("ВидОперации", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
	ВозвратПустаяСсылка = Документы.КорректировкаПоступления.ПустаяСсылка();
	Товары                   = ВозвратПустаяСсылка.Товары.ВыгрузитьКолонки();
	СведенияПрослеживаемости = ВозвратПустаяСсылка.СведенияПрослеживаемости.ВыгрузитьКолонки();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	
	ДокументОснование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументОснование) = Тип("Массив") И ДокументОснование.Количество() > 0 Тогда
		ДокументОснование = ДокументОснование[0];
	КонецЕсли;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Основание", ДокументОснование);
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе", ОписаниеОшибки);
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
		
		КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		КоличествоПослеКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Количество = КоличествоДоКорректировки - КоличествоПослеКорректировки;
		
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУменьшение");
		
		СведенияОТаможеннойДекларации = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ЗначениеЗаполнено(СведенияОТаможеннойДекларации) Тогда
			ДанныеГТД = Новый Структура("НомерТД, КодСтраныПроисхождения", "", "");
			ДанныеГТД.НомерТД = СведенияОТаможеннойДекларации[0].ТаможеннаяДекларацияНомер;
			ДанныеГТД.КодСтраныПроисхождения = СведенияОТаможеннойДекларации[0].СтранаПроисхожденияКод;
			ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
		КонецЕсли;
		
		ПодготовитьСведенияОПрослеживаемостиДляВозвратаПоставщику_УКД(СведенияПрослеживаемости, НоваяСтрока, СведенияОТоваре);
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка"                   , ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары"                  , Товары);
	ДанныеДляЗаполнения.Вставить("СведенияПрослеживаемости", СведенияПрослеживаемости);
	
	ДанныеДляЗаполнения.Вставить("ФункцияЭД", ФункцияЭД(ДеревоДанных));
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ВидУКД(Знач Ссылка)
	
	ДокументОснование = Ссылка;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДокументОснование");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат "Возврат";
	Иначе
		Возврат "Корректировка"
	КонецЕсли;
	
КонецФункции

Функция ДанныеОснованияКорректировкиВозврата(СсылкаНаДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Ссылка, Номер, Дата");
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "Сделка, Сделка.Номер, Сделка.Дата");
		Результат.Ссылка = ДанныеОснования.Сделка;
		Результат.Номер  = ДанныеОснования.СделкаНомер;
		Результат.Дата   = ДанныеОснования.СделкаДата;
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "ДокументРеализации, ДокументРеализации.Номер, ДокументРеализации.Дата");
		Результат.Ссылка = ДанныеОснования.ДокументРеализации;
		Результат.Номер  = ДанныеОснования.ДокументРеализацииНомер;
		Результат.Дата   = ДанныеОснования.ДокументРеализацииДата;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НужноСоздатьДокументВозвратТоваровПоставщику(СпособОбработки, ДеревоДанных)

	Если СпособОбработкиПервичногоДокумента(СпособОбработки) = СпособыОбработкиВходящихЭД().ОпределяетсяПрограммой Тогда
		// Если корректируемый документ был создан в прошлом году и прошло больше квартала до даты корректировки,
		// то будет создан документ "КорректировкаПоступления". 
		ВидОперации = ВидОперацииУКД(ДеревоДанных);
		Если Не КорректируемыйДокументСозданВПрошлыхГодах(ДеревоДанных)
			И (ВидОперации = "Возврат"
				Или (ВидОперации = Неопределено И ВоВсехСтрокахПроизводитсяУменьшениеКоличества(ДеревоДанных))) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция КорректируемыйДокументСозданВПрошлыхГодах(ДеревоДанных)
	
	ДанныеИсходногоДокумента = Новый Структура;
	ПолучитьДанныеИсходныхДокументов(ДанныеИсходногоДокумента, ДеревоДанных);
	Если Не (ДанныеИсходногоДокумента.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеИсходногоДокумента.ДатаИсходногоДокумента)) Тогда
		Возврат Истина; // при отсутствии данных исходного документа будет создаваться документ Корректировка поступления
	КонецЕсли;
	
	// Проверяем, что корректируемый документ создан в прошлом году
	// и между датой корректируемого документа и датой документа
	// корректировки прошло больше квартала.
	ДатаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	ДатаКорректируемогоДокумента = ДанныеИсходногоДокумента.ДатаИсходногоДокумента;
	РазницаВГодах = Год(ДатаДокумента) - Год(ДатаКорректируемогоДокумента);
	Если РазницаВГодах > 1 Тогда
		Возврат Истина;
	ИначеЕсли РазницаВГодах = 1
			И КонецКвартала(ДатаКорректируемогоДокумента) <> НачалоКвартала(ДатаДокумента) - 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ВоВсехСтрокахПроизводитсяУменьшениеКоличества(ДеревоДанных)
	
	// Если есть строки, где количество не уменьшается или производится корректировка только суммы,
	// то это не возврат, а корректировка поступления.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		КоличествоПослеКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		Если КоличествоДоКорректировки <= КоличествоПослеКорректировки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Если производится корректировка ставки НДС или единицы измерения, то это корректировка поступления,
		// т.к. с помощью документа "Возврат от покупателя" нельзя корректировать эти данные.
		НалоговаяСтавкаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
		НалоговаяСтавкаПослеКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если НалоговаяСтавкаДоКорректировки <> НалоговаяСтавкаПослеКорректировки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЕдиницаИзмеренияКодДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки");
		ЕдиницаИзмеренияКодПослеКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		Если ЕдиницаИзмеренияКодДоКорректировки <> ЕдиницаИзмеренияКодПослеКорректировки Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция ВидОперацииУКД(ДеревоДанных)
	
	ВидДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента");
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ВидДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОснованияУКД(Документ, ФункцияУКД)
	
	ДокументыОснования = Новый Массив;
	
	Если ЭтоФункцияКСЧФДИС(ФункцияУКД) И ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		КорректировочныйСчетФактура = Документ;
		ДокументКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорректировочныйСчетФактура, "ДокументОснование");
		Если ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКорректировки, "Сделка");
		ИначеЕсли ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКорректировки, "ДокументРеализации");
		КонецЕсли;
		ДокументыОснования.Добавить(ПервичныйДокумент);
	ИначеЕсли ЭтоФункцияДИС(ФункцияУКД) Тогда
		ДокументКорректировки = Документ;
		Если ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКорректировки, "Сделка");
		ИначеЕсли ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКорректировки, "ДокументРеализации");
		КонецЕсли;
		ДокументыОснования.Добавить(ПервичныйДокумент);
	ИначеЕсли ЭтоФункцияКСЧФ(ФункцияУКД) Тогда
		КорректировочныйСчетФактура = Документ;
		ОснованияСчетаФактуры = ДокументыОснованияСчетаФактурыВыданного(КорректировочныйСчетФактура);
		Для Каждого ОснованиеСчетаФактуры Из ОснованияСчетаФактуры Цикл
			ДокументыОснования.Добавить(ОснованиеСчетаФактуры);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументыОснования);
	
КонецФункции

Функция ДанныеПервичногоДокументаУКД(Знач ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка" , Неопределено);
	Результат.Вставить("Договор", Неопределено);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументСсылка = ДокументОснованиеСчетаФактурыВыданного(ДокументСсылка);
	КонецЕсли;
	
	Результат.Ссылка = ДокументСсылка;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ДокументСсылка.Метаданные()) Тогда
		Результат.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДоговорКонтрагента");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьГотовностьОснованияУКД(СсылкаНаОбъект, Отказ)
	
	ПервичныйДокумент = Неопределено;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ПервичныйДокумент = ДокументОснованиеСчетаФактурыВыданного(СсылкаНаОбъект);
	Иначе
		ПервичныйДокумент = СсылкаНаОбъект;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ПервичныйДокумент)
			И ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		Возврат;
	КонецЕсли;
	
	Если СчетФактураНеТребуется(ПервичныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПокупателюВыставляетсяКорректировочныйСчетФактура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПервичныйДокумент, "ПокупателюВыставляетсяКорректировочныйСчетФактура");
	Если ПокупателюВыставляетсяКорректировочныйСчетФактура <> Истина Тогда
		ШаблонСообщения = НСтр("ru = 'Для документа ""%1"" не удалось сформировать электронный документ. Во вкладке ""НДС"" формы документа должен быть установлен вариант ""Корректировочный счет-фактура выданный покупателю (рекомендуется)"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, ПервичныйДокумент));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКорректировкаПеревыставленногоСчетФактуры(СсылкаНаОбъект, СчетФактура)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СсылкаНаОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Организация, Продавец");
	
	Возврат ЗначениеЗаполнено(ДанныеСФ.Продавец) И ДанныеСФ.Организация <> ДанныеСФ.Продавец;
	
КонецФункции

Процедура ЗаполнитьДанныеИсходныхДокументов(ДеревоДанных, ДанныеДляФормированияЭД, Настройки)
	
	ИсходныеДокументы = Новый ТаблицаЗначений;
	ИсходныеДокументы.Колонки.Добавить("НомерИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ДатаИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ИсправленияИсходногоДокумента");
		
	Если ЭтоФункцияДИС(Настройки.Функция) Тогда
		ДанныеОснования = ДанныеОснованияКорректировкиВозврата(ДанныеДляФормированияЭД.Ссылка);
		СтрокаИсходныеДокументы = ИсходныеДокументы.Добавить();
		СтрокаИсходныеДокументы.НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ДанныеОснования.Номер, Истина, Ложь);
		СтрокаИсходныеДокументы.ДатаИсходногоДокумента  = ДанныеОснования.Дата;
	Иначе
		ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
		Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		
		СтрокаИсходныеДокументы = ИсходныеДокументы.Добавить();
		СтрокаИсходныеДокументы.НомерИсходногоДокумента = Основание.НомерСчетаФактуры;
		СтрокаИсходныеДокументы.ДатаИсходногоДокумента  = Основание.ДатаСчетаФактуры;
			
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ИсправленияИсходногоДокумента = Новый ТаблицаЗначений;
			ИсправленияИсходногоДокумента.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
			ИсправленияИсходногоДокумента.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
			СтрокаИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента.Добавить();
			СтрокаИсправленияИсходногоДокумента.НомерИсправленияИсходногоДокумента = Основание.НомерИсправления;
			СтрокаИсправленияИсходногоДокумента.ДатаИсправленияИсходногоДокумента = Основание.ДатаИсправления;
			СтрокаИсходныеДокументы.ИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ИсходныеДокументы, "ИсходныеДокументы");
	
КонецПроцедуры

Процедура ПолучитьДанныеИсходныхДокументов(ДанныеОбъекта, ДеревоДанных)
	
	ИсходныеДокументы = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ИсходныеДокументы");
	Если Не (ТипЗнч(ИсходныеДокументы) = Тип("ТаблицаЗначений")
			И ЗначениеЗаполнено(ИсходныеДокументы)) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсходныеДокументы = ИсходныеДокументы[0];
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", СтрокаИсходныеДокументы.НомерИсходногоДокумента);
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента" , СтрокаИсходныеДокументы.ДатаИсходногоДокумента);
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	ИсправленияИсходногоДокумента = СтрокаИсходныеДокументы.ИсправленияИсходногоДокумента;
	Если ТипЗнч(ИсправленияИсходногоДокумента) = Тип("ТаблицаЗначений")
			И ЗначениеЗаполнено(ИсправленияИсходногоДокумента) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		СтрокаИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента[0];
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", СтрокаИсправленияИсходногоДокумента.НомерИсправленияИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента" , СтрокаИсправленияИсходногоДокумента.ДатаИсправленияИсходногоДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных, СпособОбработки, ОписаниеОшибки = "")
	
	ДанныеОбъекта = Новый Структура;
	
	ЭтоИсправление = ЗначениеЗаполнено(
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДопДанные.ДопДанныеПодписанные.КурсВзаиморасчетов", Ложь);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
		Если ЭтоИсправление Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснование);
		Иначе
			ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "Плательщик", ОписаниеОшибки);
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик"));
	
	ПередачаТовараКомитентом = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДопДанные.Подписанные.ПередачаТовараКомитентом", Ложь);
	Если ЗначениеЗаполнено(ПередачаТовараКомитентом) Тогда
		ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Булево(ПередачаТовараКомитентом));
	Иначе
		ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	КонецЕсли;
	
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	СпособыОбработки = СпособыОбработкиВходящихЭД();
	СпособОбработкиПервичногоДокумента = СпособОбработкиПервичногоДокумента(СпособОбработки);
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление");
		
		ВидТаблицыДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.ТаблицаДокумента", Ложь);
		
		ЭтоУслуга = ЭтоУслуга(Номенклатура);
		
		ЭтоВозвратнаяТара = (ВРег(ВидТаблицыДокумента) = ВРег("ВозвратнаяТара") И Не ЭтоУслуга);
		
		Если ЭтоВозвратнаяТара Тогда
			НоваяСтрока = ДанныеТабличныхЧастей.ВозвратнаяТара.Добавить();
		Иначе
			НоваяСтрока = ДанныеТабличныхЧастей[ИмяТабличнойЧастиПоступленияПоСпособуОбработки(СпособОбработкиПервичногоДокумента, ЭтоУслуга)].Добавить();
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			НоваяСтрока.Номенклатура = Номенклатура;
		ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОсновныхСредств
				Или СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеЗемельныхУчастков Тогда
			НоваяСтрока.ОсновноеСредство = Номенклатура;
			НоваяСтрока.ИнвентарныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Код");
		ИначеЕсли СпособОбработкиПервичногоДокумента = СпособыОбработки.ПоступлениеОбъектовСтроительства Тогда
			НоваяСтрока.ОбъектСтроительства = Номенклатура;
		Иначе
			НоваяСтрока.Номенклатура = Номенклатура;
		КонецЕсли;
		
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "ЕдиницаИзмерения") Тогда
			НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод"));
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
		КонецЕсли;
		
		Если Не ЭтоВозвратнаяТара Тогда
			// Обязательные реквизиты:
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
				НДСИсчисляетсяНалоговымАгентом = Истина;
				Если ИспользуетсяОбратноеНачислениеНДС Тогда
					
					НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
						ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
					// Вычисляем НДС сверху по общей ставке
					НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС"),
						Ложь,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				Иначе
					НоваяСтрока.СтавкаНДС = Неопределено;
					НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
				КонецЕсли;
			Иначе
				НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "Количество") Тогда
			НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		КонецЕсли;
		Если ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "Цена") Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		КонецЕсли;
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		
		Если Не (ЭтоУслуга Или ЭтоВозвратнаяТара) Тогда
			НомерТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
			КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
			ДанныеГТД = Новый Структура;
			Если ЗначениеЗаполнено(НомерТД) Тогда
				ДанныеГТД.Вставить("НомерТД", НомерТД);
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
				ДанныеГТД.Вставить("КодСтраныПроисхождения", КодСтраныПроисхождения);
			КонецЕсли;
			ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	ДанныеДляЗаполнения.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ИтоговыеСуммыДокумента()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьИДНоменклатуры(Номенклатура, Характеристика, Упаковка) 
	
	ИДТовара = Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	
КонецФункции

Функция ДоступенЭДОДляЭДПередачаТоваров(СсылкаНаОбъект)
	
	Возврат ЗначениеЗаполнено(СсылкаНаОбъект) И ТипЗнч(СсылкаНаОбъект) <> Тип("ДокументСсылка.ПередачаОС");
	
КонецФункции

#КонецОбласти

#Область ПередачаРезультатовРабот

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	ДанныеОбъекта = Новый Структура;
	
	ЭтоИсправление = ЗначениеЗаполнено(ДанныеЭД.НомерИсправления);
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.ВалютаКод);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Валюта);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов"     , КурсВзаиморасчетовПередачаРабот(ДанныеЭД));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	ДанныеОбъекта.Вставить("ВидОперацииЭД"          , ДанныеЭД.ВидОперации);
	ДанныеОбъекта.Вставить("СуммаВключаетНДС"       , Ложь);
	ДанныеОбъекта.Вставить("Корректировка"          , Ложь);
	
	ДокументыОснования = ДанныеЭД.ДокументыОснования;
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
		Если ЭтоИсправление Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснование);
		Иначе
			ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерАкта);
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента" , ДанныеЭД.ДатаАкта);
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление"     , Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ДанныеЭД.НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления" , ДанныеЭД.ДатаИсправления);
	Иначе
		ДанныеОбъекта.Вставить("Исправление"     , Ложь);
	КонецЕсли;
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "Исполнитель", ОписаниеОшибки);
	
	ДанныеОбъекта.Вставить("Контрагент"              , КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	Для Каждого СтрокаТаблицы Из ДанныеЭД.ТаблицаУслуг Цикл
		НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
		НоваяСтрока.Номенклатура = НоменклатураПередачаРабот(СтрокаТаблицы);
		НоваяСтрока.Количество   = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена         = СтрокаТаблицы.Цена;
		НоваяСтрока.Сумма        = СтрокаТаблицы.СуммаБезНДС;
		НоваяСтрока.СтавкаНДС    = СтрокаТаблицы.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = СтрокаТаблицы.СуммаНДС;
		НоваяСтрока.Содержание   = СодержаниеУслугиПередачаРабот(СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка"                , ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияДопРасходовПоПередачаРабот(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка = Новый Структура;
	
	Шапка.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерАкта);
	Шапка.Вставить("ДатаВходящегоДокумента" , ДанныеЭД.ДатаАкта);
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.ВалютаКод);
	Шапка.Вставить("ВалютаДокумента"        , Валюта);
	Шапка.Вставить("КурсВзаиморасчетов"     , КурсВзаиморасчетовПередачаРабот(ДанныеЭД));
	Шапка.Вставить("КратностьВзаиморасчетов", 1);
	Шапка.Вставить("СуммаВключаетНДС"       , Ложь);
	Шапка.Вставить("ВидОперацииЭД"          , ДанныеЭД.ВидОперации);
	
	Если ЗначениеЗаполнено(ДанныеЭД.НомерИсправления) Тогда
		Шапка.Вставить("Исправление"     , Истина);
		Шапка.Вставить("НомерИсправления", ДанныеЭД.НомерИсправления);
		Шапка.Вставить("ДатаИсправления" , ДанныеЭД.ДатаИсправления);
		
		// Вид операции ЭД может быть не указан, т.к. реквизит не является обязательным.
		Если Не ЗначениеЗаполнено(Шапка.ВидОперацииЭД) Тогда
			Шапка.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
		КонецЕсли;
	Иначе
		Шапка.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	НайтиОрганизациюПоДаннымЭД(Шапка, ДеревоДанных, "Исполнитель", ОписаниеОшибки);
	Шапка.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
	
	МассивНаименованийУслуг = Новый Массив;
	ПерваяИтерация          = Истина;
	СтавкаНДС               = Неопределено;
	Для Каждого СтрокаТаблицы Из ДанныеЭД.ТаблицаУслуг Цикл
		МассивНаименованийУслуг.Добавить(СодержаниеУслугиПередачаРабот(СтрокаТаблицы));
		Если ПерваяИтерация Тогда
			СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			ПерваяИтерация = Ложь;
		КонецЕсли;
		
		// Если строки таблицы документа имеют разные ставки НДС, то ставку НДС в документе "Поступление доп. расходов" не заполняем.
		Если СтавкаНДС <> СтрокаТаблицы.СтавкаНДС Тогда
			СтавкаНДС = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Шапка.Вставить("Содержание"     , СтрСоединить(МассивНаименованийУслуг, ";" + " "));
	Шапка.Вставить("СтавкаНДС"      , СтавкаНДС);
	Шапка.Вставить("СуммаНДС"       , ДанныеЭД.ТаблицаУслуг.Итог("СуммаНДС"));
	Шапка.Вставить("Сумма"          , ДанныеЭД.ТаблицаУслуг.Итог("СуммаБезНДС"));
	Шапка.Вставить("СуммаДокумента" , ДанныеЭД.ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ДаныеДляЗаполнения = Новый Структура();
	ДаныеДляЗаполнения.Вставить("Шапка", Шапка);
	
	Возврат ДаныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияИзПереработкиПоПередачаРабот(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка = Новый Структура;
	Услуги = Документы.ПоступлениеИзПереработки.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Шапка.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерАкта);
	Шапка.Вставить("ДатаВходящегоДокумента" , ДанныеЭД.ДатаАкта);
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.ВалютаКод);
	Шапка.Вставить("ВалютаДокумента"        , Валюта);
	Шапка.Вставить("КурсВзаиморасчетов"     , КурсВзаиморасчетовПередачаРабот(ДанныеЭД));
	Шапка.Вставить("КратностьВзаиморасчетов", 1);
	Шапка.Вставить("СуммаВключаетНДС"       , Ложь);
	Шапка.Вставить("ВидОперацииЭД"          , ДанныеЭД.ВидОперации);
	Шапка.Вставить("Исправление"            , Ложь);
	
	НайтиОрганизациюПоДаннымЭД(Шапка, ДеревоДанных, "Исполнитель", ОписаниеОшибки);
	Шапка.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
	Для Каждого СтрокаТаблицы Из ДанныеЭД.ТаблицаУслуг Цикл
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = НоменклатураПередачаРабот(СтрокаТаблицы);
		НоваяСтрока.Содержание   = СодержаниеУслугиПередачаРабот(СтрокаТаблицы);
		НоваяСтрока.СтавкаНДС    = СтрокаТаблицы.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = СтрокаТаблицы.СуммаНДС;
		НоваяСтрока.Количество   = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена         = СтрокаТаблицы.Цена;
		НоваяСтрока.Сумма        = СтрокаТаблицы.СуммаБезНДС;
		
	КонецЦикла;	
	Шапка.Вставить("СуммаДокумента" , Услуги.Итог("Сумма") + Услуги.Итог("СуммаНДС"));
	
	ДаныеДляЗаполнения = Новый Структура;
	ДаныеДляЗаполнения.Вставить("Шапка" , Шапка);
	ДаныеДляЗаполнения.Вставить("Услуги", Услуги);
	
	Возврат ДаныеДляЗаполнения;
	
КонецФункции

Функция КурсВзаиморасчетовПередачаРабот(ДанныеЭД)
	
	КурсВзаиморасчетов = 1;
	СтрокаКурса = ДанныеЭД.ДопДанные.Подписанные.Найти("КурсВзаиморасчетов", "Идентификатор");
	Если СтрокаКурса <> Неопределено Тогда
		КурсВзаиморасчетов = СтрокаКурса.Значение;
	КонецЕсли;
	
	Возврат КурсВзаиморасчетов;
	
КонецФункции

Функция НоменклатураПередачаРабот(СтрокаТаблицыЭД)
	
	Номенклатура = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТаблицыЭД.Сопоставление.НоменклатураИБ) Тогда
		Номенклатура = СтрокаТаблицыЭД.Сопоставление.НоменклатураИБ;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

Функция СодержаниеУслугиПередачаРабот(СтрокаТаблицыЭД)
	
	Содержание = СтрокаТаблицыЭД.Описание;
	Если Не ЗначениеЗаполнено(Содержание) Тогда
		Содержание = СтрокаТаблицыЭД.НаименованиеНоменклатуры;
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату

Функция НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый 
		ДокументОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		Если ДанныеДляЗагрузки.Свойство("НДСИсчисляетсяНалоговымАгентом")
				И ДанныеДляЗагрузки.НДСИсчисляетсяНалоговымАгентом Тогда
			СтруктураПараметров.Вставить("УчетАгентскогоНДС", Новый Структура("ЗначениеОтбора", Истина));
			СтруктураПараметров.Вставить("ВидАгентскогоДоговора",
				Новый Структура("ЗначениеОтбора", Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров));
		КонецЕсли;
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
			ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	ЦенаВключаетНДС = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ЦенаВключаетНДС", Истина, ДеревоРазбора);
	Если ЦенаВключаетНДС = Неопределено Тогда
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
			
			Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
			
		Иначе
			
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора, ЦенаВключаетНДС);
			
			Если ДанныеДляЗаполненияСтрокиТЧ.СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
				НДСИсчисляетсяНалоговымАгентом = Истина;
				Если ИспользуетсяОбратноеНачислениеНДС Тогда
					ДанныеДляЗаполненияСтрокиТЧ.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
						ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
					// Вычисляем НДС сверху по общей ставке
					ДанныеДляЗаполненияСтрокиТЧ.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						ДанныеДляЗаполненияСтрокиТЧ.Сумма,
						Ложь,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеДляЗаполненияСтрокиТЧ.СтавкаНДС));
					ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС + ДанныеДляЗаполненияСтрокиТЧ.СуммаНДС;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ.СтавкаНДС = Неопределено;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	// Если по ИНН и КПП организация не найдена, то возможно:
	//  - у организации изменился КПП (нужно проверить историю изменений КПП)
	//  - организация является обособленным подразделением в справочнике "Подразделения организаций"
	//    (необходимо найти головную организацию и подразделение, и подставить в документ учета).
	Если Не (ДанныеЗаполненияШапки.Свойство("Организация")
		И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация)) Тогда
		
		ДанныеОрганизации = ДеревоРазбора.Строки.Найти("Организации", "ТипОбъекта", Истина);
		ИННОрганизации = ПолучитьЗначениеРеквизита(ДанныеОрганизации, "ИНН", Истина);
		КППОрганизации = ПолучитьЗначениеРеквизита(ДанныеОрганизации, "КПП", Истина);
		НайтиОрганизациюПоДаннымЭДCML(ДанныеЗаполненияШапки, ИННОрганизации, КППОрганизации);
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция НазначениеПлатежаДляСчетаНаОплату(Знач Наименование, Знач Номер, Знач Дата)
	
	Если ДоговорУказан(Наименование) Тогда
 		НазначениеПлатежаМассив = Новый Массив;
		НазначениеПлатежаМассив.Добавить(СокрЛП(Наименование));
		Если ЗначениеЗаполнено(Номер) Или ЗначениеЗаполнено(Дата) Тогда
			НазначениеПлатежаМассив.Добавить(" ");
			НазначениеПлатежаМассив.Добавить("(");
			Если ЗначениеЗаполнено(Номер) Тогда
				НазначениеПлатежаМассив.Добавить(НСтр("ru = '№'"));
				НазначениеПлатежаМассив.Добавить(" ");
				НазначениеПлатежаМассив.Добавить(СокрЛП(Номер));
			КонецЕсли;
			Если ЗначениеЗаполнено(Дата) Тогда
				Если ЗначениеЗаполнено(Номер) Тогда
					НазначениеПлатежаМассив.Добавить(" ");
				КонецЕсли;
				НазначениеПлатежаМассив.Добавить(НСтр("ru = 'от'"));
				НазначениеПлатежаМассив.Добавить(" ");
				НазначениеПлатежаМассив.Добавить(Формат(Дата, "ДЛФ=D"));
			КонецЕсли;
			НазначениеПлатежаМассив.Добавить(")");
		КонецЕсли;
		НазначениеПлатежа = СтрСоединить(НазначениеПлатежаМассив);
	Иначе
		НазначениеПлатежа = "";
	КонецЕсли;
	
	Возврат НазначениеПлатежа;
	
КонецФункции

Процедура ЗаполнитьДанныеФизическогоЛица(ДеревоДанных, ТипЛица, СтруктураФИО, НаименованиеДолжности = "")
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Фамилия", СтруктураФИО.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Имя", СтруктураФИО.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Отчество", СтруктураФИО.Отчество);
	Если ЗначениеЗаполнено(НаименованиеДолжности) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Должность", НаименованиеДолжности);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаименованиеНоменклатуры(Знач Наименование, МаксДлина = 250)
	
	Наименование = СокрЛП(Наименование);
	Если СтрДлина(Наименование) > МаксДлина Тогда
		
		Возврат Лев(Наименование, МаксДлина);
		
	Иначе
		
		Возврат Наименование;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату101

Процедура ЗаполнитьРеквизитыУчастникаСчетаНаОплату(ДеревоДанных, Участник, ДатаСведений, ВидУчастника, БанковскийСчет = Неопределено)
	
	СведенияОбУчастнике = ОбменСКонтрагентамиБППовтИсп.ПолучитьДанныеЮрФизЛица(Участник, ДатаСведений, БанковскийСчет);
	ЦифровойСчет = ?(ЗначениеЗаполнено(БанковскийСчет), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ЦифровойСчет"), Ложь);
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации", СведенияОбУчастнике.НалоговыйНомерВСтранеРегистрации);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ОКСМ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОбУчастнике.СтранаРегистрации, "Код"));
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН", СведенияОбУчастнике.ОГРН);
	Иначе
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			ТипУчастника = ".ТипУчастника.ИП";
		Иначе
			ТипУчастника = ".ТипУчастника.ФЛ";
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ИНН", СведенияОбУчастнике.ИНН);
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.ОГРН", СведенияОбУчастнике.ОГРН);
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ФИО.Фамилия", ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ФИО.Имя", ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ФИО.Отчество", ФИО.Отчество);
		
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель
				И ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ТипУчастника + ".СвидетельствоГосударственнойРегистрации", Свидетельство);
		КонецЕсли;
	КонецЕсли;
	
	// Адрес РФ
	Если СведенияОбУчастнике.Свойство("ОбособленноеПодразделениеОрганизации")
			И ЗначениеЗаполнено(СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации) Тогда
		Компания = СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации;
	Иначе
		Компания = СведенияОбУчастнике.ЮрФизЛицоСсылка;
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, Компания, "Юр", ДатаСведений);
	
	АдресУчастника.Удалить("АдресРФ");
	АдресУчастника.Удалить("КодСтр");
	АдресУчастника.Удалить("КодСтраны");
	АдресУчастника.Удалить("АдрТекст");
	АдресУчастника.Удалить("АдресТекст");
	АдресУчастника.Удалить("Регион");
	АдресУчастника.Удалить("КодРегион");
	АдресУчастника.Удалить("НаселПункт");
	АдресУчастника.Удалить("Кварт");
	АдресУчастника.Удалить("КодГАР");
	Для Каждого Элемент Из АдресУчастника Цикл
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АдресРФ." + Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	// Контактные данные
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		Телефоны = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, ВидУчастника + ".КонтактныеСведения.Телефоны");
		НоваяСтрока = Телефоны.Добавить();	
		НоваяСтрока.Телефон = СведенияОбУчастнике.Телефоны;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
			ДеревоДанных, Телефоны, ВидУчастника + ".КонтактныеСведения.Телефоны");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Email) Тогда
		АдресаЭлектроннойПочты = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, ВидУчастника + ".КонтактныеСведения.ЭлектронныеПочты");
		НоваяСтрока = АдресаЭлектроннойПочты.Добавить();	
		НоваяСтрока.ЭлектроннаяПочта = СведенияОбУчастнике.Email;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
			ДеревоДанных, АдресаЭлектроннойПочты, ВидУчастника + ".КонтактныеСведения.ЭлектронныеПочты");
	КонецЕсли;
	
	Если Не ЦифровойСчет Тогда
		// Банковские реквизиты
		Если СведенияОбУчастнике.Свойство("НомерСчета") И ЗначениеЗаполнено(СведенияОбУчастнике.НомерСчета) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета", СведенияОбУчастнике.НомерСчета);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.РасчетныйСчет", СведенияОбУчастнике.НомерСчета);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("Банк") И ЗначениеЗаполнено(СведенияОбУчастнике.Банк) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка", СведенияОбУчастнике.Банк);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК") И ЗначениеЗаполнено(СведенияОбУчастнике.БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка", СведенияОбУчастнике.БИК);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("КоррСчет") И ЗначениеЗаполнено(СведенияОбУчастнике.КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка", СведенияОбУчастнике.КоррСчет);
		КонецЕсли;
		
		// Подразделение и ОКПО
		Если СведенияОбУчастнике.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("ПодразделениеОрганизации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".СтруктурноеПодразделение", СведенияОбУчастнике.ПодразделениеОрганизации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктСверкиВзаиморасчетов

Функция НовыйТаблицаСведенияПоДоговорам()
	
	СведенияПоДоговорам = Новый ТаблицаЗначений;
	СведенияПоДоговорам.Колонки.Добавить("НомерСтроки");
	СведенияПоДоговорам.Колонки.Добавить("НомерДоговора", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	СведенияПоДоговорам.Колонки.Добавить("ДатаДоговора");
	СведенияПоДоговорам.Колонки.Добавить("ОписаниеДоговора", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)));
	СведенияПоДоговорам.Колонки.Добавить("СведенияПоДокументам");
	
	Возврат СведенияПоДоговорам;

КонецФункции

Функция НовыйТаблицаСведенияПоДокументам()
	
	СведенияПоДокументам = Новый ТаблицаЗначений;
	СведенияПоДокументам.Колонки.Добавить("НомерСтроки");
	СведенияПоДокументам.Колонки.Добавить("НаименованиеДокумента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	СведенияПоДокументам.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	СведенияПоДокументам.Колонки.Добавить("ДатаДокумента");
	СведенияПоДокументам.Колонки.Добавить("СведенияПоОперациям");
	
	Возврат СведенияПоДокументам;

КонецФункции

Функция НовыйТаблицаСведенияПоОперациям()
	
	СведенияПоОперациям = Новый ТаблицаЗначений;
	СведенияПоОперациям.Колонки.Добавить("НомерСтроки");
	СведенияПоОперациям.Колонки.Добавить("ПорядковыйНомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	СведенияПоОперациям.Колонки.Добавить("ДатаОперации");
	СведенияПоОперациям.Колонки.Добавить("НаименованиеОперации", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)));
	СведенияПоОперациям.Колонки.Добавить("СуммаДебет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СведенияПоОперациям.Колонки.Добавить("СуммаКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат СведенияПоОперациям;
	
КонецФункции

Функция ДоступенЭДОДляЭДАктСверкиВзаиморасчетов(СсылкаНаОбъект)
	
	Возврат ЗначениеЗаполнено(СсылкаНаОбъект) И ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов");
	
КонецФункции

Функция ТекстОшибкиНекорректнаяВалюта()
	
	Возврат НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
		|	- в документе указана валюта,
		|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	
КонецФункции

Процедура ЗаполнитьРеквизитыУчастника(ДеревоДанных, Участник, ДатаСведений, ВидУчастника)
	
	СведенияОбУчастнике = ОбменСКонтрагентамиБППовтИсп.ПолучитьДанныеЮрФизЛица(Участник, ДатаСведений);
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации", СведенияОбУчастнике.НалоговыйНомерВСтранеРегистрации);
		
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН", СведенияОбУчастнике.ОГРН);
		
	Иначе
		
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			ТипУчастника = ".ТипУчастника.ИП";
		Иначе
			ТипУчастника = ".ТипУчастника.ФЛ";
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".ИНН", СведенияОбУчастнике.ИНН);
		
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.ОГРН", СведенияОбУчастнике.ОГРН);
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Фамилия", ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Имя", ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ТипУчастника + ".Отчество", ФИО.Отчество);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон", СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Email) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта", СведенияОбУчастнике.Email);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляАктСверкиВзаиморасчетовВходящий(ДеревоДанных, ОписаниеОшибки = "")
	
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка = Новый Структура;
	Шапка.Вставить("ЭтоЭлектронныйДокумент",  Истина);
	Шапка.Вставить("ЭтоДокументКонтрагента",  Истина);
	Шапка.Вставить("РазбитьПоДоговорам",      Истина);
	Шапка.Вставить("ДатаНачала",              ДанныеЭД.ДатаНачалаПериодаСверки);
	Шапка.Вставить("ДатаОкончания",           ДанныеЭД.ДатаОкончанияПериодаСверки);
	Шапка.Вставить("НомерВходящегоДокумента", ДанныеЭД.НомерДокумента);
	Шапка.Вставить("ДатаВходящегоДокумента",  ДанныеЭД.ДатаДокумента);
	Шапка.Вставить("Контрагент",              КонтрагентПоДаннымЭД(ДеревоДанных, "Отправитель"));
	
	НайтиОрганизациюПоДаннымЭД(Шапка, ДеревоДанных, "Получатель", ОписаниеОшибки);
	
	ДанныеДляЗаполнения = Новый Структура();
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ДанныеЭД.КодВалюты);
	Шапка.Вставить("ВалютаДокумента", Валюта);
	Шапка.Вставить("ОстатокНаНачалоПоДаннымКонтрагента",
		ДанныеЭД.СведенияОтправителя.СальдоНаНачалоПериодаДебет - ДанныеЭД.СведенияОтправителя.СальдоНаНачалоПериодаКредит);
	
	ТаблицаПоДаннымКонтрагента = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Документы.АктСверкиВзаиморасчетов.ТабличныеЧасти.ПоДаннымКонтрагента.Реквизиты Цикл
		ТаблицаПоДаннымКонтрагента.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого СтрокаДоговора Из ДанныеЭД.СведенияОтправителя.СведенияПоДоговорам Цикл
		Для Каждого СтрокаДокумента Из СтрокаДоговора.СведенияПоДокументам Цикл
			Для Каждого СтрокаОперации Из СтрокаДокумента.СведенияПоОперациям Цикл
				
				СтрокаПоДаннымКонтрагента  = ТаблицаПоДаннымКонтрагента.Добавить();
				СтрокаПоДаннымКонтрагента.Договор = ДоговорПоСтрокеАктаСверки(Шапка, СтрокаДоговора);
				СтрокаПоДаннымКонтрагента.Дата = СтрокаОперации.ДатаОперации;
				СтрокаПоДаннымКонтрагента.НаименованиеОперации = СтрокаОперации.НаименованиеОперации;
				СтрокаПоДаннымКонтрагента.НаименованиеДокумента = СтрокаДокумента.НаименованиеДокумента;
				СтрокаПоДаннымКонтрагента.Дебет = СтрокаОперации.СуммаДебет;
				СтрокаПоДаннымКонтрагента.Кредит = СтрокаОперации.СуммаКредит;
				СтрокаПоДаннымКонтрагента.НомерДокумента = СтрокаДокумента.НомерДокумента;
				СтрокаПоДаннымКонтрагента.ДатаДокумента = СтрокаДокумента.ДатаДокумента;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("Шапка", Шапка);
	ДанныеДляЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Процедура ЗаполнитьДокументАктСверкиВзаиморасчетовВходящий(ДокументУчета, ДанныеДляЗаполнения, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеДляЗаполнения.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда // получены изменения по существующему документу
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
	Документы.АктСверкиВзаиморасчетов.ЗаполнитьАктСверкиПоДаннымИБ(ДокументОбъект);
	ДокументОбъект.ПоДаннымКонтрагента.Загрузить(ДанныеДляЗаполнения.ПоДаннымКонтрагента); // Данные входящего электронного документа
	Документы.АктСверкиВзаиморасчетов.СопоставитьДанныеОрганизацииИКонтрагента(ДокументОбъект);
	
	СверкаСогласована = Не ДокументОбъект.ЕстьРасхождения;

	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументУчета = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = ?(СверкаСогласована, 
		Перечисления.СтатусыДокументовРеализации.Подписан,
		Перечисления.СтатусыДокументовРеализации.НеПодписан);
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокументОбъект.Ссылка, СтатусыДокумента); 
	
КонецПроцедуры

Функция ДоговорПоСтрокеАктаСверки(ДанныеДокумента, РеквизитыДоговора)
	
	ОтборПоВалюте = Новый Структура("ЗначениеОтбора", ДанныеДокумента.ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	
	Если РеквизитыДоговора.ОписаниеДоговора = "С покупателем" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли РеквизитыДоговора.ОписаниеДоговора = "С поставщиком" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
		
	ДоговорКонтрагента = Справочники.Контрагенты.ПустаяСсылка();
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		ДанныеДокумента.Контрагент, ДанныеДокумента.Организация, СписокВидовДоговоров, СтруктураПараметров);
		
	Возврат ДоговорКонтрагента;
	
КонецФункции

Функция ПодготовитьСтруктуруДляАктСверкиВзаиморасчетовПолученОтветныйТитул(ДанныеДокумента, ОбъектыУчета)
	
	ДанныеДляЗаполнения = Новый Структура();
	
	Если ОбъектыУчета.Количество() = 0 Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	Основание = ОбъектыУчета[0];
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
		"ВалютаДокумента,Организация,Контрагент,ПоДаннымОрганизации,ОстатокНаНачало");
	
	ДеревоДанных = ДанныеДокумента.НовыйЭД.ЗначениеРеквизита;
	ДанныеЭД = ДанныеВходящегоЭД(ДеревоДанных);
	
	Шапка = Новый Структура;
	
	Если ДанныеЭД.ПризнакНаличияРазногласий Тогда
		Шапка.Вставить("СверкаСогласована", Ложь);
		Шапка.Вставить("ОстатокНаНачалоПоДаннымКонтрагента",
			ДанныеЭД.СведенияПолучателя.СальдоНаНачалоПериодаДебет - ДанныеЭД.СведенияПолучателя.СальдоНаНачалоПериодаКредит);
	Иначе
		Шапка.Вставить("СверкаСогласована", Истина);
		Шапка.Вставить("ОстатокНаНачалоПоДаннымКонтрагента", - ПараметрыОснования.ОстатокНаНачало);
		ТаблицаПоДаннымКонтрагента = Документы.АктСверкиВзаиморасчетов.ТаблицаПоДаннымКонтрагентаНаОсновеТаблицыПоДаннымОрганизации(
			ПараметрыОснования.ПоДаннымОрганизации.Выгрузить());
		ДанныеДляЗаполнения.Вставить("Шапка", Шапка);
		ДанныеДляЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента);
		ДанныеДляЗаполнения.Вставить("Основание", Основание);
		
		Возврат ДанныеДляЗаполнения;
		
	КонецЕсли;
	
	ТаблицаПоДаннымКонтрагента = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Документы.АктСверкиВзаиморасчетов.ТабличныеЧасти.ПоДаннымКонтрагента.Реквизиты Цикл
		ТаблицаПоДаннымКонтрагента.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого СтрокаДоговора Из ДанныеЭД.СведенияПолучателя.СведенияПоДоговорам Цикл
		Для Каждого СтрокаДокумента Из СтрокаДоговора.СведенияПоДокументам Цикл
			Для Каждого СтрокаОперации Из СтрокаДокумента.СведенияПоОперациям Цикл
				
				СтрокаПоДаннымКонтрагента  = ТаблицаПоДаннымКонтрагента.Добавить();
				СтрокаПоДаннымКонтрагента.Договор = ДоговорПоСтрокеАктаСверки(ПараметрыОснования, СтрокаДоговора);
				СтрокаПоДаннымКонтрагента.Дата = СтрокаОперации.ДатаОперации;
				СтрокаПоДаннымКонтрагента.НаименованиеОперации = СтрокаОперации.НаименованиеОперации;
				СтрокаПоДаннымКонтрагента.НаименованиеДокумента = СтрокаДокумента.НаименованиеДокумента;
				СтрокаПоДаннымКонтрагента.Дебет = СтрокаОперации.СуммаДебет;
				СтрокаПоДаннымКонтрагента.Кредит = СтрокаОперации.СуммаКредит;
				СтрокаПоДаннымКонтрагента.НомерДокумента = СтрокаДокумента.НомерДокумента;
				СтрокаПоДаннымКонтрагента.ДатаДокумента = СтрокаДокумента.ДатаДокумента;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("Шапка", Шапка);
	ДанныеДляЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента);
	ДанныеДляЗаполнения.Вставить("Основание", Основание);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Процедура ЗаполнитьДокументАктСверкиВзаиморасчетовИсходящийОтветнымТитулом(ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеДляЗаполнения.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	ДокументУчета = ДанныеДляЗаполнения.Основание;
	ДокументОбъект = ДокументУчета.ПолучитьОбъект();
	Если ДокументОбъект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка, "ОстатокНаНачалоПоДаннымКонтрагента");
	СверкаСогласована = Шапка.СверкаСогласована;
	
	ДокументОбъект.ПоДаннымКонтрагента.Загрузить(ДанныеДляЗаполнения.ПоДаннымКонтрагента); // Данные входящего электронного документа
	Документы.АктСверкиВзаиморасчетов.СопоставитьДанныеОрганизацииИКонтрагента(ДокументОбъект);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументУчета = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = ?(СверкаСогласована, 
		Перечисления.СтатусыДокументовРеализации.Подписан,
		Перечисления.СтатусыДокументовРеализации.НеПодписан);
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокументОбъект.Ссылка, СтатусыДокумента);
	
КонецПроцедуры

Функция ОрганизацияПоДаннымЭД_ЮЛ(ИНН, КПП, ДатаСведений)
	
	ОрганизацияПодразделение = НовыйОрганизацияПодразделение();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.КПП = &КПП
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления";
		
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПоИННКПП = Результат[0].Выбрать();
	Если ВыборкаПоИННКПП.Следующий() Тогда // найдено точное соответствие
		ОрганизацияПодразделение.Организация = ВыборкаПоИННКПП.Ссылка;
	Иначе // нет точного соответствия, возможно у организации изменился КПП, или это обособленное подразделение
		ВыборкаПоИНН = Результат[1].Выбрать();
		Если ЗначениеЗаполнено(КПП) Тогда
			ЭтоКППОбособленногоПодразделения = ЭтоКППОбособленногоПодразделения(КПП);
			Пока ВыборкаПоИНН.Следующий() Цикл
				КППНаДату = Справочники.Организации.КППНаДату(ВыборкаПоИНН.Ссылка, ДатаСведений);
				Если КППНаДату = КПП Тогда
					ОрганизацияПодразделение.Организация = ВыборкаПоИНН.Ссылка;
				ИначеЕсли ЭтоКППОбособленногоПодразделения
						И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделения") Тогда
					ОрганизацияПодразделение.ПодразделениеОрганизации = ОбособленноеПодразделениеОрганизацииПоКПП(ВыборкаПоИНН.Ссылка, КПП);
					Если ЗначениеЗаполнено(ОрганизацияПодразделение.ПодразделениеОрганизации) Тогда
						ОрганизацияПодразделение.Организация = ВыборкаПоИНН.Ссылка;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОрганизацияПодразделение.Организация) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе // в ЭД не указан КПП организации
			Если ВыборкаПоИНН.Следующий() Тогда
				ОрганизацияПодразделение.Организация = ВыборкаПоИНН.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияПодразделение;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД_ФЛ(ИНН)
	
	ОрганизацияПодразделение = НовыйОрганизацияПодразделение();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОрганизацияПодразделение.Организация = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОрганизацияПодразделение;
	
КонецФункции

Функция НовыйОрганизацияПодразделение()
	
	ОрганизацияПодразделение = Новый Структура;
	ОрганизацияПодразделение.Вставить("Организация",              Неопределено);
	ОрганизацияПодразделение.Вставить("ПодразделениеОрганизации", Неопределено);
	
	Возврат ОрганизацияПодразделение;
	
КонецФункции

#КонецОбласти

#Область ОтчетКомиссионера

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		
		ДокументОбъект = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОПродажах;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ОтборПоВалюте			= Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров		= Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);		
		// Заполнение реквизитов, специфичных для документа:		
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(,, ДокументОбъект);	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорКонтрагента, "СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
			ДокументОбъект.СпособРасчетаКомиссионногоВознаграждения = ЗначенияРеквизитов.СпособРасчетаКомиссионногоВознаграждения;
			ДокументОбъект.ПроцентКомиссионногоВознаграждения = ЗначенияРеквизитов.ПроцентКомиссионногоВознаграждения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// установка счета и статей затрат
	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчетаЗатрат) Тогда
		
		ДокументОбъект.СчетУчетаЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ИздержкиОбращения");
		СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДокументОбъект.СчетУчетаЗатрат);
		СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.УслугиКомиссионеров");
		Для Индекс = 1 По СвойстваСчетаЗатрат.КоличествоСубконто Цикл
			Если СвойстваСчетаЗатрат["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект["Субконто" + Индекс]) Тогда
					ДокументОбъект["Субконто" + Индекс] = СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	
	КонецЕсли;	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
	ДокументОбъект.Покупатели.Загрузить(ДанныеДляЗагрузки.Покупатели);
	ДокументОбъект.ДенежныеСредства.Загрузить(ДанныеДляЗагрузки.ДенежныеСредства);
	ДокументОбъект.СведенияПрослеживаемости.Загрузить(ДанныеДляЗагрузки.СведенияПрослеживаемости);
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Услуги");
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаЭлектронногоДокумента", Истина);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДокументПустаяСсылка = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка();
	
	ТаблицаТоваров = ДокументПустаяСсылка.Товары.ВыгрузитьКолонки();
	ТаблицаТоваров.Колонки.Добавить("ДатаСФ");
	ТаблицаТоваров.Колонки.Добавить("Покупатель");
	ТаблицаТоваров.Колонки.Добавить("СведенияПрослеживаемости");
	
	ТаблицаУслуг = ДокументПустаяСсылка.Услуги.ВыгрузитьКолонки();
	ТаблицаУслуг.Колонки.Добавить("ДатаСФ");
	ТаблицаУслуг.Колонки.Добавить("Покупатель");
	
	СведенияПрослеживаемости = ДокументПустаяСсылка.СведенияПрослеживаемости.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЭтоУслуга = Ложь;
			Сопоставление = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Сопоставление", Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) = Тип("Структура")
					И Сопоставление.Свойство("НоменклатураИБ") Тогда
				Номенклатура = Сопоставление.НоменклатураИБ;
				ЭтоУслуга = ЭтоУслуга(Номенклатура);
				Если ЭтоУслуга Тогда
					НоваяСтрока = ТаблицаУслуг.Добавить();
					КолонкиТаблицы = ТаблицаУслуг.Колонки;
				Иначе
					НоваяСтрока = ТаблицаТоваров.Добавить();
					КолонкиТаблицы = ТаблицаТоваров.Колонки;
				КонецЕсли;
			Иначе
				НоваяСтрока = ТаблицаТоваров.Добавить();
				КолонкиТаблицы = ТаблицаУслуг.Колонки;
			КонецЕсли;
			ДанныеПокупателя = Новый Структура("НаименованиеПолное, ИНН, КПП, ЮрАдрес, ФактАдрес");
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				Если ИмяРеквизитаВБД = "ПокупательНаименование" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.НаименованиеПолное = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательИНН" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ИНН = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательКПП" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.КПП = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательЮрАдрес" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ЮрАдрес = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательФактАдрес" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ФактАдрес = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "Цена" И Не ЭтоУслуга Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["ЦенаПередачи"] = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "Сумма" И Не ЭтоУслуга Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["СуммаПередачи"] = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ЦенаПродажи" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Цена"] = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "СуммаПродажи" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Сумма"] = НайденноеЗначение;
				ИначеЕсли ИмяРеквизитаВБД = "ДатаРеализации" Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДатаРеализации = СтрЗаменить(НайденноеЗначение, "-", "");
					ДатаРеализации = СтрЗаменить(ДатаРеализации, "T", "");
					ДатаРеализации = СтрЗаменить(ДатаРеализации, ":", "");
					НоваяСтрока["ДатаСФ"] = ?(ЗначениеЗаполнено(ДатаРеализации), Дата(ДатаРеализации), Неопределено);
					СтроковыеФункцииКлиентСервер.СтрокаВДату(НайденноеЗначение);
				ИначеЕсли ИмяРеквизитаВБД = "Номенклатура" Тогда
					НоваяСтрока["Номенклатура"] = Номенклатура;
					Если ЭтоУслуга Тогда
						НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина);
						Если НайденноеЗначение <> Неопределено Тогда
							ОписаниеОбъекта = ДеревоРазбора.Строки.Найти(НайденноеЗначение, "ИндексСтроки", Истина).ОписаниеОбъекта;	
							НоваяСтрока["Содержание"] = ОписаниеОбъекта;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ИмяРеквизитаВБД = "СведенияОПрослеживаемости"
						И ЕстьКолонкаТаблицыЗначений(НоваяСтрока, "СведенияПрослеживаемости") Тогда
					НоваяСтрока.СведенияПрослеживаемости = ТекСтрока.ЗначениеРеквизита;
				ИначеЕсли ИмяРеквизитаВБД = "Страна" Тогда
					ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(Неопределено, ТекСтрока.ЗначениеРеквизита);
					НоваяСтрока.СтранаПроисхождения = ?(ДанныеСтраны = Неопределено, Неопределено, ДанныеСтраны.Ссылка);
				ИначеЕсли КолонкиТаблицы.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
			КонецЦикла;
			
			Покупатель = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
			Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
				ИндексСтроки = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Покупатель");
				// В электронном документе в строке может быть не указаны данные контрагента,
				// поэтому заполним покупателя только если они есть. Если нет - пользователю нужно будет заполнить контрагента вручную.
				Если ИндексСтроки <> Неопределено Тогда
					СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
					Если СтрокаКонтрагента <> Неопределено Тогда
						Покупатель = ЭлектронноеВзаимодействиеБП.НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Покупатель = Покупатель;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	ДанныеЗаполненияШапки.Вставить("СуммаВключаетНДС",ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("СтавкаНДСВознаграждения", ПолучитьСтавкуНДСПеречислением(ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтавкаНДСВознаграждения")));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		КонецЕсли;
		ПодготовитьСведенияОПрослеживаемостиДляОтчетаКомиссионера(СведенияПрослеживаемости, ТекСтрока);
	КонецЦикла;
	
	// получение данных о покупателях
	ТаблицаПокупателей = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Покупатели.ВыгрузитьКолонки();
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
	КонецЦикла;
	
	// установка ключа строки	
	ТаблицаПокупателей.Свернуть("Покупатель, ДатаСФ", "ВыставленСФ, КлючСтроки");
	Счетчик = 0;
	Для Каждого СтрокаПокупателя Из ТаблицаПокупателей Цикл
		Счетчик = Счетчик + 1;
		СтрокаПокупателя.КлючСтроки = Счетчик;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	
	// определяем, нужно ли перевыставлять счета-фактуры
	ПлательщикНДС = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "ПлательщикНДС", Истина);
	Если ЗначениеЗаполнено(ПлательщикНДС) И Булево(ПлательщикНДС) Тогда
		ТаблицаПокупателей.ЗаполнитьЗначения(Истина, "ВыставленСФ");
	КонецЕсли;
	
	// Заполняем табличную часть "Денежные средства"
	ТаблицаДС = Новый ТаблицаЗначений;
	ТаблицаДС.Колонки.Добавить("ВидОтчетаПоПлатежам");
	ТаблицаДС.Колонки.Добавить("Сумма");
	ТаблицаДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаДС.Колонки.Добавить("СуммаНДС");
	ТаблицаДС.Колонки.Добавить("Покупатель");
	ТаблицаДС.Колонки.Добавить("ДатаСобытия");
	ДанныеДССтрокой = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "ДенежныеСредства", Истина);
	Если ЗначениеЗаполнено(ДанныеДССтрокой) Тогда
		ДенежныеСредстваДанные = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеДССтрокой);
		СоответствиеСтавокНДС = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		Для Каждого СтрокаДанных Из ДенежныеСредстваДанные Цикл
			СтрокаДС = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДС, СтрокаДанных,, "ВидОтчетаПоПлатежам, СтавкаНДС, Покупатель, Сумма");
			
			// Необходимо просуммировать, т.к. в отчете комитенту поле Сумма содержит сумму без НДС,
			// а в отчете комиссионера поле Сумма содержит сумму с НДС.
			СтрокаДС.Сумма = СтрокаДанных.Сумма + СтрокаДанных.СуммаНДС;
			Если СтрокаДанных.ВидОтчетаПоПлатежам = "Аванс" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс;
			ИначеЕсли СтрокаДанных.ВидОтчетаПоПлатежам = "Оплата" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата;
			ИначеЕсли СтрокаДанных.ВидОтчетаПоПлатежам = "ЗачетАванса" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.СтавкаНДС) Тогда
				СтрокаДС.СтавкаНДС = СоответствиеСтавокНДС[СтрокаДанных.СтавкаНДС];
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.Покупатель) Тогда
				СтрокаДС.Покупатель = ПолучитьСоздатьКонтрагента(СтрокаДанных.Покупатель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если по ИНН и КПП организация не найдена, то возможно:
	//  - у организации изменился КПП (нужно проверить историю изменений КПП)
	//  - организация является обособленным подразделением в справочнике "Подразделения организаций"
	//    (необходимо найти головную организацию и подразделение, и подставить в документ учета).
	Если Не (ДанныеЗаполненияШапки.Свойство("Организация")
			И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация)) Тогда
		ДанныеОрганизации = ДеревоРазбора.Строки.Найти("Организации", "ТипОбъекта", Истина);
		ИННОрганизации = ПолучитьЗначениеРеквизита(ДанныеОрганизации, "ИНН", Истина);
		КППОрганизации = ПолучитьЗначениеРеквизита(ДанныеОрганизации, "КПП", Истина);
		НайтиОрганизациюПоДаннымЭДCML(ДанныеЗаполненияШапки, ИННОрганизации, КППОрганизации);
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка",                    ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",                   ТаблицаТоваров);
	ДанныеДляОбъекта.Вставить("Услуги",                   ТаблицаУслуг);
	ДанныеДляОбъекта.Вставить("Покупатели",               ТаблицаПокупателей);
	ДанныеДляОбъекта.Вставить("ДенежныеСредства",         ТаблицаДС);
	ДанныеДляОбъекта.Вставить("СведенияПрослеживаемости", СведенияПрослеживаемости);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Процедура ДобавитьДанныеОтчетаКомитентуВДопДанные(ДеревоДанных, ДанныеДляФормированияЭД)
	
	ДокументОснование = Неопределено;
	Если ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования) = Тип("Массив")
			И ДанныеДляФормированияЭД.ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДанныеДляФормированияЭД.ДокументыОснования[0];
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = ДанныеДляФормированияЭД.СчетФактура;
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование,
		"НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	ПутьВДереве = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
	
	ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "НомерОтчетаКомитенту",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаОснования.НомерВходящегоДокумента, Истина, Ложь), ПутьВДереве);
		
	ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ДатаОтчетаКомитенту",
		Формат(РеквизитыДокументаОснования.ДатаВходящегоДокумента, "ДФ=yyyy-MM-dd"), ПутьВДереве);
	
КонецПроцедуры

// Подготавливает структуру данных контрагента к отправке в составе ЭД, оставляет в структуре данных только простые типы.
//
// Параметры:
//  Контрагент	 - СправочникСсылка.Контрагенты - контрагент, по данные которого нужно подготовить
//  ДатаСведений - Дата - дата на которую нужно получить данные
// 
// Возвращаемое значение:
//  Структура - структура данных контрагента, подготовленный к отправке
//
Функция ДанныеКонтрагентаСтруктурой(Контрагент, ДатаСведений = Неопределено)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеКонтрагента = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСведений);
	Результат = Новый Структура;
	Если ДанныеКонтрагента.Свойство("ЮридическоеФизическоеЛицо")
		И ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Результат.Вставить("ЮридическоеФизическоеЛицо", "ФЛ");
	Иначе
		Результат.Вставить("ЮридическоеФизическоеЛицо", "ЮЛ");
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("СтранаРегистрации")
		И ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации) Тогда
		
		Результат.Вставить("КодСтраныРегистрации",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.СтранаРегистрации, "Код"));
			
	КонецЕсли;
	
	// оставим только простые типы к передаче в составе ЭД
	Для Каждого ЭлементСтруктуры Из ДанныеКонтрагента Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Строка")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Число")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Булево")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Дата") Тогда
			
			Результат.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит поиск контрагента по ИНН и КПП. Создает нового контрагента, если не находит.
//
// Параметры:
//  ДанныеКонтрагента	 - Структура - данные контрагента
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - ссылка на найденного или созданного контрагента
//
Функция ПолучитьСоздатьКонтрагента(ДанныеКонтрагента)
	
	Если ТипЗнч(ДанныеКонтрагента) <> Тип("Структура") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИНН = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ИНН");
	КПП = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "КПП");
	
	КонтрагентСсылка = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда // если в ИБ уже есть такой контрагент, не создаем новый и не редактируем существующий
		
		Возврат КонтрагентСсылка;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		Если ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЮридическоеФизическоеЛицо") = "ФЛ" Тогда
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		
		КонтрагентОбъект.Наименование			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СокращенноеНаименование");
		КонтрагентОбъект.НаименованиеПолное		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ПолноеНаименование");
		КонтрагентОбъект.ИНН					 = ИНН;
		КонтрагентОбъект.КПП					 = КПП;
		КонтрагентОбъект.РегистрационныйНомер	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ОГРН");
		
		// ИП
		КонтрагентОбъект.СвидетельствоСерияНомер		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СвидетельствоСерияНомер");
		КонтрагентОбъект.СвидетельствоДатаВыдачи		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СвидетельствоДатаВыдачи");
		КонтрагентОбъект.ДокументУдостоверяющийЛичность = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ДокументУдостоверяющийЛичность");
		
		// Страна регистрации
		КодСтраныРегистрации = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "КодСтраныРегистрации");
		Если ЗначениеЗаполнено(КодСтраныРегистрации) Тогда
			
			КонтрагентОбъект.СтранаРегистрации = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(
				КодСтраныРегистрации);
			
		КонецЕсли;
		
		// Контактная информация
		ЮрАдрес			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначениеЮридическийАдрес");
		ФактАдрес		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначениеФактическийАдрес");
		ПочтовыйАдрес	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначениеПочтовыйАдрес");
		Телефон			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "Телефоны");
		АдресЭП			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "Email");
		Если ЗначениеЗаполнено(ЮрАдрес) Тогда
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
				ЮрАдрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ФактАдрес) Тогда
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
				ФактАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ПочтовыйАдрес) Тогда
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
				ПочтовыйАдрес, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Телефон) Тогда
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
				Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресЭП) Тогда
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
				АдресЭП, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
			
		КонецЕсли;
		
		// Банковский счет
		БИК				 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "БИК");
		НомерСчета		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "НомерСчета");
		БанковскийСчет	 = Неопределено;
		Если ЗначениеЗаполнено(НомерСчета) И ЗначениеЗаполнено(БИК) Тогда
			
			Банк = Справочники.Банки.СсылкаНаБанк(БИК);
			Если Не ЗначениеЗаполнено(Банк) Тогда
				
				БанкИзКлассификатора = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
				Если ЗначениеЗаполнено(БанкИзКлассификатора) Тогда
					
					РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанкИзКлассификатора));
					
					// РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора() возвращает массив, содержащий кроме ссылок на банк группы банков,
					// поэтому проще использовать Справочники.Банки.СсылкаНаБанк()
					Банк = Справочники.Банки.СсылкаНаБанк(БИК);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Банк) Тогда
				
				КонтрагентОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.УстановитьСсылкуНового(КонтрагентОбъект.ОсновнойБанковскийСчет);
				БанковскийСчет.Банк			 = Банк;
				БанковскийСчет.НомерСчета	 = НомерСчета;
				БанковскийСчет.Наименование	 = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(БанковскийСчет, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование"));
				Если БанковскиеПравила.ЭтоРублевыйСчет(НомерСчета) Тогда
					
					БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
					БанковскийСчет.Валютный = Ложь;
					
				Иначе
					
					КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(НомерСчета);
					БанковскийСчет.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
					БанковскийСчет.Валютный = Истина;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		КонтрагентОбъект.Записать();
		КонтрагентСсылка = КонтрагентОбъект.Ссылка;
		Если БанковскийСчет <> Неопределено Тогда
			
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат КонтрагентСсылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСвойствоСтруктуры(ДанныеСтруктуры, СвойствоСтруктуры)
	
	Если ДанныеСтруктуры.Свойство(СвойствоСтруктуры) Тогда
		
		Возврат ДанныеСтруктуры[СвойствоСтруктуры];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

Функция НайтиРеализациюТоваровУслуг(Организация, НомерДокумента, ДатаДокумента)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.СчетФактураВыданный)
	|			ТОГДА ДанныеПервичныхДокументов.Документ.ДокументОснование
	|		ИНАЧЕ ДанныеПервичныхДокументов.Документ
	|	КОНЕЦ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер = &НомерДокумента
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И (ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.РеализацияТоваровУслуг)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.СчетФактураВыданный))";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АктПриемкиВыполненныхСтроительныхРабот

Функция ДанныеУчастникаАктаПриемкиРабот(Участник, КонструкторЭД, ДатаСведений, БанковскийСчет = Неопределено)
	
	СведенияОбУчастнике = ОбменСКонтрагентамиБППовтИсп.ПолучитьДанныеЮрФизЛица(Участник, ДатаСведений, БанковскийСчет);
	
	ДанныеУчастника = КонструкторЭД.НоваяСторонаДоговораПодряда();
	ДанныеУчастника.КодОКПО         = СведенияОбУчастнике.КодПоОКПО;
	ДанныеУчастника.КраткоеНазвание = СведенияОбУчастнике.СокращенноеНаименование;
	
	СведенияОЛице = Неопределено;
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОбИностраннойОрганизации();
		СведенияОЛице.Наименование = СведенияОбУчастнике.ПолноеНаименование;
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОбОрганизации();
		СведенияОЛице.ИНН          = СведенияОбУчастнике.ИНН;
		СведенияОЛице.КПП          = СведенияОбУчастнике.КПП;
		СведенияОЛице.Наименование = СведенияОбУчастнике.ПолноеНаименование;
	Иначе
		Если СведенияОбУчастнике.ЭтоИндивидуальныйПредприниматель Тогда
			СведенияОЛице = КонструкторЭД.НовыеСведенияОПредпринимателе();
			СведенияОЛице.ОГРН = СведенияОбУчастнике.ОГРН;
		Иначе
			СведенияОЛице = КонструкторЭД.НовыеСведенияОФизическомЛице();
		КонецЕсли;
		СведенияОЛице.ИНН = СведенияОбУчастнике.ИНН;
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		СведенияОЛице.ФИО = КонструкторЭД.НовыеФИО(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
	КонецЕсли;
	ДанныеУчастника.СведенияОЛице = СведенияОЛице;
	
	Если СведенияОбУчастнике.Свойство("ОбособленноеПодразделениеОрганизации")
			И ЗначениеЗаполнено(СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации) Тогда
		Компания = СведенияОбУчастнике.ОбособленноеПодразделениеОрганизации;
	Иначе
		Компания = СведенияОбУчастнике.ЮрФизЛицоСсылка;
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, Компания, "Юр", ДатаСведений);
	Если СведенияОбУчастнике.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		ДанныеУчастника.Адрес = КонструкторЭД.НовыйАдресРФ();
		ЗаполнитьЗначенияСвойств(ДанныеУчастника.Адрес, АдресУчастника);
	Иначе
		ДанныеУчастника.Адрес = КонструкторЭД.НовыйАдресВСвободнойФорме(АдресУчастника.КодСтраны, АдресУчастника.АдресТекст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ДанныеУчастника.НомераТелефонов.Добавить(СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Email) Тогда
		ДанныеУчастника.АдресаЭлектроннойПочты.Добавить(СведенияОбУчастнике.Email);
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("НомерСчета") И ЗначениеЗаполнено(СведенияОбУчастнике.НомерСчета) Тогда
		БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
		БанковскиеРеквизиты.БИК                   = СведенияОбУчастнике.БИК;
		БанковскиеРеквизиты.Наименование          = СведенияОбУчастнике.Банк;
		БанковскиеРеквизиты.НомерСчета            = СведенияОбУчастнике.НомерСчета;
		БанковскиеРеквизиты.КорреспондентскийСчет = СведенияОбУчастнике.КоррСчет;
		ДанныеУчастника.БанковскиеРеквизиты = БанковскиеРеквизиты;
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("ПодразделениеОрганизации") Тогда
		ДанныеУчастника.СтруктурноеПодразделение = СведенияОбУчастнике.ПодразделениеОрганизации;
	КонецЕсли;
	
	Возврат ДанныеУчастника;
	
КонецФункции

Функция ПодготовитьДанныеПоВходящемуАктуОПриемкеСтроительныхРабот(КонструкторЭД, ОписаниеОшибки)
	
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	ВалютаЭД = ИнформацияПодрядчика.Валюта;
	Валюта = НайтиСсылкуНаОбъект("Валюты", ВалютаЭД.Код);
	ДанныеОбъекта.Вставить("ВалютаДокумента",         Валюта);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов",      ВалютаЭД.Курс);
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	ДанныеОбъекта.Вставить("ВидОперацииЭД",           Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
	ДанныеОбъекта.Вставить("СуммаВключаетНДС",        Ложь);
	ДанныеОбъекта.Вставить("Корректировка",           Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ИнформацияПодрядчика.НомерАкта);
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ИнформацияПодрядчика.ДатаАкта);
	ДанныеОбъекта.Вставить("Исправление",             Ложь);
	
	НайтиОрганизациюПоДаннымАктаОПриемкеРабот(ДанныеОбъекта, ИнформацияПодрядчика, ОписаниеОшибки);
	
	ДанныеОбъекта.Вставить("Контрагент",               КонтрагентПоДаннымАктаОПриемкеРабот(ИнформацияПодрядчика));
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	НастройкиДокумента = ИнформацияПодрядчика.НастройкиДокумента;
	НДСТолькоВИтогах = (НастройкиДокумента.СпособРасчетаНДС = КонструкторЭД.СпособыРасчетаНДС().ТолькоВИтогах);
	
	ТаблицаРаспределения = РаспределенныйНДСПоРазделам(ИнформацияПодрядчика.ВыполненныеРаботы,
		ИнформацияПодрядчика.Итоги, НДСТолькоВИтогах);
	Индекс = 0;
	Если АктПриемкиСодержитРазделы(ИнформацияПодрядчика.ВыполненныеРаботы) Тогда
		Для Каждого СтрокаРаботы Из ИнформацияПодрядчика.ВыполненныеРаботы Цикл	
			НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("ИндексРаздела", Индекс));
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
					НоваяСтрока.Номенклатура = СтрокаРаботы.Сопоставление.Номенклатура;
					НоваяСтрока.Сумма        = НайденнаяСтрока.Сумма;
					НоваяСтрока.СуммаНДС     = НайденнаяСтрока.СуммаНДС;
					НоваяСтрока.СтавкаНДС    = ПолучитьСтавкуНДСПеречислением(НайденнаяСтрока.СтавкаНДС);
					НоваяСтрока.Содержание   = СтрокаРаботы.Наименование;
				КонецЦикла;
			Иначе
				НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРаботы.Сопоставление.Номенклатура;
				НоваяСтрока.Сумма        = СтрокаРаботы.Сумма;
				НоваяСтрока.СуммаНДС     = СтрокаРаботы.СуммаНДС;
				НоваяСтрока.Содержание   = СтрокаРаботы.Наименование;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе // ЭД не содержит в табличной части разделов, только расшифровка по работам и материалам
		Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
			НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
			НоваяСтрока.Сумма      = СтрокаТаблицы.Сумма;
			НоваяСтрока.СуммаНДС   = СтрокаТаблицы.СуммаНДС;
			НоваяСтрока.СтавкаНДС  = ПолучитьСтавкуНДСПеречислением(СтрокаТаблицы.СтавкаНДС);
			НоваяСтрока.Содержание = НСтр("ru = 'Строительные работы'");
		КонецЦикла;
	КонецЕсли;
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка",                 ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция РаспределенныйНДСПоРазделам(ДанныеТабличнойЧасти, Итоги, НДСТолькоВИтогах)
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("ИндексРаздела");
	ТаблицаРаспределения.Колонки.Добавить("СтавкаНДС");
	ТаблицаРаспределения.Колонки.Добавить("Сумма");
	ТаблицаРаспределения.Колонки.Добавить("СуммаНДС");
	
	СуммаНДСВРазбивкеПоСтавкам = Итоги.ОтчетныйПериод.НалогиПоСтавкам;
	
	ИндексРаздела = 0;
	Если АктПриемкиСодержитРазделы(ДанныеТабличнойЧасти) Тогда
		Для Каждого Раздел Из ДанныеТабличнойЧасти Цикл
			Для Каждого ВыполненнаяРабота Из Раздел.ВыполненныеРаботы Цикл
				СтрокаРаспределения = ТаблицаРаспределения.Добавить();
				СтрокаРаспределения.ИндексРаздела = ИндексРаздела;
				СтрокаРаспределения.СтавкаНДС     = ВыполненнаяРабота.СтавкаНДС;
				СтрокаРаспределения.Сумма         = ВыполненнаяРабота.Сумма;
				СтрокаРаспределения.СуммаНДС      = ВыполненнаяРабота.СуммаНДС;
			КонецЦикла;
			ИндексРаздела = ИндексРаздела + 1;
		КонецЦикла;
	Иначе
		Для Каждого ВыполненнаяРабота Из ДанныеТабличнойЧасти Цикл
			СтрокаРаспределения = ТаблицаРаспределения.Добавить();
			СтрокаРаспределения.ИндексРаздела = ИндексРаздела;
			СтрокаРаспределения.СтавкаНДС     = ВыполненнаяРабота.СтавкаНДС;
			СтрокаРаспределения.Сумма         = ВыполненнаяРабота.Сумма;
			СтрокаРаспределения.СуммаНДС      = ВыполненнаяРабота.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ТаблицаРаспределения.Свернуть("ИндексРаздела, СтавкаНДС", "Сумма, СуммаНДС");
	
	Если НДСТолькоВИтогах Тогда
		Для Каждого ЭлементСоответствия Из СуммаНДСВРазбивкеПоСтавкам Цикл
			НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("СтавкаНДС", ЭлементСоответствия.Ключ));
			Коэффициенты = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Коэффициенты.Добавить(НайденнаяСтрока.Сумма);
			КонецЦикла;
			РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ЭлементСоответствия.Значение.Сумма, Коэффициенты, 2);
			Если ЗначениеЗаполнено(РаспределенныеСуммы) Тогда
				Для Индекс = 0 По РаспределенныеСуммы.ВГраница() Цикл
					НайденныеСтроки[Индекс].СуммаНДС = РаспределенныеСуммы[Индекс];
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРаспределения;
	
КонецФункции

Функция АктПриемкиСодержитРазделы(ВыполненныеРаботы)
	
	Если ЗначениеЗаполнено(ВыполненныеРаботы)
			И ТипЗнч(ВыполненныеРаботы[0]) = Тип("ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеРазделов") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура НайтиОрганизациюПоДаннымАктаОПриемкеРабот(ДанныеОбъекта, ДанныеЭД, ОписаниеОшибки = "")
	
	ДанныеЗаказчика = ДанныеЭД.Заказчик.СведенияОЛице;
	ЭтоЮридичекоеЛицо = ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ДанныеЗаказчика.ИНН);
	ИНН = ДанныеЗаказчика.ИНН;
	КПП = ДанныеЗаказчика.КПП;
	Если ЭтоЮридичекоеЛицо Тогда
		ОрганизацияПодразделение = ОрганизацияПоДаннымЭД_ЮЛ(ИНН, КПП, ДанныеЭД.ДатаАкта);
	Иначе
		ОрганизацияПодразделение = ОрганизацияПоДаннымЭД_ФЛ(ИНН);
	КонецЕсли;
	
	// Если организация не найдена, то вызываем исключение и не создаем документ ИБ на основании ЭД.
	Если Не ЗначениеЗаполнено(ОрганизацияПодразделение.Организация) Тогда
		Если ЗначениеЗаполнено(КПП) Тогда
			Шаблон = НСтр("ru = 'Не удалось создать документ, организация с ИНН/КПП %1/%2 не найдена'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН, КПП);
		Иначе
			Шаблон = НСтр("ru = 'Не удалось создать документ, организация с ИНН %1 не найдена'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИНН);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПодразделение.Организация);
	Если ЗначениеЗаполнено(ОрганизацияПодразделение.ПодразделениеОрганизации) Тогда
		ДанныеОбъекта.Вставить("ПодразделениеОрганизации", ОрганизацияПодразделение.ПодразделениеОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентПоДаннымАктаОПриемкеРабот(ДанныеЭД)
	
	ДанныеПодрядчика = ДанныеЭД.Подрядчик.СведенияОЛице;
	ЭтоЮридичекоеЛицо = ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ДанныеПодрядчика.ИНН);
	ИНН = ДанныеПодрядчика.ИНН;
	КПП = ДанныеПодрядчика.КПП;
	ДатаСведений = ДанныеЭД.ДатаАкта;
	Контрагент = Неопределено;
	Если ЭтоЮридичекоеЛицо Тогда
		Контрагент = КонтрагентПоДаннымЭД_ЮЛ(ИНН, КПП, ДатаСведений);
	ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
		Контрагент = КонтрагентПоДаннымЭД_ФЛ(ИНН);
	Иначе
		Контрагент = КонтрагентПоДаннымЭД_ПоНаименованию(ДанныеПодрядчика.Наименование);
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

#КонецОбласти

#Область ДоговорныйДокумент

Функция ОрганизацияПоДаннымДоговорногоДокумента101(Данные, ТипыСторон)
	
	Организация = Неопределено;
	
	Если ТипЗнч(Данные) = ТипыСторон.Предприниматель Тогда
		
		ИНН = Данные.ИНН;
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ИностранноеЛицо Тогда

		НаименованиеПолное = Данные.НаименованиеПолное;
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.Организация Тогда
		
		ИНН = Данные.ИНН;
		Если Данные.КПП.Количество() > 0 Тогда
			КПП = Данные.КПП[0];
		Иначе
			КПП = "";
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ФизическоеЛицо Тогда

		ИНН = Данные.ИНН;
		ФИО = Данные.ФИО;
		ПолноеНаименование = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество, Ложь);

		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации.ИНН = &ИНН",
					"Организации.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымДоговорногоДокумента101(Данные, ТипыСторон, ДатаСведений)
	
	Контрагент = Неопределено;
	
	Если ТипЗнч(Данные) = ТипыСторон.Предприниматель Тогда
		ИНН = Данные.ИНН;
		Контрагент = КонтрагентПоДаннымЭД_ФЛ(ИНН);
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ИностранноеЛицо Тогда
		НаименованиеПолное = Данные.НаименованиеПолное;
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Контрагент = КонтрагентПоДаннымЭД_ПоНаименованию(НаименованиеПолное);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.Организация Тогда
		ИНН = Данные.ИНН;
		Если Данные.КПП.Количество() > 0 Тогда
			КПП = Данные.КПП[0];
		Иначе
			КПП = "";
		КонецЕсли;
		Контрагент = КонтрагентПоДаннымЭД_ЮЛ(ИНН, КПП, ДатаСведений);
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ФизическоеЛицо Тогда
		ИНН = Данные.ИНН;  
		ФИО = Данные.ФИО;
		ПолноеНаименование = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество, Ложь);
		Если ЗначениеЗаполнено(ИНН) Тогда
			Контрагент = КонтрагентПоДаннымЭД_ФЛ(ИНН);
		ИначеЕсли ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Контрагент = КонтрагентПоДаннымЭД_ПоНаименованию(ПолноеНаименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Контрагент;

КонецФункции
 
Процедура ЗаписатьСправочник(СправочникОбъект)
		
	Если СправочникОбъект.ЭтоНовый() И СправочникОбъект.ПроверитьЗаполнение() Тогда
		СправочникОбъект.ОбменДанными.Загрузка = Ложь;
	Иначе
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	СправочникОбъект.Записать();

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовИБ

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДокумента, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДанныеДокумента.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если Документ.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
		ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерИсходногоДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
		ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
		Если ДанныеЗаполнения.УчитыватьИсправлениеИсходногоДокумента Тогда
			ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступления = ДокументОбъект.ДокументПоступления;
	Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДокументПоступления = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Заполненим корректировку поступления данными основания
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументОбъект.Заполнить(ДокументПоступления);
	КонецЕсли;
	
	// Заполним табличные части данными корректировки
	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
			"Количество, Цена, Сумма, СуммаНДС, НомерГТД, СтранаПроисхождения", 
			"Количество, Цена, Сумма, СуммаНДС, Содержание");
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги", "", "");
	Иначе
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения", 
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	КонецЕсли;
	
	ДанныеТабличныхЧастей = ДанныеДокумента.ДанныеТабличныхЧастей;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Ключ;
		
		СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
		
		Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
			РезультатПоискаДанныхЗаполнения = ДанныеТабличныхЧастей[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			Если РезультатПоискаДанныхЗаполнения.Количество() > 0 Тогда
				СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
				
				// В регламенте УКД нет данных о стране происхождения, поэтому заполним данными документа поступления.
				Если СтрНайти(СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ], "СтранаПроисхождения") > 0 Тогда
					СтрокаДокумента.СтранаПроисхождения = СтрокаДокумента.СтранаПроисхожденияДоИзменения;
				КонецЕсли;
				
				// Удалим обработанную строку из данных заполнения
				ДанныеТабличныхЧастей[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
			КонецЕсли;
		КонецЦикла;
		
		// Добавим новые строки в документ
		Если ДанныеТабличныхЧастей[ИмяТЧ].Количество() > 0 Тогда
			Для Каждого СтрокаДанныхЗаполнения Из ДанныеТабличныхЧастей[ИмяТЧ] Цикл
				НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения,, СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	
	ЗаполнитьСведенияОПрослеживаемостиВДокументеИБ_УКД(ДокументОбъект.СведенияПрослеживаемости,
		ДанныеТабличныхЧастей.СведенияПрослеживаемости, ДокументОбъект.Товары);
	
	ДокументОбъект.ЭтоУниверсальныйДокумент = Ложь;
	УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДокумента);
	
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументВозвратТоваровПоставщику(Документ, ДанныеДокумента, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		// Пользователем может быть уже создан документ "Возврат товаров поставщику",
		// поэтому перед созданием поищем его по основанию, номенклатуре и количеству.
		СозданныйПользователемДокумент = СозданныйПользователемВозвратПоставщику(ДанныеДокумента);
		Если СозданныйПользователемДокумент = Неопределено Тогда
			ДокументОбъект = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки, Истина);
			
			ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
		Иначе
			ДокументОбъект = СозданныйПользователемДокумент.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда 
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДокументаПоступления = Новый Структура("ДоговорКонтрагента, Склад");
	Если Не ЗначениеЗаполнено(ДокументОбъект.Сделка) И ДанныеШапки.Свойство("Основание") Тогда
		ДокументОбъект.Сделка = ДанныеШапки.Основание;
		Если ТипЗнч(ДанныеШапки.Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ДанныеДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Сделка, "ДоговорКонтрагента, Склад");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеДокументаПоступления);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
			ДокументОбъект.Контрагент, ДокументОбъект.Организация);
	КонецЕсли;
	ДокументОбъект.КорректировочныйСчетФактураПолученОтПоставщика = Истина;
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого Строка Из ДанныеДокумента.Товары Цикл
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, Строка);
	КонецЦикла;
	ДокументОбъект.СведенияПрослеживаемости.Загрузить(ДанныеДокумента.СведенияПрослеживаемости);
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	ДокументОбъект.НДСВключенВСтоимость = Ложь;
	ДокументОбъект.ДокументБезНДС       = Ложь;
	
	УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДокумента);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДокумента, СпособОбработки = Неопределено, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ДокументИнформационнойБазыСоздан(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel") И Булево(ДанныеШапки.ЗагрузкаИзФайлаExcel) 
				И ЗначениеЗаполнено(ДанныеШапки.Дата) Тогда
			ДокументОбъект.Дата = ДанныеШапки.Дата;
		Иначе
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	ДокументОбъект.ВидОперации = ВидОперацииДокументаПоступления(ДанныеДокумента, СпособОбработки);
	
	// При перезаполнении договор не должен меняться, т.к. пользователь мог заполнить его вручную.
	Если Не ДокументИнформационнойБазыСоздан(Документ) Тогда
		УстановитьДоговорДокументаПоступления(ДокументОбъект, ДанныеДокумента);
	КонецЕсли;
	
	ДополнительныеПараметры = ДополнительныеПараметрыДляЗаполненияДокументаПоступления(ДокументОбъект);
	
	ДанныеТабличныхЧастей = ДанныеДокумента.ДанныеТабличныхЧастей;

	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.Товары Цикл
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если ДополнительныеПараметры.РассчитыватьСуммаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТЧ, ДокументОбъект, ДокументОбъект.Метаданные());
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТЧ.СтавкаНДСВРознице = ?(ДополнительныеПараметры.ПлательщикНДС, СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
		
		СтрокаТЧ.ОтражениеВУСН = ДополнительныеПараметры.ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Услуги.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.Услуги Цикл
		СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		СтрокаТЧ.ОтражениеВУСН = ДополнительныеПараметры.ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ВозвратнаяТара.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.ВозвратнаяТара Цикл
		СтрокаТЧ = ДокументОбъект.ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
	КонецЦикла;
	
	ДокументОбъект.Оборудование.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.Оборудование Цикл
		СтрокаТЧ = ДокументОбъект.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Топливо.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.Топливо Цикл
		СтрокаТЧ = ДокументОбъект.Топливо.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ОсновныеСредства.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.ОсновныеСредства Цикл
		СтрокаТЧ = ДокументОбъект.ОсновныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ОбъектыСтроительства.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.ОбъектыСтроительства Цикл
		СтрокаТЧ = ДокументОбъект.ОбъектыСтроительства.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	 
	ДокументОбъект.СведенияПрослеживаемости.Загрузить(ДанныеТабличныхЧастей.СведенияПрослеживаемости);
	
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
	УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДокумента);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	ПроверитьУстановитьСвязьЭТрН(ДокументОбъект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДокумента, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе// создаем новый
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДокумента);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		ДокументОбъект.ВидСчетаФактуры = ДанныеДокумента.ВидСчетаФактуры;
		ДокументОбъект.КодВидаОперации = ДанныеДокумента.КодВидаОперации;
	КонецЕсли;
	
	ОписаниеТиповДокументаОснования = ДокументОбъект.Метаданные().Реквизиты.ДокументОснование.Тип;
	ДокументОбъект.ДокументыОснования.Очистить();
	Для Каждого ДокументОснование Из ДанныеДокумента.ДокументыОснования Цикл
		Если Не (ЗначениеЗаполнено(ДокументОснование)
				И ОписаниеТиповДокументаОснования.СодержитТип(ТипЗнч(ДокументОснование))) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный")
				Или (ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
					И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	ДокументОбъект.ДокументОснование = ?(ДокументОбъект.ДокументыОснования.Количество()>0, ДокументОбъект.ДокументыОснования[0].ДокументОснование, Неопределено);
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			И ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
		СтатусыДокумента.СтатусОригиналаСФ = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокументОбъект.ДокументОснование, СтатусыДокумента);
	КонецЕсли;
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументОснование, "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ДокументОбъект.КодСпособаПолучения = 2;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДокумента.НомерВходящегоДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДокумента.ДатаВходящегоДокумента;
	ДокументОбъект.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
	ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
	Если ДанныеДокумента.Свойство("Исправление") Тогда
		ДокументОбъект.Исправление       = ДанныеДокумента.Исправление;
		ДокументОбъект.НомерИсправления  = ДанныеДокумента.НомерИсправления;
		ДокументОбъект.ДатаИсправления   = ДанныеДокумента.ДатаИсправления;
	КонецЕсли;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ДокументОбъект.ДокументыОснования.Количество()>0 Тогда
			ОснованиеСчетаФактуры = ДокументОбъект.ДокументыОснования[0];
			ОснованиеСчетаФактуры.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
			ОснованиеСчетаФактуры.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
			ОснованиеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента") И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента;
			ОснованиеСчетаФактуры.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
			ОснованиеСчетаФактуры.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
			ОснованиеСчетаФактуры.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
			ОснованиеСчетаФактуры.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
			
			Если ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента")
				И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента Тогда
				ОснованиеСчетаФактуры.НомерИсправленияИсходногоДокумента = ДанныеДокумента.НомерИсправленияИсходногоДокумента;
				ОснованиеСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ДанныеДокумента.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отражение вычета НДС по умолчанию
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументОбъект);
	ДокументОбъект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
	ДокументОбъект.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
	ДокументОбъект.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
	ДокументОбъект.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
	Если ДанныеДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ДокументОбъект.СуммаДокумента     = ?(ДанныеДокумента.СуммаУвеличение = Неопределено, 0, ДанныеДокумента.СуммаУвеличение)
											- ?(ДанныеДокумента.СуммаУменьшение = Неопределено, 0, ДанныеДокумента.СуммаУменьшение);
		ДокументОбъект.СуммаНДСДокумента     = ?(ДанныеДокумента.СуммаНДСУвеличение = Неопределено, 0, ДанныеДокумента.СуммаНДСУвеличение)
											- ?(ДанныеДокумента.СуммаНДСУменьшение = Неопределено, 0, ДанныеДокумента.СуммаНДСУменьшение);
	Иначе
		ДокументОбъект.СуммаДокумента     = ДанныеДокумента.СуммаДокумента;
		ДокументОбъект.СуммаНДСДокумента  = ДанныеДокумента.СуммаНДСДокумента;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("Авансы") Тогда
		ДокументОбъект.Авансы.Загрузить(ДанныеДокумента.Авансы);
	КонецЕсли;
	
	ЗаполнитьСчетаФактурыВыданныеПокупателям(ДокументОбъект, ДанныеДокумента);
	
	Если ДанныеДокумента.Свойство("Продавцы") Тогда
		ДокументОбъект.Продавцы.Загрузить(ДанныеДокумента.Продавцы);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("ОбособленноеПодразделениеКПП") Тогда
		ДокументОбъект.КППКонтрагента = ДанныеДокумента.ОбособленноеПодразделениеКПП;
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаФактурыВыданныеПокупателям(ДокументОбъект, ДанныеДокумента)

	Если Не (ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
		И ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Документы.СчетФактураПолученный.НовыйПараметрыЗапросаСчетовФактурВыданныхПокупателям();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДокументОбъект,, "Комитент, ДоговорКомитента");
	ПараметрыЗапроса.Комитент         = ДокументОбъект.Контрагент;
	ПараметрыЗапроса.ДоговорКомитента = ДокументОбъект.ДоговорКонтрагента;
	
	ТаблицаСчетаФактурыВыданныеПокупателям = Документы.СчетФактураПолученный.СчетаФактурыВыданныеПокупателям(ПараметрыЗапроса);
	
	Если ДанныеДокумента.ЭтоСводныйСчетФактура Тогда
		ДокументОбъект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);
	Иначе
		ПараметрыОтбора = Новый Структура;
		Если ДанныеДокумента.Свойство("Покупатель") И ЗначениеЗаполнено(ДанныеДокумента.Покупатель) Тогда
			ПараметрыОтбора.Вставить("Покупатель", ДанныеДокумента.Покупатель);
		КонецЕсли;
		ПараметрыОтбора.Вставить("Сумма", ДокументОбъект.СуммаДокумента);
		СчетаФактурыВыданныеПокупателю = ТаблицаСчетаФактурыВыданныеПокупателям.НайтиСтроки(ПараметрыОтбора);
		ДокументОбъект.СчетаФактурыВыданныеПокупателям.Очистить();
		Для Каждого СтрокаСчетаФактурыВыданныеПокупателю Из СчетаФактурыВыданныеПокупателю Цикл
			СтрокаТаблицыДокумента = ДокументОбъект.СчетаФактурыВыданныеПокупателям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, СтрокаСчетаФактурыВыданныеПокупателю);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоСФВыданныхПокупателю = ДокументОбъект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0 Тогда
		ДокументОбъект.СчетФактураВыданныйПокупателю = ДокументОбъект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Если КоличествоСФВыданныхПокупателю > 1 Тогда
			ДокументОбъект.КодВидаОперации = "27";
		Иначе
			ДокументОбъект.КодВидаОперации = "01";
		КонецЕсли;
	Иначе
		ДокументОбъект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументВозвратТоваровОтПокупателя(Документ, ДанныеДокумента, СпособОбработки, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ДокументИнформационнойБазыСоздан(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel") И Булево(ДанныеШапки.ЗагрузкаИзФайлаExcel) 
				И ЗначениеЗаполнено(ДанныеШапки.Дата) Тогда
			ДокументОбъект.Дата = ДанныеШапки.Дата;
		Иначе
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары;
	
	// При перезаполнении договор не должен меняться, т.к. пользователь мог заполнить его вручную.
	Если Не ДокументИнформационнойБазыСоздан(Документ) Тогда
		ОтборПоВалюте = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
			ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
	КонецЕсли;
		
	ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;
	ДокументОбъект.ПокупателюВыставляетсяКорректировочныйСчетФактура = Ложь;
	
	ДанныеТабличныхЧастей = ДанныеДокумента.ДанныеТабличныхЧастей;

	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеТабличныхЧастей.Товары Цикл
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	 
	ДокументОбъект.СведенияПрослеживаемости.Загрузить(ДанныеТабличныхЧастей.СведенияПрослеживаемости);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
	УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДокумента);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияДопРасходов(Документ, ДанныеДляЗаполнения, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеДляЗаполнения.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ДокументОбъект, Шапка, Истина);
	
	ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
		ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
	
	ДокументОбъект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	ДокументОбъект.НДСВключенВСтоимость = Ложь;
	ДокументОбъект.НДСНеВыделять = Ложь;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
	УстановитьДанныеДокументаПоДоговору(ДокументОбъект, ДанныеДляЗаполнения);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияИзПереработки(Документ, ДанныеДляЗаполнения, ОписаниеОшибки = "")
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Шапка = ДанныеДляЗаполнения.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеИзПереработки.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", Шапка.ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	
	Шапка.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Шапка.ДоговорКонтрагента,
		Шапка.Контрагент, Шапка.Организация, СписокВидовДоговоров, СтруктураПараметров);
	
	ДокументОбъект.Услуги.Загрузить(ДанныеДляЗаполнения.Услуги);
	
	ДокументОбъект.Заполнить(Шапка);
	
	ДокументОбъект.НДСВключенВСтоимость = Ложь;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Услуги");
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг()
	
	Результат = Новый Структура;
	
	ПоступлениеТоваровУслуг = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Результат.Вставить("Товары",                   ПоступлениеТоваровУслуг.Товары.ВыгрузитьКолонки());
	Результат.Вставить("Услуги",                   ПоступлениеТоваровУслуг.Услуги.ВыгрузитьКолонки());
	Результат.Вставить("ВозвратнаяТара",           ПоступлениеТоваровУслуг.ВозвратнаяТара.ВыгрузитьКолонки());
	Результат.Вставить("СведенияПрослеживаемости", ПоступлениеТоваровУслуг.СведенияПрослеживаемости.ВыгрузитьКолонки());
	Результат.Вставить("ШтрихкодыУпаковок",        ПоступлениеТоваровУслуг.ШтрихкодыУпаковок.ВыгрузитьКолонки());
	Результат.Вставить("Оборудование",             ПоступлениеТоваровУслуг.Оборудование.ВыгрузитьКолонки());
	Результат.Вставить("Топливо",                  ПоступлениеТоваровУслуг.Топливо.ВыгрузитьКолонки());
	Результат.Вставить("ОсновныеСредства",         ПоступлениеТоваровУслуг.ОсновныеСредства.ВыгрузитьКолонки());
	Результат.Вставить("ОбъектыСтроительства",     ПоступлениеТоваровУслуг.ОбъектыСтроительства.ВыгрузитьКолонки());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеТабличныхЧастейКорректировкиПоступления()
	
	Результат = Новый Структура;
	
	КорректировкаПоступления = Документы.КорректировкаПоступления.ПустаяСсылка();
	Результат.Вставить("Товары",                   КорректировкаПоступления.Товары.ВыгрузитьКолонки());
	Результат.Вставить("Услуги",                   КорректировкаПоступления.Услуги.ВыгрузитьКолонки());
	Результат.Вставить("СведенияПрослеживаемости", КорректировкаПоступления.СведенияПрослеживаемости.ВыгрузитьКолонки());
	Результат.Вставить("ШтрихкодыУпаковок",        КорректировкаПоступления.ШтрихкодыУпаковок.ВыгрузитьКолонки());
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора, ЦенаВключаетНДС = Ложь)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	ЕстьРеквизитСопоставление = Ложь;
	СтрокаДереваНоменклатура  = Неопределено;
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		КонецЕсли;
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Сопоставление") Тогда
			ЕстьРеквизитСопоставление = Истина;
			Сопоставление = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Номенклатура") Тогда
			СтрокаДереваНоменклатура = ТекСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьРеквизитСопоставление И СтрокаДереваНоменклатура <> Неопределено Тогда
		ПолучитьНоменклатуруПоКонтрагентуИИдентификатору(ДанныеДляЗаполненияСтрокиТЧ, СтрокаДереваНоменклатура, ДеревоРазбора);
	КонецЕсли;
	
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("СуммаСНДС") И ЦенаВключаетНДС Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС;
	КонецЕсли;
	
	ЗаполняемСтавкуНДС = 0;
	ДанныеДляРасчетаСтавки = Новый Структура("СтавкаНДС, СуммаНДС, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаСтавки, ДанныеДляЗаполненияСтрокиТЧ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СуммаНДС) 
			И ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.Сумма) Тогда
			//Определим ставку НДС расчетным путем
			ЗначениеСтавки = ОКР(ДанныеДляРасчетаСтавки.СуммаНДС / ДанныеДляРасчетаСтавки.Сумма,2);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("СтавкаНДС", ПолучитьСтавкуНДСПеречислением(ЗначениеСтавки));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание") И ДанныеДляЗаполненияСтрокиТЧ.Свойство("Наименование") Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ДанныеДляЗаполненияСтрокиТЧ.Наименование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СтруктураДляСопоставленияНоменклатурыЭД(Номенклатура, СтавкаНДС, Содержание = "", Владелец = Неопределено)

	Результат = Новый Структура("НоменклатураИБ, Наименование, Артикул, СтавкаНДС, ЕдиницаИзмерения, ЕдиницаИзмеренияКод,"
		+ "ШтрихкодКомбинации, ШтрихкодыНоменклатуры, Идентификатор");
	Если Не (ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
		"НаименованиеПолное, Артикул, ВидСтавкиНДС, Услуга, ЕдиницаИзмерения, ЕдиницаИзмерения.Наименование, ЕдиницаИзмерения.Код");
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Отбор = Новый Структура;
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(Номенклатура,, ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения);
		Отбор.Вставить("НоменклатураИБ", НоменклатураИБ);
		Отбор.Вставить("Владелец"      , Владелец);
		СоответствиеНоменклатуры = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор, Истина);
		Если СоответствиеНоменклатуры.Количество() > 0 Тогда
			Результат.Идентификатор = СоответствиеНоменклатуры[0].НоменклатураКонтрагента.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Результат.НоменклатураИБ = Номенклатура;
	Если ЗначенияРеквизитовНоменклатуры.Услуга И ЗначениеЗаполнено(Содержание) Тогда
		Результат.Наименование = Содержание;
	Иначе
		Результат.Наименование = ЗначенияРеквизитовНоменклатуры.НаименованиеПолное;
	КонецЕсли;
	Результат.Артикул = ЗначенияРеквизитовНоменклатуры.Артикул;
	
	Если ЗначениеЗаполнено(СтавкаНДС) И ТипЗнч(СтавкаНДС) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		Результат.СтавкаНДС = СтавкаНДС;
	ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС) Тогда
		Результат.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ЗначенияРеквизитовНоменклатуры.ВидСтавкиНДС,
			ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения) Тогда
		Результат.ЕдиницаИзмерения = ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияНаименование;
		Результат.ЕдиницаИзмеренияКод = ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияКод;
	КонецЕсли;
	
	Штрихкоды = ШтрихкодыНоменклатуры(Номенклатура);
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		Результат.ШтрихкодКомбинации = СокрЛП(Штрихкоды[0]);
		Результат.ШтрихкодыНоменклатуры = Штрихкоды;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницаИзмеренияПоДаннымКонтрагента(ЕдиницаИзмеренияКод, ЕдиницаИзмеренияНаименование)

	Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(
			ЕдиницаИзмеренияКод, Ложь);
	ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзмеренияНаименование) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(
			ЕдиницаИзмеренияНаименование, Истина);
	Иначе
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;

КонецФункции

Функция ВидСтавкиНДСПоДаннымКонтрагента(СтавкаНДССтрока)

	СтавкаНДС = ПолучитьСтавкуНДСПеречислением(СтавкаНДССтрока);
	ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	
	Возврат ВидСтавкиНДС;

КонецФункции

Функция ШтрихкодыНоменклатуры(Номенклатура) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса.Выгрузить(), "Штрихкод");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьНоменклатуруПоКонтрагентуИИдентификатору(ДанныеДляЗаполненияСтрокиТЧ, СтрокаДереваНоменклатура, ДеревоРазбора)
	
	СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(СтрокаДереваНоменклатура.ЗначениеРеквизита, "ИндексСтроки", Истина);
	ИдентификаторНоменклатуры = СтрокаНоменклатура.ИД;
	СтрокаКонтрагент = ДеревоРазбора.Строки.Найти("Контрагент", "Реквизит" ,Истина);
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаКонтрагент, "Контрагент", Истина, ДеревоРазбора);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Номенклатура = НоменклатураПоИдентификаторуИКонтрагенту(ИдентификаторНоменклатуры, Контрагент);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Номенклатура", Номенклатура);
		Иначе
			ИдентификаторНоменклатуры = ВРег(СтрЗаменить(ДанныеДляЗаполненияСтрокиТЧ.Наименование, " ", "")
				+ "##" + ДанныеДляЗаполненияСтрокиТЧ.ЕдиницаИзмеренияНаименование);
			Номенклатура = НоменклатураПоИдентификаторуИКонтрагенту(ИдентификаторНоменклатуры, Контрагент);
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("Номенклатура", Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НоменклатураПоИдентификаторуИКонтрагенту(Идентификатор, Контрагент)
	
	Результат = Неопределено;
	СтруктураПоискаНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			Контрагент, Идентификатор);
			
	МассивНайденнойНоменклатуры = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(
		Новый Структура("НоменклатураКонтрагента", СтруктураПоискаНоменклатуры), Истина);
		
	НайденныеДанные = ?(МассивНайденнойНоменклатуры.Количество() > 0,
		МассивНайденнойНоменклатуры[0].НоменклатураИБ, Неопределено);
		
	Если ТипЗнч(НайденныеДанные) = Тип("Структура") Тогда
		Результат = НайденныеДанные.Номенклатура;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Маркировка

Процедура ЗаполнитьСведенияОМаркировкеВАктеОРасхождениях(Приемник, Источник, ДанныеШтрихкодовУпаковок)
	
	Если ДанныеШтрихкодовУпаковок = Неопределено
		Или ДанныеШтрихкодовУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", Источник.Номенклатура);
	ПараметрыПоиска.Вставить("Обработан"   , Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Приемник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		
		Если (Количество <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИндивидуальныеУпаковки.Добавить();
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
	СведенияОМаркировке = Новый Структура;
	Если ИндивидуальныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ИндивидуальныеУпаковки);
	КонецЕсли;
	Приемник.Вставить("Маркировка", СведенияОМаркировке);
	
КонецПроцедуры

Процедура ПолучитьЗначенияШтрихкодов(Приемник, Источник)
	
	Маркировка = Неопределено;
	Если Не Источник.Свойство("Маркировка", Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Маркировка.Свойство("ИндивидуальныеУпаковки")
			И ТипЗнч(Маркировка.ИндивидуальныеУпаковки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы  Из Маркировка.ИндивидуальныеУпаковки Цикл
			Приемник.Добавить(СтрокаТаблицы.Код);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("КонтрольныеИдентификационныеЗнаки")
			И ТипЗнч(Маркировка.КонтрольныеИдентификационныеЗнаки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы  Из Маркировка.КонтрольныеИдентификационныеЗнаки Цикл
			Приемник.Добавить(СтрокаТаблицы.Код);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("ТранспортныеУпаковки")
			И ТипЗнч(Маркировка.ТранспортныеУпаковки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы  Из Маркировка.ТранспортныеУпаковки Цикл
			Приемник.Добавить(СтрокаТаблицы.Код);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодыУпаковок(ТаблицаШтрихкодыУпаковок, ЗначенияШтрихкодов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&ЗначенияШтрихкодов)";
	
	Запрос.УстановитьПараметр("ЗначенияШтрихкодов", ЗначенияШтрихкодов);
	ТаблицаШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркировкеВУКД(Приемник, Источник, ДанныеШтрихкодовУпаковок, Количество) Экспорт
	
	Если ДанныеШтрихкодовУпаковок = Неопределено
		Или ДанныеШтрихкодовУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодов);
	Приемник = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Обработан");
	ПараметрыПоиска.Номенклатура = Источник.Товар;
	ПараметрыПоиска.Обработан    = Ложь;
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если (Количество <= 0) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеШтрихкодовУпаковокУКД(ДанныеДляФормированияЭД, СсылкаНаПервичныйДокумент, ДокументыОснования)
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаКодовМаркировкиДо"   , Неопределено);
	Результат.Вставить("ТаблицаКодовМаркировкиПосле", Неопределено);
	
	Если ТипЗнч(СсылкаНаПервичныйДокумент) <> Тип("ДокументСсылка.КорректировкаРеализации") 
		И ТипЗнч(СсылкаНаПервичныйДокумент) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ШтрихкодыУпаковокДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ШтрихкодыУпаковок").Выгрузить();
			ШтрихкодыУпаковокДо.Колонки.ШтрихкодУпаковки.Имя = "Штрихкод";
			//Результат.ТаблицаКодовМаркировкиДо = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(ШтрихкодыУпаковокДо);
			Результат.ТаблицаКодовМаркировкиДо = ИнтеграцияИСМПБПВызовСервера.ПолучитьЧастичноеСодержимоеИКодыОСУ(ШтрихкодыУпаковокДо, ДокументОснование, "Товары");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКолонкаТаблицыЗначений(ДанныеДляФормированияЭД, "ШтрихкодыУпаковок") Тогда
		Результат.ТаблицаКодовМаркировкиПосле = ДанныеДляФормированияЭД.ШтрихкодыУпаковок;
	КонецЕсли;
	
	Если Результат.ТаблицаКодовМаркировкиДо <> Неопределено Тогда
		Результат.ТаблицаКодовМаркировкиДо.Колонки.Удалить("Ссылка");
		Результат.ТаблицаКодовМаркировкиДо.Колонки.Добавить("Ссылка");
		Результат.ТаблицаКодовМаркировкиДо.ЗаполнитьЗначения(СсылкаНаПервичныйДокумент, "Ссылка");
		
		// В возврате от покупателя в ТаблицаКодовМаркировкиПосле будут коды ОСУ на расхождения. 
		// Их надо перенести в ТаблицаКодовМаркировкиДо 
		Если ТипЗнч(СсылкаНаПервичныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			И Результат.ТаблицаКодовМаркировкиПосле <> Неопределено Тогда
			
			ОтборВидУпаковки = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет);
			Для каждого СтрокаДо Из Результат.ТаблицаКодовМаркировкиДо.НайтиСтроки(ОтборВидУпаковки) Цикл
				Результат.ТаблицаКодовМаркировкиДо.Удалить(СтрокаДо);
			КонецЦикла;
			Для каждого СтрокаПосле Из Результат.ТаблицаКодовМаркировкиПосле.НайтиСтроки(ОтборВидУпаковки) Цикл
				ЗаполнитьЗначенияСвойств(Результат.ТаблицаКодовМаркировкиДо.Добавить(), СтрокаПосле);
				Результат.ТаблицаКодовМаркировкиПосле.Удалить(СтрокаПосле);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковокУКД(ШтрихкодыУпаковок, СведенияОТоваре)
	
	ШтрихкодыУпаковокСтрокиТЧ = Новый Массив;
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			ШтрихкодыУпаковокСтрокиТЧ.Добавить(
				ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаКодаУпаковки,
					"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код"));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрокаТЧШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
		НоваяСтрокаТЧШтрихкодыУпаковок.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркировкеВУПД(Приемник, ПервичныйДокумент, СведенияОТоваре, ДанныеШтрихкодовУпаковок) Экспорт
	
	Источник = Новый Структура("Ссылка, Номенклатура, Количество");
	Источник.Ссылка       = ПервичныйДокумент;
	Источник.Номенклатура = СведенияОТоваре.Товар;
	Источник.Количество   = СведенияОТоваре.Количество;
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркировкеВУКД_2020(Приемник, ПервичныйДокумент, СведенияОТоваре, ДанныеШтрихкодовУпаковок)
	
	Источник = Новый Структура;
	Источник.Вставить("Ссылка"      , ПервичныйДокумент);
	Источник.Вставить("Номенклатура", СведенияОТоваре.Товар);
	Источник.Вставить("КоличествоДо", СведенияОТоваре.КоличествоДоИзменения);
	Источник.Вставить("Количество"  , СведенияОТоваре.КоличествоПослеИзменения);
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеУКД2020(Приемник, Источник,
		ДанныеШтрихкодовУпаковок.ТаблицаКодовМаркировкиДо, ДанныеШтрихкодовУпаковок.ТаблицаКодовМаркировкиПосле);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомЭлектронногоДокумента

Процедура ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый = Ложь, ДобавлятьНовыеСтроки = Ложь) Экспорт
	
	Если СтруктураДопДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Родитель = Неопределено Тогда
		СтрокаДереваЗначений = СтрокаДерева(СтрокаДерева, "ДопДанные");
		Если ЮридическиЗначимый Тогда
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
		Иначе
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть");
		КонецЕсли;
	ИначеЕсли НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеПодписанные"
			ИЛИ НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеНеПодписанные" Тогда
		СтрокаДопДанные = СтрокаДерева;
	Иначе
		СтрокаДерева.Значение = Истина;
		СтрокаДопДанные = СтрокаДерева.Строки[?(ЮридическиЗначимый, 0 ,1)];
	КонецЕсли;
	СтрокаДопДанные.Значение = Истина;
	
	Для Каждого Элемент Из СтруктураДопДанных Цикл
		КлючДопДанных = СтрЗаменить(Элемент.Ключ, ".", "");
		НовСтрока = СтрокаДопДанные.Строки.Найти(СтрокаДопДанные.ПолныйПуть + "." + КлючДопДанных, "ПолныйПуть");
		Если НовСтрока = Неопределено Или ДобавлятьНовыеСтроки Тогда
			НовСтрока = СтрокаДопДанные.Строки.Добавить();
			НовСтрока.ПолныйПуть = СтрокаДопДанные.ПолныйПуть + "." + КлючДопДанных;
			НомерУровня = СтрЧислоВхождений(НовСтрока.ПолныйПуть, ".") + 1;
			НовСтрока["Уровень" + НомерУровня] = НазваниеКолонки(НовСтрока.ПолныйПуть);
		КонецЕсли;
		НовСтрока.Значение = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно = Ложь) Экспорт
	
	СтрокаВозврата = ДеревоДанных.Строки.Найти(НазваниеПоля, "ПолныйПуть", НайтиРекурсивно);
	Если СтрокаВозврата.Признак = "Группа" Тогда
		СтрокаВозврата.Значение = Истина;
	КонецЕсли;
	Возврат СтрокаВозврата;

КонецФункции

Функция НазваниеКолонки(ПолныйПуть) Экспорт
	
	ПозицияРазделителя = СтрНайти(ПолныйПуть, ".", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя = 0 Тогда
		Результат = СокрЛП(ПолныйПуть);
	Иначе
		Результат = СокрЛП(Сред(ПолныйПуть, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прослеживаемость

Процедура ЗаполнитьСведенияОПрослеживаемостиВЭлектронномДокументе(Приемник, СведенияОТоваре);
	
	Если Не ЕстьКолонкаТаблицыЗначений(СведенияОТоваре, "СведенияОПрослеживаемости") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПрослеживаемости = СведенияОТоваре.СведенияОПрослеживаемости;
	Если Не ЗначениеЗаполнено(СведенияОПрослеживаемости) Тогда
		Возврат;
	КонецЕсли;
	
	Приемник.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
	Приемник.СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДС");
	
	Для Каждого СтрокаПрослеживаемости Из Приемник.СведенияОПрослеживаемости Цикл
		СтрокаПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрокаПрослеживаемости.ЕдиницаИзмеренияКод);
		СтрокаПрослеживаемости.СтоимостьБезНДС = Окр(СтрокаПрослеживаемости.СтоимостьБезНалога);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПрослеживаемостиВЭлектронномДокументеУКД(Приемник, СведенияОТоваре);
	
	Если Не ЕстьКолонкаТаблицыЗначений(СведенияОТоваре, "СведенияОПрослеживаемости") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПрослеживаемости = СведенияОТоваре.СведенияОПрослеживаемости;
	Если Не ЗначениеЗаполнено(СведенияОПрослеживаемости) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеДоИзменения");
	СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеПослеИзменения");
	СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеУвеличение");
	СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеУменьшение");
	
	СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДСДоИзменения");
	СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДСПослеИзменения");
	СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДСУвеличение");
	СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДСУменьшение");
	
	Для Каждого СтрокаПрослеживаемости Из СведенияОПрослеживаемости Цикл
		
		СтрокаПрослеживаемости.КоличествоТовараУчетноеДоИзменения = СтрокаПрослеживаемости.КоличествоУчетноеДоИзменения;
		СтрокаПрослеживаемости.КоличествоТовараУчетноеПослеИзменения = СтрокаПрослеживаемости.КоличествоУчетноеПослеИзменения;
		Разница = СтрокаПрослеживаемости.КоличествоУчетноеДоИзменения - СтрокаПрослеживаемости.КоличествоУчетноеПослеИзменения;
		РазницаСтоимостьБезНДС = Окр(СтрокаПрослеживаемости.СтоимостьБезНалогаДоИзменения) - Окр(СтрокаПрослеживаемости.СтоимостьБезНалогаПослеИзменения);
		
		Если Разница > 0 Тогда
			СтрокаПрослеживаемости.КоличествоТовараУчетноеУменьшение = Разница;
			СтрокаПрослеживаемости.КоличествоТовараУчетноеУвеличение = 0;
		Иначе
			СтрокаПрослеживаемости.КоличествоТовараУчетноеУменьшение = 0;
			СтрокаПрослеживаемости.КоличествоТовараУчетноеУвеличение = -Разница;
		КонецЕсли;
		
		Если РазницаСтоимостьБезНДС > 0 Тогда
			СтрокаПрослеживаемости.СтоимостьБезНДСУменьшение = РазницаСтоимостьБезНДС;
			СтрокаПрослеживаемости.СтоимостьБезНДСУвеличение = 0;
		Иначе
			СтрокаПрослеживаемости.СтоимостьБезНДСУменьшение = 0;
			СтрокаПрослеживаемости.СтоимостьБезНДСУвеличение = -РазницаСтоимостьБезНДС;
		КонецЕсли;
		
		СтрокаПрослеживаемости.СтоимостьБезНДСДоИзменения    = Окр(СтрокаПрослеживаемости.СтоимостьБезНалогаДоИзменения);
		СтрокаПрослеживаемости.СтоимостьБезНДСПослеИзменения = Окр(СтрокаПрослеживаемости.СтоимостьБезНалогаПослеИзменения);
		
		СтрокаПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрокаПрослеживаемости.ЕдиницаИзмеренияКод);
	КонецЦикла;
	
	Приемник.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
	
КонецПроцедуры

Процедура ПодготовитьСведенияОПрослеживаемостиДляДокументаИБ_УПД(Приемник, СтрокаТовары, СведенияОТоваре, СпособОбработкиПервичногоДокумента)
	
	Если Не ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "ПрослеживаемыйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
	
	Если Не (ТипЗнч(Данные) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Данные)) Тогда
		Возврат;
	КонецЕсли;
	
	СтранаПроисхождения = Неопределено;
	// Для основных средств в таблице данных прослеживаемости необходимо указать страну происхождения.
	Если СпособОбработкиПервичногоДокумента = СпособыОбработкиВходящихЭД().ПоступлениеОсновныхСредств Тогда
		СведенияОТаможеннойДекларации = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(СведенияОТаможеннойДекларации) = Тип("ТаблицаЗначений")
				И СведенияОТаможеннойДекларации.Количество() > 0 Тогда
			СтранаПроисхождения = СтранаПроисхожденияПолучитьСсылку(СведенияОТаможеннойДекларации[0].СтранаПроисхожденияКод);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	СтрокаТовары.ПрослеживаемыйТовар = Истина;
	ЕстьКолонкаНоменклатура = ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "Номенклатура");
	Если ЕстьКолонкаНоменклатура Тогда
		СтрокаТовары.ПрослеживаемыйКомплект = ЭтоПрослеживаемыйКомплект(СтрокаТовары.Номенклатура);
	КонецЕсли;
	СведенияПрослеживаемости = Приемник.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаПрослеживаемости = СведенияПрослеживаемости.Добавить();
		СтрокаПрослеживаемости.ИдентификаторСтроки        = СтрокаТовары.ИдентификаторСтроки;
		СтрокаПрослеживаемости.СтавкаНДС                  = СтрокаТовары.СтавкаНДС;
		СтрокаПрослеживаемости.РНПТ                       = НомерТДПолучитьСсылку(СтрокаДанных.НомерТовара);
		СтрокаПрослеживаемости.КоличествоПрослеживаемости = СтрокаДанных.Количество;
		СтрокаПрослеживаемости.Количество                 = СтрокаДанных.КоличествоУчетное;
		СтрокаПрослеживаемости.СтранаПроисхождения        = СтранаПроисхождения;
		СтрокаПрослеживаемости.Сумма                      = СтрокаДанных.СтоимостьБезНДС;
		Если ЕстьКолонкаНоменклатура Тогда
			СтрокаПрослеживаемости.Номенклатура = СтрокаТовары.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьПропорциональноУчетноеКоличество(СведенияПрослеживаемости, СтрокаТовары.Количество);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемости, Приемник);
	
КонецПроцедуры

Процедура ПодготовитьСведенияОПрослеживаемостиПриЗагрузкеИзExcel(Приемник, СтрокаТовары, СведенияОТоваре)
	
	Если Не СведенияОТоваре.Свойство("РНПТ_1") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "ПрослеживаемыйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	СтрокаТовары.ПрослеживаемыйТовар = Истина;
	ЕстьКолонкаНоменклатура = ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "Номенклатура");
	Если ЕстьКолонкаНоменклатура Тогда
		СтрокаТовары.ПрослеживаемыйКомплект = ЭтоПрослеживаемыйКомплект(СтрокаТовары.Номенклатура);
	КонецЕсли;
	СведенияПрослеживаемости = Приемник.СкопироватьКолонки();
	
	Счетчик = 1;
	СчетчикСтр = Формат(Счетчик, "ЧГ=0");
	Пока СведенияОТоваре.Свойство("РНПТ_" + СчетчикСтр) Цикл
		СтрокаПрослеживаемости = СведенияПрослеживаемости.Добавить();
		СтрокаПрослеживаемости.ИдентификаторСтроки        = СтрокаТовары.ИдентификаторСтроки;
		Если ЕстьКолонкаНоменклатура И Не СтрокаТовары.ПрослеживаемыйКомплект Тогда
			СтрокаПрослеживаемости.Номенклатура = СтрокаТовары.Номенклатура;
		КонецЕсли;
		СтрокаПрослеживаемости.РНПТ                       = НомерТДПолучитьСсылку(СведенияОТоваре["РНПТ_" + СчетчикСтр]);
		СтрокаПрослеживаемости.КоличествоПрослеживаемости = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
			СведенияОТоваре["КолРНПТ_" + СчетчикСтр]);
		СтрокаПрослеживаемости.Количество                 = 0;
		
		Счетчик = Счетчик + 1;
		СчетчикСтр = Формат(Счетчик, "ЧГ=0");
	КонецЦикла;
	
	РассчитатьПропорциональноУчетноеКоличество(СведенияПрослеживаемости, СтрокаТовары.Количество);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемости, Приемник);
	
КонецПроцедуры

Процедура ПодготовитьСведенияОПрослеживаемостиДляВозвратаПоставщику_УКД(Приемник, СтрокаТовары, СведенияОТоваре)
	
	Если Не ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "ПрослеживаемыйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
	
	Если Не (ТипЗнч(Данные) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Данные)) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	СтрокаТовары.ПрослеживаемыйТовар = Истина;
	Если ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "Номенклатура") Тогда
		СтрокаТовары.ПрослеживаемыйКомплект = ЭтоПрослеживаемыйКомплект(СтрокаТовары.Номенклатура);
	КонецЕсли;
	СведенияПрослеживаемости = Приемник.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаПрослеживаемости = СведенияПрослеживаемости.Добавить();
		СтрокаПрослеживаемости.ИдентификаторСтроки        = СтрокаТовары.ИдентификаторСтроки;
		СтрокаПрослеживаемости.РНПТ                       = НомерТДПолучитьСсылку(СтрокаДанных.НомерТовара);
		СтрокаПрослеживаемости.КоличествоПрослеживаемости = СтрокаДанных.КоличествоТовараУменьшение;
		СтрокаПрослеживаемости.Количество                 = СтрокаДанных.КоличествоТовараУчетноеУменьшение;
	КонецЦикла;
	
	РассчитатьПропорциональноУчетноеКоличество(СведенияПрослеживаемости, СтрокаТовары.Количество);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемости, Приемник);
	
КонецПроцедуры

Процедура ПодготовитьСведенияОПрослеживаемостиДляДокументаИБ_УКД(Приемник, СтрокаТовары, СведенияОТоваре)
	
	Данные = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
	
	Если Не (ТипЗнч(Данные) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Данные)) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПрослеживаемости = Приемник.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаПрослеживаемости = СведенияПрослеживаемости.Добавить();
		СтрокаПрослеживаемости.Номенклатура               = СтрокаТовары.Номенклатура;
		СтрокаПрослеживаемости.СтавкаНДС                  = СтрокаТовары.СтавкаНДС;
		СтрокаПрослеживаемости.РНПТ                       = НомерТДПолучитьСсылку(СтрокаДанных.НомерТовара);
		СтрокаПрослеживаемости.КоличествоПрослеживаемости = СтрокаДанных.КоличествоТовараПослеИзменения;
		СтрокаПрослеживаемости.Количество                 = СтрокаДанных.КоличествоТовараУчетноеПослеИзменения;
		СтрокаПрослеживаемости.Сумма                      = СтрокаДанных.СтоимостьБезНДСПослеИзменения;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемости, Приемник);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПрослеживаемостиВДокументеИБ_УКД(Приемник, Источник, Товары)
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Приемник.ВыгрузитьКолонки();
	Для Каждого СтрокаТовары Из Товары Цикл
		Если Не СтрокаТовары.ПрослеживаемыйТовар Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыПоиска.Вставить("СтавкаНДС"   , СтрокаТовары.СтавкаНДС);
		СведенияПрослеживаемостиЭД = Источник.Скопировать(ПараметрыПоиска);
		Если Не ЗначениеЗаполнено(СведенияПрослеживаемостиЭД) Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
			СведенияПрослеживаемостиИБ = Приемник.Выгрузить(ПараметрыПоиска);
		Иначе
			РассчитатьПропорциональноУчетноеКоличество(СведенияПрослеживаемостиЭД, СтрокаТовары.Количество);
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
			ПараметрыПоиска.Вставить("ЭтоСтрокаСИсходнымиРНПТ", Истина);
			СведенияПрослеживаемостиИБ = Приемник.Выгрузить(ПараметрыПоиска);
			Для Каждого СтрокаПрослеживаемостиЭД Из СведенияПрослеживаемостиЭД Цикл
				Если СтрокаПрослеживаемостиЭД.КоличествоПрослеживаемости = 0 Тогда // не выводим строку, если кол-во прослеживаемосит равно 0
					Продолжить;
				КонецЕсли;
				СтрокаПрослеживаемостиИБ = СведенияПрослеживаемостиИБ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПрослеживаемостиИБ, СтрокаПрослеживаемостиЭД);
				СтрокаПрослеживаемостиИБ.ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
			КонецЦикла;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемостиИБ, Результат);
	КонецЦикла;
	
	Приемник.Загрузить(Результат);
	
КонецПроцедуры

Процедура РассчитатьПропорциональноУчетноеКоличество(СведенияПрослеживаемости, КоличествоТовара)
	
	// Количество учетное получено из данных электронного документа, рассчитывать не нужно. 
	Если СведенияПрослеживаемости.Итог("Количество") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоКоличествоПрослеживаемости = СведенияПрослеживаемости.Итог("КоличествоПрослеживаемости");
	
	// Если количество прослеживаемости равно количеству товара в строке, то скорее всего единица измерения прослеживаемости совпадает
	// с учетной единицей измерения и количество учетное равно количеству прослеживаемости.
	Если ВсегоКоличествоПрослеживаемости = КоличествоТовара Тогда
		Для Каждого СтрокаПрослеживаемости Из СведенияПрослеживаемости Цикл
			СтрокаПрослеживаемости.Количество = СтрокаПрослеживаемости.КоличествоПрослеживаемости;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	СведенияПрослеживаемости.Колонки.Добавить("Порядок");
	Порядок = 0;
	Для Каждого СтрокаПрослеживаемости Из СведенияПрослеживаемости Цикл
		Порядок = Порядок + 1;
		СтрокаПрослеживаемости.Порядок = Порядок;
	КонецЦикла;
	
	СведенияПрослеживаемости.Сортировать("КоличествоПрослеживаемости");
	Распределено = 0;
	Для Каждого СтрокаПрослеживаемости Из СведенияПрослеживаемости Цикл
		Если СведенияПрослеживаемости.Индекс(СтрокаПрослеживаемости) + 1 = СведенияПрослеживаемости.Количество() Тогда
			СтрокаПрослеживаемости.Количество = КоличествоТовара - Распределено;
		Иначе 
			СтрокаПрослеживаемости.Количество = ?(ВсегоКоличествоПрослеживаемости = 0, 0,
				СтрокаПрослеживаемости.КоличествоПрослеживаемости * КоличествоТовара / ВсегоКоличествоПрослеживаемости);
			Распределено = Распределено + СтрокаПрослеживаемости.Количество;
		КонецЕсли;
	КонецЦикла;
	
	СведенияПрослеживаемости.Сортировать("Порядок");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПрослеживаемостиВЭДОтчетОКомиссионныхПродажах(СтрокаТовары, ДанныеПрослеживаемости)
	
	СведенияОПрослеживаемости = Новый ТаблицаЗначений;
	СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
	СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
	СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	СведенияОПрослеживаемости.Колонки.Добавить("Количество");
	СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное");
	
	СтрокаТовары.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
	
	Если Не ЗначениеЗаполнено(ДанныеПрослеживаемости) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	Отбор.Вставить("ДокументРасчетов", СтрокаТовары.ДокументРасчетов);	
	
	РезультатПоиска = ДанныеПрослеживаемости.НайтиСтроки(Отбор);
	Для Каждого СтрокаРезультатаПоиска Из РезультатПоиска Цикл
		СтрокаСведенийПрослеживаемости = СведенияОПрослеживаемости.Добавить();
		СтрокаСведенийПрослеживаемости.НомерТовара                  = СтрокаРезультатаПоиска.РНПТ;
		СтрокаСведенийПрослеживаемости.ЕдиницаИзмеренияКод          = СтрокаТовары.БазоваяЕдиницаКод;
		СтрокаСведенийПрослеживаемости.ЕдиницаИзмеренияНаименование = СтрокаТовары.БазоваяЕдиницаНаименование;
		СтрокаСведенийПрослеживаемости.Количество                   = СтрокаРезультатаПоиска.КоличествоПрослеживаемости;
		СтрокаСведенийПрослеживаемости.КоличествоУчетное            = СтрокаРезультатаПоиска.Количество;
		
		СтрокаТовары.Страна = СтрокаРезультатаПоиска.СтранаПроисхождения
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСведенияОПрослеживаемостиДляОтчетаКомиссионера(Приемник, СтрокаТовары)
	
	Если Не ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "ПрослеживаемыйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.СведенияПрослеживаемости) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	СтрокаТовары.ПрослеживаемыйТовар = Истина;
	Если ЕстьКолонкаТаблицыЗначений(СтрокаТовары, "Номенклатура") Тогда
		СтрокаТовары.ПрослеживаемыйКомплект = ЭтоПрослеживаемыйКомплект(СтрокаТовары.Номенклатура);
	КонецЕсли;
	СведенияПрослеживаемости = Приемник.СкопироватьКолонки();
	Для Каждого СтрокаДанныхПрослеживаемостиЭД Из СтрокаТовары.СведенияПрослеживаемости Цикл
		СтрокаПрослеживаемости = СведенияПрослеживаемости.Добавить();
		СтрокаПрослеживаемости.ИдентификаторСтроки        = СтрокаТовары.ИдентификаторСтроки;
		СтрокаПрослеживаемости.РНПТ                       = НомерТДПолучитьСсылку(СтрокаДанныхПрослеживаемостиЭД.НомерТовара);
		СтрокаПрослеживаемости.КоличествоПрослеживаемости = СтрокаДанныхПрослеживаемостиЭД.Количество;
		СтрокаПрослеживаемости.Количество                 = СтрокаДанныхПрослеживаемостиЭД.КоличествоУчетное;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияПрослеживаемости, Приемник);
	
КонецПроцедуры

Функция ЭтоПрослеживаемыйКомплект(Номенклатура)
	
	Если Не (ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ПрослеживаемыйКомплект");
	
КонецФункции

#КонецОбласти

#Область КонструкторДополнительныхПолей

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТДокументыОснования.Ссылка.Номер КАК СсылкаНомер,
	|	ВТДокументыОснования.Ссылка.Дата КАК СсылкаДата,
	|	ВТДокументыОснования.Ссылка.ВидСчетаФактуры КАК СсылкаВидСчетаФактуры,
	|	ВТДокументыОснования.Ссылка.Организация КАК СсылкаОрганизация,
	|	ВТДокументыОснования.Ссылка.Контрагент КАК СсылкаКонтрагент,
	|	ВТДокументыОснования.Ссылка.ДоговорКонтрагента КАК СсылкаДоговорКонтрагента,
	|	ВТДокументыОснования.Ссылка.НомерИсправления КАК СсылкаНомерИсправления,
	|	ВТДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК СсылкаНомерИсправляемогоКорректировочногоДокумента,
	|	ВТДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК СсылкаДатаИсправляемогоКорректировочногоДокумента,
	|	ВТДокументыОснования.Ссылка.НомерИсходногоДокумента КАК СсылкаНомерИсходногоДокумента,
	|	ВТДокументыОснования.Ссылка.ДатаИсходногоДокумента КАК СсылкаДатаИсходногоДокумента,
	|	ВТДокументыОснования.Ссылка.Продавец КАК СсылкаПродавец,
	|	ВТДокументыОснования.Ссылка.ДатаПлатежноРасчетногоДокумента КАК СсылкаДатаПлатежноРасчетногоДокумента,
	|	ВТДокументыОснования.Ссылка.НомерПлатежноРасчетногоДокумента КАК СсылкаНомерПлатежноРасчетногоДокумента,
	|	ВТДокументыОснования.Ссылка.ДатаДокументаАвансаКомитента КАК СсылкаДатаДокументаАвансаКомитента,
	|	ВТДокументыОснования.Ссылка.НомерДокументаАвансаКомитента КАК СсылкаНомерДокументаАвансаКомитента,
	|	ВТДокументыОснования.Ссылка.ДатаВыставления КАК СсылкаДатаВыставления,
	|	ВТДокументыОснования.Ссылка.Сумма КАК СсылкаСумма,
	|	ВТДокументыОснования.Ссылка.СуммаНДС КАК СсылкаСуммаНДС,
	|	ВТДокументыОснования.Ссылка.СуммаДокумента КАК СсылкаСуммаДокумента,
	|	ВТДокументыОснования.Ссылка.СуммаУвеличение КАК СсылкаСуммаУвеличение,
	|	ВТДокументыОснования.Ссылка.СуммаУменьшение КАК СсылкаСуммаУменьшение,
	|	ВТДокументыОснования.Ссылка.СуммаНДСДокумента КАК СсылкаСуммаНДСДокумента,
	|	ВТДокументыОснования.Ссылка.СуммаНДСУвеличение КАК СсылкаСуммаНДСУвеличение,
	|	ВТДокументыОснования.Ссылка.СуммаНДСУменьшение КАК СсылкаСуммаНДСУменьшение,
	|	ВТДокументыОснования.Ссылка.Ответственный КАК СсылкаОтветственный,
	|	ВТДокументыОснования.Ссылка.Комментарий КАК СсылкаКомментарий,
	|	ВТДокументыОснования.Ссылка.Руководитель КАК СсылкаРуководитель,
	|	ВТДокументыОснования.Ссылка.ГлавныйБухгалтер КАК СсылкаГлавныйБухгалтер,
	|	ВТДокументыОснования.Ссылка.СуммаДокументаКомиссия КАК СсылкаСуммаДокументаКомиссия,
	|	ВТДокументыОснования.Ссылка.СуммаНДСДокументаКомиссия КАК СсылкаСуммаНДСДокументаКомиссия,
	|	ВТДокументыОснования.Ссылка.СуммаУвеличениеКомиссия КАК СсылкаСуммаУвеличениеКомиссия,
	|	ВТДокументыОснования.Ссылка.СуммаУменьшениеКомиссия КАК СсылкаСуммаУменьшениеКомиссия,
	|	ВТДокументыОснования.Ссылка.СуммаНДСУвеличениеКомиссия КАК СсылкаСуммаНДСУвеличениеКомиссия,
	|	ВТДокументыОснования.Ссылка.СуммаНДСУменьшениеКомиссия КАК СсылкаСуммаНДСУменьшениеКомиссия,
	|	ВТДокументыОснования.ДокументОснование.Номер КАК ДокументОснованиеНомер,
	|	ВТДокументыОснования.ДокументОснование.Дата КАК ДокументОснованиеДата,
	|	ВТДокументыОснования.ДокументОснование.ВидОперации КАК ДокументОснованиеВидОперации,
	|	ВТДокументыОснования.ДокументОснование.Организация КАК ДокументОснованиеОрганизация,
	|	ВТДокументыОснования.ДокументОснование.Склад КАК ДокументОснованиеСклад,
	|	ВТДокументыОснования.ДокументОснование.ПодразделениеОрганизации КАК ДокументОснованиеПодразделениеОрганизации,
	|	ВТДокументыОснования.ДокументОснование.Контрагент КАК ДокументОснованиеКонтрагент,
	|	ВТДокументыОснования.ДокументОснование.ДоговорКонтрагента КАК ДокументОснованиеДоговорКонтрагента,
	|	ВТДокументыОснования.ДокументОснование.ВалютаДокумента КАК ДокументОснованиеВалютаДокумента,
	|	ВТДокументыОснования.ДокументОснование.Грузоотправитель КАК ДокументОснованиеГрузоотправитель,
	|	ВТДокументыОснования.ДокументОснование.Грузополучатель КАК ДокументОснованиеГрузополучатель,
	|	ВТДокументыОснования.ДокументОснование.АдресДоставки КАК ДокументОснованиеАдресДоставки,
	|	ВТДокументыОснования.ДокументОснование.СуммаДокумента КАК ДокументОснованиеСуммаДокумента,
	|	ВТДокументыОснования.ДокументОснование.Ответственный КАК ДокументОснованиеОтветственный,
	|	ВТДокументыОснования.ДокументОснование.Комментарий КАК ДокументОснованиеКомментарий,
	|	ВТДокументыОснования.ДокументОснование.Руководитель КАК ДокументОснованиеРуководитель,
	|	ВТДокументыОснования.ДокументОснование.ГлавныйБухгалтер КАК ДокументОснованиеГлавныйБухгалтер,
	|	ВТДокументыОснования.ДокументОснование.ОтпускПроизвел КАК ДокументОснованиеОтпускПроизвел,
	|	ВТДокументыОснования.ДокументОснование.Перевозчик КАК ДокументОснованиеПеревозчик,
	|	ВТДокументыОснования.ДокументОснование.МаркаАвтомобиля КАК ДокументОснованиеМаркаАвтомобиля,
	|	ВТДокументыОснования.ДокументОснование.РегистрационныйЗнакАвтомобиля КАК ДокументОснованиеРегистрационныйЗнакАвтомобиля,
	|	ВТДокументыОснования.ДокументОснование.Водитель КАК ДокументОснованиеВодитель,
	|	ВТДокументыОснования.ДокументОснование.ВодительскоеУдостоверение КАК ДокументОснованиеВодительскоеУдостоверение,
	|	ВТДокументыОснования.ДокументОснование.КраткоеНаименованиеГруза КАК ДокументОснованиеКраткоеНаименованиеГруза,
	|	ВТДокументыОснования.ДокументОснование.СопроводительныеДокументы КАК ДокументОснованиеСопроводительныеДокументы,
	|	ВТДокументыОснования.ДокументОснование.ДеятельностьНаТорговомСборе КАК ДокументОснованиеДеятельностьНаТорговомСборе,
	|	ВТДокументыОснования.ДокументОснование.ОтветственныйЗаОформление КАК ДокументОснованиеОтветственныйЗаОформление,
	|	ВТДокументыОснования.ДокументОснование.СведенияОТранспортировкеИГрузе КАК ДокументОснованиеСведенияОТранспортировкеИГрузе,
	|	ВТДокументыОснования.ДокументОснование.ПеревозкаАвтотранспортом КАК ДокументОснованиеПеревозкаАвтотранспортом,
	|	ВТДокументыОснования.ДокументОснование.ЕстьМаркируемаяПродукцияГИСМ КАК ДокументОснованиеЕстьМаркируемаяПродукцияГИСМ,
	|	ВТДокументыОснования.ДокументОснование.НомерЧекаККМ КАК ДокументОснованиеНомерЧекаККМ
	|ИЗ
	|	ВТДокументыОснования КАК ВТДокументыОснования";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданный.Комитент КАК Комитент,
	|	СчетФактураВыданный.Продавец КАК Продавец,
	|	СчетФактураВыданный.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураВыданный.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданный.ДатаДокументаАвансаКомитента КАК ДатаДокументаАвансаКомитента,
	|	СчетФактураВыданный.НомерДокументаАвансаКомитента КАК НомерДокументаАвансаКомитента,
	|	СчетФактураВыданный.ДатаВыставления КАК ДатаВыставления,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СуммаДокумента КАК СуммаДокумента,
	|	СчетФактураВыданный.СуммаУвеличение КАК СуммаУвеличение,
	|	СчетФактураВыданный.СуммаУменьшение КАК СуммаУменьшение,
	|	СчетФактураВыданный.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	СчетФактураВыданный.СуммаНДСУвеличение КАК СуммаНДСУвеличение,
	|	СчетФактураВыданный.СуммаНДСУменьшение КАК СуммаНДСУменьшение,
	|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетФактураВыданный.Руководитель КАК Руководитель,
	|	СчетФактураВыданный.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	СчетФактураВыданный.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	СчетФактураВыданный.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Патент КАК Патент,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
	|	РеализацияТоваровУслуг.МаркаАвтомобиля КАК МаркаАвтомобиля,
	|	РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля КАК РегистрационныйЗнакАвтомобиля,
	|	РеализацияТоваровУслуг.Водитель КАК Водитель,
	|	РеализацияТоваровУслуг.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	|	РеализацияТоваровУслуг.КраткоеНаименованиеГруза КАК КраткоеНаименованиеГруза,
	|	РеализацияТоваровУслуг.СопроводительныеДокументы КАК СопроводительныеДокументы,
	|	РеализацияТоваровУслуг.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	РеализацияТоваровУслуг.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
	|	РеализацияТоваровУслуг.СведенияОТранспортировкеИГрузе КАК СведенияОТранспортировкеИГрузе,
	|	РеализацияТоваровУслуг.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
	|	РеализацияТоваровУслуг.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПеревозочныеДокументы

Процедура ПроверитьУстановитьСвязьЭТрН(ПоступлениеТоваровСсылка)
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ТранспортнаяНакладнаяШапка.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита) КАК СовпадалоРеквизитов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная КАК ТранспортнаяНакладнаяШапка
	|		ПО ПоступлениеТоваровУслуг.Организация = ТранспортнаяНакладнаяШапка.Организация
	|			И ПоступлениеТоваровУслуг.Контрагент = ТранспортнаяНакладнаяШапка.СсылкаТитулГрузоотправителяГрузоотправитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовДокументовЭПД КАК ЗначенияРеквизитовДокументовЭПД
	|		ПО (ТранспортнаяНакладнаяШапка.Ссылка = ЗначенияРеквизитовДокументовЭПД.Документ)
	|			И (ЗначенияРеквизитовДокументовЭПД.ИмяТабличнойЧасти = ""ТитулГрузоотправителяДокументыПодтверждающиеОтгрузку"")
	|ГДЕ
	|	(ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита = ""НомерДокумента""
	|				И (ВЫРАЗИТЬ(ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизитаСтрока КАК СТРОКА(50))) = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	|			ИЛИ ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита = ""ДатаДокумента""
	|				И ЗначенияРеквизитовДокументовЭПД.ЗначениеРеквизита = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента)
	|	И ПоступлениеТоваровУслуг.Ссылка = &ПоступлениеТоваровСсылка
	|	И НЕ ЗначенияРеквизитовДокументовЭПД.Документ ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяНакладнаяШапка.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияРеквизитовДокументовЭПД.ИмяРеквизита) = 2";
	
	Запрос.УстановитьПараметр("ПоступлениеТоваровСсылка",   ПоступлениеТоваровСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("ДокументОснование", ПоступлениеТоваровСсылка);
			Если ДокументОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				Возврат;
			КонецЕсли; 
			
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ПоступлениеТоваровСсылка;
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			Если ДокументОбъект.Проведен Тогда 
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписи)
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область УстаревшиеФорматыЭД

Процедура ЗаполнитьОсновнуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	ЭтоСчетФактураНаАванс = СтруктураЭД.ЭтоСчетФактураНаАванс;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры",
		?(ЭтоСчетФактураНаАванс, "Авансовый", "Реализация"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ВидОперацииЭД = Неопределено;
	СтруктураЭД.Свойство("ВидОперацииЭД", ВидОперацииЭД);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Комиссия Тогда
		
		ДокументРеализации = ДанныеДляФормированияЭД.Ссылка;
		ДанныеПокупателяПродавца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Организация, Контрагент");
		СведенияОПокупателе  = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Контрагент, ДанныеШапки.Дата);
		СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Организация, ДанныеШапки.Дата);
		
	Иначе
		
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
		СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
		СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
		СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
		СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
		СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
		
	КонецЕсли;
	
	ДополнитьДаннымиОПодразделенииОрганизации(СведенияОПоставщике, ДанныеДляФормированияЭД);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента(СведенияОПоставщике));
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
	
	ПолучитьКомиссионераДляПеревыставленногоСчетаФактуры(ДеревоДанных, ДанныеШапки, ДанныеДляФормированияЭД);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление
		И ЗначениеЗаполнено(ДанныеДляФормированияЭД.СчетФактура) Тогда
		
		ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
		Для Каждого ПлатежныйДокумент ИЗ ДанныеШапки.ТаблицаПлатежныхДокументов Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаДокумента;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерДокумента;
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	Если ЭтоСчетФактураНаАванс Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", 
			НСтр("ru = 'Регистрация счет-фактуры на аванс'"));
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	УчетАгентскогоНДСПокупателем = Ложь; // используется для реализации металлолома, сырых шкур животных.
	Если ДокументыОснования.Количество() > 0
		И (ТипЗнч(ДокументыОснования[0]) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ДокументыОснования[0]) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(ДокументыОснования[0]) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		
		УчетАгентскогоНДСПокупателем = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументыОснования[0],
			"ДоговорКонтрагента.УчетАгентскогоНДСПокупателем") = Истина);
			
	КонецЕсли;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		НоваяСтрока.ТоварНаименование   = Строка.ТоварНаименование;
		
		Если Не ЭтоСчетФактураНаАванс Тогда
			Если ПустаяСтрока(Строка.ЕдиницаИзмеренияКод) Тогда
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "ЕдиницаИзмерения");
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
					РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
					НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
					НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(РеквизитыЕдиницыИзмерения.Наименование);
				КонецЕсли;
			Иначе
				НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = ?(ЭтоСчетФактураНаАванс И Не УчетАгентскогоНДСПокупателем, 0, Строка.Стоимость);
		НоваяСтрока.НалоговаяСтавка           = ?(УчетАгентскогоНДСПокупателем, СтавкаНДСИсчисляетсяНалоговымАгентом(), Строка.СтавкаНДС);
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = ?(УчетАгентскогоНДСПокупателем, 0, Строка.Всего);
		
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации();
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.СтранаПроисхождения;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
			НСтр("ru = 'Не заполнен код страны происхождения'"));
		
		НоваяСтрока.Признак = ПризнакТовараЕдиногоДокумента(Строка.Товар);
		НоваяСтрока.ТоварКод           = Строка.ТоварКод;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			Строка.Товар, НоваяСтрока.НалоговаяСтавка, Строка.ТоварНаименование);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ?(ЭтоСчетФактураНаАванс И Не УчетАгентскогоНДСПокупателем, 0, ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога")));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
	// Не выводим данные Грузоотправителя и Грузополучателя, если в документе только услуги или это счет-фактура на аванс.
	Если Не (ТолькоУслуги Или ЭтоСчетФактураНаАванс) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
		Иначе
			СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт", ДанныеШапки.Дата);
		КонецЕсли;
		
		Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
			СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
		СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
		
		// Получаем адрес доставки из документа реализации
		ДокументРеализации = Неопределено;
		Если ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования) = Тип("Массив") Тогда
			Для Каждого Документ Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
					Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					
					ДокументРеализации = Документ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		АдресДоставки = Неопределено;
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			АдресДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации, "АдресДоставки");
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресДоставки) Тогда
			СведенияОГрузополучателе.Вставить("АдресДоставки", АдресДоставки);
		КонецЕсли;
		
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт", ДанныеШапки.Дата);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРасширеннуюЧастьУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	ИначеЕсли СтруктураЭД.Свойство("ВидОперацииЭД") Тогда
		ВидОперацииЭД = СтруктураЭД.ВидОперацииЭД;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		ПризнакТовара = ПризнакТовараЕдиногоДокумента(Строка.Товар);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	// Дата отгрузки должна быть равна дате документа-реализации товаров и услуг.
	Если ДанныеДляФормированияЭД.ДокументыОснования.Количество() > 0 Тогда
		ДатаОтгрузкиПередачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.ДокументыОснования[0], "Дата");
	Иначе
		ДатаОтгрузкиПередачи = ДанныеШапки.Дата;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДатаОтгрузкиПередачи);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ОснованиеОтгрузкиТоваров = ПодготовитьТаблицуДанныхДоговораУПД(
		ДанныеШапки.Основание,
		ДанныеШапки.ОснованиеНомер,
		ДанныеШапки.ОснованиеДата);
		
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеОтгрузкиТоваров, "ДокументДата",,,
		НСтр("ru = 'Необходимо указать дату договора.'"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке", ДанныеШапки.ДанныеТранспортнаяНакладная);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке", ДанныеШапки.СопроводительныеДокументы);
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике",, ДанныеШапки.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
		И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		
		// Кладовщик работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
			
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		// Кладовщик не работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
	КонецЕсли;
	
	ПутьВДереве = "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация";
	
	Если ДанныеШапки.ОснованиеВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ПередачаТовараКомитентом", "Истина", ПутьВДереве);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновнуюЧастьУКД(ДанныеДляФормированияЭД, Настройки, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если ЭтоФункцияКСЧФДИС(Настройки.Функция)
		ИЛИ ЭтоФункцияКСЧФ(Настройки.Функция) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента"  , ВидУКД(ДанныеДляФормированияЭД.Ссылка));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента" ,  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление И ЭтоФункцияДИС(Настройки.Функция) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.НомерСчетаФактуры);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоФункцияДИС(Настройки.Функция)Тогда
		ДанныеОснования = ДанныеОснованияКорректировкиВозврата(ДанныеДляФормированияЭД.Ссылка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.Номер, Истина, Ложь));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента",
			ДанныеОснования.Дата);
	КонецЕсли;
	
	СчетФактура = Неопределено;
	Если ЭтоДокументСДоговоромНаКомиссионнуюТорговлю(ДанныеДляФормированияЭД.Ссылка)
			И ЭтоКорректировкаПеревыставленногоСчетФактуры(ДанныеДляФормированияЭД.Ссылка, СчетФактура) Тогда
		ДанныеПокупателяПродавца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Организация, Контрагент, Продавец");
		СведенияОПокупателе   = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Контрагент, ДанныеШапки.Дата);
		СведенияОПоставщике   = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Продавец, ДанныеШапки.Дата);
		СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(ДанныеПокупателяПродавца.Организация, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
	Иначе
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата, БанковскийСчетПродавца(ДанныеШапки));
		СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
		СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
		СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
		СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента(СведенияОПоставщике));
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
		
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = ОснованияУКД(ДанныеДляФормированияЭД.Ссылка, Настройки.Функция);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если ЭтоФункцияКСЧФ(Настройки.Функция) Тогда // УКД СФ без первичного документа
		
		ОснованиеКорректировки = ПодготовитьТаблицуДанныхДоговораУПД(
			ДанныеШапки.Основание,
			ДанныеШапки.ОснованиеНомер,
			ДанныеШапки.ОснованиеДата);
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеКорректировки, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеДо");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеПосле");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	УчетАгентскогоНДСПокупателем = Ложь; // используется для реализации металлолома, сырых шкур животных.
	Если ТипЗнч(ДанныеДляФормированияЭД.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(ДанныеДляФормированияЭД.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		УчетАгентскогоНДСПокупателем = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеДляФормированияЭД.Ссылка,
			"ДоговорКонтрагента.УчетАгентскогоНДСПокупателем");
	КонецЕсли;
	
	// Штрихкоды упаковок.
	ТаблицаКодовМаркировкиДо = Неопределено;
	ТаблицаКодовМаркировкиПосле = Неопределено;
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ШтрихкодыУпаковокДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ШтрихкодыУпаковок").Выгрузить();
			ШтрихкодыУпаковокДо.Колонки.ШтрихкодУпаковки.Имя = "Штрихкод";
			ТаблицаКодовМаркировкиДо = ИнтеграцияИСМПБПВызовСервера.ПолучитьЧастичноеСодержимоеИКодыОСУ(ШтрихкодыУпаковокДо, ДокументОснование, "Товары");
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если ЕстьКолонкаТаблицыЗначений(ДанныеДляФормированияЭД, "ШтрихкодыУпаковок") Тогда
		ТаблицаКодовМаркировкиПосле = ДанныеДляФормированияЭД.ШтрихкодыУпаковок;
	КонецЕсли;
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НаименованиеНоменклатуры = ?(ЗначениеЗаполнено(Строка.НаименованиеНоменклатуры), Строка.НаименованиеНоменклатуры,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "НаименованиеПолное"));
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.ТоварКод                 = Строка.ТоварКод;
		НоваяСтрока.ТоварНаименование        = НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = Строка.ЦенаДоИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		
		СтавкаНДС = ?(УчетАгентскогоНДСПокупателем = Истина, СтавкаНДСИсчисляетсяНалоговымАгентом(), Строка.СтавкаНДС);
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = ?(УчетАгентскогоНДСПокупателем = Истина, 0, Строка.СтоимостьСНДСДоИзменения);
		НоваяСтрока.СтоимостьТоваровСНалогом                = ?(УчетАгентскогоНДСПокупателем = Истина, 0, Строка.СтоимостьСНДСПослеИзменения);
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = ?(УчетАгентскогоНДСПокупателем = Истина, 0, Строка.РазницаСНДСУвеличение);
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = ?(УчетАгентскогоНДСПокупателем = Истина, 0, Строка.РазницаСНДСУменьшение);
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И ПризнакТовараЕдиногоДокумента(Строка.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		ЗаполнитьСведенияОМаркировкеВУКД(
			НоваяСтрока.СведенияОМаркировкеДо, Строка, ТаблицаКодовМаркировкиДо, Строка.КоличествоДоИзменения);
			
		ЗаполнитьСведенияОМаркировкеВУКД(
			НоваяСтрока.СведенияОМаркировкеПосле, Строка, ТаблицаКодовМаркировкиПосле, Строка.КоличествоПослеИзменения);
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(
			Строка.Товар, НоваяСтрока.НалоговаяСтавка, НаименованиеНоменклатуры);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ДобавитьОбработкуОшибокЗаполненияТабличнойЧастиЭД(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

Процедура ЗаполнитьРасширеннуюЧастьУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	ОснованиеКорректировки = ПодготовитьТаблицуДанныхДоговораУПД(
			ДанныеШапки.Основание,
			ДанныеШапки.ОснованиеНомер,
			ДанныеШапки.ОснованиеДата);
			
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ОснованиеКорректировки, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	
	МассивОснований = Новый Массив;
	
	Для Каждого Основание ИЗ ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
									Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
		Иначе
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
		КонецЕсли;
		МассивОснований.Добавить(ОписаниеОснования);
	КонецЦикла;
	
	Если МассивОснований.Количество() > 0 Тогда
		ОписаниеОснований = СтрСоединить(МассивОснований, ", ");
		ОписаниеОснований = НСтр("ru = 'Универсальный передаточный документ'") + " " + ОписаниеОснований;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
																	ОписаниеОснований);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
																	ДанныеШапки.ИныеСведения);
	
КонецПроцедуры

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидОперации = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
		
		Документ = СсылкаНаВладельца;
		ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
		
		Документ = СсылкаНаВладельца;
		ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДляЗагрузки);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(ДанныеТабличныхЧастей.Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				ЭтоУслуга = Ложь;
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Номенклатура")
						И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) Тогда
					ЭтоУслуга = ЭтоУслуга(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура);
				Иначе
					ЭтоУслуга = ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга") И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина;
				КонецЕсли;
				
				Если ЭтоУслуга Тогда
					СтрокаТаблицы = ДанныеТабличныхЧастей.Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
					КонецЕсли;
				Иначе
					
					Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("ТаблицаДокумента")
						И ДанныеДляЗаполненияСтрокиТЧ.ТаблицаДокумента = "ВозвратнаяТара" Тогда
						
						СтрокаТаблицы = ДанныеТабличныхЧастей.ВозвратнаяТара.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						
					Иначе
						
						СтрокаТаблицы = ДанныеТабличныхЧастей.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						ПодготовитьСведенияОПрослеживаемостиПриЗагрузкеИзExcel(ДанныеТабличныхЧастей.СведенияПрослеживаемости,
							СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ); 
						
						Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	Организация = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора);
	Если Организация = Неопределено Тогда
		
		ИндексСтроки = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина);
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
		ИННОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "ИНН", Истина);
		КППОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "КПП", Истина);
		
		Если ИННОрганизации <> Неопределено Тогда
			
			Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, КППОрганизации);
			Если Организация = Неопределено Тогда
				
				Организация = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации);
				
			КонецЕсли;
			Если Организация <> Неопределено Тогда
				
				ДанныеЗаполненияШапки.Вставить("Организация", Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("СчетНаОплатуПоставщика",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Основание", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПередачаТовараКомитентом", Истина);
	Если НайденноеЗначение <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ПередачаТовараКомитентом", Булево(НайденноеЗначение));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПередачаТовараКомитентом", Ложь);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Удалить("ВидОперации");
	ДанныеЗаполненияШапки.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейПоступленияТоваровУслуг();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе");
	
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		КонецЕсли;
	КонецЕсли;
	
	ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
	Если ТекстоваяИнформация <> Неопределено Тогда
		Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
			Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
				ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление"); 
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		ЭтоУслуга = Ложь;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ЭтоУслуга = ЭтоУслуга(Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(Признак) Тогда
			ЭтоУслуга = ?(Признак = "1", Ложь, Истина);
		Иначе
			ЭтоУслуга = Истина;
		КонецЕсли;
		
		Если ЭтоУслуга Тогда
			НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Иначе
			НоваяСтрока = ДанныеТабличныхЧастей.Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
		КонецЕсли;
		
		// Обязательные реквизиты:
		// Ставка "НДС исчисляется налоговым агентом" используется при продаже металлолома, сырых шкур животных
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
			
			НДСИсчисляетсяНалоговымАгентом = Истина;
			Если ИспользуетсяОбратноеНачислениеНДС Тогда
				
				НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
				// Вычисляем НДС сверху по общей ставке
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
			Иначе
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
			
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Не ЭтоУслуга Тогда
		
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			
			Если СведенияОТаможеннойДекларации <> Неопределено
				И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				
				ДанныеГТД = Новый Структура("НомерТД, КодСтраныПроисхождения", "", "");
				ДанныеГТД.НомерТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				ДанныеГТД.КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей.", ДанныеТабличныхЧастей);
	ДанныеДляЗаполнения.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейКорректировкиПоступления();
	
	Валюта = НайтиСсылкуНаОбъект("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента")) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента"));
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента"));
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Исправление);
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Корректировка);
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДокументОснование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументОснование) = Тип("Массив") И ДокументОснование.Количество() > 0 Тогда
		ДокументОснование = ДокументОснование[0];
	КонецЕсли;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Основание", ДокументОснование);
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе");
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	ИспользуетсяОбратноеНачислениеНДС = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	ДанныеТабличныхЧастей.ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		
		Если ЗначениеЗаполнено(Номенклатура)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга") Тогда
			НоваяСтрока = ДанныеТабличныхЧастей.Услуги.Добавить();
			НоваяСтрока.СодержаниеДоИзменения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			НоваяСтрока.Содержание            = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Иначе
			НоваяСтрока = ДанныеТабличныхЧастей.Товары.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		// Ставка "НДС исчисляется налоговым агентом" используется при продаже металлолома, сырых шкур животных
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
			
			Если ИспользуетсяОбратноеНачислениеНДС Тогда
				
				НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.ОбщаяСтавкаНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
				НоваяСтрока.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога"),
					Ложь,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
			Иначе
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
			
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		ДобавитьШтрихкодыТаблицуШтрихкодовУпаковокУКД(ДанныеТабличныхЧастей.ШтрихкодыУпаковок, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ДанныеТабличныхЧастей.ШтрихкодыУпаковок);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	КодВидаОперации = "01";
	Комиссионер = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДанныеКомиссионера");
	Если СтрокаДляЗагрузки.ОписаниеОбъекта = "Корректировочный" Тогда
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры")) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
		КонецЕсли;
		Если ЗначениеЗаполнено(Комиссионер) Тогда
			
			КодВидаОперации = "04";
			
		КонецЕсли;
	Иначе
		
		// Если счет-фактура на аванс.
		СчетФактураНаАванс = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "СчетФактураНаАванс", Истина);
		Если ЗначениеЗаполнено(СчетФактураНаАванс) И Булево(СчетФактураНаАванс) Тогда
			
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаАванс);
			КодВидаОперации = "02";
			
		Иначе
			
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
			Если ЗначениеЗаполнено(Комиссионер) Тогда
				КодВидаОперации = "04";
			КонецЕсли;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
	КонецЕсли;	
	ДанныеЗаполненияШапки.Вставить("КодВидаОперации", КодВидаОперации);
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования", "Реквизит");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Для Каждого Строка Из НайденнаяСтрока.Строки Цикл
			МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
		КонецЦикла;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	ВалКод = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод");
	Если НЕ  ВалКод="643" Тогда
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", ВалКод));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
	// Cчет-фактура на поступление
	ДанныеЗаполненияШапки.Вставить("Организация", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Контрагент", Контрагент); 
	
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДС"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУм"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУвел"));
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДатаИсправленияИсходногоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
	
	Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ДатаИсправленияИсходногоДокумента);
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе");
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	
	// Если счет-фактура на аванс.
	ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ДанныеОбъекта.Вставить("КодВидаОперации", "01");
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если Не (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.Значение = Неопределено) Тогда // нет данных о документе-основании
		МассивДокументовОснований = НайденнаяСтрока.Значение;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента",    0);
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", 0);
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение"));
	ДанныеОбъекта.Вставить("СуммаУвеличение",    ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение"));
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", "");
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  '00010101');
	
	НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, "СведенияОПокупателе");
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОКомиссионере"));
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаАванс);
		КодВидаОперации = "02";
	Иначе
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		Если ЗначениеЗаполнено(ДанныеОбъекта.Комиссионер) Тогда
			КодВидаОперации = "04";
		Иначе
			КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	//Заполняем документы-основания
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если НайденнаяСтрока <> Неопределено Тогда
		ТаблицаОснований = Новый ТаблицаЗначений;
		ТаблицаОснований.Колонки.Добавить("Основание");
		Если ТипЗнч(НайденнаяСтрока.Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из НайденнаяСтрока.Значение Цикл
				
				СтрокаТаблицы = ТаблицаОснований.Добавить();
				СтрокаТаблицы.Основание = Элемент;
				
			КонецЦикла;
			ТаблицаОснований.Свернуть("Основание");
		Иначе
			СтрокаТаблицы = ТаблицаОснований.Добавить();
			СтрокаТаблицы.Основание = НайденнаяСтрока.Значение;
		КонецЕсли;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", ТаблицаОснований.ВыгрузитьКолонку("Основание"));
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    0);
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", 0);
	ДанныеОбъекта.Вставить("СуммаУвеличение",    0);
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", 0);
	
	// Авансы
	Если ДанныеОбъекта.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Сумма");
		ТаблицаАвансы.Колонки.Добавить("СуммаНДС");
		ТаблицаАвансы.Колонки.Добавить("СтавкаНДС");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			СтрокаАвансы = ТаблицаАвансы.Добавить();
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			Если СтавкаНДС = СтавкаНДСИсчисляетсяНалоговымАгентом() Тогда
				СуммаБезНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
				СтрокаАвансы.СтавкаНДС = УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПоУмолчанию(ДанныеОбъекта.ДатаВходящегоДокумента);
				СтрокаАвансы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СуммаБезНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаАвансы.СтавкаНДС));
				СтрокаАвансы.Сумма = СуммаБезНДС + СтрокаАвансы.СуммаНДС;
			Иначе
				СтрокаАвансы.СтавкаНДС = СтавкаНДС;
				СтрокаАвансы.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
				СтрокаАвансы.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаАвансы.Количество() > 0 Тогда
			ДанныеОбъекта.Вставить("Авансы", ТаблицаАвансы);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеТабличныхЧастей = НовыйДанныеТабличныхЧастейКорректировкиПоступления();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(ДанныеТабличныхЧастей.Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументОснования" Тогда
					ИмяРеквизита = "ДокументПоступления";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					ЗаполнитьЗначенияСвойств(ДанныеТабличныхЧастей.Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
					
				Иначе
					СтрокаТаблицы = ДанныеТабличныхЧастей.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВидОперацииЭД", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора));
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполненияШапки.Вставить("НомерИсправления",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсходногоДокумента"));
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента")) Тогда
		ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияИсходногоДокумента"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ДанныеТабличныхЧастей", ДанныеТабличныхЧастей);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПолучитьКорректныйКодСтраны(КодСтраны)
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если Найти("0123456789", СимволКода)=0 Тогда
			//Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СтавкаНДСИсчисляетсяНалоговымАгентом()
	
	Возврат "НДС исчисляется налоговым агентом";
	
КонецФункции

Функция БезНДС()
	
	Возврат "без НДС";
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено)
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита
	|	И НЕ ИскСправочник.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяПрикладногоСправочника(ИмяСправочника)
	
	СоответствиеСправочников = Новый Соответствие;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников(СоответствиеСправочников);
	
	ИмяПрикладногоСправочника = СоответствиеСправочников.Получить(ИмяСправочника);
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

Функция ЕстьКолонкаТаблицыЗначений(СтрокаТаблицыЗначений, Колонка)
	
	ТаблицаЗначений = СтрокаТаблицыЗначений.Владелец();
	
	Возврат ТаблицаЗначений.Колонки.Найти(Колонка) <> Неопределено;
	
КонецФункции

Процедура СкопироватьЗначениеСтруктуры(Структура, ПолеИсточник, НовоеПоле)
	
	Если Структура.Свойство(ПолеИсточник) И Не Структура.Свойство(НовоеПоле) Тогда
		Структура.Вставить(НовоеПоле, Структура[ПолеИсточник]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти