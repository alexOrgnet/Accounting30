#Область ПрограммныйИнтерфейс

// Возвращает потенциально возможный доход по всем действующим патентам за указанный период.
//
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой запрашиваются сведения.
//  ДатаНачала - Дата - начало периода, за который определяется потенциальный доход.
//  ДатаОкончания - Дата - конец периода, за который определяется потенциальный доход.
//  СообщатьОбОшибках - Булево - если Истина, выводить пользователю сообщения об ошибках расчета сумм дохода.
//
// Возвращаемое значение:
//   Число   - потенциально возможный доход по действующим в указанный период патентам.
//
Функция ПотенциальноВозможныйДоход(Организация, ДатаНачала, ДатаОкончания, СообщатьОбОшибках = Истина) Экспорт
	
	ПотенциальноВозможныйДоход = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	ДанныеДействующихПатентов = ПатентыОрганизацииЗаПериод(Организация, ДатаНачала, ДатаОкончания);
	
	Для Каждого ДанныеПатента Из ДанныеДействующихПатентов Цикл
		
		Если ДанныеПатента.ПотенциальноВозможныйГодовойДоход <> 0 Тогда
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход
				+ УчетПСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
					ДанныеПатента.ПотенциальноВозможныйГодовойДоход,
					Макс(ДатаНачала, ДанныеПатента.ДатаНачала),
					Мин(ДатаОкончания, ДанныеПатента.ДатаОкончания));
		Иначе
			Если СообщатьОбОшибках Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для патента ""%1"" на %2 не указан потенциально возможный доход'"),
					ДанныеПатента.Наименование,
					ПредставлениеПериода(НачалоДня(ДанныеПатента.ДатаНачала), КонецДня(ДанныеПатента.ДатаОкончания), "ФП = Истина"));
				ОбщегоНазначения.СообщитьПользователю(
					СообщениеОбОшибке, ДанныеПатента.ДокументПатент, "ПотенциальноВозможныйГодовойДоход");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПотенциальноВозможныйДоход;
	
КонецФункции

// Возвращает сведения о патентах организации, действовавших в указанный период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой запрашиваются сведения.
//  ДатаНачала - Дата - начало периода, за который требуются сведения о патентах.
//  ДатаОкончания - Дата - конец периода, за который требуются сведения о патентах.
//
// Возвращаемое значение:
//   ТаблицаЗначений - сведения о действующих в указанный период патентах. Колонки:
//    * Ссылка - СправочникСсылка.Патенты - ссылка на деятельность по патенту
//    * ДокументПатент - ДокументСсылка.ОперацияСПатентом - ссылка на документ ввода патента
//    * Наименование - Строка(50) - наименование патента в программе
//    * ДатаНачала - Дата - день начала срока действия патента
//    * ДатаОкончания - Дата - день окончания срока действия патента
//    * ПотенциальноВозможныйГодовойДоход - Число - потенциальный годовой доход по патенту
//    * СуммаКОплате - Число - сумма налогового платежа по патенту
//    * ДатаПервогоПлатежа - Дата - дата первого налогового платежа по патенту
//    * ДатаВторогоПлатежа - Дата - дата второго налогового платежа по патенту
//    * НомерПатента - Строка - номер патента
//    * ДатаВыдачи - Дата - дата выдачи патента
//    * ПостановкаНаУчетВНалоговомОргане - ПеречислениеСсылка.ПостановкаНаУчетВНалоговомОргане -
//                                         постановка на учет в налоговорм органет, либо по месту жительства,
//                                         либо в другом налоговом органе
//    * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//                                    - налоговый орган, в котором зарегистрирован патент
//    * КодПоОКТМО - Строка(11) - код ОКТМО
//
Функция ПатентыОрганизацииЗаПериод(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	НалоговыйОрганОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Организация, "РегистрацияВНалоговомОргане");
	
	КодПоОКТМОНалоговогоОрганаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НалоговыйОрганОрганизации, "КодПоОКТМО");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                           Организация);
	Запрос.УстановитьПараметр("ДатаНачала",                            НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",                         КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("НалоговыйОрганОрганизации",             НалоговыйОрганОрганизации);
	Запрос.УстановитьПараметр("КодПоОКТМОНалоговогоОрганаОрганизации", КодПоОКТМОНалоговогоОрганаОрганизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацияСПатентом.Патент КАК Ссылка,
	|	ОперацияСПатентом.Ссылка КАК ДокументПатент,
	|	Патенты.Наименование КАК Наименование,
	|	ОперацияСПатентом.ДатаНачала КАК ДатаНачала,
	|	ОперацияСПатентом.ДатаОкончания КАК ДатаОкончания,
	|	ОперацияСПатентом.ПотенциальноВозможныйГодовойДоход КАК ПотенциальноВозможныйГодовойДоход,
	|	ОперацияСПатентом.СуммаПервогоПлатежа + ОперацияСПатентом.СуммаВторогоПлатежа КАК СуммаКОплате,
	|	ОперацияСПатентом.ДатаПервогоПлатежа КАК ДатаПервогоПлатежа,
	|	ОперацияСПатентом.ДатаВторогоПлатежа КАК ДатаВторогоПлатежа,
	|	ОперацияСПатентом.НомерПатента КАК НомерПатента,
	|	ОперацияСПатентом.ДатаВыдачи КАК ДатаВыдачи,
	|	ОперацияСПатентом.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ОперацияСПатентом.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ОперацияСПатентом.НалоговыйОрган
	|		ИНАЧЕ &НалоговыйОрганОрганизации
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ОперацияСПатентом.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ОперацияСПатентом.КодПоОКТМО
	|		ИНАЧЕ &КодПоОКТМОНалоговогоОрганаОрганизации
	|	КОНЕЦ КАК КодПоОКТМО
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ОперацияСПатентом.Патент = Патенты.Ссылка
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаОкончания >= &ДатаНачала
	|	И ОперацияСПатентом.ДатаНачала <= &ДатаОкончания";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает сведения о патентах организации, уплачиваемых в указанный период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой запрашиваются сведения.
//  ДатаНачала - Дата - начало периода, за который требуются сведения о патентах.
//  ДатаОкончания - Дата - конец периода, за который требуются сведения о патентах.
//
// Возвращаемое значение:
//   ТаблицаЗначений  - сведения об уплачиваемых в указанный период патентах. Колонки:
//    * Патент - СправочникСсылка.Патенты - ссылка на патент;
//    * ДатаНачала - Дата - дата начала действия патента
//    * ДатаОкончания - Дата - дата окончания действия патента
//
Функция ПатентыОрганизацииУплачиваемыеЗаПериод(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОперацияСПатентом.Патент КАК Патент
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|	И (ОперацияСПатентом.ДатаПервогоПлатежа МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ ОперацияСПатентом.ДатаВторогоПлатежа МЕЖДУ &ДатаНачала И &ДатаОкончания)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Рассчитывает и обновляет суммы налога по патентам с учетом освобождения от налога
// за 2 квартал 2020 года для пострадавших от коронавируса.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация
//  ДеятельностьОтнесенаКПострадавшим - Булево - значение настройки "Деятельность отнесена к пострадавшим от коронавируса"
//     Если передано Истина, рассчитывается и записывается сумма освобождения от налога за 2 квартал 2020 года
//     во всех патентах организации, срок которых пересекается со 2 кварталом 2020 года.
//     Если передано Ложь, сумма освобождения от налога в таких патентах очищается.
//
Функция ОбновитьОсвобождениеОтНалогаДляПострадавшихОтКоронавируса(Организация, ДеятельностьОтнесенаКПострадавшим) Экспорт
	
	ПатентыПересчитатьВручную = Новый ТаблицаЗначений;
	ПатентыПересчитатьВручную.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОперацияСПатентом"));
	ПатентыПересчитатьВручную.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	ПатентыДляПересчета = ПатентыОрганизацииЗаПериод(
		Организация,
		ПериодОсвобождения.Начало,
		ПериодОсвобождения.Конец);
	
	Если ПатентыДляПересчета.Количество() = 0 Тогда
		Возврат ПатентыПересчитатьВручную;
	КонецЕсли;
	
	Для Каждого ДанныеПатента Из ПатентыДляПересчета Цикл
		
		НовыйПатентПересчитатьВручную = ПатентыПересчитатьВручную.Добавить();
		НовыйПатентПересчитатьВручную.Ссылка = ДанныеПатента.ДокументПатент;
		НовыйПатентПересчитатьВручную.Наименование = ДанныеПатента.Наименование;
		
	КонецЦикла;
	
	Возврат ПатентыПересчитатьВручную;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ДопСтроки - Таблица значений - Строки табличной части заявления
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеУтратаПраваПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявления(ПараметрыОтчета);
	ДанныеПатентов = ДанныеЗаполнения.ДанныеПатентов;
	
	КоличествоПатентовНаЛисте = КоличествоПатентовНаЛистеЗаявленияОбУтрате();
	
	НомерПатентаПоПорядку = 1;
	НоваяСтрока = ТаблицаКонтейнера.Добавить();
	
	Для Каждого Патент Из ДанныеПатентов Цикл
		
		Если НомерПатентаПоПорядку > КоличествоПатентовНаЛисте Тогда
			НомерПатентаПоПорядку = 1;
			НоваяСтрока = ТаблицаКонтейнера.Добавить();
		КонецЕсли;
		
		НоваяСтрока[СтрШаблон("НОМЕР_ПАТЕНТА_%1", НомерПатентаПоПорядку)] = Патент.НомерПатента;
		НоваяСтрока[СтрШаблон("ДАТА_НАЧАЛА_%1", НомерПатентаПоПорядку)] = Патент.ДатаНачала;
		НоваяСтрока[СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", НомерПатентаПоПорядку)] = Патент.ДатаОкончания;
		
		НомерПатентаПоПорядку = НомерПатентаПоПорядку + 1;
		
	КонецЦикла;
	
	ТитульныйЛист = Контейнер.Титульный;
	ТитульныйЛист.Вставить("ДАТА_УТРАТЫ_ПРАВА", ДанныеЗаполнения.ДатаУтратыПрава);
	
	Если ДанныеЗаполнения.Свойство("КодПричины") Тогда
		ТитульныйЛист.Вставить("КОД_ПРИЧИНЫ", ДанныеЗаполнения.КодПричины);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НалоговыйОрган") Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеЗаполнения.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеЗаполнения.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.ПараметрыЗаполнения.Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган, НалоговыйОрган.Код");
		
	ТитульныйЛист.Вставить("НОМЕР_ПАТЕНТА", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДАТА_ВЫДАЧИ",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеПатента.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   * ПараметрыЗаполнения - Структура - дополнительные параметры для заполнения отчета
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2020_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Патент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета.ПараметрыЗаполнения, "Патент", Неопределено);
	
	Если Не ЗначениеЗаполнено(Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган");
	
	ТитульныйЛист = Контейнер.Титульная;
	ТитульныйЛист.Вставить("НомПатент", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДатаВыд",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КодНО", ДанныеПатента.НалоговыйОрган);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияУтратаПраваФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КОД_ПРИЧИНЫ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_УТРАТЫ_ПРАВА", Истина, Ложь);
	Для Сч = 1 по КоличествоПатентовНаЛистеЗаявленияОбУтрате() Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НОМЕР_ПАТЕНТА_%1", Сч) , Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_НАЧАЛА_%1", Сч), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", Сч), Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияПрекращениеПатентаФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НОМЕР_ПАТЕНТА", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ВЫДАЧИ", Истина, Ложь);
	
КонецПроцедуры

// Возвращает данные для заполнения уведомления об уменьшении налога на расходы на онлайн-кассы
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация уведомления
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган, в который подается уведомление.
//
// Возвращаемое значение:
//   Структура, Неопределено - данные для заполнения нового уведомления, см. Отчеты.РегламентированноеУведомлениеУменьшениеНалогаККТ.СформироватьУведомление();
//                             если для переданной организации заполнить уведомление нельзя, возвращается Неопределено.
//
//
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалога(Организация, РегистрацияВНалоговомОргане) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасходыККТ = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.ДетальныеСведенияОРасходах(
		Организация,
		РегистрацияВНалоговомОргане);
	
	УменьшениеНалога = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.УменьшениеПлатежейПоПатентам(
		Организация,
		РегистрацияВНалоговомОргане);
	
	ДанныеУведомления = Новый Структура;
	
	// Шапка
	ДанныеУведомления.Вставить("Организация", Организация);
	ДанныеУведомления.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	// Общие итоги
	ОбщаяСуммаРасходов    = РасходыККТ.Итог("Сумма");
	ОбщийНалоговыйВычет   = УменьшениеНалога.Итог("НалоговыйВычет");
	НеиспользованныйВычет = Макс(ОбщаяСуммаРасходов - ОбщийНалоговыйВычет, 0);
	
	ДанныеУведомления.Вставить("Стр110", ОбщаяСуммаРасходов);
	ДанныеУведомления.Вставить("Стр210", НеиспользованныйВычет);
	
	// Данные таблицы А - расходы на кассы
	ДанныеЛистовА = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	Для Каждого РасходККТ Из РасходыККТ Цикл
		
		ЛистА = НовыйСтруктураДанныхЗаполненияЛистА();
		
		ЛистА.МоделККТ    = РасходККТ.Модель;
		ЛистА.НомерККТ    = РасходККТ.ЗаводскойНомер;
		ЛистА.РегНомерККТ = РасходККТ.РегистрационныйНомер;
		ЛистА.ДатаРегККТ  = РасходККТ.ДатаРегистрации;
		ЛистА.СумРасхККТ  = РасходККТ.Сумма;
		
		ДанныеЛистовА.Добавить(ЛистА);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовА", ДанныеЛистовА);
	
	// Данные таблицы Б - распределение расходов по патентам
	ДанныеЛистовБ = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	УменьшениеНалога.Индексы.Добавить("Патент");
	
	Патенты = ОбщегоНазначения.ВыгрузитьКолонку(УменьшениеНалога, "Патент", Истина);
	Для Каждого Патент Из Патенты Цикл
		
		ЛистБ = НовыйСтруктураДанныхЗаполненияЛистБ();
		
		СтрокиУменьшенияПоПатенту = УменьшениеНалога.НайтиСтроки(Новый Структура("Патент", Патент));
		
		СуммаНалога = 0;
		
		Для Каждого УменьшаемыйПлатеж Из СтрокиУменьшенияПоПатенту Цикл
			
			ЛистБ.Стр120 = УменьшаемыйПлатеж.НомерПатента;
			ЛистБ.Стр130 = УменьшаемыйПлатеж.ДатаВыдачиПатента;
			
			Если УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ПервыйПлатеж Тогда
				ЛистБ.Стр170 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр180 = УменьшаемыйПлатеж.НалоговыйВычет;
			ИначеЕсли УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ВторойПлатеж Тогда
				ЛистБ.Стр190 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр200 = УменьшаемыйПлатеж.НалоговыйВычет;
			Иначе // Единственный платеж
				ЛистБ.Стр150 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр160 = УменьшаемыйПлатеж.НалоговыйВычет;
			КонецЕсли;
			
			СуммаНалога = СуммаНалога + УменьшаемыйПлатеж.СуммаПлатежа;
			
		КонецЦикла;
		
		ЛистБ.Стр140 = СуммаНалога;
		
		ДанныеЛистовБ.Добавить(ЛистБ);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовБ", ДанныеЛистовБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Возвращает деятельность по патенту для подстановки в шапку документа возврата оплаты по платежной карте.
// Патент определяется в соответствии с настройками учетной политики и по данным сделок, указанных в табличной части документа.
//
// Параметры:
//  ПараметрыВозвратаОплаты  - Структура - параметры, описывающие документ возврата оплаты.
//                             Состав - см. НовыеПараметрыВозвратаПокупателюОплатыПоПлатежнойКарте().
//
// Возвращаемое значение:
//   СправочникСсылка.Патенты   - деятельность по патенту для подстановки в документ.
//
Функция ПатентВозвратаОплатыПоПлатежнойКарте(ПараметрыВозвратаОплаты) Экспорт
	
	// Патент в шапке документа возврата покупателю оплаты по платежной карте заполняется у плательщиков ПСН в случаях, когда:
	// - сделки из строк табличной части РасшифровкаПлатежа относятся к одному патенту
	// Во всех остальных ситуациях указывается пустой патент.
	
	ПатентВозвратаОплаты = Справочники.Патенты.ПустаяСсылка();
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(ПараметрыВозвратаОплаты.Организация, ПараметрыВозвратаОплаты.Дата) Тогда
		Возврат ПатентВозвратаОплаты;
	КонецЕсли;
	
	МассивПатентов = Новый Массив;
	
	Для Каждого Сделка Из ПараметрыВозвратаОплаты.Сделки Цикл
		Если Не ЗначениеЗаполнено(Сделка) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумента = Сделка.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) Тогда
			ПатентСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Патент");
			Если ЗначениеЗаполнено(ПатентСделки) Тогда
				МассивПатентов.Добавить(ПатентСделки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивПатентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПатентов);
	
	Если МассивПатентов.Количество() = 1 Тогда
		ПатентВозвратаОплаты = МассивПатентов[0];
	КонецЕсли;
	
	Возврат ПатентВозвратаОплаты;
	
КонецФункции

// Конструктор структуры параметров, требующихся для заполнения патента
// в шапке документа возврата оплаты по платежной карте.
//
// Возвращаемое значение:
//   Структура   - параметры возврата оплаты со значениями по умолчанию.
//      * Организация - СправочникСсылка.Организация - организация возврата денежных средств.
//      * Дата - Дата - дата возврата денежных средств.
//      * Сделки - Массив - сделки, указанные в строках расшифровки платежа.
//
Функция НовыеПараметрыВозвратаОплатыПоПлатежнойКарте() Экспорт
	
	ПараметрыВозвратаОплаты = Новый Структура;
	
	ПараметрыВозвратаОплаты.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыВозвратаОплаты.Вставить("Дата", '00010101');
	ПараметрыВозвратаОплаты.Вставить("Сделки", Новый Массив);
	
	Возврат ПараметрыВозвратаОплаты;
	
КонецФункции

// Возвращает патент для подстановки в шапку документа поступления денежных средств.
// Патент определяется в соответствии с настройками учетной политики, характером операции
// и порядком отражения доходов(авансов) в табличной части документа.
//
// Параметры:
//  ПараметрыПлатежа  - Структура - параметры, описывающие документ. Состав - см. НовыеПараметрыВходящегоПлатежа().
//
// Возвращаемое значение:
//   СправочникСсылка.Патенты   - патент для подстановки в документ.
//
Функция ПатентВходящегоПлатежа(ПараметрыПлатежа) Экспорт
	
	// Патент в шапке документов поступления денежных средств заполняется у плательщиков ПСН в случаях, когда:
	// - в одной из строк табличной части РасшифровкаПлатежа задано отражение доходов/авансов по патенту;
	// - принимается розничная выручка из неавтоматизированной торговой точки, и учет в рознице ведется в ценах продажи.
	// Во всех остальных ситуациях указывается пустой патент.
	
	ПатентПлатежа = Справочники.Патенты.ПустаяСсылка();
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата) Тогда
		Возврат ПатентПлатежа;
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.ЕстьАвансыПолученные(ПараметрыПлатежа.ВидОперации)
		Или УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоПлатежнымКартам(ПараметрыПлатежа.ВидОперации) Тогда
		
		Для Каждого ОтражениеДохода Из ПараметрыПлатежа.ЗначенияОтраженияДоходов Цикл
			Если ТипЗнч(ОтражениеДохода) = Тип("СправочникСсылка.Патенты") И Не ОтражениеДохода.Пустая() Тогда
				// Авансы и доходы могут быть отражены только по одному патенту,
				// выбор нескольких патентов должен быть исключен при проверке заполнения документа.
				ПатентПлатежа = ОтражениеДохода;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыПлатежа.ВыручкаСНТТ
		И УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(ПараметрыПлатежа.ВидОперации) Тогда
		
		СпособУчетаВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
		
		Если СпособУчетаВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			ПатентПлатежа = ПараметрыПлатежа.Патент;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПатентПлатежа;
	
КонецФункции

// Конструктор структуры параметров, требующихся для заполнения патента
// в шапке документов поступления денежных средств.
//
// Возвращаемое значение:
//   Структура   - параметры платежа со значениями по умолчанию.
//
Функция НовыеПараметрыВходящегоПлатежа() Экспорт
	
	ПараметрыПлатежа = Новый Структура;
	
	ПараметрыПлатежа.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); // Организация платежа.
	ПараметрыПлатежа.Вставить("Дата", '00010101'); // Дата платежа.
	ПараметрыПлатежа.Вставить("ВидОперации", Неопределено); // Вид операции документа платежа.
	ПараметрыПлатежа.Вставить("Патент", Справочники.Патенты.ПустаяСсылка()); // Текущий патент, указанный в платеже.
	ПараметрыПлатежа.Вставить("ЗначенияОтраженияДоходов", Новый Массив); // Массив - значения порядка отражения доходов/авансов, указанные в строках расшифровки платежа.
	ПараметрыПлатежа.Вставить("ВыручкаСНТТ", Ложь); // Признак приема розничной выручки в неавтоматизированной торговой точке.
	
	Возврат ПараметрыПлатежа;
	
КонецФункции

// Возвращает параметры деятельности на патентной системе налогообложения по умолчанию
// для операций реализации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   Структура   - параметры деятельности на патенте, состав:
//                  * ДеятельностьНаПатенте - Булево - признак отнесения реализации к патентной системе налогообложения;
//                  * Патент - СправочникСсылка.Патента - патент по умолчанию, к которому может быть отнесена реализация.
//
Функция ДеятельностьНаПатентеПоУмолчанию(Организация, Знач Период) Экспорт
	
	ПараметрыДеятельности = Новый Структура("ДеятельностьНаПатенте, Патент", Ложь, Справочники.Патенты.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ПараметрыДеятельности;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Период)
			Или УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			
			ПараметрыДеятельности.ДеятельностьНаПатенте = Ложь;
			
		ИначеЕсли УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Период) Тогда
			
			ПараметрыДеятельности.ДеятельностьНаПатенте = Истина;
			ПараметрыДеятельности.Патент = ВидДеятельностиПоПатентуПоУмолчанию(Организация, Период);
			
		ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Период)
					= Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				ПараметрыДеятельности.ДеятельностьНаПатенте = Истина;
				ПараметрыДеятельности.Патент = ВидДеятельностиПоПатентуПоУмолчанию(Организация, Период);
			Иначе
				ПараметрыДеятельности.ДеятельностьНаПатенте = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыДеятельности;
	
КонецФункции

// Возвращает деятельность по патенту, применяемую организацией на указанную дату, если деятельность одна.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить деятельность по патенту.
//  Дата - Дата - Дата, на которую необходимо получить деятельность по патенту.
//
// Возвращаемое значение:
//  СправочникСсылка.Патенты - деятельность по умолчанию.
//
Функция ВидДеятельностиПоПатентуПоУмолчанию(Организация, Дата) Экспорт
	
	Деятельности = ВидыДеятельностиПоПатентуОрганизации(Организация, Дата);
	
	Если Деятельности.Количество() = 1 Тогда
		Возврат Деятельности[0];
	КонецЕсли;
	
	Возврат Справочники.Патенты.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на документ патента, применяемый организацией на указанную дату, если он один.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить данные по патенту.
//  Дата - Дата - Дата, на которую необходимо получить данные по патенту.
//
// Возвращаемое значение:
//  ДокументСсылка.ОперацияСПатентом - Ссылка на документ патента.
//
Функция ДанныеПатентаПоУмолчанию(Организация, Дата) Экспорт
	
	Патенты = ПолученныеПатентыОрганизации(Организация, Дата);
	
	Если Патенты.Количество() = 1 Тогда
		Возврат Патенты[0];
	КонецЕсли;
	
	Возврат Документы.ОперацияСПатентом.ПустаяСсылка();
	
КонецФункции

// Проверяет наличие действующих патентов на указанную дату.
//
// Параметры:
//  Период - Дата - проверяемый день.
//
// Возвращаемое значение:
//  Булево - если Истина, имеется как минимум один патент со сроком действия, включающим указанный день.
//
Функция ИмеютсяДействующиеПатенты(Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаНачала <= &Период
	|	И ОперацияСПатентом.ДатаОкончания >= &Период";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает дату ввода в действие патентной системы как самостоятельной системы налогообложения.
// Возвращаемое значение:
//
//  Дата - дата начала применения патентной системы налогообложения.
//
Функция ДатаНачалаДействияПатентнойСистемы() Экспорт
	
	Возврат '20130101';
	
КонецФункции

// Возвращает сведения о допустимости применении в организации - ИП на патенте
// налогового вычета по расходам на приобретение онлайн-касс.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация для определения применимости вычета.
//   Период - Дата - дата, на которую определяется применение вычета.
//
// Возвращаемое значение:
//   Булево - если ИСТИНА, вычет применяется.
//
Функция ПрименяетсяВычетПоОнлайнКассам(Организация, Период) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Период >= ДатаНачалаПримененияВычетаНаОнлайнКассы()
		И Период <= ДатаОкончанияПримененияВычетаНаОнлайнКассы();
	
КонецФункции

// Возвращает признак доступности пользователю более одного патента на указанную дату.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, количество патентов у которой необходимо проверить.
//  Дата - Дата - Дата, на которую необходимо проверить количество патентов.
//
// Возвращаемое значение:
//  Булево - Признак доступности текущему пользователю нескольких патентов.
//
Функция ИспользуетсяНесколькоПатентов(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперацияСПатентом.Патент) КАК КоличествоПатентов
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И ОперацияСПатентом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПатентов > 1;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает список видов деятельности патентов, полученных данной организацией.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация, деятельности которой требуется получить.
//  ПериодДействия - Дата, Неопределено - Если указан, будут отобраны только действующие в указанную дату деятельности.
//                                        В противном случае будут возвращены все деятельности, используемые когда либо организацией.
//
// Возвращаемое значение:
//   Массив   - список видов деятельности по патентам организации.
//
Функция ВидыДеятельностиПоПатентуОрганизации(Организация, ПериодДействия = Неопределено) Экспорт
	
	ВидыДеятельности = Новый Массив;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОперацияСПатентом.Патент КАК ВидДеятельности
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен");
	
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ЗначениеЗаполнено(ПериодДействия) Тогда
		ТекстУсловия = "ОперацияСПатентом.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
			|	И ОперацияСПатентом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)";
		УсловияЗапроса.Добавить(ТекстУсловия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодДействия);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВидыДеятельности = Результат.Выгрузить().ВыгрузитьКолонку("ВидДеятельности");
	КонецЕсли;
	
	Возврат ВидыДеятельности;
	
КонецФункции

// Возвращает список информации по патентам, полученным данной организацией.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация, информацию по патентам которой требуется получить.
//  ПериодДействия - Дата, Неопределено - Если указан, будет отобрана только информация по действующим в указанную дату патентам.
//                                        В противном случае будет возвращена информация по всем полученным патентам организации.
//
// Возвращаемое значение:
//   Массив   - список полученных патентов организации.
//
Функция ПолученныеПатентыОрганизации(Организация, ПериодДействия = Неопределено) Экспорт
	
	Патенты = Новый Массив;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацияСПатентом.Ссылка КАК ДокументПатент
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен");
	
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ЗначениеЗаполнено(ПериодДействия) Тогда
		ТекстУсловия = "ОперацияСПатентом.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
			|	И ОперацияСПатентом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)";
		УсловияЗапроса.Добавить(ТекстУсловия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодДействия);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Патенты = Результат.Выгрузить().ВыгрузитьКолонку("ДокументПатент");
	КонецЕсли;
	
	Возврат Патенты;
	
КонецФункции

// Возвращает документ патента по виду деятельности и сроку оплаты.
//
// Параметры:
//  Патент    - СправочникСсылка.Патенты - Деятельность по патенту, документ патента по которому необходимо получить.
//  Срок      - Дата - срок оплаты патента, по которому необходимо получить документ патента.
//
// Возвращаемое значение:
//   ДокументСсылка.ОперацияСПатентом   - документ патента.
//
Функция ДокументПатентПоДеятельностиИСроку(Патент, Срок) Экспорт
	
	ДокументПатент = Документы.ОперацияСПатентом.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Патент", Патент);
	Запрос.УстановитьПараметр("Срок",   Срок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацияСПатентом.Ссылка КАК ДокументПатент
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Патент = &Патент
	|	И ОперацияСПатентом.Проведен
	|	И (ОперацияСПатентом.ДатаПервогоПлатежа = &Срок
	|			ИЛИ ОперацияСПатентом.ДатаВторогоПлатежа = &Срок)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДокументПатент = Выборка.ДокументПатент;
	КонецЕсли;
	
	Возврат ДокументПатент;
	
КонецФункции

// Проверяет, есть ли действующий патент по виду деятельности на указанную дату
//
// Параметры:
//  ВидДеятельности - СправочникСсылка.Патенты - Деятельность по патенту, которую необходимо проверить.
//  Дата - Дата - Дата, которая должна входить в период действия патента.
//
// Возвращаемое значение:
//   Булево   - Истина, если есть действующий патент на указанную дату
//
Функция ДеятельностьПоПатентуДействуетНаДату(ВидДеятельности, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДеятельности) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОрганизацияДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "Владелец");
	
	Возврат ПатентДоступенДляВыбора(ВидДеятельности, ОрганизацияДеятельности, Дата);
	
КонецФункции

// Возвращает сведения о последнем патенте
// Может быть как действующим, так и недействующим
//
// Параметры:
//  Патент - СправочникСсылка.Патенты - Вид деятельности по патенту, по которому необходимо получить сведения
// 
// Возвращаемое значение:
//   Структура - Сведения по последнем патенте
//    * НомерПатента - Номер патента
//    * ДатаВыдачи - Дата выдачи патента
//    * ДатаНачала - Дата начала срока действия патента
//    * ДатаОкончания - Дата окончания срока действия патента
//
Функция СведенияДействующегоПатента(Патент) Экспорт
	
	СведенияПатента = Новый Структура("НомерПатента, ДатаВыдачи, ДатаНачала, ДатаОкончания",
		"", '00010101', '00010101', '00010101');
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Патент", Патент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОперацияСПатентом.НомерПатента КАК НомерПатента,
	|	ОперацияСПатентом.ДатаВыдачи КАК ДатаВыдачи,
	|	ОперацияСПатентом.ДатаНачала КАК ДатаНачала,
	|	ОперацияСПатентом.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Патент = &Патент
	|	И ОперацияСПатентом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СведенияПатента, Выборка);
	КонецЕсли;
	
	Возврат СведенияПатента;
	
КонецФункции

// Актуализирует данные по действующим патентам с учетом даты закрытия
// Дата окончания патента будет равна дате закрытия ИП.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Закрытая организация
//
Процедура ОбновитьСведенияПоПатентамПриЗакрытииИП(Организация) Экспорт
	
	ДатаЗакрытия = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаЗакрытияОрганизации(Организация);
	Если Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗакрытияСУчетомПереноса = УточнитьСрокОплатыПатента(ДатаЗакрытия);
	
	СрокУплатыПатента = СрокУплатыПатентаПриЗакрытииИП();
	ДатаУплатыПатента = ДатаЗакрытия + СрокУплатыПатента * 86400;
	
	ДействующиеПатенты = ПолученныеПатентыОрганизации(Организация, КонецДня(ДатаЗакрытия));
	Для Каждого ТекущийПатент Из ДействующиеПатенты Цикл
		
		ТекущийПатентОбъект = ТекущийПатент.ПолучитьОбъект();
		ТекущийПатентОбъект.ДатаОкончания = ДатаЗакрытия;
		
		НалогПоПатенту = УчетПСНКлиентСервер.НалогПоПатенту(
			ТекущийПатентОбъект.ПотенциальноВозможныйГодовойДоход,
			ТекущийПатентОбъект.ДатаНачала,
			ТекущийПатентОбъект.ДатаОкончания,
			ТекущийПатентОбъект.НалоговаяСтавка);
		
		РасчетПлатежей = УчетПСНКлиентСервер.РасчетПлатежейПоПатенту(
			НалогПоПатенту,
			ТекущийПатентОбъект.ДатаНачала,
			ТекущийПатентОбъект.ДатаОкончания);
		
		Если РасчетПлатежей.ДатаПервогоПлатежа = ДатаЗакрытияСУчетомПереноса Тогда
			РасчетПлатежей.ДатаПервогоПлатежа = ДатаУплатыПатента;
		ИначеЕсли РасчетПлатежей.ДатаВторогоПлатежа = ДатаЗакрытияСУчетомПереноса Тогда
			РасчетПлатежей.ДатаВторогоПлатежа = ДатаУплатыПатента;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущийПатентОбъект, РасчетПлатежей);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийПатентОбъект, , , РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает вид деятельности, полученную по сведениям патента.
// Поиск осуществляется по номеру патента и периоду действия патента.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ИП, для которого необходимо получить вид деятельности
//  НомерПатента - Строка - Номер патента по которому необходимо осуществить поиск.
//  ДатаНачала - Дата - Дата начала срока действия патента
//  ДатаОкончания - Дата - Дата окончания срока действия патента
//
// Возвращаемое значение:
//  СправочникСсылка.Патенты - вид деятельности.
//
Функция ВидДеятельностиПоСведениямПатента(Организация, НомерПатента = "", ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ВидДеятельности = Справочники.Патенты.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ВидДеятельности;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерПатента)
		И Не ЗначениеЗаполнено(ДатаНачала)
		И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат ВидДеятельности;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОперацияСПатентом.Патент КАК ВидДеятельности
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен");
	
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Если ЗначениеЗаполнено(НомерПатента) Тогда
		УсловияЗапроса.Добавить("ОперацияСПатентом.НомерПатента = &НомерПатента");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстУсловия = "КОНЕЦПЕРИОДА(ОперацияСПатентом.ДатаНачала, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ)
			|	И КОНЕЦПЕРИОДА(ОперацияСПатентом.ДатаОкончания, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)";
		УсловияЗапроса.Добавить(ТекстУсловия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НомерПатента",  НомерПатента);
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВидДеятельности = Выборка.ВидДеятельности;
	КонецЕсли;
	
	Возврат ВидДеятельности;
	
КонецФункции

// Возвращает ссылку на патент, действующий на дату, по виду деятельности
//
// Параметры:
//  ВидДеятельности - СправочникСсылка.Патенты - Деятельность по патенту, по которому необходимо получить сведения
//  Дата - Дата - Дата, которая должна входить в период действия патента.
// 
// Возвращаемое значение:
//   ДокументСсылка.ОперацияСПатентом, Неопределено - Неопределено, если нет действующего патента.
//
Функция ПатентПоВидуДеятельностиНаДату(ВидДеятельности, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДеятельности) Или Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидДеятельности", ВидДеятельности);
	Запрос.УстановитьПараметр("Дата",            Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацияСПатентом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Патент = &ВидДеятельности
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаНачала <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И ОперацияСПатентом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область РаботаСФормами

// Процедура изменяет значения реквизитов, связанных с учетом патента,
// в соответствии с учетной политикой, действующей на дату документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором требуется обработать изменение даты.
//
Процедура ДатаПриИзменении(Объект) Экспорт
	
	ПараметрыУчетаПСН = Новый Структура("ДеятельностьНаПатенте, Патент", Ложь, Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаПСН, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте
		И Не УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Ложь;
		ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
	ИначеЕсли УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте Тогда
		
		// Проверим, что патент действует на указанную дату.
		Если ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент)
			И Не ПатентДоступенДляВыбора(ПараметрыУчетаПСН.Патент, Объект.Организация, Объект.Дата) Тогда
			ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним "Патент", если на указанную дату действует только 1 патент.
		Если Не ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент) Тогда
			ПараметрыУчетаПСН.Патент = ВидДеятельностиПоПатентуПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыУчетаПСН);
	
КонецПроцедуры

// Проверяет, включает ли период действия патента указанную дату.
//
// Параметры:
//  Патент - СправочникСсылка.Патенты - Патент, период действия которого необходимо проверить.
//  Организация - СправочникСсылка.Организации - Организация, которой принадлежит патент.
//  Дата - Дата - Дата, которая должна входить в период действия патента.
//
// Возвращаемое значение:
//  Булево - Период действия патента включает указанную дату.
//
Функция ПатентДоступенДляВыбора(Патент, Организация, Дата) Экспорт
	
	Патенты = ВидыДеятельностиПоПатентуОрганизации(Организация, Дата);
	
	Возврат Патенты.Найти(Патент) <> Неопределено;
	
КонецФункции

// Настраивает данные и элементы форм документов, поддерживающие выбор патента.
// Заполняет перечень доступных патентов и список выбора для поля патента.
// Вызывается при начальной подготовке формы и при изменении данных объекта, влияющих на доступные
// для выбора патенты.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, в которой предусмотрен выбор патента.
//           Для настройки выбора патента форма должна содержать реквизит формы с типом "СписокЗначений"
//           и с имененм "СписокПатентов". При несоответствии требований настройка не производится.
//
Процедура НастроитьВыборПатента(Форма) Экспорт
	
	Если Не УчетПСНКлиентСервер.ФормаПоддерживаетВыборПатента(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим доступные патенты и список выбора перед проверкой их востребованности.
	// Если выбор патента не потребуется, то незачем держать в форме лишние данные.
	ОчиститьСписокПатентов(Форма);
	
	ИспользоватьВыборПатента = ИспользоватьВыборПатента(Форма);
	
	Если ИспользоватьВыборПатента Тогда
		ЗаполнитьСписокПатентов(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеДоходов

// Возвращает список вариантов отражения доходов, допустимых для организации-плательщика ПСН на переданную дату.
// Для организаций, не являющихся предпринимателями на патенте, возвращает пустой список.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   СписокЗначений   - список с перечнем допустимых вариантов отражения доходов, содержимое:
//                       * значения - порядок отражения доходов, указывается в документах поступления денежных средств;
//                       * представления - представления вариантов отражения доходов для отображения в списках выбора.
//
Функция ДопустимыеВариантыОтраженияДоходов(Организация, Период) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Период);
	
	Запрос.Текст = ТекстЗапросаДоступныхПатентов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доход по патенту ""%1""'"),
			Выборка.Наименование);
		СписокВариантов.Добавить(Выборка.Патент, Представление);
	КонецЦикла;
	
	ДополнитьСписокПатентовКомандойСозданияНовогоПатента(СписокВариантов);
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения уведомления об уменьшении налога по патенту на сумму страховых взносов
// и больничных пособий. Определяется актуальная форма уведомления, для которой заполняются данные
//
// Параметры:
// ОбщиеДанные - Структура - см. ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту.Форма.НовыеДанныеПомощника
// АдресДанныхПоПатентам - Строка - адрес временного хранилища в котором хранится таблица с данными патентов.
//                         формируется в обработке ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту
// ОбщаяСуммаРасходов - Число - общая сумма расходов на страховые взносы и пособия, которая может быть применена
//                      для уменьшения налоговых платежей по патентам
// Ключ - УникальныйИдентификатор - идентификатор для получения адреса временного хранилища.
//        В хранилище помещаются данные, которые нельзя использовать на клиенте
//
// Возвращаемое значение:
//  Структура - данные для заполнения нового уведомления
// 
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы(ОбщиеДанные, АдресДанныхПоПатентам, ОбщаяСуммаРасходов, Ключ) Экспорт
	
	Патенты = ПолучитьИзВременногоХранилища(АдресДанныхПоПатентам);
	ПутьКФорме = ОбщиеДанные.ПутьКФорме;
	ЧастиПутиФормы = СтрРазделить(ПутьКФорме, ".");
	ИмяФормыОтчета = ЧастиПутиФормы[ЧастиПутиФормы.ВГраница()];
	Если СтрЧислоВхождений(ИмяФормыОтчета, "Форма2020") > 0 Тогда
		Возврат ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы_Форма2020(
			ОбщиеДанные, Патенты, Ключ);
	Иначе
		Возврат ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы_Форма2021(
			ОбщиеДанные, Патенты, ОбщаяСуммаРасходов, Ключ);
	КонецЕсли;
	
КонецФункции

// Возвращает актуальную форму уведомления об уменьшении налога на сумму страховых взносов и больничных пособий
//
// Возвращаемое значение:
//  Строка - полный путь к форме уведомления
//
Функция ПутьКФормеУведомленияУменьшенияНалогаПСН() Экспорт
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы;
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
		ВидУведомления);
	
	ПутьКФорме = "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФормыОтчета";
	
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
		Формы = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
		Если Формы.Количество() > 1 Тогда
			Формы.Сортировать("ДатаНачала Убыв");
		КонецЕсли;
		Если ЗначениеЗаполнено(Формы) Тогда
			ИмяФормы = Формы[0].ИмяФормы;
			ПутьКФорме = СтрШаблон("Отчет.%1.Форма.%2", ИмяОтчета, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКФорме;
	
КонецФункции

// Проверяет, присутствуют ли остатки расчетов с покупателями по деятельности на патенте.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для получения остатков.
//  Дата - Дата - дата, на которую проверяем остаток.
// 
// Возвращаемое значение:
//   Булево - если Истина, то на счетах УСН.03 и УСН.23 есть остатки.
//
Функция ЕстьОстаткиРасчетовСПокупателямиПоДеятельностиНаПатенте(Организация, Дата) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	СчетаРасчетовПоПатенту = Новый Массив;
	СубсчетаУСН03 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	Для каждого СубсчетУСН03 Из СубсчетаУСН03 Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СубсчетУСН03) Тогда
			СчетаРасчетовПоПатенту.Добавить(СубсчетУСН03);
		КонецЕсли;
	КонецЦикла;
	СубсчетаУСН23 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	Для каждого СубсчетУСН23 Из СубсчетаУСН23 Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СубсчетУСН23) Тогда
			СчетаРасчетовПоПатенту.Добавить(СубсчетУСН23);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("СчетаРасчетовПоПатенту", СчетаРасчетовПоПатенту);
	Запрос.УстановитьПараметр("ДатаОстатков",           НачалоДня(Дата));
	Запрос.УстановитьПараметр("ВидСубконто",            ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьРасчетыПоПСН
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В (&СчетаРасчетовПоПатенту),
	|				&ВидСубконто,
	|				Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Определяет, нужно ли учитывать задолженность по деятельности на патенте при проведении взаиморасчетов.
// Необходимость учета задолженности определяется в зависимости от того, применялась ли патентная система налогообложения
// в течении последних трех лет.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для проверки.
//  Дата - Дата - дата, на которую необходимо проверить.
//
// Возвращаемое значение:
//   Булево - если Истина, то необходимо учитывать задолженность по ПСН
//
Функция УчитыватьЗадолженностьПоДеятельностиНаПатенте(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	НачалоИнтервала    = ДобавитьМесяц(НачалоГода(Дата), -36);
	ОкончаниеИнтервала = КонецДня(Дата);
	
	Возврат УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, НачалоИнтервала, ОкончаниеИнтервала);
	
КонецФункции

// Возвращает истина, если есть взносы за работников отнесенные на деятельность ПСН
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - плательщик взносов.
//   НачалоПериода - Дата - начало периода уплаты взносов.
//   КонецПериода  - Дата - конец периода уплаты взносов.
//
// Возвращаемое значение:
//   Булево - Истина если есть взносы за работников отнесенные на деятельность ПСН
//
Функция РаботникиЗадействованыВДеятельностиНаПСН(Организация, НачалоПериода, КонецПериода) Экспорт

	ВзносыЗаРаботников = УчетЗарплаты.ЕстьВзносыЗаРаботников(Организация, НачалоПериода, КонецПериода);
	
	Возврат ВзносыЗаРаботников.ЕстьРаботникиПСН;

КонецФункции

// Возвращает сумму налога ПСН на дату по указанному патенту
//
// Параметры:
//  ДокументПатент - ДокументСсылка.ОперацияСПатентом - патент, по которому рассчитывается налог
//  Период         - Дата - дата включительно, по которую рассчитывается налог
//  ПериодСобытия  - Дата - дата, если дата начала патента - первый платеж, если дата окончания - второй
// 
// Возвращаемое значение:
//   Число - сумма налога, если отрицательная - долг, если положительная - переплата
//
Функция ОстатокРасчетовПоНалогуПСН(ДокументПатент, Период, ПериодСобытия) Экспорт
	
	// Расчет суммы налога по патенту:
	// сумма налога по патенту
	// минус сданные уведомления на уменьшение
	// минус суммы зачета по ЕНС
	
	РеквизитыПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументПатент, "Организация, ДатаНачала, ДатаОкончания, СуммаПервогоПлатежа, СуммаВторогоПлатежа");
	
	// Сумма оплаты по патенту к периоду
	// Если период события конец года или период события равен дате окончания патента - это второй платеж,
	// и значит надо учитывать всю сумму патента
	СуммаПатента = РеквизитыПатента.СуммаПервогоПлатежа;
	Если КонецГода(ПериодСобытия) = ПериодСобытия
		Или РеквизитыПатента.ДатаОкончания = ПериодСобытия Тогда
		СуммаПатента = СуммаПатента + РеквизитыПатента.СуммаВторогоПлатежа;
	КонецЕсли;
	
	// Сумма сданных уведомлений на уменьшение по патенту
	СведенияОбУменьшенииНалога = РегистрыСведений.УменьшениеНалогаПоПатенту.СведенияУменьшениеНалогаЗаГод(
		РеквизитыПатента.Организация, РеквизитыПатента.ДатаНачала, ДокументПатент);
	ДанныеУменьшения = СведенияОбУменьшенииНалога[ДокументПатент];
	СуммаУменьшенияПатента = 0;
	Для Каждого СтрокаУведомление Из ДанныеУменьшения.Уведомления Цикл
		СтатусУведомления = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(СтрокаУведомление.Уведомление);
		Если СтатусУведомления.Сдано Тогда
			СуммаУменьшенияПатента = СуммаУменьшенияПатента + СтрокаУведомление.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// Сумма уже оплаченная в счет этого патента
	СуммаОплатыПатента = СуммаОплатыВСчетПатента(ДокументПатент, Период);
	
	Возврат СуммаПатента - СуммаУменьшенияПатента - СуммаОплатыПатента;
	
КонецФункции

// Возвращает сумму, зачтенную в счет оплаты патента на дату
//
// Параметры:
//  ДокументПатент - ДокументСсылка.ОперацияСПатентом - патент, по которому рассчитывается налог
//  Период         - Дата - дата включительно, по которую рассчитывается сумма оплаты
// 
// Возвращаемое значение:
//   Число - сумма налога, зачтенная с ЕНС в счет этого патента
//
Функция СуммаОплатыВСчетПатента(ДокументПатент, Период) Экспорт
	
	// Сумма уже оплаченная в счет этого патента
	СуммаОплатыПатента = 0;
	
	// Соберем запланированные оплаты по датам из всех патентов
	// Выберем зачет средств на ЕНС в счет патентов по срокам уплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияСПатентом.СуммаПервогоПлатежа КАК Сумма,
	|	ОперацияСПатентом.ДатаПервогоПлатежа КАК Дата
	|ПОМЕСТИТЬ ВТ_ОплатыПоДатам
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияСПатентом.СуммаВторогоПлатежа,
	|	ОперацияСПатентом.ДатаВторогоПлатежа
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОплатыПоДатам.Сумма) КАК Сумма,
	|	КОЛИЧЕСТВО(ВТ_ОплатыПоДатам.Сумма) КАК Количество,
	|	ВТ_ОплатыПоДатам.Дата КАК Дата
	|ИЗ
	|	ВТ_ОплатыПоДатам КАК ВТ_ОплатыПоДатам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплатыПоДатам.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СрокУплаты КАК СрокУплаты,
	|	ЕСТЬNULL(РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты.СуммаРасход, 0) КАК СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Обороты(
	|			,
	|			&Период,
	|			Авто,
	|			Организация = &Организация
	|				И СрокУплаты В (&СрокиУплаты)
	|				И СчетУчета = &СчетУчета) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОбороты";
	
	РеквизитыПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументПатент, "Организация, ДатаПервогоПлатежа, ДатаВторогоПлатежа");
		
	СрокиУплаты = Новый Массив;
	СрокиУплаты.Добавить(РеквизитыПатента.ДатаПервогоПлатежа);
	СрокиУплаты.Добавить(РеквизитыПатента.ДатаВторогоПлатежа);
	
	Запрос.УстановитьПараметр("Организация", РеквизитыПатента.Организация);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("СрокиУплаты", СрокиУплаты);
	Запрос.УстановитьПараметр("СчетУчета",   ПланыСчетов.Хозрасчетный.НалогПриПСН);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСуммОплат    = Результат[1].Выгрузить();
	ТаблицаСписанияСЕНС = Результат[2].Выгрузить();
	
	Для Каждого СписаниеСЕНС Из ТаблицаСписанияСЕНС Цикл
		ЗапланированныеОплаты = ТаблицаСуммОплат.НайтиСтроки(Новый Структура("Дата", СписаниеСЕНС.СрокУплаты));
		Если ЗапланированныеОплаты.Количество() > 0
			И ЗапланированныеОплаты[0].Сумма <> 0
			И ЗапланированныеОплаты[0].Количество > 1 Тогда
			Коэффициент = Мин(1, СписаниеСЕНС.СуммаРасход / ЗапланированныеОплаты[0].Сумма);
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		СуммаОплатыПатента = СуммаОплатыПатента + Окр(СписаниеСЕНС.СуммаРасход * Коэффициент, 0, РежимОкругления.Окр15как10);
	КонецЦикла;
	
	Возврат СуммаОплатыПатента;
	
КонецФункции

// Возвращает дату платежа по патенту с учетом переноса на первый рабочий день
//
// Параметры:
//  Дата  - Дата - дата платежа, которую необходимо перенести на первый рабочий день
//
// Возвращаемое значение:
//   Дата  - срок платежа по патенту с учетом переноса на первый рабочий день
//
Функция УточнитьСрокОплатыПатента(Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат Дата;
	КонецЕсли;
	
	ПараметрыПолученияРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
	ПараметрыПолученияРабочихДат.ВызыватьИсключение = Ложь;
	
	ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
		ПроизводственныйКалендарь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Дата),
		ПараметрыПолученияРабочихДат);
	
	СрокОплаты = ГрафикПереноса[Дата];
	Если Не ЗначениеЗаполнено(СрокОплаты) Тогда
		СрокОплаты = Дата;
	КонецЕсли;
	
	Возврат СрокОплаты;
	
КонецФункции

// Возвращает сумму взносов, подлежащих уплате, на которые был уменьшен налог по патентам в текущем периоде
//
// Параметры:
//   Период  - Дата - дата рассчета
//   Организация   - СправочникСсылка.Организации - плательщик взносов
//
// Возвращаемое значение:
//   Сумма  - сумма взносов использованная для уменьшения налога по патенту
//
Функция ВзносыИспользованныеДляУменьшенияПатента(Организация, Период) Экспорт
	
	УчтенныеВзносыПодлежащиеУплате = УчетСтраховыхВзносовИП.СкорректированнаяСуммаВзносовПодлежащихУплате(
		Организация, Период, Истина);
	Если УчтенныеВзносыПодлежащиеУплате = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Период));
		Запрос.УстановитьПараметр("КонецПериода", КонецГода(Период));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(УменьшениеНалогаПоПатенту.Сумма), 0) КАК СуммаВзноса
		|ИЗ
		|	РегистрСведений.УменьшениеНалогаПоПатенту КАК УменьшениеНалогаПоПатенту
		|ГДЕ
		|	УменьшениеНалогаПоПатенту.Организация = &Организация
		|	И ВЫРАЗИТЬ(УменьшениеНалогаПоПатенту.ДокументПатент КАК Документ.ОперацияСПатентом).ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода";
		
		РезультатУчтенныеВзносы = Запрос.Выполнить().Выбрать();
		Если РезультатУчтенныеВзносы.Следующий() Тогда
			РасходыНаСтраховыеВзносы = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыПСНЗаПериод(
				Организация, НачалоГода(Период), Период);
				
			ЗачтеноПоЗаявлениям = Цел(УчетСтраховыхВзносовИП.ЗарезервированныеСуммыВзносовЗаНалоговыйПериод(
				Организация, НачалоГода(Период), Период, Истина));
				
			УплаченныеСтраховыеВзносы = Макс(0, РасходыНаСтраховыеВзносы - ЗачтеноПоЗаявлениям);
			УчтенныеВзносыПодлежащиеУплате = Макс(0, РезультатУчтенныеВзносы.СуммаВзноса - УплаченныеСтраховыеВзносы);
		Иначе
			УчтенныеВзносыПодлежащиеУплате = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчтенныеВзносыПодлежащиеУплате;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДатаНачалаПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат НачалоДня(Дата(2018, 1, 1)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

Функция ДатаОкончанияПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат КонецДня(Дата(2019, 12, 31)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

Функция СрокУплатыПатентаПриЗакрытииИП() Экспорт
	
	// При закрытии ИП полную стоимость по патенту необходимо оплатить в срок не позднее 20 календарных дней после закрытия ИП
	
	Возврат 20; // пп.3 п.2 ст.346.51 НК РФ
	
КонецФункции

// Возвращает коэффициент дохода ПСН при совмещении ПСН с другим режимом НО
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - плательщик взносов.
//  РасчетныйПериод  - Дата - налоговый период, за который необходо посчитать процент
//  Периодичность    - ПеречислениеСсылка.Периодичность - период расчета процента, может быть год или квартал
//  СНачалаГода      - Булево - Истина если нужно посчитать с начала года
// 
// Возвращаемое значение:
//   Число - доля доходов ПСН
//
Функция ДоляДоходовПатентнойСистемыНалогообложения(Организация, РасчетныйПериод, Периодичность, СНачалаГода = Ложь) Экспорт
	
	Коэффициент = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если СНачалаГода Тогда
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Год, РасчетныйПериод);
	Иначе
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, РасчетныйПериод);
	КонецЕсли;
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, РасчетныйПериод);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, РасчетныйПериод) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ДоходУСН), 0) КАК ДоходОсновнаяСистема,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ДоходПСН), 0) КАК ДоходПатент
		|ИЗ
		|	(ВЫБРАТЬ
		|		КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК ДоходУСН,
		|		0 КАК ДоходПСН
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КнигаУчетаДоходовПатентОбороты.Графа4Оборот
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты) КАК ВложенныйЗапрос";
	Иначе
		Запрос.УстановитьПараметр("ОблагаетсяНДС", Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, КонецМесяца(РасчетныйПериод)));
		Запрос.УстановитьПараметр("ХарактерыДеятельностиПатент", УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиУСНПатент());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходОСН), 0) КАК ДоходОсновнаяСистема,
		|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходПСН), 0) КАК ДоходПатент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ИПДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиПатент)
		|				ТОГДА ВЫБОР
		|						КОГДА &ОблагаетсяНДС
		|							ТОГДА ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот
		|						ИНАЧЕ ИПДоходыОбороты.ВыручкаОборот
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ДоходОСН,
		|		0 КАК ДоходПСН
		|	ИЗ
		|		РегистрНакопления.ИПДоходы.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПДоходыОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ИППрочиеДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиПатент)
		|				ТОГДА ИППрочиеДоходыОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрНакопления.ИППрочиеДоходы.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И ВЫРАЗИТЬ(СтатьяДоходов КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету) КАК ИППрочиеДоходыОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КнигаУчетаДоходовПатентОбороты.Графа4Оборот
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты) КАК ВсеДоходы";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДоходПатент          = ?(Выборка.ДоходПатент < 0, 0, Выборка.ДоходПатент);
		ДоходОсновнаяСистема = ?(Выборка.ДоходОсновнаяСистема < 0, 0, Выборка.ДоходОсновнаяСистема);
		
		// Коэффициент перед расчетом необходимо округлять до количества знаков, с которым он хранится
		// и отображается в справках-расчетах. В противном случае возникают ошибки округления.
		
		РазрядностьКоэффициента = Метаданные.РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.Реквизиты.ДоляПСН.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		// В случае, когда нет доходов ни по основной системе, ни по патенту, все взносы
		// идут в уменьшение патента
		Коэффициент = ?(ДоходПатент + ДоходОсновнаяСистема = 0,
			1,
			Окр(ДоходПатент / (ДоходПатент + ДоходОсновнаяСистема), РазрядностьКоэффициента));
			
	КонецЕсли;
	
	Возврат Коэффициент;

КонецФункции

#Область ФормированиеДвиженийВБухгалтерскомУчете

Процедура СформироватьПроводкиПоНалогу(ТаблицаРеквизиты, ТаблицаПроводокПоНалогу, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаПроводокПоНалогу) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаПроводки Из ТаблицаПроводокПоНалогу Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Организация = Реквизиты.Организация;
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		Если СтрокаПроводки.НачислениеНаЕНС Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидПлатежаВГосБюджет);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
			
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидПлатежаВГосБюджет);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийПоРегистрам

Процедура СформироватьДвиженияПоУменьшениюНалога(ТаблицаРеквизиты, ТаблицаПатенты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаПатенты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаПатент Из ТаблицаПатенты Цикл
		
		Движение = Движения.УменьшениеНалогаПоПатенту.Добавить();
		
		Движение.Организация    = Реквизиты.Организация;
		Движение.ДокументПатент = СтрокаПатент.ДокументПатент;
		Движение.Уведомление    = Реквизиты.Уведомление;
		Движение.Сумма          = СтрокаПатент.Сумма;
		
	КонецЦикла;
	
	Движения.УменьшениеНалогаПоПатенту.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

// Возвращает таблицу для формирования движений по начислению налога по патенту.
// Вызывается при проведении документа патента.
//
// Параметры:
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с данными патента для начисления налога. Должна иметь колонки:
//      * Период              - Дата - Дата начала действия патента.
//      * КБК                 - Строка - КБК оплаты патента.
//      * Патент              - СправочникСсылка.Патенты - Вид деятельности по патенту.
//      * СуммаНалога         - Строка - Сумма налога по патенту.
//      * ДатаПервогоПлатежа  - Строка - Дата первого платежа налога по патенту.
//      * СуммаПервогоПлатежа - Строка - Сумма первого платежа налога по патенту.
//      * ДатаВторогоПлатежа  - Строка - Дата второго платежа налога по патенту.
//      * СуммаВторогоПлатежа - Строка - Сумма второго платежа налога по патенту.
// 
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено - Таблица с проводками для начисления налога по патенту. См. НоваяТаблицаПроводокПоНалогу().
//                                   Неопределено, если не переданы данные по патенту.
//
Функция ПодготовитьТаблицуНачисленияНалога(ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.Период < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНачисленияНалога = НоваяТаблицаПроводокПоНалогу();
	
	ВидНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Реквизиты.КБК, Ложь);
	
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(
		ВидНалога, Реквизиты.Период);
	
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат ТаблицаНачисленияНалога;
	КонецЕсли;
	
	ПрибылиИУбытки       = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
	ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	// Начисление налога по патенту
	СтрокаНачисленияНалога = ТаблицаНачисленияНалога.Добавить();
	СтрокаНачисленияНалога.Период               = Реквизиты.Период;
	СтрокаНачисленияНалога.СчетДт               = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	СтрокаНачисленияНалога.СчетКт               = СчетУчета;
	СтрокаНачисленияНалога.Сумма                = Реквизиты.СуммаНалога;
	СтрокаНачисленияНалога.НачислениеНаЕНС      = Ложь;
	СтрокаНачисленияНалога.ПрибылиИУбытки       = ПрибылиИУбытки;
	СтрокаНачисленияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
	СтрокаНачисленияНалога.Содержание           = СтрШаблон(
		НСтр("ru = 'Начисление налога по патенту: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Реквизиты.Патент);
	
	// Начисление налога на ЕНС по первому платежу
	Если ЗначениеЗаполнено(Реквизиты.ДатаПервогоПлатежа) Тогда
		
		СтрокаНачисленияНалога = ТаблицаНачисленияНалога.Добавить();
		СтрокаНачисленияНалога.Период               = Реквизиты.ДатаПервогоПлатежа;
		СтрокаНачисленияНалога.СчетДт               = СчетУчета;
		СтрокаНачисленияНалога.СчетКт               = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		СтрокаНачисленияНалога.Сумма                = Реквизиты.СуммаПервогоПлатежа;
		СтрокаНачисленияНалога.НачислениеНаЕНС      = Истина;
		СтрокаНачисленияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
		СтрокаНачисленияНалога.Содержание           = СтрШаблон(
			НСтр("ru='Единый налоговый счет: Начисление налога по патенту %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Реквизиты.Патент);
		
	КонецЕсли;
	
	// Начисление налога на ЕНС по второму платежу
	Если ЗначениеЗаполнено(Реквизиты.ДатаВторогоПлатежа) Тогда
		
		СтрокаНачисленияНалога = ТаблицаНачисленияНалога.Добавить();
		СтрокаНачисленияНалога.Период               = Реквизиты.ДатаВторогоПлатежа;
		СтрокаНачисленияНалога.СчетДт               = СчетУчета;
		СтрокаНачисленияНалога.СчетКт               = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
		СтрокаНачисленияНалога.Сумма                = Реквизиты.СуммаВторогоПлатежа;
		СтрокаНачисленияНалога.НачислениеНаЕНС      = Истина;
		СтрокаНачисленияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
		СтрокаНачисленияНалога.Содержание           = СтрШаблон(
			НСтр("ru='Единый налоговый счет: Начисление налога по патенту %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Реквизиты.Патент);
		
	КонецЕсли;
	
	Возврат ТаблицаНачисленияНалога;
	
КонецФункции

// Возвращает таблицу для формирования движений по уменьшению налога по патенту.
// Вызывается при проведении документа уменьшения налога.
//
// Параметры:
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами уменьшения налога по патенту. Должна иметь колонки:
//      * Период              - Дата - Дата документа.
//  ТаблицаПатенты   - ТаблицаЗначений - Таблица с данными по патентам. Должна иметь колонки:
//      * ДатаНачалаДействия  - Дата - Дата начала действия патента.
//      * КБК                 - Строка - КБК оплаты патента.
//      * Патент              - СправочникСсылка.Патенты - Вид деятельности по патенту
//      * СуммаНалога         - Строка - Сумма уменьшения налога по патенту.
// 
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено - Таблица с проводками для уменьшения налога по патенту. См. НоваяТаблицаПроводокПоНалогу().
//                                   Неопределено, если не переданы данные по патентам.
//
Функция ПодготовитьТаблицуУменьшенияНалога(ТаблицаРеквизиты, ТаблицаПатенты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
		Или Не ЗначениеЗаполнено(ТаблицаПатенты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПрибылиИУбытки       = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
	ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	ТаблицаУменьшенияНалога = НоваяТаблицаПроводокПоНалогу();
	
	Для Каждого СтрокаПатент Из ТаблицаПатенты Цикл
		
		Если СтрокаПатент.ДатаНачалаДействия < ЕдиныйНалоговыйСчет.НачалоПростогоУчета() Тогда
			Продолжить;
		КонецЕсли;
		
		ВидНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаПатент.КБК, Ложь);
		
		СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(
			ВидНалога, Реквизиты.Период);
		
		Если Не ЗначениеЗаполнено(СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		// Уменьшение начисленного налога по патенту
		СтрокаУменьшенияНалога = ТаблицаУменьшенияНалога.Добавить();
		СтрокаУменьшенияНалога.Период               = Реквизиты.Период;
		СтрокаУменьшенияНалога.СчетДт               = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		СтрокаУменьшенияНалога.СчетКт               = СчетУчета;
		СтрокаУменьшенияНалога.Сумма                = -СтрокаПатент.Сумма;
		СтрокаУменьшенияНалога.НачислениеНаЕНС      = Ложь;
		СтрокаУменьшенияНалога.ПрибылиИУбытки       = ПрибылиИУбытки;
		СтрокаУменьшенияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
		СтрокаУменьшенияНалога.Содержание           = СтрШаблон(
			НСтр("ru = 'Начисление налога по патенту: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СтрокаПатент.Патент);
		
		// Уменьшение начисленного налога на ЕНС
		НеобходимоУменьшить = СтрокаПатент.Сумма;
		
		ДатаПервогоПлатежа = СтрокаПатент.ДатаПервогоПлатежа;
		ДатаВторогоПлатежа = СтрокаПатент.ДатаВторогоПлатежа;
		
		СуммаПервогоПлатежа = СтрокаПатент.СуммаПервогоПлатежа;
		ОстатокПервогоПлатежа = Макс(0, СуммаПервогоПлатежа - СтрокаПатент.УменьшеноРанее);
		
		Если ОстатокПервогоПлатежа > 0 Тогда
			
			СуммаУменьшения = Мин(ОстатокПервогоПлатежа, НеобходимоУменьшить);
			
			Если ЗначениеЗаполнено(ДатаВторогоПлатежа)
				И Реквизиты.Период > ДатаПервогоПлатежа Тогда
				СрокУплаты = Макс(ДатаВторогоПлатежа, Реквизиты.Период);
			Иначе
				СрокУплаты = Макс(ДатаПервогоПлатежа, Реквизиты.Период);
			КонецЕсли;
			
			СтрокаУменьшенияНалога = ТаблицаУменьшенияНалога.Добавить();
			СтрокаУменьшенияНалога.Период               = СрокУплаты;
			СтрокаУменьшенияНалога.СчетДт               = СчетУчета;
			СтрокаУменьшенияНалога.СчетКт               = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
			СтрокаУменьшенияНалога.Сумма                = -СуммаУменьшения;
			СтрокаУменьшенияНалога.НачислениеНаЕНС      = Истина;
			СтрокаУменьшенияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
			СтрокаУменьшенияНалога.Содержание           = СтрШаблон(
				НСтр("ru='Единый налоговый счет: Начисление налога по патенту %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаПатент.Патент);
			
			НеобходимоУменьшить = НеобходимоУменьшить - СуммаУменьшения;
			
		КонецЕсли;
		
		Если НеобходимоУменьшить > 0 Тогда
			
			СтрокаУменьшенияНалога = ТаблицаУменьшенияНалога.Добавить();
			СтрокаУменьшенияНалога.Период               = Макс(ДатаВторогоПлатежа, Реквизиты.Период);
			СтрокаУменьшенияНалога.СчетДт               = СчетУчета;
			СтрокаУменьшенияНалога.СчетКт               = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
			СтрокаУменьшенияНалога.Сумма                = -НеобходимоУменьшить;
			СтрокаУменьшенияНалога.НачислениеНаЕНС      = Истина;
			СтрокаУменьшенияНалога.ВидПлатежаВГосБюджет = ВидПлатежаВГосБюджет;
			СтрокаУменьшенияНалога.Содержание           = СтрШаблон(
				НСтр("ru='Единый налоговый счет: Начисление налога по патенту %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаПатент.Патент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУменьшенияНалога.Свернуть(
		"Период, СчетДт, СчетКт, НачислениеНаЕНС, ПрибылиИУбытки, ВидПлатежаВГосБюджет, Содержание", "Сумма");
	
	Возврат ТаблицаУменьшенияНалога;
	
КонецФункции

Функция НоваяТаблицаПроводокПоНалогу()
	
	ОписаниеТипаСчета = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Период",               ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("СчетДт",               ОписаниеТипаСчета);
	Результат.Колонки.Добавить("СчетКт",               ОписаниеТипаСчета);
	Результат.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Результат.Колонки.Добавить("НачислениеНаЕНС",      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПрибылиИУбытки",       Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	Результат.Колонки.Добавить("ВидПлатежаВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("Содержание",           Метаданные.РегистрыБухгалтерии.Хозрасчетный.Реквизиты.Содержание.Тип);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеЗаявления

Функция ДанныеЗаполненияЗаявления(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	ДанныеЗаполнения = Новый Структура;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ДатаУтратыПрава = ПараметрыЗаполнения.ДатаУтратыПрава;
	Иначе
		ДатаУтратыПрава = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН();
	НачалоПериода  = НачалоГода(ДатаУтратыПрава);
	КонецПериода   = КонецДня(ДатаУтратыПрава);
	СуммаДоходаУСН = УчетУСН.СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	СуммаДоходаПСН = СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
	ГраницаЧисленностиРаботников = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент();
	СведенияОЧисленностиРаботников = УчетЗарплаты.СреднесписочнаяЧисленность(ПараметрыОтчета.Организация,
		НачалоПериода, ДатаУтратыПрава);
	
	Если СуммаДоходаУСН + СуммаДоходаПСН > ГраницаДоходов Тогда
		ДанныеЗаполнения.Вставить("КодПричины", 1);
	ИначеЕсли СведенияОЧисленностиРаботников.ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда 
		ДанныеЗаполнения.Вставить("КодПричины", 2);
	КонецЕсли;
	
	ДанныеПатентов = ДанныеДействующихПатентов(
		ПараметрыОтчета.Организация,
		ДатаУтратыПрава);
		
	// Если среди патентов отсутствуют оформленные по месту жительства,
	// то заявление в любую ИФНС, в которой поставлен на учет по ПСН
	Если ДанныеПатентов.Количество() > 0 Тогда
		ПатентПоМестуРегистрации = ДанныеПатентов.Найти(Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации,
														"ПостановкаНаУчетВНалоговомОргане");
		Если ПатентПоМестуРегистрации = Неопределено Тогда
			ДанныеЗаполнения.Вставить("НалоговыйОрган",    ДанныеПатентов[0].НалоговыйОрган);
			ДанныеЗаполнения.Вставить("НалоговыйОрганКод", ДанныеПатентов[0].НалоговыйОрганКод);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеПатентов",  ДанныеПатентов);
	ДанныеЗаполнения.Вставить("ДатаУтратыПрава", ДатаУтратыПрава);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоПатентовНаЛистеЗаявленияОбУтрате()
	
	Возврат 17;
	
КонецФункции

Функция ДанныеДействующихПатентов(Организация, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацияСПатентом.Патент КАК Ссылка,
	|	ОперацияСПатентом.ДатаНачала КАК ДатаНачала,
	|	ОперацияСПатентом.ДатаОкончания КАК ДатаОкончания,
	|	ОперацияСПатентом.НомерПатента КАК НомерПатента,
	|	ОперацияСПатентом.ДатаВыдачи КАК ДатаВыдачи,
	|	ОперацияСПатентом.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	ОперацияСПатентом.НалоговыйОрган КАК НалоговыйОрган,
	|	ОперацияСПатентом.НалоговыйОрган.Код КАК НалоговыйОрганКод
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаНачала <= &ДатаОкончания
	|	И ОперацияСПатентом.ДатаОкончания >= &ДатаНачала";
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания)
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовПатентОбороты.Графа4Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалога

Функция НовыйСтруктураДанныхЗаполненияЛистА()
	
	ЛистА = Новый Структура;
	
	ЛистА.Вставить("МоделККТ",    "");
	ЛистА.Вставить("НомерККТ",    "");
	ЛистА.Вставить("РегНомерККТ", "");
	ЛистА.Вставить("ДатаРегККТ",  "");
	ЛистА.Вставить("СумРасхККТ",  "");
	
	Возврат ЛистА;
	
КонецФункции

Функция НовыйСтруктураДанныхЗаполненияЛистБ()
	
	ЛистБ = Новый Структура;
	
	ЛистБ.Вставить("Стр120", "");
	ЛистБ.Вставить("Стр130", '00010101');
	ЛистБ.Вставить("Стр140", 0);
	ЛистБ.Вставить("Стр150", '00010101');
	ЛистБ.Вставить("Стр160", 0);
	ЛистБ.Вставить("Стр170", '00010101');
	ЛистБ.Вставить("Стр180", 0);
	ЛистБ.Вставить("Стр190", '00010101');
	ЛистБ.Вставить("Стр200", 0);
	
	Возврат ЛистБ;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалогаНаСтраховыеВзносы

Функция ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы_Форма2020(ОбщиеДанные, Патенты, Ключ) Экспорт
	
	ДанныеУведомления = Новый Структура;
	
	СуммаНалогаПоПатентам = 0;
	
	ЛистА = НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2020();
	
	Для Каждого Патент Из Патенты Цикл
		Если Патент.Уменьшить > 0 Тогда
			ДанныеЛистаА = ЛистА.Добавить();
			ДанныеЛистаА.ДатаВыдПат = ?(ЗначениеЗаполнено(Патент.ДатаВыдачи), Патент.ДатаВыдачи, Патент.ДатаНачала);
			ДанныеЛистаА.НомерПат = Патент.НомерПатента;
			ДанныеЛистаА.СумНалПатУм = Патент.СуммаКОплате;
			СуммаНалогаПоПатентам = СуммаНалогаПоПатентам + Патент.СуммаКОплате;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ЛистА", ПоместитьВоВременноеХранилище(ЛистА, Ключ));
	
	ЛистБ = НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2020();
	ЛистБ.ОбщСумНалПатУм = СуммаНалогаПоПатентам;
	ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(
		ОбщиеДанные.Организация, НачалоГода(ОбщиеДанные.Период), КонецГода(ОбщиеДанные.Период));
	ЛистБ.ПрНП = ?(ИспользуетсяТрудНаемныхРаботников, "1", "2");
	ЛистБ.СумСтрВзнУмНал = Патенты.Итог("Уменьшить");
	
	ДанныеУведомления.Вставить("ЛистБ", ЛистБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции

Функция ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы_Форма2021(ОбщиеДанные, Патенты, ОбщаяСуммаРасходов, Ключ) Экспорт
	
	ДанныеУведомления = Новый Структура;
	
	ТитульныйЛист = НовыеДанныеТитульногоЛиста_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021();
	ТитульныйЛист.ГодДействПат = Формат(Год(ОбщиеДанные.Период), "ЧГ=");
	
	ДанныеУведомления.Вставить("Титульная", ТитульныйЛист);
	
	ДанныеУведомления.Вставить("Патенты", Новый ХранилищеЗначения(Патенты));
	ДанныеУведомления.Вставить("ОбщаяСуммаРасходов", ОбщаяСуммаРасходов);
	
	ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(
		ОбщиеДанные.Организация,
		НачалоГода(ОбщиеДанные.Период),
		КонецГода(ОбщиеДанные.Период));
	
	ЛистА = НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021();
	
	ВсегоУменьшено = 0;
	
	// В первую очередь заполняем лист А по тем патентам, платеж по которым уменьшается в текущем уведомлении
	
	Для Каждого СтрокаПатент Из Патенты Цикл
		Если СтрокаПатент.Уменьшить <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьДанныеЛистаА_Форма2021(ЛистА, СтрокаПатент, ВсегоУменьшено, ИспользуетсяТрудНаемныхРаботников);
	
	КонецЦикла;
	
	Для Каждого СтрокаПатент Из Патенты Цикл
		Если СтрокаПатент.Уменьшить > 0 Или СтрокаПатент.УменьшеноРанее = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		ДобавитьДанныеЛистаА_Форма2021(ЛистА, СтрокаПатент, ВсегоУменьшено, ИспользуетсяТрудНаемныхРаботников);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ЛистА", ПоместитьВоВременноеХранилище(ЛистА, Ключ));
	
	ЛистБ = НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021();
	ЛистБ.ОбщСумУплСВ = ОбщаяСуммаРасходов;
	ЛистБ.ОбщСумСВУмен = Патенты.Итог("Уменьшить");
	ЛистБ.ОбщСумСВУменУчт = ВсегоУменьшено;
	ЛистБ.СумСВОст = ОбщаяСуммаРасходов - ЛистБ.ОбщСумСВУмен - ВсегоУменьшено;
	
	ДанныеУведомления.Вставить("ЛистБ", ЛистБ);
	
	ДанныеУведомления.Вставить("ИмяПомощника", "ПомощникЗаполненияУведомленияОбУменьшенииНалогаПоПатенту");
	
	Возврат ДанныеУведомления;
	
КонецФункции

Процедура ДобавитьДанныеЛистаА_Форма2021(ЛистА, Патент, ВсегоУменьшено, ИспользуетсяТрудНаемныхРаботников)
	
	ДанныеЛистаА = ЛистА.Добавить();
	ДанныеЛистаА.НомерПат = Патент.НомерПатента;
	ДанныеЛистаА.ДатаНачПат = Патент.ДатаНачала;
	ДанныеЛистаА.ДатаКонПат = Патент.ДатаОкончания;
	ДанныеЛистаА.ПрНП = ?(ИспользуетсяТрудНаемныхРаботников, "1", "2");
	ДанныеЛистаА.СумНалПатУм = Патент.СуммаКОплате;
	ДанныеЛистаА.СумСВУмНал = Патент.Уменьшить;
	
	СуммаУменьшеноРанее = 0;
	Если Патент.Уведомления <> Неопределено Тогда
		Для Каждого СтрокаУведомление Из Патент.Уведомления Цикл
			СтатусУведомления = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(СтрокаУведомление.Уведомление);
			Если СтатусУведомления.Сдано Тогда
				СуммаУменьшеноРанее = СуммаУменьшеноРанее + СтрокаУведомление.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеЛистаА.СумСВУменУчт = СуммаУменьшеноРанее;
	ВсегоУменьшено = ВсегоУменьшено + СуммаУменьшеноРанее;
	
КонецПроцедуры

Функция НовыеДанныеТитульногоЛиста_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021()
	
	Данные = Новый Структура;
	
	Данные.Вставить("ГодДействПат", 0);
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("УИД");
	Данные.Колонки.Добавить("НомерПат");
	Данные.Колонки.Добавить("ДатаНачПат");
	Данные.Колонки.Добавить("ДатаКонПат");
	Данные.Колонки.Добавить("ПрНП");
	Данные.Колонки.Добавить("СумНалПатУм");
	Данные.Колонки.Добавить("СумСВУмНал");
	Данные.Колонки.Добавить("СумСВУменУчт");
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2021()
	
	Данные = Новый Структура;
	
	Данные.Вставить("ОбщСумУплСВ", 0);
	Данные.Вставить("ОбщСумСВУмен", 0);
	Данные.Вставить("ОбщСумСВУменУчт", 0);
	Данные.Вставить("СумСВОст", 0);
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2020()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("УИД");
	Данные.Колонки.Добавить("ДатаВыдПат");
	Данные.Колонки.Добавить("НомерПат");
	Данные.Колонки.Добавить("СумНалПатУм");
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы_Форма2020()
	
	Данные = Новый Структура;
	
	Данные.Вставить("ОбщСумНалПатУм", 0);
	Данные.Вставить("ПрНП", "");
	Данные.Вставить("СумСтрВзнУмНал", 0);
	
	Возврат Данные;
	
КонецФункции

// Выполняет синхронизацию пометки удаления меджу связанными документами:
// Уведомление об уменьшении налога по патенту и Уведомление о спецрежимах налогообложения.
// При установки пометки на удаления у одного документа, должна установиться пометка у другого.
//
// Параметры:
//  Уведомление - ДокументОбъект.УведомлениеОбУменьшенииНалогаПоПатенту
//              - ДокументОбъект.УведомлениеОСпецрежимахНалогообложения - документ, который изменяется.
//
Процедура СинхронизироватьСостояниеУведомлений(Уведомление) Экспорт
	
	Если Уведомление.ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	Иначе
		Уведомление.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомление",     Уведомление.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Уведомление.ПометкаУдаления);
	
	Если ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОбУменьшенииНалогаПоПатенту") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОбУменьшенииНалогаПоПатенту КАК УведомлениеОбУменьшенииНалогаПоПатенту
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|		ПО УведомлениеОбУменьшенииНалогаПоПатенту.Уведомление = УведомлениеОСпецрежимахНалогообложения.Ссылка
		|ГДЕ
		|	УведомлениеОбУменьшенииНалогаПоПатенту.Ссылка = &Уведомление
		|	И УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления <> &ПометкаУдаления";
	ИначеЕсли ТипЗнч(Уведомление) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УведомлениеОбУменьшенииНалогаПоПатенту.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОбУменьшенииНалогаПоПатенту КАК УведомлениеОбУменьшенииНалогаПоПатенту
		|ГДЕ
		|	УведомлениеОбУменьшенииНалогаПоПатенту.Уведомление = &Уведомление
		|	И УведомлениеОбУменьшенииНалогаПоПатенту.ПометкаУдаления <> &ПометкаУдаления";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("СинхронизацияСостоянийУведомлений", Истина);
		ДокументОбъект.УстановитьПометкуУдаления(Уведомление.ПометкаУдаления);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция СписокДоступныхПатентов(Организация, Период)
	
	СписокПатентов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокПатентов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
		Возврат СписокПатентов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст = ТекстЗапросаДоступныхПатентов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПатентов.Добавить(Выборка.Патент, Выборка.Наименование);
	КонецЦикла;
	
	ДополнитьСписокПатентовКомандойСозданияНовогоПатента(СписокПатентов);
	
	Возврат СписокПатентов;
	
КонецФункции

Функция ТекстЗапросаДоступныхПатентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОперацияСПатентом.Патент КАК Патент,
	|	ЕСТЬNULL(Патенты.Наименование, """") КАК Наименование
	|ИЗ
	|	Документ.ОперацияСПатентом КАК ОперацияСПатентом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ОперацияСПатентом.Патент = Патенты.Ссылка
	|ГДЕ
	|	ОперацияСПатентом.Организация = &Организация
	|	И ОперацияСПатентом.Проведен
	|	И ОперацияСПатентом.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И ОперацияСПатентом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьСписокПатентовКомандойСозданияНовогоПатента(СписокПатентов)
	
	Если ПравоДоступа("Добавление", Метаданные.Справочники.Патенты) Тогда
		СписокПатентов.Добавить(
			УчетПСНКлиентСервер.ОтражениеДоходовСоздатьПатентЗначение(),
			УчетПСНКлиентСервер.ОтражениеДоходовСоздатьПатентПредставление());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСписокПатентов(Форма)
	
	ФормаСписокПатентов = УчетПСНКлиентСервер.СписокПатентов(Форма);
	
	ФормаСписокПатентов.Очистить();
	
	УчетПСНКлиентСервер.ОбновитьСписокВыбораПатента(
		Форма.Элементы.Патент.СписокВыбора,
		ФормаСписокПатентов);
	
КонецПроцедуры

Процедура ЗаполнитьСписокПатентов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ФормаСписокПатентов = УчетПСНКлиентСервер.СписокПатентов(Форма);
	
	ВозможныеПатенты = СписокДоступныхПатентов(Объект.Организация, Объект.Дата);
	
	Для Каждого ЗначениеПатент Из ВозможныеПатенты Цикл
		ФормаСписокПатентов.Добавить(ЗначениеПатент.Значение, ЗначениеПатент.Представление);
	КонецЦикла;
	
	УчетПСНКлиентСервер.ОбновитьСписокВыбораПатента(
		Элементы.Патент.СписокВыбора,
		ФормаСписокПатентов);
	
КонецПроцедуры

Функция ИспользоватьВыборПатента(Форма)
	
	Возврат Форма.ПрименяетсяУСНПатент;
	
КонецФункции

#КонецОбласти
