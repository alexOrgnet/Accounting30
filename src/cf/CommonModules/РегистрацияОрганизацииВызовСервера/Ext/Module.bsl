#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные файла из прикрепленнных файлов для справочника Отправки "Регистрация ЮЛ"
//
// Параметры:
//   Заявление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Ссылка на заявление о внесении изменений в ЕГРЮЛ/ЕГРИП
//   ТипФайла                - Строка - Идентификатор значения Перечисления.НазначенияФайловРегистрацииЮЛ
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - См. НовыеДанныеФайлаОтФНСДляОткрытия()
//
Функция ДанныеФайлаОтФНСДляОткрытия(Заявление, ТипФайла, УникальныйИдентификатор) Экспорт
	
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваОтправкиРегистрацииЮЛ(Заявление);
	ЭтапыОтправки = ДокументооборотРегистрацияВФНС.СформироватьЭтапыОтправки(СвойстваОтправки.ОтправкаСсылка);
	
	Результат = НовыеДанныеФайлаОтФНСДляОткрытия();
	Результат.ОтправкаСсылка = СвойстваОтправки.ОтправкаСсылка;
	
	ВидыФайловОбменаСКонтролирующимОрганом = ДокументооборотРегистрацияВФНС.ВидыФайловОбменаСКонтролирующимОрганом();
	Если ВидыФайловОбменаСКонтролирующимОрганом.Свойство(ТипФайла) Тогда
		НазначениеФайла = ВидыФайловОбменаСКонтролирующимОрганом[ТипФайла];
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	// В ответе от ФНС может быть несколько файлов с разными типами,
	// выбираем первый подходящий из рассмотренных и принятых в обработку
	
	Результат.ДанныеДляОткрытия = ДанныеФайловЭтапа(
		ЭтапыОтправки.ПринятВОбработку.Файлы,
		НазначениеФайла,
		УникальныйИдентификатор);
	
	Если Не ЗначениеЗаполнено(Результат.ДанныеДляОткрытия) Тогда
		Результат.ДанныеДляОткрытия = ДанныеФайловЭтапа(
			ЭтапыОтправки.Рассмотрение.Файлы,
			НазначениеФайла,
			УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление подписанного транспортного контейнера
//
// Параметры:
//   ПодписанныйКонтейнер - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы
//
// Возвращаемое значение:
//   Строка
//
Функция НаименованиеПодписанногоКонтейнера(ПодписанныйКонтейнер) Экспорт
	
	РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодписанныйКонтейнер, "Наименование, Расширение");
	Возврат СтрШаблон("%1.%2", РеквизитыКонтейнера.Наименование, РеквизитыКонтейнера.Расширение);
	
КонецФункции

Функция ДанныеСостоянияОтправкиДокументов(ЗаявлениеСсылка, ДокументыПодписаны, НетСертификата, ОшибкаПодписания, ЭтоЮрЛицо) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстПодсказки", "");
	Результат.Вставить("Картинка");
	Результат.Вставить("Дополнение", "");
	
	СостояниеОтправкиДокументов = СостояниеОтправкиДокументовВФНС(ЗаявлениеСсылка);
	Если ДокументыПодписаны И СостояниеОтправкиДокументов = ПредопределенноеЗначение("Перечисление.СтатусыОтправки.НеПринят") Тогда
		
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'При проверке заявления были обнаружены ошибки. Исправьте их и отправьте заявление снова.
			|<a href=""Протокол"">Протокол</a>'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
		
	ИначеЕсли ДокументыПодписаны И СостояниеОтправкиДокументов = ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Сдан") Тогда
		
		Если ЭтоЮрЛицо Тогда
			Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Заявление принято, изменения внесены в реестр.
				|<a href=""ЛистЗаписиЕГР"">Лист записи ЕГРЮЛ</a>'"));
		Иначе
			Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Заявление принято, изменения внесены в реестр.
				|<a href=""ЛистЗаписиЕГР"">Лист записи ЕГРИП</a>'"));
		КонецЕсли;
		
		Результат.Картинка = БиблиотекаКартинок.УспешнаяОтправка;
		Результат.Дополнение = НСтр("ru = 'Обновите реквизиты в программе при необходимости.'");
		
	ИначеЕсли ДокументыПодписаны Тогда
		
		СрокРассмотренияСтрокой = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 рабочий день;;%1 рабочего дня;%1 рабочих дней;%1 рабочих дней'"),
			РегистрацияОрганизацииКлиентСервер.СрокРассмотренияЗаявления());
		
		Результат.ТекстПодсказки = СтрШаблон(НСтр("ru = 'Заявление успешно отправлено в ИФНС.
			|Срок рассмотрения заявления - до %1.'"),
			СрокРассмотренияСтрокой);
		Результат.Картинка = БиблиотекаКартинок.УспешнаяОтправка;
		Результат.Дополнение = НСтр("ru = 'Когда вы получите подтверждающие документы, обновите изменения в программе.'");
		
	ИначеЕсли НетСертификата Тогда
		
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'На компьютере не установлен сертификат квалифицированной электронной подписи.
			|Если у вас уже есть подпись, <a href=""https://its.1c.ru/db/metod81#content:7688:hdoc"">установите</a> её на локальный компьютер.'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
		
	ИначеЕсли ОшибкаПодписания Тогда
		
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'При выполнении подписания документов возникли ошибки.
			|<a href=""ЖурналРегистрации"">Подробнее</a>'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помечает к удалению прикрепленные файлы по конкретному виду документа
//
// Параметры:
//   ВладелецФайла - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы - ссылка на владельца файлов
//   ВидДокумента  - Строка - Указание вида документа в описании прикрепленного файла (см. РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов())
//
Процедура УдалитьПрикрепленныеФайлы(ВладелецФайла, ВидДокумента, НомерДокумента = "") Экспорт
	
	ПрикрепленныеФайлы = ТаблицаОтсканированныхСтраницДокумента(ВладелецФайла, ВидДокумента);
	
	Если ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ИнойДокумент Тогда
		
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			СтраницыДокумента = ПрикрепленныеФайлы.НайтиСтроки(Новый Структура("НомерДокумента", НомерДокумента));
			ПометитьНаУдалениеПрикрепленныеФайлы(СтраницыДокумента);
		Иначе
			ПометитьНаУдалениеПрикрепленныеФайлы(ПрикрепленныеФайлы);
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ПрикрепленныеФайлы) Тогда
			// Если транспортный контейнер очищен, считаем, что заявление в статусе "В работе"
			ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(ВладелецФайла,
				ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
		КонецЕсли;
		ПометитьНаУдалениеПрикрепленныеФайлы(ПрикрепленныеФайлы);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру со списком страниц прикрепленных файлов
//
// Параметры:
//   ПараметрыЗаявления      - См. РегистрацияОрганизацииКлиент.НовыеПараметрыПодписанияЗаявления()
//   УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор
//
// Возвращаемое значение:
//   Структура
//     * Ключ - см. РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов()
//     * Значение - Массив - адрес файла во временном хранилище
//
Функция ПрикрепленныеФайлыЗаявления(ПараметрыЗаявления, УникальныйИдентификатор) Экспорт
	
	Результат = Новый Структура;
	
	ВидыДокументов = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов();
	Для Каждого ТекущийВид Из ВидыДокументов Цикл
		
		ФайлыДокумента = РегистрацияОрганизацииВызовСервера.ТаблицаОтсканированныхСтраницДокумента(
			ПараметрыЗаявления.Заявление,
			ТекущийВид.Ключ);
		
		Если ТекущийВид.Значение = ВидыДокументов.ИнойДокумент Тогда
			
			ЗначениеИнойДокумент = Новый Соответствие;
			СписокДокументов = Новый Массив;
			НомерДокумента = "";
			Для Каждого ТекущийИнойДокумент Из ФайлыДокумента Цикл
				
				Если НомерДокумента <> ТекущийИнойДокумент.НомерДокумента И СписокДокументов.Количество() > 0 Тогда
					ЗначениеИнойДокумент.Вставить(НомерДокумента,
						АдресаФайловВоВременномХранилище(СписокДокументов, УникальныйИдентификатор));
					СписокДокументов = Новый Массив;
				КонецЕсли;
				
				НомерДокумента = ТекущийИнойДокумент.НомерДокумента;
				СписокДокументов.Добавить(ТекущийИнойДокумент.Ссылка);
				
			КонецЦикла;
			
			Если СписокДокументов.Количество() > 0 Тогда
				ЗначениеИнойДокумент.Вставить(НомерДокумента,
					АдресаФайловВоВременномХранилище(СписокДокументов, УникальныйИдентификатор));
			КонецЕсли;
			
			Результат.Вставить(ТекущийВид.Ключ, ЗначениеИнойДокумент);
			
		Иначе
			Результат.Вставить(ТекущийВид.Ключ, АдресаФайловВоВременномХранилище(
				ФайлыДокумента.ВыгрузитьКолонку("Ссылка"),
				УникальныйИдентификатор));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыЗаявления.ЗаявлениеВXML Тогда
		
		// Выгружаем заявления в XML-формате и прикрепляем к выгрузке
		
		ВыгрузкаЗаявления = ВыгрузитьДокументВXML(ПараметрыЗаявления.Заявление, УникальныйИдентификатор);
		Результат.Вставить(ВидыДокументов.Заявление, ВыгрузкаЗаявления);
		
		Если ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияИП()
			Или ПараметрыЗаявления.ВидДокумента = РегистрацияОрганизацииКлиентСервер.ВидДокументаРегистрацияООО() Тогда
			
			ОрганизацияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаявления.Заявление, "Организация");
			
			Если ПараметрыЗаявления.ЕстьУведомлениеОПереходеУСН Тогда
				
				УведомлениеОПереходеНаУСН = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
					ОрганизацияСсылка,
					Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН,
					Обработки.РегистрацияОрганизации.ПолноеИмяФормыПоУмолчанию("РегламентированноеУведомлениеПереходНаУСН"));
				
				Если ЗначениеЗаполнено(УведомлениеОПереходеНаУСН) Тогда
					ВыгрузкаУведомленияУСН = ВыгрузитьДокументВXML(УведомлениеОПереходеНаУСН.Ссылка, УникальныйИдентификатор);
					Результат.Вставить(ВидыДокументов.УведомлениеОПереходеНаУСН, ВыгрузкаУведомленияУСН);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЗаявления.ЕстьПатент Тогда
				
				ВидУведомленияПатент = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
				ЗаявлениеНаПолучениеПатента = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
					ОрганизацияСсылка,
					ВидУведомленияПатент,
					УчетПСНВызовСервера.ИмяФормыЗаявления(ВидУведомленияПатент));
				
				Если ЗначениеЗаполнено(УведомлениеОПереходеНаУСН) Тогда
					ВыгрузкаПатент = ВыгрузитьДокументВXML(ЗаявлениеНаПолучениеПатента.Ссылка, УникальныйИдентификатор);
					Результат.Вставить(ВидыДокументов.Патент, ВыгрузкаПатент);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет оформление списка выбора
//
// Параметры:
//   ДанныеВыбора - СписокЗначений - Список выбора формы
//   ТекстПоиска  - Строка - Строка для выделения текста
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска) Экспорт
	
	РезультатСписок = Новый СписокЗначений;
	
	Для Каждого ТекЗначение Из ДанныеВыбора Цикл
		Представление = ОбщегоНазначенияБП.ПодсветитьСтрокуПоиска(ТекЗначение.Представление, ТекстПоиска);
		РезультатСписок.Добавить(ТекЗначение.Значение, Представление);
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

// Возвращает полное имя регламентированного уведомления
//
// Параметры:
//   Заявление - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяФормыЗаявления(Заявление) Экспорт
	
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		Возврат "";
	КонецЕсли;
	
	РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявление, "ИмяОтчета, ИмяФормы");
	
	Возврат СтрШаблон("Отчет.%1.Форма.%2", РеквизитыЗаявления.ИмяОтчета, РеквизитыЗаявления.ИмяФормы);
	
КонецФункции

Функция ПроверитьКодПодтверждения(Идентификатор, КодПроверки) Экспорт
	
	Результат = Ложь;
	
	Если СтрДлина(КодПроверки) < РегистрацияОрганизацииКлиентСервер.ДлинаКодаПодтверждения() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПроверки = ДокументооборотРегистрацияВФНС.СервисРегистрацииФНСПроверитьКодПодтверждения(Идентификатор, КодПроверки);
	
	Если ДанныеПроверки.Выполнено Тогда
		Результат = ДанныеПроверки.Успешно;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось проверить код подтверждения.
			|%1
			|Попробуйте ещё раз.'"),
			ДанныеПроверки.Ошибка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПовторнойОтправкиКодаПодтверждения(СрокДействияКодаПодтверждения) Экспорт
	
	Если Не ЗначениеЗаполнено(СрокДействияКодаПодтверждения) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	РазностьДат = СрокДействияКодаПодтверждения - ТекущаяДата;
	
	Если РазностьДат > 0 Тогда
		Возврат СтрШаблон(НСтр("ru = 'Запросить повторно код можно через %1 сек.'"), РазностьДат);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция НачатьПолучениеКодаПодтверждения(ПараметрыВыполнения, Знач УникальныйИдентификатор) Экспорт
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = ПараметрыВыполнения.НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ОтправитьКодПодтвержденияВФоне",
		ПараметрыВыполнения,
		НастройкиЗапуска);
	
КонецФункции

Функция ТекстПодсказкиНомерТелефона(ИмяФормы) Экспорт
	
	Если СтрНайти(ИмяФормы, "РегистрацияООО") > 0 Тогда
		ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Телефон указывается в <a href=""ОбразецЗаявленияОРегистрацииОрганизацииЛистИ"">Заявлении о регистрации</a>
			|Например, +7(123)1234567 или 8(123)1234567'"));
	ИначеЕсли СтрНайти(ИмяФормы, "РегистрацияИП") > 0 Тогда
		ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Телефон указывается в  <a href=""ОбразецЗаявленияОРегистрацииИПЛистБ"">Заявлении о регистрации</a>
			|Например, +7(123)1234567 или 8(123)1234567'"));
	Иначе
		ТекстПодсказки = НСтр("ru = 'Например, +7(123)1234567 или 8(123)1234567'");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

// Выполняет проверку регламентированного уведомления и возвращает список с описанием ошибок
//
// Параметры:
//   ЗаявлениеСсылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Рег.уведомления с видом Р11001, Р13014, Р21001, Р13014
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ОшибкиПроверкиВыгрузкиУведомления(ЗаявлениеСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ЗаявлениеСсылка) Тогда
		
		// Проверяем выгрузку заявления, если опубликован формат и доступная печать PDF-417
		РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявлениеСсылка, "ИмяОтчета, ИмяФормы");
		Если Отчеты[РеквизитыЗаявления.ИмяОтчета].ДоступнаПечатьPDF417(РеквизитыЗаявления.ИмяФормы) Тогда
			СписокОшибок = УведомлениеОСпецрежимахНалогообложения.ПроверитьДокументСВыводомВТаблицу(ЗаявлениеСсылка);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				Возврат СписокОшибок;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает описание документа в присоединенных файлах заявления
//
// Параметры:
//   Заявление - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Рег.уведомления с видом Р11001, Р13014, Р21001, Р13014, Р26001
//
// Возвращаемое значение:
//   Неопределено, Структура - См. НовыеПараметрыДокументаВПросоединенныхФайлах()
//
Функция ДокументПоИдентификатору(Знач Заявление, Знач Идентификатор, Знач УникальныйИдентификатор) Экспорт
	
	Перем ИмяФайла;
	
	Если Обработки.РегистрацияОрганизации.ИменаФайлов().Свойство(Идентификатор, ИмяФайла) Тогда
		Файл = Обработки.РегистрацияОрганизации.ПрисоединенныйФайлЗаявленияПоИмени(Заявление, ИмяФайла);
	КонецЕсли;
	
	Если Файл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Наименование, Расширение");
	
	Документ = НовыеПараметрыДокументаВПрисоединенныхФайлах();
	Документ.АдресХранилища = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Файл), УникальныйИдентификатор);
	Документ.ИмяФайла = СтрШаблон("%1.%2", СвойстваФайла.Наименование, СвойстваФайла.Расширение);
	
	Возврат Документ;
	
КонецФункции

// Возвращает признак того, что уведомление используется для регистрации в ЕГРЮЛ/ЕГРЮЛ
//
// Параметры:
//   ВидУведомления - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения - Вид регламентированного уведомления
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоУведомлениеОРегистрацииВЕГР(ВидУведомления) Экспорт
	
	ВидыУведомлений = Новый Массив;
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР13001);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР14001);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР24001);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР13014);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР26001);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР11001);
	ВидыУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР21001);
	
	Возврат (ВидыУведомлений.Найти(ВидУведомления) <> Неопределено);
	
КонецФункции

// Возвращает данные присоединенного файла
//
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы - Присоединенный файл к заявлению
//   ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы
//
// Возвращаемое значение:
//   Структура
//
Функция ДанныеФайлаДляОткрытия(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
	
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
	
КонецФункции

// Возвращает имя формы заявления о регистрации
//
// Параметры:
//   Период    - Дата - Дата, на которую необходимо получить действующую форму регламентированного уведомления
//   ИмяОтчета - Строка - Имя отчета в конфигурации, для которого необходимо получить действующую форму регламентированного уведомления
//
// Возвращаемое значение:
//   Строка
//
Функция ФормаЗаявленияПоУмолчанию(Период, ИмяОтчета) Экспорт
	
	ФормыРеглОтчета = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
	ФормыРеглОтчета.Сортировать("ДатаНачала Возр");
	
	ВыбраннаяФорма = Неопределено;
	
	// Выбираем действующую форму заявления
	Для Каждого ТекущаяФорма Из ФормыРеглОтчета Цикл
		
		Если ТекущаяФорма.ДатаНачала > Период
			Или ЗначениеЗаполнено(ТекущаяФорма.ДатаКонца)
			И ТекущаяФорма.ДатаКонца < Период Тогда
			
			Продолжить;
		КонецЕсли;
		
		ВыбраннаяФорма = ТекущаяФорма.ИмяФормы;
		
	КонецЦикла;
	
	Возврат ВыбраннаяФорма;
	
КонецФункции

// Возвращает идентификатор помощника регистрации в ЕГРЮЛ/ЕГРИП по виду заявления
//
// Параметры:
//   Заявление - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - Рег.уведомления с видом Р11001, Р13014, Р21001, Р13014, Р26001
//
// Возвращаемое значение:
//   Строка - См. РегистрацияОрганизацииКлиентСервер.ИдентификаторыФормПомощниковРегистрации()
//
Функция ВидПомощникаРегистрации(Заявление) Экспорт
	
	ИдентификаторыФорм = РегистрацияОрганизацииКлиентСервер.ИдентификаторыФормПомощниковРегистрации();
	
	ВидУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявление, "ВидУведомления");
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР26001 Тогда
		Возврат ИдентификаторыФорм.СнятиеСУчета;
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР11001 Тогда
		Возврат ИдентификаторыФорм.РегистрацияООО;
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР21001 Тогда
		Возврат ИдентификаторыФорм.РегистрацияИП;
	Иначе
		Возврат ИдентификаторыФорм.ВнесениеИзменений;
	КонецЕсли;
	
КонецФункции

// Возвращает юридическое или физическое лицо по имени выбранного отчета
//
// Параметры:
//   ИмяОтчета - Строка - Имя регламентированного отчета, напр. РегламентированноеУведомлениеФормаР11001
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЮридическоеФизическоеЛицо
//
Функция ЮридическоеФизическоеЛицоПоИмениОтчета(ИмяОтчета) Экспорт
	
	Если ИмяОтчета = "РегламентированноеУведомлениеФормаР11001" Тогда
		Результат = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		Результат = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СравнитьНаселенныеПункты(Знач Адрес1, Знач Адрес2) Экспорт
	
	Возврат РегистрацияОрганизацииПовтИсп.СравнитьНаселенныеПункты(Адрес1, Адрес2);
	
КонецФункции

Функция ПараметрыНавигацииПомощникаРегистрации() Экспорт
	
	СтруктураНавигации = Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощникаРегистрации();
	Если СтруктураНавигации = Неопределено Тогда
		СтруктураНавигации = Обработки.РегистрацияОрганизации.ПодготовитьСтруктуруНавигацииПомощникаРегистрации().Структура;
		НомерШага = 1;
	Иначе
		// Получим текущий номер шага помощника.
		НомерШага = Обработки.РегистрацияОрганизации.НомерШагаПомощника();
	КонецЕсли;
	
	Возврат Новый Структура("НомерШага, СтруктураНавигации", НомерШага, СтруктураНавигации);
	
КонецФункции

Функция СтруктураНавигацииПомощникаРегистрации() Экспорт
	
	Возврат Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощникаРегистрации();
	
КонецФункции

// Приводит адрес к формату, обеспечивающему наиболее точный поиск на картах Google и Яндекс.
// Преобразует адрес всегда к формату "Административно-территориальное деление",
// удаляет из представления почтовый индекс и символ "№"
//
// Параметры:
//   АдресЗначениеJSON - Строка - json-строка, содержащая описание адреса.
//
// Возвращаемое значение:
//   Строка - представление адреса
//
Функция ПредставлениеАдресаДляПоискаМФЦ(АдресЗначениеJSON) Экспорт
	
	ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресЗначениеJSON);
	ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "№", ""); // без номера поиск на карте точнее
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

#Область ПечатьБезДвумерногоКода

// Формирует список печатаемых листов регламентированного отчета
//
// Параметры:
//   Объект - Структура - Структура, описывающая объект с ключами:
//     * ИмяФормы - Строка - Имя формы регламентированного отчета
//     * Ссылка   - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - ссылка на уведомление
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СписокПечатаемыхЛистов(Объект, ИмяОтчета) Экспорт
	
	Если ИмяОтчета = "РегламентированноеУведомлениеФормаР26001" Тогда
		// Печать завязывается на документ-объект
		Возврат Отчеты[ИмяОтчета].СформироватьСписокЛистов(Объект.Ссылка, Ложь);
	Иначе
		Возврат Отчеты[ИмяОтчета].СформироватьСписокЛистов(Объект, Ложь);
	КонецЕсли;
	
КонецФункции

// Возвращает адрес во временном хранилище записанного пакета табличных документов
//
// Параметры:
//   ПакетТаблДок            - ПакетОтображаемыхДокументов - пакет документов для записи
//   УникальныйИдентификатор - Уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка
//
Функция ПоместитьЗаявлениеБезДвумерногоКодаВоВременноеХранилище(ПакетТаблДок, УникальныйИдентификатор) Экспорт
	
	АдресВоВременномХранилище = Неопределено;
	
	Если ПакетТаблДок.Состав.Количество() > 0 Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
		ПакетТаблДок.ЗаписатьФайлДляПечати(ИмяФайла);
		
		ФайлЛиста = Новый ДвоичныеДанные(ИмяФайла);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлЛиста, УникальныйИдентификатор);
		
		// Удаляем временный файл
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Удаление'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

#КонецОбласти

// Возвращает адрес во временном хранилище, которое содержит двоичные данные сформированного типового устава в формате PDF
//
// Параметры:
//   ДанныеУстава            - Структура - см. РегистрацияОрганизацииКлиентСервер.НовыйДанныеТиповогоУстава()
//   НомерТиповогоУстава     - Число - Номер типового устава
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка
//
Функция ТиповойУставООО(ДанныеУстава, НомерТиповогоУстава, УникальныйИдентификатор) Экспорт
	
	Возврат Обработки.РегистрацияОрганизации.ТиповойУставООО(НомерТиповогоУстава, ДанныеУстава, УникальныйИдентификатор);
	
КонецФункции

#Область РаботаСПрикрепленнымиФайлами

Функция АдресаФайловВоВременномХранилище(ПрикрепленныеФайлы, УникальныйИдентификатор)
	
	Результат = Новый Массив;
	
	Для Каждого ТекущийФайл Из ПрикрепленныеФайлы Цикл
		ДанныеФайла = ДанныеФайлаДляОткрытия(ТекущийФайл, УникальныйИдентификатор);
		Результат.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеФайлаОтФНСДляОткрытия()
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправкаСсылка", Справочники.ОтправкиРегистрацияЮЛ.ПустаяСсылка()); // СправочникСсылка.ОтправкиРегистрацияЮЛ
	Результат.Вставить("ДанныеДляОткрытия", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеФайловЭтапа(ФайлыЭтапа, НазначениеФайла, УникальныйИдентификатор)
	
	Результат = Неопределено;
	
	Для Каждого ТекущийФайл Из ФайлыЭтапа Цикл
		Если НазначениеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийФайл, "НазначениеФайла") Тогда
			Результат = ДанныеФайлаДляОткрытия(ТекущийФайл, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеОтправкиДокументовВФНС(ЗаявлениеСсылка)
	
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваЗаявленияРегистрацииЮЛ(ЗаявлениеСсылка);
	Возврат СвойстваОтправки.СтатусОтправки;
	
КонецФункции

// Возвращает таблицу со ссылками на прикрепленные файлы отсканированных страниц документа
//
// Параметры:
//   ВладелецФайла - СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы - ссылка на владельца файлов
//   ВидДокумента  - Строка - Указание вида документа в описании прикрепленного файла (см. РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов())
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НовыйТаблицаОтсканированныхСтраницДокумента()
//
Функция ТаблицаОтсканированныхСтраницДокумента(ВладелецФайла, ВидДокумента) Экспорт
	
	// Загрузка файлов осуществляется, исходя из описания файла
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Описание КАК Описание,
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Наименование КАК ИмяФайла
	|ИЗ
	|	Справочник.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы КАК УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ПометкаУдаления
	|	И УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Описание ПОДОБНО &ВидДокумента");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ВидДокумента", СтрШаблон("%1%%", ВидДокумента));
	
	Результат = НовыйТаблицаОтсканированныхСтраницДокумента();
	
	ВидДокументаИной = РегистрацияОрганизацииКлиентСервер.ВидыПрикрепленныхДокументов().ИнойДокумент;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерСтраницы = НомерСтраницыПрикрепленногоФайла(Выборка.Описание);
		
		Если НомерСтраницы = 0 Тогда
			НомерСтроки = Результат.Количество() + 1;
		Иначе
			НомерСтроки = НомерСтраницы;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если СтрНачинаетсяС(Выборка.Описание, ВидДокументаИной) > 0 Тогда
			КоличествоСимволов = СтрДлина(ВидДокументаИной) + 1;
			НомерДокумента = Сред(Выборка.Описание, КоличествоСимволов, СтрНайти(Выборка.Описание, ",") - КоличествоСимволов);
			НоваяСтрока.НомерДокумента = НомерДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("НомерДокумента, НомерСтроки");
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаОтсканированныхСтраницДокумента()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	Результат.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Результат.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(
		Метаданные.Справочники.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ДлинаНаименования));
	
	Возврат Результат;
	
КонецФункции

Функция НомерСтраницыПрикрепленногоФайла(ОписаниеФайла)
	
	Результат = 0;
	
	УказательСтраницы = РегистрацияОрганизацииКлиентСервер.ИдентификаторСтраницыПрикрепленногоФайлаДокумента();
	ДлинаУказателя = СтрДлина(УказательСтраницы);
	
	Описание = СтрРазделить(ОписаниеФайла, Символы.ПС);
	
	Если Описание.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияУказателя = СтрНайти(Описание[0], УказательСтраницы);
	НомерСтроки = СокрЛП(Сред(Описание[0], ПозицияУказателя + ДлинаУказателя));
	Если СтрДлина(НомерСтроки) <> 0 Тогда
		Результат = ОбщегоНазначения.ОписаниеТипаЧисло(5).ПривестиЗначение(НомерСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПометитьНаУдалениеПрикрепленныеФайлы(ПрикрепленныеФайлы)
	
	Для Каждого ТекущийФайл Из ПрикрепленныеФайлы Цикл
		СпрОбъект = ТекущийФайл.Ссылка.ПолучитьОбъект();
		СпрОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ВыгрузитьДокументВXML(ДокументСсылка, УникальныйИдентификатор)
	
	Результат = Новый Массив;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	СодержаниеВыгрузки = ДокументОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(СодержаниеВыгрузки) Тогда
		Для Каждого ТекущийДокумент Из СодержаниеВыгрузки Цикл
			Результат.Добавить(ТекущийДокумент.АдресФайлаВыгрузки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыДокументаВПрисоединенныхФайлах()
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища", ""); // Адрес во временном хранилище
	Результат.Вставить("ИмяФайла", ""); // Имя файла для открытия и сохранения (скачивания для веб-клиента) документа на диск
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

