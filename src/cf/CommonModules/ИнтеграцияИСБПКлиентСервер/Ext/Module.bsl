#Область СлужебныеПроцедурыИФункции

Процедура ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РозничнаяПродажа") Тогда
		ЗаполнитьПараметрыСканированияЧекККМ(Контекст, ПараметрыСканирования, ВидПродукции, Ложь);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РеализацияТоваровУслуг") Тогда
		ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаРеализации") Тогда
		ЗаполнитьПараметрыСканированияКорректировкаРеализации(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровОтПокупателя") Тогда
		ЗаполнитьПараметрыСканированияВозвратОтПокупателя(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.АктОРасхождениях")  Тогда
		ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеПолучения(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.АктОРасхожденияхПолученный")  Тогда
		ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПоступлениеТоваровУслуг") Тогда
		ЗаполнитьПараметрыСканированияПоступлениеТоваровУслуг(Контекст, ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаПоступления") Тогда
		ДополнитьПараметрыСканированияПоступлениеКорректировка(ПараметрыСканирования);
	ИначеЕсли  ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПередачаТоваров") Тогда
		ЗаполнитьПараметрыСканированияПередачаТоваров(Контекст, ПараметрыСканирования, ВидПродукции); 
	КонецЕсли;
КонецПроцедуры

//Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
//Возвращаемое значение:
//   Булево - это документ
Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт

	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1.", Имя)) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции


#Область ПодключаемыеКомандыИС

Процедура УправлениеВидимостьюКомандВыводаВОборота(Форма, Команды) Экспорт
	
	Операция = Форма.Объект.Операция;
	
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС") Тогда
			Элемент.Видимость = ИмяМетаданных = "РеализацияТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара") Тогда
			Элемент.Видимость = ИмяМетаданных = "СписаниеТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа") Тогда
			Элемент.Видимость = ИмяМетаданных = "РеализацияТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ТребованиеНакладная" ИЛИ ИмяМетаданных = "РеализацияТоваровУслуг");
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыСканированияЧекККМ(Контекст, ПараметрыСканирования, ВидПродукции, ПроверкаКоличества = Неопределено)
	ИсточникДанных = Новый Структура("Организация, Склад, Дата, ВидОперации");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ЗаполнитьЗначенияСвойств(ИсточникДанных, Контекст.Объект);
	Иначе
		ЗаполнитьЗначенияСвойств(ИсточникДанных, Контекст);
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Ложь;
	Если НЕ ЗначениеЗаполнено(ВидПродукции) ИЛИ ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = 
			ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ИсточникДанных.Организация, ИсточникДанных.Склад, ИсточникДанных.Дата);
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС 
		И ШтрихкодированиеЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		
		ПараметрыСканирования.ОрганизацияЕГАИС              = 
			ИнтеграцияЕГАИСБПВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(ИсточникДанных.Организация, ИсточникДанных.Склад);
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Истина;
	
	Результат = Ложь;
	Если ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") Тогда
		Результат = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
	ИначеЕсли ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат") Тогда
		Результат = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
	КонецЕсли;
	
	Если НЕ Результат Тогда
		// Частичное выбытие и проверка средствами ККТ имеют смысл только при включенном ИС МП
		// и виде операции "Продажа" или "Возврат"
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ТребуетсяЧастичноеВыбытие") Тогда
		ПараметрыСканированияЧастичноеВыбытие = Новый Структура;
		ПараметрыСканированияЧастичноеВыбытие.Вставить("ТребуетсяЧастичноеВыбытие", Истина);
		ПараметрыСканированияЧастичноеВыбытие.Вставить("ИмяКолонкиЧастичноеВыбытиеКоличество"		, "ЧастичноеВыбытиеКоличество");
		ПараметрыСканированияЧастичноеВыбытие.Вставить("ИмяКолонкиЧастичноеВыбытиеВариантУчета"		, "ЧастичноеВыбытиеВариантУчета");
		ПараметрыСканированияЧастичноеВыбытие.Вставить("ИмяКолонкиЧастичноеВыбытиеНоменклатура"		, "ЧастичноеВыбытиеНоменклатура");
		ПараметрыСканированияЧастичноеВыбытие.Вставить("ИмяКолонкиЧастичноеВыбытиеХарактеристика"	, "");
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, ПараметрыСканированияЧастичноеВыбытие);
	КонецЕсли;
	
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ = "РазрешительныйРежимИдентификаторЗапросаГИСМТ";
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ = "РазрешительныйРежимДатаЗапросаГИСМТ";
	
	Если ПараметрыСканирования.Свойство("ТребуетсяПроверкаСредствамиККТ") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "СписокОборудованияПечатьЧека") 
		И Контекст.СписокОборудованияПечатьЧека.Количество() = 1 Тогда
		
			ИдентификаторУстройства = Контекст.СписокОборудованияПечатьЧека[0].Значение;
			
			Если МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ   = Истина;
				ПараметрыСканирования.ККТФФД12ИСМП                     = ИдентификаторУстройства;
			КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Результат = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	Если Результат Тогда
		ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ = "РазрешительныйРежимИдентификаторЗапросаГИСМТ";
		ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ = "РазрешительныйРежимДатаЗапросаГИСМТ";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияКорректировкаРеализации(Контекст, ПараметрыСканирования, ВидПродукции)
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	НастройкиИСМП = Новый Структура;
	НастройкиИСМП.Вставить("КонтролироватьОкончаниеСрокаГодности", Ложь);
	НастройкиИСМП.Вставить("ЗапрашиватьДанныеСервисаИСМП",         Ложь);
	НастройкиИСМП.Вставить("ДопустимыПроверкиСеройЗоныМОТП",       Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, НастройкиИСМП);

	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратОтПокупателя(Контекст, ПараметрыСканирования, ВидПродукции)
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовогоВозврата(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеПолучения(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПоступлениеТоваровУслуг(Контекст, ПараметрыСканирования, ВидПродукции)
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции);
	
	ДополнитьПараметрыСканированияПоступлениеКорректировка(ПараметрыСканирования);
	
КонецПроцедуры

Процедура ДополнитьПараметрыСканированияПоступлениеКорректировка(ПараметрыСканирования)

	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;

КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПередачаТоваров(Контекст, ПараметрыСканирования, ВидПродукции)
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

#КонецОбласти

