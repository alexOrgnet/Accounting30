#Область ПрограммныИнтерфейс

// Отправляет письмо продавцу на адрес электронной почты для уведомлений.
//
// Параметры:
//	Тема - Строка - Тема письма
//	Текст - Строка - Текст письма
//	Вложения - Массив - Вложения письма
//
Процедура ОтправитьУведомлениеПродавцу(Тема, Текст, Вложения = Неопределено) Экспорт
	
	Попытка
		Если НЕ УведомлятьПродавцаПоЭлектроннойПочте() Тогда
			Возврат;
		КонецЕсли;
		
		АдресаЭлектроннойПочты = СтрРазделить(АдресЭлектроннойПочтыДляУведомлений(), ",", Ложь);
		Для каждого АдресЭлектроннойПочты Из АдресаЭлектроннойПочты Цикл
			ОтправитьПисьмо(АдресЭлектроннойПочты, Тема, Текст, Вложения);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Отправляет письмо покупателю.
//
// Параметры:
//	Адрес - Строка
//	Тема - Строка - Тема письма
//	Текст - Строка - Текст письма
//	Вложения - Массив - Вложения письма
//
Процедура ОтправитьУведомлениеПокупателю(Адрес, Тема, Текст, Вложения = Неопределено) Экспорт
	
	Попытка
		Если НЕ УведомлятьПокупателяПоЭлектроннойПочте() Тогда
			Возврат;
		КонецЕсли;
		
		ОтправитьПисьмо(Адрес, Тема, Текст, Вложения, Истина);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Создает описание вложения на основании двоичных данных и представления файла.
//
// Параметры:
//	ДанныеФайла - ДвоичныеДанные - Двоичные данные файла.
//	ПредставлениеФайла - Строка - Представление файла.
//
// Возвращаемое значание:
//	Структура со следующими ключами:
//	* Представление - Строка - Представление файла.
//	* АдресВоВременномХранилище - Строка - Адрес двоичных данных после помещения во временное хранилище.
//
Функция ОписаниеВложения(ДанныеФайла, ПредставлениеФайла) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", ПредставлениеФайла);
	Результат.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла));
	
	Возврат Результат;
	
КонецФункции

#Область ВыставлениеСчета

// Отправляет письмо продавцу с выставленным счетом в формате XLS.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Выставленный счет
//	ПредставлениеТарифов - Строка - Представление тарифов в счете
//	Продление - Булево - Признак продления действующей подписки
//	КодПокупателя - Число - Код абонента
//	ПочтаПокупателя - Строка - Адрес электронной почты покупателя
//	ТелефонПокупателя - Строка - Номер телефона покупателя
//
Процедура ОтправитьПисьмоПродавцуСоСчетом(Счет, ПредставлениеТарифов, Продление, КодПокупателя, ПочтаПокупателя, ТелефонПокупателя) Экспорт
	
	ШаблонТемы = НСтр("ru='Новый счет для абонента %1'");
	
	ТемаПисьма = СтрШаблон(ШаблонТемы, КодПокупателя);
	
	ШаблонПисьма = НСтр("ru='Сформирован [ПредставлениеСчета] для абонента [КодПокупателя].
	|Абонент: [ПочтаПокупателя]
	|Телефон: [ТелефонПокупателя]
	|Продление: [Продление]
	|Сумма: [Сумма]
	|
	|Тариф:
	|[ПредставлениеТарифов]
	|'");
	
	СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "СуммаДокумента");
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ПредставлениеСчета",   НРег(Документы.СчетНаОплатуПокупателю.Представление(Счет)));
	ЗначенияПодстановки.Вставить("КодПокупателя",        КодПокупателя);
	ЗначенияПодстановки.Вставить("ПочтаПокупателя",      ПочтаПокупателя);
	ЗначенияПодстановки.Вставить("ТелефонПокупателя",    ТелефонПокупателя);
	ЗначенияПодстановки.Вставить("ПредставлениеТарифов", ПредставлениеТарифов);
	ЗначенияПодстановки.Вставить("Продление",            Продление);
	ЗначенияПодстановки.Вставить("Сумма",                СуммаДокумента);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	Вложения = Новый Массив;
	
	СчетXLS = Документы.СчетНаОплатуПокупателю.XLS(Счет);
	Если СчетXLS <> Неопределено Тогда
		ИмяСчетаXLS = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрШаблон("%1.%2", Документы.СчетНаОплатуПокупателю.Представление(Счет), "xls"));
		Вложения.Добавить(ОплатаСервисаЭлектроннаяПочтаБП.ОписаниеВложения(СчетXLS, ИмяСчетаXLS));
	КонецЕсли;
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПродавцу(ТемаПисьма, ТекстПисьма, Вложения);
	
КонецПроцедуры

// Отправляет письмо покупателю с выставленным счетом в формате PDF.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Выставленный счет
//	ПочтаПокупателя - Строка - Адрес электронной почты покупателя
//
Процедура ОтправитьПисьмоПокупателюСоСчетом(Счет, ПочтаПокупателя) Экспорт
	
	ТемаПисьма = НСтр("ru='Счет на оплату сервиса'");
	
	ШаблонПисьма = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаВыставленСчет();
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Организация, Дата");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		РеквизитыСчета.Организация, РеквизитыСчета.Дата);
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ТелефонОрганизации", СведенияОбОрганизации.Телефоны);
	ЗначенияПодстановки.Вставить("ПочтаОрганизации",   СведенияОбОрганизации.Email);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	Вложения = Новый Массив;
	
	ФайлPDF = Документы.СчетНаОплатуПокупателю.PDF(Счет);
	Если ФайлPDF <> Неопределено Тогда
		ИмяФайлаPDF = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрШаблон("%1.%2", Документы.СчетНаОплатуПокупателю.Представление(Счет), "pdf"));
		Вложения.Добавить(ОплатаСервисаЭлектроннаяПочтаБП.ОписаниеВложения(ФайлPDF, ИмяФайлаPDF));
	КонецЕсли;
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПокупателю(ПочтаПокупателя, ТемаПисьма, ТекстПисьма, Вложения);
	
КонецПроцедуры

// Отправляет письмо продавцу об ошибке при выставлении счета.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//	ЗаголовокОшибки - Строка - Заголовок ошибки, отображается в заголовке письма
//	ОписаниеОшибки - Строка - Описание ошибки, отображается в теле письма
//
Процедура ОтправитьПисьмоПродавцуОбОшибкеПриВыставленииСчета(Счет, ЗаголовокОшибки, ОписаниеОшибки) Экспорт
	
	ТемаПисьма = СтрШаблон(НСтр("ru='Ошибка: %1'"), ЗаголовокОшибки);
	
	ШаблонПисьма = НСтр("ru='[ОписаниеОшибки]
	|
	|Счет: [Счет]
	|'");
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ЗначенияПодстановки.Вставить("Счет",           Счет);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПродавцу(ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежнаяСистемаЮKassa

// Отправляет письмо продавцу об оплате.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//	КодПокупателя - Число - Код абонента
//	ДанныеОповещения - Структура - Данные оповещения об оплате из сервиса ЮKassa
//
Процедура ОтправитьПисьмоПродавцуОбОплате(Счет, КодПокупателя, ДанныеОповещения) Экспорт
	
	ДанныеСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Номер, Дата");
	НомерСчета = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчета.Номер, Истина);
	ДатаСчета = Формат(ДанныеСчета.Дата, "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Счет);
	Номенклатура = СтрСоединить(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Содержание"), Символы.ПС);
	
	object = ДанныеОповещения.object;
	ИдентификаторПлатежа = object.id;
	Сумма = object.amount.value;
	Валюта = object.amount.currency;
	
	ШаблонТемы = НСтр("ru='ЮKassa: оплачен счет %1 от %2 на сумму %3 %4'");
	
	ТемаПисьма = СтрШаблон(ШаблонТемы,
		НомерСчета,
		ДатаСчета,
		Сумма,
		Валюта);
	
	ШаблонПисьма = НСтр("ru='[Счет]
	|Код абонента: [КодПокупателя]
	|
	|Способ оплаты: [СпособОплаты]
	|Сумма: [Сумма] [Валюта]
	|Оплачен: [Оплачен]
	|Идентификатор платежа: [Идентификатор]
	|
	|[Описание]
	|
	|Тариф:
	|[Номенклатура]
	|'");
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("Счет",          Счет);
	ЗначенияПодстановки.Вставить("КодПокупателя", КодПокупателя);
	ЗначенияПодстановки.Вставить("Идентификатор", ИдентификаторПлатежа);
	ЗначенияПодстановки.Вставить("Оплачен",       object.paid);
	ЗначенияПодстановки.Вставить("Описание",      object.description);
	ЗначенияПодстановки.Вставить("Сумма",         Сумма);
	ЗначенияПодстановки.Вставить("Валюта",        Валюта);
	ЗначенияПодстановки.Вставить("СпособОплаты",  object.payment_method.type);
	ЗначенияПодстановки.Вставить("Номенклатура",  Номенклатура);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПродавцу(ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

// Отправляет письмо покупателю об оплате.
//
// Параметры:
//	ПочтаПокупателя - Строка - Адрес электронной почты покупателя
//	Организация - СправочникСсылка.Организации - Организация, обслуживающая покупателя
//
Процедура ОтправитьПисьмоПокупателюОбОплате(ПочтаПокупателя, Организация) Экспорт
	
	ТемаПисьма = НСтр("ru='Спасибо за оплату!'");
	
	ШаблонПисьма = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаПолученаОплата();
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		Организация,
		ТекущаяДатаСеанса()
	);
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ТелефонОрганизации", СведенияОбОрганизации.Телефоны);
	ЗначенияПодстановки.Вставить("ПочтаОрганизации",   СведенияОбОрганизации.Email);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПокупателю(ПочтаПокупателя, ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

// Отправляет письмо продавцу об ошибке при обработке оплаты.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//	ОписаниеОшибки - Строка - Описание ошибки
//	ДанныеОповещения - Структура - Данные оповещения об оплате из сервиса ЮKassa
//
Процедура ОтправитьПисьмоПродавцуОбОшибкеПриОплате(Счет, ОписаниеОшибки, ДанныеОповещения) Экспорт
	
	ТемаПисьма = НСтр("ru='ЮKassa: ошибка обработки оповещения о платеже'");
	
	ШаблонПисьма = НСтр("ru='[ОписаниеОшибки]
	|
	|Счет: [Счет]
	|
	|Оповещение платежной системы:
	|[ДанныеОповещения]
	|'");
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ОписаниеОшибки",   ОписаниеОшибки);
	ЗначенияПодстановки.Вставить("Счет",             Счет);
	ЗначенияПодстановки.Вставить("ДанныеОповещения", ДанныеОповещения);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПродавцу(ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

// Отправляет письмо покупателю об ошибке при обработке оплаты.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//
Процедура ОтправитьПисьмоПокупателюОбОшибкеПриОплате(Счет) Экспорт
	
	СвойстваСчета = РегистрыСведений.СчетНаОплатуПокупателюОплатаСервиса.СвойстваСчета(Счет);
	Если НЕ СвойстваСчета.Выбран() Тогда
		ОписаниеОшибки = НСтр("ru='Платежная система ЮKassa: Отправка письма об ошибке покупателю: Не заполнены свойства счета для биллинга'");
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТемаПисьма = НСтр("ru='Что-то пошло не так'");
	
	ШаблонПисьма = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаОшибка();
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Организация, Дата");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		РеквизитыСчета.Организация, РеквизитыСчета.Дата);
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("ТелефонОрганизации", СведенияОбОрганизации.Телефоны);
	ЗначенияПодстановки.Вставить("ПочтаОрганизации",   СведенияОбОрганизации.Email);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПокупателю(СвойстваСчета.ПочтаПокупателя, ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область Подписки

// Отправляет письмо продавцу об оформлении подписки.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//	ДанныеПодписки - Структура - Данные подписки
//
Процедура ОтправитьПисьмоПродавцуОПодписке(Счет, ДанныеПодписки) Экспорт
	
	ДанныеДействующейПродлевающейПодписки = ОплатаСервисаПодпискиБП.ПолучитьДействующуюПродлевающуюПодписку(
		ДанныеПодписки.КодВедущегоАбонента, ДанныеПодписки.КодОбслуживаемогоАбонента);
	ДействуетПродлевающаяПодписка = ?(ДанныеДействующейПродлевающейПодписки = Неопределено,
		НСтр("ru='Нет'"),
		СтрШаблон(НСтр("ru='%1 - %2, тариф %3 (%4)'"),
			ДанныеДействующейПродлевающейПодписки.ДатаПодключения,
			ДанныеДействующейПродлевающейПодписки.ДатаОтключения,
			ДанныеДействующейПродлевающейПодписки.КодТарифаПровайдера,
			ДанныеДействующейПродлевающейПодписки.КодТарифаОбслуживающейОрганизации));
	
	ШаблонТемы = НСтр("ru='Абоненту %1 оформлена подписка на тариф %2'");
	
	ТемаПисьма = СтрШаблон(ШаблонТемы,
		ДанныеПодписки.КодОбслуживаемогоАбонента,
		СтрШаблон("%1 (%2)", ДанныеПодписки.КодТарифаПровайдера, ДанныеПодписки.КодТарифаОбслуживающейОрганизации));
	
	ШаблонПисьма = НСтр("ru='Код покупателя: [КодПокупателя]
	|Код подписки: [КодПодписки]
	|Код тарифа провайдера: [КодТарифаПровайдера]
	|Код тарифа обслуживающей организации: [КодТарифаОбслуживающейОрганизации]
	|Начало: [Начало]
	|Период: [ПериодДействия]
	|
	|Счет: [Счет]
	|
	|Действует продлевающая подписка: [ДействуетПродлевающаяПодписка]
	|'");
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("Счет",                              Счет);
	ЗначенияПодстановки.Вставить("КодПокупателя",                     ДанныеПодписки.КодОбслуживаемогоАбонента);
	ЗначенияПодстановки.Вставить("КодПодписки",                       ДанныеПодписки.КодПодписки);
	ЗначенияПодстановки.Вставить("КодТарифаПровайдера",               ДанныеПодписки.КодТарифаПровайдера);
	ЗначенияПодстановки.Вставить("КодТарифаОбслуживающейОрганизации", ДанныеПодписки.КодТарифаОбслуживающейОрганизации);
	ЗначенияПодстановки.Вставить("Начало",                            ДанныеПодписки.ДатаПодключения);
	ЗначенияПодстановки.Вставить("ПериодДействия",                    ДанныеПодписки.КодПериодаДействия);
	ЗначенияПодстановки.Вставить("ДействуетПродлевающаяПодписка",     ДействуетПродлевающаяПодписка);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПродавцу(ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

// Отправляет письмо покупателю об оформлении подписки.
//
// Параметры:
//	Счет - ДокументСсылка.СчетНаОплатуПокупателю - Оплаченный счет
//	ДанныеПодписки - Структура - Данные подписки
//
Процедура ОтправитьПисьмоПокупателюОПодписке(Счет, ДанныеПодписки) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеПодписки.КодТарифаОбслуживающейОрганизации) Тогда
		Префикс = ОплатаСервисаБП.ПрефиксТарифаОбслуживающейОрганизации();
		КодТарифа = ДанныеПодписки.КодТарифаОбслуживающейОрганизации;
	Иначе
		Префикс = ОплатаСервисаБП.ПрефиксТарифаПровайдера();
		КодТарифа = ДанныеПодписки.КодТарифаПровайдера;
	КонецЕсли;
	
	Артикул = СтрШаблон("%1-%2-%3", Префикс, ДанныеПодписки.КодПериодаДействия, КодТарифа);
	Тариф = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
	
	СвойстваСчета = РегистрыСведений.СчетНаОплатуПокупателюОплатаСервиса.СвойстваСчета(Счет);
	Если НЕ СвойстваСчета.Выбран() Тогда
		ОписаниеОшибки = НСтр("ru='Отправка письма о подписке покупателю: Не заполнены свойства счета для биллинга'");
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТемаПисьма = НСтр("ru='Оформление подписки'");
	
	ШаблонПисьма = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаОформленаПодписка();
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Организация, Дата");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		РеквизитыСчета.Организация, РеквизитыСчета.Дата);
	
	ЗначенияПодстановки = Новый Структура;
	ЗначенияПодстановки.Вставить("Тариф",              Тариф);
	ЗначенияПодстановки.Вставить("ТелефонОрганизации", СведенияОбОрганизации.Телефоны);
	ЗначенияПодстановки.Вставить("ПочтаОрганизации",   СведенияОбОрганизации.Email);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПисьма, ЗначенияПодстановки);
	
	ОплатаСервисаЭлектроннаяПочтаБП.ОтправитьУведомлениеПокупателю(СвойстваСчета.ПочтаПокупателя, ТемаПисьма, ТекстПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиУведомлений

// Возвращает признак отправки уведомлений продавцу по электронной почте.
//
// Возвращаемое значение:
//	Булево - признак отправки уведомлений продавцу по электронной почте
//
Функция УведомлятьПродавцаПоЭлектроннойПочте() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УведомлятьПродавцаПоЭлектроннойПочте = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"УведомлятьПродавцаПоЭлектроннойПочте"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УведомлятьПродавцаПоЭлектроннойПочте = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УведомлятьПродавцаПоЭлектроннойПочте;
	
КонецФункции

// Возвращает адрес электронной почты для уведомлений.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты для уведомлений
//
Функция АдресЭлектроннойПочтыДляУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АдресЭлектроннойПочтыДляУведомлений = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"АдресЭлектроннойПочтыДляУведомлений"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АдресЭлектроннойПочтыДляУведомлений = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат АдресЭлектроннойПочтыДляУведомлений;
	
КонецФункции

// Возвращает признак отправки уведомлений покупателю по электронной почте.
//
// Возвращаемое значение:
//	Булево - признак отправки уведомлений покупателю по электронной почте
//
Функция УведомлятьПокупателяПоЭлектроннойПочте() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УведомлятьПокупателяПоЭлектроннойПочте = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"УведомлятьПокупателяПоЭлектроннойПочте"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УведомлятьПокупателяПоЭлектроннойПочте = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УведомлятьПокупателяПоЭлектроннойПочте;
	
КонецФункции

// Возвращает шаблон письма о выставлении счета.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты для уведомлений
//
Функция ШаблонПисьмаВыставленСчет() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонПисьмаВыставленСчет = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ШаблонПисьмаВыставленСчет"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблонПисьмаВыставленСчет;
	
КонецФункции

// Возвращает шаблон письма о получении оплаты.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты для уведомлений
//
Функция ШаблонПисьмаПолученаОплата() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонПисьмаПолученаОплата = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ШаблонПисьмаПолученаОплата"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблонПисьмаПолученаОплата;
	
КонецФункции

// Возвращает шаблон письма об оформлении подписки.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты для уведомлений
//
Функция ШаблонПисьмаОформленаПодписка() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонПисьмаОформленаПодписка = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ШаблонПисьмаОформленаПодписка"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблонПисьмаОформленаПодписка;
	
КонецФункции

// Возвращает шаблон письма об ошибке.
//
// Возвращаемое значение:
//	Строка - адрес электронной почты для уведомлений
//
Функция ШаблонПисьмаОшибка() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонПисьмаОшибка = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецДанныхВХранилище(),
		"ШаблонПисьмаОшибка"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблонПисьмаОшибка;
	
КонецФункции

// Записывает адрес электронной почты для уведомлений в хранилище.
//
// Параметры:
//	АдресЭлектроннойПочтыДляУведомлений - Строка - адрес электронной почты для уведомлений
//
Процедура УстановитьАдресЭлектроннойПочтыДляУведомлений(АдресЭлектроннойПочтыДляУведомлений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		АдресЭлектроннойПочтыДляУведомлений,
		"АдресЭлектроннойПочтыДляУведомлений"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает признак отправки уведомлений продавцу по электронной почте.
//
// Параметры:
//	УведомлятьПродавцаПоЭлектроннойПочте - Булево - признак отправки уведомлений по электронной почте
//
Процедура УстановитьУведомлятьПродавцаПоЭлектроннойПочте(УведомлятьПродавцаПоЭлектроннойПочте) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		УведомлятьПродавцаПоЭлектроннойПочте,
		"УведомлятьПродавцаПоЭлектроннойПочте"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает признак отправки уведомлений покупателю по электронной почте.
//
// Параметры:
//	УведомлятьПокупателяПоЭлектроннойПочте - Булево - признак отправки уведомлений по электронной почте
//
Процедура УстановитьУведомлятьПокупателяПоЭлектроннойПочте(УведомлятьПокупателяПоЭлектроннойПочте) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		УведомлятьПокупателяПоЭлектроннойПочте,
		"УведомлятьПокупателяПоЭлектроннойПочте"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает шаблон письма о выставлении счета в хранилище.
//
// Параметры:
//	Шаблон - Строка - Шаблон письма
//
Процедура УстановитьШаблонПисьмаВыставленСчет(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		Шаблон,
		"ШаблонПисьмаВыставленСчет"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает шаблон письма о получении оплаты в хранилище.
//
// Параметры:
//	Шаблон - Строка - Шаблон письма
//
Процедура УстановитьШаблонПисьмаПолученаОплата(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		Шаблон,
		"ШаблонПисьмаПолученаОплата"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает шаблон письма об оформлении подписки в хранилище.
//
// Параметры:
//	Шаблон - Строка - Шаблон письма
//
Процедура УстановитьШаблонПисьмаОформленаПодписка(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		Шаблон,
		"ШаблонПисьмаОформленаПодписка"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает шаблон письма об ошибке в хранилище.
//
// Параметры:
//	Шаблон - Строка - Шаблон письма
//
Процедура УстановитьШаблонПисьмаОшибка(Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецДанныхВХранилище(),
		Шаблон,
		"ШаблонПисьмаОшибка"
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет письмо.
//
// Параметры:
//	Адрес - Строка
//	Тема - Строка - Тема письма
//	Текст - Строка - Текст письма
//	Вложения - Массив - Вложения письма
//	HTML - Булево - Признак использования форматат HTML
//
Процедура ОтправитьПисьмо(Адрес, Тема, Текст, Вложения = Неопределено, HTML = Ложь)
	
	Попытка
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Кому", Адрес);
		ПараметрыОтправки.Вставить("Тема", Тема);
		ПараметрыОтправки.Вставить("Тело", Текст);
		ПараметрыОтправки.Вставить("Вложения", Вложения);
		Если HTML Тогда
			ПараметрыОтправки.Вставить("ТипТекста", "HTML");
			ПараметрыОтправки.Вставить("ОбрабатыватьТексты", Ложь);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыОтправки);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОплатаСервисаЖурналРегистрацииБП.ЗаписатьОшибку(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ВладелецДанныхВХранилище()
	
	Возврат "ОплатаСервисаБП_ЭлектроннаяПочта";
	
КонецФункции

#КонецОбласти

