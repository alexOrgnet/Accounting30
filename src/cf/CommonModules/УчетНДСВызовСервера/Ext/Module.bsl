
#Область СлужебныйПрограммныйИнтерфейс

// См. Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.БлижайшийНалоговыйПериод.
Функция БлижайшийНалоговыйПериодСервер(Организация, Период) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
	
КонецФункции

Функция РеквизитыДляНадписиОСчетеФактуреПолученном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт

	Возврат УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном(Документ, СтруктураОтбора);
	
КонецФункции

Функция РеквизитыДляНадписиОСчетеФактуреВыданном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт

	РеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(Документ, СтруктураОтбора);
	
	Если РеквизитыСФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",               РеквизитыСФ.Ссылка);
	Результат.Вставить("СчетФактура",          РеквизитыСФ.Ссылка);
	Результат.Вставить("Проведен",             РеквизитыСФ.Проведен);
	Результат.Вставить("Представление",        РеквизитыСФ.Представление);
	Результат.Вставить("КраткоеПредставление", ПредставлениеСчетФактураВыданный(РеквизитыСФ));
	Результат.Вставить("НадписьСчетФактура",   ПредставлениеСчетФактураВыданный(РеквизитыСФ));
	Результат.Вставить("НомерСчетаФактуры",    РеквизитыСФ.ПредставлениеНомера);
	Результат.Вставить("КодВидаОперации",      РеквизитыСФ.КодВидаОперации);
	
	Возврат Результат;
	
КонецФункции 

Функция РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(СчетФактура, СчетФактураИсправляемый) Экспорт
	
	Возврат УчетНДС.РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(СчетФактура, СчетФактураИсправляемый);
	
КонецФункции

Функция СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания) Экспорт
	
	Перем Результат;
	
	Основание = ПараметрыСоздания.Основание;
	СтруктураОтбора = ПараметрыСоздания.СтруктураОтбора;
	УникальныйИдентификаторФормы = ПараметрыСоздания.УникальныйИдентификатор;
	
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание,,, СтруктураОтбора);
	
	Если СчетФактура = Неопределено Тогда
		
		СписокРеквизитовОснования = "Организация, Дата, Проведен";
		ПроверятьКонтрагента = УчетНДС.ПроверятьКонтрагентаНаФорматныйКонтрольВДокументе(Основание);
		Если ПроверятьКонтрагента Тогда
			СписокРеквизитовОснования = СписокРеквизитовОснования + ", Контрагент";
		КонецЕсли;
	
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, СписокРеквизитовОснования);
		
		Если ПроверятьКонтрагента
			И НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(РеквизитыОснования.Контрагент, "Выданный") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НеобходимаАктуализацияПередСозданиемСчетаФактуры = Ложь;
		
		Если РеквизитыОснования.Проведен
			И ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
			
			// Проверим, есть ли необходимость актуализировать по договорам, используемым в документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Основание",   Основание);
			Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента КАК ДоговорКонтрагента
			|ИЗ
			|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
			|ГДЕ
			|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ = &Основание
			|	И РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация";
			ДоговорыДокумента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
			
			Если ДоговорыДокумента.Количество() > 0 Тогда
				
				МоментАктуальности = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
					РеквизитыОснования.Организация, РеквизитыОснования.Дата, Неопределено, ДоговорыДокумента);
				Если МоментАктуальности <> Неопределено Тогда
					НеобходимаАктуализацияПередСозданиемСчетаФактуры = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимаАктуализацияПередСозданиемСчетаФактуры Тогда
			
			ПараметрыПроцедуры = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
			ПараметрыПроцедуры.Организация             = РеквизитыОснования.Организация;
			ПараметрыПроцедуры.ДатаОкончания           = РеквизитыОснования.Дата;
			ПараметрыПроцедуры.Документ                = Основание;
			ПараметрыПроцедуры.ОстанавливатьсяПоОшибке = Истина;
			ПараметрыПроцедуры.АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификаторФормы);
			
			Если УникальныйИдентификаторФормы <> Неопределено Тогда // актуализация в фоновом задании
			
				ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
				ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация для выписки счета-фактуры'");
				ПараметрыВыполненияВФоне.КлючФоновогоЗадания = Основание;
				
				РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчетыВФоне",
					ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
					
				РезультатВыпискиСчетаФактуры = Новый Структура;
				РезультатВыпискиСчетаФактуры.Вставить("ФоновоеВыполнение",       Истина);
				РезультатВыпискиСчетаФактуры.Вставить("ДлительнаяОперация",      РезультатРасчета);
				РезультатВыпискиСчетаФактуры.Вставить("АдресХранилищаСОшибками", ПараметрыПроцедуры.АдресХранилищаСОшибками);
				
				Возврат РезультатВыпискиСчетаФактуры;
				
			КонецЕсли;
			
			// напрямую вызываем актуализацию
			РезультатАктуализации = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыПроцедуры);

			ПараметрыПослеАктуализации = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактурыПослеАктуализации();
			ПараметрыПослеАктуализации.АдресХранилищаСОшибками = ПараметрыПроцедуры.АдресХранилищаСОшибками;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПослеАктуализации, ПараметрыСоздания);
			СоздатьСчетФактуруВыданныйНаОснованииПослеАктуализации(ПараметрыПослеАктуализации, РезультатАктуализации);
			СчетФактура = ПараметрыПослеАктуализации.Ссылка;
			Результат   = ПараметрыПослеАктуализации.РеквизитыСФ;
			
		Иначе
			
			СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
			
		КонецЕсли;
	
	ИначеЕсли ПараметрыСоздания.ЭтоУниверсальныйДокумент Тогда
			
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		
		Если СчетФактураОбъект <> Неопределено Тогда
			
			СчетФактураОбъект.КодВидаОперации = ПараметрыСоздания.КодВидаОперации;
			
			РежимЗаписи = ?(Основание.Проведен,
				РежимЗаписиДокумента.Проведение,
				РежимЗаписиДокумента.Запись);
			
			Попытка
				СчетФактураОбъект.Записать(РежимЗаписи);
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
					СчетФактура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = РеквизитыДляНадписиОСчетеФактуреВыданном(СчетФактура);
	КонецЕсли;
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ВыписыватьСчетаФактурыСпецРежимы", ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создаёт счет-фактуру полученный на основании документа и подготавливает параметры для использования в интерфейсе формы.
//
// Параметры:
//  ПараметрыСоздания - Структура - см. УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры()
//  СтруктураОтбора   - Структура с ключами см. реквизиты документа СчетФактураПолученный для 
//                      отбора необходимых счетов-фактур.
//  ОбновлятьСтатусСчетаФактурыПоДокументу - Булево - признак того, что для документа-основания нужно обновить
//                                           статус проведения связанного с ним счета-фактуры.
//  ОригиналСчетаФактуры                   - Булево - признак того, что получен оригинал счета-фактуры.
//
// Возвращаемое значение:
//  Результат - Структура - см. РеквизитыДляНадписиОСчетеФактуреПолученном()
//
Функция СоздатьСчетФактуруПолученныйНаОсновании(
	ПараметрыСоздания,
	СтруктураОтбора = Неопределено,
	ОбновлятьСтатусСчетаФактурыПоДокументу = Истина,
	ОригиналСчетаФактуры = Неопределено) Экспорт

	Основание = ПараметрыСоздания.Основание;
	НомерСчетаФактурыПолученного = ПараметрыСоздания.НомерСчетаФактурыПолученного;
	ДатаСчетаФактурыПолученного  = ПараметрыСоздания.ДатаСчетаФактурыПолученного;
	
	ЭтоУниверсальныйДокумент = ПараметрыСоздания.ЭтоУниверсальныйДокумент;
	КодВидаОперации          = ПараметрыСоздания.КодВидаОперации;
	НДСПредъявленКВычету     = ПараметрыСоздания.НДСПредъявленКВычету;
	Продавцы                 = ПараметрыСоздания.Продавцы;
	
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание,,,СтруктураОтбора);
	
	Если СчетФактура = Неопределено Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
			
			ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Основание);
			Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			СчетФактура = УчетНДСПереопределяемый.ДобавитьОснованиеВИсправленныйСчетФактуруПолученный(
				Основание,
				НомерСчетаФактурыПолученного,
				ДатаСчетаФактурыПолученного,
				ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				ВидСчетаФактуры);
			
			Если СчетФактура = Неопределено Тогда
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
					СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруНаОснованииИсправления(
						Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного);
				ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
					СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСоздания);
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			Если НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(Основание.Контрагент, "Полученный") Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ВидСчетаФактуры = Неопределено;
			
			// Если основание Возврат поставщику, то в параметрах поиска меняем вид счета-фактуры
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			КонецЕсли;
				
			// Счет-фактура на поступление
			СчетФактура = УчетНДСПереопределяемый.ДобавитьОснованиеВСчетФактуруПолученный(
				Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, 
				ОбновлятьСтатусСчетаФактурыПоДокументу, ОригиналСчетаФактуры, ВидСчетаФактуры);
				
			Если СчетФактура = Неопределено Тогда 
				СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруПолученныйНаОсновании(
					ПараметрыСоздания, ОбновлятьСтатусСчетаФактурыПоДокументу, ОригиналСчетаФактуры);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			Если СчетФактураОбъект <> Неопределено Тогда
				ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
				ЭтоИсправление = ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
				Если ЭтоИсправление Тогда
					СчетФактураОбъект.НомерИсправления = НомерСчетаФактурыПолученного;
					СчетФактураОбъект.ДатаИсправления  = ДатаСчетаФактурыПолученного;
				Иначе
					СчетФактураОбъект.НомерВходящегоДокумента = НомерСчетаФактурыПолученного;
					СчетФактураОбъект.ДатаВходящегоДокумента  = ДатаСчетаФактурыПолученного;
				КонецЕсли;
				
				Если ЭтоУниверсальныйДокумент Тогда
					СчетФактураОбъект.КодВидаОперации = КодВидаОперации;
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать();
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
						СчетФактура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
				КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли ЭтоУниверсальныйДокумент Тогда
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			Если СчетФактураОбъект <> Неопределено Тогда
				
				СчетФактураОбъект.НомерВходящегоДокумента = НомерСчетаФактурыПолученного;
				СчетФактураОбъект.ДатаВходящегоДокумента  = ДатаСчетаФактурыПолученного;
				СчетФактураОбъект.КодВидаОперации         = КодВидаОперации;
				
				РеквизитыОбъекты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация,Дата");
				РаздельныйУчетНДСДо2014Года = УчетнаяПолитика.РаздельныйУчетНДСДо2014Года(РеквизитыОбъекты.Организация, РеквизитыОбъекты.Дата);
				// При ведении раздельного учета НДС по прежней методике (до 2014 года)
				// пользователь не управляет свойством "НДСПредъявленКВычету" счета-фактуры из формы документа-основания,
				// исключим это свойство из синхронизируемых.
				Если Не РаздельныйУчетНДСДо2014Года Тогда
					СчетФактураОбъект.НДСПредъявленКВычету = НДСПредъявленКВычету;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОригиналСчетаФактуры) Тогда 
					СтатусДокумента = ?(ОригиналСчетаФактуры, 
						Перечисления.СтатусыДокументовПоступления.ОригиналПолучен,
						Перечисления.СтатусыДокументовПоступления.ОригиналНеПолучен);
					СчетФактураОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", СтатусДокумента);
				КонецЕсли;
				
				Если Продавцы.Количество() > 0 Тогда
					СчетФактураОбъект.Продавцы.Очистить();
					Для Каждого СтрокаПродавец Из Продавцы Цикл
						НоваяСтрока = СчетФактураОбъект.Продавцы.Добавить();
						НоваяСтрока.Продавец = СтрокаПродавец.Продавец;
					КонецЦикла;
					СчетФактураОбъект.Продавец = Продавцы[0].Продавец;
				КонецЕсли;
				
				РежимЗаписи = ?(Основание.Проведен,
					РежимЗаписиДокумента.Проведение,
					РежимЗаписиДокумента.Запись);
				
				Попытка
					СчетФактураОбъект.Записать(РежимЗаписи);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
						СчетФактура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
				КонецПопытки;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Результат = РеквизитыДляНадписиОСчетеФактуреПолученном(СчетФактура);
	
	Возврат Результат;
	
КонецФункции

// Создаёт счет-фактуру выданный на основании документа и подготавливает параметры для использования в интерфейсе формы.
//
// Параметры:
//  ПараметрыСоздания - Структура - см. УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры()
//                                Перед использованием Основание и АдресРезультата должны быть уже заполнены.
//  РезультатАктуализации - Структура - см. УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты().
//                          Неопределено - если фоновое задание не было успешно завершено.
//
Процедура СоздатьСчетФактуруВыданныйНаОснованииПослеАктуализации(ПараметрыСоздания, РезультатАктуализации) Экспорт
	
	Если РезультатАктуализации <> Неопределено
		И РезультатАктуализации.Свойство("АдресРезультата")
		И ЭтоАдресВременногоХранилища(РезультатАктуализации.АдресРезультата) Тогда
		РезультатРасчета = ПолучитьИзВременногоХранилища(РезультатАктуализации.АдресРезультата);
		УдалитьИзВременногоХранилища(РезультатАктуализации.АдресРезультата);
	Иначе
		РезультатРасчета = РезультатАктуализации;
	КонецЕсли;
	
	Если РезультатРасчета <> Неопределено
		И РезультатРасчета.Свойство("Сообщения")
		И РезультатРасчета.Сообщения.Количество() > 0 Тогда
		ПараметрыСоздания.ОткрытьФормуОшибки = Истина;
	Иначе
		УдалитьИзВременногоХранилища(ПараметрыСоздания.АдресХранилищаСОшибками);
	КонецЕсли;
	
	ПараметрыСоздания.Ссылка      = УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
	ПараметрыСоздания.РеквизитыСФ = РеквизитыДляНадписиОСчетеФактуреВыданном(ПараметрыСоздания.Ссылка);
	ПараметрыСоздания.ВыписыватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы");
	
КонецПроцедуры

Функция СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры) Экспорт
	
	СчетФактура = УчетНДСПереопределяемый.СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры);
		
	Возврат РеквизитыДляНадписиОСчетеФактуреПолученном(СчетФактура);
	
КонецФункции

Функция ПолучитьИдентификаторМакетаРасшифровкиДекларацииПоНДС(Знач ПараметрыОтчета, Знач Показатель, ПользовательскиеНастройки) Экспорт
	
	ИдентификаторМакета = "";
	
	ТаблицаРасшифровок = ПолучитьИзВременногоХранилища(ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровок) = Тип("ТаблицаЗначений") Тогда
		
		НомерТекущейСтраницы = 0;
		
		ПараметрыОтчета.Свойство("НомерТекущейСтраницы", НомерТекущейСтраницы);
		
		Если НомерТекущейСтраницы = Неопределено ИЛИ НомерТекущейСтраницы = 0 Тогда
			ИмяПоказателя = Показатель;
		Иначе
			ИмяПоказателя = Показатель + "_" + НомерТекущейСтраницы;
		КонецЕсли;
		
		Расшифровка = ТаблицаРасшифровок.Найти(ИмяПоказателя,"ИмяПоказателя");
		
		Если Расшифровка <> Неопределено Тогда
			
			ДополнительныеПараметры = Расшифровка.ДополнительныеПараметры;
			
			ИдентификаторМакета = ДополнительныеПараметры.ИдентификаторМакета;
			
			Если ИдентификаторМакета = "ОткрытьОбъект" Тогда
				
				ДополнительныеПараметры.Свойство("Объект", ИдентификаторМакета);
				
			Иначе
				
				ДополнительныеПараметры.Свойство("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
			КонецЕсли;
			
			Если Расшифровка.ИмяРаздела = "Раздел5" 
				И НЕ (СтрНачинаетсяС(ИмяПоказателя,"П000500008003") ИЛИ СтрНачинаетсяС(ИмяПоказателя,"П000500009003")) Тогда
				
				ИдентификаторМакетаСтруктура = Новый Структура;
				
				ИдентификаторМакетаСтруктура.Вставить("НачалоПериодаРаздел5", ДополнительныеПараметры.ДатаНачала);
				ИдентификаторМакетаСтруктура.Вставить("КонецПериодаРаздел5", КонецКвартала(ДополнительныеПараметры.ДатаНачала));
				ИдентификаторМакетаСтруктура.Вставить("ИдентификаторМакета", ИдентификаторМакета);
				
				ИдентификаторМакета = ИдентификаторМакетаСтруктура;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторМакета;
	
КонецФункции

Функция ПолучитьВыгружаемыеДанныеЗаявлениеОВвозеТоваров(Ссылка, УникальныйИдентификаторЗаявлениеОВвозе,
	УникальныйИдентификаторУчетПеремещенияТоваров) Экспорт

	ВыгружаемыеДанные = Новый Структура("ЗаявлениеОВвозеТоваров,УчетПеремещенияТоваров");
	
	ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров = 
		Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификаторЗаявлениеОВвозе, Ссылка);
	ВыгружаемыеДанные.УчетПеремещенияТоваров = 
		Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьУчетПеремещенияТоваров(УникальныйИдентификаторУчетПеремещенияТоваров, Ссылка);
		
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция ПолучитьВыгружаемыеДанныеЖурналаУчетаСчетовФактур(Ссылка, УникальныйИдентификаторЖурнала) Экспорт

	ДокументОбъект = Ссылка.ПолучитьОбъект();
	
	ВыгружаемыеДанные = ДокументОбъект.ВыгрузитьДокумент(УникальныйИдентификаторЖурнала);
	
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция СтруктураРеквизитовСчетаФактурыПолученного(ДокументСсылка) Экспорт
	
	СтруктураРекизитов = Новый Структура;
	
	РеквизитыСчетаФактуры =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
		"ВидСчетаФактуры,
		|ДокументОснование,
		|ДоговорКонтрагента,
		|НомерВходящегоДокумента,
		|ДатаВходящегоДокумента,
		|Исправление,
		|СуммаДокументаКомиссия");
	
	ВидСчетаФактуры        = РеквизитыСчетаФактуры.ВидСчетаФактуры;
	ДокументОснование      = РеквизитыСчетаФактуры.ДокументОснование;
	Исправление            = РеквизитыСчетаФактуры.Исправление;
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСчетаФактуры.ДоговорКонтрагента, "ВидДоговора");
	СчетФактураСКомиссией  = РеквизитыСчетаФактуры.СуммаДокументаКомиссия > 0;
	
	ПоследнееИсправление = УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ОснованиеДляКорректировки = ПоследнееИсправление;
	Иначе
		ОснованиеДляКорректировки = ДокументОснование;
	КонецЕсли;
	
	ПорядокИсправления = Новый ФиксированноеСоответствие(
		Документы.СчетФактураПолученный.ПолучитьСоответствиеВидовСчетаФактурыПорядкуИсправления());
	
	СтруктураРекизитов.Вставить("ВидСчетаФактуры",           ВидСчетаФактуры);
	СтруктураРекизитов.Вставить("Исправление",               Исправление);
	СтруктураРекизитов.Вставить("ПоследнееИсправление",      ПоследнееИсправление);
	СтруктураРекизитов.Вставить("ОснованиеДляКорректировки", ОснованиеДляКорректировки);
	СтруктураРекизитов.Вставить("ДокументОснование",         ДокументОснование);
	СтруктураРекизитов.Вставить("ВидДоговораКонтрагента",    ВидДоговораКонтрагента);
	СтруктураРекизитов.Вставить("ПорядокИсправления",        ПорядокИсправления);
	СтруктураРекизитов.Вставить("СчетФактураСКомиссией",     СчетФактураСКомиссией);
	
	СтруктураРекизитов.Вставить("СчетФактура",             ДокументСсылка);
	СтруктураРекизитов.Вставить("НомерВходящегоДокумента", РеквизитыСчетаФактуры.НомерВходящегоДокумента);
	СтруктураРекизитов.Вставить("ДатаВходящегоДокумента",  РеквизитыСчетаФактуры.ДатаВходящегоДокумента);
	
	Возврат СтруктураРекизитов;
	
КонецФункции

Функция СтруктураРеквизитовСчетаФактурыВыданного(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, 
		"ВидСчетаФактуры, ДокументОснование, Продавец");
	
	ВидСчетаФактуры   = РеквизитыСчетаФактуры.ВидСчетаФактуры;
	ДокументОснование = РеквизитыСчетаФактуры.ДокументОснование;
	
	ПоследнееИсправление = УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыВыданного(ДокументСсылка);
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследнееИсправление, "ДокументОснование");
	
	СчетФактураЯвляетсяОснованием = Ложь;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
		ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(ДокументОснование))Тогда
		
		СчетФактураЯвляетсяОснованием = Истина;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		СчетФактураЯвляетсяОснованием = ЗначениеЗаполнено(РеквизитыСчетаФактуры.Продавец);
		
	КонецЕсли;

	ВозможноИсправить  = Истина;
	ПорядокИсправления = Новый ФиксированноеСоответствие(Документы.СчетФактураВыданный.ПолучитьСоответствиеВидовСчетаФактурыПорядкуИсправления());
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
		ВозможноИсправить = Ложь;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		ВозможноИсправить = Ложь;
	КонецЕсли;
	
	ВозможноКорректировать = Истина;
	Если НЕ ПорядокИсправления[ВидСчетаФактуры] 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		ВозможноКорректировать = Ложь;
	КонецЕсли;
	
	ДоступнаКорректировочнаяСправка = Ложь;
	Если ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка") Тогда 
		ДоступнаКорректировочнаяСправка = Истина;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("ВидСчетаФактуры",      ВидСчетаФактуры);
	СтруктураРеквизитов.Вставить("ПоследнееИсправление", ПоследнееИсправление);
	СтруктураРеквизитов.Вставить("ДокументОснование",    Основание);
	
	СтруктураРеквизитов.Вставить("ПорядокИсправления",        ПорядокИсправления);
	СтруктураРеквизитов.Вставить("ВозможноИсправить",         ВозможноИсправить);
	СтруктураРеквизитов.Вставить("ИсправлятьСчетФактуру",     СчетФактураЯвляетсяОснованием);
	СтруктураРеквизитов.Вставить("ВозможноКорректировать",    ВозможноКорректировать);
	СтруктураРеквизитов.Вставить("КорректироватьСчетФактуру", СчетФактураЯвляетсяОснованием);
	СтруктураРеквизитов.Вставить("ДоступнаКорректировочнаяСправка", ДоступнаКорректировочнаяСправка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка) Экспорт
	
	Возврат УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка);
	
КонецФункции

Функция ПолучитьНастройкиПечатиСчетовФактур(МассивДокументов) Экспорт
	
	ДокументыБезСчетовФактур = Новый Массив;
	СчетаФактуры = Новый Массив;
	НеВыставленныеСчетаФактурыНаАванс = Новый Массив;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	Для Счетчик = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла; 
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Основание,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураВыданный.Выставлен КАК Выставлен,
	|	СчетФактураВыданный.КодСпособаВыставления КАК КодСпособаВыставления
	|ПОМЕСТИТЬ СчетаФактурыВыданные
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Выставлен,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.КодСпособаВыставления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&МассивДокументов)
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание,
	|	СчетФактураВыданный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК Основание,
	|	СчетаФактурыВыданные.СчетФактура КАК СчетФактура,
	|	СчетаФактурыВыданные.Дата КАК Дата,
	|	СчетаФактурыВыданные.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетаФактурыВыданные.Выставлен КАК Выставлен,
	|	СчетаФактурыВыданные.КодСпособаВыставления КАК КодСпособаВыставления
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыВыданные КАК СчетаФактурыВыданные
	|		ПО ТаблицаДокументов.ДокументОснование = СчетаФактурыВыданные.Основание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СчетаФактуры.Добавить(Выборка.СчетФактура);
				Если Выборка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
				   И Не Выборка.Выставлен И Выборка.КодСпособаВыставления = 1 Тогда
					НеВыставленныеСчетаФактурыНаАванс.Добавить(
						Новый Структура("Ссылка, Дата", Выборка.СчетФактура, Выборка.Дата));
				КонецЕсли;
			Иначе	
				ДокументыБезСчетовФактур.Добавить(Выборка.Основание);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ДокументыБезСчетовФактур = МассивДокументов;
	КонецЕсли; 
	
	Возврат НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, НеВыставленныеСчетаФактурыНаАванс);
	
КонецФункции

Функция ПолучитьНастройкиПечатиСчетовФактурПолученных(МассивДокументов) Экспорт
	
	ДокументыБезСчетовФактур = Новый Массив;
	СчетаФактуры = Новый Массив;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	Для Счетчик = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла; 
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Основание,
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&МассивДокументов)
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание,
	|	СчетФактураПолученный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК Основание,
	|	СчетаФактурыПолученные.СчетФактура КАК СчетФактура
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыПолученные КАК СчетаФактурыПолученные
	|		ПО ТаблицаДокументов.ДокументОснование = СчетаФактурыПолученные.Основание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СчетаФактуры.Добавить(Выборка.СчетФактура);
			Иначе	
				ДокументыБезСчетовФактур.Добавить(Выборка.Основание);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ДокументыБезСчетовФактур = МассивДокументов;
	КонецЕсли; 
	
	Возврат НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, Новый Массив);
	
КонецФункции

Функция НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, НеВыставленныеСчетаФактурыНаАванс)
	
	СписокМакетов = "";
	ЕстьСчетФактура = Ложь;
	ЕстьСчетФактура1137 = Ложь;
	ЕстьСчетФактура981 = Ложь;
	ЕстьСчетФактура534 = Ложь;
	ЕстьСчетФактура534Прослеж = Ложь;
	ЕстьСчетФактура2023Кв4 = Ложь;
	ЕстьСчетФактура2023Кв4Прослеж = Ложь;
	ЕстьКорректировочныйСчетФактура = Ложь;
	ЕстьКорректировочныйСчетФактура1137 = Ложь;
	ЕстьКорректировочныйСчетФактура952 = Ложь;
	ЕстьКорректировочныйСчетФактура981 = Ложь;
	ЕстьКорректировочныйСчетФактура981Аванс = Ложь;
	ЕстьКорректировочныйСчетФактура534 = Ложь;
	ЕстьКорректировочныйСчетФактура534Прослеж = Ложь;
	ЕстьКорректировочныйСчетФактура2023Кв4 = Ложь;
	ЕстьКорректировочныйСчетФактура2023Кв4Прослеж = Ложь;
	
	Для Каждого Объект Из СчетаФактуры Цикл
		
		// Определим дату для получения версии печатной формы.
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
			ДатаВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДатаВходящегоДокумента");
		Иначе
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, 
				"Исправление, ВидСчетаФактуры, Дата, ДатаИсходногоДокумента, ДатаИсправляемогоКорректировочногоДокумента");
			Если РеквизитыСчетаФактуры.Исправление Тогда
				Если РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
					ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
				Иначе
					ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсходногоДокумента;
				КонецЕсли;
			Иначе
				ДатаВерсии = РеквизитыСчетаФактуры.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ДатаВерсии) Тогда 
			
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
			
			Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
				ИЛИ Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				Если ВерсияПостановленияНДС1137 >= 6 Тогда
					
					Если Объект.ЕстьПрослеживаемыеТовары Тогда
						Если НЕ ЕстьКорректировочныйСчетФактура2023Кв4Прослеж Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура2023Кв4Прослеж", ",КорректировочныйСчетФактура2023Кв4Прослеж");
							ЕстьКорректировочныйСчетФактура2023Кв4Прослеж = Истина;
						КонецЕсли;
					Иначе
						Если НЕ ЕстьКорректировочныйСчетФактура2023Кв4 Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура2023Кв4", ",КорректировочныйСчетФактура2023Кв4");
							ЕстьКорректировочныйСчетФактура2023Кв4 = Истина;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
					
					Если Объект.ЕстьПрослеживаемыеТовары Тогда
						Если НЕ ЕстьКорректировочныйСчетФактура534Прослеж Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура534Прослеж", ",КорректировочныйСчетФактура534Прослеж");
							ЕстьКорректировочныйСчетФактура534Прослеж = Истина;
						КонецЕсли;
					Иначе
						Если НЕ ЕстьКорректировочныйСчетФактура534 Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура534", ",КорректировочныйСчетФактура534");
							ЕстьКорректировочныйСчетФактура534 = Истина;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
					
					Если НЕ ЕстьКорректировочныйСчетФактура981 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура981", ",КорректировочныйСчетФактура981");
						ЕстьКорректировочныйСчетФактура981 = Истина;
					КонецЕсли;
					
				ИначеЕсли ВерсияПостановленияНДС1137 > 1 Тогда
					
					Если НЕ ЕстьКорректировочныйСчетФактура952 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура952", ",КорректировочныйСчетФактура952");
						ЕстьКорректировочныйСчетФактура952 = Истина;
					КонецЕсли;
				
				Иначе
					
					Если НЕ ЕстьКорректировочныйСчетФактура1137 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура1137", ",КорректировочныйСчетФактура1137");
						ЕстьКорректировочныйСчетФактура1137 = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
				
				Если ВерсияПостановленияНДС1137 >= 5 Тогда
					Если НЕ ЕстьКорректировочныйСчетФактура534 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура534", ",КорректировочныйСчетФактура534");
						ЕстьКорректировочныйСчетФактура534 = Истина;
					КонецЕсли;
				Иначе
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура981Аванс", ",КорректировочныйСчетФактура981Аванс");
					ЕстьКорректировочныйСчетФактура981Аванс = Истина;
				КонецЕсли;
				
			Иначе
				
				Если ВерсияПостановленияНДС1137 >= 6 Тогда

					Если Объект.ЕстьПрослеживаемыеТовары Тогда
						Если НЕ ЕстьСчетФактура2023Кв4Прослеж Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура2023Кв4Прослеж", ",СчетФактура2023Кв4Прослеж");
							ЕстьСчетФактура2023Кв4Прослеж = Истина;
						КонецЕсли;
					Иначе
						Если НЕ ЕстьСчетФактура2023Кв4 Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура2023Кв4", ",СчетФактура2023Кв4");
							ЕстьСчетФактура2023Кв4 = Истина;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
					
					Если Объект.ЕстьПрослеживаемыеТовары Тогда
						Если НЕ ЕстьСчетФактура534Прослеж Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура534Прослеж", ",СчетФактура534Прослеж");
							ЕстьСчетФактура534Прослеж = Истина;
						КонецЕсли;
					Иначе
						Если НЕ ЕстьСчетФактура534 Тогда
							СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура534", ",СчетФактура534");
							ЕстьСчетФактура534 = Истина;
						КонецЕсли;
					КонецЕсли;
				
				ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
					
					Если НЕ ЕстьСчетФактура981 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура981", ",СчетФактура981");
						ЕстьСчетФактура981 = Истина;
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЕстьСчетФактура1137 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура1137", ",СчетФактура1137");
						ЕстьСчетФактура1137 = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
				ИЛИ Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура", ",КорректировочныйСчетФактура");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СчетаФактуры,НеВыставленныеСчетаФактурыНаАванс,ДокументыБезСчетовФактур,СписокМакетов",
		СчетаФактуры, НеВыставленныеСчетаФактурыНаАванс, ДокументыБезСчетовФактур, СписокМакетов);
	
КонецФункции

// Определяет, как именно нужно напечатать переданные документы
//
// Параметры:
//  МассивДокументов - Массив - содержит ссылки на первичные документы, подлежащие печати, или их счета-фактуры
// 
// Возвращаемое значение:
//  Структура - содержит структурированный перечень ссылок на документы, макеты, заголовки форм.
//              Не содержит существенных данных этих документов.
//              Описание структуры см. в конце функции.
//
Функция ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетаФактуры             = Новый Массив;
	ДокументыБезСчетовФактур = Новый Массив;
	ДокументыСПрослеживаемымиТоварами = Новый Массив;
	
	ОснованияСчетаФактурыПолученного = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(
		Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	
	Для каждого Объект Из МассивДокументов Цикл
	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный")
		 ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			СчетаФактуры.Добавить(Объект);
			ЕстьПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЕстьПрослеживаемыеТовары");
			Если ЕстьПрослеживаемыеТовары Тогда
				ДокументыСПрослеживаемымиТоварами.Добавить(Объект);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
			Запрос.УстановитьПараметр("ПустаяСФ", Документы.СчетФактураВыданный.ПустаяСсылка());
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОказаниеУслугКонтрагенты.СчетФактура КАК СчетФактура
				|ИЗ
				|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
				|ГДЕ
				|	ОказаниеУслугКонтрагенты.Ссылка В(&МассивДокументов)
				|	И ОказаниеУслугКонтрагенты.ВыданСФ
				|	И ОказаниеУслугКонтрагенты.СчетФактура <> &ПустаяСФ";
				
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					СчетаФактуры.Добавить(Выборка.СчетФактура);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ОснованияСчетаФактурыПолученного.Найти(ТипЗнч(Объект)) <> Неопределено
		        И ТипЗнч(Объект) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
				ЕстьПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ЕстьПрослеживаемыеТовары");
				Если ЕстьПрослеживаемыеТовары Тогда
					ДокументыСПрослеживаемымиТоварами.Добавить(СчетФактура);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураОтбора = Новый Структура;
			Если ТипЗнч(Объект) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
				И Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
				СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());
			КонецЕсли;
			
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект,,, СтруктураОтбора);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
				ЕстьПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ЕстьПрослеживаемыеТовары");
				Если ЕстьПрослеживаемыеТовары Тогда
					ДокументыСПрослеживаемымиТоварами.Добавить(СчетФактура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыСчетФактураНеТребуются   = СчетаФактурыНеТребуются(ДокументыБезСчетовФактур);
	ДокументыБезСФСПрослеживаемымиТоварами = ДокументыСПрослеживаемымиТоварами(ДокументыБезСчетовФактур);
	Для Каждого ЭлементМассива Из ДокументыБезСФСПрослеживаемымиТоварами Цикл
		ДокументыСПрослеживаемымиТоварами.Добавить(ЭлементМассива);
	КонецЦикла;
	
	УниверсальныеПередаточныеДокументы = Новый Массив;
	СписокМакетов = "";
	
	ЕстьУПДСтатус1                = Ложь;
	ЕстьУПДСтатус1_981            = Ложь;
	ЕстьУПДСтатус1_534            = Ложь;
	ЕстьУПДСтатус1_534Прослеж     = Ложь; 
	ЕстьУПДСтатус1_2023Кв4        = Ложь;
	ЕстьУПДСтатус1_2023Кв4Прослеж = Ложь; 
	
	ЕстьУПДСтатус2                = Ложь;
	ЕстьУПДСтатус2_981            = Ложь;
	ЕстьУПДСтатус2_534            = Ложь;
	ЕстьУПДСтатус2_534Прослеж     = Ложь;
	ЕстьУПДСтатус2_2023Кв4        = Ложь;
	ЕстьУПДСтатус2_2023Кв4Прослеж = Ложь;
	
	Для каждого Документ Из СчетаФактуры Цикл
		
		УниверсальныеПередаточныеДокументы.Добавить(Документ);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ДатаВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаВходящегоДокумента");
		Иначе
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
				"Исправление, Дата, ДатаИсходногоДокумента");
			Если РеквизитыСчетаФактуры.Исправление Тогда
				ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсходногоДокумента;
			Иначе
				ДатаВерсии = РеквизитыСчетаФактуры.Дата;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
		Если ВерсияПостановленияНДС1137 >= 6 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУПДСтатус1_2023Кв4Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_2023Кв4Прослеж", ",УПДСтатус1_2023Кв4Прослеж");
					ЕстьУПДСтатус1_2023Кв4Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУПДСтатус1_2023Кв4 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_2023Кв4", ",УПДСтатус1_2023Кв4");
					ЕстьУПДСтатус1_2023Кв4 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУПДСтатус1_534Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_534Прослеж", ",УПДСтатус1_534Прослеж");
					ЕстьУПДСтатус1_534Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУПДСтатус1_534 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_534", ",УПДСтатус1_534");
					ЕстьУПДСтатус1_534 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
			Если НЕ ЕстьУПДСтатус1_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_981", ",УПДСтатус1_981");
				ЕстьУПДСтатус1_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУПДСтатус1 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1", ",УПДСтатус1");
				ЕстьУПДСтатус1 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Документ Из ДокументыСчетФактураНеТребуются Цикл
		
		УниверсальныеПередаточныеДокументы.Добавить(Документ);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда 
			// Значит печатается исправительный УПД, печатаем по форме исходного.
			ДатаИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаИсходногоДокумента");
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаИсходногоДокумента);
		Иначе
			Если ОснованияСчетаФактурыПолученного.Найти(ТипЗнч(Объект)) <> Неопределено
				И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", Документ.Метаданные()) Тогда
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаВходящегоДокумента");
			Иначе
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата");
			КонецЕсли;
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаДокумента);
		КонецЕсли;
		
		Если ВерсияПостановленияНДС1137 >= 6 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУПДСтатус2_2023Кв4Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_2023Кв4Прослеж", ",УПДСтатус2_2023Кв4Прослеж");
					ЕстьУПДСтатус2_2023Кв4Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУПДСтатус2_2023Кв4 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_2023Кв4", ",УПДСтатус2_2023Кв4");
					ЕстьУПДСтатус2_2023Кв4 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУПДСтатус2_534Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_534Прослеж", ",УПДСтатус2_534Прослеж");
					ЕстьУПДСтатус2_534Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУПДСтатус2_534 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_534", ",УПДСтатус2_534");
					ЕстьУПДСтатус2_534 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
			Если НЕ ЕстьУПДСтатус2_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_981", ",УПДСтатус2_981");
				ЕстьУПДСтатус2_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУПДСтатус2 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2", ",УПДСтатус2");
				ЕстьУПДСтатус2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УниверсальныеПередаточныеДокументы.Количество() = 1 Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УниверсальныеПередаточныеДокументы[0], "Номер, Дата");
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Универсальный передаточный документ №%1 от %2'"),
			РеквизитыДокумента.Номер, Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Печать универсальных передаточных документов'");
	КонецЕсли;
	
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ЗаголовокФормы",                     ЗаголовокФормы);
	НастройкиПечати.Вставить("СписокМакетов",                      СписокМакетов);
	НастройкиПечати.Вставить("УниверсальныеПередаточныеДокументы", УниверсальныеПередаточныеДокументы);
	НастройкиПечати.Вставить("ДокументыБезСчетовФактур",           ДокументыБезСчетовФактур);
	НастройкиПечати.Вставить("ДокументыСчетФактураНеТребуются",    ДокументыСчетФактураНеТребуются);
	
	Возврат НастройкиПечати;
	
КонецФункции

Функция ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(МассивДокументов) Экспорт
	
	СчетаФактуры             = Новый Массив;
	ДокументыБезСчетовФактур = Новый Массив;
	ДокументыСПрослеживаемымиТоварами = Новый Массив;
	
	Для каждого Объект Из МассивДокументов Цикл
	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			СчетаФактуры.Добавить(Объект);
			ЕстьПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЕстьПрослеживаемыеТовары");
			Если ЕстьПрослеживаемыеТовары Тогда
				ДокументыСПрослеживаемымиТоварами.Добавить(Объект);
			КонецЕсли;
			
		Иначе
			
			СтруктураОтбора = Новый Структура;
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект,,, СтруктураОтбора);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
				ЕстьПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ЕстьПрослеживаемыеТовары");
				Если ЕстьПрослеживаемыеТовары Тогда
					ДокументыСПрослеживаемымиТоварами.Добавить(СчетФактура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыСчетФактураНеТребуются = СчетаФактурыНеТребуются(ДокументыБезСчетовФактур);
	ДокументыБезСФСПрослеживаемымиТоварами = ДокументыСПрослеживаемымиТоварами(ДокументыБезСчетовФактур);
	Для Каждого ЭлементМассива Из ДокументыБезСФСПрослеживаемымиТоварами Цикл
		ДокументыСПрослеживаемымиТоварами.Добавить(ЭлементМассива);
	КонецЦикла;
	
	УниверсальныеКорректировочныеДокументы = Новый Массив;
	СписокМакетов = "";
	
	ЕстьУКДСтатус1                = Ложь;
	ЕстьУКДСтатус1_981            = Ложь;
	ЕстьУКДСтатус1_534            = Ложь;
	ЕстьУКДСтатус1_534Прослеж     = Ложь; 
	ЕстьУКДСтатус1_2023Кв4        = Ложь; 
	ЕстьУКДСтатус1_2023Кв4Прослеж = Ложь; 
	
	ЕстьУКДСтатус2                = Ложь;
	ЕстьУКДСтатус2_981            = Ложь;
	ЕстьУКДСтатус2_534            = Ложь;
	ЕстьУКДСтатус2_534Прослеж     = Ложь;
	ЕстьУКДСтатус2_2023Кв4        = Ложь;
	ЕстьУКДСтатус2_2023Кв4Прослеж = Ложь;
	
	Для каждого Документ Из СчетаФактуры Цикл
		
		УниверсальныеКорректировочныеДокументы.Добавить(Документ);
		
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Исправление, Дата, ДатаИсправляемогоКорректировочногоДокумента");
		Если РеквизитыСчетаФактуры.Исправление Тогда
			ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
		Иначе
			ДатаВерсии = РеквизитыСчетаФактуры.Дата;
		КонецЕсли;
			
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
		
		Если ВерсияПостановленияНДС1137 >= 6 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУКДСтатус1_2023Кв4Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_2023Кв4Прослеж", ",УКДСтатус1_2023Кв4Прослеж");
					ЕстьУКДСтатус1_2023Кв4Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУКДСтатус1_2023Кв4 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_2023Кв4", ",УКДСтатус1_2023Кв4");
					ЕстьУКДСтатус1_2023Кв4 = Истина;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУКДСтатус1_534Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_534Прослеж", ",УКДСтатус1_534Прослеж");
					ЕстьУКДСтатус1_534Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУКДСтатус1_534 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_534", ",УКДСтатус1_534");
					ЕстьУКДСтатус1_534 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
			Если НЕ ЕстьУКДСтатус1_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_981", ",УКДСтатус1_981");
				ЕстьУКДСтатус1_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУКДСтатус1 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1", ",УКДСтатус1");
				ЕстьУКДСтатус1 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Документ Из ДокументыСчетФактураНеТребуются Цикл
		
		УниверсальныеКорректировочныеДокументы.Добавить(Документ);
		
		// Печать исправительного УКД со статусом "2" не поддерживается, всегда печатаем по форме на дату документа.
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Документ.Дата);
		
		Если ВерсияПостановленияНДС1137 >= 6 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУКДСтатус2_2023Кв4Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_2023Кв4Прослеж", ",УКДСтатус2_2023Кв4Прослеж");
					ЕстьУКДСтатус2_2023Кв4Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУКДСтатус2_2023Кв4 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_2023Кв4", ",УКДСтатус2_2023Кв4");
					ЕстьУКДСтатус2_2023Кв4 = Истина;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
			Если ДокументыСПрослеживаемымиТоварами.Найти(Документ) <> Неопределено Тогда
				Если НЕ ЕстьУКДСтатус2_534Прослеж Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_534Прослеж", ",УКДСтатус2_534Прослеж");
					ЕстьУКДСтатус2_534Прослеж = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьУКДСтатус2_534 Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_534", ",УКДСтатус2_534");
					ЕстьУКДСтатус2_534 = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВерсияПостановленияНДС1137 >= 4 Тогда
			Если НЕ ЕстьУКДСтатус2_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_981", ",УКДСтатус2_981");
				ЕстьУКДСтатус2_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУКДСтатус2 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2", ",УКДСтатус2");
				ЕстьУКДСтатус2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УниверсальныеКорректировочныеДокументы.Количество() = 1 Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УниверсальныеКорректировочныеДокументы[0], "Номер, Дата");
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Универсальный корректировочный документ №%1 от %2'"),
			РеквизитыДокумента.Номер, Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Печать универсальных корректировочных документов'");
	КонецЕсли;
	
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ЗаголовокФормы",                     ЗаголовокФормы);
	НастройкиПечати.Вставить("СписокМакетов",                      СписокМакетов);
	НастройкиПечати.Вставить("УниверсальныеКорректировочныеДокументы", УниверсальныеКорректировочныеДокументы);
	НастройкиПечати.Вставить("ДокументыБезСчетовФактур",           ДокументыБезСчетовФактур);
	НастройкиПечати.Вставить("ДокументыСчетФактураНеТребуются",    ДокументыСчетФактураНеТребуются);
	
	Возврат НастройкиПечати;
	
КонецФункции

Функция ПолучитьНастройкиПечатиСводныхСправок(МассивДокументов) Экспорт
	
	СводныеСправки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СводныеСправки.Добавить(Выборка.СчетФактура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокМакетов = "СводнаяСправка";
	
	Возврат Новый Структура("СводныеСправки,СписокМакетов", СводныеСправки, СписокМакетов);
	
КонецФункции

Функция ПолучитьНастройкиПечатиКорректировочныхСправок(МассивДокументов) Экспорт
	
	КорректировочныеСправки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				КорректировочныеСправки.Добавить(Выборка.СчетФактура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокМакетов = "КорректировочнаяСправка";
	
	Возврат Новый Структура("КорректировочныеСправки,СписокМакетов", КорректировочныеСправки, СписокМакетов);
	
КонецФункции

Процедура УстановитьПризнакВыставленСчетовФактурНаАванс(СчетаФактуры) Экспорт
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		СчетФактураОбъект = СчетФактура.Ссылка.ПолучитьОбъект();
		
		СчетФактураОбъект.Выставлен = Истина;
		СчетФактураОбъект.ДатаВыставления = СчетФактура.Дата;
		
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодчиненныеСчетаФактурыПолученные(ДокументыОснования) Экспорт
	
	Возврат УчетНДСПереопределяемый.НайтиПодчиненныеСчетаФактурыПолученные(ДокументыОснования);
	
КонецФункции

// Возвращает документы, в списке которых нужно актуализировать статус оригинала счета-фактуры в случае его изменения.
//
// Параметры:
//  СчетаФактуры - СписокЗначений - содержит ссылки на полученные счета-фактуры по которым изменился статус оригинала.
// 
// Возвращаемое значение:
//  СвязанныеДокументыОснования - СписокЗначений - содержит ссылки на документы-основания счетов-фактур у которых
//  изменился статус оригинала. Возвращает только те основания, из которых доступно управление
//  статусом оригинала счета-фактуры.
//
Функция СвязанныеДокументыОснованияСоСтатусомСФ(СчетаФактуры) Экспорт
	
	СвязанныеДокументыОснования = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаФактуры", СчетаФактуры);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка В (&СчетаФактуры)
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|	И (СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ПоступлениеДопРасходов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвязанныеДокументыОснования.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат СвязанныеДокументыОснования;
	
КонецФункции

#Область АктуализацияРасчетаНДС

// Определяет требуется ли актуализация расчета НДС для построения отчета.
// Актуализация не требуется если
// - отчет формируется организацией, не являющейся плательщиком НДС - актуализация не требуется.
// - отчет формируется за периоды ранее 1 квартала 2018 года - актуализация не требуется.
// - отчет формируется за период отличный от налогового - актуализация не требуется.
// - расчет НДС актуален (выполнены все регламентные операции) - 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация по которой строится отчет.
//  НачалоПериода - Дата - начало периода, за который строится отчет.
//  КонецПериода  - Дата - конец периода, за который строится отчет.
//
// Возвращаемое значение:
//   Булево - Истина, если требуется актуализация расчета НДС.
Функция ТребуетсяАктуализацияРасчетаНДС(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПрименяетсяПомощникРасчетаНДС = ПомощникРасчетаНДС.ФормироватьДекларациюВПомощнике(
		Организация, НачалоПериода);
		
	Если НЕ ПрименяетсяПомощникРасчетаНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПериодОтчетаСоответствуетНалоговому = УчетНДСПереопределяемый.ПериодОтчетаСоответствуетНалоговому(
		Организация, НачалоПериода, КонецПериода);
		
	Если ПериодОтчетаСоответствуетНалоговому Тогда
		Возврат НЕ РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.РасчетНДСАктуален(
			Организация, НачалоПериода);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает список счетов учета НДС, описанных в макете "СчетаУчетаНДС" регистра бухгалтерии "Хозрасчетный"
// Параметры:
//  Счет - ПланыСчетов.Хозрасчетный - счет, для которого выполняется проверка.
//
// Возвращаемое значение:
//   Булево - Истина, если счет относится к счетам учета НДС.
Функция ЭтоСчетУчетаНДС(Счет) Экспорт
	
	МакетСчетаУчетаНДС = ПланыСчетов.Хозрасчетный.ПолучитьМакет("СчетаУчетаНДС");
	ТаблицаДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетСчетаУчетаНДС.ПолучитьТекст());
	ТаблицаДанных.Индексы.Добавить("Счет");
	
	СчетИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "ИмяПредопределенныхДанных");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", СчетИмя);
	
	СтрокиДанных = ТаблицаДанных.НайтиСтроки(Отбор);
	
	Возврат СтрокиДанных.Количество() = 1;
	
КонецФункции

#КонецОбласти

Функция СтавкаНДСПользователя() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	
КонецФункции

Функция РасчетнаяСтавкаНДСПоОбычной(СтавкаНДС) Экспорт
	
	Возврат Перечисления.СтавкиНДС.РасчетнаяСтавкаНДСПоОбычной(СтавкаНДС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// РеквизитыСФ - Структура, см. УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном
Функция ПредставлениеСчетФактураВыданный(РеквизитыСФ)
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерСчетаФактуры), РеквизитыСФ.НомерСчетаФактуры, "..."));
	ПараметрыСтроки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаСчетаФактуры),  Формат(РеквизитыСФ.ДатаСчетаФактуры, "ДЛФ=D"), "..."));
	
	Если РеквизитыСФ.Исправление Тогда
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] (испр. [НомерИсправления]) от [ДатаИсправления]'");
		ПараметрыСтроки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерИсправления), РеквизитыСФ.НомерИсправления, "..."));
		ПараметрыСтроки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаИсправления),  Формат(РеквизитыСФ.ДатаИсправления, "ДЛФ=D"), "..."));
	Иначе
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] от [ДатаСчетаФактуры]'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ПараметрыСтроки);
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
// Документы в массиве должны быть одного вида
//
Функция СчетаФактурыНеТребуются(МассивДокументов)
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидДокументов = МассивДокументов[0].Метаданные().Имя;
	ДокументыСчетФактураНеТребуются = Документы[ВидДокументов].СчетаФактурыНеТребуются(МассивДокументов);
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

// Возвращаяет массив документов с прослеживаемыми товарами.
// Документы в массиве должны быть одного вида.
//
Функция ДокументыСПрослеживаемымиТоварами(МассивДокументов)
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидДокументов = МассивДокументов[0].Метаданные().Имя;
	ДокументыСПрослеживаемымиТоварами = Документы[ВидДокументов].ДокументыСПрослеживаемымиТоварами(МассивДокументов);
	
	Возврат ДокументыСПрослеживаемымиТоварами;
	
КонецФункции

// Функция разбиения табличной части (табличный частей) на несколько документов
//
// Параметры:
//   ПараметрыПереносаСтрокТЧ - Структура - структура входных параметров с ключами:
//     * ТабличныеЧасти          - Соответствие - соотствие между проверяемой табличной частью и подчиненной.
//               * Ключ             - Строка - имя проверяемой табличной части
//               * Значение         - Структура - структура с ключами:
//....................* КоличествоСтрокДляПереноса - Число - обязательный ключ в него записывается вычисляемое в функции
//..........................................................количество строк для переноса проверяемой табличной части
//                    * ПодчиненныеТабличныеЧасти - Массив - необязательный ключ массив подчинённых табличных частей,
//                                                           строки из которых нужно перенести в новый документ.
//                    * ПодчиненнаяТЧМаксимальноеКоличествоСтрок - Строка - имя подчиненной табличной части с
//                                                                          максимальным количеством строк.
//                    * МаксимальноеКоличествоСтрокВДокументе    - Число - максимальное количество строк основной
//                                                                         табличной части в новом документе.
//     * РеквизитыДокумента      - Строка - список реквизитов для копирования из документа.
//     * РежимЗаписи             - РежимЗаписиДокумента - режим записи документа.
//     * МаксимальноеКоличествоСтрок - Число - максимальное количество строк, хранимое платформой в табличной части.
//     * Объект                      - ДанныеФормыСтруктура - объект клиентской формы документа, для которого нужно
//                                                            перености строк табличных частей в новые документы.
// Возвращаемое значение:
//  - Булево - Истина в случае успешного переноса строк в новые документы.
//  В случае не удачной транзакции по переносу документов в другой доукмент к структуре ПараметрыПереносаСтрокТЧ
//  добавляется поле ИнформацияОбОшибке - Строка - содержит подробное описание ошибки.
Функция ПеренестиСтрокиТабличныхЧастейВДругойДокументНаСервере(ПараметрыПереносаСтрокТЧ) Экспорт
	
	Объект = ПараметрыПереносаСтрокТЧ.Объект;
	ОбъектМетоданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
	Если ОбъектМетоданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	МаксимальноеКоличествоСтрок = ПараметрыПереносаСтрокТЧ.МаксимальноеКоличествоСтрок;
	РежимЗаписи = ПараметрыПереносаСтрокТЧ.РежимЗаписи;
	ТабличныеЧасти = ПараметрыПереносаСтрокТЧ.ТабличныеЧасти;
	РеквизитыДокумента = ПараметрыПереносаСтрокТЧ.РеквизитыДокумента;
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			КоличествоСтрокДляПереноса = ТабличнаяЧасть.Значение.КоличествоСтрокДляПереноса;
			Если КоличествоСтрокДляПереноса = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексПоследнийСтроки = Объект[ТабличнаяЧасть.Ключ].Количество()-1;
			
			ПодчиненныеТабличныеЧасти = Новый Массив;
			Если ТабличнаяЧасть.Значение.Свойство("ПодчиненныеТабличныеЧасти") Тогда
				ПодчиненныеТабличныеЧасти = ТабличнаяЧасть.Значение.ПодчиненныеТабличныеЧасти;
			КонецЕсли;
			
			ПодчиненнаяТЧМаксимальноеКоличествоСтрок = "";
			Если ТабличнаяЧасть.Значение.Свойство("ПодчиненнаяТЧМаксимальноеКоличествоСтрок") Тогда
				ПодчиненнаяТЧМаксимальноеКоличествоСтрок = ТабличнаяЧасть.Значение.ПодчиненнаяТЧМаксимальноеКоличествоСтрок;
			КонецЕсли;
			
			МаксимальноеКоличествоСтрокВДокументе = 0;
			Если ТабличнаяЧасть.Значение.Свойство("МаксимальноеКоличествоСтрокВДокументе") Тогда
				МаксимальноеКоличествоСтрокВДокументе = ТабличнаяЧасть.Значение.МаксимальноеКоличествоСтрокВДокументе;
			КонецЕсли;
			
			ИндексСтроки = 0;
			КоличествоСтрокТЧ = 0;
			
			СтрокиДляУдаленияТЧ = Новый Массив;
			
			СоответвиеПодчиненныхТЧДляУдаления = Новый Соответствие;
			Для каждого ПодчиненнаяТабличнаяЧасть Из ПодчиненныеТабличныеЧасти Цикл
				СоответвиеПодчиненныхТЧДляУдаления.Вставить(ПодчиненнаяТабличнаяЧасть, Новый Массив);
			КонецЦикла;
			
			Пока ИндексСтроки < КоличествоСтрокДляПереноса Цикл
				
				Если КоличествоСтрокТЧ = 0 Тогда
					НовыйДокументОбъект = Документы[ОбъектМетоданных.Имя].СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(НовыйДокументОбъект, Объект , РеквизитыДокумента);
				КонецЕсли;
				
				СтрокаТЧНовогоДокумента = НовыйДокументОбъект[ТабличнаяЧасть.Ключ].Добавить();
				СтрокаТЧТекущегоДокумента = Объект[ТабличнаяЧасть.Ключ][ИндексПоследнийСтроки - ИндексСтроки];
				СтрокиДляУдаленияТЧ.Добавить(СтрокаТЧТекущегоДокумента);
				ЗаполнитьЗначенияСвойств(СтрокаТЧНовогоДокумента, СтрокаТЧТекущегоДокумента);
				
				Для Каждого ПодчиненнаяТЧ Из ПодчиненныеТабличныеЧасти Цикл
					КлючПоиска = Новый Структура("КлючСтроки", СтрокаТЧТекущегоДокумента.КлючСтроки);
					МассивСтрок = Объект[ПодчиненнаяТЧ].НайтиСтроки(КлючПоиска);
					
					Для Каждого СтрокаТЧ Из МассивСтрок Цикл
						СтрокаПодчиненнойТЧНовогоДокумента = НовыйДокументОбъект[ПодчиненнаяТЧ].Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПодчиненнойТЧНовогоДокумента, СтрокаТЧ);
						СоответвиеПодчиненныхТЧДляУдаления[ПодчиненнаяТЧ].Добавить(СтрокаТЧ);
					КонецЦикла;
					
				КонецЦикла;
				
				КоличествоСтрокТЧ = КоличествоСтрокТЧ + 1;
				
				ИндексСтроки = ИндексСтроки + 1; 
				
				НовыйДокументКоличествоСтрок = НовыйДокументОбъект[ТабличнаяЧасть.Ключ].Количество();
				
				Если КоличествоСтрокТЧ = МаксимальноеКоличествоСтрок
					ИЛИ ИндексСтроки = КоличествоСтрокДляПереноса
					ИЛИ (ЗначениеЗаполнено(ПодчиненнаяТЧМаксимальноеКоличествоСтрок)
						И НовыйДокументКоличествоСтрок = МаксимальноеКоличествоСтрокВДокументе)Тогда
					НовыйДокументОбъект.Записать(РежимЗаписи);
					КоличествоСтрокТЧ = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаТЧ Из СтрокиДляУдаленияТЧ Цикл
				Объект[ТабличнаяЧасть.Ключ].Удалить(СтрокаТЧ);
			КонецЦикла;
			
			Для Каждого ПодчиненнаяТабличнаяЧастьДляУдаления Из СоответвиеПодчиненныхТЧДляУдаления Цикл
				МассивСтрокДляУдаления = ПодчиненнаяТабличнаяЧастьДляУдаления.Значение;
				Для Каждого СтрокаТЧ Из МассивСтрокДляУдаления Цикл
					Объект[ПодчиненнаяТабличнаяЧастьДляУдаления.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЦикла;
			
			ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект."+ОбъектМетоданных.Имя));
			ДокументОбъект.Записать(РежимЗаписи);
			
		КонецЦикла;
	
	Исключение
		
		ОтменитьТранзакцию();
		ПараметрыПереносаСтрокТЧ.Вставить("ИнформацияОбОшибке", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

#Область ОперацииНДС0

// Функция возвращает значенение настройки КлассифицироватьНоменклатуруПоОперациям0 регистра НастройкиУчетаНДС
// на определенную дату для организации или 1-й организации из списка организаций
//
// Параметры:
//  ДатаЗапроса - Дата
//  Организация - СправочникСсылка.Организации, Массив, СписокЗначений
//
// Возвращаемое значение:
//  - Булево - значенение настройки КлассифицироватьНоменклатуруПоОперациям0 регистра НастройкиУчетаНДС
Функция КлассифицироватьНоменклатуруПоОперациям0(Знач ДатаЗапроса, Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаЗапроса) Тогда
		
		ДатаЗапроса = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// При вызове из документов в качестве Организации передается СправочникСсылка.Организации
	
	МассивОрганизаций = Новый Массив;
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	// При вызове из модуля УчетНДСБП в качестве Организации передаются параметры отчета, 
	// которые могут иметь тип Массив или СписокЗначений
	
	Если ТипЗнч(Организация) = Тип("Массив") ИЛИ ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
		МассивОрганизаций = Организация;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.КлассифицироватьНоменклатуруПоОперациям0 КАК КлассифицироватьНоменклатуруПоОперациям0
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&ДатаЗапроса, Организация В (&МассивОрганизаций)) КАК НастройкиУчетаНДССрезПоследних";
	
	Запрос.Параметры.Вставить("ДатаЗапроса", НачалоКвартала(ДатаЗапроса));
	Запрос.Параметры.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Если РезультаЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультаЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КлассифицироватьНоменклатуруПоОперациям0;
	
КонецФункции

// Функция возвращает значенение по умолчанию кода операции НДС 0% из регистра НастройкиУчетаНДС
// на определенную дату для организации или 1-й организации из списка организаций
//
// Параметры:
//  ДатаЗапроса - Дата
//  Организация - СправочникСсылка.Организации, Массив, СписокЗначений
//
// Возвращаемое значение:
//  - Строка - код операции НДС 0% по умолчанию
Функция КодОперацииПоСтавке0ПоУмолчанию(Знач ДатаЗапроса, Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаЗапроса) Тогда
		
		ДатаЗапроса = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// При вызове из документов в качестве Организации передается СправочникСсылка.Организации
	
	МассивОрганизаций = Новый Массив;
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	// При вызове из модулей УчетНДСФормированиеОтчетности и Отчет.РасшифровкаПоказателейНДС.Модуль менеджера
	// в качестве Организации передаются параметры отчета, которые могут иметь тип Массив или СписокЗначений
	
	Если ТипЗнч(Организация) = Тип("Массив") ИЛИ ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
		МассивОрганизаций = Организация;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.КодОперации0 КАК КодОперации0
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&ДатаЗапроса, Организация В (&МассивОрганизаций)) КАК НастройкиУчетаНДССрезПоследних";
	
	Запрос.Параметры.Вставить("ДатаЗапроса", ДатаЗапроса);
	Запрос.Параметры.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Если РезультаЗапроса.Пустой() Тогда
		Возврат "1011410";
	КонецЕсли;
	
	Выборка = РезультаЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.КодОперации0) Тогда
		Возврат Выборка.КодОперации0;
	Иначе
		Возврат "1011410";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
