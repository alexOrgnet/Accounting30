
#Область ПрограммныйИнтерфейс

#Область ПодключениеПриложений

// Создает служебного пользователя, который в используется для basic аутентификации на http-сервисе
// ExternalAPI (ОтчетныеКампанииЗапросы).
//
// Возвращаемое значение:
//   Структура - см. СтандартныеРеквизитыСлужебногоПользователя()
//   Неопределено - если создание пользователь недоступно.
//
Функция СлужебныйПользователь() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
		Или НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыПользователя = СохраненныеДанныеСлужебногоПользователя();
	Если РеквизитыПользователя <> Неопределено Тогда
		Возврат РеквизитыПользователя;
	КонецЕсли;
	
	РеквизитыПользователя = СтандартныеРеквизитыСлужебногоПользователя();
	Если РеквизитыПользователя = Неопределено Или Не ЗначениеЗаполнено(РеквизитыПользователя.Логин) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПользователиИнформационнойБазы.НайтиПоИмени(РеквизитыПользователя.Логин) <> Неопределено Тогда
		Возврат РеквизитыПользователя;
	КонецЕсли;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Имя = РеквизитыПользователя.Логин;
	ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Сообщения облачных приложений'");
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
	ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
	ОписаниеПользователяИБ.Пароль = РеквизитыПользователя.Пароль;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ДоступКВнешнемуИнтерфейсуОтчетнойКампанииЗапросы.Имя);
	
	НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
	НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
	НовыйПользователь.Служебный = Истина;
	НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	
	Попытка
		НовыйПользователь.Записать();
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось создать служебного пользователя по причине: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		КлючХраненияРеквизитовСлужебногоПользователя(),
		РеквизитыПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РеквизитыПользователя;
	
КонецФункции

// Проверяет, может ли другое облачное приложение быть подключено для получения данных по отчетной кампании.
//
// Параметры:
//   Адрес - Строка - URI облачного приложения
//   Логин - Строка - логин пользователя сервиса
//   Пароль - Строка - пароль пользователя
//
Функция ПриложениеГотовоПриниматьЗапросы(Адрес, Логин, Пароль) Экспорт
	
	// В качестве проверки используется метод GET.
	// Если приложение готово, то ответ ожидается ответ 200.
	// Любой другой код ответа символизирует о неготовности приложения принимать запросы.
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.АдресСервиса = Адрес;
	Подключение.Логин = Логин;
	Подключение.Пароль = Пароль;
	Подключение.ПространствоИмен = ПространствоИмен();
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", "intracloud_connections");
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОтветСервиса.КодСостояния = ЗапросыREST.КодСтандартногоСостояния();
	
КонецФункции

// Подключает другое облачное приложение для получения данных по отчетной кампании.
// Для получение адреса и наименования облачного приложения используется
// метод СообщенияОтчетностиОблачныхПриложений.ПриложенияАбонента()
//
// Параметры:
//   Адрес - Строка - URI облачного приложения
//   Логин - Строка - логин пользователя сервиса
//   Пароль - Строка - пароль пользователя
//   Наименование - Строка - наименование приложения в облаке
//
Функция ПодключитьОблачноеПриложение(Адрес, Логин, Пароль, Наименование) Экспорт
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.АдресСервиса = Адрес;
	Подключение.Логин = Логин;
	Подключение.Пароль = Пароль;
	Подключение.ПространствоИмен = ПространствоИмен();
	
	Запрос = Новый Структура("Идентификатор", ИдентификаторЭтогоПриложения());
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "intracloud_connections", Запрос);
	
	Если ОтветСервиса = Неопределено 
		Или ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияНеАутентифицирован() Тогда
		//Если запрос не удалось выполнить, то ошибку в ЖР запишет метод ЗапросыREST.ВыполнитьМетодСервиса().
		//Если ответ пришел 401, значит, пользователь ошибся при вводе пароля (не критично, введет ещё раз).
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния()
		Или Не ОтветСервиса.Содержимое.Свойство("СлужебныйПользователь")
		Или Не ОтветСервиса.Содержимое.СлужебныйПользователь.Свойство("Логин")
		Или Не ОтветСервиса.Содержимое.СлужебныйПользователь.Свойство("Пароль")
		Или Не ОтветСервиса.Содержимое.Свойство("Токен")
		Или Не ОтветСервиса.Содержимое.Свойство("ИдентификаторПриложения")
		Или Не ОтветСервиса.Содержимое.Свойство("ДоступныеОрганизации") Тогда
		
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			НСтр("ru = 'Подключение приложения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПодключения = НовыйДанныеПодключенияПриложения();
	ЗаполнитьЗначенияСвойств(ДанныеПодключения, ОтветСервиса.Содержимое.СлужебныйПользователь);
	
	Идентификатор = ОтветСервиса.Содержимое.ИдентификаторПриложения;
	УстановитьПривилегированныйРежим(Истина);
	Приложение = Справочники.ОблачныеПриложения.СсылкаПриложение(
		Идентификатор,
		Адрес,
		Наименование);
	УстановитьПривилегированныйРежим(Ложь);
		
	Если Приложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	// Данные подключения приложения.
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Приложение, ДанныеПодключения);
	
	// Данные аутентификации пользователя.
	Токен = ОтветСервиса.Содержимое.Токен;
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Пользователи.ТекущийПользователь(),
		Токен,
		КлючХраненияТокенаПользователяПриложения(Идентификатор));
	УстановитьПривилегированныйРежим(Ложь);
	
	ДоступныеОрганизации = Новый Массив;
	Для Каждого ДанныеОрганизации Из ОтветСервиса.Содержимое.ДоступныеОрганизации Цикл
		УстановитьПривилегированныйРежим(Истина);
		Организация = Справочники.ОрганизацииОблачныхПриложений.СсылкаОрганизация(
			ДанныеОрганизации.Идентификатор,
			Приложение,
			ДанныеОрганизации.Наименование);
		УстановитьПривилегированныйРежим(Ложь);
			
		Если ЗначениеЗаполнено(Организация) Тогда
			ДоступныеОрганизации.Добавить(Организация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ПриложениеИдентификатор, ПриложениеСсылка, Токен, ДоступныеОрганизации", 
		Идентификатор, Приложение, Токен, ДоступныеОрганизации);
	
КонецФункции

// Возвращает идентификатор этого облачного приложения в механизме обмена сообщениями
//
// Возвращаемое значение:
//   Строка - идентификатор приложения
//
Функция ИдентификаторЭтогоПриложения() Экспорт

	ИдентификаторПриложения = Константы.ИдентификаторПриложенияСообщенийОблачныхПриложений.Получить();
	
	Если ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
		Возврат ИдентификаторПриложения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Константа.ИдентификаторПриложенияСообщенийОблачныхПриложений");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ИдентификаторПриложения = Константы.ИдентификаторПриложенияСообщенийОблачныхПриложений.Получить();
		Если ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
			ОтменитьТранзакцию();
			Возврат ИдентификаторПриложения;
		КонецЕсли;
	
		ИдентификаторПриложения = XMLСтрока(Новый УникальныйИдентификатор());
		Константы.ИдентификаторПриложенияСообщенийОблачныхПриложений.Установить(ИдентификаторПриложения);
		
		ЗафиксироватьТранзакцию();
		Возврат ИдентификаторПриложения;
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сообщения облачных приложений'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Определяем, готов ли Менеджер сервиса принимать запросы на получение реквизитов служебного пользователя.
//
// Возвращаемое значение:
//   Булево - Истина, если готов.
//
Функция МенеджерСервисаГотовПриниматьЗапросы() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбъектДанныхРеквизитовСлужебногоПользователя() <> Неопределено;
	
КонецФункции

// Определяет, тип пользователя, который выполняет запрос данных.
// Предполагается, что роль "СообщенияОблачныхПриложений" назначается только служебному пользователю.
// Роль дает право вызова методов HTTP-сервиса ExternalAPI.ОтчетныеКампанииЗапросы.
// Роль реализует собственную модель прав, в частности, может предоставить доступ в обход настроек групп
// доступа - вместо них фактически используются настройки подключенных облачных приложений.
// Решение является временным. Используется до тех пор, пока не появится поддержка JWT токенов.
//
//
// Возвращаемое значение:
//   Булево - Истина, это служебный пользователь.
//
Функция ЭтоЗапросОтСлужебногоПользователя() Экспорт
	
	Возврат РольДоступна("ДоступКВнешнемуИнтерфейсуОтчетнойКампанииЗапросы");
	
КонецФункции

#КонецОбласти

#Область ТранспортДанных

// Запрашивает у другого облачного приложения данные.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, выполняющий запрос.
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения, которому направляется запрос
//   Ресурс - Строка - имя ресурса HTTP-сервиса, обслуживающего прикладной механизм
//   ДанныеЗапроса - Структура - См. СообщенияОтчетностиОблачныхПриложений.НовыйПараметрыЗапросаДанных(),
//                                   СообщенияОтчетностиОблачныхПриложений.НовыйПараметрыЗапросаСпискаОрганизаций()
//
// Возвращаемое значение:
//   Строка - идентификатор запроса, с которым потом следует обратиться методом GET,
//            если приложение не может принять запрос (и не сможет принять в будущем),
//            возвращается пустая строка.
//   Неопределено - если не удалось выполнить запрос.
//
Функция ЗапроситьДанныеПриложения(Пользователь, Приложение, Ресурс, ДанныеЗапроса) Экспорт
	
	Подключение = ДанныеПодключения(Пользователь, Приложение);
	Если Подключение = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение.ЗаголовкиАутентификации.Вставить(
		ИмяЗаголовкаХешПароля(),
		ХешПароляПользователя(Пользователь));
	
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(
		Подключение,
		"POST",
		СтрШаблон("%1/requests/add", Ресурс),
		ДанныеЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния = КодСостоянияПриложениеУдалено()
		Или ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияНеАвторизован() Тогда
		// В случае, если приложение больше не существует, нода отвечает кодом 420.
		// Если пользователю запрещен доступ в приложение, то ответ будет с кодом 403.
		Возврат "";
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния()
		Или Не ОтветСервиса.Содержимое.Свойство("Идентификатор") Тогда
		
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			НСтр("ru = 'Запрос данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОтветСервиса.Содержимое.Идентификатор;
	
КонецФункции

// Получает у приложения данные его отчетной кампании.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, выполняющий запрос.
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения
//   Ресурс - Строка - имя ресурса HTTP-сервиса, обслуживающего прикладной механизм
//   ИдентификаторЗапроса - Строка - идентификатор запроса, полученный методом ЗапроситьДанныеПриложения()
//
// Возвращаемое значение:
//   Строка - содержимое ответа в виде строки JSON,
//            если у приложения данные ещё не готовы, то возвращается пустая строка.
//   Неопределено - если не удалось получить данные, повторять запрос не следует.
//
Функция ПолучитьДанныеПриложения(Пользователь, Приложение, Ресурс, ИдентификаторЗапроса) Экспорт
	
	Подключение = ДанныеПодключения(Пользователь, Приложение);
	Если Подключение = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение.ЗаголовкиАутентификации.Вставить(
		ИмяЗаголовкаХешПароля(),
		ХешПароляПользователя(Пользователь));
	
	Ресурс = СтрШаблон("%1/requests/%2", Ресурс, ИдентификаторЗапроса);
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", Ресурс);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ОтветСервиса.КодСостояния = ЗапросыREST.КодСтандартногоСостояния() Тогда
		Возврат ОтветСервиса.Содержимое;
	ИначеЕсли ОтветСервиса.КодСостояния = ЗапросыREST.КодСостоянияОтсутствуетСодержимое() Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписатьОшибкуКодСостояния(
		ОтветСервиса,
		НСтр("ru = 'Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Возврат Неопределено;
	
КонецФункции

// Подтверждает получение данных. Удаляет ответ в приложении, от которого он был получен.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь, выполняющий запрос.
//   Приложение - СправочникСсылка.ОблачныеПриложения - экземпляр приложения
//   Ресурс - Строка - имя ресурса HTTP-сервиса, обслуживающего прикладной механизм
//   ИдентификаторЗапроса - Строка - идентификатор запроса, полученный методом ЗапроситьДанныеПриложения()
//
Процедура ОтметитьДанныеПолучены(Пользователь, Приложение, Ресурс, ИдентификаторЗапроса) Экспорт
	
	Подключение = ДанныеПодключения(Пользователь, Приложение);
	Если Подключение = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Подключение.ЗаголовкиАутентификации.Вставить(
		ИмяЗаголовкаХешПароля(),
		ХешПароляПользователя(Пользователь));
	
	Ресурс = СтрШаблон("%1/requests/%2", Ресурс, ИдентификаторЗапроса);
	ОтветСервиса = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "DELETE", Ресурс);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			НСтр("ru = 'Подтверждение получения данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

// Запускает обработку очереди запросов облачных приложений.
// Метод предназначен для запуска от имени служебного пользователя.
//
Процедура ОбработатьЗапросыОблачныхПриложений() Экспорт
	
	// Поднимается привилегированный режим, т.к. служебный пользователь не обладает
	// необходимым наличием прав для обработки очереди запросов.
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ЗапросыОблачныхПриложений.ОбработатьЗапросы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяЗаголовкаАутентификации() Экспорт
	
	Возврат "auth-token";
	
КонецФункции

Функция ИмяЗаголовкаХешПароля() Экспорт
	
	Возврат "auth-hash";
	
КонецФункции

Функция ИдентификаторПравилаМенеджераСервиса() Экспорт
	
	Возврат "IntraCloudMessaging";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеПодключения(Пользователь, Приложение)
	
	Подключение = СохраненныеДанныеПодключения(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПриложения = Справочники.ОблачныеПриложения.ДанныеПриложения(Приложение);
	УстановитьПривилегированныйРежим(Ложь);
	
	Токен = СохраненныеДанныеАутентификацииПользователя(Пользователь, ДанныеПриложения.Идентификатор);
	Если Токен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение.АдресСервиса = ДанныеПриложения.Адрес;
	Подключение.ПространствоИмен = ПространствоИмен();
	Подключение.ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификации(), Токен);
	
	Возврат Подключение;
КонецФункции

Функция ХешПароляПользователя(Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СохраняемоеЗначениеПароля;
КонецФункции

Функция КлючХраненияТокенаПользователяПриложения(ИдентификаторПриложения)
	
	Ключ = СтрЗаменить(ИдентификаторПриложения, "-", ""); // в ключе не допускается символ тире
	Возврат СтрШаблон("_%1", Ключ); // ключ должен начинаться либо с нижнего подчеркивания, либо с буквы
	
КонецФункции

Функция КлючХраненияРеквизитовСлужебногоПользователя()
	
	Возврат "IntraCloudMessagingCredentials";
	
КонецФункции

Функция НовыйДанныеПодключенияПриложения()
	
	Возврат Новый Структура("Логин, Пароль", "", "");
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат СтрШаблон("/hs/%1/%2", ИмяСервиса(), ВерсияAPI());
	
КонецФункции

Функция ВерсияAPI()
	
	Возврат "v1";
	
КонецФункции

Функция ИмяСервиса()
	
	Возврат "api";
	
КонецФункции

Функция СохраненныеДанныеПодключения(Приложение)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Приложение);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.ИсточникЗапроса = Приложение;
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения);
	Возврат Подключение;
	
КонецФункции

Функция СохраненныеДанныеСлужебногоПользователя()
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КлючХраненияРеквизитовСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = НовыйДанныеПодключенияПриложения();
	ЗаполнитьЗначенияСвойств(Реквизиты, Данные);
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаписатьОшибкуКодСостояния(ОтветСервиса, Действие)
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие);
	
	// Ответ с кодом 200 может содержать конфиденциальные сведения.
	// Например, токен доступа. Не следует такие сведения записывать в ЖР.
	Комментарий = ?(ОтветСервиса.КодСостояния = ЗапросыREST.КодСтандартногоСостояния(), "", ОтветСервиса.Текст);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		ОтветСервиса.КодСостояния,
		Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(Действие = "")
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'Сообщения облачных приложений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

Функция СтандартныеРеквизитыСлужебногоПользователя()
	
	ДанныеОбъекта = ОбъектДанныхРеквизитовСлужебногоПользователя();
		
	Если ДанныеОбъекта = Неопределено Или Не ДанныеОбъекта.Свойство("payload")
		Или Не ДанныеОбъекта.payload.Свойство("Логин")
		Или Не ДанныеОбъекта.payload.Свойство("Пароль") Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать логин и пароль из Менеджера сервиса'");
		ЗаписатьОшибкуСозданияСлужебногоПользователя(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = НовыйДанныеПодключенияПриложения();
	ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеОбъекта.payload);
	
	Возврат Реквизиты;
	
КонецФункции

Функция ОбъектДанныхРеквизитовСлужебногоПользователя()
	
	// Объект с этим идентификатором хранит логин и пароль служебного пользователя.
	// В менеджере сервиса обязательно должен быть объект с таким идентификатором.
	// Если Менеджер сервиса не настроен, то невозможно будет подключить другие приложения.
	//
	// Менеджер сервиса должен быть настроен следующим образом:
	// 1. Создан новый вид универсальных объектов с кодом "IntraCloudMessaging"
	// 2. Для этого нового вида универсальных объектов создано правило трансляции с операцией Чтение,
	//    правила обработки оставить по умолчанию.
	// 3. Создать идентификатор правил трансляции с кодом "IntraCloudMessaging", в качестве правила
	//    для операции Чтение указать правило, созданное в п.2.
	// 4. Создать объект универсальной интеграции с идентификатором "ServiceUserCredential", в поле payload
	//    разместить описание реквизитов служебного пользователя в виде JSON строки:
	//    {"Логин": "ServiceUser", "Пароль": "SecretPassword"}
	//    Логин и пароль следует придумать свои.
	
	ИдентификаторОбъекта = "ServiceUserCredential";

	УстановитьПривилегированныйРежим(Истина);
	ДанныеОбъекта = УниверсальнаяИнтеграция.ПолучитьДанныеОбъектаПоПравилу(
		ИдентификаторПравилаМенеджераСервиса(),
		ИдентификаторОбъекта);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаписатьОшибкуСозданияСлужебногоПользователя(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		"СозданиеСлужебногоПользователяПодключенияПриложенийОблака",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.Пользователи, ,
		ТекстОшибки);
		
КонецПроцедуры

Функция СохраненныеДанныеАутентификацииПользователя(Пользователь, ИдентификаторПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Пользователь,
		КлючХраненияТокенаПользователяПриложения(ИдентификаторПриложения));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Токен;
	
КонецФункции

Функция КодСостоянияПриложениеУдалено()
	
	Возврат 420;
	
КонецФункции

#КонецОбласти