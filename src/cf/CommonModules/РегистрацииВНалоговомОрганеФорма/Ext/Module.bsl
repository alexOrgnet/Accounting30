
Процедура ОбновитьРегистрациюВНалоговомОргане(Форма, КПП, КодНалоговогоОргана, РегистрацияВНалоговомОргане, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	Форма.Модифицированность = Истина;
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
		Форма.ЗначениеВРеквизитФормы(РегистрацияВНалоговомОргане.ПолучитьОбъект(), ПрефиксИмени + "РегистрацияВНалоговомОргане");
	Иначе
		Форма.ЗначениеВРеквизитФормы(Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент(), ПрефиксИмени + "РегистрацияВНалоговомОргане");
	КонецЕсли;
	Форма.Объект[ПрефиксИмени + "РегистрацияВНалоговомОргане"] = РегистрацияВНалоговомОргане.Ссылка;
	
	//Установим КПП и код налогового органа из обновленной регистрации
	Если КПП <> Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].КПП Тогда
		КПП = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].КПП;
	КонецЕсли;
	
	Если КодНалоговогоОргана <> Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Код Тогда
		КодНалоговогоОргана = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Код;
	КонецЕсли;
	
	Форма[ПрефиксИмени + "КодРегионаРегистрации"] = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].КодРегиона;
	
	СведенияОПредставителях = РегистрацияВНОСервер.СведенияОПодписантахПоРегистрации(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	Форма[ПрефиксИмени + "ОписаниеПредставителейПодписанияОтчетности"] = РегистрацияВНОСервер.ОписаниеПредставителей(СведенияОПредставителях);
	
	ИмяРегистраСведений = ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане";
	УстановитьАктуальноеЗначениеИстории(Форма, ИмяРегистраСведений, Новый Структура("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане.Ссылка));
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(Форма, ТекущийОбъект, ВладелецРегистрации, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	Если ЗначениеЗаполнено(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Ссылка)
		И ОбщегоНазначения.СсылкаСуществует(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Ссылка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Ссылка, "ВерсияДанных")
			<> Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].ВерсияДанных Тогда
		ОбъектРегистрации = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектРегистрации, Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	Иначе
		ОбъектРегистрации = Форма.РеквизитФормыВЗначение(ПрефиксИмени + "РегистрацияВНалоговомОргане");
	КонецЕсли;
	
	// В ПередЗаписьюНаСервере в свойство РегистрацияВНалоговомОргане устанавливается 
	// значение ссылки на новую регистрацию. 
	// Если это значение установлено и регистрация еще не сохранялась, то нужно установить ссылку нового
	Если НЕ ЗначениеЗаполнено(ОбъектРегистрации.Ссылка)
		И ЗначениеЗаполнено(ТекущийОбъект[ПрефиксИмени + "РегистрацияВНалоговомОргане"]) Тогда
		ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	КонецЕсли;
	ОбъектРегистрации.Владелец = ВладелецРегистрации;
	ОбъектРегистрации.Записать();
	
	// В регистрациях НаименованиеСлужебное заполняется из НаименованиеОбособленногоПодразделения
	// Если НаименованиеОбособленногоПодразделения не заполнено, тогда НаименованиеСлужебное заполняется по алгоритму 
	//	(см. Справочники.РегистрацииВНалоговомОргане.НаименованиеСлужебное())
	// Поэтому если
	//	- регистрация записывается одновременно с записью организации или обособленного подразделения
	// 	- и у подразделения меняется регистрация или меняется признак ОбособленноеПодразделение,
	// 	- и в прежней регистрации НаименованиеОбособленногоПодразделения не заполнено,
	// 	- и в прежней регистрации НаименованиеСлужебное равно наименованию (НаименованиеПолное или Наименование) текущего подразделения,
	// то в прежней регистрации нужно обновить НаименованиеСлужебное
	Если (ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.Организации")
		Или ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.ПодразделенияОрганизаций")) Тогда
		
		Если ТекущийОбъект.ДополнительныеСвойства.Свойство(ПрефиксИмени + "РегистрацияВНалоговомОрганеДоЗаписи") Тогда
		
			ПрежняяРегистрация = ТекущийОбъект.ДополнительныеСвойства[ПрефиксИмени + "РегистрацияВНалоговомОрганеДоЗаписи"];
		
			Если ЗначениеЗаполнено(ПрежняяРегистрация) Тогда
				
				ПрежнееНаименование = Неопределено;
				ПрежнееНаименованиеПолное = Неопределено;
				ПрежнийПризнакОбособленноеПодразделение = Неопределено;
				
				ТекущийОбъект.ДополнительныеСвойства.Свойство("НаименованиеДоЗаписи", ПрежнееНаименование);
				ТекущийОбъект.ДополнительныеСвойства.Свойство("НаименованиеПолноеДоЗаписи", ПрежнееНаименованиеПолное);
				ТекущийОбъект.ДополнительныеСвойства.Свойство("ОбособленноеПодразделениеДоЗаписи", ПрежнийПризнакОбособленноеПодразделение);
				
				Если (ПрежняяРегистрация <> ОбъектРегистрации.Ссылка 
					ИЛИ ПрежнийПризнакОбособленноеПодразделение = Неопределено 
					ИЛИ ПрежнийПризнакОбособленноеПодразделение <> ТекущийОбъект.ОбособленноеПодразделение) 
					И ПустаяСтрока(ПрежняяРегистрация.НаименованиеОбособленногоПодразделения)
					И (ПрежняяРегистрация.НаименованиеСлужебное = ПрежнееНаименование
					ИЛИ ПрежняяРегистрация.НаименованиеСлужебное = ПрежнееНаименованиеПолное) Тогда
					ОбъектПрежнейРегистрации = ПрежняяРегистрация.ПолучитьОбъект();
					ОбъектПрежнейРегистрации.Записать(); //НаименованиеСлужебное будет сформировано автоматически перед записью объекта
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийОбъект[ПрефиксИмени + "РегистрацияВНалоговомОргане"] <> ОбъектРегистрации.Ссылка Тогда
		ТекущийОбъект[ПрефиксИмени + "РегистрацияВНалоговомОргане"] = ОбъектРегистрации.Ссылка;
	КонецЕсли;
	
	ИмяРегистраСведений = ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане";
	УстановитьАктуальноеЗначениеИстории(Форма, ИмяРегистраСведений, Новый Структура("РегистрацияВНалоговомОргане", ТекущийОбъект[ПрефиксИмени + "РегистрацияВНалоговомОргане"]));
	
КонецПроцедуры

Процедура УстановитьНовуюРегистрацию(Форма, ВладелецРегистрации, КПП, КодНалоговогоОргана, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	СвойстваПредставителя = Новый Структура("Доверенность, ДокументПредставителя, Представитель, УполномоченноеЛицоПредставителя");
	ЗаполнитьЗначенияСвойств(СвойстваПредставителя, Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	ПодписантыПредставители = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Подписанты.Выгрузить();
	
	КодыОКТМО = Новый Структура("КодПоОКТМО, КодПоОКАТО");
	ЗаполнитьЗначенияСвойств(КодыОКТМО, Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	
	РеквизитыНалоговогоОргана = Новый Структура("Код, Наименование, НаименованиеИФНС");
	ЗаполнитьЗначенияСвойств(РеквизитыНалоговогоОргана, Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	
	Форма.ЗначениеВРеквизитФормы(Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент(), ПрефиксИмени + "РегистрацияВНалоговомОргане");
	Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Владелец = ВладелецРегистрации;
	Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].КПП      = КПП;
	Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Код      = КодНалоговогоОргана;
	Форма[ПрефиксИмени + "КодРегионаРегистрации"]                = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(КодНалоговогоОргана);
	Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].КодРегиона = Форма[ПрефиксИмени + "КодРегионаРегистрации"];
	Если РеквизитыНалоговогоОргана.Код = Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Код Тогда
		ЗаполнитьЗначенияСвойств(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"], РеквизитыНалоговогоОргана);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"], СвойстваПредставителя);
	Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"].Подписанты.Загрузить(ПодписантыПредставители);
	ЗаполнитьЗначенияСвойств(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"], КодыОКТМО);
	Форма.Объект[ПрефиксИмени + "РегистрацияВНалоговомОргане"] = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	СведенияОПредставителях = РегистрацияВНОСервер.СведенияОПодписантахПоРегистрации(Форма[ПрефиксИмени + "РегистрацияВНалоговомОргане"]);
	Форма[ПрефиксИмени + "ОписаниеПредставителейПодписанияОтчетности"] = РегистрацияВНОСервер.ОписаниеПредставителей(СведенияОПредставителях);
	
КонецПроцедуры

Процедура ЗаписатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(Форма, Владелец, ЗаписьНового = Ложь, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	История = Форма[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОрганеНаборЗаписей"].Выгрузить();
	История.ЗаполнитьЗначения(Владелец, "СтруктурнаяЕдиница");
	
	Набор = РегистрыСведений[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане"].СоздатьНаборЗаписей();
	Набор.Отбор.СтруктурнаяЕдиница.Установить(Владелец);
	Набор.Прочитать();
	ИсторияДоИзменения = Набор.Выгрузить();
	
	// Получим только измененные записи и запишем их поштучно для того, что бы верно сработала дата запрета редактирования
	ИзмененнаяИстория = ИсторияДоИзменения.СкопироватьКолонки();
	ИзмененнаяИстория.Колонки.Добавить("ТипИзменения", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ЗаписьИстории Из История Цикл
		ЗаписьИсторииДоИзменения =  ИсторияДоИзменения.Найти(ЗаписьИстории.Период, "Период");
		Если ЗаписьИсторииДоИзменения = Неопределено Тогда
			ИзмененнаяЗапись = ИзмененнаяИстория.Добавить();
			ИзмененнаяЗапись.ТипИзменения = "Добавление";
			ЗаполнитьЗначенияСвойств(ИзмененнаяЗапись, ЗаписьИстории);
		Иначе
			Для Каждого Колонка Из ИсторияДоИзменения.Колонки Цикл
				Если ЗаписьИстории[Колонка.Имя] <> ЗаписьИсторииДоИзменения[Колонка.Имя] Тогда
					ИзмененнаяЗапись = ИзмененнаяИстория.Добавить();
					ИзмененнаяЗапись.ТипИзменения = "Изменение";
					ЗаполнитьЗначенияСвойств(ИзмененнаяЗапись, ЗаписьИстории);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Найдем удаленные записи
	Для Каждого ЗаписьИсторииДоИзменения Из ИсторияДоИзменения Цикл
		ЗаписьИстории = История.Найти(ЗаписьИсторииДоИзменения.Период, "Период");
		Если ЗаписьИстории = Неопределено Тогда
			ИзмененнаяЗапись = ИзмененнаяИстория.Добавить();
			ИзмененнаяЗапись.ТипИзменения = "Удаление";
			ЗаполнитьЗначенияСвойств(ИзмененнаяЗапись, ЗаписьИсторииДоИзменения);
		КонецЕсли;
	КонецЦикла;
	
	ИзмененнаяИстория.Сортировать("Период");
	
	Для Каждого ИзмененнаяЗапись ИЗ ИзмененнаяИстория Цикл
		
		НаборЗаписей = РегистрыСведений[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ИзмененнаяЗапись.Период);
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ИзмененнаяЗапись.СтруктурнаяЕдиница);
		Если ЗаписьНового Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		Если ИзмененнаяЗапись.ТипИзменения = "Удаление" Тогда
			НаборЗаписей.Записать();
		Иначе
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ИзмененнаяЗапись);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(Форма, Владелец, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	Набор = РегистрыСведений[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане"].СоздатьНаборЗаписей();
	Набор.Отбор.СтруктурнаяЕдиница.Установить(Владелец);
	Набор.Прочитать();
	Форма.ЗначениеВРеквизитФормы(Набор, ПрефиксИмени + "ИсторияРегистрацийВНалоговомОрганеНаборЗаписей");
	Форма[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОрганеНаборЗаписей"].Сортировать("Период");
	
КонецПроцедуры

Функция АктуальнаяЗаписьИстории(Форма, КрупнейшийНалогоплательщик = Ложь) Экспорт
	
	ОписаниеРеквизитовРегистрации = ОрганизацииФормыКлиентСервер.ОписаниеРеквизитовРегистрации(КрупнейшийНалогоплательщик);
	ПрефиксИмени = ОписаниеРеквизитовРегистрации.ПрефиксИмени;
	
	ИсторияНаборЗаписей = Форма[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОрганеНаборЗаписей"];
	
	КоличествоЗаписей = ИсторияНаборЗаписей.Количество();
	ДатаОтсчетаПериодическихСведений = РегистрыСведений[ПрефиксИмени + "ИсторияРегистрацийВНалоговомОргане"].ДатаОтсчетаПериодическихСведений();
	
	Если КоличествоЗаписей > 0 Тогда
		АктуальнаяЗаписьИстории = ИсторияНаборЗаписей[КоличествоЗаписей - 1];
	Иначе
		АктуальнаяЗаписьИстории = ИсторияНаборЗаписей.Добавить();
		АктуальнаяЗаписьИстории.Период = ДатаОтсчетаПериодическихСведений;
	КонецЕсли;
	
	Возврат АктуальнаяЗаписьИстории;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИстории(Форма, ИмяРегистраСведений, АктуальныеЗначения)
	
	ИсторияНаборЗаписей = Форма[ИмяРегистраСведений + "НаборЗаписей"];
	
	ИсторияНаборЗаписей.Сортировать("Период");
	
	КоличествоЗаписей = ИсторияНаборЗаписей.Количество();
	ДатаОтсчетаПериодическихСведений = РегистрыСведений[ИмяРегистраСведений].ДатаОтсчетаПериодическихСведений();
	
	Если КоличествоЗаписей > 0 Тогда
		Если Не СтрНачинаетсяС(ИмяРегистраСведений, "КрупнейшийНалогоплательщик")
			Или Не ЗначениеЗаполнено(ИсторияНаборЗаписей[0].Период) Тогда
			// Самая первая запись действует с начала истории
			ИсторияНаборЗаписей[0].Период = ДатаОтсчетаПериодическихСведений;
		КонецЕсли;
		АктуальнаяЗаписьИстории = ИсторияНаборЗаписей[КоличествоЗаписей - 1];
	Иначе
		АктуальнаяЗаписьИстории = ИсторияНаборЗаписей.Добавить();
		АктуальнаяЗаписьИстории.Период = ДатаОтсчетаПериодическихСведений;
	КонецЕсли;
	Для Каждого Значение Из АктуальныеЗначения Цикл
		АктуальнаяЗаписьИстории[Значение.Ключ] = Значение.Значение;
	КонецЦикла;
	
КонецПроцедуры

