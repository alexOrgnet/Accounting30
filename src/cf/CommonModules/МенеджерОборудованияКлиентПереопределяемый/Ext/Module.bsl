
#Область ПрограммныйИнтерфейс

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
// Возвращаемое значение:
//  Дата - текущая дата.
Функция ДатаСеанса() Экспорт
	Возврат ОбщегоНазначенияБПВызовСервера.ТекущаяДатаНаСервере();
КонецФункции

#Область ОборудованиеККТ

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка = Истина) Экспорт

КонецПроцедуры

// Переопределяет печать слип чека алкогольной продукции. 
// Параметры:
//  ПечатьСлипЧека - Булево - Печатается слип чек алкогольной продукции 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ПечатьСлипЧекаАлкогольнойПродукции(ПечатьСлипЧека, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры     

// Переопределяет печать слип чека эквайринговой операции. 
// Параметры:
//  ПечатьСлипЧека - Булево - Определяет будет ли распечатан слип-чек, по умолчанию Истина.  
//  ПолныйСлипЧек  - Булево - Определяет какой слип-чек будет распечатан полный или короткий, по умолчанию Истина. 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки.
//
Процедура ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры   

// Событие при открытии смены на ККТ 
// Параметры:
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ
//  ПараметрыРегистрации - Структура - Параметры регистрации ФН
//
Процедура ПриОткрытииСменыНаККТ(ИдентификаторУстройстваККТ, ПараметрыРегистрации) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторУстройстваККТ", ИдентификаторУстройстваККТ);
	ПараметрыФормы.Вставить("ПараметрыРегистрации",       ПараметрыРегистрации);
	
	ПараметрыРегистрации.Вставить("НеВыдаватьСообщение");
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ПроверкаСНОДляККТ", 
		ПараметрыФормы, 
		, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Переопределяет вывод QR-кода чека на дисплей покупателя после фискализации. 
// Параметры:
//  ВыводQRКодаЧека - Булево - Вывод QR-кода чека на дисплей покупателя 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации(ВыводQRКодаЧека, СтандартнаяОбработка) Экспорт
	ВыводQRКодаЧека = Истина;
КонецПроцедуры

#КонецОбласти

// Переопределяет формат события от устройств ввода.
// Параметры:
//  НовыйФормат - Булево - Событие от устройств ввода работают в новом формате 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура СобытиеУстройствВводаНовыйФормат(НовыйФормат, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устанавливает режим требуется ли установка раширения 1С для работы в браузере
// 
// Параметры:
//  Режим - Булево - если Истина, тогда будет требуется установка расширения
//
Процедура УстановитьРежимПодключенияРасширенияИнформацииОКомпьютере(Режим) Экспорт
	
КонецПроцедуры

// Выполнить установку расширения 1С для работы в веб-клиенте.
// 
// Параметры:
//  Оповещение - Описание оповещения которое требуется вызвать после установки расширения
//  Текст - Рекомендуемый текст для отображения при запросе установки расширения
//  СтандартнаяОбработка - Булево - если Истина, тогда библиотека сама задаст вопрос 
//                         пользователю и выполнить установку расширения
//
Процедура ВыполнитьУстановкуРасширения(Оповещение, Текст, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриОткрытии".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  Отказ - Булево - признак отказа.
//
Процедура ЭкземплярОборудованияПриОткрытии(Объект, ЭтаФорма, Отказ) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗакрытием".
//
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  Отказ - Булево - признак отказа.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ЭкземплярОборудованияПередЗакрытием(Объект, ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписью".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  Отказ - Булево - признак отказа.
//  ПараметрыЗаписи - Структура - параметры записи оборудования.
//
Процедура ЭкземплярОборудованияПередЗаписью(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи) Экспорт
	
	Ошибки = Неопределено;
	
	Если (НЕ ЗначениеЗаполнено(Объект.Организация))
		И Объект.ТипОборудования <> ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СканерШтрихкода")
		И Объект.ТипОборудования <> ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СчитывательRFID") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Организация", НСтр("ru='Не указана организация'"), Неопределено);
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("Организация", Объект.Организация);
	ПараметрыЗаписи.Вставить("Склад", ЭтаФорма.Склад);
	
	Если Объект.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		ПараметрыЗаписи.Вставить("Отправляет1СSMS", ЭтаФорма.Отправляет1СSMS = 1);
		ПараметрыЗаписи.Вставить("Отправляет1СEmail", ЭтаФорма.Отправляет1СEmail = 1);
		ПараметрыЗаписи.Вставить("ЗаполнятьКонтактныеДанные", ЭтаФорма.ЗаполнятьКонтактныеДанные);
		ПараметрыЗаписи.Вставить("ПечататьЧек", ЭтаФорма.ПечататьЧек);
		
		ПараметрыЗаписи.Вставить("ОтправлятьEMail", ЭтаФорма.ОтправлятьEMail);
		ПараметрыЗаписи.Вставить("ОтправлятьSMS", ЭтаФорма.ОтправлятьSMS);
	ИначеЕсли Объект.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал") Тогда
		ПараметрыПодключенияНСПК = Новый Структура("АдресСервисаНСПК, КлючОрганизацииНСПК, ИдентификаторНСПК, КлючКассыНСПК");
		ЗаполнитьЗначенияСвойств(ПараметрыПодключенияНСПК, ЭтаФорма);
		
		ПараметрыЗаписи.Вставить("ПараметрыПодключенияНСПК", ПараметрыПодключенияНСПК);
		
		ПараметрыЗаписи.Вставить("ЭлектронныеСертификатыНСПК", ЗначениеЗаполнено(ПараметрыПодключенияНСПК.КлючКассыНСПК))
	КонецЕсли; 
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписи".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыЗаписи - Структура - параметры записи оборудования.
//
Процедура ЭкземплярОборудованияПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи) Экспорт
	Если ПараметрыЗаписи.Свойство("НужноОбновитьИнтерфейс") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	ГруппаПараметрыРегистрацииККТ = ЭтаФорма.Элементы.Найти("ГруппаПараметрыРегистрацииККТ");
	Если ГруппаПараметрыРегистрацииККТ <> Неопределено Тогда
		ГруппаПараметрыРегистрацииККТ.Видимость = ЗначениеЗаполнено(Объект.Ссылка) И (Объект.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	КонецЕсли; 
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ОбработкаНавигационнойСсылки".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ЭкземплярОборудованияОбработкаНавигационнойСсылки(Объект, ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьSMS" Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастроитьEmail" Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект, Новый Структура("Форма", ЭтаФорма));
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли; 
КонецПроцедуры


// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ТипОборудованияОбработкаВыбора".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма владелец.
//  ЭтотОбъект - СправочникОбъект.ПодключаемоеОборудование - текущий объект подключаемого оборудования.
//  Элемент - Элемент - изменяемый элемент.
//  ВыбранноеЗначение - ПеречислениеСсылка.ТипыПодключаемогоОборудования - выбранное значение.
//
Процедура ЭкземплярОборудованияТипОборудованияВыбор(Объект, ЭтаФорма, ЭтотОбъект, Элемент, ВыбранноеЗначение) Экспорт
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СканерШтрихкода")
		ИЛИ  ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.СчитывательRFID") Тогда
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ЭтаФорма.ОрганизацияВидимость = Ложь;
		ЭтаФорма.Элементы.Организация.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ПодсказкаВвода = НСтр("ru='Если оборудование используется в розничном магазине'");
		ЭтаФорма.Элементы.Склад.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ОтметкаНезаполненного = Ложь;
	Иначе
		ЭтаФорма.ОрганизацияВидимость = Истина;
		ЭтаФорма.Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
		ЭтаФорма.Элементы.Склад.ПодсказкаВвода = НСтр("ru='Если оборудование используется в розничном магазине'");
		ЭтаФорма.Элементы.Склад.АвтоОтметкаНезаполненного = Ложь;
		ЭтаФорма.Элементы.Склад.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	ГруппаОтправлятьЧеки = ЭтаФорма.Элементы.Найти("ГруппаОтправлятьЧеки");
	Если ГруппаОтправлятьЧеки <> Неопределено Тогда
		ГруппаОтправлятьЧеки.Видимость = Объект.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ");
	КонецЕсли; 
	
	ГруппаЭлектронныеСертификаты = ЭтаФорма.Элементы.Найти("ГруппаЭлектронныеСертификатыНСПК");
	Если ГруппаЭлектронныеСертификаты <> Неопределено Тогда
		ГруппаЭлектронныеСертификаты.Видимость = Объект.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаспределеннаяФискализации

// Переопределяемые действия после открытия чека в очереди чеков.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчередиПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Переопределяемые действия после ошибки печати чека в очереди чеков.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчередиПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросРазрешенияПродажи

// Выполняет запрос разрешения продажи по переданному коду маркировки
// 
// Параметры:
//  КодМаркировки - Строка
//  Результат - Структура:
//    ПродажаРазрешена - Булево - Если Истина, тогда продажа разрешена
//    ДанныеРазрешенияПродажи - Структура - структура с резвльтатом разрешения которая будет передана в ответе
Процедура ЗапросРазрешенияПродажи(КодМаркировки, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СообщениеВТехническуюПоддержку

// В процедуре можно разрешить, либо запретить отправку сообщений БПО в тех. поддержку
//
// Параметры:
//  Отправлять - Булево - при стандартной обработке Истина
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ОтправлятьСообщенияВТехПоддержку(Отправлять, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Подготовка текста сообщения в службу технической поддержки
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения который будет вставлен в поле "Шаблон сообщения" на сайте.
//  ТекстОшибки - Строка - текст ошибки, переданный в процедуру отправки сообщения.
//
Процедура ПодготовитьТекстСообщенияВТехПоддержку(ТекстСообщения, ТекстОшибки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяОбработка

// Процедура в которой можно сформировать текстовое содержание слип-чека
//
// Параметры:
//   Тип - Строка - Тип слип-чека: 
//         "Обычный"     - обычный слип-чек, печатаемый в теле фискального чека;
//         "Электронный" - слип-чек, печатаемый в случае электронного фискального чека;
//         "Отказ"       - слип-чек, печатаемый в случае отказа выполнения эквайринговой операции,
//                         или же выполнения аварийной отмены эквайринговой операции.
//   ДанныеДляШаблона - Структура - данные для формирования слип-чека:
//     * ПараметрыФискализацииЧека - См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//     * ПараметрыВыполненияЭквайринговойОперации - См. ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации
//     * РезультатВыполненияЭквайринговойОперации - См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//     * ДополнительныеПараметры - Структура - Дополнительные параметры переданные ранее в процедуру 
//                                 "НачатьФискализациюЧекаСОплатойКартой".
//   Текст - Строка - Текст слип чека который будет выведен в теле фискального чека, может быть переопределен
//   СтандартнаяОбработка - Булево - Если передано Ложь, тогда слип-чек нужно сформировать самостоятельно
//                          заполнив массив "ПараметрыФискализацииЧека.ПозицииЧека".
Процедура СформироватьШаблонСлипЧека(Тип, ДанныеДляШаблона, Текст, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область РаботаСФормойЭкземпляраФискальныеОперации

// Дополнительные переопределяемые действия с управляемой формой в Фискальные операции
// при событии "ОбработкаНавигационнойСсылки".
//
// Параметры:
//  Запись - РегистрСведенийМенеджерЗаписи.ФискальныеОперации
//  ЭтаФорма - Форма
//  НавигационнаяСсылкаФорматированнойСтроки - Строка
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ФормаЗаписиФискальныеОперацииОбработкаНавигационнойСсылки(Запись, ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	Если НавигационнаяСсылкаФорматированнойСтроки = "ДокументОснование" Тогда
		
		ИмяФормыДокумента = МенеджерОборудованияБПВызовСервера.ИмяФормыДокумента(Запись.ДокументОснование);
		
		ПараметрыФормы = Новый Структура("ПоказатьБаннерЧекКоррекции, Ключ", Истина, Запись.ДокументОснование);
		ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ЭтаФорма);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Устарела: больше не используется
// Обработчик события получения идентификатора клиента для рабочегоМеста.
//
// Параметры:
//  ИдентификаторКлиента - Строка, Неопределено - Идентификатор клиента
//  СтандартнаяОбработка - Булево
//
Процедура ИдентификаторКлиентаДляРабочегоМеста(ИдентификаторКлиента, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Устаревшая. для обратной совместимости
Процедура ОбработатьСобытие() Экспорт
	глПодключаемоеОборудованиеСобытиеОбработано = Истина;
КонецПроцедуры

#КонецОбласти