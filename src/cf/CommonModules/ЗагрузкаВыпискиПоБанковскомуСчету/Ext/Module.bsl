#Область ПрограммныйИнтерфейс

Функция РаспознанныеДанныеИзБанка(ИмяФайла,
								  Настройки,
								  СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено,
								  ОдиночныйРазделительСтрок = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЧтенияФайла = ОбменСБанкомВФормате1С.РезультатЧтенияФайла(ИмяФайла, Настройки.Кодировка, ОдиночныйРазделительСтрок);
	
	Результат = РаспознанныеДанныеИзБанкаОбщая(РезультатЧтенияФайла, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат Результат;
	
КонецФункции

Функция РаспознанныеДанныеИзБанкаДБ(ВыпискаБанка,
									Настройки,
									СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыпискаБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РаспознанныеДанныеИзБанкаОбщая(ВыпискаБанка, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат Результат
	
КонецФункции

Функция НовыйРаспознанныеДанныеИзБанка(Выписки,
									   РаспознанныеВыписки,
									   УчастникиОпераций,
									   Настройки,
									   ПротоколЧтенияФайла,
									   ПротоколГруппировкиВыписки,
									   СоздаватьСчетОрганизации = Ложь) Экспорт
	
	РаспознанныеДанныеИзБанка = Новый Структура;
	РаспознанныеДанныеИзБанка.Вставить("Выписки",                    Выписки);
	РаспознанныеДанныеИзБанка.Вставить("РаспознанныеВыписки",        РаспознанныеВыписки);
	РаспознанныеДанныеИзБанка.Вставить("УчастникиОпераций",          УчастникиОпераций);
	РаспознанныеДанныеИзБанка.Вставить("Настройки",                  Настройки);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколЧтенияФайла",        ПротоколЧтенияФайла);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколГруппировкиВыписки", ПротоколГруппировкиВыписки);
	РаспознанныеДанныеИзБанка.Вставить("СоздаватьСчетОрганизации",   СоздаватьСчетОрганизации);
	
	Возврат РаспознанныеДанныеИзБанка;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка выписки по банковскому счету'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Настройки - см. НовыйНастройкиОбменСБанком()
Функция РаспознатьВыписки(Выписки, УчастникиОпераций, СоздаватьСчетОрганизации = Ложь) Экспорт
	
	РаспознанныеВыписки = Новый Соответствие; // Ключ - идентификатор выписки; Значение - см. НовыйРаспознаннаяВыписка()
	
	ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций();
	ШаблоныОбъектов = ШаблоныОбъектовСохранениеДанныхАвтозаполнения();
	
	НайденныеДокументыАУСН = ИнтеграцияАУСНБП.НайтиПоИдентификаторуАУСН(Выписки);
	
	ЗаписиАУСНкУдалению = Новый Массив;
	
	Для Каждого КлючИЗначение Из Выписки Цикл
		
		Выписка = КлючИЗначение.Значение;
		
		РаспознаннаяВыписка = НовыйРаспознаннаяВыписка(Выписка.Идентификатор, УчастникиОпераций);
		РаспознанныеВыписки.Вставить(Выписка.Идентификатор, РаспознаннаяВыписка);
		
		Если Не БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций, СоздаватьСчетОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтеграцияАУСНБП.ЗаполнитьДокументыАУСН(РаспознаннаяВыписка, Выписка, НайденныеДокументыАУСН);
		НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		
		// Определим хозяйственные операции
		ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
		ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета     = РаспознаннаяВыписка.ВладелецСчета;
		ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций = УчастникиОпераций;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			Если ЗначениеЗаполнено(Операция.ИдентификаторАУСН) И ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
				СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					РаспознаннаяОперация.Ссылка, "СуммаДокумента");
				Если Операция.Сумма <> СуммаДокумента Тогда
					ЗаписиАУСНкУдалению.Добавить(Операция.ИдентификаторАУСН);
					РаспознаннаяОперация.Ссылка = Неопределено;
					РаспознаннаяОперация.ПлатежноеПоручение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
			
			РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация(
				ПараметрыОпределенияХозяйственнойОперации,
				ПравилаОпределенияХозяйственныхОпераций);
			
			ПредупрежденияПриВыбореСсылок = ПредупрежденияПриВыбореСсылок(
				РаспознаннаяОперация.ХозяйственнаяОперация, ПараметрыОпределенияХозяйственнойОперации);
			ЗаписатьПредупреждения(РаспознаннаяОперация, ПредупрежденияПриВыбореСсылок);
			
		КонецЦикла;
		
		НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		
		СохранитьДанныеАвтозаполненияСтрокВыписки(РаспознаннаяВыписка, Выписка, ШаблоныОбъектов);
		
	КонецЦикла;
	
	РегистрыСведений.БанковскиеДокументыАУСН.ОчиститьЗаписи(ЗаписиАУСНкУдалению);
	
	Возврат РаспознанныеВыписки;
	
КонецФункции

// содержимое РаспознанныеДанныеИзБанка может быть дополнено (модифицировано)
// Настройки - см. НовыйНастройкиОбменСБанком()
Функция ХозяйственнаяОперацияПоВидуОперации(ВидОперации, ИдентификаторВыписки, ИдентификаторОперацииБанк, РаспознанныеДанныеИзБанка, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = ОперацияВыписки(РаспознанныеДанныеИзБанка.Выписки, ИдентификаторВыписки, ИдентификаторОперацииБанк);
	Если Операция = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
	Если РаспознаннаяВыписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
	ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
	ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = РаспознанныеДанныеИзБанка.УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
	
	ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций(ВидОперации);
	
	ХозяйственнаяОперация = ХозяйственнаяОперация(
		ПараметрыОпределенияХозяйственнойОперации,
		ПравилаОпределенияХозяйственныхОпераций,
		Истина);
		
	Возврат ХозяйственнаяОперация;
	
КонецФункции 

// Определяет свойства распознанной операции, одновременно соответствующие сведениям, указанным
// - в форме (пользователем)
// - в операции выписки (инициатором платежа).
// Если подходящих ссылок нет, то создает их, дополняя (модифицируя) содержимое РаспознанныеДанныеИзБанка.
//
// Для распознавания операции по виду операции следует использовать ХозяйственнаяОперацияПоВидуОперации()
//
// Параметры:
//  ДанныеВведенныеПользователем - Структура - Ключ - имя данных; Значение - значение данных. 
//     Допускаются ключи: "Контрагент", "ДоговорКонтрагента", "ВидОперацииДокумента"
//  ИдентификаторВыписки         - см. ТипИдентификатор()
//  ИдентификаторОперации        - см. ТипИдентификатор()
//  РаспознанныеДанныеИзБанка    - см. НовыйРаспознанныеДанныеИзБанка()
//  Настройки                    - см. НовыйНастройкиОбменСБанком()
// 
// Возвращаемое значение:
//  см. НовыйХозяйственнаяОперация() - значения уточненных свойств хозяйственной операции
//
Функция УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(ДанныеВведенныеПользователем, ИдентификаторВыписки, ИдентификаторОперации, РаспознанныеДанныеИзБанка, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеВведенныеПользователем) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Операция = ОперацияВыписки(РаспознанныеДанныеИзБанка.Выписки, ИдентификаторВыписки, ИдентификаторОперации);
	Если Операция = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
	Если РаспознаннаяВыписка = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, ИдентификаторОперации);
	Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеВведенныеПользователем);
	Иначе
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РаспознаннаяОперация.ХозяйственнаяОперация);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			ХозяйственнаяОперация,
			ДанныеВведенныеПользователем,
			Истина);
	КонецЕсли;
	
	Если ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента") Тогда
		ЗаменитьХозяйственнуюОперацию = Истина;
	Иначе
		ЗаменитьХозяйственнуюОперацию = Ложь;
	КонецЕсли;
	
	Параметры = НовыйПараметрыОпределенияХозяйственнойОперации();
	Параметры.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
	Параметры.УчастникиОпераций             = РаспознанныеДанныеИзБанка.УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция);
	
	ВидОперацииДокумента =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВведенныеПользователем, "ВидОперацииДокумента");
	
	Если ЗаменитьХозяйственнуюОперацию Тогда
		
		ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций(
			ВидОперацииДокумента);
		
		Если Не ЗначениеЗаполнено(ПравилаОпределенияХозяйственныхОпераций) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		ХозяйственнаяОперация = ХозяйственнаяОперация(Параметры, ПравилаОпределенияХозяйственныхОпераций, Истина, Ложь);
		Если ХозяйственнаяОперация = Неопределено Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
	Иначе
		
		ДопАналитика = ДопАналитикаПоВидуОперации(ВидОперацииДокумента);
		
		ЗаполнитьБанковскийСчет = ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьДоговор        = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента")
			Или ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьПоДоговору     = ДанныеВведенныеПользователем.Свойство("ДоговорКонтрагента");
		ЗаполнитьСтатьюДДС      = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента");
		ЗаполнитьДопАналитику   = ЗначениеЗаполнено(ДопАналитика);
		
		Если ЗаполнитьБанковскийСчет Тогда
			
			// Банковский счет заполняем, только если его можно идентифицировать по данным файла
			ХозяйственнаяОперация.Удалить("БанковскийСчетКонтрагента");
			УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры);
			Если Не ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.ПустаяСсылка());
			КонецЕсли;
			
			ЗаполнитьДоговор = Истина;
			
		КонецЕсли;
		
		Если ЗаполнитьДоговор Тогда
			
			ХозяйственнаяОперация.Удалить("ДоговорКонтрагента");
			Если ХозяйственнаяОперация.Свойство("Контрагент")
				И ХозяйственнаяОперация.Свойство("ВидОперацииДокумента")
				И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент)
				И ЗначениеЗаполнено(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
				
				// Логика заполнения договора использует коллекцию УчастникиОпераций.
				// Однако, контрагент может быть выбран пользователем среди тех, что не могут быть идентифицированы по данным файла,
				// а значит, отсутствуют в УчастникиОпераций.
				// Поэтому добавим в УчастникиОпераций контрагента, выбранного пользователем,
				// а затем дополним коллекцию всеми договорами этого контрагента.
				
				Идентификаторы = Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"];
				ИдентификацияУчастниковБанковскихОпераций.ДополнитьУчастникиОперацийСсылкой(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент,
					Новый Структура, // описание ссылки не должно использоваться
					Идентификаторы);
				ИдентификацияУчастниковБанковскихОпераций.НайтиДоговорыКонтрагентовВИнформационнойБазе(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент);
				
				ЗаполнитьПоДоговору = НайтиДоговорПоВидуОперации(
					ХозяйственнаяОперация,
					Параметры,
					ХозяйственнаяОперация.ВидОперацииДокумента);
				
				Если Не ЗаполнитьПоДоговору Тогда
					// Договор будет вида по умолчанию
					ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(
						ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
					Если ЗначениеЗаполнено(ВидыДоговоров) Тогда
						ВидДоговора = ВидыДоговоров[0];
						// Создадим только договор
						ОтборДоговор = Новый Структура;
						ОтборДоговор.Вставить("Владелец",    ХозяйственнаяОперация.Контрагент);
						ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
						УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаполнитьПоДоговору И Не ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнитьПоДоговору Тогда
			// Реквизиты, зависящие от договора
			УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры);
			УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		Если ЗаполнитьСтатьюДДС Тогда
			ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств",
				УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ХозяйственнаяОперация.ВидОперацииДокумента));
		КонецЕсли;
		
		Если ЗаполнитьДопАналитику Тогда
			Для Каждого КлючИЗначение Из ДопАналитика Цикл
				ЗначениеДопАналитики = Неопределено;
				Если ХозяйственнаяОперация.Свойство(КлючИЗначение.Ключ, ЗначениеДопАналитики)
					И ЗначениеЗаполнено(ЗначениеДопАналитики) Тогда
					Продолжить;
				КонецЕсли;
				
				ХозяйственнаяОперация.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	Возврат ХозяйственнаяОперация;
	
КонецФункции 

// Распознает операцию из строки выписки для загруженного ранее документа.
//
// Параметры:
//  СтрокаВыписки		 - Структура - Структура с ранее подготовленными данными об операции из банковской выписки.
//                                     См. регистр ПредупрежденияПриЗагрузкеВыписки.СтрокаВыписки.
//  ПараметрыДокумента	 - Структура - Параметры загруженного документа, для которого нужно распознать распознать операцию.
//                                     См. НовыйПараметрыДокументаДляРаспознаванияОперации
// 
// Возвращаемое значение:
//   - Структура - Распознанные данные документа. См. НовыйРаспознаннаяОперацияДокумента
//
Функция РаспознатьОперациюДокумента(СтрокаВыписки, ПараметрыДокумента) Экспорт
	
	Операция = СтрокаВыписки.Операция;
	УчастникиОпераций = УчастникиОперацииДокумента(СтрокаВыписки.ИдентификаторыУчастников, 
		ПараметрыДокумента.Организация, ПараметрыДокумента.СчетОрганизации);
	
	ПараметрыОпределенияХозяйственнойОперации = ПараметрыОпределенияХозяйственнойОперацииДокумента(
		СтрокаВыписки.ИдентификаторВыписки, УчастникиОпераций, Операция);
	
	ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций(ПараметрыДокумента.ВидОперации);
	
	ХозяйственнаяОперация = ХозяйственнаяОперация(
		ПараметрыОпределенияХозяйственнойОперации, ПравилаОпределенияХозяйственныхОпераций);
	
	ПредупрежденияПриВыбореСсылок = ПредупрежденияПриВыбореСсылок(
		ХозяйственнаяОперация, ПараметрыОпределенияХозяйственнойОперации);
	
	РаспознаннаяОперация = НовыйРаспознаннаяОперацияДокумента();
	РаспознаннаяОперация.Операция = Операция;
	РаспознаннаяОперация.УчастникиОпераций = УчастникиОпераций;
	РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация;
	РаспознаннаяОперация.Предупреждения = ПредупрежденияПриВыбореСсылок;
	
	Возврат РаспознаннаяОперация;
	
КонецФункции

// Загружает выписку, полученную в формате сервиса АУСН
// Параметры:
//  Документ - ВыборкаИзРезультатаЗапроса - выборка из регистра сведений ДокументыАУСН
//  ДанныеДокумента - ОбъектXDTO - данные выписки согласно XML-схеме в общем макете UsnPartnersMergedScheme_v*
//
// Возвращаемое значение:
//  - Неопределено - в случае ошибки
//  - Структура:
//   * СозданныеДокументы - ТаблицаЗначений - см. Обработки.КлиентБанк.СоздатьДокументыПоВыписке
//   * ДанныеВФорматеСервиса - Соответствие:
//     * Ключ - Строка - уникальный идентификатор банковской операции
//     * Значение - Строка - данные банковской операции в формате XML
//                           (согласно XML-схеме в общем макете UsnPartnersMergedScheme_v*)
//
Функция ЗагрузитьВыпискуИзСервисаАУСН(Документ, ДанныеДокумента, ДополнительныеПараметры) Экспорт
	
	Выписка = ДанныеДокумента.Запрос.Statement;
	Ошибки = ДополнительныеПараметры.ОписаниеОшибок;
	
	ИННОрганизации = Выписка.Recipient.inn;
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ИННОрганизации) Тогда
		КППОрганизации = Неопределено;
	Иначе
		КППОрганизации = Выписка.Recipient.kpp;
	КонецЕсли;
	Организация = Справочники.Организации.НайтиОрганизацию(ИННОрганизации, КППОрганизации);
	Банк = РаботаСБанкамиБП.СсылкаПоКлассификатору(Выписка.Sender.bic);
	ИдентификаторБанка = ИнтеграцияАУСНПовтИсп.ИдентификаторБанкаПоКлассификатору(Банк);
	ДатаПодключения = РегистрыСведений.СостоянияИнтеграцииАУСН.ДатаПодключения(Организация, ИдентификаторБанка);
	Если Не ЗначениеЗаполнено(ДатаПодключения) Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не обнаружено подключение к сервису АУСН для Организации с ИНН %1 и банка с БИК %2'"),
			Выписка.Recipient.inn,
			Выписка.Sender.bic);
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ИнтеграцияАУСН.ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачалаВыписки = Выписка.Data.DateFrom;
	Если ДатаНачалаВыписки < ДатаПодключения Тогда
		ДатаНачалаВыписки = ДатаПодключения;
	КонецЕсли;
	ДатаОкончанияВыписки = Выписка.Data.DateTo;
	Если ДатаОкончанияВыписки < ДатаПодключения Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Дата выписки %1 меньше даты подключения к сервису АУСН %2'"),
				Формат(ДатаОкончанияВыписки, "ДЛФ=DD"),
				Формат(ДатаПодключения, "ДЛФ=DD"));
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ИнтеграцияАУСН.ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВыписки = ОбменСБанкомВФормате1С.НовыйДанныеИзБанка();
	Индекс = 0;
	
	ДанныеВФорматеСервиса = Новый Соответствие;
	
	Для Каждого БанковскаяОперация Из Выписка.Data.OperationInfo Цикл
		
		Если БанковскаяОперация.Date < НачалоДня(ДатаПодключения) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Дата документа %1 меньше даты подключения к сервису АУСН %2'"),
				Формат(БанковскаяОперация.Date, "ДЛФ=DD"),
				Формат(ДатаПодключения, "ДЛФ=DD"));
			ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СвойстваБанковскойОперации = БанковскаяОперация.PayDoc.Свойства();
		Если СвойстваБанковскойОперации.Получить("PayDocRu") <> Неопределено И
			БанковскаяОперация.PayDoc.PayDocRu <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.PayDocRu;
		ИначеЕсли СвойстваБанковскойОперации.Получить("PayRequest") <> Неопределено И
			БанковскаяОперация.PayDoc.PayRequest <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.PayRequest;
		ИначеЕсли СвойстваБанковскойОперации.Получить("CollectionOrder") <> Неопределено И
			БанковскаяОперация.PayDoc.CollectionOrder <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.CollectionOrder;
		ИначеЕсли СвойстваБанковскойОперации.Получить("PaymentOrder") <> Неопределено И
			БанковскаяОперация.PayDoc.PaymentOrder <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.PaymentOrder;
		ИначеЕсли СвойстваБанковскойОперации.Получить("BankOrder") <> Неопределено И
			БанковскаяОперация.PayDoc.BankOrder <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.BankOrder;
		ИначеЕсли СвойстваБанковскойОперации.Получить("CashContribution") <> Неопределено И
			БанковскаяОперация.PayDoc.CashContribution <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.CashContribution;
		ИначеЕсли СвойстваБанковскойОперации.Получить("Check") <> Неопределено И
			БанковскаяОперация.PayDoc.Check <> Неопределено Тогда
				ДанныеОперации = БанковскаяОперация.PayDoc.Check;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Операция = ДанныеВыписки.Документы.Добавить();
		
		Операция.Номер = ДанныеОперации.DocNo;
		Операция.Дата = ДанныеОперации.DocDate;
		Операция.Сумма = ДанныеОперации.Sum;
		Операция.ПлательщикСчет = ДанныеОперации.Payer.Account;
		Операция.ПолучательСчет = ДанныеОперации.Payee.Account;
		Операция.ПлательщикИНН = ДанныеОперации.Payer.Inn;
		Операция.ПолучательИНН = ДанныеОперации.Payee.Inn;
		Операция.Вид = ДанныеОперации.TransitionKind;
		Операция.НазначениеПлатежа = ДанныеОперации.Purpose;
		Операция.ИдентификаторАУСН = БанковскаяОперация.PayDoc.Id;
		
		РеквизитыУчастников = ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника();
		Для Каждого РеквизитУчастника Из РеквизитыУчастников Цикл
			Операция.ПлательщикРеквизиты.Вставить(РеквизитУчастника, "");
			Операция.ПолучательРеквизиты.Вставить(РеквизитУчастника, "");
		КонецЦикла;
		Операция.ПлательщикРеквизиты.Наименование = ДанныеОперации.Payer.Name;
		Операция.ПлательщикРеквизиты.КПП = ДанныеОперации.Payer.Kpp;
		Операция.ПлательщикРеквизиты.БИК = ДанныеОперации.Payer.Bank.BIC;
		Операция.ПлательщикРеквизиты.Банк = ДанныеОперации.Payer.Bank.Name;
		Операция.ПлательщикРеквизиты.РасчСчет = ДанныеОперации.Payer.Account;
		Операция.ПолучательРеквизиты.Наименование = ДанныеОперации.Payee.Name;
		Операция.ПолучательРеквизиты.КПП = ДанныеОперации.Payee.Kpp;
		Операция.ПолучательРеквизиты.БИК = ДанныеОперации.Payee.Bank.BIC;
		Операция.ПолучательРеквизиты.Банк = ДанныеОперации.Payee.Bank.Name;
		Операция.ПолучательРеквизиты.РасчСчет = ДанныеОперации.Payee.Account;
		
		ОбменСБанкомВФормате1С.ИсправитьОшибкиУчастникаСчет(Операция, "Плательщик");
		ОбменСБанкомВФормате1С.ИсправитьОшибкиУчастникаСчет(Операция, "Получатель");
		Для Каждого Колонка Из ДанныеВыписки.Документы.Колонки Цикл
			ОбменСБанкомВФормате1С.ОчиститьТолькоНулиВСтроке(Операция[Колонка.Имя]);
		КонецЦикла;
		
		РеквизитыПлатежаВБюджет = ОбменСБанкомВФормате1С.ЭлементыРеквизитовПлатежаВБюджет();
		Если ДанныеОперации.Свойства().Получить("BudgetPaymentInfo") <> Неопределено Тогда
			РеквизитыПлатежногоДокумента = ДанныеОперации.BudgetPaymentInfo;
		Иначе
			РеквизитыПлатежногоДокумента = Неопределено;
		КонецЕсли;
		Для Каждого Реквизит Из РеквизитыПлатежаВБюджет Цикл
			Операция.РеквизитыПлатежаВБюджет.Вставить(Реквизит, "");
		КонецЦикла;
		Если РеквизитыПлатежногоДокумента <> Неопределено Тогда
			Операция.РеквизитыПлатежаВБюджет.ПлательщикКПП = ДанныеОперации.Payer.Kpp;
			Операция.РеквизитыПлатежаВБюджет.ПолучательКПП = ДанныеОперации.Payee.Kpp;
			Операция.РеквизитыПлатежаВБюджет.СтатусСоставителя = РеквизитыПлатежногоДокумента.DrawerStatus;
			Операция.РеквизитыПлатежаВБюджет.ПоказательКБК = РеквизитыПлатежногоДокумента.CBC;
			Операция.РеквизитыПлатежаВБюджет.ОКАТО = РеквизитыПлатежногоДокумента.OKTMO;
			Операция.РеквизитыПлатежаВБюджет.ПоказательОснования = РеквизитыПлатежногоДокумента.Reason;
			Операция.РеквизитыПлатежаВБюджет.ПоказательПериода = РеквизитыПлатежногоДокумента.TaxPeriod;
			Операция.РеквизитыПлатежаВБюджет.ПоказательНомера = РеквизитыПлатежногоДокумента.DocNo;
			Операция.РеквизитыПлатежаВБюджет.ПоказательДаты = РеквизитыПлатежногоДокумента.DocDate;
			Операция.РеквизитыПлатежаВБюджет.ПоказательТипа = РеквизитыПлатежногоДокумента.PayType;
		КонецЕсли;
		
		Операция.ТипДокументаАУСН = Документ.Тип;
		Если Перечисления.ТипыДокументовАУСН.ЭтоДокументБанковскойВыпискиСРазметкой(Документ.Тип) Тогда
			
			Если БанковскаяОперация.Свойства().Получить("AusnDetails") = Неопределено
				Или БанковскаяОперация.AusnDetails = Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В документе %1 не обнаружены данные разметки. Разметка сформируется по данным документа.'"),
					Документ.Идентификатор);
					ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
					ИнтеграцияАУСН.ДобавитьОшибку(Ошибки, ТекстОшибки, Документ, Ложь);
			Иначе
				Операция.РазметкаАУСН = ОбменСБанкомВФормате1С.НовыйРазметкаАУСН();
				Для Каждого ЭлементРазметки Из БанковскаяОперация.AusnDetails.Specifics Цикл
					СтрокаРазметки = Операция.РазметкаАУСН.Добавить();
					СтрокаРазметки.ПризнакНалоговойБазы = Перечисления.ПризнакиНалоговойБазыАУСН.ЗначениеПоИдентификатору(
						ЭлементРазметки.OperationTaxbaseCode);
					СтрокаРазметки.КатегорияОперации = Перечисления.КатегорииОперацийАУСН.ЗначениеПоИдентификатору(
						ЭлементРазметки.OperationCategory);
					СтрокаРазметки.Сумма = ЭлементРазметки.Amount;
					СтрокаРазметки.ВалютнаяСумма = ЭлементРазметки.ForeignCurrencyAmount;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если БанковскаяОперация.Свойства().Получить("AusnDetails") <> Неопределено
			И БанковскаяОперация.AusnDetails <> Неопределено Тогда
			Для Каждого ЭлементРазметки Из БанковскаяОперация.AusnDetails.Specifics Цикл
				Если ЗначениеЗаполнено(ЭлементРазметки.ForeignCurrencyAmount) Тогда
					Если Операция.РасчетыВВалюте.Количество() = 0 Тогда
						Операция.РасчетыВВалюте = ОбменСБанкомВФормате1С.НовыйРасчетыВВалюте();
					КонецЕсли;
					РасчетыВВалюте = Операция.РасчетыВВалюте;
					РасчетыВВалюте.ВалютнаяСумма = РасчетыВВалюте.ВалютнаяСумма + ЭлементРазметки.ForeignCurrencyAmount;
					РасчетыВВалюте.Сумма = РасчетыВВалюте.Сумма + ЭлементРазметки.Amount;
					РасчетыВВалюте.Валюта = Справочники.Валюты.НайтиПоНаименованию(
						БанковскаяОперация.AusnDetails.CurrencyCode);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Операция.Идентификатор = Формат(Индекс, "ЧН=0; ЧГ=;");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ДанныеДокумента.Фабрика.ЗаписатьXML(ЗаписьXML, БанковскаяОперация, "OperationInfo");
		ДанныеВФорматеСервиса.Вставить(Операция.ИдентификаторАУСН, ЗаписьXML.Закрыть());
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПрочитанныеДанныеСервиса = Новый Структура;
	ПрочитанныеДанныеСервиса.Вставить("ДанныеИзБанка", ДанныеВыписки);
	ПрочитанныеДанныеСервиса.Вставить("Протокол", ОбменСБанкомВФормате1С.НовыйПротоколЧтенияФайла());
	
	РаспознанныеДанныеИзБанка = РезультатРаспознаванияПрочитанныхДанных(ПрочитанныеДанныеСервиса);
	
	ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
				РаспознанныеДанныеИзБанка.УчастникиОпераций, 
				РаспознанныеДанныеИзБанка.Настройки);
			
	Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
		ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(ОшибкаСозданияКонтрагента.ТекстИсключения);
	КонецЦикла;
		
	ТаблицаДокументыСозданныеПоВыписке = Обработки.КлиентБанк.СоздатьДокументыПоВыписке(РаспознанныеДанныеИзБанка,
		Ложь, Новый Массив);
	
	ПредупрежденияПриЗагрузкеВыписки = Обработки.КлиентБанк.ПредупрежденияПриЗагрузкеВыписки(РаспознанныеДанныеИзБанка);
	Если ПредупрежденияПриЗагрузкеВыписки.Количество() > 0 Тогда
		Обработки.КлиентБанк.СохранитьПредупрежденияПриЗагрузкеВыписки(ПредупрежденияПриЗагрузкеВыписки);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеДокументы", ТаблицаДокументыСозданныеПоВыписке);
	Результат.Вставить("ДанныеВФорматеСервиса", ДанныеВФорматеСервиса);
	Результат.Вставить("ДатаНачала", ДатаНачалаВыписки);
	Результат.Вставить("ДатаОкончания", ДатаОкончанияВыписки);
	Результат.Вставить("ИдентификаторПолучателя", Выписка.Recipient.id);
	Результат.Вставить("Банк", Банк);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура РасширитьПериод(НачалоПериода, КонецПериода, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоДня = НачалоДня(Дата);
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = НачалоДня;
	Иначе
		НачалоПериода = Мин(НачалоПериода, НачалоДня);
	КонецЕсли;
	
	КонецДня  = КонецДня(Дата);
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецДня;
	Иначе
		КонецПериода = Макс(КонецПериода, КонецДня);
	КонецЕсли;
	
КонецПроцедуры

Функция НачатьОценкуСоответствия() Экспорт
	
	Оценщик = Новый Структура;
	Оценщик.Вставить("Приоритет",                     0);
	Оценщик.Вставить("КоличествоВыполненныхПроверок", 0);
	
	Возврат Оценщик;
	
КонецФункции

Процедура ОценитьСоответствиеПоКритерию(Оценщик, СоответствуетЛучше) Экспорт
	
	Оценщик.КоличествоВыполненныхПроверок = Оценщик.КоличествоВыполненныхПроверок + 1;
	Оценщик.Приоритет                     = Оценщик.Приоритет * 2; // Сдвигаем на 1 бит влево
	
	Если Не СоответствуетЛучше Тогда
		Возврат;
	КонецЕсли;
	
	Оценщик.Приоритет = Оценщик.Приоритет + 1; // Устанавливаем новый (самый правый) бит
	
КонецПроцедуры

#КонецОбласти

#Область ISO20022

Функция ТипИдентификатор() Экспорт
	
	// Тип Max35Text часто используется в ISO 20022 для идентификаторов
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(35);
	
КонецФункции

Функция НовыйВыпискаПоБанковскомуСчету(Идентификатор) Экспорт
	
	// Представляет значения типа AccountStatement5 сообщения camt.053.001.05 (BankToCustomerStatementV05) стандарта ISO 20022
	// Где уместно, приводятся имена на русском языке в соответствии с проектом стандартов национальной практики применения платежных сообщений ISO 20022,
	// опубликованном Центральным банком РФ
	
	ТипСумма         = ОбщегоНазначения.ОписаниеТипаЧисло(15,2); // в рублях
	ТипИдентификатор = ТипИдентификатор();
	
	Выписка = Новый Структура;
	Выписка.Вставить("Идентификатор",         Идентификатор); // Identification
	Выписка.Вставить("НачалоПериода",         '0001-01-01');  // FromToDate.FromDateTime
	Выписка.Вставить("КонецПериода",          '0001-01-01');  // FromToDate.ToDateTime
	
	Выписка.Вставить("Сальдо", Новый ТаблицаЗначений); // Balance
	Выписка.Сальдо.Колонки.Добавить("Дата",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // Balance.Date.DateTime; Принимаем, что для всех записей сальдо на начало дня; Balance.Type = OPBD
	Выписка.Сальдо.Колонки.Добавить("Сумма", ТипСумма);                                          // Balance.Amount; Принимаем, что это кредитовое сальдо по счету клиента банка; Balance.CreditDebitIndicator = CRDT
	
	Выписка.Вставить("ВсегоСписано",       0); // TransactionsSummary.TotalDebitEntries.Sum
	Выписка.Вставить("ВсегоПоступило",     0); // TransactionsSummary.TotalCreditEntries.Sum
	
	Выписка.Вставить("Операции", Новый ТаблицаЗначений); // Entry
	Выписка.Операции.Колонки.Добавить("Идентификатор",            ТипИдентификатор); // EntryReference Идентифицирует операцию в рамках выписки
	
	// Поле, аналогичное ПорядковыйНомерВФайле, не предусмотрено camt.053 и может использоваться только для заполнения коллекции
	// (не должно использоваться позднее).
	// Ограничение в 10 символов выбрано в соответствии с ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу()
	Выписка.Операции.Колонки.Добавить("ПорядковыйНомерВФайле",    ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	// Используется при обмене через 1С:ДиректБанк
	Выписка.Операции.Колонки.Добавить("ИдентификаторДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	// Используется при обмене с сервисом АУСН
	Выписка.Операции.Колонки.Добавить("ИдентификаторАУСН", ОбщегоНазначения.ОписаниеТипаСтрока(64));
	Выписка.Операции.Колонки.Добавить("РазметкаАУСН", Новый ОписаниеТипов("ТаблицаЗначений")); // См. ОбменСБанкомВФормате1С.НовыйРазметкаАУСН()
	Выписка.Операции.Колонки.Добавить("ТипДокументаАУСН", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовАУСН"));
	Выписка.Операции.Колонки.Добавить("РасчетыВВалюте", Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.НовыйРасчетыВВалюте()
	
	// В программе длину номера документа ограничиваем до 20 символов: только такие номера могут быть сохранены в ИБ.
	// См.
	// - Метаданные.Документы.ПоступлениеНаРасчетныйСчет.Реквизиты.НомерВходящегоДокумента
	// - Метаданные.Документы.СписаниеСРасчетногоСчета.Реквизиты.НомерВходящегоДокумента
	Выписка.Операции.Колонки.Добавить("НомерДокумента",           ОбщегоНазначения.ОписаниеТипаСтрока(20)); // TransactionDetails.References.EndToEndIdentification Для идентификации используется номер и дата документа, передаваемые от плательщика получателю (или при прямом дебитовании - от получателя плательщику)
	Выписка.Операции.Колонки.Добавить("ДатаДокумента",            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); 
	Выписка.Операции.Колонки.Добавить("НомерСчетаКонтрагента",    БанковскиеПравила.ТипНомерСчета()); // TransactionDetails.References.InstructionIdentification Для идентификации операции в цепочке "банк-владелец счета" используется часть номера и дата документа, которым идентифицирована транзакция, а также номер банковского счета контрагента
	Выписка.Операции.Колонки.Добавить("Сумма",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,2)); // Amount
	Выписка.Операции.Колонки.Добавить("ПоступилоСписано",         ТипПоступилоСписано());   // "Поступило" или "Списано" - CreditDebitIndicator
	Выписка.Операции.Колонки.Добавить("ДатаИсполнения",           ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // BookingDate; Принимаем, что Status = BOOK
	Выписка.Операции.Колонки.Добавить("ПлательщикИдентификаторы", Новый ОписаниеТипов("Массив")); // См. TransactionDetails.RelatedParties.Proprietary.Party.Identification.OrganisationIdentification.Other.Identification
	Выписка.Операции.Колонки.Добавить("ПолучательИдентификаторы", Новый ОписаниеТипов("Массив"));
	Выписка.Операции.Колонки.Добавить("ПлательщикРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("ПолучательРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("РеквизитыПлатежаВБюджет",  Новый ОписаниеТипов("Структура")); // См. TransactionDetails.RemittanceInformation.Structured.TaxRemittance; ЭлементыРеквизитовПлатежаВБюджет()
	
	// Описание банковской операции может содержать BankTransactionCode - указание на вид этой операции не в терминах банка,
	// а в терминах бизнеса получателя или отправителя платежа, его хозяйственной деятельности.
	// Стандарт предписывает передачу BankTransactionCode
	// 1. либо в централизованном формате Domain-Family-SubFamily в соответствии с External Code Set
	// 2. либо в соответствии с какой-либо проприетарной схемой.
	// Во втором случае может быть передан только один идентификатор по одной схеме.
	// Однако, в российской практике для идентификациии типа операции используются два понятия:
	// - ШифрОперации
	// - БалансовыйСчет
	// (см. 385-П - план счетов и Приложение 1)
	// Поэтому, для строгого соблюдения стандарта следует при подготовке данных в соответствии с ISO 20022 "перекодировать" 
	// из сочетания ШифрОперации + БалансовыйСчет в значения, описанные во внешнем наборе кодов.
	// В данном случае, поскольку нет необходимости строго соблюдать представления, заданные в стандарте,
	// такое "перекодирование" выполним позже, а в структуру данных поместим два поля отдельно.
	// То есть, сделаем вид, что стандарт позволяет передавать несколько идентификаторов по разным проприетарным схемам:
	Выписка.Операции.Колонки.Добавить("ШифрОперации",             Новый ОписаниеТипов("Число"));                 // BankTransactionCode.Proprietary
	Выписка.Операции.Колонки.Добавить("БалансовыйСчет",           БанковскиеПравила.ТипНомерБалансовогоСчета()); // BankTransactionCode.Proprietary
	Выписка.Операции.Колонки.Добавить("Очередность",              Новый ОписаниеТипов("Число"));
	
	// TransactionDetails.RemittanceInformation
	// Стандарт национальной практики применения платежных сообщений ISO 20022:
	//  "информация, которая позволят осуществить квитовку, т.е. сверку платежа с позициями,
	//  для оплаты которых данный платеж предназначен, 
	//  например, коммерческими счетами в системе учета дебиторской задолженности"
	// ISO20022: 
	//  "information that enables the matching, that is reconciliation, of a payment 
	//  with the items that the payment is intended to settle, such as commercial invoices in an account receivable system"
	Выписка.Операции.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка")); // может содержать разделители строки; каждая строка, ограниченная разделителем, должна иметь длину до 140 символов (по ISO), в то время как 383-П ограничивает общую длину строки 210 символами
	Выписка.Операции.Колонки.Добавить("СловаНазначениеПлатежа",  Новый ОписаниеТипов("Массив")); // Назначение платежа разложенное на слова по всем разделителям (см. ниже)
	Выписка.Операции.Колонки.Добавить("РазделителиИзНазначения", Новый ОписаниеТипов("Строка")); // Все разделители из Назначение платежа
	
	Выписка.Операции.Индексы.Добавить("Идентификатор");
	
	Возврат Выписка;
	
КонецФункции

Функция ВыпискаПоИдентификатору(Выписки, Идентификатор)
	
	Выписка = Выписки[Идентификатор];
	Если Выписка = Неопределено Тогда
		Выписка = НовыйВыпискаПоБанковскомуСчету(Идентификатор);
		Выписки.Вставить(Идентификатор, Выписка);
	КонецЕсли;
	
	Возврат Выписка;
	
КонецФункции

Функция ТипПоступилоСписано() Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9); // "Поступило" или "Списано" - CreditDebitIndicator - см. ВариантыПоступилоСписано()
КонецФункции

Функция ВариантыПоступилоСписано()
	
	ВариантыПоступилоСписано = Новый Массив;
	ВариантыПоступилоСписано.Добавить("Поступило");
	ВариантыПоступилоСписано.Добавить("Списано");
	
	Возврат ВариантыПоступилоСписано;
	
КонецФункции

#КонецОбласти

#Область ГруппировкаВыписки

// Данные из формата обмена 1С приближаем к общепринятому формату: 
// - группируем операции по выпискам
// - присваиваем формальные идентификаторы участникам операций
//
// Параметры:
//  ДанныеИзБанка				 - см. ОбменСБанкомВФормате1С.НовыйДанныеИзБанка()
//  УчастникиОпераций			 - см. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
//  ИдентификаторыВсехДокументов - см. УчастникиОперацийЗаполнитьПоДаннымИзБанка()
//  Протокол					 - см. НовыйПротоколГруппировкиВыписки()
// 
// Возвращаемое значение:
//  Соответствие - Ключ: идентификатор; Значение: см. НовыйВыпискаПоБанковскомуСчету()
//
Функция ВыпискиПоБанковскимСчетам(ДанныеИзБанка, УчастникиОпераций, ИдентификаторыВсехДокументов, Протокол = Неопределено)
	
	Выписки         = Новый Соответствие; // Ключ - идентификатор; Значение - см. НовыйВыпискаПоБанковскомуСчету()
	СчетаВВыписке   = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - соответствие, которое содержит идентификаторы выписок с этим номером счета
	СчетаВЗаголовке = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - Истина
	
	// сначала в заголовке прочитаем только номера счетов, а после того, как обработаем документы - и остальные данные.
	Для Каждого НомерСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		СчетаВВыписке.Вставить(НомерСчета, Новый Соответствие);
		СчетаВЗаголовке.Вставить(НомерСчета, Истина);
	КонецЦикла;
	
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		СчетаВВыписке.Вставить(Остаток.РасчСчет, Новый Соответствие);
	КонецЦикла;
	
	// ДОКУМЕНТЫ
	
	Стороны = Новый Структура;
	Стороны.Вставить("Поступило", "Получатель");
	Стороны.Вставить("Списано",   "Плательщик");
	
	ПриоритетыАргументовПоступилоСписано = Новый Массив; // По возрастанию приоритета
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВВыписке");   // Наименее надежный, так как зависит от порядка следования документов в файле
	ПриоритетыАргументовПоступилоСписано.Добавить("ДатаИсполнения"); // Этот признак часто непонятен разработчикам банковских систем и они ошибаются. Поэтому приоритет низкий
	ПриоритетыАргументовПоступилоСписано.Добавить("РедактированиеОрганизацииДоступно");
	ПриоритетыАргументовПоступилоСписано.Добавить("ОрганизацияВИнформационнойБазе");
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВЗаголовке"); // Это достаточно надежный признак, но заполнен не всегда
	
	// Для сравнения наборов аргументов потребуются веса аргументов, выраженные степенями двойки
	ВесаАргументовПоступилоСписано = Новый Структура;
	Для ИндексАргумента = 0 По ПриоритетыАргументовПоступилоСписано.ВГраница() Цикл
		ИмяАргумента = ПриоритетыАргументовПоступилоСписано[ИндексАргумента];
		ВесАргумента = Pow(2, ИндексАргумента);
		ВесаАргументовПоступилоСписано.Вставить(ИмяАргумента, ВесАргумента);
	КонецЦикла;
	
	КешИдентификаторовБанковскихСчетов = Новый Соответствие;
	КешИдентификаторовОрганизаций = Новый Соответствие; // Ключ - строка, набор идентификаторов; Значение - Структура с ключами Организации (набор ссылок) и РедактированиеДоступно (Булево)
	ДоступныеОрганизации          = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"Документ.СписаниеСРасчетногоСчета",
		Истина);
	// Каждый документ соотнесем с одним или несколькими банковскими счетами нашей организации
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ПоступилоСписано          = Новый Структура; // Является ли конкретный документ поступлением на наш счет или списанием с нашего счета
		АргументыПоступилоСписано = Новый Структура; // Аргументы в отношении конкретного документа: считать его поступлением или списанием
		ИдентификаторыДокумента   = ИдентификаторыВсехДокументов.Найти(Документ.Идентификатор, "Документ");
		
		СчетИзЗаголовка = "";
		Для Каждого Сторона Из Стороны Цикл
			
			ИмяПоступилоСписано = Сторона.Ключ;
			ИмяСтороны          = Сторона.Значение;
			
			ПоступилоСписано.Вставить(ИмяПоступилоСписано, Ложь);
			АргументыПоступилоСписано.Вставить(ИмяПоступилоСписано, Новый Структура);
			
			Счет = Документ[ИмяСтороны + "Счет"];
			
			Если Не ЗначениеЗаполнено(Счет) Тогда
				СчетИзЗаголовка = "";
				
				СчетВЗаголовке  = "";
				Если СчетаВЗаголовке.Количество() > 1 Тогда
					// В выписке несколько счетов, не можем загрузить документ по неизвестному счету.
					Продолжить;
				ИначеЕсли СчетаВЗаголовке.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаВЗаголовке Цикл
						СчетВЗаголовке = КлючИЗначение.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				СчетВВыписке = "";
				Если СчетаВВыписке.Количество() > 1 Тогда
					// В выписке несколько счетов, не можем загрузить документ по неизвестному счету.
					Продолжить;
				ИначеЕсли СчетаВВыписке.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаВВыписке Цикл
						СчетВВыписке = КлючИЗначение.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				Если ПустаяСтрока(СчетВВыписке) И ЗначениеЗаполнено(СчетВЗаголовке) Тогда
					СчетИзЗаголовка = СчетВЗаголовке;
				ИначеЕсли ПустаяСтрока(СчетВЗаголовке) И ЗначениеЗаполнено(СчетВВыписке) Тогда
					СчетИзЗаголовка = СчетВВыписке;
				ИначеЕсли СчетВВыписке = СчетВЗаголовке И ЗначениеЗаполнено(СчетВЗаголовке) Тогда
					СчетИзЗаголовка = СчетВЗаголовке;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
					// Не можем загрузить документ по неизвестному счету.
					Продолжить;
				КонецЕсли;
				
				Счет = СчетИзЗаголовка;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторыДокумента[ИмяСтороны + "Счет"])
				И Не ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// Не можем загрузить документ по неизвестному счету
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ДатаИсполнения");
			ИначеЕсли ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// В операции не указан счет и нет соответствующей стороне даты исполнения.
				Продолжить;
			КонецЕсли;
			
			Если СчетаВЗаголовке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВЗаголовке");
			КонецЕсли;
			
			Если СчетаВВыписке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВВыписке");
			КонецЕсли;
			
			ИдентификаторыУчастникаОперации = ИдентификаторыДокумента[ИмяСтороны];
			
			ВсеИдентификаторыСтрокой = СтрСоединить(ИдентификаторыУчастникаОперации, "+");
			
			ОписаниеОрганизации = КешИдентификаторовОрганизаций[ВсеИдентификаторыСтрокой];
			Если ОписаниеОрганизации = Неопределено Тогда
				Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
				Организации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
					ИдентификаторыУчастникаОперации,
					УчастникиОпераций,
					Отбор);
				ОписаниеОрганизации = Новый Структура;
				ОписаниеОрганизации.Вставить("Организации",            Организации);
				ОписаниеОрганизации.Вставить("РедактированиеДоступно", Ложь);
				Если ЗначениеЗаполнено(Организации) Тогда
					Для Каждого КлючИЗначение Из Организации Цикл
						ОписаниеОрганизации.РедактированиеДоступно = (ДоступныеОрганизации.Найти(КлючИЗначение.Ключ) <> Неопределено);
						Если ОписаниеОрганизации.РедактированиеДоступно Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				КешИдентификаторовОрганизаций.Вставить(ВсеИдентификаторыСтрокой, ОписаниеОрганизации);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ОписаниеОрганизации.Организации) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ОрганизацияВИнформационнойБазе");
				Если ОписаниеОрганизации.РедактированиеДоступно Тогда
					АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("РедактированиеОрганизацииДоступно");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) Тогда
			ПоступилоСписано.Поступило = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			ПоступилоСписано.Списано = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			
			ВесаАргументов  = Новый Структура;
			МаксимальныйВес = 0;
			Для Каждого Сторона Из Стороны Цикл
				Вес = 0;
				Для Каждого ОписаниеАргумента Из АргументыПоступилоСписано[Сторона.Ключ] Цикл
					Вес = Вес + ВесаАргументовПоступилоСписано[ОписаниеАргумента.Ключ];
				КонецЦикла;
				ВесаАргументов.Вставить(Сторона.Ключ, Вес);
				МаксимальныйВес = Макс(МаксимальныйВес, Вес);
			КонецЦикла;
			
			Для Каждого Сторона Из Стороны Цикл
				ПоступилоСписано[Сторона.Ключ] = (ВесаАргументов[Сторона.Ключ] >= МаксимальныйВес);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПоступилоСписано.Поступило И Не ПоступилоСписано.Списано Тогда
			// Такой документ не может быть включен в выписку
			Если Не АргументыПоступилоСписано.Поступило.Свойство("ДатаИсполнения")
				И Не АргументыПоступилоСписано.Списано.Свойство("ДатаИсполнения") Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
			Иначе
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Документ не может быть включен в выписку ни по одному счету'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Стороны Цикл
			
			ИмяПоступилоСписано = КлючИЗначение.Ключ;
			ИмяСтороны          = КлючИЗначение.Значение;
			
			Если Не ПоступилоСписано[ИмяПоступилоСписано] Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаИсполнения = Документ["Дата" + ИмяПоступилоСписано];
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				// Может быть не заполнена в файле
				ДатаИсполнения = Документ.Дата;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
				Продолжить;
			КонецЕсли;
			
			НомерСчета = Документ[ИмяСтороны + "Счет"];
			Если ПустаяСтрока(НомерСчета) Тогда
				Если ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) И ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
					НомерСчета = СчетИзЗаголовка;
				Иначе
					ДополнитьПротоколГруппировкиВыписки(
						Протокол,
						ДанныеИзБанка,
						Документ.Идентификатор,
						НСтр("ru = 'Не указан номер счета, по которому проведена операция'"));
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ИдентификаторВыписки = ИдентификаторыДокумента[ИмяСтороны + "Счет"];
			Если ПустаяСтрока(ИдентификаторВыписки)
				И ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) И ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// Добавим идентификатор BBAN для счета из заголовка.
				БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Документ[ИмяСтороны + "Реквизиты"], "БИК", "");
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
					УчастникиОпераций,
					НомерСчета,
					БИК);
				БалансовыйСчет = "";
				Если Идентификатор = Неопределено Тогда
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
						УчастникиОпераций,
						НомерСчета,
						БИК,
						Ложь);
					Если ЗначениеЗаполнено(Идентификатор) Тогда
						ОписаниеИдентификатораBBAN = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
						Если ОписаниеИдентификатораBBAN <> Неопределено Тогда
							ОписаниеИдентификатораBBAN.Состав.Свойство("БалансовыйСчет", БалансовыйСчет);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Идентификатор <> Неопределено
					И СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, Ложь) Тогда
					ИдентификаторыУчастника = ИдентификаторыДокумента[ИмяСтороны];
					ИдентификаторыУчастника.Добавить(Идентификатор);
					ИдентификаторыДокумента[ИмяСтороны + "Счет"] = Идентификатор;
					ИдентификаторВыписки = Идентификатор;
				КонецЕсли;
			КонецЕсли;
			
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыписки);
			
			// Дополним перечень счетов в выписке и их идентификаторов.
			ИдентификаторыСчетаВВыписке = СчетаВВыписке[НомерСчета];
			Если ИдентификаторыСчетаВВыписке = Неопределено Тогда
				ИдентификаторыСчетаВВыписке = Новый Соответствие;
				СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчетаВВыписке);
			КонецЕсли;
			ИдентификаторыСчетаВВыписке.Вставить(ИдентификаторВыписки);
			
			ИмяПротивоположнойСтороны = ?(ИмяПоступилоСписано = "Поступило", Стороны.Списано, Стороны.Поступило);
			НомерСчетаПротивоположнойСтороны = Документ[ИмяПротивоположнойСтороны + "Счет"];
			РеквизитыПротивоположнойСтороны  = Документ[ИмяПротивоположнойСтороны + "Реквизиты"];
			ИмяНашейСтороны = ?(ИмяПоступилоСписано = "Поступило", Стороны.Поступило, Стороны.Списано);
			
			Если ИмяПоступилоСписано = "Списано" И ПоступилоСписано.Поступило Тогда
				РеквизитыНашейСтороны = Документ[ИмяНашейСтороны + "Реквизиты"];
				Если РеквизитыСчетаИдентичны(РеквизитыПротивоположнойСтороны, РеквизитыНашейСтороны) Тогда
					// Реквизиты счета плательщика и получателя совпадают - это или ошибка банка, или самоинкассация.
					// В этом случае документ должен попасть только в операцию поступления,
					// иначе он будет отражен в операциях дважды - и как поступление и как списание.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Дополним выписку операцией
			Операция = Выписка.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(Операция, Документ,
				"Идентификатор,ИдентификаторАУСН,РазметкаАУСН,ТипДокументаАУСН,
				|ИдентификаторДокумента,
				|Сумма,НазначениеПлатежа,ПлательщикРеквизиты,ПолучательРеквизиты,РасчетыВВалюте");
			Операция.ПорядковыйНомерВФайле = ДанныеИзБанка.Документы.Индекс(Документ);
			Операция.ДатаДокумента  = Документ.Дата;
			Операция.НомерДокумента = Документ.Номер;
			Если СтрДлина(Документ.Номер) > СтрДлина(Операция.НомерДокумента) Тогда
				// В информационную базу нельзя записать такой длинный номер.
				// Так как наиболее точные разряды номера обычно справа, то номер обрежем слева.
				Операция.НомерДокумента = Прав(Документ.Номер, СтрДлина(Операция.НомерДокумента));
			КонецЕсли;
			
			Операция.ПоступилоСписано = ИмяПоступилоСписано;
			Операция.ДатаИсполнения   = ДатаИсполнения;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПлательщикИдентификаторы, ИдентификаторыДокумента.Плательщик);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПолучательИдентификаторы, ИдентификаторыДокумента.Получатель);
			
			Операция.РеквизитыПлатежаВБюджет = Документ.РеквизитыПлатежаВБюджет;
			Если Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") 
				И ИдентификаторыДокумента.ТретьиЛица.Свойство("Налогоплательщик") Тогда
				Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Вставить("Идентификаторы", ИдентификаторыДокумента.ТретьиЛица.Налогоплательщик);
			КонецЕсли;
			Если Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") 
				И ИдентификаторыДокумента.ТретьиЛица.Свойство("Должник") Тогда
				Операция.РеквизитыПлатежаВБюджет.Должник.Вставить("Идентификаторы", ИдентификаторыДокумента.ТретьиЛица.Должник);
			КонецЕсли;
			
			Операция.ШифрОперации          = Документ.ВидОплаты;
			Операция.Очередность           = Документ.Очередность;
			Операция.НомерСчетаКонтрагента = НомерСчетаПротивоположнойСтороны;
			
			// Балансовый счет - определяем только, если номер счета контрагента - по правилам ЦБР
			Если БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(НомерСчетаПротивоположнойСтороны) Тогда
				
				Если Операция[ИмяПротивоположнойСтороны + "Идентификаторы"].Количество() Тогда
					ИспользуетсяБанкДляРасчетов = Ложь;
					Если РеквизитыПротивоположнойСтороны.Свойство("РасчСчет") Тогда
						ИспользуетсяБанкДляРасчетов = НомерСчетаПротивоположнойСтороны <> РеквизитыПротивоположнойСтороны.РасчСчет;
					КонецЕсли;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						НомерСчетаПротивоположнойСтороныСоответствуетБИК = Не РеквизитыПротивоположнойСтороны.Свойство("БИК")
							Или БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(
								РеквизитыПротивоположнойСтороны.РасчСчет,
								РеквизитыПротивоположнойСтороны.БИК,
								Истина);
						Если НомерСчетаПротивоположнойСтороныСоответствуетБИК
							Или БанковскиеПравила.ЭтоРублевыйСчет(РеквизитыПротивоположнойСтороны.РасчСчет) Тогда
							БалансовыйСчетБанкаДляРасчетов = БанковскиеПравила.БалансовыйСчет(РеквизитыПротивоположнойСтороны.РасчСчет);
							Если Не БанковскиеПравила.ЭтоКорсчетБанкаНерезидента(БалансовыйСчетБанкаДляРасчетов) Тогда
								Операция.БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчетаПротивоположнойСтороны);
							КонецЕсли;
						КонецЕсли;
					Иначе
						НомерСчетаПротивоположнойСтороныСоответствуетБИК = Не РеквизитыПротивоположнойСтороны.Свойство("БИК")
							Или БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(
								НомерСчетаПротивоположнойСтороны,
								РеквизитыПротивоположнойСтороны.БИК,
								Истина);
						Если НомерСчетаПротивоположнойСтороныСоответствуетБИК
							Или БанковскиеПравила.ЭтоРублевыйСчет(НомерСчетаПротивоположнойСтороны) Тогда
							Операция.БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчетаПротивоположнойСтороны);
						КонецЕсли;
					КонецЕсли;
				Иначе
					БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчетаПротивоположнойСтороны);
					Если БанковскиеПравила.ЭтоСчетаКредитныхОрганизацийПоОперациямСЦифровымиРублями(БалансовыйСчет) Тогда
						Операция.БалансовыйСчет = БалансовыйСчет;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоФизическоеЛицо = Ложь;
			Для Каждого Идентификатор Из Операция[ИмяПротивоположнойСтороны + "Идентификаторы"] Цикл
				// При возврате по корпоративной карте плательщиком должно быть юр.лицо (банк).
				Если ИмяПротивоположнойСтороны = "Плательщик"
					И ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(Идентификатор, УчастникиОпераций) Тогда
					ЭтоФизическоеЛицо = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ВладелецСчета = НовыйОписаниеВладельцаСчета(Выписка.Идентификатор, УчастникиОпераций);
			Если Не ЭтоФизическоеЛицо И ЭтоОперацияПоКорпоративнойКарте(Операция, ВладелецСчета) Тогда
				ОписаниеБанковскогоСчета = КешИдентификаторовБанковскихСчетов[ВсеИдентификаторыСтрокой];
				Если ОписаниеБанковскогоСчета = Неопределено Тогда
					Для Каждого КлючИЗначение Из ОписаниеОрганизации.Организации Цикл
						Организация = КлючИЗначение.Ключ;
					КонецЦикла;
					
					ОтборБанковскийСчет = Новый Структура();
					ОтборБанковскийСчет.Вставить("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
					ОтборБанковскийСчет.Вставить("Владелец", Организация);
					БанковскиеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
						ИдентификаторыУчастникаОперации,
						УчастникиОпераций,
						ОтборБанковскийСчет);
					ОписаниеБанковскогоСчета = Новый Структура;
					ОписаниеБанковскогоСчета.Вставить("БанковскийСчет", БанковскиеСчета);
					ОписаниеБанковскогоСчета.Вставить("СчетКорпоративныхРасчетов", Ложь);
					ОписаниеБанковскогоСчета.Вставить("СчетБанк", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
					ОписаниеБанковскогоСчета.Вставить("КорпоративныеКартыПодотчетныхЛиц", Новый Соответствие);
					Если ЗначениеЗаполнено(БанковскиеСчета) Тогда
						Для Каждого КлючИЗначение Из БанковскиеСчета Цикл
							БанковскийСчет = КлючИЗначение.Ключ;
							ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов = КлючИЗначение.Значение.ОписаниеСсылки.СчетКорпоративныхРасчетов;
							ОписаниеБанковскогоСчета.СчетБанк = КлючИЗначение.Значение.ОписаниеСсылки.СчетБанк;
							ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц = КорпоративныеКартыПодотчетныхЛиц(
								Организация, БанковскийСчет, ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов);
							Прервать;
						КонецЦикла;
					КонецЕсли;
					КешИдентификаторовБанковскихСчетов.Вставить(ВсеИдентификаторыСтрокой, ОписаниеБанковскогоСчета);
				КонецЕсли;
				
				КоличествоКарт = ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц.Количество();
				Если ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов И КоличествоКарт > 0 Тогда
					НайденныйНомерКарты = "";
					ОднаКартаНаКарточномСчете = Ложь;
					Если КоличествоКарт = 1
						И ОписаниеБанковскогоСчета.СчетБанк = ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетов") Тогда
						ОднаКартаНаКарточномСчете = Истина;
					КонецЕсли;
					
					Если ОднаКартаНаКарточномСчете Тогда
						// Если задана одна карта на карточном счете, то дополнительно ничего не уточняем
						// - используем ее и физ.лицо, которому она выдана.
						Для каждого КлючИЗначение Из ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
							НайденныйНомерКарты = КлючИЗначение.Ключ;
							ПодотчетноеЛицо     = КлючИЗначение.Значение;
						КонецЦикла;
					Иначе
						// К банковскому счету подключено несколько карт, выданных подотчетным лицам.
						// Уточним в Назначение платежа по какой карте прошла операция.
						МаксПриоритет = 0;
						Для Каждого КартаПодотчетногоЛица Из ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
							НомерКарты = КартаПодотчетногоЛица.Ключ;
							Приоритет = ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, Операция.НазначениеПлатежа);
							Если Приоритет > МаксПриоритет Тогда
								ПодотчетноеЛицо     = КартаПодотчетногоЛица.Значение;
								НайденныйНомерКарты = НомерКарты;
								МаксПриоритет = Приоритет;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					НайденНомерКарты = Не ПустаяСтрока(НайденныйНомерКарты);
					// Если это возврат по карте (внесение средств на крату),
					// обязательно должен быть указан номер карты в тексте Назначения, иначе может быть коллизия с эквайрингом.
					Если (НайденНомерКарты Или ИмяПротивоположнойСтороны <> "Плательщик")
						И ЭтоОперацияПоКорпоративнойКарте(Операция, ОписаниеБанковскогоСчета) Тогда // выше уже проверяли, но без учета данных банковского счета
						Операция[ИмяПротивоположнойСтороны + "Идентификаторы"].Очистить();
					КонецЕсли;
					
					Если НайденНомерКарты Тогда
						Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруКарты(
							УчастникиОпераций,
							НайденныйНомерКарты);
						Если Идентификатор <> Неопределено Тогда
							
							Идентификаторы = Операция[ИмяПротивоположнойСтороны + "Идентификаторы"];
							Идентификаторы.Добавить(Идентификатор);
							ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
								Идентификатор, УчастникиОпераций);
							ИдентификацияУчастниковБанковскихОпераций.ДополнитьУчастникиОперацийСсылкой(
								УчастникиОпераций, ПодотчетноеЛицо, ОписаниеИдентификатора, Идентификаторы);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Расширим период выписки
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// В файле могут быть указаны номера счета как с БИК, так и без БИК.
	// В результате будет определено несколько выписок.
	// Объединим их.
	Для Каждого СчетВВыписке Из СчетаВВыписке Цикл
		
		Если СчетВВыписке.Значение.Количество() <> 2 Тогда
			// Объединить можем только один точный с одним неточным.
			Продолжить;
		КонецЕсли;
		
		ЧтоЗаменяем   = Неопределено;
		НаЧтоЗаменяем = Неопределено;
		Для Каждого ИдентификаторВыписки Из СчетВВыписке.Значение Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ИдентификаторВыписки.Ключ,
				УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если ОписаниеИдентификатора.Точный Тогда
				НаЧтоЗаменяем = ОписаниеИдентификатора;
			Иначе
				ЧтоЗаменяем   = ОписаниеИдентификатора;
			КонецЕсли;
					
		КонецЦикла;
		
		Если ЧтоЗаменяем = Неопределено Или НаЧтоЗаменяем = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаОбъединенная = Выписки[НаЧтоЗаменяем.Идентификатор];
		Если ВыпискаОбъединенная = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаКУдалению = Выписки[ЧтоЗаменяем.Идентификатор];
		Если ВыпискаКУдалению = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаЧтоЗаменяем.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		ТребуетсяУпорядочить = Ложь;
		
		КоличествоОпераций = ВыпискаКУдалению.Операции.Количество();
		Для НомерСКонца = 1 По КоличествоОпераций Цикл
			
			ИндексОперации = КоличествоОпераций - НомерСКонца;
			Операция = ВыпискаКУдалению.Операции[ИндексОперации];
			
			Если ВыпискаОбъединенная.Операции.Найти(Операция.Идентификатор, "Идентификатор") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Заменим на более точные идентификаторы счета, по которому выписка
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				ИндексИдентификатора = ИдентификаторыСтороны.Найти(ЧтоЗаменяем.Идентификатор);
				
				Если ИндексИдентификатора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторыСтороны[ИндексИдентификатора] = НаЧтоЗаменяем.Идентификатор;
				
			КонецЦикла;
			
			РасширитьПериод(ВыпискаОбъединенная.НачалоПериода, ВыпискаОбъединенная.КонецПериода, Операция.ДатаИсполнения);
			ЗаполнитьЗначенияСвойств(ВыпискаОбъединенная.Операции.Добавить(), Операция);
			ВыпискаКУдалению.Операции.Удалить(Операция);
			
			ТребуетсяУпорядочить = Истина; // Добавлением в конец нарушили порядок следования операций в файле
			
		КонецЦикла;
		
		Если ВыпискаКУдалению.Операции.Количество() = 0 Тогда
			Выписки.Удалить(ЧтоЗаменяем.Идентификатор);
			СчетВВыписке.Значение.Удалить(ЧтоЗаменяем.Идентификатор);
		КонецЕсли;
		
		Если ТребуетсяУпорядочить Тогда
			ВыпискаОбъединенная.Операции.Сортировать("ПорядковыйНомерВФайле");
		КонецЕсли;
		
	КонецЦикла;
	
	// Если операция внутри банка, то может быть не указан БИК в реквизитах корреспондирующего счета.
	// В таком случае попробуем дополнить идентификатор счета БИКом владельца счета.
	Для Каждого Выписка Из Выписки Цикл
		ОписаниеИдентификатораСчетаВыписки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Выписка.Ключ, УчастникиОпераций);
		Если ОписаниеИдентификатораСчетаВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОписаниеИдентификатораСчетаВыписки.Точный Тогда
			Продолжить;
		КонецЕсли;
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатораСчетаВыписки.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		Для Каждого Операция Из Выписка.Значение.Операции Цикл
			
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				
				Для Каждого Идентификатор Из ИдентификаторыСтороны Цикл
					
					ТочныйИдентификатор = ИдентификацияУчастниковБанковскихОпераций.ДополнитьИдентификаторПоНомеруБанковскогоСчета(
						Идентификатор,
						БИК,
						УчастникиОпераций);
					Если ТочныйИдентификатор <> Неопределено 
						И ИдентификаторыСтороны.Найти(ТочныйИдентификатор) = Неопределено Тогда
						ИдентификаторыСтороны.Добавить(ТочныйИдентификатор);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		
		НомерСчета = Остаток.РасчСчет;
		
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСчета = СчетаВВыписке[НомерСчета];
		Если ИдентификаторыСчета = Неопределено Тогда
			
			ИдентификаторВыписки = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
				УчастникиОпераций,
				НомерСчета,
				Неопределено);
			
			ИдентификаторыСчета = Новый Соответствие;
			ИдентификаторыСчета.Вставить(ИдентификаторВыписки);
			СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчета);
			
		КонецЕсли;
		
		Для Каждого ИдентификаторВыпискиКлючИЗначение Из ИдентификаторыСчета Цикл
		
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыпискиКлючИЗначение.Ключ);
			
			Если ЗначениеЗаполнено(Остаток.ДатаНачала) Тогда
				Сальдо = Выписка.Сальдо.Добавить();
				Сальдо.Дата  = Остаток.ДатаНачала;
				Сальдо.Сумма = Остаток.НачальныйОстаток;
			КонецЕсли;
			
			Сальдо = Выписка.Сальдо.Добавить();
			// Дата конца может быть не заполнена в файле.
			// В этом случае позже заменим пустую дату, на дату окончания выписки.
			Если ЗначениеЗаполнено(Остаток.ДатаКонца) Тогда
				Сальдо.Дата = КонецДня(Остаток.ДатаКонца) + 1;
			КонецЕсли;
			Сальдо.Сумма = Остаток.КонечныйОстаток;
		
			Выписка.ВсегоПоступило = Выписка.ВсегоПоступило + Остаток.ВсегоПоступило;
			Выписка.ВсегоСписано   = Выписка.ВсегоСписано   + Остаток.ВсегоСписано;
			
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаНачала);
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаКонца);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Выписка Из Выписки Цикл
		СтруктураВыписки = Выписка.Значение;
		Если НЕ СтруктураВыписки.Свойство("Сальдо") Тогда
			Продолжить;
		КонецЕсли;
		// Заменим пустую дату, на дату окончания выписки.
		Для Каждого СтрокаСальдо Из СтруктураВыписки.Сальдо.НайтиСтроки(Новый Структура("Дата", '00010101')) Цикл
			СтрокаСальдо.Дата = СтруктураВыписки.КонецПериода;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выписки;
	
КонецФункции

Функция РеквизитыСчетаИдентичны(РеквизитыПротивоположнойСтороны, РеквизитыНашейСтороны)
	
	Результат = Истина;
	
	Для Каждого ЭлементРеквизитовСчетаУчастника Из ОбменСБанкомВФормате1С.ЭлементыРеквизитовСчетаУчастника() Цикл
		РеквизитСчетаПротивоположнойСтороны =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПротивоположнойСтороны, ЭлементРеквизитовСчетаУчастника);
		РеквизитСчетаНашейСтороны =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыНашейСтороны, ЭлементРеквизитовСчетаУчастника);
		Если ЗначениеЗаполнено(РеквизитСчетаПротивоположнойСтороны)
			И ЗначениеЗаполнено(РеквизитСчетаНашейСтороны)
			И РеквизитСчетаПротивоположнойСтороны <> РеквизитСчетаНашейСтороны Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// "Плательщик" или "Получатель"
Функция СторонаКонтрагента(ПоступилоСписано)
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат "Плательщик";
	Иначе
		Возврат "Получатель";
	КонецЕсли;
	
КонецФункции

Функция НовыйПротоколГруппировкиВыписки()
	
	Протокол = Новый ТаблицаЗначений;
	Протокол.Колонки.Добавить("Идентификатор",   ТипИдентификатор());
	Протокол.Колонки.Добавить("КраткоеОписание", Новый ОписаниеТипов("Строка"));
	Протокол.Колонки.Добавить("ПолноеОписание",  Новый ОписаниеТипов("Строка"));
	Возврат Протокол;
	
КонецФункции

Процедура ДополнитьПротоколГруппировкиВыписки(Протокол, ДанныеИзБанка, ИдентификаторДокумента, ОписаниеПроблемы)
	
	Документ = ДанныеИзБанка.Документы.Найти(ИдентификаторДокумента, "Идентификатор");
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Массив;
	Если ЗначениеЗаполнено(Документ.Номер) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'номер %1'"), Документ.Номер));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Дата) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(Документ.Дата, "ДЛФ=D")));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Сумма) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'на сумму %1'"), Документ.Сумма));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'порядковый номер %1'"), Документ.Идентификатор));
	КонецЕсли;
	РеквизитыДокумента = СтрСоединить(РеквизитыДокумента, " ");
	
	ПолноеОписание = СтрШаблон(НСтр("ru = 'Пропущен документ %1. %2'"), РеквизитыДокумента, ОписаниеПроблемы);
	
	Запись = Протокол.Добавить();
	Запись.Идентификатор   = ИдентификаторДокумента;
	Запись.КраткоеОписание = ОписаниеПроблемы;
	Запись.ПолноеОписание  = ПолноеОписание;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция НовыйНастройкиОбменСБанком() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("СозданиеДокументов",            НовыйНастройкиСозданияДокументов());
	Настройки.Вставить("ЗаполнениеНовыхЭлементов",      Новый Соответствие); // Ключ - Тип ссылки; Значение - Структура, содержащая значения заполнения
	Настройки.Вставить("ЗагружатьВыпискуПоВсемСчетам",  Новый Соответствие); // Ключ: Настройка обмена; Значение - Булево
	Настройки.Вставить("Кодировка",                     Неопределено);       // Кодировка файла
	
	Возврат Настройки;
	
КонецФункции

// Заполняет Настройки переданными данными, обеспечивая целостность настроек.
//
// Параметры:
//  Настройки		 - см. НовыйНастройкиОбменСБанком()
//  ДанныеЗаполнения - см. НовыйНастройкиОбменСБанком(). Допускается передавать и другие значения (коллекции).
// 
// Возвращаемое значение:
//  Булево - Истина, если что-то заполнили; Ложь, если ДанныеЗаполнения пустые или не пригодны для заполнения.
//
Функция ЗаполнитьНастройкиОбменСБанком(Настройки, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Или ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтоТоЗаполнили = Ложь;
	
	Если ДанныеЗаполнения.Свойство("СозданиеДокументов")
		И ТипЗнч(ДанныеЗаполнения.СозданиеДокументов) = Тип("Соответствие") Тогда
		
		Для Каждого Настройка Из Настройки.СозданиеДокументов Цикл
			ЗначениеСохраненнойНастройки = ДанныеЗаполнения.СозданиеДокументов[Настройка.Ключ];
			Если ТипЗнч(ЗначениеСохраненнойНастройки) <> Тип("Структура")
				Или Не ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Настройка.Значение, ЗначениеСохраненнойНастройки);
			ЧтоТоЗаполнили = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеНовыхЭлементов")
		И ТипЗнч(ДанныеЗаполнения.ЗаполнениеНовыхЭлементов) = Тип("Соответствие") Тогда
		
		Для Каждого СохраненнаяНастройка Из ДанныеЗаполнения.ЗаполнениеНовыхЭлементов Цикл
			Если ТипЗнч(СохраненнаяНастройка.Значение) <> Тип("Структура") 
				Или Не ЗначениеЗаполнено(СохраненнаяНастройка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Настройки.ЗаполнениеНовыхЭлементов.Вставить(СохраненнаяНастройка.Ключ, СохраненнаяНастройка.Значение);
		КонецЦикла;
		
		ЧтоТоЗаполнили = Истина;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗагружатьВыпискуПоВсемСчетам")
		И ТипЗнч(ДанныеЗаполнения.ЗагружатьВыпискуПоВсемСчетам) = Тип("Соответствие") Тогда
		Для Каждого СохраненнаяНастройка Из ДанныеЗаполнения.ЗагружатьВыпискуПоВсемСчетам Цикл
			Настройки.ЗагружатьВыпискуПоВсемСчетам.Вставить(СохраненнаяНастройка.Ключ, СохраненнаяНастройка.Значение);
		КонецЦикла;
		
		ЧтоТоЗаполнили = Истина;
	КонецЕсли;
	
	Возврат ЧтоТоЗаполнили;
	
КонецФункции

Функция НовыйНастройкиСозданияДокументов()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"),   НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"), НовыйНастройкаСозданияДокументов());
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкаСозданияДокументов()
	
	Настройка = Новый Структура;
	Настройка.Вставить("ПроводитьДокумент", Истина);
	Возврат Настройка;
	
КонецФункции

Функция ЗначениеНастройкиСозданияДокументов(Настройки, Имя, ТипДокумента)
	
	Настройка = Настройки.СозданиеДокументов[ТипДокумента];
	Если Настройка = Неопределено Тогда
		Настройка = НовыйНастройкаСозданияДокументов();
	КонецЕсли;
	
	ЗначениеНастройки = Настройка[Имя];
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область ИдентификацияУчастниковОперации

Функция ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(УчастникиОпераций, ДанныеИзБанка)
	
	// Содержит идентификаторы участников операций, информация о которых есть в секции Документы данных из банка.
	ИдентификаторыУчастников = Новый ТаблицаЗначений;
	ИдентификаторыУчастников.Колонки.Добавить("Документ",       ТипИдентификатор()); // Идентификатор документа
	ИдентификаторыУчастников.Колонки.Добавить("Плательщик",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("ПлательщикСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ПолучательСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ТретьиЛица",     Новый ОписаниеТипов("Структура")); // Ключ - тип третьего лица; Значение - массив идентификаторов
	ИдентификаторыУчастников.Индексы.Добавить("Документ");
	
	Стороны = Новый Массив;
	Стороны.Добавить("Плательщик");// Порядок важен для УплатаНалогаТретьегоЛица
	Стороны.Добавить("Получатель");
	
	СоставныеЧастиНазванияБанка = СоставныеЧастиНазванияБанка();
	ЕстьРасчетыССамозанятыми = ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым");
	ФИОСамозанятых = Новый Массив;
	Если ЕстьРасчетыССамозанятыми Тогда
		ФИОСамозанятых = ВыплатыСамозанятым.ФИОСамозанятых();
	КонецЕсли;
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ИдентификаторыДокумента = ИдентификаторыУчастников.Добавить();
		ИдентификаторыДокумента.Документ = Документ.Идентификатор;
		
		Для Каждого Сторона Из Стороны Цикл
			
			Счет            = Документ[Сторона + "Счет"];
			ИНН             = Документ[Сторона + "ИНН"];
			ДругиеРеквизиты = Документ[Сторона + "Реквизиты"];
			
			ИдентификаторыУчастника = ИдентификаторыДокумента[Сторона];
			
			ИННПриведенный = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ИНН, "0");
			ЭтоИННЮридическогоЛица = ЗначениеЗаполнено(ИННПриведенный)
				И ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ИНН);
			
			// Разберем наименование
			Наименование = "";
			Если ДругиеРеквизиты.Свойство("Наименование") Тогда
				Наименование = ДругиеРеквизиты.Наименование;
				Если ПустаяСтрока(ИНН) Тогда
					Если СтрНачинаетсяС(Наименование, "000000000000") Тогда
						Наименование = СокрЛ(Сред(Наименование, 13));
					ИначеЕсли СтрНачинаетсяС(Наименование, "0") Тогда
						Наименование = СокрЛ(Сред(Наименование, 2));
					КонецЕсли;
				Иначе
					Если СтрНачинаетсяС(Наименование, ИНН) Тогда
						Наименование = СокрЛ(Сред(Наименование, СтрДлина(ИНН) + 1));
					ИначеЕсли Не ПустаяСтрока(ИННПриведенный) И СтрНачинаетсяС(Наименование, ИННПриведенный) Тогда
						Наименование = СокрЛ(Сред(Наименование, СтрДлина(ИННПриведенный) + 1));
					КонецЕсли;
				КонецЕсли;
				
				Если СтрНачинаетсяС(Наименование, ".") Тогда
					Наименование = СокрЛ(Сред(Наименование, 2));
				ИначеЕсли СтрНачинаетсяС(Наименование, ",") Тогда
					Наименование = СокрЛ(Сред(Наименование, 2));
				ИначеЕсли СтрНачинаетсяС(Наименование, ";") Тогда
					Наименование = СокрЛ(Сред(Наименование, 2));
				КонецЕсли;
				
				Наименование = СтрЗаменить(Наименование, "|", " ");
				
				ДругиеРеквизиты.Наименование = Наименование;
			КонецЕсли;
			
			СчетКонтрагента = Счет;
			БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(СчетКонтрагента);
			ЭтоСчетПереводовЧерезСБП = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(БалансовыйСчет);
			ЭтоСчетФизЛица = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет)
				Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет);
			ЭтоОбязательстваПоПрочимОперациямСМЗ = ЕстьРасчетыССамозанятыми
				И БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(БалансовыйСчет);
			ЭтоВыплатаПоРееструСамозанятому = ЕстьРасчетыССамозанятыми
				И (ЭтоСчетФизЛица Или БанковскиеПравила.ЭтоСчетИндивидуальногоПредпринимателя(БалансовыйСчет));
			Если ЭтоСчетПереводовЧерезСБП Тогда
				Операция = Новый Структура("НазначениеПлатежа, СловаНазначениеПлатежа, РазделителиИзНазначения");
				Операция.НазначениеПлатежа = Документ.НазначениеПлатежа;
				НазначениеПлатежаУказываетНаЭквайринг = НазначениеПлатежаУказываетНаЭквайринг(Операция);
				НазначениеПлатежаУказываетНаСБП = НазначениеПлатежаУказываетНаСБП(Операция);
				
				ЭтоСБП = НазначениеПлатежаУказываетНаСБП Или Не НазначениеПлатежаУказываетНаЭквайринг;
				Если Не ЭтоСБП Тогда
					СчетКонтрагента = "";
				КонецЕсли;
			ИначеЕсли ЭтоОбязательстваПоПрочимОперациямСМЗ Тогда
				Операция = Новый Структура("НазначениеПлатежа, СловаНазначениеПлатежа, РазделителиИзНазначения");
				Операция.НазначениеПлатежа = Документ.НазначениеПлатежа;
				ЭтоУдержаниеНПДСамозанятого = НазначениеПлатежаУказываетНаУдержаниеНПДСамозанятого(Операция);
				Если ЭтоУдержаниеНПДСамозанятого Тогда
					ФИОСамозанятого = ФИОСамозанятогоИзНазначенияПлатежа(Операция.НазначениеПлатежа, ФИОСамозанятых);
					Если ФИОСамозанятого <> Неопределено Тогда
						Наименование = СтрШаблон(НСтр("ru = '%1//%2'"),
							Наименование,
							ФИОСамозанятого);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЭтоВыплатаПоРееструСамозанятому Тогда
				Операция = Новый Структура("НазначениеПлатежа, СловаНазначениеПлатежа, РазделителиИзНазначения, Очередность");
				ЗаполнитьЗначенияСвойств(Операция, Документ);
				Операция.Вставить("ПолучательРеквизиты", ОбщегоНазначения.СкопироватьРекурсивно(Документ.ПолучательРеквизиты));
				Операция.Вставить("БалансовыйСчет", БалансовыйСчет);
				Операция.Вставить("ШифрОперации",   Документ.ВидОплаты);
				
				ЭтоВыплатаПоРееструСамозанятому = ВыплатаПоРееструСамозанятым(Операция);
			КонецЕсли;
			
			Если Не ЭтоВыплатаПоРееструСамозанятому
				И Сторона = "Получатель" И ЭтоСчетФизЛица И ЭтоИННЮридическогоЛица Тогда
				Если ЭтоНазваниеБанка(Наименование, СоставныеЧастиНазванияБанка) Тогда
					СчетКонтрагента = "";
				КонецЕсли;
			КонецЕсли;
			
			ИдентификаторыФизическогоЛица = ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН, СчетКонтрагента);
			Если ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо Тогда
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
					УчастникиОпераций,
					ИдентификаторыФизическогоЛица.Наименование);
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
				
				Если ИдентификаторыФизическогоЛица.ВалидныйИННФизическогоЛица Тогда
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, ИНН, "");
					Если Идентификатор <> Неопределено Тогда
						ИдентификаторыУчастника.Добавить(Идентификатор);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// TXID (Налоговый идентификатор)
				КПП = ?(ДругиеРеквизиты.Свойство("КПП"), ДругиеРеквизиты.КПП, "");
				КППСоответствуетТребованиямФормата =
					ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямФорматаКПП(КПП, Истина);
				Если Не КППСоответствуетТребованиямФормата.СоответствуетТребованиям Тогда
					КПП = "";
				КонецЕсли;
				
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, ИНН, КПП);
				
				Если ЭтоВыплатаПоРееструСамозанятому Тогда
					ТолькоРазрешенныеСимволы = СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
						СтрЗаменить(Наименование, " ", ""),, "-");
					Если Не ПустаяСтрока(Наименование) И ТолькоРазрешенныеСимволы
						И Не ЭтоНазваниеБанка(Наименование, СоставныеЧастиНазванияБанка) Тогда
						Если ФИОСамозанятых.Найти(Наименование) = Неопределено Тогда
							ФИОСамозанятых.Добавить(Наименование);
						КонецЕсли;
						
						ТребованияИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, Ложь);
						ЭтоИННФизЛица = Не ТребованияИНН.ЭтоЮрЛицо И ТребованияИНН.СоответствуетТребованиям;
						Если Не ЭтоИННФизЛица Тогда
							// В выплате самозанятому по реестру не заполнен или указан невалидный ИНН физ.лица,
							// а значит идентификатор TXID не заполнен, или заполнен некорректно,
							// поэтому сформируем идентификатор PNNM по ФИО.
							Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
								УчастникиОпераций,
								Наименование);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			ИдентификаторВладельца = Идентификатор;
			
			// BBAN (Basic Bank Account Number) или IBAN (International Bank Account Number)
			БИК = ?(ДругиеРеквизиты.Свойство("БИК"), ДругиеРеквизиты.БИК, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
				УчастникиОпераций,
				Счет,
				БИК);
			БалансовыйСчет = "";
			ИспользуетсяБанкДляРасчетов = Ложь;
			Если Идентификатор = Неопределено Тогда
				// Попробуем BBAN
				// Расчеты могут вестись через корреспондентский счет, открытый в другой кредитной организации
				ИспользуетсяБанкДляРасчетов = (ДругиеРеквизиты.Свойство("РасчСчет")
					И Не ПустаяСтрока(ДругиеРеквизиты.РасчСчет)
					И ДругиеРеквизиты.РасчСчет <> Счет);
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
					УчастникиОпераций,
					Счет,
					БИК,
					ИспользуетсяБанкДляРасчетов,
					ИдентификаторВладельца);
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					ОписаниеИдентификатораBBAN = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
					Если ОписаниеИдентификатораBBAN <> Неопределено Тогда
						ОписаниеИдентификатораBBAN.Состав.Свойство("БалансовыйСчет", БалансовыйСчет);
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(БалансовыйСчет) И ПустаяСтрока(БИК) И ИспользуетсяБанкДляРасчетов Тогда
					БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(Счет);
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(БалансовыйСчет)
				И БанковскиеПравила.ЭтоКорректныйСчетБанкаРФ(Счет, БИК)
					Или ПустаяСтрока(БИК) И ИспользуетсяБанкДляРасчетов И БанковскиеПравила.ЭтоРублевыйСчет(Счет) Тогда
				СчетПозволяетИдентифицироватьКонтрагента =
					СчетПозволяетИдентифицироватьКонтрагента(Счет, ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо);
			Иначе
				СчетПозволяетИдентифицироватьКонтрагента =
					СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо);
			КонецЕсли;
			
			// Здесь Идентификатор может быть как BBAN, так и IBAN
			Если Идентификатор <> Неопределено
				И (СчетПозволяетИдентифицироватьКонтрагента Или БанковскиеПравила.ЭтоКазначейскийСчет(Счет)) Тогда
				ИдентификаторыУчастника.Добавить(Идентификатор);
				ИдентификаторыДокумента[Сторона + "Счет"] = Идентификатор;
			КонецЕсли;
			
			Если Не ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо // Это может быть и физическое лицо, но из наименования это не удалось определить
				И ЗначениеЗаполнено(БалансовыйСчет) Тогда
				
				Если БанковскиеПравила.ЭтоСчетВнутрибанковскихОпераций(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(БалансовыйСчет) Тогда
					
					// Банк
					
					Если Не ЗначениеЗаполнено(ИНН) Тогда
					
						// BKNM (Наименование банка)
						Банк = ?(ДругиеРеквизиты.Свойство("Банк"), ДругиеРеквизиты.Банк, "");
						Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНаименованиюБанка(УчастникиОпераций, Банк, Наименование);
						
						Если Идентификатор <> Неопределено Тогда
							ИдентификаторыУчастника.Добавить(Идентификатор);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли (БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет))
					И Не ЭтоНазваниеБанка(Наименование, СоставныеЧастиНазванияБанка) Тогда
					
					// Физическое лицо
					
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
						УчастникиОпераций,
						Наименование);
					Если Идентификатор <> Неопределено Тогда
						ИдентификаторыУчастника.Добавить(Идентификатор);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// TXZN (Единица административно-территориального деления, к которой относится налоговый платеж) Национальная практика: ОКАТО (ОКТМО)
			Если Сторона = "Получатель"
				И Документ.РеквизитыПлатежаВБюджет.Свойство("ОКАТО")
				И ПлатежиВБюджетКлиентСервер.ЭтоКодОКТМО(Документ.РеквизитыПлатежаВБюджет.ОКАТО) Тогда
				
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоОКТМО(УчастникиОпераций, Документ.РеквизитыПлатежаВБюджет.ОКАТО);
				
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			// Здесь же может быть описано получение идентификаторов по другим данным.
			// Например, получателя можно идентифицировать по номеру карты, указанному в назначении платежа,
			// номеру счета физ. лица, указанному в наименовании или назначении платежа и другим признакам.
			
		КонецЦикла;
		
		// Третьи стороны
		// TXID (Налоговый идентификатор)
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
			
			Налогоплательщик = Документ.РеквизитыПлатежаВБюджет.Налогоплательщик;
			КПП = ?(Налогоплательщик.Свойство("КПП"), Налогоплательщик.КПП, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, Налогоплательщик.ИНН, КПП);
			
			ИдентификаторыДокумента.ТретьиЛица.Вставить("Налогоплательщик", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
			
		КонецЕсли;
		
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
			
			Должник = Документ.РеквизитыПлатежаВБюджет.Должник;
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, Должник.ИНН, "");
			
			ИдентификаторыДокумента.ТретьиЛица.Вставить("Должник", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
			
		КонецЕсли;
	КонецЦикла;
	
	// Кроме секции Документы в ДанныеИзБанка идентификаторы содержатся в заголовочной части.
	// Их также следует поместить в УчастникиОпераций, чтобы найти для них соответствия в информационной базе.
	// УСЛОВИЯ
	Для Каждого НомерБанковскогоСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			НомерБанковскогоСчета,
			Неопределено);
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого ДанныеОбОстатках Из ДанныеИзБанка.Остатки Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			ДанныеОбОстатках.РасчСчет,
			Неопределено);
	КонецЦикла;
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

Функция СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, ЭтоФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(БалансовыйСчет) Тогда
		// Предполагаем, что это IBAN - он всегда позволяет идентифицировать контрагента
		Возврат Истина;
	КонецЕсли;
	
	Если Не БанковскиеПравила.СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет)
		И Не БанковскиеПравила.ЭтоСчетЮридическогоЛица(БалансовыйСчет) // Требуется учитывать счета гос.органов.
		И Не БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(БалансовыйСчет) Тогда // Требуется учитывать, если платеж не от физ.лица.
		Возврат Ложь;
	КонецЕсли;
	
	// Идентификацию контрагента по указанному в выписке номеру счета плательщика не производим,
	// если это счет незавершенных расчетов банка,
	// а из наименования плательщика смогли выделить наименование физлица
	// (тогда это внутренний счет банка, а не счет контрагента)
	Если ЭтоФизическоеЛицо И БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(БалансовыйСчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Приложение 1 к Положению Банка России от 19 июня 2012 года N 383-П
//"О правилах осуществления перевода денежных средств"
// При переводе денежных средств по банковскому счету ... 
// в реквизите "Плательщик" после Ф.И.О. физического лица ...
// - адрес места жительства (регистрации) или места пребывания.
// Для выделения информации об адресе места нахождения,
// адресе места жительства (регистрации) или места пребывания до и после адреса используется символ "//".
// При переводе денежных средств без открытия банковского счета указываются полное или сокращенное наименование кредитной организации, 
// филиала кредитной организации - отправителя распоряжения и информация о плательщике - физическом лице
// Для выделения информации о плательщике - физическом лице используется символ "//".
// После указания установленной настоящей графой соответствующей информации в реквизите "Плательщик" 
// может указываться в соответствии с законодательством или договором, 
// в том числе договором с получателем средств, договором доверительного управления, 
// дополнительная информация, обеспечивающая возможность установить сведения о плательщике, 
// при этом для их выделения используется символ "//"
// <конец цитаты из нормативного документа>
//
// На практике "//" используются для указания информации о физическом лице.
// Хотя, в теории "//" могут использоваться и для возможности установить сведения о других плательщиках,
// но о такой практике неизвестно.
// Поддерживаем варианты:
// - ИНН нет + "//" - отделен адрес от наименования (имени)
// - ИНН 12 символов + "//" - отделен адрес от наименования (имени)
// - ИНН 10 символов + "//" - отделено имя от названия банка


Функция УдалитьТекстПослеРазделителя(Наименование)
	
	Разделитель = "//";
	ПозицияРазделителя = СтрНайти(Наименование, Разделитель);
	Если ПозицияРазделителя > 0 Тогда
		Наименование = СокрП(Сред(Наименование, 1, ПозицияРазделителя - 1));
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН, Счет)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоФизическоеЛицо",           Ложь);
	Результат.Вставить("Наименование",                Наименование);
	Результат.Вставить("Адрес",                       "");
	Результат.Вставить("ИННИдентифицируетПосредника", Ложь);
	Результат.Вставить("ВалидныйИННФизическогоЛица",  Ложь);
	Результат.Вставить("ИННПустой",                   Ложь);
	
	СоставныеЧастиНазванияБанка = СоставныеЧастиНазванияБанка();
	
	РазделительСлеши = "//";
	
	ИННПриведенный = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ИНН, "0");
	ЭтоИННЮридическогоЛица = ЗначениеЗаполнено(ИННПриведенный)
		И ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ИНН);
	
	БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(Счет);
	ЭтоСчетФизЛица = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет);
	ЭтоПереводЧерезСБП = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(БалансовыйСчет);
	ЭтоВыплатаЧерезСБП = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(БалансовыйСчет);
	ЭтоВыплатаЧерезЭквайринг = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(БалансовыйСчет);
	
	СловоИННСПробелом = НСтр("ru = 'ИНН'") + " ";
	РазделительРС = НСтр("ru = 'р/с'");
	Если СтрНачинаетсяС(СокрЛ(Наименование), СловоИННСПробелом) Тогда
		Наименование = СокрЛ(Сред(Наименование, 4));
	КонецЕсли;
	
	Разделитель = РазделительСлеши;
	Если СтрНайти(Наименование, Разделитель) = 0 Тогда
		Если ЭтоИННЮридическогоЛица И ЭтоСчетФизЛица Тогда
			Результат.ЭтоФизическоеЛицо = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИНН) Тогда
			Разделитель = РазделительРС;
		КонецЕсли;
		
		Если СтрНайти(Наименование, Разделитель) = 0 Тогда
			Если ЭтоПереводЧерезСБП Тогда
				Разделитель = РазделительСлеши;
				Наименование = Разделитель + Наименование;
			Иначе
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Здесь не следует использовать СтрРазделить, потому что она не умеет работать с разделителями,
	// состоящими из нескольких символов.
	ЭлементыНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Наименование, Разделитель, Ложь, Истина);
	
	Если Не ЗначениеЗаполнено(ЭлементыНаименования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для инд = 0 По ЭлементыНаименования.ВГраница() Цикл
		Если СтрЗаканчиваетсяНа(ЭлементыНаименования[инд], ",") Тогда
			ЭлементыНаименования[инд] = Сред(ЭлементыНаименования[инд], 1, СтрДлина(ЭлементыНаименования[инд]) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПереводЧерезСБП И СтрНачинаетсяС(Наименование, РазделительСлеши) Тогда
		Наименование = Сред(Наименование, СтрДлина(РазделительСлеши) + 1);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИНН)
		И ЭтоИННЮридическогоЛица
		И СтрНайти(ЭлементыНаименования[0], ",") > 0 Тогда
		// Это не похоже на имя физического лица. Возможно, это как раз тот случай,
		// когда в наименовании юридического лица указали адрес.
		Результат.Наименование = ЭлементыНаименования[0];
		Если ЭлементыНаименования.Количество() > 1 Тогда
			Результат.Адрес = ЭлементыНаименования[1];
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ИНН) Тогда
		СоответствиеТребованиямИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
			ИНН, Ложь);
		Результат.ВалидныйИННФизическогоЛица = СоответствиеТребованиямИНН.СоответствуетТребованиям;
	ИначеЕсли ПустаяСтрока(ИНН) Тогда
		Результат.ИННПустой = Истина;
	Иначе
		Результат.ИННИдентифицируетПосредника = Истина;
	КонецЕсли;
	
	Если ЭлементыНаименования.Количество() = 1 Тогда
		// Дальнейшие проверки не имееют смысла, если в тексте не были найдены разделители.
		Возврат Результат;
	КонецЕсли;
	
	// Текст Получателя разбили на фразы разделенные "//".
	// Если получилась одна фраза (в тексте нет "//") - значит это не платеж от физ.лиц.
	// Если фраз несколько, то пытаемся выделить из них ФИО.
	// ФИО должно отвечать следующим требованиям:
	//  - там могут быть только кирилические символы и "-";
	//  - если после первых "//" идут сразу еще "//" - это говорит о том, что ФИО должно было быть, но не указано.
	// Если условия по ФИО не выполняются, то считаем что это не платеж от физ.лица.
	
	ТолькоРазрешенныеСимволы = Новый Массив;
	Для Каждого ЭлементНаименования Из ЭлементыНаименования Цикл
		ТолькоРазрешенныеСимволы.Добавить(СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
			СтрЗаменить(ЭлементНаименования, " ", ""),, "-"));
	КонецЦикла;
	
	Если ПустаяСтрока(ЭлементыНаименования[1]) // ФИО физ.лица не указано, в наименовании идут 4 слеша подряд - "////".
		Или НЕ ТолькоРазрешенныеСимволы[0] И НЕ ТолькоРазрешенныеСимволы[1] Тогда
		// Не можем найти ФИО физического лица
		Возврат Результат;
	КонецЕсли;
	
	// Возможные варианты:
	// - Наименование посредника // ФИО физ.лица // адрес и прочие элементы
	// - ФИО физ.лица // адрес и прочие элементы
	Если (Результат.ИННПустой Или Результат.ИННИдентифицируетПосредника) И Разделитель <> РазделительРС Тогда
		// Наименование посредника скорее указано
		ПроверяемСИндекса = 1;
	Иначе
		// Наименование посредника скорее не указано
		ПроверяемСИндекса = 0;
	КонецЕсли;
	
	Если ЭтоВыплатаЧерезСБП Или ЭтоВыплатаЧерезЭквайринг Тогда
		Для ИндексФИО = ПроверяемСИндекса По ЭлементыНаименования.ВГраница() Цикл
			Если Не ПустаяСтрока(ЭлементыНаименования[ИндексФИО]) И ТолькоРазрешенныеСимволы[ИндексФИО]
				И Не ЭтоНазваниеБанка(ЭлементыНаименования[ИндексФИО], СоставныеЧастиНазванияБанка) Тогда
				Результат.ЭтоФизическоеЛицо = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Индекс = 0 По 1 Цикл
			ИндексФИО = Макс(ПроверяемСИндекса - Индекс, Индекс - ПроверяемСИндекса);
			Если Не ПустаяСтрока(ЭлементыНаименования[ИндексФИО]) И ТолькоРазрешенныеСимволы[ИндексФИО]
				И Не ЭтоНазваниеБанка(ЭлементыНаименования[ИндексФИО], СоставныеЧастиНазванияБанка) Тогда
				Результат.ЭтоФизическоеЛицо = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Результат.ЭтоФизическоеЛицо Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлементыНаименования.ВГраница() >= ИндексФИО Тогда
		Результат.Наименование = ЭлементыНаименования[ИндексФИО];
	КонецЕсли;
	
	ИндексАдреса = ИндексФИО + 1;
	Если ЭлементыНаименования.ВГраница() >= ИндексАдреса Тогда
		Результат.Адрес = ЭлементыНаименования[ИндексАдреса];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНазваниеБанка(ТекстПлательщика, СоставныеЧастиНазванияБанка)
	
	ЧастиНаименования = СтрРазделить(ТекстПлательщика, " ", Ложь);
	Для каждого Слово Из ЧастиНаименования Цикл
		СловоВВерхнемРегистре = ВРег(Слово);
		Если СоставныеЧастиНазванияБанка.ТочноеСоответствие[СловоВВерхнемРегистре] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из СоставныеЧастиНазванияБанка.НачалоСлова Цикл
			Если СтрНачинаетсяС(СловоВВерхнемРегистре, КлючИЗначение.Ключ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СоставныеЧастиНазванияБанка.КонецСлова Цикл
			Если СтрЗаканчиваетсяНа(СловоВВерхнемРегистре, КлючИЗначение.Ключ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СоставныеЧастиНазванияБанка()
	
	Результат = Новый Структура("ТочноеСоответствие, НачалоСлова, КонецСлова");
	
	ТочноеСоответствие = Новый Соответствие;
	ТочноеСоответствие.Вставить("ОАО",  Истина); // Открытое акционерное общество
	ТочноеСоответствие.Вставить("ЗАО",  Истина); // Закрытое акционерное общество
	ТочноеСоответствие.Вставить("ПАО",  Истина); // Публичное акционерное общество
	ТочноеСоответствие.Вставить("ООО",  Истина); // Общество с ограниченной ответственностью
	ТочноеСоответствие.Вставить("АО",   Истина); // Акционерное общество
	ТочноеСоответствие.Вставить("АКБ",  Истина); // Акционерный коммерческий банк
	ТочноеСоответствие.Вставить("ФКБ",  Истина); // Филиал коммерческого банка
	ТочноеСоответствие.Вставить("ФАКБ", Истина); // Филиал акционерного коммерческого банка
	ТочноеСоответствие.Вставить("КБ",   Истина); // Коммерческий банк
	ТочноеСоответствие.Вставить("КИБ",  Истина); // Коммерческий инвестиционный банк
	ТочноеСоответствие.Вставить("НКО",  Истина); // Небанковская кредитная организация
	ТочноеСоответствие.Вставить("РНКО", Истина); // Расчетная небанковская кредитная организация
	ТочноеСоответствие.Вставить("НДКО", Истина); // Небанковская депозитно-кредитная организация
	ТочноеСоответствие.Вставить("РКЦ",  Истина); // Расчетно-кассовый центр
	ТочноеСоответствие.Вставить("УФК",  Истина); // Управление федеральным казначейством
	ТочноеСоответствие.Вставить("Ф-Л",  Истина); // Филиал
	ТочноеСоответствие.Вставить("БАНК", Истина);
	ТочноеСоответствие.Вставить("БАНКА",  Истина);
	ТочноеСоответствие.Вставить("ФИЛИАЛ", Истина);
	ТочноеСоответствие.Вставить("ОТДЕЛЕНИЕ", Истина);
	
	НачалоСлова = Новый Соответствие;
	НачалоСлова.Вставить("Ф-Л",      Истина);
	НачалоСлова.Вставить("ФИЛИАЛ",   Истина);
	НачалоСлова.Вставить("ОТДЕЛЕНИ", Истина);
	НачалоСлова.Вставить("КРЕДИ",    Истина);
	
	КонецСлова = Новый Соответствие;
	КонецСлова.Вставить("БАНКА",  Истина);
	КонецСлова.Вставить("БАНК",   Истина);
	КонецСлова.Вставить("КРЕДИТ", Истина);
	
	Результат.ТочноеСоответствие = ТочноеСоответствие;
	Результат.НачалоСлова = НачалоСлова;
	Результат.КонецСлова  = КонецСлова;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеХозяйственныхОпераций

Функция НовыйРаспознаннаяВыписка(Идентификатор, УчастникиОпераций)
	
	РаспознаннаяВыписка = Новый Структура;
	РаспознаннаяВыписка.Вставить("Идентификатор",  Идентификатор);
	РаспознаннаяВыписка.Вставить("ВладелецСчета",  НовыйОписаниеВладельцаСчета(Идентификатор, УчастникиОпераций));
	РаспознаннаяВыписка.Вставить("Операции",       НовыйРаспознанныеОперации());
	РаспознаннаяВыписка.Вставить("Предупреждения", НовыйПредупрежденияПриРаспознавании());
	
	Возврат РаспознаннаяВыписка;
	
КонецФункции

Функция НовыйРаспознанныеОперации()
	
	РаспознанныеОперации = Новый ТаблицаЗначений;
	РаспознанныеОперации.Колонки.Добавить("Идентификатор",      ТипИдентификатор());
	РаспознанныеОперации.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	РаспознанныеОперации.Колонки.Добавить("Ссылка",             ОписаниеТиповДокументыИсполнения());
	РаспознанныеОперации.Колонки.Добавить("ХозяйственнаяОперация"); // См. НовыйХозяйственнаяОперация()
	РаспознанныеОперации.Колонки.Добавить("Предупреждения"); // См. НовыйПредупрежденияПриРаспознавании()
	РаспознанныеОперации.Индексы.Добавить("Идентификатор");
	
	Возврат РаспознанныеОперации;
	
КонецФункции

Функция ОписаниеТиповДокументыИсполнения()
	Возврат Новый ОписаниеТипов("ДокументСсылка.СписаниеСРасчетногоСчета,ДокументСсылка.ПоступлениеНаРасчетныйСчет");
КонецФункции

Функция ХозяйственнаяОперация(Параметры,
							  ПравилаОпределенияХозяйственныхОпераций,
							  ВыполнитьПравилоОбязательно = Ложь,
							  ПроверитьПрименимостьПравила = Истина)
	
	ДежурноеПравило = Неопределено; // Одно из правил выполним обязательно. Если не найдем ничего лучше, то последнее, прошедшее обязательные проверки.
	
	Для Каждого Правило Из ПравилаОпределенияХозяйственныхОпераций Цикл
		
		// Обязательные проверки, внешние по отношению к правилу (общие для всех правил)
		Если Правило.ПоступилоСписано <> Параметры.Операция.ПоступилоСписано Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(
			Параметры, Правило, ПроверитьПрименимостьПравила);
		
		Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
			
			Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
			
		Иначе
			
			ДежурноеПравило = Правило;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Все правила сообщили, что операции они не соответствуют.
	Если Не ВыполнитьПравилоОбязательно Или ДежурноеПравило = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выполним дежурное правило
	РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, ДежурноеПравило, Ложь);
	
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
		
		Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
		
	Иначе
		Возврат Неопределено; // Ничего не нашли
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, Правило, ПроверитьПрименимостьПравила)
	
	Параметры.Правило                      = Правило;
	Параметры.ПроверитьПрименимостьПравила = ПроверитьПрименимостьПравила;
	Параметры.ПротоколыВыбораСсылок.Очистить();
	
	Если Правило.ПоступилоСписано = "Поступило" Тогда
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияПоступило(Параметры);
	Иначе
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияСписано(Параметры);
	КонецЕсли;
	
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
		
		УстановитьПоказателиРасчетов(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьПоказателиНДС(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьБанковскийСчетКонтрагента(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьКодВалютнойОперации(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		
		Если Не РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
			УстановитьСтатьюДвиженияДенежныхСредств(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		// Для ссылок на новые объекты, установленных в ХозяйственнаяОперация, дозаполним из выписки значения реквизитов
		ЗаполнитьРеквизитыНовыхОбъектов(
			Параметры.УчастникиОпераций,
			РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация,
			Параметры.Операция,
			Параметры.ИсточникиСсылок,
			Параметры.ВладелецСчета,
			Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
		
	КонецЕсли;
	
	Возврат РезультатОпределенияХозяйственнойОперации;
	
КонецФункции

Функция НайтиПоИдентификатору(Коллекция, Идентификатор) Экспорт
	
	Элемент = Коллекция.Найти(Идентификатор, "Идентификатор");
	Если Элемент = Неопределено Тогда
		Элемент = Коллекция.Добавить();
		Элемент.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОперацияВыписки(Выписки, ИдентификаторВыписки, ИдентификаторОперации)
	
	Выписка = Выписки[ИдентификаторВыписки];
	Если Выписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = Выписка.Операции.Найти(ИдентификаторОперации, "Идентификатор");
	Если Операция = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция НовыйРезультатОпределенияХозяйственнойОперации(Определена = Ложь, Правило = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Определена",            Определена);
	Результат.Вставить("ХозяйственнаяОперация", Неопределено); // Может быть инициализирована ниже
	
	Если Определена Тогда
		Результат.ХозяйственнаяОперация = НовыйХозяйственнаяОперация();
		Если Правило <> Неопределено И ЗначениеЗаполнено(Правило.ОсновнойВидОперации) Тогда
			Результат.ХозяйственнаяОперация.Вставить("ВидОперацииДокумента", Правило.ОсновнойВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйХозяйственнаяОперация()
	
	Возврат Новый Структура;
	
КонецФункции

Функция НовыйПараметрыОпределенияХозяйственнойОперации()
	
	Параметры = Новый Структура;
	// Коллекции дополняются в ходе распознавания:
	Параметры.Вставить("УчастникиОпераций");             // См. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
	// Значения одинаковые для всех операций в выписке:
	Параметры.Вставить("ВладелецСчета");                 // См. НовыйОписаниеВладельцаСчета()
	Параметры.Вставить("КешОбщихПараметров",                  НовыйКешОбщихПараметров());
	// Значения следующих параметров заполняются (меняются) для каждой обрабатываемой операции
	// - См. ЗаполнитьПараметрыОпределенияХозяйственнойОперации()
	Параметры.Вставить("Операция",                            Неопределено);// Ссылка на операцию
	Параметры.Вставить("СторонаКонтрагента",                  ""); // "Плательщик" или "Получатель"
	Параметры.Вставить("ПлательщикЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Параметры.Вставить("ПлательщикКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("ПолучательКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("КешПроверенныхСвойствПравил",         Новый Структура);
	// Значения следующих параметров заполняются (меняются, модифицируются) при применении разных правил к одной операции
	// - для каждого правила присваиваются новые значения
	Параметры.Вставить("Правило",                             Неопределено); // Ссылка на строку таблицы НовыйПравилаОпределенияХозяйственныхОпераций() или Неопределено
	Параметры.Вставить("ПроверитьПрименимостьПравила",        Истина); // Истина означает, что Правило должно проверить, подходит ли оно для конкретной операции. Ложь означает, что правило следует выполнить, несмотря на условия (проверки), которые оно содержит. Например, если такая проверка уже выполнена с учетом вида операции, заданному пользователем явно.
	Параметры.Вставить("ПротоколыВыбораСсылок",               Новый Структура); // Ключ - имя свойства хозяйственной операции; Значение - см. НовыйПротоколВыбораСсылок()
	// - коллекция может дополняться
	Параметры.Вставить("ИсточникиСсылок",                     Новый Соответствие); // Ключ - ссылка, наденная при распознавании операции; Значение - сторона операции, к которой относится ссылка ("Плательщик" или "Получатель")
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция)
	
	Параметры.Операция           = Операция;
	
	Параметры.СторонаКонтрагента = СторонаКонтрагента(Операция.ПоступилоСписано); // "Плательщик" или "Получатель"
	
	// У каждой операции свои наборы идентификаторов, поэтому следует сбросить кеши
	Параметры.ПлательщикКешИдентификаторов = Неопределено;
	Параметры.ПолучательКешИдентификаторов = Неопределено;
	Параметры.КешПроверенныхСвойствПравил  = Новый Структура;
	
	Параметры.ПлательщикЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка();
	
	// Инициализируем параметры, значения которых меняются в ходе выполнения правил
	Параметры.Правило                      = Неопределено;
	Параметры.ПроверитьПрименимостьПравила = Истина;
	Параметры.ИсточникиСсылок              = Новый Соответствие;
	
КонецПроцедуры

Функция ПравилаОпределенияХозяйственныхОпераций(ВидОперации = Неопределено)
	
	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
	
	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций, ВидОперации);
	
	Возврат ПравилаОпределенияХозяйственныхОпераций;
	
КонецФункции

Функция НовыйПравилаОпределенияХозяйственныхОпераций()
	
	ТипВидыОпераций = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств, ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств");
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Имя",                 Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПоступилоСписано",    ТипПоступилоСписано());
	Правила.Колонки.Добавить("ОсновнойВидОперации", ТипВидыОпераций);
	Правила.Колонки.Добавить("ОсновнаяСтатьяДДС",   Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Возврат Правила;
	
КонецФункции

Функция НовыйОписаниеВладельцаСчета(ИдентификаторВыписки, УчастникиОпераций)
	
	ОписаниеВладельцаСчета = Новый Структура;
	ОписаниеВладельцаСчета.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ФИОИП",                       "");
	ОписаниеВладельцаСчета.Вставить("БанковскийСчет",              Справочники.БанковскиеСчета.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("НомерБанковскогоСчета",       "");
	ОписаниеВладельцаСчета.Вставить("КоличествоСчетовОрганизации", 0);
	ОписаниеВладельцаСчета.Вставить("Подразделение",               Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ЮридическоеФизическоеЛицо",   Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ВалютаСчета",                 Справочники.Валюты.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("БИК",                        "");
	ОписаниеВладельцаСчета.Вставить("ИПИспользуетТрудНаемныхРаботников", Ложь);
	ОписаниеВладельцаСчета.Вставить("СчетКорпоративныхРасчетов",  Ложь);
	ОписаниеВладельцаСчета.Вставить("ЦифровойКошелек", Справочники.БанковскиеСчета.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("СчетБанк", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("КорпоративныеКартыПодотчетныхЛиц", Новый Соответствие); // Ключ - номер карты; Значение - физ.лицо
	ОписаниеВладельцаСчета.Вставить("УчредителиОрганизации", Новый ТаблицаЗначений);
	ОписаниеВладельцаСчета.Вставить("ПротоколыВыбораСсылок", Новый Структура); // Ключ - имя свойств описания; Значение - см. НовыйПротоколВыбораСсылок()
	ОписаниеВладельцаСчета.Вставить("ЕстьНеоплаченныеРеестрыСамозанятых", Ложь);
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("Организация",    ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("БанковскийСчет", ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВыписки);
	
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
	ОписаниеОрганизации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Организация);
	Если ОписаниеОрганизации = Неопределено Тогда
		Отбор = Новый Структура("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
		ОписаниеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			Идентификаторы,
			УчастникиОпераций,
			Отбор);
		Если ОписаниеСчета = Неопределено Тогда
			Возврат ОписаниеВладельцаСчета;
		Иначе
			Организация = ОписаниеСчета.ОписаниеСсылки.Владелец;
			Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
				Возврат ОписаниеВладельцаСчета;
			КонецЕсли;
			
			ОписаниеОрганизации = Новый Структура;
			ОписаниеОрганизации.Вставить("Ссылка", Организация);
			ОписаниеОрганизации.Вставить("ОписаниеСсылки",
				Новый Структура("ЮридическоеФизическоеЛицо", ОписаниеСчета.ОписаниеСсылки.ЮридическоеФизическоеЛицо));
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", ОписаниеОрганизации.Ссылка);
	ОписаниеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.БанковскийСчет);
	
	ЗаполнитьДанныеВладелецСчета(ОписаниеВладельцаСчета, ОписаниеОрганизации, ОписаниеСчета);
	
	Возврат ОписаниеВладельцаСчета;
	
КонецФункции

#Область РаспознаваниеСохраненнойОперацииВыписки

// Возвращает пустую структуру, которую нужно передать в качестве параметра в РаспознатьОперациюДляДокумента
// 
// Возвращаемое значение:
//   - Структура
//
Функция НовыйПараметрыДокументаДляРаспознаванияОперации() Экспорт
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Ссылка",          Неопределено);
	ПараметрыДокумента.Вставить("Организация",     Справочники.Организации.ПустаяСсылка());
	ПараметрыДокумента.Вставить("СчетОрганизации", Справочники.БанковскиеСчета.ПустаяСсылка());
	ПараметрыДокумента.Вставить("ВидОперации",     Неопределено);
	Возврат ПараметрыДокумента;
	
КонецФункции

Функция НовыйРаспознаннаяОперацияДокумента()
	
	РаспознаннаяОперацияДокумента = Новый Структура();
	РаспознаннаяОперацияДокумента.Вставить("Операция",              Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("УчастникиОпераций",     Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("ХозяйственнаяОперация", Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("Предупреждения",        Неопределено);
	
	Возврат РаспознаннаяОперацияДокумента;
	
КонецФункции

Функция УчастникиОперацииДокумента(ИдентификаторыУчастников, Организация, СчетОрганизации);
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация));
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетОрганизации));
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	УчастникиОпераций.Идентификаторы = ИдентификаторыУчастников;
	
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат УчастникиОпераций;
	
КонецФункции

Функция ПараметрыОпределенияХозяйственнойОперацииДокумента(ИдентификаторВыписки, УчастникиОпераций, Операция)
	
	ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
	ВладелецСчета = НовыйОписаниеВладельцаСчета(ИдентификаторВыписки, УчастникиОпераций);
	ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета     = ВладелецСчета;
	ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций = УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
	
	Возврат ПараметрыОпределенияХозяйственнойОперации;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеПравилаОпределенияХозяйственныхОпераций

Процедура ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(Правила, ОтборВидОперации = Неопределено)
	
	// Содержимое правил вызывается из
	// ХозяйственнаяОперацияСписано()
	// и
	// ХозяйственнаяОперацияПоступило()
	//
	// Кроме того, основные виды операций всех правил должны быть описаны в ОсновнойВидОперацииПредопределенногоПравила()
	
	ИменаПравил = Новый Структура;
	ИменаПравил.Вставить("Списано",   Новый Массив);
	ИменаПравил.Вставить("Поступило", Новый Массив);
	
	ИменаПравил.Списано.Добавить("ПрочееСписание"); // Применяется, только если явно указан соответствующий вид операции
	ИменаПравил.Списано.Добавить("ПеречислениеПоИсполнительномуЛисту");
	ИменаПравил.Списано.Добавить("НалогТретьегоЛица");
	ИменаПравил.Списано.Добавить("Налог");
	ИменаПравил.Списано.Добавить("ОперацияПоКорпоративнойКарте");
	ИменаПравил.Списано.Добавить("ВыводПредпринимателемЛичныхСредств");
	ИменаПравил.Списано.Добавить("ПеречислениеИПЮрлицуЧерезСБП"); // должно быть раньше СнятиеНаличных
	ИменаПравил.Списано.Добавить("СнятиеНаличных");
	ИменаПравил.Списано.Добавить("ВнесениеДепозита"); // должно быть раньше ПереводНаДругойСчет
	ИменаПравил.Списано.Добавить("ПереводНаДругойСчет");
	ИменаПравил.Списано.Добавить("ВыплатаСамозанятому");
	ИменаПравил.Списано.Добавить("ВыплатыСамозанятым");
	ИменаПравил.Списано.Добавить("ПеречислениеПоГПХ");
	ИменаПравил.Списано.Добавить("ПополнениеКартыПодотчетногоЛица");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлата");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлатаПоВедомости");
	ИменаПравил.Списано.Добавить("ВозвратКредитаБанку");
	ИменаПравил.Списано.Добавить("УплатаПроцентовПоКредиту");
	ИменаПравил.Списано.Добавить("КомиссияБанка");
	
	// Порядок проверки правил по займам должны располагаться в указанной последовательности
	ИменаПравил.Списано.Добавить("ВозвратЗаймаКонтрагенту");
	ИменаПравил.Списано.Добавить("УплатаПроцентовПоЗаймуКонтрагенту");
	ИменаПравил.Списано.Добавить("ВыдачаЗаймаКонтрагенту");
	
	ИменаПравил.Списано.Добавить("ОплатаИзвестномуПоставщику");
	ИменаПравил.Списано.Добавить("ПрочиеВыплатыКонтрагентам");
	ИменаПравил.Списано.Добавить("ВозвратПокупателю");
	ИменаПравил.Списано.Добавить("ДругиеПлатежиГосОрганам");
	
	ИменаПравил.Списано.Добавить("ОплатаНовомуПолучателюПрочихВыплат");
	ИменаПравил.Списано.Добавить("ВозвратНовомуПокупателю");
	ИменаПравил.Списано.Добавить("ОплатаНовомуПоставщику"); 
	
	ИменаПравил.Поступило.Добавить("ПоступленияОтПродажиИностраннойВалюты");
	ИменаПравил.Поступило.Добавить("ПриобретениеИностраннойВалюты");
	ИменаПравил.Поступило.Добавить("ВозвратПоКорпоративнойКарте");
	ИменаПравил.Поступило.Добавить("ПоступлениеНаличныхВБанк");
	ИменаПравил.Поступило.Добавить("ВыручкаРозничнойТорговлиЧерезПосредника");
	ИменаПравил.Поступило.Добавить("ВнесениеПредпринимателемЛичныхСредств");
	ИменаПравил.Поступило.Добавить("ВозвратДепозитаБанком"); // должно быть раньше ПереводССобственногоСчета
	ИменаПравил.Поступило.Добавить("ВыплатаПроцентовПоДепозитуБанком"); // должно быть раньше ПереводССобственногоСчета
	ИменаПравил.Поступило.Добавить("ПереводССобственногоСчета");
	ИменаПравил.Поступило.Добавить("ОплатаОтФакторинговойКомпании");
	ИменаПравил.Поступило.Добавить("ПолучениеКредитаВБанке");
	
	// Порядок проверки правил по займам должны располагаться в указанной последовательности
	ИменаПравил.Поступило.Добавить("ПрочееПоступление"); // Применяется, только если явно указан соответствующий вид операции
	ИменаПравил.Поступило.Добавить("ВозвратЗаймаКонтрагентом");
	ИменаПравил.Поступило.Добавить("УплатаПроцентовПоЗаймуКонтрагентом");
	ИменаПравил.Поступило.Добавить("ПолучениеЗаймаОтКонтрагента");
	
	ИменаПравил.Поступило.Добавить("ВозвратОтПодотчетногоЛица"); // должно быть выше ВозвратОтПоставщика и ВозвратОтНовогоПоставщика
	ИменаПравил.Поступило.Добавить("ВозвратУплатыНалога");
	
	ИменаПравил.Поступило.Добавить("ВзносВУставныйКапитал");
	ИменаПравил.Поступило.Добавить("ОплатаОтИзвестногоПокупателя");
	ИменаПравил.Поступило.Добавить("ВозвратОтПоставщика");
	ИменаПравил.Поступило.Добавить("ПрочиеПоступленияОтКонтрагентов");
	ИменаПравил.Поступило.Добавить("ВозвратОтНовогоПоставщика");
	ИменаПравил.Поступило.Добавить("ОплатаОтНовогоПокупателя");
	
	Для Каждого ПоступилоСписано Из ИменаПравил Цикл
		
		Для Каждого ИмяПравила Из ПоступилоСписано.Значение Цикл
			
			ОсновнойВидОперации = ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано.Ключ, ИмяПравила);
			
			Если ОтборВидОперации <> Неопределено И ОсновнойВидОперации <> ОтборВидОперации Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяПравила = "КомиссияБанка" Тогда
				КонтекстОперации = "КомиссияБанка";
			ИначеЕсли ИмяПравила = "УплатаПроцентовПоКредиту" Тогда
				КонтекстОперации = "УплатаПроцентов";
			ИначеЕсли ИмяПравила = "ВозвратЗаймаКонтрагенту" Тогда
				КонтекстОперации = "ПогашениеДолга";
			ИначеЕсли ИмяПравила = "ПеречислениеИПЮрлицуЧерезСБП"
				Или ИмяПравила = "ВыплатаСамозанятому"
				Или ИмяПравила = "ВыплатыСамозанятым" Тогда
				КонтекстОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			Иначе
				КонтекстОперации = ОсновнойВидОперации;
			КонецЕсли;
			
			ОсновнаяСтатьяДДС = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
			
			Правило = Правила.Добавить();
			Правило.ПоступилоСписано    = ПоступилоСписано.Ключ;
			Правило.Имя                 = ИмяПравила;
			Правило.ОсновнойВидОперации = ОсновнойВидОперации;
			Правило.ОсновнаяСтатьяДДС   = ОсновнаяСтатьяДДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано, ИмяПравила)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций().
	
	Если ПоступилоСписано = "Списано" Тогда
		
		Если ИмяПравила = "НалогТретьегоЛица" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
		ИначеЕсли ИмяПравила = "ПеречислениеПоИсполнительномуЛисту" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПоИсполнительномуЛистуРаботника;
		ИначеЕсли ИмяПравила = "Налог" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
		ИначеЕсли ИмяПравила = "СнятиеНаличных" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных;
		ИначеЕсли ИмяПравила = "КомиссияБанка" Тогда
			// Если предопределенный элемент расходов на услуги банка отсутствует, нельзя будет сформировать корректные проводки.
			// В этом случае, пользователь должен сам заполнить субконто.
			РасходыНаУслугиБанков = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
			Если ЗначениеЗаполнено(РасходыНаУслугиБанков) Тогда
				Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
			Иначе
				Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			КонецЕсли;
		ИначеЕсли ИмяПравила = "ПеречислениеИПЮрлицуЧерезСБП" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
		ИначеЕсли ИмяПравила = "ВыводПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводНаДругойСчет" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
		ИначеЕсли ИмяПравила = "ВнесениеДепозита" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит;
		ИначеЕсли ИмяПравила = "ВыплатаСамозанятому" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому;
		ИначеЕсли ИмяПравила = "ВыплатыСамозанятым" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатыСамозанятым;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлата" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
		ИначеЕсли ИмяПравила = "ПеречислениеПоГПХ" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлатаПоВедомости" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
		ИначеЕсли ИмяПравила = "ОплатаИзвестномуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли ИмяПравила = "ПрочиеВыплатыКонтрагентам" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ВозвратПокупателю" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		ИначеЕсли ИмяПравила = "ПополнениеКартыПодотчетногоЛица"
			Или ИмяПравила = "ОперацияПоКорпоративнойКарте" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу;
		ИначеЕсли ИмяПравила = "ВыдачаЗаймаКонтрагенту" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту;
		ИначеЕсли ИмяПравила = "ВозвратЗаймаКонтрагенту"
			Или ИмяПравила = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма;
		ИначеЕсли ИмяПравила = "ВозвратКредитаБанку"
			Или ИмяПравила = "УплатаПроцентовПоКредиту" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
		ИначеЕсли ИмяПравила = "ОплатаНовомуПолучателюПрочихВыплат" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ДругиеПлатежиГосОрганам" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ВозвратНовомуПокупателю" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		ИначеЕсли ИмяПравила = "ОплатаНовомуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли ИмяПравила = "ПрочееСписание" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
		КонецЕсли;
		
	ИначеЕсли ПоступилоСписано = "Поступило" Тогда
		
		Если ИмяПравила = "ПоступлениеНаличныхВБанк" Тогда
			Если Константы.ИспользоватьИнкассацию.Получить() Тогда
				Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
			Иначе
				Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными;
			КонецЕсли;
		ИначеЕсли ИмяПравила = "ПоступленияОтПродажиИностраннойВалюты" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
		ИначеЕсли ИмяПравила = "ПриобретениеИностраннойВалюты" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
		ИначеЕсли ИмяПравила = "ВозвратПоКорпоративнойКарте"
			Или ИмяПравила = "ВозвратОтПодотчетногоЛица" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПодотчетногоЛица;
		ИначеЕсли ИмяПравила = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		ИначеЕсли ИмяПравила = "ВнесениеПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводССобственногоСчета" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
		ИначеЕсли ИмяПравила = "ВозвратДепозитаБанком" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Депозит;
		ИначеЕсли ИмяПравила = "ВыплатаПроцентовПоДепозитуБанком" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
		ИначеЕсли ИмяПравила = "ОплатаОтФакторинговойКомпании" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании;
		ИначеЕсли ИмяПравила = "ПолучениеКредитаВБанке" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
		ИначеЕсли ИмяПравила = "ОплатаОтИзвестногоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ИмяПравила = "ВозвратОтПоставщика" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли ИмяПравила = "ВозвратЗаймаКонтрагентом" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом;
		ИначеЕсли ИмяПравила = "ПолучениеЗаймаОтКонтрагента" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма;
		ИначеЕсли ИмяПравила = "УплатаПроцентовПоЗаймуКонтрагентом" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ПрочиеПоступленияОтКонтрагентов" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ВозвратОтНовогоПоставщика" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли ИмяПравила = "ВозвратУплатыНалога" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратНалога;
		ИначеЕсли ИмяПравила = "ОплатаОтНовогоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ИмяПравила = "ВзносВУставныйКапитал" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносВУставныйКапитал;
		ИначеЕсли ИмяПравила = "ПрочееПоступление" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Списано

Функция ХозяйственнаяОперацияСписано(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций().
	// Кроме того, основные виды операций всех правил должны быть описаны в ОсновнойВидОперацииПредопределенногоПравила()
	
	Если Параметры.Правило.Имя = "НалогТретьегоЛица" Тогда
		Возврат ХозяйственнаяОперацияНалогТретьегоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПеречислениеПоИсполнительномуЛисту" Тогда
		Возврат ХозяйственнаяОперацияПеречислениеПоИсполнительномуЛисту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "Налог" Тогда
		Возврат ХозяйственнаяОперацияНалог(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "СнятиеНаличных" Тогда
		Возврат ХозяйственнаяОперацияСнятиеНаличных(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПеречислениеИПЮрлицуЧерезСБП" Тогда
		Возврат ХозяйственнаяОперацияПеречислениеИПЮрлицуЧерезСБП(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "КомиссияБанка" Тогда
		Возврат ХозяйственнаяОперацияКомиссияБанка(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОперацияПоКорпоративнойКарте" Тогда
		Возврат ХозяйственнаяОперацияПоКорпоративнойКарте(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыводПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПереводНаДругойСчет" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВнесениеДепозита" Тогда
		Возврат ХозяйственнаяОперацияКраткосрочныйДепозит(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыплатаСамозанятому" Тогда
		Возврат ХозяйственнаяОперацияВыплатаСамозанятому(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыплатыСамозанятым" Тогда
		Возврат ХозяйственнаяОперацияВыплатыСамозанятым(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ЗаработнаяПлата" Тогда
		Возврат ХозяйственнаяОперацияЗаработнаяПлата(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПеречислениеПоГПХ" Тогда
		Возврат ХозяйственнаяОперацияПеречислениеПоГПХ(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ЗаработнаяПлатаПоВедомости" Тогда
		Возврат ХозяйственнаяОперацияЗаработнаяПлатаПоВедомости(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаИзвестномуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеВыплатыКонтрагентам" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратПокупателю" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ДругиеПлатежиГосОрганам" Тогда
		Возврат ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПополнениеКартыПодотчетногоЛица" Тогда
		Возврат ХозяйственнаяОперацияПополнениеКартыПодотчетногоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыдачаЗаймаКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияВыдачаЗаймаКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратЗаймаКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияВозвратЗаймаКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратКредитаБанку" Тогда
		Возврат ХозяйственнаяОперацияВозвратКредита(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоКредиту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоКредиту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПолучателюПрочихВыплат" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратНовомуПокупателю" Тогда
		Возврат ХозяйственнаяОперацияВозвратНовомуПокупателю(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочееСписание" Тогда
		Возврат ХозяйственнаяОперацияПрочееСписание(Параметры);
	
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	
	КонецЕсли;
	
КонецФункции

Функция КБКНалога(РеквизитыПлатежаВБюджет)
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(РеквизитыПлатежаВБюджет) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		Возврат "";
	КонецЕсли;
	
	КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	
	Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоНалоговыеДоходы(КБК)
		И Не ПлатежиВБюджетКлиентСервер.ЭтоЕдиныйНалоговыйПлатеж(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КБК;
	
КонецФункции

Функция ХозяйственнаяОперацияПрочееСписание(Параметры)
	
	// Используется, только когда вид операции документа указан пользователем явно.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // Обычно в качестве дежурного применяется правило "ОплатаНовомуПоставщику"
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияНалогТретьегоЛица(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	// Платеж за третье лицо - это когда идентификатор плательщика, который берет в расчет налоговая,
	// не соответствует идентификаторам владельца счета.
	// Идентификатор плательщика может поступить двумя способами:
	// - если из назначения платежа понятно, что это платеж за третье лицо, то в составе РеквизитыПлатежаВБюджет
	// - если непонятно, то в составе идентификаторов плательщика
	
	ИдентификаторыНалогоплательщика = Новый Массив;
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
		// Это перечисление по исполнительному листу
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	ИначеЕсли Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
		
		Для Каждого Идентификатор Из Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Идентификаторы Цикл
			
			ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			
			Если Параметры.ПроверитьПрименимостьПравила Тогда
				ОписаниеИдентификатора = Параметры.УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
				
				Если ОписаниеИдентификатора = Неопределено Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
				Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
					// Это уплата за самого себя, а не за третье лицо
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Это вообще налог?
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
			Если ПустаяСтрока(КБК) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		// В расчет берем только налоговые
		ИдентификаторыНалогоплательщика = Новый Массив;
		Для Каждого Идентификатор Из Параметры.Операция.ПлательщикИдентификаторы Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				Идентификатор,
				Параметры.УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Схема <> "TXID" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
				// Это уплата за самого себя, а не за третье лицо
				Если Параметры.ПроверитьПрименимостьПравила Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
			Иначе
				// Это реквизиты третьего лица
				ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыНалогоплательщика.Количество() = 0
			И Параметры.ПроверитьПрименимостьПравила Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним свойства хозяйственной операции
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Налоговый орган
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	// Налогоплательщик
	// Общие методы не работают с третьими лицами, поэтому обрабатываем здесь в особом (упрощенном) порядке
	
	Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");// Не используем кеш
	
	// Ищем договор
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(Результат.ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	
	Для Каждого ВидДоговора Из ВидыДоговоров Цикл
		
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
		
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций,
			ОтборДоговор,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеДоговора <> Неопределено Тогда
			
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик",   ОписаниеДоговора.ОписаниеСсылки.Владелец);
			Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
			
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик",   ПротоколВыбораСсылок);
			Параметры.ПротоколыВыбораСсылок.Вставить("ДоговорКонтрагента", ПротоколВыбораСсылок);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
		
		// Ищем контрагента
		ОтборКонтрагент = Новый Структура;
		ОтборКонтрагент.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
		
		ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
		
		ОписаниеКонтрагента = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций,
			ОтборКонтрагент,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеКонтрагента <> Неопределено Тогда
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик", ПротоколВыбораСсылок);
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", ОписаниеКонтрагента.Ссылка);
		Иначе
			
			// Создаем контрагента-налогоплательщика 
			Налогоплательщик = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборКонтрагент,
				Тип("СправочникСсылка.Контрагенты"),
				Параметры.УчастникиОпераций);
				
			Если Налогоплательщик <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", Налогоплательщик);
				
				Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
					// Содержит наименование налогоплательщика (третьего лица)
				
					ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
						Налогоплательщик,
						Параметры.УчастникиОпераций);
					Если ОписаниеНовогоОбъекта <> Неопределено Тогда
						ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
							ОписаниеНовогоОбъекта,
							Новый Структура("НаименованиеПолное", Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Наименование),
							Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
			
			// Создаем договор
			ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
			ОтборДоговор.Вставить("ВидДоговора", ВидыДоговоров[0]);
			ОтборДоговор.Вставить("Владелец",    Результат.ХозяйственнаяОперация.Налогоплательщик);
			
			ДоговорКонтрагента = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборДоговор, 
				Тип("СправочникСсылка.ДоговорыКонтрагентов"),
				Параметры.УчастникиОпераций);
			
			Если ДоговорКонтрагента <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияНалог(Параметры)
	Перем ВидНалога;
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
	
	Если Параметры.ПроверитьПрименимостьПравила И ПустаяСтрока(КБК) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	СтатусПлательщика = Неопределено;
	Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("СтатусСоставителя", СтатусПлательщика);
	
	Контрагент = ?(
		Результат.ХозяйственнаяОперация.Свойство("Контрагент"),
		Результат.ХозяйственнаяОперация.Контрагент,
		Справочники.Контрагенты.ПустаяСсылка());
	
	НастройкаПлатежейВБюджет = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоРеквизитамПлатежа(
		КБК,
		Параметры.ВладелецСчета.Организация,
		Контрагент);
	
	СоответствиеСтраховыхДо2023 =
		ПлатежиВБюджетКлиентСерверПереопределяемый.СоответствиеКБКСтраховыхВзносов2022ГодаВ2023Году();
	КБКПриведенный = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК);
	ВидСтраховогоВзносаДо2023 = СоответствиеСтраховыхДо2023[КБКПриведенный];
	Если ЗначениеЗаполнено(ВидСтраховогоВзносаДо2023) Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидСтраховогоВзносаДо2023);
	Иначе
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК, , СтатусПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("Налог", Налог);
	
	Если НастройкаПлатежейВБюджет <> Неопределено Тогда
		Результат.ХозяйственнаяОперация.Вставить("Налог", НастройкаПлатежейВБюджет.Налог);
		Результат.ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств",
			НастройкаПлатежейВБюджет.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	СтатьяДДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Результат.ХозяйственнаяОперация,
		"СтатьяДвиженияДенежныхСредств",
		Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	ВидДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДДС, "ВидДвиженияДенежныхСредств");
	
	// Установим СтатьяДвиженияДенежныхСредств по исходному виду налога
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Если ЗначениеЗаполнено(ВидНалога)
		И ВидНалога <> Перечисления.ВидыНалогов.Госпошлина_ГосрегистрацияОрганизаций
		И Не ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(
			Параметры.ВладелецСчета.Организация,
			Параметры.Операция.ДатаИсполнения,
			Налог,
			Контрагент) Тогда
		// Организация является плательщиком единого налогового платежа,
		// поэтому при уплате по реквизитам других налогов (кроме оговоренных), средства попадают на единый налоговый счет.
		// Соответственно и при загрузке выписки деньги по реквизитам от этих налогов относим на единый налоговый платеж.
		ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
		Результат.ХозяйственнаяОперация.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КонецЕсли;
	
	Если ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж
		И ВидДДС = Перечисления.ВидыДвиженийДенежныхСредств.НалогНаПрибыль Тогда
		// Статья ДДС могла быть определена до смены Налога на ЕНП, поэтому определим ее заново.
		УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	// ВидНалоговогоОбязательства
	ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		КБК, Параметры.Операция.ДатаДокумента, ВидНалога);
	ВзносыСвышеПредела = ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_СвышеПредела;
	Если ВзносыСвышеПредела
		Или ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог
		И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога)
		И НазначениеПлатежаУказываетНаСтраховыеВзносыСДоходов(Параметры.Операция) Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	Если Параметры.Операция.ПлательщикРеквизиты.Свойство("КПП") Тогда
		Результат.ХозяйственнаяОперация.Вставить("КПППлательщика", Параметры.Операция.ПлательщикРеквизиты.КПП);
	КонецЕсли;
	
	// НалоговыйПериод
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("ПоказательПериода") Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Параметры.Операция.РеквизитыПлатежаВБюджет.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Параметры.Операция.ДатаДокумента, -1));
		Иначе
			НалоговыйПериод = ОписаниеПериода.Дата;
		КонецЕсли;
		
		// Особые требования к значению поля НалоговыйПериод
		Если ЗначениеЗаполнено(Результат.ХозяйственнаяОперация.Налог) Тогда
			Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
				НалоговыйПериод = НачалоГода(НалоговыйПериод);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
				НалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
					ОписаниеПериода,
					Параметры.Операция.ДатаДокумента,
					Параметры.ВладелецСчета.Организация);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(ВидНалога) Тогда
				НалоговыйПериод = УчетНДФЛПредпринимателя.НалоговыйПериодПоПлатежнымДанным(
					Параметры.Операция.РеквизитыПлатежаВБюджет.ПоказательПериода,
					Параметры.Операция.ДатаДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Результат.ХозяйственнаяОперация.Вставить("НалоговыйПериод", НалоговыйПериод);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияСнятиеНаличных(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "CWDL"; // Cash Withdrawal
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
			Или Не ЭтоСнятиеНаличныхВКассеБанка(Параметры.Операция)
			И   Не ЭтоСнятиеНаличныхСКартыЧерезТерминал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
КонецФункции

Функция ХозяйственнаяОперацияКомиссияБанка(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RDDT"; // Received Direct Debits
	// SubFamily = "FEES"; // Fees
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоКомиссияБанка = БанковскиеПравила.ЭтоСчетДоходовБанка(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетКомиссииПоКредитуДепозиту(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоБанковскийОрдер(Параметры.Операция.ШифрОперации)
				И НазначениеПлатежаУказываетНаКомиссиюБанка(Параметры.Операция)
			Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Параметры.Операция.БалансовыйСчет)
				И Не НазначениеПлатежаУказываетНаСБП(Параметры.Операция)
				И Не НазначениеПлатежаУказываетНаЭквайринг(Параметры.Операция)
			Или БанковскиеПравила.ЭтоСчетВнутрибанковскихОперацийНДС(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоВнутрибанковскиеРасчетыСПрочимиКредиторами(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоРасчетыПоВыданнымБанковскимГарантиям(Параметры.Операция.БалансовыйСчет)
				И (БанковскиеПравила.ЭтоМемориальныйОрдер(Параметры.Операция.ШифрОперации)
					Или БанковскиеПравила.ЭтоПлатежноеТребование(Параметры.Операция.ШифрОперации)
					Или БанковскиеПравила.ЭтоИнкассовоеПоручение(Параметры.Операция.ШифрОперации));
		
		ЭтоСчетПросроченногоКредита = БанковскиеПравила.ЭтоСчетПросроченногоКредита(Параметры.Операция.БалансовыйСчет)
			И НазначениеПлатежаУказываетНаКомиссиюБанка(Параметры.Операция);
		
		ЭтоКомиссияЗаЛом = БанковскиеПравила.ЭтоСчетВнутрибанковскиеОбязательстваПоПереводамКлиентов(
			Параметры.Операция.БалансовыйСчет) И НазначениеПлатежаУказываетНаКомиссиюБанка(Параметры.Операция);
		
		Если Не ЭтоКомиссияБанка И Не ЭтоСчетПросроченногоКредита Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьБанк(Результат.ХозяйственнаяОперация, Параметры);
	
	// Аналитика для отнесения расходов
	// В операциях с видом ПрочееСписание стандартные методы заполнения счетов не применяются
	Результат.ХозяйственнаяОперация.Вставить("СчетДт",          ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Результат.ХозяйственнаяОперация.Вставить("ПодразделениеДт", Параметры.ВладелецСчета.Подразделение);
	
	СтатьяРасходов = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
	Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
		Результат.ХозяйственнаяОперация.Вставить("СубконтоДт", Новый Соответствие);
		Результат.ХозяйственнаяОперация.СубконтоДт.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
			СтатьяРасходов);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICCN"; // Issued Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ЭтоСчетПереводовФизическимЛицам = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет);
		ЭтоСчетДепозитовФизическихЛиц   = БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет);
		ЭтоСнятиеНаличныхВКассеБанка    = ЭтоСнятиеНаличныхВКассеБанка(Параметры.Операция);
		ВыплатаФизЛицу                  = ЭтоСчетПереводовФизическимЛицам Или ЭтоСчетДепозитовФизическихЛиц;
		ОплатаКартой                    = ЭтоОплатаКартой(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Параметры.Операция);
		ВыводЛичныхСредствСКартыЧерезТерминал = ЭтоСнятиеНаличныхСКартыЧерезТерминал(Параметры.Операция);
		
		ПереводСобственныхСредств = ВыплатаЗаработнойПлатыПоРеестру(Параметры.Операция, Ложь)
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников
			И ВыплатаПоРееструСамозанятым(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаРеестрСамозанятых(Параметры.Операция);
		
		Если  Не ВыплатаФизЛицу
			И Не ЭтоСнятиеНаличныхВКассеБанка
			И Не ВыводЛичныхСредствСКартыЧерезТерминал
			И Не ОплатаКартой
			И Не ПереводСобственныхСредств Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ВыплатаФизЛицу Тогда
			ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
			Если Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
				Если Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
				Если ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
					// сохраним исходные идентификаторы
					ПолучательИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.Операция.ПолучательИдентификаторы);
					ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры);
					Если ПлательщикИПолучательОдноФизическоеЛицо Тогда
						Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
					Иначе
						Параметры.Операция.ПолучательИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПолучательИдентификаторы);
					КонецЕсли;
				ИначеЕсли КонтрагентУстановлен(Параметры) Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // это прочие расчеты с контрагентом-физ.лицом
				КонецЕсли;
				
				Если Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
					Если ФизлицоУстановлено(Параметры) Тогда // возможно это все-таки выплата зп, например, по договору подряда
						Возврат НовыйРезультатОпределенияХозяйственнойОперации();
					КонецЕсли;
					
					Если Не ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры) Тогда // данная проверка очищает возможные идентификаторы банка у Получателя
						Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Контрагенты"));
						Контрагент = НайтиСсылку(Отбор, Параметры, "Контрагент");
						КонтрагентУстановлен = Контрагент <> Неопределено
							И Контрагент.ОписаниеСсылки.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
						Если КонтрагентУстановлен Тогда
							Возврат НовыйРезультатОпределенияХозяйственнойОперации();
						ИначеЕсли Параметры.Операция.ПолучательИдентификаторы.Количество() > 0 Тогда
							// Сохраним исходные идентификаторы
							ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.Операция.ПлательщикИдентификаторы);
							ДобавимПлательщикуИдентификаторPNNM(Параметры);
							Если Не ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры) Тогда // ФИО плательщика и получателя не совпадают, а значит это оплата другому лицу
								Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
								
								Если ПустаяСтрока(Параметры.ВладелецСчета.ФИОИП)
									Или СтрНайти(НРег(Параметры.Операция.НазначениеПлатежа), НРег(Параметры.ВладелецСчета.ФИОИП)) = 0 Тогда
									// Восстановим исходные идентификаторы
									Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПлательщикИдентификаторы);
									
									Возврат НовыйРезультатОпределенияХозяйственнойОперации();
								КонецЕсли;
							КонецЕсли;
							
							// Восстановим исходные идентификаторы
							Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПлательщикИдентификаторы);
						КонецЕсли;
						
						// Проверки не прошли, поэтому очистим идентификаторы получателя, чтобы не создавался контрагент
						Параметры.Операция.ПолучательИдентификаторы.Очистить();
					КонецЕсли;
				КонецЕсли;
				
				Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция)
					Или НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция)
					Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Параметры.Операция) Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (ПереводСобственныхСредств Или ОплатаКартой Или ВыводЛичныхСредствСКартыЧерезТерминал)
			И ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда
			ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, "Получатель");
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыплатаСамозанятому(Параметры)
	Перем ОтборКонтрагента;
	
	// Вывод денег на счет предпринимателя уже должен быть проверен.
	
	ЭтоУдержаниеНПДСамозанятого = Ложь;
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ЭтоВыплатаПоРееструСамозанятому = ВыплатаПоРееструСамозанятым(Параметры.Операция);
		ЭтоУдержаниеНПДСамозанятого = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Параметры.Операция.БалансовыйСчет)
			И НазначениеПлатежаУказываетНаУдержаниеНПДСамозанятого(Параметры.Операция);
		
		Если Не ЭтоВыплатаПоРееструСамозанятому
			И Не ЭтоУдержаниеНПДСамозанятого Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ВалютаСчета
			<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			// Выплата самозанятым должна производиться в денежной форме в валюте РФ.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ФизлицоУстановлено(Параметры) Тогда // физ.лицо найдено - это не самозанятый
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если КонтрагентУстановлен(Параметры) И ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ЭтоФизическоеЛицо(Параметры, "Получатель") Тогда
			// получатель не найден в ИБ, но по реквизитам это не самозанятый
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ДобавитьОтбор(ОтборКонтрагента, "ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ДобавитьОтбор(ОтборКонтрагента, "Самозанятый", Истина);
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, , ОтборКонтрагента);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	// Получим банковский счет сразу, чтобы использовать при поиске реестра выплат.
	УстановитьБанковскийСчетКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	БанковскийСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация,
		"БанковскийСчетКонтрагента");
	
	УстановитьРеестрВыплатСамозанятым(Результат.ХозяйственнаяОперация, Параметры);
	
	// При удержании банком НПД из выплат самозанятому, в данных выписки нет банковского счета самозанятого.
	// Попробуем получить банковский счет из найденного выше реестра выплат самозанятым.
	РеестрВыплат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Результат.ХозяйственнаяОперация, "РеестрВыплатСамозанятым");
	Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "Контрагент");
	
	Если ЭтоУдержаниеНПДСамозанятого
		И Не ЗначениеЗаполнено(БанковскийСчет)
		И ЗначениеЗаполнено(РеестрВыплат) И ЗначениеЗаполнено(Контрагент)Тогда
		БанковскийСчет = Документы.ВыплатыСамозанятым.БанковскийСчетСамозанятого(РеестрВыплат, Контрагент);
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			Результат.ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", БанковскийСчет);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыплатыСамозанятым(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не Параметры.ВладелецСчета.ЕстьНеоплаченныеРеестрыСамозанятых Тогда
			// Нет неоплаченных реестров, значит проверять нет смысла
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ВыплатаПоРееструСамозанятым(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ВалютаСчета
			<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			// Выплата самозанятым должна производиться в денежной форме в валюте РФ.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ПолучательНеБанк = ЭтоФизическоеЛицо(Параметры, "Получатель");
		Если ПолучательНеБанк Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	УстановитьРеестрВыплатСамозанятым(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияЗаработнаяПлата(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "SALA"; // Payroll/Salary Payment
	
	// Вывод денег на счет предпринимателя уже должен быть проверен.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		СторонаКонтрагента = "Получатель";
		ТекущиеИдентификаторы = ОбщегоНазначения.СкопироватьРекурсивно(
			Параметры.Операция[СторонаКонтрагента + "Идентификаторы"]);
		ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, СторонаКонтрагента);
		
		Если Не ФизлицоУстановлено(Параметры) Тогда // физ.лицо не найдено
			Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] = ТекущиеИдентификаторы; // вернем исходные идентификаторы
			// Если физ.лицо не найдено, а получатель "банк", то вид операции "выплата зп по ведомости".
			Если ЭтоЮридическоеЛицо(Параметры, СторонаКонтрагента) Тогда // получатель - банк
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если КонтрагентУстановлен(Параметры) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаПереводЗаЛом(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПеречислениеПоГПХ(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ФизлицоУстановлено(Параметры) Тогда // физ.лицо не найдено
			// Если физ.лицо не найдено, а получатель "банк", то вид операции "выплата зп по ведомости".
			Если ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если КонтрагентУстановлен(Параметры) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияЗаработнаяПлатаПоВедомости(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "SALA"; // Payroll/Salary Payment
	
	// Вывод денег на счет предпринимателя и Перечисление заработной платы работнику уже должны быть проверены.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет)
			И Не ВыплатаЗаработнойПлатыПоРеестру(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ВалютаСчета
			<> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			// Выплата заработной платы должна производиться в денежной форме в валюте РФ.
			// Исключения есть, но в БП они не поддерживаются.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		СторонаКонтрагента = "Получатель";
		ПолучательНеБанк = ЭтоФизическоеЛицо(Параметры, СторонаКонтрагента);
		Если ПолучательНеБанк И Не НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ОчиститьИдентификаторыБанкСчетаНеСоответствующиеЮрЛицу(Параметры, СторонаКонтрагента);
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры)
	
	// Используется в качестве дежурного правила, только когда вид операции документа указан пользователем явно.
	// Приводит к созданию нового договора с видом "Прочее".
	// Позволяет избежать выполнения правила "ДругиеПлатежиГосОрганам" (и, как следствие - создания контрагента с видом Гос.орган),
	// когда в операции не указаны реквизиты платежа в бюджет.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // Обычно в качестве дежурного применяется правило "ОплатаНовомуПоставщику"
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры)
	
	// Применимость правила проверяем всегда - см. правило "ОплатаНовомуПолучателюПрочихВыплат"
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(Параметры.Операция.РеквизитыПлатежаВБюджет) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	// Правило вызывается позже ХозяйственнаяОперацияНалог, поэтому проверили, что это не налог.
	// Правило вызывается позже других, ориентирующихся на вид договора, поэтому подходящего договора нет - нужно создать новый.
	// Но, в отличие от платежам обычным юридическим лицам, не госорганам, вид нового договора будет Прочее.
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет); // Вид госоргана зависит от КБК
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры, ОписаниеГосОргана);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратНовомуПокупателю(Параметры)
	
	// Правило вызывается перед ХозяйственнаяОперацияОплатаНовомуПоставщику, чтобы не ошибиться
	// в определении вида договора для нового контрагента
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Самая последняя в списке правил.
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПополнениеКартыПодотчетногоЛица(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Параметры.Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда() Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтПодотчетногоЛица(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратКредита(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияКредитБанка(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Результат.ХозяйственнаяОперация.Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоКредиту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоКредиту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Результат.ХозяйственнаяОперация.Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыдачаЗаймаКонтрагенту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВыдачаЗаймаКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратЗаймаКонтрагенту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВозвратЗаймаКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Результат.ХозяйственнаяОперация.Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПоКорпоративнойКарте(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчетКорпоративнойКарты = Параметры.ВладелецСчета.СчетКорпоративныхРасчетов
			И ЗначениеЗаполнено(Параметры.ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц);
		Если Не ЭтоСчетКорпоративнойКарты Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			// ИП без сотрудников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ЭтоОперацияПоКорпоративнойКарте(Параметры.Операция, Параметры.ВладелецСчета) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьПодотчетноеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПеречислениеПоИсполнительномуЛисту(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	// Платеж за третье лицо - это когда идентификатор плательщика, который берет в расчет налоговая,
	// не соответствует идентификаторам владельца счета.
	// Идентификатор плательщика может поступить двумя способами:
	// - если из назначения платежа понятно, что это платеж за третье лицо, то в составе РеквизитыПлатежаВБюджет
	// - если непонятно, то в составе идентификаторов плательщика
	
	ИдентификаторыНалогоплательщика = Новый Массив;
	Если Не Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
		// Это не перечисление по исполнительному листу
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Для Каждого Идентификатор Из Параметры.Операция.РеквизитыПлатежаВБюджет.Должник.Идентификаторы Цикл
		
		ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
		
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			ОписаниеИдентификатора = Параметры.УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
			
			Если ОписаниеИдентификатора = Неопределено Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Заполним свойства хозяйственной операции
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Налоговый орган
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	// Должник
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры, "Сотрудник");
	
	ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	Результат.ХозяйственнаяОперация.Вставить("Сотрудник", Результат.ХозяйственнаяОперация.Сотрудник);
	Параметры.ПротоколыВыбораСсылок.Вставить("Сотрудник", ПротоколВыбораСсылок);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПеречислениеИПЮрлицуЧерезСБП(Параметры)
	Перем СчетДт;
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчет30232 = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Параметры.Операция.БалансовыйСчет);
		
		Если Не ЭтоСчет30232 Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаСБП(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ОтборДоговоров = Новый Структура;
	ДобавитьОтбор(ОтборДоговоров, "Тип",         Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ДобавитьОтбор(ОтборДоговоров, "ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	УстановитьБанк(Результат.ХозяйственнаяОперация, Параметры, ОтборДоговоров);
	
	// Аналитика для отнесения расходов
	// В операциях с видом ПрочееСписание стандартные методы заполнения счетов не применяются
	Результат.ХозяйственнаяОперация.Вставить("СчетДт", ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	Результат.ХозяйственнаяОперация.Вставить("ПодразделениеДт", Параметры.ВладелецСчета.Подразделение);
	
	Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "Контрагент");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Результат.ХозяйственнаяОперация.Вставить("СубконтоДт", Новый Соответствие);
		Результат.ХозяйственнаяОперация.СубконтоДт.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты,
			Контрагент);
		
		Договор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ДоговорКонтрагента");
		ДоговорНайден = ЗначениеЗаполнено(Договор);
		
		Если ДоговорНайден Тогда
			// Если договор найден, то возможно таких договоров много, попытаемся усилить отбор доп.параметрами.
			// Если в этом случае договор не будет найден, то восстановим результаы предыдущего поиска.
			ХозяйственнаяОперация = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ХозяйственнаяОперация);
			Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
				Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам"); // очистим кэш
			КонецЕсли;
			
			ДоговорНайден = Ложь; // Поищем другие договора с доп.отборами, если ничего не найдем, то вернем найденный выше
			ДобавитьОтбор(ОтборДоговоров, "ЭтоСБП", Истина);
			ДоговорНайден = НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам,
				ОтборДоговоров);
			
			Если ДоговорНайден Тогда
				Договор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ДоговорКонтрагента");
				ВидОплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ВидОплаты");
				Если ЗначениеЗаполнено(ВидОплаты) Тогда
					СчетДт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплаты, "СчетУчетаРасчетов");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетДт) Тогда
					Результат.ХозяйственнаяОперация.СчетДт = СчетДт;
				КонецЕсли;
			Иначе
				ДоговорНайден = Истина;
				Результат.ХозяйственнаяОперация = ХозяйственнаяОперация;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоговорНайден Тогда
			Результат.ХозяйственнаяОперация.СубконтоДт.Вставить(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры,
				Договор);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Поступило

Функция ХозяйственнаяОперацияПоступило(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций()
	
	Если Параметры.Правило.Имя = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		Возврат ХозяйственнаяОперацияПоступлениеОтПродажиВалюты(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПриобретениеИностраннойВалюты" Тогда
		Возврат ХозяйственнаяОперацияПриобретениеВалюты(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПоступлениеНаличныхВБанк" Тогда
		Возврат ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратПоКорпоративнойКарте" Тогда
		Возврат ХозяйственнаяОперацияВозвратПоКорпоративнойКарте(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтПодотчетногоЛица" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтПодотчетногоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
		Возврат ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВнесениеПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПереводССобственногоСчета" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратДепозитаБанком" Тогда
		Возврат ХозяйственнаяОперацияКраткосрочныйДепозит(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыплатаПроцентовПоДепозитуБанком" Тогда
		Возврат ХозяйственнаяОперацияВыплатаПроцентовПоДепозитуБанком(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтФакторинговойКомпании" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтФакторинговойКомпании(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПолучениеКредитаВБанке" Тогда
		Возврат ХозяйственнаяОперацияПолучениеКредитаВБанке(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВзносВУставныйКапитал" Тогда
		Возврат ХозяйственнаяОперацияВзносВУставныйКапитал(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтИзвестногоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтИзвестногоПокупателя(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеПоступленияОтКонтрагентов" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтПоставщика" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтПоставщика(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратУплатыНалога" Тогда
		Возврат ХозяйственнаяОперацияВозвратУплатыНалога(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПолучениеЗаймаОтКонтрагента" Тогда
		Возврат ХозяйственнаяОперацияПолучениеЗаймаОтКонтрагента(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратЗаймаКонтрагентом" Тогда
		Возврат ХозяйственнаяОперацияВозвратЗаймаКонтрагентом(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагентом" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтНовогоПоставщика" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтНовогоПоставщика(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтНовогоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочееПоступление" Тогда
		Возврат ХозяйственнаяОперацияПрочееПоступление(Параметры);
	
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	
	КонецЕсли;
	
КонецФункции

Функция ХозяйственнаяОперацияПрочееПоступление(Параметры)
	
	// Используется, только когда вид операции документа указан пользователем явно.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // Обычно в качестве дежурного применяется правило "ОплатаНовомуПоставщику"
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратПоКорпоративнойКарте(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчетКорпоративнойКарты = Параметры.ВладелецСчета.СчетКорпоративныхРасчетов
			И ЗначениеЗаполнено(Параметры.ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц);
		Если Не ЭтоСчетКорпоративнойКарты Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			// ИП без сотрудников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ЭтоОперацияПоКорпоративнойКарте(Параметры.Операция, Параметры.ВладелецСчета)
			// Такие же реквизиты могут быть у эквайринга,
			// поэтому дополнительно проверим наличие идентификатора и его соответствие физ.лицу.
			Или Не ЕстьИдентификаторКарты(Параметры, "Плательщик")
			Или Не ФизлицоУстановлено(Параметры) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьПодотчетноеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "BCDP"; // Branch Deposit
	// SubFamily = "CDPT"; // Cash Deposit
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Если ЭтоИП
			И Не Параметры.КешОбщихПараметров.ИспользоватьИнкассацию Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		Если КонтрагентФизическоеЛицо Тогда
			// Это оплата от покупателя-физического лица, без открытия банковского счета
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ОрганизацияИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		ЭтоВнесениеНаличныхНаКартуЧерезТерминал = Не ОрганизацияИП
			И ЭтоВнесениеНаличныхНаКартуЧерезТерминал(Параметры.Операция);
		ЭтоРасчетыТребование = Не ОрганизацияИП И ЭтоРасчетыТребование(Параметры.Операция);
		ЭтоВнесениеСредствЧерезТУ = Не ОрганизацияИП И ЭтоВнесениеСредствЧерезТУ(Параметры.Операция);
		
		ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция);
		ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(
			Параметры.Операция.БалансовыйСчет);
		
		Если НазначениеПлатежаУказываетНаЭквайринг(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		НазначениеПлатежаУказываетНаИнкассацию = НазначениеПлатежаУказываетНаИнкассацию(Параметры.Операция);
		
		Если (ЭтоВнесениеНаличныхНаКартуЧерезТерминал
				Или ЭтоРасчетыТребование
				Или ЭтоОбязательстваПоПрочимОперациям)
			И Не ЭтоПоступлениеНаличныхВКассуБанка
			И Не НазначениеПлатежаУказываетНаИнкассацию Тогда
			ВидОперации =
				Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
			ХозяйственнаяОперацияЭквайринга = НовыйХозяйственнаяОперация();
			ХозяйственнаяОперацияЭквайринга.Вставить("ВидОперацииДокумента", ВидОперации);
			НайденДоговорЭквайринга = НайтиДоговорПоВидуОперации(
				ХозяйственнаяОперацияЭквайринга,
				Параметры,
				ВидОперации);
			Если НайденДоговорЭквайринга И ХозяйственнаяОперацияЭквайринга.Свойство("ВидОплаты") Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		ЭтоСамоИнкассация = Не ЭтоИП И ЭтоСамоИнкассация(Параметры);
		ЭтоИнкассированиеСДругогоСчета = БанковскиеПравила.ЭтоСчетИнкассированныхНаличныхДенег(
			Параметры.Операция.БалансовыйСчет);
		
		Если  Не ЭтоПоступлениеНаличныхВКассуБанка
			И Не ИнкассированнаяНаличность(Параметры.Операция)
			И Не ЭтоИнкассированиеСДругогоСчета
			И Не ЭтоВнесениеНаличныхНаКартуЧерезТерминал
			И Не ЭтоРасчетыТребование
			И Не ЭтоВнесениеСредствЧерезТУ
			И Не ЭтоСамоИнкассация Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Если Параметры.ПроверитьПрименимостьПравила И ЭтоСамоИнкассация Тогда
		// Организация сама вносит деньги в банк, поэтому вне зависимости
		// от установленной функциональности (используется "Инкассация"), вид операции должен быть "Взнос наличными".
		Результат.ХозяйственнаяОперация.Вставить("ВидОперацииДокумента",
			Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными);
	КонецЕсли;
	
	ВидОперацииДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ВидОперацииДокумента");
	Если ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		// В качестве контрагента обычно указан банк, но может быть и вноситель
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры)
	Перем ОтборДоговоров;
	
	// Классификация по ISO2002
	// Family    = "MCRD"; // Merchant Card Transactions
	
	НазначениеПлатежаУказываетНаСБП = Ложь;
	НазначениеПлатежаУказываетНаЭквайринг = Ложь;
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоВозвратСредствСДепозита = ПлательщикИПолучательСовпадаютПоСхемеTXID(Параметры)
			И БанковскиеПравила.ЭтоСчетВнутрибанковскиеОбязательстваПоПереводамКлиентов(Параметры.Операция.БалансовыйСчет);
		
		Если ЭтоВозвратСредствСДепозита Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ЭтоСчетНезавершенныхРасчетов = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(Параметры.Операция.БалансовыйСчет);
		
		// Некоторые банки применяют при расчетах через Систему быстрых платежей.
		ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка = БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(
			Параметры.Операция.БалансовыйСчет) И БанковскиеПравила.ЭтоБанковскийОрдер(Параметры.Операция.ШифрОперации);
		
		НазначениеПлатежаУказываетНаСБП = НазначениеПлатежаУказываетНаСБП(Параметры.Операция);
		НазначениеПлатежаУказываетНаЭквайринг = НазначениеПлатежаУказываетНаЭквайринг(Параметры.Операция);
		// Банковские платежные агенты при расчетах через Систему быстрых платежей
		ЭтоСчетБанковскогоПлатежногоАгентаСБП = БанковскиеПравила.ЭтоСчетБанковскогоПлатежногоАгента(
			Параметры.Операция.БалансовыйСчет) И (НазначениеПлатежаУказываетНаСБП Или НазначениеПлатежаУказываетНаЭквайринг);
		
		Если Не ЭтоСчетНезавершенныхРасчетов
			И Не ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка
			И Не ЭтоСчетБанковскогоПлатежногоАгентаСБП Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	ОрганизацияИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	ЮридическоеФизическоеЛицо = ИдентификацияУчастниковБанковскихОпераций.ЮридическоеФизическоеЛицоПоИдентификаторам(
		Параметры.Операция.ПлательщикИдентификаторы,
		Параметры.УчастникиОпераций);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			// Посредник - банк или другая финансовая организация, а значит юридическое лицо.
			// В то же время, счета незавершенных расчетов могут использоваться для платежей физических лиц без открытия банковского счета.
			// В этих случаях данные о плательщике могут содержать идентификаторы как юридического, так и физического лица.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		Иначе
			ОчиститьИдентификаторыБанкСчетаНеСоответствующиеЮрЛицу(Параметры, "Плательщик");
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов",     Параметры.Операция.Сумма);
	
	НашлиВидОплатыПоПроцентуКомиссии = Ложь;
	ДобавитьОтбор(ОтборДоговоров, "ВидОплаты");
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
		ОтборДоговоров);
	Если ДоговорНайден Тогда
		// Если договор, ассоциированный с Видом оплаты найден, то возможно таких договоров (и Видов оплат) много,
		// попытаемся усилить отбор доп.параметрами.
		// Если в этом случае договор не будет найден, то восстановим результаы предыдущего поиска.
		ХозяйственнаяОперация = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ХозяйственнаяОперация);
		Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
			Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам"); // очистим кэш
		КонецЕсли;
		
		ДоговорНайден = Ложь; // Поищем другие договора с доп.отборами, если ничего не найдем, то вернем найденный выше.
		Если НазначениеПлатежаУказываетНаСБП Или Не НазначениеПлатежаУказываетНаЭквайринг Тогда
			ДобавитьОтбор(ОтборДоговоров, "ЭтоСБП", Истина);
			ДоговорНайден = НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
				ОтборДоговоров);
		КонецЕсли;
		
		Если Не ДоговорНайден Тогда
			ДобавитьОтбор(ОтборДоговоров, "ЭтоСБП", Ложь);
			ДобавитьОтбор(ОтборДоговоров, "ЗаполненПроцентКомиссии", Истина);
			ДоговорНайден = ДоговорНайден Или НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
				ОтборДоговоров);
			НашлиВидОплатыПоПроцентуКомиссии = Истина;
		КонецЕсли;
		
		Если Не ДоговорНайден Тогда
			НашлиВидОплатыПоПроцентуКомиссии = Ложь;
			ДоговорНайден = Истина;
			Результат.ХозяйственнаяОперация = ХозяйственнаяОперация;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоговорНайден Тогда
		// Если договор с ассоциированным Видом оплаты не найден, то попробуем найти любой другой подходящий договор
		ДоговорНайден = НайтиДоговорПоВидуОперации(
			Результат.ХозяйственнаяОперация,
			Параметры,
			Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	КонецЕсли;
	
	Если ДоговорНайден Тогда
		Если Параметры.ПроверитьПрименимостьПравила
			И ОрганизацияИП
			И Не Результат.ХозяйственнаяОперация.Свойство("ВидОплаты")
			И ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаЭквайринг
			И Не НазначениеПлатежаУказываетНаИнкассацию(Параметры.Операция) Тогда
			// Не найдено соглашение с банком по эквайрингу.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	Иначе
		// Не найден договор эквайринга с банком
		Если Параметры.ПроверитьПрименимостьПравила
			И ОрганизацияИП И ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаЭквайринг
			И Не НазначениеПлатежаУказываетНаСБП Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	НаборШаблонов = НовыйШаблоныКомиссия();
	СуммаУслугБанка = ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, НаборШаблонов);
	Если ЗначениеЗаполнено(СуммаУслугБанка) И СуммаУслугБанка <= Параметры.Операция.Сумма Тогда
		Результат.ХозяйственнаяОперация.Вставить("СуммаУслуг", СуммаУслугБанка);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяАУСН(Параметры.ВладелецСчета.Организация, Параметры.Операция.ДатаИсполнения) Тогда
		НаборШаблонов = НовыйШаблонВозвратыПоЭквайрингу();
		СуммаВозврата = ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, НаборШаблонов);
		Если ЗначениеЗаполнено(СуммаВозврата) Тогда
			Результат.ХозяйственнаяОперация.Вставить("СуммаВозврата", СуммаВозврата);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоСБП = НазначениеПлатежаУказываетНаСБП
		Или Не (НазначениеПлатежаУказываетНаЭквайринг Или НашлиВидОплатыПоПроцентуКомиссии);
	Если Не ЗначениеЗаполнено(СуммаУслугБанка) И ЭтоСБП Тогда
		Если Результат.ХозяйственнаяОперация.Свойство("ВидОплаты")
			И ЗначениеЗаполнено(Результат.ХозяйственнаяОперация.ВидОплаты) Тогда
			Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ХозяйственнаяОперация.ВидОплаты, "Наименование");
			ЭтоВидОплатыПоСБП = СтрНайти(Наименование, НСтр("ru = 'СБП'")) > 0;
			Результат.ХозяйственнаяОперация.Вставить("РассчитыватьКомиссиюПоДаннымВидаОплаты", ЭтоВидОплатыПоСБП);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RCCN"; // Received Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ИспользоватьИнкассацию = Параметры.КешОбщихПараметров.ИспользоватьИнкассацию
			И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
		
		ЭтоСчетПереводовФизическимЛицам   = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет);
		ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция)
			И Не ИспользоватьИнкассацию;
		ЭтоСамоИнкассация = ЭтоСамоИнкассация(Параметры);
		ВнесениеЛичныхСредствСКартыЧерезТерминал = ЭтоВнесениеНаличныхНаКартуЧерезТерминал(Параметры.Операция);
		ЭтоРасчетыТребование = ЭтоРасчетыТребование(Параметры.Операция);
		
		Если ВнесениеЛичныхСредствСКартыЧерезТерминал И Не ЭтоПоступлениеНаличныхВКассуБанка Тогда
			ВидОперации =
				Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
			ХозяйственнаяОперацияЭквайринга = НовыйХозяйственнаяОперация();
			ХозяйственнаяОперацияЭквайринга.Вставить("ВидОперацииДокумента", ВидОперации);
			НайденДоговорЭквайринга = НайтиДоговорПоВидуОперации(
				ХозяйственнаяОперацияЭквайринга,
				Параметры,
				ВидОперации);
			Если НайденДоговорЭквайринга И ХозяйственнаяОперацияЭквайринга.Свойство("ВидОплаты") Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если  Не ЭтоСчетПереводовФизическимЛицам
			И Не ЭтоПоступлениеНаличныхВКассуБанка
			И Не ЭтоРасчетыТребование
			И Не ЭтоСамоИнкассация
			И Не ВнесениеЛичныхСредствСКартыЧерезТерминал Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
		
		Если КонтрагентФизическоеЛицо И ВнесениеЛичныхСредствСКартыЧерезТерминал
			И Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
			// Это оплата от покупателя-физического лица, без открытия банковского счета
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ЭтоСчетПереводовФизическимЛицам И Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ЭтоСамоИнкассация Или ВнесениеЛичныхСредствСКартыЧерезТерминал Тогда
			// Очистим, потому что там реквизиты (счет) ИП или банка, а не физ.лица.
			Параметры.Операция.ПлательщикИдентификаторы.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтИзвестногоПокупателя(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтПоставщика(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтНовогоПоставщика(Параметры)
	
	// Правило вызывается перед ХозяйственнаяОперацияОплатаОтНовогоПокупателя, чтобы не ошибиться
	// в определении вида договора для нового контрагента.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратУплатыНалога(Параметры)
	Перем ВидНалога;
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
		Если ПустаяСтрока(КБК) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	СтатусПлательщика = Неопределено;
	Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("СтатусСоставителя", СтатусПлательщика);
	
	Контрагент = ?(
		Результат.ХозяйственнаяОперация.Свойство("Контрагент"),
		Результат.ХозяйственнаяОперация.Контрагент,
		Справочники.Контрагенты.ПустаяСсылка());
	
	СоответствиеСтраховыхДо2023 =
		ПлатежиВБюджетКлиентСерверПереопределяемый.СоответствиеКБКСтраховыхВзносов2022ГодаВ2023Году();
	КБКПриведенный = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК);
	ВидСтраховогоВзносаДо2023 = СоответствиеСтраховыхДо2023[КБКПриведенный];
	Если ЗначениеЗаполнено(ВидСтраховогоВзносаДо2023) Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидСтраховогоВзносаДо2023);
	Иначе
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК, , СтатусПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	КонецЕсли;
	
	Исключения = ЕдиныйНалоговыйСчетПовтИсп.ВидыВозвращаемыхНалоговИсключения();
	
	Если КБК = ЕдиныйНалоговыйСчет.КБКВозвратаПоЕНП()
		Или ЗначениеЗаполнено(ВидНалога)
			И ВидНалога <> Перечисления.ВидыНалогов.Госпошлина_ГосрегистрацияОрганизаций
			И Исключения.Найти(ВидНалога) = Неопределено
			И Не ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(
				Параметры.ВладелецСчета.Организация,
				Параметры.Операция.ДатаИсполнения,
				Налог,
				Контрагент) Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ЕдиныйНалоговыйПлатеж;
	КонецЕсли;
	
	Если Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ЕдиныйНалоговыйПлатеж
		И Исключения.Найти(ВидНалога) = Неопределено Тогда
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("Налог", Налог);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПолучениеЗаймаОтКонтрагента(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияПолучениеЗаймаОтКонтрагента(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратЗаймаКонтрагентом(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВозвратЗаймаКонтрагентом(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Результат.ХозяйственнаяОперация.Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Дежурное правило
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтФакторинговойКомпании(Параметры)
	
	ДоговорНайден = Ложь;
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоСчетРасчетовПоФакторингу = БанковскиеПравила.ЭтоСчетРасчетовПоФакторингу(Параметры.Операция.БалансовыйСчет);
		Если Не ЭтоСчетРасчетовПоФакторингу Тогда
			Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
			ДоговорНайден = НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
		КонецЕсли;
		
		Если Не ЭтоСчетРасчетовПоФакторингу И Не ДоговорНайден Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДоговорНайден Тогда
		Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
		ДоговорНайден = НайтиДоговорПоВидуОперации(
			Результат.ХозяйственнаяОперация,
			Параметры,
			Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов",     Параметры.Операция.Сумма);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПолучениеКредитаВБанке(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияКредитБанка(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВзносВУставныйКапитал(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Если ЭтоИП Тогда 
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		Если Не КонтрагентФизическоеЛицо Тогда 
			ЭтоНезавершенныеРасчеты = ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция);
			ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция);
			Если ЭтоНезавершенныеРасчеты Или ЭтоПоступлениеНаличныхВКассуБанка Тогда 
				// Не устанавливаем контрагента, если в качестве плательщика выступает банк.
				// Вместо этого ищем учредителя в назначении платежа
				Параметры.Операция.ПлательщикИдентификаторы.Очистить();
				
				Учредитель = УчредительФизЛицоИзНазначенияПлатежа(Параметры);
				Если ЗначениеЗаполнено(Учредитель) Тогда 
					// Добавим идентификатор учредителя
					ДобавитьПлательщикуИдентификаторФизЛицаСоСсылкой(Параметры, Учредитель.Ссылка, Учредитель.Наименование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
	Если КонтрагентФизическоеЛицо Тогда 
		УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	Иначе
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПоступлениеОтПродажиВалюты(Параметры)
	
	Если Параметры.Операция.ПоступилоСписано <> "Поступило" Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	ВалютнаяСумма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.Операция.РасчетыВВалюте, "ВалютнаяСумма", 0);
	
	Если Параметры.ПроверитьПрименимостьПравила И (ВалютнаяСумма = 0 Или
		Параметры.ВладелецСчета.ВалютаСчета = Параметры.Операция.РасчетыВВалюте.Валюта) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета;
	
	Расшифровка = Параметры.Операция.РасчетыВВалюте;
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		Валюта = Расшифровка.Валюта;
		Сумма  = Расшифровка.Сумма;
		СуммаВВалюте = Расшифровка.ВалютнаяСумма;
	Иначе
		Валюта = Параметры.ВладелецСчета.ВалютаСчета;
		Сумма  = Параметры.Операция.Сумма;
		СуммаВВалюте = РаботаСКурсамиВалют.ПересчитатьВВалюту(
			Сумма,
			ВалютаРегламентированногоУчета,
			Валюта,
			Параметры.Операция.ДатаДокумента);
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВалютаВзаиморасчетов", Валюта);
	Отбор.Вставить("ОплатаВВалюте", Истина);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
		Отбор);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры, Отбор);
	КонецЕсли;
	
	ИнформацияОКурсеЦБ = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Параметры.Операция.ДатаДокумента);
	Кратность = ?(ИнформацияОКурсеЦБ.Кратность > 0, ИнформацияОКурсеЦБ.Кратность, 1);
	
	Результат.ХозяйственнаяОперация.Вставить("ВалютаВзаиморасчетов", Валюта);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов", СуммаВВалюте);
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",
		Сумма / СуммаВВалюте * Кратность);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", Кратность);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПриобретениеВалюты(Параметры)
	
	Если Параметры.Операция.ПоступилоСписано <> "Поступило" Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	ВалютнаяСумма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.Операция.РасчетыВВалюте, "ВалютнаяСумма", 0);
	
	Если Параметры.ПроверитьПрименимостьПравила И (ВалютнаяСумма = 0 Или
		Параметры.ВладелецСчета.ВалютаСчета <> Параметры.Операция.РасчетыВВалюте.Валюта) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ВалютаРегламентированногоУчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета;
	
	Расшифровка = Параметры.Операция.РасчетыВВалюте;
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		Сумма = Расшифровка.Сумма;
		СуммаВВалюте = Расшифровка.ВалютнаяСумма;
		Валюта = Расшифровка.Валюта;
	Иначе
		СуммаВВалюте = Параметры.Операция.Сумма;
		Валюта = Параметры.ВладелецСчета.ВалютаСчета;
		Сумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(
			СуммаВВалюте,
			Валюта,
			ВалютаРегламентированногоУчета,
			Параметры.Операция.ДатаДокумента);
	КонецЕсли;
	
	СуммаРасчетная = РаботаСКурсамиВалют.ПересчитатьВВалюту(
		СуммаВВалюте,
		Валюта,
		ВалютаРегламентированногоУчета,
		Параметры.Операция.ДатаДокумента);
	
	Если Параметры.ПроверитьПрименимостьПравила И СуммаРасчетная = Сумма Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ОтборДоговора = Новый Структура;
	ОтборДоговора.Вставить("ОплатаВВалюте", Ложь);
	ОтборДоговора.Вставить("ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
		ОтборДоговора);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры, ОтборДоговора);
	КонецЕсли;
	
	ИнформацияОКурсеЦБ = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Параметры.Операция.ДатаДокумента);
	Кратность = ?(ИнформацияОКурсеЦБ.Кратность > 0, ИнформацияОКурсеЦБ.Кратность, 1);
	
	Результат.ХозяйственнаяОперация.Вставить("ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов", Сумма);
	Результат.ХозяйственнаяОперация.Вставить(
		"КурсВзаиморасчетов", Сумма / СуммаВВалюте * Кратность);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", Кратность);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыплатаПроцентовПоДепозитуБанком(Параметры)
	
	ЭтоВозвратПроцентовСДепозита = Ложь;
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоВозвратПроцентовСДепозита = ЭтоВозвратПроцентовСДепозита(Параметры);
		Если Не ЭтоОперацияВыплатаПроцентовПоДепозитуБанком(Параметры.Операция)
			И Не ЭтоВозвратПроцентовСДепозита Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Если ЭтоВозвратПроцентовСДепозита Тогда
		// В этом случае в качестве реквизитов плательщика передаются данные самой организация, а должен быть банк.
		// Поэтому очистим идентификаторы, чтобы контрагент не создавался.
		Параметры.Операция.ПлательщикИдентификаторы.Очистить();
	Иначе
		УстановитьБанк(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	// Аналитика для отнесения расходов
	// В операциях с видом ПрочееСписание стандартные методы заполнения счетов не применяются
	Результат.ХозяйственнаяОперация.Вставить("СчетКт",          ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Результат.ХозяйственнаяОперация.Вставить("ПодразделениеКт", Параметры.ВладелецСчета.Подразделение);
	
	СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ПроцентыКПолучениюУплате");
	Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
		Результат.ХозяйственнаяОперация.Вставить("СубконтоКт", Новый Соответствие);
		Результат.ХозяйственнаяОперация.СубконтоКт.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
			СтатьяРасходов);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Общие

Функция ХозяйственнаяОперацияПоВидуДоговора(Параметры)
	
	// Служебная, следует вызывать из других ХозяйственнаяОперация...()
	// Проверяет, есть ли договоры, подходящие для переданного вида операции.
	// Если есть, то хозяйственная операция определяется переданным видом договора.
	
	Если Не ЗначениеЗаполнено(Параметры.Правило.ОсновнойВидОперации) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденДоговор = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Параметры.Правило.ОсновнойВидОперации);
		
	Если Не НайденДоговор Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры)
	
	// Классификация по ISO2002
	// Family    = 
	//  "ICCN"; // Issued Cash Concentration
	// или
	//  "RCCN"; // Received Cash Concentration
	// SubFamily = "ICCT"; // Intra Company Transfer
	
	ЭтоОперацияСЦифровымКошельком = ЭтоОперацияСЦифровымКошельком(Параметры.Операция);
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ПлательщикИПолучательСовпадаютПоСхемеTXID(Параметры)
			И Не ЭтоОперацияСЦифровымКошельком Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОперацияСЦифровымКошельком Тогда
		СчетПолучателя = Параметры.ВладелецСчета.ЦифровойКошелек;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
		Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
		
		СторонаПолучателя = Параметры.СторонаКонтрагента = "Получатель";
		ОписаниеСчетаПолучателя = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента", СторонаПолучателя);
		
		Если ОписаниеСчетаПолучателя <> Неопределено Тогда
			СчетПолучателя = ОписаниеСчетаПолучателя.Ссылка;
		Иначе
			Если Параметры.ПроверитьПрименимостьПравила Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			Иначе
				СчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Результат.ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", СчетПолучателя);
	Результат.ХозяйственнаяОперация.Вставить("Контрагент", Параметры.ВладелецСчета.Организация);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПлательщикИПолучательОдноФизическоеЛицо(Параметры)
	
	// Проверим совпадение идентификаторов физического лица плательщика и получателя
	Для Каждого ИдентификаторПлательщика Из Параметры.Операция.ПлательщикИдентификаторы Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(
			ИдентификаторПлательщика, Параметры.УчастникиОпераций)
			И Параметры.Операция.ПолучательИдентификаторы.Найти(ИдентификаторПлательщика) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПлательщикИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	ОписаниеСсылкиПолучатель = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПолучательИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	ПлательщикИПолучательОдноФизическоеЛицо =
		ОписаниеСсылкиПлательщик <> Неопределено И ОписаниеСсылкиПолучатель <> Неопределено
		И ОписаниеСсылкиПлательщик.Ссылка = ОписаниеСсылкиПолучатель.Ссылка;
	
	Возврат ПлательщикИПолучательОдноФизическоеЛицо;
	
КонецФункции

Функция ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры)
	
	// Иногда в операциях в качестве ИНН получателя указан ИНН банка.
	// Удалим идентификаторы, не соответствующие физ.лицу, и проверим оставщиеся идентификаторы.
	// Если по ним нельзя получить такое же физ.лицо, как и по идентификаторам плательщика,
	// то необходимо полностью очистить все идентификаторы. Получатель в этом виде операции не обязателен
	// - лучше ничего не заполнить, чем заполнить (и возможно создать) иное физ.лицо.
	
	ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, "Получатель");
	
	Возврат ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
	
КонецФункции

Функция КонтрагентУстановлен(Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	
	Возврат НайтиСсылку(Отбор, Параметры, "Контрагент") <> Неопределено;
	
КонецФункции

Функция ФизлицоУстановлено(Параметры, СторонаКонтрагента = Истина)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор,
		, // ПриоритетнаяСсылка
		, // Протокол выбора (не используем, т.к. пока только выполняем поиск)
		Параметры[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "КешИдентификаторов"]);
	
	Результат = ОписаниеСсылки <> Неопределено;
	Если Не Результат Тогда // если не нашли, то проверим без кэша
		ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			Параметры.Операция[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "Идентификаторы"],
			Параметры.УчастникиОпераций,
			Отбор);
		Результат = ОписаниеСсылки <> Неопределено;
		Если Результат Тогда
			// Очистим кэш
			Параметры[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "КешИдентификаторов"] = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьИдентификаторКарты(Параметры, СторонаКонтрагента)
	
	Результат = Ложь;
	
	Для Каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторКарты(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФизическоеЛицо(Параметры, СторонаКонтрагента)
	
	Для каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЮридическоеЛицо(Параметры, СторонаКонтрагента)
	
	Для каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторЮридическогоЛица(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавимПлательщикуИдентификаторPNNM(Параметры)
	
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПлательщикИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	
	Если ОписаниеСсылкиПлательщик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеСсылкиПлательщик.Ссылка, "Наименование");
	ПлательщикИдентификаторPNNM = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
		Параметры.УчастникиОпераций, Наименование);
	
	Параметры.Операция.ПлательщикИдентификаторы.Добавить(ПлательщикИдентификаторPNNM);
	Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Параметры.Операция.ПлательщикИдентификаторы);
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, СторонаКонтрагента)
	
	МассивКУдалению = Новый Массив;
	МассивИдентификаторов = Параметры.Операция[СторонаКонтрагента + "Идентификаторы"];
	Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл
		Идентификатор = МассивИдентификаторов[Индекс];
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(
			Идентификатор, Параметры.УчастникиОпераций) Тогда
			Продолжить;
		КонецЕсли;
		
		Схема = "TXID";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			МассивКУдалению.Добавить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Схема = "BBAN";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			НомерСчета = Сред(Идентификатор, СтрДлина(Схема) + 1, БанковскиеПравила.ДлинаНомераСчета());
			БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчета);
			Если БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет)
				Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивКУдалению.Добавить(Индекс);
	КонецЦикла;
	
	КоличествоКУдалению = МассивКУдалению.Количество();
	Для Счетчик = 1 По КоличествоКУдалению Цикл
		ИндексКУдалению = МассивКУдалению[КоличествоКУдалению - Счетчик];
		МассивИдентификаторов.Удалить(ИндексКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыБанкСчетаНеСоответствующиеЮрЛицу(Параметры, СторонаКонтрагента)
	
	МассивКУдалению = Новый Массив;
	МассивИдентификаторов = Параметры.Операция[СторонаКонтрагента + "Идентификаторы"];
	Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл
		Идентификатор = МассивИдентификаторов[Индекс];
		Схема = "BBAN";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			НомерСчета = Сред(Идентификатор, СтрДлина(Схема) + 1, БанковскиеПравила.ДлинаНомераСчета());
			БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчета);
			Если БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет)
				Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
				МассивКУдалению.Добавить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКУдалению = МассивКУдалению.Количество();
	Для Счетчик = 1 По КоличествоКУдалению Цикл
		ИндексКУдалению = МассивКУдалению[КоличествоКУдалению - Счетчик];
		МассивИдентификаторов.Удалить(ИндексКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКешОбщихПараметров()
	
	Результат = Новый Структура();
	Результат.Вставить("ИспользоватьВалютныйУчет",                  ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет"));
	Результат.Вставить("ИспользоватьСтатьиДвиженияДенежныхСредств", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"));
	Результат.Вставить("ВалютаРегламентированногоУчета",            ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Результат.Вставить("ИспользоватьИнкассацию",                    Константы.ИспользоватьИнкассацию.Получить());
	
	// Заполняются по мере необходимости
	Результат.Вставить("ВидыДоговоровПоВидамОпераций",              Новый Соответствие); // в ОпределитьВидДоговораСКонтрагентом()
	Результат.Вставить("РеквизитыНовыхОбъектовИнформационнойБазы",  Новый Соответствие); // в ЗаполнитьПустыеРеквизитыНовогоОбъекта()
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПоступлениеНаличныхВКассуБанка(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоДокументПоступленияНаличныхВБанк(Операция.ШифрОперации)
	
КонецФункции

Функция ЭтоСнятиеНаличныхВКассеБанка(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации);
	
КонецФункции

Функция ЭтоСнятиеНаличныхСКартыЧерезТерминал(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		И Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция)
		И Не НазначениеПлатежаУказываетНаПереводЗаЛом(Операция)
		И (БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации));
	
КонецФункции

Функция ЭтоОплатаКартой(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
			Или Не ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Операция.ШифрОперации));
	
КонецФункции

Функция ЭтоСамоИнкассация(Параметры)
	Перем СчетНашейСтороны, СчетПротивоположнойСтороны;
	
	Стороны = Новый Структура;
	Стороны.Вставить("Поступило", "Получатель");
	Стороны.Вставить("Списано",   "Плательщик");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
	
	ИмяНашейСтороны = ?(Параметры.Операция.ПоступилоСписано = "Поступило", Стороны.Поступило, Стороны.Списано);
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[ИмяНашейСтороны + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		СчетНашейСтороны = ОписаниеСсылки.Ссылка;
	КонецЕсли;
	
	ИмяПротивоположнойСтороны = ?(Параметры.Операция.ПоступилоСписано = "Поступило", Стороны.Списано, Стороны.Поступило);
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[ИмяПротивоположнойСтороны + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		СчетПротивоположнойСтороны = ОписаниеСсылки.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетНашейСтороны)
		И СчетНашейСтороны = Параметры.ВладелецСчета.БанковскийСчет
		И СчетНашейСтороны = СчетПротивоположнойСтороны Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоВнесениеНаличныхНаКартуЧерезТерминал(Операция)
	
	НазначениеПлатежаУказываетНаЭквайринг = НазначениеПлатежаУказываетНаЭквайринг(Операция);
	НазначениеПлатежаУказываетНаСБП       = НазначениеПлатежаУказываетНаСБП(Операция);
	
	ЭтоНезавершенныеРасчетыБанкКартаКасса = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоДокументПоступленияНаличныхВБанк(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации));
	ЭтоНезавершенныеРасчетыЧерезТерминал = ЭтоНезавершенныеРасчетыЧерезТерминал(Операция)
		И Не НазначениеПлатежаУказываетНаЭквайринг
		И Не НазначениеПлатежаУказываетНаСБП;
	ЭтоВнутрибанковскиеРаспределенияМеморОрдер = (БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации)
		Или БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации))
		И БанковскиеПравила.ЭтоСчетРасчетовВнутрибанковскиеРаспределения(Операция.БалансовыйСчет);
	
	Возврат ЭтоНезавершенныеРасчетыБанкКартаКасса
		Или ЭтоНезавершенныеРасчетыЧерезТерминал
		Или ЭтоВнутрибанковскиеРаспределенияМеморОрдер;
	
КонецФункции

Функция ИнкассированнаяНаличность(Операция)
	
	Возврат (БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3022Пассив(Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет))
		И БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	
КонецФункции

Функция ЭтоНезавершенныеРасчетыЧерезТерминал(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации));
	
КонецФункции

Функция ЭтоВнесениеСредствЧерезТУ(Операция)
	
	ЭтоСчет30302 = БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(
		Операция.БалансовыйСчет);
	
	Возврат ЭтоСчет30302 И НазначениеПлатежаУказываетНаИнкассацию(Операция);
	
КонецФункции

Функция ЭтоРасчетыТребование(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет)
				И БанковскиеПравила.ЭтоПлатежноеТребование(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(Операция.БалансовыйСчет)
				И БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	
КонецФункции

Функция ВыплатаЗаработнойПлатыПоРеестру(Операция, УчитыватьОчередность = Истина)
	
	ЭтоПлатежноеПоручение = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	ЭтоМемориальныйОрдер  = БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	Если ЭтоОбязательстваПоПрочимОперациям И Не ЗначениеЗаполнено(Операция.ШифрОперации) Тогда
		ЭтоОбязательстваПоПрочимОперациям = Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция);
		ЭтоПлатежноеПоручение = ЭтоОбязательстваПоПрочимОперациям;
	КонецЕсли;
	
	ОплатаЧерезКоррСчет = ПустаяСтрока(Операция.БалансовыйСчет)
		И ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "РасСчет", ""))
		И Не ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "КорСчет", ""));
	
	ОчередностьОплатаТруда = Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	ЭтоСчетНезавершенныхРасчетов3023Пассив = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(
		Операция.БалансовыйСчет);
	ЭтоРасчетыПоПереводамДенежныхСредств =
		БанковскиеПравила.ЭтоРасчетыПоПереводамДенежныхСредств(Операция.БалансовыйСчет);
	
	ЭтоВнутрибанковскиеТребованияПоПереводамКлиентов =
		БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет)
		И (ОчередностьОплатаТруда Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция));
	
	ЭтоПеречислениеЗаплаты = ОплатаЧерезКоррСчет
		Или ЭтоРасчетыПоПереводамДенежныхСредств Или ЭтоСчетНезавершенныхРасчетов3023Пассив;
	Если УчитыватьОчередность Тогда
		ЭтоПеречислениеЗаплатыПоОчередности = ЭтоПеречислениеЗаплаты
			И (ОчередностьОплатаТруда Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция));
	Иначе
		ЭтоПеречислениеЗаплатыПоОчередности = ЭтоПеречислениеЗаплаты;
	КонецЕсли;
	
	ОплатаЧерезКоррСчетПустаяОчередность = Не ЗначениеЗаполнено(Операция.Очередность) И ОплатаЧерезКоррСчет;
	
	Возврат ЭтоПлатежноеПоручение
		И (ЭтоОбязательстваПоПрочимОперациям
			Или ЭтоВнутрибанковскиеТребованияПоПереводамКлиентов
			Или ЭтоПеречислениеЗаплатыПоОчередности)
		Или ЭтоМемориальныйОрдер И ОплатаЧерезКоррСчетПустаяОчередность;
	
КонецФункции

Функция ВыплатаПоРееструСамозанятым(Операция)
	
	Очередность = Операция.Очередность;
	Если Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоПлатежноеПоручение = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	ЭтоМемориальныйОрдер  = БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	
	ОплатаЧерезКоррСчет = ПустаяСтрока(Операция.БалансовыйСчет)
		И ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "РасСчет", ""))
		И Не ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "КорСчет", ""));
	
	ОчередностьПоУмолчанию = Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ЭтоСчетНезавершенныхРасчетов30232 = ОчередностьПоУмолчанию
		И (ОплатаЧерезКоррСчет Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет));
	
	ЭтоВыплатаФизлицу = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетИндивидуальногоПредпринимателя(Операция.БалансовыйСчет);
	
	НазначениеПлатежаСодержитУпоминаниеРеестра = НазначениеПлатежаУказываетНаРеестрСамозанятых(Операция);
	НазначениеПлатежаУказываетНаВыпалатуСамозанятому = НазначениеПлатежаУказываетНаВыпалатуСамозанятому(Операция);
	
	ОплатаЧерезКоррСчетПустаяОчередность = Не ЗначениеЗаполнено(Очередность) И ОплатаЧерезКоррСчет;
	
	ОплатаПоПлатежномуПоручению = ЭтоПлатежноеПоручение
		И (ЭтоОбязательстваПоПрочимОперациям Или ЭтоСчетНезавершенныхРасчетов30232 Или ЭтоВыплатаФизлицу);
	ОплатаЧерезМемориальныйОрдер = ЭтоМемориальныйОрдер И ОплатаЧерезКоррСчетПустаяОчередность;
	
	Возврат (НазначениеПлатежаСодержитУпоминаниеРеестра Или НазначениеПлатежаУказываетНаВыпалатуСамозанятому)
		И (ОплатаПоПлатежномуПоручению Или ОплатаЧерезМемориальныйОрдер);
	
КонецФункции

Функция ФИОСамозанятогоИзНазначенияПлатежа(НазначениеПлатежа, ФИОСамозанятых)
	
	Результат = Неопределено;
	
	ПриведенныйТекстНазначения = НРег(НазначениеПлатежа);
	Для Каждого ФИОСамозанятого Из ФИОСамозанятых Цикл
		Если ЗначениеЗаполнено(ФИОСамозанятого)
			И СтрНайти(ПриведенныйТекстНазначения, НРег(СокрЛП(ФИОСамозанятого))) > 0 Тогда
			Результат = ФИОСамозанятого;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоОперацияПоКорпоративнойКарте(Операция, ВладелецСчета = Неопределено)
	
	Если Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	ЭтоСчетРасчетовСБанком     = БанковскиеПравила.ЭтоСчетРасчетовСБанком(Операция.БалансовыйСчет);
	ЭтоБанковскийОрдер         = БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации);
	ЭтоОплатаКартой            = БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации);
	ЭтоБалансовыйСчетКорпКарты = БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(Операция.БалансовыйСчет);
	
	ЭтоВнутрибанковскиеРасчетыОбязательства = ЭтоОбязательстваПоПрочимОперациям Или ЭтоСчетРасчетовСБанком;
	
	ЭтоОплатаОтПокупателя = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
		И БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(Операция.БалансовыйСчет);
	
	Если (ЭтоВнутрибанковскиеРасчетыОбязательства Или ЭтоБалансовыйСчетКорпКарты И Не ЭтоОплатаОтПокупателя)
		И ВладелецСчета <> Неопределено Тогда
		Если ВладелецСчета.СчетКорпоративныхРасчетов
			И ВладелецСчета.СчетБанк <> ПланыСчетов.Хозрасчетный.ОсновнойСчет("СчетКорпоративныхРасчетов") Тогда
			// На основном расчетном счете встречаются разные операции
			// и отражение операции по корп.счету по описанию может быть похоже на отражение комиссии банка.
			// Поэтому дополнительно проверим наличие карты в Назначение платежа, чтобы разделить эти операции.
			ЭтоВнутрибанковскиеРасчетыОбязательства = Ложь;
			Для Каждого КартаПодотчетногоЛица Из ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
				НомерКарты = КартаПодотчетногоЛица.Ключ;
				Приоритет = ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, Операция.НазначениеПлатежа);
				Если Приоритет > 0 Тогда // нашли номер карты в Назначение платежа
					ЭтоВнутрибанковскиеРасчетыОбязательства = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЭтоВнутрибанковскиеРасчетыОбязательства = ЭтоВнутрибанковскиеРасчетыОбязательства
				И Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция);
		Иначе
			// На карточном счете бывает только расход средств подотчетником, либо списание комиссии банка.
			// Поэтому проверим, что это "не комиссия".
			ЭтоВнутрибанковскиеРасчетыОбязательства = Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоШифрОперацииКорпКарты = ЭтоБанковскийОрдер
		Или Не ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Операция.ШифрОперации) // шифр операции не заполнен
		Или БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
		Или БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации)
		Или ЭтоОплатаКартой
		Или БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	Возврат ЭтоШифрОперацииКорпКарты И ЭтоВнутрибанковскиеРасчетыОбязательства;
	
КонецФункции

Функция КорпоративныеКартыПодотчетныхЛиц(Организация, БанковскийСчет, СчетКорпоративныхРасчетов)
	
	Результат = Новый Соответствие;
	
	Если Не СчетКорпоративныхРасчетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорпоративныеКарты.НомерКарты КАК НомерКарты,
	|	КорпоративныеКарты.ПодотчетноеЛицо КАК ПодотчетноеЛицо
	|ИЗ
	|	РегистрСведений.КорпоративныеКарты КАК КорпоративныеКарты
	|ГДЕ
	|	КорпоративныеКарты.БанковскийСчет = &БанковскийСчет
	|	И КорпоративныеКарты.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.НомерКарты, Выборка.ПодотчетноеЛицо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоОперацияКредитБанка(Операция)
	
	ЭтоБалансовыйСчетКредитБанкаЮрЛицу = БанковскиеПравила.ЭтоСчетКредитаБанка(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо30Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо90Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо180Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДоГода(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо3Лет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка401(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка403НаСрокДо30Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка404НаСрокДо90Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка405НаСрокДо180Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка406НаСрокДоГода(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка407НаСрокДо3Лет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка408НаСрокСвыше3Лет(Операция.БалансовыйСчет);
	
	ЭтоСчетПросроченногоКредита = БанковскиеПравила.ЭтоСчетПросроченногоКредита(Операция.БалансовыйСчет)
		И Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция);
	
	ЭтоКредитПоТекстуНазначения =
		БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет)
			И НазначениеПлатежаУказываетНаПолучениеКредита(Операция);
	
	Возврат ЭтоБалансовыйСчетКредитБанкаЮрЛицу Или ЭтоКредитПоТекстуНазначения Или ЭтоСчетПросроченногоКредита;
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоКредиту(Операция)
	
	ЭтоБалансовыйСчетПроцентовПоКредиту = БанковскиеПравила.ЭтоСчетПроцентовПоКредиту(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетПроцентовПоПросроченномуКредиту(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетПроцентовПоПросроченномуКредитуИП(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоРасчетыПоПроцентамПоРазмещеннымДенСредствам(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетПроцентовПоКредиту;
	
КонецФункции

Функция ЭтоОперацияВыдачаЗаймаКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту И НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияВозвратЗаймаКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту И НазначениеПлатежаУказываетНаВозвратЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияПолучениеЗаймаОтКонтрагента(Операция)
	
	ЭтоБалансовыйСчетПолучениеЗаймаОтКонтрагента = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоКассаКредитнойОрганизации(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетПолучениеЗаймаОтКонтрагента И НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияВозвратЗаймаКонтрагентом(Операция)
	
	ЭтоБалансовыйСчетВозвратЗаймаКонтрагентом = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетВозвратЗаймаКонтрагентом И НазначениеПлатежаУказываетНаВозвратЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагенту
		И НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция);
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагентом(Операция)
	
	ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагентом = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагентом
		И НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция);
	
КонецФункции

Функция ЭтоСчетУчаствуетВЗаймах(Операция)
	
	Результат = БанковскиеПравила.ЭтоПрочийСчет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНегосударственныхОрганизаций(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
	
	Результат = ЭтоСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет);
	
	Возврат Результат;
	
КонецФункции

// Добавляет для плательщика идентификатор физического лица с присвоением ссылки.
//
// Параметры:
//  Параметры - см. НовыйПараметрыОпределенияХозяйственнойОперации()
//  Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - физическое лицо в ИБ
//  Наименование - Строка - имя физического лица
//
Процедура ДобавитьПлательщикуИдентификаторФизЛицаСоСсылкой(Параметры, Ссылка, Наименование)
	
	ПлательщикИдентификаторФизЛица = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
		Параметры.УчастникиОпераций, Наименование);
	Параметры.Операция.ПлательщикИдентификаторы.Добавить(ПлательщикИдентификаторФизЛица);
	Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Параметры.Операция.ПлательщикИдентификаторы);
		
	ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
		ПлательщикИдентификаторФизЛица, Параметры.УчастникиОпераций);
	Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
	
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(Ссылка, 
		Параметры.УчастникиОпераций, ОписаниеИдентификатора);
	ОписаниеСсылкиПлательщик.Ссылка = Ссылка;
	ОписаниеСсылкиПлательщик.СхемыИдентификации.Вставить(ОписаниеИдентификатора.Схема, Истина);
	
	ОписаниеИдентификатора.Ссылки.Вставить(ОписаниеСсылкиПлательщик.Ссылка, Истина);
	
КонецПроцедуры

Функция ХозяйственнаяОперацияКраткосрочныйДепозит(Параметры)
	
	ПроверитьКоррСчет = Ложь;
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		БалансовыйСчетОрганизации   = БанковскиеПравила.БалансовыйСчет(Параметры.ВладелецСчета.НомерБанковскогоСчета);
		ЭтоОперацияПоСчетуДепозита  = БанковскиеПравила.ЭтоСчетДепозитаБанка(БалансовыйСчетОрганизации);
		ЭтоВнесениеСредствНаДепозит = ЭтоОперацияВнесенияСредствНаДепозит(Параметры.Операция);
		
		НаличиеИННПлательщикаОбязательно = ЭтоВнесениеСредствНаДепозит И ЭтоОперацияПоСчетуДепозита;
		Если Не ПлательщикИПолучательСовпадаютПоСхемеTXID(Параметры, НаличиеИННПлательщикаОбязательно)
			Или Не ЭтоВнесениеСредствНаДепозит Тогда
			
			Если ЭтоОперацияПоСчетуДепозита Тогда
				ПроверитьКоррСчет = Истина;
			Иначе
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		ЭтоВозвратПроцентов = ЭтоВозвратПроцентовСДепозита(Параметры);
		Если ЭтоВозвратПроцентов Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Результат.ХозяйственнаяОперация.Вставить("Контрагент", Параметры.ВладелецСчета.Организация);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
	ОписаниеСчетаПолучателя = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
	Если ОписаниеСчетаПолучателя <> Неопределено Тогда
		Результат.ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", ОписаниеСчетаПолучателя.Ссылка);
	ИначеЕсли ПроверитьКоррСчет И Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПлательщикИПолучательСовпадаютПоСхемеTXID(Параметры, НаличиеИННПлательщикаОбязательно = Ложь)
	
	Результат = Ложь;
	
	ИдентификаторПлательщика = "";
	НашлиИдентификаторПлательщика = Ложь;
	НашлиИдентификаторПолучателя  = Ложь;
	Для Каждого ИдентификаторПлательщика Из Параметры.Операция.ПлательщикИдентификаторы Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторTXID(
			ИдентификаторПлательщика, Параметры.УчастникиОпераций) Тогда
			ОписаниеИдентификатораПлательщика = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ИдентификаторПлательщика, Параметры.УчастникиОпераций);
			ИдентификаторПлательщика = ?(ПустаяСтрока(ОписаниеИдентификатораПлательщика.БазовыйИдентификатор),
				ОписаниеИдентификатораПлательщика.Идентификатор,
				ОписаниеИдентификатораПлательщика.БазовыйИдентификатор);
			НашлиИдентификаторПлательщика = ОписаниеИдентификатораПлательщика <> Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ИдентификаторПолучателя Из Параметры.Операция.ПолучательИдентификаторы Цикл
		Если Не ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторTXID(
			ИдентификаторПолучателя, Параметры.УчастникиОпераций) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИдентификатораПолучателя = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
			ИдентификаторПолучателя, Параметры.УчастникиОпераций);
		
		НашлиИдентификаторПолучателя = ОписаниеИдентификатораПолучателя <> Неопределено;
		
		Если Не НашлиИдентификаторПлательщика Или Не НашлиИдентификаторПолучателя Тогда
			Прервать;
		КонецЕсли;
		
		ИдентификаторПолучателя = ?(ПустаяСтрока(ОписаниеИдентификатораПолучателя.БазовыйИдентификатор),
			ОписаниеИдентификатораПолучателя.Идентификатор,
			ОписаниеИдентификатораПолучателя.БазовыйИдентификатор);
		
		Если ПустаяСтрока(ИдентификаторПлательщика) Или ПустаяСтрока(ИдентификаторПолучателя) Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИдентификаторПлательщика, ИдентификаторПолучателя)
			Или СтрНачинаетсяС(ИдентификаторПолучателя, ИдентификаторПлательщика) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НашлиИдентификаторПолучателя И Не НашлиИдентификаторПлательщика Тогда
		// В банковском и мемориальном ордере могут не указывать реквизиты плательщика и получателя.
		// Обычно это идентификаторы организации или банка.
		Возврат Истина;
	КонецЕсли;
	
	Возврат Результат
		Или НашлиИдентификаторПолучателя И Не НашлиИдентификаторПлательщика И Не НаличиеИННПлательщикаОбязательно
		Или НашлиИдентификаторПлательщика И Не НашлиИдентификаторПолучателя;
	
КонецФункции

Функция ЭтоВозвратПроцентовСДепозита(Параметры)
	
	ЭтоВозвратПроцентов = Параметры.Операция.ПоступилоСписано = "Поступило"
		И ЭтоОперацияВнесенияСредствНаДепозит(Параметры.Операция)
		И НазначениеПлатежаУказываетНаВыплатуПроцентовПоДепозиту(Параметры.Операция)
		И ПлательщикИПолучательСовпадаютПоСхемеTXID(Параметры, Истина);
	
	Если ЭтоВозвратПроцентов Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
		Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
		ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчет", Ложь);
		Если ОписаниеСчета <> Неопределено И ЗначениеЗаполнено(ОписаниеСчета.Ссылка) Тогда
			ВыпискаЗагружаетсяПоДепозитномуСчету = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ОписаниеСчета.Ссылка, "ВыпискаЗагружаетсяПоДепозитномуСчету");
			Если ВыпискаЗагружаетсяПоДепозитномуСчету = Истина Тогда // в ОписаниеСчета может быть еще не созданная ссылка
				// Проценты загружаются на депозитный счет, а значит при возврате процентов на основной счет,
				// повторно их как проценты отражать не требуется.
				ЭтоВозвратПроцентов = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоВозвратПроцентов;
	
КонецФункции

Функция ЭтоОперацияВнесенияСредствНаДепозит(Операция)
	
	ЭтоСчетДепозитаБанка = БанковскиеПравила.ЭтоСчетДепозитаБанка(Операция.БалансовыйСчет);
	
	Возврат ЭтоСчетДепозитаБанка;
	
КонецФункции

Функция ЭтоОперацияВыплатаПроцентовПоДепозитуБанком(Операция)
	
	ЭтоБалансовыйСчетВылатаПроцентовПоДепозитуБанком =
		БанковскиеПравила.ЭтоСчетОбязательстваПоУплатеПроцентов(Операция.БалансовыйСчет);
	
	ЭтоВыплатаПроцентовПоДепозитуПоНазначениюПлатежа = БанковскиеПравила.ЭтоСчетРасходы(Операция.БалансовыйСчет)
		И НазначениеПлатежаУказываетНаВыплатуПроцентовПоДепозиту(Операция);
	
	Возврат ЭтоБалансовыйСчетВылатаПроцентовПоДепозитуБанком
		Или ЭтоВыплатаПроцентовПоДепозитуПоНазначениюПлатежа;
	
КонецФункции

Функция ЭтоОперацияСЦифровымКошельком(Операция)
	
	ЭтоСчетЦифровогоКошелька = БанковскиеПравила.ЭтоСчетаКредитныхОрганизацийПоОперациямСЦифровымиРублями(
		Операция.БалансовыйСчет);
	
	Возврат ЭтоСчетЦифровогоКошелька;
	
КонецФункции

#КонецОбласти

Функция ДопАналитикаВидовОпераций()
	
	АналитикаВидовОпераций = Новый Соответствие;
	
	ВозвратКредита = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
	
	АналитикаВидовОпераций.Вставить(ВозвратКредита, Новый Структура);
	АналитикаВидовОпераций[ВозвратКредита].Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
	
	ВозвратЗайма = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма;
	
	АналитикаВидовОпераций.Вставить(ВозвратЗайма, Новый Структура);
	АналитикаВидовОпераций[ВозвратЗайма].Вставить("ВидПлатежаПоКредитамЗаймам",
		Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
	
	Возврат АналитикаВидовОпераций;
	
КонецФункции

Функция ДопАналитикаПоВидуОперации(ВидОперацииДокумента)
	
	Аналитика = ДопАналитикаВидовОпераций();
	
	Возврат Аналитика[ВидОперацииДокумента];
	
КонецФункции

#КонецОбласти

#Область ПоискУчастниковОпераций

// Следует использовать при распознавании хозяйственных операций.
// В отличие от методов из ИдентификацияУчастниковБанковскихОпераций,
// методы из этой области сохраняют в параметрах определения хозяйственной операции
// к какой стороне операции относится каждая ссылка.
// Это позволяет корректно заполнить реквизиты новых объектов, не участвующие в идентификации ссылок,
// сведениями, содержащимися в выписке.
// Например, с помощью этого подхода заполняется город банка или наименование контрагента.
// 
// При вызове методов из области ПоискУчастниковОпераций еще нет уверенности, что ссылка будет включена в распознанную операцию.
// Поэтому непосредственно заполнение реквизитов новых объектов выполняется по завершении распознавания хозяйственной операции,
// только для тех ссылок, которые фактически включены в распознанную операцию - см. ЗаполнитьРеквизитыНовыхОбъектов()
//
// Параметры:
//  Отбор           - Структура - для передачи в ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку()
//  Параметры       - см. "НовыйПараметрыОпределенияХозяйственнойОперации"
//  ИмяПоля         - строка, используется для записи в протокол и получения данных документа
Функция НайтиСсылку(Отбор, Параметры, ИмяПоля, СторонаПолучателя = Истина)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[?(СторонаПолучателя, Параметры.СторонаКонтрагента, "Плательщик") + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[?(СторонаПолучателя, Параметры.СторонаКонтрагента, "Плательщик") + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, ?(СторонаПолучателя, Параметры.СторонаКонтрагента, "Плательщик"));
		
	КонецЕсли;
	
	Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция НайтиСсылки(Отбор, Параметры)
	
	Возврат ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор,
		,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
КонецФункции

Функция ВыбратьСсылку(НайденныеСсылки, Параметры, ИмяПоля)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ВыбратьСсылку(
		НайденныеСсылки,
		Параметры.УчастникиОпераций,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, Параметры.СторонаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколВыбора) Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	КонецЕсли;
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция СсылкаНового(Отбор, Тип, Параметры)
	
	Если Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		// При добавлении новой ссылки кеш устарел
		Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");
	КонецЕсли;
	
	Ссылка = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Отбор, 
		Тип,
		Параметры.УчастникиОпераций,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
		
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, Ссылка, Параметры.СторонаКонтрагента);
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

// Здесь под "контрагентами" понимаем другого участника операции.
//
// Это
// - плательщик, если речь идет о поступлении денег
// - получатель денег, если о списании.
//
// Как правило, это элемент справочника Контрагенты, но не только, например ФизическиеЛица или Организации.

Функция НайтиГосОрган(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	ВариантыГосОрган = Новый Массив; // Для того, чтобы найти элементы справочника, у которых флаг ГосОрган не установлен ошибочно
	ВариантыГосОрган.Добавить(Истина);
	ВариантыГосОрган.Добавить(Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Отбор.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Для Каждого ЭтоГосОрган Из ВариантыГосОрган Цикл
	
		Отбор.Вставить("ГосударственныйОрган", ЭтоГосОрган);
	
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			
			РезультатПоиска  = НайтиДоговорыКонтрагентов(Отбор, Параметры);
			ОписаниеДоговора = ВыбратьСсылку(РезультатПоиска, Параметры, "ДоговорКонтрагента");
			
			Если ОписаниеДоговора = Неопределено Тогда
				Возврат Ложь;
			Иначе
				УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
			Если ОписаниеКонтрагента <> Неопределено Тогда
				ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры)
	
	ХозяйственнаяОперация.Вставить("Контрагент",         ОписаниеДоговора.ОписаниеСсылки.Владелец);
	ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
	
	Если ЗначениеЗаполнено(ОписаниеДоговора.ОписаниеСсылки.ВидОплаты) Тогда
		ХозяйственнаяОперация.Вставить("ВидОплаты", ОписаниеДоговора.ОписаниеСсылки.ВидОплаты);
	КонецЕсли;
	
	Если Параметры.ПротоколыВыбораСсылок.Свойство("ДоговорКонтрагента") Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
	КонецЕсли;
	
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ХозяйственнаяОперация.Контрагент, Параметры.СторонаКонтрагента);// Выбирается неявно - через Владелец
	
КонецПроцедуры

Процедура ДобавитьОтбор(ОтборДоговоров, Свойство, Значение = Неопределено)
	
	Если ОтборДоговоров = Неопределено Тогда
		ОтборДоговоров = Новый Структура;
	КонецЕсли;
	
	ОтборДоговоров.Вставить(Свойство, Значение);
	
КонецПроцедуры

Функция НайтиДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, ВидОперации, ОтборДоговоров = Неопределено)
	
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ВидОперации, Параметры.КешОбщихПараметров);
	
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Поиск договора по виду операции используется в разных правилах.
	// Поэтому как только понадобится искать договор по виду операции,
	// составим и поместим в кеш все договоры в разрезе видов операций.
	ДоговорыПоВидам = Неопределено;
	Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		ДоговорыПоВидам = Параметры.КешПроверенныхСвойствПравил.ДоговорыКонтрагентовПоВидам;
	КонецЕсли;
	
	Если ДоговорыПоВидам = Неопределено
		Или Не ЗначениеЗаполнено(ДоговорыПоВидам.УстановленныеОсновными)
			И Не ЗначениеЗаполнено(ДоговорыПоВидам.Обычные) Тогда
		ДоговорыПоВидам = Новый Структура;
		ДоговорыПоВидам.Вставить("УстановленныеОсновными", Новый Соответствие);
		ДоговорыПоВидам.Вставить("Обычные",                Новый Соответствие);
		
		Если ХозяйственнаяОперация.Свойство("Контрагент") И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент) Тогда
			ДобавитьОтбор(ОтборДоговоров, "Владелец", ХозяйственнаяОперация.Контрагент);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из НайтиДоговорыКонтрагентов(ОтборДоговоров, Параметры) Цикл
			
			ОписаниеСсылки = КлючИЗначение.Значение.ОписаниеСсылки;
			УстановленОсновным = ОписаниеСсылки.УстановленОсновным;
			ВидДоговора        = ОписаниеСсылки.ВидДоговора;
			
			ОтношениеКОсновным = ?(УстановленОсновным, "УстановленныеОсновными", "Обычные");
			
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			
			Если НайденныеСсылки = Неопределено Тогда
				НайденныеСсылки = Новый Соответствие;
				ДоговорыПоВидам[ОтношениеКОсновным].Вставить(ВидДоговора, НайденныеСсылки);
			КонецЕсли;
			НайденныеСсылки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		Параметры.КешПроверенныхСвойствПравил.Вставить("ДоговорыКонтрагентовПоВидам", ДоговорыПоВидам);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорыПоВидам.УстановленныеОсновными) И Не ЗначениеЗаполнено(ДоговорыПоВидам.Обычные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем договоры
	ВидыОтношенияКОсновным = Новый Массив;
	ВидыОтношенияКОсновным.Добавить("УстановленныеОсновными"); // сначала ищем среди основных
	ВидыОтношенияКОсновным.Добавить("Обычные");
	Для Каждого ОтношениеКОсновным Из ВидыОтношенияКОсновным Цикл
		Для Каждого ВидДоговора Из ВидыДоговоров Цикл
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			Если НайденныеСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДоговора = ВыбратьСсылку(НайденныеСсылки, Параметры, "ДоговорКонтрагента");
			Если ОписаниеДоговора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
			Возврат Истина;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьБанк(ХозяйственнаяОперация, Параметры, ОтборДоговоров = Неопределено)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Отбор.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Отбор.Вставить("ГосударственныйОрган",      Ложь);
	
	ПоискКонтрагенты = НайтиСсылки(Отбор, Параметры);
	
	ВидДоговора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОтборДоговоров, "ВидДоговора");
	
	Если Не ЗначениеЗаполнено(ПоискКонтрагенты) Тогда
		// Возможно ИНН банка не заполнен, поищем его через банковский счет.
		Отбор = Новый Структура;
		Отбор.Вставить("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
		Отбор.Вставить("ВалютаДенежныхСредств", Параметры.ВладелецСчета.ВалютаСчета);
		ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
		
		Если ОписаниеСчета = Неопределено Тогда
			УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Иначе
			ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеСчета.ОписаниеСсылки.Владелец);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ВидДоговора = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Найдем или создадим договор
	Контрагент = Неопределено;
	Договор    = Неопределено;
	
	// Найдем договор этого вида. Возможно, и с контрагентом определимся.
	Для Каждого ОписаниеКонтрагента Из ПоискКонтрагенты Цикл
		ОтборДоговоров.Вставить("Владелец", ОписаниеКонтрагента.Значение.Ссылка);
		ОписаниеДоговора = НайтиСсылку(ОтборДоговоров, Параметры, "ДоговорКонтрагента");
		Если ОписаниеДоговора <> Неопределено Тогда
			Контрагент = ОписаниеДоговора.ОписаниеСсылки.Владелец;
			Договор    = ОписаниеДоговора.Ссылка;
			Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Контрагент = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		Контрагент = ОписаниеКонтрагента.Ссылка;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если Договор <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	Иначе
		ОтборДоговоров.Вставить("Владелец", Контрагент);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговоров, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФизическоеЛицо(ХозяйственнаяОперация, Параметры, ИмяПараметра = "Контрагент")
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	СторонаКонтрагента = ИмяПараметра = "Контрагент";
	
	ОписаниеФизическогоЛица = НайтиСсылку(Отбор, Параметры, ИмяПараметра, СторонаКонтрагента);
	
	Если ОписаниеФизическогоЛица <> Неопределено Тогда
		
		ФизическоеЛицо = ОписаниеФизическогоЛица.Ссылка;
		
	Иначе
		
		ФизическоеЛицо = СсылкаНового(Отбор, Отбор.Тип, Параметры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ХозяйственнаяОперация.Вставить(ИмяПараметра, ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, Знач Отбор = Неопределено)
	
	// Договор будет вида по умолчанию
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговора = ВидыДоговоров[0];
	
	// Ищем контрагента
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	Иначе
		Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	КонецЕсли;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	
	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
	
	Если ОписаниеКонтрагента = Неопределено Тогда
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	// Создадим только договор
	ОтборДоговор = Новый Структура;
	ОтборДоговор.Вставить("Владелец",    ОписаниеКонтрагента.Ссылка);
	ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
	Если ВидОперацииСодержитОтборПоВалютномуУчету(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		ОтборДоговор.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Отбор, "ВалютаВзаиморасчетов", Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета));
		ОтборДоговор.Вставить("ОплатаВВалюте", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ОплатаВВалюте", Ложь));
	КонецЕсли;
	УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	
КонецПроцедуры

Функция НайтиДоговорыКонтрагентов(Отбор, Параметры)
	
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	Если ЗначениеЗаполнено(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборДоговор, Отбор, Истина);
	КонецЕсли;
	
	Возврат НайтиСсылки(ОтборДоговор, Параметры);
	
КонецФункции

Процедура УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры)
	
	Если ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента")
		Или Не ХозяйственнаяОперация.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.Депозит
		Или ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Депозит Тогда
		// Если счет депозита не найден в самой операции, то еще раз не ищем, чтобы он не был создан.
		Возврат;
	КонецЕсли;
	
	Отбор = ОтборБанковскийСчет(ХозяйственнаяОперация.Контрагент, Параметры.ВладелецСчета.ВалютаСчета);
	
	ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
	
	Если ОписаниеСчета = Неопределено Тогда
		УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры);
	Иначе
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", ОписаниеСчета.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация.ВидОперацииДокумента)
		И Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета;
	
	// ВалютаВзаиморасчетов
	ВалютаВзаиморасчетов = Неопределено;
	Если ХозяйственнаяОперация.Свойство("ДоговорКонтрагента")
		И ЗначениеЗаполнено(ХозяйственнаяОперация.ДоговорКонтрагента) Тогда
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
			ХозяйственнаяОперация.ДоговорКонтрагента,
			Параметры.УчастникиОпераций);
		Если ОписаниеДоговора <> Неопределено Тогда
			ВалютаВзаиморасчетов = ОписаниеДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Параметры.ВладелецСчета.ВалютаСчета;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("ВалютаВзаиморасчетов") Или ХозяйственнаяОперация.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
		ХозяйственнаяОперация.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		ХозяйственнаяОперация.Удалить("КурсВзаиморасчетов");
		ХозяйственнаяОперация.Удалить("КратностьВзаиморасчетов");
	КонецЕсли;
	
	// КурсВзаиморасчетов, КратностьВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("КурсВзаиморасчетов") 
		Или Не ХозяйственнаяОперация.Свойство("КратностьВзаиморасчетов") Тогда
		
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Параметры.Операция.ДатаИсполнения);
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      КурсКратность.Курс);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", КурсКратность.Кратность);
		Иначе
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
		КонецЕсли;
		ХозяйственнаяОперация.Удалить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	// СуммаВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("СуммаВзаиморасчетов") Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета <> ВалютаРегламентированногоУчета Тогда
			КурсКратностьВалютыПлатежа = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Параметры.ВладелецСчета.ВалютаСчета,
				Параметры.Операция.ДатаИсполнения);
		Иначе
			КурсКратностьВалютыПлатежа = Новый Структура();
			КурсКратностьВалютыПлатежа.Вставить("Курс", 		1);
			КурсКратностьВалютыПлатежа.Вставить("Кратность", 	1);
		КонецЕсли;
			
		СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Параметры.Операция.Сумма,
			Параметры.ВладелецСчета.ВалютаСчета,             // Из - Валюта
			ХозяйственнаяОперация.ВалютаВзаиморасчетов,      // В  - Валюта
			КурсКратностьВалютыПлатежа.Курс,                 // Из - Курс
			ХозяйственнаяОперация.КурсВзаиморасчетов,        // В  - Курс
			КурсКратностьВалютыПлатежа.Кратность,            // Из - Кратность
			ХозяйственнаяОперация.КратностьВзаиморасчетов);  // В  - Кратность
		
		ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
		ХозяйственнаяОперация.Вставить("СуммаИзВыписки",      Параметры.Операция.Сумма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПокупателями(ХозяйственнаяОперация.ВидОперацииДокумента)
		И Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПоставщиками(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОНДС = ВыделитьНДСИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, Параметры.Операция.Сумма);
	Если ИнформацияОНДС.Свойство("СтавкаНДС") Тогда
		ХозяйственнаяОперация.Вставить("СтавкаНДС", ИнформацияОНДС.СтавкаНДС);
	КонецЕсли;
	
	Если ИнформацияОНДС.Свойство("СуммаНДС") Тогда
		ХозяйственнаяОперация.Вставить("СуммаНДС", ИнформацияОНДС.СуммаНДС);
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СтавкаНДС") Тогда
		
		Если Параметры.Операция.ПоступилоСписано = "Поступило"
			Или ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Параметры.ВладелецСчета.Организация, Параметры.Операция.ДатаИсполнения);
		Иначе
			// Уточнение для контрагента будет произведено ниже, из договора.
			ПлательщикНДС = Истина;
		КонецЕсли;
		
		СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПользователя(Параметры.Операция.ДатаИсполнения, ПлательщикНДС);
		
		Если ПлательщикНДС И ХозяйственнаяОперация.Свойство("ДоговорКонтрагента")
			И НЕ ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			ОписаниеНовогоДоговора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
				ХозяйственнаяОперация.ДоговорКонтрагента,
				Параметры.УчастникиОпераций);
			
			Если ОписаниеНовогоДоговора = Неопределено Тогда
				// Это уже не новый договор и пользователь мог для него указать особенности исчисления ставки
				ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
					ХозяйственнаяОперация.ДоговорКонтрагента,
					Параметры.УчастникиОпераций);
				Если ОписаниеСсылки <> Неопределено Тогда
					СтавкаНДС = Справочники.ДоговорыКонтрагентов.СтавкаНДСПоДоговору(
						Параметры.Операция.ДатаИсполнения,
						ХозяйственнаяОперация.ДоговорКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ХозяйственнаяОперация.Вставить("СтавкаНДС", СтавкаНДС);
		ХозяйственнаяОперация.Удалить("СуммаНДС");
		
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СуммаНДС") Тогда
		
		СуммаНДС = ВычислитьСуммуНДС(ХозяйственнаяОперация.СтавкаНДС, Параметры.Операция.Сумма);
		ХозяйственнаяОперация.Вставить("СуммаНДС", СуммаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКодВалютнойОперации(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	КодВалютнойОперации = ВыделитьКодВалютнойОперацииИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа);
	Если ЗначениеЗаполнено(КодВалютнойОперации) Тогда
		ХозяйственнаяОперация.Вставить("КодВалютнойОперации", КодВалютнойОперации);
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора = Неопределено)
	
	Контрагент = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.Контрагенты"),
		Параметры);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		ОтборДоговор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
		ОтборДоговор.Вставить("Владелец",    Контрагент);
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	КонецЕсли;
	
	ОтборБанковскогоСчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	ОтборБанковскогоСчета.Вставить("Владелец", Контрагент);
	
	УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, ОтборБанковскогоСчета, Параметры);
	
КонецПроцедуры

Процедура УстановитьКонтрагента(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено, Отбор = Неопределено)
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
	Если ОписаниеКонтрагента <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	Иначе
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговор(ХозяйственнаяОперация, Отбор, Параметры)
	
	ЗаполнятьОтборПоВалютномуУчету
		= Не ВидОперацииСодержитОтборПоВалютномуУчету(ХозяйственнаяОперация.ВидОперацииДокумента);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Отбор,
		ОтборДоговорКонтрагента(Параметры, ЗаполнятьОтборПоВалютномуУчету),
		Истина);
	
	Договор = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.ДоговорыКонтрагентов"),
		Параметры);
		
	Если ЗначениеЗаполнено(Договор) Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборДоговорКонтрагента(Параметры, ЗаполнятьОтборПоВалютномуУчету = Истина)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",         Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Отбор.Вставить("Организация",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Параметры.ВладелецСчета.Организация));
	
	Если Параметры.КешОбщихПараметров.ИспользоватьВалютныйУчет И ЗаполнятьОтборПоВалютномуУчету Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета Тогда
			// Оплата в национальной валюте, расчеты могут быть и в национальной валюте и в условных единицах.
			Отбор.Вставить("ОплатаВВалюте",        Ложь);
		Иначе
			// Оплата и расчеты в иностранной валюте
			Отбор.Вставить("ОплатаВВалюте",        Истина);
			Отбор.Вставить("ВалютаВзаиморасчетов", Параметры.ВладелецСчета.ВалютаСчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Процедура УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры)
	
	Отбор.Вставить("ВалютаДенежныхСредств", Параметры.ВладелецСчета.ВалютаСчета);
	
	БанковскийСчет = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.БанковскиеСчета"),
		Параметры);
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеГосОргана(РеквизитыПлатежаВБюджет)
	
	Описание = Новый Структура;
	Описание.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Описание.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Описание.Вставить("ГосударственныйОрган",      Истина);
	
	Если РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	Иначе
		КБК = "";
	КонецЕсли;
	
	ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(КБК);
	
	Если НЕ ЗначениеЗаполнено(ВидГосударственногоОргана) Тогда
		ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли;
	Описание.Вставить("ВидГосударственногоОргана", ВидГосударственногоОргана);
	
	Возврат Описание;
	
КонецФункции

Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации, КешОбщихПараметров)
	
	Результат = КешОбщихПараметров.ВидыДоговоровПоВидамОпераций[ВидОперации];
	Если Результат = Неопределено Тогда
		Результат = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыДоговоровДокумента(ВидОперации);
		КешОбщихПараметров.ВидыДоговоровПоВидамОпераций.Вставить(ВидОперации, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПодотчетноеЛицо(ХозяйственнаяОперация, Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",        Тип("СправочникСсылка.ФизическиеЛица"));
	Отбор.Вставить("Владелец",   Параметры.ВладелецСчета.БанковскийСчет);
	Отбор.Вставить("НомерКарты", Параметры.ВладелецСчета.БанковскийСчет);
	
	ОписаниеПодотчетноеЛицо = НайтиСсылку(Отбор, Параметры, "Контрагент");
	Если ОписаниеПодотчетноеЛицо <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеПодотчетноеЛицо.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборБанковскийСчет(Владелец, ВалютаСчета)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                   Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец",              Владелец);
	Отбор.Вставить("ВалютаДенежныхСредств", ВалютаСчета);
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область РеквизитыНовыхОбъектов

Процедура ЗаписатьИсточникСсылки(ИсточникиСсылок, Ссылка, СторонаОперации)
	
	ИсточникиСсылок.Вставить(Ссылка, СторонаОперации);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовыхОбъектов(УчастникиОпераций, ХозяйственнаяОперация, Операция, ИсточникиСсылок, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	Для Каждого РеквизитОперации Из ХозяйственнаяОперация Цикл
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(РеквизитОперации.Значение, УчастникиОпераций);
		Если ОписаниеНовогоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СторонаОперации = ИсточникиСсылок[ОписаниеНовогоОбъекта.Ссылка];
		Если СторонаОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	// из Операция выберем элементы для заполнения реквизитов объекта с учетом СторонаОперации
	ВсеРеквизиты = Операция[СторонаОперации + "Реквизиты"];
	
	РеквизитыНовогоОбъекта = Новый Структура;
	Если ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеПолное", "Наименование");
		Если РеквизитыНовогоОбъекта.Свойство("НаименованиеПолное") Тогда
			Наименование = УдалитьТекстПослеРазделителя(РеквизитыНовогоОбъекта.НаименованиеПолное);
			РеквизитыНовогоОбъекта.Вставить("Наименование", Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(Наименование));
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "Наименование");
		Если РеквизитыНовогоОбъекта.Свойство("Наименование") Тогда
			Наименование = РеквизитыНовогоОбъекта.Наименование;
			РеквизитыНовогоОбъекта.Наименование = УдалитьТекстПослеРазделителя(Наименование);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		// См. РаботаСБанкамиБП.УстановитьБанк()
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеБанка", "Банк");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "ГородБанка",        "ГородБанка");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "КоррСчетБанка",     "КорСчет");
		// БИК банка может не поставляться, если операция внутри банка. В таком случае возьмем БИК владельца счета.
		Если Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.БИК) 
			И Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.ВозможныйБИК)
			И ЗначениеЗаполнено(ВладелецСчета.БИК) Тогда
			РеквизитыНовогоОбъекта.Вставить("ВозможныйБИК", ВладелецСчета.БИК);
		КонецЕсли;
	КонецЕсли;
	
	// заполним недостающие элементы в ОписаниеНовогоОбъекта
	ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
		ОписаниеНовогоОбъекта,
		РеквизитыНовогоОбъекта,
		КешОписанийРеквизитов);
	
КонецПроцедуры

Процедура ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, ИмяРеквизита, Знач ИмяРеквизитаВсеРеквизиты = "")
	
	Если ПустаяСтрока(ИмяРеквизитаВсеРеквизиты) Тогда
		ИмяРеквизитаВсеРеквизиты = ИмяРеквизита;
	КонецЕсли;
	
	Если Не ВсеРеквизиты.Свойство(ИмяРеквизитаВсеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНовогоОбъекта.Вставить(ИмяРеквизита, ВсеРеквизиты[ИмяРеквизитаВсеРеквизиты]);
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиДДС

Процедура УстановитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация, Параметры)
	
	Если Не Параметры.КешОбщихПараметров.ИспользоватьСтатьиДвиженияДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Параметры.Правило.ОсновнаяСтатьяДДС;
	
	Налог = "";
	ВидНалоговогоОбязательства = "";
	Если ХозяйственнаяОперация.Свойство("Налог", Налог)
		И ХозяйственнаяОперация.Свойство("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства)
		И УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалога(ВидНалоговогоОбязательства) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
		Если УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(ВидНалога) Тогда
			КонтекстОперации = "НалогНаПрибыль";
			СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатыСамозанятым

Функция ВыбратьРеестрПоПриоритету(РеестрыВыплат, ХозяйственнаяОперация, Параметры)
	
	РеестрВыплат = Неопределено;
	
	Операция = Параметры.Операция;
	
	Сумма = Операция.Сумма;
	БанковскийСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "БанковскийСчетКонтрагента");
	НазначениеПлатежа = НРег(СокрЛП(СтрЗаменить(Операция.НазначениеПлатежа, Символы.ПС, " ")));
	
	Если Не ЗначениеЗаполнено(Операция.СловаНазначениеПлатежа) Тогда
		Операция.РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
		Операция.СловаНазначениеПлатежа  = СтрРазделить(НазначениеПлатежа, Операция.РазделителиИзНазначения, Ложь);
	КонецЕсли;
	
	НайденныеРеестры = Новый Массив;
	
	Для Каждого СтрокаРеестра Из РеестрыВыплат Цикл
		НомерБезПрефикса = НРег(СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаРеестра.Номер, Истина, Истина)));
		ВхожденияНомера = ВхожденияНомераВТексте(Операция.СловаНазначениеПлатежа, НомерБезПрефикса);
		ЕстьНомер = ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера;
		Если Не ЕстьНомер И ВхожденияНомера.ПозицииТочногоВхожденияНомера.Количество() > 0 Тогда
			ЕстьНомер = ЭтоНомерПоОкрестностиНомераВТексте(
				ВхожденияНомера.ПозицииТочногоВхожденияНомера, Операция.СловаНазначениеПлатежа);
		КонецЕсли;
		
		Оценщик = НачатьОценкуСоответствия();
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ОценитьСоответствиеПоКритерию(Оценщик, БанковскийСчет = СтрокаРеестра.БанковскийСчет);
		КонецЕсли;
		
		ОценитьСоответствиеПоКритерию(Оценщик, ЕстьНомер);
		ОценитьСоответствиеПоКритерию(Оценщик, Сумма = СтрокаРеестра.Сумма);
		ОценитьСоответствиеПоКритерию(Оценщик, Сумма < СтрокаРеестра.Сумма);
		
		Реестр = Новый Структура("РеестрВыплат, Оценщик");
		Реестр.РеестрВыплат = СтрокаРеестра.РеестрВыплат;
		Реестр.Оценщик      = Оценщик;
		НайденныеРеестры.Добавить(Реестр);
	КонецЦикла;
	
	МаксимальныйПриоритет = 0;
	Для Каждого Реестр Из НайденныеРеестры Цикл
		Если МаксимальныйПриоритет < Реестр.Оценщик.Приоритет Тогда
			МаксимальныйПриоритет = Реестр.Оценщик.Приоритет;
			РеестрВыплат = Реестр.РеестрВыплат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеестрВыплат;
	
КонецФункции

Процедура УстановитьРеестрВыплатСамозанятым(ХозяйственнаяОперация, Параметры)
	
	Сумма = Параметры.Операция.Сумма;
	Организация = Параметры.ВладелецСчета.Организация;
	ДатаДокумента = Параметры.Операция.ДатаДокумента;
	Если Не Параметры.ВладелецСчета.ПротоколыВыбораСсылок.Свойство("РеестрВыплатыСамозанятым") Тогда
		Параметры.ВладелецСчета.ПротоколыВыбораСсылок.Вставить("РеестрВыплатыСамозанятым", Новый Массив);
	КонецЕсли;
	МассивРанееВыбранныхРеестров = Параметры.ВладелецСчета.ПротоколыВыбораСсылок.РеестрВыплатыСамозанятым;
	Если ХозяйственнаяОперация.ВидОперацииДокумента
		= Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаСамозанятому Тогда
		Самозанятый = ХозяйственнаяОперация.Контрагент;
		РеестрыВыплат = Документы.ВыплатыСамозанятым.РеестрыВыплатПоСамозанятому(Самозанятый, Сумма, Организация, ДатаДокумента);
		
		РеестрВыплат = ВыбратьРеестрПоПриоритету(РеестрыВыплат, ХозяйственнаяОперация, Параметры);
	Иначе
		РеестрВыплат = Документы.ВыплатыСамозанятым.РеестрВыплатСамозанятымПоСумме(
			Сумма, Организация, ДатаДокумента, МассивРанееВыбранныхРеестров);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеестрВыплат) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим ранее выбранные реестры выплаты самозанятым
	Параметры.ВладелецСчета.ПротоколыВыбораСсылок.РеестрВыплатыСамозанятым.Добавить(РеестрВыплат);
	
	ХозяйственнаяОперация.Вставить("РеестрВыплатСамозанятым", РеестрВыплат);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Функция ТипДокументаОперацииВыписки(Операция)
	
	Если Операция.ПоступилоСписано = "Списано" Тогда
		Возврат Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
	ИначеЕсли Операция.ПоступилоСписано = "Поступило" Тогда
		Возврат Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПоискРанееСозданныхДокументов

#Область Описание
// Алгоритм поиска документов
//
// 0. Выполняем для каждой выписки раздельно. При этом отдельно ищем
//    a. платежные поручения (в терминах ISO 20022 - initiation documents; серия документов pain)
//    b. ранее созданные документы поступления на счет и списания со счета (в ISO 20022 - серия документов camt)
// Для тех записей выписки, для которых нашли платежные поручения, документы списания со счета не ищем - 
// устанавливаем через связи документов в ИБ (документы-основания).
//
// 1. Платежные поручения
//
// 1.1.  Поиск ссылок
//
// 1.1.1 Из информационной базы выбираем все платежные поручения по тому счету, выписку по которому обрабатываем,
//       за период, определенный по загружаемому файлу.
//       Период определяется исходя из дат документов, а не дат движения по банковскому счету.
//
// 1.1.2 Для каждого выбранного из ИБ документа определяем набор идентификаторов.
//
//       Формат обмена не обеспечивает однозначной идентификации:
//       - в информационной базе документы имеют префикс, а в банк передаются без префикса
//       - при передаче в банк и из банка длина идентификатора может быть сокращена до 6 символов
//       - нецифровые символы в номере в информационной системе банка могут быть утрачены
//
//       Поэтому сначала выбираем документы по наименее строгим критериям (минимально необходимому идентификатору, о нем - ниже),
//       а если таких документов оказывается несколько, то среди них выбираем наиболее соответствующие друг другу.
//
//       Набор идентификаторов документа такой:
//      a. Номер документа без префикса (т.е. такой, который передается в банк или печатается в платежном поручении)
//      b. "Чистый" номер документа - без префикса, не более 6 символов, по возможности состоящий из цифр
//          (если в правых 6 символах есть цифры, то в "чистый номер" включаются только они;
//           если нет ни одной цифры, то выбираются все 6 правых символов).
//      c. Минимально необходимый идентификатор - строка, которая включает
//          Дату; Номер счета получателя; "чистый номер".
//          
// 1.1.3 Те же идентификаторы определяем для каждой записи файла, которая похожа на платежное поручение, оформленное владельцем счета.
//
// 1.1.4 Сопоставляем документы по минимальному необходимому идентификатору.
//       Получаем пары:
//       - идентификатор (порядковый номер) записи в файле
//       - ссылка.
//
//       В этих парах одной записи в файле может соответствовать несколько ссылок и наоборот.
//
// 1.1.5 Для каждой пары определяем "вес" или степень соответствия записи в файле и ссылки.
//
//       Скажем, степень соответствия может быть повышена при 
//       - точном соответствим номера документа без префикса
//       - ИНН получателя денег
//       - суммы
//       Также степень соответствия может быть повышена, если документ в информационной базе более "готовый" - скажем, проведен.
//
//       В протокол фиксируем, какие признаки ссылки и записи файла определили степень соответствия.
//
// 1.2. Выбор наиболее подходящих пар - см. ВыбратьЛучшиеСоответствияДокументовОперациям()
//
// 2. Часть записей в выписке не инициированы владельцем счета. Для таких платежек в базе нет.
//    Для инициированных владельцем счета платежей также в ИБ могут отсутствовать документы "Платежное поручение".
//
//    Для всех таких записей следует попытаться найти в информационной базе соответствующие документы -
//    "Поступление на счет" и "Списание со счета"
//    При этом, искать следует только среди таких документов информацинной базы, которые не связаны с платежками,
//    потому что связанные с платежками должны быть найдены на шаге 1.
//
// 2.1. Ищем ссылки, примерно так, как описано в п. 1.1.
//      Ищем дважды - отдельно для списания, отдельно для поступления.
//      Особенности:
// 2.1.1 Ищем все документы по конкретному счету, причем те, для которых нет платежек.
//       Период определяем по выписке.
//
// 2.1.2 Минимально необходимый идентификатор включает
//       - Дату проведения операции банком
//       - Номер документа "как есть", однако ограниченный предельной длиной, допустимой в ИБ и стандартом
//          
// 2.1.3 При определении веса учитываем
//
//       - совпадение даты входящего документа
//       - совпадение ИНН контрагента и его номера счета, в следующих комбинациях (по убыванию приоритета)
//         - совпадает и ИНН и номер счета
//         - ИНН совпадает, но номер счета неизвестен
//         - ИНН совпадает, но номер счета нет
//         - совпадает только номер счета, но не ИНН
//       - равенство сумм
//
// 2.2. Выбираем наиболее подходящие пары - также, как в п. 1.1.
//      При этом один документ в базе данных может быть представлен только одной записью в файле.
//
#КонецОбласти

Процедура НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки те строки, что могут быть результатом проведения банком распоряжений владельца счета (платежных поручений).
	// Одновременно определим период, за который эти платежные поручения. 
	// Предполагаем, что выписка содержит документы за непрерывный период.
	// Не используем значения свойств выписки НачалоПериода и КонецПериода, 
	// так как они соответствуют дате исполнения платежки, а не дате ее оформления.
	ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
	НачалоПериода               = Неопределено;
	КонецПериода                = Неопределено;
	ЕстьИдентификаторыЭД        = Ложь;
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Не ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерБанковскогоСчетаКонтрагента = Операция.НомерСчетаКонтрагента;
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(
			Операция.ДатаДокумента,
			Операция.НомерДокумента,
			НомерБанковскогоСчетаКонтрагента);
			// В платежках можно включать в ключ номер счета, но в строках выписки - нет.
			// Потому что контрагент в созданных документах - это не достаточно надежный признак для поиска документов.
			// На него надо опираться, но искать и документы с другими контрагентами (с меньшим приоритетом).
			// Например, потому что пользователь может указать "сводного контрагента" - т.е. не такого, как в файлах выписки.
		
		ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючу = Неопределено Тогда
			ОперацииПоКлючу = Новый Массив;
			ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
		КонецЕсли;
		
		ИдентификаторДокумента = Операция.ИдентификаторДокумента;
		Если Не ПустаяСтрока(ИдентификаторДокумента) Тогда
			ЕстьИдентификаторыЭД = Истина;
			ОперацииПоИдентификатору = ОперацииДляПоискаДокументов[ИдентификаторДокумента];
			Если ОперацииПоИдентификатору = Неопределено Тогда
				ОперацииПоИдентификатору = Новый Массив;
				ОперацииДляПоискаДокументов.Вставить(ИдентификаторДокумента, ОперацииПоИдентификатору);
			КонецЕсли;
			
			ОперацииПоИдентификатору.Добавить(Операция);
		КонецЕсли;
		
		ОперацииПоКлючу.Добавить(Операция);
		РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаДокумента);
		
	КонецЦикла;
	
	Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем платежные поручения владельца счета за период
	
	Если ЕстьИдентификаторыЭД Тогда
		// Расширяем период "слева", чтобы иметь в выборке платежи за период до начала выписки, на случай,
		// если банк передаёт неправильные даты исходных платежных поручений (в этом случае даты "больше").
		// Если банк передает неправильные даты, то механизм поиска платежей по реквизитам,
		// с большой вероятностью ничего не найдет.
		// В этом случае платеж может быть найден с помощью поиска по идентификатору, переданному из механизма ДиректБанка
		// - в этом случае проверка даты не требуется, т.к. идентификатор сам обеспечивает уникальность найденного документа.
		// На случай, если расширение периода привнесет "дубли" документов при поиске "по реквизитам",
		// добавляется признак ДатаИзРасширенногоПериода - документ с таким признаком будет иметь меньший приоритет,
		// чем документ с такими же реквизитами, но найденный в периоде "без расширения".
		НачалоПериодаРасширенное = НачалоПериода - 10 * 24 * 60 * 60; // расширим на дату актуальности ПП (10 дней)
	Иначе
		НачалоПериодаРасширенное = НачалоПериода;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
	Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
	Запрос.УстановитьПараметр("НачалоПериодаРасширенное",  НачалоПериодаРасширенное);
	Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Дата < &НачалоПериода КАК ДатаИзРасширенногоПериода,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК НомерБанковскогоСчетаКонтрагента,
	|	ПлатежноеПоручение.Проведен КАК Проведен,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННКонтрагента,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Ссылка, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ДокументИсполнения,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Дата, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))), ДЕНЬ) КАК ДатаИсполнения,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.СуммаДокумента, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.СуммаДокумента, 0)) КАК СуммаИсполнения
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаОснование
	|		ПО ПлатежноеПоручение.ДокументОснование = СписаниеСРасчетногоСчетаОснование.Ссылка
	|			И (НЕ СписаниеСРасчетногоСчетаОснование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаПодчиненное
	|		ПО ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчетаПодчиненное.ДокументОснование
	|			И (НЕ СписаниеСРасчетногоСчетаПодчиненное.ПометкаУдаления)
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &НачалоПериодаРасширенное И &КонецПериода
	|	И ПлатежноеПоручение.СчетОрганизации = &БанковскийСчетОрганизации
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаИсполнения)
	|ПО
	|	ПлатежноеПоручение";
	
	СоответствиеДокументовБанкаКлиента = НовыйСоответствиеДокументовБанкаКлиента();
	
	ИдентификаторОперацииКлиент = 0; // Пронумеруем строки результата запроса
	
	СуммыПлатежныхПоручений = Новый Соответствие;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ЕстьИдентификаторыЭД Тогда
		МассивНеуникальныхПП = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПлатежноеПоручение");
		МассивПП = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеуникальныхПП);
		
		// После обновления БЭД использовать ОбменСБанками.ПолучитьИдентификаторыЭДДокументов()
		МассивИдентификаторовЭД = ЭлектронноеВзаимодействиеБПВызовСервера.ПолучитьИдентификаторыЭДДокументов(МассивПП);
	КонецЕсли;
	
	ВыборкаПлатежныхПоручений = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПлатежныхПоручений.Следующий() Цикл
		
		НомерБезПрефикса                 = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПлатежныхПоручений.Номер, Истина, Истина));
		ДатаПлатежногоПоручения          = НачалоДня(ВыборкаПлатежныхПоручений.Дата);
		НомерБанковскогоСчетаКонтрагента = Строка(ВыборкаПлатежныхПоручений.НомерБанковскогоСчетаКонтрагента);
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(ДатаПлатежногоПоручения, НомерБезПрефикса, НомерБанковскогоСчетаКонтрагента);
		
		НомерСПрефиксомИнтеграции = "";
		ЭтоСчетИнтеграции = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Если ЭтоСчетИнтеграции Тогда
			НомерСПрефиксомИнтеграции = РегистрыСведений.ДокументыИнтеграцииСБанком.НомерОбъектаСПрефиксомБанкаИнтеграции(
				НомерБезПрефикса,
				РаспознаннаяВыписка.ВладелецСчета.Организация,
				РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		КонецЕсли;
		
		ОперацииПоИдентификаторуЭД = Неопределено;
		Если ЕстьИдентификаторыЭД Тогда
			ИндексПП = МассивПП.Найти(ВыборкаПлатежныхПоручений.ПлатежноеПоручение);
			Если ИндексПП <> Неопределено И МассивИдентификаторовЭД[ИндексПП] <> Неопределено Тогда
				ОперацииПоИдентификаторуЭД = ОперацииДляПоискаДокументов[МассивИдентификаторовЭД[ИндексПП]];
			КонецЕсли;
		КонецЕсли;
		
		Если ОперацииПоИдентификаторуЭД = Неопределено Тогда
			ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
		Иначе
			ОперацииПоКлючуБанк = ОперацииПоИдентификаторуЭД;
		КонецЕсли;
		
		Если ОперацииПоКлючуБанк = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыПлатежныхПоручений.Вставить(
			ВыборкаПлатежныхПоручений.ПлатежноеПоручение,
			ВыборкаПлатежныхПоручений.Сумма - ВыборкаПлатежныхПоручений.СуммаИсполнения);
		
		// Каждый элемент выборки содержит "операцию": сочетание документов "Платежное поручение" и "Списание с расчетного счета".
		// Для работы алгоритма ниже, также нужны сочетания всех платежных поручений с незаполненным "Списанием...".
		// Однако, в выборке такие будут только в случае, когда нет ни одного "Списания", соответствующего платежке.
		// Поэтому, при необходимости будем дополнять данные запроса записями с незаполненными "Списаниями".
		ВыбраноПлатежноеПоручениеБезДокументаИсполнения = Ложь;
		
		ВыборкаОперацийКлиент = ВыборкаПлатежныхПоручений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОперацийКлиент.Следующий() Цикл
			
			ВыбраноПлатежноеПоручениеБезДокументаИсполнения = ВыбраноПлатежноеПоручениеБезДокументаИсполнения 
				Или Не ЗначениеЗаполнено(ВыборкаОперацийКлиент.ДокументИсполнения);
			
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				ВыборкаОперацийКлиент,
				УчастникиОпераций,
				НомерСПрефиксомИнтеграции);
			
		КонецЦикла;
		
		Если Не ВыбраноПлатежноеПоручениеБезДокументаИсполнения Тогда
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				Неопределено,
				УчастникиОпераций,
				НомерСПрефиксомИнтеграции);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовБанкаКлиента, СуммыПлатежныхПоручений);
	
	Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовБанкаКлиента Цикл
		
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
		РаспознаннаяОперация.ПлатежноеПоручение = СоответствиеДокументаОперации.ПлатежноеПоручение;
		РаспознаннаяОперация.Ссылка             = СоответствиеДокументаОперации.ДокументИсполнения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(СоответствиеДокументовБанкаКлиента,
	                                                         ОперацииБанк,
															 ИдентификаторОперацииКлиент,
															 ПлатежноеПоручение,
															 НомерБезПрефикса,
															 ОперацияКлиент,
															 УчастникиОпераций,
															 НомерСПрефиксомИнтеграции)
	
	ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
	
	Для Каждого Операция Из ОперацииБанк Цикл
		
		Если ОперацияКлиент = Неопределено Тогда
			// Нет сведений об исполнении операции.
			ДатаИсполнения     = Неопределено;
			СуммаИсполнения    = Неопределено;
			ДокументИсполнения = Неопределено;
		Иначе
			ДатаИсполнения     = ОперацияКлиент.ДатаИсполнения;
			СуммаИсполнения    = ОперацияКлиент.СуммаИсполнения;
			ДокументИсполнения = ОперацияКлиент.ДокументИсполнения;
		КонецЕсли;
		
		Соответствие = СоответствиеДокументовБанкаКлиента.Добавить();
		
		Соответствие.ИдентификаторОперацииБанк   = Операция.Идентификатор;
		Соответствие.ОперацияБанк                = Операция;
		Соответствие.СуммаОперацииБанк           = Операция.Сумма;
		
		Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
		Соответствие.ПлатежноеПоручение          = ПлатежноеПоручение.ПлатежноеПоручение;
		Соответствие.ДокументИсполнения          = ДокументИсполнения;
		Соответствие.СуммаОперацииКлиент         = СуммаИсполнения;
		
		Оценщик = НачатьОценкуСоответствия();
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Проведен);
		ОценитьСоответствиеПоКритерию(Оценщик, НомерБезПрефикса         = Операция.НомерДокумента);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Номер = НомерСПрефиксомИнтеграции);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Номер = Операция.НомерДокумента);
		
		ОценитьСоответствиеПоКритерию(Оценщик, Не ПлатежноеПоручение.ДатаИзРасширенногоПериода);
		ОценитьСоответствиеПоКритерию(Оценщик, ДатаИсполнения  = Операция.ДатаИсполнения);
		ОценитьСоответствиеПоКритерию(Оценщик, СуммаИсполнения = Операция.Сумма);
		
		НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
			Операция.ПолучательИдентификаторы,
			ПлатежноеПоручение.Контрагент,
			УчастникиОпераций);
		ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
		
		ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(ПлатежноеПоручение.ИННКонтрагента));
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма = Операция.Сумма);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма > Операция.Сумма);
		
		Соответствие.Приоритет = Оценщик.Приоритет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки строки без платежных поручений - то есть те, что 
	// - либо были инициированы не владельцем счета (входящие платежи, прямое дебитование)
	// - либо были инициированы из другой программы (например, непосредственно на сайте банка)
	// 
	// Для этих строк установим соответствие документов в информационной базе по реквизитам документов.
	//
	// Для строк с платежными поручениями соответствие установлено вне этой процедуры другим способом - 
	// по связи в информационной базе между платежкой и документами движений по банковскому счету -
	// у таких документов будет меньший приоритет.
	//
	// Алгоритм поиска описан в области "Описание"
	
	// Ищем раздельно среди поступлений на счет и списаний.
	Для Каждого ПоступилоСписано Из ВариантыПоступилоСписано() Цикл
		
		ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
		// Одновременно определим период, за который искать документы.
		// Предполагаем, что выписка содержит документы за непрерывный период.
		// Не используем значения свойств выписки НачалоПериода и КонецПериода, чтобы по возможности сократить выборку.
		НачалоПериода = Неопределено;
		КонецПериода  = Неопределено;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			Если ЗначениеЗаполнено(Операция.ПоступилоСписано) И Операция.ПоступилоСписано <> ПоступилоСписано Тогда
				Продолжить;
			КонецЕсли;
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда 
				// Ссылку получили из платежного поручения или по идентификатору сервиса АУСН
				Продолжить;
			КонецЕсли;
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Операция.ДатаИсполнения, Операция.НомерДокумента);
			// В общем случае документы могут исходить от разных контрагентов и нумероваться независимо.
			// Поэтому для идентификации документа недостаточно даты и номера - нужны еще и данные о контрагенте.
			// Их учтем ниже в виде приоритетов.
			
			ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючу = Неопределено Тогда
				ОперацииПоКлючу = Новый Массив;
				ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
			КонецЕсли;
			
			ОперацииПоКлючу.Добавить(Операция);
			РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
		Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем документы за период
		
		// Приоритет при поиске отдается документам, которые не связаны с документами инициации платежа,
		// потому что по документам инициации платежа ищем отдельно.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
		
		Если ПоступилоСписано = "Поступило" Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	ИСТИНА КАК НетОснованияПлатежноеПоручение,
			|	Документы.РеквизитыКонтрагента.(
			|		Реквизит КАК Реквизит,
			|		Значение КАК Значение
			|	) КАК РеквизитыКонтрагента
			|ИЗ
			|	Документ.ПоступлениеНаРасчетныйСчет КАК Документы
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.СчетОрганизации = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И НЕ Документы.ПометкаУдаления";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	ПлатежноеПоручениеОснование.Ссылка ЕСТЬ NULL КАК НетОснованияПлатежноеПоручение,
			|	Документы.РеквизитыКонтрагента.(
			|		Реквизит КАК Реквизит,
			|		Значение КАК Значение
			|	) КАК РеквизитыКонтрагента
			|ИЗ
			|	Документ.СписаниеСРасчетногоСчета КАК Документы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеПодчиненное
			|		ПО Документы.Ссылка = ПлатежноеПоручениеПодчиненное.ДокументОснование
			|			И (НЕ ПлатежноеПоручениеПодчиненное.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеОснование
			|		ПО Документы.ДокументОснование = ПлатежноеПоручениеОснование.Ссылка
			|			И (НЕ ПлатежноеПоручениеОснование.ПометкаУдаления)
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.СчетОрганизации = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И ПлатежноеПоручениеПодчиненное.ДокументОснование ЕСТЬ NULL
			|	И НЕ Документы.ПометкаУдаления";
		
		КонецЕсли;
		
		ИмяКонтрагента = СторонаКонтрагента(ПоступилоСписано);
		
		СоответствиеДокументовОперациям = НовыйСоответствиеДокументовБанкаКлиента();
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИдентификаторОперацииКлиент = 0; // Соответствует каждой строке выборки
		Пока Выборка.Следующий() Цикл
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Выборка.ДатаИсполнения, Выборка.Номер);
			
			ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючуБанк = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
			
			СохраненныеИдентификаторыКонтрагента = Новый Соответствие;
			ВыборкаРеквизитыКонтрагента = Выборка.РеквизитыКонтрагента.Выбрать();
			
			СхемаВнутреннийИдентификатор = ИдентификацияУчастниковБанковскихОпераций.СхемаВнутреннийИдентификатор();
			
			Пока ВыборкаРеквизитыКонтрагента.Следующий() Цикл
				
				Если ВыборкаРеквизитыКонтрагента.Реквизит <> "Идентификатор" Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНачинаетсяС(ВыборкаРеквизитыКонтрагента.Значение, СхемаВнутреннийИдентификатор) Тогда
					Продолжить;
				КонецЕсли;
				
				СохраненныеИдентификаторыКонтрагента.Вставить(ВыборкаРеквизитыКонтрагента.Значение, ВыборкаРеквизитыКонтрагента.Значение);
				
			КонецЦикла;
			
			Для Каждого Операция Из ОперацииПоКлючуБанк Цикл
				Если Не Выборка.НетОснованияПлатежноеПоручение
					И Не ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция) Тогда
					// Найденный документ имеет в качестве основания платежное поручение,
					// но текущая операция, по составу своих реквизитов не может быть исполненным платежным распоряжением.
					// Например, в случае, если это банковский или мемориальный ордер (но может быть платежным ордером).
					Продолжить;
				КонецЕсли;
				
				Соответствие = СоответствиеДокументовОперациям.Добавить();
				Соответствие.ИдентификаторОперацииБанк   = Операция.Идентификатор;
				Соответствие.ОперацияБанк                = Операция;
				Соответствие.СуммаОперацииБанк           = Операция.Сумма;
				
				Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
				Соответствие.ДокументИсполнения          = Выборка.Ссылка;
				Соответствие.СуммаОперацииКлиент         = Выборка.Сумма;
				
				Оценщик = НачатьОценкуСоответствия();
				
				// Документы по основанию платежного поручения (ПП) должны были найтись ранее,
				// поэтому приоритет у признака (отсутствие ПП-основания) максимальный.
				// Если основание все же есть (и не было найдено), а документ при этом подходит по другим критериям, значит
				// имеет место случай частичного списания для исполнения платежного поручения при недостатке средств на счете.
				// Банк, с помощью платежных ордеров выполняет частичный перевод в пределах доступного остатка.
				// В этом случае дата платежного ордера может не совпадать с исходной ПП, поэтому ПП и не было найдено.
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.НетОснованияПлатежноеПоручение);
				
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Сумма = Операция.Сумма);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Проведен);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.ДатаДокумента = Операция.ДатаДокумента);
				
				ИдентификаторыКонтрагента = Операция[ИмяКонтрагента + "Идентификаторы"];
				НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.Контрагент,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
				
				НайденСчетКонтрагента = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.СчетКонтрагента,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденСчетКонтрагента);
				
				// Учтем значения реквизитов хранящегося в информационной базе документа, переданным банком.
				СовпадающиеИдентификаторы = Новый Массив;
				Для Каждого Идентификатор Из ИдентификаторыКонтрагента Цикл
					
					Если СохраненныеИдентификаторыКонтрагента[Идентификатор] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СовпадающиеИдентификаторы.Добавить(Идентификатор);
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СохраненныеИдентификаторыКонтрагента)
					И ИдентификаторыКонтрагента.Количество() > 0
					И Не ЗначениеЗаполнено(СовпадающиеИдентификаторы) Тогда
					// Нет ни одного совпадения, хотя документ ранее загружался: документ явно не соответствует операции
					Соответствие.Приоритет = -1;
					Продолжить;
				КонецЕсли;
				
				КонтрагентИдентифицированПоСохраненнымРеквизитам = Ложь;
				НадежностьИдентификации = ИдентификацияУчастниковБанковскихОпераций.ОценитьНадежностьИдентификаторов(
					СовпадающиеИдентификаторы,
					?(ТипЗнч(Выборка.Контрагент) = Тип("Неопределено"),
						Тип("СправочникСсылка.Контрагенты"),
						ТипЗнч(Выборка.Контрагент)),
					УчастникиОпераций);
					
				Для Каждого ИдентифицированСхемой Из НадежностьИдентификации Цикл
					ОценитьСоответствиеПоКритерию(Оценщик, ИдентифицированСхемой);
					Если ИдентифицированСхемой Тогда
						КонтрагентИдентифицированПоСохраненнымРеквизитам = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Выборка.Контрагент)
					И ИдентификаторыКонтрагента.Количество() > 0
					И Не НайденКонтрагент И Не НайденСчетКонтрагента
					И Не КонтрагентИдентифицированПоСохраненнымРеквизитам Тогда
					// Исключим ситуацию, когда в документе указан совсем другой контрагент, чем в файле.
					// При этом опираемся на оба признака 
					// - соответствие ссылкам - НайденКонтрагент, НайденСчетКонтрагента
					// - соответствие идентификаторам - КонтрагентИдентифицированПоСохраненнымРеквизитам.
					// Учитывать оба признака нужно на случай, если у документа в информационной базе после загрузки уточнили контрагента.
					Если СохраненныеИдентификаторыКонтрагента.Количество() > 0 Тогда
						Соответствие.Приоритет = -1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.ИННКонтрагента));
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.НомерСчетаКонтрагента));
			
				Соответствие.Приоритет = Оценщик.Приоритет;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Удалим записи, для которых соответствие отменено
		КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Новый Структура("Приоритет", -1));
		Для Каждого ЗаписьКУдалению Из КУдалению Цикл
			СоответствиеДокументовОперациям.Удалить(ЗаписьКУдалению);
		КонецЦикла;	
		
		ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям);
		
		Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовОперациям Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
			РаспознаннаяОперация.Ссылка = СоответствиеДокументаОперации.ДокументИсполнения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйСоответствиеДокументовБанкаКлиента()
	
	СоответствиеДокументовОперациям = Новый ТаблицаЗначений;
	// Данные из банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииБанк", ТипИдентификатор());
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииБанк", 	      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма операции по данным банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ОперацияБанк");
	// Данные клиента (имеющиеся в информационной базе)
	// Операцией считаем факт исполнения платежного поручения (т.е.  сочетание платежного поручения и документа его исполнения)
	// либо неисполненное платежное поручение.
	// Другими словами, каждая комбинация полей ПлатежноеПоручение и ДокументИсполнения 
	// получит свой идентификатор операции со стороны информационной базы.
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииКлиент", Новый ОписаниеТипов("Число"));
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииКлиент", 	    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма документа в базе.
	СоответствиеДокументовОперациям.Колонки.Добавить("ПлатежноеПоручение",          Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	СоответствиеДокументовОперациям.Колонки.Добавить("ДокументИсполнения", 	        ОписаниеТиповДокументыИсполнения());
	// Сочетание данных бана и клиента
	СоответствиеДокументовОперациям.Колонки.Добавить("Приоритет",     	            Новый ОписаниеТипов("Число"));
	
	Возврат СоответствиеДокументовОперациям;
	
КонецФункции

Функция КлючПоискаПлатежногоПоручения(ДатаДокумента, НомерДокумента, НомерБанковскогоСчетаКонтрагента)
	
	//	в ключ поиска входит номер 
	//  1. без префикса
	//  2. не более 6 символов, по возможности состоящий из цифр
	//  (если в правых 6 символах есть цифры, то в "чистый номер" включаются только они;
	//  лидирующие нули игнорируются;
	//  если нет ни одной цифры, то выбираются все 6 правых символов).
	
	СодержательнаяЧастьНомераДокумента = "";
	
	НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	ОграниченныйНомерБезПрефикса = Прав(НомерБезПрефикса, БанковскиеПравила.ДлинаНомераПлатежногоПоручения());
	ЕстьЗначащиеЦифры = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ОграниченныйНомерБезПрефикса) Цикл
		
		Символ = Сред(ОграниченныйНомерБезПрефикса, НомерСимвола, 1);
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьЗначащиеЦифры Тогда
			Если Символ = "0" Тогда
				Продолжить;
			КонецЕсли;
			ЕстьЗначащиеЦифры = Истина;
		КонецЕсли;
		
		СодержательнаяЧастьНомераДокумента = СодержательнаяЧастьНомераДокумента + Символ;
		
	КонецЦикла;
	
	Если ПустаяСтрока(СодержательнаяЧастьНомераДокумента) Тогда
		СодержательнаяЧастьНомераДокумента = ОграниченныйНомерБезПрефикса;
	КонецЕсли;
	
	Возврат СокрЛП(НомерБанковскогоСчетаКонтрагента) + "/" + Формат(ДатаДокумента, "ДФ=yyyy-MM-dd") + "/" + СодержательнаяЧастьНомераДокумента;
	
КонецФункции

Функция КлючПоискаДокументаДвиженияПоБанковскомуСчету(ДатаИсполнения, НомерДокумента)
	
	// В отличие от поиска платежек не включаем в ключ номер счета,
	// потому что после загрузки документа контрагент (и счет) в нем могут быть изменены
	// (например, пользователь может указать "сводного контрагента").
	
	Возврат Формат(ДатаИсполнения, "ДФ=yyyy-MM-dd") + "/" + СокрЛП(НомерДокумента);
	
КонецФункции

Функция ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция)
	
	Если Операция.ПоступилоСписано <> "Списано" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Операция.ШифрОперации)
		И Не (БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
			// При недостатке средств на счете для исполнения платежного поручения
			// банк выполняет частичный перевод средств с помощью платежных ордеров,
			// в пределах доступного остатка.
			Или БанковскиеПравила.ЭтоПлатежныйОрдер(Операция.ШифрОперации)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция.ДатаДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выбирает из таблицы с соответствиями документов и операций те, которые в наибольшей степени
// подходят друг другу по приоритетам.
//
// Параметры:
//	СоответствиеДокументовОперациям - см. НовыйСоответствиеДокументовОперациям(), модифицируется в ходе выполнения
//  СуммыПлатежныхПоручений - Соответствие, Неопределено. Если передано Соответствие, то при поиске платежному поручению 
//               могут быть сопоставлены несколько документов исполнения, с учетом суммы документов: 
//               общая сумма подобранных документов исполнения не будет превышать переданной суммы остатка платежного поручения.
//               Ключ соответствия - ДокументСсылка.ПлатежноеПоручение, 
//               Значение соответствия - Число, сумма платежного поручения за вычетом имеющихся в базе документов исполнения этого платежного поручения.
//
Процедура ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям, СуммыПлатежныхПоручений = Неопределено)
	
	Если СоответствиеДокументовОперациям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В общем случае соответствия могут быть многие-ко-многим.
	// Среди них могут быть:
	// 1. однозначные, когда идентификатор со стороны клиента и идентификатор со стороны банка встречается только один раз
	// 2. один-ко-многим, когда одному идентификатору со стороны клиента соответствует несколько со стороны банка
	// 3. многие-к-одному, когда многим идентификаторам со стороны банка соответствуют один со стороны клиента.
	// Также могут быть ситуации, когда одни и те же идентификаторы одновременно участвуют в (2) и (3).
	
	// Среди лучших могут быть не все из них.
	//
	// Во-первых, связи один-ко-многим не могут быть выбраны: одному идентификатору со стороны банка может соответствовать
	// не более одного идентификатора со стороны клиента.
	// Потому что одной транзакцией банк выполняет только одно поручение клиента, не несколько.
	//
	// Во-вторых, стремимся к тому, чтобы как можно больше операций со стороны клиента считать лучшими.
	// Потому что операции, отраженные на стороне клиента,
	// с большой вероятностью должны быть отражены и на стороне банка (зачем-то их пользователь ввел в базу).
	//
	// В-третьих, некоторые связи многие-к-одному допускаются: со стороны клиента есть платежное поручение,
	// но нет соответствующего ему документа об исполнении.
	// Такому платежному поручению может соответствовать несколько операций со стороны банка.
	// Однако, сумма таких исполнений не должна превышать суммы платежки.
	//
	// Наконец, следует учитывать степень соответствия идентификаторов друг-другу (приоритет соответствий).
	
	// Для поиска лучших соответствий упрощаем связи - сводим их к один-к-одному и, когда это допускается, - многие-к-одному.
	// Для этого может понадобиться несколько итераций, поскольку связи могут быть цепными и циклическими.
	// Пример цепной связи: A1, B1, B2, C2, C3
	// Пример цикличной: A1, A2, B2, B3, C3, C1
	// (Здесь идентификаторы со стороны клиента обозначены цифрами, а со стороны банка - буквами).
	
	// Алгоритм такой:
	// 1. Для каждого клиентского идентификатора определяем количество соответствующих ему банковских (C - capacity).
	//    Ниже, по мере того, как будем исключать лучшие и отвергнутые, уточняем, поддерживаем эти значения. 
	// 2. Все соответствия считаем неоднозначными и выделяем среди них лучшие и отвергнутые итерационно,
	//    до тех пор, пока неоднозначных не останется.
	// 2.1. Обходим по убыванию приоритета те, у кого C = 1.
	//      Записываем каждый из них в лучшие.
	//      Для каждого, который сочли лучшим, отвергаем (вытессняем) те, 
	//      что имеют тот же идентификатор со стороны банка (см. "во-первых").
	// 2.2. Если после 2.1 появились новые C = 1, то повторяем 2.1.
	// 2.3. Далее остаются соответствия с C > 1. Обходим их по убыванию приоритета снова.
	//      Автоматически считаем их лучшими, однако каждый клиентский идентификатор автоматически считаем лучшим только один раз.
	//      Для этого выбранным устанавливаем C=0: если C<1 то клиентский идентификатор встретился повторно, и соответствия с ним требуют 
	//      дополнительной проверки (см. "в-третьих") и могут быть либо выбраны либо отвергнуты.
	//      Так же, как и на шаге 2.1, если кого-то выбрали, то вытесняем все остальные с таким же идентификатором со стороны банка.
	//      Если в какой-то момент у какого-то идентификатора стало C = 1, то сразу возвращаемся на п.2.1.
	
	ЕмкостьИдентификаторовОперацииКлиент  = Новый Соответствие; // Ключ - идентификатор со стороны клиента; значение - Число (выше обозначено как C)
	// Подготовительный этап - 1.
	Для Каждого Соответствие Из СоответствиеДокументовОперациям Цикл
		
		Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент];
		Если Емкость = Неопределено Тогда
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, 1);
		Иначе
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, Емкость + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	// Основной (итерационный) этап - 2
	Лучшие = СоответствиеДокументовОперациям.СкопироватьКолонки();
	// На каждой итерации будем выделять Лучшие и удалять отвергнутые из СоответствиеДокументовОперациям.
	// В конце процедуры заменим СоответствиеДокументовОперациям на Лучшие.
	
	
	СоответствиеДокументовОперациям.Сортировать("Приоритет");// Коллекцию будем обходить с конца, потому что удаляем в цикле
	СоответствиеДокументовОперациям.Индексы.Добавить("ИдентификаторОперацииБанк");
	
	Пока СоответствиеДокументовОперациям.Количество() > 0 Цикл
		
		НадоВыполнитьПервыйЭтап = Истина;
		Пока НадоВыполнитьПервыйЭтап Цикл
			
			// 2.1
			ВыбранныеИдентификаторыОперацииБанк = Новый Соответствие; // Ключ - идентификатор со стороны банка;  значение - Истина
			КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВыбранныеИдентификаторыОперацииБанк.Вставить(Соответствие.ИдентификаторОперацииБанк, Истина);
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				
			КонецЦикла;
			
			// Удаляем из списка неоднозначных все выбранные и вытесненные ими
			НадоВыполнитьПервыйЭтап = Ложь;
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				Если Емкость = 1 Тогда
					НадоВыполнитьПервыйЭтап = Истина;
				КонецЕсли;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				
			КонецЦикла;
			
		КонецЦикла; // по НадоВыполнитьПервыйЭтап
			
			
		// 2.3.
		КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
		Пока КоличествоСтрок > 0 Цикл
			
			Соответствие = СоответствиеДокументовОперациям[КоличествоСтрок - 1];
			
			Если СуммыПлатежныхПоручений = Неопределено Тогда
				СуммаПлатежногоПоручения = Неопределено;
			Иначе
				СуммаПлатежногоПоручения = СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение];
			КонецЕсли;
				
			Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] > 0 Тогда
				Выбрано = Истина;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0;
				Если СуммаПлатежногоПоручения <> Неопределено И Не ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			Иначе
				// Этот идентификатор со стороны клиента попал в выборку повторно. Проверим, допускается ли это.
				Если ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения = Неопределено Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения < Соответствие.СуммаОперацииБанк Тогда
					Выбрано = Ложь;
				Иначе
					Выбрано = Истина;
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Выбрано Тогда
				// Удалим отвергнутую строку
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] =
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				КоличествоСтрок = КоличествоСтрок - 1;
			Иначе
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0; // Отметили, что выбрана
				
				// Вытесим все записи с выбранным идентификатором со стороны банка.
				Отбор = Новый Структура("ИдентификаторОперацииБанк", Соответствие.ИдентификаторОперацииБанк);
				// При этом может оказаться, что нужна еще одна итерация
				НужнаЕщеИтерация = Ложь;
				КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Отбор);
				Для Каждого Соответствие Из КУдалению Цикл
					
					Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
					Если Емкость = 1 Тогда
						НужнаЕщеИтерация = Истина;
					КонецЕсли;
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
					СоответствиеДокументовОперациям.Удалить(Соответствие);
					КоличествоСтрок = КоличествоСтрок - 1;
					
				КонецЦикла;
				
				Если НужнаЕщеИтерация Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеДокументовОперациям = Лучшие;
	
КонецПроцедуры

Функция СтавкаНДС(ЗначениеСтавкиНДС)
	
	Если Не ЗначениеЗаполнено(ЗначениеСтавкиНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	ЗначениеСтавкиНДС = СтрЗаменить(ЗначениеСтавкиНДС, "/", "_"); // Приводим 20/120 к 20_120
	ПриведенноеЗначениеСтавкиНДС = СтрЗаменить(ЗначениеСтавкиНДС, "_", "");
	ЧисловоеЗначениеСтавки = ОписаниеТипаЧисло.ПривестиЗначение(ПриведенноеЗначениеСтавкиНДС);
	Если XMLСтрока(ЧисловоеЗначениеСтавки) = ПриведенноеЗначениеСтавкиНДС Тогда
		ТекстСтавки = "НДС" + ЗначениеСтавкиНДС;
	Иначе
		ТекстСтавки = ЗначениеСтавкиНДС;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБП.НайтиЗначениеПеречисления("СтавкиНДС", ТекстСтавки);
	
КонецФункции

Функция СуммаНДС(СтавкаНДС, СуммаДокумента)
	
	Если СтавкаНДС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВычислитьСуммуНДС(СтавкаНДС, СуммаДокумента);
	
КонецФункции

Функция ВычислитьСуммуНДС(ТекущаяСтавкаНДС, Сумма)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущаяСтавкаНДС);
	СуммаНДС = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, ЗначениеСтавкиНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

Функция ЭтоХозяйственнаяОперацияОплатаПокупателя(ХозяйственнаяОперация)
	
	Если НЕ ХозяйственнаяОперация.Свойство("ВидОперацииДокумента")
		ИЛИ НЕ ХозяйственнаяОперация.Свойство("Контрагент")
		ИЛИ НЕ ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ХозяйственнаяОперация.ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсЗаполнениеДокументов

Функция ЭтоДанныеБанка(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ВидДанныхЗаполнения") Или ДанныеЗаполнения.ВидДанныхЗаполнения <> "ДанныеБанка" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДаннымиБанкаОперация(Документ, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьРеквизит(Документ, "Дата",                    ДанныеЗаполнения.Операция, "ДатаИсполнения");
	Если НЕ ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах") Тогда
		Документ.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
	КонецЕсли;
	
	ЗаполнитьРеквизит(Документ, "СуммаДокумента",          ДанныеЗаполнения.Операция, "Сумма");
	ЗаполнитьРеквизит(Документ, "ДатаВходящегоДокумента",  ДанныеЗаполнения.Операция, "ДатаДокумента");
	ЗаполнитьРеквизит(Документ, "НомерВходящегоДокумента", ДанныеЗаполнения.Операция, "НомерДокумента");
	ЗаполнитьРеквизит(Документ, "НазначениеПлатежа",       ДанныеЗаполнения.Операция);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Операция.ИдентификаторАУСН) Тогда
		Документ.Комментарий = НСтр("ru = 'Загружен из сервиса АУСН'");
	Иначе
		Документ.Комментарий = НСтр("ru = 'Загружен из Клиент-Банка'");
	КонецЕсли;
	
	// Записываем "сырые" сведения об операции
	Документ.РеквизитыКонтрагента.Очистить();
	СторонаКонтрагента = СторонаКонтрагента(ДанныеЗаполнения.Операция.ПоступилоСписано);
	ИмяКолонкиИдентификаторыКонтрагента = СторонаКонтрагента + "Идентификаторы";
	ИмяКолонкиРеквизитыКонтрагента      = СторонаКонтрагента + "Реквизиты";
	
	СхемаВнутреннийИдентификатор = ИдентификацияУчастниковБанковскихОпераций.СхемаВнутреннийИдентификатор();
	
	ИдентификаторыКонтрагента = ДанныеЗаполнения.Операция[ИмяКолонкиИдентификаторыКонтрагента];
	Для Каждого Идентификатор Из ИдентификаторыКонтрагента Цикл
		
		Если СтрНачинаетсяС(Идентификатор, СхемаВнутреннийИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = Документ.РеквизитыКонтрагента.Добавить();
		ОписаниеРеквизита.Реквизит = "Идентификатор";
		ОписаниеРеквизита.Значение = Идентификатор;
		
	КонецЦикла;
	
	РеквизитыКонтрагента = ДанныеЗаполнения.Операция[ИмяКолонкиРеквизитыКонтрагента];
	Для Каждого КлючИЗначение Из РеквизитыКонтрагента Цикл
		ОписаниеРеквизита = Документ.РеквизитыКонтрагента.Добавить();
		ОписаниеРеквизита.Реквизит = КлючИЗначение.Ключ;
		ОписаниеРеквизита.Значение = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиБанкаРаспознаннаяОперация(Документ, ДанныеЗаполнения)
	
	ЗаполнитьРеквизит(Документ, "Организация",              ДанныеЗаполнения.ВладелецСчета);
	ЗаполнитьРеквизит(Документ, "СчетОрганизации",          ДанныеЗаполнения.ВладелецСчета, "БанковскийСчет");
	ЗаполнитьРеквизит(Документ, "ПодразделениеОрганизации", ДанныеЗаполнения.ВладелецСчета, "Подразделение");
	ЗаполнитьРеквизит(Документ, "ВалютаДокумента",          ДанныеЗаполнения.ВладелецСчета, "ВалютаСчета");
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизит(Документ, "ВидОперации",              ДанныеЗаполнения.ХозяйственнаяОперация, "ВидОперацииДокумента");
	ЗаполнитьРеквизит(Документ, "Контрагент",               ДанныеЗаполнения.ХозяйственнаяОперация);
	ЗаполнитьРеквизит(Документ, "Налогоплательщик",         ДанныеЗаполнения.ХозяйственнаяОперация);
	ЗаполнитьРеквизит(Документ, "СчетКонтрагента",          ДанныеЗаполнения.ХозяйственнаяОперация, "БанковскийСчетКонтрагента");
	ЗаполнитьРеквизит(Документ, "КодВалютнойОперации",      ДанныеЗаполнения.ХозяйственнаяОперация, "КодВалютнойОперации");
	
	// Реквизиты, которые могут быть в списке РасшифровкаПлатежа
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.Ссылка);
	ИспользуетсяРасшифровкаПлатежа = МенеджерОбъекта.ЕстьРасшифровкаПлатежа(Документ.ВидОперации, Ложь);
	
	Если Не ИспользуетсяРасшифровкаПлатежа Тогда
		
		ЗаполнитьРеквизит(Документ, "СтатьяДвиженияДенежныхСредств",  ДанныеЗаполнения.ХозяйственнаяОперация);
		
	Иначе
		
		Если Документ.РасшифровкаПлатежа.Количество() > 1 Тогда
			Документ.РасшифровкаПлатежа.Очистить();
		КонецЕсли;
		Если Документ.РасшифровкаПлатежа.Количество() = 0 Тогда
			Документ.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		СтрокаРасшифровки = Документ.РасшифровкаПлатежа[0];
		
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "ДоговорКонтрагента",            ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СтавкаНДС",                     ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаНДС",                      ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "КурсВзаиморасчетов",            ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "КратностьВзаиморасчетов",       ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаВзаиморасчетов",           ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаПлатежа",                  ДанныеЗаполнения.Операция, "Сумма");
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СчетНаОплату",                  ДанныеЗаполнения.ХозяйственнаяОперация);
		
		Если Документ.ВидОперации
				= Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
			Если ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("СуммаВозврата") Тогда
				ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаВозврата", ДанныеЗаполнения.ХозяйственнаяОперация);
				ЗаполнитьРеквизит(Документ, "СуммаВозврата",          ДанныеЗаполнения.ХозяйственнаяОперация);
			КонецЕсли;
			
			ЕстьСуммаУслуг = ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("СуммаУслуг");
			Если ЕстьСуммаУслуг Тогда
				ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаУслуг", ДанныеЗаполнения.ХозяйственнаяОперация);
				ЗаполнитьРеквизит(Документ, "СуммаУслуг",          ДанныеЗаполнения.ХозяйственнаяОперация);
			КонецЕсли;
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("ВидОплаты") Тогда
				ВидОплаты = ДанныеЗаполнения.ХозяйственнаяОперация.ВидОплаты;
				СчетУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплаты, "СчетУчетаРасчетов");
				Если СчетУчета <> ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам Тогда
					ДанныеЗаполнения.ХозяйственнаяОперация.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетУчета);
					ЗаполнитьРеквизит(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом", ДанныеЗаполнения.ХозяйственнаяОперация);
				КонецЕсли;
				
				РассчитыватьКомиссиюПоДаннымВидаОплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеЗаполнения.ХозяйственнаяОперация,
					"РассчитыватьКомиссиюПоДаннымВидаОплаты",
					Истина);
				Если Не ЕстьСуммаУслуг И РассчитыватьКомиссиюПоДаннымВидаОплаты Тогда
					Процент = Документы.ПоступлениеНаРасчетныйСчет.ЭквайрингПроцентУслугБанкаПоВидуОплаты(
						ВидОплаты, Документ.СуммаДокумента);
					Если Процент > 0 Тогда
						СуммаУслуг = Документы.ПоступлениеНаРасчетныйСчет.ЭквайрингСуммаУслугБанка(
							Процент, СтрокаРасшифровки.СуммаПлатежа);
						Если СуммаУслуг > 0 Тогда
							ДанныеЗаполнения.ХозяйственнаяОперация.Вставить("СуммаУслуг", СуммаУслуг);
							ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаУслуг", ДанныеЗаполнения.ХозяйственнаяОперация);
							ЗаполнитьРеквизит(Документ, "СуммаУслуг",          ДанныеЗаполнения.ХозяйственнаяОперация);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// В налоговых платежах, для получения данных о РегистрацииВНалоговомОргане, требуется знать КПП организации.
	Если ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("КПППлательщика") Тогда
		СтрокаРеквизиты = Документ.РеквизитыКонтрагента.Добавить();
		СтрокаРеквизиты.Реквизит = "КПППлательщика";
		СтрокаРеквизиты.Значение = ДанныеЗаполнения.ХозяйственнаяОперация.КПППлательщика;
	КонецЕсли;
	
	ЗаполнитьРеквизит(Документ, "ДанныеАвтозаполнения", ДанныеЗаполнения.ХозяйственнаяОперация);
	
КонецПроцедуры

Процедура НачатьЗаполнениеДаннымиБанка(Документ, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьДаннымиБанкаОперация(Документ, ДанныеЗаполнения);
	ЗаполнитьДаннымиБанкаРаспознаннаяОперация(Документ, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗавершитьЗаполнениеДаннымиБанка(Документ, ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполнения.Очистить();// Предотвращаем ошибочное использование специализированных данных универсальными механизмами
	
КонецПроцедуры

Процедура ЗаполнитьРеквизит(Приемник, ИмяСвойстваПриемника, Источник, Знач ИмяСвойстваИсточника = "") Экспорт
	
	Если ПустаяСтрока(ИмяСвойстваИсточника) Тогда
		ИмяСвойстваИсточника = ИмяСвойстваПриемника;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		// Проверим что свойство задано
		Если Не Источник.Свойство(ИмяСвойстваИсточника) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Приемник[ИмяСвойстваПриемника] = Источник[ИмяСвойстваИсточника];
	
КонецПроцедуры

Функция НовыйДанныеЗаполнения(Операция, ПлатежноеПоручение, ХозяйственнаяОперация, ВладелецСчета)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидДанныхЗаполнения",   "ДанныеБанка");
	ДанныеЗаполнения.Вставить("Операция",              Операция);
	ДанныеЗаполнения.Вставить("ПлатежноеПоручение",    ПлатежноеПоручение);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ВладелецСчета",         ВладелецСчета);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

// Отбор - Массив идентификаторов операций в выписке
Функция СоздатьДокументы(Выписка, РаспознаннаяВыписка, Настройки, Отбор = Неопределено) Экспорт
	
	РезультатСозданияДокументов = Новый Соответствие; // Ключ - идентификатор операции, значение - см. НовыйРезультатЗаписиДокумента()
	
	БанковскийСчет = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет;
	Если ЗначениеЗаполнено(БанковскийСчет) И Не ЗаблокироватьБанковскийСчет(БанковскийСчет) Тогда
		// При блокировке счета не оборачиваем загрузку данных в Попытка-Исключение, т.к. все исключения
		// перехватываются внутри самой загрузки и "зависнуть" блокировка не может.
		// При этом, единичные исключения на конкретных объектах не должны приводить к откату загрузки всей выписки.
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.БанковскиеСчета,
			,
			СтрШаблон(НСтр("ru = 'Дублирование процесса загрузки выписки банка по счету %1. Загрузка выписки отменена.'"), БанковскийСчет));
		Возврат РезультатСозданияДокументов;
	КонецЕсли;
	
	СохранятьДанныеАвтозаполнения = СохранятьДанныеАвтозаполненияДокументов();
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Отбор <> Неопределено И Отбор.Найти(Операция.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
		Если РаспознаннаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
		Если ХозяйственнаяОперация = Неопределено 
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// Записывать такой документ не имеет смысла
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// 1. Может быть "распознана" пользователем. В этом случае следует записать результат его работы.
			// 2. Банковский документ может быть создан вручную, при загрузке получаем только отметку подтверждения выпиской банка.
			ОбъектДокумента = РаспознаннаяОперация.Ссылка.ПолучитьОбъект();
			
			Если Операция.ПоступилоСписано = "Списано"
				И ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
				// Если документ уже подтвержден выпиской банка, то отметку не изменяем, чтобы не устанавливалась
				// "модифицированность" документа, т.к. в ЗаписатьДокумент() если документ модифицирован,
				// он обязательно будет перезаписан, а это замедляет загрузку Выписки и сбивает Последовательность документов.
				// А также может привести к тому, что у документов будет отменено проведение, если в Настройках не установлено,
				// что документы нужно Проводить после загрузки.
				Если ОбъектДокумента.НеПодтвержденоВыпискойБанка Тогда
					ОбъектДокумента.НеПодтвержденоВыпискойБанка = Ложь;
				КонецЕсли;
				
				// Документ "Списание с расчетного счета" может быть создан на основании документа "Платежное поручение",
				// до выгрузки платежа в банк.
				// Дата банковского документа при этом будет такой же, как в платежном поручении.
				// При загрузке выписки необходимо привести дату банковского документа в соответствие с датой исполнения платежа.
				Если ЗначениеЗаполнено(Операция.ДатаИсполнения)
					И НачалоДня(Операция.ДатаИсполнения) <> НачалоДня(ОбъектДокумента.Дата) Тогда
					ВремяДокумента = ОбъектДокумента.Дата - НачалоДня(ОбъектДокумента.Дата);
					ОбъектДокумента.Дата = Операция.ДатаИсполнения + ВремяДокумента;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СохранятьДанныеАвтозаполнения Тогда
			ОбъектДокумента = РанееЗаполненныйОбъект(ХозяйственнаяОперация, Настройки);
		Иначе
			ОбъектДокумента = Неопределено;
		КонецЕсли;
			
		Если ОбъектДокумента = Неопределено Тогда
			ТипСсылки = ТипДокументаОперацииВыписки(Операция);
			Если ТипСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипСсылки));
			Если МенеджерДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектДокумента = МенеджерДокумента.СоздатьДокумент();
			ДанныеЗаполнения = НовыйДанныеЗаполнения(
				Операция,
				РаспознаннаяОперация.ПлатежноеПоручение,
				ХозяйственнаяОперация,
				РаспознаннаяВыписка.ВладелецСчета);
			ОбъектДокумента.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		Если СохранятьДанныеАвтозаполнения Тогда
			СохранитьДанныеАвтозаполненияДокумента(ОбъектДокумента, ХозяйственнаяОперация);
		КонецЕсли;
		
		ЕстьРазметкаАУСН = ЗначениеЗаполнено(Операция.РазметкаАУСН);
		Если ЕстьРазметкаАУСН Тогда
			ОбъектДокумента.РазметкаАУСНБанка.Загрузить(Операция.РазметкаАУСН);
		КонецЕсли;
		Если ЗначениеЗаполнено(Операция.ТипДокументаАУСН) Тогда
			Если Операция.ТипДокументаАУСН = Перечисления.ТипыДокументовАУСН.БанковскаяВыпискаСРучнойРазметкой
				И ЕстьРазметкаАУСН Тогда
				ОбъектДокумента.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.Банк;
			ИначеЕсли Не ЗначениеЗаполнено(ОбъектДокумента.ИсточникРазметкиАУСН) Тогда
				ОбъектДокумента.ИсточникРазметкиАУСН = Перечисления.ИсточникиРазметкиАУСН.ИсточникПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперацииТребуетЗаполненияКурса(ОбъектДокумента.ВидОперации) И
			Не ЗначениеЗаполнено(ОбъектДокумента.КурсНаДатуПриобретенияРеализацииВалюты) Тогда
			Если ОбъектДокумента.ВалютаДокумента
				= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ОбъектДокумента.РасшифровкаПлатежа[0].ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Иначе
				ВалютаВзаиморасчетов = ОбъектДокумента.ВалютаДокумента;
			КонецЕсли;
			ИнформацияОКурсе = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ВалютаВзаиморасчетов, ОбъектДокумента.ДатаВходящегоДокумента);
			ОбъектДокумента.КурсНаДатуПриобретенияРеализацииВалюты = ИнформацияОКурсе.Курс;
			Для Каждого СтрокаРасшифровки Из ОбъектДокумента.РасшифровкаПлатежа Цикл
				СтрокаРасшифровки.КурсНаДатуПриобретенияРеализацииВалюты = ОбъектДокумента.КурсНаДатуПриобретенияРеализацииВалюты;
			КонецЦикла;
		КонецЕсли;
		
		Проводить = ЗначениеНастройкиСозданияДокументов(Настройки, "ПроводитьДокумент", ТипЗнч(ОбъектДокумента.Ссылка));
		РезультатСозданияДокумента = ЗаписатьДокумент(ОбъектДокумента, Проводить);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокумента.Ссылка) Тогда
			РаспознаннаяОперация.Ссылка = РезультатСозданияДокумента.Ссылка;
		КонецЕсли;
		
		РезультатСозданияДокументов.Вставить(Операция.Идентификатор, РезультатСозданияДокумента);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		РазблокироватьБанковскийСчет(БанковскийСчет);
	КонецЕсли;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции

// Перед созданием документов следует избавиться от ссылок на не созданные новые объекты,
// чтобы в созданных документов не было "битых" ссылок.
// При работе формы в режиме "не создавать элементы автоматически" новые объекты не создаются, но документы должны быть созданы.
Процедура УдалитьНовыеОбъекты(РаспознанныеОперации, УчастникиОпераций) Экспорт
	
	Для Каждого РаспознаннаяОперация Из РаспознанныеОперации Цикл
		
		СвойстваКУдалению = Новый Массив;
		
		Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СвойствоОперации Из РаспознаннаяОперация.ХозяйственнаяОперация Цикл
			
			ТипСвойства = ТипЗнч(СвойствоОперации.Значение);
			
			НовыеОбъектыПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСвойства];
			Если НовыеОбъектыПоТипу = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НовыеОбъектыПоТипу.Найти(СвойствоОперации.Значение, "Ссылка") <> Неопределено Тогда
				СвойстваКУдалению.Добавить(СвойствоОперации.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИмяСвойства Из СвойстваКУдалению Цикл
			РаспознаннаяОперация.ХозяйственнаяОперация.Удалить(ИмяСвойства);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьДокумент(Документ, Проводить)
	
	Результат = НовыйРезультатЗаписиДокумента();
	Результат.Успешно       = Истина;
	Результат.Ссылка        = Документ.Ссылка;
	Результат.Идентификатор = Документ.НомерВходящегоДокумента;
	
	Если Документ.ПометкаУдаления Тогда
		Документ.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	// Проверим, надо ли что-то записывать
	Если Не Документ.Модифицированность()
		И Не Документ.ЭтоНовый()
		И (Не Проводить Или Документ.Проведен) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Отказ = ДатыЗапретаИзменения.ИзменениеЗапрещено(Документ,, ОписаниеОшибки);
	Если Отказ Тогда
		Результат.Успешно = Ложь;
		
		Результат.КраткоеПредставлениеОшибки   = ОписаниеОшибки;
		Результат.ПодробноеПредставлениеОшибки = ОписаниеОшибки;
		
		Возврат Результат;
	Иначе
		Документ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	КонецЕсли;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли Документ.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Подготовим элементы описания ошибки
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось %1 документ %2 по причине: 
                                    |%3'"); // "создать", "записать", "провести"
	
	Если Не Документ.ЭтоНовый() Тогда
		ПредставлениеДокумента = Строка(Документ.Ссылка);
	Иначе
		// Стандартное представление не подходит, поэтому сконструируем нестандартное
		ШаблонПредставления = НСтр("ru = '%1 № %2 от %3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Документ.Метаданные().Синоним,
			Документ.НомерВходящегоДокумента,
			Формат(Документ.ДатаВходящегоДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	ОшибкаПроверкиЗаполнения = Ложь;
	
	// Проверим возможность проведения
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПолучитьСообщенияПользователю(Истина); // Очистим стек сообщений
		
		Если Не Документ.ПроверитьЗаполнение() Тогда
			
			ОшибкаПроверкиЗаполнения = Истина;
			
			Результат.Успешно = Ложь;
			
			СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
			ТекстыСообщений = Новый Массив;
			Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
				ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				Результат.КраткоеПредставлениеОшибки = СтрСоединить(ТекстыСообщений, Символы.ПС);
			Иначе
				Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Документ заполнен неверно'");
			КонецЕсли;
			
			Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем документ
	Если Результат.Успешно Тогда
		ПолучитьСообщенияПользователю(Истина); // Очистим стек сообщений
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			Результат.Успешно = Ложь;
			
			СообщенияПриЗаписи = ПолучитьСообщенияПользователю(Истина);
			ТекстыСообщений = Новый Массив;
			Для Каждого СообщениеПользователю Из СообщенияПриЗаписи Цикл
				ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				Результат.КраткоеПредставлениеОшибки   = СтрСоединить(ТекстыСообщений, Символы.ПС);
				Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			Иначе
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Результат.Ссылка = Документ.Ссылка;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (Не ТранзакцияАктивна() ИЛИ ОшибкаПроверкиЗаполнения) Тогда
		// Если не удалось провести документ, то хотя бы запишем. Сделать это можем только, если запись выполняется вне транзакции.
		РезультатЗаписи = ЗаписатьДокумент(Документ, Ложь);
		Если Не РезультатЗаписи.Успешно Тогда
			Возврат РезультатЗаписи;
		Иначе
			// Все равно считаем операцию не успешной
			Результат.Ссылка       = Документ.Ссылка;
			ПредставлениеДокумента = Строка(Результат.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Оформим результат операции
	Если Не Результат.Успешно Тогда
		
		УровеньОшибкиЖР = УровеньЖурналаРегистрации.Ошибка;
		Если Не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Действие = НСтр("ru = 'создать'");
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Действие = НСтр("ru = 'провести'");
			
			// Документ может не проводится из-за того, что не полностью заполнен.
			// Это не является "ошибкой" базы (или файла), поэтому такие сообщения выводим для информации.
			УровеньОшибкиЖР = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			Действие = НСтр("ru = 'записать'");
		КонецЕсли;
		
		Результат.ТекстСообщенияПользователю  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.КраткоеПредставлениеОшибки);
		
		ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньОшибкиЖР,
			Документ.Метаданные(),
			Документ.Ссылка,
			ТекстЖурналаРегистрации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатЗаписиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                      Ложь);
	Результат.Вставить("Ссылка",                       Неопределено);
	Результат.Вставить("Идентификатор",                "");
	Результат.Вставить("ТекстСообщенияПользователю",   "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("КраткоеПредставлениеОшибки",   "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БлокировкаБанковскогоСчета

Функция ЗаблокироватьБанковскийСчет(БанковскийСчет)
	
	БанковскийСчетЗаблокирован = Ложь;
	
	Для НомерПопытки = 1 По КоличествоПовторовОжиданияОбработкиДанных() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(БанковскийСчет);
			БанковскийСчетЗаблокирован = Истина;
			Прервать;
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.БанковскиеСчета,
				,
				НСтр("ru = 'Ожидание выполнения обработчика'"));
		КонецПопытки;
		ОбщегоНазначенияБТС.Пауза(ВремяОжиданияОбработкиДанных());
	КонецЦикла;
	
	Возврат БанковскийСчетЗаблокирован;
	
КонецФункции

Процедура РазблокироватьБанковскийСчет(БанковскийСчет)
	
	РазблокироватьДанныеДляРедактирования(БанковскийСчет);
	
КонецПроцедуры

Функция КоличествоПовторовОжиданияОбработкиДанных()
	
	Возврат 6;
	
КонецФункции

Функция ВремяОжиданияОбработкиДанных()
	
	Возврат 20; // секунд
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПредупреждениеОПроблемах

Функция БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций, СоздаватьСчетОрганизации)
	
	Протокол = Неопределено;
	Если Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.Организация;
	ИначеЕсли Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.БанковскийСчет;
	КонецЕсли;
	
	Если Протокол = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Предупреждение = УстановитьПредупреждениеПриРаспознавании(РаспознаннаяВыписка, "БанковскийСчетНеНайден");
	Предупреждение.Текст = НСтр("ru = 'Не найден банковский счет.'");
	
	Идентификатор = "";
	Для Каждого ЗаписьПротокола Из Протокол Цикл
		Если ЗаписьПротокола.ПричинаОтказа = "НетИдентификаторов" Тогда
			Предупреждение.Текст = НСтр("ru = 'Не указаны реквизиты банковского счета.'");
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьПротокола.Идентификатор) Тогда
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ЗаписьПротокола.Идентификатор,
				УчастникиОпераций);
			Если ОписаниеИдентификатора <> Неопределено И ОписаниеИдентификатора.Схема = "BBAN" Тогда
				Идентификатор = ЗаписьПротокола.Идентификатор;
				Предупреждение.ДетальныеДанные = Идентификатор;
				
				ПредставлениеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ПредставлениеИдентификатора(
					Идентификатор,
					УчастникиОпераций);
				
				Если Не ПустаяСтрока(ПредставлениеИдентификатора) Тогда
					Предупреждение.Текст = СтрШаблон(НСтр("ru = 'В выписке указан расчетный счет, не принадлежащий организации: %1.'"), ПредставлениеИдентификатора);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоДепозитныйСчетОрганизации = ПроверитьСоздатьДепозитныйСчетОрганизации(
		РаспознаннаяВыписка, Идентификатор, УчастникиОпераций, Предупреждение);
	
	СоздаватьСчетОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		РаспознаннаяВыписка.ВладелецСчета, "СоздаватьСчетОрганизации", Ложь);
	
	Возврат ЭтоДепозитныйСчетОрганизации;
	
КонецФункции

Функция ПредупрежденияПриВыбореСсылок(ХозяйственнаяОперация, Параметры)
	
	Если ХозяйственнаяОперация = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПротоколыВыбораСсылок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "Контрагент");
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не КонтрагентДолженБытьОпределенТочно(Параметры.Операция.ПоступилоСписано, ХозяйственнаяОперация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПротоколВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.ПротоколыВыбораСсылок, "Контрагент");
	
	Если ПротоколВыбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОПроблеме = ПротоколВыбора.НайтиСтроки(Новый Структура("ПричинаОтказа", "СлучайныйВыбор"));
	
	Если Не ЗначениеЗаполнено(ДанныеОПроблеме) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Контрагент);
	
	ЕстьСсылкиНовыхОбъектов = Ложь;
	Для Каждого Проблема Из ДанныеОПроблеме Цикл
		
		Ссылка = Проблема.Ссылка;
		
		// Контрагенты могли быть определены поиском среди договоров.
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(Ссылка, Параметры.УчастникиОпераций);
			Если ОписаниеСсылки <> Неопределено Тогда
				Ссылка = ОписаниеСсылки.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Ссылки.Добавить(Ссылка);
		
		Если ЕстьСсылкиНовыхОбъектов Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
			Ссылка,
			Параметры.УчастникиОпераций);
		
		ЕстьСсылкиНовыхОбъектов = ОписаниеНовогоОбъекта <> Неопределено;
		
	КонецЦикла;
	
	Ссылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Ссылки);
	Если Ссылки.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЕстьСсылкиНовыхОбъектов Тогда
		Текст = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанные реквизиты не позволяют достоверно его определить.'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанным реквизитам соответствуют %1.'");
		КоличествоСсылок = ЧислоПрописью(
			Ссылки.Количество(),
			"",
			НСтр("ru = 'контрагент, контрагента, контрагентов, м,,,,,0'"));
		Текст = СтрШаблон(ШаблонТекста, НРег(КоличествоСсылок));
	КонецЕсли;
	
	Предупреждения = НовыйПредупрежденияПриРаспознавании();
	Предупрежедение = Предупреждения.Добавить();
	Предупрежедение.КодПроблемы     = "СлучайныйВыбор";
	Предупрежедение.Текст           = Текст;
	Предупрежедение.ДетальныеДанные = Ссылки;
	
	Возврат Предупреждения;
	
КонецФункции

Процедура ЗаписатьПредупреждения(Контекст, Предупреждения)
	
	Если НЕ ЗначениеЗаполнено(Предупреждения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Предупреждения = Неопределено Тогда
		Контекст.Предупреждения = НовыйПредупрежденияПриРаспознавании();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Предупреждения, Контекст.Предупреждения);
	
КонецПроцедуры

Функция КонтрагентДолженБытьОпределенТочно(ПоступилоСписано, ХозяйственнаяОперация)
	
	ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ВидОперацииДокумента");
	Если ВидОперации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат Документы.ПоступлениеНаРасчетныйСчет.КонтрагентДолженБытьЗаполнен(ВидОперации);
	ИначеЕсли ПоступилоСписано = "Списано" Тогда
		Возврат Документы.СписаниеСРасчетногоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйПредупрежденияПриРаспознавании()
	
	Предупреждения = Новый ТаблицаЗначений;
	Предупреждения.Колонки.Добавить("КодПроблемы", Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("Текст",       Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("ДетальныеДанные");
	
	Возврат Предупреждения;
	
КонецФункции

Функция УстановитьПредупреждениеПриРаспознавании(Контекст, КодПроблемы)
	
	Если Контекст.Предупреждения = Неопределено Тогда
		Контекст.Предупреждения = НовыйПредупрежденияПриРаспознавании();
	КонецЕсли;
	
	НоваяЗапись = Контекст.Предупреждения.Добавить();
	НоваяЗапись.КодПроблемы = КодПроблемы;
	
	Возврат НоваяЗапись;
	
КонецФункции

Функция ПроверитьСоздатьДепозитныйСчетОрганизации(РаспознаннаяВыписка,
												  Идентификатор,
												  УчастникиОпераций,
												  Предупреждение)
	
	ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
		Идентификатор, УчастникиОпераций);
	БалансовыйСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатора.Состав, "БалансовыйСчет", "");
	
	ЭтоСчетДепозитаБанка = БанковскиеПравила.ЭтоСчетДепозитаБанка(БалансовыйСчет);
	Если Не ЭтоСчетДепозитаБанка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторыСчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
	ОписаниеОрганизации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		ИдентификаторыСчета,
		УчастникиОпераций,
		Отбор
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.БанковскийСчет);
	Если ОписаниеОрганизации = Неопределено Тогда
		ИдентификаторВладельца = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатора.Состав, "Владелец");
		Если ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
			Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВладельца);
			ОписаниеОрганизации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
				Идентификаторы,
				УчастникиОпераций,
				Отбор
				,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
				РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.Организация);
			Если ОписаниеОрганизации = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РазрешеноСозданиеБанковскиеСчетаОрганизации = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета)
		И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	
	Если РазрешеноСозданиеБанковскиеСчетаОрганизации Тогда
		ЗаполнитьДанныеВладелецСчета(РаспознаннаяВыписка.ВладелецСчета, ОписаниеОрганизации);
		ЗаполнитьЗначенияСвойств(РаспознаннаяВыписка.ВладелецСчета, ОписаниеИдентификатора.Состав,
			"БИК, НомерБанковскогоСчета");
		
		УстановитьНовыйБанковскийСчетВладелецСчета(РаспознаннаяВыписка.ВладелецСчета, ИдентификаторыСчета, УчастникиОпераций);
		РаспознаннаяВыписка.ВладелецСчета.Вставить("СоздаватьСчетОрганизации", Истина);
		
		РаспознаннаяВыписка.Предупреждения.Удалить(Предупреждение);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьНовыйБанковскийСчетВладелецСчета(ВладелецСчета, Идентификаторы, УчастникиОпераций)
	
	Отбор = ОтборБанковскийСчет(ВладелецСчета.Организация, ВладелецСчета.ВалютаСчета);
	Отбор.Вставить("ЭтоСчетОрганизации", Истина);
	
	ВладелецСчета.БанковскийСчет = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
		Идентификаторы,
		Отбор,
		Отбор.Тип,
		УчастникиОпераций);
	
КонецПроцедуры

#КонецОбласти

#Область АнализНазначенияПлатежа

// Назначение платежа может содержать структурированную информацию.
// Перенесем ее в предназначенные для этого поля.
//
Процедура РазобратьНазначениеПлатежа(ДанныеИзБанка)
	
	// При исполнении обязанности третьих лиц по уплате налогов действуют особые правила, установленные приложениями к Приказу 107н:
	// - в поле, которое обычно используется для идентификации плательщика указывается налоговый идентификатор (ИНН, КПП) третьего лица
	//   (прил. 1 п. 4)
	// - в назначении платежа указываются идентификаторы плательщика (лица, со счета которого списываются деньги) - ИНН, КПП, наименование
	//   (прил. 2 п. 13 пп. 5)
	//
	// Если идентифицируем документ, как содержащий информацию о применении этих особых правил,
	// то исправим его реквизиты в соответствии с этими правилами.
	
	ИННВладельцевСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИННВладельцевСчетов.Вставить(СокрЛП(Выборка.ИНН), Истина);
	КонецЦикла;
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		КБК = КБКНалога(Документ.РеквизитыПлатежаВБюджет);
		Если Не ПустаяСтрока(КБК) Тогда
			// Это точно уплата налога
			ДанныеПлатежаТретьихЛиц = ПлатежиВБюджетКлиентСервер.РазобратьНазначениеПлатежаУплатыНалоговТретьихЛиц(Документ.НазначениеПлатежа);
			Если ДанныеПлатежаТретьихЛиц <> Неопределено Тогда
				// Это уплата налога за третьих лиц
				Если ИННВладельцевСчетов[ДанныеПлатежаТретьихЛиц.ИНН] = Неопределено Тогда
					// Нет уверенности, что это валидные данные
					Продолжить;
				КонецЕсли;
				
				Налогоплательщик = Новый Структура;
				Налогоплательщик.Вставить("Наименование", ДанныеПлатежаТретьихЛиц.НаименованиеТретьегоЛица);
				Налогоплательщик.Вставить("ИНН",          Документ.ПлательщикИНН);
				Если Документ.РеквизитыПлатежаВБюджет.Свойство("ПлательщикКПП") Тогда
					Налогоплательщик.Вставить("КПП", Документ.РеквизитыПлатежаВБюджет.ПлательщикКПП);
				КонецЕсли;
				
				Документ.РеквизитыПлатежаВБюджет.Вставить("Налогоплательщик", Налогоплательщик);
				
				Документ.ПлательщикИНН = ДанныеПлатежаТретьихЛиц.ИНН;
				Если ДанныеПлатежаТретьихЛиц.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
					И Не ПустаяСтрока(ДанныеПлатежаТретьихЛиц.КПП) Тогда
					Документ.ПлательщикРеквизиты.Вставить("КПП", ДанныеПлатежаТретьихЛиц.КПП);
				Иначе
					Документ.ПлательщикРеквизиты.Удалить("КПП");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИННВладельцевСчетов[Документ.ПлательщикИНН] = Неопределено
				И ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(Документ.ПлательщикИНН) Тогда
				// Перечисление по исполнительному листу
				Должник = Новый Структура;
				Должник.Вставить("ИНН", Документ.ПлательщикИНН);
				Документ.РеквизитыПлатежаВБюджет.Вставить("Должник", Должник);
				Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыПокупателей(РаспознаннаяВыписка)
	
	РеквизитыПокупателей = Новый ТаблицаЗначений;
	РеквизитыПокупателей.Колонки.Добавить("Организация",        Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РеквизитыПокупателей.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РеквизитыПокупателей.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Для каждого Операция Из РаспознаннаяВыписка.Операции Цикл
		Если Операция.ХозяйственнаяОперация <> Неопределено И НЕ ЗначениеЗаполнено(Операция.ПлатежноеПоручение) Тогда
			Если НЕ ЭтоХозяйственнаяОперацияОплатаПокупателя(Операция.ХозяйственнаяОперация) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Операция.ХозяйственнаяОперация.Контрагент) И ЗначениеЗаполнено(Операция.ХозяйственнаяОперация.ДоговорКонтрагента)
				И РеквизитыПокупателей.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента",
					Операция.ХозяйственнаяОперация.Контрагент, Операция.ХозяйственнаяОперация.ДоговорКонтрагента)).Количество() = 0 Тогда
				НоваяСтрока = РеквизитыПокупателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция.ХозяйственнаяОперация);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыПокупателей;
	
КонецФункции

Функция ТекстЗапросНеоплаченныеСчета()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыПокупателей.Организация КАК Организация,
	|	РеквизитыПокупателей.Контрагент КАК Контрагент,
	|	РеквизитыПокупателей.ДоговорКонтрагента КАК Договор
	|ПОМЕСТИТЬ ВТ_РеквизитыПокупателей
	|ИЗ
	|	&РеквизитыПокупателей КАК РеквизитыПокупателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Номер КАК Номер,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапрос.Статус КАК Статус,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетНаОплатуПокупателю.Ссылка КАК Документ,
	|		СчетНаОплатуПокупателю.Дата КАК Дата,
	|		СчетНаОплатуПокупателю.Номер КАК Номер,
	|		СчетНаОплатуПокупателю.Организация КАК Организация,
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Статус,
	|		МАКСИМУМ(СчетНаОплатуПокупателю.СуммаДокумента) КАК Сумма,
	|		СчетНаОплатуПокупателю.Проведен КАК Проведен
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|			ПО СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыПокупателей КАК ВТ_РеквизитыПокупателей
	|			ПО СчетНаОплатуПокупателю.Организация = ВТ_РеквизитыПокупателей.Организация
	|				И СчетНаОплатуПокупателю.Контрагент = ВТ_РеквизитыПокупателей.Контрагент
	|				И СчетНаОплатуПокупателю.ДоговорКонтрагента = ВТ_РеквизитыПокупателей.Договор
	|	ГДЕ
	|		НЕ СчетНаОплатуПокупателю.ПометкаУдаления
	|		И СчетНаОплатуПокупателю.Организация = &Организация
	|		И СчетНаОплатуПокупателю.Дата >= &ПериодАктуальности
	|		И ВТ_РеквизитыПокупателей.Контрагент ЕСТЬ НЕ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СчетНаОплатуПокупателю.Проведен,
	|		СчетНаОплатуПокупателю.Дата,
	|		СчетНаОплатуПокупателю.Номер,
	|		ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)),
	|		СчетНаОплатуПокупателю.Организация,
	|		СчетНаОплатуПокупателю.Контрагент,
	|		СчетНаОплатуПокупателю.ДоговорКонтрагента,
	|		СчетНаОплатуПокупателю.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Статус В(&Статусы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Счета.Документ КАК Документ,
	|	ВТ_Счета.Дата КАК Дата,
	|	ВТ_Счета.Номер КАК Номер,
	|	ВТ_Счета.Контрагент КАК Контрагент,
	|	ВТ_Счета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Счета.Статус КАК Статус,
	|	МАКСИМУМ(ВТ_Счета.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ОплатаСчетов.Сумма, 0)) КАК УжеОплаченнаяСумма,
	|	ВТ_Счета.Проведен КАК Проведен
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетов КАК ОплатаСчетов
	|		ПО ВТ_Счета.Организация = ОплатаСчетов.Организация
	|			И ВТ_Счета.Документ = ОплатаСчетов.СчетНаОплату
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Счета.Документ,
	|	ВТ_Счета.Дата,
	|	ВТ_Счета.Номер,
	|	ВТ_Счета.Контрагент,
	|	ВТ_Счета.ДоговорКонтрагента,
	|	ВТ_Счета.Статус,
	|	ВТ_Счета.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Дата УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	СтруктураПоискаПоступило = Новый Структура("ПоступилоСписано", "Поступило");
	ТаблицаПоступило         = Выписка.Операции.Скопировать(СтруктураПоискаПоступило);
	
	НеоплаченныеСтатусы = Новый Массив;
	НеоплаченныеСтатусы.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	НеоплаченныеСтатусы.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	РеквизитыПокупателей = РеквизитыПокупателей(РаспознаннаяВыписка);
	Если РеквизитыПокупателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация = РаспознаннаяВыписка.ВладелецСчета.Организация;
	РеквизитыПокупателей.ЗаполнитьЗначения(Организация, "Организация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодАктуальности",   ДобавитьМесяц(НачалоДня(Выписка.КонецПериода), -12)); // Счета, которым больше года считаем неактуальными и не рассматриваем.
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Статусы",              НеоплаченныеСтатусы);
	Запрос.УстановитьПараметр("РеквизитыПокупателей", РеквизитыПокупателей);
	Запрос.Текст = ТекстЗапросНеоплаченныеСчета();
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетов.Индексы.Добавить("Контрагент");
	
	СуммыСчетов = Новый Соответствие;
	
	Для каждого Операция Из ТаблицаПоступило Цикл
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
		
		// Счета заполняем только в "новых" документах.
		Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоХозяйственнаяОперацияОплатаПокупателя(РаспознаннаяОперация.ХозяйственнаяОперация) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетНаОплату = Неопределено;
		Если РаспознаннаяОперация.ХозяйственнаяОперация.Свойство("СчетНаОплату", СчетНаОплату) И ЗначениеЗаполнено(СчетНаОплату) Тогда
			СуммыСчетов.Вставить(СчетНаОплату, РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
			Продолжить;
		КонецЕсли;
		
		Счета = ТаблицаСчетов.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента",
			РаспознаннаяОперация.ХозяйственнаяОперация.Контрагент, РаспознаннаяОперация.ХозяйственнаяОперация.ДоговорКонтрагента));
		Если Счета.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли Счета.Количество() = 1 Тогда
			// Если неоплачен только один Счет, то без дополнительной проверки в Назначении платежа считаем, что оплата пришла по нему.
			Если Не СчетУжеОплачен(СуммыСчетов, Счета[0]) Тогда
				СуммыСчетов.Вставить(Счета[0].Документ, РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов
					+ ?(СуммыСчетов[Счета[0].Документ] = Неопределено, 0, СуммыСчетов[Счета[0].Документ]));
				РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("СчетНаОплату", Счета[0].Документ);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		НазначениеПлатежа = НРег(СокрЛП(СтрЗаменить(Операция.НазначениеПлатежа, Символы.ПС, " ")));
		Если Не ЗначениеЗаполнено(Операция.СловаНазначениеПлатежа) Тогда
			Операция.РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
			Операция.СловаНазначениеПлатежа  = СтрРазделить(НазначениеПлатежа, Операция.РазделителиИзНазначения, Ложь);
		КонецЕсли;
		
		НайденныеСчета = Новый Соответствие;
		
		Для каждого РеквизитыСчета Из Счета Цикл
			НомерБезПрефикса = НРег(СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыСчета.Номер, Истина, Ложь)));
			Если СтрНайти(НазначениеПлатежа, НомерБезПрефикса) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерБезПрефикса) Тогда
				СловаНазначения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Операция.СловаНазначениеПлатежа);
			Иначе
				// В номере есть нецифровой символ, возможно он содержится в разделителях.
				// Уберем его из разделителей и заново получим слова Назначения платежа.
				РазделителиНазначенияСУчетомНомера = Операция.РазделителиИзНазначения;
				РазделителиИзНомера = СокрЛП(РазделителиИзТекста(НомерБезПрефикса));
				ДлинаРазделителейИзНомера = СтрДлина(РазделителиИзНомера);
				Если ДлинаРазделителейИзНомера = 1 Тогда
					РазделителиНазначенияСУчетомНомера = СтрЗаменить(РазделителиНазначенияСУчетомНомера, РазделителиИзНомера, "");
				Иначе
					Для сч = 1 По ДлинаРазделителейИзНомера Цикл
						Разделитель = Сред(РазделителиИзНомера, сч, 1);
						РазделителиНазначенияСУчетомНомера = СтрЗаменить(РазделителиНазначенияСУчетомНомера, Разделитель, "");
					КонецЦикла;
				КонецЕсли;
				
				СловаНазначения = СтрРазделить(НазначениеПлатежа, РазделителиНазначенияСУчетомНомера, Ложь);
			КонецЕсли;
			
			ВхожденияНомера = ВхожденияНомераВТексте(СловаНазначения, НомерБезПрефикса);
			
			Оценщик = НачатьОценкуСоответствия();
			Если ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера Тогда
				ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов);
			ИначеЕсли ВхожденияНомера.ПозицииТочногоВхожденияНомера.Количество() > 0 Тогда
				Если Не ЭтоНомерПоОкрестностиНомераВТексте(ВхожденияНомера.ПозицииТочногоВхожденияНомера, СловаНазначения) Тогда
					// Исследование окрестностей предполагаемого номера показало, что это не "номер".
					Продолжить;
				КонецЕсли;
				
				ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов);
			ИначеЕсли ВхожденияНомера.ЕстьТолькоЧастичноеСоответствие Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ЛучшийСчет = ВыбратьЛучшийСчет(НайденныеСчета);
		Если ЗначениеЗаполнено(ЛучшийСчет.Счет) Тогда
			РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("СчетНаОплату", ЛучшийСчет.Счет);
			СуммыСчетов.Вставить(ЛучшийСчет.Счет,
				ЛучшийСчет.Сумма + ?(СуммыСчетов[ЛучшийСчет.Счет] = Неопределено, 0, СуммыСчетов[ЛучшийСчет.Счет]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСчетНаОплатуПокупателю

Процедура ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов)
	
	Если СчетУжеОплачен(СуммыСчетов, РеквизитыСчета) Тогда
		Возврат; // Оплата для этого Счета была найдена ранее.
	КонецЕсли;
	
	Если СуммыСчетов[РеквизитыСчета.Документ] = Неопределено Тогда
		НеоплаченнаяСумма = РеквизитыСчета.Сумма - РеквизитыСчета.УжеОплаченнаяСумма;
	Иначе
		НеоплаченнаяСумма = РеквизитыСчета.Сумма - РеквизитыСчета.УжеОплаченнаяСумма - СуммыСчетов[РеквизитыСчета.Документ];
	КонецЕсли;
	
	ОценитьСоответствиеПоКритерию(Оценщик, Год(РеквизитыСчета.Дата) = Год(Операция.ДатаДокумента));
	ОценитьСоответствиеПоКритерию(Оценщик, НеоплаченнаяСумма = РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
	ОценитьСоответствиеПоКритерию(Оценщик, Год(РеквизитыСчета.Дата) = (Год(Операция.ДатаДокумента) - 1));
	ОценитьСоответствиеПоКритерию(Оценщик, НеоплаченнаяСумма < РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
	ОценитьСоответствиеПоКритерию(Оценщик, РеквизитыСчета.Проведен);
	
	СуммаПокрытия = Мин(НеоплаченнаяСумма, РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
	
	Оценка = Новый Структура;
	Оценка.Вставить("Сумма",   СуммаПокрытия);
	Оценка.Вставить("Оценщик", Оценщик);
	НайденныеСчета.Вставить(РеквизитыСчета.Документ, Оценка);
	
КонецПроцедуры

Функция СчетУжеОплачен(СуммыСчетов, РеквизитыСчета)
	
	Результат = Ложь;
	
	НеоплаченнаяСумма = РеквизитыСчета.Сумма - РеквизитыСчета.УжеОплаченнаяСумма;
	
	Если СуммыСчетов[РеквизитыСчета.Документ] <> Неопределено
		И СуммыСчетов[РеквизитыСчета.Документ] >= НеоплаченнаяСумма Тогда
		Результат = Истина; // Оплата для этого Счета была найдена ранее.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьЛучшийСчет(НайденныеСчета)
	Перем Счет, Сумма;
	
	Результат = Новый Структура("Счет, Сумма");
	
	СчетаОдногоПриоритета = Новый Массив;
	МаксимальныйПриоритет = 0;
	Для каждого КлючИЗначение Из НайденныеСчета Цикл
		Если МаксимальныйПриоритет < КлючИЗначение.Значение.Оценщик.Приоритет Тогда
			МаксимальныйПриоритет = КлючИЗначение.Значение.Оценщик.Приоритет;
			Счет  = КлючИЗначение.Ключ;
			Сумма = КлючИЗначение.Значение.Сумма;
			
			СчетаОдногоПриоритета = Новый Массив;
			СчетаОдногоПриоритета.Добавить(Счет);
		ИначеЕсли МаксимальныйПриоритет = КлючИЗначение.Значение.Оценщик.Приоритет Тогда
			СчетаОдногоПриоритета.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если СчетаОдногоПриоритета.Количество() = 1 Тогда // Выбираем только самые надёжные случаи.
		Результат.Счет  = Счет;
		Результат.Сумма = Сумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВхожденияНомераВТексте(СловаНазначения, НомерБезПрефикса)
	
	ВхожденияНомера = Новый Структура("ПозицииТочногоВхожденияНомера, ЕстьТочноеСоответствиеИЗнакНомера, ЕстьТолькоЧастичноеСоответствие",
		Новый Массив, Ложь, Ложь);
	
	Для инд = 0 По СловаНазначения.ВГраница() Цикл
		Слово = СловаНазначения[инд];
		Если Слово = НомерБезПрефикса Тогда
			Если инд > 0
				И (СловаНазначения[инд - 1] = СимволНомера() Или СловаНазначения[инд - 1] = СимволЛатНомера()) Тогда
				ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера = Истина;
				Возврат ВхожденияНомера;
			Иначе
				ВхожденияНомера.ПозицииТочногоВхожденияНомера.Добавить(инд);
			КонецЕсли;
		ИначеЕсли СтрНайти(Слово, НомерБезПрефикса) > 0 Тогда
			НайтиПозициюЗнакаНомер    = СтрНайти(Слово, СимволНомера());
			НайтиПозициюЗнакаЛатНомер = СтрНайти(Слово, СимволЛатНомера());
			Если НайтиПозициюЗнакаНомер > 0 И Сред(Слово, НайтиПозициюЗнакаНомер + 1) = НомерБезПрефикса
				ИЛИ НайтиПозициюЗнакаЛатНомер > 0 И Сред(Слово, НайтиПозициюЗнакаЛатНомер + 1) = НомерБезПрефикса Тогда
				ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера = Истина;
				Возврат ВхожденияНомера;
			Иначе
				ВхожденияНомера.ЕстьТолькоЧастичноеСоответствие = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВхожденияНомера;
	
КонецФункции

Функция РазделителиИзТекста(Знач НазначениеПлатежа)
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, " ", ""); // Будем искать разделители только в "значащих" символах.
	Разделители = "";
	Для сч = 1 По СтрДлина(НазначениеПлатежа) Цикл
		Символ = Сред(НазначениеПлатежа, сч, 1);
		Если Символ = СимволНомера() // Символ номера "№" необходимо сохранить в тексте.
			ИЛИ СтрНайти(Разделители, Символ) > 0 // Этот символ уже включен в разделители.
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		Разделители = Разделители + Символ;
	КонецЦикла;
	
	Возврат " " + Разделители; // Добавим пробел к остальным разделителям
	
КонецФункции

Функция СловаУдовлетворяютТребованиям(СловоСправа, СловоСлева)
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(СловоСправа) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СловоСправа, 1)) Тогда
		// Слово справа от предполагаемого номера начинается с цифры, возможно эти слова являются частью Даты, Суммы или составного номера.
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СловоСлева) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(СловоСлева, 1)) Тогда
		// Слово слева от предполагаемого номера заканчивается на цифру, возможно эти слова являются частью Даты, Суммы или составного номера.
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СимволПроцента()
	
	Возврат "%";
	
КонецФункции

Функция СимволНомера()
	
	Возврат "№";
	
КонецФункции

Функция СимволЛатНомера()
	
	Возврат "N";
	
КонецФункции

Функция ЭтоНомерПоОкрестностиНомераВТексте(ПозицииНомера, СловаНазначения)
	
	ИндексПоследнегоСлова = СловаНазначения.ВГраница();
	Для каждого Позиция Из ПозицииНомера Цикл
		СловоСправа = "";
		СловоСлева  = "";
		Если Позиция = 0 Тогда // Номер найден в начале Назначения платежа, поэтому исследуем только область "справа", если она есть.
			СловоСправа = ?(ИндексПоследнегоСлова > 0, СловаНазначения[Позиция + 1], "");
		ИначеЕсли Позиция = ИндексПоследнегоСлова Тогда // Номер найден в конце Назначения платежа, поэтому исследуем только область "слева".
			СловоСлева  = СловаНазначения[Позиция - 1];
		Иначе
			СловоСправа = СловаНазначения[Позиция + 1];
			СловоСлева  = СловаНазначения[Позиция - 1];
		КонецЕсли;
		
		Если СловаУдовлетворяютТребованиям(СловоСправа, СловоСлева) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаКомиссиюБанка(Операция)
	
	// Достаточно найти слова в любом порядке
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'комис'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаВЛюбомПорядке");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ком'"));
	Фраза.Добавить(НСтр("ru = 'за'"));
	Фраза.Добавить(НСтр("ru = 'пер'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд", 3);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Если Результат Тогда
		КлючевыеФразы = Новый Массив;
		Фраза = Новый Массив;
		Фраза.Добавить(НСтр("ru = 'в'"));
		Фраза.Добавить(НСтр("ru = 'том'"));
		Фраза.Добавить(НСтр("ru = 'числ'"));
		Фраза.Добавить(НСтр("ru = 'ком'"));
		ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
		
		Фраза = Новый Массив;
		Фраза.Добавить(НСтр("ru = 'в'"));
		Фраза.Добавить(НСтр("ru = 'т.'"));
		Фраза.Добавить(НСтр("ru = 'ч.'"));
		Фраза.Добавить(НСтр("ru = 'ком'"));
		ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
		
		РезультатВТЧ = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, ".");
		
		Результат = Результат И Не РезультатВТЧ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПереводЗаЛом(Операция)
	
	// Достаточно найти слова в любом порядке
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'метал'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'лом'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'макулатур'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перевод'"));
	Фраза.Добавить(НСтр("ru = 'на'"));
	Фраза.Добавить(НСтр("ru = 'счет'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перевод'"));
	Фраза.Добавить(НСтр("ru = 'на'"));
	Фраза.Добавить(НСтр("ru = 'карт'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'карт'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перевод'"));
	Фраза.Добавить(НСтр("ru = 'телефон'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перевод'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'номер'"));;
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаИнкассацию(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'инкассир'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'налич'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'выручк'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'вносител'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'пополнен'"));
	
	// Нужно найти все слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ден'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'внес'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'внес'"));
	Фраза.Добавить(НСтр("ru = 'ср'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зачисл'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'прием'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'торг'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ден'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зачисл'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'через'"));
	Фраза.Добавить(НСтр("ru = 'УС'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уст'"));
	Фраза.Добавить(НСтр("ru = 'cash'")); // устройство Cash-in
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСловаНазначенияСБП(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'СБП'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	
	// Нужно найти все слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'систем'"));
	Фраза.Добавить(НСтр("ru = 'быстр'"));
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	// Нужно найти все слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'QR'"));
	Фраза.Добавить(НСтр("ru = 'код'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд")
	
КонецПроцедуры

Функция НазначениеПлатежаУказываетНаСБП(Операция)
	
	КлючевыеФразы = Новый Массив;
	
	ДобавитьСловаНазначенияСБП(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, "-");
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаЭквайринг(Операция)
	
	КлючевыеФразы = Новый Массив;
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'займ'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "КромеСловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'взнос'"));
	Фраза.Добавить(НСтр("ru = 'собствен'"));
	Фраза.Добавить(НСтр("ru = 'средств'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "КромеСловаПодряд");
	
	КлючевыеФразы.Добавить(НСтр("ru = 'эквай'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'мерчант'"));
	
	ДобавитьСловаНазначенияСБП(КлючевыеФразы);
	
	// Нужно найти все слова в тексте. Слова должны быть расположены последовательно, но могут быть не подряд.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'комис'"));
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	// Нужно найти все слова в тексте. Слова должны быть расположены последовательно, но могут быть не подряд.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ком'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'догов'"));
	Фраза.Добавить(НСтр("ru = 'ТСП'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'операц'"));
	Фраза.Добавить(НСтр("ru = 'МБК'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'реестр'"));
	Фраза.Добавить(НСтр("ru = 'договор'"));
	Фраза.Добавить(НСтр("ru = 'НЭК'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'MISC'"));
	Фраза.Добавить(НСтр("ru = 'комис'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'расчет'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'Э'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'экв'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'усл'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возм'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечисл'"));
	Фраза.Добавить(НСтр("ru = 'ден'"));
	Фраза.Добавить(НСтр("ru = 'ср'"));
	Фраза.Добавить(НСтр("ru = 'операц'"));
	Фраза.Добавить(НСтр("ru = 'ПК'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	Фраза.Добавить(НСтр("ru = 'комис'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'товар'"));
	Фраза.Добавить(НСтр("ru = 'услуг'"));
	Фраза.Добавить(НСтр("ru = 'ТСТ'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаВЛюбомПорядке");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'реестр'"));
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаВЛюбомПорядке");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'банк'"));
	Фраза.Добавить(НСтр("ru = 'карт'"));
	Фраза.Добавить(НСтр("ru = 'МПК'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Если Не Результат Тогда
		КлючевыеФразы = Новый Массив;
		Фраза = Новый Массив;
		Фраза.Добавить(НСтр("ru = '//реестр//'"));
		Фраза.Добавить(НСтр("ru = 'колич'"));
		ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
		
		Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, "/");
		Если Не Результат Тогда
			КлючевыеФразы = Новый Массив;
			Фраза = Новый Массив;
			Фраза.Добавить(НСтр("ru = '//реестр//'"));
			Фраза.Добавить(НСтр("ru = 'кол-во'"));
			ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
			Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, "/-");
		КонецЕсли;
		
		Если Не Результат Тогда
			Возврат Результат;
		КонецЕсли;
		
		КлючевыеФразы = Новый Массив;
		Фраза = Новый Массив;
		Фраза.Добавить(НСтр("ru = 'пере'")); // варианты: перевод, перечисление
		Фраза.Добавить(НСтр("ru = 'ден'"));
		Фраза.Добавить(НСтр("ru = 'сред'"));
		Фраза.Добавить(НСтр("ru = 'по'"));
		Фраза.Добавить(НСтр("ru = 'дог'"));
		ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
		
		Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Операция)
	
	// Ищем фразу "уставный капитал" в произвольном падеже, например, "уставном капитале".
	
	КлючевыеФразы = Новый Массив;
	
	// Нужно найти оба слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'устав'"));
	Фраза.Добавить(НСтр("ru = 'капитал'"));
	
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция)
	
	Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
		Или НазначениеПлатежаУказываетНаПеречислениеПодотчет(Операция)
		Или НазначениеПлатежаУказываетНаВозврат(Операция) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'зарплат'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зар'"));
	Фраза.Добавить(НСтр("ru = 'плат'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаРеестрСамозанятых(Операция)
	
	// По договоренности с банками эта фраза встречается при выплате самозанятым
	// используется ключевая фраза "согласно реестру'"
	
	Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
		Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'согласно'"));
	Фраза.Добавить(НСтр("ru = 'реестру'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВыпалатуСамозанятому(Операция)
	
	Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
		Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'самозан'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаУдержаниеНПДСамозанятого(Операция)
	
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечисление'"));
	Фраза.Добавить(НСтр("ru = 'уполномоченный'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	Фраза.Добавить(НСтр("ru = 'НПД'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'НПД'"));
	Фраза.Добавить(НСтр("ru = '4'"));
	Фраза.Добавить(НСтр("ru = '422'"));
	Фраза.Добавить(НСтр("ru = 'ФЗ'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВозврат(Операция)
	
	КлючеваяФразаСПробелом = НСтр("ru = 'возврат'") + " ";
	
	НазначениеПлатежа = НРег(СокрЛ(Операция.НазначениеПлатежа));
	Результат = СтрНачинаетсяС(НазначениеПлатежа, КлючеваяФразаСПробелом);
	Если Результат Тогда
		// С очень большой вероятностью наличие слова "возврат" в начале фразы означет Возврат покупателю/поставщику,
		// т.к. другие возвраты (кредиты, займы, подотчетные средства) проверены ранее.
		Возврат Истина;
	КонецЕсли;
	
	// Не всегда в операциях по возврату, слово "возврат" идет в начале текста Назначения,
	// к тому же словом может быть сокращено как "возвр" или "воз-т".
	// Но если искать такие "возвраты" по всему тексту Назначения, то они во многих случаях
	// могут характеризовать не операцию возврата, а, например, в эквайринге обозначать сумму возвратов.
	
	КлючевыеФразыКроме = Новый Массив;
	КлючевыеФразыКроме.Добавить(НСтр("ru = 'возвратов'")); // "сумма возвратов"
	КлючевыеФразыКроме.Добавить(НСтр("ru = 'возврата'"));  // "удержали по актам возврата"
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = 'комис'")); // при эквайринге в тексте выделяют не только возвраты, но и комиссию банка
	ДобавитьПравилоПроверкиФразы(КлючевыеФразыКроме, Фраза, "СловаВЛюбомПорядке");
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразыКроме, Операция);
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд", 2);
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'воз-т'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд", 2);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, "-");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы)
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'процент'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечислен'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'выплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечислен'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'выплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
КонецПроцедуры

Процедура ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'займ'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'заем'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'заём'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'ссуд'"));
	
КонецПроцедуры

Процедура ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'возвр'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'расчет'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'гашени'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'погашени'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
КонецПроцедуры

Функция НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы);
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВозвратЗайма(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'предоставлен'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'взнос'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'выдач'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'переплат'"));
	
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	РезультатЗайм = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	Если Не РезультатЗайм Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПолучениеКредита(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'кредит'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'ссуд'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'овердрафт'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'выдача транша'"));
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'включ'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'включ'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'том'"));
	Фраза.Добавить(НСтр("ru = 'числ'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'том'"));
	Фраза.Добавить(НСтр("ru = 'числ'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'т'"));
	Фраза.Добавить(НСтр("ru = 'ч'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'т'"));
	Фраза.Добавить(НСтр("ru = 'ч'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тч'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тч'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'основн'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'сумм'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'займ'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'ссуд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	РезультатЗайм = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	Если Не РезультатЗайм Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПеречислениеПодотчет(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'подотчет'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'подотчёт'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'командиров'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'суточн'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'под'"));
	Фраза.Добавить(НСтр("ru = 'очет'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'под'"));
	Фраза.Добавить(НСтр("ru = 'отчёт'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза.Добавить(НСтр("ru = 'аванс'"));
	Фраза.Добавить(НСтр("ru = 'отч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'хоз'"));
	Фраза.Добавить(НСтр("ru = 'нужд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'хоз'"));
	Фраза.Добавить(НСтр("ru = 'расход'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'ГПХ'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'гражданск'"));
	Фраза.Добавить(НСтр("ru = 'правов'"));
	Фраза.Добавить(НСтр("ru = 'характер'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'гражданск'"));
	Фраза.Добавить(НСтр("ru = 'правов'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'подряд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'за'"));
	Фраза.Добавить(НСтр("ru = 'услуг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'счет'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаСтраховыеВзносыСДоходов(Операция)
	
	КлючеваяФраза = " " + НСтр("ru = 'доход'");
	
	НазначениеПлатежа = НРег(Операция.НазначениеПлатежа);
	
	Возврат СтрНайти(НазначениеПлатежа, КлючеваяФраза) > 0;
	
КонецФункции

Процедура ДобавитьПравилоПроверкиФразы(КлючевыеФразы, СловаФразы, Правило, ПроверитьСловВНачале = Неопределено)
	
	// Скопируем источник, чтобы не перезатереть значение других правил
	КопияСловаФразы = ОбщегоНазначения.СкопироватьРекурсивно(СловаФразы);
	ПравилоОбработки = Новый Структура(Правило, КопияСловаФразы);
	Если ЗначениеЗаполнено(ПроверитьСловВНачале) Тогда
		ПравилоОбработки.Вставить("ПроверитьСловВНачалеКоличество", ПроверитьСловВНачале);
	КонецЕсли;
	
	КлючевыеФразы.Добавить(ПравилоОбработки);
	
КонецПроцедуры

Функция НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, КромеРазделителей = "")
	
	Результат = Ложь;
	
	НазначениеПлатежа = НРег(СокрЛП(СтрЗаменить(Операция.НазначениеПлатежа, Символы.ПС, " ")));
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "ё", "е");
	
	Если ПустаяСтрока(НазначениеПлатежа) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КромеРазделителей) Тогда // требуется нетиповое сочетание разделителей
		Если ЗначениеЗаполнено(Операция.РазделителиИзНазначения) Тогда
			РазделителиИзНазначения = Операция.РазделителиИзНазначения;
		Иначе
			РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
		КонецЕсли;
		
		Для НомерСимвола = 1 По СтрДлина(КромеРазделителей) Цикл
			РазделителиИзНазначения = СтрЗаменить(РазделителиИзНазначения, Сред(КромеРазделителей, НомерСимвола, 1), "");
		КонецЦикла;
		
		СловаНазначениеПлатежа = СтрРазделить(НазначениеПлатежа, РазделителиИзНазначения, Ложь);
	Иначе
		Если Не ЗначениеЗаполнено(Операция.СловаНазначениеПлатежа) Тогда
			Операция.РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
			Операция.СловаНазначениеПлатежа = СтрРазделить(НазначениеПлатежа, Операция.РазделителиИзНазначения, Ложь);
		КонецЕсли;
		
		РазделителиИзНазначения = Операция.РазделителиИзНазначения;
		СловаНазначениеПлатежа  = Операция.СловаНазначениеПлатежа;
	КонецЕсли;
	
	ПроверитьСловВНачалеКоличество = 0;
	Для Каждого КлючеваяФраза Из КлючевыеФразы Цикл
		ПозитивныйПоиск = Истина;
		Если ТипЗнч(КлючеваяФраза) = Тип("Строка") Тогда
			Правило = "СловаПодряд";
			СловаФразы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючеваяФраза);
		ИначеЕсли ТипЗнч(КлючеваяФраза) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из КлючеваяФраза Цикл
				Если КлючИЗначение.Ключ = "ПроверитьСловВНачалеКоличество" Тогда
					ПроверитьСловВНачалеКоличество = КлючИЗначение.Значение;
					Продолжить;
				КонецЕсли;
				
				Ключ = КлючИЗначение.Ключ;
			КонецЦикла;
			
			Префикс = "Кроме";
			ПозитивныйПоиск = Не СтрНачинаетсяС(Ключ, Префикс);
			Если ПозитивныйПоиск Тогда
				Префикс = "";
			КонецЕсли;
			
			Правила = ВариантыПравил();
			Правило = Сред(Ключ, СтрДлина(Префикс) + 1);
			Если Правила.Найти(Правило) = Неопределено Тогда
				// Неиизвестный тип обработки слов.
				Продолжить;
			КонецЕсли;
			
			СловаФразы = КлючеваяФраза[Префикс + Правило];
		Иначе
			// Неизвестный тип - не обслуживаем.
			Продолжить;
		КонецЕсли;
		
		ВсегоСловФразы = СловаФразы.Количество();
		Найдено = 0;
		КэшНайденных = Новый Соответствие;
		
		КоличествоПроверенных = 0;
		
		// Каждое слово в назначении платежа сравниваем со словами фразы по порядку.
		Для Каждого ТекущееСлово Из СловаНазначениеПлатежа Цикл
			КоличествоПроверенных = КоличествоПроверенных + 1;
			Если ЗначениеЗаполнено(ПроверитьСловВНачалеКоличество)
				И КоличествоПроверенных > ПроверитьСловВНачалеКоличество Тогда
				Прервать;
			КонецЕсли;
			
			Если Правило = "СловаПодряд" Или Правило = "СловаПоследовательно" Тогда
				СловоФразы = СловаФразы[Найдено];
				Если ПроверитьВхождениеСлова(ТекущееСлово, СловоФразы) Тогда
					Найдено = Найдено + 1; // ищем следующее слово фразы
					Если Найдено = ВсегоСловФразы Тогда // найдены все слова
						Результат = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Правило = "СловаПодряд" Тогда
					Найдено = 0; // начинаем поиск фразы сначала
				КонецЕсли;
			ИначеЕсли Правило = "СловаВЛюбомПорядке" Тогда
				Для Каждого СловоФразы Из СловаФразы Цикл
					Если ПроверитьВхождениеСлова(ТекущееСлово, СловоФразы) И КэшНайденных[ТекущееСлово] = Неопределено Тогда
						Найдено = Найдено + 1;
						КэшНайденных.Вставить(ТекущееСлово, Истина);
					КонецЕсли;
					
					Если Найдено = ВсегоСловФразы Тогда
						Результат = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат И ПозитивныйПоиск;
	
КонецФункции

Функция ВариантыПравил()
	
	Правила = Новый Массив;
	Правила.Добавить("СловаПодряд");
	Правила.Добавить("СловаПоследовательно");
	Правила.Добавить("СловаВЛюбомПорядке");
	
	Возврат Правила;
	
КонецФункции

Функция ПроверитьВхождениеСлова(ПроверяемоеСлово, Знач ПроверочноеСлово)
	
	Результат = Ложь;
	
	ЭтоАббревиатура = Ложь;
	Если ТолькоЗаглавныеВСтроке(ПроверочноеСлово) Тогда
		ПроверочноеСлово = НРег(ПроверочноеСлово);
		ЭтоАббревиатура = Истина;
	КонецЕсли;
	
	Если ЭтоАббревиатура Тогда
		// Для аббревиатур проверяем полное соответствие
		Результат = ПроверочноеСлово = ПроверяемоеСлово;
	Иначе
		Результат = СтрНачинаетсяС(ПроверяемоеСлово, ПроверочноеСлово);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЗаглавныеВСтроке(Значение)
	
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Символ = Сред(Значение, Позиция, 1);
		Если Символ <> ВРег(Символ) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйСловаНазначенияПлатежа()
	
	СловаНазначенияПлатежа = Новый ТаблицаЗначений;
	СловаНазначенияПлатежа.Колонки.Добавить("НомерСтроки",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СловаНазначенияПлатежа.Колонки.Добавить("СловоНазначения", ОбщегоНазначения.ОписаниеТипаСтрока(210));
	СловаНазначенияПлатежа.Колонки.Добавить("Приоритет",       ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Возврат СловаНазначенияПлатежа;
	
КонецФункции

Функция ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, НазначениеПлатежа)
	
	СловаНазначенияПлатежа = НовыйСловаНазначенияПлатежа();
	
	сч = 0;
	СловаНазначения = СтрРазделить(НазначениеПлатежа, " ,", Ложь);
	Для каждого СловоНазначения Из СловаНазначения Цикл
		НоваяСтрока = СловаНазначенияПлатежа.Добавить();
		НоваяСтрока.НомерСтроки = сч;
		НоваяСтрока.СловоНазначения = СловоНазначения;
		сч = сч + 1;
	КонецЦикла;
	
	ЧастиКарты = Новый Структура;
	ЧастиКарты.Вставить("НачКарты6", Лев(НомерКарты,  6));
	ЧастиКарты.Вставить("НачКарты4", Лев(НомерКарты,  4));
	ЧастиКарты.Вставить("НачКарты1", Лев(НомерКарты,  1));
	ЧастиКарты.Вставить("КонКарты4", Прав(НомерКарты, 4));
	
	Шаблон1_4  = ЧастиКарты.НачКарты1 + СимволПроцента() + ЧастиКарты.КонКарты4;
	Шаблон4    = ЧастиКарты.НачКарты4 + СимволПроцента() + ЧастиКарты.КонКарты4;
	Шаблон6    = ЧастиКарты.НачКарты6 + СимволПроцента() + ЧастиКарты.КонКарты4;
	ШаблонКон1 = "[*]" + ЧастиКарты.КонКарты4;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СловаНазначения", СловаНазначенияПлатежа);
	Запрос.УстановитьПараметр("Шаблон",          НомерКарты);
	Запрос.УстановитьПараметр("ШаблонРасш",      НомерКарты + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон1_4",       Шаблон1_4);
	Запрос.УстановитьПараметр("Шаблон1_4Расш",   Шаблон1_4  + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон4",         Шаблон4);
	Запрос.УстановитьПараметр("Шаблон4Расш",     Шаблон4    + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон6",         Шаблон6);
	Запрос.УстановитьПараметр("Шаблон6Расш",     Шаблон6    + "[.:)]%");
	Запрос.УстановитьПараметр("ШаблонКон1",      ШаблонКон1);
	Запрос.УстановитьПараметр("ШаблонКон1Расш",  ШаблонКон1 + "[.:)]%");
	Запрос.УстановитьПараметр("ШаблонКон2",      "[*]" + ШаблонКон1);
	Запрос.УстановитьПараметр("ШаблонКон2Расш",  "[*]" + ШаблонКон1 + "[.:)]%");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СловаНазначения.НомерСтроки КАК НомерСтроки,
	|	СловаНазначения.СловоНазначения КАК СловоНазначения
	|ПОМЕСТИТЬ ВТ_СловаНазначения
	|ИЗ
	|	&СловаНазначения КАК СловаНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СловаНазначения.НомерСтроки КАК НомерСтроки,
	|	ВТ_СловаНазначения.СловоНазначения КАК СловоНазначения,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонРасш КАК НашлиВесьНомерКарты,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон1_4
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон1_4Расш КАК НашлиНомерКартыСерединаСкрыта1,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон4
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон4Расш КАК НашлиНомерКартыСерединаСкрыта4,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон6
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон6Расш КАК НашлиНомерКартыСерединаСкрыта6,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон1
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон1Расш
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон2
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон2Расш КАК НашлиТолькоКонецКарты
	|ИЗ
	|	ВТ_СловаНазначения КАК ВТ_СловаНазначения";
	
	МаксПриоритет = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СловаНазначенияПлатежа.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СловоНазначения = СокрЛП(Выборка.СловоНазначения);
		Если Выборка.НашлиВесьНомерКарты Тогда
			СтрокаТаблицы.Приоритет = 4;
		ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта6
			Или   Выборка.НашлиНомерКартыСерединаСкрыта4
			Или   Выборка.НашлиНомерКартыСерединаСкрыта1 Тогда
			// Проверяем сначала вариант с 6-ю символами карты, т.к. он включает в себя вариант с 4-мя символами.
			Если Выборка.НашлиНомерКартыСерединаСкрыта6 Тогда
				КолОткрытыхСимволов = 6;
			ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта4 Тогда
				КолОткрытыхСимволов = 4;
			ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта1 Тогда
				КолОткрытыхСимволов = 1;
			Иначе
				Продолжить;
			КонецЕсли;
			ПозНач = СтрНайти(СловоНазначения, ЧастиКарты["НачКарты" + КолОткрытыхСимволов]);
			ПозКон = СтрНайти(СловоНазначения, ЧастиКарты.КонКарты4);
			Разделитель = Сред(СловоНазначения,
				ПозНач + КолОткрытыхСимволов,
				ПозКон - ПозНач - КолОткрытыхСимволов);
			СимволРазделителя = Лев(Разделитель, 1);
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволРазделителя)
				И ПустаяСтрока(СтрЗаменить(Разделитель, СимволРазделителя, "")) Тогда
				// Выяснили, что в качестве разделителя используется один и тот же символ и это не цифра.
				СтрокаТаблицы.Приоритет = 2;
			КонецЕсли;
		ИначеЕсли Выборка.НашлиТолькоКонецКарты Тогда
			СтрокаТаблицы.Приоритет = 1;
		КонецЕсли;
		
		Если СтрокаТаблицы.Приоритет > МаксПриоритет Тогда
			МаксПриоритет = СтрокаТаблицы.Приоритет;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксПриоритет;
	
КонецФункции

Функция ВыделитьНомерСчетаИзТекста(ИсходныйТекст, НаборШаблонов) Экспорт
	
	ПриведенныйТекст = ПривестиТекстНазначения(ИсходныйТекст);
	
	НомераСчета = СокрЛП(ВыделитьИнформацияОСуммеВНазначении(ПриведенныйТекст, "", НаборШаблонов));
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомераСчета) Тогда
		НомераСчета = "";
	КонецЕсли;
	
	Возврат НомераСчета;
	
КонецФункции

Функция ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(ИсходноеНазначениеПлатежа, НаборШаблонов)
	
	НазначениеПлатежа = ПривестиТекстНазначения(ИсходноеНазначениеПлатежа);
	
	СпецСимволыЧисла = ":,.-= ";
	ИнформацияОСумме = ВыделитьИнформацияОСуммеВНазначении(НазначениеПлатежа, СпецСимволыЧисла, НаборШаблонов);
	
	Сумма = 0;
	Если ЗначениеЗаполнено(ИнформацияОСумме) Тогда
		СуммаЧисло = СтрокаВЧисло(ИнформацияОСумме, СпецСимволыЧисла);
		Если ЗначениеЗаполнено(СуммаЧисло) Тогда
			// очистим сумму от лишних цифр-кодов, которые могли попасть в конце к копейкам
			Сумма = Цел(СуммаЧисло * 100) / 100;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция ВыделитьНДСИзНазначенияПлатежа(ИсходноеНазначениеПлатежа, СуммаПлатежа)
	Перем СтавкаНДС, ЗначениеСтавкиНДС, ЗначениеСуммыНДС;
	
	Результат = Новый Структура;
	
	НазначениеПлатежа = ПривестиТекстНазначения(ИсходноеНазначениеПлатежа);
	
	СпецСимволыЧисла = ":(%),.-= ";
	ИнформацияОНДС = ВыделитьИнформациюОНДСВНазначении(НазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла);
	
	Если ЗначениеСтавкиНДС = "БезНДС" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ЗначениеСуммыНДС = 0;
	ИначеЕсли ЗначениеСтавкиНДС = "ПустаяСсылка" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		ЗначениеСуммыНДС = 0;
	ИначеЕсли ИнформацияОНДС = Неопределено Тогда
		ЗначениеСтавкиНДС = Неопределено;
	Иначе
		ЗначениеСтавкиНДС = Неопределено;
		РезультатПоиска = ВыделитьИскомыйТекст(ИнформацияОНДС, СимволПроцента());
		Если РезультатПоиска <> Неопределено Тогда
			ИнформацияОПроцентеНДС = РезультатПоиска.ТекстДо;
			ИнформацияОСумме = РезультатПоиска.ТекстПосле;
		Иначе
			ИнформацияОПроцентеНДС = "";
			ИнформацияОСумме = ИнформацияОНДС;
		КонецЕсли;
		
		ЧисловоеЗначениеСтавкиНДС = СтрокаВЧисло(ИнформацияОПроцентеНДС, СпецСимволыЧисла);
		ЗначениеСуммыНДС = СтрокаВЧисло(ИнформацияОСумме, СпецСимволыЧисла);
		
		Если ЗначениеСуммыНДС <> Неопределено Тогда
			СуммаБезНДС = СуммаПлатежа - ЗначениеСуммыНДС;
			Если СуммаБезНДС > 0 Тогда
				РасчетноеЗначениеСтавкиНДС = Окр(100 * ЗначениеСуммыНДС / СуммаБезНДС, 0);
				Если ЧисловоеЗначениеСтавкиНДС = Неопределено Или РасчетноеЗначениеСтавкиНДС = ЧисловоеЗначениеСтавкиНДС Тогда
					ПроцентНДС = XMLСтрока(РасчетноеЗначениеСтавкиНДС);
					СтавкаНДС = СтавкаНДС(ПроцентНДС);
					Если СтавкаНДС = Неопределено Тогда
						// Расчетная ставка не найдена, подставим в документа пустую ставку и сумму НДС.
						// Если оставить Неопределено, то в документ подставится ставка "по умолчанию".
						СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
					КонецЕсли;
				Иначе
					СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧисловоеЗначениеСтавкиНДС <> Неопределено И СтавкаНДС = Неопределено Тогда
			ПроцентНДС = XMLСтрока(ЧисловоеЗначениеСтавкиНДС);
			СтавкаНДС = СтавкаНДС(ПроцентНДС);
			ЗначениеСуммыНДС = СуммаНДС(СтавкаНДС, СуммаПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	Если СтавкаНДС <> Неопределено Тогда
		Результат.Вставить("СтавкаНДС", СтавкаНДС);
	КонецЕсли;
	
	Если ЗначениеСуммыНДС <> Неопределено Тогда
		Результат.Вставить("СуммаНДС", ЗначениеСуммыНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьКодВалютнойОперацииИзНазначенияПлатежа(ИсходноеНазначениеПлатежа)
		
	НазначениеПлатежа = ПривестиТекстНазначения(ИсходноеНазначениеПлатежа);
	
	СодержитКодВалютнойОперации = СтрНачинаетсяС(ВРег(НазначениеПлатежа), "{VO");
	Если Не СодержитКодВалютнойОперации Тогда
		Возврат "";
	КонецЕсли;
		
	Результат = Сред(НазначениеПлатежа, 4, 5);
			
	Возврат Результат;
	
КонецФункции

Функция СловоИсключениеОтмены()
	
	Возврат НСтр("ru = 'отмены'");
	
КонецФункции

Функция НовыйШаблонВозвратыПоЭквайрингу()
	
	// Порядок шаблонов имеет значение.
	
	ТаблицаШаблонов = Новый Массив;
	ТаблицаШаблонов.Добавить(НСтр("ru = 'сумма возвратов'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'операций возврата'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат покупки по тст'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат покупки'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвратов покупки'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано по операциям возврата'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвратов'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат:'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвр.'"));
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция НовыйШаблоныКомиссия()
	
	// Порядок шаблонов имеет значение.
	
	ТаблицаШаблонов = Новый Массив;
	ТаблицаШаблонов.Добавить(НСтр("ru = 'сумма комиссии'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком.банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'усл.банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия по операциям'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком-сия по операциям'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссии'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком-сия'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'с учетом взаимозачет. вознагр.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комис.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'к.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано ком'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано'"));
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция НовыйШаблоныТекстаНДС()
	
	ТаблицаШаблонов = Новый ТаблицаЗначений;
	ТаблицаШаблонов.Колонки.Добавить("ТекстШаблона",  Новый ОписаниеТипов("Строка"));
	ТаблицаШаблонов.Колонки.Добавить("ОблагаетсяНДС", Новый ОписаниеТипов("Булево"));
	
	// Шаблоны "Без НДС".
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'без налога'");   // "Без налога (НДС)"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'без ндс'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'нет ндс'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс нет'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс включен'");
	// Текст может быть сокращен, или не уместиться.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не обл'");    // "НДС не облагается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс необл'");     // "НДС не облагается" (могут быть некорректные сокращения)
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не упл'");    // "НДС не уплачивается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не взим'");   // "НДС не взимается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не пред'");   // "НДС не предусмотрен"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'не облагается'"); // "Не облагается НДС"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'не взимается'");  // "Не взимается НДС"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс исчисляется налоговым агент'"); // "НДС исчисляется налоговым агентом"
	
	// Шаблоны, с выделенным НДС.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в том числе'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в т.ч.'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в т ч'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в тч'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в том числе ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в т.ч. ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в т ч ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в тч ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	
	// Должен быть последним в таблице, чтобы можно было проверить предыдущие шаблоны.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	
	ТаблицаШаблонов.Индексы.Добавить("ТекстШаблона");
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция ВыделитьИнформацияОСуммеВНазначении(ТекстНазначениеПлатежа, СпецСимволыЧисла, НаборШаблонов)
	Перем ИнформацияОСумме;
	
	ДопустимыеСимволыЧисла = "0123456789" + СпецСимволыЧисла;
	
	Пока Не ПустаяСтрока(ТекстНазначениеПлатежа) Цикл
		РезультатПоиска = ПоискШаблонаВТекстеНазначения(ТекстНазначениеПлатежа, НаборШаблонов);
		Если РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ТекстНазначениеПлатежа = СокрЛП(РезультатПоиска.ТекстПосле);
		
		Если Не ПустаяСтрока(ТекстНазначениеПлатежа) Тогда
			ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОСумме, ДопустимыеСимволыЧисла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОСумме;
	
КонецФункции

Функция ВыделитьИнформациюОНДСВНазначении(ТекстНазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла)
	Перем ИнформацияОНДС;
	
	ОбозначениеПроцента = СимволПроцента();
	ОбозначениеПроцентаМеждународное = "pct"; // латинские символы (сокращение от Percent), указываются без локализации
	
	ДопустимыеСимволыЧисла = "0123456789" + СпецСимволыЧисла;
	НаборШаблонов = НовыйШаблоныТекстаНДС();
	
	Пока Не ПустаяСтрока(ТекстНазначениеПлатежа) Цикл
		РезультатПоиска = ПоискШаблонаВТекстеНазначения(ТекстНазначениеПлатежа, НаборШаблонов);
		Если РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ТекстНазначениеПлатежа = СокрЛП(РезультатПоиска.ТекстПосле);
		
		Шаблон = НаборШаблонов.Найти(РезультатПоиска.ИскомыйТекст, "ТекстШаблона");
		Если Не Шаблон.ОблагаетсяНДС Тогда
			ЗначениеСтавкиНДС = "БезНДС";
			Прервать;
		ИначеЕсли ИнформацияОНДС <> Неопределено Тогда
			// В тексте назначения нашли несколько ставок НДС,
			// либо в одной из найденных подстрок есть паттерны похожие на НДС, но таковыми не являющиеся.
			// Такие ситуации не обслуживаем.
			ЗначениеСтавкиНДС = Неопределено;
			ИнформацияОНДС    = Неопределено;
			Прервать;
		КонецЕсли;
		
		Если Шаблон.ОблагаетсяНДС И Не ПустаяСтрока(ТекстНазначениеПлатежа) Тогда
			Если СтрНайти(ТекстНазначениеПлатежа, ОбозначениеПроцента) = 0 Тогда
				ТекстНазначениеПлатежа = СтрЗаменить(
					ТекстНазначениеПлатежа, ОбозначениеПроцентаМеждународное, ОбозначениеПроцента);
			КонецЕсли;
			
			ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОНДС, ДопустимыеСимволыЧисла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОНДС;
	
КонецФункции

Процедура ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОСумме, ДопустимыеСимволыЧисла)
	
	ПозицияРуб = СтрНайти(НРег(ТекстНазначениеПлатежа), НСтр("ru = 'руб'"));
	ПозицияКоп = СтрНайти(НРег(ТекстНазначениеПлатежа), НСтр("ru = 'коп'"));
	
	СуммаВВидеРубКоп = ПозицияРуб > 0 И ПозицияКоп > 0;
	Если СуммаВВидеРубКоп Тогда
		ТекстРуб = СокрП(Лев(ТекстНазначениеПлатежа, ПозицияРуб - 1));
		ТекстПослеРуб = Сред(ТекстНазначениеПлатежа, ПозицияРуб + 3);
		ПозицияКопВТекстПослеРуб = СтрНайти(НРег(ТекстПослеРуб), НСтр("ru = 'коп'"));
		
		НачальнаяПозицияКопеек = 0;
		Для Индекс = 1 По ПозицияКопВТекстПослеРуб Цикл
			Символ = Сред(ТекстПослеРуб, Индекс, 1);
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
				НачальнаяПозицияКопеек = Индекс;
				Прервать
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтрокиСКопейками = 0;
		Если НачальнаяПозицияКопеек > 0 Тогда
			ДлинаСтрокиСКопейками = ПозицияКопВТекстПослеРуб - НачальнаяПозицияКопеек - 1;
		КонецЕсли;
		
		Разделитель = ".";
		ИнформацияОСумме = ТекстРуб + Разделитель + Сред(ТекстПослеРуб, НачальнаяПозицияКопеек, ДлинаСтрокиСКопейками);
		ТекстНазначениеПлатежа = Сред(ТекстНазначениеПлатежа, ПозицияКоп + 3);
	Иначе
		КонечнаяПозицияЧисла = 0;
		Для Индекс = 1 По СтрДлина(ТекстНазначениеПлатежа) Цикл
			Символ = Сред(ТекстНазначениеПлатежа, Индекс, 1);
			Если ОбменСБанкомКлиентСервер.ДопустимыйСимвол(Символ, ДопустимыеСимволыЧисла) Тогда
				КонечнаяПозицияЧисла = Индекс;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КонечнаяПозицияЧисла > 0 Тогда
			ИнформацияОСумме = Лев(ТекстНазначениеПлатежа, КонечнаяПозицияЧисла);
			ТекстНазначениеПлатежа = СокрЛ(Сред(ТекстНазначениеПлатежа, КонечнаяПозицияЧисла + 1));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиТекстНазначения(ИсходноеНазначениеПлатежа)
	
	ЗаменяемыеСимволы = "()"
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ВК
		+ Символы.ПФ
		+ Символы.Таб
		+ Символы.ВТаб;
	
	НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		ЗаменяемыеСимволы, ИсходноеНазначениеПлатежа,
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", СтрДлина(ЗаменяемыеСимволы)));
	
	ЗаменитьПодстрокуВТексте(НазначениеПлатежа, "  ", " ");
	НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	
	Если СтрЗаканчиваетсяНа(НазначениеПлатежа, ".") Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(НазначениеПлатежа);
	КонецЕсли;
	
	Возврат НРег(СокрП(НазначениеПлатежа));
	
КонецФункции

// Ищет по шаблону текст в Назначение платежа и получает часть текста после этого шаблона
//
// Параметры:
//  Текст - Строка - текст Назначения платежа
//  Шаблоны - Таблица значений, Массив - шаблоны, которые нужно искать в тексте
//
// Результат
//  Неопределено, Структура - неопределено, если не нашли данные по шабонам,
// либо структура с позицией найденного в тексте шаблона и текстом до и после шаблона
//
Функция ПоискШаблонаВТекстеНазначения(Текст, Шаблоны)
	Перем Результат;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоШаблоныНДС = ТипЗнч(Шаблоны) = Тип("ТаблицаЗначений");
	
	ДопустимыеСимволы = "0123456789" + ОбменСБанкомКлиентСервер.Спецсимволы();
	Для Каждого Шаблон Из Шаблоны Цикл
		Если ЭтоШаблоныНДС Тогда
			РезультатПоиска = ВыделитьИскомыйТекст(Текст, Шаблон.ТекстШаблона);
			Если РезультатПоиска = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимволДо = СокрЛП(Прав(РезультатПоиска.ТекстДо, 1));
			Если Шаблон.ОблагаетсяНДС Тогда
				СимволПосле = СокрЛП(Лев(РезультатПоиска.ТекстПосле, 1));
			Иначе
				РезультатПоиска.ТекстПосле = "";
				СимволПосле = "";
			КонецЕсли;
		Иначе
			РезультатПоиска = ВыделитьИскомыйТекст(Текст, Шаблон);
			Если РезультатПоиска = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимволДо    = СокрЛП(Прав(РезультатПоиска.ТекстДо,   1));
			СимволПосле = СокрЛП(Лев(РезультатПоиска.ТекстПосле, 1));
		КонецЕсли;
		
		Если Не ПустаяСтрока(СимволДо) И Не ОбменСБанкомКлиентСервер.ДопустимыйСимвол(СимволДо, ДопустимыеСимволы)
			Или СтрЗаканчиваетсяНа(СокрП(РезультатПоиска.ТекстДо), СловоИсключениеОтмены())
			Или Не ПустаяСтрока(СимволПосле) И Не ОбменСБанкомКлиентСервер.ДопустимыйСимвол(СимволПосле, ДопустимыеСимволы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Неопределено Или Результат.Позиция > РезультатПоиска.Позиция Тогда
			Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьИскомыйТекст(ОбрабатываемыйТекст, ИскомыйТекст)
	
	ПозицияНачала = СтрНайти(НРег(ОбрабатываемыйТекст), НРег(ИскомыйТекст));
	Если ПозицияНачала = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстДо = СокрЛ(Лев(ОбрабатываемыйТекст, ПозицияНачала - 1));
	ТекстПосле = СокрЛП(Сред(ОбрабатываемыйТекст, ПозицияНачала + СтрДлина(ИскомыйТекст)));
	
	Возврат Новый Структура("ТекстДо, ИскомыйТекст, ТекстПосле, Позиция",
		ТекстДо, ИскомыйТекст, ТекстПосле, ПозицияНачала - 1);
	
КонецФункции

Функция СтрокаВЧисло(ТекстСЧислом, ДопустимыеСимволыЧисла)
	
	Если ПустаяСтрока(ТекстСЧислом) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = СтрЗаменить(ТекстСЧислом, " ", "");
	
	УдалитьСимволВНачале = Ложь;
	УдалитьСимволВКонце  = Ложь;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволыЧисла) Цикл
		СпецСимвол = Сред(ДопустимыеСимволыЧисла, Индекс, 1);
		Если СтрНачинаетсяС(Текст, СпецСимвол) Тогда
			УдалитьСимволВНачале = Истина;
		КонецЕсли;
		Если СтрЗаканчиваетсяНа(Текст, СпецСимвол) Тогда
			УдалитьСимволВКонце = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УдалитьСимволВНачале Тогда
		Текст = Сред(Текст, 2);
	КонецЕсли;
	
	Если УдалитьСимволВКонце Тогда
		Текст = Сред(Текст, 1, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	// Группы разрядов цифр могут быть отделены запятой, уберем ее.
	РазделительЗапятая = ",";
	РазделительТочка   = ".";
	ЭтоРазделитель     = Ложь;
	ГруппаРазрядов     = "";
	КоличествоСимволов = СтрДлина(Текст);
	Для Номер = 1 По КоличествоСимволов Цикл
		Символ = Сред(Текст, Номер, 1);
		ДлинаГруппы = СтрДлина(ГруппаРазрядов);
		Если Символ = РазделительТочка Или Символ = РазделительЗапятая Тогда
			ГруппаРазрядов = "";
			Если ДлинаГруппы = 0 И Символ = РазделительЗапятая Или ДлинаГруппы = 3 Тогда
				ЭтоРазделитель = Истина;
			Иначе
				ЭтоРазделитель = Ложь;
			КонецЕсли;
			
			Если Символ = РазделительТочка Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоРазделитель Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
				ГруппаРазрядов = ГруппаРазрядов + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДлинаГруппы = СтрДлина(ГруппаРазрядов);
	Если ЭтоРазделитель И ДлинаГруппы = 0 Или ДлинаГруппы = 3 Тогда
		Текст = СтрЗаменить(Текст, ",", "");
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволыЧисла) Цикл
		Символ = Сред(ДопустимыеСимволыЧисла, Индекс, 1);
		Текст = СтрЗаменить(Текст, Символ, ".");
	КонецЦикла;
	
	ЗаменитьПодстрокуВТексте(Текст, "..", ".");
	
	Пока СтрНачинаетсяС(Текст, ".") Цикл
		Текст = Сред(Текст, 2);
	КонецЦикла;
	
	Пока СтрЗаканчиваетсяНа(Текст, ".") Цикл
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Текст);
	КонецЦикла;
	
	Если СтрЧислоВхождений(Текст, ".") > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УдалитьЛидирующиеНулиИзСтроковогоПредставленияЧисла(Текст);
	
	ПозицияТочки = СтрНайти(Текст, ".");
	Точность = ?(ПозицияТочки = 0, 0, СтрДлина(Текст) - ПозицияТочки);
	ФорматнаяСтрока = "ЧДЦ=" + Точность + "; ЧН=0; ЧРД=.; ЧГ=0";
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЧисловоеЗначение = ОписаниеТипаЧисло.ПривестиЗначение(Текст);
	
	Если Формат(ЧисловоеЗначение, ФорматнаяСтрока) = Текст Тогда
		Возврат ЧисловоеЗначение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьЛидирующиеНулиИзСтроковогоПредставленияЧисла(Текст)
	
	Текст = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Текст, "0");
	Если ПустаяСтрока(Текст) Или СтрНачинаетсяС(Текст, ".") Тогда
		Текст = "0" + Текст;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьПодстрокуВТексте(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	
	Если СтрНайти(ПодстрокаЗамены, ПодстрокаПоиска) > 0 Тогда
		Возврат; // иначе цикл ниже никогда не остановится
	КонецЕсли;
	
	Пока СтрНайти(Значение, ПодстрокаПоиска) > 0 Цикл
		Значение = СтрЗаменить(Значение, ПодстрокаПоиска, ПодстрокаЗамены);
	КонецЦикла;
	
КонецПроцедуры

// Ищет ФИО учредителя в назначении платежа.
//
// Параметры:
//  Параметры - см. НовыйПараметрыОпределенияХозяйственнойОперации()
//
// Возвращаемое значение:
//  - Структура - реквизиты учредителя, если найден
//   * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - учредитель
//   * Наименование - имя учредителя
//  - Неопределено - если учредитель не найден
//
Функция УчредительФизЛицоИзНазначенияПлатежа(Параметры)
	
	НазначениеПлатежа = НРег(Параметры.Операция.НазначениеПлатежа);
	
	СоставУчредителей = Параметры.ВладелецСчета.УчредителиОрганизации;
	
	Для Каждого Учредитель Из СоставУчредителей Цикл 
		Если Учредитель.ЭтоФизЛицо 
			И СтрНайти(НазначениеПлатежа, НРег(Учредитель.Наименование)) > 0 Тогда 
			Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВыплатуПроцентовПоДепозиту(Операция)
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДанныеВладелецСчета(ОписаниеВладельцаСчета, ОписаниеОрганизации, ОписаниеСчета = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОписаниеВладельцаСчета.Организация)
		И ОписаниеВладельцаСчета.Организация <> ОписаниеОрганизации.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВладельцаСчета.ВалютаСчета =
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОписаниеВладельцаСчета.Организация = ОписаниеОрганизации.Ссылка;
	
	Если ЗначениеЗаполнено(ОписаниеВладельцаСчета.Организация) Тогда
		ОписаниеВладельцаСчета.КоличествоСчетовОрганизации =
			Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(ОписаниеВладельцаСчета.Организация);
	КонецЕсли;
	
	Если ОписаниеСчета <> Неопределено Тогда
		ОписаниеВладельцаСчета.БанковскийСчет = ОписаниеСчета.Ссылка;
		
		ПутиКРеквизитам = Новый Структура;
		ПутиКРеквизитам.Вставить("ВалютаСчета", "ВалютаДенежныхСредств");
		ПутиКРеквизитам.Вставить("БИК",         "Банк.Код");
		ПутиКРеквизитам.Вставить("НомерБанковскогоСчета", "НомерСчета");
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеВладельцаСчета.БанковскийСчет, ПутиКРеквизитам);
		
		ЗаполнитьЗначенияСвойств(ОписаниеВладельцаСчета, РеквизитыСчета);
		
		Если ТипЗнч(ОписаниеСчета.ОписаниеСсылки.Владелец) = Тип("СправочникСсылка.Организации") Тогда
			ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			БанковскиеСчетаЦифровые = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(
				ОписаниеВладельцаСчета.Организация, ВалютаРеглУчета, , Истина);
			Если БанковскиеСчетаЦифровые.Количество() > 0 Тогда
				ОписаниеВладельцаСчета.ЦифровойКошелек = БанковскиеСчетаЦифровые[0].Ссылка;
			КонецЕсли;
			ОписаниеВладельцаСчета.СчетБанк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ОписаниеВладельцаСчета.БанковскийСчет, "СчетБанк");
			ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов = ОписаниеСчета.ОписаниеСсылки.СчетКорпоративныхРасчетов;
			Если ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов Тогда
				ОписаниеВладельцаСчета.КорпоративныеКартыПодотчетныхЛиц = КорпоративныеКартыПодотчетныхЛиц(
					ОписаниеВладельцаСчета.Организация,
					ОписаниеВладельцаСчета.БанковскийСчет,
					ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ОписаниеОрганизации.ОписаниеСсылки.ЮридическоеФизическоеЛицо;
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		ОписаниеВладельцаСчета.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	Если ОписаниеВладельцаСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ОписаниеВладельцаСчета.ИПИспользуетТрудНаемныхРаботников =
			УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(ОписаниеВладельцаСчета.Организация);
		ОписаниеВладельцаСчета.ФИОИП =
			Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ОписаниеВладельцаСчета.Организация, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОписаниеВладельцаСчета.ЕстьНеоплаченныеРеестрыСамозанятых =
		Документы.ВыплатыСамозанятым.ЕстьНеоплаченныеРеестрыСамозанятых(ОписаниеВладельцаСчета.Организация);
	
	ОписаниеВладельцаСчета.Подразделение = Справочники.БанковскиеСчета.ПодразделениеПоУмолчанию(
		ОписаниеВладельцаСчета.Организация,
		ОписаниеВладельцаСчета.БанковскийСчет);
	
	ОписаниеВладельцаСчета.УчредителиОрганизации = Справочники.Организации.УчредителиОрганизации(ОписаниеВладельцаСчета.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхАвтозаполнения

Процедура ПроверитьИзменениеДанныхАвтозаполненияПоступление(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ЗагрузкаВыписки") Тогда
		ДокументОбъект.ДополнительныеСвойства.Удалить("ЗагрузкаВыписки");
		Возврат;
	КонецЕсли;
	
	СохраненныеДанные = СохраненныеДанныеАвтозаполнения(ДокументОбъект);
	Если СохраненныеДанные = Неопределено Тогда
		ДокументОбъект.ИзмененияАвтозаполнения = "";
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект);
	
	Изменения = ИзмененияДанныхАвтозаполненияРеквизитов(СохраненныеДанные, ТекущиеДанные, 
		НовыйДанныеАвтозаполненияРеквизитыПоступление());
	
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"РасшифровкаПлатежа", НовыйДанныеАвтозаполненияРасшифровкаПлатежаПоступление(), 
		Изменения);
	
	Если Изменения.Количество() = 0 Тогда
		ДокументОбъект.ИзмененияАвтозаполнения = "";
	Иначе
		ДокументОбъект.ИзмененияАвтозаполнения = ЗначениеВJSON(Изменения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменениеДанныхАвтозаполненияСписание(ДокументОбъект) Экспорт
	
	СохраненныеДанные = СохраненныеДанныеАвтозаполнения(ДокументОбъект);
	Если СохраненныеДанные = Неопределено Тогда
		ДокументОбъект.ИзмененияАвтозаполнения = "";
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект);
	
	Изменения = ИзмененияДанныхАвтозаполненияРеквизитов(СохраненныеДанные, ТекущиеДанные, 
		НовыйДанныеАвтозаполненияРеквизитыСписание());
	
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"РасшифровкаПлатежа", НовыйДанныеАвтозаполненияРасшифровкаПлатежаСписание(), 
		Изменения);
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"ПеречислениеЗаработнойПлаты", НовыйДанныеАвтозаполненияПеречислениеЗаработнойПлатыСписание(), 
		Изменения);
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"ПеречислениеДепонентов", НовыйДанныеАвтозаполненияПеречислениеДепонентовСписание(), 
		Изменения);
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"ПеречислениеНДФЛ", НовыйДанныеАвтозаполненияПеречислениеНДФЛСписание(), 
		Изменения);
	ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, 
		"НалоговыйАгентНДС", НовыйДанныеАвтозаполненияНалоговыйАгентНДССписание(), 
		Изменения);
	
	Если Изменения.Количество() = 0 Тогда
		ДокументОбъект.ИзмененияАвтозаполнения = "";
	Иначе
		ДокументОбъект.ИзмененияАвтозаполнения = ЗначениеВJSON(Изменения);
	КонецЕсли;
	
КонецПроцедуры

Функция СохранятьДанныеАвтозаполненияДокументов()

	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.СохранятьДанныеАвтозаполненияБанковскихВыписок.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;

КонецФункции

Процедура СохранитьДанныеАвтозаполненияДокумента(ДокументОбъект, ХозяйственнаяОперация)
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДанныеАвтозаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвтозаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ДанныеАвтозаполнения");
	Если НЕ ЗначениеЗаполнено(ДанныеАвтозаполнения) Тогда
		ДанныеОбъекта = ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект);
		ДанныеАвтозаполнения = ЗначениеВJSON(ДанныеОбъекта);
	КонецЕсли;
	ДокументОбъект.ДанныеАвтозаполнения = ДанныеАвтозаполнения;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаВыписки", Истина);
	
КонецПроцедуры

Процедура СохранитьДанныеАвтозаполненияСтрокВыписки(РаспознаннаяВыписка, Выписка, ШаблоныОбъектов)
	
	Если ШаблоныОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РаспознаннаяВыписка.ВладелецСчета, "СоздаватьСчетОрганизации", Ложь)
			И ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
		Если РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет.ПолучитьОбъект() = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
		Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			ИЛИ ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) 
			ИЛИ РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = НовыйДанныеЗаполнения(
			Операция,
			РаспознаннаяОперация.ПлатежноеПоручение,
			РаспознаннаяОперация.ХозяйственнаяОперация,
			РаспознаннаяВыписка.ВладелецСчета);
		ДокументОбъект = ?(Операция.ПоступилоСписано = "Поступило",
			ДесериализованноеЗначениеИзJSON(ШаблоныОбъектов.ПоступлениеНаРасчетныйСчет),
			ДесериализованноеЗначениеИзJSON(ШаблоныОбъектов.СписаниеСРасчетногоСчета));
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		СериализованныйОбъект = СериализованноеЗначениеВJSON(ДокументОбъект);
		РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("ДокументОбъект", СериализованныйОбъект);
		ДанныеОбъекта = ДанныеСериализованногоОбъекта(СериализованныйОбъект);
		РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("ДанныеАвтозаполнения", ЗначениеВJSON(ДанныеОбъекта));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзмененияДанныхАвтозаполненияРеквизитов(СохраненныеДанные, ТекущиеДанные, СтруктураАвтозаполнения)

	Результат = Новый Структура;
	
	Если СохраненныеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАвтозаполнения, СохраненныеДанные);
	КонецЕсли;
	Для каждого ЭлементСтруктуры Из СтруктураАвтозаполнения Цикл
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
		ЗначениеАвтозаполнения = ЭлементСтруктуры.Значение;
		ТекущееЗначение = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные[ИмяРеквизита]);
		Если ТипЗнч(ЗначениеАвтозаполнения) <> ТипЗнч(ТекущееЗначение) Тогда
			ЕстьИзменения = Истина;
		ИначеЕсли ТипЗнч(ЗначениеАвтозаполнения) = Тип("Структура") Тогда
			ЕстьИзменения = НЕ ОбщегоНазначения.КоллекцииИдентичны(ЗначениеАвтозаполнения, ТекущееЗначение);
		Иначе
			ЕстьИзменения = ЗначениеАвтозаполнения <> ТекущееЗначение;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			Изменение = Новый Структура("ЗначениеАвтозаполнения,ТекущееЗначение", ЗначениеАвтозаполнения, ТекущееЗначение);
			Результат.Вставить(ИмяРеквизита, Изменение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;	

КонецФункции

Процедура ДобавитьИзмененияДанныхАвтозаполненияТаблицы(СохраненныеДанные, ТекущиеДанные, ИмяТаблицы, СтруктураАвтозаполнения, Изменения)

	ИзмененияТаблицы = Новый Массив;
	БылоСтрок = ?(СохраненныеДанные.Свойство(ИмяТаблицы), СохраненныеДанные[ИмяТаблицы].Количество(), 0);
	СталоСтрок = ?(ТекущиеДанные.Свойство(ИмяТаблицы), ТекущиеДанные[ИмяТаблицы].Количество(), 0);
	
	Для НомерСтроки = 1 По Макс(БылоСтрок, СталоСтрок) Цикл
		СохраненныеДанныеСтроки = ?(НомерСтроки <= БылоСтрок, СохраненныеДанные[ИмяТаблицы][НомерСтроки - 1], 
			Неопределено);
		ТекущиеДанныеСтроки = ?(НомерСтроки <= СталоСтрок, ТекущиеДанные[ИмяТаблицы][НомерСтроки - 1], 
			Неопределено);
		ИзмененияСтроки = ИзмененияДанныхАвтозаполненияРеквизитов(СохраненныеДанныеСтроки, ТекущиеДанныеСтроки, 
			СтруктураАвтозаполнения);
		Если ИзмененияСтроки.Количество() > 0 Тогда
			ИзмененияТаблицы.Добавить(ИзмененияСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененияТаблицы.Количество() > 0 Тогда
		Изменения.Вставить(ИмяТаблицы, ИзмененияТаблицы);
	КонецЕсли;

КонецПроцедуры

Функция ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект)

	СериализованныйОбъект = СериализованноеЗначениеВJSON(ДокументОбъект);
	Результат = ДанныеСериализованногоОбъекта(СериализованныйОбъект);
	Возврат Результат;
	
КонецФункции

Функция ДанныеСериализованногоОбъекта(СериализованныйОбъект)
	
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "#type", "type");
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "#value", "value");
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "jcfg:", "");
	СтруктураОбъекта = ЗначениеИзJSON(СериализованныйОбъект);
	
	УдаляемыеКлючи = СтрРазделить("Ref,DeletionMark,Date,Number,Posted,"
		+ "РучнаяКорректировка,ДанныеАвтозаполнения,ИзмененияАвтозаполнения,РеквизитыКонтрагента,"
		+ "НазначениеПлатежа,Ответственный,Комментарий", ",", Ложь);
	Для каждого ЭлементСтруктуры Из СтруктураОбъекта.value Цикл
		Если СтрНачинаетсяС(ЭлементСтруктуры.Ключ, "Удалить") Тогда
			УдаляемыеКлючи.Добавить(ЭлементСтруктуры.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемыйКлюч Из УдаляемыеКлючи Цикл
		СтруктураОбъекта.value.Удалить(УдаляемыйКлюч);
	КонецЦикла;
	
	Возврат СтруктураОбъекта.value;
	
КонецФункции

Функция СохраненныеДанныеАвтозаполнения(ДокументОбъект)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДанныеАвтозаполнения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАвтозаполнения = ЗначениеИзJSON(ДокументОбъект.ДанныеАвтозаполнения);
	Если ТипЗнч(ДанныеАвтозаполнения) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДанныеАвтозаполнения;

КонецФункции

Функция ШаблоныОбъектовСохранениеДанныхАвтозаполнения()
	
	Если НЕ СохранятьДанныеАвтозаполненияДокументов() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
	Результат.Вставить("ПоступлениеНаРасчетныйСчет", СериализованноеЗначениеВJSON(ДокументОбъект));
	ДокументОбъект = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
	Результат.Вставить("СписаниеСРасчетногоСчета", СериализованноеЗначениеВJSON(ДокументОбъект));
	Возврат Результат;

КонецФункции

Функция РанееЗаполненныйОбъект(ХозяйственнаяОперация, Настройки)
	
	ИспользоватьРанееЗаполненныеОбъекты = НЕ Настройки.Свойство("ИспользуетсяФормаОбменаСБанком");
	Если НЕ ИспользоватьРанееЗаполненныеОбъекты Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ДокументОбъект");
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта)
		ИЛИ ТипЗнч(ДанныеОбъекта) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОбъект = ДесериализованноеЗначениеИзJSON(ХозяйственнаяОперация.ДокументОбъект);
	Возврат ДокументОбъект;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияРеквизитыПоступление()
	
	ИменаКлючей = "ВидОперации,СчетБанк,Контрагент,СчетКонтрагента,СуммаДокумента,
		|СчетУчетаРасчетовСКонтрагентом,СубконтоКт1,СубконтоКт2,СубконтоКт3,ПодразделениеКт,
		|СтатьяДвиженияДенежныхСредств,СуммаУслуг";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияРеквизитыСписание()
	
	ИменаКлючей = "ВидОперации,Налог,ВидНалоговогоОбязательства,СчетБанк,Контрагент,СчетКонтрагента,СуммаДокумента,
		|СчетУчетаРасчетовСКонтрагентом,СубконтоДт1,СубконтоДт2,СубконтоДт3,ПодразделениеДт,
		|СтатьяДвиженияДенежныхСредств,НалоговыйПериод,ПлатежнаяВедомость,РегистрацияВНалоговомОргане,НачислениеДивидендов";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияРасшифровкаПлатежаПоступление()
	
	ИменаКлючей = "ДоговорКонтрагента,СпособПогашенияЗадолженности,Сделка,
		|СуммаПлатежа,КурсВзаиморасчетов,СуммаВзаиморасчетов,СтавкаНДС,СуммаНДС,СчетНаОплату,СтатьяДвиженияДенежныхСредств,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СубконтоКт1,СубконтоКт2,СубконтоКт3,ПодразделениеКт,
		|СуммаУслуг,ПорядокОтраженияАванса";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияРасшифровкаПлатежаСписание()
	
	ИменаКлючей = "ДоговорКонтрагента,СпособПогашенияЗадолженности,Сделка,
		|СуммаПлатежа,КурсВзаиморасчетов,СуммаВзаиморасчетов,СтавкаНДС,СуммаНДС,СтатьяДвиженияДенежныхСредств,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,ОтражениеВУСН,СчетНаОплату,
		|ВидПлатежаПоКредитамЗаймам";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияПеречислениеЗаработнойПлатыСписание()
	
	ИменаКлючей = "СуммаПлатежа,Ведомость";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияПеречислениеДепонентовСписание()
	
	ИменаКлючей = "Ведомость,СуммаПлатежа";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияПеречислениеНДФЛСписание()
	
	ИменаКлючей = "ФизическоеЛицо,Сумма,Ставка,ИсчисленоПоДивидендам,ВключатьВДекларациюПоНалогуНаПрибыль";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеАвтозаполненияНалоговыйАгентНДССписание()
	
	ИменаКлючей = "Контрагент,Договор,ДокументРасчетов,Сумма";
	Результат = Новый Структура(ИменаКлючей);
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СериализованноеЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗначениеИзJSON(ТекстJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Значение = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ДесериализованноеЗначениеИзJSON(ТекстJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Значение = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РаспознанныеДанныеИзБанкаОбщая(ВыпискаБанка, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста)
	
	Если Не ЗначениеЗаполнено(ВыпискаБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазобратьНазначениеПлатежа(ВыпискаБанка.ДанныеИзБанка);
	
	Если СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("СоздаватьСчетОрганизации",  Ложь);
	КонецЕсли;
	
	СоздаватьСчетОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СведенияОВладельцеБанковскогоСчетаИзКонтекста, "СоздаватьСчетОрганизации", Ложь);
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	
	ИдентификаторыУчастниковОпераций = ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(
		УчастникиОпераций,
		ВыпискаБанка.ДанныеИзБанка);
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	ПротоколГруппировкиВыписки = НовыйПротоколГруппировкиВыписки();
	Выписки = ВыпискиПоБанковскимСчетам(
		ВыпискаБанка.ДанныеИзБанка,
		УчастникиОпераций,
		ИдентификаторыУчастниковОпераций,
		ПротоколГруппировкиВыписки);
	ИдентификаторыУчастниковОпераций = Неопределено; // Все данные помещены в коллекцию Выписки; использовать ИдентификаторыУчастниковОпераций более не следует
	
	РаспознанныеВыписки = РаспознатьВыписки(Выписки, УчастникиОпераций, СоздаватьСчетОрганизации);
	
	Возврат НовыйРаспознанныеДанныеИзБанка(
		Выписки,
		РаспознанныеВыписки,
		УчастникиОпераций,
		Настройки,
		ВыпискаБанка.Протокол,
		ПротоколГруппировкиВыписки,
		СоздаватьСчетОрганизации);
	
КонецФункции

Функция РезультатРаспознаванияПрочитанныхДанных(ПрочитанныеДанные, Настройки = Неопределено, СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено)
	
	РазобратьНазначениеПлатежа(ПрочитанныеДанные.ДанныеИзБанка);
	
	Если СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	КонецЕсли;
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	
	ИдентификаторыУчастниковОпераций = ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(
		УчастникиОпераций,
		ПрочитанныеДанные.ДанныеИзБанка);
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	ПротоколГруппировкиВыписки = НовыйПротоколГруппировкиВыписки();
	Выписки = ВыпискиПоБанковскимСчетам(
		ПрочитанныеДанные.ДанныеИзБанка,
		УчастникиОпераций,
		ИдентификаторыУчастниковОпераций,
		ПротоколГруппировкиВыписки);
	ИдентификаторыУчастниковОпераций = Неопределено; // Все данные помещены в коллекцию Выписки; использовать ИдентификаторыУчастниковОпераций более не следует
	
	РаспознанныеВыписки = РаспознатьВыписки(Выписки, УчастникиОпераций);
	
	Если Настройки = Неопределено Тогда
		Настройки = Обработки.КлиентБанк.НастройкиЗагрузки();
	КонецЕсли;
	
	Возврат НовыйРаспознанныеДанныеИзБанка(
		Выписки,
		РаспознанныеВыписки,
		УчастникиОпераций,
		Настройки,
		ПрочитанныеДанные.Протокол,
		ПротоколГруппировкиВыписки);
	
КонецФункции

Функция ВидОперацииТребуетЗаполненияКурса(ВидОперации)
	
	ВидыОперацииТребующиеКурс = Новый Массив;
	ВидыОперацииТребующиеКурс.Добавить(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ВидыОперацииТребующиеКурс.Добавить(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	Возврат ВидыОперацииТребующиеКурс.Найти(ВидОперации) <>  Неопределено;
	
КонецФункции

Функция ВидОперацииСодержитОтборПоВалютномуУчету(ВидОперации)
	
	СодержитОтборПоВалюте = Новый Массив;
	СодержитОтборПоВалюте.Добавить(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	СодержитОтборПоВалюте.Добавить(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	
	Возврат СодержитОтборПоВалюте.Найти(ВидОперации) <> Неопределено;
	
КонецФункции

#КонецОбласти
