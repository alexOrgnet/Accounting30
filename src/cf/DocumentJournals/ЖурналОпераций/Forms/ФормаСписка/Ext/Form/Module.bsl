#Область ОписаниеПеременных

&НаКлиенте
Перем ВремяПоследнейОбработкиОповещения, ИсточникПоследнегоОповещения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УИДЗамера = Параметры.УИДЗамера;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ОперацияБух);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусРеализацииПоУмолчанию", Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусПоступленияПоУмолчанию", Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусВыплатыСамозанятымПоУмолчанию", Перечисления.СтатусыДокументовВыплатыСамозанятым.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусКоммерческогоПредложенияПоУмолчанию", Перечисления.СтатусыКоммерческогоПредложения.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"ТекстОтраженВБухучете", НСтр("ru='Отражен в бухучете'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ТекстНеОтраженВБухучете", НСтр("ru='Не отражен в бухучете'"));
	
	ЗапрещенныеПоля = Новый Массив;
	ЗапрещенныеПоля.Добавить("ПараметрыДанных");
	Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеПоля);
	
	Если Параметры.КлючНазначенияИспользования = "ДокументыПокупателей"
	 Или Параметры.КлючНазначенияИспользования = "ДокументыПоставщиков" Тогда
		
		ТипыДокументов = ЖурналыДокументов.ЖурналОпераций.СписокТиповПоНазначениюИспользования(
			Параметры.КлючНазначенияИспользования);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ОтборТипыДокументов", ТипыДокументов, Истина);
		ИспользуетсяПодсистемаЗарплата = Ложь;
		
	Иначе
		
		ТипыИсключаемыхДокументов = ЖурналыДокументов.ЖурналОпераций.СписокТиповИсключений();
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ТипыИсключаемыхДокументов", ТипыИсключаемыхДокументов, Истина);
		
		ИспользуетсяПодсистемаЗарплата = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
			Или ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
		
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	ТипИнформации = "Контрагент";
	НастроитьВнешнийВидОтбораИнформация();
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	
	Если Не ПустаяСтрока(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
		
		// Отбор по контрагенту
		ОтборИнформацияИспользование = Параметры.Отбор.Свойство("Контрагент", ОтборИнформация)
			И ЗначениеЗаполнено(ОтборИнформация);
		Если Не ОтборИнформацияИспользование Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан контрагент для показа документов.'"));
			Отказ = Истина;
		КонецЕсли;
		
		Элементы.СписокОрганизация.Видимость = ИспользуетсяНесколькоОрганизаций;
		// Отбор по основной организации
		Если ИспользуетсяНесколькоОрганизаций Тогда
			ОтборОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		УстановитьОтборПоКритериюОтбора();
		ОтборКонтрагент = ОтборИнформация;
		Элементы.ГруппаОтборИнформация.Видимость = Ложь;
		Параметры.Отбор.Удалить("Контрагент");
		Элементы.СписокИнформация.Видимость = Ложь;
		
		УстановитьСвязиПараметровВыбораДоговораКонтрагента();
		Элементы.СписокДоговорКонтрагента.Видимость = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
		Элементы.ГруппаОтборДоговорКонтрагента.Видимость = Элементы.СписокДоговорКонтрагента.Видимость;
		
	ИначеЕсли КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		ОтборДоговорКонтрагентаИспользование = Параметры.Отбор.Свойство("ДоговорКонтрагента", ОтборДоговорКонтрагента)
			И ЗначениеЗаполнено(ОтборДоговорКонтрагента);
		Если Не ОтборДоговорКонтрагентаИспользование Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан договор контрагента для показа документов.'"));
			Отказ = Истина;
		КонецЕсли;
		
		ОтборИнформацияИспользование = Ложь;
		Элементы.ГруппаОтборИнформация.Видимость = Ложь;
		Элементы.СписокИнформация.Видимость = Ложь;
		
		ОтборОрганизацияИспользование = Ложь;
		Элементы.ГруппаОтборОрганизация.Видимость = Ложь;
		Элементы.СписокОрганизация.Видимость = ИспользуетсяНесколькоОрганизаций
			И БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
			
		УстановитьОтборПоКритериюОтбора();
		Элементы.ГруппаОтборДоговорКонтрагента.Видимость = Ложь;
		Параметры.Отбор.Удалить("ДоговорКонтрагента");
		
	Иначе
		
		СпособОтбора = ""; // отборы по контрагенту и договору могут изменяться после открытия
		
		Элементы.СписокОрганизация.Видимость = ИспользуетсяНесколькоОрганизаций;
		// Отбор по основной организации
		Если ИспользуетсяНесколькоОрганизаций Тогда
			ОтборОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		Элементы.ГруппаОтборДоговорКонтрагента.Видимость = Ложь;
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальныеКоманды;
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	Если Не МожноРедактировать Тогда
		Элементы.ПодменюСоздать.Видимость = Ложь;
	Иначе
		НастроитьОперацииПодменюСоздать();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.ЖурналОпераций",
		"ФормаСписка",
		НСтр("ru = 'Новости: Журнал операций'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
		// По графе "Информация" может быть быстрый отбор как по контрагенту, так и по сотруднику.
		
		Если ТипЗнч(Настройки["ОтборИнформация"]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Если Элементы.ТипИнформации.СписокВыбора.НайтиПоЗначению("Сотрудник") <> Неопределено Тогда
				
				ТипИнформации = "Сотрудник";
				
			Иначе
				
				ТипИнформации                = "Контрагент";
				ОтборИнформация              = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтборИнформацияИспользование = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТипИнформации = "Контрагент";
			ОтборКонтрагент = ОтборИнформация;
			
		КонецЕсли;
		УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Информация");
		
	Иначе
		// По графе "Информация" может быть быстрый отбор только по контрагенту.
		
		ТипИнформации = "Контрагент";
		Если ТипЗнч(ОтборИнформация) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Обрабатываем некорректно сохраненные настройки.
			ОтборИнформация              = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ОтборИнформацияИспользование = Ложь;
			
			УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
			
		КонецЕсли;
		
		Если ПустаяСтрока(СпособОтбора) Тогда
			
			ОтборКонтрагент = ОтборИнформация;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Информация");
			
			Если ЗначениеЗаполнено(ОтборИнформация)
			   И ЗначениеЗаполнено(ОтборДоговорКонтрагента)
			   И ОтборКонтрагент <> ПараметрыВыбораДоговораКонтрагента(ОтборДоговорКонтрагента).Владелец Тогда
				// Обрабатываем некорректно сохраненные настройки.
				ОтборДоговорКонтрагентаИспользование = Ложь;
				ОтборДоговорКонтрагента = Неопределено;
			КонецЕсли;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДоговорКонтрагента");
			
		ИначеЕсли КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда // не изменяем контрагента
			
			ОтборИнформация = ОтборКонтрагент;
			
			Если ЗначениеЗаполнено(ОтборИнформация)
			   И ЗначениеЗаполнено(ОтборДоговорКонтрагента)
			   И ОтборКонтрагент <> ПараметрыВыбораДоговораКонтрагента(ОтборДоговорКонтрагента).Владелец Тогда
				// Обрабатываем некорректно сохраненные настройки.
				ОтборДоговорКонтрагентаИспользование = Ложь;
				ОтборДоговорКонтрагента = Неопределено;
			КонецЕсли;
			УстановитьСвязиПараметровВыбораДоговораКонтрагента();
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДоговорКонтрагента");
			
		ИначеЕсли КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда // не изменяем договор
			
			ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных("ОтборДоговорКонтрагента");
			ЗначениеПараметраКомпоновкиДанных = Список.Параметры.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			ОтборДоговорКонтрагента = ?(ЗначениеПараметраКомпоновкиДанных = Неопределено,
				Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
				ЗначениеПараметраКомпоновкиДанных.Значение);
				
		Иначе // обрабатываем некорректно сохраненные настройки
			
			ОтборИнформация = ОтборКонтрагент;
			ОтборДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОтборОрганизация = Параметр;
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		
		Если КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
			УстановитьСвязиПараметровВыбораДоговораКонтрагента();
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СпособОтбора = "ГРАФА" Или СпособОтбора = "СПИСОК")
	   И (ИмяСобытия = "ОбновитьФорму" Или Лев(ИмяСобытия, 7) = "Запись_")
	   И ЗначениеЗаполнено(Источник) Тогда

		// Для предотвращения двойных срабатываний (сначала "ОбновитьФорму, затем "Запись_") нужно проконтролировать время,
		// прошедшее с момента последнего вызова оповещения. Предполагается, что время между двумя оповещениями по одному
		// документу не может быть более четырех секунд.
		Если ИсточникПоследнегоОповещения <> Источник
		 Или ВремяПоследнейОбработкиОповещения + 4000 < ТекущаяУниверсальнаяДатаВМиллисекундах() Тогда

			ОбработкаОповещенияОЗаписиДокумента(Источник);
			ИсточникПоследнегоОповещения = Источник;
			ВремяПоследнейОбработкиОповещения = ТекущаяУниверсальнаяДатаВМиллисекундах();

		КонецЕсли;
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Или ПустаяСтрока(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборДокумент) Тогда
		
		ПараметрыОткрытияДокумента = Неопределено;
		
		Если ВыбранноеЗначение = "КорректировкаСчетаФактурыВыданного" Тогда
		
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыКорректировкиСчетаФактурыВыданного(ОтборДокумент);
			
		ИначеЕсли ВыбранноеЗначение = "ИсправлениеСчетаФактурыВыданного" Тогда
			
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыИсправленияСчетаФактурыВыданного(ОтборДокумент);
			
		ИначеЕсли ВыбранноеЗначение = "КорректировкаСчетаФактурыПолученного" Тогда
			
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыКорректировкиСчетаФактурыПолученного(ОтборДокумент);
			
		ИначеЕсли ВыбранноеЗначение = "ИсправлениеСчетаФактурыПолученного" Тогда
			
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыИсправленияСчетаФактурыПолученного(ОтборДокумент);
			
		ИначеЕсли ВыбранноеЗначение = "СобственнаяОшибкаСчетФактураПолученный" Тогда
			
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыИсправленияСчетаФактурыПолученного(ОтборДокумент, Истина);
			
		ИначеЕсли ВыбранноеЗначение = "СчетФактураВыданныйНаАвансКомитента" Тогда
		
			ПараметрыОткрытияДокумента = УчетНДСКлиент.ПараметрыСчетФактураВыданныйНаАвансКомитента(ОтборДокумент);
		
		ИначеЕсли ВыбранноеЗначение = "БезвозмезднаяПередача" Тогда
		
			ПараметрыОткрытияДокумента = ПараметрыВводаНаОснованииБезвозмезднаяПередача(ОтборДокумент);
			
		Иначе
		
			ПараметрыФормы.Вставить("Основание", ОтборДокумент);
		
		КонецЕсли; 
		
		Если ПараметрыОткрытияДокумента <> Неопределено Тогда
		
			ВыбранноеЗначение = ПараметрыОткрытияДокумента.ИмяДокумента;
			ПараметрыФормы    = ПараметрыОткрытияДокумента.ПараметрыФормы;
			
		КонецЕсли; 
		
		ОтборДокумент = Неопределено;
		
	Иначе
		
		ПараметрыФормы = ПараметрыФормыДокумента(Тип("ДокументСсылка." + ВыбранноеЗначение));
		
	КонецЕсли; 
	
	ОткрытьФорму("Документ." + ВыбранноеЗначение + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Отнесем замеряемую операцию к определенному виду.
	Если ЗначениеЗаполнено(УИДЗамера) Тогда
		
		Если Параметры.КлючНазначенияИспользования = "ДокументыПокупателей" Тогда
			ИмяКлючевойОперации = "ОткрытиеФормыЖурналОперацийПокупателей";
		ИначеЕсли Параметры.КлючНазначенияИспользования = "ДокументыПоставщиков" Тогда
			ИмяКлючевойОперации = "ОткрытиеФормыЖурналОперацийПоставщиков";
		ИначеЕсли Параметры.КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
			ИмяКлючевойОперации = "ОткрытиеФормыЖурналОперацийПоКонтрагенту";
		ИначеЕсли Параметры.КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
			ИмяКлючевойОперации = "ОткрытиеФормыЖурналОперацийПоДоговоруКонтрагента";
		Иначе
			ИмяКлючевойОперации = "ОткрытиеФормыЖурналОпераций";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(УИДЗамера, ИмяКлючевойОперации);
		
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизацияИспользование = Истина;
	КонецЕсли;
	
	ОтборОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформацииПриИзменении(Элемент)
	
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	ОтборИнформацияИспользование = Ложь;
	ОтборДоговорКонтрагентаИспользование = Ложь;
	Если ТипИнформации = "Сотрудник" Тогда
		
		ОтборИнформация = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			
	Иначе
			
		ОтборИнформация = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ОтборДоговорКонтрагента = Неопределено;
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Информация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДоговорКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнформацияИспользованиеПриИзменении(Элемент)
	
	Если ТипИнформации = "Контрагент" Тогда
		ОтборКонтрагент = ОтборИнформация;
	КонецЕсли;
		
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Информация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнформацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборИнформация) Тогда
		ОтборИнформацияИспользование = Истина;
	КонецЕсли;
	
	Если ТипИнформации = "Контрагент" Тогда
		ОтборКонтрагент = ОтборИнформация;
	КонецЕсли;	
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Информация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорКонтрагентаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДоговорКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборДоговорКонтрагента) Тогда
		ОтборДоговорКонтрагентаИспользование = Истина;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДоговорКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Элемент)
	Перем ПараметрСсылки;
	
	Элементы.ОграничениеНаВыводСписка.Видимость = Ложь;
	
	Если СпособОтбора = "СПИСОК" Тогда
		ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
	КонецЕсли;
	Если ПараметрСсылки = Неопределено Или Не ПараметрСсылки.Использование Тогда
		Возврат;
	КонецЕсли;
	СпособОтбора = "КРИТЕРИЙ";
	
	Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ОтборДоговорКонтрагента", ОтборДоговорКонтрагента, ОтборДоговорКонтрагентаИспользование);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ОтборКонтрагент", ОтборИнформация, ОтборИнформацияИспользование);
		
	КонецЕсли;
	
	ПараметрСсылки.Использование = Ложь;
	
	ИмяСобытия = СтрШаблон(НСтр("ru = 'СтатистикаБП.ЖурналОперацийПоказатьВсе.%1'", "ru"), КлючНазначенияИспользования);
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяСобытия, 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
		
		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("НачальноеЗначение", ТипЗнч(ТекущиеДанные.Ссылка));
		КонецЕсли;
		Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
			СвойстваДоговора = ПараметрыВыбораДоговораКонтрагента(ОтборДоговорКонтрагента);
			ПараметрыФормы.Вставить("ВидДоговораКонтрагента", СвойстваДоговора.ВидДоговора);
		КонецЕсли;
		
		ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Элемент.ТекущаяСтрока)
		И Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущиеДанные.СостояниеДокумента = 1 Тогда
		Оповестить("ОбновитьЗакрытиеМесяца");
	КонецЕсли;
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОтборыСписков.СброситьИспользованиеПользовательскихОтборовВНастройке(Настройки);
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если СпособОтбора = "СПИСОК" Тогда
		// Повторно формируем список последних документов.
		ОбновитьОтборПоКритериюОтбора();

	ИначеЕсли СпособОтбора = "ГРАФА" Тогда
		// Пренебрегаем вероятностью, что раньше не было ни одного документа со ссылкой на объект отбора в табличной части,
		// а сейчас другой пользователь ввел такой документ, и этот документ не отображается. Считаем так, чтобы не тратить
		// время на анализ маловероятной ситуации. Если такое произойдет, то текущему пользователю нужно переоткрыть список.
		Элементы.Список.Обновить();
		
	Иначе
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьПроводок(Команда)

	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран документ'"));
		Возврат;
	КонецЕсли;

	ПереключитьАктивностьПроводокСервер(ТекДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборДокумент = ТекущиеДанные.Ссылка;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктРеализация(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктСверки(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.АктСверкиВзаиморасчетов"));
	ОткрытьФорму("Документ.АктСверкиВзаиморасчетов.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюПоступление(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюРеализация(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПокупателю(Команда)

	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПоставщика(Команда)

	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюПередача(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаТоваров"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачислениеПеней(Команда)

	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.НачислениеПеней"));
	ОткрытьФорму("Документ.НачислениеПеней.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДругойДокумент(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		СвойстваДоговора = ПараметрыВыбораДоговораКонтрагента(ОтборДоговорКонтрагента);
		ПараметрыФормы.Вставить("ВидДоговораКонтрагента", СвойстваДоговора.ВидДоговора);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКоммерческоеПредложение(Команда)
	
	СтруктураПараметров = ПараметрыФормыДокумента(Тип("ДокументСсылка.КоммерческоеПредложение"));
	ОткрытьФорму("Документ.КоммерческоеПредложение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПараметрыВводаНаОснованииБезвозмезднаяПередача(ОтборДокумент)

	ПараметрыОткрытияДокумента = Новый Структура("ИмяДокумента, ПараметрыФормы");
	ПараметрыОткрытияДокумента.ИмяДокумента = "ПередачаТоваров";
	
	ПараметрыОснования = Новый Структура("БезвозмезднаяПередача, ДокументОснование", Истина, ОтборДокумент);
	ПараметрыОткрытияДокумента.ПараметрыФормы = Новый Структура("Основание", ПараметрыОснования);

	Возврат ПараметрыОткрытияДокумента;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереключитьАктивностьПроводокСервер(ТекДокумент)

	БухгалтерскийУчет.ПереключитьАктивностьПроводокБУ(ТекДокумент);

КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииНаСервере()
	
	Если Не ПустаяСтрока(СпособОтбора) Тогда
		УстановитьОтборПоКритериюОтбора();
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
		УстановитьСвязиПараметровВыбораДоговораКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКритериюОтбора()
	
	// Есть несколько вариантов открытия формы списка в зависимости от специфики отбора, который должен быть наложен.
	//
	// Не обслуживаемые данной процедурой:
	// (А) Динамический список без отбора. Могут быть применены пользовательские отборы, сохранившиеся с прошлого сеанса.
	// (Б) "ДокументыПокупателей", "ДокументыПоставщиков". Отбор на реквизит "Тип" у журнала документов. В параметр
	// динамического списка передается массив типов документов, которые должны быть выведены.
	//
	// (В) Обслуживаемые данной процедурой ("ДокументыПоДоговоруКонтрагента", "ДокументыПоКонтрагенту").
	// Варианты значений реквизита СпособОтбора:
	// 1) "КРИТЕРИЙ". 
	// В параметр динамического списка передается значение отбора. Там из таблицы критерия отбора получаем список ссылок на
	// выводимые документы и используем его для отбора по полю Ссылка в таблице журнала документов.
	// 2) "ГРАФА". Среди отобранных по критерию документов в соответствующей графе журнала есть только значение отбора.
	// Накладывается отбор на графу Информация (ДоговорКонтрагента). Отбор устанавливается через настройки системы
	// компоновки данных динамического списка. Блокируется возможность для пользователя снять этот отбор.
	// 3) "СПИСОК". Среди отобранных документов есть такие, у которых значение отбора встречается в табличной части, но
	// не встречается среди реквизитов шапки (и, соответственно, нет в графе журнала).
	// В привилегированном режиме мы получаем ссылки на сто последних по дате документов. В параметр динамического списка
	// передаем сформированный массив ссылок и используем его для отбора по полю Ссылка в таблице журнала документов.
	
	ИмяПоляОтбора = ?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента", "ДоговорКонтрагента", "Информация");
	
	// Если ранее использовался отбор вида "КРИТЕРИЙ", то первым делом его отключаем, т.к. далее он точно выбран не будет.
	Если СпособОтбора = "КРИТЕРИЙ" Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента", "ОтборДоговорКонтрагента", "ОтборКонтрагент"),
			Неопределено, Ложь);
		СпособОтбора = "";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыПоКритерию.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоКритерию
	|ИЗ
	|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&ОтборПоКритерию) КАК ДокументыПоКритерию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыПоКритерию.Ссылка КАК Ссылка
	|ИЗ
	|	ДокументыПоКритерию КАК ДокументыПоКритерию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|		ПО ДокументыПоКритерию.Ссылка = ЖурналОпераций.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ЖурналОпераций.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) <> &ОтборПоКритерию";
	
	Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		Запрос.УстановитьПараметр("ОтборПоКритерию", ОтборДоговорКонтрагента);
		
	Иначе

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументыПоДоговоруКонтрагента", "ДокументыПоКонтрагенту");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента", ИмяПоляОтбора);
		Запрос.УстановитьПараметр("ОтборПоКритерию", ОтборИнформация);

	КонецЕсли;

	// Формируем список доступных пользователю для отбора организаций.
	ИспользуетсяНесколькоОрганизаций = Элементы.СписокОрганизация.Видимость;
	Если ИспользуетсяНесколькоОрганизаций Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И ЖурналОпераций.Организация В(&Организации)";
		
		СписокОрганизацийДляОтбора = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Если ОтборОрганизацияИспользование Тогда
			
			СписокОрганизацийДляОтбора = ?(СписокОрганизацийДляОтбора.Найти(ОтборОрганизация) = Неопределено,
				Новый Массив, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборОрганизация));
			
		КонецЕсли;	
		Запрос.УстановитьПараметр("Организации", СписокОрганизацийДляОтбора);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатАнализа = Запрос.Выполнить();

	Если РезультатАнализа.Пустой() Тогда // достаточно отбора по данным в шапке документа

		УстановитьПривилегированныйРежим(Ложь);
		
		Если СпособОтбора = "СПИСОК" Тогда // отключаем отбор по списку ссылок
			
			ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
			ПараметрСсылки.Использование = Ложь;
			Элементы.ОграничениеНаВыводСписка.Видимость = Ложь;
			
		КонецЕсли;
		
		СпособОтбора = "ГРАФА"; // используется отбор по графе
		ТипИнформации = "Контрагент";
		УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, ИмяПоляОтбора);
		
	Иначе
		
		РазмерПорцииДокументов = РазмерЭффективнойПорцииДокументов();
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 101
		|	ДокументыПоКритерию.Ссылка КАК Ссылка
		|ИЗ
		|	ДокументыПоКритерию КАК ДокументыПоКритерию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|		ПО ДокументыПоКритерию.Ссылка = ЖурналОпераций.Ссылка
		|ГДЕ
		|	&ОтборПоОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОпераций.Дата УБЫВ";
		Если РазмерПорцииДокументов <> 100 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "101", Формат(РазмерПорцииДокументов + 1, "ЧГ=0"));
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОрганизации",
			?(ИспользуетсяНесколькоОрганизаций, "ЖурналОпераций.Организация В(&Организации)", "ИСТИНА"));
		Запрос.Текст = ТекстЗапроса;
		
		СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если СпособОтбора = "ГРАФА" Тогда // отключаем отбор по графе
			
			ИмяПоляОтбора = ?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента", "ДоговорКонтрагента", "Информация");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
				Список.КомпоновщикНастроек.Настройки.Отбор, ИмяПоляОтбора);
			
		КонецЕсли;
		
		Если СписокДокументов.Количество() = РазмерПорцииДокументов + 1 Тогда // выводим последние N документов
			
			СписокДокументов.Удалить(РазмерПорцииДокументов);
			Элементы.ОграничениеНаВыводСписка.Видимость = Истина;
			
		Иначе
			
			Элементы.ОграничениеНаВыводСписка.Видимость = Ложь;
			
		КонецЕсли;
		СпособОтбора = "СПИСОК"; // используется отбор по списку ссылок
		ОтборИспользование = ?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента",
			ОтборДоговорКонтрагентаИспользование, ОтборИнформацияИспользование);
		СписокДокуменовДляОтбора = Новый СписокЗначений;
		СписокДокуменовДляОтбора.ЗагрузитьЗначения(СписокДокументов);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "ОтборСсылки", СписокДокуменовДляОтбора, ОтборИспользование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоКритериюОтбора()
	
	ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
	СписокСсылок = ПараметрСсылки.Значение;
	РазмерПорцииДокументов = РазмерЭффективнойПорцииДокументов();
	
	Запрос = Новый Запрос;
	
	СписокОрганизацийДляОтбора = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Если ОтборОрганизацияИспользование Тогда
		
		СписокОрганизацийДляОтбора = ?(СписокОрганизацийДляОтбора.Найти(ОтборОрганизация) = Неопределено,
			Новый Массив, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборОрганизация));
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации", СписокОрганизацийДляОтбора);
	
	Запрос.УстановитьПараметр("ОтборПоКритерию",
		?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента", ОтборДоговорКонтрагента, ОтборИнформация));
	
	Если СписокСсылок.Количество() < РазмерПорцииДокументов Тогда // может быть их не нужно упорядочивать
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПоКритерию.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыПоКритерию
		|ИЗ
		|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&ОтборПоКритерию) КАК ДокументыПоКритерию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоКритерию.Ссылка КАК Ссылка
		|ИЗ
		|	ДокументыПоКритерию КАК ДокументыПоКритерию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|		ПО ДокументыПоКритерию.Ссылка = ЖурналОпераций.Ссылка
		|ГДЕ
		|	ЖурналОпераций.Организация В(&Организации)";
		
	Иначе // берем последние по времени документы
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПоКритерию.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыПоКритерию
		|ИЗ
		|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&ОтборПоКритерию) КАК ДокументыПоКритерию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ДокументыПоКритерию.Ссылка КАК Ссылка
		|ИЗ
		|	ДокументыПоКритерию КАК ДокументыПоКритерию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|		ПО ДокументыПоКритерию.Ссылка = ЖурналОпераций.Ссылка
		|ГДЕ
		|	ЖурналОпераций.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОпераций.Дата УБЫВ";
		Если РазмерПорцииДокументов <> 100 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "100", Формат(РазмерПорцииДокументов, "ЧГ=0"));
		КонецЕсли;
		
	КонецЕсли;
	Если КлючНазначенияИспользования <> "ДокументыПоДоговоруКонтрагента" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументыПоДоговоруКонтрагента", "ДокументыПоКонтрагенту");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Если СписокДокументов.Количество() > РазмерПорцииДокументов Тогда
		// Ранее было менее ста документов, а сейчас прибавилось много.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ЖурналОпераций.Ссылка КАК Ссылка
		|ИЗ
		|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|ГДЕ
		|	ЖурналОпераций.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОпераций.Дата УБЫВ";
		Если РазмерПорцииДокументов <> 100 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "100", Формат(РазмерПорцииДокументов, "ЧГ=0"));
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

		Элементы.ОграничениеНаВыводСписка.Видимость = Истина;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрСсылки.Значение.ЗагрузитьЗначения(СписокДокументов);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаОтбораИнформации(Форма)

	Если Форма.ТипИнформации = "Сотрудник" Тогда
		Форма.Элементы.ОтборИнформация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Форма.Элементы.ОтборИнформация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидОтбораИнформация()

	ТипыОтбора = Элементы.ТипИнформации.СписокВыбора;
	
	Если Не ИспользуетсяПодсистемаЗарплата Тогда
		ЭлементОтборСотрудник = ТипыОтбора.НайтиПоЗначению("Сотрудник");
		Если ЭлементОтборСотрудник <> Неопределено Тогда
			ТипыОтбора.Удалить(ЭлементОтборСотрудник);
		КонецЕсли;
	КонецЕсли;
	
	ЕдинственныйТипОтбора = ТипыОтбора.Количество() = 1;
	
	Элементы.ТипИнформации.Видимость = Не ЕдинственныйТипОтбора;
	Элементы.ОтборИнформацияИспользование.ПоложениеЗаголовка = ?(ЕдинственныйТипОтбора,
		ПоложениеЗаголовкаЭлементаФормы.Лево, ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	Если ЕдинственныйТипОтбора Тогда
		
		// Установим название отбора из единственного доступного типа
		НазваниеОтбора = СтрЗаменить(ТипыОтбора[0].Представление, ":", "");
		
		Элементы.ОтборИнформацияИспользование.Заголовок = НазваниеОтбора;
		Элементы.СписокИнформация.Заголовок = НазваниеОтбора; 
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоговораКонтрагента()

	МассивСвязей = Новый Массив;
	
	Если ОтборИнформацияИспользование Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "ОтборИнформация", РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	
	Если ОтборОрганизацияИспользование Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "ОтборОрганизация", РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	
	Элементы.ОтборДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораДоговораКонтрагента(Знач ДоговорКонтрагента)
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОЗаписиДокумента(Источник)
	
	РеквизитыДокумента = РеквизитыДокументаВСоставеКритерияОтбора(ТипЗнч(Источник));
	Если РеквизитыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		ИмяРеквизитаОтбора = "ДоговорКонтрагента";
		ОбъектОтбора = ОтборДоговорКонтрагента;
		
	Иначе
		
		ИмяРеквизитаОтбора = "Контрагент";
		ОбъектОтбора = ОтборИнформация;
		
	КонецЕсли;
	
	// Определяем, где в документе может содержаться ссылка на объект отбора. Неоднозначной может быть ситуация, когда в
	// критерий отбора попадают два реквизита шапки, а в графу журнала - только один из них; ее тоже особым образом учтем.
	ЕстьРеквизитыТЧ = Ложь;
	КоличествоРеквизитовШапки = 0;
	АнализируемыеРеквизиты = Новый Структура;
	Для каждого РеквизитКонтрагент Из РеквизитыДокумента Цикл
	
		Если РеквизитКонтрагент.Значение = Неопределено Тогда
			
			КоличествоРеквизитовШапки = КоличествоРеквизитовШапки + 1;
			АнализируемыеРеквизиты.Вставить(РеквизитКонтрагент.Ключ, РеквизитКонтрагент.Ключ);
			
		Иначе
			
			ЕстьРеквизитыТЧ = Истина;
			Для каждого РеквизитТЧ Из РеквизитКонтрагент.Значение Цикл
				АнализируемыеРеквизиты.Вставить(РеквизитКонтрагент.Ключ + РеквизитТЧ, РеквизитКонтрагент.Ключ + "." + РеквизитТЧ);
			КонецЦикла;

		КонецЕсли;
	
	КонецЦикла;
	Если СпособОтбора = "ГРАФА" И КоличествоРеквизитовШапки < 2 Тогда
		
		Если ЕстьРеквизитыТЧ Тогда
			// Проконтролируем особый случай, когда в критерий отбора у документа включен реквизит табличной части,
			// но не включен реквизит шапки документа. Однако при этом можно использовать отбор по графе (по реквизиту шапки),
			// если он приведет к тому же самому результату.
			Если Не АнализируемыеРеквизиты.Свойство(ИмяРеквизитаОтбора)
			   И ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаОтбора, Источник.Метаданные()) Тогда

				КоличествоРеквизитовШапки = КоличествоРеквизитовШапки + 1;
				АнализируемыеРеквизиты.Вставить(ИмяРеквизитаОтбора);

			КонецЕсли;
			
		Иначе 
			// Отбор по графе будет достаточен после произошедшей записи документа, т.к. в документе нет реквизитов табличной
			// части, которые могут содержать ссылку на объект отбора.
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	// Проверяем, что оповещение связано с тем объектом, по которому в списке наложен отбор.
	АнализируемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, АнализируемыеРеквизиты, Истина);
	СодержитОбъектОтбораВРеквизите = Ложь;
	СодержитОбъектОтбораВТЧ = Ложь;
	Для каждого РеквизитТЧ Из АнализируемыеРеквизиты Цикл
		
		Если ТипЗнч(РеквизитТЧ.Значение) = Тип("РезультатЗапроса") Тогда // проверяем реквизит табличной части
			СодержитОбъектОтбораВТЧ = СодержитОбъектОтбораВТЧ
				Или (РеквизитТЧ.Значение.Выгрузить().Найти(ОбъектОтбора) <> Неопределено);
		Иначе
			СодержитОбъектОтбораВРеквизите = СодержитОбъектОтбораВРеквизите
				Или (РеквизитТЧ.Значение = ОбъектОтбора);
		КонецЕсли;

	КонецЦикла;
	Если Не СодержитОбъектОтбораВРеквизите И Не СодержитОбъектОтбораВТЧ Тогда // не должен выводиться
		
		Если СпособОтбора = "СПИСОК" Тогда // удалим, если был
			
			ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
			СписокСсылок = ПараметрСсылки.Значение;
			ИскомыйДокумент = СписокСсылок.НайтиПоЗначению(Источник);
			Если ИскомыйДокумент <> Неопределено Тогда
				СписокСсылок.Удалить(ИскомыйДокумент);
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СодержитОбъектОтбораВРеквизите Тогда
		
		Если СпособОтбора = "ГРАФА" Тогда
			
			Если КоличествоРеквизитовШапки = 1 Тогда // однозначно отбора по графе достаточно
				
				Возврат;
				
			Иначе // нужна проверка именно того реквизита, который попадает в графу
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ПроверкаОтбора
				|ИЗ
				|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
				|ГДЕ
				|	ЖурналОпераций.Ссылка = &Источник
				|	И ЖурналОпераций.ДоговорКонтрагента = &ОбъектОтбора");
				Если КлючНазначенияИспользования <> "ДокументыПоДоговоруКонтрагента" Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента", "Информация");
				КонецЕсли;
				Запрос.УстановитьПараметр("Источник", Источник);
				Запрос.УстановитьПараметр("ОбъектОтбора", ОбъектОтбора);
				Если Не Запрос.Выполнить().Пустой() Тогда // отбора по графе достаточно
					Возврат;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Если СпособОтбора = "ГРАФА" Тогда
		// Переключаемся с отбора по графе на отбор по списку ссылок.
		СпособОтбора = "СПИСОК";
		ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
		ПараметрСсылки.Использование = Истина;
		ИмяПоляОтбора = ?(КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента", "ДоговорКонтрагента", "Информация");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор, ИмяПоляОтбора);
		ОбновитьОтборПоКритериюОтбора();
		
	ИначеЕсли СпособОтбора = "СПИСОК" Тогда
		// Если записываемый документ должен выводиться в числе ста последних, то добавить его в список.
		ПараметрСсылки = Список.Параметры.Элементы.Найти("ОтборСсылки");
		СписокСсылок = ПараметрСсылки.Значение;
		Если СписокСсылок.НайтиПоЗначению(Источник) <> Неопределено Тогда
			// Записанный документ уже отображается в списке.
			Возврат;
		КонецЕсли;
		
		Если СписокСсылок.Количество() >= РазмерЭффективнойПорцииДокументов() Тогда // могут быть документы, которые не должны сейчас отображаться в списке
			
			ВремяПервогоИзВыведенных = СписокСсылок[СписокСсылок.Количество() - 1].Значение.МоментВремени();
			ВремяИсточника = Источник.МоментВремени();
			Если Не ЗначениеЗаполнено(ВремяПервогоИзВыведенных)
			 Или ВремяИсточника.Сравнить(ВремяПервогоИзВыведенных) < 0 Тогда
				// Отсекаем случай, когда записан какой-то недоступный или старый документ.
				Возврат;
			КонецЕсли;

		КонецЕсли;
		СписокСсылок.Вставить(0, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыДокументаВСоставеКритерияОтбора(ТипИсточника)
	
	Если Не ПустаяСтрока(АдресХранилищаТиповДокументовКритерияОтбора) Тогда
		
		ТипыДокументовКритерияОтбора = ПолучитьИзВременногоХранилища(АдресХранилищаТиповДокументовКритерияОтбора);
		Возврат ТипыДокументовКритерияОтбора[ТипИсточника];
		
	КонецЕсли;
	
	// Сопоставляем тип документа (ключ соответствия) и список реквизитов документа, включенных в состав критерия отбора.
	// Список реквизитов - это структура, ключом которой является имя реквизита или табличной части, а значением - массив
	// реквизитов табличной части (или Неопределено для реквизита документа).
	ТипыДокументовКритерияОтбора = Новый Соответствие;
		
	МетаданныеЖурнала = Метаданные.ЖурналыДокументов.ЖурналОпераций.РегистрируемыеДокументы;
	Если КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		МетаданныеКритерия = Метаданные.КритерииОтбора.ДокументыПоДоговоруКонтрагента.Состав;
	Иначе
		МетаданныеКритерия = Метаданные.КритерииОтбора.ДокументыПоКонтрагенту.Состав;
	КонецЕсли;
	
	Для каждого РеквизитКритерия Из МетаданныеКритерия Цикл
		
		МетаданныеРодителяРеквизита = РеквизитКритерия.Родитель();
		Если МетаданныеЖурнала.Содержит(МетаданныеРодителяРеквизита) Тогда // документ есть в журнале, реквизит в шапке
			
			ТипДокумента = Тип("ДокументСсылка." + МетаданныеРодителяРеквизита.Имя);
			РеквизитыТипаКонтрагент = ТипыДокументовКритерияОтбора[ТипДокумента];
			Если РеквизитыТипаКонтрагент = Неопределено Тогда
				ТипыДокументовКритерияОтбора.Вставить(ТипДокумента, Новый Структура(РеквизитКритерия.Имя));					
			Иначе
				РеквизитыТипаКонтрагент.Вставить(РеквизитКритерия.Имя);
			КонецЕсли;
			Продолжить;
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеРодителяРеквизита) Тогда // документ, которого нет в журнале
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяТабличнойЧасти = МетаданныеРодителяРеквизита.Имя;
		МетаданныеДокумента = МетаданныеРодителяРеквизита.Родитель();
		Если Не МетаданныеЖурнала.Содержит(МетаданныеДокумента) Тогда // документа нет в журнале
			Продолжить;
		КонецЕсли;
		
		// Фиксируем реквизит в табличной части.
		ТипДокумента = Тип("ДокументСсылка." + МетаданныеДокумента.Имя);
		РеквизитыТипаКонтрагент = ТипыДокументовКритерияОтбора[ТипДокумента];
		Если РеквизитыТипаКонтрагент = Неопределено Тогда
			
			РеквизитыТЧ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитКритерия.Имя);
			ТипыДокументовКритерияОтбора.Вставить(ТипДокумента, Новый Структура(ИмяТабличнойЧасти, РеквизитыТЧ));					
			
		Иначе
			
			Если РеквизитыТипаКонтрагент.Свойство(ИмяТабличнойЧасти) Тогда
				
				РеквизитыТипаКонтрагент[ИмяТабличнойЧасти].Добавить(РеквизитКритерия.Имя);
				
			Иначе
				
				РеквизитыТЧ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитКритерия.Имя);
				РеквизитыТипаКонтрагент.Вставить(ИмяТабличнойЧасти, РеквизитыТЧ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресХранилищаТиповДокументовКритерияОтбора = ПоместитьВоВременноеХранилище(ТипыДокументовКритерияОтбора, УникальныйИдентификатор);
	
	Возврат ТипыДокументовКритерияОтбора[ТипИсточника];
	
КонецФункции

// Размерность массива, которая не приводит к автоматическому созданию временной таблицы при передаче параметра в запрос.
//
&НаКлиентеНаСервереБезКонтекста
Функция РазмерЭффективнойПорцииДокументов()
	
	Возврат 100;
	
КонецФункции

&НаСервере
Процедура НастройкиДинамическогоСписка(ИмяВФорме)
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект,, ИмяВФорме);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если УправлениеПечатьюБПКлиентСервер.ЭтоИмяКомандыРеестрДокументов(Команда.Имя) Тогда
		НастройкиДинамическогоСписка(Команда.Имя);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Функция ПараметрыФормыДокумента(ТипДокумента, ВидОперации = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СвойстваДоговора = Неопределено;
	Если ОтборДоговорКонтрагентаИспользование И ЗначениеЗаполнено(ОтборДоговорКонтрагента) Тогда
		СвойстваДоговора = ПараметрыВыбораДоговораКонтрагента(ОтборДоговорКонтрагента);
	КонецЕсли;
	
	Если ОтборОрганизацияИспользование Тогда
		ЗначенияЗаполнения.Вставить("Организация", ОтборОрганизация);
	ИначеЕсли СвойстваДоговора <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("Организация", СвойстваДоговора.Организация);
	КонецЕсли;
	
	Если ОтборИнформацияИспользование Тогда
		Если ТипИнформации = "Сотрудник" Тогда
			ЗначенияЗаполнения.Вставить("ФизЛицо", ОтборИнформация);
		Иначе
			Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
				ЗначенияЗаполнения.Вставить("КонтрагентДебитор",  ОтборИнформация);
				ЗначенияЗаполнения.Вставить("КонтрагентКредитор", ОтборИнформация);
			Иначе
				ЗначенияЗаполнения.Вставить("Контрагент", ОтборИнформация);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СвойстваДоговора <> Неопределено Тогда
		Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ЗначенияЗаполнения.Вставить("КонтрагентДебитор", СвойстваДоговора.Владелец);
			ЗначенияЗаполнения.Вставить("КонтрагентКредитор", СвойстваДоговора.Владелец);
		Иначе
			ЗначенияЗаполнения.Вставить("Контрагент", СвойстваДоговора.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДоговорКонтрагентаИспользование Тогда
		Если Не ЗначенияЗаполнения.Свойство("Контрагент")
			И ЗначениеЗаполнено(ОтборИнформация) Тогда
			Если ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда
				ЗначенияЗаполнения.Вставить("КонтрагентДебитор", ОтборИнформация);
				ЗначенияЗаполнения.Вставить("КонтрагентКредитор", ОтборИнформация);
			Иначе
				ЗначенияЗаполнения.Вставить("Контрагент", ОтборИнформация);
			КонецЕсли;
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ОтборДоговорКонтрагента);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура НастроитьОперацииПодменюСоздать()
	
	Если КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
		
		ТипыДокументов = Новый Массив();
		ДокументыЖурнала = ЖурналыДокументов.ЖурналОпераций.СоставДокументов(КлючНазначенияИспользования);
		Для Каждого ОбъектМетаданных Из ДокументыЖурнала Цикл
			Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
				ТипыДокументов.Добавить(ОбъектМетаданных);
			КонецЕсли;
		КонецЦикла;
		
		ДоступенСчетПокупателю = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПокупателю) <> Неопределено;
		ДоступенРеализацияТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.РеализацияТоваровУслуг) <> Неопределено;
		ДоступенСчетПоставщика = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПоставщика) <> Неопределено;
		ДоступенПоступлениеТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.ПоступлениеТоваровУслуг) <> Неопределено;
		ДоступенАктСверкиВзаиморасчетов = ТипыДокументов.Найти(Метаданные.Документы.АктСверкиВзаиморасчетов) <> Неопределено;
		ДоступенНачислениеПеней = ТипыДокументов.Найти(Метаданные.Документы.НачислениеПеней) <> Неопределено;
		ДоступенКоммерческоеПредложение = ТипыДокументов.Найти(Метаданные.Документы.КоммерческоеПредложение) <> Неопределено;
		
		Элементы.СоздатьСчетПокупателю.Видимость = ДоступенСчетПокупателю;
		Элементы.СоздатьАктРеализация.Видимость = ДоступенРеализацияТоваровУслуг;
		Элементы.СоздатьНакладнуюРеализация.Видимость = ДоступенРеализацияТоваровУслуг;
		Элементы.СоздатьНакладнуюПередача.Видимость = Ложь; // не создается из списка Контрагенты
		Элементы.СоздатьСчетПоставщика.Видимость = ДоступенСчетПоставщика;
		Элементы.СоздатьАктПоступление.Видимость = ДоступенПоступлениеТоваровУслуг;
		Элементы.СоздатьНакладнуюПоступление.Видимость = ДоступенПоступлениеТоваровУслуг;
		Элементы.СоздатьПлатежноеПоручение.Видимость = Ложь; // не создается из списка Контрагенты
		Элементы.СоздатьАктСверки.Видимость = ДоступенАктСверкиВзаиморасчетов;
		Элементы.СоздатьНачислениеПеней.Видимость = ДоступенНачислениеПеней;
		Элементы.СоздатьКоммерческоеПредложение.Видимость = ДоступенКоммерческоеПредложение;
		
		Элементы.Создать.Видимость = Ложь;
		Элементы.ПодменюСоздать.Видимость = Истина;
		
	ИначеЕсли КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		ТипыДокументов = Новый Массив();
		ДокументыЖурнала = ЖурналыДокументов.ЖурналОпераций.СоставДокументов(КлючНазначенияИспользования);
		Для Каждого ОбъектМетаданных Из ДокументыЖурнала Цикл
			Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
				ТипыДокументов.Добавить(ОбъектМетаданных);
			КонецЕсли;
		КонецЦикла;
		ТипыДокументов = КритерииОтбора.ДокументыПоДоговоруКонтрагента.ОтобратьДокументыПоВидуДоговора(ТипыДокументов,
			ОтборДоговорКонтрагента.ВидДоговора);
		
		ДоступенСчетПокупателю = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПокупателю) <> Неопределено;
		ДоступенРеализацияТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.РеализацияТоваровУслуг) <> Неопределено;
		Если ДоступенРеализацияТоваровУслуг Тогда
			ВидыОперацийРеализацияТоваровУслуг = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыОперацийДокумента(
				ОтборДоговорКонтрагента.ВидДоговора, Тип("ДокументСсылка.РеализацияТоваровУслуг"));
			ДоступенАктРеализация = ВидыОперацийРеализацияТоваровУслуг.Найти(
				Перечисления.ВидыОперацийРеализацияТоваров.Услуги) <> Неопределено;
			ДоступенНакладнаяРеализация = ВидыОперацийРеализацияТоваровУслуг.Найти(
				Перечисления.ВидыОперацийРеализацияТоваров.Товары) <> Неопределено;
			ДоступенНакладнаяПередача = ВидыОперацийРеализацияТоваровУслуг.Найти(
				Перечисления.ВидыОперацийРеализацияТоваров.ПередачаТоваров) <> Неопределено;
		Иначе
			ДоступенАктРеализация = ДоступенРеализацияТоваровУслуг;
			ДоступенНакладнаяРеализация = ДоступенРеализацияТоваровУслуг;
			ДоступенНакладнаяПередача = ДоступенРеализацияТоваровУслуг;
		КонецЕсли;
		ДоступенСчетПоставщика = ТипыДокументов.Найти(Метаданные.Документы.СчетНаОплатуПоставщика) <> Неопределено;
		ДоступенПоступлениеТоваровУслуг = ТипыДокументов.Найти(Метаданные.Документы.ПоступлениеТоваровУслуг) <> Неопределено;
		Если ДоступенПоступлениеТоваровУслуг Тогда
			ВидыОперацийПоступлениеТоваровУслуг = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВидыОперацийДокумента(
				ОтборДоговорКонтрагента.ВидДоговора, Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
			ДоступенАктПоступление = ВидыОперацийПоступлениеТоваровУслуг.Найти(
				Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги) <> Неопределено;
			ДоступенНакладнаяПоступление = ВидыОперацийПоступлениеТоваровУслуг.Найти(
				Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары) <> Неопределено;
		Иначе
			ДоступенАктПоступление = ДоступенПоступлениеТоваровУслуг;
			ДоступенНакладнаяПоступление = ДоступенПоступлениеТоваровУслуг;
		КонецЕсли;
		ДоступенПлатежноеПоручение = ТипыДокументов.Найти(Метаданные.Документы.ПлатежноеПоручение) <> Неопределено;
		ДоступенАктСверкиВзаиморасчетов = ТипыДокументов.Найти(Метаданные.Документы.АктСверкиВзаиморасчетов) <> Неопределено;
		
		Элементы.СоздатьСчетПокупателю.Видимость = ДоступенСчетПокупателю;
		Элементы.СоздатьАктРеализация.Видимость = ДоступенАктРеализация;
		Элементы.СоздатьНакладнуюРеализация.Видимость = ДоступенНакладнаяРеализация;
		Элементы.СоздатьНакладнуюПередача.Видимость = ДоступенНакладнаяПередача;
		Элементы.СоздатьСчетПоставщика.Видимость = ДоступенСчетПоставщика;
		Элементы.СоздатьАктПоступление.Видимость = ДоступенАктПоступление;
		Элементы.СоздатьНакладнуюПоступление.Видимость = ДоступенНакладнаяПоступление;
		Элементы.СоздатьПлатежноеПоручение.Видимость = ДоступенПлатежноеПоручение;
		Элементы.СоздатьАктСверки.Видимость = ДоступенАктСверкиВзаиморасчетов;
		Элементы.СоздатьНачислениеПеней.Видимость = Ложь; // не создается из списка Договоры
		Элементы.СоздатьКоммерческоеПредложение.Видимость = Ложь; // не создается из списка Договоры
		
		Элементы.Создать.Видимость = Ложь;
		Элементы.ПодменюСоздать.Видимость = Истина;
		
	Иначе
		Элементы.Создать.Видимость = Истина;
		Элементы.ПодменюСоздать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
