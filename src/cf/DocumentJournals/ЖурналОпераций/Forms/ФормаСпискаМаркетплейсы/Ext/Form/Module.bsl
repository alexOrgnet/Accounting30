
&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюДиректБанк", "Видимость", Ложь);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	Элементы.Организация.Видимость = ИспользуетсяНесколькоОрганизаций;
	
	ОсновнаяОрганизация           = Справочники.Организации.ОрганизацияПоУмолчанию();
	ОтборОрганизация              = ОсновнаяОрганизация;
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеДокументаПередачаТоваров", НСтр("ru='Передача на реализацию'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеУслугиКомиссионера", НСтр("ru='Поступление услуг (акт, УПД)'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеОтчетОбОптовыхПродажах", НСтр("ru='Отчет о продажах (оптовые продажи)'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеОтчетОРозничныхПродажах", НСтр("ru='Отчет о продажах (розничные продажи)'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеОтчетОСписании", НСтр("ru='Отчет о списании (акт о списании)'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеВозвратСРеализации", НСтр("ru='Возврат переданного на реализацию'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеДокументаВыкупТоваровКомиссионером", НСтр("ru='Выкуп комиссионером'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПредставлениеДокументаВозвратВыкупленныеКомиссионеромТовары", НСтр("ru='Возврат выкупленного комиссионером'"));
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОтчетМаркетплейса"));
	Список.Параметры.УстановитьЗначениеПараметра("ОтборТипыДокументов", МассивТиповДокументов);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров") Тогда
		Заголовок = "Маркетплейсы и комиссионеры";
		АвтоЗаголовок = Ложь;
	Иначе
		Заголовок = "Маркетплейсы";
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.ЖурналОпераций",
		"ФормаСпискаМаркетплейсы",
		СтрШаблон(НСтр("ru = 'Новости: %1'"), Заголовок),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			Параметры.Отбор.Удалить("Организация");
		КонецЕсли;
		Если СтруктураОтбора.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
			ОтборКонтрагент = СтруктураОтбора.Контрагент;
			ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
			Параметры.Отбор.Удалить("Контрагент");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНакладнуюПередача(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаТоваров"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПереданныеТовары"));
	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетОПродажахРозница(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетОРозничныхПродажах"));
	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетОПродажахОпт(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетОПродажах"));
	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетОСписании(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетОСписании"));
	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУслугиКомиссионера(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМаркетплейс(ВидМаркетплейс)
	
	Если Не ОбменСМаркетплейсВызовСервера.ДоступенОбменСМаркетплейс() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для обмена с маркетплейсом'"));
		Возврат;
		
	КонецЕсли;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидМаркетплейс", ВидМаркетплейс);

	Если ЗначенияЗаполнения.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Организация", ЗначенияЗаполнения.Организация);
	КонецЕсли;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаИзМаркетплейсПродолжение",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаЗагрузкиИзМаркетплейс", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗавершении,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзМаркетплейсПродолжение(ПараметрыЗагрузки, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки) Тогда
		ОбменСМаркетплейсКлиент.ПрочитатьДанныеОтчетаВСтруктуру(ПараметрыЗагрузки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтчетКомиссионераИзФайла(Команда)
	
	ЭлектронноеВзаимодействиеБПКлиент.ЗагрузитьОтчетКомиссионераИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеОВыкупеВайлдберризИзФайла(Команда)
	
	ЭлектронноеВзаимодействиеБПКлиент.ЗагрузитьУведомлениеОВыкупеВайлдберризИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыWB(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Маркетплейс", ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.Wildberries"));
	ОткрытьФорму("ОбщаяФорма.МаркетплейсыЗагрузкаФайлов", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыOzon(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Маркетплейс", ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.OZON"));
	ОткрытьФорму("ОбщаяФорма.МаркетплейсыЗагрузкаФайлов", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентИспользованиеПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМаркетПлейсWB(Команда)
	
	ЗагрузитьИзМаркетплейс(ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.Wildberries"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМаркетПлейсOZON(Команда)
	
	ЗагрузитьИзМаркетплейс(ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.OZON"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ОтборыСписков.СброситьИспользованиеПользовательскихОтборовВНастройке(Настройки);
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если УправлениеПечатьюБПКлиентСервер.ЭтоИмяКомандыРеестрДокументов(Команда.Имя) Тогда
		НастройкиДинамическогоСписка(Команда.Имя);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастройкиДинамическогоСписка(ИмяВФорме)
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект,, ИмяВФорме);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыДокумента(ВидОперации = Неопределено)
		
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОжиданиеКонвертацииФайла()
	
	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЭлектронноеВзаимодействиеБПКлиент.НачатьЗагрузкуИзСтруктуры(АдресХранилища, УникальныйИдентификатор);
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеКонвертацииФайла", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
				
			КонецЕсли;
			
	Исключение			
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыкупТовараНаРеализации(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратВыкупленныхТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВыкупленныеКомиссионеромТовары"));
	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры
#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияМаркетПлейсы());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьОтчетЯндексМаркетИзФайла(Команда)
	
	ЭлектронноеВзаимодействиеБПКлиент.ЗагрузитьОтчетЯндексМаркетИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеКонвертацииФайлаЯндекс()
	
	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЭлектронноеВзаимодействиеБПКлиент.ОткрытьПомощникЗагрузкиОтчетаЯндекс(АдресХранилища, УникальныйИдентификатор);
						
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеКонвертацииФайлаЯндекс", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
				
			КонецЕсли;
			
	Исключение			
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти
