#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	НастроитьОперацииПодменюСоздать();
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект);
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьАвизоПоМПЗВходящее(Команда)

	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	УчетОбособленныхПодразделенийКлиент.СоздатьАвизоПоМПЗВходящее(СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАвизоПоМПЗИсходящее(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	УчетОбособленныхПодразделенийКлиент.СоздатьАвизоПоМПЗИсходящее(СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратМатериаловИзЭксплуатации(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ВозвратМатериаловИзЭксплуатации.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКомплектацияНоменклатуры(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.КомплектацияНоменклатуры.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачаМатериаловВЭксплуатацию(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ПередачаМатериаловВЭксплуатацию.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПереоценкаТоваровВРознице(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ПереоценкаТоваровВРознице.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходМатериалов(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ТребованиеНакладная.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацияТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ИнвентаризацияТоваровНаСкладе.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОприходованиеТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ОприходованиеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеТоваров(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.СписаниеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ОтборыСписков.СброситьИспользованиеПользовательскихОтборовВНастройке(Настройки);
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если УправлениеПечатьюБПКлиентСервер.ЭтоИмяКомандыРеестрДокументов(Команда.Имя) Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыДокумента()
		
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура НастроитьОперацииПодменюСоздать()
	
	ПроверяемыеДокументы = Новый Массив;
	ПроверяемыеДокументы.Добавить("ВозвратМатериаловИзЭксплуатации");
	ПроверяемыеДокументы.Добавить("КомплектацияНоменклатуры");
	ПроверяемыеДокументы.Добавить("ПередачаМатериаловВЭксплуатацию");
	ПроверяемыеДокументы.Добавить("ПеремещениеТоваров");
	ПроверяемыеДокументы.Добавить("ПереоценкаТоваровВРознице");
	ПроверяемыеДокументы.Добавить("ТребованиеНакладная");
	ПроверяемыеДокументы.Добавить("ИнвентаризацияТоваровНаСкладе");
	ПроверяемыеДокументы.Добавить("ОприходованиеТоваров");
	ПроверяемыеДокументы.Добавить("СписаниеТоваров");
	
	УчетОбособленныхПодразделений.ДобавитьДокументыПоСкладу(ПроверяемыеДокументы);

	МожноРедактировать = Истина;
	Для Каждого Документ Из ПроверяемыеДокументы Цикл
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Документы[Документ]);
		
		Если МожноРедактировать Тогда
			МожноРедактировать = ЕстьПраво;
		КонецЕсли;
		
		ИмяДокумента = Документ;
		Если Документ = "ТребованиеНакладная" Тогда
			ИмяДокумента = "РасходМатериалов";
		ИначеЕсли Документ = "ИнвентаризацияТоваровНаСкладе" Тогда
			ИмяДокумента = "ИнвентаризацияТоваров";
		КонецЕсли;
		
		Элементы[СтрШаблон("ФормаСоздать%1", ИмяДокумента)].Видимость = ЕстьПраво;
		
	КонецЦикла;

	Элементы.Список.ИзменятьСоставСтрок = МожноРедактировать;
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
