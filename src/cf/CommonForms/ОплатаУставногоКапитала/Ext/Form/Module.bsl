
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	
	ТекстДействия = НСтр("ru = 'определить срок оплаты'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	РезультатПроверкиРеквизитовОрганизации = ПроверитьРеквизитыОрганизации(Организация);
	РеквизитыОрганизацииЗаполнены = РезультатПроверкиРеквизитовОрганизации.РеквизитыЗаполнены;
	
	УстановитьЗаголовок(ЭтотОбъект);
	УстановитьЗаголовокОплаты();
	УстановитьСрокОплаты(ЭтотОбъект);
	
	ЗаполнитьРасчетыСУчредителями();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РасчетыСУчредителями"
		Или ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ЗаполнитьРасчетыСУчредителями();
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Организация = Источник Тогда
		
		РезультатПроверкиРеквизитовОрганизации = ПроверитьРеквизитыОрганизации(Организация);
		РеквизитыОрганизацииЗаполнены = РезультатПроверкиРеквизитовОрганизации.РеквизитыЗаполнены;
		УстановитьСрокОплаты(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РезультатПроверкиРеквизитовОрганизации = ПроверитьРеквизитыОрганизации(Организация);
	Если Не РезультатПроверкиРеквизитовОрганизации.РеквизитыЗаполнены Тогда
		ТекстОписанияОбъектаПроверки = НСтр("ru = 'определения срока оплаты'");
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Организация,
			РезультатПроверкиРеквизитовОрганизации.НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			ТекстОписанияОбъектаПроверки)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазвернутьНажатие(Элемент)
	
	ИндексСтроки = Число(СтрЗаменить(Элемент.Имя, "Развернуть", ""));
	
	СтрокаУчредителя = РасчетыСУчредителями[ИндексСтроки];
	СтрокаУчредителя.Развернуто = Не СтрокаУчредителя.Развернуто;
	Если СтрокаУчредителя.Развернуто
		И Не РасшифровкаПолучена Тогда 
		ЗаполнитьРасшифровкуРасчетов();
	КонецЕсли;
	
	Элемент.Картинка = ?(СтрокаУчредителя.Развернуто, 
		БиблиотекаКартинок.СтрелкаВнизЗеленая, 
		БиблиотекаКартинок.СтрелкаВправоЗеленая);
	
	РазместитьРасшифровкуРасчетовНаФорме(ИндексСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДокументНажатие(Элемент)
	
	СтрокаРасшифровки = РасшифровкаРасчетов.НайтиСтроки(Новый Структура("ДокументИмяЭлемента", Элемент.Имя));
	
	ПоказатьЗначение(, СтрокаРасшифровки[0].Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Организация);
	ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыОрганизации());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОплатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Деньги" Тогда 
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор = Новый Структура("Организация", Организация);
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;
		ОткрытьФорму("ЖурналДокументов.Деньги.Форма.ФормаСписка", 
			ПараметрыФормы, , УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "БанковскиеВыписки" Тогда 
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор = Новый Структура("Организация", Организация);
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;
		ОткрытьФорму("ЖурналДокументов.Деньги.Форма.БанковскиеВыписки", 
			ПараметрыФормы, , УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоступлениеНаличных" Тогда 
		СоздатьПоступлениеНаличных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Организация = Форма.Организация;
	
	ТребуютсяРеквизиты = ЗначениеЗаполнено(Организация) И Не Форма.РеквизитыОрганизацииЗаполнены;
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = ТребуютсяРеквизиты;
	
	Элементы.ДекорацияСрокОплаты.Видимость = Не ТребуютсяРеквизиты;
	Элементы.ДекорацияСрокОплаты.Заголовок = СтрШаблон(НСтр("ru = 'Оплатить не позднее %1'"), 
		Формат(Форма.СрокОплаты, "ДФ=dd.MM.yyyy"));
	
	Элементы.ГруппаОплата.Видимость = Форма.ИтоговыйДолг > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовок(Форма)
	
	ШаблонЗаголовка = НСтр("ru = 'Оплата уставного капитала %1'");
	ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Форма.Организация);
	
	Форма.Заголовок = СтрШаблон(ШаблонЗаголовка, ПредставлениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокОплаты()
	
	СоставЗаголовка = Новый Массив;
	СоставЗаголовка.Добавить(НСтр("ru = 'В разделе '"));
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда 
		СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Деньги'"),,,, "Деньги"));
	Иначе
		СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Банковские выписки'"),,,, "БанковскиеВыписки"));
	КонецЕсли;
	СоставЗаголовка.Добавить(НСтр("ru = ' загрузите оплату из банка, или оформите '"));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Поступление наличных'"),,,, "ПоступлениеНаличных"));
	СоставЗаголовка.Добавить(НСтр("ru = ' от учредителя'"));
	
	Элементы.ДекорацияОплата.Заголовок = Новый ФорматированнаяСтрока(СоставЗаголовка);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСрокОплаты(Форма)
	
	ДатаРегистрации = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаРегистрацииОрганизации(Форма.Организация);
	
	Форма.СрокОплаты = ДобавитьМесяц(ДатаРегистрации, 4);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаличных()
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидОперации", 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВзносВУставныйКапитал"));
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", ПараметрыФормы,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетыСУчредителями()
	
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	
	НастройкаГрупп = РасчетыСУчредителями.Выгрузить(, "Учредитель,Развернуто");
	
	РасчетыСУчредителями.Очистить();
	
	РасшифровкаПолучена = Ложь;
	
	УчредителиОрганизации = Справочники.Организации.УчредителиОрганизации(Организация, ТекущаяДата);
	УчредителиОрганизации.Сортировать("Наименование");
	
	Если УчредителиОрганизации.Количество() > 0 Тогда 
		ЗадолженностьУчредителей = Справочники.Организации.ЗадолженностьУчредителей(Организация, ТекущаяДата);
	КонецЕсли;
	
	ПоказыватьРасшифровку = Ложь;
	
	Для Каждого Учредитель Из УчредителиОрганизации Цикл 
		
		НоваяСтрокаУчредителя = РасчетыСУчредителями.Добавить();
		НоваяСтрокаУчредителя.Учредитель = Учредитель.Ссылка;
		НоваяСтрокаУчредителя.Наименование = Учредитель.Наименование;
		
		ЗадолженностьУчредителя = ЗадолженностьУчредителей.Найти(НоваяСтрокаУчредителя.Учредитель, "Учредитель");
		Если ЗадолженностьУчредителя <> Неопределено Тогда 
			НоваяСтрокаУчредителя.Доля = ЗадолженностьУчредителя.СуммаДолиВРублях;
			НоваяСтрокаУчредителя.Долг = ЗадолженностьУчредителя.Задолженность;
		КонецЕсли;
		
		// В целях производительности, на этом шаге не будем получать оплату по данным учета, 
		// а рассчитаем ее как разность между размером доли и долга.
		// Получим оплату по данными учета, когда потребуется расшифровка до документов.
		НоваяСтрокаУчредителя.Оплачено = НоваяСтрокаУчредителя.Доля-НоваяСтрокаУчредителя.Долг;
		
		// Восстанавливаем настройку группы "Свернуто/Развернуто"
		НастройкаГруппы = НастройкаГрупп.Найти(НоваяСтрокаУчредителя.Учредитель, "Учредитель");
		Если НастройкаГруппы <> Неопределено Тогда 
			НоваяСтрокаУчредителя.Развернуто = НастройкаГруппы.Развернуто;
		КонецЕсли;
		
		Если НоваяСтрокаУчредителя.Развернуто Тогда 
			ПоказыватьРасшифровку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговыйДолг = РасчетыСУчредителями.Итог("Долг");
	
	Если ПоказыватьРасшифровку Тогда 
		ЗаполнитьРасшифровкуРасчетов();
	КонецЕсли;
	
	РазместитьРасчетыСУчредителямиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьРасчетыСУчредителямиНаФорме()
	
	КоличествоРазмещенныхСтрок = Элементы.ГруппаУчредители.ПодчиненныеЭлементы.Количество();
	
	КоличествоСтрок = РасчетыСУчредителями.Количество();
	
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл 
		
		Если ИндексСтроки > (КоличествоРазмещенныхСтрок - 1) Тогда
			ГруппаУчредитель = ДобавитьЭлементыСтрокиУчредителя(ИндексСтроки);
			КоличествоРазмещенныхСтрок = КоличествоРазмещенныхСтрок + 1;
		Иначе
			ГруппаУчредитель = Элементы.ГруппаУчредители.ПодчиненныеЭлементы["ГруппаУчредитель" + ИндексСтроки];
		КонецЕсли;
		
		ГруппаУчредитель.Видимость = Истина;
		
		СтрокаРасчетов = РасчетыСУчредителями[ИндексСтроки];
		
		ЭлементУчредитель = Элементы["Учредитель" + ИндексСтроки];
		ЭлементУчредитель.Заголовок = СтрокаРасчетов.Наименование;
		
		ЭлементДоля = Элементы["Доля" + ИндексСтроки];
		ЭлементДоля.Заголовок = Формат(СтрокаРасчетов.Доля);
		
		ЭлементОплачено = Элементы["Оплачено" + ИндексСтроки];
		ЭлементОплачено.Заголовок = Формат(СтрокаРасчетов.Оплачено);
		
		ЭлементДолг = Элементы["Долг" + ИндексСтроки];
		ЭлементДолг.Заголовок = СтрокаРасчетов.Долг;
		ЭлементДолг.ЦветТекста = ?(СтрокаРасчетов.Долг > 0, ЦветаСтиля.ЦветОтрицательногоЧисла, ЦветаСтиля.ОбычнаяГруппаЦветБЗК);
		
		ЭлементРазвернуть = Элементы["Развернуть" + ИндексСтроки];
		ЭлементРазвернуть.Картинка = ?(СтрокаРасчетов.Развернуто, 
			БиблиотекаКартинок.СтрелкаВнизЗеленая, 
			БиблиотекаКартинок.СтрелкаВправоЗеленая);
		
		РазместитьРасшифровкуРасчетовНаФорме(ИндексСтроки);
		
	КонецЦикла;
	
	// Скрываем ненужные группы учредителей
	Для ИндексГруппы = КоличествоСтрок По КоличествоРазмещенныхСтрок - 1 Цикл
		Элементы["ГруппаУчредитель" + ИндексГруппы].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементыСтрокиУчредителя(ИндексСтроки)
	
	ПрефиксИмениЭлемента = "ГруппаУчредитель" + ИндексСтроки;
	
	ГруппаЭталон = Элементы.ГруппаУчредитель0;
	НоваяГруппа = Элементы.Добавить(ПрефиксИмениЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаУчредители);
	// заполняем свойства новой группы по эталону, исключая некоторые свойства
	ЗаполнитьЗначенияСвойств(НоваяГруппа, ГруппаЭталон, , "Имя, ПодчиненныеЭлементы, ПутьКДаннымЗаголовка");
	
	ГруппаПоказателиЭталон = Элементы.ГруппаУчредитель0Показатели;
	НоваяГруппаПоказатели = Элементы.Добавить(ПрефиксИмениЭлемента + "Показатели", Тип("ГруппаФормы"), НоваяГруппа);
	// заполняем свойства новой группы показателей по эталону, исключая некоторые свойства
	ЗаполнитьЗначенияСвойств(НоваяГруппаПоказатели, ГруппаПоказателиЭталон, , 
		"Имя, ПодчиненныеЭлементы, ПутьКДаннымЗаголовка");
	
	Для Каждого ЭлементЭталон Из ГруппаПоказателиЭталон.ПодчиненныеЭлементы Цикл
		
		ИмяНовогоЭлемента = Лев(ЭлементЭталон.Имя, СтрДлина(ЭлементЭталон.Имя) - 1) + Строка(ИндексСтроки);
		НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипЗнч(ЭлементЭталон), НоваяГруппаПоказатели);
		// заполняем свойства нового элемента по эталону, исключая некоторые свойства
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементЭталон, , "Имя");
		
		ДействиеЭлемента = ЭлементЭталон.ПолучитьДействие("Нажатие");
		Если ЗначениеЗаполнено(ДействиеЭлемента) Тогда
			НовыйЭлемент.УстановитьДействие("Нажатие", ДействиеЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппаРасшифровкаЭталон = Элементы.ГруппаУчредитель0Расшифровка;
	НоваяГруппаРасшифровка = Элементы.Добавить(ПрефиксИмениЭлемента + "Расшифровка", Тип("ГруппаФормы"), НоваяГруппа);
	// заполняем свойства новой группы расшифровки по эталону, исключая некоторые свойства
	ЗаполнитьЗначенияСвойств(НоваяГруппаРасшифровка, ГруппаРасшифровкаЭталон, , 
		"Имя, ПодчиненныеЭлементы, ПутьКДаннымЗаголовка");
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасшифровкуРасчетов()
	
	// Полагаем, что список документов по уставному капиталу небольшой
	// поэтому получаем расшифровку сразу по всем учредителям, чтобы минимизировать количество обращений к учетным данным
	
	РасшифровкаРасчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Учредитель,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК Доля
	|ПОМЕСТИТЬ УставныйКапитал
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(, &КонецПериода, Регистратор, , Счет В (&СчетаУставныйКапитал), &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Учредитель,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Долг,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК Оплачено
	|ПОМЕСТИТЬ РасчетыСУчредителями
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(, &КонецПериода, Регистратор, , Счет = &СчетРасчетыПоВкладамВУставныйКапитал, &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасшифровки.Период КАК Период,
	|	ДанныеРасшифровки.Регистратор КАК Документ,
	|	ДанныеРасшифровки.Учредитель КАК Учредитель,
	|	СУММА(ДанныеРасшифровки.Доля) КАК Доля,
	|	СУММА(ДанныеРасшифровки.Долг) КАК Долг,
	|	СУММА(ДанныеРасшифровки.Оплачено) КАК Оплачено
	|ПОМЕСТИТЬ ДанныеРасшифровки
	|ИЗ
	|	(ВЫБРАТЬ
	|		УставныйКапитал.Период КАК Период,
	|		УставныйКапитал.Регистратор КАК Регистратор,
	|		УставныйКапитал.Учредитель КАК Учредитель,
	|		УставныйКапитал.Доля КАК Доля,
	|		0 КАК Долг,
	|		0 КАК Оплачено
	|	ИЗ
	|		УставныйКапитал КАК УставныйКапитал
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСУчредителями.Период,
	|		РасчетыСУчредителями.Регистратор,
	|		РасчетыСУчредителями.Учредитель,
	|		0,
	|		РасчетыСУчредителями.Долг,
	|		РасчетыСУчредителями.Оплачено
	|	ИЗ
	|		РасчетыСУчредителями КАК РасчетыСУчредителями) КАК ДанныеРасшифровки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРасшифровки.Период,
	|	ДанныеРасшифровки.Регистратор,
	|	ДанныеРасшифровки.Учредитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасшифровки.Период КАК Период,
	|	ДанныеРасшифровки.Документ КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеРасшифровки.Документ) КАК ДокументПредставление,
	|	ДанныеРасшифровки.Учредитель КАК Учредитель,
	|	ДанныеРасшифровки.Доля КАК Доля,
	|	ДанныеРасшифровки.Долг КАК Долг,
	|	ДанныеРасшифровки.Оплачено КАК Оплачено,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК НомерРегистратора,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	ДанныеПервичныхДокументов.Номер КАК Номер,
	|	ДанныеПервичныхДокументов.Дата КАК Дата
	|ИЗ
	|	ДанныеРасшифровки КАК ДанныеРасшифровки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеРасшифровки.Документ = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ";
	
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУставныйКапитал", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УставныйКапитал));
	Запрос.УстановитьПараметр("СчетРасчетыПоВкладамВУставныйКапитал", 
		ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	Запрос.УстановитьПараметр("СубконтоУчредители", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ЗначениеЗаполнено(Выборка.Документ) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРасшифровки = РасшифровкаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.ДатаРегистратора) Тогда 
			
			НазваниеДокумента = Выборка.Документ.Метаданные().Синоним;
			ДатаДокумента = ?(ЗначениеЗаполнено(Выборка.Дата), Выборка.Дата, Выборка.ДатаРегистратора);
			НомерДокумента = ?(ЗначениеЗаполнено(Выборка.Номер), Выборка.Номер, Выборка.НомерРегистратора);
			
			НоваяСтрокаРасшифровки.ДокументПредставление = НазваниеДокумента 
				+ " № " + НомерДокумента + " от " + Формат(ДатаДокумента, "ДФ=dd.MM.yyyy");
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ФормированиеУставногоКапитала") Тогда 
			
			ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "Дата");
			
			НоваяСтрокаРасшифровки.ДокументПредставление = "Формирование уставного капитала"
				+ " от " + Формат(ДатаДокумента, "ДФ=dd.MM.yyyy");
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	РасшифровкаПолучена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьРасшифровкуРасчетовНаФорме(ИндексСтрокиУчредителя)
	
	СтрокаУчредителя = РасчетыСУчредителями[ИндексСтрокиУчредителя];
	
	ПрефиксИмениГруппыРасшифровки = СтрШаблон("ГруппаУчредитель%1Расшифровка", ИндексСтрокиУчредителя);
	ГруппаРасшифровкаУчредителя = Элементы[ПрефиксИмениГруппыРасшифровки];
	КоличествоРазмещенныхСтрок = ГруппаРасшифровкаУчредителя.ПодчиненныеЭлементы.Количество();
	
	Если СтрокаУчредителя.Развернуто Тогда 
		ДанныеРасшифровкиУчредителя = РасшифровкаРасчетов.НайтиСтроки(
			Новый Структура("Учредитель", СтрокаУчредителя.Учредитель));
		КоличествоСтрок = ДанныеРасшифровкиУчредителя.Количество();
	Иначе
		КоличествоСтрок = 0;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл 
		ПрефиксИмениЭлемента = СтрШаблон("Учредитель%1Расшифровка%2", ИндексСтрокиУчредителя, ИндексСтроки);
		
		Если ИндексСтроки > (КоличествоРазмещенныхСтрок - 1) Тогда
			ГруппаРасшифровки = ДобавитьЭлементыСтрокиРасшифровки(ИндексСтрокиУчредителя, ИндексСтроки);
			КоличествоРазмещенныхСтрок = КоличествоРазмещенныхСтрок + 1;
		Иначе
			ГруппаРасшифровки = ГруппаРасшифровкаУчредителя.ПодчиненныеЭлементы["Группа" + ПрефиксИмениЭлемента];
		КонецЕсли;
		
		ГруппаРасшифровки.Видимость = Истина;
		
		СтрокаРасшифровки = ДанныеРасшифровкиУчредителя[ИндексСтроки];
		
		ЭлементДокумент = Элементы[ПрефиксИмениЭлемента + "Документ"];
		ЭлементДокумент.Заголовок = СтрокаРасшифровки.ДокументПредставление;
		
		// Устанавливаем имя элемента, чтобы можно было найти строку при нажатии на документ
		СтрокаРасшифровки.ДокументИмяЭлемента = ЭлементДокумент.Имя;
		
		ЭлементДоля = Элементы[ПрефиксИмениЭлемента + "Доля"];
		ЭлементДоля.Заголовок = Формат(СтрокаРасшифровки.Доля);
		
		ЭлементОплачено = Элементы[ПрефиксИмениЭлемента + "Оплачено"];
		ЭлементОплачено.Заголовок = Формат(СтрокаРасшифровки.Оплачено);
		
		ЭлементДолг = Элементы[ПрефиксИмениЭлемента + "Долг"];
		ЭлементДолг.Заголовок = СтрокаРасшифровки.Долг;
		ЭлементДолг.ЦветТекста = ?(СтрокаРасшифровки.Долг > 0, ЦветаСтиля.ЦветОтрицательногоЧисла, Новый Цвет());
		
	КонецЦикла;
	
	// Скрываем ненужные группы расшифровки
	Для ИндексГруппы = КоличествоСтрок По КоличествоРазмещенныхСтрок - 1 Цикл
		Элементы[ПрефиксИмениГруппыРасшифровки + ИндексГруппы].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементыСтрокиРасшифровки(ИндексСтрокиУчредителя, ИндексСтроки)
	
	ГруппаРасшифровкаУчредителя = Элементы[СтрШаблон("ГруппаУчредитель%1Расшифровка", ИндексСтрокиУчредителя)];
	
	ПрефиксИмениЭлемента = СтрШаблон("Учредитель%1Расшифровка%2", ИндексСтрокиУчредителя, ИндексСтроки);
	
	ГруппаЭталон = Элементы.ГруппаУчредитель0Расшифровка0;
	НоваяГруппа = Элементы.Добавить("Группа" + ПрефиксИмениЭлемента, Тип("ГруппаФормы"), ГруппаРасшифровкаУчредителя);
	// заполняем свойства новой группы по эталону, исключая некоторые свойства
	ЗаполнитьЗначенияСвойств(НоваяГруппа, ГруппаЭталон, , "Имя, ПодчиненныеЭлементы, ПутьКДаннымЗаголовка");
	
	Для Каждого ЭлементЭталон Из ГруппаЭталон.ПодчиненныеЭлементы Цикл
		
		ИмяНовогоЭлемента = СтрЗаменить(ЭлементЭталон.Имя, "Учредитель0Расшифровка0", ПрефиксИмениЭлемента);
		НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипЗнч(ЭлементЭталон), НоваяГруппа);
		// заполняем свойства нового элемента по эталону, исключая некоторые свойства
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементЭталон, , "Имя");
		
		ДействиеЭлемента = ЭлементЭталон.ПолучитьДействие("Нажатие");
		Если ЗначениеЗаполнено(ДействиеЭлемента) Тогда
			НовыйЭлемент.УстановитьДействие("Нажатие", ДействиеЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяГруппа;
	
КонецФункции

#Область ПроверкаЗаполненияРеквизитов

&НаСервереБезКонтекста
Функция ПроверитьРеквизитыОрганизации(Организация)
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация, ПроверяемыеРеквизитыОрганизации(), НезаполненныеРеквизиты);
		
	Возврат Новый Структура("РеквизитыЗаполнены, НезаполненныеРеквизиты", 
		РеквизитыОрганизацииЗаполнены, НезаполненныеРеквизиты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	ПроверяемыеРеквизиты = Новый Массив();
	ПроверяемыеРеквизиты.Добавить("ДатаРегистрации");
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти