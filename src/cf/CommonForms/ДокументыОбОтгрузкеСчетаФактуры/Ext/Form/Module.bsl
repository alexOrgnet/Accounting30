
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетФактура                      = Параметры.СчетФактура;
	Контрагент                       = Параметры.Контрагент;
	ДоговорКонтрагента               = Параметры.ДоговорКонтрагента;
	ВидСчетаФактуры                  = Параметры.ВидСчетаФактуры;
	ВключитьВозможностьРедактировать = Параметры.ВключитьВозможностьРедактировать;
	АдресТаблицДокумента             = Параметры.АдресТаблицДокумента;
	ТаблицыДокумента                 = ПолучитьИзВременногоХранилища(АдресТаблицДокумента);
	
	ДокументыОбОтгрузке.Загрузить(ТаблицыДокумента.ТаблицаДокументовОбОтгрузке);
	ДокументыОснования.ЗагрузитьЗначения(ТаблицыДокумента.ТаблицаДокументовОснований);
	
	ДоступноРедактирование = ПравоДоступа("Изменение", Параметры.СчетФактура.Метаданные());
	ЭтотОбъект.ТолькоПросмотр = НЕ ДоступноРедактирование;
	Элементы.ВключитьВозможностьРедактировать.Доступность = ДоступноРедактирование;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность            = ДоступноРедактирование;
	Элементы.ДокументыОбОтгрузке.Доступность              = ДоступноРедактирование И ВключитьВозможностьРедактировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		СтруктураВозврата = ПриЗакрытииНаСервере();
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И (Модифицированность ИЛИ ПеренестиВДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = ЕстьОшибкиЗаполнения();
	КонецЕсли;
	
	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьВозможностьРедактироватьПриИзменении(Элемент)
	
	Элементы.ДокументыОбОтгрузке.Доступность = ВключитьВозможностьРедактировать;
	Если ВключитьВозможностьРедактировать Тогда
		ЗаполнитьОтгрузочныеДокументы();
	Иначе
		ДокументыОбОтгрузке.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ПеренестиВДокумент = Ложь;
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОтгрузочныеДокументы()
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
			
	СведенияОДокументахОтгрузки = ТаблицаСчетовФактур[0].ДанныеШапки.ДокументыОбОтгрузке;
	Для Каждого СтрокаСДокументомОбОтгрузке Из СведенияОДокументахОтгрузки Цикл
		ДокументОтгрузки  = ДокументыОбОтгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(ДокументОтгрузки, СтрокаСДокументомОбОтгрузке);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура();
	
	Если ПеренестиВДокумент Тогда
		СтруктураВозврата.Вставить("ОтредактированыДокументыОтгрузки", ВключитьВозможностьРедактировать);
		ТаблицаДокументовОбОтгрузке = ДокументыОбОтгрузке.Выгрузить();
		АдресТаблицыОтгрузочныхДокументов = ПоместитьВоВременноеХранилище(ТаблицаДокументовОбОтгрузке, УникальныйИдентификатор);
		СтруктураВозврата.Вставить("АдресТаблицыОтгрузочныхДокументов", АдресТаблицыОтгрузочныхДокументов);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ЕстьОшибкиЗаполнения()
	
	Отказ = Ложь;
	Для Индекс = 0 По ДокументыОбОтгрузке.Количество() - 1 Цикл
		
		СтрокаТаблицы = ДокументыОбОтгрузке[Индекс];
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомераСтрок) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не указаны номера строк.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыОбОтгрузке["+Индекс+"].НомераСтрок",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерДокумента) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не указан номер документа.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыОбОтгрузке["+Индекс+"].НомерДокумента",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокумента) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не указана дата документа.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыОбОтгрузке["+Индекс+"].ДатаДокумента",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеДокумента) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не указано наименование документа.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыОбОтгрузке["+Индекс+"].НаименованиеДокумента",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти