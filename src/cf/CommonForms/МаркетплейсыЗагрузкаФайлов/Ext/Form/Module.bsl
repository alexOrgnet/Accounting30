#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Маркетплейс") Тогда
		Маркетплейс = Параметры.Маркетплейс;
	КонецЕсли;
		
	СпособСверткиОтчетов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МаркетплейсыЗагрузкаФайлов", "СпособСверткиОтчетов", "Построчно");
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);
				
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Для Каждого СтрокаДанных из ЗагружаемыеФайлыWB Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.Организация)
			И Организация <> СтрокаДанных.Организация Тогда
			СтрокаДанных.Загружать = Ложь;
			СтрокаДанных.Комментарий = НСтр("ru='Загрузка выполняется по другой организации.'");
		Иначе
			СтрокаДанных.Комментарий = "";
		КонецЕсли;			
	КонецЦикла;
	Для Каждого СтрокаДанных из ЗагружаемыеФайлыOzon Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.Организация)
			И Организация <> СтрокаДанных.Организация Тогда
			СтрокаДанных.Загружать = Ложь;
			СтрокаДанных.Комментарий = НСтр("ru='Загрузка выполняется по другой организации.'");
		Иначе
			СтрокаДанных.Комментарий = "";
		КонецЕсли;			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НайтиДокументыИБ(ЗагружаемыеФайлыWB, ДокументыИБ, КонтрагентWB, Организация);
		НайтиДокументыИБ(ЗагружаемыеФайлыOzon, ДокументыИБ, КонтрагентOzon, Организация, "МЕСЯЦ");
		УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыWB, Элементы.ЗагружаемыеФайлыWBГруппаДокумент);
		УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыOzon, Элементы.ЗагружаемыеФайлыOzonГруппаДокумент);
		Элементы.ФормаЗагрузить.Доступность = Истина;
	Иначе
		Элементы.ФормаЗагрузить.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентWBПриИзмененииНаСервере()
	НайтиДокументыИБ(ЗагружаемыеФайлыWB, ДокументыИБ, КонтрагентWB, Организация);
	УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыWB, Элементы.ЗагружаемыеФайлыWBГруппаДокумент);	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентWBПриИзменении(Элемент)
	КонтрагентWBПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентOzonПриИзмененииНаСервере()
	НайтиДокументыИБ(ЗагружаемыеФайлыOzon, ДокументыИБ, КонтрагентOzon, Организация, "МЕСЯЦ");
	УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыOzon, Элементы.ЗагружаемыеФайлыOzonГруппаДокумент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентOzonПриИзменении(Элемент)
	КонтрагентOzonПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеНажатие(Элемент)
	
	ВыполнитьЗагрузкуФайловИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Не ВыполняетсяЗагрузка Тогда
		ВыполнитьЗагрузкуФайловИнтерактивно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ВыполняетсяЗагрузка Тогда 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Не ВыполняетсяЗагрузка Тогда
		ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеФайлыWBДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗагружаемыеФайлыWB.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("", НСтр("ru='Создать новый документ'"));
	
	СсылкиНаДокументы = ДокументыИБ.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
	Для Каждого ДокументИБ ИЗ СсылкиНаДокументы Цикл
		Элемент.СписокВыбора.Добавить(ДокументИБ.Документ, ДокументИБ.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеФайлыOzonДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗагружаемыеФайлыOzon.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("", НСтр("ru='Создать новый документ'"));
	
	СсылкиНаДокументы = ДокументыИБ.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
	Для Каждого ДокументИБ ИЗ СсылкиНаДокументы Цикл
		Элемент.СписокВыбора.Добавить(ДокументИБ.Документ, ДокументИБ.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеФайлыWBДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемыеФайлыWB.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		СсылкиНаДокументы = ДокументыИБ.НайтиСтроки(Новый Структура("КлючСтроки, Документ", ТекущиеДанные.КлючСтроки, ТекущиеДанные.Документ));
		Если СсылкиНаДокументы.Количество() > 0 Тогда
			ТекущиеДанные.ДокументПредставление = СсылкиНаДокументы[0].Представление;
			ТекущиеДанные.ДокументПредставление1 = СсылкиНаДокументы[0].Представление1;
			ТекущиеДанные.ДокументПредставление2 = СсылкиНаДокументы[0].Представление2;
		КонецЕсли;
	Иначе
		ТекущиеДанные.ДокументПредставление = НСтр("ru='Создать новый документ'");
		ТекущиеДанные.ДокументПредставление1 = НСтр("ru='Создать новый документ'");
		ТекущиеДанные.ДокументПредставление2 = "";
	КонецЕсли;
	Элемент.Заголовок = ТекущиеДанные.ДокументПредставление1;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеФайлыOzonДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемыеФайлыOzon.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		СсылкиНаДокументы = ДокументыИБ.НайтиСтроки(Новый Структура("КлючСтроки, Документ", ТекущиеДанные.КлючСтроки, ТекущиеДанные.Документ));
		Если СсылкиНаДокументы.Количество() > 0 Тогда
			ТекущиеДанные.ДокументПредставление = СсылкиНаДокументы[0].Представление;
			ТекущиеДанные.ДокументПредставление1 = СсылкиНаДокументы[0].Представление1;
			ТекущиеДанные.ДокументПредставление2 = СсылкиНаДокументы[0].Представление2;
		КонецЕсли;
	Иначе
		ТекущиеДанные.ДокументПредставление = НСтр("ru='Создать новый документ'");
		ТекущиеДанные.ДокументПредставление1 = НСтр("ru='Создать новый документ'");
		ТекущиеДанные.ДокументПредставление2 = "";
	КонецЕсли;
	Элемент.Заголовок = ТекущиеДанные.ДокументПредставление1;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.СозданныеДокументы.ТекущиеДанные;
	Отказ = Истина;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.ФормаОбъекта", ПараметрыФормы, , , , , );
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы, , , , , );
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,"Организация");
		Возврат;
	КонецЕсли;
	
	ТекстСообщенияЗагрузки = НСтр("ru = 'Создание документов ...'");
	ЭтотОбъект.Заголовок = НСтр("ru = 'Создание документов'");
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Прервать'");
	ПрогрессЗагрузки = 0;
	Элементы.ГруппаНастройки.Видимость = Ложь;
	Элементы.ФормаЗагрузить.Видимость = Ложь;
	Элементы.СостояниеЗагрузки.Видимость = Истина;
	Элементы.ПрогрессЗагрузки.Видимость = Ложь;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
			
	МассивКСопоставлению = СписокНеСопоставленнойНоменклатурыНаСервере();
	Если МассивКСопоставлению.Количество() > 0 Тогда
		НачатьСопоставлениеНоменклатуры(МассивКСопоставлению, 0);
	Иначе
		НачатьСозданиеДокументов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеФайловНаСервер

&НаКлиенте
Процедура ДобавитьФайлВСписок(СсылкиНаФайлы)
	
	Если ТипЗнч(СсылкиНаФайлы) = Тип("СсылкаНаФайл") Тогда
		СсылкиНаФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНаФайлы);
	КонецЕсли;
	
	Для Каждого СсылкаНаФайл Из СсылкиНаФайлы Цикл
		ДобавитьФайл(СсылкаНаФайл.Имя, СсылкаНаФайл.ИдентификаторФайла, СсылкаНаФайл.Расширение);
	КонецЦикла;
	
	ВыполнитьЗагрузкуФайлов(СсылкиНаФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайловИнтерактивно()
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(НСтр("ru = 'Выберите файлы для загрузки'"), Истина, "(*.xlsx;*.xls;*.mxl;*.zip)|*.xlsx;*.xls;*.mxl;*.zip");
	ВыполнитьЗагрузкуФайлов(ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлов(СсылкиНаФайлыИлиПараметрыДиалога)
	
	НачатьПомещениеФайловНаСервер(
		Новый ОписаниеОповещения("ПриЗавершенииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПриВыполненииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПередНачаломПомещенияФайлов", ЭтотОбъект),
		СсылкиНаФайлыИлиПараметрыДиалога,
		УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломПомещенияФайлов(ПомещаемыеФайлы, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
	Иначе
		ВыполняетсяЗагрузка = Истина;
		ТекстСообщенияЗагрузки = НСтр("ru = 'Загрузка файлов ...'");
		ПерерисоватьФайлыПоСостоянию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыполненииПомещенияФайлов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	Если Не ЭтотОбъект.Открыта() Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
	КонецЕсли;
	
	СтрокиФайлов = Файлы.НайтиСтроки(Новый Структура("Наименование, Разобран", ПомещаемыйФайл.Имя, Истина));
	Если СтрокиФайлов.Количество() > 0 Тогда
		ОтказОтПомещенияФайла = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		ОбновитьСостояниеФайлов(ПомещенныеФайлы);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РазобратьФайлы", 0.2, Истина);
    
КонецПроцедуры

#КонецОбласти

#Область РазборФайлов

&НаКлиенте
Процедура РазобратьФайлы()
	
	ФоновоеЗадание = ЗапуститьФоновыйРазборФайлов();
	
	ОбработчикПрогресса = Новый ОписаниеОповещения("ПриПрогрессеРазбораФайлов", ЭтотОбъект);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОбработчикПрогресса;
	
	Обработчик = Новый ОписаниеОповещения("ПослеРазбораФайлов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновыйРазборФайлов()
	
	ОтправляемыеФайлы = Новый Массив;
	Для Каждого Файл Из Файлы Цикл 
		
		Если Файл.Разобран Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("ИмяФайла", Файл.Наименование);
		
		ВременныйФайл = ПолучитьИмяВременногоФайла(Файл.Расширение);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Файл.Адрес);
		ДвоичныеДанные.Записать(ВременныйФайл);
		ОписаниеФайла.Вставить("РасширениеФайла", Файл.Расширение);
		ОписаниеФайла.Вставить("ПолноеИмяФайла", Файл.Наименование);
		ОписаниеФайла.Вставить("ВременныйФайл", ВременныйФайл);
		
		ОтправляемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Разбор файлов, полученных из маркетплейса'");
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ДанныеРазобранныхФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
		АдресВременногоХранилища =  ПоместитьВоВременноеХранилище(ДанныеРазобранныхФайлов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"ЭлектронноеВзаимодействиеБП.ПолучитьДанныеВСтруктуру",
		ОтправляемыеФайлы, АдресХранилища);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеРазбораФайлов(Задание, Контекст) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗагрузка = Ложь;
	ПодключитьОбработчикОжидания("ПерерисоватьФайлыПоСостоянию", 0.2, Истина);
	
	Если Задание.Статус = "Выполнено" Тогда
		ПослеРазбораФайловНаСервере();
		ОтобразитьРезультатЧтенияФайлов();
		
		ПодключитьОбработчикОжидания("ПроверитьНаличиеФайловДляЗагрузки", 0.2, Истина);
		
	Иначе
		ПоказатьПредупреждение(, Задание.КраткоеПредставлениеОшибки);
		АдресХранилища = АдресВременногоХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеРазбораФайловНаСервере()
	
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ДанныеФайлов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазобранныхФайлов = Неопределено;
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
	    ДанныеРазобранныхФайлов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если ТипЗнч(ДанныеРазобранныхФайлов) <> Тип("Массив") Тогда
			ДанныеРазобранныхФайлов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Файл Из ДанныеФайлов Цикл
		Если ДанныеРазобранныхФайлов <> Неопределено Тогда
			ДанныеРазобранныхФайлов.Добавить(Файл);
		КонецЕсли;
		
		СтрокиФайлов = Файлы.НайтиСтроки(Новый Структура("Наименование", Файл.ПолноеИмяФайла));
		Для Каждого СтрокаФайлов Из СтрокиФайлов Цикл
			Если Файл.Свойство("ТекстОшибки") Тогда
				Файл.Вставить("Описание", Файл.ТекстОшибки);
			КонецЕсли;
			Если НЕ СтрокаФайлов.Разобран Тогда
				СтрокаФайлов.Разобран = Истина;
				СтрокаФайлов.Описание = Файл.Описание;
			Иначе
			   	СтрокаФайлов.Описание = СтрокаФайлов.Описание + "
					|" + Файл.Описание;
			КонецЕсли;
		КонецЦикла
	КонецЦикла;	
	
	Если ДанныеРазобранныхФайлов <> Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеРазобранныхФайлов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатЧтенияФайлов()
	Если НЕ ЗначениеЗаполнено(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеФайлыWB.Очистить();
	ЗагружаемыеФайлыOzon.Очистить();
		
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ДанныеФайлов) = Тип("Массив") Тогда
		
		МассивПериодовWB = Новый Массив;
		МассивПериодовOzon = Новый Массив;
		Для Каждого Файл Из ДанныеФайлов Цикл
			Если Файл.Свойство("ТекстОшибки") Тогда
				Продолжить;
			КонецЕсли;
			Если Файл.Маркетплейс = Перечисления.ВидыМаркетплейсов.Wildberries Тогда
				Если МассивПериодовWB.Найти(НачалоНедели(Файл.Дата)) = Неопределено Тогда
					НоваяСтрока = ЗагружаемыеФайлыWB.Добавить();
					НоваяСтрока.Дата = НачалоНедели(Файл.Дата);
					НоваяСтрока.ТекстЗаголовка = СтрШаблон(НСтр("ru='Период с %1 по %2'"), Формат(НачалоНедели(Файл.Дата), "ДФ=dd.MM.yyyy"), Формат(КонецНедели(Файл.Дата), "ДФ=dd.MM.yyyy"));
					НоваяСтрока.КлючСтроки = -1;
					МассивПериодовWB.Добавить(НачалоНедели(Файл.Дата));
				КонецЕсли;
				НоваяСтрока = ЗагружаемыеФайлыWB.Добавить();
				Если Не ЗначениеЗаполнено(КонтрагентWB)
					И ЗначениеЗаполнено(Файл.Контрагент) Тогда
					КонтрагентWB = Файл.Контрагент;
				КонецЕсли;															
			ИначеЕсли Файл.Маркетплейс = Перечисления.ВидыМаркетплейсов.OZON Тогда
				Если МассивПериодовOzon.Найти(НачалоМесяца(Файл.Дата)) = Неопределено Тогда
					НоваяСтрока = ЗагружаемыеФайлыOzon.Добавить();
					НоваяСтрока.Дата = НачалоМесяца(Файл.Дата);
					НоваяСтрока.ТекстЗаголовка = СтрШаблон(НСтр("ru='Период с %1 по %2'"), Формат(НачалоМесяца(Файл.Дата), "ДФ=dd.MM.yyyy"), Формат(КонецМесяца(Файл.Дата), "ДФ=dd.MM.yyyy"));
					НоваяСтрока.КлючСтроки = -1;
					МассивПериодовOzon.Добавить(НачалоМесяца(Файл.Дата));
				КонецЕсли;
				НоваяСтрока = ЗагружаемыеФайлыOzon.Добавить();
				Если Не ЗначениеЗаполнено(КонтрагентOzon)
					И ЗначениеЗаполнено(Файл.Контрагент) Тогда
					КонтрагентOzon = Файл.Контрагент;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Файл);
			НоваяСтрока.КлючСтроки = ДанныеФайлов.Найти(Файл);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Описание) Тогда
				МассивПодстрок = СтрРазделить(НоваяСтрока.Описание, Символы.ПС, Ложь);
				Если МассивПодстрок.Количество() > 0 Тогда
					НоваяСтрока.Описание1 = МассивПодстрок[0];
				Иначе
					НоваяСтрока.Описание1 = НоваяСтрока.Описание;
				КонецЕсли;
				Если МассивПодстрок.Количество() > 1 Тогда
					НоваяСтрока.Описание2 = МассивПодстрок[1];
				КонецЕсли;				
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(Организация)
				И ЗначениеЗаполнено(Файл.Организация) Тогда
				Организация = Файл.Организация;
			ИначеЕсли ЗначениеЗаполнено(Файл.Организация)
				И Организация <> Файл.Организация Тогда
				
				НоваяСтрока.Загружать = Ложь;
				НоваяСтрока.Комментарий = НСтр("ru='Загрузка выполняется по другой организации.'");
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	ЗагружаемыеФайлыWB.Сортировать("Дата, ВидДокумента");
	ЗагружаемыеФайлыOzon.Сортировать("Дата, ВидДокумента");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НайтиДокументыИБ(ЗагружаемыеФайлыWB, ДокументыИБ, КонтрагентWB, Организация);
		НайтиДокументыИБ(ЗагружаемыеФайлыOzon, ДокументыИБ, КонтрагентOzon, Организация, "МЕСЯЦ");
		УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыWB, Элементы.ЗагружаемыеФайлыWBГруппаДокумент);
		УстановитьВидимостьЗамещаемогоДокумента(ЗагружаемыеФайлыOzon, Элементы.ЗагружаемыеФайлыOzonГруппаДокумент);
		Элементы.ФормаЗагрузить.Доступность = Истина;
	Иначе
		Элементы.ФормаЗагрузить.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаWildberries.Заголовок = СтрШаблон(НСтр("ru='Wildberries (%1)'"), 
		Формат(ЗагружаемыеФайлыWB.Количество() - МассивПериодовWB.Количество(), "ЧН=0"));
	Элементы.ГруппаOZON.Заголовок = СтрШаблон(НСтр("ru='OZON (%1)'"), 
		Формат(ЗагружаемыеФайлыOzon.Количество() - МассивПериодовOzon.Количество(), "ЧН=0"));
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиДокументыИБ(ТаблицаДанных, ДокументыИБ, Контрагент, Организация, Периодичность = "НЕДЕЛЯ")
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ОтчетКомиссионераОПродажах.Дата, НЕДЕЛЯ) КАК НачалоПериода,
	|	ОтчетКомиссионераОПродажах.Ссылка.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТОтчетыКомиссионеров
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Организация = &Организация
	|	И ОтчетКомиссионераОПродажах.Контрагент = &Контрагент
	|	И НАЧАЛОПЕРИОДА(ОтчетКомиссионераОПродажах.Дата, НЕДЕЛЯ) В (&МассивПериодов)
	|	И НЕ ОтчетКомиссионераОПродажах.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтчетыКомиссионеров.Ссылка КАК Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода КАК НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации КАК ВидОперации,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК СуммаПродаж,
	|	0 КАК СуммаВозвратов
	|ПОМЕСТИТЬ ВТОтчетыКомиссионеровССуммами
	|ИЗ
	|	ВТОтчетыКомиссионеров КАК ВТОтчетыКомиссионеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО (ОтчетКомиссионераОПродажахТовары.Ссылка = ВТОтчетыКомиссионеров.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтчетыКомиссионеров.Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтчетыКомиссионеров.Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации,
	|	0,
	|	СУММА(ОтчетКомиссионераОПродажахТоварыВозвращенные.Сумма)
	|ИЗ
	|	ВТОтчетыКомиссионеров КАК ВТОтчетыКомиссионеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.ТоварыВозвращенные КАК ОтчетКомиссионераОПродажахТоварыВозвращенные
	|		ПО (ОтчетКомиссионераОПродажахТоварыВозвращенные.Ссылка = ВТОтчетыКомиссионеров.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтчетыКомиссионеров.Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтчетыКомиссионеров.Ссылка КАК Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода КАК НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации КАК ВидОперации,
	|	0 КАК СуммаВыкупа,
	|	СУММА(ВТОтчетыКомиссионеров.СуммаПродаж) КАК СуммаПродаж,
	|	СУММА(ВТОтчетыКомиссионеров.СуммаВозвратов) КАК СуммаВозвратов
	|ИЗ
	|	ВТОтчетыКомиссионеровССуммами КАК ВТОтчетыКомиссионеров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтчетыКомиссионеров.Ссылка,
	|	ВТОтчетыКомиссионеров.НачалоПериода,
	|	ВТОтчетыКомиссионеров.ВидОперации";
	
	ТекстЗапросаВыкуп = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, НЕДЕЛЯ),
	|	РеализацияТоваровУслуг.ВидОперации,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	0,
	|	0
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, НЕДЕЛЯ) В (&МассивПериодов)
	|	И РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером)
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	
	Если НЕ Периодичность = "НЕДЕЛЯ" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕДЕЛЯ", Периодичность);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВыкуп;
	
	МассивПериодов = Новый Массив;
	Для Каждого СтрокаДанных из ТаблицаДанных Цикл
		Если СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаWBУведомлениеВыкупа()
			ИЛИ СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzonВыкуп() Тогда
			НачалоПериода = НачалоНедели(СтрокаДанных.Дата);
		Иначе
			НачалоПериода = ?(Периодичность = "НЕДЕЛЯ", НачалоНедели(СтрокаДанных.Дата), НачалоМесяца(СтрокаДанных.Дата));
		КонецЕсли;
		Если МассивПериодов.Найти(НачалоПериода) = Неопределено Тогда
			МассивПериодов.Добавить(НачалоПериода);
		КонецЕсли;			
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("МассивПериодов", МассивПериодов);
	Запрос.Текст      = ТекстЗапроса;
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных из ТаблицаДанных Цикл
		
		СтрокаДанных.Документ = Неопределено;
		СтрокаДанных.Комментарий = "";
		СтрокаДанных.ДокументПредставление = НСтр("ru='Создать новый документ'");
		СтрокаДанных.ДокументПредставление1 = НСтр("ru='Создать новый документ'");
		СтрокаДанных.ДокументПредставление2 = "";
		
		СсылкиНаДокументы = ДокументыИБ.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаДанных.КлючСтроки));
		Для Каждого ДокументИБ ИЗ СсылкиНаДокументы Цикл
			ДокументыИБ.Удалить(ДокументыИБ.Индекс(ДокументИБ));	
		КонецЦикла;		
		
		НачалоПериода = ?(Периодичность = "НЕДЕЛЯ", НачалоНедели(СтрокаДанных.Дата), НачалоМесяца(СтрокаДанных.Дата));
		Если СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаWBУведомлениеВыкупа()
			ИЛИ СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzonВыкуп() Тогда
			НачалоПериода = НачалоНедели(СтрокаДанных.Дата);
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером;
		ИначеЕсли СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzonСписание() 
			ИЛИ СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетWBСписание() Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОСписании;
		ИначеЕсли СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетWBДетальный() 
			ИЛИ СтрокаДанных.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzon() Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОРозничныхПродажах;
		Иначе
			Продолжить;
		КонецЕсли;
		НайденныеДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("НачалоПериода, ВидОперации", НачалоПериода, ВидОперации));
		ВключатьВыкупы     = (НачалоПериода > '20230901') И (НЕ УчетнаяПолитика.ПлательщикНДС(Организация, НачалоПериода));
		Если НайденныеДокументы.Количество() > 0 Тогда
			
			Для Каждого ДокументИБ из НайденныеДокументы Цикл
				
				НоваяСтрока = ДокументыИБ.Добавить();
				НоваяСтрока.Документ = ДокументИБ.Ссылка;
				НоваяСтрока.КлючСтроки = СтрокаДанных.КлючСтроки;
				
				НоваяСтрока.Представление = СтрШаблон(НСтр("ru='Заменить %1'"), ДокументИБ.Ссылка);
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВыкупТоваровКомиссионером Тогда
					
					Если СтрокаДанных.СуммаВыкупа > ДокументИБ.СуммаВыкупа Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа меньше, чем сумма в файле на %1'"), Формат(СтрокаДанных.СуммаВыкупа - ДокументИБ.СуммаВыкупа, "ЧДЦ=2")); 
					ИначеЕсли СтрокаДанных.СуммаВыкупа < ДокументИБ.СуммаВыкупа Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа больше, чем сумма в файле на %1'"), Формат(ДокументИБ.СуммаВыкупа - СтрокаДанных.СуммаВыкупа, "ЧДЦ=2"));
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОСписании Тогда				
					
					Если СтрокаДанных.СуммаСписания > ДокументИБ.СуммаПродаж Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа меньше, чем сумма в файле на %1'"), Формат(СтрокаДанных.СуммаСписания - ДокументИБ.СуммаПродаж, "ЧДЦ=2"));
					ИначеЕсли СтрокаДанных.СуммаСписания < ДокументИБ.СуммаПродаж Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа больше, чем сумма в файле на %1'"), Формат(ДокументИБ.СуммаПродаж - СтрокаДанных.СуммаСписания, "ЧДЦ=2"));
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОРозничныхПродажах Тогда
					
					РазницаВСуммеДокумента = СтрокаДанных.СуммаПродаж - СтрокаДанных.СуммаВозвратов - ДокументИБ.СуммаПродаж + ДокументИБ.СуммаВозвратов;
					Если ВключатьВыкупы Тогда
						РазницаВСуммеДокумента = РазницаВСуммеДокумента + СтрокаДанных.СуммаВыкупа;
					КонецЕсли;
					
					Если РазницаВСуммеДокумента < 0 Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа больше, чем сумма в файле на %1'"), Формат(-РазницаВСуммеДокумента, "ЧДЦ=2"));
					ИначеЕсли РазницаВСуммеДокумента > 0 Тогда
						НоваяСтрока.Представление = НоваяСтрока.Представление + 
							Символы.ПС + СтрШаблон(НСтр("ru='Сумма документа меньше, чем сумма в файле на %1'"), Формат(РазницаВСуммеДокумента, "ЧДЦ=2"));
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Представление) Тогда
					МассивПодстрок = СтрРазделить(НоваяСтрока.Представление, Символы.ПС, Ложь);
					Если МассивПодстрок.Количество() > 0 Тогда
						НоваяСтрока.Представление1 = МассивПодстрок[0];
					Иначе
						НоваяСтрока.Представление1 = НоваяСтрока.Представление;
					КонецЕсли;
					Если МассивПодстрок.Количество() > 1 Тогда
						НоваяСтрока.Представление2 = МассивПодстрок[1];
					КонецЕсли;				
				КонецЕсли;
				
				Если СтрокаДанных.Документ = Неопределено Тогда
					СтрокаДанных.Документ = НоваяСтрока.Документ;
					СтрокаДанных.ДокументПредставление = НоваяСтрока.Представление;
					СтрокаДанных.ДокументПредставление1 = НоваяСтрока.Представление1;
					СтрокаДанных.ДокументПредставление2 = НоваяСтрока.Представление2;
				Конецесли
			КонецЦикла;			
		КонецЕсли;		
	КонецЦикла;
	
КонецПРоцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

&НаСервере
Функция СписокНеСопоставленнойНоменклатурыНаСервере()
	
	СписокНеСопоставленнойНоменклатуры = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(АдресХранилища) Тогда
		Возврат СписокНеСопоставленнойНоменклатуры;
	КонецЕсли;
	
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ТаблицаНоменклатураОтчет       = Неопределено;
	ТаблицаНоменклатураУведомление = Неопределено;
	НастройкиОтчет                 = Неопределено;
	НастройкиУведомление           = Неопределено;
	
	СозданныеДокументы.Очистить();
	
	Для Каждого Строка Из ЗагружаемыеФайлыWB Цикл
		Если Строка.Загружать Тогда                                         
			
			СтрокаСозданиеДокументов = СозданныеДокументы.Добавить();
			СтрокаСозданиеДокументов.Описание = Строка.Описание1;
			
			ЗагружаемаяСтруктура = ДанныеФайлов.Получить(Строка.КлючСтроки);
						
			Если ЗагружаемаяСтруктура.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаWBУведомлениеВыкупа() Тогда
				Если ТаблицаНоменклатураУведомление = Неопределено Тогда
					ТаблицаНоменклатураУведомление = ЗагружаемаяСтруктура.ТаблицаНоменклатура.СкопироватьКолонки();
				КонецЕсли;
				Для Каждого СтрокаНоменклатура Из ЗагружаемаяСтруктура.ТаблицаНоменклатура Цикл
					НоваяСтрока = ТаблицаНоменклатураУведомление.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
				КонецЦикла;					
				Если НастройкиУведомление = Неопределено Тогда
					НастройкиУведомление = ЗагружаемаяСтруктура.НастройкиСопоставленияНоменклатуры;
				КонецЕсли;				
				
			Иначе
				Если ТаблицаНоменклатураОтчет = Неопределено Тогда
					ТаблицаНоменклатураОтчет = ЗагружаемаяСтруктура.ТаблицаНоменклатура.СкопироватьКолонки();
				КонецЕсли;
				Для Каждого СтрокаНоменклатура Из ЗагружаемаяСтруктура.ТаблицаНоменклатура Цикл
					НоваяСтрока = ТаблицаНоменклатураОтчет.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
				КонецЦикла;					
				Если НастройкиОтчет = Неопределено Тогда
					НастройкиОтчет = ЗагружаемаяСтруктура.НастройкиСопоставленияНоменклатуры;
				КонецЕсли;				                                               
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если НЕ ТаблицаНоменклатураОтчет = Неопределено Тогда
		ДобавитьТаблицуДляСопоставленияНоменклатуры(СписокНеСопоставленнойНоменклатуры, ТаблицаНоменклатураОтчет, КонтрагентWB, НастройкиОтчет);
	КонецЕсли;
	
	Если НЕ ТаблицаНоменклатураУведомление = Неопределено Тогда
		ДобавитьТаблицуДляСопоставленияНоменклатуры(СписокНеСопоставленнойНоменклатуры, ТаблицаНоменклатураУведомление, КонтрагентWB, НастройкиУведомление);
	КонецЕсли;
	
	ТаблицаНоменклатура       = Неопределено;
	Настройки                 = Неопределено;
	
	Для Каждого Строка Из ЗагружаемыеФайлыOzon Цикл
		Если Строка.Загружать Тогда
			
			СтрокаСозданиеДокументов = СозданныеДокументы.Добавить();
			СтрокаСозданиеДокументов.Описание = Строка.Описание1;
			
			ЗагружаемаяСтруктура = ДанныеФайлов.Получить(Строка.КлючСтроки);
			
			Если ТаблицаНоменклатура = Неопределено Тогда
				ТаблицаНоменклатура = ЗагружаемаяСтруктура.ТаблицаНоменклатура.СкопироватьКолонки();
			КонецЕсли;
			Для Каждого СтрокаНоменклатура Из ЗагружаемаяСтруктура.ТаблицаНоменклатура Цикл
				НоваяСтрока = ТаблицаНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
			КонецЦикла;					
			Если Настройки = Неопределено Тогда
				Настройки = ЗагружаемаяСтруктура.НастройкиСопоставленияНоменклатуры;
			КонецЕсли;				                                               
		КонецЕсли;		
	КонецЦикла;
	
	Если НЕ ТаблицаНоменклатура = Неопределено Тогда
		ДобавитьТаблицуДляСопоставленияНоменклатуры(СписокНеСопоставленнойНоменклатуры, ТаблицаНоменклатура, КонтрагентOzon, Настройки);
	КонецЕсли;
	
	Возврат СписокНеСопоставленнойНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСопоставленные(ТаблицаНоменклатура, СопоставленнаяНоменклатура)
	
	КоличествоЭлементов = ТаблицаНоменклатура.Количество();
	Если КоличествоЭлементов > 0 Тогда
		Для Индекс = 1 по КоличествоЭлементов Цикл
			СтрокаНоменклатуры = ТаблицаНоменклатура[КоличествоЭлементов - Индекс];
			Если ЗначениеЗаполнено(СопоставленнаяНоменклатура.Получить(СтрокаНоменклатуры.ИД)) Тогда
				ТаблицаНоменклатура.Удалить(СтрокаНоменклатуры);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьТаблицуДляСопоставленияНоменклатуры(СписокСопоставления, ТаблицаНоменклатура, Владелец, НастройкиСопоставленияНоменклатуры)
	
	Если ТаблицаНоменклатура.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ТаблицаНоменклатура.Свернуть("Наименование, Артикул, Штрихкод, ИД, НатуральныйИД, КодМагазина");
	Иначе
		ТаблицаНоменклатура.Свернуть("Наименование, Артикул, Штрихкод, ИД, НатуральныйИД, КодМагазина, СтавкаНДС");
	КонецЕсли;
	СопоставленнаяНоменклатура = НайтиСоотвествиеНоменклатурыПоИД(ТаблицаНоменклатура, Владелец);
	УдалитьСопоставленные(ТаблицаНоменклатура, СопоставленнаяНоменклатура);
	
	МассивНеСопоставленнойНоменклатуры = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаНоменклатура Цикл
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(Владелец,);
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, СтрокаТовара);
		НоменклатураКонтрагента.Идентификатор             = СтрокаТовара.ИД;
		НоменклатураКонтрагента.ИдентификаторНоменклатуры = СтрокаТовара.ИД;
		НоменклатураКонтрагента.ШтрихкодКомбинации        = СтрокаТовара.Штрихкод;
		НоменклатураКонтрагента.ШтрихкодыНоменклатуры     = СтрокаТовара.Штрихкод;
		Если ЗначениеЗаполнено(СтрокаТовара.НатуральныйИД) Тогда
			НоменклатураКонтрагента.ИсторияИдентификаторов.Добавить(СтрокаТовара.НатуральныйИД);
		КонецЕсли;
		МассивНеСопоставленнойНоменклатуры.Добавить(НоменклатураКонтрагента);
	КонецЦикла;
			
	ПараметрыСопоставления = Новый Структура;
	ПараметрыСопоставления.Вставить("НоменклатураКонтрагента", МассивНеСопоставленнойНоменклатуры);
	ПараметрыСопоставления.Вставить("НастройкиСопоставленияНоменклатуры", НастройкиСопоставленияНоменклатуры);
	ПараметрыСопоставления.Вставить("Владелец", Владелец);
	Если МассивНеСопоставленнойНоменклатуры.Количество() > 0 Тогда
		СписокСопоставления.Добавить(ПараметрыСопоставления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоотвествиеНоменклатурыПоИД(ТаблицаНоменклатура, Владелец)

	СопоставлениеНоменклатуры = Новый Соответствие;
	
	ИзмеренияРегистра = Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД.Измерения;
	ТаблицаПараметрЗапроса = Новый ТаблицаЗначений();
	ТаблицаПараметрЗапроса.Колонки.Добавить("ИД", ИзмеренияРегистра.Идентификатор.Тип);
	Для Каждого Элемент Из ТаблицаНоменклатура Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПараметрЗапроса.Добавить(), Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатура", ТаблицаПараметрЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.ИД
	|ПОМЕСТИТЬ ИДНоменклатура
	|ИЗ
	|	&ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	ИДНоменклатура.ИД КАК ИД
	|ИЗ
	|	ИДНоменклатура КАК ИДНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО ИДНоменклатура.ИД = НоменклатураКонтрагентовБЭД.Идентификатор
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Владелец = &Владелец";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.Номенклатура) Тогда
			СопоставлениеНоменклатуры.Вставить(РезультатЗапроса.ИД, РезультатЗапроса.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СопоставлениеНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура НачатьСопоставлениеНоменклатуры(МассивКСопоставлению, Индекс)
	
	ЭлементСопоставления = МассивКСопоставлению[Индекс]; 
	
	ДополнительныеПараметры = Новый Структура("МассивКСопоставлению, Индекс", МассивКСопоставлению, Индекс);
	ОбработчикОповещения = Новый ОписаниеОповещения("СопоставлениеНоменклатурыЗавершение",	ЭтотОбъект, ДополнительныеПараметры);
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
		ЭлементСопоставления.НоменклатураКонтрагента, 
		ЭлементСопоставления.НастройкиСопоставленияНоменклатуры, 
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеНоменклатурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Индекс = ДополнительныеПараметры.Индекс + 1;
	МассивКСопоставлению = ДополнительныеПараметры.МассивКСопоставлению;
	Если МассивКСопоставлению.Количество() > Индекс Тогда
		НачатьСопоставлениеНоменклатуры(МассивКСопоставлению, Индекс);
	Иначе
		НачатьСозданиеДокументов();
	КонецЕсли;		
	
Конецпроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаКлиенте
Процедура НачатьСозданиеДокументов()
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеДокументов();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПрогресса = Новый ОписаниеОповещения("ПриПрогрессеСозданияДокументов", ЭтотОбъект);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОбработчикПрогресса;
	
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеСозданиеДокументов()
	
	Если НЕ ЗначениеЗаполнено(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МаркетплейсыЗагрузкаФайлов", "СпособСверткиОтчетов", СпособСверткиОтчетов);
	
	СписокЗагрузки = Новый Массив;
		
	Для Каждого Строка Из ЗагружаемыеФайлыWB Цикл
		Если Строка.Загружать Тогда
			ЗагружаемаяСтруктура = ДанныеФайлов.Получить(Строка.КлючСтроки);
						
			Если ЗагружаемаяСтруктура.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаWBУведомлениеВыкупа() Тогда
				СворачиваемыеКолонки = "Наименование,Артикул,ИД,НатуральныйИД,СтавкаНДС,ШтрихКод,КодМагазина";
				СуммируемыеКолонки = "Количество,Сумма,СуммаНДС";
			Иначе
				СворачиваемыеКолонки = "Наименование,Артикул,ИД,НатуральныйИД,ВидДвижения,ТипДокумента,КодСтраны,НазваниеСтраны,ШтрихКод,КодМагазина,ДатаПродажи";
				СуммируемыеКолонки = "Количество,Сумма,КоличествоВозврат,СуммаВозврат";
			КонецЕсли;
			
			Если СпособСверткиОтчетов = "Сворачивать" Тогда
				Если НЕ (ЗагружаемаяСтруктура.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаWBУведомлениеВыкупа()
					ИЛИ ЗагружаемаяСтруктура.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzonВыкуп()) Тогда 
					ОбработатьДатуПродажи(ЗагружаемаяСтруктура.ДанныеДокумента.ТаблицаТоваров);
				КонецЕсли;
				ЗагружаемаяСтруктура.ДанныеДокумента.ТаблицаТоваров.Свернуть(СворачиваемыеКолонки, СуммируемыеКолонки);
			КонецЕсли;
			
			ДобавитьПолучателяВСтруктуру(ЗагружаемаяСтруктура.ДанныеДокумента, Организация);
			
			Если ЗначениеЗаполнено(Строка.Документ) Тогда
				ЗагружаемаяСтруктура.ДанныеДокумента.Вставить("Ссылка", Строка.Документ);
			КонецЕсли;
			
			СписокЗагрузки.Добавить(ЗагружаемаяСтруктура);
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Строка Из ЗагружаемыеФайлыOzon Цикл
		Если Строка.Загружать Тогда
			ЗагружаемаяСтруктура = ДанныеФайлов.Получить(Строка.КлючСтроки);
			
			Если ЗагружаемаяСтруктура.ВидДокумента = ЭлектронноеВзаимодействиеБП.ВидДокументаОтчетOzonВыкуп() Тогда
				СворачиваемыеКолонки = "Наименование,Артикул,ИД,НатуральныйИД,СтавкаНДС,ШтрихКод,КодМагазина";
				СуммируемыеКолонки = "Количество,Сумма,СуммаНДС";
			Иначе
				СворачиваемыеКолонки = "Наименование,Артикул,ИД,НатуральныйИД,ВидДвижения,ТипДокумента,КодСтраны,НазваниеСтраны,ШтрихКод,КодМагазина,ДатаПродажи";
				СуммируемыеКолонки = "Количество,Сумма,КоличествоВозврат,СуммаВозврат,Доплата,ДоплатаВозврат";
			КонецЕсли;
			
			Если СпособСверткиОтчетов = "Сворачивать" Тогда
				ЗагружаемаяСтруктура.ДанныеДокумента.ТаблицаТоваров.Свернуть(СворачиваемыеКолонки, СуммируемыеКолонки);
			КонецЕсли;
			
			ДобавитьПолучателяВСтруктуру(ЗагружаемаяСтруктура.ДанныеДокумента, Организация);
						
			Если ЗначениеЗаполнено(Строка.Документ) Тогда
				ЗагружаемаяСтруктура.ДанныеДокумента.Вставить("Ссылка", Строка.Документ);
			КонецЕсли;
			
			СписокЗагрузки.Добавить(ЗагружаемаяСтруктура);
		КонецЕсли;		
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание документов по отчетам маркетплейса'");
	АдресХранилищаДокументы = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"ЭлектронноеВзаимодействиеБП.СоздатьДокументыИзСтруктуры",
		СписокЗагрузки, АдресХранилищаДокументы);
	
	Возврат ФоновоеЗадание;
		
КонецФункции

&НаКлиенте
Процедура ПослеСозданияДокументов(Задание, Контекст) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеЗагрузки.Видимость = Ложь;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Созданные документы'");
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	
	ПослеСозданияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеСозданияДокументовНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
	СозданныеДокументы.Очистить();
	
	ДанныеДокументов = ПолучитьИзВременногоХранилища(АдресХранилищаДокументы);
	Если ТипЗнч(ДанныеДокументов) = Тип("Массив") Тогда
		Для Каждого Документ Из ДанныеДокументов Цикл
			НоваяСтрока = СозданныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Документ);
			Если Не ЗначениеЗаполнено(НоваяСтрока.ТекстОшибки) Тогда
				НоваяСтрока.Ссылка = Документ.СозданДокумент;
				НоваяСтрока.Картинка = 1;
			Иначе
				НоваяСтрока.Картинка = 6;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСостояниеФайлов(ПомещенныеФайлы)
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		Если ПомещенныйФайл.ПомещениеФайлаОтменено Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = НайтиФайлПоИдентификатору(ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла);
		
		Если Файл = Неопределено Тогда
			Файл = ДобавитьФайл(
				ПомещенныйФайл.СсылкаНаФайл.Имя,
				ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла,
				ПомещенныйФайл.СсылкаНаФайл.Расширение
			);
		КонецЕсли;
		
		Файл.Адрес = ПомещенныйФайл.Адрес;
		
	КонецЦикла;
	
	Элементы.ГруппаФайлы.Заголовок = СтрШаблон(НСтр("ru='Файлы (%1)'"), Формат(Файлы.Количество(), "ЧН=0"));
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьФайл(Имя, ИдентификаторФайла, Расширение)
	
	НовыйФайл = Файлы.Добавить();
	НовыйФайл.Наименование = Имя;
	НовыйФайл.ИдентификаторФайла = ИдентификаторФайла;
	НовыйФайл.Расширение = Расширение;
	НовыйФайл.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Возврат НовыйФайл;
	
КонецФункции

&НаКлиенте
Процедура ПерерисоватьФайлыПоСостоянию()
	
	ЕстьЗагруженныеФайлы = (Файлы.Количество() > 0);
	
	Если ВыполняетсяЗагрузка Или ЕстьЗагруженныеФайлы Тогда
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.Список;
		Элементы.ДобавитьВСписок.Видимость = Ложь;
		Элементы.ГруппаПодсказка.Видимость = Ложь;
	Иначе
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.ПредложениеПеретащить;
		Элементы.ГруппаПодсказка.Видимость = Истина;
	КонецЕсли;
	
	Элементы.СостояниеЗагрузки.Видимость = ВыполняетсяЗагрузка;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловДляЗагрузки()
	
	Если НЕ ВыполняетсяЗагрузка И Файлы.Количество() > 0 Тогда
		
		WB   = Маркетплейс = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.Wildberries");
		Ozon = Маркетплейс = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.OZON");
			
		Если (WB И ЗагружаемыеФайлыWB.Количество() = 0)
			ИЛИ (Ozon И ЗагружаемыеФайлыOzon.Количество() = 0) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Среди выбранных файлов нет подходящих для загрузки.'"));
			Элементы.ФайлыОписание.Видимость = Истина;
			Элементы.ДобавитьВСписок.Видимость = Истина;
			Элементы.ГруппаПодсказка.Видимость = Истина;

		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция НайтиФайлПоИдентификатору(ИдентификаторФайла)
	
	НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("ИдентификаторФайла", ИдентификаторФайла));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПриПрогрессеРазбораФайлов(Результат, Контекст) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСообщенияЗагрузки = Прогресс.Текст;
			ПрогрессЗагрузки = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПрогрессеСозданияДокументов(Результат, Контекст) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСообщенияЗагрузки = Прогресс.Текст;
			ПрогрессЗагрузки = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Если ЗначениеЗаполнено(Форма.Маркетплейс) Тогда
		ЭтоWB   = Форма.Маркетплейс = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.Wildberries");
		ЭтоOzon = Форма.Маркетплейс = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.OZON");
		
		Форма.Заголовок = ?(ЭтоWB, НСтр("ru='Загрузка отчетов Wildberries'"), НСтр("ru='Загрузка отчетов Ozon'"));
		
		Элементы.ДекорацияПодсказакаWB.Видимость = ЭтоWB;
		Элементы.ДекорацияПодсказкаOzon.Видимость = ЭтоOzon;
		
		Элементы.ГруппаМаркетплейсы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаWildberries.Видимость = ЭтоWB;
		Элементы.ГруппаOZON.Видимость = ЭтоOzon;
		
		Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = ?(ЭтоWB, Элементы.ГруппаWildberries, Элементы.ГруппаOZON);
		
		ЕстьРазобранныеФайлы = (ЭтоWB И Форма.ЗагружаемыеФайлыWB.Количество() > 0)
			ИЛИ (ЭтоOzon И Форма.ЗагружаемыеФайлыOzon.Количество() > 0);
		
	Иначе
		
		Если Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = Элементы.ГруппаWildberries
			И Форма.ЗагружаемыеФайлыWB.Количество() = 0
			И Форма.ЗагружаемыеФайлыOzon.Количество() > 0 Тогда
		
			Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = Элементы.ГруппаOZON;
		
		ИначеЕсли Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = Элементы.ГруппаOZON
			И Форма.ЗагружаемыеФайлыWB.Количество() > 0
			И Форма.ЗагружаемыеФайлыOzon.Количество() = 0 Тогда
		
			Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = Элементы.ГруппаWildberries;
		
		КонецЕсли;
		
		ЕстьРазобранныеФайлы = Форма.ЗагружаемыеФайлыWB.Количество() > 0
			ИЛИ Форма.ЗагружаемыеФайлыOzon.Количество() > 0;
	
	КонецЕсли;
		
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ЕстьРазобранныеФайлы, Элементы.ГруппаСозданиеДокументов, Элементы.ГруппаФайлы );
	Элементы.ГруппаНастройки.Видимость      = ЕстьРазобранныеФайлы;
	Элементы.ФормаЗагрузить.Видимость       = ЕстьРазобранныеФайлы;
	
	Элементы.КонтрагентWB.Видимость = Ложь;
	Элементы.КонтрагентOzon.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Видимость колонок для отображения заголовков
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBЗагружать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBОписание1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBОписание2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBДокументПредставление2");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыWB.ТекстЗаголовка", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBТекстЗаголовка");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыWB.ТекстЗаголовка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonЗагружать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonОписание1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonОписание2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonДокументПредставление2");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыOzon.ТекстЗаголовка", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonТекстЗаголовка");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыOzon.ТекстЗаголовка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СозданныеДокументыТекстОшибки");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "СозданныеДокументы.ТекстОшибки", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
		
	//Представление документа ИБ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
    КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыWBДокумент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыWB.Документ", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",  Новый ПолеКомпоновкиДанных("ЗагружаемыеФайлыWB.ДокументПредставление1"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
    КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonДокумент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыOzon.Документ", ВидСравненияКомпоновкиДанных.НеЗаполнено);
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",  Новый ПолеКомпоновкиДанных("ЗагружаемыеФайлыOzon.ДокументПредставление1"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗамещаемогоДокумента(Таблица, ЭлементФормы)
	
	НайденыДокументы = Ложь;
	Для Каждого Строка Из Таблица Цикл
		Если ЗначениеЗаполнено(Строка.Документ) Тогда
			НайденыДокументы = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	ЭлементФормы.Видимость = НайденыДокументы;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателяВСтруктуру(ДанныеДокумента, Организация)
	
	Если ДанныеДокумента.Свойство("Получатель") 
		И ТипЗнч(ДанныеДокумента.Получатель) = Тип("Структура") Тогда
		ДанныеДокумента.Получатель.Вставить("Ссылка", Организация);
	Иначе
		Получатель = Новый Структура;
		Получатель.Вставить("Ссылка", Организация);
		ДанныеДокумента.Вставить("Получатель", Получатель);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьДатуПродажи(ТаблицаТоваров)
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		Если СтрокаТовара.ВидДвижения <> "Возврат"
			И СтрокаТовара.ВидДвижения <> "Сторно продаж" Тогда
			СтрокаТовара.ДатаПродажи = Дата(1,1,1);
		КонецЕсли;		
	КонецЦикла	
	
КонецПроцедуры
	
#КонецОбласти




