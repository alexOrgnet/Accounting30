
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормаОткрытаОтдельнойЗакладкой = Параметры.ОткрыватьВНовойЗакладке;
	
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации = Новый Массив;
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);

	Если Параметры.Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Организация = Параметры.Организация;
	КонецЕсли;
	
	ВосстановитьНастройкиФормы();
	
	ОбновитьМониторНаСервере();
	УправлениеФормой(ЭтотОбъект);
		
	Если ФормаОткрытаОтдельнойЗакладкой Тогда
		МониторАктуален = Ложь;
		ДлительнаяОперацияПриОткрытии = ОбновитьДанныеМонитора("ОбновитьПриОткрытии", Ложь, Истина);
	Иначе
		// Показываем пользователю последние, неактульные данные.
		// Обработчик ожидания позже обновит данные.
		МониторАктуален = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Заголовок = НСтр("ru='Анализ'");
	КонецЕсли;
	
	СброситьРазмерыИПоложениеОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ФормаОткрытаОтдельнойЗакладкой Тогда
		ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперацияПриОткрытии);
		ДлительнаяОперацияПриОткрытии = Неопределено;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере("ОбновитьПриИзмененииОрганизации");
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	СформироватьРезультатДляПечати();
	
	Если РегистрироватьБизнесСтатистику() Тогда
		ЗаписатьОперациюБизнесСтатистики("Печать");
	КонецЕсли;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.АвтоМасштаб = Истина;
	
	Результат.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	Если РегистрироватьБизнесСтатистику() Тогда
		ЗаписатьОперациюБизнесСтатистики("ОтправитьПоЭлектроннойПочте");
	КонецЕсли;
	
	ТемаПисьма = СтрШаблон(НСтр("ru='Монитор основных показателей, %1'"), 
		ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(ДатаПоследнегоОбновленияМонитора));
		
	СформироватьРезультатДляПечати();
	
	Результат.ОтображатьСетку = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Тема", ТемаПисьма);
	ДополнительныеПараметры.Вставить("ИмяФайла", ТемаПисьма);
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	СформироватьРезультатДляПечати();
	
	Результат.ОтображатьСетку = Ложь;
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредств(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("ОстаткиДенежныхСредств", 0);
	
	ГруппировкаОтчета = Новый Массив;
	ДобавитьГруппировку(ГруппировкаОтчета, "Организация", "Организация", Ложь, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "Подразделение", "Подразделение", Ложь, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "ВидДенежныхСредств", "Вид денежных средств", Истина, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "Размещение", "Размещение", Истина, 0);
	
	Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеКоэффициенты(Команда)
	
	Расшифровка = СтруктураРасшифровкиФинансовыйАнализНаСервере();
	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьЗапасов(Команда)
	
	Расшифровка = СтруктураРасшифровкиСтоимостьЗапасовНаСервере();
	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗалежалыйТовар(Команда)
	
	Расшифровка = СтруктураРасшифровкиСтоимостьЗапасовПоСрокуХраненияНаСервере();
	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеЗаголовок1(Команда)
	
	ОткрытьОтчетСПорядком("ПоступлениеДенежныхСредств", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеЗаголовок2(Команда)
	
	ОткрытьОтчетСПорядком("ПоступлениеДенежныхСредств", 2);

КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеЗаголовок3(Команда)
	
	ОткрытьОтчетСПорядком("ПоступлениеДенежныхСредств", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеЗаголовок4(Команда)
	
	ОткрытьОтчетСПорядком("ПоступлениеДенежныхСредств", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходЗаголовок1(Команда)
	
	ОткрытьОтчетСПорядком("РасходДенежныхСредств", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходЗаголовок2(Команда)
	
	ОткрытьОтчетСПорядком("РасходДенежныхСредств", 2);

КонецПроцедуры

&НаКлиенте
Процедура РасходЗаголовок3(Команда)
	
	ОткрытьОтчетСПорядком("РасходДенежныхСредств", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходЗаголовок4(Команда)
	
	ОткрытьОтчетСПорядком("РасходДенежныхСредств", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиЗаголовок1(Команда)
	
	ОткрытьОтчетСПорядком("ПродажиПоКонтрагентам", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиЗаголовок2(Команда)
	
	ОткрытьОтчетСПорядком("ПродажиПоКонтрагентам", 2);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиЗаголовок3(Команда)
	
	ОткрытьОтчетСПорядком("ПродажиПоКонтрагентам", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиЗаголовок4(Команда)
	
	ОткрытьОтчетСПорядком("ПродажиПоКонтрагентам", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаголовок1(Команда)
	
	ОткрытьОтчетСПорядком("Доходы", 1, ГруппировкаОтчетаДоходы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаголовок2(Команда)
	
	ОткрытьОтчетСПорядком("Доходы", 2, ГруппировкаОтчетаДоходы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаголовок3(Команда)
	
	ОткрытьОтчетСПорядком("Доходы", 3, ГруппировкаОтчетаДоходы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаголовок4(Команда)
	
	ОткрытьОтчетСПорядком("Доходы", 4, ГруппировкаОтчетаДоходы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПокупателей(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("ЗадолженностьПокупателей", 0);
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗадолженность("Покупатель");
	
	Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикам(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("ЗадолженностьПоставщикам", 0);
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗадолженность("Поставщик");

	Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	ОткрытьОтчет(Расшифровка);

КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПокупателей(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("ПросроченнаяЗадолженностьПокупателей", 0);
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗадолженность("Покупатель");
		
	Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПоставщикам(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("ПросроченнаяЗадолженностьПоставщикам", 0);
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗадолженность("Поставщик");
	
	Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПокупателей(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("НеоплаченныеСчетаПокупателям", 0);
	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура НеоплаченныеСчетаПоставщикам(Команда)
	
	Расшифровка = СтруктураРасшифровкиНаСервере("НеоплаченныеСчетаПоставщиков", 0);
	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокРазделов",                             СписокРазделов);
	ПараметрыФормы.Вставить("ВариантОкругления",                          ВариантОкругления);
	ПараметрыФормы.Вставить("СравниватьСПрошлымПериодом",                 СравниватьСПрошлымПериодом);
	ПараметрыФормы.Вставить("СрокХраненияТоваров",                        СрокХраненияТоваров);
	ПараметрыФормы.Вставить("ПоказыватьОборотыЗаТекущийМесяц",	          ПоказыватьОборотыЗаТекущийМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыЗаПрошлыйМесяц",	          ПоказыватьОборотыЗаПрошлыйМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыСНачалаГодаПоТекущийМесяц", ПоказыватьОборотыСНачалаГодаПоТекущийМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц", ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаМонитораОсновныхПоказателей" , ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ГруппировкаОтчетаДоходы()
	
	ГруппировкаОтчета = Новый Массив;
	ДобавитьГруппировку(ГруппировкаОтчета, "Вид", "Показатель", Истина, 0);
	
	Возврат ГруппировкаОтчета;
	
КонецФункции

&НаКлиенте
Функция ГруппировкаОтчетаЗадолженность(ПредставлениеКонтрагента)
	
	ГруппировкаОтчета = Новый Массив;
	
	ДобавитьГруппировку(ГруппировкаОтчета, "Контрагент", ПредставлениеКонтрагента, Истина, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "Договор", "Договор", Ложь, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "Документ", "Документ", Ложь, 0);
	
	Возврат ГруппировкаОтчета;
	
КонецФункции

&НаСервере
Функция ГруппировкаОтчетаЗапасы(ИмяГруппировки)

	ГруппировкаОтчета = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ДобавитьГруппировку(ГруппировкаОтчета, "Организация", "Организация", Истина, 0);
	КонецЕсли;
	ДобавитьГруппировку(ГруппировкаОтчета, ИмяГруппировки, ИмяГруппировки, Истина, 0);
	ДобавитьГруппировку(ГруппировкаОтчета, "Номенклатура", "Номенклатура", Истина, 0);

	Возврат ГруппировкаОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьГруппировку(ГруппировкаОтчета, Поле, Представление, Использование, ТипГруппировки)
	
	ПараметрыГруппировки = Новый Структура("Поле, Представление, Использование, ТипГруппировки",
		Поле, Представление, Использование, ТипГруппировки);
	ГруппировкаОтчета.Добавить(ПараметрыГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультатДляПечати()
	
	Результат.Очистить();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ТекущаяДата = ДатаСеанса;
	
	Если Не МониторАктуален Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("МониторОсновныхПоказателей");

	ОбластьШапкаМонитора = Макет.ПолучитьОбласть("ШапкаМонитора");
	ОбластьРазделительБлоковБезЧерты = Макет.ПолучитьОбласть("ОбластьРазделительБлоковБезЧерты");
	ОбластьРазделительБлоковСЧертой = Макет.ПолучитьОбласть("ОбластьРазделительБлоковСЧертой");
	
	ОрганизацияДляПечати = НСтр("ru = 'По всем организациям'");
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияДляПечати = Организация;
	КонецЕсли;
	
	ДатаОбновленияМонитораСтрокой = ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(
		ДатаПоследнегоОбновленияМонитора);
	
	ОбластьШапкаМонитора.Параметры.Организация = ОрганизацияДляПечати;
	ОбластьШапкаМонитора.Параметры.Сегодня = ДатаОбновленияМонитораСтрокой;
	Результат.Вывести(ОбластьШапкаМонитора);
	Результат.Вывести(ОбластьРазделительБлоковБезЧерты);
	
	ЭтоПервыйРаздел = Истина;
	
	Для Каждого ВыбранныйРаздел Из СписокРазделов Цикл
		
		Если Не ВыбранныйРаздел.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПервыйРаздел Тогда
			ЭтоПервыйРаздел = Ложь;
		Иначе
			Результат.Вывести(ОбластьРазделительБлоковСЧертой);
		КонецЕсли;

		Если ВыбранныйРаздел.Значение = "ДенежныеСредства" Тогда
			
			ВывестиРазделДенежныеСредства(Макет);
			
		ИначеЕсли ВыбранныйРаздел.Значение = "ВзаимоотношенияСКонтрагентами" Тогда
			
			ВывестиРазделВзаимоотношенияСКонтрагентами(Макет);
			
		ИначеЕсли ВыбранныйРаздел.Значение = "ПродажиИСклад" Тогда
			
			ВывестиРазделПродажиИСклад(Макет);
			
		ИначеЕсли ВыбранныйРаздел.Значение = "ДоходыРасходыИПрибыль" Тогда
			
			ВывестиРазделДоходыРасходыИПрибыль(Макет);
			
		КонецЕсли;
		
	КонецЦикла;

	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

&НаСервере
Функция МаксимальноеКоличествоРазделов()
	
	Возврат 4;
	
КонецФункции

&НаСервере
Процедура ВывестиРазделДенежныеСредства(Макет)
	
	// Заголовок раздела
	ОбластьЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = НСтр("ru = 'Денежные средства'");
	ОбластьЗаголовокРаздела.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Результат.Вывести(ОбластьЗаголовокРаздела);
	
	// Остатки денежных средств
	
	ОбластьРаздела = Макет.ПолучитьОбласть("ОбластьДенежныеСредства");
	ОбластьРаздела.Параметры.ОбщийОстаток = ОбщийОстатокДенежныхСредств;
	ОбластьРаздела.Параметры.ОстатокВБанке = ОстатокВБанке;
	ОбластьРаздела.Параметры.ОстатокВКассе = ОстатокВКассе;
	
	ТекущаяСтрока = 1;
	
	Разделы = Новый Массив;
	Разделы.Добавить("Поступление");
	Разделы.Добавить("Расход");

	Если СравниватьСПрошлымПериодом Тогда
		ОбластьРаздела.Параметры.ГодНазад = НСтр("ru = 'Год назад'");
	Иначе
		ОбластьРаздела.Параметры.ГодНазад = "";
	КонецЕсли;

	Для Порядок = 1 По МаксимальноеКоличествоРазделов() Цикл
		
		ЗаголовокСтроки = ПредставлениеДатыПоПорядкуРаздела(Порядок);
		
		НеВыводитьРаздел = Порядок = 1 И Не ПоказыватьОборотыЗаТекущийМесяц
			Или Порядок = 2 И Не  ПоказыватьОборотыСНачалаГодаПоТекущийМесяц
			Или Порядок = 3 И Не ПоказыватьОборотыЗаПрошлыйМесяц
			Или Порядок = 4 И Не ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц;
		
		Если НеВыводитьРаздел Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Раздел Из Разделы Цикл
			ИдентификаторыСтроки = ИдентификаторыСтрокиДляПечати(Раздел, Порядок, ТекущаяСтрока);
			ОбластьРаздела.Параметры[ИдентификаторыСтроки.ПараметрыОбласти.Заголовок] = ЗаголовокСтроки;
			ЗаполнитьСтрокуРаздела(ОбластьРаздела, ИдентификаторыСтроки, Раздел = "Расход");
		КонецЦикла;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;

	КонецЦикла;
	
	Если ТекущаяСтрока <= МаксимальноеКоличествоРазделов() Тогда
		
		Для Каждого Раздел Из Разделы Цикл
			ОчиститьПараметрыРаздела(ОбластьРаздела, Раздел, ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;

	Результат.Вывести(ОбластьРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВзаимоотношенияСКонтрагентами(Макет)
	
	// Заголовок раздела
	ОбластьЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = НСтр("ru = 'Взаимоотношения с контрагентами'");
	ОбластьЗаголовокРаздела.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Результат.Вывести(ОбластьЗаголовокРаздела);
	
	ОбластьРаздела = Макет.ПолучитьОбласть("ОбластьВзаимоотношенияСКонтрагентами");
	
	Разделы = Новый Массив;
	Разделы.Добавить("ЗадолженностьПокупателей");
	Разделы.Добавить("ЗадолженностьПоставщикам");
	Разделы.Добавить("ПросроченнаяЗадолженностьПокупателей");
	Разделы.Добавить("ПросроченнаяЗадолженностьПоставщикам");
	Разделы.Добавить("НеоплаченныеСчетаПокупателям");
	Разделы.Добавить("НеоплаченныеСчетаПоставщиков");

	Если СравниватьСПрошлымПериодом Тогда
		ОбластьРаздела.Параметры.ГодНазад = НСтр("ru = 'Год назад'");
	Иначе
		ОбластьРаздела.Параметры.ГодНазад = "";
	КонецЕсли;

	Для Каждого Раздел Из Разделы Цикл
		ИдентификаторыПолей = ИдентификаторыСтрокиДляПечати(Раздел);
		ЗаполнитьСтрокуРаздела(ОбластьРаздела, ИдентификаторыПолей);
	КонецЦикла;

	ОбластьРаздела.Параметры.КоэффициентСоотношенияЗадолженностей = ЗадолженностьКоэффициентСоотношенияНаСегодня;
	ОбластьРаздела.Параметры.КоэффициентСоотношенияЗадолженностейОтклонение = 
		ПредставлениеОтклонения(ЗадолженностьКоэффициентСоотношенияОтклонение);

	Если Окр(ЗадолженностьКоэффициентСоотношенияОтклонение, 0) = 0 Тогда
		ОбластьРаздела.Рисунки.КоэффициентСоотношенияЗадолженностей_Стрелка.Картинка = БиблиотекаКартинок.Пустая;
	Иначе
		
		КартинкаСтрелка = КраснаяСтрелкаВниз();
		Если ЗадолженностьКоэффициентСоотношенияОтклонение > 0 Тогда
			КартинкаСтрелка =  ЗеленаяСтрелкаВверх();
		КонецЕсли;
		
		ОбластьРаздела.Рисунки.КоэффициентСоотношенияЗадолженностей_Стрелка.Картинка = КартинкаСтрелка;

	КонецЕсли;
	
	НижняяГраницаДопустимогоЗначенияКоэффициента = 0.9;
	ВерхняяГраницаДопустимогоЗначенияКоэффициента = 2;
	
	Если ЗадолженностьКоэффициентСоотношенияНаСегодня >= НижняяГраницаДопустимогоЗначенияКоэффициента
		И ЗадолженностьКоэффициентСоотношенияНаСегодня <= ВерхняяГраницаДопустимогоЗначенияКоэффициента Тогда
		ОбластьРаздела.Параметры.КоэффициентСоотношенияЗадолженностейОписание = КоэффициентБолее09ИМенее2();
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветФона = ЦветаСтиля.ЦветФонаПоложительногоЗначения;
	ИначеЕсли ЗадолженностьКоэффициентСоотношенияНаСегодня < НижняяГраницаДопустимогоЗначенияКоэффициента Тогда
		ОбластьРаздела.Параметры.КоэффициентСоотношенияЗадолженностейОписание = КоэффициентМенее09();
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
	ИначеЕсли ЗадолженностьКоэффициентСоотношенияНаСегодня > ВерхняяГраницаДопустимогоЗначенияКоэффициента Тогда
		ОбластьРаздела.Параметры.КоэффициентСоотношенияЗадолженностейОписание = КоэффициентБолее2();
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		ОбластьРаздела.Области.ПолеКоэффициент.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
	КонецЕсли;
	
	Результат.Вывести(ОбластьРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделПродажиИСклад(Макет)
	
	// Заголовок раздела
	ОбластьЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = НСтр("ru = 'Продажи и склад'");
	ОбластьЗаголовокРаздела.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Результат.Вывести(ОбластьЗаголовокРаздела);
	
	ОбластьРаздела = Макет.ПолучитьОбласть("ОбластьПродажиИСклад");
	ОбластьРаздела.Параметры.СтоимостьЗапасов = СтоимостьЗапасов;
	ОбластьРаздела.Параметры.ЗалежалыйТовар = ЗалежалыйТовар;
	ОбластьРаздела.Параметры.СрокХраненияТоваров = СрокХраненияТоваров;
	
	ТекущаяСтрока = 1;
	
	Если СравниватьСПрошлымПериодом Тогда
		ОбластьРаздела.Параметры.ГодНазад = НСтр("ru = 'Год назад'");
	Иначе
		ОбластьРаздела.Параметры.ГодНазад = "";
	КонецЕсли;

	Для Порядок = 1 По МаксимальноеКоличествоРазделов() Цикл
		
		НеВыводитьРаздел = Порядок = 1 И Не ПоказыватьОборотыЗаТекущийМесяц
			Или Порядок = 2 И Не  ПоказыватьОборотыСНачалаГодаПоТекущийМесяц
			Или Порядок = 3 И Не ПоказыватьОборотыЗаПрошлыйМесяц
			Или Порядок = 4 И Не ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц;
		
		Если НеВыводитьРаздел Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторыПолей = ИдентификаторыСтрокиДляПечати("Продажи", Порядок, ТекущаяСтрока);
		ОбластьРаздела.Параметры[ИдентификаторыПолей.ПараметрыОбласти.Заголовок] = ПредставлениеДатыПоПорядкуРаздела(Порядок);
		ЗаполнитьСтрокуРаздела(ОбластьРаздела, ИдентификаторыПолей);
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <= МаксимальноеКоличествоРазделов() Тогда
		
		ОчиститьПараметрыРаздела(ОбластьРаздела, "Продажи", ТекущаяСтрока);
		
	КонецЕсли;
	
	Результат.Вывести(ОбластьРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрыРаздела(Область, ИмяРаздела, ТекущаяСтрока)
	
	Пока ТекущаяСтрока <= МаксимальноеКоличествоРазделов() Цикл
		
		ИдентификаторыПолей = ИдентификаторыСтрокиДляПечати(ИмяРаздела, Неопределено, ТекущаяСтрока);
		
		ПараметрыОбласти = ИдентификаторыПолей.ПараметрыОбласти;
	
		Область.Параметры[ПараметрыОбласти.Заголовок] = "";
		Область.Параметры[ПараметрыОбласти.СуммаНаСегодня] = "";
		Область.Параметры[ПараметрыОбласти.СуммаГодНазад] = "";
		Область.Параметры[ПараметрыОбласти.Отклонение] = "";
		Область.Рисунки[ПараметрыОбласти.Стрелка].Картинка = БиблиотекаКартинок.Пустая;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиРазделДоходыРасходыИПрибыль(Макет)
	
	// Заголовок раздела
	ОбластьЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = НСтр("ru = 'Доходы, расходы и прибыль'");
	ОбластьЗаголовокРаздела.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Результат.Вывести(ОбластьЗаголовокРаздела);
	
	ОбластьШапкаРаздела = Макет.ПолучитьОбласть("ОбластьДоходыРасходыИПрибыльШапка");
	
	Если СравниватьСПрошлымПериодом Тогда
		ОбластьШапкаРаздела.Параметры.ГодНазад = НСтр("ru = 'Год назад'");
	Иначе
		ОбластьШапкаРаздела.Параметры.ГодНазад = "";
	КонецЕсли;
	
	Результат.Вывести(ОбластьШапкаРаздела);

	Разделы = Новый Массив;
	Разделы.Добавить("Доходы");
	Разделы.Добавить("Расходы");
	Разделы.Добавить("Прибыль");

	Для Порядок = 1 По МаксимальноеКоличествоРазделов() Цикл
		
		НеВыводитьРаздел = Порядок = 1 И Не ПоказыватьОборотыЗаТекущийМесяц
			Или Порядок = 2 И Не  ПоказыватьОборотыСНачалаГодаПоТекущийМесяц
			Или Порядок = 3 И Не ПоказыватьОборотыЗаПрошлыйМесяц
			Или Порядок = 4 И Не ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц;
		
		Если НеВыводитьРаздел Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ОбластьСтроки = Макет.ПолучитьОбласть("ОбластьДоходыРасходыИПрибыльСтрока");
		
		ОбластьСтроки.Параметры.Доходы_Заголовок = ПредставлениеДатыПоПорядкуРаздела(Порядок);
		
		Для Каждого Раздел Из Разделы Цикл
			ИдентификаторыПолей = ИдентификаторыСтрокиДляПечати(Раздел, Порядок);
			ЗаполнитьСтрокуРаздела(ОбластьСтроки, ИдентификаторыПолей, Раздел = "Расходы");
		КонецЦикла;
		
		Результат.Вывести(ОбластьСтроки);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторыСтрокиДляПечати(ИмяРаздела, Порядок = "", ТекущаяСтрока = "")
	
	ПараметрыОбласти = Новый Структура;
	ПараметрыОбласти.Вставить("СуммаНаСегодня", СтрШаблон("%1_СуммаНаСегодня%2", ИмяРаздела, ТекущаяСтрока));
	ПараметрыОбласти.Вставить("Заголовок",      СтрШаблон("%1_Заголовок%2", ИмяРаздела, ТекущаяСтрока));
	
	АдресаДанных = Новый Структура;
	АдресаДанных.Вставить("СуммаНаСегодня", СтрШаблон("%1НаСегодня%2", ИмяРаздела, Порядок));
	Если ИмяРаздела <> "НеоплаченныеСчетаПокупателям"
		И ИмяРаздела <> "НеоплаченныеСчетаПоставщиков" Тогда

		ПараметрыОбласти.Вставить("СуммаГодНазад",  СтрШаблон("%1_СуммаГодНазад%2", ИмяРаздела, ТекущаяСтрока));
		ПараметрыОбласти.Вставить("Отклонение",     СтрШаблон("%1_Отклонение%2", ИмяРаздела, ТекущаяСтрока));
		ПараметрыОбласти.Вставить("Стрелка",        СтрШаблон("%1_Стрелка%2", ИмяРаздела, ТекущаяСтрока));

		АдресаДанных.Вставить("СуммаГодНазад",  СтрШаблон("%1ГодНазад%2", ИмяРаздела, Порядок));
		АдресаДанных.Вставить("Отклонение",     СтрШаблон("%1Отклонение%2", ИмяРаздела, Порядок));
	КонецЕсли;
	
	ИдентификаторыОбласти = Новый Структура;
	ИдентификаторыОбласти.Вставить("ПараметрыОбласти", ПараметрыОбласти);
	ИдентификаторыОбласти.Вставить("АдресаДанных", АдресаДанных);

	Возврат ИдентификаторыОбласти;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуРаздела(Область, ИдентификаторыПолей, ЭтоРасход = Ложь)
	
	ПараметрыОбласти =  ИдентификаторыПолей.ПараметрыОбласти;
	АдресаДанных = ИдентификаторыПолей.АдресаДанных;
	
	СуммаНаСегодня = ЭтотОбъект[АдресаДанных.СуммаНаСегодня];
	Область.Параметры[ПараметрыОбласти.СуммаНаСегодня] = Формат(СуммаНаСегодня, ФорматСуммы());
	
	Если АдресаДанных.Свойство("СуммаГодНазад") Тогда
		ЗаполнитОтклоненияСтрокиРаздела(Область, ПараметрыОбласти, АдресаДанных, ЭтоРасход);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитОтклоненияСтрокиРаздела(Область, ПараметрыОбласти, АдресаДанных, ЭтоРасход)

	СуммаГодНазад =  ЭтотОбъект[АдресаДанных.СуммаГодНазад];
	Отклонение = Окр(ЭтотОбъект[АдресаДанных.Отклонение], 0);

	Если  СравниватьСПрошлымПериодом И Отклонение <> 0 Тогда
		Область.Параметры[ПараметрыОбласти.СуммаГодНазад] = Формат(СуммаГодНазад, ФорматСуммы());
		Область.Параметры[ПараметрыОбласти.Отклонение] = ПредставлениеОтклонения(Отклонение);
		
		Если ЭтоРасход Тогда
			КартинкаСтрелка = ЗеленаяСтрелкаВниз();
			Если Отклонение > 0 Тогда
				КартинкаСтрелка = КраснаяСтрелкаВверх();
			КонецЕсли;
		Иначе
			КартинкаСтрелка = КраснаяСтрелкаВниз();
			Если Отклонение > 0 Тогда
				КартинкаСтрелка = ЗеленаяСтрелкаВверх();
			КонецЕсли;
		КонецЕсли;
		
		Область.Рисунки[ПараметрыОбласти.Стрелка].Картинка = КартинкаСтрелка;

	Иначе
		Область.Параметры[ПараметрыОбласти.СуммаГодНазад] = ?(СравниватьСПрошлымПериодом, 0, "");
		Область.Параметры[ПараметрыОбласти.Отклонение] = ?(СравниватьСПрошлымПериодом, "0%", "");
		Область.Рисунки[ПараметрыОбласти.Стрелка].Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеДатыПоПорядкуРаздела(Порядок)
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Если Порядок = 1 Тогда
		Возврат НСтр("ru = 'С начала месяца'");
	ИначеЕсли Порядок = 2 Тогда
		Возврат НСтр("ru = 'С начала года'");
	ИначеЕсли Порядок = 3 Тогда
		Возврат Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'");
	ИначеЕсли Порядок = 4 Тогда
		Возврат СтрШаблон("%1 - %2", 
				Формат(НачалоПрошлогоПериода, "Л=ru_RU; ДФ='MMM'"), 
				Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMM'"));
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСПорядком(ИмяРаздела, Порядок, ГруппировкаОтчета = Неопределено)
	
	Расшифровка = СтруктураРасшифровкиНаСервере(ИмяРаздела, Порядок);

	Если ГруппировкаОтчета <> Неопределено Тогда
		Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);
	КонецЕсли;

	ОткрытьОтчет(Расшифровка);
	
КонецПроцедуры

&НаСервере
Функция СтруктураРасшифровкиФинансовыйАнализНаСервере()
	
	СтруктураРасшифровки = Новый Структура;

	СтруктураРасшифровки.Вставить("СсылкаНаОтчет", "e1cib/app/Отчет.ФинансовыйАнализ");
	СтруктураРасшифровки.Вставить("ФормаОтчета",   "Отчет.ФинансовыйАнализ.Форма.ФормаОтчета");
	СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаФинансовыйАнализ");
	
	Возврат СтруктураРасшифровки;

КонецФункции

&НаСервере
Функция СтруктураРасшифровкиСтоимостьЗапасовНаСервере()
	
	СтруктураРасшифровки = Новый Структура;

	СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ОстаткиТоваров");
	СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ОстаткиТоваров.Форма.ФормаОтчета");
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗапасы("Склад");
	
	СтруктураРасшифровки.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);

	СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаОстаткиТоваров");
	
	Возврат СтруктураРасшифровки;

КонецФункции

&НаСервере
Функция СтруктураРасшифровкиСтоимостьЗапасовПоСрокуХраненияНаСервере()
	
	СтруктураРасшифровки = Новый Структура;

	СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ОстаткиТоваровПоСрокамХранения");
	СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ОстаткиТоваровПоСрокамХранения.Форма.ФормаОтчета");

	Показатели = Новый Массив;
	Показатели.Добавить("ПоказательСумма");
	Показатели.Добавить("ПоказательКоличество");
	СтруктураРасшифровки.Вставить("Показатели", Показатели);
	
	ГруппировкаОтчета = ГруппировкаОтчетаЗапасы("Счет");
	
	СтруктураРасшифровки.Вставить("ГруппировкаОтчета", ГруппировкаОтчета);
	
	СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаОстаткиТоваровПоСрокамХранения");
	
	Возврат СтруктураРасшифровки;

КонецФункции

&НаСервере
Функция СтруктураРасшифровкиНаСервере(ИмяРаздела, Порядок)
	
	Раздел = Перечисления.РазделыМонитораРуководителя[ИмяРаздела];
	СтруктураРасшифровки = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Раздел);
	КлючеваяОперация = "МониторРасшифровкаРаздела" + ВыбранныеРазделы.НайтиПоЗначению(Раздел).Значение;
	
	СтруктураРасшифровки.Вставить("СтандартныеИнтервалы", Истина);
	
	ЭтоПервыйМесяцГода = Месяц(ТекущаяДата) = 1;
	
	Если Порядок = 1 И ПоказыватьОборотыЗаТекущийМесяц Тогда
		
		СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоМесяца(ТекущаяДата));
		СтруктураРасшифровки.Вставить("КонецПериода",     ТекущаяДата);
		СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "ТекущийМесяц");
		
	ИначеЕсли Порядок = 2 И ПоказыватьОборотыСНачалаГодаПоТекущийМесяц И Не ЭтоПервыйМесяцГода Тогда
		
		ВыводитьСтроку = Истина;
		
		СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоГода(ТекущаяДата));
		СтруктураРасшифровки.Вставить("КонецПериода",     ТекущаяДата);
		СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "СНачалаГодаПоТекущийМесяц");
		
	ИначеЕсли Порядок = 3 И ПоказыватьОборотыЗаПрошлыйМесяц Тогда
		
		СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
		СтруктураРасшифровки.Вставить("КонецПериода",     КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
		СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "ПрошлыйМесяц");
		
	ИначеЕсли Порядок = 4 И ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц Тогда
		
		СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоГода(ДобавитьМесяц(ТекущаяДата, -1)));
		СтруктураРасшифровки.Вставить("КонецПериода",     КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
		СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "СНачалаГодаПоПрошлыйМесяц");
		
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Расшифровка)
	
	Отчет = Расшифровка.ФормаОтчета;
	
	ГруппировкаОтчета = ?(Расшифровка.Свойство("ГруппировкаОтчета"), Расшифровка.ГруппировкаОтчета, Неопределено);
	КлючВарианта      = ?(Расшифровка.Свойство("КлючВарианта"),      Расшифровка.КлючВарианта,      Неопределено);
	Отборы            = ?(Расшифровка.Свойство("Отбор"),             Расшифровка.Отбор,             Неопределено);
	Показатели        = ?(Расшифровка.Свойство("Показатели"),        Расшифровка.Показатели,        Неопределено);
	НачалоПериода     = ?(Расшифровка.Свойство("НачалоПериода"),     Расшифровка.НачалоПериода,     Неопределено);
	КонецПериода      = ?(Расшифровка.Свойство("КонецПериода"),      Расшифровка.КонецПериода,      Неопределено);
	КлючеваяОперация  = ?(Расшифровка.Свойство("КлючеваяОперация"),  Расшифровка.КлючеваяОперация,  Неопределено);
	
	СтандартныеИнтервалы = ?(Расшифровка.Свойство("СтандартныеИнтервалы"),  Расшифровка.СтандартныеИнтервалы,  Истина);

	Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(ЭтотОбъект, НачалоПериода,
		КонецПериода, СтандартныеИнтервалы);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если Отборы <> Неопределено И ТипЗнч(Отборы) = Тип("Массив") Тогда
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Показатели <> Неопределено И ТипЗнч(Показатели) = Тип("Массив") Тогда
		
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПользовательскиеНастройкиДляРасшифровки(Форма,
		Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено, СтандартныеИнтервалы = Истина)
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоМесяца(Форма.ТекущаяДата);
	КонецЕсли;
	
	Если Не СтандартныеИнтервалы Тогда
		Интервалы = Новый Массив;
		ДатаНачала = ДобавитьМесяц(Форма.ТекущаяДата, -Форма.СрокХраненияТоваров);
		ДнейПериода = ОбщегоНазначенияБПКлиентСервер.РазностьДат(ДатаНачала, Форма.ТекущаяДата, 
			ПредопределенноеЗначение("Перечисление.Периодичность.День"));
		Интервал = Новый Структура("Значение, Представление",
			ДнейПериода, СтрШаблон(НСтр("ru = 'До %1 дней'"), ДнейПериода));
		Интервалы.Добавить(Интервал);
	КонецЕсли;

	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      Форма.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода",    НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",     КонецПериода);
	ДополнительныеСвойства.Вставить("Период",           Форма.ТекущаяДата);
	Если Не СтандартныеИнтервалы Тогда
		ДополнительныеСвойства.Вставить("Интервалы",        Интервалы);
		ДополнительныеСвойства.Вставить("ОчищатьИнтервалы", Истина);
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок", Истина);

	Если Форма.ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление,"Формат", "ЧДЦ=; ЧС=3");
		ЭлементУсловногоОформления.Использование = Истина;
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
Функция ОбновитьДанныеМонитора(КлючеваяОперация, СУчетомАктуальности = Истина, ОжидатьВыполненияЗадания = Истина)
	
	ЗаписатьОперациюБизнесСтатистики(КлючеваяОперация);
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("Организация"          , Организация);
	
	ПараметрыОбновления.Вставить("РазделыМонитора"      , ВыбранныеРазделы.ВыгрузитьЗначения());
	ПараметрыОбновления.Вставить("ПолучатьПрошлыйПериод", СравниватьСПрошлымПериодом);
	ПараметрыОбновления.Вставить("СрокХраненияТоваров", СрокХраненияТоваров);
	
	ДлительнаяОперация = МониторРуководителя.ЗапуститьОбновлениеМонитораВФоне(
		ПараметрыОбновления, УникальныйИдентификатор, СУчетомАктуальности, ОжидатьВыполненияЗадания);
		
	ДатаПоследнегоОбновленияМонитора = МониторРуководителя.ПолучитьДатуПоследнегоОбновленияМонитора(Организация,
		ВыбранныеРазделы.ВыгрузитьЗначения());
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	СписокРазделов = Форма.СписокРазделов;
	
	Элементы.ГруппаОсновная.Видимость = Форма.МониторАктуален;
	Элементы.СтраницаДлительнаяОперация.Видимость = Не Форма.МониторАктуален;
	Элементы.ЗаголовокФормы.Заголовок = Форма.ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоВидимыхРазделов(СписокРазделов)
	
	КоличествоВидимыхРазделов = 0;
	
	Для Каждого Раздел Из СписокРазделов Цикл
		Если Раздел.Пометка Тогда
			КоличествоВидимыхРазделов = КоличествоВидимыхРазделов + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат КоличествоВидимыхРазделов;
	
КонецФункции

&НаСервере
Функция СписокРазделовМонитораРуководителяПоУмолчанию()
	
	Список = Новый СписокЗначений;
	Список.Добавить("ДенежныеСредства", "Денежные средства", Истина);
	Список.Добавить("ВзаимоотношенияСКонтрагентами", "Взаимоотношения с контрагентами", Истина);
	Список.Добавить("ПродажиИСклад", "Продажи и склад", Истина);
	Список.Добавить("ДоходыРасходыИПрибыль", "Доходы, расходы и прибыль", Истина);
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	РазделыМонитораИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"СписокРазделовМонитораРуководителя");

	Если РазделыМонитораИзНастроек = Неопределено Тогда
		СписокРазделов = СписокРазделовМонитораРуководителяПоУмолчанию();
	Иначе
		СписокРазделов = РазделыМонитораИзНастроек;
	КонецЕсли;
	
	НеиспользуемыеРазделы = Перечисления.РазделыМонитораРуководителя.НеиспользуемыеРазделы();
	ВыбранныеРазделы.Очистить();
	
	Для Каждого РазделМонитораИзНастроек Из СписокРазделов Цикл
		
		Если Не РазделМонитораИзНастроек.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделМонитораИзНастроек.Значение = "ДенежныеСредства" Тогда
			
			ДобавитьРазделы(СписокРазделовДенежныеСредства(), НеиспользуемыеРазделы);
			
		ИначеЕсли РазделМонитораИзНастроек.Значение = "ВзаимоотношенияСКонтрагентами" Тогда
			
			ДобавитьРазделы(СписокРазделовВзаиморасчетыСКонтрагентами(), НеиспользуемыеРазделы);
			
		ИначеЕсли РазделМонитораИзНастроек.Значение = "ПродажиИСклад" Тогда
			
			ДобавитьРазделы(РазделыМонитораПродажиИСклад(), НеиспользуемыеРазделы);
			
		ИначеЕсли РазделМонитораИзНастроек.Значение = "ДоходыРасходыИПрибыль" Тогда
			
			ДобавитьРазделы(СписокРазделовДоходыРасходыИПрибыль(), НеиспользуемыеРазделы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантОкругленияИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"ВариантОкругленияМонитораРуководителя");
	
	Если ВариантОкругленияИзНастроек = Неопределено Тогда
		// По умолчанию до тысяч рублей
		ВариантОкругления = 1000;
	Иначе
		// Нельзя допустить 0
		ВариантОкругления = Макс(ВариантОкругленияИзНастроек, 1);
	КонецЕсли;
	
	Если ВариантОкругления = 1 Тогда
		ЕдиницаИзмерения = НСтр("ru = 'в рублях'");
	Иначе
		ЕдиницаИзмерения = НСтр("ru = 'в тысячах рублей'");
	КонецЕсли;
	
	СрокХраненияТоваровИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей", "СрокХраненияТоваров");
	
	Если СрокХраненияТоваровИзНастроек = Неопределено Тогда
		// По умолчанию 6 месяцев
		СрокХраненияТоваров = 6;
	Иначе
		// Нельзя допустить 0
		СрокХраненияТоваров = Макс(СрокХраненияТоваровИзНастроек, 1);
	КонецЕсли;

	Элементы.НадписьЗалежалыйТовар.Заголовок = СтрШаблон(НСтр("ru='Залежалый товар (более %1 мес.)'"),
		СрокХраненияТоваров);
	
	СравниватьСПрошлымПериодомИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"НовыйСравниватьСПрошлымПериодом");
	
	Если СравниватьСПрошлымПериодомИзНастроек = Неопределено Тогда
		СравниватьСПрошлымПериодом = Ложь;
	Иначе
		СравниватьСПрошлымПериодом = СравниватьСПрошлымПериодомИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыЗаТекущийМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"НовыйПоказыватьОборотыЗаТекущийМесяц");
	Если ПоказыватьОборотыЗаТекущийМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыЗаТекущийМесяц = Истина;
	Иначе
		ПоказыватьОборотыЗаТекущийМесяц = ПоказыватьОборотыЗаТекущийМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"НовыйПоказыватьОборотыСНачалаГодаПоТекущийМесяц");
	Если ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыСНачалаГодаПоТекущийМесяц = Истина;
	Иначе
		ПоказыватьОборотыСНачалаГодаПоТекущийМесяц = ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"НовыйПоказыватьОборотыЗаПрошлыйМесяц");
	Если ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыЗаПрошлыйМесяц = Ложь;
	Иначе
		ПоказыватьОборотыЗаПрошлыйМесяц = ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторОсновныхПоказателей",
		"НовыйПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц");
	Если ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц = Ложь;
	Иначе
		ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц = ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокРазделовДенежныеСредства()
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПоступлениеДенежныхСредств);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.РасходДенежныхСредств);
	
	Возврат РазделыМонитора;
	
КонецФункции

&НаСервере
Функция СписокРазделовВзаиморасчетыСКонтрагентами()
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	
	Возврат РазделыМонитора;
	
КонецФункции

&НаСервере
Функция РазделыМонитораПродажиИСклад()
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	Возврат РазделыМонитора;
	
КонецФункции

&НаСервере
Функция СписокРазделовДоходыРасходыИПрибыль()
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.Доходы);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.Расходы);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.Прибыль);
	
	Возврат РазделыМонитора;
	
КонецФункции

&НаСервере
Процедура ДобавитьРазделы(РазделыМонитора, НеиспользуемыеРазделы)
	
	Для Каждого РазделМонитора Из РазделыМонитора Цикл
		
		Если НеиспользуемыеРазделы.Найти(РазделМонитора) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = ОбщегоНазначения.ИмяЗначенияПеречисления(РазделМонитора);
		ВыбранныеРазделы.Добавить(РазделМонитора, Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, Параметры) Экспорт
	
	// Если настройки не были изменены - ничего не делаем
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	ВосстановитьНастройкиФормы();
	
	МониторАктуален = Ложь;
		
	ДлительнаяОперация = ОбновитьДанныеМонитора("ОбновитьПослеИзмененияНастроек", Ложь);
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗаданияЗаполнения", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеФоновогоЗаданияЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	МониторАктуален = Истина;
	ОбновитьМониторНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхНаСервере(КлючеваяОперация)
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбновитьДанныеМонитора(КлючеваяОперация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(ДатаПоследнегоОбновленияМонитора)

	Возврат Формат(ДатаПоследнегоОбновленияМонитора, "ДФ='dd MMMM yyyy ""г."" H:mm'");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии()
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере("ОбновитьРабочийСтолПриОткрытии");
	Если ДлительнаяОперация <> Неопределено Тогда
		ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	Иначе
		// Попробуем обновить позже
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтола()
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере("ОбновитьРабочийСтол");
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
	// Интервал следующего обновления рабочего стола рассчитан в ОбновитьМониторНаСервере()
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияПериодов()
	
	ДатаПоследнегоОбновленияМонитора = МониторРуководителя.ПолучитьДатуПоследнегоОбновленияМонитора(Организация,
		ВыбранныеРазделы.ВыгрузитьЗначения());
	
	ЗаголовокТекст = СтрШаблон(
		НСтр("ru = 'Монитор основных показателей: %1'"),
		Формат(ДатаПоследнегоОбновленияМонитора, "Л=ru_RU; ДФ='d MMMM ЧЧ:мм'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМониторНаСервере()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(ТекущаяДата) <> НачалоДня(ДатаСеанса) Тогда
		// Расчет интервала времени, через который произойдет обновление рабочего стола.
		// Обычно этот интервал равен количеству секунд, оставшихся до 59 секунды следующих за текущими сутками.
		ИнтервалОбновления = (КонецДня(ДатаСеанса) + 1) - ДатаСеанса + 59;
		ТекущаяДата = ДатаСеанса;
	КонецЕсли;
	
	ОбновитьПредставленияПериодов();

	Если Не МониторАктуален Тогда
		Возврат;
	КонецЕсли;

	ДанныеРазделовМонитора = МониторРуководителя.ПолучитьДанныеРазделовМонитора(Организация,
		ВыбранныеРазделы.ВыгрузитьЗначения(), ВариантОкругления, СравниватьСПрошлымПериодом);
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	Если ДанныеРазделовМонитора <> Неопределено Тогда
		
		Для Каждого РазделМонитора Из ВыбранныеРазделы Цикл
			
			ИмяРазделаМонитора = РазделМонитора.Представление;
			
			ЗаполнитьРаздел(РазделМонитора, ДанныеРазделовМонитора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийРаздел = 1;
	КоличествоВидимыхРазделов = КоличествоВидимыхРазделов(СписокРазделов);
	ОбщееКоличествоРазделов = СписокРазделов.Количество();

	Для Каждого Раздел Из СписокРазделов Цикл
		
		СтрокаРаздела = Элементы["ГруппаСтрока" + ТекущийРаздел];
		
		Элементы.Переместить(Элементы[Раздел.Значение], СтрокаРаздела);
		
		СтрокаРаздела.Видимость = Раздел.Пометка;
		
		Если ОбщееКоличествоРазделов > ТекущийРаздел Тогда
			Если Раздел.Пометка И КоличествоВидимыхРазделов > 1 Тогда
				Элементы["СтрокаРазделитель" + ТекущийРаздел].Видимость = Истина;
				КоличествоВидимыхРазделов = КоличествоВидимыхРазделов - 1;
			Иначе
				Элементы["СтрокаРазделитель" + ТекущийРаздел].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		ТекущийРаздел = ТекущийРаздел + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел(Раздел, ДанныеРаздела)
	
	ОборотныеРазделы = ОборотныеРазделы();
	КлючРаздела = ОборотныеРазделы.Получить(Раздел.Значение);
	
	Если КлючРаздела <> Неопределено Тогда
		Если Раздел.Значение = Перечисления.РазделыМонитораРуководителя.РасходДенежныхСредств
			Или Раздел.Значение = Перечисления.РазделыМонитораРуководителя.Расходы Тогда
			ЭтоРасходы = Истина;
		Иначе
			ЭтоРасходы = Ложь;
		КонецЕсли;
		
		ДополнительныеРазделы = Новый Массив;
		
		Если Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам Тогда
			ДополнительныеРазделы.Добавить(Новый Структура("Заголовок, Порядок", "СтоимостьЗапасов", 5));
			ДополнительныеРазделы.Добавить(Новый Структура("Заголовок, Порядок", "ЗалежалыйТовар", 6));
		КонецЕсли;
		
		ПодготовленныеДанные = ПодготовленныеДанные(ДанныеРаздела, Раздел.Значение, ДополнительныеРазделы);
		ЗаполнитьРазделОборотный(КлючРаздела, ПодготовленныеДанные, ЭтоРасходы);
		
		Если Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам Тогда
			СтоимостьЗапасов = ПодготовленныеДанные.СтоимостьЗапасов;
			Элементы.СтоимостьЗапасов.Заголовок = Формат(СтоимостьЗапасов, ФорматСуммы());
			ЗалежалыйТовар = ПодготовленныеДанные.ЗалежалыйТовар;
			Элементы.ЗалежалыйТовар.Заголовок = Формат(ЗалежалыйТовар, ФорматСуммы());
		КонецЕсли;
		
	Иначе
		
		Если Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств Тогда
			
			ЗаполнитьРазделОстаткиДенежныхСредств(ДанныеРаздела);
			
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей Тогда
			
			ЗаполнитьРазделВзаиморасчетов("ЗадолженностьПокупателей", "Задолженность", ДанныеРаздела, Раздел.Значение);
			
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам Тогда
			
			ЗаполнитьРазделВзаиморасчетов("ЗадолженностьПоставщикам", "Задолженность", ДанныеРаздела, Раздел.Значение);
			
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей Тогда
			
			ЗаполнитьРазделВзаиморасчетов("ПросроченнаяЗадолженностьПокупателей", "ПросроченнаяЗадолженность", 
					ДанныеРаздела, Раздел.Значение);
					
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам Тогда
			
			ЗаполнитьРазделВзаиморасчетов("ПросроченнаяЗадолженностьПоставщикам", "ПросроченнаяЗадолженность", 
					ДанныеРаздела, Раздел.Значение);
					
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям Тогда
					
			ЗаполнитьРазделВзаиморасчетов("НеоплаченныеСчетаПокупателям", "НеоплаченныеСчета", ДанныеРаздела, Раздел.Значение);
			
		ИначеЕсли Раздел.Значение = Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков Тогда
			
			ЗаполнитьРазделВзаиморасчетов("НеоплаченныеСчетаПоставщиков", "НеоплаченныеСчета", ДанныеРаздела, Раздел.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОборотныеРазделы()
	
	Разделы = Новый Соответствие;
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.ПоступлениеДенежныхСредств, "Поступление");
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.РасходДенежныхСредств, "Расход");
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам, "Продажи");
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.Доходы, "Доходы");
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.Расходы, "Расходы");
	Разделы.Вставить(Перечисления.РазделыМонитораРуководителя.Прибыль, "Прибыль");
	
	Возврат Разделы;
	
КонецФункции

&НаСервере
Функция ФорматСуммы()
	
	Возврат "ЧДЦ=0; ЧН=0; ЧГ=3,0";
	
КонецФункции

&НаСервере
Функция ПодготовленныеДанные(ДанныеРазделовМонитора, Раздел, ДополнительныеРазделы = Неопределено)
	
	Данные = НовыйДанные();
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Раздел);
	Отбор.Вставить("Порядок");
	// Текущий месяц
	Отбор.Порядок = МониторРуководителя.ПорядокТекущегоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ТекущийМесяц", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ТекущийМесяцПрошлыйГод", НайденныеСтроки[0].СуммаПрошлыйПериод);
		Данные.Вставить("ТекущийМесяцОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// С начала года
	Отбор.Порядок =  МониторРуководителя.ПорядокТекущегоМесяцаСНачалаГода();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ТекущийМесяцСНачалаГода", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ТекущийМесяцСНачалаГодаПрошлыйГод", НайденныеСтроки[0].СуммаПрошлыйПериод);
		Данные.Вставить("ТекущийМесяцСНачалаГодаОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// Прошлый месяц
	Отбор.Порядок = МониторРуководителя.ПорядокПрошлогоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ПрошлыйМесяц", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ПрошлыйМесяцПрошлыйГод", НайденныеСтроки[0].СуммаПрошлыйПериод);
		Данные.Вставить("ПрошлыйМесяцОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// С начала года по конец прошлого месяца
	Отбор.Порядок = МониторРуководителя.ПорядокПрошлогоМесяцаСНачалаГода();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ПрошлыйМесяцСНачалаГода", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ПрошлыйМесяцСНачалаГодаПрошлыйГод", НайденныеСтроки[0].СуммаПрошлыйПериод);
		Данные.Вставить("ПрошлыйМесяцСНачалаГодаОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	// ДопонительныеР разделы
	Если ДополнительныеРазделы <> Неопределено Тогда
		Для Каждого ДополнительныйРаздел Из ДополнительныеРазделы Цикл
			
			Отбор.Порядок = ДополнительныйРаздел.Порядок;
			НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
			
			Сумма = 0;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Сумма = НайденныеСтроки[0].Сумма;
			КонецЕсли;
			
			Данные.Вставить(ДополнительныйРаздел.Заголовок,  Сумма);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция НовыйДанные()
	
	Данные = Новый Структура;
	Данные.Вставить("ТекущийМесяц", 0);
	Данные.Вставить("ТекущийМесяцПрошлыйГод", 0);
	Данные.Вставить("ТекущийМесяцОтклонение", 0);
	Данные.Вставить("ТекущийМесяцСНачалаГода", 0);
	Данные.Вставить("ТекущийМесяцСНачалаГодаПрошлыйГод", 0);
	Данные.Вставить("ТекущийМесяцСНачалаГодаОтклонение", 0);
	Данные.Вставить("ПрошлыйМесяц", 0);
	Данные.Вставить("ПрошлыйМесяцПрошлыйГод", 0);
	Данные.Вставить("ПрошлыйМесяцОтклонение", 0);
	Данные.Вставить("ПрошлыйМесяцСНачалаГода", 0);
	Данные.Вставить("ПрошлыйМесяцСНачалаГодаПрошлыйГод", 0);
	Данные.Вставить("ПрошлыйМесяцСНачалаГодаОтклонение", 0);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазделОстаткиДенежныхСредств(ДанныеРазделовМонитора)
	
	ОбщийОстатокДенежныхСредств = 0;
	ОстатокВКассе = 0;
	ОстатокВБанке = 0;
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	// Касса
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокКассыВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОстатокВКассе = НайденныеСтроки[0].Сумма;
	КонецЕсли;
	
	// Банк
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокРублевыхСчетовВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОстатокВБанке = ОстатокВБанке + НайденныеСтроки[0].Сумма;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") Тогда
		// Валютные остатки
		Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокВалютныхСчетовВМониторе());
		НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОстатокВБанке = ОстатокВБанке + НайденныеСтроки[0].Сумма;
		КонецЕсли;
	КонецЕсли;
	
	// Итого
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокИтоговВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбщийОстатокДенежныхСредств = НайденныеСтроки[0].Сумма;
		Элементы.ОстатокДенежныхСредств.Заголовок = Формат(ОбщийОстатокДенежныхСредств, ФорматСуммы());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделОборотный(КлючРаздела, ДанныеРаздела, ЭтоРасходы = Ложь)
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Индекс = 0;
	
	// Текущий месяц
	Индекс = Индекс + 1;
	Идентификаторы = ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс);
	Элементы[Идентификаторы.Получить("Строка")].Видимость = ПоказыватьОборотыЗаТекущийМесяц;
	
	Если ПоказыватьОборотыЗаТекущийМесяц Тогда
		
		ДобавитьСтроку(Идентификаторы,
				НСтр("ru = 'С начала месяца'"),
				ДанныеРаздела.ТекущийМесяц,
				ДанныеРаздела.ТекущийМесяцПрошлыйГод,
				ДанныеРаздела.ТекущийМесяцОтклонение,
				ЭтоРасходы);
				
	КонецЕсли;
			
	// С начала года
	Индекс = Индекс + 1;
	Идентификаторы = ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс);
	Элементы[Идентификаторы.Получить("Строка")].Видимость = ПоказыватьОборотыСНачалаГодаПоТекущийМесяц;
	
	Если ПоказыватьОборотыСНачалаГодаПоТекущийМесяц Тогда
		
		ДобавитьСтроку(Идентификаторы,
				НСтр("ru = 'С начала года'"),
				ДанныеРаздела.ТекущийМесяцСНачалаГода,
				ДанныеРаздела.ТекущийМесяцСНачалаГодаПрошлыйГод,
				ДанныеРаздела.ТекущийМесяцСНачалаГодаОтклонение,
				ЭтоРасходы);
				
	КонецЕсли;
	
	// Прошлый месяц
	Индекс = Индекс + 1;
	Идентификаторы = ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс);
	Элементы[Идентификаторы.Получить("Строка")].Видимость = ПоказыватьОборотыЗаПрошлыйМесяц;
	
	Если ПоказыватьОборотыЗаПрошлыйМесяц Тогда
		
		ДобавитьСтроку(ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс),
				Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'"),
				ДанныеРаздела.ПрошлыйМесяц,
				ДанныеРаздела.ПрошлыйМесяцПрошлыйГод,
				ДанныеРаздела.ПрошлыйМесяцОтклонение,
				ЭтоРасходы);
			
	КонецЕсли;
	
	// С начала года по конец прошлого месяца
	Индекс = Индекс + 1;
	Идентификаторы = ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс);
	Элементы[Идентификаторы.Получить("Строка")].Видимость = ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц;
	
	Если ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц Тогда
		
		НачалоПрошлогоПериодаПрописью = Формат(НачалоПрошлогоПериода, "Л=ru_RU; ДФ='MMM'");
		НачалоПрошлогоПериодаПрописью = СтрШаблон(НСтр("ru = '%1%2'"), 
				ВРег(Лев(НачалоПрошлогоПериодаПрописью, 1)), 
				Сред(НачалоПрошлогоПериодаПрописью, 2, СтрДлина(НачалоПрошлогоПериодаПрописью)));
		НачалоПрошлогоМесяцаПрописью = Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMM'");
		НачалоПрошлогоМесяцаПрописью = СтрШаблон(НСтр("ru = '%1%2'"), 
				ВРег(Лев(НачалоПрошлогоМесяцаПрописью, 1)), 
				Сред(НачалоПрошлогоМесяцаПрописью, 2, СтрДлина(НачалоПрошлогоМесяцаПрописью)));

		ДобавитьСтроку(ИдентификаторыОборотнойСтроки(КлючРаздела, Индекс),
				СтрШаблон(НСтр("ru = '%1 - %2'"), НачалоПрошлогоПериодаПрописью, НачалоПрошлогоМесяцаПрописью),
				ДанныеРаздела.ПрошлыйМесяцСНачалаГода,
				ДанныеРаздела.ПрошлыйМесяцСНачалаГодаПрошлыйГод,
				ДанныеРаздела.ПрошлыйМесяцСНачалаГодаОтклонение,
				ЭтоРасходы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтроку(Идентификаторы, Период, Сумма, СуммаПрошлыйГод, Отклонение, ЭтоРасходы)
	
	ПолеЗаголовка = Идентификаторы.Получить("Заголовок");
	Если ПолеЗаголовка <> Неопределено Тогда
		Элементы[ПолеЗаголовка].Заголовок = Период;
	КонецЕсли;

	ЭтотОбъект[Идентификаторы.Получить("Сумма")] = Сумма;
	ВидимостьСравненияСПрошлымПериодом(Идентификаторы);
	
	Если СравниватьСПрошлымПериодом Тогда
		ЗаполнитьСравнениеСПрошлымГодом(Идентификаторы, СуммаПрошлыйГод, Отклонение, ЭтоРасходы);
	Иначе
		Элементы[Идентификаторы.Получить("Декорация")].Картинка = БиблиотекаКартинок.Пустая;
		ЭтотОбъект[Идентификаторы.Получить("ПредставлениеОтклонение")] = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидимостьСравненияСПрошлымПериодом(Идентификаторы)
	
	Если Не СравниватьСПрошлымПериодом Тогда
		ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
	КонецЕсли;
	
	Элементы[Идентификаторы.Получить("СуммаПрошлыйГод")].ЦветТекста = ЦветТекста;
	Элементы[Идентификаторы.Получить("ЗаголовокГодНазад")].ЦветТекста = ЦветТекста;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСравнениеСПрошлымГодом(Идентификаторы, СуммаПрошлыйГод, Отклонение, ЭтоРасходы)
	
	Отклонение = Окр(Отклонение, 0);
	
	ЭтотОбъект[Идентификаторы.Получить("СуммаПрошлыйГод")] = СуммаПрошлыйГод;
	
	Если Отклонение = 0 Тогда
		Элементы[Идентификаторы.Получить("Декорация")].Картинка = БиблиотекаКартинок.Пустая;
	Иначе
		
		Если ЭтоРасходы Тогда
			КартинкаСтрелка = ЗеленаяСтрелкаВниз();
			Если Отклонение > 0 Тогда
				КартинкаСтрелка = КраснаяСтрелкаВверх();
			КонецЕсли;
		Иначе
			КартинкаСтрелка = КраснаяСтрелкаВниз();
			Если Отклонение > 0 Тогда
				КартинкаСтрелка = ЗеленаяСтрелкаВверх();
			КонецЕсли;
		КонецЕсли;
		Элементы[Идентификаторы.Получить("Декорация")].Картинка = КартинкаСтрелка;
	КонецЕсли;
	
	ЭтотОбъект[Идентификаторы.Получить("Отклонение")] = Отклонение;
	ЭтотОбъект[Идентификаторы.Получить("ПредставлениеОтклонение")] = ПредставлениеОтклонения(Отклонение);
	
	Если ЭтоРасходы Тогда
		
		Если Отклонение < 0 Тогда
			ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
		ИначеЕсли Отклонение > 0 Тогда
			ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		Иначе
			ЦветТекста = ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
		КонецЕсли;
		
	Иначе
		
		Если Отклонение > 0 Тогда
			ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
		ИначеЕсли Отклонение < 0 Тогда
			ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		Иначе
			ЦветТекста = ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы[Идентификаторы.Получить("Отклонение")].ЦветТекста = ЦветТекста;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторыОборотнойСтроки(КлючСтроки, Индекс)
	
	ПоляСтроки = Новый Соответствие;
	БезЗаголовка = Ложь;
	
	Если КлючСтроки = "Расходы" Или КлючСтроки = "Прибыль" Тогда
		БезЗаголовка = Истина;
	КонецЕсли;
	
	Если Не БезЗаголовка Тогда
		ПоляСтроки.Вставить("Заголовок",           СтрШаблон("%1Заголовок%2", КлючСтроки, Индекс));
	КонецЕсли;
	
	ПоляСтроки.Вставить("Сумма",                   СтрШаблон("%1НаСегодня%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("СуммаПрошлыйГод",         СтрШаблон("%1ГодНазад%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("Декорация",               СтрШаблон("Декорация%1Отклонение%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("Отклонение",              СтрШаблон("%1Отклонение%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("ПредставлениеОтклонение", СтрШаблон("%1ПредставлениеОтклонение%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("Строка",                  СтрШаблон("%1Строка%2", КлючСтроки, Индекс));
	ПоляСтроки.Вставить("ЗаголовокГодНазад",       СтрШаблон("Заголовок%1ГодНазад", КлючСтроки));
	ПоляСтроки.Вставить("ЗаголовокНаСегодня",      СтрШаблон("Заголовок%1НаСегодня", КлючСтроки));
	
	Возврат ПоляСтроки;
	
КонецФункции

&НаСервере
Функция ИдентификаторыСтроки(КлючСтроки, КлючЗаголовка)
	
	ПоляСтроки = Новый Соответствие;
	ПоляСтроки.Вставить("Сумма",                   СтрШаблон("%1НаСегодня", КлючСтроки));
	ПоляСтроки.Вставить("СуммаПрошлыйГод",         СтрШаблон("%1ГодНазад", КлючСтроки));
	ПоляСтроки.Вставить("Декорация",               СтрШаблон("Декорация%1Отклонение", КлючСтроки));
	ПоляСтроки.Вставить("Отклонение",              СтрШаблон("%1Отклонение", КлючСтроки));
	ПоляСтроки.Вставить("ПредставлениеОтклонение", СтрШаблон("%1ПредставлениеОтклонение", КлючСтроки));
	ПоляСтроки.Вставить("ЗаголовокГодНазад",       СтрШаблон("Заголовок%1ГодНазад", КлючЗаголовка));
	ПоляСтроки.Вставить("ЗаголовокНаСегодня",      СтрШаблон("Заголовок%1НаСегодня", КлючЗаголовка));
	
	Возврат ПоляСтроки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазделВзаиморасчетов(КлючРаздела, КлючЗаголовка, ДанныеРазделаМонитора, Раздел)
	
	Идентификаторы = ИдентификаторыСтроки(КлючРаздела, КлючЗаголовка);
	Порядок = ПорядокИтоговПоВзаиморасчетамКонтрагентов(Раздел);
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Раздел);
	Отбор.Вставить("Порядок", Порядок);
	
	ДанныеРаздела = ДанныеРазделаМонитора.НайтиСтроки(Отбор);
	Если ДанныеРаздела.Количество() > 0 Тогда
		
		ЗначениеРаздела = ДанныеРаздела[0];
		
		ЭтотОбъект[Идентификаторы.Получить("Сумма")] = ЗначениеРаздела.Сумма;
		
		Если КлючРаздела <> "НеоплаченныеСчетаПокупателям"
			И КлючРаздела <> "НеоплаченныеСчетаПоставщиков" Тогда
			
			ВидимостьСравненияСПрошлымПериодом(Идентификаторы);
			
			Если СравниватьСПрошлымПериодом Тогда
				Отклонение = ЗначениеРаздела.Отклонение;
				СуммаПрошлыйГод = ЗначениеРаздела.СуммаПрошлыйПериод;
				ЗаполнитьСравнениеСПрошлымГодом(Идентификаторы, СуммаПрошлыйГод, Отклонение, Ложь);
			Иначе
				Элементы[Идентификаторы.Получить("Декорация")].Картинка = БиблиотекаКартинок.Пустая;
				ЭтотОбъект[Идентификаторы.Получить("ПредставлениеОтклонение")] = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Раздел = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей 
		Или Раздел = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам Тогда
		
		КоэффициентСоотношенияЗадолженностей();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КоэффициентСоотношенияЗадолженностей()
	
	Если ЗадолженностьПокупателейНаСегодня <> 0 
		И ЗадолженностьПоставщикамНаСегодня <> 0 Тогда
			ЗадолженностьКоэффициентСоотношенияНаСегодня = 
				Окр(ЗадолженностьПокупателейНаСегодня / ЗадолженностьПоставщикамНаСегодня, 2);
		Иначе
			ЗадолженностьКоэффициентСоотношенияНаСегодня = 0;
	КонецЕсли;
	
	Если ЗадолженностьПокупателейГодНазад <> 0 
		И ЗадолженностьПоставщикамГодНазад <> 0 Тогда
			ЗадолженностьКоэффициентСоотношенияГодНазад =
				Окр(ЗадолженностьПокупателейГодНазад / ЗадолженностьПоставщикамГодНазад, 2);
		Иначе
			ЗадолженностьКоэффициентСоотношенияГодНазад = 0;
	КонецЕсли;
	
	Если ЗадолженностьКоэффициентСоотношенияГодНазад = 0 Или ЗадолженностьКоэффициентСоотношенияНаСегодня = 0 Тогда
		ОтклонениеКоэффициентСоотношения = 0;
	Иначе
		ОтклонениеКоэффициентСоотношения = 
			Окр((ЗадолженностьКоэффициентСоотношенияНаСегодня / ЗадолженностьКоэффициентСоотношенияГодНазад - 1) * 100, 0);
	КонецЕсли;

	Если ОтклонениеКоэффициентСоотношения = 0 Тогда
		Элементы.ДекорацияКоэффициентСоотношенияЗадолженностейОтклонение.Картинка = БиблиотекаКартинок.Пустая;
		Элементы.ДекорацияКоэффициентСоотношенияЗадолженностейОтклонение.Видимость = Ложь;
		Элементы.ЗадолженностьКоэффициентСоотношенияОтклонение.Видимость = Ложь;
	Иначе
		Стрелка = ?(ОтклонениеКоэффициентСоотношения > 0, ЗеленаяСтрелкаВверх(), КраснаяСтрелкаВниз());
		Элементы.ДекорацияКоэффициентСоотношенияЗадолженностейОтклонение.Картинка = Стрелка;
		Если Не СравниватьСПрошлымПериодом Тогда
			Элементы.ЗадолженностьКоэффициентСоотношенияОтклонение.Видимость = Ложь;
			Элементы.ДекорацияКоэффициентСоотношенияЗадолженностейОтклонение.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияКоэффициентСоотношенияЗадолженностейОтклонение.Видимость = Истина;
			Элементы.ЗадолженностьКоэффициентСоотношенияОтклонение.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
		
	ЗадолженностьКоэффициентСоотношенияОтклонение = ОтклонениеКоэффициентСоотношения;
	ЗадолженностьКоэффициентСоотношенияПредставлениеОтклонение = 
		ПредставлениеОтклонения(ОтклонениеКоэффициентСоотношения);
	
	Если ОтклонениеКоэффициентСоотношения > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли ОтклонениеКоэффициентСоотношения < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
	КонецЕсли;
	
	Элементы.ЗадолженностьКоэффициентСоотношенияОтклонение.ЦветТекста = ЦветТекста;

	НижняяГраницаДопустимогоЗначенияКоэффициента = 0.9;
	ВерхняяГраницаДопустимогоЗначенияКоэффициента = 2;

	Если ЗадолженностьКоэффициентСоотношенияНаСегодня >= НижняяГраницаДопустимогоЗначенияКоэффициента
		И ЗадолженностьКоэффициентСоотношенияНаСегодня <= ВерхняяГраницаДопустимогоЗначенияКоэффициента Тогда
		Элементы.КомментарийКоэффициентСоотношения.Заголовок = КоэффициентБолее09ИМенее2();
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветТекста =
			ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветФона =
			ЦветаСтиля.ЦветФонаПоложительногоЗначения;
	ИначеЕсли ЗадолженностьКоэффициентСоотношенияНаСегодня < НижняяГраницаДопустимогоЗначенияКоэффициента Тогда
		Элементы.КомментарийКоэффициентСоотношения.Заголовок = КоэффициентМенее09();
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветТекста =
			ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
	ИначеЕсли ЗадолженностьКоэффициентСоотношенияНаСегодня > ВерхняяГраницаДопустимогоЗначенияКоэффициента Тогда
		Элементы.КомментарийКоэффициентСоотношения.Заголовок = КоэффициентБолее2();
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветТекста =
			ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
		Элементы.ЗадолженностьКоэффициентСоотношенияНаСегодня_Пояснение.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоэффициентБолее09ИМенее2()
	Возврат НСтр("ru = 'Вы эффективно распоряжаетесь доступными средствами.'");
КонецФункции

&НаСервере
Функция КоэффициентМенее09()
	Возврат НСтр("ru = 'Существует риск невозможности погашения задолженностей. Обратите внимание на задолженность поставщикам.'");
КонецФункции

&НаСервере
Функция КоэффициентБолее2()
	Возврат НСтр("ru = 'Существует риск нехватки собственных средств. Обратите внимание на задолженность покупателей'");
КонецФункции

&НаСервере
Функция ПорядокИтоговПоВзаиморасчетамКонтрагентов(Раздел)
	
	Если Раздел = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей Тогда
		
		Порядок = Отчеты.ЗадолженностьПокупателей.ПорядокИтоговВМониторе();
		
	ИначеЕсли Раздел = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам Тогда
		
		Порядок = Отчеты.ЗадолженностьПоставщикам.ПорядокИтоговВМониторе();
		
	ИначеЕсли Раздел = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей Тогда
		
		Порядок = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПорядокИтоговВМониторе();
		
	ИначеЕсли Раздел = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам Тогда
		
		Порядок = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПорядокИтоговВМониторе();
		
	ИначеЕсли Раздел = Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям Тогда
		
		Порядок = Отчеты.АнализНеоплаченныхСчетовПокупателям.ПорядокИтоговВМониторе();
		
	ИначеЕсли Раздел = Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков Тогда
		
		Порядок = Отчеты.АнализНеоплаченныхСчетовПоставщиков.ПорядокИтоговВМониторе();
		
	Иначе
		
		Порядок = 0;
		
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	МониторАктуален = Ложь; // Пользователь явно указал на то, данные монитора неактуальны
	УправлениеФормой(ЭтотОбъект);
	
	ДлительнаяОперация = ОбновитьДанныеМонитора("ОбновитьПоКоманде", Ложь);
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(
			ИмяФормы,
			"",
			ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Размещение",
		ПерсонализированныеПредложенияСервисов.ИмяРазмещенияМониторОсновныхПоказателей());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистика

&НаКлиенте
Функция РегистрироватьБизнесСтатистику()
	
	ИмяПараметра = "СтандартныеПодсистемы.ЦентрМониторинга";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ЦентрМониторингаКлиентСлужебный.ПолучитьПараметрыПриложения());
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра]["РегистрироватьБизнесСтатистику"];
	
КонецФункции

&НаСервере
Процедура ЗаписатьОперациюБизнесСтатистики(КлючеваяОперация)
	
	ИмяКлючевойОперации = СтрШаблон("СтатистикаБП.Отчеты.МониторОсновныхПоказателей.%1", КлючеваяОперация);
	Показатели = ПоказателиМонитораДляСтатистики();
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1, Показатели);
	СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(ИмяКлючевойОперации, Показатели);
	
КонецПроцедуры

&НаСервере
Функция ПоказателиМонитораДляСтатистики()
	
	Показатели = Новый Структура;
	Показатели.Вставить("СравниватьСПрошлымПериодом", СравниватьСПрошлымПериодом);
	Показатели.Вставить("ПоказыватьОборотыЗаТекущийМесяц", ПоказыватьОборотыЗаТекущийМесяц);
	Показатели.Вставить("ПоказыватьОборотыСНачалаГодаПоТекущийМесяц", ПоказыватьОборотыСНачалаГодаПоТекущийМесяц);
	Показатели.Вставить("ПоказыватьОборотыЗаПрошлыйМесяц", ПоказыватьОборотыЗаПрошлыйМесяц);
	Показатели.Вставить("ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц", ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц);
	Показатели.Вставить("ВариантОкругления", ВариантОкругления);
	Показатели.Вставить("ОрганизацияЗаполнена", ЗначениеЗаполнено(Организация));
	Показатели.Вставить("КоличествоОрганизаций", Справочники.Организации.КоличествоОрганизаций());
	Показатели.Вставить("ПростойИнтерфейс", ОбщегоНазначенияБП.ЭтоПростойИнтерфейс());
	Показатели.Вставить("Разделы", Новый Массив);
	
	Для Каждого Раздел Из ВыбранныеРазделы Цикл
		Показатели.Разделы.Добавить(ОбщегоНазначения.ИмяЗначенияПеречисления(Раздел.Значение));
	КонецЦикла;
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Пользователи.АвторизованныйПользователь(), "ИдентификаторПользователяИБ, ИдентификаторПользователяСервиса");
	
	Показатели.Вставить("ПользовательИБ", РеквизитыПользователя.ИдентификаторПользователяИБ);
	Показатели.Вставить("ПользовательСервиса", РеквизитыПользователя.ИдентификаторПользователяСервиса);
	
	Показатели.Вставить("ДатаСобытия", НачалоЧаса(ТекущаяДатаСеанса()));
	
	Возврат ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Показатели, Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = 999;
	
	Если Отклонение <> 0 Тогда
		ПредставлениеОтклонения =  Формат(МодульОтклонения, "ЧДЦ=") + "%";
	Иначе
		ПредставлениеОтклонения = "0%";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗеленаяСтрелкаВверх()
	
	Возврат БиблиотекаКартинок.ЗеленаяСтрелкаВВерх;
	
КонецФункции

&НаСервереБезКонтекста
Функция КраснаяСтрелкаВверх()
	
	Возврат БиблиотекаКартинок.КраснаяСтрелкаВВерх;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗеленаяСтрелкаВниз()
	
	Возврат БиблиотекаКартинок.ЗеленаяСтрелкаВниз;
	
КонецФункции

&НаСервереБезКонтекста
Функция КраснаяСтрелкаВниз()
	
	Возврат БиблиотекаКартинок.КраснаяСтрелкаВниз;
	
КонецФункции

#КонецОбласти

#КонецОбласти
