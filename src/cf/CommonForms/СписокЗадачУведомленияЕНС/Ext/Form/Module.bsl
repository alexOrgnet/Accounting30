&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Если Параметры.Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Иначе
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ОрганизацияПредставление = Организация;
	
	СписокЗадач.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиОформленияСпискаЗадач());
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект, "СписокЗадач", , ОтборПоОрганизации(Организация));
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра(
		"ПравилаПоНеобязательнымУведомлениям", ВыполнениеЗадачБухгалтера.ПравилаПоНеобязательнымУведомлениям());
	СписокЗадач.Параметры.УстановитьЗначениеПараметра(
		"ДатаНачалаЕНС", НастройкиУчетаКлиентСервер.ДатаПереходаНаЕдиныйНалоговыйПлатеж());
	
	
	ОбновитьТекущуюДатуФормыНаСервере();
	
	// По умолчанию считаем, что невыполненные задачи есть всегда, чтобы не тратить время на анализ.
	// Признак будет обновлен  при срабатывании обработчика ожидания 
	// Подключаемый_ЗапуститьОбновлениеСпискаЗадачПриОткрытии().
	СписокЗадачПустой = Ложь;
	
	ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
	СписокЗадачАктуален = (ТекущаяДата < ДатаАктуальности);
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
	
		// При записи новой организации необходимо добавить ее в список доступных организаций.
		ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);

	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда

		Если Организация <> Параметр Тогда
			// В качестве основной установлена организация, отличающаяся от уже выбранной на форме задач бухгалтера.
			Организация = Параметр;
			ОрганизацияПриИзмененииНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СписокЗадачБухгалтера_Изменение" Тогда
		
		// Пользователь изменил список задач
		СписокЗадачПустой = СписокЗадачПустой(Организация, ТекущаяДата);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты"
		Или ИмяСобытия = "Запись_РасчетыСУчредителями"
		Или ИмяСобытия = "ИзменениеВыписки"
		Или ИмяСобытия = "Запись_РегламентированныйОтчет"
		Или ИмяСобытия = "Запись_УведомлениеОбИсчисленныхСуммахНалогов"
		Или ИмяСобытия = "Запись_СведенияОЗастрахованныхЛицахСЗВ_М"
		Или ИмяСобытия = "Запись_СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"
		Или ИмяСобытия = "Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД" Тогда
		ОбновитьЭлементСпискаЗадач(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(СписокЗадач, , ОтборПоОрганизации(Организация));
	ОрганизацияПредставление = Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачСсылкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбновитьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ОткрыватьВНовойЗакладке", Истина);
	
	ОткрытьФорму("ОбщаяФорма.СписокЗадач", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадач

&НаКлиенте
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Перем Задача;
	
	Отказ = Истина;
	
	Задача = Элементы.СписокЗадач.ТекущиеДанные;
	Если Задача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, Задача);
	
	Если ЕстьПравоВыполненияЗадачи(ПараметрыКоманды.Правило) Тогда
		ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокЗадачЗавершитьЗадачу Тогда
		СтандартнаяОбработка = Ложь;
		ЗавершитьЗадачу(Элементы.СписокЗадач.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоВыполненияЗадачи(Правило)
	
	Возврат КалендарьБухгалтера.ПравоВыполненияЗадачи(Правило);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗадачиВАрхиве(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
	
	ОткрытьФорму("РегистрСведений.ЗадачиБухгалтера.Форма.ЗадачиВАрхиве", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьЗадачуВАрхив(Команда)
	
	Задача = Элементы.СписокЗадач.ТекущиеДанные;
	Если Задача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЗадачу(Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/ОбщаяКоманда.ОткрытьФорму1СОтчетностьНаОтчетах");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементСпискаЗадач(Форма)
	
	Форма.СписокЗадачПустой = СписокЗадачПустой(Форма.Организация, Форма.ТекущаяДата);
	УправлениеФормой(Форма);
	
	ЭлементСписка = Форма.Элементы.СписокЗадач;
	Если Форма.Элементы.ГруппаЗадачиБухгалтера.Видимость И ЭлементСписка.Видимость Тогда
		ЭлементСписка.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// СписокЗадачОрганизация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокЗадачОрганизация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Организация", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.Организации.ПустаяСсылка());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Необходимость использования поля "Правило" связана с некорректным определением ширины группы колонок в веб-клиенте
	// для групп с вариантом группировки "В ячейке", если последнее поле в колонке не является ссылочным.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокЗадачПравило");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;

	ПараметрВыбораОтборПоОрганизации 	= Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации 			= Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПозицияПервойНевыполнненойЗаписи(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусСдано", ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой());
	
	ОтборПоОрганизации = ОтборПоОрганизации(Организация);
	
	Если ОтборПоОрганизации <> Неопределено Тогда
	
		Запрос.УстановитьПараметр("Организация", ОтборПоОрганизации);
	
	Иначе
		// Если организация недоступна, или не выбрана, то устанавливаем в отбор массив организаций доступных текущему пользователю с учетом RLS
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь));
	
	КонецЕсли; 
	
	// Текст запроса аналогичен тому, который выполняется в динамическом списке СписокЗадач,
	// кроме неиспользуемых для позиционирования полей и таблиц.
	// Порядок полей упорядочивания также совпадает с настройками динамического списка.
	// При изменении запроса в списке необходимо вносить симметричные изменения.
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЕСТЬNULL(Организации.Наименование, """") КАК ОрганизацияНаименование,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЕСТЬNULL(Требования.Владелец.РеквизитДопУпорядочивания, 0) КАК РегулярнаяЗадачаПорядок,
	|	ЕСТЬNULL(Требования.Действие, ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ПустаяСсылка)) КАК Действие,
	|	ЕСТЬNULL(Требования.Действие.Порядок, 0) КАК ДействиеПорядок,
	|	ЕСТЬNULL(Требования.РеквизитДопУпорядочивания, 0) КАК ПравилоПорядок,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ЗадачиБухгалтера.Правило = Требования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ЗадачиБухгалтера.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)
	|	И ЗадачиБухгалтера.Организация В(&Организация)
	|	И ЗадачиБухгалтера.Статус <> &СтатусСдано
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.Срок,
	|	ДействиеПорядок,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	РегулярнаяЗадачаПорядок,
	|	ПравилоПорядок,
	|	Наименование,
	|	ОрганизацияНаименование";
	
	// Выполняем запрос в привилегированном режиме для увеличения скорости за счет отключения RLS
	// При этом ограничение доступа к данным выполняем в процессе установки параметра "Организация"
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		ЗначенияКлюча = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
		
		Возврат РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ЗначенияКлюча);
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Не Форма.СписокЗадачАктуален Тогда
		
		// Показываем индикатор ожидания заполнения списка задач
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Ложь;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Ложь;
		Элементы.ГруппаОжидание.Видимость           = Истина;
		
	ИначеЕсли Форма.СписокЗадачПустой Тогда
		
		// Все задачи выполнены
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Ложь;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Истина;
		Элементы.ГруппаОжидание.Видимость           = Ложь;
		
	Иначе
		
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Истина;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Ложь;
		Элементы.ГруппаОжидание.Видимость           = Ложь;
		
		КлючЗаписи = ПозицияПервойНевыполнненойЗаписи(Форма.Организация);
		Если ЗначениеЗаполнено(КлючЗаписи) И НЕ КлючЗаписи.Пустой()  Тогда
			Элементы.СписокЗадач.ТекущаяСтрока = КлючЗаписи;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюДатуФормыНаСервере()
	
	ДатаСеанса = ОбщегоНазначенияБП.ТекущаяДатаНаСервере();
	
	ТекущаяДата = ДатаСеанса;
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	
КонецПроцедуры

&НаСервере
Функция НастройкиОформленияСпискаЗадач()
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		Неопределено, -1, НСтр("ru = 'Просрочено'"), ЦветаСтиля.ВажноеСобытие, Ложь);
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		Неопределено, -1, " ", , Истина);
		
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		0, 0, НСтр("ru = 'Сегодня'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		1, 1, НСтр("ru = 'Завтра'"), ЦветаСтиля.ПриближающеесяСобытие);// См. ниже исключение для ОтправкаОтчетаОграничена
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			РазностьДат, НСтр("ru = 'день,дня,дней'"));
		ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
			РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		7, 13, НСтр("ru = 'Осталась неделя'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		14, 18, НСтр("ru = 'Осталось 2 недели'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		19, 22, НСтр("ru = 'Осталось 3 недели'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		23, 34, НСтр("ru = 'Остался месяц'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		35, Неопределено, " ");
	
	Подключена1СОтчетность = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
	
	ОписаниеПараметраДанных = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
	ОписаниеПараметраДанных.Параметр = Новый ПараметрКомпоновкиДанных("Подключена1СОтчетность");
	
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра(
		ОписаниеПараметраДанных.Параметр,
		Подключена1СОтчетность);
		
	Если Подключена1СОтчетность Тогда
		
		// Отчеты, не принимаемые в электронном виде, подсвечиваем особо, когда срок уже истекает, но отчет еще не сдан.
		// Также для них выводим текст.
		ОформляемыеПоля = Новый Структура;
		ОформляемыеПоля.Вставить("ОтправкаОтчетаОграничена", НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить());
		ОформляемыеПоля.Вставить("ОсталосьДней",             НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить());
		
		// Общие для всех полей: не сданные отчеты с ограниченными способами отправки
		Для Каждого ОформляемоеПоле Из ОформляемыеПоля Цикл
			
			ЭлементУсловногоОформления = ОформляемоеПоле.Значение;
			
			ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЭлементПоля.Использование = Истина;
			ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных(ОформляемоеПоле.Ключ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭлементУсловногоОформления.Отбор,
				"ОтправкаОтчетаОграничена",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭлементУсловногоОформления.Отбор,
				"Статус",
				ВидСравненияКомпоновкиДанных.Равно,
				"");
			
		КонецЦикла;
		
		// Особенности:
		// - ОтправкаОтчетаОграничена - текст
		ОформляемыеПоля.ОтправкаОтчетаОграничена.Оформление.УстановитьЗначениеПараметра(
			"Текст",
			ИнтерфейсыВзаимодействияБРОКлиентСервер.КраткоеПредставлениеОграниченияОтправкиОтчета());
			
		// - ОсталосьДней - выделяем цветом, если осталось мало времени
		ОформляемыеПоля.ОсталосьДней.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПриближающеесяСобытие);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОформляемыеПоля.ОсталосьДней.Отбор,
			"ОсталосьДней",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			1);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОформляемыеПоля.ОсталосьДней.Отбор,
			"ОсталосьДней",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			ЗадачиБухгалтераКлиентСервер.СрокПредупрежденияПриОграниченииСпособовОтправки());
		
	КонецЕсли;
	
	ПоложительныйРезультатЗадачи = Новый СписокЗначений;
	ПоложительныйРезультатЗадачи.Добавить(ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой());
	ПоложительныйРезультатЗадачи.Добавить(Строка(Перечисления.СостоянияБанковскихДокументов.Оплачено));
	ПоложительныйРезультатЗадачи.Добавить(НСтр("ru= 'Выплачено'"));
	
	ОтрицательныйРезультатЗадачи = Новый СписокЗначений;
	ОтрицательныйРезультатЗадачи.Добавить(НСтр("ru = 'Не сдано'"));
	ОтрицательныйРезультатЗадачи.Добавить(НСтр("ru = 'Сдано, требует уточнения'"));
	ОтрицательныйРезультатЗадачи.Добавить(НСтр("ru = 'Сдан частично'"));
	ОтрицательныйРезультатЗадачи.Добавить(НСтр("ru = 'Не принято в обработку'"));
	ОтрицательныйРезультатЗадачи.Добавить(НСтр("ru = 'Не принято'"));
	ОтрицательныйРезультатЗадачи.Добавить(Строка(Перечисления.СостоянияБанковскихДокументов.Отклонено));
	
	// Вывод статуса задачи, если он есть.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("Статус");
	
	// При отсутствии статуса поле со статусом не выводится.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("Статус");
	
	// Вывод статуса задачи с положительным результатом (Сдано/Оплачено).
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ПравоеЗначение = ПоложительныйРезультатЗадачи;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("Статус");
	
	// При наличии статуса информация по остатку срока выводится бледно.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТусклоСерый);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	// При положительном результате поле с остатком срока не выводится.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ПравоеЗначение = ПоложительныйРезультатЗадачи;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	// Отрицательный результат задачи выделяется красным.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ВажноеСобытие);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ПравоеЗначение = ОтрицательныйРезультатЗадачи;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("Статус");
	
	Возврат НастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных, НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено, ЭтоПроверка = Неопределено)
	
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	Если ЦветТекста <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	КонецЕсли;
	
	Если НижняяГраница <> Неопределено Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДней");
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		ЭлементОтбора.ВидСравнения   = ?(НижняяГраница = ВерхняяГраница, 
			ВидСравненияКомпоновкиДанных.Равно, 
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	КонецЕсли;
	Если ВерхняяГраница <> Неопределено 
		И НижняяГраница <> ВерхняяГраница Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДней");
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	КонецЕсли;
	Если ЭтоПроверка <> Неопределено Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Действие");
		ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыДействийКалендаряБухгалтера.Проверка;
		ЭлементОтбора.ВидСравнения   = ?(ЭтоПроверка, 
			ВидСравненияКомпоновкиДанных.Равно, 
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборПоОрганизации(Знач Организация)
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Если ЗначениеЗаполнено(Организация) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение") Тогда
		// Добавляем пустую ссылку для отображения общих задач, но только для головных организаций
		ОтборПоОрганизации = Новый СписокЗначений;
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации.Добавить(Организация);
		КонецЕсли;
		ОтборПоОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());
	Иначе
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации = Организация;
		Иначе
			ОтборПоОрганизации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокЗадачПустой(Знач Организация, Знач ТекущаяДата)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Уведомление)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ЗадачиБухгалтера.Организация В(&Организации)";
		
		Запрос.УстановитьПараметр("Организации", ОтборПоОрганизации(Организация));
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СписокЗадачПустой = Запрос.Выполнить().Пустой();
	
	Возврат СписокЗадачПустой;
	
КонецФункции

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)

	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS().
		// Копируем их в новых массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Задача)
	
	Если НЕ ЕстьПравоВыполненияЗадачи(Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, Задача);
	
	Если ТипЗнч(ПараметрыКоманды.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		ДополнитьПараметрамиРегулярногоПлатежа(ПараметрыКоманды);
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтераКлиент.ОтметитьЗадачуКакВыполненную(ПараметрыКоманды, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрамиРегулярногоПлатежа(ПараметрыКоманды)
	
	// Проверим есть ли платеж по данному правилу.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		ПараметрыКоманды.Организация, ПараметрыКоманды.Правило, ПараметрыКоманды.ПериодСобытия);
		
	Если ШаблонПравила <> Неопределено
		И ШаблонПравила.ПериодСобытия = ПараметрыКоманды.ПериодСобытия Тогда
		ПараметрыКоманды.Вставить("Оплачено", Истина);
	Иначе
		ПараметрыКоманды.Вставить("Оплачено", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
