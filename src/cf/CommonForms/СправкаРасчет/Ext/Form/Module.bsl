// СправкаРасчет допускает настройку группировок или выбор показателей пользователем в зависимости от
// вида отчета, который работает через эту общую форму.
// Возможность настройки группировок указывается в манифесте отчета параметром ИспользоватьНастройкуГруппировок,
// выбор показателей параметром ИспользоватьНастройкуПоказателей. 
//
// Группировки заполняются из настроек СКД отчета. 
// Заполнение группировок см. ЗаполнитьГруппировкиНаФорме()
//
// Запретить отключение группировки пользователем возможно указанием параметра ОбязательныеГруппировки в манифесте,
// в котором нужно указать массив имен обязательных группировок. Так же можно запретить отключение некоторых показателей 
// через параметр ОбязательныеПоказатели с массивом имен обязательных полей выбора.
//
// При формировании или закрытии отчета данные по группировкам формы сохраняются в пользовательские 
// настройки СКД. см. ПрименитьГруппировки. 
// При открытии и формировании отчета через ЗакрытиеМесяца, применяются стандартные настройки. При открытии отчета
// через меню, отчет открывается с записанными пользовательскими настройками.

&НаКлиенте
Перем СуммируемыеЯчейки;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(ЭтотОбъект); // См. СправкиРасчетыКлиентСервер.ИмяОтчета
	
	НастроитьОтчетПоМанифесту();
	
	СправкиРасчеты.ИнициализироватьФорму(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ИспользоватьНастройкуПоказателей Тогда
		СправкиРасчетыКлиентСервер.НастроитьНаборПоказателейОтчета(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьФормуИзПользовательскихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СправкиРасчетыКлиент.НачатьОжиданиеФормированияОтчетаПриОткрытии(ЭтотОбъект, ОповещениеЗавершитьФормированиеОтчета());
	// См. далее ЗавершитьФормированиеОтчета()
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СправкиРасчетыКлиент.ПередСохранениемНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ПодготовитьНастройкиВыполненияОтчета(Настройки);
	
	Настройки.ДополнительныеСвойства.Вставить("НаборПоказателейОтчета", НаборПоказателейОтчета);
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	СправкиРасчеты.ПрименитьЗагруженныеПользовательскиеНастройки(ЭтотОбъект, Настройки);
	
	СправкиРасчетыКлиентСервер.НастроитьНаборПоказателейОтчета(ЭтотОбъект);
	
	ЗаполнитьФормуИзПользовательскихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Организация, КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СправкиРасчетыКлиент.НачатьВыборПериода(
		ЭтотОбъект,
		СтандартнаяОбработка,
		Новый ОписаниеОповещения("НастроитьПериод", ЭтотОбъект));
		
	// Может быть вызван НастроитьПериод() для контекстной передачи управления на сервер
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СправкиРасчетыКлиент.УстановитьТекущийПериод(
		ЭтотОбъект,
		СтандартнаяОбработка,
		Новый ОписаниеОповещения("НастроитьПериод", ЭтотОбъект));
		
	// Может быть вызван НастроитьПериод() для контекстной передачи управления на сервер
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериод(ТребуетсяВызовСервера, ДополнительныеПараметры) Экспорт // обработчик оповещения
	
	НастроитьПериодНаСервере(ТребуетсяВызовСервера);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПериодНаСервере(Знач ТребуетсяВызовСервера)
	
	СправкиРасчеты.НастроитьПериод(ЭтотОбъект, ТребуетсяВызовСервера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если СправкиРасчетыКлиентСервер.ОрганизацияВыбранаПовторно(Организация, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СправкиРасчеты.ОрганизацияПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

#Область СписокОтборы

// Важно: поле на форме должно иметь предопределенное имя "Отборы"

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ПараметрыВыбораЗначенияОтбора());
	
КонецПроцедуры

#КонецОбласти

#Область ФлагиОформления

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписокГруппировки

&НаКлиенте
Процедура ГруппировкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяГруппировка = Элементы.Группировки.ТекущиеДанные;
	Отказ = ТекущаяГруппировка.Обязательная;
	
КонецПроцедуры

#Область КомандыОтрицательныеОстатки

&НаКлиенте
Процедура Подключаемый_ОтрицательныеОстаткиСкрытьИнформацию(Элемент)
	
	ИнформированиеОтрицательныеОстаткиКлиент.СкрытьИнформацию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтрицательныеОстаткиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнформированиеОтрицательныеОстаткиКлиент.ОткрытьКонтрольОтрицательныхОстатков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокумента

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		ИмяОбработчикаВыделенаОбластьЯчеек());
	
КонецПроцедуры

#Область РасчетСуммыВыделенныхЯчеек

&НаКлиенте
Функция ИмяОбработчикаВыделенаОбластьЯчеек()
	Возврат "Подключаемый_ВыделенаОбластьЯчеек";
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыделенаОбластьЯчеек()
	
	ТребуетсяВызовСервера = БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		СуммаВыделенныхЯчеек,
		Результат,
		Элементы.Результат,
		СуммируемыеЯчейки);
	
	Если ТребуетсяВызовСервера Тогда
		РассчитатьСуммуВыделенныхЯчеекНаСервере(СуммируемыеЯчейки);
	КонецЕсли;
	
	ОтключитьОбработчикОжидания(ИмяОбработчикаВыделенаОбластьЯчеек());
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВыделенныхЯчеекНаСервере(СуммируемыеЯчейки)
	
	// Процедура БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента() вносит изменения
	// в содержимое параметра СуммируемыеЯчейки. Поэтому параметр процедуры СуммируемыеЯчейки не должен передаваться по значению.
	СуммаВыделенныхЯчеек = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат,
		СуммируемыеЯчейки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ФормированиеОтчета

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьФормированиеОтчета();
	
	СправкиРасчетыКлиент.НачатьОжиданиеФормированияОтчета(ЭтотОбъект, ДлительнаяОперация, ОповещениеЗавершитьФормированиеОтчета());
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеОтчета()
	
	ПодготовитьНастройкиВыполненияОтчета(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Возврат СправкиРасчеты.НачатьФормированиеОтчета(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ОповещениеЗавершитьФормированиеОтчета()
	
	Возврат Новый ОписаниеОповещения("ЗавершитьФормированиеОтчета", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
// Обработчик оповещения, вызывается по окончании формирования отчета для контекстной передачи управления на сервер
Процедура ЗавершитьФормированиеОтчета(АдресРезультата, НеиспользуемыйПараметр) Экспорт // обработчик оповещения
	
	ЗавершитьФормированиеОтчетаНаСервере(АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьФормированиеОтчетаНаСервере(Знач АдресРезультата)
	
	СправкиРасчеты.ЗавершитьФормированиеОтчета(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры


#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	БухгалтерскиеОтчетыКлиентСервер.ПоказатьНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки(Команда)
	
	БухгалтерскиеОтчетыКлиентСервер.СкрытьНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КешКодаБухгалтерскиеОтчеты

&НаКлиенте
Функция ПараметрыВыбораЗначенияОтбора()
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Дата");
	ПараметрыВыбора.Вставить("Номенклатура");
	ПараметрыВыбора.Вставить("Склад");
	ПараметрыВыбора.Вставить("Организация");
	ПараметрыВыбора.Вставить("Контрагент");
	ПараметрыВыбора.Вставить("ДоговорКонтрагента");
	
	ПараметрыВыбора.Дата        = КонецПериода;
	ПараметрыВыбора.Организация = Организация;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Параметры");
	СписокПолей.Добавить("Ресурсы");
	СписокПолей.Добавить("Группировки");
	СписокПолей.Добавить("Организация");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьОтчетПоМанифесту()
	
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(ЭтотОбъект);
	Манифест = Отчеты[ИмяОтчета].ПолучитьПараметрыИсполненияОтчета();
	
	ИспользоватьНастройкуГруппировок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Манифест,
		"ИспользоватьНастройкуГруппировок",
		Ложь);
		
	ИспользоватьНастройкуПоказателей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Манифест,
		"ИспользоватьНастройкуПоказателей",
		Ложь);
		
	ИспользоватьНалоговыйПериод      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Манифест,
		"ИспользоватьНалоговыйПериод",
		Истина);
	
	ИспользоватьПериод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Манифест,
		"ИспользоватьПериод",
		Истина);
	
	Элементы.Период.Видимость = ИспользоватьПериод;
	Элементы.СтраницаГруппировки.Видимость = ИспользоватьНастройкуГруппировок;
	Элементы.СтраницаПоказатели.Видимость  = ИспользоватьНастройкуПоказателей;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНастройкиВыполненияОтчета(ПользовательскиеНастройки)
	
	ПрименитьГруппировки(ПользовательскиеНастройки);
	
КонецПроцедуры

#Область НастройкаФормы

#Область РаботаСПоказателямиОтчета

#КонецОбласти

#Область РаботаСГруппировкамиОтчета

&НаСервере
Функция НастройкиГруппировок()
	
	НастройкиГруппировок = Новый Массив;
	НастройкиГруппировок.Добавить(Группировки);
	
	Возврат НастройкиГруппировок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкиНаФорме() 
	
	// Заполнение таблицы формы Группировки из пользовательских настроек СКД, для изменения 
	// настроек пользователем. Возможность изменения группировок включается в манифесте
	// отчета флагом ИспользоватьНастройкуГруппировок.
	//
	
	Если Не ИспользоватьНастройкуГруппировок Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(ЭтотОбъект);
	СправкиРасчеты.ИнициализироватьГруппировки(НастройкиГруппировок(), Отчет.КомпоновщикНастроек, ИмяОтчета);
	Манифест  = Отчеты[ИмяОтчета].ПолучитьПараметрыИсполненияОтчета();
	
	ОбязательныеГруппировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Манифест,
		"ОбязательныеГруппировки",
		Новый Массив);
	
	Для Каждого ГруппировкаОтчета из Группировки Цикл
		ГруппировкаОтчета.Обязательная = (ОбязательныеГруппировки.Найти(ГруппировкаОтчета.Имя) <> Неопределено);
		Если ГруппировкаОтчета.Обязательная Тогда		
			ГруппировкаОтчета.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьГруппировки(ПользовательскиеНастройки)
	
	СправкиРасчеты.ПрименитьГруппировки(ПользовательскиеНастройки, НастройкиГруппировок());
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьФормуИзПользовательскихНастроек()
	
	ЗаполнитьГруппировкиНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыАктуализацияДанных

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Организация, КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Организация, КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация", Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыАктуализации.Вставить("ДатаАктуальности", ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации", КонецПериода);
	
	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыйПроцедурыАктуализацииДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Организация, КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Организация, КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Организация, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти