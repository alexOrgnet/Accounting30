#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПроверки; // см. ШтрихкодированиеИСМПКлиент.НовыеПараметрыПроверкиНаККТ - 
&НаКлиенте
Перем ВыполняемыеОперации; // см. ВыполняемыеОперации
&НаКлиенте
Перем ИмяСобытияПроверкаКМ;
&НаКлиенте
Перем МодульМенеджерОборудованияМаркировкаКлиент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Прогресс.Видимость = Ложь;
	
	ДанныеСтрокиСообщения = Новый Массив();
	ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Подготовка к проверке средствами ККТ пожалуйста, подождите...'"));
	
	Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтрокиСообщения);
	
	СобытияФормИС.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ВходящиеПараметрыПроверки, Источник)
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ИдентификаторОсновногоОбъекта = ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(
			ПараметрыПроверки).УникальныйИдентификатор;
	КонецЕсли;
	
	Если Источник = Неопределено
		Или Не (ВладелецФормы = Источник
			Или ИдентификаторОсновногоОбъекта = Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "НачалоПроверки" Тогда
		
		Если ПроверкаНачата Тогда
			Возврат;
		Иначе
			ПроверкаНачата = Истина;
		КонецЕсли;
		
		ПараметрыПроверки = ВходящиеПараметрыПроверки;
		ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
		
		Если ПараметрыПроверки.ЭлементыПроверки.Количество() = 1 Тогда
			Элементы.БуферОбмена.Высота = 2;
		КонецЕсли;
		
		НастроитьПредставление();
		
		СледующийШаг();
	
	ИначеЕсли ИмяСобытия = ИмяСобытияПроверкаКМ Тогда

		ДополнительныеПараметры         = ВходящиеПараметрыПроверки.ДополнительныеПараметры;
		ОперацииПроверкиКМ              = МодульМенеджерОборудованияМаркировкаКлиент.СписокОперацийПроверкиКМ();
		ПараметрыПроверки.ТекущийИндекс = ДополнительныеПараметры.ИндексЭлемента;

		Если ВходящиеПараметрыПроверки.Операция = ОперацииПроверкиКМ.ЗапросККТ Тогда
			ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.ЛокальнаяПроверка;
		ИначеЕсли ВходящиеПараметрыПроверки.Операция = ОперацииПроверкиКМ.ЗапросОИСМ Тогда
			ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.УдаленнаяПроверка;
		ИначеЕсли ВходящиеПараметрыПроверки.Операция = ОперацииПроверкиКМ.ПодтверждениеККТ Тогда
			ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.Подтверждение;
		Иначе
			Возврат;
		КонецЕсли;

		НастроитьПредставление();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверкаЕдинымМетодомБПО = ШтрихкодированиеИСМПКлиент.ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ();
	
	Если ПроверкаЕдинымМетодомБПО Тогда
		МодульМенеджерОборудованияМаркировкаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиент");
		ИмяСобытияПроверкаКМ = МодульМенеджерОборудованияМаркировкаКлиент.СобытиеПроверкаКМ();
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		Или ЗакрытиеОкнаРазрешено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияПоясняющийТекстДлительнойОперацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьШтриховойКодВБуферОбмена" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, КодМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрерватьОперацию(Команда)
	
	ПрерываниеОперации();
	Элементы.ПрерватьОперацию.Доступность = Ложь;
	Элементы.ПрерватьОперацию.Заголовок   = НСтр("ru = 'Отменено'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеОповещений

&НаКлиенте
Процедура ПроверкаКМСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	Если ДанныеОтвета.Результат Тогда
		
		Для Каждого РезультатОперации Из ДанныеОтвета.РезультатыОпераций Цикл
			
			ДополнительныеПараметры = РезультатОперации.ДополнительныеПараметры;
			РезультатПроверки       = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ДополнительныеПараметры.ИдентификаторЭлемента);
			
			Если РезультатОперации.Результат Тогда
				
				РезультатПроверки.КодМаркировкиПроверен = РезультатОперации.КодМаркировкиПроверен;
				РезультатПроверки.РезультатПроверки     = РезультатОперации.РезультатПроверки;
				РезультатПроверки.РезультаПроверкиОИСМ  = РезультатОперации.РезультатПроверкиОИСМ;
				РезультатПроверки.СтатусТовара          = РезультатОперации.СтатусТовара;
				РезультатПроверки.ПодтвержденНаККТ      = Истина;
				РезультатПроверки.КодРезультатаПроверки = РезультатОперации.КодРезультатаПроверкиОИСМ;
				РезультатПроверки.КодОбработкиЗапроса   = РезультатОперации.КодОбработкиЗапроса;
				РезультатПроверки.ПредставлениеРезультатаПроверки = РезультатОперации.РезультатПроверкиОИСМПредставление;
				
			Иначе
				
				РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	
	Иначе
		
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ЭлементыПроверки.Количество();
	
	СледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальнаяПроверкаСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование
		И ВыходныеПараметры <> Неопределено Тогда
		
		ДанныеРезультата = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеРезультата.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если Не ДанныеОтвета.Результат
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеРезультата.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Локальная проверка средствами ККТ'"),
			ПараметрыПроверки,
			ВыходныеПараметры.ЗапросXML,
			СтрСоединить(ДанныеРезультата, Символы.ПС));
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.КодМаркировкиПроверен = ВыходныеПараметры.КодМаркировкиПроверен;
		РезультатЭлементаПроверки.РезультатПроверки     = ВыходныеПараметры.РезультатПроверки;
		ТекущаяОперация                                 = ВыполняемыеОперации.УдаленнаяПроверка;
	
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки         = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	ИнтервалСледующегоШага    = Неопределено;
	
	Если ЭлементПроверки.ПолученРезультатЗапросаКМ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ДанныеДляЛогирования = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеДляЛогирования.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если (ДанныеОтвета.Результат = Ложь Или ДанныеОтвета.Результат = 1)
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеДляЛогирования.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		Если ДанныеДляЛогирования.Количество() Тогда
			ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
				НСтр("ru = 'Проверка статуса товара ОИСМ средствами ККТ'"),
				ПараметрыПроверки,,
				СтрСоединить(ДанныеДляЛогирования, Символы.ПС));
			ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.РезультаПроверкиОИСМ = ВыходныеПараметры.РезультатПроверкиОИСМ;
		РезультатЭлементаПроверки.СтатусТовара         = ВыходныеПараметры.СтатусТовара;
		РезультатЭлементаПроверки.КодРезультатаПроверки           = ВыходныеПараметры.КодРезультатаПроверкиОИСМ;
		РезультатЭлементаПроверки.ПредставлениеРезультатаПроверки = ВыходныеПараметры.РезультатПроверкиОИСМПредставление;
		РезультатЭлементаПроверки.КодОбработкиЗапроса             = ВыходныеПараметры.КодОбработкиЗапроса;
		
		Если ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Получен")
			Или ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.НеМожетБытьПолучен") Тогда
			
			ТекущаяОперация                           = ВыполняемыеОперации.Подтверждение;
			ЭлементПроверки.ПолученРезультатЗапросаКМ = Истина;
			
		ИначеЕсли ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается") Тогда
		
			Если РезультатЭлементаПроверки.ПропуститьОжиданиеОтветаОИСМ Тогда
				ТекущаяОперация = ВыполняемыеОперации.Подтверждение;
			Иначе
				ИнтервалСледующегоШага = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки         = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки       = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийШаг(ИнтервалСледующегоШага);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеКодаМаркировкиНаККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстОшибки = Неопределено;
		
		Если Не ДанныеОтвета.Результат Тогда
			ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Подтверждение кода маркировки при выбытии'"),
			ПараметрыПроверки,
			ЭлементПроверки.ИдентификаторЗапроса,
			ТекстОшибки);
		
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.ПодтвержденНаККТ = Истина;
		
	Иначе
		
		РезультатЭлементаПроверки.ТекстОшибки   = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки  = Истина;
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийКод();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессПолученияИдентификатораГИСМТ(Прогресс, ПараметрыПроверки) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Прогресс <> Неопределено Тогда
		
		СтруктураПрогресса = Прогресс.Прогресс;
		ПроцентВыполнения = СтруктураПрогресса.Процент;
		
		// процент выполнения - количество обработанных объектов
		Если ПроцентВыполнения > 0 Тогда
			ПараметрыПроверки.ТекущийИндекс = ПроцентВыполнения - 1;
		Иначе
			ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ЭлементыПроверки.Количество() - 1;
		КонецЕсли;
		
		НастроитьПредставление();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИдентификатораГИСМТЗавершение(Результат, ПараметрыПроверки) Экспорт
	
	ДанныеОтвета = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстОшибки = Неопределено;
		МассивОшибок = Новый Массив;
		
		Для Каждого СтрокаДанныхОтвета Из ДанныеОтвета Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанныхОтвета.Значение.ОписаниеОшибки) Тогда
				МассивОшибок.Добавить(СтрокаДанныхОтвета.Значение.ОписаниеОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Получение идентификатора розничной продажи ГИС МТ'"),
			ПараметрыПроверки,,
			ТекстОшибки);
		
		ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Для Каждого СтрокаДанныхОтвета Из ДанныеОтвета Цикл
		
		НайденнаяСтрока = Неопределено;
		
		Для Каждого СтрокаЭлементовПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
			
			Если СтрокаЭлементовПроверки.ПолныйКодМаркировки = СтрокаДанныхОтвета.Ключ Тогда
				НайденнаяСтрока = СтрокаЭлементовПроверки;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанныхОтвета.Значение.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ТекущаяОперация                 = ВыполняемыеОперации.ПолучениеТокенаГИСМТ;
			ПараметрыПроверки.ТекущийИндекс = 0;
			СледующийШаг();
			
			Возврат;
			
		КонецЕсли;
		
		Если СтрокаДанныхОтвета.Значение.ОтсутствуютCDNПлощадки Тогда
			
			ТекущаяОперация                 = ВыполняемыеОперации.ОбновлениеCDNПлощадок;
			ПараметрыПроверки.ТекущийИндекс = 0;
			СледующийШаг();
			
			Возврат;
			
		КонецЕсли;
		
		ДанныеРазрешения = СтрокаДанныхОтвета.Значение;
		НайденнаяСтрока.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеРазрешения.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
		НайденнаяСтрока.РазрешительныйРежимДатаЗапросаГИСМТ          = ДанныеРазрешения.РазрешительныйРежимДатаЗапросаГИСМТ;
		НайденнаяСтрока.РазрешительныйРежимАдресСервера              = ДанныеРазрешения.РазрешительныйРежимАдресСервера;
		НайденнаяСтрока.РазрешительныйРежимТелоЗапросаJSON           = ДанныеРазрешения.РазрешительныйРежимТелоЗапросаJSON;
		НайденнаяСтрока.РазрешительныйРежимТелоОтветаJSON            = ДанныеРазрешения.РазрешительныйРежимТелоОтветаJSON;
		НайденнаяСтрока.РазрешительныйРежимКодОтвета                 = ДанныеРазрешения.РазрешительныйРежимКодОтвета;
		
		РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(НайденнаяСтрока.ИдентификаторЭлемента);
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
			
			РезультатЭлементаПроверки.ПолученИдентификаторЗапросаГИСМТ = ЗначениеЗаполнено(НайденнаяСтрока.РазрешительныйРежимИдентификаторЗапросаГИСМТ);
			
			Если СтрокаДанныхОтвета.Значение.ЧастичноеВыбытиеОстаток <> Неопределено И
				НайденнаяСтрока.Количество > СтрокаДанныхОтвета.Значение.ЧастичноеВыбытиеОстаток Тогда
				
				ТекстОшибкиОстатокВКеге = СтрШаблон(
					НСтр("ru = 'Остаток в кеге по данным ГИС МТ: %1 л., требуется: %2 л.'"),
					СтрокаДанныхОтвета.Значение.ЧастичноеВыбытиеОстаток,
					НайденнаяСтрока.Количество);
				
				РезультатЭлементаПроверки.ТекстОшибкиГИСМТ    = ТекстОшибкиОстатокВКеге;
				ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = ТекстОшибкиОстатокВКеге;
				ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
				ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Не НайденнаяСтрока.АварийныйРежим Тогда
			
			РезультатЭлементаПроверки.ТекстОшибкиГИСМТ   = СтрокаДанныхОтвета.Значение.ОписаниеОшибки;
			ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ = СтрокаДанныхОтвета.Значение.ОписаниеОшибки;
			ПараметрыПроверки.Результат.ЕстьОшибки       = Истина;
			
			ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
			
		КонецЕсли;
		
		РезультатЭлементаПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
		РезультатЭлементаПроверки.ОтображатьОшибки             = Ложь;
		
	КонецЦикла;
	
	Если ПроверкаЕдинымМетодомБПО Тогда
		ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО;
	Иначе
		ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка;
	КонецЕсли;
	
	ПараметрыПроверки.ТекущийИндекс = 0;

	СледующийШаг();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнениеШагаПроверки()
	
	Если ПараметрыПроверки.ЭлементыПроверки.Количество() = 0
		Или ПараметрыПроверки.ТекущийИндекс > ПараметрыПроверки.ЭлементыПроверки.ВГраница()
		Или ЗначениеЗаполнено(ПараметрыПроверки.Результат.ТекстОшибки)
		Или ЗначениеЗаполнено(ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ)
		Или (ПараметрыПроверки.ПерерватьОперацию
			И ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка) Тогда
		
		ОбработкаРезультатаПроверкиСредствамиККТ();
		
		ЗакрытьОкно();
		
		Если ПараметрыПроверки.ПерерватьОперацию Тогда
		
			Если Не ПараметрыПроверки.ЭтоСканирование Тогда
				ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			КонецЕсли;
			
		ИначеЕсли Не ПроверкаСредствамиККТВыполненаСОшибками() Тогда
			
			Если Не ПараметрыПроверки.ЭтоСканирование Тогда
				ПараметрыПроверки.Результат.ВыполнитьФискализацию = Истина;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
		КонецЕсли;
		
		Возврат;
	
	КонецЕсли;
	
	НастроитьПредставление();
	
	Если ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО Тогда
		
		ПроверкаКМСредствамиККТЕдинымМетодомБПО(ПараметрыПроверки);
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
		
		ЛокальнаяПроверкаИОтправкаЗапроса();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
		
		ПолучениеРезультатаУдаленнойПроверки();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
		
		ПодтверждениеКодаМаркировки();
	
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ Тогда
		
		ПроверкаИдентификатораГИСМТПоКодуМаркировки();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ Тогда
	
		ПолучениеТокенаГИСМТ();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ОбновлениеCDNПлощадок Тогда
		
		ОбновлениеCDNПлощадокГИСМТ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКМСредствамиККТЕдинымМетодомБПО(ПараметрыПроверки)
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	МодульОборудованиеЧекопечатающиеУстройстваКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
	ПараметрыПроверкиКМ = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПроверкиКМ();
	ПараметрыПроверкиКМ.ОжидатьПолученияОтветаПроверкиКМ = (Не ПараметрыПроверки.ПропускатьПроверкуСредствамиККТ);
	
	ТекущийИндекс = -1;
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
		Если Не ШтрихкодированиеИСМПКлиент.ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента]; // см. НовыйРезультатПроверкиЭлементаСредствамиККТ
		
		ПараметрыЗапросаКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
		ПараметрыЗапросаКМ.ИдентификаторЗапроса            = ЭлементПроверки.ИдентификаторЗапроса;
		ПараметрыЗапросаКМ.КонтрольнаяМарка                = ЭлементПроверки.ПолныйКодМаркировки;
		ПараметрыЗапросаКМ.ПланируемыйСтатусТовара         = ЭлементПроверки.ПланируемыйСтатусТовара;
		ПараметрыЗапросаКМ.ЗапросРазрешенияПродажиКМ       = РезультатПроверки.ТребуетсяРазрешительныйЗапросГИСМТ;
		ПараметрыЗапросаКМ.ИдентификаторЗапросаРазрешения  = ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
		ПараметрыЗапросаКМ.ВремяЗапросаРазрешения          = ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ;
		ПараметрыЗапросаКМ.Наименование                    = ЭлементПроверки.ПредставлениеНоменклатуры;
		ПараметрыЗапросаКМ.ИгнорироватьРезультатПроверкиКМ = Истина;
		ПараметрыЗапросаКМ.ДополнительныеПараметры         = Новый Структура;
		ПараметрыЗапросаКМ.ДополнительныеПараметры.Вставить("ИдентификаторЭлемента", ЭлементПроверки.ИдентификаторЭлемента);
		ПараметрыЗапросаКМ.ДополнительныеПараметры.Вставить("ИндексЭлемента",        ТекущийИндекс);
		ПараметрыЗапросаКМ.АдресСервераЗапросаРазрешения  = ЭлементПроверки.РазрешительныйРежимАдресСервера;
		ПараметрыЗапросаКМ.ТекстЗапросаРазрешения         = ЭлементПроверки.РазрешительныйРежимТелоЗапросаJSON;
		ПараметрыЗапросаКМ.КодОтветаРазрешения            = ЭлементПроверки.РазрешительныйРежимКодОтвета;
		ПараметрыЗапросаКМ.РезультатЗапросаРазрешения     = ЭлементПроверки.РазрешительныйРежимТелоОтветаJSON;
		
		Если РезультатПроверки.ТребуетсяРазрешительныйЗапросГИСМТ Тогда
		
			РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
			РезультатПроверки.ОтображатьОшибки             = Ложь;
			
		КонецЕсли;
		
		Если ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
			И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
			
			ПараметрыЗапросаКМ.Количество                    = ЭлементПроверки.Количество;
			ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр");
			
		Иначе
			
			ПараметрыЗапросаКМ.Количество = 1;
			
			Если ЭлементПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
				
				GTINВBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементПроверки.СоставКодаМаркировки.GTIN);
				
				ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука");
				ПараметрыЗапросаКМ.ЗапросПроверкиКМСредствамиККТ = Ложь;
				ПараметрыЗапросаКМ.КонтрольнаяМарка              = GTINВBase64;
				
			Иначе
				
				ПараметрыЗапросаКМ.ДробноеКоличество.Числитель   = ЭлементПроверки.ЧастичноеВыбытиеКоличество;
				ПараметрыЗапросаКМ.ДробноеКоличество.Знаменатель = ЭлементПроверки.ЕмкостьПотребительскойУпаковки;
				ПараметрыЗапросаКМ.КодЕдиницыИзмерения           = ЭлементПроверки.КодЕдиницыИзмерения;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка)
			И ЭлементПроверки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			РезультатПроверки.ТребуетсяПолныйКодМаркировки = Истина;
			ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку  = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыПроверки.ЭтоСканирование Тогда
			
			ИдентификаторСессии = МенеджерОборудованияИСКлиент.СессияПроверкиКодовМаркировки(ПараметрыПроверки.ИдентификаторУстройства);
			
			Если ИдентификаторСессии <> Неопределено Тогда
				
				РезультатПроверки = МенеджерОборудованияИСКлиент.РезультатПроверкиКодаМаркировки(
					ПараметрыПроверки.ИдентификаторУстройства,
					ИдентификаторСессии,
					ПараметрыЗапросаКМ);
				
				Если РезультатПроверки <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыПроверкиКМ.ЗапросыКМ.Добавить(ПараметрыЗапросаКМ);
		
	КонецЦикла;
	
	Если ПараметрыПроверкиКМ.ЗапросыКМ.Количество() Тогда
	
		ПроверкаКМСредствамиККТЗавершение = Новый ОписаниеОповещения(
			"ПроверкаКМСредствамиККТЗавершение",
			ЭтотОбъект,
			ПараметрыПроверки);
		
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПроверкуКМ(
			ПроверкаКМСредствамиККТЗавершение,
			ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор,
			ПараметрыПроверки.ИдентификаторУстройства,
			ПараметрыПроверкиКМ);
			
	Иначе
		
		ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ЭлементыПроверки.Количество();
		СледующийШаг();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальнаяПроверкаИОтправкаЗапроса()
	
	ЭлементПроверки   = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
	РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
	
	Если Не ШтрихкодированиеИСМПКлиент.ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
		СледующийКод();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаКМ                            = МенеджерОборудованияКлиентСервер.ПараметрыЗапросКМ();
	ПараметрыЗапросаКМ.ИдентификаторЗапроса       = ЭлементПроверки.ИдентификаторЗапроса;
	ПараметрыЗапросаКМ.КонтрольнаяМарка           = ЭлементПроверки.ПолныйКодМаркировки;
	ПараметрыЗапросаКМ.ПланируемыйСтатусТовара    = ЭлементПроверки.ПланируемыйСтатусТовара;
	ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ = (Не РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ);
	
	Если ЭлементПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		И ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
		
		ПараметрыЗапросаКМ.Количество                    = ЭлементПроверки.Количество;
		ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр");
		
	Иначе
		
		ПараметрыЗапросаКМ.Количество = 1;
		
		Если ЭлементПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			
			GTINВBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементПроверки.СоставКодаМаркировки.GTIN);
			
			ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука");
			ПараметрыЗапросаКМ.ОтправлятьНаСерверОИСМ        = Ложь;
			ПараметрыЗапросаКМ.КонтрольнаяМарка              = GTINВBase64;
			
		Иначе
			
			ПараметрыЗапросаКМ.ДробноеКоличество.Числитель   = ЭлементПроверки.ЧастичноеВыбытиеКоличество;
			ПараметрыЗапросаКМ.ДробноеКоличество.Знаменатель = ЭлементПроверки.ЕмкостьПотребительскойУпаковки;
			ПараметрыЗапросаКМ.КодЕдиницыИзмерения           = ЭлементПроверки.КодЕдиницыИзмерения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка)
		И ЭлементПроверки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
		РезультатПроверки.ТребуетсяПолныйКодМаркировки = Истина;
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку  = Истина;
		СледующийКод();
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПроверки.ЭтоСканирование Тогда
		
		ИдентификаторСессии = МенеджерОборудованияИСКлиент.СессияПроверкиКодовМаркировки(ПараметрыПроверки.ИдентификаторУстройства);
		
		Если ИдентификаторСессии <> Неопределено Тогда
			
			РезультатПроверки = МенеджерОборудованияИСКлиент.РезультатПроверкиКодаМаркировки(
				ПараметрыПроверки.ИдентификаторУстройства,
				ИдентификаторСессии,
				ПараметрыЗапросаКМ);
			
			Если РезультатПроверки <> Неопределено Тогда
				СледующийКод();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЛокальнаяПроверкаСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"ЛокальнаяПроверкаСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьЗапросКМ(
		ЛокальнаяПроверкаСредствамиККТЗавершение,
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор,
		ПараметрыЗапросаКМ,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРезультатаУдаленнойПроверки()
	
	УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьПолученияРезультатовЗапросаКМ(
		УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение,
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор,
		Неопределено,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеКодаМаркировки()
	
	ЭлементПроверки          = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс];
	ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ЭлементПроверки.ИдентификаторЗапроса;
	
	ПодтверждениеКодаМаркировкиНаККТЗавершение = Новый ОписаниеОповещения(
		"ПодтверждениеКодаМаркировкиНаККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияИСКлиент.НачатьПодтверждениеКМ(
		ПодтверждениеКодаМаркировкиНаККТЗавершение,
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки).УникальныйИдентификатор,
		ПараметрыПодтвержденияКМ,
		ПараметрыПроверки.ИдентификаторУстройства);
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеИдентификаторовЗапросаГИСМТПриРозничнойПродаже(ПараметрыСканирования, МассивКодовМаркировки)
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("ПараметрыСканирования",            ПараметрыСканирования);
	ПараметрыПроцедуры.Вставить("МассивКМ",                         МассивКодовМаркировки);
	ПараметрыПроцедуры.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое получение идентификаторов запроса ГИС МТ при розничной продаже'");
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтерфейсИСМПВызовСервера.ПолучитьСокращеннуюИнформациюПоКМДлительнаяОперация",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняемыеОперации()
	
	ВозвращаемоеЗначение= Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЛокальнаяПроверка",           "ЛокальнаяПроверка");
	ВозвращаемоеЗначение.Вставить("УдаленнаяПроверка",           "УдаленнаяПроверка");
	ВозвращаемоеЗначение.Вставить("Подтверждение",               "Подтверждение");
	ВозвращаемоеЗначение.Вставить("ПроверкаИдентификатораГИСМТ", "ПроверкаИдентификатораГИСМТ");
	ВозвращаемоеЗначение.Вставить("ПолучениеТокенаГИСМТ",        "ПолучениеТокенаГИСМТ");
	ВозвращаемоеЗначение.Вставить("ОбновлениеCDNПлощадок",       "ОбновлениеCDNПлощадок");
	ВозвращаемоеЗначение.Вставить("ПроверкаЕдинымМетодомБПО",    "ПроверкаЕдинымМетодомБПО");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура СледующийКод()
	
	ТекущаяОперация                 = ВыполняемыеОперации.ЛокальнаяПроверка;
	ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ТекущийИндекс + 1;

	СледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийШаг(Знач Интервал = Неопределено)
	
	Если Не ЗначениеЗаполнено(Интервал) Тогда
		Интервал = 0.1;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнениеШагаПроверки", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТокенаГИСМТ()
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыПроверки.ПараметрыСканирования.Организация),
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеCDNПлощадокГИСМТ()
	
	ОповещениеПриОбновленииПлощадок = Новый ОписаниеОповещения("ОбновлениеCDNПлощадокГИСМТЗавершение", ЭтотОбъект);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ОповещениеПриОбновленииПлощадок;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Организация             = ПараметрыПроверки.ПараметрыСканирования.Организация;
	ПараметрыЗапроса.Параметры               = Новый Структура("НеВыводитьОкноОжидания", Истина);
	
	ИнтерфейсИСМПКлиент.АктуализацияСпискаCDNПлощадок(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		
		РезультатАвторизации = Результат[ПараметрыПроверки.ПараметрыСканирования.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МП.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтказОтАвторизации ИЛИ ОшибкаАвторизации Тогда
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = ТекстОшибки;
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Если ПолучениеТокенаАвторизацииГИСМТВыполненоСОшибками() Тогда
			ЗакрытьОкно();
		КонецЕсли;
		
	Иначе
		
		ПараметрыПроверки.ТекущийИндекс = 0;
		ТекущаяОперация                 = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
		СледующийШаг();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеCDNПлощадокГИСМТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки И ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		ШаблонТекстаОшибки = НСтр("ru = 'Произошла ошибка при получении CDN-площадок ГИС МТ.
								  |Описание ошибки: %1.'");
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = СтрШаблон(ШаблонТекстаОшибки, Результат.ТекстОшибки);
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Если ПолучениеCDNПлощадокГИСМТВыполненоСОшибками() Тогда
			ЗакрытьОкно();
		КонецЕсли;
		
	ИначеЕсли Результат.Результат.Свойство("ОтказОтАвторизации") И Результат.Результат.ОтказОтАвторизации Тогда
		
		ПараметрыПроверки.Результат.ЕстьОшибки        = Истина;
		ПараметрыПроверки.Результат.ТекстОшибкиГИСМТ  = НСтр("ru = 'Произошла ошибка при получении CDN-площадок ГИС МТ.'");
		
		ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
		Если ПолучениеCDNПлощадокГИСМТВыполненоСОшибками() Тогда
			ЗакрытьОкно();
		КонецЕсли;
		
	Иначе
		
		ПараметрыПроверки.ТекущийИндекс = 0;
		ТекущаяОперация                 = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ;
		СледующийШаг();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраОкнаОшибкиОбновленияCDNПлощадок(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакрытьОкно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПроверкиСредствамиККТ()
	
	Для Каждого СтрокаПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
		
		Если Не ПараметрыПроверки.ЭтоСканирование
			И ШтрихкодированиеИСМПКлиент.РежимПроверкиПриСканировании()
			И Не (РезультатПроверкиСтроки.ПодтвержденНаККТ
				Или РезультатПроверкиСтроки.ТребуетсяПолныйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РезультатПроверкиСтроки.ОтображатьОшибки
			И Не РезультатПроверкиСтроки.ТребуетсяПолныйКодМаркировки Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПредставления = ШтрихкодированиеИСМПКлиентСервер.ДанныеПредставленияРезультатовПроверкиСредствамиККТ(РезультатПроверкиСтроки);
		
		Если ДанныеПредставления.ЕстьОшибки Тогда
			РезультатПроверкиСтроки.ПредставлениеВЧеке = ДанныеПредставления.ПредставлениеВЧеке;
			РезультатПроверкиСтроки.ТекстОшибки        = ДанныеПредставления.ОписаниеОшибок;
			ПараметрыПроверки.Результат.ЕстьОшибки     = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИдентификатораГИСМТПоКодуМаркировки()
	
	ЭлементыПроверки        = ПараметрыПроверки.ЭлементыПроверки;
	МассивКодовМаркировки   = Новый Массив;
	ДействуетАварийныйРежим = ИнтеграцияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	ПараметрыСканирования   = ПараметрыПроверки.ПараметрыСканирования;
	
	Если ПараметрыПроверки.ПроверятьЗапросыГИСМТ Тогда
	
		Для Каждого ЭлементПроверки Из ЭлементыПроверки Цикл
			
			Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(ЭлементПроверки.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДействуетАварийныйРежим Тогда
				
				ЭлементПроверки.РазрешительныйРежимКодОтвета = ИнтеграцияИСМПКлиентСерверПовтИсп.АварийныйРежимКодОтветаСервисаГИСМТ();
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
				
				ДатаПолученияИдентификатораРазрешительногоРежима = ?(ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ),
					ИнтеграцияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ),
					Дата(1, 1, 1));
				
				Если ДатаПолученияИдентификатораРазрешительногоРежима >= МенеджерОборудованияКлиент.ДатаСеанса() - ПараметрыПроверки.СрокДействияИдентификаторовГИСМТ Тогда
					// идентификатор не просрочен, еще действует
					
					РезультатЭлементаПроверки = ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
					РезультатЭлементаПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
					РезультатЭлементаПроверки.ОтображатьОшибки             = Ложь;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураКодаМаркировки = Новый Структура();
			ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
			ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Ложь;
			НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
				ЭлементПроверки.КодМаркировки, ЭлементПроверки.ВидПродукции,, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			СтруктураКодаМаркировки.Вставить("ПолныйКодМаркировки",          ЭлементПроверки.ПолныйКодМаркировки);
			СтруктураКодаМаркировки.Вставить("НормализованныйКодМаркировки", НормализованныйШтрихкод);
			СтруктураКодаМаркировки.Вставить("ВидПродукции",                 ЭлементПроверки.ВидПродукции);
			СтруктураКодаМаркировки.Вставить("СоставКодаМаркировки",         ЭлементПроверки.СоставКодаМаркировки);
			СтруктураКодаМаркировки.Вставить("ПредставлениеНоменклатуры",    ЭлементПроверки.ПредставлениеНоменклатуры);
			
			МассивКодовМаркировки.Добавить(СтруктураКодаМаркировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивКодовМаркировки.Количество() = 0 Тогда
		
		Если ПроверкаЕдинымМетодомБПО Тогда
			ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО;
		Иначе
			ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка;
		КонецЕсли;
		
		ПараметрыПроверки.ТекущийИндекс = 0;
		СледующийШаг();
		
	Иначе
		
		ДлительнаяОперация = НачатьПолучениеИдентификаторовЗапросаГИСМТПриРозничнойПродаже(ПараметрыПроверки.ПараметрыСканирования,
		МассивКодовМаркировки);
	
		ПолучениеИдентификатораГИСМТЗавершение = Новый ОписаниеОповещения(
			"ПолучениеИдентификатораГИСМТЗавершение",
			ЭтотОбъект,
			ПараметрыПроверки);
			
		ПрогрессПолученияИдентификатораГИСМТ = Новый ОписаниеОповещения(
			"ПрогрессПолученияИдентификатораГИСМТ",
			ЭтотОбъект,
			ПараметрыПроверки);
		
		ПараметрыОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
		ПараметрыОжидания.ТекстСообщения                 = НСтр("ru = 'Получение идентификаторов запроса ГИС МТ при розничной продаже.'");
		ПараметрыОжидания.Интервал                       = 1;
		ПараметрыОжидания.ВыводитьСообщения              = Истина;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ПрогрессПолученияИдентификатораГИСМТ;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ПолучениеИдентификатораГИСМТЗавершение, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСредствамиККТВыполненаСОшибками()
	
	Если Не ПараметрыПроверки.Результат.ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ПараметрыОткрытияФормы.ТекстОшибки               = ПараметрыПроверки.Результат.ТекстОшибки;
	ПараметрыОткрытияФормы.Организация               = ПараметрыСканирования.Организация;
	ПараметрыОткрытияФормы.ИмяФормыИсточник          = ПараметрыПроверки.ФормаОсновногоОбъекта.ИмяФормы;
	
	ПараметрыОписания = ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
	
	ПараметрыОписания.ВозможноИгнорировать = (Не ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку);
	ПараметрыОписания.ДанныеПроверкиНаККТ  = ПараметрыПроверки.Результат;
	ПараметрыОписания.ЗаголовокПродолжить  = ПараметрыПроверки.ЗаголовокКнопкиИгнорировать;
	ПараметрыОписания.ВидОперацииИСМП      = ПараметрыСканирования.ВидОперацииИСМП;
	ПараметрыОткрытияФормы.ПараметрыОшибки = ПараметрыОписания;
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		Если ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибки)
			Или ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибкиГИСМТ) Тогда
			ПараметрыОткрытияФормы.ВидПродукции = ЭлементПроверки.ВидПродукции;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОповещенияОбертки = Новый Структура;
	ПараметрыОповещенияОбертки.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	ОповещениеОЗакрытииФормыОшибки = Новый ОписаниеОповещения(
		"ОповещениеОЗакрытииФормыОшибки",
		ШтрихкодированиеИСМПКлиент,
		ПараметрыОповещенияОбертки);
	
	ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормыОшибки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучениеТокенаАвторизацииГИСМТВыполненоСОшибками()
	
	Если Не ПараметрыПроверки.Результат.ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ПараметрыОткрытияФормы.ТекстОшибки               = ПараметрыПроверки.Результат.ТекстОшибки;
	ПараметрыОткрытияФормы.Организация               = ПараметрыСканирования.Организация;
	ПараметрыОткрытияФормы.ИмяФормыИсточник          = ПараметрыПроверки.ФормаОсновногоОбъекта.ИмяФормы;
	
	ПараметрыОписания = ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
	
	ПараметрыОписания.ВозможноИгнорировать  = (Не ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку);
	ПараметрыОписания.ДанныеПроверкиНаККТ   = ПараметрыПроверки.Результат;
	ПараметрыОписания.ЗаголовокПродолжить   = ПараметрыПроверки.ЗаголовокКнопкиИгнорировать;
	ПараметрыОписания.ВидОперацииИСМП       = ПараметрыСканирования.ВидОперацииИСМП;
	ПараметрыОписания.ТокенАвторизацииГИСМТ = Истина;
	ПараметрыОткрытияФормы.ПараметрыОшибки  = ПараметрыОписания;
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		Если ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибкиГИСМТ) Тогда
			ПараметрыОткрытияФормы.ВидПродукции = ЭлементПроверки.ВидПродукции;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОповещенияОбертки = Новый Структура;
	ПараметрыОповещенияОбертки.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	ОповещениеОЗакрытииФормыОшибки = Новый ОписаниеОповещения(
		"ОповещениеОЗакрытииФормыОшибки",
		ШтрихкодированиеИСМПКлиент,
		ПараметрыОповещенияОбертки);
	
	ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормыОшибки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучениеCDNПлощадокГИСМТВыполненоСОшибками()
	
	Если Не ПараметрыПроверки.Результат.ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ПараметрыОткрытияФормы.ТекстОшибки               = ПараметрыПроверки.Результат.ТекстОшибки;
	ПараметрыОткрытияФормы.Организация               = ПараметрыСканирования.Организация;
	ПараметрыОткрытияФормы.ИмяФормыИсточник          = ПараметрыПроверки.ФормаОсновногоОбъекта.ИмяФормы;
	
	ПараметрыОписания = ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
	
	ПараметрыОписания.ВозможноИгнорировать  = (Не ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку);
	ПараметрыОписания.ДанныеПроверкиНаККТ   = ПараметрыПроверки.Результат;
	ПараметрыОписания.ЗаголовокПродолжить   = ПараметрыПроверки.ЗаголовокКнопкиИгнорировать;
	ПараметрыОписания.ВидОперацииИСМП       = ПараметрыСканирования.ВидОперацииИСМП;
	ПараметрыОписания.ЗагрузитьCDNПлощадки  = Истина;
	ПараметрыОткрытияФормы.ПараметрыОшибки  = ПараметрыОписания;
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		Если ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибкиГИСМТ) Тогда
			ПараметрыОткрытияФормы.ВидПродукции = ЭлементПроверки.ВидПродукции;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОповещенияОбертки = Новый Структура;
	ПараметрыОповещенияОбертки.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	ОповещениеОЗакрытииФормыОшибки = Новый ОписаниеОповещения(
		"ОповещениеОЗакрытииФормыОшибки",
		ШтрихкодированиеИСМПКлиент,
		ПараметрыОповещенияОбертки);
	
	ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
		ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормыОшибки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТекстДляЗаписиВЛогЗапросов(Операция, ПараметрыПроверки, ЗапросXML = Неопределено, РезультатXML = Неопределено)
	
	СтрокиЛога = Новый Массив;
	
	СтрокиЛога.Добавить(СтрШаблон(
		НСтр("ru = 'Операция: %1 (%2)'"),
		Операция,
		ПараметрыПроверки.ИдентификаторУстройства));
	
	Если ЗначениеЗаполнено(ЗапросXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Запрос:'"));
		СтрокиЛога.Добавить(ЗапросXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Результат:'"));
		СтрокиЛога.Добавить(РезультатXML);
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиЛога, Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета)
	
	Если ИнтеграцияИСМПКлиентСерверПовтИсп.РедакцияБПО() = 2 Тогда
		Если ДанныеОтвета.ВыходныеПараметры <> Неопределено
			И ТипЗнч(ДанныеОтвета.ВыходныеПараметры[0]) = Тип("Структура") Тогда
			Возврат ДанныеОтвета.ВыходныеПараметры[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат ДанныеОтвета;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПрерываниеОперации()
	
	ПараметрыПроверки.ПерерватьОперацию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОкно(РезультаЗакрытия = Ложь)
	
	ЗакрытиеОкнаРазрешено = Истина;
	Закрыть(РезультаЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПредставление()
	
	ЭлементПроверки       = ПараметрыПроверки.ЭлементыПроверки[ПараметрыПроверки.ТекущийИндекс]; 
	КодМаркировки         = ЭлементПроверки.КодМаркировки;
	КоличествоЭлементов   = ПараметрыПроверки.ЭлементыПроверки.Количество();
	НомерТекущегоЭлемента = ПараметрыПроверки.ТекущийИндекс + 1;
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
		Если Не ШтрихкодированиеИСМПКлиент.ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
			КоличествоЭлементов = КоличествоЭлементов - 1;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСтрокиСообщения = Новый Массив();
	Если ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется локальная проверка средствами КТТ кода маркировки:'"));
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется проверка статуса ОИСМ кода маркировки средствами ККТ:'"));
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется подтверждение кода маркировки на КТТ:'"));
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ
		Или ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется разрешительный запрос ГИС МТ'"));
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ОбновлениеCDNПлощадок Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется обновление CDN-площадок ГИС МТ'"));
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО Тогда
		Если ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
			ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется локальная проверка средствами КТТ кода маркировки:'"));
		ИначеЕсли ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.УдаленнаяПроверка Тогда
			ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется проверка статуса ОИСМ кода маркировки средствами ККТ:'"));
		ИначеЕсли ПараметрыПроверки.ТекущийЭтапПроверки = ВыполняемыеОперации.Подтверждение Тогда
			ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется подтверждение кода маркировки на КТТ:'"));
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиСообщения.Добавить(" ");
	ДанныеСтрокиСообщения.Добавить(Новый ФорматированнаяСтрока(КодМаркировки,,,, "СкопироватьШтриховойКодВБуферОбмена"));
	
	Если КоличествоЭлементов > 1 Тогда
		
		Элементы.Прогресс.РасширеннаяПодсказка.Заголовок = СтрШаблон(
			НСтр("ru = 'Код маркировки %1 из %2'"),
			НомерТекущегоЭлемента,
			КоличествоЭлементов);
		
		Элементы.Прогресс.Видимость = Истина;
		
		Если КоличествоЭлементов <> 0 Тогда
			Прогресс = Окр(НомерТекущегоЭлемента / КоличествоЭлементов * 100);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтрокиСообщения.Добавить(Символы.ПС);
	ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
	
	Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтрокиСообщения);
	Элементы.ПрерватьОперацию.Видимость                           = (Не ПараметрыПроверки.ЭтоСканирование И Не ПроверкаЕдинымМетодомБПО);
	
КонецПроцедуры

#КонецОбласти

ВыполняемыеОперации = ВыполняемыеОперации();