
#Область ОписаниеПеременных

&НаСервере
Перем ДобавляемыеРеквизиты;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ДанныеОбмена", ДанныеОбмена);
	Если ЗначениеЗаполнено(ДанныеОбмена) Тогда
		Данные = ПолучитьИзВременногоХранилища(ДанныеОбмена);
		Если ЭтоАдресВременногоХранилища(Данные.ОшибкиОтправкиАУСН) Тогда
			Ошибки = ПолучитьИзВременногоХранилища(Данные.ОшибкиОтправкиАУСН);
		Иначе
			Ошибки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТипЗнч(Ошибки) = Тип("ТаблицаЗначений") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Сч = 0;
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого СтрокаОшибка Из Ошибки Цикл
		ИмяЭлемента = СтрШаблон("Элемент%1", Формат(Сч, "ЧН=0; ЧГ="));
		ТипОбъекта = ТипЗнч(СтрокаОшибка.Объект);
		Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Элементы.РеквизитыФизическихЛиц.Видимость = Истина;
			НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.РеквизитыФизическихЛиц);
			НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "ФизическоеЛицоОбработкаНавигационнойСсылки");
			ОбработатьНовыйЭлемент(НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты);
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
			Или ТипОбъекта = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			ОшибкиВФормеДокумента = Новый Массив;
			ОшибкиВФормеДвижений = Новый Массив;
			ОшибкиВФормеДвиженийРасчетНДФЛ = Новый Массив;
			Для Каждого СтрокаРеквизит Из СтрокаОшибка.Реквизиты Цикл
				Если СтрНачинаетсяС(
					СтрокаРеквизит.ИмяРеквизита, ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДокумента()) Тогда
					ОшибкиВФормеДокумента.Добавить(СтрокаРеквизит);
				ИначеЕсли СтрНачинаетсяС(
					СтрокаРеквизит.ИмяРеквизита, ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ()) Тогда
					ОшибкиВФормеДвиженийРасчетНДФЛ.Добавить(СтрокаРеквизит);
				Иначе
					ОшибкиВФормеДвижений.Добавить(СтрокаРеквизит);
				КонецЕсли;
			КонецЦикла;
			Элементы.РеквизитыБанковскихОпераций.Видимость = Истина;
			Если ЗначениеЗаполнено(ОшибкиВФормеДокумента) Тогда
				ИмяЭлементаСДополнением = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаФормыДокумента());
				НовыйЭлемент = Элементы.Добавить(
					ИмяЭлементаСДополнением, Тип("ДекорацияФормы"), Элементы.РеквизитыБанковскихОпераций);
				НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "БанковскаяОперацияОткрытьФормуДокумента");
				ОбработатьНовыйЭлемент(
					НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты.Скопировать(ОшибкиВФормеДокумента));
			КонецЕсли;
			Если ЗначениеЗаполнено(ОшибкиВФормеДвиженийРасчетНДФЛ) Тогда
				ИмяЭлементаСДополнением = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаФормыДвиженийРасчетНДФЛ());
				НовыйЭлемент = Элементы.Добавить(
					ИмяЭлементаСДополнением, Тип("ДекорацияФормы"), Элементы.РеквизитыБанковскихОпераций);
				НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "БанковскаяОперацияОбработкаНавигационнойСсылки");
				ОбработатьНовыйЭлемент(
					НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты.Скопировать(ОшибкиВФормеДвиженийРасчетНДФЛ));
			КонецЕсли;
			Если ЗначениеЗаполнено(ОшибкиВФормеДвижений) Тогда
				ИмяЭлементаСДополнением = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаФормыДвиженийДокумента());
				НовыйЭлемент = Элементы.Добавить(
					ИмяЭлементаСДополнением, Тип("ДекорацияФормы"), Элементы.РеквизитыБанковскихОпераций);
				НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "БанковскаяОперацияОбработкаНавигационнойСсылки");
				ОбработатьНовыйЭлемент(
					НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты.Скопировать(ОшибкиВФормеДвижений));
			КонецЕсли;
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
			Элементы.РеквизитыОрганизации.Видимость = Истина;
			НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.РеквизитыОрганизации);
			НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "ОрганизацияОбработкаНавигационнойСсылки");
			ОбработатьНовыйЭлемент(НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты);
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			Элементы.РеквизитыВедомости.Видимость = Истина;
			НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.РеквизитыВедомости);
			НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "ВедомостьОбработкаНавигационнойСсылки");
			ОбработатьНовыйЭлемент(НовыйЭлемент, СтрокаОшибка.Объект, СтрокаОшибка.Реквизиты);
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого СтрокаОшибка Из ОшибкиОтправки Цикл
		ИмяЭлемента = СтрШаблон("%1%2", СтрокаОшибка.ИмяЭлемента, ИмяДополненияЭлементаОписаниеОшибки());
		ЭтотОбъект[ИмяЭлемента] = ЗаголовокОшибка(СтрокаОшибка.Реквизиты);
		Элементы[ИмяЭлемента].ПутьКДанным = ИмяЭлемента;
		ВысотаЭлемента = 0;
		Для Каждого РеквизитОшибки Из СтрокаОшибка.Реквизиты Цикл
			ВысотаЭлемента = ВысотаЭлемента + СтрЧислоСтрок(РеквизитОшибки.ТекстОшибки);
		КонецЦикла;
		Элементы[ИмяЭлемента].Высота = ВысотаЭлемента;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЭтоСобытиеОбменаССервисомАУСН = ИмяСобытия = ИнтеграцияАУСНКлиент.ИмяСобытияОбменССервисом();
	Если ЭтоСобытиеОбменаССервисомАУСН И Источник = ЭтотОбъект И Открыта()
		И Не ЗначениеЗаполнено(ОшибкиОтправки) Тогда
		Закрыть();
	ИначеЕсли ЭтоСобытиеОбменаССервисомАУСН И ЭтоАдресВременногоХранилища(Параметр) Тогда
		ОбновитьОшибкиНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = ИнтеграцияАУСНКлиент.ИмяСобытияИсправленыОшибкиОбмена()
		И ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") И Параметр = Истина Тогда
		ОбновитьДанныеПоФизическомуЛицу(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ВыполнитьОбменССервисом Тогда
		Оповестить(ИнтеграцияАУСНКлиент.ИмяСобытияИзмененияВОшибкахОтправки());
		ИнтеграцияАУСНКлиент.ВыполнитьОбменССервисом(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизическоеЛицоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИмяЭлемента", Элемент.Имя);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ОбъектФизическоеЛицо = НайденныеСтроки[0].Объект;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ОбъектФизическоеЛицо);
		НекорректныеРеквизиты = Новый Массив;
		Для Каждого СтрокаРеквизит Из НайденныеСтроки[0].Реквизиты Цикл
			ДанныеПоОшибке = Новый Структура;
			ДанныеПоОшибке.Вставить("ИмяРеквизита", СтрокаРеквизит.ИмяРеквизита);
			ДанныеПоОшибке.Вставить("ТекстОшибки", СтрокаРеквизит.ТекстОшибки);
			НекорректныеРеквизиты.Добавить(ДанныеПоОшибке);
		КонецЦикла;
		ПараметрыФормы.Вставить("НекорректныеРеквизиты", НекорректныеРеквизиты);
		ОткрытьФорму(
			"Справочник.ФизическиеЛица.Форма.НекорректныеРеквизиты",
			ПараметрыФормы,
			,
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИмяЭлемента", Элемент.Имя);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ОбъектОрганизация = НайденныеСтроки[0].Объект;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ОбъектОрганизация);
		ПараметрыЗакрытия = Новый Структура("ИмяЭлемента", Элемент.Имя);
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыОрганизации", ЭтотОбъект, ПараметрыЗакрытия);
		ОткрытьФорму(
			"Справочник.Организации.ФормаОбъекта",
			ПараметрыФормы,
			,
			УникальныйИдентификатор,
			,
			,
			ОбработчикЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИмяЭлемента", Элемент.Имя);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ОбъектВедомость = НайденныеСтроки[0].Объект;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ОбъектВедомость);
		ПараметрыЗакрытия = Новый Структура("ИмяЭлемента", Элемент.Имя);
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыОрганизации", ЭтотОбъект, ПараметрыЗакрытия);
		ОткрытьФорму(
			"Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаОбъекта",
			ПараметрыФормы,
			,
			УникальныйИдентификатор,
			,
			,
			ОбработчикЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИмяЭлемента", Элемент.Имя);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ОткрыватьДвиженияРегистраРасчетНДФЛ = Прав(Элемент.Имя, 2) = ИмяДополненияЭлементаФормыДвиженийРасчетНДФЛ();
		ПараметрыФормы = Новый Структура;
		ДокументСсылка = НайденныеСтроки[0].Объект;
		ПараметрыФормы.Вставить("ДокументДвижений", ДокументСсылка);
		ПараметрыЗакрытия = Новый Структура("ИмяЭлемента", Элемент.Имя);
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыДвижений", ЭтотОбъект, ПараметрыЗакрытия);
		ФормаДвижений = ОткрытьФорму(
			"Обработка.КорректировкаДвижений.Форма",
			ПараметрыФормы,
			,
			УникальныйИдентификатор,
			,
			,
			ОбработчикЗакрытия);
		Если ОткрыватьДвиженияРегистраРасчетНДФЛ Тогда
			ИмяОткрываемойСтраницы = "ГруппаРасчетыНДФЛАУСН";
		Иначе
			ИмяОткрываемойСтраницы = "ГруппаРазметкаАУСН";
		КонецЕсли;
		ОткрываемаяСтраница = ФормаДвижений.Элементы.Найти(ИмяОткрываемойСтраницы);
		Если ОткрываемаяСтраница <> Неопределено Тогда
			ФормаДвижений.ТекущийЭлемент = ОткрываемаяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяОперацияОткрытьФормуДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИмяЭлемента", Элемент.Имя);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ПараметрыФормы = Новый Структура;
		ДокументОбъект = НайденныеСтроки[0].Объект;
		ПараметрыФормы.Вставить("Ключ", ДокументОбъект);
		ПараметрыЗакрытия = Новый Структура("ИмяЭлемента", Элемент.Имя);
		ИмяОткрываемойФормы = ИмяОткрываемойФормы(ДокументОбъект);
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыДокумента", ЭтотОбъект, ПараметрыЗакрытия);
		ОткрытьФорму(
			ИмяОткрываемойФормы,
			ПараметрыФормы,
			,
			УникальныйИдентификатор,
			,
			,
			ОбработчикЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	Оповестить(ИнтеграцияАУСНКлиент.ИмяСобытияИзмененияВОшибкахОтправки());
	ИнтеграцияАУСНКлиент.ВыполнитьОбменССервисом(ЭтотОбъект, Истина);
	ВыполнитьОбменССервисом = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаЗакрытияФормыДвижений(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ИмяЭлемента = ДополнительныеПараметры.ИмяЭлемента;
	Если Прав(ИмяЭлемента,2) = ИмяДополненияЭлементаФормыДвиженийРасчетНДФЛ() Тогда
		ОбновитьДанныеПоРасчетамНДФЛ(ИмяЭлемента);
	Иначе
		ОбновитьДанныеПоРазметкеАУСН(ИмяЭлемента);
	КонецЕсли;
	
	УправлениеФормой();
	
	ВыполнитьОбменССервисом = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыОрганизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ИмяЭлемента = ДополнительныеПараметры.ИмяЭлемента;
	ОбновитьДанныеПоРасчетамНДФЛ(ИмяЭлемента);
	
	УправлениеФормой();
	
	ВыполнитьОбменССервисом = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоРеквизитамБанковскойОперации(ДополнительныеПараметры.ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоРасчетамНДФЛ(ИмяЭлемента)
	
	Ошибки = ИнтеграцияАУСН.НовыйОписаниеОшибокОтправки();
	ИнтеграцияАУСН.ОтправитьРасчетыНДФЛАУСНВБанк(Ошибки);
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	Иначе
		СтрокаОшибка = НайденныеСтроки[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		НайденныеОшибки = Ошибки.Найти(СтрокаОшибка.Объект, "Объект");
	Иначе
		НайденныеОшибки = Неопределено;
	КонецЕсли;
	
	Если НайденныеОшибки <> Неопределено Тогда
		ОбновитьЭлементОписанияОшибки(НайденныеОшибки.Реквизиты, ИмяЭлемента);
		СтрокаОшибка.Реквизиты.Очистить();
		Для Каждого СтрокаРеквизит Из НайденныеОшибки.Реквизиты Цикл
			НовыйРеквизит = СтрокаОшибка.Реквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРеквизит, СтрокаРеквизит);
		КонецЦикла;
	Иначе
		УдалитьЭлементыОшибки(ИмяЭлемента);
		ОшибкиОтправки.Удалить(СтрокаОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоРазметкеАУСН(ИмяЭлемента)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	Иначе
		СтрокаОшибка = НайденныеСтроки[0];
	КонецЕсли;
	
	БанковскаяОперация = СтрокаОшибка.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеДокументыАУСН.Организация КАК Организация,
		|	БанковскиеДокументыАУСН.Документ КАК Документ,
		|	БанковскиеДокументыАУСН.Идентификатор КАК Идентификатор,
		|	ВЫБОР
		|		КОГДА БанковскиеДокументыАУСН.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
		|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации
		|		ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА БанковскиеДокументыАУСН.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
		|			ТОГДА ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.ПоступлениеНаРасчетныйСчет).СчетОрганизации.Банк
		|		ИНАЧЕ ВЫРАЗИТЬ(БанковскиеДокументыАУСН.Документ КАК Документ.СписаниеСРасчетногоСчета).СчетОрганизации.Банк
		|	КОНЕЦ КАК Банк
		|ИЗ
		|	РегистрСведений.БанковскиеДокументыАУСН КАК БанковскиеДокументыАУСН
		|ГДЕ
		|	БанковскиеДокументыАУСН.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", БанковскаяОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКОтправкеВБанк = ИнтеграцияАУСН.НовыеДанныеДляОтправки();
	СтрокаДанных = ДанныеКОтправкеВБанк.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
	СтрокаДанных.БанковскиеОперации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанковскаяОперация);
	ПроверяемыеДокументы = Новый Соответствие;
	ПроверяемыеДокументы.Вставить(БанковскаяОперация, Выборка.Идентификатор);
	Ошибки = ИнтеграцияАУСН.НовыйОписаниеОшибокОтправки();
	ИнтеграцияАУСН.ПодготовитьДанныеОБезналичныхОперацияхВФорматеФНС(
		ДанныеКОтправкеВБанк, ПроверяемыеДокументы, Ошибки);
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		НайденныеОшибки = Ошибки[0];
		ОбновитьЭлементОписанияОшибки(НайденныеОшибки.Реквизиты, ИмяЭлемента);
		СтрокаОшибка.Реквизиты.Очистить();
		Для Каждого СтрокаРеквизит Из НайденныеОшибки.Реквизиты Цикл
			НовыйРеквизит = СтрокаОшибка.Реквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРеквизит, СтрокаРеквизит);
		КонецЦикла;
	Иначе
		УдалитьЭлементыОшибки(ИмяЭлемента);
		ОшибкиОтправки.Удалить(СтрокаОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоФизическомуЛицу(ФизическоеЛицо)
	
	Отбор = Новый Структура("Объект", ФизическоеЛицо);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	Иначе
		СтрокаОшибка = НайденныеСтроки[0];
	КонецЕсли;
	ОшибкиОтправки.Удалить(СтрокаОшибка);
	
	УдалитьЭлементыОшибки(СтрокаОшибка.ИмяЭлемента);
	
	УправлениеФормой();
	
	ВыполнитьОбменССервисом = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоРеквизитамБанковскойОперации(ИмяЭлемента)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ОшибкиОтправки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	Иначе
		СтрокаОшибка = НайденныеСтроки[0];
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	Для Каждого СтрокаРеквизит Из СтрокаОшибка.Реквизиты Цикл
		ПроверяемыеРеквизиты.Добавить(
			СтрЗаменить(СтрокаРеквизит.ИмяРеквизита, ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДокумента(), ""));
	КонецЦикла;
	ПроверяемыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаОшибка.Объект, СтрСоединить(ПроверяемыеРеквизиты, ","));
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		Если ЗначениеЗаполнено(ПроверяемыеЗначения[ПроверяемыйРеквизит]) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ИмяРеквизита", СтрШаблон(
				"%1%2",
				ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДокумента(),
				ПроверяемыйРеквизит));
			УдаляемыеСтроки = СтрокаОшибка.Реквизиты.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(УдаляемыеСтроки) Тогда
				СтрокаОшибка.Реквизиты.Удалить(УдаляемыеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмяОписания = СтрШаблон("%1%2", СтрокаОшибка.ИмяЭлемента, ИмяДополненияЭлементаОписаниеОшибки());
	
	Если Не ЗначениеЗаполнено(СтрокаОшибка.Реквизиты) Тогда
		УдалитьЭлементыОшибки(СтрокаОшибка.ИмяЭлемента);
		ОшибкиОтправки.Удалить(СтрокаОшибка);
	Иначе
		ОбновитьЭлементОписанияОшибки(СтрокаОшибка.Реквизиты, СтрокаОшибка.ИмяЭлемента);
	КонецЕсли;
	
	УправлениеФормой();
	
	ВыполнитьОбменССервисом = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовокОшибка(Реквизиты)
	
	Ошибки = Новый Массив;
	Для Каждого СтрокаРеквизит Из Реквизиты Цикл
		ТекстОшибки = СтрШаблон("%1 - %2", СтрокаРеквизит.Синоним, СтрокаРеквизит.ТекстОшибки);
		Ошибки.Добавить(ТекстОшибки);
	КонецЦикла;
	
	ТекстЗаголовка = СтрСоединить(Ошибки, Символы.ПС);
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Если Элементы.РеквизитыБанковскихОпераций.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.РеквизитыБанковскихОпераций.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.РеквизитыФизическихЛиц.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.РеквизитыФизическихЛиц.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.РеквизитыОрганизации.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.РеквизитыОрганизации.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.РеквизитыВедомости.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.РеквизитыВедомости.Видимость = Ложь;
	КонецЕсли;
	
	Если ОшибкиОтправки.Количество() = 0 Тогда
		Элементы.ГруппаНадписьОшибокНет.Видимость = Истина;
		Элементы.ВыполнитьОбмен.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНовыйЭлемент(НовыйЭлемент, СвязанныйОбъект, РеквизитыСОшибками)
	
	ИмяЭлемента = НовыйЭлемент.Имя;
	ИмяЭлементаОписание = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаОписаниеОшибки());
	
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	ТекстЗаголовка = СтрШаблон("<a href = """"ОткрытьФорму"""">%1</a>", СвязанныйОбъект);
	НовыйЭлемент.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстЗаголовка);
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	НоваяОшибка = ОшибкиОтправки.Добавить();
	НоваяОшибка.Объект = СвязанныйОбъект;
	НоваяОшибка.ИмяЭлемента = ИмяЭлемента;
	Для Каждого СтрокаРеквизит Из РеквизитыСОшибками Цикл
		НовыйРеквизит = НоваяОшибка.Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйРеквизит, СтрокаРеквизит);
	КонецЦикла;
	
	Описание = Элементы.Добавить(ИмяЭлементаОписание, Тип("ПолеФормы"), НовыйЭлемент.Родитель);
	Описание.Вид = ВидПоляФормы.ПолеНадписи;
	Описание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Описание.АвтоМаксимальнаяШирина = Ложь;
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяЭлементаОписание, ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОткрываемойФормы(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяФормы = СтрШаблон("Документ.%1.ФормаОбъекта", МетаданныеОбъекта.Имя);
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДополненияЭлементаФормыДокумента()
	
	Возврат "_1";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДополненияЭлементаФормыДвиженийДокумента()
	
	Возврат "_2";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДополненияЭлементаФормыДвиженийРасчетНДФЛ()
	
	Возврат "_3";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДополненияЭлементаОписаниеОшибки()
	
	Возврат "_Описание";
	
КонецФункции

&НаСервере
Функция УдалитьЭлементыОшибки(ИмяЭлемента)
	
	ЭлементОбъект = Элементы.Найти(ИмяЭлемента);
	ИмяЭлементаОписания = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаОписаниеОшибки());
	ЭлементОписаниеОшибки = Элементы.Найти(ИмяЭлементаОписания);
	
	Если ЭлементОбъект <> Неопределено Тогда
		Элементы.Удалить(ЭлементОбъект);
	КонецЕсли;
	
	Если ЭлементОписаниеОшибки <> Неопределено Тогда
		Элементы.Удалить(ЭлементОписаниеОшибки);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьОшибкиНаСервере(АдресОшибокОтправки)
	
	ПолученныеОшибки = ПолучитьИзВременногоХранилища(АдресОшибокОтправки);
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаОшибка Из ОшибкиОтправки Цикл
		НайденнаяСтрокаОшибка = ПолученныеОшибки.Найти(СтрокаОшибка.Объект, "Объект");
		Если НайденнаяСтрокаОшибка = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаОшибка);
		Иначе
			Если Прав(СтрокаОшибка.ИмяЭлемента, 2) = ИмяДополненияЭлементаФормыДокумента() Тогда
				ОтборПоПрефиксу = ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДокумента();
			ИначеЕсли Прав(СтрокаОшибка.ИмяЭлемента, 2) = ИмяДополненияЭлементаФормыДвиженийДокумента() Тогда
				ОтборПоПрефиксу = ИнтеграцияАУСНКлиентСервер.ПрефиксРеквизитаОткрытьФормуДвиженийРазметкаАУСН();
			ИначеЕсли Прав(СтрокаОшибка.ИмяЭлемента, 2) = ИмяДополненияЭлементаФормыДвиженийРасчетНДФЛ() Тогда
				ОтборПоПрефиксу = ИнтеграцияАУСНКлиентСервер.ПрефиксДвиженияРасчетНДФЛ();
			Иначе
				ОтборПоПрефиксу = "";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтборПоПрефиксу) Тогда
				СтрокаОшибка.Реквизиты.Загрузить(НайденнаяСтрокаОшибка.Реквизиты);
			Иначе
				КопируемыеСтроки = Новый Массив;
				Для Каждого СтрокаРеквизит Из НайденнаяСтрокаОшибка.Реквизиты Цикл
					Если СтрНачинаетсяС(СтрокаРеквизит.ИмяРеквизита, ОтборПоПрефиксу) Тогда
						КопируемыеСтроки.Добавить(СтрокаРеквизит);
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(КопируемыеСтроки) Тогда
					СтрокаОшибка.Реквизиты.Загрузить(НайденнаяСтрокаОшибка.Реквизиты.Скопировать(КопируемыеСтроки));
				Иначе
					СтрокаОшибка.Реквизиты.Очистить();
					СтрокиКУдалению.Добавить(СтрокаОшибка);
				КонецЕсли;
			КонецЕсли;
			ОбновитьЭлементОписанияОшибки(СтрокаОшибка.Реквизиты, СтрокаОшибка.ИмяЭлемента);
		КонецЕсли;
		Для Каждого СтрокаУдаляемая Из СтрокиКУдалению Цикл
			УдалитьЭлементыОшибки(СтрокаУдаляемая.ИмяЭлемента);
			ОшибкиОтправки.Удалить(СтрокаУдаляемая);
		КонецЦикла;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементОписанияОшибки(РеквизитыОшибки, ИмяЭлемента)
	
	Если Не ЗначениеЗаполнено(РеквизитыОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаОписания = СтрШаблон("%1%2", ИмяЭлемента, ИмяДополненияЭлементаОписаниеОшибки());
	ЭтотОбъект[ИмяЭлементаОписания] = ЗаголовокОшибка(РеквизитыОшибки);
	ВысотаЭлемента = 0;
	Для Каждого РеквизитОшибки Из РеквизитыОшибки Цикл
		ВысотаЭлемента = ВысотаЭлемента + СтрЧислоСтрок(РеквизитОшибки.ТекстОшибки);
	КонецЦикла;
	Элементы[ИмяЭлементаОписания].Высота = ВысотаЭлемента;
	
КонецПроцедуры

#КонецОбласти