
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресДанныеФормы) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеФормы = ПолучитьИзВременногоХранилища(Параметры.АдресДанныеФормы);
	Загруженные.ЗагрузитьЗначения(ДанныеФормы.Загруженные);
	ОписаниеДокумента = ДанныеФормы.ОписаниеДокумента;
	ИмяСписка = Параметры.ИмяСписка;
	СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СуммаЧеков = 0;
	ЗапроситьДанныеЧекаПоQRКоду(Параметры.QRКод);
	
	// Проверка на использование аппаратного сканера штрихкода не нужна,
	// т.к.Форма уже вызывается во время события сканирования аппаратным сканером
	ИспользуютсяСканерыШтрихкода = Истина;
	
	УчетКассовыхЧековПодотчетныхЛиц.ЗаписатьОперациюБизнесСтатистики("АппаратныйСканер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(СообщениеОбОшибкеПриСканировании) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, СообщениеОбОшибкеПриСканировании);
		Возврат;
	КонецЕсли;
	ЗапуститьПроверкуПолученияЧеков = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуПолученияЧеков", 0.1, Истина);
	УчетКассовыхЧековПодотчетныхЛицКлиент.ПодключитьСканерШтрихкода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УчетКассовыхЧековПодотчетныхЛицКлиент.ОтключитьСканерШтрихкода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И ЗапуститьПроверкуПолученияЧеков Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			
			ЗапроситьДанныеЧекаПоQRКоду(ТекущийКод);
			
			Если Не ПустаяСтрока(СообщениеОбОшибкеПриСканировании) Тогда
				ПоказатьПредупреждение(, СообщениеОбОшибкеПриСканировании);
			КонецЕсли;
			
			ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуПолученияЧеков");
			ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуПолученияЧеков", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗапроситьДанныеЧекаПоQRКоду(QRКод)
	
	НайденныеСтроки = СписокЧеков.НайтиСтроки(Новый Структура("QRКод", QRКод));
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		 Возврат;
	КонецЕсли;
	
	СообщениеОбОшибкеПриСканировании = "";
	ДанныеЧека = УчетКассовыхЧековПодотчетныхЛиц.ДанныеЧекаПоQRКоду(QRКод);
	Если ДанныеЧека = Неопределено Тогда
		СообщениеОбОшибкеПриСканировании = НСтр("ru = 'Штрихкод не является QR-кодом чека. Попробуйте отсканировать другой QR-код.'");
		Возврат;
	КонецЕсли;
	Если Загруженные.НайтиПоЗначению(ДанныеЧека.Ссылка) <> Неопределено Тогда
		РеквизитыЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЧека.Ссылка, "Номер, Дата, СуммаДокумента");
		ПредставлениеСуммы = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РеквизитыЧека.СуммаДокумента, ВалютаРегламентированногоУчета);
		СообщениеОбОшибкеПриСканировании = СтрШаблон(
			НСтр("ru = 'Чек %1 от %2 на сумму %3 уже загружен в документ.'"),
			РеквизитыЧека.Номер, 
			Формат(РеквизитыЧека.Дата, "ДЛФ=D"),
			ПредставлениеСуммы);
		Возврат;
	КонецЕсли;
	НоваяСтрока = СписокЧеков.Добавить();
	НоваяСтрока.QRКод = QRКод;
	НоваяСтрока.Сумма = ДанныеЧека.Сумма;
	НоваяСтрока.Ссылка = ДанныеЧека.Ссылка;
	
	Элементы.ДлительноеОжиданиеОписание.Заголовок = ТекстОписания();
	
	Ссылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЧека.Ссылка);
	РегистрыСведений.КассовыеЧекиПодотчетныхЛицЗапросыДетальныхДанных.НачатьЗапрос(Ссылки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьПроверкуПолученияЧеков() Экспорт
	
	Ссылка = ВладелецФормы.Объект.Ссылка;
	Результат = ЗапуститьПроверкуПолученияЧеков(СписокЧеков, Ссылка, ОписаниеДокумента, УникальныйИдентификатор);
	ОжидатьЗавершенияПроверкиПолученияЧеков(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьПроверкуПолученияЧеков(Знач СписокЧеков, Знач Ссылка, Знач ОписаниеДокумента, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка получения чеков подотчетных лиц'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("КассовыеЧеки", СписокЧеков.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ПараметрыПроцедуры.Вставить("Ссылка", Ссылка);
	ПараметрыПроцедуры.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"УчетКассовыхЧековПодотчетныхЛиц.ПроверитьЧекиЗагруженныеПоШтрихкоду",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьЗавершенияПроверкиПолученияЧеков(Результат)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиПолученияЧеков", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиПолученияЧеков(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуПолученияЧеков = Истина;
	ДанныеЧеков = Неопределено;
	Если Результат.Статус = "Выполнено" Тогда
		ДанныеЧеков = ОбработатьРезультатПроверкиПолученияЧековНаСервере(Результат.АдресРезультата, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЧеков) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ДанныеЧеков.ЗагружаемыеЧеки) Тогда
			
			ПараметрыПроцедуры = Новый Структура;
			ПараметрыПроцедуры.Вставить("АдресХранилища", ДанныеЧеков.АдресХранилища);
			ПараметрыПроцедуры.Вставить("ИмяСписка", ИмяСписка);
			ПараметрыПроцедуры.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
			Оповестить("ПолучениеДанныхЧековЗагруженныхАппаратнымСканером", ПараметрыПроцедуры, ВладелецФормы);
			
			Для Каждого Ссылка Из ДанныеЧеков.ЗагружаемыеЧеки Цикл
				Для Каждого Строка Из СписокЧеков.НайтиСтроки(Новый Структура("Ссылка", Ссылка)) Цикл
					СписокЧеков.Удалить(Строка);
				КонецЦикла;
				Загруженные.Добавить(Ссылка);
			КонецЦикла;
			ОбработатьИзменениеСпискаЧеков();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЧеков.НекорректныеЧеки) Тогда
			ЗапуститьПроверкуПолученияЧеков = Ложь;
			Сч = 1;
			Для Каждого Чек Из ДанныеЧеков.НекорректныеЧеки Цикл
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Ссылка", Чек.Ссылка);
				ДопПараметры.Вставить("ПервыйНекорректныйЧек", Ложь);
				Если Сч = 1 Тогда
					ДопПараметры.ПервыйНекорректныйЧек = Истина;
				КонецЕсли;
				Оповещение = Новый ОписаниеОповещения("ПредупреждениеНекорректныеЧекиЗавершение", ЭтотОбъект, ДопПараметры);
				ПоказатьПредупреждение(Оповещение, Чек.ТекстСообщения);
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапуститьПроверкуПолученияЧеков Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуПолученияЧеков", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНекорректныеЧекиЗавершение(ДопПараметры) Экспорт
	
	Для Каждого Строка Из СписокЧеков.НайтиСтроки(Новый Структура("Ссылка", ДопПараметры.Ссылка)) Цикл
		СписокЧеков.Удалить(Строка);
	КонецЦикла;
	ОбработатьИзменениеСпискаЧеков();
	Если ДопПараметры.ПервыйНекорректныйЧек Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуПолученияЧеков", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСпискаЧеков()
	
	Если СписокЧеков.Количество() = 0 Тогда
		Закрыть();
		ЗапуститьПроверкуПолученияЧеков = Ложь;
	Иначе
		Элементы.ДлительноеОжиданиеОписание.Заголовок = ТекстОписания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстОписания()
	
	СуммаЧеков = СписокЧеков.Итог("Сумма");
	КоличествоЧеков = СписокЧеков.Количество();
	ПредставлениеСуммы = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаЧеков, ВалютаРегламентированногоУчета);
	
	ШаблонСообщения = НСтр("ru='Отсканированные чеки: %1 шт. на сумму %2
	|Пожалуйста, подождите, пока %3 в ФНС.
	|
	|Если необходимо, это окно можно закрыть.
	|По окончании проверки информация %4 появится в документе.'");
	Если КоличествоЧеков = 1 Тогда
		СтрЧеки1 = НСтр("ru='чек проверяется'");
		СтрЧеки2 = НСтр("ru='о чеке'");
	Иначе
		СтрЧеки1 = НСтр("ru='чеки проверяются'");
		СтрЧеки2 = НСтр("ru='о чеках'");
	КонецЕсли;

	Возврат СтрШаблон(ШаблонСообщения, КоличествоЧеков, ПредставлениеСуммы, СтрЧеки1, СтрЧеки2);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьРезультатПроверкиПолученияЧековНаСервере(АдресХранилища, УникальныйИдентификатор)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагружаемыеЧеки",    Новый Массив);
	Результат.Вставить("НекорректныеЧеки",   Новый Массив);
	Результат.Вставить("АдресХранилища",     Неопределено);
	
	ДанныеЧеков = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДанныеЧеков) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеЧеков);
		Если ДанныеЧеков.СодержимоеЧеков <> Неопределено Тогда
			РезультатВХранилище = Новый Структура;
			РезультатВХранилище.Вставить("ЗагружаемыеЧеки", ДанныеЧеков.ЗагружаемыеЧеки);
			РезультатВХранилище.Вставить("СодержимоеЧеков", ДанныеЧеков.СодержимоеЧеков);
			Результат.АдресХранилища = ПоместитьВоВременноеХранилище(РезультатВХранилище, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
