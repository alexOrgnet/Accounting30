#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет в наборе записей суммы временных разниц (если они не заполнены, но нужны).
// При этом предполагается, что до вызова метода
// корректно заполнены суммы бухгалтерского и налогового учета.
//
Процедура ЗаполнитьСуммыВременныхРазниц() Экспорт
	
	// Ключ     - Дата - период
	// Значение - Соответствие
	//     Ключ     - СправочникСсылка.Организации
	//     Значение - Булево - необходим учет разниц
	КешКонтекста = Новый Соответствие; 
	
	// Ключ     - ПланСчетов.Ссылка
	// Значение - Булево - ведется налоговый учет (и, соответственно, учет разниц)
	КешСчетовУчета = Новый Соответствие;
	
	СтороныСчета  = СтрРазделить("Дт,Кт", ",");
	Ресурсы       = СтрРазделить("СуммаНУ,СуммаПР,СуммаВР", ",");
	
	ИменаПолей = Новый Структура;
	Для Каждого СторонаСчета Из СтороныСчета Цикл
		
		ИменаПолейСтороныСчета = Новый Структура;
		Для Каждого ИмяРесурса Из Ресурсы Цикл
			ИменаПолейСтороныСчета.Вставить(ИмяРесурса, СтрШаблон("%1%2", ИмяРесурса, СторонаСчета));
		КонецЦикла;
		ИменаПолей.Вставить(СторонаСчета, ИменаПолейСтороныСчета);
		
	КонецЦикла;
	
	Для Каждого Проводка Из ЭтотОбъект Цикл
		
		Период = НачалоМесяца(Проводка.Период);
		КешПериода = КешКонтекста[Период];
		Если КешПериода = Неопределено Тогда
			КешПериода = Новый Соответствие;
			КешКонтекста.Вставить(Период, КешПериода);
		КонецЕсли;
		
		ИспользоватьСуммыРазниц = КешПериода[Проводка.Организация];
		Если ИспользоватьСуммыРазниц = Неопределено Тогда
			
			ВидИспользованияСумм = БухгалтерскийУчет.ИспользоватьСуммыНалогНаПрибыль(Проводка.Организация, Период);
			ИспользоватьСуммыРазниц = БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм);
			КешПериода.Вставить(Проводка.Организация, ИспользоватьСуммыРазниц);
			
		КонецЕсли;
		
		Если Не ИспользоватьСуммыРазниц Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СторонаСчета Из СтороныСчета Цикл
			
			Счет = Проводка[СтрШаблон("Счет%1", СторонаСчета)];
			НалоговыйУчетНаСчете = КешСчетовУчета[Счет];
			Если НалоговыйУчетНаСчете = Неопределено Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
				НалоговыйУчетНаСчете = СвойстваСчета.НалоговыйУчет;
				КешСчетовУчета.Вставить(Счет, НалоговыйУчетНаСчете);
			КонецЕсли;
			
			Если Не НалоговыйУчетНаСчете Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолейСтороныСчета = ИменаПолей[СторонаСчета];
			СуммаНУ = Проводка[ИменаПолейСтороныСчета.СуммаНУ];
			СуммаПР = Проводка[ИменаПолейСтороныСчета.СуммаПР];
			СуммаВР = Проводка[ИменаПолейСтороныСчета.СуммаВР];
			
			Контроль = Проводка.Сумма - СуммаНУ - СуммаПР - СуммаВР;
			
			Если Контроль = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка[ИменаПолейСтороныСчета.СуммаВР] = СуммаВР + Контроль;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// После вызова этой процедуры суммы налогового учета и разниц не должны пересчитываться.
	ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ПропущенаБизнесЛогикаПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Регистратор = ЭтотОбъект.Отбор.Регистратор.Значение;
	ТипРегистратора = ТипЗнч(Регистратор);
	
	ПроводкиВведеныПользователем = ТипРегистратора = Тип("ДокументСсылка.ОперацияБух")
		ИЛИ (ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", Регистратор.Метаданные())
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "РучнаяКорректировка"));
		
	ЭтоВвводОстатков = ТипРегистратора = Тип("ДокументСсылка.ВводНачальныхОстатков");
	
	Если НЕ ПроводкиВведеныПользователем Тогда
		КэшУчетнойПолитики = Неопределено; // См. ДанныеУчетнойПолитики()
		
		ОбработатьПроводкиНалоговогоУчета(ЭтотОбъект, Регистратор, КэшУчетнойПолитики);
		ОбработатьДвиженияМалоценки(ЭтотОбъект, Регистратор, КэшУчетнойПолитики, ЭтоВвводОстатков);
	КонецЕсли;
	
	ОчиститьНеИспользуемыеСуммы(ЭтотОбъект, Регистратор);
	ПривестиПустыеЗначенияСубконтоСоставногоТипа(ЭтотОбъект);
	
	ОчиститьСубконтоСпособУчетаНДС(ЭтотОбъект, Регистратор);
	
	УстановитьУточнениеПериода(ЭтотОбъект);
	
	Если ПроводкиВведеныПользователем Тогда
		// Проанализируем ручные проводки и зарегистрируем при необходимости 
		// договоры из них к отложенному расчету.
		УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПередЗаписьюХозрасчетный(
			ЭтотОбъект, 
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Субконто составного типа

Процедура ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки)
	
	КэшВидыСоставныхСубконто = Новый Соответствие;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

Функция СоставнойТипСубконто(ВидСубконто, КэшВидыСоставныхСубконто)
	
	Составной = КэшВидыСоставныхСубконто.Получить(ВидСубконто);
	
	Если Составной = Неопределено Тогда
		Составной = ВидСубконто.ТипЗначения.Типы().Количество() > 1;
		КэшВидыСоставныхСубконто.Вставить(ВидСубконто, Составной);
	КонецЕсли;
	
	Возврат Составной;
	
КонецФункции

// Особенности налогового учета

Процедура ОбработатьПроводкиНалоговогоУчета(Проводки, Регистратор, КэшУчетнойПолитики)
	
	СуммыНалоговогоУчетаЗаполнены = // Проводки созданы алгоритмом, который рассчитывает суммы НУ
		ЭтотОбъект.ДополнительныеСвойства.Свойство("СуммыНалоговогоУчетаЗаполнены") 
		И ЭтотОбъект.ДополнительныеСвойства.СуммыНалоговогоУчетаЗаполнены = Истина;
	
	Если НЕ СуммыНалоговогоУчетаЗаполнены Тогда
		ЗаполнитьСуммыНалоговогоУчета(Проводки, КэшУчетнойПолитики);
	КонецЕсли;
	
	ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки);
	
КонецПроцедуры

Процедура ОчиститьНеИспользуемыеСуммы(Проводки, Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда 
		Возврат;  // Для записи остатков налогового учета при переходе с УСН на общую систему
	КонецЕсли;
	
	СменаНалоговогоУчета = Ложь;
	Если Проводки.ДополнительныеСвойства.Свойство("СменаНалоговогоУчета", СменаНалоговогоУчета) и СменаНалоговогоУчета Тогда
		Возврат; 
	КонецЕсли;
	
	КэшУчетнойПолитики = Неопределено; // См. ДанныеУчетнойПолитики()
	
	Для Каждого Проводка Из ЭтотОбъект Цикл
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(Проводка.Организация, Проводка.Период, КэшУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
			Продолжить;
		КонецЕсли;
	
		// Налог на прибыль уплачивается
		
		Если НЕ ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыНалоговогоУчета(Проводки, КэшУчетнойПолитики)
	
	СчетаНДС                         = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДС);                         // 68.02
	СчетаНДСпоПриобретеннымЦенностям = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям); // 19
	
	СчетаПрочиеРасходы = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы); // 91.02
	СчетаПрочиеДоходы = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);   // 91.01
	СтатьяКурсовыхРазниц = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы");
	ЕстьКурсовыеРазницы = СтатьяКурсовыхРазниц <> Неопределено;
	
	СчетаМалоценки = Новый Массив();
	СчетаМалоценки.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный);                    // 10.11.1
	СчетаМалоценки.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный);                  // 10.11.2
	СчетаМалоценки.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов);
	
	СчетНДСНачисленныйПоОтгрузке                 = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;                                  // 76.ОТ
	СчетаАмортизацияОсновныхСредств = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // 02
	
	ТипПрочиеДоходыИРасходы = Тип("СправочникСсылка.ПрочиеДоходыИРасходы");
	ПрочиеДоходыИРасходыИсключения = Неопределено;
	
	Для Каждого Проводка Из ЭтотОбъект Цикл
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(Проводка.Организация, Проводка.Период, КэшУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			Продолжить;
		КонецЕсли;
	
		Если Проводка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		Если СчетаМалоценки.Найти(СчетДт) <> Неопределено
			ИЛИ СчетаМалоценки.Найти(СчетКт) <> Неопределено Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			Продолжить;
		КонецЕсли;
		
		Если СчетаАмортизацияОсновныхСредств.Найти(СчетДт) <> Неопределено
			И СчетаАмортизацияОсновныхСредств.Найти(СчетКт) <> Неопределено Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			Продолжить;
		КонецЕсли;
		
		// НДС, предъявленный покупателю, не учитывается в НУ (п. 19 ст. 270 НК)
		Если (СчетКт = СчетНДСНачисленныйПоОтгрузке
			ИЛИ СчетаНДС.Найти(СчетКт) <> Неопределено // Отсекаем заведомо не начисление НДС
			ИЛИ СчетаНДСпоПриобретеннымЦенностям.Найти(СчетКт) <> Неопределено) 
			И СчетаПрочиеРасходы.Найти(СчетДт) <> Неопределено Тогда
			// Рассматриваем только проводки вида Дт 91 Кт 68 (как напрямую, так и через счет 19),
			// потому что на счете 90 есть отдельный субсчет, на котором не ведется налоговый учет.
			// Как правило, проводка Дт 91 Кт 68 начисляет НДС при реализации, но есть исключения:
			ЭтоИсключение = Ложь;
			Для Каждого Субконто Из Проводка.СубконтоДт Цикл
				Если ТипЗнч(Субконто.Значение) = ТипПрочиеДоходыИРасходы Тогда
					
					Если ПрочиеДоходыИРасходыИсключения = Неопределено Тогда
						ПрочиеДоходыИРасходыИсключения = ПолучитьПрочиеДоходыИРасходыИсключения();
					КонецЕсли;
					Если ПрочиеДоходыИРасходыИсключения[Субконто.Значение] = Истина Тогда
					
						ЭтоИсключение = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЭтоИсключение Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Суммы налогового учета по курсовым разницам рассчитываются механизмом переоценки валютных средств.
		Если ЕстьКурсовыеРазницы
			И (ЭтоКурсовыеРазницы(СчетДт, Проводка.СубконтоДт, СчетаПрочиеРасходы, СтатьяКурсовыхРазниц)
			Или ЭтоКурсовыеРазницы(СчетКт, Проводка.СубконтоКт, СчетаПрочиеДоходы, СтатьяКурсовыхРазниц)) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
		Если СвойстваСчета.НалоговыйУчет 
			И Проводка.СуммаНУДт = 0 
			И Проводка.СуммаПРДт = 0 
			И Проводка.СуммаВРДт = 0 Тогда
			
			Проводка.СуммаНУДт = Проводка.Сумма;
			
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
		Если СвойстваСчета.НалоговыйУчет 
			И Проводка.СуммаНУКт = 0
			И Проводка.СуммаПРКт = 0
			И Проводка.СуммаВРКт = 0 Тогда
			
			Проводка.СуммаНУКт = Проводка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки) Экспорт
	                                                                                                    
	СчетДоходыНеУчитываемые                   = ПланыСчетов.Хозрасчетный.ДоходыНеУчитываемые;                   // НЕ.04
	СчетРасчетыСПерсоналомПоОплатеТруда       = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;       // 70      
	СчетВнереализационныеРасходыНеУчитываемые = ПланыСчетов.Хозрасчетный.ВнереализационныеРасходыНеУчитываемые; // НЕ.03
	СчетВыплатыВпользуФизЛицПоП_1_48          = ПланыСчетов.Хозрасчетный.ВыплатыВпользуФизЛицПоП_1_48;          // НЕ.01.1
	СчетДругиеВыплатыПоП_1_48                 = ПланыСчетов.Хозрасчетный.ДругиеВыплатыПоП_1_48;                 // НЕ.01.9
	
	ПустойСчет     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	ПустойПрочийДР = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
	ТипПрочиеДоходыИРасходы = Тип("СправочникСсылка.ПрочиеДоходыИРасходы");
	СчетаСтроительствоОбъектовОсновныхСредств = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств); // 08.03
	СчетаПрочиеДоходы = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы); // 91.01
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	
	ПрочиеДоходыИРасходыВнереализационные = Неопределено;
	
	// Удалим проводки по забалансовым счетам учета доходов и расходов
	ПроводкиКУдалению = Новый Массив;
	Для Каждого Проводка Из Проводки Цикл
		
		Если Проводка.СчетКт = СчетДоходыНеУчитываемые
			Или Проводка.СчетДт = СчетВнереализационныеРасходыНеУчитываемые
			Или Проводка.СчетДт = СчетВыплатыВпользуФизЛицПоП_1_48
			Или Проводка.СчетДт = СчетДругиеВыплатыПоП_1_48 Тогда
			// Такие проводки формируем только в этой процедуре
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
	// Найдем проводки по доходам и расходам, не учитываемым в налоговом учете
	
	ПроводкиПоДоходам = Новый Массив;
	ПроводкиПоРасходам = Новый Массив;
	
	КэшУчетнойПолитики = Неопределено; // См. ДанныеУчетнойПолитики()
	
	Для Каждого Проводка Из ЭтотОбъект Цикл
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(Проводка.Организация, Проводка.Период, КэшУчетнойПолитики);
	
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			Продолжить;
		КонецЕсли;
		
		АнализируемыйСчет     = Проводка.СчетКт;
		АнализируемыеСубконто = Проводка.СубконтоКт;
		ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль = Ложь;
		Если ЗначениеЗаполнено(АнализируемыйСчет)
		   И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АнализируемыйСчет).НалоговыйУчет
		   И АнализируемыеСубконто.Количество() <> 0
		   И СчетаПрочиеДоходы.Найти(АнализируемыйСчет) <> Неопределено Тогда
		   
			Для Каждого Субконто Из АнализируемыеСубконто Цикл
				Если Субконто.Ключ = ВидСубконтоПрочиеДоходыИРасходы Тогда 
					
					Если НЕ НалоговыйУчетПовтИсп.ВидДоходовРасходовУчитывается(Субконто.Значение) Тогда
						ПроводкиПоДоходам.Добавить(Проводка);
						ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		   
		КонецЕсли;
		
		АнализируемыйСчет     = Проводка.СчетДт;
		АнализируемыеСубконто = Проводка.СубконтоДт;
		Если Не ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль
		   И ЗначениеЗаполнено(АнализируемыйСчет)
		   И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АнализируемыйСчет).НалоговыйУчет
		   И АнализируемыеСубконто.Количество() <> 0
		   И СчетаСтроительствоОбъектовОсновныхСредств.Найти(АнализируемыйСчет) = Неопределено Тогда
		   
			Для Каждого Субконто Из АнализируемыеСубконто Цикл
				Если Субконто.Ключ = ВидСубконтоПрочиеДоходыИРасходы Тогда 
					
					Если Не НалоговыйУчетПовтИсп.ВидДоходовРасходовУчитывается(Субконто.Значение) Тогда
						ПроводкиПоРасходам.Добавить(Проводка);
						Прервать;
					КонецЕсли;
					
				ИначеЕсли Субконто.Ключ = ВидСубконтоСтатьиЗатрат Тогда 
					
					Если Не НалоговыйУчетПовтИсп.СтатьяЗатратУчитывается(Субконто.Значение) Тогда
						ПроводкиПоРасходам.Добавить(Проводка);
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		   
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем не учитываемые доходы:
	// - обеспечим, чтобы они не отражались в налоговом учете
	// - добавим проводки по забалансовому учету
	
	Для Каждого Проводка Из ПроводкиПоДоходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт, Проводка.СуммаПРКт);
		
		СуммаНеУчитываемыхДоходов = Проводка.Сумма 
			- ?(Проводка.СуммаВРДт = NULL, 0, Проводка.СуммаВРДт)
			- ?(Проводка.СуммаПРДт = NULL, 0, Проводка.СуммаПРДт);
		
		Если СуммаНеУчитываемыхДоходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = Проводка.Организация;
		НоваяПроводка.Период      = Проводка.Период;
		НоваяПроводка.Содержание  = Проводка.Содержание;
		НоваяПроводка.СчетКт      = СчетДоходыНеУчитываемые;
		НоваяПроводка.СуммаНУКт   = СуммаНеУчитываемыхДоходов;
		
	КонецЦикла;
		
	// Обработаем не учитываемые расходы (также, как и доходы)
	Для Каждого Проводка Из ПроводкиПоРасходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт, Проводка.СуммаПРДт);
		
		СуммаНеУчитываемыхРасходов = Проводка.Сумма 
			- ?(Проводка.СуммаВРКт = NULL, 0, Проводка.СуммаВРКт)
			- ?(Проводка.СуммаПРКт = NULL, 0, Проводка.СуммаПРКт);
		
		Если СуммаНеУчитываемыхРасходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// анализируем проводку на принадлежность к внереализационным доходам и расходам
		ЭтоВнереализационныеДоходыРасходы = Ложь;
		Если Проводка.СчетКт <> ПустойСчет 
		   И СчетаПрочиеДоходы.Найти(Проводка.СчетКт) <> Неопределено Тогда
		   
			Для Каждого Субконто Из Проводка.СубконтоКт Цикл
				Если ТипЗнч(Субконто.Значение) = ТипПрочиеДоходыИРасходы Тогда
					
					Если ПрочиеДоходыИРасходыВнереализационные = Неопределено Тогда
						ПрочиеДоходыИРасходыВнереализационные = ПолучитьПрочиеДоходыИРасходыВнереализационные();
					КонецЕсли;
					Если ПрочиеДоходыИРасходыВнереализационные[Субконто.Значение] = Истина Тогда
						ЭтоВнереализационныеДоходыРасходы = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для Каждого Субконто Из Проводка.СубконтоДт Цикл
				Если ТипЗнч(Субконто.Значение) = ТипПрочиеДоходыИРасходы Тогда
					
					Если ПрочиеДоходыИРасходыВнереализационные = Неопределено Тогда
						ПрочиеДоходыИРасходыВнереализационные = ПолучитьПрочиеДоходыИРасходыВнереализационные();
					КонецЕсли;
					Если ПрочиеДоходыИРасходыВнереализационные[Субконто.Значение] = Истина Тогда
						ЭтоВнереализационныеДоходыРасходы = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоВнереализационныеДоходыРасходы Тогда
			СчетЗабалансовогоУчета = СчетВнереализационныеРасходыНеУчитываемые;
		ИначеЕсли СчетРасчетыСПерсоналомПоОплатеТруда = Проводка.СчетДт
		 Или СчетРасчетыСПерсоналомПоОплатеТруда = Проводка.СчетКт Тогда
			СчетЗабалансовогоУчета = СчетВыплатыВпользуФизЛицПоП_1_48;
		Иначе
			СчетЗабалансовогоУчета = СчетДругиеВыплатыПоП_1_48;
		КонецЕсли;
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = Проводка.Организация;
		НоваяПроводка.Период      = Проводка.Период;
		НоваяПроводка.Содержание  = Проводка.Содержание;
		НоваяПроводка.СчетДт      = СчетЗабалансовогоУчета;
		НоваяПроводка.СуммаНУДт   = СуммаНеУчитываемыхРасходов;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСуммуЕслиЗаполнена(Сумма, КорректируемаяСумма = 0)
	
	// Если сумма не заполнена, то не будем ее менять, чтобы не спровоцировать перезапись фактически неизменного набора.
	// Если сумма заполнена, то ее обнулим за счет корректируемой суммы.
	// Например, это используется, когда важно очистить сумму НУ за счет суммы ПР.
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда // Может быть NULL, если набор редактируется вручную
		Возврат;
	КонецЕсли;
	
	КорректируемаяСумма = КорректируемаяСумма + Сумма;
	
	Сумма = 0;
	
КонецПроцедуры

Функция ДанныеУчетнойПолитики(Организация, Период, Кэш = Неопределено)
	
	// У разных проводок набора период и организация могут быть разными.
	// При этом проводок может быть в наборе много, но у большинства из них период и организация одинаковые.
	// Для того, чтобы сократить время на получение сведений учетной политики для каждой строки набора,
	// организуем свой кэш с данными учетной политики.
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый ТаблицаЗначений;
		Кэш.Колонки.Добавить("Организация", 				Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Кэш.Колонки.Добавить("Период",      				Новый ОписаниеТипов("Дата"));
		Кэш.Колонки.Добавить("ПлательщикНалогаНаПрибыль",   Новый ОписаниеТипов("Булево"));
		Кэш.Колонки.Добавить("ПоддержкаПБУ18",              Новый ОписаниеТипов("Булево"));
		Кэш.Колонки.Добавить("ПрименяетсяФСБУ5_2019",       Новый ОписаниеТипов("Булево"));
		Кэш.Индексы.Добавить("Организация,Период");
	КонецЕсли;
	
	Поиск = Новый Структура;
	Поиск.Вставить("Организация", Организация);
	Поиск.Вставить("Период",      Период);
	
	РезультатПоиска = Кэш.НайтиСтроки(Поиск);
	Если РезультатПоиска.Количество() = 0 Тогда
		
		// Нет в кэше - добавим
		НоваяСтрока = Кэш.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Поиск);
		
		Если УчетнаяПолитика.Существует(Организация, Период) Тогда
			НоваяСтрока.ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
			НоваяСтрока.ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);			
		Иначе
			// Если нет учетной политики, то считаем, что все включено, 
			// для того, чтобы избежать потери данных, подготовленным прикладным кодом.
			// Это может быть полезно, например, при вводе начальных остатков.
			// В этом случае документ сам заботится о правильности интерпретации учетной политики.
			НоваяСтрока.ПлательщикНалогаНаПрибыль = Истина;
			НоваяСтрока.ПоддержкаПБУ18            = Истина;
		КонецЕсли;
		//Не зависит от наличия записи учетной политики
		НоваяСтрока.ПрименяетсяФСБУ5_2019 = УчетнаяПолитика.ПрименяетсяФСБУ5_2019(Период);
		
		РезультатПоиска.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	Возврат РезультатПоиска[0];
	
КонецФункции

Функция ПолучитьПрочиеДоходыИРасходыВнереализационные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы)";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ПрочиеДоходыИРасходыВнереализационные = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПрочиеДоходыИРасходыВнереализационные.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;

	Возврат ПрочиеДоходыИРасходыВнереализационные;
	
КонецФункции

Функция ПолучитьПрочиеДоходыИРасходыИсключения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	(ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ)
	|			ИЛИ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.НалогиИСборы)
	|			ИЛИ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд))";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПрочиеДоходыИРасходыИсключения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПрочиеДоходыИРасходыИсключения.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат ПрочиеДоходыИРасходыИсключения;
	
КонецФункции

Функция ЭтоКурсовыеРазницы(Счет, ВсеСубконто, СчетаКурсовыхРазниц, СтатьяКурсовыхРазниц)
	
	Если СчетаКурсовыхРазниц.Найти(Счет) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Субконто Из ВсеСубконто Цикл
		Если ТипЗнч(Субконто.Значение) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			Продолжить;
		КонецЕсли;
		Возврат Субконто.Значение = СтатьяКурсовыхРазниц;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Особенности учета малоценки на счете 10.12.1 и 10.12.2

Процедура ОбработатьДвиженияМалоценки(Проводки, Регистратор, КэшУчетнойПолитики, ЭтоВвводОстатков)
	
	ДвиженияПоМалоценнымОбъектамСформированы = // Проводки созданы алгоритмом, который самостоятельно отражает расходы по малоценке
		ЭтотОбъект.ДополнительныеСвойства.Свойство("ДвиженияПоМалоценнымОбъектамСформированы") 
		И ЭтотОбъект.ДополнительныеСвойства.ДвиженияПоМалоценнымОбъектамСформированы = Истина;
	
	Если НЕ ДвиженияПоМалоценнымОбъектамСформированы Тогда
		ПроверитьДвиженияПоМалоценнымОбъектам(Проводки, КэшУчетнойПолитики, ЭтоВвводОстатков);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьДвиженияПоМалоценнымОбъектам(Проводки, КэшУчетнойПолитики, ЭтоВвводОстатков)
	
	СчетУчетаМалоценки 		    = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;	
	СчетРасходовНаМалоценку     = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
	СвойстваСчетаМалоценки      = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчетаМалоценки);
	
	ТаблицаПоступленияМалоценки = Неопределено;
	ТаблицаСписанияМалоценки    = Неопределено;
	ТаблицаПеремещенияМалоценки = Неопределено;
	
	Для Каждого Проводка Из Проводки Цикл
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(Проводка.Организация, Проводка.Период, КэшУчетнойПолитики);
		Если НЕ (ДанныеУчетнойПолитики.ПрименяетсяФСБУ5_2019
			ИЛИ ЭтоВвводОстатков) Тогда
			Продолжить;
		КонецЕсли;
				
		//Соберем движения по 10.12.1
		Если Проводка.СчетДт = СчетУчетаМалоценки Тогда
			Если Проводка.СчетДт = Проводка.СчетКт Тогда
				ДобавитьСтрокуПеремещениеМалоценки(Проводка, ТаблицаПеремещенияМалоценки, СвойстваСчетаМалоценки);
			Иначе
				ДобавитьСтрокуМалоценки(Проводка, ТаблицаПоступленияМалоценки, СвойстваСчетаМалоценки, "Дт");
			КонецЕсли;
		ИначеЕсли Проводка.СчетКт = СчетУчетаМалоценки Тогда
			ДобавитьСтрокуМалоценки(Проводка, ТаблицаСписанияМалоценки, СвойстваСчетаМалоценки, "Кт");			
		КонецЕсли;
		
		//Вычтем из движений 10.12.1 движения по 10.12.2
		Если Проводка.СчетКт = СчетРасходовНаМалоценку Тогда
			Если Проводка.СчетДт = Проводка.СчетКт Тогда
				ДобавитьСтрокуПеремещениеМалоценки(Проводка, ТаблицаПеремещенияМалоценки, СвойстваСчетаМалоценки, Истина, -1);
			Иначе				
				ДобавитьСтрокуМалоценки(Проводка, ТаблицаПоступленияМалоценки, СвойстваСчетаМалоценки, "Кт", -1);
			КонецЕсли;
		ИначеЕсли Проводка.СчетДт = СчетРасходовНаМалоценку Тогда
			ДобавитьСтрокуМалоценки(Проводка, ТаблицаСписанияМалоценки, СвойстваСчетаМалоценки, "Дт", -1);
		КонецЕсли;
				
	КонецЦикла;
	
	Если ТаблицаПоступленияМалоценки <> Неопределено
		И ТаблицаПоступленияМалоценки.Итог("Сумма") <> 0 Тогда
		ОтразитьРасходыНаМалоценку(Проводки, ТаблицаПоступленияМалоценки, КэшУчетнойПолитики);
	КонецЕсли;
	
	Если ТаблицаПеремещенияМалоценки <> Неопределено
		И ТаблицаПеремещенияМалоценки.Итог("Сумма") <> 0 Тогда
		ОтразитьПеремещениеМалоценки(Проводки, ТаблицаПеремещенияМалоценки, КэшУчетнойПолитики);
	КонецЕсли;
	
	Если ТаблицаСписанияМалоценки <> Неопределено
		И ТаблицаСписанияМалоценки.Итог("Сумма") <> 0 Тогда
		СписатьРасходыНаМалоценку(Проводки, ТаблицаСписанияМалоценки, КэшУчетнойПолитики);
	КонецЕсли;
			
КонецПроцедуры

Процедура ДобавитьСтрокуМалоценки(Проводка, ТаблицаМалоценки, СвойстваСчетаМалоценки, СторонаПроводки, МножительСуммы = 1)
	
	Если ТаблицаМалоценки = Неопределено Тогда
		ТаблицаМалоценки = НоваяТаблицаМалоценки();
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаМалоценки.Добавить();
		
	Для Каждого Субконто Из Проводка["Субконто" + СторонаПроводки] Цикл
		Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			СтрокаТаблицы.Номенклатура = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			СтрокаТаблицы.Склад = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			СтрокаТаблицы.Партия = Субконто.Значение;
		КонецЕсли;				
	КонецЦикла;
	
	СтрокаТаблицы.Организация   = Проводка.Организация;
	Если СвойстваСчетаМалоценки.УчетПоПодразделениям Тогда
		СтрокаТаблицы.Подразделение = Проводка["Подразделение" + СторонаПроводки];
	КонецЕсли;	
	СтрокаТаблицы.Период        = Проводка.Период;
	
	СтрокаТаблицы.Сумма         = МножительСуммы * Проводка.Сумма;
	СтрокаТаблицы.СуммаНУ       = МножительСуммы * Проводка["СуммаНУ" + СторонаПроводки];
	СтрокаТаблицы.СуммаПР       = МножительСуммы * Проводка["СуммаПР" + СторонаПроводки];
	СтрокаТаблицы.СуммаВР       = МножительСуммы * Проводка["СуммаВР" + СторонаПроводки];
	
	Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов
		И Проводка.СчетДт <> ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов 
		И Проводка.Сумма <> 0 Тогда
		СтрокаТаблицы.НомерПроводки = ЭтотОбъект.Индекс(Проводка) + 1;
	КонецЕсли;
	 
КонецПроцедуры

Процедура ДобавитьСтрокуПеремещениеМалоценки(Проводка, ТаблицаМалоценки, СвойстваСчетаМалоценки, ПеревернутьПроводку = Ложь, МножительСуммы = 1)
	
	Если ТаблицаМалоценки = Неопределено Тогда
		ТаблицаМалоценки = НоваяТаблицаПеремещениеМалоценки();
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаМалоценки.Добавить();
	
	СторонаПроводкиДт = ?(ПеревернутьПроводку, "Кт", "Дт");
	Для Каждого Субконто Из Проводка["Субконто" + СторонаПроводкиДт] Цикл
		Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			СтрокаТаблицы.НоменклатураДт = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			СтрокаТаблицы.СкладДт = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			СтрокаТаблицы.ПартияДт = Субконто.Значение;
		КонецЕсли;				
	КонецЦикла;
		
	Если СвойстваСчетаМалоценки.УчетПоПодразделениям Тогда
		СтрокаТаблицы.ПодразделениеДт = Проводка["Подразделение" + СторонаПроводкиДт];
	КонецЕсли;
	
	СторонаПроводкиКт = ?(ПеревернутьПроводку, "Дт", "Кт");
	Для Каждого Субконто Из Проводка["Субконто" + СторонаПроводкиКт] Цикл
		Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			СтрокаТаблицы.НоменклатураКт = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			СтрокаТаблицы.СкладКт = Субконто.Значение;
		ИначеЕсли Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			СтрокаТаблицы.ПартияКт = Субконто.Значение;
		КонецЕсли;				
	КонецЦикла;
		
	Если СвойстваСчетаМалоценки.УчетПоПодразделениям Тогда
		СтрокаТаблицы.ПодразделениеКт = Проводка["Подразделение" + СторонаПроводкиКт];
	КонецЕсли;
	
	СтрокаТаблицы.Организация   = Проводка.Организация;
	СтрокаТаблицы.Период        = Проводка.Период;
	
	СтрокаТаблицы.Сумма         = МножительСуммы * Проводка.Сумма;
	СтрокаТаблицы.СуммаНУ       = МножительСуммы * Проводка["СуммаНУ" + СторонаПроводкиКт];
	СтрокаТаблицы.СуммаПР       = МножительСуммы * Проводка["СуммаПР" + СторонаПроводкиКт];
	СтрокаТаблицы.СуммаВР       = МножительСуммы * Проводка["СуммаВР" + СторонаПроводкиКт];
	 
КонецПроцедуры

Процедура ОтразитьРасходыНаМалоценку(Проводки, ТаблицаПоступленияМалоценки, КэшУчетнойПолитики)
	
	ТаблицаПоступленияМалоценки.Свернуть("Номенклатура, Склад, Партия, Организация, Подразделение, Период", "Сумма, СуммаНУ, СуммаПР, СуммаВР");
	
	МассивНоменклатуры = ТаблицаПоступленияМалоценки.ВыгрузитьКолонку("Номенклатура");
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов);
			
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	НоменклатурныеГруппыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "НоменклатурнаяГруппа");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоступленияМалоценки Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(СтрокаТаблицы.Организация, СтрокаТаблицы.Период, КэшУчетнойПолитики);
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = СтрокаТаблицы.Организация;
		НоваяПроводка.Период      = СтрокаТаблицы.Период;
		НоваяПроводка.Содержание  = НСтр("ru = 'Поступление малоценного оборудования и запасов'");
		
		НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 
			"НоменклатурныеГруппы", НоменклатурныеГруппыНоменклатуры[СтрокаТаблицы.Номенклатура]);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии", СтрокаТаблицы.Партия);
		КонецЕсли;
			
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		НоваяПроводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				НоваяПроводка.СуммаВРДт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				НоваяПроводка.СуммаВРКт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьПеремещениеМалоценки(Проводки, ТаблицаПеремещенияМалоценки, КэшУчетнойПолитики)
	
	ТаблицаПеремещенияМалоценки.Свернуть("НоменклатураДт, СкладДт, ПартияДт, ПодразделениеДт, 
		|НоменклатураКт, СкладКт, ПартияКт, ПодразделениеКт, Организация, Период", 
		"Сумма, СуммаНУ, СуммаПР, СуммаВР");
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПеремещенияМалоценки Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(СтрокаТаблицы.Организация, СтрокаТаблицы.Период, КэшУчетнойПолитики);
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = СтрокаТаблицы.Организация;
		НоваяПроводка.Период      = СтрокаТаблицы.Период;
		НоваяПроводка.Содержание  = НСтр("ru = 'Перемещение малоценного оборудования и запасов'");
		
		НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.НоменклатураКт);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаТаблицы.СкладКт);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПартияКт) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии", СтрокаТаблицы.ПартияКт);
		КонецЕсли;
			
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеКт;
		КонецЕсли;
		
		НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.НоменклатураДт);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаТаблицы.СкладДт);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПартияДт) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии", СтрокаТаблицы.ПартияДт);
		КонецЕсли;
			
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеДт;
		КонецЕсли;
		
		НоваяПроводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			
			Если СвойстваСчета.НалоговыйУчет Тогда
				НоваяПроводка.СуммаВРДт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
				НоваяПроводка.СуммаВРКт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СписатьРасходыНаМалоценку(Проводки, ТаблицаСписанияМалоценки, КэшУчетнойПолитики)
	
	ИменаКолонокОтбора = "Номенклатура, Склад, Партия, Организация, Подразделение, Период"; 
	СтруктураОтбора = Новый Структура(ИменаКолонокОтбора);
	
	ТаблицаСписанияМалоценкиСПроводками = ТаблицаСписанияМалоценки.Скопировать();
	ТаблицаСписанияМалоценки.Свернуть(ИменаКолонокОтбора, "Сумма, СуммаНУ, СуммаПР, СуммаВР");
		
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов);
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСписанияМалоценки Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитики(СтрокаТаблицы.Организация, СтрокаТаблицы.Период, КэшУчетнойПолитики);
		
		//Уберем бухгалтерскую стоимость из проводок по 10.12.1 
		СуммаКУменьшению 	= СтрокаТаблицы.Сумма;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		ПроводкиСписанияМалоценки = ТаблицаСписанияМалоценкиСПроводками.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаСписанияМалоценки Из ПроводкиСписанияМалоценки Цикл
			
			Если СуммаКУменьшению = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаСписанияМалоценки.НомерПроводки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Получить(СтрокаСписанияМалоценки.НомерПроводки - 1);
			
			СуммаКУменьшениюСтроки = Мин(СуммаКУменьшению, Проводка.Сумма); 
			СуммаКУменьшению       = СуммаКУменьшению - СуммаКУменьшениюСтроки;
			
			Проводка.Сумма         = Проводка.Сумма - СуммаКУменьшениюСтроки;
			
			Если ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаВРДт = Проводка.Сумма - Проводка.СуммаНУДт - Проводка.СуммаПРДт;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаВРКт = Проводка.Сумма - Проводка.СуммаНУКт - Проводка.СуммаПРКт;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла;
				
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = СтрокаТаблицы.Организация;
		НоваяПроводка.Период      = СтрокаТаблицы.Период;
		НоваяПроводка.Содержание  = НСтр("ru = 'Списание малоценного оборудования и запасов'");
		
		НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
			
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии", СтрокаТаблицы.Партия);
		КонецЕсли;
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии", СтрокаТаблицы.Партия);
		КонецЕсли;
			
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			НоваяПроводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		НоваяПроводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				НоваяПроводка.СуммаВРДт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				НоваяПроводка.СуммаВРКт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаПР;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция НоваяТаблицаМалоценки()
	
	ТаблицаМалоценки = Новый ТаблицаЗначений;
	
	ТаблицаМалоценки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМалоценки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМалоценки.Колонки.Добавить("Партия",         Неопределено);
	ТаблицаМалоценки.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаМалоценки.Колонки.Добавить("Организация",    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаМалоценки.Колонки.Добавить("Период",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаМалоценки.Колонки.Добавить("Сумма",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаНУ",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаПР",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаВР",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("НомерПроводки",  ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Возврат ТаблицаМалоценки;
	
КонецФункции

Функция НоваяТаблицаПеремещениеМалоценки()
	
	ТаблицаМалоценки = Новый ТаблицаЗначений;
	
	ТаблицаМалоценки.Колонки.Добавить("НоменклатураДт",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМалоценки.Колонки.Добавить("НоменклатураКт",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМалоценки.Колонки.Добавить("СкладДт",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМалоценки.Колонки.Добавить("СкладКт",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМалоценки.Колонки.Добавить("ПартияДт",         Неопределено);
	ТаблицаМалоценки.Колонки.Добавить("ПартияКт",         Неопределено);
	ТаблицаМалоценки.Колонки.Добавить("ПодразделениеДт",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаМалоценки.Колонки.Добавить("ПодразделениеКт",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаМалоценки.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаМалоценки.Колонки.Добавить("Период",           ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаМалоценки.Колонки.Добавить("Сумма",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаНУ",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаПР",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМалоценки.Колонки.Добавить("СуммаВР",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	Возврат ТаблицаМалоценки;
	
КонецФункции

// Раздельный учет НДС

Процедура ОчиститьСубконтоСпособУчетаНДС(Проводки, Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатков") 
	 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") Тогда 
		Возврат;  
	КонецЕсли;
	
	ПустойСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПустаяСсылка();
	ВидСубконтоСпособыУчетаНДС = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС;
	
	КэшУчетнойПолитики = Неопределено;
	
	Для Каждого Проводка Из Проводки Цикл
		
		РаздельныйУчетНДСНаСчете19 = ДанныеУчетнойПолитикиРаздельныйУчетНДСНаСчете19(
			Проводка.Организация, Проводка.Период, КэшУчетнойПолитики);
			
		Если РаздельныйУчетНДСНаСчете19 Тогда
			Продолжить;
		КонецЕсли;
			
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если ВидСубконтоСпособыУчетаНДС = Субконто.Ключ
			   И ЗначениеЗаполнено(Субконто.Значение) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ПустойСпособУчетаНДС);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если ВидСубконтоСпособыУчетаНДС = Субконто.Ключ
			   И ЗначениеЗаполнено(Субконто.Значение) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ПустойСпособУчетаНДС);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеУчетнойПолитикиРаздельныйУчетНДСНаСчете19(Организация, Период, Кэш = Неопределено)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый ТаблицаЗначений;
		Кэш.Колонки.Добавить("Организация", 				Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Кэш.Колонки.Добавить("Период",      				Новый ОписаниеТипов("Дата"));
		Кэш.Колонки.Добавить("РаздельныйУчетНДСНаСчете19",	Новый ОписаниеТипов("Булево"));
		Кэш.Индексы.Добавить("Организация,Период");
	КонецЕсли;
	
	Поиск = Новый Структура;
	Поиск.Вставить("Организация", Организация);
	Поиск.Вставить("Период",      Период);
	
	РезультатПоиска = Кэш.НайтиСтроки(Поиск);
	Если РезультатПоиска.Количество() = 0 Тогда
		
		НоваяСтрока = Кэш.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Поиск);
		
		Если УчетнаяПолитика.Существует(Организация, Период) Тогда
			НоваяСтрока.РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Период);
		Иначе
			НоваяСтрока.РаздельныйУчетНДСНаСчете19 = Ложь;
		КонецЕсли;
		
		РезультатПоиска.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	Возврат РезультатПоиска[0].РаздельныйУчетНДСНаСчете19;
	
КонецФункции

// Межотчетный период

Процедура УстановитьУточнениеПериода(Проводки)
	
	Если НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("УстанавливаемоеУточнениеПериода") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Проводка Из Проводки Цикл
		Проводка.УточнениеПериода = ЭтотОбъект.ДополнительныеСвойства.УстанавливаемоеУточнениеПериода;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли