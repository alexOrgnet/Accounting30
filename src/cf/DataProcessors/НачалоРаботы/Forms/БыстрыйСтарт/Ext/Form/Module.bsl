
&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

&НаКлиенте
Перем ФормаВыбораВидаОрганизации;

&НаКлиенте
Перем ФормаВыбораСистемыНалогообложения;

&НаКлиенте
Перем УИДЗамера;

// Используется для динамического изменения сообщения,
// выводимого при ожидании завершения создания организации
&НаКлиенте
Перем ШагОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОрганизацияСуществует = ОрганизацияСуществует();
	
	ДанныеЗаполнения = ДанныеЗаполненияСервиса();
	
	Если Параметры.Свойство("ВидОрганизации") Тогда
		ВидОрганизации = Параметры.ВидОрганизации;
		ЗапрещеноИзменятьВидОрганизации = ЗначениеЗаполнено(ВидОрганизации);
	КонецЕсли;
	
	Если Параметры.Свойство("СистемаНалогообложения") Тогда
		СистемаНалогообложения = Параметры.СистемаНалогообложения;
		ЗапрещеноИзменятьСистемуНалогообложения = ЗначениеЗаполнено(СистемаНалогообложения);
	КонецЕсли;
	
	ПлательщикЕНВД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПлательщикЕНВД", Ложь);
	ПрименяетсяУСНПатент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПрименяетсяУСНПатент", Ложь);
	ИспользуетсяТрудНаемныхРаботников =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИспользуетсяТрудНаемныхРаботников", Ложь);
	ПрименяетсяЕНВДдо2021 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПрименяетсяЕНВДдо2021", Ложь);

	РазрешенУчетСамозанятого = РазрешенУчетСамозанятого();
	РазрешенУчетИндивидуальногоПредпринимателя = РазрешенУчетИндивидуальногоПредпринимателя();
	РазрешенУчетЮридическогоЛица = РазрешенУчетЮридическогоЛица();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КодЗаявки = ДанныеЗаполнения.КодЗаявкиНаПодключениеКСервисуАУСН;
		ЗаполнениеПоДаннымСервиса = Истина;
		Если ЗначениеЗаполнено(ИНН) Тогда
			ПроверитьИНН(ИНН);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеЗаполнения.КодЗаявкиНаПодключениеКСервисуАУСН) И Не ДанныеЗаполнения.Банк.Пустая() Тогда
			ВыполнитьИнтеграциюСБанком = Истина;
		КонецЕсли;
	КонецЕсли;

	ИнициализироватьСвойстваОрганизации(ЭтотОбъект);
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	НужноПодключатьИнтернетПоддержку = Не (ОбщегоНазначения.РазделениеВключено()
		Или Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации());
	
	ПодключенаИнтернетПоддержка = Не НужноПодключатьИнтернетПоддержку;
	ПодключенСервис1СКонтрагент = Не НужноПодключатьИнтернетПоддержку;
		
	УстановитьПривилегированныйРежим(Истина);
	ЛогинПарольИПП = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ЛогинПарольИПП <> Неопределено Тогда
		
		ЛогинИнтернетПоддержки  = ЛогинПарольИПП.Логин;
		ПарольИнтернетПоддержки = ЛогинПарольИПП.Пароль;
		
	КонецЕсли;
	
	СистемыНалогообложенияДопускающиеСовмещение.ЗагрузитьЗначения(
		Обработки.НачалоРаботы.СистемыНалогообложенияДопускающиеСовмещение());
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.ЗагрузитьЗначения(
		Обработки.НачалоРаботы.СистемыНалогообложенияДопускающиеТрудНаемныхРаботников());
	
	ПоказатьНачалоРаботыВСервисе = ОбщегоНазначения.РазделениеВключено()
		И РольДоступна("ПолныеПрава")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыПредпринимательВСервисе", "Показывать", Истина);
	
	ЗаполнитьОписаниеФункциональности();
	НастроитьЭлементыФункциональности();
	НастроитьВозможностьНачатьРаботу();
	
	ПропускатьВыборВидаБизнеса = ИспользуетсяПолнаяФункциональность()
		Или Не РазрешенУчетРегулярнойДеятельности Или Не РазрешенДополнительныйФункционал();
	
	УчетныеСистемыСПоддержкойПерехода.Загрузить(ЗагрузкаДанныхИзДругихУчетныхСистем.ПоддерживаемыеСистемы());
	ЗаполнитьПоддерживаемыеСистемы();
	ЦветНевидимойРамки = ЦветаСтиля.ЦветФонаФормы;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ШагОжидания = 0;
	
	Если ЗаполнениеПоДаннымСервиса Тогда
		СтраницаПерехода = ИмяНачальнойСтраницы();
		НастроитьФункциональность();
	Иначе
		СтраницаПерехода = СледующаяСтраница();
	КонецЕсли;
	
	ПерейтиНаСтраницу(СтраницаПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "БыстрыйСтартЗакрытиеПоОповещению");
		УстановитьИнтерфейс();
		ОбновитьИнтерфейс();
		
	ИначеЕсли ИмяСобытия = "ОформленыПодписки" И ТарификацияБПВызовСервера.ОтображатьБаннерОжиданияОплатыТарифа() Тогда
		
		Элементы.ГруппаОжиданиеОплатыТарифа.Видимость = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг", 60);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ТарификацияБПКлиентСервер.ИмяДействияОплатаСервиса() Тогда
		СтандартнаяОбработка = Ложь;
		Если ЭтоАдресВременногоХранилища(АдресЗначенийТарифицируемыхОпций) Тогда
			УдалитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
		КонецЕсли;
		АдресЗначенийТарифицируемыхОпций = ТарификацияБПКлиент.ОткрытьФормуОплатыСервиса(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ЗначениеЗаполнено(ВыбранноеЗначение)
		И СледующаяСтраница() = ИмяСтраницыВыбратьФайлыСДаннымиПерехода() Тогда
		Для Каждого ОписаниеФайла Из ВыбранноеЗначение Цикл
			Если Не ЗначениеЗаполнено(ОписаниеФайла.ДвоичныеДанные) Тогда
				ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
			КонецЕсли;
		КонецЦикла;
		ХранилищеДанныхПереходаИзДругойСистемы = ПоместитьВоВременноеХранилище(ВыбранноеЗначение, УникальныйИдентификатор);
		СоздатьОрганизацию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьКомментарийНекорректныйИНН");
	
	Элемент.ОтметкаНезаполненного = Ложь;
	
	ТекстИНН = СокрЛП(Текст);
	ЭтоЮридическоеЛицо = ЭтоЮрЛицо(ТекстИНН);
	
	Если Не ЗапрещеноИзменятьВидОрганизации Тогда
		ВидОрганизации = ?(ЭтоЮридическоеЛицо, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	КонецЕсли;
	
	ДлинаИНН = СтрДлина(ТекстИНН);
	
	Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
		Реквизиты = Неопределено;
		ИнициализироватьВидОрганизации(ЭтотОбъект);
		ИННКомментарий = "";
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
		ТекстИНН, ЭтоЮридическоеЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Реквизиты = ПолучитьРеквизитыПоИНН(ТекстИНН, ЭтоЮридическоеЛицо);
		
		Если Реквизиты <> Неопределено Тогда
			
			ИННКомментарий = Новый ФорматированнаяСтрока(СокращенноеНаименование(Реквизиты.НаименованиеСокращенное));
			
		ИначеЕсли Не ЭтоЮридическоеЛицо Тогда
			
			Если РазрешенУчетСамозанятого Тогда
				ВидОрганизации = "Самозанятый";
			КонецЕсли;
			ИННКомментарий = "";
			ИНННеНайденВЕГРЮЛ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ДлинаИНН = 12 Тогда
			УстановитьКомментарийНекорректныйИНН();
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьКомментарийНекорректныйИНН", 2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	
	ВидОрганизацииВыбранПользователем = Истина;
	Если ВидОрганизации = "Самозанятый" Тогда
		СистемаНалогообложения = "НалогНаПрофессиональныйДоход";
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ФормаВыбораВидаОрганизации <> Неопределено И ФормаВыбораВидаОрганизации.Открыта() Тогда
		ФормаВыбораВидаОрганизации.Закрыть();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПовторногоВыбораВидаОрганизации", Истина);
	ПараметрыФормы.Вставить("ВидОрганизации",                       ВидОрганизации);

	ФормаВыбораВидаОрганизации = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбораСистемыНалогообложения", 
		ПараметрыФормы,
		ЭтотОбъект,
		"ФормаВыбораСистемыНалогообложения_ВыборВидаОрганизации_БыстрыйСтарт");
		
	ФормаВыбораВидаОрганизации.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораВидаОрганизации.ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("ОбновитьВидОрганизации", ЭтотОбъект);
			
	ФормаВыбораВидаОрганизации.Открыть();
			
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОсновнаяСистемаНалогообложенияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ФормаВыбораСистемыНалогообложения <> Неопределено И ФормаВыбораСистемыНалогообложения.Открыта() Тогда
		ФормаВыбораСистемыНалогообложения.Закрыть();
	КонецЕсли;
	
	ПризнакПрименяетсяУСНПатент = Ложь;
	ПризнакПлательщикЕНВД = Ложь;
	
	Если Найти(СистемаНалогообложения, "Упрощенная") Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
		Если СистемаНалогообложения = "УпрощеннаяДоходы" Тогда
			ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы");
		Иначе
			ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы");
		КонецЕсли;
	ИначеЕсли СистемаНалогообложения = "Патентная" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
		ПризнакПрименяетсяУСНПатент = Истина;
	ИначеЕсли СистемаНалогообложения = "ЕНВД" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
		ПризнакПлательщикЕНВД = Истина;
	ИначеЕсли СистемаНалогообложения = "НалогНаПрофессиональныйДоход" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.НалогНаПрофессиональныйДоход");
	Иначе
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПовторногоВыбораСистемыНалогообложения", Истина);
	ПараметрыФормы.Вставить("ВидОрганизации",                              ВидОрганизации);
	ПараметрыФормы.Вставить("СистемаНалогообложения",                      ВидСистемыНалогообложения);
	ПараметрыФормы.Вставить("ОбъектНалогообложенияУСН",                    ОбъектНалогообложенияУСН);
	ПараметрыФормы.Вставить("ПрименяетсяУСНПатент",                        ПризнакПрименяетсяУСНПатент);
	ПараметрыФормы.Вставить("ПлательщикЕНВД",                              ПризнакПлательщикЕНВД);
	
	ФормаВыбораСистемыНалогообложения = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбораСистемыНалогообложения", 
		ПараметрыФормы,
		ЭтотОбъект,
		"ФормаВыбораСистемыНалогообложения_ВыборСистемыНалогообложения_БыстрыйСтарт");
		
	ФормаВыбораСистемыНалогообложения.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораСистемыНалогообложения.ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("ОбновитьСистемуНалогообложения", ЭтотОбъект);
	
	ФормаВыбораСистемыНалогообложения.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	
	ИнициализироватьСистемыНалогообложения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяУСНПатентПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяТрудНаемныхРаботниковПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаПриИзменении(Элемент)
	
	УстановитьНастройкиФункциональности();
	НастроитьВозможностьНачатьРаботу();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидБизнесаВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВидБизнесаВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФункциональностиНаКлиенте(Элемент)
	
	ИмяФункциональности = Элемент.Имя;
	ЗначениеФункциональности = ЭтотОбъект[ИмяФункциональности];
	Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
	
	Если ЗначениеФункциональности Тогда
		ВключитьРодительскуюФункциональность(Функциональность);
	Иначе
		ОтключитьДочернююФункциональность(Функциональность);
	КонецЕсли;
	
	НастроитьВозможностьНачатьРаботу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьСИНН(Команда)
	
	Элементы.ИНН.ОбновитьТекстРедактирования();
	
	Если Не ПроверитьЗаполнениеИНН() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	
	ПерейтиНаСтраницу(СледующаяСтраница());
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезИНН(Команда)
	
	ИНН = "";
	Если Не ЗаполнениеПоДаннымСервиса Тогда
		Реквизиты = Неопределено;
	КонецЕсли;
	ПерейтиНаСтраницу(СледующаяСтраница());
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВидОрганизации(Команда)
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	
	ПерейтиНаСтраницу(СледующаяСтраница());
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСистемаНалогообложения(Команда)
	
	Если ВидОрганизации = "Самозанятый"
		И СистемаНалогообложения <> "НалогНаПрофессиональныйДоход" Тогда
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	КонецЕсли;
	
	Если СистемаНалогообложения = "НалогНаПрофессиональныйДоход" И ПодключитьСервисМойНалог Тогда
		ОткрытьПомощникИнтеграцииСПлатформойСамозанятый = Истина;
	КонецЕсли;
	
	ПерейтиНаСтраницу(СледующаяСтраница());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ИнициализироватьСвойстваОрганизации(ЭтотОбъект);
	
	НавигацияФормы = НавигацияФормы(ЭтотОбъект);
	ПерейтиНаСтраницу(НавигацияФормы[0]);
	
	НастроитьВозможностьНачатьРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключиться(Команда)
	
	Если Не ЗначениеЗаполнено(ЛогинИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Введите логин'"),, "ЛогинИнтернетПоддержки");
		
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПарольИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Введите пароль'"),, "ПарольИнтернетПоддержки");
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьИнтернетПоддержку();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПодключитьсяПозжеНажатие(Элемент)
	
	ИНН = "";
	Реквизиты = Неопределено;
	ПерейтиНаСтраницу(СледующаяСтраница());
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВосстановлениеПароляНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/remind_request"),
		НСтр("ru = 'Восстановление пароля'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРегистрацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/registration"),
		НСтр("ru = 'Регистрация'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяПолнаяФункциональность()
	
	Возврат Обработки.НачалоРаботы.ИспользуетсяПолнаяФункциональность();
	
КонецФункции

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	Если ЗначениеЗаполнено(Пожелание) Тогда
		ОбработанноеПожелание = ЗагрузкаДанныхИзДругихУчетныхСистемКлиентСервер.ОбработатьПожеланиеДляЗаписи(Пожелание);
		Сообщение = СтрШаблон(
			"СтатистикаБП.Обработки.ЗагрузкаДанныхИзДругойУчетнойСистемы.Пожелание.%1", ОбработанноеПожелание);
		СтатистикаПоПоказателямКлиентСервер.ДобавитьСобытие(Сообщение);
	КонецЕсли;
	ПерейтиНаСтраницу(СледующаяСтраница());
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоддерживаемыеСистемы()
	
	ПоддерживаемыеСистемы = Элементы.ДругаяУчетнаяСистема.СписокВыбора;
	ПоддерживаемыеСистемы.Очистить();
	Для Каждого Строка Из УчетныеСистемыСПоддержкойПерехода Цикл
		ЭлементСписка = ПоддерживаемыеСистемы.Добавить(Строка.Имя, Строка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоСамозанятый = ЭтоСамозанятый(Форма.ВидОрганизации);
	ЭтоИндивидуальныйПредприниматель = ЭтоИндивидуальныйПредприниматель(Форма.ВидОрганизации);
	ЭтоЮридическоеЛицо = ЭтоЮридическоеЛицо(Форма.ВидОрганизации);
	
	ОграничениеТарифа = (ЭтоСамозанятый И Не Форма.РазрешенУчетСамозанятого)
		Или (ЭтоИндивидуальныйПредприниматель И Не Форма.РазрешенУчетИндивидуальногоПредпринимателя)
		Или (ЭтоЮридическоеЛицо И Не Форма.РазрешенУчетЮридическогоЛица);
	Если ОграничениеТарифа Тогда
		ТекстПодсказкиОграниченияТарифа = ТекстПодсказкиОграниченияТарифаВидОрганизации(Форма.ВидОрганизации);
	КонецЕсли;
	
	// Баннер с ограничениями тарифов на странице ввода ИНН.
	Элементы.ГруппаОграниченияТарифаИНН.Видимость = ОграничениеТарифа;
	Элементы.ГруппаПродолжитьСИНН.Видимость = Не ОграничениеТарифа;
	Элементы.ГруппаРазделитель.Видимость = Не ОграничениеТарифа;
	Элементы.ГруппаПродолжитьБезИНН.Видимость = Не ОграничениеТарифа;
	Если ОграничениеТарифа Тогда
		Элементы.ПодсказкаОграниченияТарифаИНН.Заголовок = ТекстПодсказкиОграниченияТарифа;
	КонецЕсли;
	
	// Баннер с ограничениями тарифов на странице выбора вида организации.
	Элементы.ГруппаОграниченияТарифаВидОрганизации.Видимость = ОграничениеТарифа;
	Элементы.ПродолжитьВидОрганизации.Видимость = Не ОграничениеТарифа;
	Если ОграничениеТарифа Тогда
		Элементы.ПодсказкаОграниченияТарифаВидОрганизации.Заголовок = ТекстПодсказкиОграниченияТарифа;
	КонецЕсли;
	
	// Баннер с ограничениями тарифов на странице выбора системы налогообложения.
	Если Не Форма.ЗаполнениеПоДаннымСервиса Тогда
		СистемаНалогообложенияНедоступна =
			Форма.ДоступныеПоТарифуСистемыНалогообложения.НайтиПоЗначению(Форма.СистемаНалогообложения) = Неопределено
			Или (Форма.ПрименяетсяУСНПатент
			И Форма.ДоступныеПоТарифуСистемыНалогообложения.НайтиПоЗначению("Патентная") = Неопределено);
		Иначе
		СистемаНалогообложенияНедоступна = Ложь;
	КонецЕсли;
	ОграничениеТарифаУчетЗарплаты = Не РазрешенУчетЗарплаты() И Форма.ИспользуетсяТрудНаемныхРаботников;
	Элементы.ГруппаОграниченияТарифаСистемаНалогообложения.Видимость = СистемаНалогообложенияНедоступна
		Или ОграничениеТарифаУчетЗарплаты;
	Элементы.ПродолжитьСистемаНалогообложения.Видимость = Не СистемаНалогообложенияНедоступна
		И Не ОграничениеТарифаУчетЗарплаты;
	Если Элементы.ГруппаОграниченияТарифаСистемаНалогообложения.Видимость Тогда
		Элементы.ПодсказкаОграниченияТарифаСистемаНалогообложения.Заголовок =
			ТекстПодсказкиОграниченияТарифаСистемаНалогообложения(СистемаНалогообложенияНедоступна);
	КонецЕсли;
	
	СистемаНалогообложенияДопускаетСовмещение = Форма.СистемыНалогообложенияДопускающиеСовмещение.НайтиПоЗначению(
		Форма.СистемаНалогообложения) <> Неопределено;
	
	Элементы.ПлательщикЕНВД.Видимость = Форма.РазрешенУчетРегулярнойДеятельности
		И СистемаНалогообложенияДопускаетСовмещение
		И ТекущаяДатаНаСервере() < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД();
	Элементы.ПрименяетсяУСНПатент.Видимость = Форма.РазрешенУчетРегулярнойДеятельности
		И СистемаНалогообложенияДопускаетСовмещение
		И ЭтоИндивидуальныйПредприниматель;
	Элементы.ТорговыйСбор.Видимость = Форма.РазрешенУчетРегулярнойДеятельности
		И (СистемаНалогообложенияДопускаетСовмещение Или Форма.СистемаНалогообложения = "АУСНДоходы"
			Или Форма.СистемаНалогообложения = "АУСНДоходыМинусРасходы");
	Элементы.ПодключитьСервисМойНалог.Видимость = Форма.СистемаНалогообложения = "НалогНаПрофессиональныйДоход"
		И ДоступнаИнтеграцияССервисомСамозанятых() И ЗначениеЗаполнено(Форма.ИНН);
	
	Элементы.ИспользуетсяТрудНаемныхРаботников.Видимость = ЭтоИндивидуальныйПредприниматель
		И Форма.СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.НайтиПоЗначению(Форма.СистемаНалогообложения) <> Неопределено;
	
	Элементы.ОписаниеСистемаНалогообложения.Видимость = ПустаяСтрока(Форма.ИНН);
	Элементы.ОписаниеВидОрганизации.Видимость = ПустаяСтрока(Форма.ИНН);
	
	Элементы.ВидОрганизации.ОтображениеПодсказки = ОтображениеПодсказки(Форма);
	Элементы.ГруппаОсновнаяСистемаНалогообложения.ОтображениеПодсказки = ОтображениеПодсказки(Форма);
	
	Элементы.ГруппаНастройки.Видимость = ЗначениеЗаполнено(Форма.ВидБизнеса);
	
	НастроитьСтраницуПереходИзДругихСистем(Форма);
	
	ЗаголовокНачатьРаботу = НСтр("ru = 'Начать работу'");
	ЗаголовокПродолжить = НСтр("ru = 'Продолжить'");
	
	Навигация = НавигацияФормы(Форма);
	ИндексПоследнейСтраницы = Навигация.ВГраница() - 1;
	ПоследняяСтраница = Навигация[ИндексПоследнейСтраницы];
	
	Если ПоследняяСтраница = "СтраницаСистемаНалогообложения" Тогда
		Элементы.ПродолжитьСистемаНалогообложения.Заголовок = ЗаголовокНачатьРаботу;
	Иначе
		Элементы.ПродолжитьСистемаНалогообложения.Заголовок = ЗаголовокПродолжить;
	КонецЕсли;
	
	Если ПоследняяСтраница = "СтраницаВидБизнеса" Тогда
		Элементы.НачатьРаботу.Заголовок = ЗаголовокНачатьРаботу;
	Иначе
		Элементы.НачатьРаботу.Заголовок = ЗаголовокПродолжить;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтображениеПодсказки(Форма)
	
	Если ПустаяСтрока(Форма.ИНН) Тогда
		Возврат ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Возврат ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницу(СтраницаПерехода)
	
	Если СтраницаПерехода = ИмяСтраницыЗавершенияРаботы() Тогда
		СоздатьОрганизацию();
	ИначеЕсли СтраницаПерехода = ИмяСтраницыВыбратьФайлыСДаннымиПерехода() Тогда
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзДругойУчетнойСистемы.Форма.ВыбранныеФайлы", , ЭтотОбъект);
	ИначеЕсли СтраницаПерехода = ИмяСтраницыОткрытьВводНачальныхОстатков() Тогда
		ОткрытьВводНачальныхОстатков = Истина;
		СоздатьОрганизацию();
	Иначе
		АктивнаяСтраница = СтраницаПерехода;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[АктивнаяСтраница];
		
		Если АктивнаяСтраница = "СтраницаПодключениеИнтернетПоддержки" Тогда
			
			Элементы.Подключиться.КнопкаПоУмолчанию = Истина;
			Элементы.ГруппаОжиданиеПодключения.Видимость = Ложь;
			ТекущийЭлемент = Элементы.ЛогинИнтернетПоддержки;
			
		ИначеЕсли АктивнаяСтраница = "СтраницаИНН" Тогда
			
			Элементы.ПродолжитьСИНН.КнопкаПоУмолчанию = Истина;
			ТекущийЭлемент = Элементы.ИНН;
			
		ИначеЕсли АктивнаяСтраница = "СтраницаВидОрганизации" Тогда
			
			Элементы.ПродолжитьВидОрганизации.КнопкаПоУмолчанию = Истина;
			ТекущийЭлемент = Элементы.ВидОрганизации;
			// Если интернет поддержка уже подключена, но сервис 1С: Контрагент недоступен, то на странице с выбором
			// вида организации не отображается кнопка "Отмена", т.к. возврат к предыдущем страницам не требуется
			ПоддержкаПодключенаБезСервиса1СКонтрагент = ПодключенаИнтернетПоддержка И Не ПодключенСервис1СКонтрагент;
			Элементы.ОтменаВидОрганизации.Видимость = Не ПоддержкаПодключенаБезСервиса1СКонтрагент;
			
		ИначеЕсли АктивнаяСтраница = "СтраницаСистемаНалогообложения" Тогда
			
			Элементы.ПродолжитьСистемаНалогообложения.КнопкаПоУмолчанию = Истина;
			
			ТекущийЭлемент = Элементы.СистемаНалогообложения;
			Если Не ЗаполнениеПоДаннымСервиса Тогда
				СистемыНалогообложенияСНаемнымиРаботниками = СистемыНалогообложенияДопускающиеТрудНаемныхРаботников;
				ВозможенТрудНаемныхРаботников =
					СистемыНалогообложенияСНаемнымиРаботниками.НайтиПоЗначению(СистемаНалогообложения) <> Неопределено;
				ИспользуетсяТрудНаемныхРаботников = ВозможенТрудНаемныхРаботников И
					ОрганизацииФормыКлиентСервер.ИндивидуальныйПредпринимательЗарегистрированВФСС(Реквизиты);
			КонецЕсли;
				
			Если Не ПризнакЗаполненПодключитьСервисМойНалог Тогда
				ПодключитьСервисМойНалог = СистемаНалогообложения = "НалогНаПрофессиональныйДоход"
					И ДоступнаИнтеграцияССервисомСамозанятых() И ЗначениеЗаполнено(ИНН);
			КонецЕсли;
					
		ИначеЕсли АктивнаяСтраница = "СтраницаВидБизнеса" Тогда
			
			ЗаполнитьСписокВыбораВидаБизнеса();
			ВидБизнесаНеДоступен = Элементы.ВидБизнеса.СписокВыбора.НайтиПоЗначению(ВидБизнеса) = Неопределено;
			
			Если ВидБизнесаНеДоступен Тогда
				ВидБизнеса = ПредопределенноеЗначение("Перечисление.ВидыБизнеса.ПустаяСсылка");
			КонецЕсли;
			
			Если СистемаНалогообложения = "НалогНаПрофессиональныйДоход" Тогда
				Элементы.НачатьРаботу.Заголовок = "Продолжить";
			КонецЕсли;
			
		ИначеЕсли АктивнаяСтраница = "СтраницаВводРеквизитовСамозанятого" Тогда
			Элементы.НачатьРаботу_РеквизитыСамозанятого.КнопкаПоУмолчанию = Истина;
			ТекущийЭлемент = Элементы.Фамилия;
		ИначеЕсли АктивнаяСтраница = "СтраницаОжидание" Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ТекстОжиданияГотовностиНомер1", 1, Истина);
			Элементы.ГруппаЛого.Видимость = Ложь;
		ИначеЕсли АктивнаяСтраница = "СтраницаПереходИзДругихСистем" Тогда
			ВариантНачалаРаботы = "БезПерехода";
		КонецЕсли;
		
		Элементы.ГруппаОжидание.Видимость = Ложь;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СледующаяСтраница()
	
	НавигацияФормы = НавигацияФормы(ЭтотОбъект);
	
	Если ПустаяСтрока(АктивнаяСтраница) Тогда
		Возврат НавигацияФормы[0];
	КонецЕсли;
	
	ИндексТекущейСтраницы = НавигацияФормы.Найти(АктивнаяСтраница);
	Если ИндексТекущейСтраницы <> Неопределено И ИндексТекущейСтраницы < НавигацияФормы.ВГраница() Тогда
		Возврат НавигацияФормы[ИндексТекущейСтраницы + 1];
	Иначе
		Возврат НавигацияФормы[0];
	КонецЕсли;
	
КонецФункции

// Описывает навигацию по страницам формы исходя из текущих значений реквизитов формы
//
// Возвращаемое значение:
//  Массив из Строка - массив имен страниц, переключение на которые доступно при текущих значениях реквизитов формы
//
&НаКлиентеНаСервереБезКонтекста
Функция НавигацияФормы(Форма)
	
	НавигацияФормы = Новый Массив;
	
	Если Форма.НужноПодключатьИнтернетПоддержку И Не Форма.ПодключенаИнтернетПоддержка Тогда
		НавигацияФормы.Добавить("СтраницаПодключениеИнтернетПоддержки");
	КонецЕсли;
	
	Если Не Форма.ОрганизацияСуществует Тогда
		Если Не Форма.ЗапрещеноИзменятьВидОрганизации И Не Форма.ПодключенСервис1СКонтрагент Тогда
			НавигацияФормы.Добавить("СтраницаВидОрганизации");
		Иначе
			НавигацияФормы.Добавить("СтраницаИНН");
			Если Не Форма.ЗапрещеноИзменятьВидОрганизации И ПустаяСтрока(Форма.ИНН) Тогда
				НавигацияФормы.Добавить("СтраницаВидОрганизации");
			КонецЕсли;
		КонецЕсли;
		
		Если Не Форма.ЗапрещеноИзменятьСистемуНалогообложения
			И Не (Форма.ВидОрганизации = "Самозанятый" И Форма.ВидОрганизацииВыбранПользователем) Тогда
			НавигацияФормы.Добавить("СтраницаСистемаНалогообложения");
		КонецЕсли;
	КонецЕсли;
	
	Если Не Форма.ПропускатьВыборВидаБизнеса Тогда
		НавигацияФормы.Добавить("СтраницаВидБизнеса");
	КонецЕсли;
	
	Если Форма.СистемаНалогообложения = "НалогНаПрофессиональныйДоход" И Не Форма.ПодключитьСервисМойНалог Тогда
		НавигацияФормы.Добавить("СтраницаВводРеквизитовСамозанятого");
	КонецЕсли;
	
	Если ПредлагатьПереходСДругихССистем() Тогда
		НавигацияФормы.Добавить("СтраницаПереходИзДругихСистем");
		Если Форма.ТребуетсяВыбратьФайлыДляПереходаИзДругойСистемы Тогда
			НавигацияФормы.Добавить(ИмяСтраницыВыбратьФайлыСДаннымиПерехода());
		ИначеЕсли Форма.ВариантНачалаРаботы = ИмяВариантаЭлектронныеТаблицы() Тогда
			НавигацияФормы.Добавить(ИмяСтраницыОткрытьВводНачальныхОстатков());
		КонецЕсли;
	КонецЕсли;

	НавигацияФормы.Добавить(ИмяСтраницыЗавершенияРаботы());
	
	Возврат НавигацияФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораСистемНалогообложения()
	
	ЭтоЮридическоеЛицо = ЭтоЮридическоеЛицо(ВидОрганизации);
	
	Элементы.СистемаНалогообложения.СписокВыбора.Очистить();
	Если Не ЭтоЮридическоеЛицо
		И РазрешенУчетРегулярнойДеятельности
		И ОбщегоНазначенияБП.ТекущаяДатаНаСервере() >= НалогНаПрофессиональныйДоходКлиентСервер.ДатаНачалаЭксперимента() Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("НалогНаПрофессиональныйДоход", НСтр("ru='Налог на профессиональный доход (""самозанятые"")'"));
	КонецЕсли;
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить("УпрощеннаяДоходы", НСтр("ru='УСН (доходы)'"));
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить("УпрощеннаяДоходыМинусРасходы", НСтр("ru='УСН (доходы минус расходы)'"));
	Если РазрешенУчетРегулярнойДеятельности Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("АУСНДоходы", НСтр("ru='АУСН (доходы)'"));
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("АУСНДоходыМинусРасходы", НСтр("ru='АУСН (доходы минус расходы)'"));
	КонецЕсли;
	Если Не ЭтоЮридическоеЛицо И РазрешенУчетРегулярнойДеятельности Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("Патентная", НСтр("ru='Только патент'"));
		Если ОбщегоНазначенияБП.ТекущаяДатаНаСервере() < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
			Элементы.СистемаНалогообложения.СписокВыбора.Добавить("ЕНВД", НСтр("ru='Только ЕНВД (до конца 2020 года)'"));
		КонецЕсли;
	КонецЕсли;
	Если Не ЭтоЮридическоеЛицо Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("Общая", НСтр("ru='Общая (НДФЛ)'"));
	Иначе
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("Общая", НСтр("ru='Общая (налог на прибыль)'"));
	КонецЕсли;
	
	Если Элементы.СистемаНалогообложения.СписокВыбора.НайтиПоЗначению(СистемаНалогообложения) = Неопределено
		И ЗначениеЗаполнено(Элементы.СистемаНалогообложения.СписокВыбора) Тогда
		СистемаНалогообложения = Элементы.СистемаНалогообложения.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ДоступныеПоТарифуСистемыНалогообложения = ДоступныеПоТарифуСистемыНалогообложения(ЭтоЮридическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидОрганизации(ВыбранныйВидОрганизации, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйВидОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению(ВыбранныйВидОрганизации) <> Неопределено Тогда
		ВидОрганизации = ВыбранныйВидОрганизации;
		ВидОрганизацииВыбранПользователем = Истина;
		Если ВидОрганизации = "Самозанятый" Тогда
			СистемаНалогообложения = "НалогНаПрофессиональныйДоход";
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСистемуНалогообложения(ПараметрыУчетнойПолитики, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаВыбораСистемыНалогообложения = Неопределено;
	
	Если ПараметрыУчетнойПолитики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУчетнойПолитики.ПрименяетсяУСНДоходы Тогда
		Если ПараметрыУчетнойПолитики.ПрименяетсяАУСН Тогда
			СистемаНалогообложения = "АУСНДоходы";
		Иначе
			СистемаНалогообложения = "УпрощеннаяДоходы";
		КонецЕсли;
	ИначеЕсли ПараметрыУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если ПараметрыУчетнойПолитики.ПрименяетсяАУСН Тогда
			СистемаНалогообложения = "АУСНДоходыМинусРасходы";
		Иначе
			СистемаНалогообложения = "УпрощеннаяДоходыМинусРасходы";
		КонецЕсли;
	ИначеЕсли ПараметрыУчетнойПолитики.СистемаНалогообложения =
		ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок")
		И ПараметрыУчетнойПолитики.ПлательщикЕНВД Тогда
		СистемаНалогообложения = "ЕНВД"
	ИначеЕсли ПараметрыУчетнойПолитики.СистемаНалогообложения =
		ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок")
		И ПараметрыУчетнойПолитики.ПрименяетсяУСНПатент Тогда
		СистемаНалогообложения = "Патентная"
	ИначеЕсли ПараметрыУчетнойПолитики.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.НалогНаПрофессиональныйДоход") Тогда
		СистемаНалогообложения = "НалогНаПрофессиональныйДоход";
	ИначеЕсли ПараметрыУчетнойПолитики.СистемаНалогообложения = 
		ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.АУСН") Тогда
		СистемаНалогообложения = "АУСН";	
	Иначе
		СистемаНалогообложения = "Общая"
	КонецЕсли;
	
	ИнициализироватьСистемыНалогообложения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарийНекорректныйИНН()
	
	ИННКомментарий = ТекстНекорректныйИНН();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКомментарийНекорректныйИНН()
	
	УстановитьКомментарийНекорректныйИНН();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТекстОжиданияГотовностиНомер1()
	
	ТекстОжиданияГотовности(НСтр("ru='Готовим приложение%1'"), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТекстОжиданияГотовностиНомер2()
	
	ТекстОжиданияГотовности(НСтр("ru='Загружаем информацию%1'"), 2);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТекстОжиданияГотовностиНомер3()
	
	ТекстОжиданияГотовности(НСтр("ru='Обновляем данные%1'"), 3);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТекстОжиданияГотовностиНомер4()
	
	ТекстОжиданияГотовности(НСтр("ru='Гладим котиков%1'"), 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОжиданияГотовности(Сообщение, НомерСообщения)
	
	ОтключитьОбработчикОжидания(СтрШаблон("Подключаемый_ТекстОжиданияГотовностиНомер%1", НомерСообщения));
	
	ШагОжидания = (ШагОжидания + 1) % 3;
	Точки = Лев("...", ШагОжидания + 1);

	Элементы.ТекстОжиданияГотовности.Заголовок = СтрШаблон(Сообщение, Точки);
	
	Если ШагОжидания < 2 Или НомерСообщения = 4 Тогда
		ПодключитьОбработчикОжидания(СтрШаблон("Подключаемый_ТекстОжиданияГотовностиНомер%1", НомерСообщения), 1, Истина);
	ИначеЕсли НомерСообщения < 4 Тогда
		ПодключитьОбработчикОжидания(СтрШаблон("Подключаемый_ТекстОжиданияГотовностиНомер%1", НомерСообщения + 1 ), 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			ЗавершитьРаботуПомощника();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			ТекущийЭлемент = Элементы.Индикатор;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеИНН()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ИНН) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru='ИНН'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ИНН", Отказ);
		
	Иначе
		
		ИННБезПробелов = СокрЛП(ИНН);
		
		Если СтрДлина(ИННБезПробелов) <> 10 И СтрДлина(ИННБезПробелов) <> 12 Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru='ИНН'"),,, 
				НСтр("ru='ИНН должен состоять из 10 или 12 цифр.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ИНН", Отказ);
			
		Иначе
			
			Если ЗапрещеноИзменятьВидОрганизации Тогда
				// Вид организации заранее предопределен и изменяться не может
				РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
					ИННБезПробелов, ЭтоЮридическоеЛицо(ВидОрганизации));
			Иначе
				// Вид организации определяется по ИНН
				РезультатПроверки = 
					ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННБезПробелов, ЭтоЮрЛицо(ИННБезПробелов));
			КонецЕсли;
			
			Если Не ПустаяСтрока(РезультатПроверки.ОписаниеОшибки) Тогда
			
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru='ИНН'"),,, 
					РезультатПроверки.ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ИНН", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИНН.ОтметкаНезаполненного = Отказ;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СоздатьОрганизацию()
	
	// Если организация уже существует в информационной базе,
	// то окно открывается только для выбора вида деятельности.
	// Поэтому реквизиты в данном случае не важны.
	Если ОрганизацияСуществует Тогда
		РезультатВыполнения = ЗапуститьУстановкуВидаБизнесаВФоне();
	Иначе
		РезультатВыполнения = ЗапуститьСозданиеОрганизациюВФоне();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения)
		Или (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Статус = "Выполняется") Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
		ЗавершитьРаботуПомощника();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СоздатьОрганизациюНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВидОрганизации",           ВидОрганизации);
	ПараметрыЗадания.Вставить("СистемаНалогообложения",   СистемаНалогообложения);
	ПараметрыЗадания.Вставить("Реквизиты",                Реквизиты);
	ПараметрыЗадания.Вставить("ПлательщикЕНВД",           ПлательщикЕНВД);
	ПараметрыЗадания.Вставить("ПрименяетсяУСНПатент",     ПрименяетсяУСНПатент);
	ПараметрыЗадания.Вставить("ПлательщикТорговогоСбора", ПлательщикТорговогоСбора);
	ПараметрыЗадания.Вставить("ИНН",                      ИНН);
	ПараметрыЗадания.Вставить("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников);
	ПараметрыЗадания.Вставить("ВидБизнеса",               ВидБизнеса);
	ПараметрыЗадания.Вставить("НеобходимаяФункциональность", НеобходимаяФункциональность());
	ПараметрыЗадания.Вставить("ПрименяетсяЕНВДдо2021",    ПрименяетсяЕНВДдо2021);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Создание организации'");
	ПараметрыВыполнения.ЗапуститьВФоне= Истина; // В файловом варианте ожидать выполнения ранее запущенных фоновых заданий.
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("Справочники.Организации.СоздатьОрганизацию",
		ПараметрыЗадания,
		ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыПоИНН(ИНН, ЭтоЮрЛицо)
	
	Результат = Неопределено;
	
	Если ЭтоЮрЛицо Тогда
		СведенияОКомпании = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		Результат = Новый Структура("ОписаниеОшибки", "");
		Если ЗначениеЗаполнено(СведенияОКомпании.ОписаниеОшибки) Тогда
			Результат.ОписаниеОшибки = СведенияОКомпании.ОписаниеОшибки;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКомпании.ЕГРЮЛ) Тогда
			Результат = СведенияОКомпании.ЕГРЮЛ;
		Иначе
			ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, ИНН);
		КонецЕсли;
		Результат.Вставить("ИНН", ИНН);
		Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
		Если Не ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			Если ЗначениеЗаполнено(Результат.Руководители) Тогда
				ЗаполнитьЗначенияСвойств(Руководитель, Результат.Руководители[0]);
			Иначе
				Руководитель = Неопределено;
			КонецЕсли;
			Результат.Вставить("Руководитель", Руководитель);
			Результат.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(Результат.ВидДеятельности), Результат.ВидДеятельности.Код, Неопределено));
			Результат.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(Результат.ВидДеятельности) И Результат.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
	Иначе
		Результат = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		Результат.Вставить("КодОКВЭД",
			?(ЗначениеЗаполнено(Результат.ВидДеятельности), Результат.ВидДеятельности.Код, Неопределено));
		Результат.Вставить("ЭтоОКВЭД2",  
			?(ЗначениеЗаполнено(Результат.ВидДеятельности) И Результат.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Неопределено;
	Иначе
		Результат.Вставить("ЮридическоеФизическоеЛицо", 
			?(ЭтоЮрЛицо, 
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, 
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
				
		Результат.Вставить("ОГРН", Результат.РегистрационныйНомер);
		
		// Удаляем свойства типа "ТаблицаЗначений" перед передачей на клиент.
		Обработки.НачалоРаботы.УдалитьТаблицыЗначенийИзСтруктуры(Результат);
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СокращенноеНаименование(Наименование)
	
	Результат = Наименование;
	
	Результат = СтрЗаменить(Результат, "Общество с ограниченной ответственностью", НСтр("ru='ООО'"));
	Результат = СтрЗаменить(Результат,"Акционерное общество", НСтр("ru='АО'"));
	Результат = СтрЗаменить(Результат,"Публичное акционерное общество", НСтр("ru='ПАО'"));
	Результат = СтрЗаменить(Результат, "Закрытое акционерное общество", НСтр("ru='ЗАО'"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ИНН)
	
	Возврат СтрДлина(ИНН) = 10;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФизЛицо(ИНН)
	
	Возврат СтрДлина(ИНН) = 12;
	
КонецФункции

&НаСервере
Процедура ПроверитьИНН(ИНН)
	
	ТекстИНН = СокрЛП(ИНН);
	ЭтоЮридическоеЛицо = ЭтоЮрЛицо(ТекстИНН);
	ЭтоФизЛицо         = ЭтоФизЛицо(ТекстИНН);
	
	Если Не ЗапрещеноИзменятьВидОрганизации Тогда
		ВидОрганизации = ?(ЭтоЮридическоеЛицо, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	КонецЕсли;
	
	ДлинаИНН = СтрДлина(ТекстИНН);
	
	Если Не ЭтоЮридическоеЛицо И Не ЭтоФизЛицо Тогда
		Реквизиты = Неопределено;
		ИнициализироватьВидОрганизации(ЭтотОбъект);
		ИННКомментарий = "";
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
		ТекстИНН, ЭтоЮридическоеЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Реквизиты = ПолучитьРеквизитыПоИНН(ТекстИНН, ЭтоЮридическоеЛицо);
		
		Если Реквизиты <> Неопределено Тогда
			
			ИННКомментарий = Новый ФорматированнаяСтрока(СокращенноеНаименование(Реквизиты.НаименованиеСокращенное));
			
		ИначеЕсли Не ЭтоЮридическоеЛицо Тогда
			
			Если РазрешенУчетСамозанятого Тогда
				ВидОрганизации = "Самозанятый";
			КонецЕсли;
			ИННКомментарий = "";
			ИНННеНайденВЕГРЮЛ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ДлинаИНН = 12 Тогда
			ИННКомментарий = ТекстНекорректныйИНН();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНекорректныйИНН()
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru='ИНН некорректный. Опечатка?'"),, Новый Цвет(255,0,0));
	
КонецФункции

&НаСервере
Функция ДанныеЗаполненияСервиса()
	
	ДанныеЗаполнения = 
		ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.НачалоРаботы.Форма.БыстрыйСтарт","ДанныеЗаполнения");
		
	Если ДанныеЗаполнения = Неопределено ТОгда
		Возврат Неопределено;
	КонецЕсли;
	
	ПризнакЗаполненПодключитьСервисМойНалог = ЗначениеЗаполнено(ДанныеЗаполнения.ПодключитьСервисМойНалог);

	Если ДанныеЗаполнения.Свойство("СистемаНалогообложения") 
			И ПустаяСтрока(ДанныеЗаполнения.СистемаНалогообложения) Тогда
		ДанныеЗаполнения.Вставить("ПрименяетсяУСНПатент", Ложь);
		ДанныеЗаполнения.Вставить("ПлательщикТорговогоСбора", Ложь);
		ДанныеЗаполнения.Вставить("ИспользуетсяТрудНаемныхРаботников", Ложь);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВидБизнеса") 
			И Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидБизнеса) Тогда
		ДанныеЗаполнения.Вставить("ВестиУчетРасчетовСКонтрагентами", Ложь);
		ДанныеЗаполнения.Вставить("ВестиУчетПоДоговорам", Ложь);
		ДанныеЗаполнения.Вставить("ВедетсяРозничнаяТорговля", Ложь);
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСИнтернетМагазином", Ложь);
		ДанныеЗаполнения.Вставить("ИспользоватьОплатуПоПлатежнымКартам", Ложь);
		ДанныеЗаполнения.Вставить("ИспользоватьДоставкуАвтотранспортом", Ложь);
		ДанныеЗаполнения.Вставить("ИспользоватьВыпускПродукции", Ложь);
		ДанныеЗаполнения.Вставить("ВедетсяУчетОсновныхСредств", Ложь);
		ДанныеЗаполнения.Вставить("ОсуществляетсяРеализацияТоваровУслугКомитентов", Ложь);
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("КодЗаявкиНаПодключениеКСервисуАУСН") Или Не ДанныеЗаполнения.Свойство("Банк") Тогда
		ДанныеЗаполнения.Вставить("КодЗаявкиНаПодключениеКСервисуАУСН", "");
		ДанныеЗаполнения.Вставить("Банк", Справочники.КлассификаторБанков.ПустаяСсылка());
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить("Обработка.НачалоРаботы.Форма.БыстрыйСтарт","ДанныеЗаполнения", ИмяПользователя());

	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ИмяНачальнойСтраницы()
	
	ИмяНачальнойСтраницы = "";
	ФИОЗаполнено = Не ПустаяСтрока(Фамилия) Или Не ПустаяСтрока(Имя) Или Не ПустаяСтрока(Отчество);
	
	ВидБизнесаНеДоступен = Истина;
	Если Не ПустаяСтрока(СистемаНалогообложения) И Не ВидБизнеса.Пустая() Тогда
		ОписанияВидовБизнеса = ОписаниеВидовБизнесаНаСервере(СистемаНалогообложения);
		ВидБизнесаНеДоступен =  ОписанияВидовБизнеса.НайтиПоЗначению(ВидБизнеса) = Неопределено;
	КонецЕсли;
	
	Если НужноПодключатьИнтернетПоддержку И Не ПодключенаИнтернетПоддержка Тогда
		ИмяНачальнойСтраницы = "СтраницаПодключениеИнтернетПоддержки";
	ИначеЕсли Не ЗначениеЗаполнено(ИНН) Тогда
		Если Не ЗапрещеноИзменятьВидОрганизации Тогда
			ИмяНачальнойСтраницы = "СтраницаВидОрганизации";
		Иначе
			ИмяНачальнойСтраницы = "СтраницаИНН";
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(СистемаНалогообложения) Тогда
		
		Если (Не ЗапрещеноИзменятьСистемуНалогообложения
			И Не (ВидОрганизации = "Самозанятый" И ВидОрганизацииВыбранПользователем))Тогда
			ИмяНачальнойСтраницы = "СтраницаСистемаНалогообложения";
			ЗаполнитьСписокВыбораСистемНалогообложения();
		КонецЕсли;
		
	ИначеЕсли ВидОрганизации = "Самозанятый" И Не ПодключитьСервисМойНалог 
			И Не ПризнакЗаполненПодключитьСервисМойНалог Тогда
			
		ИмяНачальнойСтраницы = "СтраницаСистемаНалогообложения";
		ЗаполнитьСписокВыбораСистемНалогообложения();
			
	ИначеЕсли ВидБизнеса.Пустая() И Не ПропускатьВыборВидаБизнеса Или ВидБизнесаНеДоступен Тогда
		
		ИмяНачальнойСтраницы = "СтраницаВидБизнеса";

	ИначеЕсли СистемаНалогообложения = "НалогНаПрофессиональныйДоход" 
		И Не ЭтоИндивидуальныйПредприниматель(ВидОрганизации) И Не ПодключитьСервисМойНалог И Не ФИОЗаполнено Тогда
		ИмяНачальнойСтраницы = "СтраницаВводРеквизитовСамозанятого";
	Иначе
		ИмяНачальнойСтраницы = ИмяСтраницыЗавершенияРаботы();
		Если ВидОрганизации = "Самозанятый" И ПодключитьСервисМойНалог Тогда
			ОткрытьПомощникИнтеграцииСПлатформойСамозанятый = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяНачальнойСтраницы;
	
КонецФункции

&НаКлиенте
Процедура НастроитьФункциональность()
	
	СписокФункциональности = СписокФункциональности();
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		ЗначениеФункциональности = ЭтотОбъект[ИмяФункциональности];
		
		Если Не ЗначениеФункциональности Тогда
			Продолжить;
		КонецЕсли;
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		
		Если ЗначениеФункциональности Тогда
			ВключитьРодительскуюФункциональность(Функциональность);
		Иначе
			ОтключитьДочернююФункциональность(Функциональность);
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьВозможностьНачатьРаботу();

КонецПроцедуры

&НаКлиенте
Функция СписокФункциональности()
	
	СписокФункциональности = Новый Массив;
	СписокФункциональности.Добавить("ВестиУчетРасчетовСКонтрагентами");
	СписокФункциональности.Добавить("ВестиУчетПоДоговорам");
	СписокФункциональности.Добавить("ВедетсяРозничнаяТорговля");
	СписокФункциональности.Добавить("ИспользоватьОбменСИнтернетМагазином");
	СписокФункциональности.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	СписокФункциональности.Добавить("ИспользоватьДоставкуАвтотранспортом");
	СписокФункциональности.Добавить("ИспользоватьВыпускПродукции");
	СписокФункциональности.Добавить("ВедетсяУчетОсновныхСредств");
	СписокФункциональности.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	Возврат СписокФункциональности;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовОжиданияПодключения(Ожидание)
	
	Элементы.ГруппаПодключиться.Доступность         = НЕ Ожидание;
	Элементы.Подключиться.Видимость                 = НЕ Ожидание;
	Элементы.ГиперссылкаПодключитьсяПозже.Видимость = НЕ Ожидание;
	Элементы.ГруппаОжиданиеПодключения.Видимость    = Ожидание;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовОжиданияСозданияОрганизации(Ожидание)
	
	Элементы.СтраницаСистемаНалогообложения.Доступность = Не Ожидание;
	Элементы.ОтменаСистемаНалогообложения.Видимость = Не Ожидание;
	Элементы.СтраницаВидБизнеса.Доступность = Не Ожидание;
	Элементы.НачатьРаботу.Видимость = Не Ожидание;
	Элементы.ОтменитьВыборВидаБизнеса.Видимость = Не Ожидание;
	Элементы.ГруппаОжидание.Видимость = Ожидание;
	Элементы.СтраницаВводРеквизитовСамозанятого.Доступность = Не Ожидание;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьИнтернетПоддержку()
	
	УстановитьДоступностьЭлементовОжиданияПодключения(Истина);
	
	Элементы.ГруппаОшибкаПодключения.Видимость = Ложь;
	
	ДлительнаяОперация = ПодключитсяКИнтернетПоддержкеНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецФункции

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПодключения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если РезультатПодключения = "ПодключениеУспешно" Тогда 
		
		ПодключенаИнтернетПоддержка = Истина;
		ПодключенСервис1СКонтрагент = Истина;
		
		Если ЗаполнениеПоДаннымСервиса Тогда
			СтраницаПерехода = ИмяНачальнойСтраницы();
		Иначе
			СтраницаПерехода = СледующаяСтраница();
		КонецЕсли;
		
		ПерейтиНаСтраницу(СтраницаПерехода);
		
	ИначеЕсли РезультатПодключения = "Сервис1СКонтрагентНеПодключен" Тогда
		
		ПодключенаИнтернетПоддержка = Истина;
		ПодключенСервис1СКонтрагент = Ложь;
		ИНН = "";
		Реквизиты = Неопределено;
		
		Если ЗаполнениеПоДаннымСервиса Тогда
			СтраницаПерехода = ИмяНачальнойСтраницы();
		Иначе
			СтраницаПерехода = СледующаяСтраница();
		КонецЕсли;
		
		ПерейтиНаСтраницу(СтраницаПерехода);

		
	Иначе
		// Произошла ошибка
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		
		Если РезультатПодключения = "ОшибкаАвторизации" Тогда
			
			ТекстОшибкиПодключения = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Неверный логин или пароль. Укажите правильные данные для авторизации.'"));
			
		Иначе
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'При подключении к сервису возникла ошибка. Возможно, указаны неверные настройки'") + " ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'прокси-сервера'"),,,, "e1cib/app/ОбщаяФорма.ПараметрыПроксиСервера"));
			МассивСтрок.Добавить(". " + НСтр("ru = 'Подробности в'") + " ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'журнале регистрации'"),,,, "e1cib/app/Обработка.ЖурналРегистрации"));
			МассивСтрок.Добавить(".");
			ТекстОшибкиПодключения = Новый ФорматированнаяСтрока(МассивСтрок);
			
		КонецЕсли;
		
		Элементы.ГруппаОшибкаПодключения.Видимость = Истина;
		Элементы.ТекстОшибкиПодключения.Заголовок = ТекстОшибкиПодключения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитсяКИнтернетПоддержкеНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение регистрационных данных из веб-сервиса'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыЗадания = Новый Структура("ЛогинИПП, ПарольИПП", ЛогинИнтернетПоддержки, ПарольИнтернетПоддержки);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("Обработки.НачалоРаботы.ПодключитьИнтернетПоддержку",
		ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СнятьПризнакНачалаРаботы()
	
	Константы.НачалоРаботы.Установить(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонстанты()
	
	СнятьПризнакНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтерфейс()
	
	УстановленныйВариантИнтерфейса = УстановитьИнтерфейсТаксиПоСистемеНалогообложения();
	
	Если УстановленныйВариантИнтерфейса = "ИнтерфейсТаксиПростой" Тогда
		Если РазрешенУчетРегулярнойДеятельности Тогда
			ОткрытьФорму("Обработка.ПанелиПростойИнтерфейс.Форма.ПанельПомощь");
		Иначе
			ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма");
		КонецЕсли;
	Иначе
		Если ПоказатьНачалоРаботыВСервисе Тогда
			ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	РеквизитыОрганизацииЗаполнены = РеквизитыОрганизацииЗаполнены(
		ВыполнитьИнтеграциюСБанком,
		ОткрытьПомощникИнтеграцииСПлатформойСамозанятый);
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		УстановитьКонстанты();
	КонецЕсли;
	
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	УстановитьИнтерфейс();
	ОбновитьИнтерфейс();
	Если ОткрытьПомощникИнтеграцииСПлатформойСамозанятый Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачалоРаботы", Истина);
		ОткрытьФорму("Обработка.ПомощникИнтеграцииСПлатформойСамозанятые.Форма", ПараметрыФормы);
	КонецЕсли;
	
	Если ВыполнитьИнтеграциюСБанком Тогда
		
		Организация = ОрганизацияПоУмолчанию();
		Если Не Организация.Пустая() Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("Банк", Банк);
			ПараметрыФормы.Вставить("КодЗаявки", КодЗаявки);
			ОткрытьФорму("Обработка.ПодключениеАУСН.Форма.Форма", ПараметрыФормы, , Неопределено);
		КонецЕсли;

	КонецЕсли;
	
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		УстановитьКонстанты();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХранилищеДанныхПереходаИзДругойСистемы) Тогда
		ПараметрыОткрываемойФормы = Новый Структура;
		ПараметрыОткрываемойФормы.Вставить("ВыбранныеФайлы", ХранилищеДанныхПереходаИзДругойСистемы);
		ПараметрыОткрываемойФормы.Вставить("УчетнаяСистема", ДругаяУчетнаяСистема);
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзДругойУчетнойСистемы.Форма", ПараметрыОткрываемойФормы, , Неопределено);
	КонецЕсли;
	
	Если ОткрытьВводНачальныхОстатков Тогда
		Организация = ОрганизацияПоУмолчанию();
		Если Не Организация.Пустая() Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация", Организация);
			ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма", ПараметрыФормы, , Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	// Форма может открываться как форма на рабочем столе, так и обычная форма.
	// В том случае, если форма открывается как форма на рабочем столе, то после установки стандратного интефейса и вызова ОбновитьИнтерфейс()
	// форма автоматически закрывается платформой и дополнительно закрывать ее не нужно.
	Если ЭтотОбъект.Открыта() Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСвойстваОрганизации(Форма)
	
	Если Форма.ЗаполнениеПоДаннымСервиса Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ИНН = "";
	Форма.ИННКомментарий = "";
	Форма.ВидОрганизацииВыбранПользователем = Ложь;
	
	ИнициализироватьВидОрганизации(Форма);
	
	Если Не Форма.ЗапрещеноИзменятьСистемуНалогообложения Тогда
		Форма.СистемаНалогообложения = "НалогНаПрофессиональныйДоход";

		Форма.ПлательщикЕНВД = Ложь;
		Форма.ПрименяетсяУСНПатент = Ложь;
		Форма.ПлательщикТорговогоСбора = Ложь;
	КонецЕсли;
	
	Форма.ВидБизнеса = Неопределено;
	Для Каждого Функциональность Из Форма.ОписаниеФункциональности Цикл
		Форма[Функциональность.Имя] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСистемыНалогообложения()
	
	Если СистемыНалогообложенияДопускающиеСовмещение.НайтиПоЗначению(СистемаНалогообложения) = Неопределено Тогда
		ПлательщикЕНВД = Ложь;
		ПрименяетсяУСНПатент = Ложь;
		ПлательщикТорговогоСбора = Ложь;
	КонецЕсли;
	
	Если СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.НайтиПоЗначению(СистемаНалогообложения) = Неопределено Тогда
		ИспользуетсяТрудНаемныхРаботников = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрганизацию()
	
	ПерейтиНаСтраницу("СтраницаОжидание");
	
	УстановитьДоступностьЭлементовОжиданияСозданияОрганизации(Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_СоздатьОрганизацию", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидаБизнеса()
	
	СписокВыбора = Элементы.ВидБизнеса.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОписанияВидовБизнеса = ОписаниеВидовБизнесаНаСервере(СистемаНалогообложения);
	Для Каждого Описание Из ОписанияВидовБизнеса Цикл
		ЗначениеВидаБизнеса = Описание.Значение;
		Если ЗначениеЗаполнено(Описание.Представление) Тогда
			ПредставлениеВидаБизнеса = СтрШаблон("%1 - %2", Строка(ЗначениеВидаБизнеса), Описание.Представление);
		Иначе
			ПредставлениеВидаБизнеса = Строка(ЗначениеВидаБизнеса);
		КонецЕсли;
		СписокВыбора.Добавить(ЗначениеВидаБизнеса, ПредставлениеВидаБизнеса);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеФункциональности()
	
	ПолноеОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	
	ОписаниеДоступнойФункциональности = ПолноеОписаниеФункциональности.СкопироватьКолонки();
	
	ИменаКонстант = НастраиваемаяФункциональность();
	Для Каждого ИмяФункциональности Из ИменаКонстант Цикл
		НайденныйЭлемент = ПолноеОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", ИмяФункциональности));
		ФункциональностьДоступна = НайденныйЭлемент.Количество() > 0 И НайденныйЭлемент[0].Доступна;
		Элементы[ИмяФункциональности].Видимость = ФункциональностьДоступна;
		Если ФункциональностьДоступна Тогда
			ДоступнаяФункциональность = ОписаниеДоступнойФункциональности.Добавить();
			ЗаполнитьЗначенияСвойств(ДоступнаяФункциональность, НайденныйЭлемент[0]);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеФункциональности.Загрузить(ОписаниеДоступнойФункциональности);
	
	ОграниченияФункциональностиПоТарифу = Обработки.ФункциональностьПрограммы.ОграниченияФункциональностиПоТарифу(ОписаниеДоступнойФункциональности);
	ЗаполнитьОграниченияФункциональностиПоТарифу(ОграниченияФункциональностиПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияФункциональностиПоТарифу(ОграниченияФункциональностиПоТарифу)
	
	Для Каждого ФункциональностьНедоступнаяПоТарифу Из ОграниченияФункциональностиПоТарифу.ФункциональностьНедоступнаяПоТарифу Цикл
		Функциональность = СвойстваФункциональности(ФункциональностьНедоступнаяПоТарифу, ОписаниеФункциональности);
		Если Функциональность <> Неопределено Тогда
			Функциональность.НедоступнаПоТарифу = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФункциональностьБезСвободныхЛицензий Из ОграниченияФункциональностиПоТарифу.ФункциональностьБезСвободныхЛицензий Цикл
		Функциональность = СвойстваФункциональности(ФункциональностьБезСвободныхЛицензий.Имя, ОписаниеФункциональности);
		Если Функциональность <> Неопределено Тогда
			Функциональность.НетСвободнойЛицензии = Истина;
			Функциональность.ДоступноЛицензий = ФункциональностьБезСвободныхЛицензий.ДоступноЛицензий;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", ИмяФункциональности));
	Если СтрокиФункциональности.Количество() > 0 Тогда
		Возврат СтрокиФункциональности[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВключитьРодительскуюФункциональность(Функциональность)
	
	Для Каждого ИмяРодительскогоЭлемента Из Функциональность.РодительскаяФункциональность Цикл
		РодительскийЭлемент = СвойстваФункциональности(ИмяРодительскогоЭлемента, ОписаниеФункциональности);
		Если РодительскийЭлемент <> Неопределено Тогда
			ЭтотОбъект[ИмяРодительскогоЭлемента] = Истина;
			ВключитьРодительскуюФункциональность(РодительскийЭлемент);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДочернююФункциональность(Функциональность)
	
	Для Каждого ИмяДочернегоЭлемента Из Функциональность.ДочерняяФункциональность Цикл
		ДочернийЭлемент = СвойстваФункциональности(ИмяДочернегоЭлемента, ОписаниеФункциональности);
		Если ДочернийЭлемент <> Неопределено Тогда
			ЭтотОбъект[ИмяДочернегоЭлемента] = Ложь;
			ОтключитьДочернююФункциональность(ДочернийЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВозможностьНачатьРаботу()

	ЕстьОграниченияФункциональностиПоТарифу = ЕстьОграниченияФункциональностиПоТарифу();
	Элементы.ГруппаОграниченияТарифаФункциональность.Видимость = ЕстьОграниченияФункциональностиПоТарифу;
	
	Элементы.НачатьРаботу.Видимость = Не ЕстьОграниченияФункциональностиПоТарифу И ЗначениеЗаполнено(ВидБизнеса);
	
	Если Элементы.ГруппаОграниченияТарифаФункциональность.Видимость Тогда
		Элементы.ПодсказкаОграниченияТарифаФункциональность.Заголовок = 
			ТекстПодсказкиОграниченияТарифаФункциональность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОграниченияФункциональностиПоТарифу()
	
	Отбор = Новый Структура("НедоступнаПоТарифу", Истина);
	Если ЕстьВключеннаяФункциональность(Отбор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("НетСвободнойЛицензии", Истина);
	Если ЕстьВключеннаяФункциональность(Отбор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьВключеннаяФункциональность(Отбор)
	
	ОтобраннаяФункциональность = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Для Каждого Функциональность Из ОтобраннаяФункциональность Цикл
		Если ЭтотОбъект[Функциональность.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВключеннаяФункциональность(Отбор)
	
	ИменаКонстант = Новый Массив;
	
	ОтобраннаяФункциональность = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Для Каждого Функциональность Из ОтобраннаяФункциональность Цикл
		Если ЭтотОбъект[Функциональность.Имя] Тогда
			ИменаКонстант.Добавить(Функциональность.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаКонстант;
	
КонецФункции

&НаСервере
Функция ТекстПодсказкиОграниченияТарифаФункциональность()
	
	Отбор = Новый Структура("НедоступнаПоТарифу", Истина);
	НедоступнаяФункциональность = ВключеннаяФункциональность(Отбор);
	
	Отбор = Новый Структура("НетСвободнойЛицензии", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступнаяФункциональность, ВключеннаяФункциональность(Отбор), Истина);
	
	НедоступныеНастройки = Новый Массив;
	
	Для Каждого ИмяФункциональности Из НедоступнаяФункциональность Цикл
		НедоступныеНастройки.Добавить(Элементы[ИмяФункциональности].Заголовок);
	КонецЦикла;
	НедоступныеНастройкиСтрокой = СтрСоединить(НедоступныеНастройки, ", ");
	
	КоличествоОграничений = НедоступныеНастройки.Количество();
	
	Если КоличествоОграничений = 1 Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'На текущем тарифе настройка ""%1"" недоступна. 
			|<a href=""%2"">Перейдите на другой тариф</a>, чтобы продолжить работу в программе.'"),
			НедоступныеНастройкиСтрокой,
			ТарификацияБПКлиентСервер.ИмяДействияОплатаСервиса());
	Иначе
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'На текущем тарифе недоступны настройки: ""%1"". 
			|<a href=""%2"">Перейдите на другой тариф</a>, чтобы продолжить работу в программе.'"),
			НедоступныеНастройкиСтрокой,
			ТарификацияБПКлиентСервер.ИмяДействияОплатаСервиса());
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФункциональности()
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Элемент = Элементы[Функциональность.Имя];
		ЗаполнитьЗначенияСвойств(Элемент, Функциональность, "Заголовок,Подсказка");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиФункциональности()
	
	Если Не ЗначениеЗаполнено(ВидБизнеса) Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимаяФункциональность = Перечисления.ВидыБизнеса.НеобходимаяФункциональность(ВидБизнеса);
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		ВключитьФункциональность = Не (Функциональность.НедоступнаПоТарифу Или Функциональность.НетСвободнойЛицензии);
		Если ВключитьФункциональность Тогда
			ВключитьФункциональность = НеобходимаяФункциональность <> Неопределено
				И НеобходимаяФункциональность.Найти(Функциональность.Имя) <> Неопределено;
		КонецЕсли;
		ЭтотОбъект[Функциональность.Имя] = ВключитьФункциональность;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияСуществует()
	
	Возврат Справочники.Организации.КоличествоОрганизаций() <> 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияПоУмолчанию()
	
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

&НаСервере
Функция УстановитьИнтерфейсТаксиПоСистемеНалогообложения()
	
	// Если организация на момент открытия помощника существовала,
	// то систему налогообложения нужно определять по данным информационной базы.
	// Поэтому систему налогообложения для определения интерфейса оставляем пустой.
	СистемаНалогообложенияДляИнтерфейса = ?(ОрганизацияСуществует, "", СистемаНалогообложения);
	
	ВариантИнтерфейса = Обработки.НачалоРаботы.УстановитьПодходящийИнтерфейс(
		ВидОрганизации,
		СистемаНалогообложения,
		ИспользуетсяТрудНаемныхРаботников,
		РазрешенУчетРегулярнойДеятельности
	);
	
	// Привилегированный режим устанавливается, так как нужно изменить настройки интерфейса
	// для всех пользователей, а не только текущего пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВариантИнтерфейса;
	
КонецФункции

&НаКлиенте
Функция ЗапуститьСозданиеОрганизациюВФоне()
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = ПолучитьРеквизитыПоИНН(ИНН, ЭтоЮрЛицо(ИНН));
	КонецЕсли;
	
	Если Реквизиты <> Неопределено Тогда
		КлючеваяОперация = "БыстрыйСтартСозданиеОрганизацииПоИННРеквизитыПолучены";
	ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
		КлючеваяОперация = "БыстрыйСтартСозданиеОрганизацииПоИННРеквизитыНеПолучены";
	Иначе
		КлючеваяОперация = "БыстрыйСтартСозданиеОрганизацииБезИНН";
	КонецЕсли;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, КлючеваяОперация);
	
	Если Реквизиты = Неопределено И СистемаНалогообложения = "НалогНаПрофессиональныйДоход"
		И Не ПодключитьСервисМойНалог Тогда
		Реквизиты = Новый Структура();
		Реквизиты.Вставить("Фамилия", Фамилия);
		Реквизиты.Вставить("Имя", Имя);
		Реквизиты.Вставить("Отчество", Отчество);
		Реквизиты.Вставить("ИНН", ИНН);
		Реквизиты.Вставить("ОписаниеОшибки", "");
		Реквизиты.Вставить("ЮридическоеФизическоеЛицо",
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	КонецЕсли;
	
	Возврат СоздатьОрганизациюНаСервере();
	
КонецФункции

&НаКлиенте
Функция ЗапуститьУстановкуВидаБизнесаВФоне()
	
	Возврат УстановитьВидБизнесаНаСервере();
	
КонецФункции

&НаСервере
Функция УстановитьВидБизнесаНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВидБизнеса", ВидБизнеса);
	ПараметрыЗадания.Вставить("НеобходимаяФункциональность", НеобходимаяФункциональность());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Установка видов деятельности'");
	ПараметрыВыполнения.ЗапуститьВФоне= Истина; // В файловом варианте ожидать выполнения ранее запущенных фоновых заданий.
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("Справочники.Организации.УстановитьВидБизнесаВФоне",
		ПараметрыЗадания,
		ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастраиваемаяФункциональность()
	
	ИменаКонстант = Новый Массив;
	ИменаКонстант.Добавить("ВестиУчетРасчетовСКонтрагентами");
	ИменаКонстант.Добавить("ВестиУчетПоДоговорам");
	ИменаКонстант.Добавить("ВедетсяРозничнаяТорговля");
	ИменаКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	ИменаКонстант.Добавить("ИспользоватьДоставкуАвтотранспортом");
	ИменаКонстант.Добавить("ИспользоватьВыпускПродукции");
	ИменаКонстант.Добавить("ВедетсяУчетОсновныхСредств");
	ИменаКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ИменаКонстант.Добавить("ИспользоватьОбменСИнтернетМагазином");
	
	Возврат ИменаКонстант;
	
КонецФункции

&НаСервере
Функция НеобходимаяФункциональность()
	
	Результат = Новый Массив;
	
	ИменаКонстант = НастраиваемаяФункциональность();
	Для Каждого ИмяФункциональности Из ИменаКонстант Цикл
		Если ЭтотОбъект[ИмяФункциональности] Тогда
			Результат.Добавить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	
	Возврат ОбщегоНазначенияБП.ТекущаяДатаНаСервере();
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг()
	
	Если ТарификацияБПВызовСервера.ТарифицируемыеОпцииИзменены(АдресЗначенийТарифицируемыхОпций) Тогда
		РазрешенУчетСамозанятого = РазрешенУчетСамозанятого();
		РазрешенУчетИндивидуальногоПредпринимателя = РазрешенУчетИндивидуальногоПредпринимателя();
		РазрешенУчетЮридическогоЛица = РазрешенУчетЮридическогоЛица();
		ДоступныеПоТарифуСистемыНалогообложения = ДоступныеПоТарифуСистемыНалогообложения(ЭтоЮридическоеЛицо(ВидОрганизации));
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг");
		Элементы.ГруппаОжиданиеОплатыТарифа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешенУчетСамозанятого()
	
	Возврат ТарификацияБП.РазрешенСамозанятый();
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешенУчетИндивидуальногоПредпринимателя()
	
	Возврат ТарификацияБП.РазрешенИндивидуальныйПредприниматель();
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешенУчетЮридическогоЛица()
	
	Возврат ТарификацияБП.РазрешеноЮридическоеЛицо();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодсказкиОграниченияТарифаВидОрганизации(ВыбранныйВидОрганизации)
	
	СоставСтроки = Новый Массив;
	
	Если ЭтоСамозанятый(ВыбранныйВидОрганизации) Тогда
		СоставСтроки.Добавить(
			НСтр("ru = 'На текущем тарифе учет самозанятого недоступен.'"));
	ИначеЕсли ЭтоИндивидуальныйПредприниматель(ВыбранныйВидОрганизации) Тогда
		СоставСтроки.Добавить(
			НСтр("ru = 'На текущем тарифе учет индивидуального предпринимателя недоступен.'"));
	Иначе
		СоставСтроки.Добавить(
			НСтр("ru = 'На текущем тарифе учет юридического лица недоступен.'"));
	КонецЕсли;
	
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = '<a href=""%1"">Перейдите на другой тариф</a>, чтобы продолжить работу в программе.'"),
		ТарификацияБПКлиентСервер.ИмяДействияОплатаСервиса()));
	
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСамозанятый(ВидОрганизации)
	
	Возврат ВидОрганизации = "Самозанятый";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИндивидуальныйПредприниматель(ВидОрганизации)
	
	Возврат ВидОрганизации = "ИндивидуальныйПредприниматель";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮридическоеЛицо(ВидОрганизации)
	
	Возврат ВидОрганизации = "ЮридическоеЛицо";
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеПоТарифуСистемыНалогообложения(ЭтоЮридическоеЛицо)
	
	ДоступныеСистемы = Новый СписокЗначений();
	ДоступныеСистемы.Добавить("ЕНВД");
	
	Если ТарификацияБП.РазрешенНалогНаПрофессиональныйДоход() Тогда
		ДоступныеСистемы.Добавить("НалогНаПрофессиональныйДоход");
	КонецЕсли;
	
	Если ТарификацияБП.РазрешенаПатентнаяСистемаНалогообложения() Тогда
		ДоступныеСистемы.Добавить("Патентная");
	КонецЕсли;
	
	Если ТарификацияБП.РазрешенаУСН() Тогда
		ДоступныеСистемы.Добавить("УпрощеннаяДоходы");
		ДоступныеСистемы.Добавить("УпрощеннаяДоходыМинусРасходы");
	КонецЕсли;

	Если ТарификацияБП.РазрешенаАУСН() Тогда
		ДоступныеСистемы.Добавить("АУСНДоходы");
		ДоступныеСистемы.Добавить("АУСНДоходыМинусРасходы");
	КонецЕсли;
	
	Если (ЭтоЮридическоеЛицо И ТарификацияБП.РазрешенаОбщаяСистемаНалогообложения())
		Или (Не ЭтоЮридическоеЛицо И ТарификацияБП.РазрешенНДФЛИП()) Тогда
		ДоступныеСистемы.Добавить("Общая");
	КонецЕсли;
	
	Возврат ДоступныеСистемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешенДополнительныйФункционал()
	
	Возврат ТарификацияБП.РазрешенДополнительныйФункционал();
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешенУчетЗарплаты()
	
	Возврат ТарификацияБП.РазрешенУчетЗарплаты();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодсказкиОграниченияТарифаСистемаНалогообложения(СистемаНалогообложенияНедоступна)
	
	СоставСтроки = Новый Массив;
	
	Если СистемаНалогообложенияНедоступна Тогда
		СоставСтроки.Добавить(
			НСтр("ru = 'На текущем тарифе выбранный налоговый режим недоступен.'"));
	Иначе
		СоставСтроки.Добавить(
			НСтр("ru = 'На текущем тарифе учет зарплаты и кадров недоступен.'"));
	КонецЕсли;
	
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = '<a href=""%1"">Перейдите на другой тариф</a>, чтобы продолжить работу в программе.'"),
		ТарификацияБПКлиентСервер.ИмяДействияОплатаСервиса()));
	
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

&НаКлиенте
Процедура ВидБизнесаВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элементы.ВидБизнеса.СписокВыбора Цикл
		НайденноеВхождение = СтрНайти(НРег(ЭлементСписка.Представление), НРег(Текст));
		Если НайденноеВхождение > 0 Тогда
			СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если СписокВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(СписокВыбора, Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска)
	
	РезультатСписок = Новый СписокЗначений;
	
	Для Каждого ТекЗначение Из ДанныеВыбора Цикл
		Представление = ОбщегоНазначенияБП.ПодсветитьСтрокуПоиска(ТекЗначение.Представление, ТекстПоиска);
		РезультатСписок.Добавить(ТекЗначение.Значение, Представление);
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеВидовБизнесаНаСервере(СистемаНалогообложения)
	
	Если СистемаНалогообложения = "НалогНаПрофессиональныйДоход" Тогда
		ОписаниеВидовБизнеса = Перечисления.ВидыБизнеса.ОписанияВидовБизнесаДляСамозанятых();
	Иначе
		ОписаниеВидовБизнеса = Перечисления.ВидыБизнеса.ОписанияВидовБизнеса();
	КонецЕсли;
	
	Возврат ОписаниеВидовБизнеса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтраницыЗавершенияРаботы()
	
	Возврат "СоздатьОрганизацию";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтраницыВыбратьФайлыСДаннымиПерехода()
	
	Возврат "ВыбратьФайлыСДаннымиДругойУчетнойСистемы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтраницыПереходИзДругихСистем()
	
	Возврат "СтраницаПереходИзДругихСистем";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтраницыОткрытьВводНачальныхОстатков()
	
	Возврат "ОткрытьВводНачальныхОстатков";
	
КонецФункции

&НаКлиенте
Процедура ПодключитьСервисМойНалогПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаИнтеграцияССервисомСамозанятых()
	
	Возврат ИнтеграцияСПлатформойСамозанятые.ДоступенСервисИнтеграции();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредлагатьПереходСДругихССистем()
	
	Возврат ОбщегоНазначения.РежимОтладки() Или ОбщегоНазначения.РазделениеВключено();
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыОрганизацииЗаполнены(ВыполнитьИнтеграциюСБанком, ОткрытьПомощникИнтеграцииСПлатформойСамозанятый)
	
	Организация = ОрганизацияПоУмолчанию();
	ИННЗаполнен = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	
	Возврат Не ВыполнитьИнтеграциюСБанком И Не ОткрытьПомощникИнтеграцииСПлатформойСамозанятый И ИННЗаполнен;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьВидОрганизации(Форма)
	
	Если Не Форма.ЗапрещеноИзменятьВидОрганизации Тогда
		Если Форма.РазрешенУчетИндивидуальногоПредпринимателя Тогда
			Форма.ВидОрганизации = "ИндивидуальныйПредприниматель";
		ИначеЕсли Форма.РазрешенУчетСамозанятого Тогда
			Форма.ВидОрганизации = "Самозанятый";
		Иначе
			Форма.ВидОрганизации = "ЮридическоеЛицо";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНачалаРаботыПриИзменении(Элемент)
	
	ДругаяУчетнаяСистема = "";
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяУчетнаяСистемаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВариантаБезПерехода()
	
	Возврат "БезПерехода";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВариантаЛокальнаяВерсия()
	
	Возврат "ЛокальнаяВерсия1С";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВариантаЭлектронныеТаблицы()
	
	Возврат "ЭлектронныеТаблицы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВариантаДругаяУчетнаяСистема()
	
	Возврат "ДругаяСистема";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСтраницуПереходИзДругихСистем(Форма)
	
	Если Форма.АктивнаяСтраница <> ИмяСтраницыПереходИзДругихСистем() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ПоказатьПожелание = Ложь;
	СтандартныеРазмерыГруппыКоманд = Истина;
	Элементы.НачатьРаботуПереходИзДругихСистем.Видимость = Истина;
	Элементы.ПодсказкаПоПереходуИзДругойСистемы.Высота = 2;
	Форма.ТребуетсяВыбратьФайлыДляПереходаИзДругойСистемы = Ложь;
	Если Форма.ВариантНачалаРаботы = ИмяВариантаБезПерехода() Тогда
		Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Ложь;
		Элементы.НачатьРаботуПереходИзДругихСистем.Заголовок = НСтр("ru = 'Начать работу'");
	ИначеЕсли Форма.ВариантНачалаРаботы = ИмяВариантаЛокальнаяВерсия() Тогда
		Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Истина;
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(НСтр( "ru = 'Данные можно перенести с компьютера в облачную версию'"));
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Как в 1CFresh загрузить базу данных из локальной версии?'"),
				,
				,
				,
				"https://its.1c.ru/bmk/bp30/data_import_fresh"));
		Форма.ПодсказкаПоПереходуИзДругойСистемы = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		Элементы.ПодсказкаПоПереходуИзДругойСистемы.Высота = 2;
		Элементы.НачатьРаботуПереходИзДругихСистем.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНачалаРаботы = ИмяВариантаДругаяУчетнаяСистема() Тогда
		ОтборУчетнаяСистема = Новый Структура("Имя", Форма.ДругаяУчетнаяСистема);
		НайденнаяИнформация = Форма.УчетныеСистемыСПоддержкойПерехода.НайтиСтроки(ОтборУчетнаяСистема);
		Если ЗначениеЗаполнено(НайденнаяИнформация) Тогда
			ПоддерживаемаяСистема = НайденнаяИнформация[0];
		Иначе
			Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Ложь;
			Элементы.НачатьРаботуПереходИзДругихСистем.Видимость = Ложь;
			ПоддерживаемаяСистема = Неопределено;
		КонецЕсли;
		
		Если ПоддерживаемаяСистема <> Неопределено Тогда
			Если Не ПоддерживаемаяСистема.ПоддержкаОтсутствует Тогда
				Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Истина;
				ЧастиЗаголовка = Новый Массив;
				Сообщение = НСтр("ru = 'Как в 1С:Бухгалтерию 8 перенести данные из учетной системы %1'");
				ЧастиЗаголовка.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(Сообщение, ПоддерживаемаяСистема.Представление),
						,
						,
						,
						ПоддерживаемаяСистема.АдресИнструкции));
				Форма.ПодсказкаПоПереходуИзДругойСистемы = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
				Элементы.НачатьРаботуПереходИзДругихСистем.Заголовок = НСтр("ru = 'Выбрать файлы с данными'");
				Форма.ТребуетсяВыбратьФайлыДляПереходаИзДругойСистемы = Истина;
			Иначе
				Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Ложь;
				ПоказатьПожелание = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(НСтр("ru = 'После начала работы программа предложит перенести'"));
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(НСтр("ru = 'начальные остатки в 1С с помощью специального помощника'"));
		Форма.ПодсказкаПоПереходуИзДругойСистемы = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		Элементы.ПодсказкаПоПереходуИзДругойСистемы.Видимость = Истина;
		Элементы.НачатьРаботуПереходИзДругихСистем.Заголовок = НСтр("ru = 'Ввести начальные остатки'");
	КонецЕсли;
	Элементы.Пожелание.Видимость = ПоказатьПожелание;
	Если ПоказатьПожелание Тогда
		Элементы.СтраницыКомандыНачалаРаботы.ТекущаяСтраница = Элементы.ГруппаСообщитьРазработчикам;
	Иначе
		Элементы.СтраницыКомандыНачалаРаботы.ТекущаяСтраница = Элементы.ГруппаПродолжитьПереходИзДругихСистем;
	КонецЕсли;
	
	СписокВыбораВарианта = Элементы.ВариантНачалаРаботыПродолжение.СписокВыбора;
	ДругаяСистема = СписокВыбораВарианта.НайтиПоЗначению(ИмяВариантаДругаяУчетнаяСистема());
	Если ДругаяСистема <> Неопределено Тогда
		ДругаяСистема.Представление = ПредставлениеВариантаДругойУчетнойСистемы(
			Форма.ВариантНачалаРаботы = ИмяВариантаДругаяУчетнаяСистема());
	КонецЕсли;
	
	Если Форма.ВариантНачалаРаботы = ИмяВариантаДругаяУчетнаяСистема() Тогда
		Элементы.ДругаяУчетнаяСистема.Доступность = Истина;
		Элементы.ДругаяУчетнаяСистема.РежимВыбораИзСписка = Истина;
		Элементы.ДругаяУчетнаяСистема.ЦветРамки = Новый Цвет;
	Иначе
		Элементы.ДругаяУчетнаяСистема.Доступность = Ложь;
		Элементы.ДругаяУчетнаяСистема.РежимВыбораИзСписка = Ложь;
		Элементы.ДругаяУчетнаяСистема.ЦветРамки = Форма.ЦветНевидимойРамки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВариантаДругойУчетнойСистемы(ВыбранВариантДругаяСистема)
	
	Если ВыбранВариантДругаяСистема Тогда
		Возврат НСтр("ru = 'В другой учетной системе (не 1С):'");
	Иначе
		Возврат НСтр("ru = 'В другой учетной системе (не 1С)'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти