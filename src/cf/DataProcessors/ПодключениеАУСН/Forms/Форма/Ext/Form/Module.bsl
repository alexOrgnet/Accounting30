#Область ОписаниеПеременных

&НаКлиенте
Перем КодЗаявкиВведенныйТекст;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоИзменятьСостояниеИнтеграции = ПравоДоступа(
		"Редактирование", Метаданные.РегистрыСведений.СостоянияИнтеграцииАУСН);
	
	НастройкаОбсужденийДоступна = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	
	ЗаполнитьРеквизитыШапкиПриСоздании();
	УправлениеФормойПриСоздании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(Объект.КодЗаявки) И ПроверитьЗаполнение() Тогда
		
		Если СостояниеИнтеграции <> ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено") Тогда
			НайтиПодтвердитьЗаявку();
		КонецЕсли;
		
	Иначе
		
		Если ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда  
			// Получаем список банков, которые зарегистрированы в сервисе
			ВыполнитьМетодВФоне("СписокБанков"); 
		Иначе
			ОтобразитьПодключениеКПорталу("СписокБанков");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВыполнитьОбменССервисомАУСН = Ложь;
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики"
		И Параметр = Объект.Организация Тогда
		ОрганизацияОбработатьИзменение();
	ИначеЕсли ИмяСобытия = "ИнтеграцияАУСН_ИзмененоСостояние"
		И Объект.Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация") Тогда
		Если СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено") Тогда
			ВыполнитьОбменССервисомАУСН = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбсужденияПодключены" Тогда
		УправлениеФормой(ЭтотОбъект);
		ОбновитьПовторноИспользуемыеЗначения();
		Если УведомленияОтФНСАУСНВызовСервера.ОбсужденияПодключены() Тогда
			УведомленияОтФНСАУСНКлиент.Подключить();
		КонецЕсли;
		ВыполнитьОбменССервисомАУСН = Истина;
	ИначеЕсли ИмяСобытия = ИнтеграцияАУСНКлиент.ИмяСобытияОбменССервисом() И Источник = ЭтотОбъект Тогда
		Если УведомленияОтФНСАУСНВызовСервера.ОбсужденияПодключены() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПоказатьУведомленияАУСНОтФНС", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьОбменССервисомАУСН Тогда
		ПодключитьОбработчикОжидания("Подключаемый_АУСН", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтеграцияАУСНКлиент.ОткрытьЖурналРегистрации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Ошибка"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключение Тогда
		Если Не ЗначениеЗаполнено(Объект.КодЗаявки) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Код заявки'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.КодЗаявки", , Отказ);
		ИначеЕсли СтрДлина(Объект.КодЗаявки) <> ДлинаКодаЗаявки() Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Код заявки'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.КодЗаявки", , Отказ); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	БанкОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемаяСистемаНалогообложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты";
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Настройки налогов и отчетов'");
	ПараметрыОткрытия.Уникальность = УникальныйИдентификатор;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("РежимНастройки", Истина);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КакПолучитьКодЗаявкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЛичныйКабинетБанка" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ЛичныйКабинетБанка) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ЛичныйКабинетБанка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиПриИзменении(Элемент)
	
	КодЗаявкиОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	КодЗаявкиВведенныйТекст = СокрЛП(Текст);
	
	ПодключитьОбработчикОжидания("Подключаемый_НайтиЗаявку", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подтвердить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Если КодЗаявкиПроверен Тогда
			ВыполнитьМетодВФоне("ПодтвердитьЗаявку");
		Иначе
			НайтиПодтвердитьЗаявку();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ВыполнитьМетодВФоне("ОтклонитьЗаявку");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСервис(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ВыполнитьМетодВФоне("ОтключитьБанк");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	УстановитьСостояниеИнтеграции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	Объект.КодЗаявки = "";
	КодЗаявкиОбработатьИзменение();
	
	УстановитьСостояниеИнтеграции(ЭтотОбъект);
	
	Если Не ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Если Элементы.Банк.СписокВыбора.Количество() = 0 Тогда
			Метод = "СписокБанков";
		Иначе
			Метод = "";
		Конецесли;
		ОтобразитьПодключениеКПорталу(Метод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбсуждения(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбсуждения(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьОтключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияАУСНКлиент.ВыполнитьОбменССервисом(ЭтотОбъект, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормойПриСоздании()
	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		Или Не ЗначениеЗаполнено(Объект.Организация);
	Элементы.ОрганизацияСсылка.Видимость = Не Элементы.Организация.Видимость;
	
	УстановитьСостояниеИнтеграции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	СостояниеФормы = Форма.СостояниеФормы;
	ВсеСостоянияФормы = ВсеСостоянияФормы();
	
	СостояниеФормыОжидание = СостояниеФормы = ВсеСостоянияФормы.Ожидание;
	Элементы.Организация.Доступность = Не СостояниеФормыОжидание;
	Элементы.Банк.Доступность = Не СостояниеФормыОжидание;
	
	Элементы.Банк.Видимость = (Элементы.Банк.СписокВыбора.Количество() <> 1);
	Элементы.БанкСсылка.Видимость = Не Элементы.Банк.Видимость;
	
	МожноПодключитьОбсуждения = УведомленияОтФНСАУСНВызовСервера.МожноПодключитьОбсуждения()
		И (СостояниеФормы = ВсеСостоянияФормы.ЗаявкаПодтверждена
		Или СостояниеФормы = ВсеСостоянияФормы.Отключение);
	
	Элементы.ОбратитесьКАдминистратору.Видимость = ?(МожноПодключитьОбсуждения,
		Не Форма.НастройкаОбсужденийДоступна,
		Не Форма.ЕстьПравоИзменятьСостояниеИнтеграции);
	
	Для Каждого ИмяКоманды Из ИменаКомандИзмененияСостояния() Цикл
		Элемент = Элементы.Найти(ИмяКоманды);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Форма.ЕстьПравоИзменятьСостояниеИнтеграции;
		КонецЕсли;
	КонецЦикла;
	
	Если СостояниеФормы = ВсеСостоянияФормы.НеЗаполнено Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.НекорректныеРеквизиты Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.НекорректныеРеквизиты;
		Если Не Форма.ПрименяетсяАУСН Тогда
			Форма.ОписаниеНезаполненногоРеквизита = НСтр("ru = 'Организация не применяет АУСН'");
		Иначе
			Форма.ОписаниеНезаполненногоРеквизита = "";
		КонецЕсли;
		Элементы.ПрименяемаяСистемаНалогообложения.Видимость = Не Форма.ПрименяетсяАУСН
			И ЗначениеЗаполнено(Форма.ПрименяемаяСистемаНалогообложения);
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Ожидание Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Ошибка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.ПредставлениеОшибки.Видимость = ЗначениеЗаполнено(Форма.ПредставлениеОшибки);
		Если Элементы.ПредставлениеОшибки.Видимость Тогда
			Элементы.ПредставлениеОшибки.Высота = СтрЧислоСтрок(Форма.ПредставлениеОшибки);
		КонецЕсли;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Подключение Тогда
		
		Если Форма.ЕстьПравоИзменятьСостояниеИнтеграции Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключение;
			Элементы.КакПолучитьКодЗаявки.Видимость = ЗначениеЗаполнено(Форма.ЛичныйКабинетБанка);
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая;
		КонецЕсли;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.ЗаявкаПодтверждена Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкаПодтверждена;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Отключение Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтключение;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.СервисОтключен Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСервисОтключен;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.ЗаявкаОтклонена Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкаОтклонена;
		
	КонецЕсли;
	
	ОбсужденияПодключены = УведомленияОтФНСАУСНВызовСервера.ОбсужденияПодключены();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОповещения",
		"Видимость",
		МожноПодключитьОбсуждения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодключитьОповещения",
		"Видимость",
		Не ОбсужденияПодключены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтключитьОповещения",
		"Видимость",
		ОбсужденияПодключены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодключитьОбсуждения",
		"Видимость",
		Форма.НастройкаОбсужденийДоступна);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтключитьОбсуждения",
		"Видимость",
		Форма.НастройкаОбсужденийДоступна);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыполнитьОбмен",
		"Видимость",
		СостояниеФормы = ВсеСостоянияФормы.Отключение);
	
	Элементы.Подтвердить.КнопкаПоУмолчанию = Не МожноПодключитьОбсуждения;
	Элементы.ПодключитьОбсуждения.КнопкаПоУмолчанию = МожноПодключитьОбсуждения;
	Элементы.ВыполнитьОбмен.КнопкаПоУмолчанию = Элементы.ВыполнитьОбмен.Видимость И ОбсужденияПодключены;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКомандИзмененияСостояния()
	
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("Отклонить");
	ИменаКоманд.Добавить("Отключить");
	ИменаКоманд.Добавить("Повторить");
	ИменаКоманд.Добавить("Подключить");
	ИменаКоманд.Добавить("Подтвердить");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеФормы(СостояниеФормы, Форма)
	
	Форма.СостояниеФормы = СостояниеФормы;
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПодключениеКПорталу(Метод = "", Ответ = Неопределено)
	
	ИмяОбработчикаЗавершения = ?(Метод = "СписокБанков",
		"Подключаемый_ПолучитьСписокБанков",
		"Подключаемый_ЗавершитьОбработкуОшибки");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Ответ", Ответ);
	ДополнительныеПараметры.Вставить("ФормаВладелец" , ЭтотОбъект);
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		ИмяОбработчикаЗавершения, ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияАУСНКлиент.ОтобразитьПодключениеКПорталу(ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработатьИзменение()
	
	Объект.КодЗаявки = "";
	КодЗаявкиОбработатьИзменение();
	
	БанкТекущееЗначение = Объект.Банк;
	ПрочитатьРеквизитыОрганизации(ЭтотОбъект);
	
	Если БанкТекущееЗначение <> Объект.Банк Тогда
		БанкОбработатьИзменение();
	Иначе
		УстановитьСостояниеИнтеграции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработатьИзменение()
	
	Объект.КодЗаявки = "";
	КодЗаявкиОбработатьИзменение();
	
	ДанныеБанка = ДанныеБанка(Объект.Банк);
	ЛичныйКабинетБанка = ДанныеБанка.ЛичныйКабинет;
	ИдентификаторБанка = ДанныеБанка.Идентификатор;
	
	УстановитьСостояниеИнтеграции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиОбработатьИзменение()
	
	Объект.КодЗаявки = СокрЛП(Объект.КодЗаявки);
	КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(Объект.КодЗаявки);
	
	Если СтрДлина(Объект.КодЗаявки) <> ДлинаКодаЗаявки() Тогда
		КодЗаявкиПроверен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеИнтеграции(Форма)
	
	Объект = Форма.Объект;
	
	СостоянияФормы = ВсеСостоянияФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Или Не ЗначениеЗаполнено(Объект.Банк) Тогда
		СостояниеИнтеграции = Неопределено;
		УстановитьСостояниеФормы(СостоянияФормы.НеЗаполнено, Форма);
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ПрименяетсяАУСН Тогда
		СостояниеИнтеграции = Неопределено;
		УстановитьСостояниеФормы(СостоянияФормы.НекорректныеРеквизиты, Форма);
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграции = СостояниеИнтеграции(Объект.Организация, Объект.Банк);
	Если СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отсутствует")
		Или СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отключено") Тогда
		УстановитьСостояниеФормы(СостоянияФормы.Подключение, Форма);
	ИначеЕсли СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено") Тогда
		УстановитьСостояниеФормы(СостоянияФормы.Отключение, Форма);
	ИначеЕсли СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Ошибка") Тогда
		УстановитьСостояниеФормы(СостоянияФормы.Ошибка, Форма);
	Иначе
		УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеИнтеграции(Знач Организация, Знач Банк)
	
	Возврат РегистрыСведений.СостоянияИнтеграцииАУСН.СостояниеИнтеграции(Организация, Банк);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыШапкиПриСоздании()
	
	Перем ОсновнаяОрганизация;
	
	Объект.Организация = Параметры.Организация;
	Объект.Банк = Параметры.Банк;
	
	Если Параметры.Свойство("КодЗаявки") Тогда
		Объект.КодЗаявки = Параметры.КодЗаявки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ИнтеграцияАУСНПереопределяемый.ПолучитьОсновнуюОрганизацию(ОсновнаяОрганизация);
		Объект.Организация = ОсновнаяОрганизация;
	КонецЕсли;
	
	ПрочитатьРеквизитыОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьРеквизитыОрганизации(Форма)
	
	Объект = Форма.Объект;
	
	СведенияОбОрганизации = СведенияОбОрганизации(Объект.Организация);
	
	Форма.ПрименяемаяСистемаНалогообложения = СведенияОбОрганизации.ПредставлениеСистемыНалогообложения;
	Форма.ПрименяетсяАУСН = СведенияОбОрганизации.ПрименяетсяАУСН;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбОрганизации(Знач Организация)
	
	Возврат ИнтеграцияАУСН.СведенияОбОрганизации(Организация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСостоянияФормы()

	Результат = Новый Структура;
	Результат.Вставить("НеЗаполнено", "Не заполнены обязательные реквизиты");
	Результат.Вставить("НекорректныеРеквизиты", "Некорректные значения реквизитв");
	Результат.Вставить("Ожидание", "Ожидание фоновой операции");
	Результат.Вставить("Подключение", "Подключение");
	Результат.Вставить("ЗаявкаПодтверждена", "Заявка подтверждена");
	Результат.Вставить("ЗаявкаОтклонена", "Заявка отклонена");
	Результат.Вставить("Отключение", "Отключение");
	Результат.Вставить("СервисОтключен", "Сервис отключен");
	Результат.Вставить("Ошибка", "Ошибка");
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура Подключаемый_НайтиЗаявку()
	
	ДлинаВведенногоКодаЗаявки = СтрДлина(КодЗаявкиВведенныйТекст);
	
	КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(КодЗаявкиВведенныйТекст);
	
	Если ДлинаВведенногоКодаЗаявки = ДлинаКодаЗаявки() Тогда
		ВыполнитьМетодВФоне("НайтиЗаявку");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодсказкаНекорректногоКодаЗаявки()
	
	СодержаниеПодсказки = НСтр("ru = 'Заявка не найдена. Проверьте правильность заполнения.'");
	ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НекорректнаяЗаявкаАУСНЦвет");
	Возврат Новый ФорматированнаяСтрока(СодержаниеПодсказки, , ЦветПодсказки);
	
КонецФункции

&НаКлиенте
Функция ПодсказкаКодаЗаявки(КодЗаявки, СтатусЗаявки = Неопределено, НаименованиеБанка = "")
	
	ДлинаВведенногоКодаЗаявки = СтрДлина(КодЗаявки);
	ДлинаКодаЗаявки = ДлинаКодаЗаявки(); 
	
	Если СтатусЗаявки <> Неопределено Тогда
		Если СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Новая Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Найдена новая заявка %1'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Найдена новая заявка'");
			КонецЕсли; 
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НоваяЗаявкаАУСНЦвет");
		ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Принята Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда  
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Заявка %1 уже подтверждена'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Заявка уже подтверждена'");
			КонецЕсли;
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст");
		ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Отклонена Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Заявка %1 отклонена'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Заявка отклонена'");
			КонецЕсли;
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НекорректнаяЗаявкаАУСНЦвет");
		Иначе
			СодержаниеПодсказки = "";
			ЦветПодсказки = Новый Цвет();
		КонецЕсли;
		
		ТекстПодсказки = Новый ФорматированнаяСтрока(СодержаниеПодсказки, , ЦветПодсказки);
		
	ИначеЕсли 0 < ДлинаВведенногоКодаЗаявки И ДлинаВведенногоКодаЗаявки < ДлинаКодаЗаявки Тогда
		ОсталосьВвести = ДлинаКодаЗаявки() - ДлинаВведенногоКодаЗаявки;
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Осталось ввести %1 символ;;Осталось ввести %1 символа;Осталось ввести %1 символов;Осталось ввести %1 символов'"),
			ОсталосьВвести);
		ТекстПодсказки = Новый ФорматированнаяСтрока(ТекстПодсказки, , ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст"));
	Иначе
		ТекстПодсказки = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаКодаЗаявки()
	
	Возврат 36;
	
КонецФункции

#Область ИнтеграцияАУСН

&НаКлиенте
Процедура ВыполнитьМетодВФоне(Метод, ПараметрыВыполнения = Неопределено)
	
	Если Не ЕстьПравоИзменятьСостояниеИнтеграции И МетодИзменяетСостояниеИнтеграции(Метод) Тогда
		ПредставлениеОшибки = НСтр("ru = 'Недостаточно прав доступа. Обратитесь к администратору'");
		УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
		Возврат;
	Иначе
		ПредставлениеОшибки = "";
	КонецЕсли;
	
	ПараметрыМетода = ПараметрыВыполненияМетода(Метод);
	ДлительнаяОперация = ВыполнитьМетодВФонеНаСервере(ПараметрыМетода, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетодИзменяетСостояниеИнтеграции(Метод) Тогда
		УстановитьСостояниеФормы(ВсеСостоянияФормы().Ожидание, ЭтотОбъект);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;  
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("Банк", Объект.Банк);
	ДополнительныеПараметры.Вставить("КодЗаявки", Объект.КодЗаявки);
	Если ПараметрыВыполнения <> Неопределено Тогда 
		ДополнительныеПараметры.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыполненияМетода(Метод)
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(Метод);
	Если ПараметрыМетода.Свойство("ИдентификаторБанка") И Не ЗначениеЗаполнено(ИдентификаторБанка) Тогда
		ИдентификаторБанка = ИнтеграцияАУСНВызовСервераПовтИсп.ИдентификаторБанкаПоКлассификатору(Объект.Банк);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ЭтотОбъект);
	
	Если Метод = "НайтиЗаявку" И ПараметрыМетода.Свойство("КодЗаявки") тогда
		ПараметрыМетода.КодЗаявки = КодЗаявкиВведенныйТекст;
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьМетодВФонеНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	Возврат ИнтеграцияАУСН.ВыполнитьВФоне(ПараметрыМетода, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыполненияМетода(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = ОтветМетода(Результат, ДополнительныеПараметры.Метод);
	
	Если Ответ <> Неопределено Тогда
		ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры);
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтветМетода(Результат, Метод)

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Если МетодИзменяетСостояниеИнтеграции(Метод) Тогда
			ПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
		КонецЕсли;
		ЗаписатьОшибкуВЖурналРегистрации(
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = ?(ЭтоАдресВременногоХранилища(Результат.АдресРезультата), 
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата), 
		Неопределено);
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач КраткоеПредставлениеОшибки, Знач ПодробноеПредставлениеОшибки)
	
	ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры)
	
	СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		Если ДополнительныеПараметры.Метод = "СписокБанков" Тогда
			ОбработатьОтвет_СписокБанков(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "НайтиЗаявку" Тогда
			ОбработатьОтвет_НайтиЗаявку(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ПодтвердитьЗаявку" Тогда
			ОбработатьОтвет_ПодтвердитьЗаявку(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ОтклонитьЗаявку" Тогда
			ОбработатьОтвет_ОтклонитьЗаявку(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ОтключитьБанк" Тогда
			ОбработатьОтвет_ОтключитьБанк(ДополнительныеПараметры);
		Иначе
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		КодСостояния = Ответ.КодСостояния;
		
		Если КодСостояния = 401 И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			// Требуется подключение к Порталу
			ОтобразитьПодключениеКПорталу(ДополнительныеПараметры.Метод, Ответ);
			
		Иначе
			
			Если МетодИзменяетСостояниеИнтеграции(ДополнительныеПараметры.Метод) Тогда
				Если ЗначениеЗаполнено(Ответ.Сообщение) Тогда
					ПредставлениеОшибки = Ответ.Сообщение;
				Иначе
					ПредставлениеОшибки = СтрШаблон(
						НСтр("ru='Ошибка при вызове метода %1, код %2.'"),
						ДополнительныеПараметры.Метод,
						Ответ.КодСостояния);
				КонецЕсли;
				
				УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьСписокБанков(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		
		ВыполнитьМетодВФоне("СписокБанков");
		
	Иначе
		
		ПредставлениеОшибки = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено'");
		УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершитьОбработкуОшибки(Результат, ПараметрыЗавершения) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		
		ВыполнитьМетодВФоне(ПараметрыЗавершения.Метод);
		
	Иначе
		
		Ответ = ПараметрыЗавершения.Ответ;
		Метод = ПараметрыЗавершения.Метод;
		
		Если МетодИзменяетСостояниеИнтеграции(Метод) Тогда
			
			Если ЗначениеЗаполнено(Ответ.Сообщение) Тогда
				ПредставлениеОшибки = Ответ.Сообщение;
			Иначе
				ПредставлениеОшибки = СтрШаблон(НСтр("ru='Ошибка при вызове метода %1, код %2.'"), Метод, Ответ.КодСостояния);
			КонецЕсли;
			
			УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_СписокБанков(Результат, ПараметрыМетода)
	
	Если ЭтоАдресВременногоХранилища(АдресСпискаБанков) Тогда
		УдалитьИзВременногоХранилища(АдресСпискаБанков);
	КонецЕсли;
	
	ВыбранныйБанк = Объект.Банк;
	
	СписокБанков = ОбновитьСписокБанков(Результат, Объект.Организация, Объект.Банк);
	Элементы.Банк.СписокВыбора.ЗагрузитьЗначения(СписокБанков);
	Элементы.Банк.РежимВыбораИзСписка = (СписокБанков.Количество() > 0);
	
	Если Объект.Банк <> ВыбранныйБанк Тогда
		БанкОбработатьИзменение();
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.БанкиАУСН"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСписокБанков(Знач РезультатВыполненияМетода, Знач Организация, ВыбранныйБанк)
	
	ПодключенныеБанки = ИнтеграцияАУСН.ОбновитьСписокБанков(РезультатВыполненияМетода);
	
	Если ПодключенныеБанки.Количество() > 0 Тогда
		
		Если Не ЗначениеЗаполнено(ВыбранныйБанк) Тогда
			НастроенныеПодключения = РегистрыСведений.СостоянияИнтеграцииАУСН.ВсеСостоянияИнтеграции(Организация, Истина);
			Для Каждого Настройка Из НастроенныеПодключения Цикл
				Если ПодключенныеБанки.Найти(Настройка.Ключ) <> Неопределено Тогда
					ВыбранныйБанк = Настройка.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбранныйБанк)
			И ПодключенныеБанки.Найти(ВыбранныйБанк, "Банк") = Неопределено Тогда
			ВыбранныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыбранныйБанк) Тогда
			НастройкиПодключения = ИнтеграцияАУСН.НовыеНастройкиПодключения(Организация, ПодключенныеБанки);
			ВыбранныйБанк = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПодключения, "Банк");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыбранныйБанк) Тогда
			ВыбранныйБанк = ПодключенныеБанки.Получить(0).Банк;
		КонецЕсли;
		
	Иначе
		ВыбранныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПодключенныеБанки.ВыгрузитьКолонку("Банк");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет_НайтиЗаявку(Результат, ПараметрыМетода)
	
	КодНайденнойЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "requestUeid", "");
	РеквизитыБанковскихСчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "bankAccounts", Новый Массив);
	
	КодЗаявкиПроверен = КодНайденнойЗаявки = КодЗаявкиВведенныйТекст
		И ПроверитьРеквизитыБанковскихСчетов(РеквизитыБанковскихСчетов);
	
	ПараметрыВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыМетода, "ПараметрыВыполнения", Новый Структура);
	
	ПодтвердитьЗаявку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения, "ПодтвердитьЗаявку", Ложь);
	
	Если КодЗаявкиПроверен Тогда
		
		Если РеквизитыБанковскихСчетов.Количество() > 0 Тогда
			ДобавитьСчета(РеквизитыБанковскихСчетов);
		КонецЕсли;
		
		СтатусЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "status", "");
		НаименованиеБанка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "bankName", "");
		КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(КодЗаявкиВведенныйТекст, СтатусЗаявки, НаименованиеБанка); 
		
		ПараметрыВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыМетода, "ПараметрыВыполнения", Новый Структура);
			
		Если ПодтвердитьЗаявку Тогда
			ВыполнитьМетодВФоне("ПодтвердитьЗаявку");
		КонецЕсли;
		
	Иначе
		
		КодЗаявкиПодсказка = ПодсказкаНекорректногоКодаЗаявки();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьРеквизитыБанковскихСчетов(РеквизитыБанковскихСчетов) 
	
	Если РеквизитыБанковскихСчетов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	БИКВыбранногоБанка = БИКБанка(Объект.Банк);
	
	ВГраница = РеквизитыБанковскихСчетов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		РеквизитыБанковскогоСчета = РеквизитыБанковскихСчетов[ВГраница - Индекс];
		Если ТипЗнч(РеквизитыБанковскогоСчета) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		БИКБанковскогоСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыБанковскогоСчета, "bic", "");
		Если БИКВыбранногоБанка <> БИКБанковскогоСчета Тогда
			РеквизитыБанковскихСчетов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыБанковскихСчетов.Количество() = 0 Тогда
		// Не осталось ни одного правильного счета
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция БИКБанка(Знач Банк)
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет_ПодтвердитьЗаявку(Результат, ПараметрыМетода)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НовоеСостояниеИнтеграции = ЗаписатьСостояниеИнтеграцииПриПодключении(
				ПараметрыМетода.Организация, ПараметрыМетода.Банк, ПараметрыМетода.КодЗаявки, Результат);
		Исключение
			ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Подключение не завершено'"));
			УстановитьСостояниеФормы(ВсеСостоянияФормы().Ошибка, ЭтотОбъект);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции = Неопределено Тогда
		// Состояние не изменилось, возвращаем форму к исходному состоянию
		УстановитьСостояниеИнтеграции(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции <> СостояниеИнтеграции Тогда
		
		СостояниеИнтеграции = НовоеСостояниеИнтеграции;
		
		Если СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено") Тогда
			УстановитьСостояниеФормы(ВсеСостоянияФормы().ЗаявкаПодтверждена, ЭтотОбъект);
		Иначе
			УстановитьСостояниеИнтеграции(ЭтотОбъект);
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Организация", ПараметрыМетода.Организация);
		ПараметрОповещения.Вставить("Банк", ПараметрыМетода.Банк);
		Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
		
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_ОтклонитьЗаявку(Результат, ПараметрыМетода)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НовоеСостояниеИнтеграции = ЗаписатьСостояниеИнтеграцииПриПодключении(
			ПараметрыМетода.Организация, ПараметрыМетода.Банк, ПараметрыМетода.КодЗаявки, Результат);
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции = Неопределено Тогда
		// Состояние не изменилось, возвращаем форму к исходному состоянию
		УстановитьСостояниеИнтеграции(ЭтотОбъект);
		Возврат;
	Иначе
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции <> СостояниеИнтеграции Тогда
		
		СостояниеИнтеграции = НовоеСостояниеИнтеграции;
		
		Если СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отсутствует") Тогда
			УстановитьСостояниеФормы(ВсеСостоянияФормы().ЗаявкаОтклонена, ЭтотОбъект);
		Иначе
			УстановитьСостояниеИнтеграции(ЭтотОбъект);
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Организация", ПараметрыМетода.Организация);
		ПараметрОповещения.Вставить("Банк ", ПараметрыМетода.Банк);
		Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
		
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_ОтключитьБанк(ПараметрыМетода)
	
	НовоеСостояниеИнтеграции = ЗаписатьСостояниеИнтеграцииПриОтключении(ПараметрыМетода.Организация, ПараметрыМетода.Банк);
	
	Если НовоеСостояниеИнтеграции = Неопределено Тогда
		// Состояние не изменилось, возвращаем форму к исходному состоянию
		УстановитьСостояниеИнтеграции(ЭтотОбъект);
		Возврат;
	Иначе
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции <> СостояниеИнтеграции Тогда
		
		СостояниеИнтеграции = НовоеСостояниеИнтеграции;
		
		Если СостояниеИнтеграции = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отключено") Тогда
			УстановитьСостояниеФормы(ВсеСостоянияФормы().СервисОтключен, ЭтотОбъект);
		Иначе
			УстановитьСостояниеИнтеграции(ЭтотОбъект);
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Организация", ПараметрыМетода.Организация);
		ПараметрОповещения.Вставить("Банк", ПараметрыМетода.Банк);
		Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
		
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьСостояниеИнтеграцииПриПодключении(Организация, Банк, КодЗаявки, РезультатВыполнения)
	
	Если КодЗаявки <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "requestUeid", "") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтатусЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "status", "");
	Если СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Принята Тогда
		СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Подключено;
	ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Отклонена Тогда
		СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Отсутствует;
	Иначе
		ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Сервер вернул некорректный статус заявки: %1'"), СтатусЗаявки);
		ЗаписатьОшибкуВЖурналРегистрации(ПредставлениеОшибки, ПредставлениеОшибки);
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
		Результат = РегистрыСведений.СостоянияИнтеграцииАУСН.ЗаписатьСостояниеИнтеграции(
			Организация, Банк, СостояниеИнтеграции, КодЗаявки);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат ?(Результат, СостояниеИнтеграции, Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьСостояниеИнтеграцииПриОтключении(Организация, Банк)
	
	СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Отключено;
	
	Результат = РегистрыСведений.СостоянияИнтеграцииАУСН.ЗаписатьСостояниеИнтеграции(
		Организация, Банк, СостояниеИнтеграции);
	
	Возврат ?(Результат, СостояниеИнтеграции, Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодИзменяетСостояниеИнтеграции(Метод)
	
	Возврат МетодыИзменяющиеСостояниеИнтеграции().Найти(Метод) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодыИзменяющиеСостояниеИнтеграции()
	
	Методы = Новый Массив;
	Методы.Добавить("ПодтвердитьЗаявку");
	Методы.Добавить("ОтклонитьЗаявку");
	Методы.Добавить("ОтключитьВсе");
	Методы.Добавить("ОтключитьОрганизацию");
	Методы.Добавить("ОтключитьБанк");
	
	Возврат Методы;
	
КонецФункции

&НаСервере
Процедура ДобавитьСчета(БанковскиеСчета)
	Рубль = Справочники.Валюты.НайтиПоКоду(БанковскиеПравила.КодРубляВНомереСчета());
	СчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Объект.Организация, Рубль); 
	БИКВыбранногоБанка = БИКБанка(Объект.Банк);
	Для Каждого БанковскийСчет Из БанковскиеСчета Цикл
		
		Если БанковскийСчет.bic <> БИКВыбранногоБанка Тогда 
			Продолжить;
		КонецЕсли;
		
		Банк = БанкПоБИК(БанковскийСчет.bic);
		НомерСчета = БанковскийСчет.accountNumber;
		Счет =  Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(Объект.Организация, Банк, НомерСчета);
			
		Если Не Счет.Пустая() Тогда
			
			Если Счет.ПометкаУдаления Тогда
				СчетОбъект = Счет.ПолучитьОбъект();
				СчетОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйБанковскийСчет.Банк = Банк;
		НовыйБанковскийСчет.НомерСчета = НомерСчета;
		НовыйБанковскийСчет.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(НовыйБанковскийСчет, 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование"));
			
		Если БанковскиеПравила.ЭтоРублевыйСчет(НомерСчета) Тогда
			НовыйБанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			НовыйБанковскийСчет.Валютный = Ложь;
			Если Объект.Организация.ОсновнойБанковскийСчет.Пустая() И СчетаОрганизации.Количество() = 0 Тогда
				НовыйБанковскийСчетСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
				УстановитьОсновнойСчетОрганизации(НовыйБанковскийСчетСсылка);
				НовыйБанковскийСчет.УстановитьСсылкуНового(НовыйБанковскийСчетСсылка);
			Иначе
				// Проверяем и включаем ФО ИспользоватьНесколькоБанковскихСчетовОрганизации.
				БанковскиеСчетаВызовСервера.ПроверитьИспользованиеНесколькоБанковскихСчетов(Объект.Организация);
			КонецЕсли;
		Иначе
			КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(НомерСчета);
			НовыйБанковскийСчет.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
			НовыйБанковскийСчет.Валютный = Истина;
		КонецЕсли;
		
		НовыйБанковскийСчет.Владелец = Объект.Организация;
		НовыйБанковскийСчет.Записать();

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойСчетОрганизации(НовыйБанковскийСчетСсылка)
	
	ОрганизацияОбъект = Объект.Организация.ПолучитьОбъект();
	ОрганизацияОбъект.Заблокировать();
	ОрганизацияОбъект.ОсновнойБанковскийСчет = НовыйБанковскийСчетСсылка;
	ОрганизацияОбъект.Записать();

КонецПроцедуры

&НаСервере
Функция БанкПоБИК(БИК)
	
	Банк = Справочники.Банки.ПустаяСсылка();
	
	КлассификаторБанка = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
	МассивКлассификаторовБанков = Новый Массив;
	МассивКлассификаторовБанков.Добавить(КлассификаторБанка);
	МассивБанков = РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивКлассификаторовБанков);
	
	Если МассивБанков.Количество() > 0 Тогда
		Банк = МассивБанков[0];
	КонецЕсли;
	
	Возврат Банк;
	
КонецФункции

&НаКлиенте
Процедура НайтиПодтвердитьЗаявку()
	
	Если СтрДлина(Объект.КодЗаявки) <> ДлинаКодаЗаявки() Тогда
		КодЗаявкиОбработатьИзменение();
	Иначе
		КодЗаявкиВведенныйТекст = Объект.КодЗаявки;
		ПараметрыВыполнения = Новый Структура("ПодтвердитьЗаявку", Истина);
		ВыполнитьМетодВФоне("НайтиЗаявку", ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АУСН()
	
	ИнтеграцияАУСНКлиент.ВыполнитьОбменССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеБанка()
	
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("ЛичныйКабинет", "");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ДанныеБанка(Знач Банк)
	
	Данные = НовыйДанныеБанка();
	Данные.ЛичныйКабинет = ИнтеграцияАУСНПовтИсп.СсылкаЛичныйКабинетБанка(Банк);
	Данные.Идентификатор = ИнтеграцияАУСНПовтИсп.ИдентификаторБанкаПоКлассификатору(Банк);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти