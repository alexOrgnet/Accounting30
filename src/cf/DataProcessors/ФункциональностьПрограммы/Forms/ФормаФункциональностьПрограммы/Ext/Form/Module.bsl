&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтерфейсТаксиПростой = Обработки.ФункциональностьПрограммы.ПростойИнтерфейсФункциональности();
	
	ЗаполнитьОписаниеФункциональности();
	
	ЗаполнитьРеквизитыФункциональности();
	
	ДоступностьРазделаПроверена = Новый Структура;
	ВыполняетсяИзменениеФункциональности = Новый Структура;
	ВыполняетсяПроверкаДоступностиРаздела = Новый Структура;
	
	ДоступноИзменениеФункциональности = РольДоступна("ПолныеПрава")
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	Если НЕ ДоступноИзменениеФункциональности Тогда
		УстановитьДоступностьРазделов(ЭтотОбъект, Ложь, ОписаниеФункциональности);
		// Не выполняем проверку на доступность у не полных прав.
		Для Каждого Раздел Из РазделыФункциональности(ОписаниеФункциональности) Цикл
			ДоступностьРазделаПроверена.Вставить(Раздел, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьСписокРазделов();
	Элементы.СписокРазделов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость", Истина);
	
	ПоследнийОткрытыйРаздел = ХранилищеОбщихНастроек.Загрузить("ФункциональностьОткрытыйРаздел",,, ИмяПользователя());
	
	ТекущаяСтраница = Неопределено;
	
	Если Параметры.Свойство("ТекущаяСтраница", ТекущаяСтраница)
		Или ПоследнийОткрытыйРаздел <> Неопределено Тогда
		
		ТекущаяСтраница = ?(ТекущаяСтраница = Неопределено, ПоследнийОткрытыйРаздел, ТекущаяСтраница);
		ТекущийРаздел = ТекущаяСтраница;
		
		Для каждого Страница Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
			Страница.Видимость = Страница.Имя = ТекущаяСтраница;
		КонецЦикла;
		
		НайденныеРазделы = СписокРазделов.НайтиСтроки(Новый Структура("Имя", ТекущаяСтраница));
		Если НайденныеРазделы.Количество() > 0 Тогда
			Раздел = НайденныеРазделы[0];
			Элементы.СписокРазделов.ТекущаяСтрока = Раздел.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ДоступноИзменениеФункциональности Тогда
			ИмяРаздела = СтрЗаменить(ТекущаяСтраница, "Группа", "");
			Если НЕ ДоступностьРазделаПроверена.Свойство(ИмяРаздела) Тогда
				ДоступностьРазделаПроверена.Вставить(ИмяРаздела, Истина);
				ДлительнаяОперацияПроверкиПриОткрытии = ПроверитьДоступностьРаздела(ИмяРаздела, ОписаниеФункциональности, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеОбщихНастроек.Удалить("ФункциональностьОткрытыйРаздел",, ИмяПользователя());
		
	КонецЕсли;
	
	НастроитьБаннерСообщения();
	
	НастроитьВнешнийВидФормы();
	
	ТарификацияБП.РазместитьИнформациюОбОграничении(ЭтотОбъект);
	
	СформироватьКлючевыеСловаЭлементовФункциональности();
	
	ВыделитьОсновуСловДляПоискаВФоне();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.СписокРазделов;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(); 
	Элементы.ДекорацияОбратитесьКАдминистратору.Видимость = Не ЭтоПолноправныйПользователь;
	Элементы.СохранитьИзменения.Видимость = ЭтоПолноправныйПользователь;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Обработка.ФункциональностьПрограммы",
		"ФормаФункциональностьПрограммы",
		НСтр("ru = 'Новости: Функциональность'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ДлительнаяОперацияПроверкиПриОткрытии) Тогда
		ИмяРаздела = СтрЗаменить(ТекущийРаздел, "Группа", "");
		Если ДлительнаяОперацияПроверкиПриОткрытии.Статус = "Выполнено" Тогда
			ОтобразитьРезультатПроверки(ИмяРаздела, ДлительнаяОперацияПроверкиПриОткрытии.АдресРезультата);
		Иначе
			ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперацияПроверкиПриОткрытии, ИмяРаздела);
			ПоказатьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела);
		КонецЕсли;
		ДлительнаяОперацияПроверкиПриОткрытии = Неопределено;
	КонецЕсли;
	
	ОжидатьОбработкуКлючевыхСловДляПоискаВФоне(ДлительнаяОперацияОбработкаКлючевыхСловДляПоиска);
	
	НастроитьБаннерВключениеФункциональностиПриПерезапуске();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыполняетсяИзменениеФункциональности) Тогда
		
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			
			ТекстПредупреждения = НСтр("ru='Изменение функциональности еще не завершено.
				|Ожидайте окончания операции. Иначе данные могут потеряны.'");
			ПоказатьПредупреждение(, ТекстПредупреждения, 10);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если Источник = "ИспользоватьКадровыйУчет" Тогда
			ВыполнитьПроверкуДоступностиРазделаВФоне("ЗарплатаКадры");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОформленыПодписки" И ТарификацияБПВызовСервера.ОтображатьБаннерОжиданияОплатыТарифа() Тогда 
		Элементы.ГруппаОжиданиеОплатыТарифа.Видимость = Истина;
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг", 
			ТарификацияБПКлиент.ИнтервалПервойПроверкиОплатыТарифа(),
			Истина);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ФормаОплатыТарифа" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЭтоАдресВременногоХранилища(АдресЗначенийТарифицируемыхОпций) Тогда
			УдалитьИзВременногоХранилища(АдресЗначенийТарифицируемыхОпций);
		КонецЕсли;
		АдресЗначенийТарифицируемыхОпций = ТарификацияБПКлиент.ОткрытьФормуОплатыСервиса(УникальныйИдентификатор);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОтчетПоФункциональности" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма.ОтчетПоФункциональности");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаАктивизацииРаздела(Элемент.ТекущиеДанные.Имя);
	
КонецПроцедуры

#Область ГиперссылкаГлавноеНажатие

&НаКлиенте
Процедура ГлавноеИспользуетсяСинхронизацияДанныхНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяПроизводственнаяДеятельностьНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьВыпускПродукцииНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяРозничнаяТорговляНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользуютсяПодарочныеСертификатыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетОсновныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетСдачиИмуществаВАрендуНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетГрупповыхОСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеКомпонентыАмортизацииОСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетПредметовАрендыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетЛизинговогоИмуществаНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетНМАНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеУправлениеЗачетомАвансовПогашениемЗадолженностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетВозвратнойТарыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьКорректировочныеДокументыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПередачуПравНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетПутевыеЛистыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьФискальныйРегистраторНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользуетсяГособоронзаказНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетСпецодеждыСпецоснасткиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетИмпортныхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетИмпортаТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьОплатуПоПлатежнымКартамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяОтгрузкаБезПереходаПраваСобственностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПакетноеВыставлениеАктовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьНачислениеНДССМежценовойРазницыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетДенежныхДокументовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПлатежныеТребованияНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьКомплектациюНоменклатурыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяРеализацияТоваровУслугКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяЗакупкаТоваровУслугДляКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПиваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВестиУчетПоДоговорамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьДоставкуАвтотранспортомНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВестиУчетПоПодразделениямНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьИнкассациюНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИсполняютсяОбязанностиНалоговогоАгентаПоНДСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПланированиеПлатежейПоставщикамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПланированиеПлатежейОтПокупателейНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетТаможенныхДекларацийЭкспортНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеЗагрузкаДанныхИзТиСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОбратноеНачислениеНДСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетУслугИностранныхИнтернетКомпанийНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеУчетОбеспеченийОбязательствИПлатежейНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеРасширенныйФункционалНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВестиУчетПоОрганизациямНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВестиУчетЗарплатаКадрыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьКадровыйУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьВоинскийУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьРаботуНаНеполнуюСтавкуНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьНачисленияПоДоговорамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеПоддержкаСовместительстваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьДоставкуТранспортнойКомпаниейНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПродажиЧерезМаркетплейсНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетПрослеживаемыхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьНазначениеИспользованияСпецодежды(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьВыплатыСамозанятымНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьОплатуСертификатамиНСПКНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПлатежиПоРеестрамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВестиУчетРасчетовСКонтрагентамиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПредоплатыВРозницеНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

#КонецОбласти

#Область ЗакладкиГиперссылкаНажатие

&НаКлиенте
Процедура ЗакладкиВедетсяУчетДенежныхДокументовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьОплатуПоПлатежнымКартамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПлатежныеТребованияНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьФискальныйРегистраторНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользуетсяГособоронзаказНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПередачуПравНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетСпецодеждыСпецоснасткиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетВозвратнойТарыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетИмпортныхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьКомплектациюНоменклатурыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетПоПутевымЛистамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетОсновныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетСдачиИмуществаВАрендуНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиКомпонентыАмортизацииОСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетПредметовАрендыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетЛизинговогоИмуществаНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетГрупповыхОСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетНМАНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяРозничнаяТорговляНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяРеализацияТоваровУслугКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяЗакупкаТоваровУслугДляКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиУправлениеЗачетомАвансовПогашениемЗадолженностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьКорректировочныеДокументыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяОтгрузкаБезПереходаПраваСобственностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПакетноеВыставлениеАктовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьНачислениеНДССМежценовойРазницыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяПроизводственнаяДеятельностьНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьВыпускПродукцииНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВыполняютсяСтроительныеРаботыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВестиУчетПоПодразделениямНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПиваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользуютсяПодарочныеСертификатыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВестиУчетПоДоговорамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьИнкассациюНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьДоставкуАвтотранспортомНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПродажиЧерезМаркетплейсНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИсполняютсяОбязанностиНалоговогоАгентаПоНДСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетТаможенныхДекларацийЭкспортНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОбратноеНачислениеНДСНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетУслугИностранныхИнтернетКомпанийНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиУчетОбеспеченийОбязательствИПлатежейНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВестиУчетПоОрганизациямНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиРасширенныйФункционалНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетЗарплатыКадровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьКадровыйУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьВоинскийУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьРаботуНаНеполнуюСтавкуНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьНачисленияПоДоговорамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПоддержкаСовместительстваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьДоставкуТранспортнойКомпаниейНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетПрослеживаемыхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьНазначениеИспользованияСпецодеждыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьОплатуСертификатамиНСПКНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПлатежиПоРеестрамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВестиУчетРасчетовСКонтрагентамиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиУчетПоКодамВалютныхОперацийИНомерамВалютныхДоговоровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПредоплатыВРозницеНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВариантФункциональностиПриИзменении(Элемент)
	
	Если ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ВыборочнаяФункциональность() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияФункциональности = ПараметрыИзмененияВариантаФункциональности(ВариантФункциональности);
	
	Если ИнтерфейсТаксиПростой
		И ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность() Тогда
		
		Для Каждого Функциональность Из ПараметрыИзмененияФункциональности.ИзменяемаяФункциональность Цикл
			Если Элементы.Найти(Функциональность) <> Неопределено Тогда 
				ЭтотОбъект[Функциональность] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НастроитьБаннерВключениеФункциональностиПриПерезапуске();
		
	Иначе
		Если ПараметрыИзмененияФункциональности.ЗадатьВопросОДлительнойОперации Тогда
			ИзменитьВариантФункциональностиЗадатьВопрос(ПараметрыИзмененияФункциональности);
		Иначе
			ИзменитьВариантФункциональностиОтвет(КодВозвратаДиалога.Да, ПараметрыИзмененияФункциональности);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СтрокаПоиска

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтрокаПоиска = Текст;
	
	// Реагируем на изменение строки поиска не сразу по мере ввода, а выжидаем
	// 1 сек., чтобы дать пользователю возможность допечатать поисковую строку.
	ОтключитьОбработчикОжидания("Подключаемый_ИзменениеСтрокиПоиска");
	ПодключитьОбработчикОжидания("Подключаемый_ИзменениеСтрокиПоиска", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьЭлементовПоСтрокеПоиска("");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКПодключаемомуОборудованию(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоДоговорам(Команда)
	
	АктивизироватьРаздел("ГруппаУчетПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПлатежей(Команда)
	
	АктивизироватьРаздел("ГруппаПланированиеПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура РозничнаяТорговля(Команда)
	
	АктивизироватьРаздел( "ГруппаРозничнаяТорговля");
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионнаяТорговля(Команда)
	
	АктивизироватьРаздел("ГруппаКомиссионнаяТорговля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяТорговля(Команда)
	
	АктивизироватьРаздел("ГруппаВнешняяТорговля");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательнаяМаркировка(Команда)
	
	АктивизироватьРаздел("ГруппаОбязательнаяМаркировка");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНенайденном(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ПараметрыПерехода = ПараметрыПереходаНаПолныйИнтерфейс();
	
	ТребуетсяПереходНаПолныйИнтерфейс = ЗначениеЗаполнено(ПараметрыПерехода.ИзменяемаяФункциональность);
	
	ДобавитьИзмененнуюФункциональностьПростойИнтерфейс(ПараметрыПерехода);
	
	Если ТребуетсяПереходНаПолныйИнтерфейс Или ВключенаФункциональностьПолныйИнтерфейс() Тогда
		ПерейтиНаПолныйИнтерфейс(ПараметрыПерехода);
	Иначе
		СохранитьФункциональностьПростойИнтерфейс(ПараметрыПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ОтменитьНаСервере();
	
	ИмяТекущегоРаздела = ПолучитьИмяРаздела(ТекущийРаздел);
	УстановитьДоступностьЭлементовРаздела(ЭтотОбъект, ИмяТекущегоРаздела);
	
	НастроитьБаннерВключениеФункциональностиПриПерезапуске();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьНаСервере()
	
	ЗаполнитьРеквизитыФункциональности();
	УстановитьВариантФункциональности();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФункциональности()
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		ЭтотОбъект[Функциональность.Имя] = НаборКонстант[Функциональность.Имя];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьИспользуемаяФункциональностьБезТарифа()
	
	Отбор = Новый Структура("НедоступнаПоТарифу", Истина);
	Если ЕстьВключеннаяФункциональность(ЭтотОбъект, Отбор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("НетСвободнойЛицензии", Истина);
	Если ЕстьВключеннаяФункциональность(ЭтотОбъект, Отбор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьВключеннаяФункциональность(Форма, Отбор)
	
	Для Каждого Функциональность Из Форма.ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		Если Форма.НаборКонстант[Функциональность.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеФункциональности(Форма, ИмяФункциональности)
	
	Элементы = Форма.Элементы;
	
	НаименованиеФункциональности = Элементы[ИмяФункциональности].Заголовок;
	Если Не ЗначениеЗаполнено(НаименованиеФункциональности) Тогда
		НаименованиеФункциональности = ИмяФункциональности;
	КонецЕсли;
	Возврат НаименованиеФункциональности;
	
КонецФункции

&НаСервере
Функция ТекстКоличествоПриложений(Количество)
	
	ТекстКоличествоПриложений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru='%1 приложениях;%1 приложении;%1 приложениях;%1 приложениях;%1 приложениях;%1 приложениях'"), Количество);
	
	Возврат ТекстКоличествоПриложений;
	
КонецФункции

&НаКлиенте
Процедура НастроитьБаннерВключениеФункциональностиПриПерезапуске()
	
	ТребуетсяПереключениеИнтерфейса = ВключенаФункциональностьПолныйИнтерфейс();
	ФункциональностьИзменена = ФункциональностьИзменена();
	
	Если ТребуетсяПереключениеИнтерфейса Тогда
		ТекстДекорации = Нстр("ru = 'В функциональность внесены изменения, для которых необходимо включить полный интерфейс.
			|Для этого потребуется перезапуск приложения. Включить полный интерфейс и перезапустить приложение?'");
		ТекстКнопки = Нстр("ru = 'Включить и перезапустить'");
	Иначе
		ТекстДекорации = Нстр("ru = 'В функциональность внесены изменения. Сохранить изменения?'");
		ТекстКнопки = Нстр("ru = 'Сохранить'");
	КонецЕсли;
	
	Если ТребуетсяПереключениеИнтерфейса И Не РазрешенПолныйИнтерфейс() Тогда
		Элементы.ГруппаСохранитьИзменения.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСохранитьИзменения.Видимость = ИнтерфейсТаксиПростой 
			И (ФункциональностьИзменена
			Или ТребуетсяПереключениеИнтерфейса);
	КонецЕсли;
	
	Элементы.СохранитьИзменения.Заголовок = ТекстКнопки;
	Элементы.ДекорацияСохранитьИзменения.Заголовок = ТекстДекорации;
	
	Элементы.Отменить.Видимость = ФункциональностьИзменена;
	
	ТекстСообщенияОбАвтоматическомВключенииФункциональности = ТекстСообщенияОбАвтоматическомВключенииФункциональности();
	Элементы.ДекорацияВключениеФункциональностиПриСохраненииИзменений.Видимость =
		ЗначениеЗаполнено(ТекстСообщенияОбАвтоматическомВключенииФункциональности);
	Элементы.ДекорацияВключениеФункциональностиПриСохраненииИзменений.Заголовок =
		ТекстСообщенияОбАвтоматическомВключенииФункциональности;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		
		СохраняемыеЗначения = ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(ЭтотОбъект);
		
		ОбновитьИнтерфейс = Ложь;
		
		ОбновитьИнтерфейс();
		#Если ВебКлиент Тогда
		Активизировать();
		#КонецЕсли
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраняемыеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(Форма)
	
	Если Форма.ИнтерфейсТаксиПростой Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	НедоступнаяВПростомИнтерфейсеФункциональность = Новый Массив;
	Для Каждого Функциональность Из НедоступнаяВПростомИнтерфейсеФункциональность(Форма.ОписаниеФункциональности) Цикл
		НедоступнаяВПростомИнтерфейсеФункциональность.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(НедоступнаяВПростомИнтерфейсеФункциональность, ","));
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НедоступнаяВПростомИнтерфейсеФункциональность(ОписаниеФункциональности)
	
	Возврат ОписаниеФункциональности.НайтиСтроки(Новый Структура("ДоступнаВПростомИнтерфейсе", Ложь));
	
КонецФункции

&НаСервереБезКонтекста
Функция РазделыФункциональности(ОписаниеФункциональности)
	
	ОписаниеРазделов = ОписаниеФункциональности.Выгрузить(, "Раздел");
	ОписаниеРазделов.Свернуть("Раздел", "");
	Возврат ОписаниеРазделов.ВыгрузитьКолонку("Раздел");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Имя", ИмяФункциональности);
	
	Строки = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0].Раздел;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", ИмяФункциональности));
	Если СтрокиФункциональности.Количество() > 0 Тогда
		Возврат СтрокиФункциональности[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьПоРазделам(СписокФункциональности, ОписаниеФункциональности)
	
	Разделы = Новый Структура;
	Для Каждого Функциональность Из СписокФункциональности Цикл
		Раздел = РазделФункциональности(Функциональность, ОписаниеФункциональности);
		ФункциональностьРаздела = Неопределено;
		Разделы.Свойство(Раздел, ФункциональностьРаздела);
		Если ФункциональностьРаздела = Неопределено Тогда
			ФункциональностьРаздела = Новый Массив;
			Разделы.Вставить(Раздел, ФункциональностьРаздела);
		КонецЕсли;
		ФункциональностьРаздела.Добавить(Функциональность);
	КонецЦикла;
	
	Возврат Разделы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФункциональностьРаздела(ИмяРаздела, ОписаниеФункциональности)
	
	Отбор = Новый Структура("Раздел", ИмяРаздела);
	
	Возврат ОписаниеФункциональности.НайтиСтроки(Отбор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьРазделаДляПроверкиИспользования(ИмяРаздела, ОписаниеФункциональности)
	
	Отбор = Новый Структура("Раздел", ИмяРаздела);
	
	Возврат ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеФункциональности()
	
	ПолноеОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	
	СписокНедоступнойФункциональности = ПолноеОписаниеФункциональности.НайтиСтроки(Новый Структура("Доступна", Ложь));
	Для Каждого НедоступнаяФункциональность Из СписокНедоступнойФункциональности Цикл
		Элементы[НедоступнаяФункциональность.Имя].Видимость = Ложь;
	КонецЦикла;
	
	Элементы.ДекорацияОтступЗарплатаКадры.Видимость = Элементы.ВедетсяУчетЗарплатыКадров.Видимость;
	
	СтрокиДляКопирования = ПолноеОписаниеФункциональности.НайтиСтроки(Новый Структура("Доступна", Истина));
	ОписаниеДоступнойФункциональности = ПолноеОписаниеФункциональности.Скопировать(СтрокиДляКопирования);
	Для Каждого ДоступнаяФункциональность Из ОписаниеДоступнойФункциональности Цикл
		Если НЕ Элементы[ДоступнаяФункциональность.Имя].Видимость Тогда
			Элементы[ДоступнаяФункциональность.Имя].Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ОписаниеФункциональности.Загрузить(ОписаниеДоступнойФункциональности);
	
	ОграниченияФункциональностиПоТарифу = Обработки.ФункциональностьПрограммы.ОграниченияФункциональностиПоТарифу(ОписаниеДоступнойФункциональности);
	
	ЗаполнитьОграниченияФункциональностиПоТарифу(ОграниченияФункциональностиПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	НастроитьЭлементыФункциональности();
	
	НастроитьБаннерыЭлементовФункциональности();
	
	УстановитьВариантФункциональности();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФункциональности()
	
	Элементы.ДекорацияВключениеФункциональностиПриСохраненииИзменений.Видимость = ИнтерфейсТаксиПростой;
	
	ЭтоБизнесСтарт = ОбщегоНазначенияБП.ЭтоБизнесСтарт();
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.Обработки.ФункциональностьПрограммы);
	
	Элементы.НадписьПодсказкаПоФункциональности.Видимость = ЭтоБизнесСтарт И ЕстьПраво;
	Элементы.НадписьПереходКОтчетуПоФункциональности.Видимость = ЭтоБизнесСтарт И ЕстьПраво;
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Элемент = Элементы[Функциональность.Имя];
		ЗаполнитьЗначенияСвойств(Элемент, Функциональность, "Заголовок,Подсказка");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантФункциональности()
	
	ВсеЗначенияФункциональности = ВсеЗначенияФункциональности();
	
	ВариантФункциональности = Обработки.ФункциональностьПрограммы.ВариантФункциональностиПоЗначениям(
		ВсеЗначенияФункциональности);
	
	ЭтоОсновнаяФункциональность = ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	ЭтоПолнаяФункциональность = ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность();
	Элементы.КартинкаОсновная.Видимость = ЭтоОсновнаяФункциональность;
	Элементы.КартинкаПолная.Видимость = ЭтоПолнаяФункциональность;
	Элементы.КартинкаВыборочная.Видимость = НЕ ЭтоПолнаяФункциональность И НЕ ЭтоОсновнаяФункциональность;
	
КонецПроцедуры

&НаСервере
Функция ВсеЗначенияФункциональности()
	
	ВсеЗначенияФункциональности = Новый Структура;
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		ВсеЗначенияФункциональности.Вставить(Функциональность.Имя, ЭтотОбъект[Функциональность.Имя]);
	КонецЦикла;
	
	Возврат ВсеЗначенияФункциональности;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеОшибки(Элемент, ИмяЗаголовка) Экспорт
	
	ФункциональностьПрограммыКлиент.ПоказатьОбъектыПрепятствующиеОтключениюОпции(Элемент, ИмяЗаголовка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовРаздела(Форма, ИмяРаздела)
	
	ФункциональностьРаздела = ФункциональностьРаздела(ИмяРаздела, Форма.ОписаниеФункциональности);
	Для Каждого Функциональность Из ФункциональностьРаздела Цикл
		
		ОпцияВключена = Форма[Функциональность.Имя];
		
		ЕстьОтключеннаяРодительскаяФункциональностьРаздела = ВключенаХотяБыОднаФункциональностьРаздела(
			Форма, Функциональность.Раздел, Функциональность.РодительскаяФункциональность) = Ложь;
		
		ЕстьИспользуемаяДочерняяФункциональностьРаздела = ВключенаХотяБыОднаИспользуемаяФункциональностьРаздела(
			Форма, Функциональность.Раздел, Функциональность.ДочерняяФункциональность) = Истина;
		
		ЗапрещеноИзменятьОпциюПоТарифу = (Функциональность.НедоступнаПоТарифу Или Функциональность.НетСвободнойЛицензии)
			И Не ОпцияВключена;
		
		ЗапрещеноСниматьОпциюВПолномИнтерфесе = НЕ Форма.ИнтерфейсТаксиПростой
			И ОпцияВключена
			И Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе;
		
		Форма.Элементы[Функциональность.Имя].Доступность = Не ЕстьОтключеннаяРодительскаяФункциональностьРаздела
			И Не ЕстьИспользуемаяДочерняяФункциональностьРаздела
			И Не Функциональность.Используется
			И Не ЗапрещеноИзменятьОпциюПоТарифу
			И Не ЗапрещеноСниматьОпциюВПолномИнтерфесе;
		
		ИмяЭлементаЗакладки = "Закладки" + Функциональность.Имя;
		Если Форма.Элементы.Найти(ИмяЭлементаЗакладки) <> Неопределено Тогда
			Форма.Элементы[ИмяЭлементаЗакладки].Видимость = Функциональность.Используется
				И Форма.Элементы[Функциональность.Имя].Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьДлительнуюОперациюРаздела(Форма, ИмяРаздела, ОписаниеДлительнойОперации)
	
	ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, Истина, ОписаниеДлительнойОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьДлительнуюОперациюРаздела(Форма, ИмяРаздела)
	
	ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, Ложь, "");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, ДлительнаяОперацияЗапущена, ОписаниеДлительнойОперации)
	
	ДлительныеОперацииВыполняются = ЗначениеЗаполнено(Форма.ВыполняетсяИзменениеФункциональности)
		Или ЗначениеЗаполнено(Форма.ВыполняетсяПроверкаДоступностиРаздела);
	
	УстановитьДоступностьРазделов(Форма, Не ДлительныеОперацииВыполняются, Форма.ОписаниеФункциональности);
	
	Форма.Элементы["Группа" + ИмяРаздела + "ИспользуемыеВозможности"].Видимость = Не ДлительнаяОперацияЗапущена;
	Форма.Элементы["Группа" + ИмяРаздела + "ДлительнаяОперация"].Видимость = ДлительнаяОперацияЗапущена;
	Форма.Элементы[ИмяРаздела + "ДлительнаяОперацияОписание"].Заголовок = ОписаниеДлительнойОперации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРазделов(Форма, Доступность, Знач ОписаниеФункциональности)
	
	Для Каждого ИмяРазделаФункциональности Из РазделыФункциональности(ОписаниеФункциональности) Цикл
		Форма.Элементы["Группа" + ИмяРазделаФункциональности + "Константы"].Доступность = Доступность;
	КонецЦикла;
	Форма.Элементы.ГруппаГлавноеКонстанты.Доступность = Доступность;
	
	Если Не Форма.Элементы.ГруппаБанкКассаКонстанты.Доступность Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПерейтиКПодключаемомуОборудованию", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДоступностиРазделаВФоне(ИмяРаздела)
	
	ДоступностьРазделаПроверена.Вставить(ИмяРаздела, Истина);
	
	ДлительнаяОперация = ПроверитьДоступностьРаздела(ИмяРаздела, ОписаниеФункциональности, УникальныйИдентификатор);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОтобразитьРезультатПроверки(ИмяРаздела, ДлительнаяОперация.АдресРезультата);
	Иначе
		ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперация, ИмяРаздела);
		ПоказатьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперация, ИмяРаздела)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяРаздела", ИмяРаздела);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПроверкуДоступностиРазделаВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДоступностиРазделаВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОтобразитьРезультатПроверки(ДополнительныеПараметры.ИмяРаздела, ДлительнаяОперация.АдресРезультата);
	Иначе
		СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ДополнительныеПараметры.ИмяРаздела);
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДоступностьРаздела(Знач ИмяРаздела, Знач ОписаниеФункциональности, Знач УникальныйИдентификатор)
	
	ПроверяемаяФункциональность = ФункциональностьРазделаДляПроверкиИспользования(ИмяРаздела, ОписаниеФункциональности);
	
	Возврат ПроверитьВозможностьИзмененияФункциональностиВФоне(ИмяРаздела, ПроверяемаяФункциональность, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела)
	
	ОписаниеДлительнойОперации = НСтр("ru = 'Проверяется возможность отключения функциональности...'");
	
	ВыполняетсяПроверкаДоступностиРаздела.Вставить(ИмяРаздела, Истина);
	
	ПоказатьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела, ОписаниеДлительнойОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела)
	
	ВыполняетсяПроверкаДоступностиРаздела.Удалить(ИмяРаздела);
	
	СкрытьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультатПроверки(ИмяРаздела, АдресРезультата)
	
	СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела);
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьИспользованиеФункциональности(РезультатПроверки);
	
	УстановитьДоступностьЭлементовРаздела(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованиеФункциональности(РезультатПроверки)
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемаяФункциональность = РезультатПроверки.Используется;
	Для Каждого Функциональность Из ИспользуемаяФункциональность Цикл
		СвойстваФункциональности = СвойстваФункциональности(Функциональность, ОписаниеФункциональности);
		Если СвойстваФункциональности <> Неопределено Тогда
			СвойстваФункциональности.Используется = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьИзмененияФункциональностиВФоне(ИмяРаздела, ПроверяемаяФункциональность, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Функциональность", ПроверяемаяФункциональность);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка возможности изменения функциональности.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ПроверитьВозможностьИзмененияФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение)
	
	Если Не ИнтерфейсТаксиПростой Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В простом интерфейсе включаются только опции простого интерфейса,
	// опции полного интерфейса включаются отложенно при перезапуске.
	// Отключаются все опции сразу, независимо от принадлежности к интерфейсу.
	Если НовоеЗначение Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьБаннерСообщения()
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.Баннер.Видимость = Истина;
		Элементы.ТекстБаннера.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Изменять функциональность можно только в режиме сервиса'"));
	ИначеЕсли ЕстьИспользуемаяФункциональностьБезТарифа() И Не ТарификацияБП.ВозможнаВыборочнаяБлокировка() Тогда
		Элементы.Баннер.Видимость = Истина;
		Элементы.ТекстБаннера.Заголовок = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отключите функциональность с отметкой ""%1"" и ""%2"", чтобы проводить документы.
				|Если функциональность используется, то удалите связанные с ней документы.'"),
				ФункциональностьПрограммы.ТекстНедоступенТариф(), ФункциональностьПрограммы.ТекстОграничениеТарифа()));
	Иначе
		Элементы.Баннер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ПереходНаПолныйИнтерфейс

&НаКлиенте
Функция ПараметрыПереходаНаПолныйИнтерфейс()
	
	ПараметрыПерехода = Новый Структура();
	ПараметрыПерехода.Вставить("ИзменяемаяФункциональность", Новый Массив);
	
	Для Каждого Функциональность Из НедоступнаяВПростомИнтерфейсеФункциональность(ОписаниеФункциональности) Цикл
		
		Если НаборКонстант[Функциональность.Имя] <> ЭтотОбъект[Функциональность.Имя]
			И ЭтотОбъект[Функциональность.Имя] = Истина Тогда
			ПараметрыПерехода.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаСервере
Функция ПерейтиНаПолныйИнтерфейсВФоне(ИзменяемаяФункциональность)
	
	ПараметрыПроцедуры = НовыйСтруктураПараметровИзменитьСписокФункциональностиВФоне(ИзменяемаяФункциональность);
	ПараметрыПроцедуры.НовоеЗначение = Истина;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Включение функциональности при переходе на полный интерфейс.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(Истина);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьПереходаНаПолныйИнтерфейсВФоне(ДлительнаяОперация)
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьПереходаНаПолныйИнтерфейсВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПереходаНаПолныйИнтерфейсВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		УстановитьИнтерфейсНаСервере();
		ЗавершитьРаботуСистемы(Ложь, Истина);
		
	Иначе
		ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(Ложь);
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(ДлительнаяОперацияЗапущена)
	
	Если ДлительнаяОперацияЗапущена Тогда
		ВыполняетсяИзменениеФункциональности.Вставить("ПереходНаПолныйИнтерфейс", Истина);
	Иначе
		ВыполняетсяИзменениеФункциональности.Вставить("ПереходНаПолныйИнтерфейс", Ложь);
	КонецЕсли;
	
	Элементы.ГруппаСохранитьИзменения.Видимость = Не ДлительнаяОперацияЗапущена;
	
	ТекстПерезапускДлительнаяОперацияОписание = 
		НСтр("ru = 'Пожалуйста, подождите, включается функциональность для перехода на полный интерфейс.
		|После включения функциональности программа будет перезапущена.'");
	Элементы.ПерезапускДлительнаяОперацияОписание.Заголовок = ТекстПерезапускДлительнаяОперацияОписание;
	Элементы.ГруппаПерезапускДлительнаяОперация.Видимость = ДлительнаяОперацияЗапущена;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнтерфейсНаСервере()
	
	ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТакси");
	ХранилищеОбщихНастроек.Сохранить(ВРег("ДатаСменыИнтерфейса"),,ТекущаяДатаСеанса(),,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаПолныйИнтерфейс(ПараметрыПерехода) Экспорт
	
	ДлительнаяОперация = ПерейтиНаПолныйИнтерфейсВФоне(ПараметрыПерехода.ИзменяемаяФункциональность);
	ОжидатьПереходаНаПолныйИнтерфейсВФоне(ДлительнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзмененнуюФункциональностьПростойИнтерфейс(ПараметрыПерехода)
	
	ПараметрыОтбора = Новый Структура("ДоступнаВПростомИнтерфейсе", Истина);
	ДоступнаяВПростомИнтерфейсеФункциональность = ОписаниеФункциональности.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Функциональность Из ДоступнаяВПростомИнтерфейсеФункциональность Цикл
		
		Если НаборКонстант[Функциональность.Имя] <> ЭтотОбъект[Функциональность.Имя] Тогда
			ПараметрыПерехода.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности)
	
	Результат = ИзменитьФункциональностьНаСервере(ПараметрыИзмененияФункциональности.ИмяЭлемента,
		ПараметрыИзмененияФункциональности.НовоеЗначение);
	
	ОбработатьИзменениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности.ИмяЭлемента, Результат);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьНаСервере(ИмяФункциональности, НовоеЗначение)
	
	РезультатИзменения = Обработки.ФункциональностьПрограммы.Изменить(
		ИмяФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	Если РезультатИзменения.Отказ Тогда
		ЭтотОбъект[ИмяФункциональности] = Не НовоеЗначение;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("ФункциональностьОткрытыйРаздел",, ТекущийРаздел,, ИмяПользователя());
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Функция ИзменитьСписокФункциональностиНаСервере(СписокФункциональности, НовоеЗначение)
	
	РезультатИзменения = Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональности(
		СписокФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеФункциональностиНаКлиенте(ИмяФункциональности, РезультатИзменения)
	
	Если РезультатИзменения.Отказ Тогда
		
		Если ЗначениеЗаполнено(РезультатИзменения.ТребуетсяВключитьФункциональность) Тогда
			
			ЗадатьВопросПроДополнительноеВключениеФункциональности(ИмяФункциональности, РезультатИзменения);
			
		Иначе
			ТекстСообщения = ТекстОшибкиОтключенияФункциональности(ИмяФункциональности, РезультатИзменения);
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ПоказатьПредупреждение(, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// Для простоты запускаем включение дополнительной функциональности всегда без фонового задания.
	// Сейчас нет зависимых операций, которые выполняются долго, поэтому это допустимо.
	// Если такие операции появяться, то нужно будет добавить фоновое включение функциональности для таких операций.
	
	РезультатИзменения = ДополнительныеПараметры.РезультатИзменения;
	
	СписокФункциональности = РезультатИзменения.ТребуетсяВключитьФункциональность;
	СписокФункциональности.Добавить(ДополнительныеПараметры.ИмяФункциональности);
	
	РезультатИзменения = ИзменитьСписокФункциональностиНаСервере(
		СписокФункциональности, РезультатИзменения.НовоеЗначение);
	
	Если РезультатИзменения.Отказ
		И ЗначениеЗаполнено(РезультатИзменения.ТекстСообщения) Тогда
		ПоказатьПредупреждение(, РезультатИзменения.ТекстСообщения);
	КонецЕсли;
	
	ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения)
	
	Если ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональности) Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	НастроитьБаннерВключениеФункциональностиПриПерезапуске();
	
	// Обновлять интерфейс нужно только в том случае, если не изменились
	// значения функциональности для отложенного изменения.
	// Если они есть - то обновление интерфейса в простом интерфейсе вызовет
	// повторное открытие формы и все изменения будут потеряны.
	Если ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональности)
		И Не ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональностиДляОтложенногоИзменения) Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		
	КонецЕсли;
	
	ОбновитьИнтерфейс = Истина;
	
	Для Каждого НовоеЗначениеФункциональности Из РезультатИзменения.НовыеЗначенияФункциональности Цикл
		Оповестить("Запись_НаборКонстант", Новый Структура, НовоеЗначениеФункциональности.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения)
	
	ИзменитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(РезультатИзменения);
	
	ПрочитатьЗначенияФункциональностиФормы();
	
	УстановитьДоступностьЭлементовРазделов(РезультатИзменения);
	
	УстановитьВариантФункциональности();
	
	НастроитьБаннерСообщения();
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияТребуетсяВключитьФункциональность(ТребуетсяВключитьФункциональность)
	
	Если ЗначениеЗаполнено(ТребуетсяВключитьФункциональность) Тогда
		
		ОписаниеФункциональностиПоРазделам = Новый Массив;
		
		Разделы = ФункциональностьПоРазделам(ТребуетсяВключитьФункциональность, ОписаниеФункциональности);
		Для Каждого Раздел Из Разделы Цикл
			
			ОписаниеФункциональностиРаздела = Новый Массив;
			Для Каждого ФункциональностьДляВключения Из Раздел.Значение Цикл
				ОписаниеФункциональностиРаздела.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='""%1""'"), НаименованиеФункциональности(ЭтотОбъект, ФункциональностьДляВключения)));
			КонецЦикла;
			
			ОписаниеФункциональностиРаздела = СтрСоединить(ОписаниеФункциональностиРаздела, ", " + Символы.ПС);
			ЗаголовокРаздела = Элементы["Группа" + Раздел.Ключ].Заголовок;
			
			ОписаниеФункциональностиПоРазделам.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (закладка ""%2"")'"), ОписаниеФункциональностиРаздела, ЗаголовокРаздела));
				
		КонецЦикла;
		
		ОписаниеРазделов = СтрСоединить(ОписаниеФункциональностиПоРазделам, ", " + Символы.ПС);
		
		ТекстШаблона = НСтр("ru='Для включения функциональности необходимо включить
			|%1.
			|
			|Включить функциональность?'");
			
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОписаниеРазделов);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекстОшибкиОтключенияФункциональности(ИмяФункциональности, РезультатИзменения)
	
	Если ЗначениеЗаполнено(РезультатИзменения.НевозможноВыключитьФункциональность) Тогда
		ОписаниеНеотключаемойФункциональности = Новый Массив;
		Для Каждого НеотключаемаяФункциональность Из РезультатИзменения.НевозможноВыключитьФункциональность Цикл
			ОписаниеНеотключаемойФункциональности.Добавить(
				НаименованиеФункциональности(ЭтотОбъект, НеотключаемаяФункциональность));
		КонецЦикла;
		
		ТекстШаблона = НСтр("ru='Выключить функциональность нельзя,
				|так как используется следующая функциональность:
				|- %1'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона,
			СтрСоединить(ОписаниеНеотключаемойФункциональности, Символы.ПС + "- "));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыИзмененияФункциональности(ИмяЭлемента)
	
	НовоеЗначение = ЭтотОбъект[ИмяЭлемента];
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыИзменения.Вставить("ЗадатьВопросОДлительнойОперации", Ложь);
	ПараметрыИзменения.Вставить("НовоеЗначение", НовоеЗначение);
	
	ИзменитьТолькоПростойИнтерфейс = ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение);
	
	Функциональность = СвойстваФункциональности(ИмяЭлемента, ОписаниеФункциональности);
	
	Если НаборКонстант[Функциональность.Имя] <> НовоеЗначение Тогда
		
		ИзменитьФункциональностьСразу = Не ИзменитьТолькоПростойИнтерфейс
			Или Функциональность.ДоступнаВПростомИнтерфейсе;
		
		Если ИзменитьФункциональностьСразу И Функциональность.ТребуетсяДлительнаяОперация Тогда
			ПараметрыИзменения.ЗадатьВопросОДлительнойОперации = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыИзменения;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросПроДлительноеИзменениеФункциональности(ПараметрыИзмененияФункциональности)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ЗадатьВопросПроДлительноеИзменениеФункциональностиЗавершение", ЭтотОбъект, ПараметрыИзмененияФункциональности);
	
	// Отключаем флаг функциональности так, чтобы до завершения длительной операции
	// флаг выглядел бы, как будто он еще не установлен или не снят.
	// Значение флага изменится только после того, как будет выполнено изменение функциональности.
	ЭтотОбъект[ПараметрыИзмененияФункциональности.ИмяЭлемента] = НЕ ЭтотОбъект[ПараметрыИзмененияФункциональности.ИмяЭлемента];
	
	Если ПараметрыИзмененияФункциональности.НовоеЗначение Тогда
		ТекстВопроса = НСтр(
			"ru='Включение функциональности может занять длительное время.
			|%1
			|Продолжить?'");
			ДополнитьВопросПроДлительноеИзменениеФункциональности(ТекстВопроса, ПараметрыИзмененияФункциональности);
	Иначе
		ТекстВопроса = НСтр(
			"ru='Отключение функциональности может занять длительное время.
			|
			|Продолжить?'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru='Включение функциональности'");
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьВопросПроДлительноеИзменениеФункциональности(ТекстВопроса, ПараметрыИзмененияФункциональности)
	
	ДополнениеВопроса = НСтр("ru=''");
	Если ПараметрыИзмененияФункциональности.ИмяЭлемента = "ИспользоватьКадровыйУчет" Тогда
		ДополнениеВопроса = НСтр(
			"ru='Будут сформированы кадровые документы на основании данных о сотрудниках.'");
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, ДополнениеВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПроДлительноеИзменениеФункциональностиЗавершение(Ответ, ПараметрыИзмененияФункциональности) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ИзменитьЗначениеФункциональностиВФонеНаКлиенте(ПараметрыИзмененияФункциональности.ИмяЭлемента, ПараметрыИзмененияФункциональности.НовоеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиВФонеНаКлиенте(ИмяФункциональности, НовоеЗначение)
	
	ДлительнаяОперация = ИзменитьФункциональностьВФонеНаСервере(ИмяФункциональности, НовоеЗначение, ЭтотОбъект.УникальныйИдентификатор);
	ОжидатьИзмененияФункциональностиВФоне(ДлительнаяОперация, ИмяФункциональности);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьВФонеНаСервере(ИмяЭлемента, НовоеЗначение, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяФункциональности", ИмяЭлемента);
	ПараметрыПроцедуры.Вставить("НовоеЗначение", НовоеЗначение);
	ПараметрыПроцедуры.Вставить("ИзменитьТолькоПростойИнтерфейс",
		ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Включение функциональности.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			ИмяРаздела = РазделФункциональности(ИмяЭлемента, ОписаниеФункциональности);
			ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела, НовоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьИзмененияФункциональностиВФоне(ДлительнаяОперация, ИмяФункциональности)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФункциональности", ИмяФункциональности);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьИзмененияФункциональностиВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьИзмененияФункциональностиВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ИмяРаздела = РазделФункциональности(ДополнительныеПараметры.ИмяФункциональности, ОписаниеФункциональности);
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела);
		
		Результат = ИзменитьФункциональностьВФонеНаСервереЗавершение(ДополнительныеПараметры.ИмяФункциональности,
			ДлительнаяОперация.АдресРезультата);
			
		ОбработатьИзменениеФункциональностиНаКлиенте(ДополнительныеПараметры.ИмяФункциональности, Результат);
		
	Иначе
		ИмяРаздела = РазделФункциональности(ДополнительныеПараметры.ИмяФункциональности, ОписаниеФункциональности);
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела);
		
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьВФонеНаСервереЗавершение(ИмяФункциональности, АдресРезультата)
	
	РезультатИзменения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатИзменения.Отказ Тогда
		ЭтотОбъект[ИмяФункциональности] = Не РезультатИзменения.НовоеЗначение;
	КонецЕсли;
	
	ОбновитьЗначенияКонстант(РезультатИзменения.НовыеЗначенияФункциональности);
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Процедура ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела, НовоеЗначение)
	
	Если НовоеЗначение Тогда
		ОписаниеОперации = НСтр("ru = 'Пожалуйста, подождите, включается функциональность...'")
	Иначе
		ОписаниеОперации = НСтр("ru = 'Пожалуйста, подождите, отключается функциональность...'")
	КонецЕсли;
	
	ВыполняетсяИзменениеФункциональности.Вставить(ИмяРаздела, Истина);
	
	ПоказатьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела, ОписаниеОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела)
	
	ВыполняетсяИзменениеФункциональности.Удалить(ИмяРаздела);
	
	СкрытьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПроДополнительноеВключениеФункциональности(ИмяФункциональности, РезультатИзменения)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФункциональности", ИмяФункциональности);
	ДопПараметры.Вставить("РезультатИзменения", РезультатИзменения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьЗначениеФункциональностиНаКлиентеЗавершение", ЭтотОбъект, ДопПараметры);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Включить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	ТекстСообщения = ТекстСообщенияТребуетсяВключитьФункциональность(РезультатИзменения.ТребуетсяВключитьФункциональность);
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, Кнопки, , КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(РезультатИзменения)
	
	Если Не ИнтерфейсТаксиПростой Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФункциональностьИЗначение Из РезультатИзменения.НовыеЗначенияФункциональностиДляОтложенногоИзменения Цикл
		ЭтотОбъект[ФункциональностьИЗначение.Ключ] = ФункциональностьИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияФункциональностиФормы()
	
	СохраняемыеЗначения = ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(ЭтотОбъект);
	
	ЭтотОбъект.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраняемыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовРазделов(РезультатИзменения)
	
	Разделы = Новый Структура;
	Для Каждого НовоеЗначениеФункциональности Из РезультатИзменения.НовыеЗначенияФункциональности Цикл
		ЭтотОбъект[НовоеЗначениеФункциональности.Ключ] = НаборКонстант[НовоеЗначениеФункциональности.Ключ];
		Разделы.Вставить(РазделФункциональности(НовоеЗначениеФункциональности.Ключ, ОписаниеФункциональности), Истина);
	КонецЦикла;
	
	Для Каждого Раздел Из Разделы Цикл
		Если ДоступностьРазделаПроверена.Свойство(Раздел.Ключ) Тогда
			УстановитьДоступностьЭлементовРаздела(ЭтотОбъект, Раздел.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстСообщенияОбАвтоматическомВключенииФункциональности()
	
	СписокФункциональности = Новый Массив;
	
	Отбор = Новый Структура("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		Если Не ЭтотОбъект[Функциональность.Имя] Тогда
			СписокФункциональности.Добавить(СтрШаблон("""%1""", НаименованиеФункциональности(ЭтотОбъект, Функциональность.Имя)));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Также будет включена функциональность %1.'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		СтрСоединить(СписокФункциональности, ", "));
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииФункциональности(Элемент)
	
	ПараметрыОтбора = Новый Структура("Имя, ДоступнаВПростомИнтерфейсе", Элемент.Имя, Ложь);
	ЭтоРанееВключеннаяФункциональностьПолныйИнтерфейс = ЕстьВключеннаяФункциональность(ЭтотОбъект, ПараметрыОтбора);
	
	Если ИнтерфейсТаксиПростой И Не ЭтоРанееВключеннаяФункциональностьПолныйИнтерфейс Тогда
		
		Если ЭтотОбъект[Элемент.Имя] = Ложь Тогда
			ОтключитьДочернююФункциональность(Элемент.Имя);
		КонецЕсли;
		
		ИмяТекущегоРаздела = ПолучитьИмяРаздела(ТекущийРаздел);
		УстановитьДоступностьЭлементовРаздела(ЭтаФорма, ИмяТекущегоРаздела);
		
		НастроитьБаннерВключениеФункциональностиПриПерезапуске();
		
	Иначе
		
		ИмяЭлемента = Элемент.Имя;
		ПараметрыИзмененияФункциональности = ПараметрыИзмененияФункциональности(ИмяЭлемента);
		
		Если ПараметрыИзмененияФункциональности.ЗадатьВопросОДлительнойОперации Тогда
			ЗадатьВопросПроДлительноеИзменениеФункциональности(ПараметрыИзмененияФункциональности);
		Иначе
			ИзменитьЗначениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительнаяОперация

&НаКлиенте
Процедура ГлавноеВестиУчетМаркировкиПродукцииВГИСМНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПодконтрольныеТоварыККТНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВестиУчетМаркировкиПродукцииВГИСМНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПодконтрольныеТоварыККТНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьФакторингНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьФакторингНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьВыплатыСамозанятымНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияКонстант(СписокФункциональности)
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат;
	КонецЕсли;
	
	// Перезапись констант требуется после изменения функциональности
	// в фоне, для того, чтобы платформа обновила функциональные опции, свяазанные
	// с этими константами. Если этого не сделать, то не отрастут разделы, которые
	// относятся к этим опциям.
	СписокКонстант = Новый Массив;
	Для Каждого Функциональность Из СписокФункциональности Цикл
		СписокКонстант.Добавить(Функциональность.Ключ);
	КонецЦикла;
	СтрокаИменКонстант = СтрСоединить(СписокКонстант, ",");
	НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстантОбъект.Прочитать();
	НаборКонстантОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПоказатьИспользуемуюФункциональностьВРазделеГлавное(ИспользуемаяФункциональность)
	
	Элементы.ГруппаГлавноеИспользуемыеВозможности.Видимость = Истина;
	
	МассивКонстантФункциональности = ФункциональностьПоОтбору(Новый Структура, ОписаниеФункциональности);
	
	МассивПроверкаПройдена = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивКонстантФункциональности, ИспользуемаяФункциональность);
	
	// Скроем видимость у прошедших проверку констант
	Для Каждого ИмяКонстанты Из МассивПроверкаПройдена Цикл
		Элементы["Главное" + ИмяКонстанты].Видимость = Ложь;
	КонецЦикла;
	
	Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
		// Для используемой функциональности, которая зависит от обменов,
		// не показываем персональную гиперссылку с проблемами.
		// Вместо всех этих ссылок показываем одну - "Синхронизация данных".
		Отбор = Новый Структура("ТребуетсяДляОбменов", Истина);
		ФункциональностьДляОбменов = ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности);
		ПроверяемаяФункциональностьДляОбменов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ФункциональностьДляОбменов, МассивПроверкаПройдена);
		Для Каждого ИмяКонстанты Из ПроверяемаяФункциональностьДляОбменов Цикл
			Элементы["Главное"+ИмяКонстанты].Видимость = Ложь;
		КонецЦикла;
		Элементы.ГлавноеИспользуетсяСинхронизацияДанных.Видимость = ЗначениеЗаполнено(ПроверяемаяФункциональностьДляОбменов);
		
		ИспользуемаяФункциональностьДляОтображения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ИспользуемаяФункциональность, ПроверяемаяФункциональностьДляОбменов);
	Иначе
		ИспользуемаяФункциональностьДляОтображения = ИспользуемаяФункциональность;
	КонецЕсли;
	
	// Установим видимость для констант не прошедших проверку
	Для Каждого ИмяКонстанты Из ИспользуемаяФункциональностьДляОтображения Цикл
		Элементы["Главное"+ИмяКонстанты].Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНедоступнуюФункциональностьВРазделеГлавное(РезультатИзменения)
	
	УдалитьБаннерыТарифовРазделаГлавное();
	
	ПоказатьФункциональностьБезСвободныхЛицензийВРазделеГлавное(РезультатИзменения);
	
	ПоказатьНедоступнуюПоТарифуФункциональностьВРазделеГлавное(РезультатИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьФункциональностьБезСвободныхЛицензийВРазделеГлавное(РезультатИзменения)
	
	ФункциональностьБезСвободныхЛицензий = Новый Массив;
	Отбор = Новый Структура("НетСвободнойЛицензии", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		Если РезультатИзменения.ФункциональностьБезСвободныхЛицензий.Найти(Функциональность.Имя) <> Неопределено Тогда
			ФункциональностьБезСвободныхЛицензий.Добавить(Функциональность);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ФункциональностьБезСвободныхЛицензий) Тогда
		ВывестиБаннерФункциональностиБезСвободныхЛицензий("Главное", ФункциональностьБезСвободныхЛицензий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНедоступнуюПоТарифуФункциональностьВРазделеГлавное(РезультатИзменения)
	
	Если РезультатИзменения.ФункциональностьНеДоступнаПоТарифу.Количество() > 0 Тогда
		ВывестиБаннерыНедоступнойФункциональностиРаздела("Главное");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьБаннерыТарифовРазделаГлавное()
	
	РодительскийЭлемент = Элементы.ГруппаГлавноеТарифы;
	
	Пока РодительскийЭлемент.ПодчиненныеЭлементы.Количество() > 0 Цикл
		
		УдалитьПодчиненныеЭлементы(РодительскийЭлемент.ПодчиненныеЭлементы[0]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(РодительскийЭлемент)
	
	Если ТипЗнч(РодительскийЭлемент) = Тип("ГруппаФормы") Тогда
		
		Пока РодительскийЭлемент.ПодчиненныеЭлементы.Количество() > 0 Цикл
			
			УдалитьПодчиненныеЭлементы(РодительскийЭлемент.ПодчиненныеЭлементы[0]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтотОбъект.Элементы.Удалить(РодительскийЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьБаннерыЭлементовФункциональности()
	
	ФункциональностьДляБаннеровРазделов = Новый ТаблицаЗначений;
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("ТипБаннера", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("ДоступноЛицензий", Новый ОписаниеТипов("Число"));
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		
		СоставнойБаннер = Ложь;
		
		Если Функциональность.НетСвободнойЛицензии Тогда
			
			ДобавитьБаннерНетСвободныхЛицензийДляЭлементаФункциональности(Функциональность.Имя);
			
			БаннерРаздела = ФункциональностьДляБаннеровРазделов.Добавить();
			БаннерРаздела.ТипБаннера = "НетСвободныхЛицензий";
			ЗаполнитьЗначенияСвойств(БаннерРаздела, Функциональность);
			СоставнойБаннер = Истина;
			
		ИначеЕсли Функциональность.НедоступнаПоТарифу Тогда
			
			ДобавитьБаннерОграниченияТарифаДляЭлементаФункциональности(Функциональность.Имя);
			
			БаннерРаздела = ФункциональностьДляБаннеровРазделов.Добавить();
			БаннерРаздела.ТипБаннера = "НедоступнаПоТарифу";
			ЗаполнитьЗначенияСвойств(БаннерРаздела, Функциональность);
			СоставнойБаннер = Истина;
			
		КонецЕсли;
			
		Если Не Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			
			ДобавитьБаннерПолныйИнтерфейсДляЭлементаФункциональности(Функциональность.Имя, СоставнойБаннер);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиБаннерыНетСвободныхЛицензийВРазделах(ФункциональностьДляБаннеровРазделов);
	
	ВывестиБаннерыОграниченияТарифаВРазделах(ФункциональностьДляБаннеровРазделов);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьБаннерНетСвободныхЛицензийДляЭлементаФункциональности(ИмяФункциональности)
	
	ТекстБаннераЭлемента = ФункциональностьПрограммы.ТекстОграничениеТарифа();
	ЦветБаннера = ФункциональностьПрограммы.ЦветБаннераОграниченияТарифа();
	ДобавитьПодсказкуБаннерКЭлементу(ИмяФункциональности, ТекстБаннераЭлемента, ЦветБаннера);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьБаннерОграниченияТарифаДляЭлементаФункциональности(ИмяФункциональности)
	
	ТекстБаннераЭлемента = ФункциональностьПрограммы.ТекстНедоступенТариф();
	ЦветБаннера = ФункциональностьПрограммы.ЦветБаннераНедоступенТариф();
	ДобавитьПодсказкуБаннерКЭлементу(ИмяФункциональности, ТекстБаннераЭлемента, ЦветБаннера);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьБаннерПолныйИнтерфейсДляЭлементаФункциональности(ИмяФункциональности, СоставнойБаннер)
	
	ТекстБаннераЭлемента = НСтр("ru = 'Полный интерфейс'");
	ЦветБаннера = ЦветаСтиля.СобытиеОтказ;
	ДобавитьПодсказкуБаннерКЭлементу(ИмяФункциональности, ТекстБаннераЭлемента, ЦветБаннера, СоставнойБаннер);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодсказкуБаннерКЭлементу(ИмяЭлемента, ТекстБаннераЭлемента, ЦветБаннера, СоставнойБаннер = Ложь)
	
	Элемент = Элементы[ИмяЭлемента];
	
	Если Не СоставнойБаннер Тогда
		ПереместитьПодсказкуВНовуюГруппу(Элемент); // чтобы баннер не затер подсказку
	КонецЕсли;
	
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	
	ЧастиПодсказки = Новый Массив;
	Если СоставнойБаннер Тогда
		
		ЧастиПодсказки.Добавить(Элемент.РасширеннаяПодсказка.Заголовок);
		ЧастиПодсказки.Добавить(Новый ФорматированнаяСтрока(
			"  ",
			Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8)));
	КонецЕсли;
	
	ЗаголовокПодсказки = Новый ФорматированнаяСтрока(
		ТекстБаннераЭлемента,
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8),
		ЦветаСтиля.ЦветТекстаФормы,
		ЦветБаннера);
	ЧастиПодсказки.Добавить(ЗаголовокПодсказки);
	
	Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиПодсказки);
	Элемент.РасширеннаяПодсказка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьПодсказкуВНовуюГруппу(Элемент)
	
	Если Не ПустаяСтрока(Элемент.РасширеннаяПодсказка.Заголовок) Тогда
		ЭтоРасширеннаяПодсказка = Истина;
	ИначеЕсли Не ПустаяСтрока(Элемент.Подсказка) Тогда
		ЭтоРасширеннаяПодсказка = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Группа = Элементы.Добавить("Группа" + Элемент.Имя, Тип("ГруппаФормы"));
	Группа.Вид                                = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение                        = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок                = Ложь;
	Группа.ОтображениеПодсказки               = ОтображениеПодсказки.ОтображатьСнизу;
	Если ЭтоРасширеннаяПодсказка Тогда
		Группа.РасширеннаяПодсказка.Заголовок = Элемент.РасширеннаяПодсказка.Заголовок;
		Группа.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Элемент.РасширеннаяПодсказка.АвтоМаксимальнаяШирина;
	Иначе
		Группа.Подсказка                      = Элемент.Подсказка;
	КонецЕсли;
	
	Элементы.Переместить(Группа, Элемент.Родитель, Элемент);
	Элементы.Переместить(Элемент, Группа);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерыНетСвободныхЛицензийВРазделах(ФункциональностьДляБаннеровРазделов)
	
	РазделыФункциональности = ФункциональностьДляБаннеровРазделов.Скопировать(, "Раздел");
	РазделыФункциональности.Свернуть("Раздел", "");
	
	Для Каждого РазделФункциональностиНетСвободныхЛицензий Из РазделыФункциональности Цикл
		
		Отбор = Новый Структура("Раздел,ТипБаннера", РазделФункциональностиНетСвободныхЛицензий.Раздел, "НетСвободныхЛицензий");
		ФункциональностьБаннераНетСвободныхЛицензийДляРаздела = ФункциональностьДляБаннеровРазделов.НайтиСтроки(Отбор);
		
		Если Не ЗначениеЗаполнено(ФункциональностьБаннераНетСвободныхЛицензийДляРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		ВывестиБаннерФункциональностиБезСвободныхЛицензий(РазделФункциональностиНетСвободныхЛицензий.Раздел, ФункциональностьБаннераНетСвободныхЛицензийДляРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерФункциональностиБезСвободныхЛицензий(ИмяРаздела, ФункциональностьБаннераНетСвободныхЛицензийДляРаздела)
	
	РодительскийЭлемент = Элементы["Группа" + ИмяРаздела + "Тарифы"];
	
	ИмяБаннера = "ГруппаБаннерФункциональностиБезЛицензий" + ИмяРаздела;
	ЭлементБаннера = Элементы.Добавить(ИмяБаннера, Тип("ГруппаФормы"), РодительскийЭлемент);
	ЭлементБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементБаннера.ОтображатьЗаголовок = Ложь;
	ЭлементБаннера.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЭлементБаннера.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
	ЭлементБаннера.ЦветФона = ФункциональностьПрограммы.ЦветБаннераОграниченияТарифа();
	
	ЭлементОписанияБаннера = Элементы.Добавить(ИмяБаннера + "Описание", Тип("ДекорацияФормы"), ЭлементБаннера);
	ЭлементОписанияБаннера.АвтоМаксимальнаяШирина = Ложь;
	ЭлементОписанияБаннера.Ширина = 45;
	ЭлементОписанияБаннера.МаксимальнаяШирина = 45;
	
	ОписаниеФункциональностиТарифа = Новый Массив;
	
	ЗаголовокОписания = НСтр("ru='В других ваших приложениях уже включена функциональность:'");
	ОписаниеФункциональностиТарифа.Добавить(ЗаголовокОписания);
	
	Для Каждого Функциональность Из ФункциональностьБаннераНетСвободныхЛицензийДляРаздела Цикл
		НаименованиеФункциональности = НаименованиеФункциональности(ЭтотОбъект, Функциональность.Имя);
		ШаблонНаименования = " " + "●" + " " + НСтр("ru='%1 в %2'");
		
		ТекстБезЛицензий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонНаименования, НаименованиеФункциональности,
			ТекстКоличествоПриложений(Функциональность.ДоступноЛицензий));
		
		ОписаниеФункциональностиТарифа.Добавить(ТекстБезЛицензий);
	КонецЦикла;
	
	ОписаниеТарифа = СтрСоединить(ОписаниеФункциональностиТарифа, Символы.ПС);
	
	ОбращениеКОбслуживающейОрганизации = НСтр("ru='Перейдите на другой тариф или отключите эту функциональность в других приложениях.'");
	ОписаниеТарифа = Новый ФорматированнаяСтрока(ОписаниеТарифа, Символы.ПС, ОбращениеКОбслуживающейОрганизации);
	
	ЭлементОписанияБаннера.Заголовок = ОписаниеТарифа;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерыОграниченияТарифаВРазделах(ФункциональностьДляБаннеровРазделов)
	
	РазделыФункциональности = ФункциональностьДляБаннеровРазделов.Скопировать(, "Раздел");
	РазделыФункциональности.Свернуть("Раздел", "");
	
	Для Каждого РазделФункциональностиОграниченияТарифа Из РазделыФункциональности Цикл
		
		Отбор = Новый Структура("Раздел,ТипБаннера", РазделФункциональностиОграниченияТарифа.Раздел, "НедоступнаПоТарифу");
		ФункциональностьБаннераОграниченияТарифаДляРаздела = ФункциональностьДляБаннеровРазделов.НайтиСтроки(Отбор);
		
		Если Не ЗначениеЗаполнено(ФункциональностьБаннераОграниченияТарифаДляРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборФункциональностиДляВывода = Новый Соответствие;
		Для Каждого ФункциональностьБаннера Из ФункциональностьБаннераОграниченияТарифаДляРаздела Цикл
			ОтборФункциональностиДляВывода.Вставить(ФункциональностьБаннера.Имя, Истина);
		КонецЦикла;
		
		ВывестиБаннерыНедоступнойФункциональностиРаздела(РазделФункциональностиОграниченияТарифа.Раздел);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерыНедоступнойФункциональностиРаздела(ИмяРаздела)
	
	Если ФункциональностьНедоступнаяПоТарифу.Количество() > 0 Тогда
		ВывестиБаннерТарифа(ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерТарифа(ИмяРаздела)
	
	ИмяРодительскогоЭлемента = СтрШаблон("Группа%1Тарифы", ИмяРаздела);
	РодительскийЭлемент = Элементы[ИмяРодительскогоЭлемента];
	
	ИмяБаннера = СтрШаблон("ГруппаБаннерТарифа%1", ИмяРаздела);
	ЭлементБаннера = Элементы.Добавить(ИмяБаннера, Тип("ГруппаФормы"), РодительскийЭлемент);
	ЭлементБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементБаннера.ОтображатьЗаголовок = Ложь;
	ЭлементБаннера.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЭлементБаннера.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
	ЭлементБаннера.ЦветФона = ФункциональностьПрограммы.ЦветБаннераНедоступенТариф();
	
	ЭлементОписанияБаннера = Элементы.Добавить(ИмяБаннера + "Описание", Тип("ДекорацияФормы"), ЭлементБаннера);
	ЭлементОписанияБаннера.АвтоМаксимальнаяШирина = Ложь;
	ЭлементОписанияБаннера.Ширина = 50;
	ЭлементОписанияБаннера.МаксимальнаяШирина = 50;
	
	ОписаниеФункциональностиТарифа = Новый Массив;
	ОписаниеФункциональностиТарифа.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='На текущем тарифе есть ограничения.'")));
	ОписаниеФункциональностиТарифа.Добавить(Символы.ПС);
	ОписаниеФункциональностиТарифа.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru='Перейдите на другой тариф'"), , , , "ФормаОплатыТарифа"));
	ОписаниеФункциональностиТарифа.Добавить(Новый ФорматированнаяСтрока(НСтр("ru=', чтобы использовать больше возможностей'")));
	
	ЭлементОписанияБаннера.Заголовок = Новый ФорматированнаяСтрока(ОписаниеФункциональностиТарифа);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияФункциональностиПоТарифу(ОграниченияФункциональностиПоТарифу)
	
	ФункциональностьНедоступнаяПоТарифу.ЗагрузитьЗначения(
		ОграниченияФункциональностиПоТарифу.ФункциональностьНедоступнаяПоТарифу);
	
	Для Каждого СтрокаФункциональности Из ФункциональностьНедоступнаяПоТарифу Цикл
		Функциональность = СвойстваФункциональности(СтрокаФункциональности.Значение, ОписаниеФункциональности);
		Если Функциональность <> Неопределено Тогда
			Функциональность.НедоступнаПоТарифу = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФункциональностьБезСвободныхЛицензий Из ОграниченияФункциональностиПоТарифу.ФункциональностьБезСвободныхЛицензий Цикл
		Функциональность = СвойстваФункциональности(ФункциональностьБезСвободныхЛицензий.Имя, ОписаниеФункциональности);
		Функциональность.НетСвободнойЛицензии = Истина;
		Функциональность.ДоступноЛицензий = ФункциональностьБезСвободныхЛицензий.ДоступноЛицензий;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВключенаХотяБыОднаФункциональностьРаздела(Форма, ИмяРаздела, СписокФункциональности, ТолькоИспользуемые = Ложь)
	
	ЕстьФункциональностьРаздела = Ложь;
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, Форма.ОписаниеФункциональности);
		Если Функциональность.Раздел <> ИмяРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьФункциональностьРаздела = Истина;
		
		Если Не Форма[ИмяФункциональности] Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Не ТолькоИспользуемые Или Функциональность.Используется)Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьФункциональностьРаздела Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВключенаХотяБыОднаИспользуемаяФункциональностьРаздела(Форма, ИмяРаздела, СписокФункциональности)
	
	Возврат ВключенаХотяБыОднаФункциональностьРаздела(Форма, ИмяРаздела, СписокФункциональности, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности)
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Иначе
		СтрокиФункциональности = ОписаниеФункциональности;
	КонецЕсли;
	
	ИменаКонстантРаздела = Новый Массив;
	Для Каждого Функциональность Из СтрокиФункциональности Цикл
		ИменаКонстантРаздела.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаКонстантРаздела);
	
КонецФункции

&НаСервере
Процедура СформироватьСписокРазделов()
	
	ИмяСтраницыРаздела = "ГруппаГлавное";
	НоваяСтрока = СписокРазделов.Добавить();
	НоваяСтрока.Имя = ИмяСтраницыРаздела;
	НоваяСтрока.Представление = Элементы[ИмяСтраницыРаздела].Заголовок;
	НоваяСтрока.Видимость = Истина;
	
	Для каждого ИмяРаздела Из ОбщегоНазначения.ВыгрузитьКолонку(ОписаниеФункциональности, "Раздел", Истина) Цикл
		ИмяСтраницыРаздела = "Группа" + ИмяРаздела;
		НоваяСтрока = СписокРазделов.Добавить();
		НоваяСтрока.Имя = ИмяСтраницыРаздела;
		НоваяСтрока.Представление = Элементы[ИмяСтраницыРаздела].Заголовок;
		НоваяСтрока.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьРаздел(ИмяРаздела)
	
	Раздел = ПолучитьРазделПоИмени(ИмяРаздела);
	Элементы.СписокРазделов.ТекущаяСтрока = Раздел.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг()
	
	Если ТарификацияБПВызовСервера.ТарифицируемыеОпцииИзменены(АдресЗначенийТарифицируемыхОпций) Тогда
		Элементы.ГруппаОжиданиеОплатыТарифа.Видимость = Ложь;
		ОбновитьИнтерфейс();
	Иначе
		УвеличениеИнтервала = 30;
		ИнтервалПроверкиОплатыТарифа = 
			?(ЗначениеЗаполнено(ИнтервалПроверкиОплатыТарифа),
			ИнтервалПроверкиОплатыТарифа + УвеличениеИнтервала,
			60);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьОбновлениеТарифицируемыхУслуг", 
			ИнтервалПроверкиОплатыТарифа,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область Поиск

&НаСервере
Процедура ВыделитьОсновуСловДляПоискаВФоне()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ДлительнаяОперацияОбработкаКлючевыхСловДляПоиска = 
		ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.ФункциональностьПрограммы.ВыделитьОсновуСловДляПоиска",
		ОписаниеФункциональности.Выгрузить(, "КлючевыеСлова").ВыгрузитьКолонку("КлючевыеСлова"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеСтрокиПоиска() Экспорт
	
	УстановитьВидимостьЭлементовПоСтрокеПоиска(СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакВидимостиВсехЭлементовВОписаниеФункциональности(Видимость)
	
	Для каждого ЭлементФункциональности Из ОписаниеФункциональности Цикл
		ЭлементФункциональности.Видимость = Видимость;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПризнакВидимостиРодительскогоЭлемента(ЭлементФункциональности)
	
	Для каждого РодительскийЭлемент Из ЭлементФункциональности.РодительскаяФункциональность Цикл
		ОписаниеРодительскогоЭлемента = СвойстваФункциональности(РодительскийЭлемент, ОписаниеФункциональности);
		Если ЭлементФункциональности.Раздел = ОписаниеРодительскогоЭлемента.Раздел Тогда
			ОписаниеРодительскогоЭлемента.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоСтрокеПоиска(Текст)
	
	ОтображаютсяРезультатыПоиска = НЕ ПустаяСтрока(Текст);
	
	УстановитьПризнакВидимостиВсехЭлементовВОписаниеФункциональности(НЕ ОтображаютсяРезультатыПоиска);
	УстановитьВидимостьСсылокНаПодразделы(НЕ ОтображаютсяРезультатыПоиска);
	
	Если ОтображаютсяРезультатыПоиска Тогда
		СловаЗапроса = СтрРазделить(РаботаСТекстомКлиентСервер.ОбработатьСловаДляПоиска(Текст), " ", Ложь);
		
		Для каждого ЭлементФункциональности Из ОписаниеФункциональности Цикл
			КоличествоСовпадений = ПолучитьКоличествоСовпадений(СловаЗапроса, ЭлементФункциональности.КлючевыеСлова);
			СовпадениеПоСловамЗапроса = КоличествоСовпадений = СловаЗапроса.Количество();
			
			ЭлементФункциональности.Видимость = СовпадениеПоСловамЗапроса;
			
			Если СовпадениеПоСловамЗапроса Тогда
				ВключитьПризнакВидимостиРодительскогоЭлемента(ЭлементФункциональности);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПредставлениеСпискаРазделов(ОтображаютсяРезультатыПоиска);
	
	ОтобразитьРазделы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеСпискаРазделов(ОтображаютсяРезультатыПоиска)
	
	Для каждого Раздел Из СписокРазделов Цикл
		СтандартныйЗаголовокРаздела = Элементы[Раздел.Имя].Заголовок;
		
		Если ОтображаютсяРезультатыПоиска Тогда
			ИмяРаздела = СтрЗаменить(Раздел.Имя, "Группа", "");
			Раздел.Количество = КоличествоВидимыхЭлементовРаздела(ИмяРаздела);
			Раздел.Видимость = Раздел.Количество > 0;
			Раздел.Представление = СтрШаблон("%1 (%2)", СокрЛП(СтандартныйЗаголовокРаздела), Раздел.Количество);
		Иначе
			Раздел.Количество = 0;
			Раздел.Видимость = Истина;
			Раздел.Представление = СтандартныйЗаголовокРаздела;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоВидимыхЭлементовРаздела(ИмяРаздела)
	
	Результат = 0;
	
	ЭлементыРаздела = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Раздел", ИмяРаздела));
	Для каждого ЭлементРаздела Из ЭлементыРаздела Цикл
		Если ЭлементРаздела.Видимость Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьРазделы()
	
	ВидимыеРазделы = СписокРазделов.НайтиСтроки(Новый Структура("Видимость", Истина));
	ЕстьВидимыеРазделы = ВидимыеРазделы.Количество() > 0;
	
	Элементы.ГруппаСтраницы.Видимость = ЕстьВидимыеРазделы;
	Элементы.ДекорацияНичегоНеНайдено.Видимость = НЕ ЕстьВидимыеРазделы;
	
	Элементы.СписокРазделов.Обновить();
	Если ЕстьВидимыеРазделы Тогда
		// Если видимость текущего раздела не сохранилась, активизируется первый в списке раздел.
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", ТекущийРаздел);
		Отбор.Вставить("Видимость", Истина);
		АктивныйРаздел = ?(СписокРазделов.НайтиСтроки(Отбор).Количество() > 0,
			ТекущийРаздел,
			ВидимыеРазделы[0].Имя);
		
		АктивизироватьРаздел(АктивныйРаздел);
		ОбработкаАктивизацииРаздела(АктивныйРаздел);
	Иначе
		Элементы.СтраницыЗаголовок.Заголовок = НСтр("ru='Результат поиска'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСсылокНаПодразделы(Видимость)
	
	Для каждого Элемент Из Элементы Цикл
		Если СтрЗаканчиваетсяНа(Элемент.Имя, "Подразделы") Тогда
			Элемент.Видимость = Видимость;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииРаздела(ИмяРаздела)
	
	ТекущийРаздел = ИмяРаздела;
	
	Для каждого Страница Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = Страница.Имя = ИмяРаздела;
	КонецЦикла;
	
	Раздел = ПолучитьРазделПоИмени(ИмяРаздела);
	Элементы.СтраницыЗаголовок.Заголовок =
		?(ОтображаютсяРезультатыПоиска, НСтр("ru='Результат поиска: '"), "")
		+ СокрЛП(Раздел.Представление);
	
	Если ИмяРаздела = "ГруппаГлавное" Тогда
		// Для главного не устанавливаем доступность элементов.
		Возврат;
	КонецЕсли;
	
	ИмяРазделаБезПрефикса = СтрЗаменить(ИмяРаздела, "Группа", "");
	УстановитьВидимостьЭлементовРаздела(ИмяРазделаБезПрефикса);
	Если НЕ ДоступностьРазделаПроверена.Свойство(ИмяРазделаБезПрефикса) Тогда
		ВыполнитьПроверкуДоступностиРазделаВФоне(ИмяРазделаБезПрефикса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовРаздела(Раздел)
	
	ФункциональностьРаздела = ФункциональностьРаздела(Раздел, ОписаниеФункциональности);
	Для каждого ЭлементФункциональности Из ФункциональностьРаздела Цикл
		ЭлементФормы = Элементы[ЭлементФункциональности.Имя];
		УстановитьВидимостьЭлементаФункциональности(ЭлементФормы, ЭлементФункциональности.Видимость);
		УстановитьВидимостьЗакладокИспользуемойФункциональности(ЭлементФункциональности);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементаФункциональности(Элемент, Видимость)
	
	// Если элемент вложен в группу, отключается видимость этой группы.
	Если НЕ СтрЗаканчиваетсяНа(Элемент.Родитель.Имя, "Константы") Тогда
		Элемент.Родитель.Видимость = Видимость;
	Иначе
		Элемент.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЗакладокИспользуемойФункциональности(ЭлементФункциональности)
	
	ИмяЭлементаЗакладки = "Закладки" + ЭлементФункциональности.Имя;
	Если Элементы.Найти(ИмяЭлементаЗакладки) <> Неопределено Тогда
		Элементы[ИмяЭлементаЗакладки].Видимость = ЭлементФункциональности.Используется И ЭлементФункциональности.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазделПоИмени(ИмяРаздела)
	
	НайденныеРазделы = СписокРазделов.НайтиСтроки(Новый Структура("Имя", ИмяРаздела));
	Если НайденныеРазделы.Количество() > 0 Тогда
		Возврат НайденныеРазделы[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьКлючевыеСловаЭлементовФункциональности()
	
	Для каждого ЭлементФункциональности Из ОписаниеФункциональности Цикл
		Элемент = Элементы[ЭлементФункциональности.Имя];
		
		КлючевыеСлова = "";
		КлючевыеСлова = КлючевыеСлова + " " + Элемент.Заголовок;
		КлючевыеСлова = КлючевыеСлова + " " + Элемент.Подсказка;
		КлючевыеСлова = КлючевыеСлова + " " + Элемент.РасширеннаяПодсказка.Заголовок;
		
		Если Элемент.Родитель.Имя = "Группа" + ЭлементФункциональности.Имя Тогда
			КлючевыеСлова = КлючевыеСлова + " " + Элемент.Родитель.Подсказка;
			КлючевыеСлова = КлючевыеСлова + " " + Элемент.Родитель.РасширеннаяПодсказка.Заголовок;
		КонецЕсли;
		
		ЭлементФункциональности.КлючевыеСлова = КлючевыеСлова;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОбработкуКлючевыхСловДляПоискаВФоне(ДлительнаяОперация)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьОбработкуКлючевыхСловДляПоискаВФонеЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОбработкуКлючевыхСловДляПоискаВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ДлительнаяОперацияОбработкаКлючевыхСловДляПоиска = Неопределено;
		КлючевыеСлова = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Для каждого ЭлементФункциональности Из ОписаниеФункциональности Цикл
			Индекс = ОписаниеФункциональности.Индекс(ЭлементФункциональности);
			ЭлементФункциональности.КлючевыеСлова = КлючевыеСлова[Индекс];
		КонецЦикла;
	Иначе
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		УстановитьВидимостьЭлементовПоСтрокеПоиска(СтрокаПоиска);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбратнаяСвязь

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеИнтерфейса = ПолучитьПредставлениеИнтерфейса();
	ДополнениеОбИнтерфейсе = ?(НЕ ПустаяСтрока(ПредставлениеИнтерфейса),
		СтрШаблон(НСтр("ru=' (интерфейс приложения: %1)'"), ПредставлениеИнтерфейса),
		"");
	
	ПараметрыПисьма = РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	ПараметрыПисьма.Получатель = "bp@1c.ru";
	ПараметрыПисьма.Тема = НСтр("ru='Не нашли функциональность программы'");
	ПараметрыПисьма.Текст = СтрШаблон(НСтр("ru='Что именно не удалось найти%1?
		|
		|
		|'"), ДополнениеОбИнтерфейсе);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИнтерфейса()
	
	Если Константы.ИнтерфейсТакси.Получить() Тогда
		Возврат НСтр("ru = 'полный'");
	ИначеЕсли Константы.ИнтерфейсТаксиПростой.Получить() Тогда
		Возврат НСтр("ru = 'простой'")
	ИначеЕсли Константы.ИнтерфейсВерсии77.Получить() Тогда
		Возврат НСтр("ru = 'аналогичный 1С:Бухгалтерии 7.7'")
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОтключитьДочернююФункциональность(ИмяРодительскойФункциональности)
	
	Отбор = Новый Структура("Имя", ИмяРодительскойФункциональности);
	ФункциональностьРодитель = ОписаниеФункциональности.НайтиСтроки(Отбор);
	
	Если ФункциональностьРодитель.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДочерняяФункциональность = ФункциональностьРодитель[0].ДочерняяФункциональность;
	Для Каждого Функциональность Из ДочерняяФункциональность Цикл
		ОтключитьДочернююФункциональность(Функциональность);
		ЭтотОбъект[Функциональность] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФункциональностьПростойИнтерфейс(ПараметрыПерехода)
	
	Отбор = Новый Структура("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		Если Не ЭтотОбъект[Функциональность.Имя] Тогда
			ЭтотОбъект[Функциональность.Имя] = Истина;
			ПараметрыПерехода.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДлительнаяОперация = СохранитьФункциональностьПростойИнтерфейсВФоне(ПараметрыПерехода.ИзменяемаяФункциональность);
	ОжидатьСохраненияФункциональностиВФоне(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция СохранитьФункциональностьПростойИнтерфейсВФоне(ИзменяемаяФункциональность)
	
	ПараметрыПроцедуры = НовыйСтруктураПараметровИзменитьСписокФункциональностиВФоне(ИзменяемаяФункциональность);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Сохранение измененной функциональности (простой инетрфейс).'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	ХранилищеОбщихНастроек.Сохранить("ФункциональностьОткрытыйРаздел",, ТекущийРаздел,, ИмяПользователя());
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПоказатьДлительнуюОперациюСохраненияФункциональности(Истина);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьСохраненияФункциональностиВФоне(ДлительнаяОперация)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьСохраненияФункциональностиВФонеЗавершение",
		ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьСохраненияФункциональностиВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПоказатьДлительнуюОперациюСохраненияФункциональности(Ложь);
		ОбновитьИнтерфейс = Истина;
		РезультатИзменений = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменений);
	Иначе
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПоказатьДлительнуюОперациюСохраненияФункциональности(ДлительнаяОперацияЗапущена)
	
	Если ДлительнаяОперацияЗапущена Тогда
		ВыполняетсяИзменениеФункциональности.Вставить("СохранениеФункциональности", Истина);
		Элементы.ГруппаСохранитьИзменения.Видимость = Не ДлительнаяОперацияЗапущена;
	Иначе
		ПрочитатьЗначенияФункциональностиФормы();
		ВыполняетсяИзменениеФункциональности.Очистить();
		УстановитьВариантФункциональности();
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.Доступность = Не ДлительнаяОперацияЗапущена;
	
	ТекстПерезапускДлительнаяОперацияОписание = 
		НСтр("ru = 'Пожалуйста, подождите, выполняется сохранение функциональности.'");
	Элементы.ПерезапускДлительнаяОперацияОписание.Заголовок = ТекстПерезапускДлительнаяОперацияОписание;
	Элементы.ГруппаПерезапускДлительнаяОперация.Видимость = ДлительнаяОперацияЗапущена;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяРаздела(Знач Раздел)
	
	Возврат СтрЗаменить(Раздел, "Группа", "");
	
КонецФункции

&НаКлиенте
Функция ВключенаФункциональностьПолныйИнтерфейс()
	
	ВключенаФункциональностьПолныйИнтерфейс = Ложь;
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл	
		Если Не Функциональность.ДоступнаВПростомИнтерфейсе
			И ЭтотОбъект[Функциональность.Имя] = Истина Тогда
			ВключенаФункциональностьПолныйИнтерфейс = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВключенаФункциональностьПолныйИнтерфейс;
	
КонецФункции

&НаКлиенте
Функция ФункциональностьИзменена()
	
	ФункциональностьИзменена = Ложь;
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Если ЭтотОбъект[Функциональность.Имя] <> НаборКонстант[Функциональность.Имя] Тогда
			ФункциональностьИзменена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФункциональностьИзменена;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешенПолныйИнтерфейс()
	
	Возврат ТарификацияБП.РазрешенПолныйИнтерфейс();
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйСтруктураПараметровИзменитьСписокФункциональностиВФоне(Знач ИзменяемаяФункциональность)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Функциональность", ИзменяемаяФункциональность);
	ПараметрыПроцедуры.Вставить("НовоеЗначение", Ложь);
	ПараметрыПроцедуры.Вставить("ИзменитьТолькоПростойИнтерфейс", Ложь);
	ПараметрыПроцедуры.Вставить("ИзменитьВариантФункциональности", Ложь);
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗакладкиИспользоватьСтатьиДвиженияДенежныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьСтатьиДвиженияДенежныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьОбменСИнтернетМагазиномНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеУчетПоКодамВалютныхОперацийИНомерамВалютныхДоговоровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

#Область ИзменениеВариантаФункциональности

&НаКлиенте
Функция ПараметрыИзмененияВариантаФункциональности(ВариантФункциональности)
	
	ОсновнаяФункциональность = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	НовоеЗначение = ?(ВариантФункциональности = ОсновнаяФункциональность, Ложь, Истина);
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("ВариантФункциональности", ВариантФункциональности);
	ПараметрыИзменения.Вставить("ИзменяемаяФункциональность", Новый Массив);
	ПараметрыИзменения.Вставить("ЗадатьВопросОДлительнойОперации", Ложь);
	ПараметрыИзменения.Вставить("НовоеЗначение", НовоеЗначение);
	
	ИзменитьТолькоПростойИнтерфейс = ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение);
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		
		Если НаборКонстант[Функциональность.Имя] <> НовоеЗначение Тогда
			
			ПараметрыИзменения.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
			
			ИзменитьФункциональностьСразу = Не ИзменитьТолькоПростойИнтерфейс
				Или Функциональность.ДоступнаВПростомИнтерфейсе;
			
			Если ИзменитьФункциональностьСразу И Функциональность.ТребуетсяДлительнаяОперация Тогда
				ПараметрыИзменения.ЗадатьВопросОДлительнойОперации = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыИзменения;
	
КонецФункции

&НаСервере
Функция ИзменитьВариантФункциональностиВФоне(ПараметрыИзмененияФункциональности)
	
	ИзменяемаяФункциональность = ПараметрыИзмененияФункциональности.ИзменяемаяФункциональность;
	НовоеЗначение = ПараметрыИзмененияФункциональности.НовоеЗначение;
	
	ПараметрыПроцедуры = НовыйСтруктураПараметровИзменитьСписокФункциональностиВФоне(ИзменяемаяФункциональность);
	ПараметрыПроцедуры.НовоеЗначение = НовоеЗначение;
	ПараметрыПроцедуры.ИзменитьТолькоПростойИнтерфейс =
		ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение);
	ПараметрыПроцедуры.ИзменитьВариантФункциональности = Истина;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ограничение функциональности до основной.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела("Главное", ПараметрыИзмененияФункциональности.НовоеЗначение);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьИзмененияВариантаФункиональностиВФоне(ДлительнаяОперация)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьВариантФункциональностиВФонеЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела("Главное");
		
		РезультатИзменения = ИзменитьВариантФункциональностиВФонеНаСервереЗавершение(
			ДлительнаяОперация.АдресРезультата);
		
		ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
		
	Иначе
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела("Главное");
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьВариантФункциональностиВФонеНаСервереЗавершение(АдресРезультата)
	
	РезультатИзменения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ОбновитьЗначенияКонстант(РезультатИзменения.НовыеЗначенияФункциональности);
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	СброситьПроверкуДоступностиРазделовПослеИзмененияВариантовФункциональности();
	
	ПоказатьИспользуемуюФункциональностьВРазделеГлавное(РезультатИзменения.НевозможноВыключитьФункциональность);
	
	ПоказатьНедоступнуюФункциональностьВРазделеГлавное(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Процедура СброситьПроверкуДоступностиРазделовПослеИзмененияВариантовФункциональности()
	
	// для управления подчиненными "Розничной торговле" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("РозничнаяТорговля");
	// для управления подчиненными "Учет по договорам" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("УчетПоДоговорам");
	// для управления подчиненными "Основные средства" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("ОсновныеСредства");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиЗадатьВопрос(ПараметрыИзмененияФункциональности)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ИзменитьВариантФункциональностиОтвет", ЭтотОбъект, ПараметрыИзмененияФункциональности);
	
	Если ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность() Тогда
		ТекстВопроса = НСтр(
			"ru='Переход на основную функциональность может занять длительное время.
			|
			|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр(
			"ru='Переход на полную функциональность может занять длительное время.
			|
			|Продолжить?'");
	КонецЕсли;
	
	ЗаголовокВопроса = НСтр("ru='Изменение функциональности'");
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиОтвет(Ответ, ПараметрыИзмененияФункциональности) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Элементы.ГруппаГлавноеИспользуемыеВозможности.Видимость = Ложь;
		
		Если ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность()
			ИЛИ ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность() Тогда
			ДлительнаяОперация = ИзменитьВариантФункциональностиВФоне(ПараметрыИзмененияФункциональности);
			ОжидатьИзмененияВариантаФункиональностиВФоне(ДлительнаяОперация);
		КонецЕсли;
		
	Иначе
		УстановитьВариантФункциональности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоСовпадений(СловаЗапроса, КлючевыеСлова)
	
	КоличествоСовпадений = 0;
	Для каждого СловоЗапроса Из СловаЗапроса Цикл
		ЕстьСовпадение = СтрНайти(КлючевыеСлова, СловоЗапроса) <> 0;
		Если ЕстьСовпадение Тогда
			КоличествоСовпадений = КоличествоСовпадений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоСовпадений;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти

