
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Обработки.ФункциональностьПрограммы.ЗахватитьЛицензииДляИспользуемойФункциональности() Тогда
		// Для используемой функциональности нашлись свободные лицензии
		// и их удалось удачно захватить.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьТекстРекомендаций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОписаниеЧтоСделатьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ФункциональностьПрограммы" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьТекстРекомендаций()
	
	ЭтоБизнесСтарт = ОбщегоНазначенияБП.ЭтоБизнесСтарт();
	
	Элементы.ОписаниеТариф.Видимость = Не ЭтоБизнесСтарт;
	Элементы.ОписаниеБлокирующаяФункциональность.Видимость = ЭтоБизнесСтарт;
	Элементы.ГруппаБлокирующаяФункциональность.Видимость = ЭтоБизнесСтарт;
	
	Если ЭтоБизнесСтарт Тогда
		ТекстЗаголовок = НСтр("ru = 'В программе используется функциональность, которая не входит в ваш текущий тариф.'");
		Элементы.ОписаниеЗаголовок.Заголовок = ТекстЗаголовок;
		
		ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
		НедоступнаяФункциональность = Обработки.ФункциональностьПрограммы.ВключеннаяНедоступнаяФункциональность(
			ОписаниеФункциональности);
			
		РазрешенПолныйИнтерфейс = ТарификацияБП.РазрешенПолныйИнтерфейс();
		РазрешенУчетЗарплаты = ТарификацияБП.РазрешенУчетЗарплаты();
		
		ТребуетсяОпцияПолныйИнтерфейс = Ложь;
		ТребуетсяОпцияУчетЗарплаты = Ложь;
		
		// Проверяем каких именно опций не хватает на текущем тарифе
		Для Каждого Функциональность Из НедоступнаяФункциональность Цикл
			Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
				// Если требуются все опции, то проверку завершаем досрочно
				Прервать;
			КонецЕсли;
			СвойстваФункциональности = ОписаниеФункциональности.Найти(Функциональность.Ключ, "Имя");
			Если СвойстваФункциональности.Раздел = "ЗарплатаКадры" И Не РазрешенУчетЗарплаты Тогда
				ТребуетсяОпцияУчетЗарплаты = Истина;
			КонецЕсли;
			Если Не СвойстваФункциональности.ДоступнаВПростомИнтерфейсе И Не РазрешенПолныйИнтерфейс Тогда
				ТребуетсяОпцияПолныйИнтерфейс = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТекстРекомендаций = Новый Массив;
		Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
			ТекстРекомендаций.Добавить(НСтр("ru = 'Чтобы включить проведение документов, подключите тариф с опциями'"));
		Иначе
			ТекстРекомендаций.Добавить(НСтр("ru = 'Чтобы включить проведение документов, подключите тариф с опцией'"));
		КонецЕсли;
		ТекстРекомендаций.Добавить(Символы.НПП);
		Если ТребуетсяОпцияПолныйИнтерфейс Тогда
			ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
				"""Полный интерфейс""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
		КонецЕсли;
		Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
			ТекстРекомендаций.Добавить(Символы.НПП);
			ТекстРекомендаций.Добавить(НСтр("ru = 'и'"));
			ТекстРекомендаций.Добавить(Символы.НПП);
			ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
				"""С сотрудниками""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
		ИначеЕсли ТребуетсяОпцияУчетЗарплаты Тогда
			ТекстРекомендаций.Добавить(Символы.НПП);
			ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
				"""С сотрудниками""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
		КонецЕсли;
		
		ТекстРекомендаций.Добавить(НСтр("ru = '.'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(НСтр("ru = 'Для этого обратитесь к обслуживающей организации.'"));
		
		Элементы.ОписаниеФункциональность.Заголовок = Новый ФорматированнаяСтрока(ТекстРекомендаций);
		
		РодительскаяГруппаДляНадписей =
			?(НедоступнаяФункциональность.Количество() > 1,
			Элементы.ГруппаБлокирующаяФункциональность,
			Элементы.ГруппаОписание);
		Для Каждого ИмяФункциональности Из НедоступнаяФункциональность Цикл
			СвойстваФункциональности = ОписаниеФункциональности.Найти(ИмяФункциональности.Ключ);
			Декорация = Элементы.Добавить(
				СтрШаблон("НедоступнаяФункциональность%1", ИмяФункциональности.Ключ),
				Тип("ДекорацияФормы"),
				РодительскаяГруппаДляНадписей);
			Декорация.Гиперссылка = Истина;
			Декорация.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
			Декорация.Заголовок = СвойстваФункциональности.Заголовок;
		КонецЦикла;
		
	Иначе
		ТекстРекомендаций = Новый Массив;
		ТекстРекомендаций.Добавить(НСтр("ru = 'Восстановить возможность проведения документов можно, отказавшись от этой функциональности.'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(НСтр("ru = 'Для этого снимите флажки с пометкой'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
			ФункциональностьПрограммы.ТекстНедоступенТариф(), , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(НСтр("ru = 'и'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
			ФункциональностьПрограммы.ТекстОграничениеТарифа(), , , ФункциональностьПрограммы.ЦветБаннераОграниченияТарифа()));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(НСтр("ru = 'в настройках'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Функциональности'"), , , , "ФункциональностьПрограммы"));
		ТекстРекомендаций.Добавить(".");
		
		Элементы.ОписаниеФункциональность.Заголовок = Новый ФорматированнаяСтрока(ТекстРекомендаций);
		
		ТекстРекомендаций = Новый Массив;
		ТекстРекомендаций.Добавить(НСтр("ru = 'Если же эта функциональность вам действительно нужна, перейдите на другой тариф.'"));
		ТекстРекомендаций.Добавить(" ");
		ТекстРекомендаций.Добавить(НСтр("ru = 'Для изменения тарифа обратитесь к обслуживающей организации.'"));
		
		Элементы.ОписаниеТариф.Заголовок = Новый ФорматированнаяСтрока(ТекстРекомендаций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыСпискаОбъектовПрепятствующихОтключениюОпции", ЭтотОбъект);
	ФункциональностьПрограммыКлиент.ПоказатьОбъектыПрепятствующиеОтключениюОпции(
		Элемент, "НедоступнаяФункциональность", ЭтотОбъект, ОповещениеЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыСпискаОбъектовПрепятствующихОтключениюОпции(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ВсеНедоступныеОпцииОтключены() Тогда
		ОбработкаОтветаПерезапускПрограммы = Новый ОписаниеОповещения("ОбработкаОтветаПерезапускПрограммы", ЭтотОбъект);
		ПоказатьВопрос(
				ОбработкаОтветаПерезапускПрограммы,
				НСтр("ru = 'Для включения возможности проведения документов необходимо перезапустить программу. Перезапустить сейчас?'"),
				РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеНедоступныеОпцииОтключены()
	
	РезультатОтключенияОпцийЗарплатаКадры =
		Обработки.ФункциональностьПрограммы.ОтключитьНедоступнуюФункциональностьЗарплатаКадры();
	
	НедоступнаяФункциональностьЗарплатаКадрыОтключена =
		Не РезультатОтключенияОпцийЗарплатаКадры.ПотребовалосьОтключениефункциональности
		Или РезультатОтключенияОпцийЗарплатаКадры.ОтключениеВыполненоУспешно;
	
	Возврат Обработки.ФункциональностьПрограммы.УстановитьФункциональностьПоОпцииРазрешенПолныйИнтерфейс()
		И НедоступнаяФункциональностьЗарплатаКадрыОтключена;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОтветаПерезапускПрограммы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСистемы(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
