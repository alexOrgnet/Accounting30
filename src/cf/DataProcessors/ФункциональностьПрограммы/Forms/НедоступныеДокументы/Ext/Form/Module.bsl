
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазрешенПолныйИнтерфейс = ТарификацияБП.РазрешенПолныйИнтерфейс();
	РазрешенУчетЗарплаты = ТарификацияБП.РазрешенУчетЗарплаты();
	
	ТребуетсяОпцияПолныйИнтерфейс = Ложь;
	ТребуетсяОпцияУчетЗарплаты = Ложь;
	
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	НедоступнаяФункциональность = ТарификацияБППовтИсп.НедоступнаяФункциональность();
	
	// Проверяем каких именно опций не хватает на текущем тарифе
	Для Каждого Функциональность Из НедоступнаяФункциональность Цикл
		Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
			// Если требуются все опции, то проверку завершаем досрочно
			Прервать;
		КонецЕсли;
		СвойстваФункциональности = ОписаниеФункциональности.Найти(Функциональность.Ключ, "Имя");
		Если СвойстваФункциональности.Раздел = "ЗарплатаКадры" И Не РазрешенУчетЗарплаты Тогда
			ТребуетсяОпцияУчетЗарплаты = Истина;
		КонецЕсли;
		Если Не СвойстваФункциональности.ДоступнаВПростомИнтерфейсе И Не РазрешенПолныйИнтерфейс Тогда
			ТребуетсяОпцияПолныйИнтерфейс = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекстРекомендаций = Новый Массив;
	ТекстРекомендаций.Добавить(НСтр("ru = 'В базе присутствуют документы, не входящие в текущий тариф. '"));
	Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
		ТекстРекомендаций.Добавить(НСтр("ru = 'Чтобы продолжить работу с ними, подключите тариф с опциями'"));
	Иначе
		ТекстРекомендаций.Добавить(НСтр("ru = 'Чтобы продолжить работу с ними, подключите тариф с опцией'"));
	КонецЕсли;
	ТекстРекомендаций.Добавить(Символы.НПП);
	Если ТребуетсяОпцияПолныйИнтерфейс Тогда
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
			"""Полный интерфейс""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
	КонецЕсли;
	Если ТребуетсяОпцияПолныйИнтерфейс И ТребуетсяОпцияУчетЗарплаты Тогда
		ТекстРекомендаций.Добавить(Символы.НПП);
		ТекстРекомендаций.Добавить(НСтр("ru = 'и'"));
		ТекстРекомендаций.Добавить(Символы.НПП);
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
			"""С сотрудниками""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
	ИначеЕсли ТребуетсяОпцияУчетЗарплаты Тогда
		ТекстРекомендаций.Добавить(Символы.НПП);
		ТекстРекомендаций.Добавить(Новый ФорматированнаяСтрока(
			"""С сотрудниками""", , , ФункциональностьПрограммы.ЦветБаннераНедоступенТариф()));
	КонецЕсли;
	
	ТекстРекомендаций.Добавить(НСтр("ru = '.'"));
	ТекстРекомендаций.Добавить(" ");
	ТекстРекомендаций.Добавить(НСтр("ru = 'Для этого обратитесь к обслуживающей организации.'"));
	
	Элементы.ДекорацияЗаголовок.Заголовок = Новый ФорматированнаяСтрока(ТекстРекомендаций);
	
	ЗаполнитьСписокДокументов(НедоступнаяФункциональность);
	Если Элементы.ГруппаНедоступныеДокументы.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Элементы.БольшеНеПоказывать.Видимость = Не Параметры.ОткрытоКомандой;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаДокументНажатие(Элемент)
	
	ИндексСтрокой = СтрЗаменить(Элемент.Имя, "Документ_", "");
	ПараметрыОткрываемойФормы = ЗаполнитьПараметрыФормыСпискаДокументов(
		АдресТаблицыУсловийДоступности, Число(ИндексСтрокой), Элемент.Заголовок);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлемента", Элемент.Имя);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыСпискаНедоступныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ФункциональностьПрограммы.Форма.СписокНедоступныхДокументов",
		ПараметрыОткрываемойФормы,
		,
		,
		,
		,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура БольшеНеПоказыватьПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"НастройкиПрограммы",
		"СкрытьПредупреждениеОНедоступныхДокументах",
		БольшеНеПоказывать);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДокументов(НедоступнаяФункциональность)
	
	ОтображаемыеДокументы = Новый Массив;
	УсловияДоступности = Обработки.ФункциональностьПрограммы.УсловияДоступностиДокументовПоТарифу();
	Для Каждого Функциональность Из НедоступнаяФункциональность Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Функциональность", Функциональность.Ключ);
		НайденныеСтроки = УсловияДоступности.НайтиСтроки(Отбор);
		Для Каждого ОграничениеТарифа Из НайденныеСтроки Цикл
			МетаданныеДокумента = Метаданные.НайтиПоТипу(ОграничениеТарифа.ТипОбъекта);
			Если ПравоДоступа("Просмотр", МетаданныеДокумента) Тогда
				ОтображаемыеДокументы.Добавить(ОграничениеТарифа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Обработки.ФункциональностьПрограммы.ПроверитьНаличиеДокументовСвязанныхСФункциональностью(ОтображаемыеДокументы);
	
	ГруппаРодитель = Элементы.ГруппаНедоступныеДокументы;
	Для Каждого ОграничениеТарифа Из ОтображаемыеДокументы Цикл
		ИндексСтрокой = Формат(УсловияДоступности.Индекс(ОграничениеТарифа), "ЧН=0; ЧГ=");
		НовыйЭлемент = Элементы.Добавить(СтрШаблон("Документ_%1", ИндексСтрокой), Тип("ДекорацияФормы"), ГруппаРодитель);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = СтрШаблон("%1%2", Строка(ОграничениеТарифа.ТипОбъекта),
			?(ЗначениеЗаполнено(ОграничениеТарифа.ДополнениеЗаголовка), ", " + ОграничениеТарифа.ДополнениеЗаголовка, ""));
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "ГиперссылкаДокументНажатие");
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЦикла;
	
	АдресТаблицыУсловийДоступности = ПоместитьВоВременноеХранилище(УсловияДоступности, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыФормыСпискаДокументов(Адрес, Индекс, Заголовок)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	УсловияДоступности = ПолучитьИзВременногоХранилища(Адрес);
	СтрокаУсловий = УсловияДоступности[Индекс];
	ОбъектМетаданных = Метаданные.НайтиПоТипу(СтрокаУсловий.ТипОбъекта);
	ПараметрыФормы.Вставить("ОсновнаяТаблица", ОбъектМетаданных.ПолноеИмя());
	Если ЗначениеЗаполнено(СтрокаУсловий.УсловияПроверки) Тогда
		ДобавитьПараметрыФормыСпискаНедоступныхДокументовПоУсловиямОтбора(СтрокаУсловий.УсловияПроверки, ПараметрыФормы);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьПараметрыФормыСпискаНедоступныхДокументовПоУсловиямОтбора(УсловияОтбора, ПараметрыФормы) Экспорт
	
	Отбор = Новый ОтборКомпоновкиДанных;
	ИменаТабличныхЧастей = Новый Массив;
	Для Каждого УсловиеПроверки Из УсловияОтбора Цикл
		Если УсловиеПроверки.ИмяОграничения = ТарификацияБП.ИмяОграниченияПоДочернемуРеквизиту() Тогда
			ЗначениеПроверки = Новый СписокЗначений;
			ЗначениеПроверки.ЗагрузитьЗначения(УсловиеПроверки.Значение);
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(УсловиеПроверки.Путь);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = ЗначениеПроверки;
		ИначеЕсли УсловиеПроверки.ИмяОграничения = ТарификацияБП.ИмяОграниченияНаЗаполненныеТабличныеЧасти() Тогда
			ПараметрыФормы.Вставить("ОбращениеКТабличнойЧасти", Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаТабличныхЧастей, УсловиеПроверки.Значение);
			ПараметрыФормы.Вставить("ИменаТабличныхЧастей", ИменаТабличныхЧастей);
		ИначеЕсли УсловиеПроверки.ИмяОграничения = ТарификацияБП.ИмяОграниченияПоРеквизитуТабличнойЧасти() Тогда
			ПараметрыФормы.Вставить("ОбращениеКТабличнойЧасти", Истина);
			ПараметрыФормы.Вставить("ОтборыТабличныхЧастей", Новый Структура);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаТабличныхЧастей, УсловиеПроверки.Таблицы);
			ПараметрыФормы.Вставить("ИменаТабличныхЧастей", ИменаТабличныхЧастей);
			Для Каждого ИмяТаблицы Из УсловиеПроверки.Таблицы Цикл
				ОтборПоТабличнойЧасти = Новый Структура;
				ОтборПоТабличнойЧасти.Вставить("Путь", УсловиеПроверки.Путь);
				ОтборПоТабличнойЧасти.Вставить("Значение", УсловиеПроверки.Значение);
				ПараметрыФормы.ОтборыТабличныхЧастей.Вставить(ИмяТаблицы, ОтборПоТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСпискаНедоступныхДокументов(ПараметрЗакрытия, ДопПараметры) Экспорт
	
	Если ПараметрЗакрытия = Истина Тогда
		УдалитьЭлементФормыНаСервере(ДопПараметры.ИмяЭлемента);
	КонецЕсли;
	
	Если Элементы.ГруппаНедоступныеДокументы.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормыНаСервере(ИмяЭлемента)
	
	Элементы.Удалить(Элементы[ИмяЭлемента]);
	
КонецПроцедуры

#КонецОбласти