
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	ОписаниеФункциональности.Сортировать("ДоступнаВПростомИнтерфейсе Убыв, Заголовок, Имя");
	
	ОсновнаяФункциональность = ОписаниеФункциональности.Вставить(0);
	ОсновнаяФункциональность.Имя = "ОсновнаяФункциональность";
	ОсновнаяФункциональность.Заголовок = НСтр("ru='Основная функциональность'");
	ОсновнаяФункциональность.Подсказка = НСтр("ru='Базовая функциональность, доступная в любом интерфейсе, включает в себя учет денежных средств по кассе и банку, счета, акты и накладные для покупателей, налоговый учет'");
	ОсновнаяФункциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		СтрокаФункциональности = ОтображаемаяФункциональность.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаФункциональности, Функциональность);
	КонецЦикла;
	
	Макет = Обработки.ФункциональностьПрограммы.ПолучитьМакет("Функциональность");
	АдресМакета = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	// Обход платформенной ошибки - очищается строка поиска при возврате с сервера на клиент
	#Если Не ВебКлиент Тогда
	СтрокаПоиска = Текст;
	#КонецЕсли
	
	ОтобразитьОтчет(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаПоиска = "";
	ОтобразитьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьОтчет(СтрокаПоиска = "")
	
	Макет = ПолучитьИзВременногоХранилища(АдресМакета);
	
	ОтчетПоФункциональности = Новый ТабличныйДокумент;
	ШапкаФункциональность = Макет.ПолучитьОбласть("ШапкаФункциональность");
	ОтчетПоФункциональности.Вывести(ШапкаФункциональность);
	
	Для Каждого СтрокаФункциональности Из ОтображаемаяФункциональность Цикл
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			СтрокаПоиска = НРег(СтрокаПоиска);
			НайденоПоПоиску = Ложь;
			Если СтрНайти(НРег(СтрокаФункциональности.Заголовок), СтрокаПоиска) <> 0 Тогда
				НайденоПоПоиску = Истина;
			КонецЕсли;
			Если Не НайденоПоПоиску И СтрНайти(НРег(СтрокаФункциональности.Подсказка), СтрокаПоиска) <> 0 Тогда
				НайденоПоПоиску = Истина;
			КонецЕсли;
			Если Не НайденоПоПоиску Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаФункциональность");
		ОбластьСтрока.Параметры.НаименованиеФункциональности = ?(ЗначениеЗаполнено(СтрокаФункциональности.Заголовок),
			СтрокаФункциональности.Заголовок, СтрокаФункциональности.Имя);
		ОбластьСтрока.Параметры.Подсказка = СтрокаФункциональности.Подсказка;
		Если СтрокаФункциональности.ДоступнаВПростомИнтерфейсе Тогда
			ОбластьСтрока.Область(2, 4).Картинка = БиблиотекаКартинок.ВнешняяКомпонентаДоступна;
		КонецЕсли;
		Если СтрокаФункциональности.Имя = "ОсновнаяФункциональность" Тогда
			ОбластьНаименования = ОбластьСтрока.Область(2, 2);
			ИсходныйШрифт = ОбластьНаименования.Шрифт;
			ОбластьНаименования.Шрифт = Новый Шрифт(ИсходныйШрифт, , , Истина);
		КонецЕсли;
		ОтчетПоФункциональности.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Результат.Очистить();
	Результат.Вывести(ОтчетПоФункциональности);
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.АвтоМасштаб = Истина;
	Результат.ФиксацияСверху = 4;
	
КонецПроцедуры

#КонецОбласти
