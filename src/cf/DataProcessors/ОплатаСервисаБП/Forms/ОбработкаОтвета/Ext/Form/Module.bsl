#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторОбъекта = Параметры.ИдентификаторОбъекта;
	ИдентификаторПравила = Параметры.ИдентификаторПравила;
	
	ПредставлениеВалютыОплаты = ТарификацияБПКлиентСервер.ЗнакРубля();
	
	СостоянияПодписок = ОплатаСервиса.СостоянияЗавершенияПодписокНаТарифы();
	ЭтоТестовыйТариф = СостоянияПодписок.ЗавершаетсяПлатных + СостоянияПодписок.НеЗавершаетсяПлатных = 0;
	
	Ожидание = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачалоОжидания = ТекущаяДата();
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоОбъекту", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОформленыПодписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" И Источник = Организация Тогда
		УстановитьДанныеБанковскогоСчета();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПодписку(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПлатежнаяСсылка);
	
	ПодписатьсяНаОбновления();
	
	ПодключитьОбработчикОжидания("ПолучитьПризнакОплаты", 1, Истина);
	
	ОжиданиеОплаты = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьСчет(Команда)
	
	ИдентификаторПечатнойФормы = "ПечатнаяФорма";
	НазваниеПечатнойФормы = НСтр("ru = 'Счет поставщика'");
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = ПечатнаяФормаСчета;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьБанковскийСчет(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Организация);
	ПараметрыФормы.Вставить("УстановитьТекущийЭлемент", "Банк");
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручение(Команда)
	
	ПлатежноеПоручение = СоздатьПлатежноеПоручениеПоСчетуПоставщика(СчетПоставщика);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ПлатежноеПоручение);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПлатежноеПоручение", "ПлатежноеПоручение", МассивОбъектов, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежноеПоручениеВБанк(Команда)
	
	ПлатежноеПоручение = СоздатьПлатежноеПоручениеПоСчетуПоставщика(СчетПоставщика);
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПлатежноеПоручение));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументов", СписокДокументов);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	Контрагент = СоздатьКонтрагента();
	
	ЧастиНазначенияПлатежа = СтрРазделить(ДанныеСчета.ШапкаДокумента.НазначениеПлатежа, Символы.ПС);
	ЧастиНазначенияПлатежа[0] = СтрШаблон(НСтр("ru = 'Оплата по счету %1 от %2 за право использования программного продукта (за %3 ИНН %4)'"),
		ДанныеСчета.ШапкаДокумента.Номер,
		Формат(ДанныеСчета.ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy"),
		СокрЛП(НаименованиеОрганизацииАбонента),
		СокрЛП(ИННАбонента));
	НазначениеПлатежа = СтрСоединить(ЧастиНазначенияПлатежа, Символы.ПС);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("СтавкаНДС", ДанныеСчета.ШапкаДокумента.СтавкаНДС);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОплатыПриИзменении(Элемент)
	
	СохранитьВыбранныйСпособОплаты(СпособОплаты);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Форма.ОписаниеОшибки) Тогда
		Форма.Заголовок = НСтр("ru = 'Ошибка'");
		Элементы.СтраницаОшибка.Видимость = Истина;
		Элементы.СтраницаОжидание.Видимость = Ложь;
		Элементы.СтраницаРезультат.Видимость = Ложь;
		Элементы.СтраницаОжиданиеОплаты.Видимость = Ложь;
		Элементы.СтраницаОплачено.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Форма.Ожидание Тогда
		Форма.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'");
		Элементы.СтраницаОшибка.Видимость = Ложь;
		Элементы.СтраницаОжидание.Видимость = Истина;
		Элементы.СтраницаРезультат.Видимость = Ложь;
		Элементы.СтраницаОжиданиеОплаты.Видимость = Ложь;
		Элементы.СтраницаОплачено.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Форма.ОжиданиеОплаты Тогда
		Форма.Заголовок = НСтр("ru = 'Ожидание'");
		Элементы.СтраницаОшибка.Видимость = Ложь;
		Элементы.СтраницаОжидание.Видимость = Ложь;
		Элементы.СтраницаРезультат.Видимость = Ложь;
		Элементы.СтраницаОжиданиеОплаты.Видимость = Истина;
		Элементы.СтраницаОплачено.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Форма.Оплачено Тогда
		Форма.Заголовок = НСтр("ru = 'Спасибо!'");
		Элементы.СтраницаОшибка.Видимость = Ложь;
		Элементы.СтраницаОжидание.Видимость = Ложь;
		Элементы.СтраницаРезультат.Видимость = Ложь;
		Элементы.СтраницаОжиданиеОплаты.Видимость = Ложь;
		Элементы.СтраницаОплачено.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаОжидание.Видимость = Ложь;
	Элементы.СтраницаОшибка.Видимость = Ложь;
	Элементы.СтраницаРезультат.Видимость = Истина;
	Элементы.СтраницаОжиданиеОплаты.Видимость = Ложь;
	Элементы.СтраницаОплачено.Видимость = Ложь;
	
	Форма.Заголовок = СтрШаблон(НСтр("ru = 'Оплатите %1 %2'"), Форма.СуммаДокумента, Форма.ПредставлениеВалютыОплаты);
	
	Элементы.Сообщение.Видимость = ЗначениеЗаполнено(Форма.Сообщение);
	
	ОплатаПлатежнойКартой  = Форма.СпособОплаты = "ОплатаПлатежнойКартой";
	ОплатаСРасчетногоСчета = Форма.СпособОплаты = "ОплатаСРасчетногоСчета";
	ОплатаСЛичногоСчета    = Форма.СпособОплаты = "ОплатаСЛичногоСчета";
	ОплатаНаличными        = Форма.СпособОплаты = "ОплатаНаличными";
	
	ЕстьМакетСчета = ТипЗнч(Форма.ПечатнаяФормаСчета) = Тип("ТабличныйДокумент");
	
	Элементы.РаспечататьСчет.Видимость = ОплатаСРасчетногоСчета ИЛИ ОплатаНаличными;
	
	Элементы.ИнформацияПоОплате.Видимость = НЕ Форма.ЭтоПродление И НЕ ОплатаПлатежнойКартой;
	Элементы.ИнформацияПоОплатеКартой.Видимость = НЕ Форма.ЭтоПродление И ОплатаПлатежнойКартой И НЕ Форма.ЭтоТестовыйТариф;
	Элементы.ИнформацияПоОплатеКартойТестовыйТариф.Видимость = НЕ Форма.ЭтоПродление И ОплатаПлатежнойКартой И Форма.ЭтоТестовыйТариф;
	
	Элементы.ИнформацияПоПродлению.Видимость = Форма.ЭтоПродление И НЕ ОплатаПлатежнойКартой;
	Элементы.ИнформацияПоПродлениюКартой.Видимость = Форма.ЭтоПродление И ОплатаПлатежнойКартой;
	
	ЕстьРеквизитыАбонента = ЗначениеЗаполнено(Форма.НаименованиеОрганизацииАбонента) ИЛИ ЗначениеЗаполнено(Форма.ИННАбонента);
	
	Элементы.ОформитьПодписку.Видимость = ОплатаПлатежнойКартой;
	Элементы.РеквизитыПодписки.Видимость = ОплатаПлатежнойКартой И ЕстьРеквизитыАбонента;
	
	Форма.РеквизитыПодписки = СтрШаблон(НСтр("ru = '%1 ИНН %2'"),
		Форма.НаименованиеОрганизацииАбонента,
		Форма.ИННАбонента);
	
	ЕстьОрганизация = НЕ Форма.Организация.Пустая();
	
	Элементы.РекомендацияПоОплатеСчета.Видимость            = ОплатаСРасчетногоСчета;
	Элементы.РекомендацияПоОплатеСРасчетногоСчета.Видимость = ОплатаСРасчетногоСчета И ЕстьОрганизация;
	Элементы.РекомендацияПоОплатеНаличными.Видимость        = ОплатаНаличными;
	
	БанковскийСчетЗаполнен = НЕ Форма.БанковскийСчет.Пустая();
	
	ЕстьСчетПоставщика = НЕ Форма.СчетПоставщика.Пустая();
	
	Элементы.РекомендацияПоУказаниюБанковскогоСчета.Видимость =
		ОплатаСРасчетногоСчета И ЕстьСчетПоставщика И НЕ БанковскийСчетЗаполнен И ЕстьОрганизация;
	Элементы.УказатьБанковскийСчет.Видимость = ОплатаСРасчетногоСчета И ЕстьСчетПоставщика И НЕ БанковскийСчетЗаполнен;
	
	Элементы.РаспечататьПлатежноеПоручение.Видимость    = ОплатаСРасчетногоСчета И ЕстьСчетПоставщика И БанковскийСчетЗаполнен;
	Элементы.ОтправитьПлатежноеПоручениеВБанк.Видимость = ОплатаСРасчетногоСчета И ЕстьСчетПоставщика И БанковскийСчетЗаполнен;
	
	Элементы.СоздатьПлатежноеПоручение.Видимость =
		ОплатаСРасчетногоСчета И НЕ ЕстьСчетПоставщика И ЕстьОрганизация;
	
	Элементы.РеквизитыДляОплаты.Видимость = ОплатаСЛичногоСчета;
	
	Элементы.ГруппаДокументыДляБанка.Видимость = ЕстьОрганизация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПризнакОплаты()
	
	ДанныеПолучены = ПолучитьПризнакОплатыНаСервере();
	Если НЕ ДанныеПолучены Тогда
		ПодключитьОбработчикОжидания("ПолучитьПризнакОплаты", 1, Истина);
	КонецЕсли;
	
	Если Оплачено Тогда
		Оповестить("ОформленыПодписки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПризнакОплатыНаСервере()
	
	ПолученоОповещение = УниверсальнаяИнтеграция.ПолученоОповещениеОбИзмененииОбъекта("bill", Строка(ИдентификаторОбъекта));
	Если НЕ ПолученоОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеОбъекта = ПрограммныйИнтерфейсСервиса.ДанныеСчетаНаОплату(ИдентификаторОбъекта, , Ложь);
	
	Если ДанныеОбъекта.Оплачен Тогда
		ОжиданиеОплаты = Ложь;
		Оплачено = Истина;
		ПараметрыСеанса.ВыбранныйТариф = "";
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	УниверсальнаяИнтеграция.ОтписатьсяОтОповещенияОбИзмененииОбъекта("bill", Строка(ИдентификаторОбъекта));
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеПоОбъекту()
	
	Таймаут = 180;
	ПродолжатьПопытки = НачалоОжидания + Таймаут >= ТекущаяДата();
	
	Если ПродолжатьПопытки Тогда
		ДанныеПолучены = ПолучитьДанныеПоОбъектуНаСервере();
		Если НЕ ДанныеПолучены Тогда
			ПодключитьОбработчикОжидания("ПолучитьДанныеПоОбъекту", 1, Истина);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Первышено время ожидания ответа сервера.'");
		Ожидание = Ложь;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоОбъектуНаСервере()
	
	ПолученоОповещение = УниверсальнаяИнтеграция.ПолученоОповещениеОбИзмененииОбъекта("bill", Строка(ИдентификаторОбъекта));
	Если НЕ ПолученоОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваОтвета = Неопределено;
	ДанныеОбъекта = ПрограммныйИнтерфейсСервиса.ДанныеСчетаНаОплату(ИдентификаторОбъекта, , Ложь, СвойстваОтвета);
	
	ОписаниеОшибкиПолученияДанных = СвойстваОтвета.Сообщение;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиПолученияДанных) Тогда
		ОписаниеОшибки = ОписаниеОшибкиПолученияДанных;
		Ожидание = Ложь;
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ДанныеОбъекта.Состояние.Ошибка Тогда
		ОписаниеОшибки = ДанныеОбъекта.Состояние.Описание;
		Ожидание = Ложь;
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ДанныеОбъекта.Файлы.Количество() >= 2 Тогда
		ОбработатьВыставленныйСчет(ДанныеОбъекта);
		Ожидание = Ложь;
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ДанныеОбъекта.Оплачен Тогда
		Оплачено = Истина;
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	УниверсальнаяИнтеграция.ОтписатьсяОтОповещенияОбИзмененииОбъекта("bill", Строка(ИдентификаторОбъекта));
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьВыставленныйСчет(ДанныеОбъекта)
	
	ОбработанФайлXML = Ложь;
	
	АдресФайлаПечатнойФормы = Неопределено;
	ИмяФайлаПечатнойФормыБезРасшрения = Неопределено;
	
	Для каждого Файл Из ДанныеОбъекта.Файлы Цикл
		ИмяФайла = Файл.Описание;
		СоставляющиеИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
		
		Если СоставляющиеИмениФайла.Расширение = ".zip" Тогда
			ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(Файл.Идентификатор);
			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
			
			АдресаФайловXML = Новый Массив;
			АдресаФайловXML.Добавить(АдресФайла);
			ДанныеДокументов = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаФайловXML);
			
			ДанныеСчета = Новый Структура;
			ДанныеСчета.Вставить("ШапкаДокумента", ДанныеДокументов[0].ДанныеДокумента.ШапкаДокумента);
			ДанныеСчета.Вставить("РеквизитыКонтрагента", ДанныеДокументов[0].ДанныеДокумента.РеквизитыКонтрагента);
			
			СуммаДокумента = ДанныеСчета.ШапкаДокумента.СуммаДокумента;
			
			Организация = Справочники.Организации.НайтиОрганизацию(ДанныеСчета.ШапкаДокумента.ИННОрганизации);
			Если НЕ Организация.Пустая() Тогда
				УстановитьДанныеБанковскогоСчета();
				Контрагент = СоздатьКонтрагента();
				СчетПоставщика = СоздатьСчетНаОплатуПоставщика(Организация, Контрагент,
					ДанныеДокументов[0].ДанныеДокумента.Товары,
					ДанныеСчета.ШапкаДокумента.ЦенаВключаетНДС,
					ДанныеСчета.ШапкаДокумента.Номер, ДанныеСчета.ШапкаДокумента.Дата);
			КонецЕсли;
			
			ОбработанФайлXML = Истина;
		КонецЕсли;
		
		Если СоставляющиеИмениФайла.Расширение = ".mxl" Тогда
			ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(Файл.Идентификатор);
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СоставляющиеИмениФайла.Расширение);
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			ПечатнаяФормаСчета = Новый ТабличныйДокумент;
			ПечатнаяФормаСчета.Прочитать(ИмяВременногоФайла);
			
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
				ЗаписатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПечатнаяФормаСчета.ТолькоПросмотр      = Истина;
			ПечатнаяФормаСчета.АвтоМасштаб         = Истина;
			ПечатнаяФормаСчета.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			ПечатнаяФормаСчета.ОтображатьЗаголовки = Ложь;
			ПечатнаяФормаСчета.ОтображатьСетку     = Ложь;
			
			АдресФайлаПечатнойФормы = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
			ИмяФайлаПечатнойФормыБезРасшрения = СоставляющиеИмениФайла.ИмяБезРасширения;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОбработанФайлXML Тогда
		ОписаниеОшибки = НСтр("ru = 'Не обнаружен электронный счет на оплату (xml)'");
		Возврат;
	КонецЕсли;
	
	Если НЕ СчетПоставщика.Пустая()
		И ЗначениеЗаполнено(ИмяФайлаПечатнойФормыБезРасшрения)
		И ЗначениеЗаполнено(АдресФайлаПечатнойФормы) Тогда
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", СчетПоставщика);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаПечатнойФормыБезРасшрения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "mxl");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаПечатнойФормы);
	КонецЕсли;
	
	ПлатежнаяСсылка = ДанныеОбъекта.ПлатежнаяСсылка;
	ЭтоПродление = ДанныеОбъекта.Продление;
	Сообщение = ДанныеОбъекта.Комментарий;
	
	Попытка
		ДополнительныеСведенияАбонента = ПрограммныйИнтерфейсСервиса.ДополнительныеСведенияАбонента();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	СтрокаНаименованиеОрганизации = ДополнительныеСведенияАбонента.Свойства.Найти("НаименованиеОрганизации", "Ключ");
	Если СтрокаНаименованиеОрганизации <> Неопределено Тогда
		НаименованиеОрганизацииАбонента = СтрокаНаименованиеОрганизации.Значение;
	КонецЕсли;
	
	СтрокаИННАбонента = ДополнительныеСведенияАбонента.Свойства.Найти("ИННАбонента", "Ключ");
	Если СтрокаИННАбонента <> Неопределено Тогда
		ИННАбонента = СтрокаИННАбонента.Значение;
	КонецЕсли;
	
	СформироватьРеквзитыДляОплаты();
	
	УстановитьСписокСпособовОплаты();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеФайла(ИдентификаторФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяФайла = РаботаВМоделиСервиса.ПолучитьФайлИзХранилищаМенеджераСервиса(ИдентификаторФайла);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Функция СоздатьКонтрагента()
	
	Возврат Справочники.Контрагенты.СоздатьКонтрагента(ДанныеСчета.РеквизитыКонтрагента);
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеБанковскогоСчета()
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(БанковскийСчет, Организация,
		Константы.ВалютаРегламентированногоУчета.Получить());
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРеквзитыДляОплаты()
	
	РеквизитыДляОплаты = "";
	
	Если ЗначениеЗаполнено(ДанныеСчета) Тогда
		
		РеквизитыКонтрагента = ДанныеСчета.РеквизитыКонтрагента;
		
		Сумма             = Формат(СуммаДокумента, "ЧГ=");
		РасчетныйСчет     = РеквизитыКонтрагента.НомерСчета;
		БИК               = РеквизитыКонтрагента.БИК;
		Банк              = РеквизитыКонтрагента.Банк;
		ИНН               = РеквизитыКонтрагента.ИНН;
		ПолучательПлатежа = РеквизитыКонтрагента.НаименованиеПолное;
		НазначениеПлатежа = СтрШаблон("Оплата по счету %1 от %2 %3",
		                  	ДанныеСчета.ШапкаДокумента.Номер,
		                  	Формат(ДанныеСчета.ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy"),
		                  	НаименованиеОрганизацииАбонента);
		
		Шаблон = "             Сумма: %1
		         |    Расчетный счет: %2
		         |               БИК: %3
		         |              Банк: %4
		         |               ИНН: %5
		         |Получатель платежа: %6
		         |Назначение платежа: %7";
		
		РеквизитыДляОплаты = СтрШаблон(Шаблон,
			Сумма,
			РасчетныйСчет,
			БИК,
			Банк,
			ИНН,
			ПолучательПлатежа,
			НазначениеПлатежа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСчетНаОплатуПоставщика(Организация, Контрагент, Товары, СуммаВключаетНДС, НомерСчета, ДатаСчета)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Дата", ДатаСчета);
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ДатаСчета);
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента", НомерСчета);
	ДанныеЗаполнения.Вставить("Контрагент", Контрагент);
	ДанныеЗаполнения.Вставить("БанковскийСчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
	ДанныеЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	НовыйСчет = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйСчет, ДанныеЗаполнения);
	НовыйСчет.Заполнить(ДанныеЗаполнения);
	
	Для каждого Товар Из Товары Цикл
		НоваяСтрока = НовыйСчет.Товары.Добавить();
		НоваяСтрока.Содержание = Товар.Наименование;
		НоваяСтрока.Количество = Товар.Количество;
		НоваяСтрока.Цена       = Товар.Цена;
		// Цена уже всегда соответствует тому, что в документе.
		// А вот сумма всегда не содержит НДС. Поэтому, чтобы цена и сумма соответствовали друг другу,
		// скорректируем сумму.
		НоваяСтрока.Сумма      = ?(СуммаВключаетНДС, Товар.Сумма + Товар.СуммаНДС,  Товар.Сумма);
		НоваяСтрока.СуммаНДС   = Товар.СуммаНДС;
		НоваяСтрока.СтавкаНДС  = Товар.СтавкаНДС;
	КонецЦикла;
	
	НовыйСчет.ДополнительныеСвойства.Вставить("НеПроверятьОграничения");
	НовыйСчет.Записать();
	
	Возврат НовыйСчет.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПлатежноеПоручениеПоСчетуПоставщика(Знач СчетПоставщика)
	
	Результат = Документы.ПлатежноеПоручение.НайтиПоРеквизиту("ДокументОснование", СчетПоставщика);
	
	Если Результат.Пустая() Тогда
		
		РеквизитыСчетаПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетПоставщика,
			"НомерВходящегоДокумента,ДатаВходящегоДокумента");
		
		ТекстНазначенияПлатежа = СтрШаблон(
			НСтр("ru='Оплата по счету %1 от %2 за право использования программного продукта.'"),
			РеквизитыСчетаПоставщика.НомерВходящегоДокумента,
			Формат(РеквизитыСчетаПоставщика.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
		
		НовоеПлатежноеПоручение = Документы.ПлатежноеПоручение.СоздатьДокумент();
		НовоеПлатежноеПоручение.Заполнить(СчетПоставщика);
		
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			НовоеПлатежноеПоручение.Организация,
			НовоеПлатежноеПоручение.СчетОрганизации,
			НовоеПлатежноеПоручение.Контрагент,
			НовоеПлатежноеПоручение.СчетКонтрагента);
		
		АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа = ТекстНазначенияПлатежа;
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(НовоеПлатежноеПоручение, АвтоЗначенияРеквизитов, Ложь);
		
		НовоеПлатежноеПоручение.ДополнительныеСвойства.Вставить("НеПроверятьОграничения");
		НовоеПлатежноеПоручение.Записать(РежимЗаписиДокумента.Проведение);
		
		РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовоеПлатежноеПоручение.Ссылка));
		
		Результат = НовоеПлатежноеПоручение.Ссылка;
		
	КонецЕсли;
	
	// Актуализация даты платежного поручения
	Если Результат.Дата <> ТекущаяДатаСеанса() Тогда
		ПлатежноеПоручение = Результат.ПолучитьОбъект();
		ПлатежноеПоручение.Дата = ТекущаяДатаСеанса();
		ПлатежноеПоручение.ДополнительныеСвойства.Вставить("НеПроверятьОграничения");
		ПлатежноеПоручение.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПодписатьсяНаОбновления()
	
	УниверсальнаяИнтеграция.ПодписатьсяНаОповещениеОбИзмененииОбъекта("bill", Строка(ИдентификаторОбъекта));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСпособовОплаты()
	
	СписокВыбора = Элементы.СпособОплаты.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	Если (ЭтоПродление ИЛИ ЭтоТестовыйТариф) И ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		СписокВыбора.Добавить("ОплатаПлатежнойКартой", НСтр("ru='Платежной картой'"));
	КонецЕсли;
	
	СписокВыбора.Добавить("ОплатаСРасчетногоСчета", НСтр("ru = 'С расчетного счета'"));
	СписокВыбора.Добавить("ОплатаСЛичногоСчета", НСтр("ru = 'С личного счета через онлайн-банк'"));
	СписокВыбора.Добавить("ОплатаНаличными", НСтр("ru = 'Наличными в отделении банка'"));
	
	СпособОплаты = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ОплатаСервиса"), ВРег("СпособОплаты"));
	
	Если СписокВыбора.НайтиПоЗначению(СпособОплаты) = Неопределено Тогда
		СпособОплаты = СписокВыбора[0].Значение;
		СохранитьВыбранныйСпособОплаты(СпособОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВыбранныйСпособОплаты(Знач СпособОплаты)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ОплатаСервиса"), ВРег("СпособОплаты"), СпособОплаты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибку(ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОплатаСервиса'"),
		УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

#КонецОбласти
