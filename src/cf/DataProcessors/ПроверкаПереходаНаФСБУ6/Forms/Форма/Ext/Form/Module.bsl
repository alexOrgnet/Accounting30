#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ПолеОрганизация.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МинимальнаяВерсия = "3.0.119.9";
	
	Если Не КорректнаяВерсия(МинимальнаяВерсия) Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Данная обработка предназначена для работы в версией конфигурации %1 и выше.'"), МинимальнаяВерсия));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	ПроверитьНаСервере();
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОбъединитьДвижения" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Область.Расшифровка);
		ОбработкаОтветаОбъединитьДвижения = Новый ОписаниеОповещения("ОбработкаОтветаОбъединитьДвижения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработкаОтветаОбъединитьДвижения, СтрШаблон(НСтр("ru = '%1?'"), Область.Текст), РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Область.Имя = "СоздатьОтсутствующиеПроводкиПоАмортизации" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Область.Расшифровка);
		ОбработкаОтветаОбъединитьДвижения = Новый ОписаниеОповещения("ОбработкаОтветаСоздатьОтсутствующиеПроводкиПоАмортизации", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработкаОтветаОбъединитьДвижения, СтрШаблон(НСтр("ru = '%1?'"), Область.Текст), РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Область.Имя = "СоздатьОтсутствующиеПроводкиПоВыбытию" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Область.Расшифровка);
		ОбработкаОтветаОбъединитьДвижения = Новый ОписаниеОповещения("ОбработкаОтветаСоздатьОтсутствующиеПроводкиПоВыбытию", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработкаОтветаОбъединитьДвижения, СтрШаблон(НСтр("ru = '%1?'"), Область.Текст), РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Область.Имя = "УдалитьИзбыточныеПроводкиПоВыбытию" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Область.Расшифровка);
		ОбработкаОтветаОбъединитьДвижения = Новый ОписаниеОповещения("ОбработкаОтветаУдалитьИзбыточныеПроводкиПоВыбытию", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработкаОтветаОбъединитьДвижения, СтрШаблон(НСтр("ru = '%1?'"), Область.Текст), РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Область.Имя = "ОтразитьВПрослеживаемости" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Область.Расшифровка);
		ОбработкаОтветаОбъединитьДвижения = Новый ОписаниеОповещения("ОбработкаОтветаОтразитьВПрослеживаемости", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработкаОтветаОбъединитьДвижения, СтрШаблон(НСтр("ru = '%1?'"), Область.Текст), РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьНаСервере()
	
	Результат.Очистить();
	
	Макет = Обработки.ПроверкаПереходаНаФСБУ6.ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Результат.Вывести(ОбластьЗаголовок);
	
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбластьОрганизация.Параметры.Организация = Организация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// ДУБЛИРОВАНИЕ АМОРТИЗАЦИИ
	
	ОбластьДублированиеАмортизацииЗаголовок = Макет.ПолучитьОбласть("ДублированиеАмортизацииЗаголовок");
	Результат.Вывести(ОбластьДублированиеАмортизацииЗаголовок);
	
	ОбластьДублированиеНеОбнаружено = Макет.ПолучитьОбласть("ДублированиеНеОбнаружено");
	
	МассивРезультатов = ОбъединитьНесколькоОперацийАмортизацияВОдну(Истина, Организация);
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Результат.Вывести(ОбластьДублированиеНеОбнаружено);
	Иначе
		Для каждого РезультатПроверки Из МассивРезультатов Цикл
			Если Не ЗначениеЗаполнено(Организация) Тогда
				ОбластьОрганизация.Параметры.Организация = РезультатПроверки.Организация;
				Результат.Вывести(ОбластьОрганизация);
			КонецЕсли;
			
			Если РезультатПроверки.ДублирующиеОперации.Количество() = 0 Тогда
				Результат.Вывести(ОбластьДублированиеНеОбнаружено);
				Продолжить;
			КонецЕсли;
			
			ОбластьДублированиеАмортизацииОперации = Макет.ПолучитьОбласть("ДублированиеАмортизацииОперации");
			ОбластьДублированиеАмортизацииОперации.Параметры.ОсновнаяОперация = РезультатПроверки.ОсновнаяОперация;
			ОбластьДублированиеАмортизацииОперации.Параметры.КоличествоДублирующихОпераций = РезультатПроверки.ДублирующиеОперации.Количество();
			Результат.Вывести(ОбластьДублированиеАмортизацииОперации);
			
			Результат.НачатьГруппуСтрок(, Ложь);
			ОбластьДублирующаяОперация = Макет.ПолучитьОбласть("ДублирующаяОперация");
			Для каждого ДублирующаяОперация Из РезультатПроверки.ДублирующиеОперации Цикл
				ОбластьДублирующаяОперация.Параметры.ДублирующаяОперация = ДублирующаяОперация;
				Результат.Вывести(ОбластьДублирующаяОперация);
			КонецЦикла;
			Результат.ЗакончитьГруппуСтрок();
			
			ОбластьДублированиеАмортизацииРекомендации = Макет.ПолучитьОбласть("ДублированиеАмортизацииРекомендации");
			ОбластьДублированиеАмортизацииРекомендации.Параметры.Организация = РезультатПроверки.Организация;
			Результат.Вывести(ОбластьДублированиеАмортизацииРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	// ОТСУТСТВИЕ АМОРТИЗАЦИИ
	
	ОбластьОтсутствиеАмортизацииЗаголовок = Макет.ПолучитьОбласть("ОтсутствиеАмортизацииЗаголовок");
	Результат.Вывести(ОбластьОтсутствиеАмортизацииЗаголовок);
	
	ОтсутствующиеПроводкиНеОбнаружены = Макет.ПолучитьОбласть("ОтсутствующиеПроводкиНеОбнаружены");
	
	МассивРезультатов = ВосстановитьПроводкиПоАмортизации(Истина, Организация);
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Результат.Вывести(ОтсутствующиеПроводкиНеОбнаружены);
	Иначе
		Для каждого РезультатПроверки Из МассивРезультатов Цикл
			Если Не ЗначениеЗаполнено(Организация) Тогда
				ОбластьОрганизация.Параметры.Организация = РезультатПроверки.Организация;
				Результат.Вывести(ОбластьОрганизация);
			КонецЕсли;
			
			Если РезультатПроверки.Проводки.Количество() = 0 Тогда
				Результат.Вывести(ОтсутствующиеПроводкиНеОбнаружены);
				Продолжить;
			КонецЕсли;
			
			ОбластьОтсутствующиеПроводкиЗаголовок = Макет.ПолучитьОбласть("ОтсутствующиеПроводкиЗаголовок");
			ОбластьОтсутствующиеПроводкиЗаголовок.Параметры.КоличествоПроводок = РезультатПроверки.Проводки.Количество();
			Результат.Вывести(ОбластьОтсутствующиеПроводкиЗаголовок);
			
			Результат.НачатьГруппуСтрок(, Ложь);
			ОбластьПроводкиЗаголовок = Макет.ПолучитьОбласть("ПроводкиЗаголовок");
			Результат.Вывести(ОбластьПроводкиЗаголовок);
			
			ОбластьПроводка = Макет.ПолучитьОбласть("Проводка");
			Для каждого Проводка Из РезультатПроверки.Проводки Цикл
				ЗаполнитьЗначенияСвойств(ОбластьПроводка.Параметры, Проводка);
				ОбластьПроводка.Параметры.Дата = Проводка.Период;
				ОбластьПроводка.Параметры.АналитикаДт = ПредставлениеАналитики(Проводка.ПодразделениеДт, Проводка.СубконтоДт);
				ОбластьПроводка.Параметры.АналитикаКт = ПредставлениеАналитики(Проводка.ПодразделениеКт, Проводка.СубконтоКт);
				Результат.Вывести(ОбластьПроводка);
			КонецЦикла;
			Результат.ЗакончитьГруппуСтрок();
			
			ОтсутствиеАмортизацииРекомендации = Макет.ПолучитьОбласть("ОтсутствиеАмортизацииРекомендации");
			ОтсутствиеАмортизацииРекомендации.Параметры.Организация = РезультатПроверки.Организация;
			Результат.Вывести(ОтсутствиеАмортизацииРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	// ОТСУТСТВИЕ ВЫБЫТИЯ
	
	ОбластьОтсутствиеВыбытияЗаголовок = Макет.ПолучитьОбласть("ОтсутствиеВыбытияЗаголовок");
	Результат.Вывести(ОбластьОтсутствиеВыбытияЗаголовок);
	
	ОтсутствующиеПроводкиНеОбнаружены = Макет.ПолучитьОбласть("ОтсутствующиеПроводкиНеОбнаружены");
	
	МассивРезультатов = ВосстановитьПроводкиПоВыбытиюОС(Истина, Организация);
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Результат.Вывести(ОтсутствующиеПроводкиНеОбнаружены);
	Иначе
		Для каждого РезультатПроверки Из МассивРезультатов Цикл
			Если Не ЗначениеЗаполнено(Организация) Тогда
				ОбластьОрганизация.Параметры.Организация = РезультатПроверки.Организация;
				Результат.Вывести(ОбластьОрганизация);
			КонецЕсли;
			
			Если РезультатПроверки.Проводки.Количество() = 0 Тогда
				Результат.Вывести(ОтсутствующиеПроводкиНеОбнаружены);
				Продолжить;
			КонецЕсли;
			
			ОбластьОтсутствующиеПроводкиЗаголовок = Макет.ПолучитьОбласть("ОтсутствующиеПроводкиЗаголовок");
			ОбластьОтсутствующиеПроводкиЗаголовок.Параметры.КоличествоПроводок = РезультатПроверки.Проводки.Количество();
			Результат.Вывести(ОбластьОтсутствующиеПроводкиЗаголовок);
			
			Результат.НачатьГруппуСтрок(, Ложь);
			ОбластьПроводкиЗаголовок = Макет.ПолучитьОбласть("ПроводкиЗаголовок");
			Результат.Вывести(ОбластьПроводкиЗаголовок);
			
			ОбластьПроводка = Макет.ПолучитьОбласть("Проводка");
			Для каждого Проводка Из РезультатПроверки.Проводки Цикл
				ЗаполнитьЗначенияСвойств(ОбластьПроводка.Параметры, Проводка);
				ОбластьПроводка.Параметры.Дата = Проводка.Период;
				ОбластьПроводка.Параметры.АналитикаДт = ПредставлениеАналитики(Проводка.ПодразделениеДт, Проводка.СубконтоДт);
				ОбластьПроводка.Параметры.АналитикаКт = ПредставлениеАналитики(Проводка.ПодразделениеКт, Проводка.СубконтоКт);
				Результат.Вывести(ОбластьПроводка);
			КонецЦикла;
			Результат.ЗакончитьГруппуСтрок();
			
			ОбластьОтсутствиеВыбытияРекомендации = Макет.ПолучитьОбласть("ОтсутствиеВыбытияРекомендации");
			ОбластьОтсутствиеВыбытияРекомендации.Параметры.Организация = РезультатПроверки.Организация;
			Результат.Вывести(ОбластьОтсутствиеВыбытияРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	// ИЗБЫТОЧНОЕ ВЫБЫТИЕ
	
	ОбластьИзбыточноеВыбытиеЗаголовок = Макет.ПолучитьОбласть("ИзбыточноеВыбытиеЗаголовок");
	Результат.Вывести(ОбластьИзбыточноеВыбытиеЗаголовок);
	
	ИзбыточныеПроводкиНеОбнаружены = Макет.ПолучитьОбласть("ИзбыточныеПроводкиНеОбнаружены");
	
	МассивРезультатов = УдалитьИзбыточныеПроводкиОперацииПереводВМЦ(Истина, Организация);
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Результат.Вывести(ИзбыточныеПроводкиНеОбнаружены);
	Иначе
		Для каждого РезультатПроверки Из МассивРезультатов Цикл
			Если Не ЗначениеЗаполнено(Организация) Тогда
				ОбластьОрганизация.Параметры.Организация = РезультатПроверки.Организация;
				Результат.Вывести(ОбластьОрганизация);
			КонецЕсли;
			
			Если РезультатПроверки.Проводки.Количество() = 0 Тогда
				Результат.Вывести(ИзбыточныеПроводкиНеОбнаружены);
				Продолжить;
			КонецЕсли;
			
			ОбластьИзбыточныеПроводкиЗаголовок = Макет.ПолучитьОбласть("ИзбыточныеПроводкиЗаголовок");
			ОбластьИзбыточныеПроводкиЗаголовок.Параметры.КоличествоПроводок = РезультатПроверки.Проводки.Количество();
			Результат.Вывести(ОбластьИзбыточныеПроводкиЗаголовок);
			
			Результат.НачатьГруппуСтрок(, Ложь);
			ОбластьПроводкиЗаголовок = Макет.ПолучитьОбласть("ПроводкиЗаголовок");
			Результат.Вывести(ОбластьПроводкиЗаголовок);
			
			ОбластьПроводка = Макет.ПолучитьОбласть("Проводка");
			Для каждого Проводка Из РезультатПроверки.Проводки Цикл
				ЗаполнитьЗначенияСвойств(ОбластьПроводка.Параметры, Проводка);
				ОбластьПроводка.Параметры.Дата = Проводка.Период;
				ОбластьПроводка.Параметры.АналитикаДт = ПредставлениеАналитики(Проводка.ПодразделениеДт, Проводка.СубконтоДт);
				ОбластьПроводка.Параметры.АналитикаКт = ПредставлениеАналитики(Проводка.ПодразделениеКт, Проводка.СубконтоКт);
				Результат.Вывести(ОбластьПроводка);
			КонецЦикла;
			Результат.ЗакончитьГруппуСтрок();
			
			ОбластьИзбыточноеВыбытиеРекомендации = Макет.ПолучитьОбласть("ИзбыточноеВыбытиеРекомендации");
			ОбластьИзбыточноеВыбытиеРекомендации.Параметры.Организация = РезультатПроверки.Организация;
			Результат.Вывести(ОбластьИзбыточноеВыбытиеРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	
	// ПРОСЛЕЖИВАЕМОСТЬ
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		
		ОбластьОтражениеВПрослеживаемости = Макет.ПолучитьОбласть("ОтражениеВПрослеживаемостиЗаголовок");
		Результат.Вывести(ОбластьОтражениеВПрослеживаемости);
		
		ОбластьВсеОтраженоВПрослеживаемости = Макет.ПолучитьОбласть("ВсеОтраженоВПрослеживаемости");
		
		МассивРезультатов = ПроверитьОтражениеВПрослеживаемости(Истина, Организация);
		
		
	Если МассивРезультатов.Количество() = 0 Тогда
		Результат.Вывести(ОбластьВсеОтраженоВПрослеживаемости);
	Иначе
		Для каждого РезультатПроверки Из МассивРезультатов Цикл
			Если Не ЗначениеЗаполнено(Организация) Тогда
				ОбластьОрганизация.Параметры.Организация = РезультатПроверки.Организация;
				Результат.Вывести(ОбластьОрганизация);
			КонецЕсли;
			
			Если РезультатПроверки.Проводки.Количество() = 0 Тогда
				Результат.Вывести(ОбластьВсеОтраженоВПрослеживаемости);
				Продолжить;
			КонецЕсли;
			
			ОбластьОтсутствующееОтражениеВПрослеживаемостиЗаголовок = Макет.ПолучитьОбласть("ОтсутствующееОтражениеВПрослеживаемостиЗаголовок");
			ОбластьОтсутствующееОтражениеВПрослеживаемостиЗаголовок.Параметры.КоличествоОбъектов = РезультатПроверки.Проводки.Количество();
			Результат.Вывести(ОбластьОтсутствующееОтражениеВПрослеживаемостиЗаголовок);
			
			Результат.НачатьГруппуСтрок(, Ложь);
			ОбластьОтсутствующееОтражениеШапка = Макет.ПолучитьОбласть("ОтсутствующееОтражениеШапка");
			Результат.Вывести(ОбластьОтсутствующееОтражениеШапка);
			
			ОбластьОтсутствующиеОбъекты = Макет.ПолучитьОбласть("ОтсутствующиеОбъекты");
			Для каждого Проводка Из РезультатПроверки.Проводки Цикл
				ЗаполнитьЗначенияСвойств(ОбластьОтсутствующиеОбъекты.Параметры, Проводка);
				ОбластьОтсутствующиеОбъекты.Параметры.Дата = Проводка.Период;
				Результат.Вывести(ОбластьОтсутствующиеОбъекты);
			КонецЦикла;
			Результат.ЗакончитьГруппуСтрок();
			
			ОбластьОтсутствующиеДвиженияИсправление = Макет.ПолучитьОбласть("ОтсутствующиеДвиженияИсправление");
			ОбластьОтсутствующиеДвиженияИсправление.Параметры.Организация = РезультатПроверки.Организация;
			Результат.Вывести(ОбластьОтсутствующиеДвиженияИсправление);
		КонецЦикла;
	КонецЕсли;

	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОбъединитьНесколькоОперацийАмортизацияВОдну(ТолькоПроверка = Ложь, Организация = Неопределено)
	
	ОчиститьЛог();
	Логировать("---------------------------", ТолькоПроверка);
	Логировать(НСтр("ru='Объединение нескольких операций ""Амортизация и износ ОС"" в одну:'"), ТолькоПроверка);
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Дата,
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И РегламентнаяОперация.Дата = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД)
	|	И ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентнаяОперация.Дата,
	|	РегламентнаяОперация.Номер
	|ИТОГИ ПО
	|	Организация";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегламентнаяОперация.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	Если ТолькоПроверка Тогда
		
		ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивРезультатов = Новый Массив;
		
		Если ВыборкаПоОрганизации.Количество() = 0 Тогда
			Возврат МассивРезультатов;
		КонецЕсли;
		
		Пока ВыборкаПоОрганизации.Следующий() Цикл
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("Организация", ВыборкаПоОрганизации.Организация);
			РезультатПроверки.Вставить("ДублирующиеОперации", Новый Массив);
			МассивРезультатов.Добавить(РезультатПроверки);
			
			Выборка = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Выборка.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка.Следующий();
			
			РезультатПроверки.Вставить("ОсновнаяОперация", Выборка.Ссылка);
			
			Пока Выборка.Следующий() Цикл
				РезультатПроверки.ДублирующиеОперации.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат МассивРезультатов;
		
	КонецЕсли;
	
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоДокументу = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоДокументу.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Пока ВыборкаПоДокументу.Следующий() Цикл
				ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументу.Ссылка);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			ВыборкаПоДокументу.Сбросить();
			
			ВыборкаПоДокументу.Следующий();
			
			ОперацияАмортизация = ВыборкаПоДокументу.Ссылка; // Первый документ
			
			ШаблонСообщения = НСтр("ru = 'Объединение в операцию %1:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияАмортизация);
			Логировать(ТекстСообщения, ТолькоПроверка);
			
			ПроводкиОперацииАмортизация = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			ПроводкиОперацииАмортизация.Отбор.Регистратор.Установить(ОперацияАмортизация);
			ПроводкиОперацииАмортизация.Прочитать();
			
			РасчетАмортизации = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
			РасчетАмортизации.Отбор.Регистратор.Установить(ОперацияАмортизация);
			РасчетАмортизации.Прочитать();
			
			ОперацииКУдалению = Новый Массив;
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				
				ПроводкиОперации = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				ПроводкиОперации.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
				ПроводкиОперации.Прочитать();
				
				ДополнитьПроводки(ОперацияАмортизация, ПроводкиОперацииАмортизация, ПроводкиОперации, ТолькоПроверка);
				
				ПроводкиОперации.Очистить();
				
				ЗаписиОперации = РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей();
				ЗаписиОперации.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
				ЗаписиОперации.Прочитать();
				
				ДополнитьНаборЗаписейРасчетАмортизации(ОперацияАмортизация, РасчетАмортизации, ЗаписиОперации, ТолькоПроверка);
				
				ЗаписиОперации.Очистить();
				
				ОперацияКУдалению = Новый Структура;
				ОперацияКУдалению.Вставить("Ссылка", ВыборкаПоДокументу.Ссылка);
				ОперацияКУдалению.Вставить("Проводки", ПроводкиОперации);
				ОперацияКУдалению.Вставить("РасчетАмортизации", ЗаписиОперации);
				
				ОперацииКУдалению.Добавить(ОперацияКУдалению);
				
				ШаблонСообщения = НСтр("ru = 'Выполнено объединение с операцией %1'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПоДокументу.Ссылка);
				Логировать(ТекстСообщения, ТолькоПроверка);
			КонецЦикла;
			
			Если ПроводкиОперацииАмортизация.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиОперацииАмортизация);
			КонецЕсли;
			
			Если РасчетАмортизации.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(РасчетАмортизации);
			КонецЕсли;
			
			Для каждого ОперацияКУдалению Из ОперацииКУдалению Цикл
				ОбъектОперации = ОперацияКУдалению.Ссылка.ПолучитьОбъект();
				ОбъектОперации.ПометкаУдаления = Истина;
				ОбъектОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОперацияКУдалению.Проводки);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОперацияКУдалению.РасчетАмортизации);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектОперации);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Не удалось объединить движения операций ""Амортизация и износ ОС"" за %1
				|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПоДокументу.Дата, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Логировать(ТекстСообщения, ТолькоПроверка);
		КонецПопытки;
		
	КонецЦикла;
	
	Логировать(НСтр("ru='Завершено.'"), ТолькоПроверка);
	
КонецФункции

&НаСервере
Функция ВосстановитьПроводкиПоАмортизации(ТолькоПроверка = Ложь, Организация = Неопределено)
	
	ОчиститьЛог();
	Логировать("---------------------------", ТолькоПроверка);
	Логировать(НСтр("ru='Восстановление проводок операции ""Амортизация и износ ОС"":'"), ТолькоПроверка);
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОперацииАмортизация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|			И (ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения)
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетАмортизации.Организация КАК Организация,
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.Период КАК Период,
	|	РасчетАмортизации.Объект КАК ОсновноеСредство,
	|	РасчетАмортизации.Объект.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.Регистратор В
	|			(ВЫБРАТЬ
	|				ОперацииАмортизация.Ссылка
	|			ИЗ
	|				ОперацииАмортизация)
	|	И ТИПЗНАЧЕНИЯ(РасчетАмортизации.Объект) = ТИП(Справочник.ОсновныеСредства)
	|ИТОГИ ПО
	|	Организация,
	|	Регистратор";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегламентнаяОперация.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	РезультатПроверки = Новый Массив;
	
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		РезультатПроверкиПоОрганизации = Новый Структура;
		РезультатПроверкиПоОрганизации.Вставить("Организация", ВыборкаПоОрганизации.Организация);
		РезультатПроверкиПоОрганизации.Вставить("Проводки", Новый Массив);
		РезультатПроверки.Добавить(РезультатПроверкиПоОрганизации);
		
		ВыборкаПоРегистратору = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			ОперацияАмортизация = ВыборкаПоРегистратору.Регистратор;
			
			Если Не ТолькоПроверка Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				Если Не ТолькоПроверка Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияАмортизация);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				ПроводкиОперацииАмортизация = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				ПроводкиОперацииАмортизация.Отбор.Регистратор.Установить(ОперацияАмортизация);
				ПроводкиОперацииАмортизация.Прочитать();
				
				ДвиженияАмортизация = Новый Структура;
				ДвиженияАмортизация.Вставить("Хозрасчетный", РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
				ДвиженияАмортизация.Вставить("РасчетАмортизации", РегистрыСведений.РасчетАмортизации.СоздатьНаборЗаписей());
				
				ВыборкаОС = ВыборкаПоРегистратору.Выбрать();
				ТаблицаОС = СформироватьТаблицуОС(ВыборкаОС, ОперацияАмортизация);
				
				Отказ = Ложь;
				
				СтруктураШапкиДокумента = Новый Структура;
				СтруктураШапкиДокумента.Вставить("Ссылка", ОперацияАмортизация);
				ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапкиДокумента, Отказ);
				
				Если Отказ Тогда
					Продолжить;
				КонецЕсли;
				
				// Проводки по начислению амортизации
				ПараметрыНачисленияАмортизации = УчетОС.ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС,
					ПараметрыПроведения.НачислениеАмортизацииОС, Отказ, Истина);
				
				УчетОС.СформироватьДвиженияНачислениеАмортизацииИАмортизационнойПремии(ПараметрыНачисленияАмортизации,
					ДвиженияАмортизация, Отказ);
				
				Если Отказ Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось сформировать проводки для восстановления по операции ""%1""
						|%2'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияАмортизация, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Логировать(ТекстСообщения);
				КонецЕсли;
				
				РезультатДобавления = ДополнитьПроводки(ОперацияАмортизация, ПроводкиОперацииАмортизация, ДвиженияАмортизация.Хозрасчетный, ТолькоПроверка);
				
				Для каждого Проводка Из РезультатДобавления Цикл
					РезультатПроверкиПоОрганизации.Проводки.Добавить(Проводка);
				КонецЦикла;
				
				Если ТолькоПроверка Тогда
					Продолжить;
				Иначе
					Если ПроводкиОперацииАмортизация.Модифицированность() Тогда
						// Проводки по непринимаемым расходам
						ДвиженияАмортизация.Хозрасчетный.ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(ПроводкиОперацииАмортизация);
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиОперацииАмортизация);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			Исключение
				Если Не ТолькоПроверка Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				ШаблонСообщения = НСтр("ru = 'Не удалось восстановить проводки операции ""%1""
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияАмортизация, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Логировать(ТекстСообщения, ТолькоПроверка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Логировать(НСтр("ru='Завершено.'"), ТолькоПроверка);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ВосстановитьПроводкиПоВыбытиюОС(ТолькоПроверка = Ложь, Организация = Неопределено)
	
	ОчиститьЛог();
	Логировать("---------------------------", ТолькоПроверка);
	Логировать(НСтр("ru='Восстановление проводок операции ""Перевод ОС в малоценное оборудование"":'"), ТолькоПроверка);
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация КАК Организация,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка КАК ДокументПереводВМЦ,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата КАК Период,
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство.ЕдиницаУчета КАК ЕдиницаУчета
	|ПОМЕСТИТЬ МалоценныеОС
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ПереводОСВМалоценноеОборудованиеОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = ПрименениеФСБУ6.Организация
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата, ДЕНЬ), СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения)
	|ГДЕ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Проведен
	|	И НЕ ПереводОСВМалоценноеОборудованиеОС.Ссылка.РучнаяКорректировка
	|	И ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОперацииПереводВМЦ
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|			И (ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения)
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииПереводВМЦ.Организация КАК Организация,
	|	ОперацииПереводВМЦ.Ссылка КАК ОперацияПереводВМЦ,
	|	МалоценныеОС.ДокументПереводВМЦ КАК ДокументПереводВМЦ,
	|	МалоценныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МалоценныеОС.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	ОперацииПереводВМЦ КАК ОперацииПереводВМЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ МалоценныеОС КАК МалоценныеОС
	|		ПО (МалоценныеОС.Организация = ОперацииПереводВМЦ.Организация)
	|ИТОГИ ПО
	|	Организация,
	|	ОперацияПереводВМЦ,
	|	ДокументПереводВМЦ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегламентнаяОперация.Организация = &Организация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	РезультатПроверки = Новый Массив;
	
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		РезультатПроверкиПоОрганизации = Новый Структура;
		РезультатПроверкиПоОрганизации.Вставить("Организация", ВыборкаПоОрганизации.Организация);
		РезультатПроверкиПоОрганизации.Вставить("Проводки", Новый Массив);
		РезультатПроверки.Добавить(РезультатПроверкиПоОрганизации);
		
		ВыборкаПоОперации = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОперации.Следующий() Цикл
			
			ОперацияПереводВМЦ = ВыборкаПоОперации.ОперацияПереводВМЦ;
			
			Если Не ТолькоПроверка Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				Если Не ТолькоПроверка Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияПереводВМЦ);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				ПроводкиОперацииПереводВМЦ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				ПроводкиОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦ);
				ПроводкиОперацииПереводВМЦ.Прочитать();
				
				ВыборкаПоДокументу = ВыборкаПоОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоДокументу.Следующий() Цикл
					
					Отказ = Ложь;
					
					ПараметрыПроведения = Документы.ПереводОСВМалоценноеОборудование.ПодготовитьПараметрыПроведения(ВыборкаПоДокументу.ДокументПереводВМЦ, Отказ);
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					ВыборкаОС = ВыборкаПоДокументу.Выбрать();
					ТаблицаОС = СформироватьТаблицуОС(ВыборкаОС, ОперацияПереводВМЦ);
					
					ДвиженияПереводВМЦ = Новый Структура;
					ДвиженияПереводВМЦ.Вставить("Хозрасчетный", РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
					
					// Проводки по выбытию ОС
					ПараметрыВыбытия = УчетОС.ПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ПараметрыПроведения.ВыбытиеОС, Отказ);
					
					УчетОС.СформироватьПроводкиВыбытиеОС(ПараметрыПроведения.ВыбытиеОС, ПараметрыВыбытия, ДвиженияПереводВМЦ, Отказ);
					
					ТаблицаСтоимости = УчетОС.ПодготовитьТаблицуОстаточнойСтоимости(ТаблицаОС, ПараметрыПроведения.ВыбытиеОС, ПараметрыВыбытия, Отказ);
					
					УчетОС.СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости,
						ПараметрыПроведения.ВыбытиеОС, ДвиженияПереводВМЦ, Отказ);
					
					Если Отказ Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось сформировать проводки для дополнения операции ""%1""
							|%3'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						Логировать(ТекстСообщения);
					КонецЕсли;
					
					РезультатДобавления = ДополнитьПроводки(ОперацияПереводВМЦ, ПроводкиОперацииПереводВМЦ, ДвиженияПереводВМЦ.Хозрасчетный, ТолькоПроверка);
					
					Для каждого Проводка Из РезультатДобавления Цикл
						РезультатПроверкиПоОрганизации.Проводки.Добавить(Проводка);
					КонецЦикла;
				КонецЦикла;
				
				Если ТолькоПроверка Тогда
					Продолжить;
				Иначе
					Если ПроводкиОперацииПереводВМЦ.Модифицированность() Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиОперацииПереводВМЦ);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			Исключение
				Если Не ТолькоПроверка Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				ШаблонСообщения = НСтр("ru = 'Не удалось восстановить проводки операции ""%1""
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Логировать(ТекстСообщения, ТолькоПроверка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Логировать(НСтр("ru='Завершено.'"), ТолькоПроверка);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция УдалитьИзбыточныеПроводкиОперацииПереводВМЦ(ТолькоПроверка = Ложь, Организация = Неопределено)
	
	ОчиститьЛог();
	Логировать("---------------------------", ТолькоПроверка);
	Логировать(НСтр("ru='Удаление избыточных проводок операции ""Перевод ОС в малоценное оборудование"":'"), ТолькоПроверка);
	
	ОбработкаЗавершена = Истина;
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОперацииПереводВМЦ
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И РегламентнаяОперация.Дата = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД)
	|	И ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	СостоянияОСОрганизаций.Регистратор КАК Регистратор,
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Регистратор В
	|			(ВЫБРАТЬ
	|				ОперацииПереводВМЦ.Ссылка
	|			ИЗ
	|				ОперацииПереводВМЦ)
	|ИТОГИ ПО
	|	Организация,
	|	Регистратор";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегламентнаяОперация.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	РезультатПроверки = Новый Массив;
	
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		РезультатПроверкиПоОрганизации = Новый Структура;
		РезультатПроверкиПоОрганизации.Вставить("Организация", ВыборкаПоОрганизации.Организация);
		РезультатПроверкиПоОрганизации.Вставить("Проводки", Новый Массив);
		РезультатПроверки.Добавить(РезультатПроверкиПоОрганизации);
		
		ВыборкаПоРегистратору = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			ОперацияПереводВМЦ = ВыборкаПоРегистратору.Регистратор;
			
			Если Не ТолькоПроверка Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				Если Не ТолькоПроверка Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияПереводВМЦ);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				ВыборкаОС = ВыборкаПоРегистратору.Выбрать();
				
				ИндексВалидныхОС = Новый Соответствие;
				Пока ВыборкаОС.Следующий() Цикл
					ИндексВалидныхОС[ВыборкаОС.ОсновноеСредство] = Истина;
				КонецЦикла;
				
				ПроводкиОперацииПереводВМЦ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				ПроводкиОперацииПереводВМЦ.Отбор.Регистратор.Установить(ОперацияПереводВМЦ);
				ПроводкиОперацииПереводВМЦ.Прочитать();
				
				ПроводкиКУдалению = Новый Массив;
				
				Для каждого Проводка Из ПроводкиОперацииПереводВМЦ Цикл
					ОсновноеСредство = ОсновноеСредствоПроводки(Проводка);
					
					Если ОсновноеСредство = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИндексВалидныхОС[ОсновноеСредство] = Неопределено Тогда
						ПроводкиКУдалению.Добавить(Проводка);
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ПроводкаКУдалению Из ПроводкиКУдалению Цикл
					РезультатПроверкиПоОрганизации.Проводки.Добавить(Проводка);
					
					ИндексПроводки = ПроводкиОперацииПереводВМЦ.Индекс(ПроводкаКУдалению);
					ПроводкиОперацииПереводВМЦ.Удалить(ИндексПроводки);
					
					ШаблонСообщения = НСтр("ru = 'Операция ""%1"": удалена проводка %2 Дт %3 Кт %4 по %5 на сумму %6'");
					НомерСтроки = ИндексПроводки + 1;
					ОсновноеСредство = ОсновноеСредствоПроводки(Проводка);
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, НомерСтроки,
						ПроводкаКУдалению.СчетДт, ПроводкаКУдалению.СчетКт, ОсновноеСредство, ПроводкаКУдалению.Сумма);
					Логировать(ТекстСообщения, ТолькоПроверка);
				КонецЦикла;
				
				Если ТолькоПроверка Тогда
					Продолжить;
				Иначе
					Если ПроводкиОперацииПереводВМЦ.Модифицированность() Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроводкиОперацииПереводВМЦ);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			Исключение
				Если Не ТолькоПроверка Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				ШаблонСообщения = НСтр("ru = 'Не удалось удалить избыточные проводки операции ""%1""
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Логировать(ТекстСообщения, ТолькоПроверка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Логировать(НСтр("ru='Завершено.'"), ТолькоПроверка);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьОтражениеВПрослеживаемости(ТолькоПроверка = Ложь, Организация = Неопределено)
	
	ОчиститьЛог();
	Логировать("---------------------------", ТолькоПроверка);
	Логировать(НСтр("ru='Отражение операции ""Перевод ОС в малоценное оборудование"" в прослеживаемости:'"), ТолькоПроверка);
	
	ОбработкаЗавершена = Истина;
	
	ОбрабатываемыеВидыСостоянийРегламентнойОперации = Новый Массив;
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ОбрабатываемыеВидыСостоянийРегламентнойОперации.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполняется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеВидыСостоянийРегламентнойОперации", ОбрабатываемыеВидыСостоянийРегламентнойОперации);
	Запрос.УстановитьПараметр("ДатаНачалаДосрочногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоДосрочногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("ДатаНачалаОбязательногоПримененияФСБУ6", БухгалтерскийУчетКлиентСервер.НачалоОбязательногоПримененияФСБУ6());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПервогоПримененияФСБУ.ПрименятьФСБУ6Досрочно, ЛОЖЬ)
	|			ТОГДА &ДатаНачалаДосрочногоПримененияФСБУ6
	|		ИНАЧЕ &ДатаНачалаОбязательногоПримененияФСБУ6
	|	КОНЕЦ КАК ДатаНачалаПрименения
	|ПОМЕСТИТЬ ПрименениеФСБУ6
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПервогоПримененияФСБУ КАК НастройкиПервогоПримененияФСБУ
	|		ПО (НастройкиПервогоПримененияФСБУ.Организация = Организации.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация КАК Организация,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка КАК ДокументПереводВМЦ,
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата КАК Период,
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереводОСВМалоценноеОборудованиеОС.ОсновноеСредство.ЕдиницаУчета КАК ЕдиницаУчета
	|ПОМЕСТИТЬ МалоценныеОС
	|ИЗ
	|	Документ.ПереводОСВМалоценноеОборудование.ОС КАК ПереводОСВМалоценноеОборудованиеОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = ПрименениеФСБУ6.Организация
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПереводОСВМалоценноеОборудованиеОС.Ссылка.Дата, ДЕНЬ), СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения)
	|ГДЕ
	|	ПереводОСВМалоценноеОборудованиеОС.Ссылка.Проведен
	|	И НЕ ПереводОСВМалоценноеОборудованиеОС.Ссылка.РучнаяКорректировка
	|	И ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = &Организация
	|	И ПереводОСВМалоценноеОборудованиеОС.ПрослеживаемоеОС = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОперацииПереводВМЦ
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрименениеФСБУ6 КАК ПрименениеФСБУ6
	|		ПО РегламентнаяОперация.Организация = ПрименениеФСБУ6.Организация
	|			И (ДОБАВИТЬКДАТЕ(РегламентнаяОперация.Дата, СЕКУНДА, 1) = ПрименениеФСБУ6.ДатаНачалаПрименения)
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереводОСВМалоценноеОборудование)
	|	И РегламентнаяОперация.Состояние В(&ОбрабатываемыеВидыСостоянийРегламентнойОперации)
	|	И НЕ РегламентнаяОперация.РучнаяКорректировка
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииПереводВМЦ.Организация КАК Организация,
	|	ОперацииПереводВМЦ.Ссылка КАК ОперацияПереводВМЦ,
	|	МалоценныеОС.ДокументПереводВМЦ КАК ДокументПереводВМЦ,
	|	МалоценныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МалоценныеОС.ЕдиницаУчета КАК ЕдиницаУчета
	|ИЗ
	|	ОперацииПереводВМЦ КАК ОперацииПереводВМЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ МалоценныеОС КАК МалоценныеОС
	|		ПО (МалоценныеОС.Организация = ОперацииПереводВМЦ.Организация)
	|ИТОГИ ПО
	|	Организация,
	|	ОперацияПереводВМЦ,
	|	ДокументПереводВМЦ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегламентнаяОперация.Организация = &Организация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПереводОСВМалоценноеОборудованиеОС.Ссылка.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	РезультатПроверки = Новый Массив;
	
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		РезультатПроверкиПоОрганизации = Новый Структура;
		РезультатПроверкиПоОрганизации.Вставить("Организация", ВыборкаПоОрганизации.Организация);
		РезультатПроверкиПоОрганизации.Вставить("Проводки", Новый Массив);
		РезультатПроверки.Добавить(РезультатПроверкиПоОрганизации);
		
		ВыборкаПоОперации = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОперации.Следующий() Цикл
			
			ОперацияПереводВМЦ = ВыборкаПоОперации.ОперацияПереводВМЦ;
			
			Если Не ТолькоПроверка Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				Если Не ТолькоПроверка Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияПереводВМЦ);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				ДвиженияПрослеживаемыеОС = РегистрыНакопления.ПрослеживаемыеОсновныеСредства.СоздатьНаборЗаписей();
				ДвиженияПрослеживаемыеОС.Отбор.Регистратор.Установить(ОперацияПереводВМЦ);
				ДвиженияПрослеживаемыеОС.Прочитать();
				Если Не ТолькоПроверка Тогда
					ДвиженияПрослеживаемыеТовары = РегистрыНакопления.ПрослеживаемыеТовары.СоздатьНаборЗаписей();
					ДвиженияПрослеживаемыеТовары.Отбор.Регистратор.Установить(ОперацияПереводВМЦ);
					ДвиженияПрослеживаемыеТовары.Прочитать();
				КонецЕсли;
				
				ВыборкаПоДокументу = ВыборкаПоОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
				Пока ВыборкаПоДокументу.Следующий() Цикл
					
					Отказ = Ложь;
					
					Если ВыборкаПоДокументу.ДокументПереводВМЦ = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ПараметрыПроведения = Документы.ПереводОСВМалоценноеОборудование.ПодготовитьПараметрыПроведения(ВыборкаПоДокументу.ДокументПереводВМЦ, Отказ);
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
									
					ДвиженияПереводВМЦ = Новый Структура;
					ДвиженияПереводВМЦ.Вставить("ПрослеживаемыеОсновныеСредства", РегистрыНакопления.ПрослеживаемыеОсновныеСредства.СоздатьНаборЗаписей());
					ДвиженияПереводВМЦ.Вставить("ПрослеживаемыеТовары", РегистрыНакопления.ПрослеживаемыеТовары.СоздатьНаборЗаписей());
					
					// Учет в прослеживаемости
					ПрослеживаемостьБП.СформироватьДвиженияСписанияОС(
						ПараметрыПроведения.ПрослеживаемыеОС,
						Неопределено,
						ПараметрыПроведения.РеквизитыМалоценноеОборудование,
						ДвиженияПереводВМЦ);
					
					ПрослеживаемостьБП.СформироватьДвиженияПоступлениеТоваров(
						ПараметрыПроведения.ПрослеживаемыеТовары,
						Неопределено,
						Неопределено,
						ПараметрыПроведения.РеквизитыМалоценноеОборудование,
						ДвиженияПереводВМЦ);
					
					Если Отказ Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось сформировать проводки для отражения в прослеживаемости операции ""%1""
							|%3'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						Логировать(ТекстСообщения);
					КонецЕсли;
					
					РезультатДобавления = ДополнитьПроводкиПопрослеживаемости(ОперацияПереводВМЦ, ДвиженияПрослеживаемыеОС,
						ДвиженияПереводВМЦ.ПрослеживаемыеОсновныеСредства, ТолькоПроверка);
					
					Для каждого Проводка Из РезультатДобавления Цикл
						РезультатПроверкиПоОрганизации.Проводки.Добавить(Проводка);
					КонецЦикла;
					
					Если Не ТолькоПроверка Тогда
						ПроводкиПоПрослеживаемымТоварам = ДополнитьПроводкиПопрослеживаемости(ОперацияПереводВМЦ, ДвиженияПрослеживаемыеТовары,
							ДвиженияПереводВМЦ.ПрослеживаемыеТовары, ТолькоПроверка, Ложь);
					КонецЕсли;
				
				КонецЦикла;
				
				Если ТолькоПроверка Тогда
					Продолжить;
				Иначе
					Если ДвиженияПрослеживаемыеОС.Модифицированность() Тогда
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДвиженияПрослеживаемыеОС);
						
					КонецЕсли;
					
					Если ДвиженияПрослеживаемыеТовары.Модифицированность() Тогда
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДвиженияПрослеживаемыеТовары);
						
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			Исключение
				Если Не ТолькоПроверка Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				ШаблонСообщения = НСтр("ru = 'Не удалось сформировать проводки для отражения в прослеживаемости операции ""%1""
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОперацияПереводВМЦ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Логировать(ТекстСообщения, ТолькоПроверка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Логировать(НСтр("ru='Завершено.'"), ТолькоПроверка);
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция КлючПроводки(Проводка)
	
	ЭлементыКлюча = Новый Массив;
	
	Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
		ЭлементыКлюча.Добавить("ПодразделениеДт");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.ПодразделениеДт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
		ЭлементыКлюча.Добавить("ПодразделениеКт");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.ПодразделениеКт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		ЭлементыКлюча.Добавить("СчетДт");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.СчетДт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		ЭлементыКлюча.Добавить("СчетКт");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.СчетКт));
	КонецЕсли;
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	Для ИндексСубконто = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчетаДт["ВидСубконто" + ИндексСубконто];
		ЗначениеСубконто = Проводка.СубконтоДт[ВидСубконто];
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			ЭлементыКлюча.Добавить(XMLСтрока(ВидСубконто));
			ЭлементыКлюча.Добавить(XMLСтрока(ЗначениеСубконто));
		КонецЕсли;
	КонецЦикла;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Для ИндексСубконто = 1 По СвойстваСчетаКт.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчетаКт["ВидСубконто" + ИндексСубконто];
		ЗначениеСубконто = Проводка.СубконтоКт[ВидСубконто];
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			ЭлементыКлюча.Добавить(XMLСтрока(ВидСубконто));
			ЭлементыКлюча.Добавить(XMLСтрока(ЗначениеСубконто));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыКлюча, "");
	
КонецФункции

&НаСервере
Функция КлючИзмерений(Запись, Измерения)
	
	ЭлементыКлюча = Новый Массив;
	
	Для каждого ИмяИзмерения Из СтрРазделить(Измерения, ",") Цикл
		ЗначениеИзмерения = Запись[СокрЛП(ИмяИзмерения)];
		Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
			ЭлементыКлюча.Добавить(ИмяИзмерения);
			ЭлементыКлюча.Добавить(XMLСтрока(ЗначениеИзмерения));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыКлюча, "");
	
КонецФункции

&НаСервере
Функция ДополнитьПроводки(Операция, Приемник, Источник, ТолькоПроверка)
	
	РезультатДобавления = Новый Массив;
	
	ИндексПроводок = Новый Соответствие;
	Для каждого ПроводкаПриемника Из Приемник Цикл
		Если ПроводкаПриемника.Сумма = 0
			И ПроводкаПриемника.СуммаНУДт = 0
			И ПроводкаПриемника.СуммаНУКт = 0
			И ПроводкаПриемника.СуммаВРДт = 0
			И ПроводкаПриемника.СуммаВРКт = 0
			И ПроводкаПриемника.СуммаПРДт = 0
			И ПроводкаПриемника.СуммаПРКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ключ = КлючПроводки(ПроводкаПриемника);
		ИндексПроводок[Ключ] = Истина;
	КонецЦикла;
	
	Для каждого ПроводкаИсточника Из Источник Цикл
		
		Ключ = КлючПроводки(ПроводкаИсточника);
		
		Если ИндексПроводок[Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, ПроводкаИсточника);
		НоваяПроводка.Период = КонецДня(ПроводкаИсточника.Период);
		Для каждого СубконтоДт Из ПроводкаИсточника.СубконтоДт Цикл
			НоваяПроводка.СубконтоДт.Вставить(СубконтоДт.Ключ, СубконтоДт.Значение);
		КонецЦикла;
		Для каждого СубконтоКт Из ПроводкаИсточника.СубконтоКт Цикл
			НоваяПроводка.СубконтоКт.Вставить(СубконтоКт.Ключ, СубконтоКт.Значение);
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Операция ""%1"": добавлена проводка %2 Дт %3 Кт %4 по %5 на сумму %6'");
		НомерСтроки = Приемник.Индекс(НоваяПроводка) + 1;
		ОсновноеСредство = ПроводкаИсточника.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства];
		Если ОсновноеСредство = Неопределено Тогда
			ОсновноеСредство = ПроводкаИсточника.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства];
		КонецЕсли;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Операция, НомерСтроки,
			ПроводкаИсточника.СчетДт, ПроводкаИсточника.СчетКт, ОсновноеСредство, ПроводкаИсточника.Сумма);
		Логировать(ТекстСообщения, ТолькоПроверка);
		
		РезультатДобавления.Добавить(НоваяПроводка);
		
	КонецЦикла;
	
	Возврат РезультатДобавления;
	
КонецФункции

&НаСервере
Функция КлючПроводкиПрослеживаемость(Проводка, КлючПоРегиструПрослеживаемыеОС)
	
	ЭлементыКлюча = Новый Массив;
	
	Если КлючПоРегиструПрослеживаемыеОС Тогда 
		Если ЗначениеЗаполнено(Проводка.ОсновноеСредство) Тогда
			ЭлементыКлюча.Добавить("ОсновноеСредство");
			ЭлементыКлюча.Добавить(XMLСтрока(Проводка.ОсновноеСредство));
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(Проводка.Номенклатура) Тогда
			ЭлементыКлюча.Добавить("Номенклатура");
			ЭлементыКлюча.Добавить(XMLСтрока(Проводка.Номенклатура));
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Проводка.СтранаПроисхождения) Тогда
		ЭлементыКлюча.Добавить("СтранаПроисхождения");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.СтранаПроисхождения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.РНПТ) Тогда
		ЭлементыКлюча.Добавить("РНПТ");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.РНПТ));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.Комплектующие) Тогда
		ЭлементыКлюча.Добавить("Комплектующие");
		ЭлементыКлюча.Добавить(XMLСтрока(Проводка.Комплектующие));
	КонецЕсли;
	
	Возврат СтрСоединить(ЭлементыКлюча, "");
	
КонецФункции

&НаСервере
Функция ДополнитьПроводкиПоПрослеживаемости(Операция, Приемник, Источник, ТолькоПроверка, ДополнениеПоРегиструПрослеживаемыеОС = Истина)
	
	РезультатДобавления = Новый Массив;
	
	ИндексПроводок = Новый Соответствие;
	Для каждого ПроводкаПриемника Из Приемник Цикл
		Если ПроводкаПриемника.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ключ = КлючПроводкиПрослеживаемость(ПроводкаПриемника, ДополнениеПоРегиструПрослеживаемыеОС);
		ИндексПроводок[Ключ] = Истина;
	КонецЦикла;
	
	Для каждого ПроводкаИсточника Из Источник Цикл
		
		Ключ = КлючПроводкиПрослеживаемость(ПроводкаИсточника, ДополнениеПоРегиструПрослеживаемыеОС);
		
		Если ИндексПроводок[Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, ПроводкаИсточника);
		НоваяПроводка.Период = КонецДня(ПроводкаИсточника.Период);
		
		Если ДополнениеПоРегиструПрослеживаемыеОС Тогда
			ШаблонСообщения = НСтр("ru = 'Операция ""%1"": добавлено отражение по основному средству ""%2""'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Операция, ПроводкаИсточника.ОсновноеСредство);
			Логировать(ТекстСообщения, ТолькоПроверка);
		КонецЕсли;
		
		РезультатДобавления.Добавить(НоваяПроводка);
		
	КонецЦикла;
	
	Возврат РезультатДобавления;
	
КонецФункции

&НаСервере
Функция ДополнитьНаборЗаписейРасчетАмортизации(Операция, НаборЗаписейПриемник, НаборЗаписейИсточник, ТолькоПроверка)
	
	МассивИзмерений = Новый Массив;
	Для каждого Измерение Из Метаданные.РегистрыСведений.РасчетАмортизации.Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	ИзмеренияРасчетАмортизации = СтрСоединить(МассивИзмерений, ",");
	
	ИндексЗаписейРасчетАмортизации = Новый Соответствие;
	Для каждого ЗаписьПриемника Из НаборЗаписейПриемник Цикл
		Ключ = КлючИзмерений(ЗаписьПриемника, ИзмеренияРасчетАмортизации);
		ИндексЗаписейРасчетАмортизации[Ключ] = Истина;
	КонецЦикла;
	
	Для каждого ЗаписьИсточника Из НаборЗаписейИсточник Цикл
		
		Ключ = КлючИзмерений(ЗаписьИсточника, ИзмеренияРасчетАмортизации);
		
		Если ИндексЗаписейРасчетАмортизации[Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьИсточника);
		НоваяЗапись.Период = КонецДня(ЗаписьИсточника.Период);
		
		ШаблонСообщения = НСтр("ru = 'Операция ""%1"": добавлена запись %2 в регистр ""Расчет амортизации"" по %3 на сумму %4'");
		НомерСтроки = НаборЗаписейПриемник.Индекс(НоваяЗапись) + 1;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Операция, НомерСтроки, НоваяЗапись.Объект, НоваяЗапись.СуммаАмортизацииБУ);
		Логировать(ТекстСообщения, ТолькоПроверка);
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОС(ВыборкаОС, Регистратор)
	
	ТаблицаОС = Новый ТаблицаЗначений;
	ТаблицаОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаОС.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаОС.Колонки.Добавить("ЕдиницаУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыУчетаОС"));
	ТаблицаОС.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.ПереводОСВМалоценноеОборудование"));
	ТаблицаОС.Колонки.Добавить("Арендованное", Новый ОписаниеТипов("Булево"));
	ТаблицаОС.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаОС.Колонки.Добавить("СчетСписания", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОС.Колонки.Добавить("СубконтоНУ", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаОС.Колонки.Добавить("СчетСписанияНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	НомерСтроки = 0;
	
	Пока ВыборкаОС.Следующий() Цикл
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока = ТаблицаОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.ЕдиницаУчета = ВыборкаОС.ЕдиницаУчета;
		НоваяСтрока.Регистратор = Регистратор;
		НоваяСтрока.СчетСписания = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		НоваяСтрока.СчетСписанияНУ = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	КонецЦикла;
	
	Возврат ТаблицаОС;
	
КонецФункции

&НаСервере
Функция ОсновноеСредствоПроводки(Проводка)
	
	ОсновноеСредство = Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства];
	Если ОсновноеСредство = Неопределено Тогда
		ОсновноеСредство = Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства]
	КонецЕсли;
	
	Возврат ОсновноеСредство;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОперацияПереводОСВМалоценоеОборудование(Ссылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Номер КАК Номер,
	|	"""" КАК ИмяСписка,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка) КАК СобытиеОС,
	|	""Перевод ОС в малоценное оборудование"" КАК Содержание,
	|	ЛОЖЬ КАК СписыватьТолькоЛинейныйНУ
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";	
	ПараметрыПроведения.Вставить("ПереводОСВМалоценноеОборудование", Запрос.Выполнить().Выгрузить());
	
	Возврат ПараметрыПроведения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура Логировать(Сообщение, НеВыводитьСообщение = Ложь)
	
	Если НеВыводитьСообщение Тогда
		Возврат;
	КонецЕсли;
	
	Лог = Лог + ?(ПустаяСтрока(Лог), "", Символы.ПС) + Сообщение;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЛог()
	
	Лог = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛог()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Лог);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Результат выполнения'"));
	ОткрытьФорму("ОбщаяФорма.ФормаСообщение", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеАналитики(Подразделение, Субконто)
	
	МассивАналитики = Новый Массив;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		МассивАналитики.Добавить(Подразделение);
	КонецЕсли;
	
	Для каждого Элемент Из Субконто Цикл
		МассивАналитики.Добавить(Элемент.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивАналитики, Символы.ПС);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОтветаОбъединитьДвижения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОбъединитьНесколькоОперацийАмортизацияВОднуНаСервере(ДополнительныеПараметры.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		ПоказатьЛог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаСоздатьОтсутствующиеПроводкиПоАмортизации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ВосстановитьПроводкиПоАмортизацииНаСервере(ДополнительныеПараметры.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		ПоказатьЛог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаСоздатьОтсутствующиеПроводкиПоВыбытию(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ВосстановитьПроводкиПоВыбытиюОСНаСервере(ДополнительныеПараметры.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		ПоказатьЛог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаУдалитьИзбыточныеПроводкиПоВыбытию(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		УдалитьИзбыточныеПроводкиОперацииПереводВМЦНаСервере(ДополнительныеПараметры.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		ПоказатьЛог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОтразитьВПрослеживаемости(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПроверитьОтражениеВПрослеживаемостиНаСервере(ДополнительныеПараметры.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		ПоказатьЛог();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъединитьНесколькоОперацийАмортизацияВОднуНаСервере(Организация)
	
	ОбъединитьНесколькоОперацийАмортизацияВОдну(Ложь, Организация);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПроводкиПоАмортизацииНаСервере(Организация)
	
	ВосстановитьПроводкиПоАмортизации(Ложь, Организация);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПроводкиПоВыбытиюОСНаСервере(Организция)
	
	ВосстановитьПроводкиПоВыбытиюОС(Ложь, Организация);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзбыточныеПроводкиОперацииПереводВМЦНаСервере(Организация)
	
	УдалитьИзбыточныеПроводкиОперацииПереводВМЦ(Ложь, Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтражениеВПрослеживаемостиНаСервере(Организация)
	
	ПроверитьОтражениеВПрослеживаемости(Ложь, Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КорректнаяВерсия(Знач МинимальнаяВерсия)
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Метаданные.Версия, МинимальнаяВерсия) >= 0;
	
КонецФункции

#КонецОбласти
