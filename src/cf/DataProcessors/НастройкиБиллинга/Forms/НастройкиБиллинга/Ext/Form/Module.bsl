#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УведомлятьПокупателяПоЭлектроннойПочте = ОплатаСервисаЭлектроннаяПочтаБП.УведомлятьПокупателяПоЭлектроннойПочте();
	УведомлятьПродавцаПоЭлектроннойПочте = ОплатаСервисаЭлектроннаяПочтаБП.УведомлятьПродавцаПоЭлектроннойПочте();
	АдресЭлектроннойПочтыДляУведомлений = ОплатаСервисаЭлектроннаяПочтаБП.АдресЭлектроннойПочтыДляУведомлений();
	
	Организация = ОплатаСервисаБП.Организация();
	
	ИспользоватьПлатежнуюСистемуЮKassa = ОплатаСервисаПлатежнаяСистемаЮKassaБП.ИспользоватьПлатежнуюСистемуЮKassa();
	ИдентификаторМагазинаЮKassa = ОплатаСервисаПлатежнаяСистемаЮKassaБП.ИдентификаторМагазинаЮKassa();
	СекретныйКлючЮKassa = ОплатаСервисаПлатежнаяСистемаЮKassaБП.СекретныйКлючЮKassa();
	URLДляПриемаОповещенийЮKassa = ОплатаСервисаПлатежнаяСистемаЮKassaБП.URLДляПриемаОповещенийЮKassa();
	
	ШаблонПисьмаВыставленСчет = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаВыставленСчет();
	ШаблонПисьмаПолученаОплата = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаПолученаОплата();
	ШаблонПисьмаОформленаПодписка = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаОформленаПодписка();
	ШаблонПисьмаОшибка = ОплатаСервисаЭлектроннаяПочтаБП.ШаблонПисьмаОшибка();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.НастройкиБиллинга.Форма.РедакторШаблонаПисьма" Тогда
		Если ВыбранноеЗначение.ИмяШаблона = "ШаблонПисьмаВыставленСчет" Тогда
			ШаблонПисьмаВыставленСчет = ВыбранноеЗначение.Шаблон;
			УстановитьШаблонПисьмаВыставленСчет(ШаблонПисьмаВыставленСчет);
		КонецЕсли;
		
		Если ВыбранноеЗначение.ИмяШаблона = "ШаблонПисьмаПолученаОплата" Тогда
			ШаблонПисьмаПолученаОплата = ВыбранноеЗначение.Шаблон;
			УстановитьШаблонПисьмаПолученаОплата(ШаблонПисьмаПолученаОплата);
		КонецЕсли;
		
		Если ВыбранноеЗначение.ИмяШаблона = "ШаблонПисьмаОформленаПодписка"Тогда
			ШаблонПисьмаОформленаПодписка = ВыбранноеЗначение.Шаблон;
			УстановитьШаблонПисьмаОформленаПодписка(ШаблонПисьмаОформленаПодписка);
		КонецЕсли;
		
		Если ВыбранноеЗначение.ИмяШаблона = "ШаблонПисьмаОшибка" Тогда
			ШаблонПисьмаОшибка = ВыбранноеЗначение.Шаблон;
			УстановитьШаблонПисьмаОшибка(ШаблонПисьмаОшибка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ШаблонПисьмаВыставленСчет(Команда)
	
	ДоступныеПеременные = Новый СписокЗначений;
	ДоступныеПеременные.Добавить("[ТелефонОрганизации]");
	ДоступныеПеременные.Добавить("[ПочтаОрганизации]");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяШаблона", "ШаблонПисьмаВыставленСчет");
	ПараметрыФормы.Вставить("Шаблон", ШаблонПисьмаВыставленСчет);
	ПараметрыФормы.Вставить("ДоступныеПеременные", ДоступныеПеременные);
	
	ОткрытьФорму("Обработка.НастройкиБиллинга.Форма.РедакторШаблонаПисьма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПисьмаОформленаПодписка(Команда)
	
	ДоступныеПеременные = Новый СписокЗначений;
	ДоступныеПеременные.Добавить("[Тариф]");
	ДоступныеПеременные.Добавить("[ТелефонОрганизации]");
	ДоступныеПеременные.Добавить("[ПочтаОрганизации]");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяШаблона", "ШаблонПисьмаОформленаПодписка");
	ПараметрыФормы.Вставить("Шаблон", ШаблонПисьмаОформленаПодписка);
	ПараметрыФормы.Вставить("ДоступныеПеременные", ДоступныеПеременные);
	
	ОткрытьФорму("Обработка.НастройкиБиллинга.Форма.РедакторШаблонаПисьма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПисьмаПолученаОплата(Команда)
	
	ДоступныеПеременные = Новый СписокЗначений;
	ДоступныеПеременные.Добавить("[ТелефонОрганизации]");
	ДоступныеПеременные.Добавить("[ПочтаОрганизации]");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяШаблона", "ШаблонПисьмаПолученаОплата");
	ПараметрыФормы.Вставить("Шаблон", ШаблонПисьмаПолученаОплата);
	ПараметрыФормы.Вставить("ДоступныеПеременные", ДоступныеПеременные);
	
	ОткрытьФорму("Обработка.НастройкиБиллинга.Форма.РедакторШаблонаПисьма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПисьмаОшибка(Команда)
	
	ДоступныеПеременные = Новый СписокЗначений;
	ДоступныеПеременные.Добавить("[ТелефонОрганизации]");
	ДоступныеПеременные.Добавить("[ПочтаОрганизации]");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяШаблона", "ШаблонПисьмаОшибка");
	ПараметрыФормы.Вставить("Шаблон", ШаблонПисьмаОшибка);
	ПараметрыФормы.Вставить("ДоступныеПеременные", ДоступныеПеременные);
	
	ОткрытьФорму("Обработка.НастройкиБиллинга.Форма.РедакторШаблонаПисьма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УведомлятьПокупателяПоЭлектроннойПочтеПриИзменении(Элемент)
	
	УстановитьУведомлятьПокупателяПоЭлектроннойПочте(УведомлятьПокупателяПоЭлектроннойПочте);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьПродавцаПоЭлектроннойПочтеПриИзменении(Элемент)
	
	УстановитьУведомлятьПродавцаПоЭлектроннойПочте(УведомлятьПродавцаПоЭлектроннойПочте);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыДляУведомленийПриИзменении(Элемент)
	
	УстановитьАдресЭлектроннойПочтыДляУведомлений(АдресЭлектроннойПочтыДляУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОрганизацию(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлатежнуюСистемуЮKassaПриИзменении(Элемент)
	
	ОперацияВыполнена = Истина;
	
	Если ИспользоватьПлатежнуюСистемуЮKassa
		И НЕ ИспользуетсяСлужебныйПользователь() Тогда
		ОперацияВыполнена = СоздатьИлиУстановитьПравоДоступаСлужебногоПользователя(ИспользоватьПлатежнуюСистемуЮKassa);
		Если НЕ ОперацияВыполнена Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать служебного пользователя.
				|Подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		ИспользоватьПлатежнуюСистемуЮKassa = НЕ ИспользоватьПлатежнуюСистемуЮKassa;
	КонецЕсли;
	
	УстановитьПризнакИспользованияПлатежнойСистемыЮKassa(ИспользоватьПлатежнуюСистемуЮKassa);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторМагазинаЮKassaПриИзменении(Элемент)
	
	УстановитьИдентификаторМагазинаЮKassa(ИдентификаторМагазинаЮKassa);
	
КонецПроцедуры

&НаКлиенте
Процедура СекретныйКлючЮKassaПриИзменении(Элемент)
	
	УстановитьСекретныйКлючЮKassa(СекретныйКлючЮKassa);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ГруппаШаблоныПисемПокупателю.ТолькоПросмотр = НЕ Форма.УведомлятьПокупателяПоЭлектроннойПочте;
	
	Форма.Элементы.АдресЭлектроннойПочтыДляУведомлений.ТолькоПросмотр = НЕ Форма.УведомлятьПродавцаПоЭлектроннойПочте;
	
	Форма.Элементы.ИдентификаторМагазинаЮKassa.ТолькоПросмотр = НЕ Форма.ИспользоватьПлатежнуюСистемуЮKassa;
	Форма.Элементы.СекретныйКлючЮKassa.ТолькоПросмотр = НЕ Форма.ИспользоватьПлатежнуюСистемуЮKassa;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУведомлятьПокупателяПоЭлектроннойПочте(ОтправлятьУведомленияПоЭлектроннойПочте)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьУведомлятьПокупателяПоЭлектроннойПочте(ОтправлятьУведомленияПоЭлектроннойПочте);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУведомлятьПродавцаПоЭлектроннойПочте(ОтправлятьУведомленияПоЭлектроннойПочте)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьУведомлятьПродавцаПоЭлектроннойПочте(ОтправлятьУведомленияПоЭлектроннойПочте);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресЭлектроннойПочтыДляУведомлений(АдресЭлектроннойПочтыДляУведомлений)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьАдресЭлектроннойПочтыДляУведомлений(АдресЭлектроннойПочтыДляУведомлений);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОрганизацию(Организация)
	
	ОплатаСервисаБП.УстановитьОрганизацию(Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИспользованияПлатежнойСистемыЮKassa(ИспользоватьПлатежнуюСистемуЮKassa)
	
	ОплатаСервисаПлатежнаяСистемаЮKassaБП.УстановитьПризнакИспользованияПлатежнойСистемыЮKassa(ИспользоватьПлатежнуюСистемуЮKassa);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторМагазинаЮKassa(ИдентификаторМагазинаЮKassa)
	
	ОплатаСервисаПлатежнаяСистемаЮKassaБП.УстановитьИдентификаторМагазинаЮKassa(ИдентификаторМагазинаЮKassa);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСекретныйКлючЮKassa(СекретныйКлючЮKassa)
	
	ОплатаСервисаПлатежнаяСистемаЮKassaБП.УстановитьСекретныйКлючЮKassa(СекретныйКлючЮKassa);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПисьмаВыставленСчет(ШаблонПисьмаВыставленСчет)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьШаблонПисьмаВыставленСчет(ШаблонПисьмаВыставленСчет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПисьмаПолученаОплата(ШаблонПисьмаПолученаОплата)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьШаблонПисьмаПолученаОплата(ШаблонПисьмаПолученаОплата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПисьмаОформленаПодписка(ШаблонПисьмаОформленаПодписка)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьШаблонПисьмаОформленаПодписка(ШаблонПисьмаОформленаПодписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПисьмаОшибка(ШаблонПисьмаОшибка)
	
	ОплатаСервисаЭлектроннаяПочтаБП.УстановитьШаблонПисьмаОшибка(ШаблонПисьмаОшибка);
	
КонецПроцедуры

#Область ОповещенияОплатежах

&НаСервереБезКонтекста
Функция СоздатьИлиУстановитьПравоДоступаСлужебногоПользователя(Знач ИспользоватьОповещенияОПлатежах)
	
	СлужебныйПользовательСуществует = СоздатьСлужебногоПользователя();
	
	УстановленоПравоДоступа = Ложь;
	Если СлужебныйПользовательСуществует Тогда
		УстановленоПравоДоступа = УстановитьПравоДоступаВПриложениеСлужебногоПользователя(ИспользоватьОповещенияОПлатежах);
	КонецЕсли;
	
	ОперацияВыполнена = СлужебныйПользовательСуществует И УстановленоПравоДоступа;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяСлужебныйПользователь()
	
	Логин = СлужебныйПользовательЛогин();
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователя = Пользователи.СвойстваПользователяИБ(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СвойстваПользователя = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Результат = СвойстваПользователя.АутентификацияСтандартная;
	КонецЕсли;
	
	Возврат ?(Результат, 1, 0);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьСлужебногоПользователя()
	
	Логин = СлужебныйПользовательЛогин();
	Пароль = СлужебныйПользовательПароль();
	
	ПолноеИмя = НСтр("ru='Служебный пользователь расширения ""Биллинг""'");
	
	Возврат СоздатьПользователяСАтрибутомСлужебный(Логин, Пароль, ПолноеИмя);
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПравоДоступаВПриложениеСлужебногоПользователя(Знач ПравоДоступаВПриложение)
	
	Логин = СлужебныйПользовательЛогин();
	Пароль = СлужебныйПользовательПароль();
	
	Возврат УстановитьПравоДоступаВПриложение(Логин, Пароль, ПравоДоступаВПриложение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СлужебныйПользовательЛогин() Экспорт
	
	Возврат "BillingServiceUser";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СлужебныйПользовательПароль() Экспорт
	
	Возврат "65ee8cd2-f9a5-4df5-9ad3-1d7b8431f48f";
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПользователяСАтрибутомСлужебный(Знач Логин, Знач Пароль, Знач ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяСобытияДляЖурналаРегистрации = "Биллинг.СозданиеСлужебногоПользователя";
	
	Попытка
		
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = ПолноеИмя;
			ОписаниеПользователяИБ.АутентификацияСтандартная = Ложь;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.БиллингРольИспользованиеHTTPСервисаPayment.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.Пользователи,
			ПользовательИзСправочника
		);
		
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПравоДоступаВПриложение(Знач Логин, Знач Пароль, Знач ПравоДоступаВПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", ПравоДоступаВПриложение);
	
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	ИмяСобытияДляЖурналаРегистрации = "Биллинг.ИзменениеДоступаСлужебногоПользователя";
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		Пользователи.УстановитьСвойстваПользователяИБ(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
			ОбновляемыеСвойства,
			Ложь,
			Ложь
		);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.Пользователи,
			ПользовательИзСправочника
		);
		
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
