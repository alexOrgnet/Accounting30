
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПодборОС", "");
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ИсторияПоискаОС") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.ИсторияПоискаОС);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(Параметры.АдресОСВХранилище) Тогда
		ОС = ПолучитьИзВременногоХранилища(Параметры.АдресОСВХранилище);
		Объект.Корзина.Загрузить(ОС);
	КонецЕсли;
	
	Контрагент = Параметры.Контрагент;
	
	СформироватьИнформационнуюНадпись(ЭтаФорма);

	ТекущаяГруппаОС = Справочники.ОсновныеСредства.ПустаяСсылка();
	
	ПоказатьОстатки = (Параметры.Свойство("ПоказатьОстатки") И Параметры.ПоказатьОстатки);
	НастроитьСписокПоказатьОстатки(Параметры);
	
	ПоказатьПервоначальнуюСтоимость = (Параметры.Свойство("ПоказатьПервоначальнуюСтоимость") И Параметры.ПоказатьПервоначальнуюСтоимость);
	НастроитьСписокПоказатьОстаточнуюСтоимость(Параметры);
	
	ПоказыватьГрупповыеОС = Параметры.ПоказыватьГрупповыеОС;
	НастроитьСписокПоказыватьГрупповыеОС();
	
	УправлениеФормой(ЭтотОбъект);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект, "ИерархияОС");
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект, "ПодборТаблицаОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоКонтрагенту(Контрагент);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И ДобавленыНовыеОС Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если НЕ ПеренестиВДокумент И ДобавленыНовыеОС Тогда

		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Подобранные основные средства не перенесены в документ.
			|
			|Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ИсторияПоискаОС", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());

	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПодборОС", "", ПараметрыЗакрытия);

	Если ПеренестиВДокумент Тогда
		АдресОСВХранилище = ПоместитьОСВХранилище();
		Структура = Новый Структура("АдресОСВХранилище", АдресОСВХранилище);
		ПеренестиВДокумент = Истина;
		ОповеститьОВыборе(Структура);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииПриИзменении(Элемент)
	
	ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("СпособНачисленияАмортизации", СпособНачисленияАмортизации);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияОС

&НаКлиенте
Процедура ИерархияОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииОС(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияОСПриАктивизацииСтроки(Элемент)

	ТекущаяСтрока = Элементы.ИерархияОС.ТекущаяСтрока;
	Если ТекущаяСтрока <> ТекущаяГруппаОС Тогда
		ТекущаяГруппаОС = ТекущаяСтрока;
		УстановитьОтборПоИерархииОС(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодборТаблицаОС

&НаКлиенте
Процедура ПодборТаблицаОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		СтруктураПараметрыОС = Новый Структура;
		СтруктураПараметрыОС.Вставить("ОсновноеСредство", Элемент.ТекущиеДанные.Ссылка);
		ДобавитьВКорзину(СтруктураПараметрыОС, 1);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформационнуюНадпись(Форма)

	ШаблонНадписи = НСтр("ru = 'Всего подобрано %1 позиции(ия)'");
	Форма.ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи, Форма.Объект.Корзина.Количество());

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииОС(ГруппаОС)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПодборТаблицаОС, "Ссылка",
		ГруппаОС, ЗначениеЗаполнено(ГруппаОС), ВидСравненияКомпоновкиДанных.ВИерархии);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКонтрагенту(Контрагент)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПодборТаблицаОС, "Контрагент",
		Контрагент, ЗначениеЗаполнено(Контрагент), ВидСравненияКомпоновкиДанных.Равно);

КонецПроцедуры

&НаСервере
Функция ЗапросДинамическогоСпискаПодборОССОстатками()
	
	Возврат  
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияОСОрганизаций.Период) КАК Период,
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ МаксДатаПринятияКУчету
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксДатаПринятияКУчету.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	СостоянияОСОрганизаций.Период КАК Период
	|ПОМЕСТИТЬ СведенияОбОрганизации
	|ИЗ
	|	МаксДатаПринятияКУчету КАК МаксДатаПринятияКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО МаксДатаПринятияКУчету.Период = СостоянияОСОрганизаций.Период
	|			И МаксДатаПринятияКУчету.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ ВыработкаОСОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(, &ДатаОстатков, , Организация = &Организация) КАК ВыработкаОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникОсновныеСредства.Ссылка КАК Ссылка,
	|	СправочникОсновныеСредства.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникОсновныеСредства.Родитель КАК Родитель,
	|	СправочникОсновныеСредства.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникОсновныеСредства.Код КАК Код,
	|	СправочникОсновныеСредства.Наименование КАК Наименование,
	|	СправочникОсновныеСредства.НаименованиеПолное КАК НаименованиеПолное,
	|	РАЗНОСТЬДАТ(&ДатаОстатков, ДОБАВИТЬКДАТЕ(СведенияОбОрганизации.Период, МЕСЯЦ, ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования), МЕСЯЦ) КАК ОстатокСрока,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка))
	|		ИНАЧЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
	|	КОНЕЦ КАК СпособНачисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот - ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОстатокРабот
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СправочникОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОрганизации КАК СведенияОбОрганизации
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СведенияОбОрганизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОСОбороты КАК ВыработкаОСОбороты
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|			И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка))
	|					ИНАЧЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
	|				КОНЕЦ = &СпособНачисленияАмортизации
	|		КОНЕЦ
	|	И СправочникОсновныеСредства.ЕдиницаУчета <> ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникОсновныеСредства.Ссылка,
	|	СправочникОсновныеСредства.ПометкаУдаления,
	|	СправочникОсновныеСредства.Родитель,
	|	СправочникОсновныеСредства.ЭтоГруппа,
	|	СправочникОсновныеСредства.Код,
	|	СправочникОсновныеСредства.Наименование,
	|	СправочникОсновныеСредства.НаименованиеПолное,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный),
	|	0
	|ИЗ
	|	Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|ГДЕ
	|	СправочникОсновныеСредства.ЕдиницаУчета = ЗНАЧЕНИЕ(Перечисление.ЕдиницыУчетаОС.ГрупповойОбъект)
	|	И ВЫБОР
	|			КОГДА &СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ &СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
	|		КОНЕЦ";
	
КонецФункции

&НаСервере
Процедура НастроитьСписокПоказыватьГрупповыеОС()
	
	Если Не ПоказыватьГрупповыеОС Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ПодборТаблицаОС,
			"Ссылка.ЕдиницаУчета",
			Перечисления.ЕдиницыУчетаОС.ГрупповойОбъект,
			ВидСравненияКомпоновкиДанных.НеРавно,
			,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокПоказатьОстатки(Параметры)
	
	Если ПоказатьОстатки Тогда
		ПодборТаблицаОС.ТекстЗапроса = ЗапросДинамическогоСпискаПодборОССОстатками();
		
		ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("ДатаОстатков", Параметры.ДатаОстатков);
		ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("Организация",  Параметры.Организация);
		ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("СпособНачисленияАмортизации", СпособНачисленияАмортизации);
			
		// Добавим отбор остатка срока по умолчанию
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ПодборТаблицаОС,
			"ОстатокСрока", 
			24,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапросДинамическогоСпискаПодборОССПервоначальнойСтоимостью()
	
	Возврат
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Субконто1 КАК ОсновноеСредство,
	|	Остатки.Счет КАК Счет,
	|	Остатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	Остатки.СуммаОстатокКт КАК СуммаОстатокКт
	|ПОМЕСТИТЬ ОстаткиБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаБухгалтерскогоУчетаОС.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОС),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникОсновныеСредства.Ссылка КАК Ссылка,
	|	СправочникОсновныеСредства.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникОсновныеСредства.Родитель КАК Родитель,
	|	СправочникОсновныеСредства.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникОсновныеСредства.Код КАК Код,
	|	СправочникОсновныеСредства.Наименование КАК Наименование,
	|	СправочникОсновныеСредства.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК ПервоначальнаяСтоимость
	|ИЗ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СправочникОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиБУ КАК СтоимостьОС
	|		ПО (СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство)
	|			И (СтоимостьОС.Счет = СчетаБухгалтерскогоУчетаОС.СчетУчета)";
	
КонецФункции

&НаСервере
Процедура НастроитьСписокПоказатьОстаточнуюСтоимость(Параметры)
	
	Если ПоказатьПервоначальнуюСтоимость Тогда
		ПодборТаблицаОС.ТекстЗапроса = ЗапросДинамическогоСпискаПодборОССПервоначальнойСтоимостью();
		ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("ДатаОстатков", Параметры.ДатаОстатков);
		ПодборТаблицаОС.Параметры.УстановитьЗначениеПараметра("Организация",  Параметры.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПодборТаблицаОСГруппаОстатки.Видимость = Форма.ПоказатьОстатки;
	Элементы.ГруппаОтборОстатки.Видимость = Форма.ПоказатьОстатки;
	
	Если Форма.ПоказатьОстатки Тогда
		ПоказатьВыработку = 
			(Форма.СпособНачисленияАмортизации 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
		Элементы.ПодборТаблицаОСОстатокРабот.Видимость = ПоказатьВыработку;
		Элементы.ПодборТаблицаОСОстатокСрока.Видимость = Не ПоказатьВыработку;
		Элементы.ПодборТаблицаОССпособНачисленияАмортизации.Видимость = Не (ЗначениеЗаполнено(Форма.СпособНачисленияАмортизации));
	КонецЕсли;
	
	Если Форма.ПоказатьПервоначальнуюСтоимость Тогда
		Элементы.ПодборТаблицаОСПервоначальнаяСтоимость.Видимость = Форма.ПоказатьПервоначальнуюСтоимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()

	Использование = ЗначениеЗаполнено(СтрокаПоиска);

	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтаФорма.ПодборТаблицаОС.Отбор.Элементы, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Наименование", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "НаименованиеПолное", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Код", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ОС = Объект.Корзина.Выгрузить();

	АдресОСВХранилище = ПоместитьВоВременноеХранилище(ОС, УникальныйИдентификатор);

	Возврат АдресОСВХранилище;

КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыОС, Количество)

	РезультатПоиска = Объект.Корзина.НайтиСтроки(ПараметрыОС);
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыОС);

		ДобавленыНовыеОС = Истина;
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;

	// Активизируем текущую строку табличной части
	Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

	СформироватьИнформационнуюНадпись(ЭтаФорма);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ДобавленыНовыеОС = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти